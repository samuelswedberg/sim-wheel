
stm-freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013ed0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c8  080140a0  080140a0  000150a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014768  08014768  000164a8  2**0
                  CONTENTS
  4 .ARM          00000008  08014768  08014768  00015768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014770  08014770  000164a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014770  08014770  00015770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08014774  08014774  00015774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000004a8  20000000  08014778  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000053bc  200004a8  08014c20  000164a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005864  08014c20  00016864  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000164a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002af40  00000000  00000000  000164d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006aae  00000000  00000000  00041418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002348  00000000  00000000  00047ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001b54  00000000  00000000  0004a210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a945  00000000  00000000  0004bd64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d2f3  00000000  00000000  000766a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6270  00000000  00000000  000a399c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00189c0c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a604  00000000  00000000  00189c50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  00194254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200004a8 	.word	0x200004a8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08014088 	.word	0x08014088

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200004ac 	.word	0x200004ac
 800020c:	08014088 	.word	0x08014088

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2iz>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b94:	d215      	bcs.n	8000bc2 <__aeabi_d2iz+0x36>
 8000b96:	d511      	bpl.n	8000bbc <__aeabi_d2iz+0x30>
 8000b98:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d912      	bls.n	8000bc8 <__aeabi_d2iz+0x3c>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bb2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	4240      	negne	r0, r0
 8000bba:	4770      	bx	lr
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc6:	d105      	bne.n	8000bd4 <__aeabi_d2iz+0x48>
 8000bc8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bcc:	bf08      	it	eq
 8000bce:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <__aeabi_d2uiz>:
 8000bdc:	004a      	lsls	r2, r1, #1
 8000bde:	d211      	bcs.n	8000c04 <__aeabi_d2uiz+0x28>
 8000be0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be4:	d211      	bcs.n	8000c0a <__aeabi_d2uiz+0x2e>
 8000be6:	d50d      	bpl.n	8000c04 <__aeabi_d2uiz+0x28>
 8000be8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bf0:	d40e      	bmi.n	8000c10 <__aeabi_d2uiz+0x34>
 8000bf2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bfa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfe:	fa23 f002 	lsr.w	r0, r3, r2
 8000c02:	4770      	bx	lr
 8000c04:	f04f 0000 	mov.w	r0, #0
 8000c08:	4770      	bx	lr
 8000c0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0e:	d102      	bne.n	8000c16 <__aeabi_d2uiz+0x3a>
 8000c10:	f04f 30ff 	mov.w	r0, #4294967295
 8000c14:	4770      	bx	lr
 8000c16:	f04f 0000 	mov.w	r0, #0
 8000c1a:	4770      	bx	lr

08000c1c <__aeabi_d2f>:
 8000c1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c24:	bf24      	itt	cs
 8000c26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2e:	d90d      	bls.n	8000c4c <__aeabi_d2f+0x30>
 8000c30:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c3c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c44:	bf08      	it	eq
 8000c46:	f020 0001 	biceq.w	r0, r0, #1
 8000c4a:	4770      	bx	lr
 8000c4c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c50:	d121      	bne.n	8000c96 <__aeabi_d2f+0x7a>
 8000c52:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c56:	bfbc      	itt	lt
 8000c58:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c5c:	4770      	bxlt	lr
 8000c5e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c66:	f1c2 0218 	rsb	r2, r2, #24
 8000c6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c72:	fa20 f002 	lsr.w	r0, r0, r2
 8000c76:	bf18      	it	ne
 8000c78:	f040 0001 	orrne.w	r0, r0, #1
 8000c7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c88:	ea40 000c 	orr.w	r0, r0, ip
 8000c8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c94:	e7cc      	b.n	8000c30 <__aeabi_d2f+0x14>
 8000c96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c9a:	d107      	bne.n	8000cac <__aeabi_d2f+0x90>
 8000c9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ca0:	bf1e      	ittt	ne
 8000ca2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000caa:	4770      	bxne	lr
 8000cac:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cb0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop

08000cbc <__aeabi_uldivmod>:
 8000cbc:	b953      	cbnz	r3, 8000cd4 <__aeabi_uldivmod+0x18>
 8000cbe:	b94a      	cbnz	r2, 8000cd4 <__aeabi_uldivmod+0x18>
 8000cc0:	2900      	cmp	r1, #0
 8000cc2:	bf08      	it	eq
 8000cc4:	2800      	cmpeq	r0, #0
 8000cc6:	bf1c      	itt	ne
 8000cc8:	f04f 31ff 	movne.w	r1, #4294967295
 8000ccc:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd0:	f000 b9a0 	b.w	8001014 <__aeabi_idiv0>
 8000cd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cdc:	f000 f83c 	bl	8000d58 <__udivmoddi4>
 8000ce0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce8:	b004      	add	sp, #16
 8000cea:	4770      	bx	lr

08000cec <__aeabi_d2lz>:
 8000cec:	b538      	push	{r3, r4, r5, lr}
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	4604      	mov	r4, r0
 8000cf4:	460d      	mov	r5, r1
 8000cf6:	f7ff ff21 	bl	8000b3c <__aeabi_dcmplt>
 8000cfa:	b928      	cbnz	r0, 8000d08 <__aeabi_d2lz+0x1c>
 8000cfc:	4620      	mov	r0, r4
 8000cfe:	4629      	mov	r1, r5
 8000d00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d04:	f000 b80a 	b.w	8000d1c <__aeabi_d2ulz>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d0e:	f000 f805 	bl	8000d1c <__aeabi_d2ulz>
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	bd38      	pop	{r3, r4, r5, pc}
 8000d1a:	bf00      	nop

08000d1c <__aeabi_d2ulz>:
 8000d1c:	b5d0      	push	{r4, r6, r7, lr}
 8000d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d50 <__aeabi_d2ulz+0x34>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	4606      	mov	r6, r0
 8000d24:	460f      	mov	r7, r1
 8000d26:	f7ff fc97 	bl	8000658 <__aeabi_dmul>
 8000d2a:	f7ff ff57 	bl	8000bdc <__aeabi_d2uiz>
 8000d2e:	4604      	mov	r4, r0
 8000d30:	f7ff fc18 	bl	8000564 <__aeabi_ui2d>
 8000d34:	4b07      	ldr	r3, [pc, #28]	@ (8000d54 <__aeabi_d2ulz+0x38>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	f7ff fc8e 	bl	8000658 <__aeabi_dmul>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	460b      	mov	r3, r1
 8000d40:	4630      	mov	r0, r6
 8000d42:	4639      	mov	r1, r7
 8000d44:	f7ff fad0 	bl	80002e8 <__aeabi_dsub>
 8000d48:	f7ff ff48 	bl	8000bdc <__aeabi_d2uiz>
 8000d4c:	4621      	mov	r1, r4
 8000d4e:	bdd0      	pop	{r4, r6, r7, pc}
 8000d50:	3df00000 	.word	0x3df00000
 8000d54:	41f00000 	.word	0x41f00000

08000d58 <__udivmoddi4>:
 8000d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d5c:	9d08      	ldr	r5, [sp, #32]
 8000d5e:	460c      	mov	r4, r1
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d14e      	bne.n	8000e02 <__udivmoddi4+0xaa>
 8000d64:	4694      	mov	ip, r2
 8000d66:	458c      	cmp	ip, r1
 8000d68:	4686      	mov	lr, r0
 8000d6a:	fab2 f282 	clz	r2, r2
 8000d6e:	d962      	bls.n	8000e36 <__udivmoddi4+0xde>
 8000d70:	b14a      	cbz	r2, 8000d86 <__udivmoddi4+0x2e>
 8000d72:	f1c2 0320 	rsb	r3, r2, #32
 8000d76:	4091      	lsls	r1, r2
 8000d78:	fa20 f303 	lsr.w	r3, r0, r3
 8000d7c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d80:	4319      	orrs	r1, r3
 8000d82:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d8a:	fa1f f68c 	uxth.w	r6, ip
 8000d8e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d92:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d96:	fb07 1114 	mls	r1, r7, r4, r1
 8000d9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9e:	fb04 f106 	mul.w	r1, r4, r6
 8000da2:	4299      	cmp	r1, r3
 8000da4:	d90a      	bls.n	8000dbc <__udivmoddi4+0x64>
 8000da6:	eb1c 0303 	adds.w	r3, ip, r3
 8000daa:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dae:	f080 8112 	bcs.w	8000fd6 <__udivmoddi4+0x27e>
 8000db2:	4299      	cmp	r1, r3
 8000db4:	f240 810f 	bls.w	8000fd6 <__udivmoddi4+0x27e>
 8000db8:	3c02      	subs	r4, #2
 8000dba:	4463      	add	r3, ip
 8000dbc:	1a59      	subs	r1, r3, r1
 8000dbe:	fa1f f38e 	uxth.w	r3, lr
 8000dc2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc6:	fb07 1110 	mls	r1, r7, r0, r1
 8000dca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dce:	fb00 f606 	mul.w	r6, r0, r6
 8000dd2:	429e      	cmp	r6, r3
 8000dd4:	d90a      	bls.n	8000dec <__udivmoddi4+0x94>
 8000dd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dda:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dde:	f080 80fc 	bcs.w	8000fda <__udivmoddi4+0x282>
 8000de2:	429e      	cmp	r6, r3
 8000de4:	f240 80f9 	bls.w	8000fda <__udivmoddi4+0x282>
 8000de8:	4463      	add	r3, ip
 8000dea:	3802      	subs	r0, #2
 8000dec:	1b9b      	subs	r3, r3, r6
 8000dee:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000df2:	2100      	movs	r1, #0
 8000df4:	b11d      	cbz	r5, 8000dfe <__udivmoddi4+0xa6>
 8000df6:	40d3      	lsrs	r3, r2
 8000df8:	2200      	movs	r2, #0
 8000dfa:	e9c5 3200 	strd	r3, r2, [r5]
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	428b      	cmp	r3, r1
 8000e04:	d905      	bls.n	8000e12 <__udivmoddi4+0xba>
 8000e06:	b10d      	cbz	r5, 8000e0c <__udivmoddi4+0xb4>
 8000e08:	e9c5 0100 	strd	r0, r1, [r5]
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	4608      	mov	r0, r1
 8000e10:	e7f5      	b.n	8000dfe <__udivmoddi4+0xa6>
 8000e12:	fab3 f183 	clz	r1, r3
 8000e16:	2900      	cmp	r1, #0
 8000e18:	d146      	bne.n	8000ea8 <__udivmoddi4+0x150>
 8000e1a:	42a3      	cmp	r3, r4
 8000e1c:	d302      	bcc.n	8000e24 <__udivmoddi4+0xcc>
 8000e1e:	4290      	cmp	r0, r2
 8000e20:	f0c0 80f0 	bcc.w	8001004 <__udivmoddi4+0x2ac>
 8000e24:	1a86      	subs	r6, r0, r2
 8000e26:	eb64 0303 	sbc.w	r3, r4, r3
 8000e2a:	2001      	movs	r0, #1
 8000e2c:	2d00      	cmp	r5, #0
 8000e2e:	d0e6      	beq.n	8000dfe <__udivmoddi4+0xa6>
 8000e30:	e9c5 6300 	strd	r6, r3, [r5]
 8000e34:	e7e3      	b.n	8000dfe <__udivmoddi4+0xa6>
 8000e36:	2a00      	cmp	r2, #0
 8000e38:	f040 8090 	bne.w	8000f5c <__udivmoddi4+0x204>
 8000e3c:	eba1 040c 	sub.w	r4, r1, ip
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa1f f78c 	uxth.w	r7, ip
 8000e48:	2101      	movs	r1, #1
 8000e4a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e4e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e52:	fb08 4416 	mls	r4, r8, r6, r4
 8000e56:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e5a:	fb07 f006 	mul.w	r0, r7, r6
 8000e5e:	4298      	cmp	r0, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x11c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e6a:	d202      	bcs.n	8000e72 <__udivmoddi4+0x11a>
 8000e6c:	4298      	cmp	r0, r3
 8000e6e:	f200 80cd 	bhi.w	800100c <__udivmoddi4+0x2b4>
 8000e72:	4626      	mov	r6, r4
 8000e74:	1a1c      	subs	r4, r3, r0
 8000e76:	fa1f f38e 	uxth.w	r3, lr
 8000e7a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e7e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e86:	fb00 f707 	mul.w	r7, r0, r7
 8000e8a:	429f      	cmp	r7, r3
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x148>
 8000e8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e92:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x146>
 8000e98:	429f      	cmp	r7, r3
 8000e9a:	f200 80b0 	bhi.w	8000ffe <__udivmoddi4+0x2a6>
 8000e9e:	4620      	mov	r0, r4
 8000ea0:	1bdb      	subs	r3, r3, r7
 8000ea2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ea6:	e7a5      	b.n	8000df4 <__udivmoddi4+0x9c>
 8000ea8:	f1c1 0620 	rsb	r6, r1, #32
 8000eac:	408b      	lsls	r3, r1
 8000eae:	fa22 f706 	lsr.w	r7, r2, r6
 8000eb2:	431f      	orrs	r7, r3
 8000eb4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000eb8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ebc:	ea43 030c 	orr.w	r3, r3, ip
 8000ec0:	40f4      	lsrs	r4, r6
 8000ec2:	fa00 f801 	lsl.w	r8, r0, r1
 8000ec6:	0c38      	lsrs	r0, r7, #16
 8000ec8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ecc:	fbb4 fef0 	udiv	lr, r4, r0
 8000ed0:	fa1f fc87 	uxth.w	ip, r7
 8000ed4:	fb00 441e 	mls	r4, r0, lr, r4
 8000ed8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000edc:	fb0e f90c 	mul.w	r9, lr, ip
 8000ee0:	45a1      	cmp	r9, r4
 8000ee2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ee6:	d90a      	bls.n	8000efe <__udivmoddi4+0x1a6>
 8000ee8:	193c      	adds	r4, r7, r4
 8000eea:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eee:	f080 8084 	bcs.w	8000ffa <__udivmoddi4+0x2a2>
 8000ef2:	45a1      	cmp	r9, r4
 8000ef4:	f240 8081 	bls.w	8000ffa <__udivmoddi4+0x2a2>
 8000ef8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000efc:	443c      	add	r4, r7
 8000efe:	eba4 0409 	sub.w	r4, r4, r9
 8000f02:	fa1f f983 	uxth.w	r9, r3
 8000f06:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f0a:	fb00 4413 	mls	r4, r0, r3, r4
 8000f0e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f12:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f16:	45a4      	cmp	ip, r4
 8000f18:	d907      	bls.n	8000f2a <__udivmoddi4+0x1d2>
 8000f1a:	193c      	adds	r4, r7, r4
 8000f1c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f20:	d267      	bcs.n	8000ff2 <__udivmoddi4+0x29a>
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d965      	bls.n	8000ff2 <__udivmoddi4+0x29a>
 8000f26:	3b02      	subs	r3, #2
 8000f28:	443c      	add	r4, r7
 8000f2a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f2e:	fba0 9302 	umull	r9, r3, r0, r2
 8000f32:	eba4 040c 	sub.w	r4, r4, ip
 8000f36:	429c      	cmp	r4, r3
 8000f38:	46ce      	mov	lr, r9
 8000f3a:	469c      	mov	ip, r3
 8000f3c:	d351      	bcc.n	8000fe2 <__udivmoddi4+0x28a>
 8000f3e:	d04e      	beq.n	8000fde <__udivmoddi4+0x286>
 8000f40:	b155      	cbz	r5, 8000f58 <__udivmoddi4+0x200>
 8000f42:	ebb8 030e 	subs.w	r3, r8, lr
 8000f46:	eb64 040c 	sbc.w	r4, r4, ip
 8000f4a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f4e:	40cb      	lsrs	r3, r1
 8000f50:	431e      	orrs	r6, r3
 8000f52:	40cc      	lsrs	r4, r1
 8000f54:	e9c5 6400 	strd	r6, r4, [r5]
 8000f58:	2100      	movs	r1, #0
 8000f5a:	e750      	b.n	8000dfe <__udivmoddi4+0xa6>
 8000f5c:	f1c2 0320 	rsb	r3, r2, #32
 8000f60:	fa20 f103 	lsr.w	r1, r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa24 f303 	lsr.w	r3, r4, r3
 8000f6c:	4094      	lsls	r4, r2
 8000f6e:	430c      	orrs	r4, r1
 8000f70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f74:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f78:	fa1f f78c 	uxth.w	r7, ip
 8000f7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f80:	fb08 3110 	mls	r1, r8, r0, r3
 8000f84:	0c23      	lsrs	r3, r4, #16
 8000f86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f8a:	fb00 f107 	mul.w	r1, r0, r7
 8000f8e:	4299      	cmp	r1, r3
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x24c>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f9a:	d22c      	bcs.n	8000ff6 <__udivmoddi4+0x29e>
 8000f9c:	4299      	cmp	r1, r3
 8000f9e:	d92a      	bls.n	8000ff6 <__udivmoddi4+0x29e>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1a5b      	subs	r3, r3, r1
 8000fa6:	b2a4      	uxth	r4, r4
 8000fa8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fac:	fb08 3311 	mls	r3, r8, r1, r3
 8000fb0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fb4:	fb01 f307 	mul.w	r3, r1, r7
 8000fb8:	42a3      	cmp	r3, r4
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x276>
 8000fbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000fc0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fc4:	d213      	bcs.n	8000fee <__udivmoddi4+0x296>
 8000fc6:	42a3      	cmp	r3, r4
 8000fc8:	d911      	bls.n	8000fee <__udivmoddi4+0x296>
 8000fca:	3902      	subs	r1, #2
 8000fcc:	4464      	add	r4, ip
 8000fce:	1ae4      	subs	r4, r4, r3
 8000fd0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fd4:	e739      	b.n	8000e4a <__udivmoddi4+0xf2>
 8000fd6:	4604      	mov	r4, r0
 8000fd8:	e6f0      	b.n	8000dbc <__udivmoddi4+0x64>
 8000fda:	4608      	mov	r0, r1
 8000fdc:	e706      	b.n	8000dec <__udivmoddi4+0x94>
 8000fde:	45c8      	cmp	r8, r9
 8000fe0:	d2ae      	bcs.n	8000f40 <__udivmoddi4+0x1e8>
 8000fe2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fe6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fea:	3801      	subs	r0, #1
 8000fec:	e7a8      	b.n	8000f40 <__udivmoddi4+0x1e8>
 8000fee:	4631      	mov	r1, r6
 8000ff0:	e7ed      	b.n	8000fce <__udivmoddi4+0x276>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	e799      	b.n	8000f2a <__udivmoddi4+0x1d2>
 8000ff6:	4630      	mov	r0, r6
 8000ff8:	e7d4      	b.n	8000fa4 <__udivmoddi4+0x24c>
 8000ffa:	46d6      	mov	lr, sl
 8000ffc:	e77f      	b.n	8000efe <__udivmoddi4+0x1a6>
 8000ffe:	4463      	add	r3, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e74d      	b.n	8000ea0 <__udivmoddi4+0x148>
 8001004:	4606      	mov	r6, r0
 8001006:	4623      	mov	r3, r4
 8001008:	4608      	mov	r0, r1
 800100a:	e70f      	b.n	8000e2c <__udivmoddi4+0xd4>
 800100c:	3e02      	subs	r6, #2
 800100e:	4463      	add	r3, ip
 8001010:	e730      	b.n	8000e74 <__udivmoddi4+0x11c>
 8001012:	bf00      	nop

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d002      	beq.n	800102e <case_insensitive_strcmp+0x16>
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d101      	bne.n	8001032 <case_insensitive_strcmp+0x1a>
    {
        return 1;
 800102e:	2301      	movs	r3, #1
 8001030:	e056      	b.n	80010e0 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	429a      	cmp	r2, r3
 8001038:	d10d      	bne.n	8001056 <case_insensitive_strcmp+0x3e>
    {
        return 0;
 800103a:	2300      	movs	r3, #0
 800103c:	e050      	b.n	80010e0 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d101      	bne.n	800104a <case_insensitive_strcmp+0x32>
        {
            return 0;
 8001046:	2300      	movs	r3, #0
 8001048:	e04a      	b.n	80010e0 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	3301      	adds	r3, #1
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	3301      	adds	r3, #1
 8001054:	603b      	str	r3, [r7, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	73fb      	strb	r3, [r7, #15]
 800105c:	7bfb      	ldrb	r3, [r7, #15]
 800105e:	3301      	adds	r3, #1
 8001060:	4a22      	ldr	r2, [pc, #136]	@ (80010ec <case_insensitive_strcmp+0xd4>)
 8001062:	4413      	add	r3, r2
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	f003 0303 	and.w	r3, r3, #3
 800106a:	2b01      	cmp	r3, #1
 800106c:	d103      	bne.n	8001076 <case_insensitive_strcmp+0x5e>
 800106e:	7bfb      	ldrb	r3, [r7, #15]
 8001070:	f103 0220 	add.w	r2, r3, #32
 8001074:	e000      	b.n	8001078 <case_insensitive_strcmp+0x60>
 8001076:	7bfa      	ldrb	r2, [r7, #15]
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	73bb      	strb	r3, [r7, #14]
 800107e:	7bbb      	ldrb	r3, [r7, #14]
 8001080:	3301      	adds	r3, #1
 8001082:	491a      	ldr	r1, [pc, #104]	@ (80010ec <case_insensitive_strcmp+0xd4>)
 8001084:	440b      	add	r3, r1
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	f003 0303 	and.w	r3, r3, #3
 800108c:	2b01      	cmp	r3, #1
 800108e:	d102      	bne.n	8001096 <case_insensitive_strcmp+0x7e>
 8001090:	7bbb      	ldrb	r3, [r7, #14]
 8001092:	3320      	adds	r3, #32
 8001094:	e000      	b.n	8001098 <case_insensitive_strcmp+0x80>
 8001096:	7bbb      	ldrb	r3, [r7, #14]
 8001098:	429a      	cmp	r2, r3
 800109a:	d0d0      	beq.n	800103e <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	737b      	strb	r3, [r7, #13]
 80010a2:	7b7b      	ldrb	r3, [r7, #13]
 80010a4:	3301      	adds	r3, #1
 80010a6:	4a11      	ldr	r2, [pc, #68]	@ (80010ec <case_insensitive_strcmp+0xd4>)
 80010a8:	4413      	add	r3, r2
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	f003 0303 	and.w	r3, r3, #3
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d103      	bne.n	80010bc <case_insensitive_strcmp+0xa4>
 80010b4:	7b7b      	ldrb	r3, [r7, #13]
 80010b6:	f103 0220 	add.w	r2, r3, #32
 80010ba:	e000      	b.n	80010be <case_insensitive_strcmp+0xa6>
 80010bc:	7b7a      	ldrb	r2, [r7, #13]
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	733b      	strb	r3, [r7, #12]
 80010c4:	7b3b      	ldrb	r3, [r7, #12]
 80010c6:	3301      	adds	r3, #1
 80010c8:	4908      	ldr	r1, [pc, #32]	@ (80010ec <case_insensitive_strcmp+0xd4>)
 80010ca:	440b      	add	r3, r1
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	f003 0303 	and.w	r3, r3, #3
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d102      	bne.n	80010dc <case_insensitive_strcmp+0xc4>
 80010d6:	7b3b      	ldrb	r3, [r7, #12]
 80010d8:	3320      	adds	r3, #32
 80010da:	e000      	b.n	80010de <case_insensitive_strcmp+0xc6>
 80010dc:	7b3b      	ldrb	r3, [r7, #12]
 80010de:	1ad3      	subs	r3, r2, r3
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	08014410 	.word	0x08014410

080010f0 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2028      	movs	r0, #40	@ 0x28
 80010fe:	4798      	blx	r3
 8001100:	60f8      	str	r0, [r7, #12]
    if (node)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d004      	beq.n	8001112 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8001108:	2228      	movs	r2, #40	@ 0x28
 800110a:	2100      	movs	r1, #0
 800110c:	68f8      	ldr	r0, [r7, #12]
 800110e:	f010 ffc0 	bl	8012092 <memset>
    }

    return node;
 8001112:	68fb      	ldr	r3, [r7, #12]
}
 8001114:	4618      	mov	r0, r3
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8001124:	2300      	movs	r3, #0
 8001126:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8001128:	e03d      	b.n	80011a6 <cJSON_Delete+0x8a>
    {
        next = item->next;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001138:	2b00      	cmp	r3, #0
 800113a:	d108      	bne.n	800114e <cJSON_Delete+0x32>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d004      	beq.n	800114e <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ffe7 	bl	800111c <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001156:	2b00      	cmp	r3, #0
 8001158:	d10c      	bne.n	8001174 <cJSON_Delete+0x58>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	691b      	ldr	r3, [r3, #16]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d008      	beq.n	8001174 <cJSON_Delete+0x58>
        {
            global_hooks.deallocate(item->valuestring);
 8001162:	4b15      	ldr	r3, [pc, #84]	@ (80011b8 <cJSON_Delete+0x9c>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	6912      	ldr	r2, [r2, #16]
 800116a:	4610      	mov	r0, r2
 800116c:	4798      	blx	r3
            item->valuestring = NULL;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	611a      	str	r2, [r3, #16]
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800117c:	2b00      	cmp	r3, #0
 800117e:	d10c      	bne.n	800119a <cJSON_Delete+0x7e>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6a1b      	ldr	r3, [r3, #32]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d008      	beq.n	800119a <cJSON_Delete+0x7e>
        {
            global_hooks.deallocate(item->string);
 8001188:	4b0b      	ldr	r3, [pc, #44]	@ (80011b8 <cJSON_Delete+0x9c>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	6a12      	ldr	r2, [r2, #32]
 8001190:	4610      	mov	r0, r2
 8001192:	4798      	blx	r3
            item->string = NULL;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	621a      	str	r2, [r3, #32]
        }
        global_hooks.deallocate(item);
 800119a:	4b07      	ldr	r3, [pc, #28]	@ (80011b8 <cJSON_Delete+0x9c>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	4798      	blx	r3
        item = next;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d1be      	bne.n	800112a <cJSON_Delete+0xe>
    }
}
 80011ac:	bf00      	nop
 80011ae:	bf00      	nop
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000000 	.word	0x20000000

080011bc <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 80011c0:	232e      	movs	r3, #46	@ 0x2e
#endif
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	0000      	movs	r0, r0
	...

080011d0 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b098      	sub	sp, #96	@ 0x60
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
    double number = 0;
 80011da:	f04f 0200 	mov.w	r2, #0
 80011de:	f04f 0300 	mov.w	r3, #0
 80011e2:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    unsigned char *after_end = NULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	64bb      	str	r3, [r7, #72]	@ 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 80011ea:	f7ff ffe7 	bl	80011bc <get_decimal_point>
 80011ee:	4603      	mov	r3, r0
 80011f0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    size_t i = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	65fb      	str	r3, [r7, #92]	@ 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <parse_number+0x36>
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d101      	bne.n	800120a <parse_number+0x3a>
    {
        return false;
 8001206:	2300      	movs	r3, #0
 8001208:	e0a0      	b.n	800134c <parse_number+0x17c>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800120a:	2300      	movs	r3, #0
 800120c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800120e:	e03d      	b.n	800128c <parse_number+0xbc>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	6899      	ldr	r1, [r3, #8]
 8001218:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800121a:	440b      	add	r3, r1
 800121c:	4413      	add	r3, r2
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b45      	cmp	r3, #69	@ 0x45
 8001222:	dc17      	bgt.n	8001254 <parse_number+0x84>
 8001224:	2b2b      	cmp	r3, #43	@ 0x2b
 8001226:	db40      	blt.n	80012aa <parse_number+0xda>
 8001228:	3b2b      	subs	r3, #43	@ 0x2b
 800122a:	2201      	movs	r2, #1
 800122c:	409a      	lsls	r2, r3
 800122e:	4b4c      	ldr	r3, [pc, #304]	@ (8001360 <parse_number+0x190>)
 8001230:	4013      	ands	r3, r2
 8001232:	2b00      	cmp	r3, #0
 8001234:	bf14      	ite	ne
 8001236:	2301      	movne	r3, #1
 8001238:	2300      	moveq	r3, #0
 800123a:	b2db      	uxtb	r3, r3
 800123c:	2b00      	cmp	r3, #0
 800123e:	d10b      	bne.n	8001258 <parse_number+0x88>
 8001240:	f002 0308 	and.w	r3, r2, #8
 8001244:	2b00      	cmp	r3, #0
 8001246:	bf14      	ite	ne
 8001248:	2301      	movne	r3, #1
 800124a:	2300      	moveq	r3, #0
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b00      	cmp	r3, #0
 8001250:	d111      	bne.n	8001276 <parse_number+0xa6>
            case '.':
                number_c_string[i] = decimal_point;
                break;

            default:
                goto loop_end;
 8001252:	e02a      	b.n	80012aa <parse_number+0xda>
        switch (buffer_at_offset(input_buffer)[i])
 8001254:	2b65      	cmp	r3, #101	@ 0x65
 8001256:	d128      	bne.n	80012aa <parse_number+0xda>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	6899      	ldr	r1, [r3, #8]
 8001260:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001262:	440b      	add	r3, r1
 8001264:	4413      	add	r3, r2
 8001266:	7819      	ldrb	r1, [r3, #0]
 8001268:	f107 0208 	add.w	r2, r7, #8
 800126c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800126e:	4413      	add	r3, r2
 8001270:	460a      	mov	r2, r1
 8001272:	701a      	strb	r2, [r3, #0]
                break;
 8001274:	e007      	b.n	8001286 <parse_number+0xb6>
                number_c_string[i] = decimal_point;
 8001276:	f107 0208 	add.w	r2, r7, #8
 800127a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800127c:	4413      	add	r3, r2
 800127e:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8001282:	701a      	strb	r2, [r3, #0]
                break;
 8001284:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8001286:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001288:	3301      	adds	r3, #1
 800128a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800128c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800128e:	2b3e      	cmp	r3, #62	@ 0x3e
 8001290:	d80d      	bhi.n	80012ae <parse_number+0xde>
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d00a      	beq.n	80012ae <parse_number+0xde>
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	689a      	ldr	r2, [r3, #8]
 800129c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800129e:	441a      	add	r2, r3
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d3b3      	bcc.n	8001210 <parse_number+0x40>
        }
    }
loop_end:
 80012a8:	e001      	b.n	80012ae <parse_number+0xde>
                goto loop_end;
 80012aa:	bf00      	nop
 80012ac:	e000      	b.n	80012b0 <parse_number+0xe0>
loop_end:
 80012ae:	bf00      	nop
    number_c_string[i] = '\0';
 80012b0:	f107 0208 	add.w	r2, r7, #8
 80012b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80012b6:	4413      	add	r3, r2
 80012b8:	2200      	movs	r2, #0
 80012ba:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 80012bc:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80012c0:	f107 0308 	add.w	r3, r7, #8
 80012c4:	4611      	mov	r1, r2
 80012c6:	4618      	mov	r0, r3
 80012c8:	f010 fd9e 	bl	8011e08 <strtod>
 80012cc:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
    if (number_c_string == after_end)
 80012d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80012d2:	f107 0308 	add.w	r3, r7, #8
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d101      	bne.n	80012de <parse_number+0x10e>
    {
        return false; /* parse_error */
 80012da:	2300      	movs	r3, #0
 80012dc:	e036      	b.n	800134c <parse_number+0x17c>
    }

    item->valuedouble = number;
 80012de:	6879      	ldr	r1, [r7, #4]
 80012e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80012e4:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 80012e8:	a31b      	add	r3, pc, #108	@ (adr r3, 8001358 <parse_number+0x188>)
 80012ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ee:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80012f2:	f7ff fc37 	bl	8000b64 <__aeabi_dcmpge>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d004      	beq.n	8001306 <parse_number+0x136>
    {
        item->valueint = INT_MAX;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001302:	615a      	str	r2, [r3, #20]
 8001304:	e015      	b.n	8001332 <parse_number+0x162>
    }
    else if (number <= (double)INT_MIN)
 8001306:	f04f 0200 	mov.w	r2, #0
 800130a:	4b16      	ldr	r3, [pc, #88]	@ (8001364 <parse_number+0x194>)
 800130c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001310:	f7ff fc1e 	bl	8000b50 <__aeabi_dcmple>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d004      	beq.n	8001324 <parse_number+0x154>
    {
        item->valueint = INT_MIN;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001320:	615a      	str	r2, [r3, #20]
 8001322:	e006      	b.n	8001332 <parse_number+0x162>
    }
    else
    {
        item->valueint = (int)number;
 8001324:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001328:	f7ff fc30 	bl	8000b8c <__aeabi_d2iz>
 800132c:	4602      	mov	r2, r0
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2208      	movs	r2, #8
 8001336:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800133e:	f107 0208 	add.w	r2, r7, #8
 8001342:	1a8a      	subs	r2, r1, r2
 8001344:	441a      	add	r2, r3
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	609a      	str	r2, [r3, #8]
    return true;
 800134a:	2301      	movs	r3, #1
}
 800134c:	4618      	mov	r0, r3
 800134e:	3760      	adds	r7, #96	@ 0x60
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	f3af 8000 	nop.w
 8001358:	ffc00000 	.word	0xffc00000
 800135c:	41dfffff 	.word	0x41dfffff
 8001360:	04007fe5 	.word	0x04007fe5
 8001364:	c1e00000 	.word	0xc1e00000

08001368 <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 8001370:	2300      	movs	r3, #0
 8001372:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 8001378:	2300      	movs	r3, #0
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	e04c      	b.n	8001418 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	4413      	add	r3, r2
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2b2f      	cmp	r3, #47	@ 0x2f
 8001388:	d90f      	bls.n	80013aa <parse_hex4+0x42>
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	4413      	add	r3, r2
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2b39      	cmp	r3, #57	@ 0x39
 8001394:	d809      	bhi.n	80013aa <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	4413      	add	r3, r2
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	461a      	mov	r2, r3
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4413      	add	r3, r2
 80013a4:	3b30      	subs	r3, #48	@ 0x30
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	e02d      	b.n	8001406 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	4413      	add	r3, r2
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b40      	cmp	r3, #64	@ 0x40
 80013b4:	d90f      	bls.n	80013d6 <parse_hex4+0x6e>
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	4413      	add	r3, r2
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b46      	cmp	r3, #70	@ 0x46
 80013c0:	d809      	bhi.n	80013d6 <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	4413      	add	r3, r2
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	461a      	mov	r2, r3
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	4413      	add	r3, r2
 80013d0:	3b37      	subs	r3, #55	@ 0x37
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	e017      	b.n	8001406 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	4413      	add	r3, r2
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b60      	cmp	r3, #96	@ 0x60
 80013e0:	d90f      	bls.n	8001402 <parse_hex4+0x9a>
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	4413      	add	r3, r2
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b66      	cmp	r3, #102	@ 0x66
 80013ec:	d809      	bhi.n	8001402 <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	4413      	add	r3, r2
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	461a      	mov	r2, r3
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	4413      	add	r3, r2
 80013fc:	3b57      	subs	r3, #87	@ 0x57
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	e001      	b.n	8001406 <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 8001402:	2300      	movs	r3, #0
 8001404:	e00c      	b.n	8001420 <parse_hex4+0xb8>
        }

        if (i < 3)
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	2b02      	cmp	r3, #2
 800140a:	d802      	bhi.n	8001412 <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	011b      	lsls	r3, r3, #4
 8001410:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	3301      	adds	r3, #1
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	2b03      	cmp	r3, #3
 800141c:	d9af      	bls.n	800137e <parse_hex4+0x16>
        }
    }

    return h;
 800141e:	68fb      	ldr	r3, [r7, #12]
}
 8001420:	4618      	mov	r0, r3
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08a      	sub	sp, #40	@ 0x28
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 8001438:	2300      	movs	r3, #0
 800143a:	627b      	str	r3, [r7, #36]	@ 0x24
    unsigned int first_code = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 8001444:	2300      	movs	r3, #0
 8001446:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    unsigned char utf8_position = 0;
 800144a:	2300      	movs	r3, #0
 800144c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    unsigned char sequence_length = 0;
 8001450:	2300      	movs	r3, #0
 8001452:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    unsigned char first_byte_mark = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 800145c:	68ba      	ldr	r2, [r7, #8]
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b05      	cmp	r3, #5
 8001464:	f340 80b7 	ble.w	80015d6 <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	3302      	adds	r3, #2
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff ff7b 	bl	8001368 <parse_hex4>
 8001472:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 800147a:	d304      	bcc.n	8001486 <utf16_literal_to_utf8+0x5a>
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 8001482:	f0c0 80aa 	bcc.w	80015da <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 800148c:	d337      	bcc.n	80014fe <utf16_literal_to_utf8+0xd2>
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 8001494:	d233      	bcs.n	80014fe <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	3306      	adds	r3, #6
 800149a:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 80014a0:	230c      	movs	r3, #12
 80014a2:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

        if ((input_end - second_sequence) < 6)
 80014a6:	68ba      	ldr	r2, [r7, #8]
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	2b05      	cmp	r3, #5
 80014ae:	f340 8096 	ble.w	80015de <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b5c      	cmp	r3, #92	@ 0x5c
 80014b8:	f040 8093 	bne.w	80015e2 <utf16_literal_to_utf8+0x1b6>
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	3301      	adds	r3, #1
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b75      	cmp	r3, #117	@ 0x75
 80014c4:	f040 808d 	bne.w	80015e2 <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	3302      	adds	r3, #2
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ff4b 	bl	8001368 <parse_hex4>
 80014d2:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 80014da:	f0c0 8084 	bcc.w	80015e6 <utf16_literal_to_utf8+0x1ba>
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 80014e4:	d27f      	bcs.n	80015e6 <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	029a      	lsls	r2, r3, #10
 80014ea:	4b43      	ldr	r3, [pc, #268]	@ (80015f8 <utf16_literal_to_utf8+0x1cc>)
 80014ec:	4013      	ands	r3, r2
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80014f4:	4313      	orrs	r3, r2
 80014f6:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80014fa:	627b      	str	r3, [r7, #36]	@ 0x24
    {
 80014fc:	e004      	b.n	8001508 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 80014fe:	2306      	movs	r3, #6
 8001500:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        codepoint = first_code;
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 8001508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800150a:	2b7f      	cmp	r3, #127	@ 0x7f
 800150c:	d803      	bhi.n	8001516 <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 800150e:	2301      	movs	r3, #1
 8001510:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001514:	e01f      	b.n	8001556 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 8001516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001518:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800151c:	d206      	bcs.n	800152c <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 800151e:	2302      	movs	r3, #2
 8001520:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 8001524:	23c0      	movs	r3, #192	@ 0xc0
 8001526:	f887 3020 	strb.w	r3, [r7, #32]
 800152a:	e014      	b.n	8001556 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 800152c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800152e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001532:	d206      	bcs.n	8001542 <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 8001534:	2303      	movs	r3, #3
 8001536:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 800153a:	23e0      	movs	r3, #224	@ 0xe0
 800153c:	f887 3020 	strb.w	r3, [r7, #32]
 8001540:	e009      	b.n	8001556 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 8001542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001544:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8001548:	d24f      	bcs.n	80015ea <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 800154a:	2304      	movs	r3, #4
 800154c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 8001550:	23f0      	movs	r3, #240	@ 0xf0
 8001552:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8001556:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800155a:	3b01      	subs	r3, #1
 800155c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001560:	e015      	b.n	800158e <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 8001562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001564:	b2db      	uxtb	r3, r3
 8001566:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800156a:	b2da      	uxtb	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6819      	ldr	r1, [r3, #0]
 8001570:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001574:	440b      	add	r3, r1
 8001576:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800157a:	b2d2      	uxtb	r2, r2
 800157c:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 800157e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001580:	099b      	lsrs	r3, r3, #6
 8001582:	627b      	str	r3, [r7, #36]	@ 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8001584:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001588:	3b01      	subs	r3, #1
 800158a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800158e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001592:	2b00      	cmp	r3, #0
 8001594:	d1e5      	bne.n	8001562 <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 8001596:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800159a:	2b01      	cmp	r3, #1
 800159c:	d909      	bls.n	80015b2 <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 800159e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a0:	b2d9      	uxtb	r1, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80015aa:	430a      	orrs	r2, r1
 80015ac:	b2d2      	uxtb	r2, r2
 80015ae:	701a      	strb	r2, [r3, #0]
 80015b0:	e007      	b.n	80015c2 <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 80015b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80015be:	b2d2      	uxtb	r2, r2
 80015c0:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80015ca:	441a      	add	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	601a      	str	r2, [r3, #0]

    return sequence_length;
 80015d0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80015d4:	e00b      	b.n	80015ee <utf16_literal_to_utf8+0x1c2>
        goto fail;
 80015d6:	bf00      	nop
 80015d8:	e008      	b.n	80015ec <utf16_literal_to_utf8+0x1c0>
        goto fail;
 80015da:	bf00      	nop
 80015dc:	e006      	b.n	80015ec <utf16_literal_to_utf8+0x1c0>
            goto fail;
 80015de:	bf00      	nop
 80015e0:	e004      	b.n	80015ec <utf16_literal_to_utf8+0x1c0>
            goto fail;
 80015e2:	bf00      	nop
 80015e4:	e002      	b.n	80015ec <utf16_literal_to_utf8+0x1c0>
            goto fail;
 80015e6:	bf00      	nop
 80015e8:	e000      	b.n	80015ec <utf16_literal_to_utf8+0x1c0>
        goto fail;
 80015ea:	bf00      	nop

fail:
    return 0;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3728      	adds	r7, #40	@ 0x28
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	000ffc00 	.word	0x000ffc00

080015fc <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08a      	sub	sp, #40	@ 0x28
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	3301      	adds	r3, #1
 8001610:	4413      	add	r3, r2
 8001612:	627b      	str	r3, [r7, #36]	@ 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	3301      	adds	r3, #1
 800161e:	4413      	add	r3, r2
 8001620:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 8001622:	2300      	movs	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 8001626:	2300      	movs	r3, #0
 8001628:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	4413      	add	r3, r2
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b22      	cmp	r3, #34	@ 0x22
 8001638:	f040 8103 	bne.w	8001842 <parse_string+0x246>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 800163c:	2300      	movs	r3, #0
 800163e:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 8001640:	2300      	movs	r3, #0
 8001642:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001644:	e017      	b.n	8001676 <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 8001646:	6a3b      	ldr	r3, [r7, #32]
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b5c      	cmp	r3, #92	@ 0x5c
 800164c:	d110      	bne.n	8001670 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 800164e:	6a3b      	ldr	r3, [r7, #32]
 8001650:	1c5a      	adds	r2, r3, #1
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	461a      	mov	r2, r3
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	429a      	cmp	r2, r3
 8001660:	f080 80f1 	bcs.w	8001846 <parse_string+0x24a>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	3301      	adds	r3, #1
 8001668:	61bb      	str	r3, [r7, #24]
                input_end++;
 800166a:	6a3b      	ldr	r3, [r7, #32]
 800166c:	3301      	adds	r3, #1
 800166e:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 8001670:	6a3b      	ldr	r3, [r7, #32]
 8001672:	3301      	adds	r3, #1
 8001674:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6a3a      	ldr	r2, [r7, #32]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	461a      	mov	r2, r3
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	429a      	cmp	r2, r3
 8001686:	d203      	bcs.n	8001690 <parse_string+0x94>
 8001688:	6a3b      	ldr	r3, [r7, #32]
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b22      	cmp	r3, #34	@ 0x22
 800168e:	d1da      	bne.n	8001646 <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6a3a      	ldr	r2, [r7, #32]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	461a      	mov	r2, r3
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	429a      	cmp	r2, r3
 80016a0:	f080 80d3 	bcs.w	800184a <parse_string+0x24e>
 80016a4:	6a3b      	ldr	r3, [r7, #32]
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b22      	cmp	r3, #34	@ 0x22
 80016aa:	f040 80ce 	bne.w	800184a <parse_string+0x24e>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	4413      	add	r3, r2
 80016b8:	6a3a      	ldr	r2, [r7, #32]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	461a      	mov	r2, r3
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	3201      	adds	r2, #1
 80016cc:	4610      	mov	r0, r2
 80016ce:	4798      	blx	r3
 80016d0:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	f000 80ba 	beq.w	800184e <parse_string+0x252>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 80016de:	e094      	b.n	800180a <parse_string+0x20e>
    {
        if (*input_pointer != '\\')
 80016e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b5c      	cmp	r3, #92	@ 0x5c
 80016e6:	d008      	beq.n	80016fa <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 80016e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016ea:	1c53      	adds	r3, r2, #1
 80016ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	1c59      	adds	r1, r3, #1
 80016f2:	60f9      	str	r1, [r7, #12]
 80016f4:	7812      	ldrb	r2, [r2, #0]
 80016f6:	701a      	strb	r2, [r3, #0]
 80016f8:	e087      	b.n	800180a <parse_string+0x20e>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 80016fa:	2302      	movs	r3, #2
 80016fc:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 80016fe:	6a3a      	ldr	r2, [r7, #32]
 8001700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b00      	cmp	r3, #0
 8001706:	f340 80a4 	ble.w	8001852 <parse_string+0x256>
            {
                goto fail;
            }

            switch (input_pointer[1])
 800170a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800170c:	3301      	adds	r3, #1
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b75      	cmp	r3, #117	@ 0x75
 8001712:	f300 80a0 	bgt.w	8001856 <parse_string+0x25a>
 8001716:	2b5c      	cmp	r3, #92	@ 0x5c
 8001718:	da04      	bge.n	8001724 <parse_string+0x128>
 800171a:	2b22      	cmp	r3, #34	@ 0x22
 800171c:	d05c      	beq.n	80017d8 <parse_string+0x1dc>
 800171e:	2b2f      	cmp	r3, #47	@ 0x2f
 8001720:	d05a      	beq.n	80017d8 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 8001722:	e098      	b.n	8001856 <parse_string+0x25a>
            switch (input_pointer[1])
 8001724:	3b5c      	subs	r3, #92	@ 0x5c
 8001726:	2b19      	cmp	r3, #25
 8001728:	f200 8095 	bhi.w	8001856 <parse_string+0x25a>
 800172c:	a201      	add	r2, pc, #4	@ (adr r2, 8001734 <parse_string+0x138>)
 800172e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001732:	bf00      	nop
 8001734:	080017d9 	.word	0x080017d9
 8001738:	08001857 	.word	0x08001857
 800173c:	08001857 	.word	0x08001857
 8001740:	08001857 	.word	0x08001857
 8001744:	08001857 	.word	0x08001857
 8001748:	08001857 	.word	0x08001857
 800174c:	0800179d 	.word	0x0800179d
 8001750:	08001857 	.word	0x08001857
 8001754:	08001857 	.word	0x08001857
 8001758:	08001857 	.word	0x08001857
 800175c:	080017a9 	.word	0x080017a9
 8001760:	08001857 	.word	0x08001857
 8001764:	08001857 	.word	0x08001857
 8001768:	08001857 	.word	0x08001857
 800176c:	08001857 	.word	0x08001857
 8001770:	08001857 	.word	0x08001857
 8001774:	08001857 	.word	0x08001857
 8001778:	08001857 	.word	0x08001857
 800177c:	080017b5 	.word	0x080017b5
 8001780:	08001857 	.word	0x08001857
 8001784:	08001857 	.word	0x08001857
 8001788:	08001857 	.word	0x08001857
 800178c:	080017c1 	.word	0x080017c1
 8001790:	08001857 	.word	0x08001857
 8001794:	080017cd 	.word	0x080017cd
 8001798:	080017e9 	.word	0x080017e9
                    *output_pointer++ = '\b';
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	1c5a      	adds	r2, r3, #1
 80017a0:	60fa      	str	r2, [r7, #12]
 80017a2:	2208      	movs	r2, #8
 80017a4:	701a      	strb	r2, [r3, #0]
                    break;
 80017a6:	e02c      	b.n	8001802 <parse_string+0x206>
                    *output_pointer++ = '\f';
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	1c5a      	adds	r2, r3, #1
 80017ac:	60fa      	str	r2, [r7, #12]
 80017ae:	220c      	movs	r2, #12
 80017b0:	701a      	strb	r2, [r3, #0]
                    break;
 80017b2:	e026      	b.n	8001802 <parse_string+0x206>
                    *output_pointer++ = '\n';
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	1c5a      	adds	r2, r3, #1
 80017b8:	60fa      	str	r2, [r7, #12]
 80017ba:	220a      	movs	r2, #10
 80017bc:	701a      	strb	r2, [r3, #0]
                    break;
 80017be:	e020      	b.n	8001802 <parse_string+0x206>
                    *output_pointer++ = '\r';
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	1c5a      	adds	r2, r3, #1
 80017c4:	60fa      	str	r2, [r7, #12]
 80017c6:	220d      	movs	r2, #13
 80017c8:	701a      	strb	r2, [r3, #0]
                    break;
 80017ca:	e01a      	b.n	8001802 <parse_string+0x206>
                    *output_pointer++ = '\t';
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	1c5a      	adds	r2, r3, #1
 80017d0:	60fa      	str	r2, [r7, #12]
 80017d2:	2209      	movs	r2, #9
 80017d4:	701a      	strb	r2, [r3, #0]
                    break;
 80017d6:	e014      	b.n	8001802 <parse_string+0x206>
                    *output_pointer++ = input_pointer[1];
 80017d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017da:	1c5a      	adds	r2, r3, #1
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	1c59      	adds	r1, r3, #1
 80017e0:	60f9      	str	r1, [r7, #12]
 80017e2:	7812      	ldrb	r2, [r2, #0]
 80017e4:	701a      	strb	r2, [r3, #0]
                    break;
 80017e6:	e00c      	b.n	8001802 <parse_string+0x206>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 80017e8:	f107 030c 	add.w	r3, r7, #12
 80017ec:	461a      	mov	r2, r3
 80017ee:	6a39      	ldr	r1, [r7, #32]
 80017f0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80017f2:	f7ff fe1b 	bl	800142c <utf16_literal_to_utf8>
 80017f6:	4603      	mov	r3, r0
 80017f8:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 80017fa:	7dfb      	ldrb	r3, [r7, #23]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d02c      	beq.n	800185a <parse_string+0x25e>
                    break;
 8001800:	bf00      	nop
            }
            input_pointer += sequence_length;
 8001802:	7dfb      	ldrb	r3, [r7, #23]
 8001804:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001806:	4413      	add	r3, r2
 8001808:	627b      	str	r3, [r7, #36]	@ 0x24
    while (input_pointer < input_end)
 800180a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800180c:	6a3b      	ldr	r3, [r7, #32]
 800180e:	429a      	cmp	r2, r3
 8001810:	f4ff af66 	bcc.w	80016e0 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2200      	movs	r2, #0
 8001818:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2210      	movs	r2, #16
 800181e:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	69fa      	ldr	r2, [r7, #28]
 8001824:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6a3a      	ldr	r2, [r7, #32]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	461a      	mov	r2, r3
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	1c5a      	adds	r2, r3, #1
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	609a      	str	r2, [r3, #8]

    return true;
 800183e:	2301      	movs	r3, #1
 8001840:	e020      	b.n	8001884 <parse_string+0x288>
        goto fail;
 8001842:	bf00      	nop
 8001844:	e00a      	b.n	800185c <parse_string+0x260>
                    goto fail;
 8001846:	bf00      	nop
 8001848:	e008      	b.n	800185c <parse_string+0x260>
            goto fail; /* string ended unexpectedly */
 800184a:	bf00      	nop
 800184c:	e006      	b.n	800185c <parse_string+0x260>
            goto fail; /* allocation failure */
 800184e:	bf00      	nop
 8001850:	e004      	b.n	800185c <parse_string+0x260>
                goto fail;
 8001852:	bf00      	nop
 8001854:	e002      	b.n	800185c <parse_string+0x260>
                    goto fail;
 8001856:	bf00      	nop
 8001858:	e000      	b.n	800185c <parse_string+0x260>
                        goto fail;
 800185a:	bf00      	nop

fail:
    if (output != NULL)
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d005      	beq.n	800186e <parse_string+0x272>
    {
        input_buffer->hooks.deallocate(output);
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	695b      	ldr	r3, [r3, #20]
 8001866:	69f8      	ldr	r0, [r7, #28]
 8001868:	4798      	blx	r3
        output = NULL;
 800186a:	2300      	movs	r3, #0
 800186c:	61fb      	str	r3, [r7, #28]
    }

    if (input_pointer != NULL)
 800186e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001870:	2b00      	cmp	r3, #0
 8001872:	d006      	beq.n	8001882 <parse_string+0x286>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	461a      	mov	r2, r3
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	609a      	str	r2, [r3, #8]
    }

    return false;
 8001882:	2300      	movs	r3, #0
}
 8001884:	4618      	mov	r0, r3
 8001886:	3728      	adds	r7, #40	@ 0x28
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d003      	beq.n	80018a2 <buffer_skip_whitespace+0x16>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d101      	bne.n	80018a6 <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	e02c      	b.n	8001900 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d005      	beq.n	80018b8 <buffer_skip_whitespace+0x2c>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d306      	bcc.n	80018c6 <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	e021      	b.n	8001900 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	1c5a      	adds	r2, r3, #1
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d00d      	beq.n	80018e8 <buffer_skip_whitespace+0x5c>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d207      	bcs.n	80018e8 <buffer_skip_whitespace+0x5c>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	4413      	add	r3, r2
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b20      	cmp	r3, #32
 80018e6:	d9e9      	bls.n	80018bc <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689a      	ldr	r2, [r3, #8]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d104      	bne.n	80018fe <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	1e5a      	subs	r2, r3, #1
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 80018fe:	687b      	ldr	r3, [r7, #4]
}
 8001900:	4618      	mov	r0, r3
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d007      	beq.n	800192a <skip_utf8_bom+0x1e>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d003      	beq.n	800192a <skip_utf8_bom+0x1e>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <skip_utf8_bom+0x22>
    {
        return NULL;
 800192a:	2300      	movs	r3, #0
 800192c:	e01c      	b.n	8001968 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d018      	beq.n	8001966 <skip_utf8_bom+0x5a>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	1d1a      	adds	r2, r3, #4
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	429a      	cmp	r2, r3
 8001940:	d211      	bcs.n	8001966 <skip_utf8_bom+0x5a>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	4413      	add	r3, r2
 800194c:	2203      	movs	r2, #3
 800194e:	4908      	ldr	r1, [pc, #32]	@ (8001970 <skip_utf8_bom+0x64>)
 8001950:	4618      	mov	r0, r3
 8001952:	f010 fba6 	bl	80120a2 <strncmp>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d104      	bne.n	8001966 <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	1cda      	adds	r2, r3, #3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001966:	687b      	ldr	r3, [r7, #4]
}
 8001968:	4618      	mov	r0, r3
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	080140d8 	.word	0x080140d8

08001974 <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d101      	bne.n	800198a <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 8001986:	2300      	movs	r3, #0
 8001988:	e00c      	b.n	80019a4 <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 800198a:	68f8      	ldr	r0, [r7, #12]
 800198c:	f7fe fc4a 	bl	8000224 <strlen>
 8001990:	4603      	mov	r3, r0
 8001992:	3301      	adds	r3, #1
 8001994:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	68ba      	ldr	r2, [r7, #8]
 800199a:	6979      	ldr	r1, [r7, #20]
 800199c:	68f8      	ldr	r0, [r7, #12]
 800199e:	f000 f805 	bl	80019ac <cJSON_ParseWithLengthOpts>
 80019a2:	4603      	mov	r3, r0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3718      	adds	r7, #24
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08e      	sub	sp, #56	@ 0x38
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
 80019b8:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 80019ba:	f107 0318 	add.w	r3, r7, #24
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	605a      	str	r2, [r3, #4]
 80019c4:	609a      	str	r2, [r3, #8]
 80019c6:	60da      	str	r2, [r3, #12]
 80019c8:	611a      	str	r2, [r3, #16]
 80019ca:	615a      	str	r2, [r3, #20]
 80019cc:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	637b      	str	r3, [r7, #52]	@ 0x34

    /* reset error position */
    global_error.json = NULL;
 80019d2:	4b41      	ldr	r3, [pc, #260]	@ (8001ad8 <cJSON_ParseWithLengthOpts+0x12c>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 80019d8:	4b3f      	ldr	r3, [pc, #252]	@ (8001ad8 <cJSON_ParseWithLengthOpts+0x12c>)
 80019da:	2200      	movs	r2, #0
 80019dc:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d042      	beq.n	8001a6a <cJSON_ParseWithLengthOpts+0xbe>
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d03f      	beq.n	8001a6a <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 80019f6:	4a39      	ldr	r2, [pc, #228]	@ (8001adc <cJSON_ParseWithLengthOpts+0x130>)
 80019f8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80019fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 8001a02:	4836      	ldr	r0, [pc, #216]	@ (8001adc <cJSON_ParseWithLengthOpts+0x130>)
 8001a04:	f7ff fb74 	bl	80010f0 <cJSON_New_Item>
 8001a08:	6378      	str	r0, [r7, #52]	@ 0x34
    if (item == NULL) /* memory fail */
 8001a0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d02e      	beq.n	8001a6e <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 8001a10:	f107 0318 	add.w	r3, r7, #24
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff ff79 	bl	800190c <skip_utf8_bom>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff ff35 	bl	800188c <buffer_skip_whitespace>
 8001a22:	4603      	mov	r3, r0
 8001a24:	4619      	mov	r1, r3
 8001a26:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001a28:	f000 f868 	bl	8001afc <parse_value>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d01f      	beq.n	8001a72 <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d00e      	beq.n	8001a56 <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 8001a38:	f107 0318 	add.w	r3, r7, #24
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff ff25 	bl	800188c <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 8001a42:	6a3a      	ldr	r2, [r7, #32]
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d215      	bcs.n	8001a76 <cJSON_ParseWithLengthOpts+0xca>
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	6a3b      	ldr	r3, [r7, #32]
 8001a4e:	4413      	add	r3, r2
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d10f      	bne.n	8001a76 <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d004      	beq.n	8001a66 <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	6a3b      	ldr	r3, [r7, #32]
 8001a60:	441a      	add	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	601a      	str	r2, [r3, #0]
    }

    return item;
 8001a66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a68:	e031      	b.n	8001ace <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 8001a6a:	bf00      	nop
 8001a6c:	e004      	b.n	8001a78 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8001a6e:	bf00      	nop
 8001a70:	e002      	b.n	8001a78 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8001a72:	bf00      	nop
 8001a74:	e000      	b.n	8001a78 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 8001a76:	bf00      	nop

fail:
    if (item != NULL)
 8001a78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d002      	beq.n	8001a84 <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 8001a7e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001a80:	f7ff fb4c 	bl	800111c <cJSON_Delete>
    }

    if (value != NULL)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d020      	beq.n	8001acc <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 8001a92:	6a3a      	ldr	r2, [r7, #32]
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d202      	bcs.n	8001aa0 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 8001a9a:	6a3b      	ldr	r3, [r7, #32]
 8001a9c:	617b      	str	r3, [r7, #20]
 8001a9e:	e005      	b.n	8001aac <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d002      	beq.n	8001aac <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d004      	beq.n	8001abc <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	441a      	add	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 8001abc:	4b06      	ldr	r3, [pc, #24]	@ (8001ad8 <cJSON_ParseWithLengthOpts+0x12c>)
 8001abe:	461a      	mov	r2, r3
 8001ac0:	f107 0310 	add.w	r3, r7, #16
 8001ac4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001ac8:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3738      	adds	r7, #56	@ 0x38
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	200004c4 	.word	0x200004c4
 8001adc:	20000000 	.word	0x20000000

08001ae0 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 8001ae8:	2200      	movs	r2, #0
 8001aea:	2100      	movs	r1, #0
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f7ff ff41 	bl	8001974 <cJSON_ParseWithOpts>
 8001af2:	4603      	mov	r3, r0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d003      	beq.n	8001b14 <parse_value+0x18>
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d101      	bne.n	8001b18 <parse_value+0x1c>
    {
        return false; /* no input */
 8001b14:	2300      	movs	r3, #0
 8001b16:	e0d2      	b.n	8001cbe <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d01d      	beq.n	8001b5a <parse_value+0x5e>
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	1d1a      	adds	r2, r3, #4
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d816      	bhi.n	8001b5a <parse_value+0x5e>
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	4413      	add	r3, r2
 8001b36:	2204      	movs	r2, #4
 8001b38:	4963      	ldr	r1, [pc, #396]	@ (8001cc8 <parse_value+0x1cc>)
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f010 fab1 	bl	80120a2 <strncmp>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d109      	bne.n	8001b5a <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2204      	movs	r2, #4
 8001b4a:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	1d1a      	adds	r2, r3, #4
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	609a      	str	r2, [r3, #8]
        return true;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e0b1      	b.n	8001cbe <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d01d      	beq.n	8001b9c <parse_value+0xa0>
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	1d5a      	adds	r2, r3, #5
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d816      	bhi.n	8001b9c <parse_value+0xa0>
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	4413      	add	r3, r2
 8001b78:	2205      	movs	r2, #5
 8001b7a:	4954      	ldr	r1, [pc, #336]	@ (8001ccc <parse_value+0x1d0>)
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f010 fa90 	bl	80120a2 <strncmp>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d109      	bne.n	8001b9c <parse_value+0xa0>
    {
        item->type = cJSON_False;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	1d5a      	adds	r2, r3, #5
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	609a      	str	r2, [r3, #8]
        return true;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e090      	b.n	8001cbe <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d020      	beq.n	8001be4 <parse_value+0xe8>
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	1d1a      	adds	r2, r3, #4
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d819      	bhi.n	8001be4 <parse_value+0xe8>
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	4413      	add	r3, r2
 8001bba:	2204      	movs	r2, #4
 8001bbc:	4944      	ldr	r1, [pc, #272]	@ (8001cd0 <parse_value+0x1d4>)
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f010 fa6f 	bl	80120a2 <strncmp>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d10c      	bne.n	8001be4 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2202      	movs	r2, #2
 8001bce:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	1d1a      	adds	r2, r3, #4
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	609a      	str	r2, [r3, #8]
        return true;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e06c      	b.n	8001cbe <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d013      	beq.n	8001c12 <parse_value+0x116>
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	689a      	ldr	r2, [r3, #8]
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d20d      	bcs.n	8001c12 <parse_value+0x116>
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	4413      	add	r3, r2
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	2b22      	cmp	r3, #34	@ 0x22
 8001c04:	d105      	bne.n	8001c12 <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 8001c06:	6839      	ldr	r1, [r7, #0]
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f7ff fcf7 	bl	80015fc <parse_string>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	e055      	b.n	8001cbe <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d023      	beq.n	8001c60 <parse_value+0x164>
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	689a      	ldr	r2, [r3, #8]
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d21d      	bcs.n	8001c60 <parse_value+0x164>
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b2d      	cmp	r3, #45	@ 0x2d
 8001c32:	d00f      	beq.n	8001c54 <parse_value+0x158>
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b2f      	cmp	r3, #47	@ 0x2f
 8001c42:	d90d      	bls.n	8001c60 <parse_value+0x164>
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2b39      	cmp	r3, #57	@ 0x39
 8001c52:	d805      	bhi.n	8001c60 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 8001c54:	6839      	ldr	r1, [r7, #0]
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7ff faba 	bl	80011d0 <parse_number>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	e02e      	b.n	8001cbe <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d013      	beq.n	8001c8e <parse_value+0x192>
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	689a      	ldr	r2, [r3, #8]
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d20d      	bcs.n	8001c8e <parse_value+0x192>
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	2b5b      	cmp	r3, #91	@ 0x5b
 8001c80:	d105      	bne.n	8001c8e <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 8001c82:	6839      	ldr	r1, [r7, #0]
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 f825 	bl	8001cd4 <parse_array>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	e017      	b.n	8001cbe <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d013      	beq.n	8001cbc <parse_value+0x1c0>
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d20d      	bcs.n	8001cbc <parse_value+0x1c0>
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	4413      	add	r3, r2
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b7b      	cmp	r3, #123	@ 0x7b
 8001cae:	d105      	bne.n	8001cbc <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 8001cb0:	6839      	ldr	r1, [r7, #0]
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 f8d2 	bl	8001e5c <parse_object>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	e000      	b.n	8001cbe <parse_value+0x1c2>
    }

    return false;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	080140ac 	.word	0x080140ac
 8001ccc:	080140dc 	.word	0x080140dc
 8001cd0:	080140e4 	.word	0x080140e4

08001cd4 <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 8001cde:	2300      	movs	r3, #0
 8001ce0:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001cee:	d301      	bcc.n	8001cf4 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	e0af      	b.n	8001e54 <parse_array+0x180>
    }
    input_buffer->depth++;
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	1c5a      	adds	r2, r3, #1
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	4413      	add	r3, r2
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	2b5b      	cmp	r3, #91	@ 0x5b
 8001d0c:	f040 8094 	bne.w	8001e38 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	1c5a      	adds	r2, r3, #1
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8001d1a:	6838      	ldr	r0, [r7, #0]
 8001d1c:	f7ff fdb6 	bl	800188c <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00d      	beq.n	8001d42 <parse_array+0x6e>
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	689a      	ldr	r2, [r3, #8]
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d207      	bcs.n	8001d42 <parse_array+0x6e>
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	2b5d      	cmp	r3, #93	@ 0x5d
 8001d40:	d061      	beq.n	8001e06 <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d005      	beq.n	8001d54 <parse_array+0x80>
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d305      	bcc.n	8001d60 <parse_array+0x8c>
    {
        input_buffer->offset--;
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	1e5a      	subs	r2, r3, #1
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	609a      	str	r2, [r3, #8]
        goto fail;
 8001d5e:	e072      	b.n	8001e46 <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	1e5a      	subs	r2, r3, #1
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	3310      	adds	r3, #16
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff f9be 	bl	80010f0 <cJSON_New_Item>
 8001d74:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d05f      	beq.n	8001e3c <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d104      	bne.n	8001d8c <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	617b      	str	r3, [r7, #20]
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	613b      	str	r3, [r7, #16]
 8001d8a:	e007      	b.n	8001d9c <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	1c5a      	adds	r2, r3, #1
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001da6:	6838      	ldr	r0, [r7, #0]
 8001da8:	f7ff fd70 	bl	800188c <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8001dac:	6839      	ldr	r1, [r7, #0]
 8001dae:	6938      	ldr	r0, [r7, #16]
 8001db0:	f7ff fea4 	bl	8001afc <parse_value>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d042      	beq.n	8001e40 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8001dba:	6838      	ldr	r0, [r7, #0]
 8001dbc:	f7ff fd66 	bl	800188c <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00d      	beq.n	8001de2 <parse_array+0x10e>
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	689a      	ldr	r2, [r3, #8]
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d207      	bcs.n	8001de2 <parse_array+0x10e>
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	4413      	add	r3, r2
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b2c      	cmp	r3, #44	@ 0x2c
 8001de0:	d0c3      	beq.n	8001d6a <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d02d      	beq.n	8001e44 <parse_array+0x170>
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d227      	bcs.n	8001e44 <parse_array+0x170>
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2b5d      	cmp	r3, #93	@ 0x5d
 8001e02:	d11f      	bne.n	8001e44 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 8001e04:	e000      	b.n	8001e08 <parse_array+0x134>
        goto success;
 8001e06:	bf00      	nop
    input_buffer->depth--;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	1e5a      	subs	r2, r3, #1
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d002      	beq.n	8001e1e <parse_array+0x14a>
        head->prev = current_item;
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2220      	movs	r2, #32
 8001e22:	60da      	str	r2, [r3, #12]
    item->child = head;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	697a      	ldr	r2, [r7, #20]
 8001e28:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	1c5a      	adds	r2, r3, #1
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	609a      	str	r2, [r3, #8]

    return true;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e00d      	b.n	8001e54 <parse_array+0x180>
        goto fail;
 8001e38:	bf00      	nop
 8001e3a:	e004      	b.n	8001e46 <parse_array+0x172>
            goto fail; /* allocation failure */
 8001e3c:	bf00      	nop
 8001e3e:	e002      	b.n	8001e46 <parse_array+0x172>
            goto fail; /* failed to parse value */
 8001e40:	bf00      	nop
 8001e42:	e000      	b.n	8001e46 <parse_array+0x172>
        goto fail; /* expected end of array */
 8001e44:	bf00      	nop

fail:
    if (head != NULL)
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d002      	beq.n	8001e52 <parse_array+0x17e>
    {
        cJSON_Delete(head);
 8001e4c:	6978      	ldr	r0, [r7, #20]
 8001e4e:	f7ff f965 	bl	800111c <cJSON_Delete>
    }

    return false;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3718      	adds	r7, #24
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 8001e66:	2300      	movs	r3, #0
 8001e68:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e76:	d301      	bcc.n	8001e7c <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8001e78:	2300      	movs	r3, #0
 8001e7a:	e0f7      	b.n	800206c <parse_object+0x210>
    }
    input_buffer->depth++;
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	1c5a      	adds	r2, r3, #1
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	f000 80db 	beq.w	8002044 <parse_object+0x1e8>
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	689a      	ldr	r2, [r3, #8]
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	f080 80d4 	bcs.w	8002044 <parse_object+0x1e8>
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b7b      	cmp	r3, #123	@ 0x7b
 8001eaa:	f040 80cb 	bne.w	8002044 <parse_object+0x1e8>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	1c5a      	adds	r2, r3, #1
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8001eb8:	6838      	ldr	r0, [r7, #0]
 8001eba:	f7ff fce7 	bl	800188c <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d00e      	beq.n	8001ee2 <parse_object+0x86>
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d208      	bcs.n	8001ee2 <parse_object+0x86>
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	4413      	add	r3, r2
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	2b7d      	cmp	r3, #125	@ 0x7d
 8001ede:	f000 8098 	beq.w	8002012 <parse_object+0x1b6>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d005      	beq.n	8001ef4 <parse_object+0x98>
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d305      	bcc.n	8001f00 <parse_object+0xa4>
    {
        input_buffer->offset--;
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	1e5a      	subs	r2, r3, #1
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	609a      	str	r2, [r3, #8]
        goto fail;
 8001efe:	e0ae      	b.n	800205e <parse_object+0x202>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	1e5a      	subs	r2, r3, #1
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	3310      	adds	r3, #16
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff f8ee 	bl	80010f0 <cJSON_New_Item>
 8001f14:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f000 8095 	beq.w	8002048 <parse_object+0x1ec>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d104      	bne.n	8001f2e <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	617b      	str	r3, [r7, #20]
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	613b      	str	r3, [r7, #16]
 8001f2c:	e007      	b.n	8001f3e <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	613b      	str	r3, [r7, #16]
        }

        if (cannot_access_at_index(input_buffer, 1))
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f000 8083 	beq.w	800204c <parse_object+0x1f0>
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	1c5a      	adds	r2, r3, #1
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d27b      	bcs.n	800204c <parse_object+0x1f0>
        {
            goto fail; /* nothing comes after the comma */
        }

        /* parse the name of the child */
        input_buffer->offset++;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	1c5a      	adds	r2, r3, #1
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001f5e:	6838      	ldr	r0, [r7, #0]
 8001f60:	f7ff fc94 	bl	800188c <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8001f64:	6839      	ldr	r1, [r7, #0]
 8001f66:	6938      	ldr	r0, [r7, #16]
 8001f68:	f7ff fb48 	bl	80015fc <parse_string>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d06e      	beq.n	8002050 <parse_object+0x1f4>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8001f72:	6838      	ldr	r0, [r7, #0]
 8001f74:	f7ff fc8a 	bl	800188c <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	691a      	ldr	r2, [r3, #16]
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	2200      	movs	r2, #0
 8001f84:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d063      	beq.n	8002054 <parse_object+0x1f8>
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	689a      	ldr	r2, [r3, #8]
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d25d      	bcs.n	8002054 <parse_object+0x1f8>
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b3a      	cmp	r3, #58	@ 0x3a
 8001fa6:	d155      	bne.n	8002054 <parse_object+0x1f8>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	1c5a      	adds	r2, r3, #1
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001fb2:	6838      	ldr	r0, [r7, #0]
 8001fb4:	f7ff fc6a 	bl	800188c <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8001fb8:	6839      	ldr	r1, [r7, #0]
 8001fba:	6938      	ldr	r0, [r7, #16]
 8001fbc:	f7ff fd9e 	bl	8001afc <parse_value>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d048      	beq.n	8002058 <parse_object+0x1fc>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8001fc6:	6838      	ldr	r0, [r7, #0]
 8001fc8:	f7ff fc60 	bl	800188c <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00d      	beq.n	8001fee <parse_object+0x192>
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	689a      	ldr	r2, [r3, #8]
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d207      	bcs.n	8001fee <parse_object+0x192>
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2b2c      	cmp	r3, #44	@ 0x2c
 8001fec:	d08d      	beq.n	8001f0a <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d033      	beq.n	800205c <parse_object+0x200>
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d22d      	bcs.n	800205c <parse_object+0x200>
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	4413      	add	r3, r2
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	2b7d      	cmp	r3, #125	@ 0x7d
 800200e:	d125      	bne.n	800205c <parse_object+0x200>
    {
        goto fail; /* expected end of object */
    }

success:
 8002010:	e000      	b.n	8002014 <parse_object+0x1b8>
        goto success; /* empty object */
 8002012:	bf00      	nop
    input_buffer->depth--;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	1e5a      	subs	r2, r3, #1
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d002      	beq.n	800202a <parse_object+0x1ce>
        head->prev = current_item;
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2240      	movs	r2, #64	@ 0x40
 800202e:	60da      	str	r2, [r3, #12]
    item->child = head;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	1c5a      	adds	r2, r3, #1
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	609a      	str	r2, [r3, #8]
    return true;
 8002040:	2301      	movs	r3, #1
 8002042:	e013      	b.n	800206c <parse_object+0x210>
        goto fail; /* not an object */
 8002044:	bf00      	nop
 8002046:	e00a      	b.n	800205e <parse_object+0x202>
            goto fail; /* allocation failure */
 8002048:	bf00      	nop
 800204a:	e008      	b.n	800205e <parse_object+0x202>
            goto fail; /* nothing comes after the comma */
 800204c:	bf00      	nop
 800204e:	e006      	b.n	800205e <parse_object+0x202>
            goto fail; /* failed to parse name */
 8002050:	bf00      	nop
 8002052:	e004      	b.n	800205e <parse_object+0x202>
            goto fail; /* invalid object */
 8002054:	bf00      	nop
 8002056:	e002      	b.n	800205e <parse_object+0x202>
            goto fail; /* failed to parse value */
 8002058:	bf00      	nop
 800205a:	e000      	b.n	800205e <parse_object+0x202>
        goto fail; /* expected end of object */
 800205c:	bf00      	nop

fail:
    if (head != NULL)
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d002      	beq.n	800206a <parse_object+0x20e>
    {
        cJSON_Delete(head);
 8002064:	6978      	ldr	r0, [r7, #20]
 8002066:	f7ff f859 	bl	800111c <cJSON_Delete>
    }

    return false;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3718      	adds	r7, #24
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d002      	beq.n	8002090 <get_object_item+0x1c>
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d101      	bne.n	8002094 <get_object_item+0x20>
    {
        return NULL;
 8002090:	2300      	movs	r3, #0
 8002092:	e033      	b.n	80020fc <get_object_item+0x88>
    }

    current_element = object->child;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d017      	beq.n	80020d0 <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 80020a0:	e002      	b.n	80020a8 <get_object_item+0x34>
        {
            current_element = current_element->next;
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d01c      	beq.n	80020e8 <get_object_item+0x74>
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d018      	beq.n	80020e8 <get_object_item+0x74>
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	6a1b      	ldr	r3, [r3, #32]
 80020ba:	4619      	mov	r1, r3
 80020bc:	68b8      	ldr	r0, [r7, #8]
 80020be:	f7fe f8a7 	bl	8000210 <strcmp>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1ec      	bne.n	80020a2 <get_object_item+0x2e>
 80020c8:	e00e      	b.n	80020e8 <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d008      	beq.n	80020e8 <get_object_item+0x74>
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	6a1b      	ldr	r3, [r3, #32]
 80020da:	4619      	mov	r1, r3
 80020dc:	68b8      	ldr	r0, [r7, #8]
 80020de:	f7fe ff9b 	bl	8001018 <case_insensitive_strcmp>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d1f0      	bne.n	80020ca <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <get_object_item+0x82>
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	6a1b      	ldr	r3, [r3, #32]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <get_object_item+0x86>
        return NULL;
 80020f6:	2300      	movs	r3, #0
 80020f8:	e000      	b.n	80020fc <get_object_item+0x88>
    }

    return current_element;
 80020fa:	697b      	ldr	r3, [r7, #20]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3718      	adds	r7, #24
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <cJSON_GetObjectItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 800210e:	2200      	movs	r2, #0
 8002110:	6839      	ldr	r1, [r7, #0]
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7ff ffae 	bl	8002074 <get_object_item>
 8002118:	4603      	mov	r3, r0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <cJSON_IsNumber>:

    return (item->type & 0xFF) == cJSON_NULL;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
 8002122:	b480      	push	{r7}
 8002124:	b083      	sub	sp, #12
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d101      	bne.n	8002134 <cJSON_IsNumber+0x12>
    {
        return false;
 8002130:	2300      	movs	r3, #0
 8002132:	e007      	b.n	8002144 <cJSON_IsNumber+0x22>
    }

    return (item->type & 0xFF) == cJSON_Number;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b08      	cmp	r3, #8
 800213c:	bf0c      	ite	eq
 800213e:	2301      	moveq	r3, #1
 8002140:	2300      	movne	r3, #0
 8002142:	b2db      	uxtb	r3, r3
}
 8002144:	4618      	mov	r0, r3
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	607b      	str	r3, [r7, #4]
 800215a:	4b0c      	ldr	r3, [pc, #48]	@ (800218c <MX_DMA_Init+0x3c>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215e:	4a0b      	ldr	r2, [pc, #44]	@ (800218c <MX_DMA_Init+0x3c>)
 8002160:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002164:	6313      	str	r3, [r2, #48]	@ 0x30
 8002166:	4b09      	ldr	r3, [pc, #36]	@ (800218c <MX_DMA_Init+0x3c>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800216e:	607b      	str	r3, [r7, #4]
 8002170:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8002172:	2200      	movs	r2, #0
 8002174:	2105      	movs	r1, #5
 8002176:	200f      	movs	r0, #15
 8002178:	f001 fefa 	bl	8003f70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800217c:	200f      	movs	r0, #15
 800217e:	f001 ff13 	bl	8003fa8 <HAL_NVIC_EnableIRQ>

}
 8002182:	bf00      	nop
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40023800 	.word	0x40023800

08002190 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	4a07      	ldr	r2, [pc, #28]	@ (80021bc <vApplicationGetIdleTaskMemory+0x2c>)
 80021a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	4a06      	ldr	r2, [pc, #24]	@ (80021c0 <vApplicationGetIdleTaskMemory+0x30>)
 80021a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2280      	movs	r2, #128	@ 0x80
 80021ac:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80021ae:	bf00      	nop
 80021b0:	3714      	adds	r7, #20
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	20000748 	.word	0x20000748
 80021c0:	200007e8 	.word	0x200007e8

080021c4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80021c4:	b5b0      	push	{r4, r5, r7, lr}
 80021c6:	b0ac      	sub	sp, #176	@ 0xb0
 80021c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	telemetry_data.tRpm = 0;
 80021ca:	4b5c      	ldr	r3, [pc, #368]	@ (800233c <MX_FREERTOS_Init+0x178>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
	telemetry_data.tRpm = 0;
 80021d0:	4b5a      	ldr	r3, [pc, #360]	@ (800233c <MX_FREERTOS_Init+0x178>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
	telemetry_data.tSpeedKmh = 0;
 80021d6:	4b59      	ldr	r3, [pc, #356]	@ (800233c <MX_FREERTOS_Init+0x178>)
 80021d8:	2200      	movs	r2, #0
 80021da:	609a      	str	r2, [r3, #8]
	telemetry_data.tHasDRS = 0;
 80021dc:	4b57      	ldr	r3, [pc, #348]	@ (800233c <MX_FREERTOS_Init+0x178>)
 80021de:	2200      	movs	r2, #0
 80021e0:	60da      	str	r2, [r3, #12]
	telemetry_data.tDrs = 0;
 80021e2:	4b56      	ldr	r3, [pc, #344]	@ (800233c <MX_FREERTOS_Init+0x178>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	611a      	str	r2, [r3, #16]
	telemetry_data.tPitLim = 0;
 80021e8:	4b54      	ldr	r3, [pc, #336]	@ (800233c <MX_FREERTOS_Init+0x178>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	615a      	str	r2, [r3, #20]
	telemetry_data.tFuel = 0;
 80021ee:	4b53      	ldr	r3, [pc, #332]	@ (800233c <MX_FREERTOS_Init+0x178>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	619a      	str	r2, [r3, #24]
	telemetry_data.tBrakeBias = 0;
 80021f4:	4b51      	ldr	r3, [pc, #324]	@ (800233c <MX_FREERTOS_Init+0x178>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	61da      	str	r2, [r3, #28]
	gFfbSignal = 0;
 80021fa:	4b51      	ldr	r3, [pc, #324]	@ (8002340 <MX_FREERTOS_Init+0x17c>)
 80021fc:	f04f 0200 	mov.w	r2, #0
 8002200:	601a      	str	r2, [r3, #0]

	HIDReport.steering = 0;        // Steering data (0-255)
 8002202:	4b50      	ldr	r3, [pc, #320]	@ (8002344 <MX_FREERTOS_Init+0x180>)
 8002204:	2200      	movs	r2, #0
 8002206:	701a      	strb	r2, [r3, #0]
	HIDReport.throttle = 0;        // Throttle data (0-255)
 8002208:	4b4e      	ldr	r3, [pc, #312]	@ (8002344 <MX_FREERTOS_Init+0x180>)
 800220a:	2200      	movs	r2, #0
 800220c:	705a      	strb	r2, [r3, #1]
	HIDReport.brake = 0;           // Brake data (0-255)
 800220e:	4b4d      	ldr	r3, [pc, #308]	@ (8002344 <MX_FREERTOS_Init+0x180>)
 8002210:	2200      	movs	r2, #0
 8002212:	709a      	strb	r2, [r3, #2]
	HIDReport.clutch = 0;         // Clutch data (0-255)
 8002214:	4b4b      	ldr	r3, [pc, #300]	@ (8002344 <MX_FREERTOS_Init+0x180>)
 8002216:	2200      	movs	r2, #0
 8002218:	70da      	strb	r2, [r3, #3]
	HIDReport.buttons = 0;   // Each bit represents a button'
 800221a:	4b4a      	ldr	r3, [pc, #296]	@ (8002344 <MX_FREERTOS_Init+0x180>)
 800221c:	2200      	movs	r2, #0
 800221e:	605a      	str	r2, [r3, #4]
	HIDReport.rz = 0;
 8002220:	4b48      	ldr	r3, [pc, #288]	@ (8002344 <MX_FREERTOS_Init+0x180>)
 8002222:	2200      	movs	r2, #0
 8002224:	721a      	strb	r2, [r3, #8]
	HIDReport.slider = 0;
 8002226:	4b47      	ldr	r3, [pc, #284]	@ (8002344 <MX_FREERTOS_Init+0x180>)
 8002228:	2200      	movs	r2, #0
 800222a:	725a      	strb	r2, [r3, #9]
	memset(&telemetry_data, 0, sizeof(telemetry_packet)); // Zero-initialize
 800222c:	2220      	movs	r2, #32
 800222e:	2100      	movs	r1, #0
 8002230:	4842      	ldr	r0, [pc, #264]	@ (800233c <MX_FREERTOS_Init+0x178>)
 8002232:	f00f ff2e 	bl	8012092 <memset>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of spiSendMutex */
  osSemaphoreDef(spiSendMutex);
 8002236:	2300      	movs	r3, #0
 8002238:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800223c:	2300      	movs	r3, #0
 800223e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  spiSendMutexHandle = osSemaphoreCreate(osSemaphore(spiSendMutex), 1);
 8002242:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8002246:	2101      	movs	r1, #1
 8002248:	4618      	mov	r0, r3
 800224a:	f00c f989 	bl	800e560 <osSemaphoreCreate>
 800224e:	4603      	mov	r3, r0
 8002250:	4a3d      	ldr	r2, [pc, #244]	@ (8002348 <MX_FREERTOS_Init+0x184>)
 8002252:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002254:	4b3d      	ldr	r3, [pc, #244]	@ (800234c <MX_FREERTOS_Init+0x188>)
 8002256:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 800225a:	461d      	mov	r5, r3
 800225c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800225e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002260:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002264:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002268:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800226c:	2100      	movs	r1, #0
 800226e:	4618      	mov	r0, r3
 8002270:	f00c f8d5 	bl	800e41e <osThreadCreate>
 8002274:	4603      	mov	r3, r0
 8002276:	4a36      	ldr	r2, [pc, #216]	@ (8002350 <MX_FREERTOS_Init+0x18c>)
 8002278:	6013      	str	r3, [r2, #0]

  /* definition and creation of telemetryTask */
  osThreadDef(telemetryTask, StartTelemetryTask, osPriorityHigh, 0, 128);
 800227a:	4b36      	ldr	r3, [pc, #216]	@ (8002354 <MX_FREERTOS_Init+0x190>)
 800227c:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 8002280:	461d      	mov	r5, r3
 8002282:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002284:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002286:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800228a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  telemetryTaskHandle = osThreadCreate(osThread(telemetryTask), NULL);
 800228e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8002292:	2100      	movs	r1, #0
 8002294:	4618      	mov	r0, r3
 8002296:	f00c f8c2 	bl	800e41e <osThreadCreate>
 800229a:	4603      	mov	r3, r0
 800229c:	4a2e      	ldr	r2, [pc, #184]	@ (8002358 <MX_FREERTOS_Init+0x194>)
 800229e:	6013      	str	r3, [r2, #0]

  /* definition and creation of heartbeatTask */
  osThreadDef(heartbeatTask, StartHeartbeatTask, osPriorityLow, 0, 128);
 80022a0:	4b2e      	ldr	r3, [pc, #184]	@ (800235c <MX_FREERTOS_Init+0x198>)
 80022a2:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 80022a6:	461d      	mov	r5, r3
 80022a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80022b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  heartbeatTaskHandle = osThreadCreate(osThread(heartbeatTask), NULL);
 80022b4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80022b8:	2100      	movs	r1, #0
 80022ba:	4618      	mov	r0, r3
 80022bc:	f00c f8af 	bl	800e41e <osThreadCreate>
 80022c0:	4603      	mov	r3, r0
 80022c2:	4a27      	ldr	r2, [pc, #156]	@ (8002360 <MX_FREERTOS_Init+0x19c>)
 80022c4:	6013      	str	r3, [r2, #0]

  /* definition and creation of SPISendDataTask */
  osThreadDef(SPISendDataTask, StartSPISend, osPriorityHigh, 0, 128);
 80022c6:	4b27      	ldr	r3, [pc, #156]	@ (8002364 <MX_FREERTOS_Init+0x1a0>)
 80022c8:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 80022cc:	461d      	mov	r5, r3
 80022ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80022d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SPISendDataTaskHandle = osThreadCreate(osThread(SPISendDataTask), NULL);
 80022da:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80022de:	2100      	movs	r1, #0
 80022e0:	4618      	mov	r0, r3
 80022e2:	f00c f89c 	bl	800e41e <osThreadCreate>
 80022e6:	4603      	mov	r3, r0
 80022e8:	4a1f      	ldr	r2, [pc, #124]	@ (8002368 <MX_FREERTOS_Init+0x1a4>)
 80022ea:	6013      	str	r3, [r2, #0]

  /* definition and creation of FFBTask */
  osThreadDef(FFBTask, StartFFBTask, osPriorityHigh, 0, 128);
 80022ec:	4b1f      	ldr	r3, [pc, #124]	@ (800236c <MX_FREERTOS_Init+0x1a8>)
 80022ee:	f107 041c 	add.w	r4, r7, #28
 80022f2:	461d      	mov	r5, r3
 80022f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80022fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  FFBTaskHandle = osThreadCreate(osThread(FFBTask), NULL);
 8002300:	f107 031c 	add.w	r3, r7, #28
 8002304:	2100      	movs	r1, #0
 8002306:	4618      	mov	r0, r3
 8002308:	f00c f889 	bl	800e41e <osThreadCreate>
 800230c:	4603      	mov	r3, r0
 800230e:	4a18      	ldr	r2, [pc, #96]	@ (8002370 <MX_FREERTOS_Init+0x1ac>)
 8002310:	6013      	str	r3, [r2, #0]

  /* definition and creation of sendHIDTask */
  osThreadDef(sendHIDTask, startHIDTask, osPriorityHigh, 0, 512);
 8002312:	4b18      	ldr	r3, [pc, #96]	@ (8002374 <MX_FREERTOS_Init+0x1b0>)
 8002314:	463c      	mov	r4, r7
 8002316:	461d      	mov	r5, r3
 8002318:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800231a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800231c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002320:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sendHIDTaskHandle = osThreadCreate(osThread(sendHIDTask), NULL);
 8002324:	463b      	mov	r3, r7
 8002326:	2100      	movs	r1, #0
 8002328:	4618      	mov	r0, r3
 800232a:	f00c f878 	bl	800e41e <osThreadCreate>
 800232e:	4603      	mov	r3, r0
 8002330:	4a11      	ldr	r2, [pc, #68]	@ (8002378 <MX_FREERTOS_Init+0x1b4>)
 8002332:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002334:	bf00      	nop
 8002336:	37b0      	adds	r7, #176	@ 0xb0
 8002338:	46bd      	mov	sp, r7
 800233a:	bdb0      	pop	{r4, r5, r7, pc}
 800233c:	200004cc 	.word	0x200004cc
 8002340:	20000720 	.word	0x20000720
 8002344:	200004ec 	.word	0x200004ec
 8002348:	20000744 	.word	0x20000744
 800234c:	080140f8 	.word	0x080140f8
 8002350:	2000072c 	.word	0x2000072c
 8002354:	08014124 	.word	0x08014124
 8002358:	20000730 	.word	0x20000730
 800235c:	08014150 	.word	0x08014150
 8002360:	20000734 	.word	0x20000734
 8002364:	0801417c 	.word	0x0801417c
 8002368:	20000738 	.word	0x20000738
 800236c:	080141a0 	.word	0x080141a0
 8002370:	2000073c 	.word	0x2000073c
 8002374:	080141c8 	.word	0x080141c8
 8002378:	20000740 	.word	0x20000740

0800237c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
 8002384:	bf00      	nop
 8002386:	e7fd      	b.n	8002384 <StartDefaultTask+0x8>

08002388 <StartTelemetryTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTelemetryTask */
void StartTelemetryTask(void const * argument)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTelemetryTask */
  /* Infinite loop */
  for(;;)
  {
	  // Wait for notification from UART callback
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8002390:	f04f 31ff 	mov.w	r1, #4294967295
 8002394:	2001      	movs	r0, #1
 8002396:	f00d ffa1 	bl	80102dc <ulTaskNotifyTake>
	// Process the command received via UART
	process_command(gCommandData);
 800239a:	4808      	ldr	r0, [pc, #32]	@ (80023bc <StartTelemetryTask+0x34>)
 800239c:	f000 f9c6 	bl	800272c <process_command>

	// Introduce a delay if necessary
	vTaskDelay(pdMS_TO_TICKS(100)); // Adjust delay as needed
 80023a0:	2064      	movs	r0, #100	@ 0x64
 80023a2:	f00d f985 	bl	800f6b0 <vTaskDelay>
	// Re-enable UART reception
	HAL_UART_Receive_IT(&huart2, rx_buffer, sizeof(rx_buffer));
 80023a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80023aa:	4905      	ldr	r1, [pc, #20]	@ (80023c0 <StartTelemetryTask+0x38>)
 80023ac:	4805      	ldr	r0, [pc, #20]	@ (80023c4 <StartTelemetryTask+0x3c>)
 80023ae:	f006 fb32 	bl	8008a16 <HAL_UART_Receive_IT>

	osDelay(1);
 80023b2:	2001      	movs	r0, #1
 80023b4:	f00c f87f 	bl	800e4b6 <osDelay>
  {
 80023b8:	bf00      	nop
 80023ba:	e7e9      	b.n	8002390 <StartTelemetryTask+0x8>
 80023bc:	200005f8 	.word	0x200005f8
 80023c0:	200004f8 	.word	0x200004f8
 80023c4:	20000b80 	.word	0x20000b80

080023c8 <StartHeartbeatTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartHeartbeatTask */
void StartHeartbeatTask(void const * argument)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHeartbeatTask */
  /* Infinite loop */
  for(;;)
  {
	  // Perform actions based on telemetry data
	if (telemetry_data.tRpm >= 7000) {
 80023d0:	4b0a      	ldr	r3, [pc, #40]	@ (80023fc <StartHeartbeatTask+0x34>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f641 3257 	movw	r2, #6999	@ 0x1b57
 80023d8:	4293      	cmp	r3, r2
 80023da:	dd05      	ble.n	80023e8 <StartHeartbeatTask+0x20>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80023dc:	2201      	movs	r2, #1
 80023de:	2120      	movs	r1, #32
 80023e0:	4807      	ldr	r0, [pc, #28]	@ (8002400 <StartHeartbeatTask+0x38>)
 80023e2:	f002 fb85 	bl	8004af0 <HAL_GPIO_WritePin>
 80023e6:	e004      	b.n	80023f2 <StartHeartbeatTask+0x2a>
	} else {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80023e8:	2200      	movs	r2, #0
 80023ea:	2120      	movs	r1, #32
 80023ec:	4804      	ldr	r0, [pc, #16]	@ (8002400 <StartHeartbeatTask+0x38>)
 80023ee:	f002 fb7f 	bl	8004af0 <HAL_GPIO_WritePin>
	}
	  osDelay(1);
 80023f2:	2001      	movs	r0, #1
 80023f4:	f00c f85f 	bl	800e4b6 <osDelay>
	if (telemetry_data.tRpm >= 7000) {
 80023f8:	e7ea      	b.n	80023d0 <StartHeartbeatTask+0x8>
 80023fa:	bf00      	nop
 80023fc:	200004cc 	.word	0x200004cc
 8002400:	40020000 	.word	0x40020000

08002404 <StartSPISend>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSPISend */
void StartSPISend(void const * argument)
{
 8002404:	b5b0      	push	{r4, r5, r7, lr}
 8002406:	b094      	sub	sp, #80	@ 0x50
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSPISend */
  /* Infinite loop */
  for(;;)
  {
	  if (osSemaphoreWait(spiSendMutexHandle, osWaitForever) == osOK)
 800240c:	4b1b      	ldr	r3, [pc, #108]	@ (800247c <StartSPISend+0x78>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f04f 31ff 	mov.w	r1, #4294967295
 8002414:	4618      	mov	r0, r3
 8002416:	f00c f8d5 	bl	800e5c4 <osSemaphoreWait>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d129      	bne.n	8002474 <StartSPISend+0x70>
	  	  {
	  		HAL_StatusTypeDef status;
	  		uint8_t buffer[sizeof(telemetry_packet)];
	  		telemetry_packet dataToSend = {3600, 1, 120, 0, 0, 0, 45, 0}; // DEBUG DATA
 8002420:	4b17      	ldr	r3, [pc, #92]	@ (8002480 <StartSPISend+0x7c>)
 8002422:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8002426:	461d      	mov	r5, r3
 8002428:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800242a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800242c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002430:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  		memcpy(&buffer, (uint8_t*)&telemetry_data, sizeof(telemetry_packet));
 8002434:	4b13      	ldr	r3, [pc, #76]	@ (8002484 <StartSPISend+0x80>)
 8002436:	f107 040c 	add.w	r4, r7, #12
 800243a:	461d      	mov	r5, r3
 800243c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800243e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002440:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002444:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // Set NSS low
 8002448:	2200      	movs	r2, #0
 800244a:	2110      	movs	r1, #16
 800244c:	480e      	ldr	r0, [pc, #56]	@ (8002488 <StartSPISend+0x84>)
 800244e:	f002 fb4f 	bl	8004af0 <HAL_GPIO_WritePin>

	  		status = HAL_SPI_Transmit_DMA(&hspi2, (uint8_t*)&dataToSend, sizeof(telemetry_packet)); // DEBUG DATA
 8002452:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002456:	2220      	movs	r2, #32
 8002458:	4619      	mov	r1, r3
 800245a:	480c      	ldr	r0, [pc, #48]	@ (800248c <StartSPISend+0x88>)
 800245c:	f004 ffda 	bl	8007414 <HAL_SPI_Transmit_DMA>
 8002460:	4603      	mov	r3, r0
 8002462:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	  		//uint8_t testData[4] = {0xAA, 0xBB, 0xCC, 0xDD}; // tRpm = 3600 in little-endian
	  		//HAL_SPI_Transmit_DMA(&hspi2, &testData, sizeof(testData));

	  		// Check for errors
	  		if (status != HAL_OK) {
 8002466:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800246a:	2b00      	cmp	r3, #0
 800246c:	d002      	beq.n	8002474 <StartSPISend+0x70>
	  			send_response("SPI Transmission Error");
 800246e:	4808      	ldr	r0, [pc, #32]	@ (8002490 <StartSPISend+0x8c>)
 8002470:	f000 fd76 	bl	8002f60 <send_response>
	  		}
	  		// Wait for transmission to complete (optional but safer)
	  	  }
	  	 osDelay(50);
 8002474:	2032      	movs	r0, #50	@ 0x32
 8002476:	f00c f81e 	bl	800e4b6 <osDelay>
	  if (osSemaphoreWait(spiSendMutexHandle, osWaitForever) == osOK)
 800247a:	e7c7      	b.n	800240c <StartSPISend+0x8>
 800247c:	20000744 	.word	0x20000744
 8002480:	080141fc 	.word	0x080141fc
 8002484:	200004cc 	.word	0x200004cc
 8002488:	40020000 	.word	0x40020000
 800248c:	200009ec 	.word	0x200009ec
 8002490:	080141e4 	.word	0x080141e4

08002494 <StartFFBTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFFBTask */
void StartFFBTask(void const * argument)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b08e      	sub	sp, #56	@ 0x38
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartFFBTask */
  /* Infinite loop */
  for(;;)
  {
	  float total_force = 0.0;
 800249c:	f04f 0300 	mov.w	r3, #0
 80024a0:	637b      	str	r3, [r7, #52]	@ 0x34
	  const float Kp = 1.0f;
 80024a2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80024a6:	633b      	str	r3, [r7, #48]	@ 0x30

	  for (;;) {
		  // Step 1: Retrieve current force feedback signal (e.g., from game data).
		  float force_feedback_signal = gFfbSignal;
 80024a8:	4b53      	ldr	r3, [pc, #332]	@ (80025f8 <StartFFBTask+0x164>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

		  // Step 2: Calculate individual forces based on physics:
		  float inertia_force = calculate_inertia(force_feedback_signal, angular_velocity);
 80024ae:	4b53      	ldr	r3, [pc, #332]	@ (80025fc <StartFFBTask+0x168>)
 80024b0:	edd3 7a00 	vldr	s15, [r3]
 80024b4:	eef0 0a67 	vmov.f32	s1, s15
 80024b8:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 80024bc:	f000 fa1e 	bl	80028fc <calculate_inertia>
 80024c0:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
		  float damping_force = calculate_damping(angular_velocity);
 80024c4:	4b4d      	ldr	r3, [pc, #308]	@ (80025fc <StartFFBTask+0x168>)
 80024c6:	edd3 7a00 	vldr	s15, [r3]
 80024ca:	eeb0 0a67 	vmov.f32	s0, s15
 80024ce:	f000 fa45 	bl	800295c <calculate_damping>
 80024d2:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
		  float friction_force = calculate_friction(angular_velocity);
 80024d6:	4b49      	ldr	r3, [pc, #292]	@ (80025fc <StartFFBTask+0x168>)
 80024d8:	edd3 7a00 	vldr	s15, [r3]
 80024dc:	eeb0 0a67 	vmov.f32	s0, s15
 80024e0:	f000 fa54 	bl	800298c <calculate_friction>
 80024e4:	ed87 0a08 	vstr	s0, [r7, #32]
		  float lock_force = calculate_lock(wheel_angle);
 80024e8:	4b45      	ldr	r3, [pc, #276]	@ (8002600 <StartFFBTask+0x16c>)
 80024ea:	edd3 7a00 	vldr	s15, [r3]
 80024ee:	eeb0 0a67 	vmov.f32	s0, s15
 80024f2:	f000 fa75 	bl	80029e0 <calculate_lock>
 80024f6:	ed87 0a07 	vstr	s0, [r7, #28]

		  // Step 3: Sum all forces and scale to PWM range:
		  total_force = force_feedback_signal + inertia_force + damping_force + friction_force + lock_force;
 80024fa:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80024fe:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002502:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002506:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800250a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800250e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002512:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002516:	ed97 7a07 	vldr	s14, [r7, #28]
 800251a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800251e:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

		  // Strength gain
		  total_force *= gStrength;
 8002522:	4b38      	ldr	r3, [pc, #224]	@ (8002604 <StartFFBTask+0x170>)
 8002524:	edd3 7a00 	vldr	s15, [r3]
 8002528:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800252c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002530:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

		  total_force = constrain(total_force, -1.0, 1.0);
 8002534:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8002538:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 800253c:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 8002540:	f000 f9b2 	bl	80028a8 <constrain>
 8002544:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34

		  // Deadband
		  const float FORCE_DEADBAND_THRESHOLD = 0.05f; // Adjust as needed
 8002548:	4b2f      	ldr	r3, [pc, #188]	@ (8002608 <StartFFBTask+0x174>)
 800254a:	61bb      	str	r3, [r7, #24]
		  const float ANGLE_DEADBAND_THRESHOLD = 50.0f; // Adjust as needed
 800254c:	4b2f      	ldr	r3, [pc, #188]	@ (800260c <StartFFBTask+0x178>)
 800254e:	617b      	str	r3, [r7, #20]
		  float error = wheel_angle;
 8002550:	4b2b      	ldr	r3, [pc, #172]	@ (8002600 <StartFFBTask+0x16c>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	613b      	str	r3, [r7, #16]
		  if (fabsf(error) < ANGLE_DEADBAND_THRESHOLD)  {
 8002556:	edd7 7a04 	vldr	s15, [r7, #16]
 800255a:	eef0 7ae7 	vabs.f32	s15, s15
 800255e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002562:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800256a:	dd03      	ble.n	8002574 <StartFFBTask+0xe0>
			  total_force = 0.0f;
 800256c:	f04f 0300 	mov.w	r3, #0
 8002570:	637b      	str	r3, [r7, #52]	@ 0x34
 8002572:	e017      	b.n	80025a4 <StartFFBTask+0x110>
		  } else { // TEST CODE: gives increasing feedback farther away from center
			  total_force = -Kp * (error / WHEEL_MAX_ANGLE);
 8002574:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002578:	eeb1 7a67 	vneg.f32	s14, s15
 800257c:	edd7 6a04 	vldr	s13, [r7, #16]
 8002580:	ed9f 6a23 	vldr	s12, [pc, #140]	@ 8002610 <StartFFBTask+0x17c>
 8002584:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002588:	ee67 7a27 	vmul.f32	s15, s14, s15
 800258c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
			  total_force = constrain(total_force, -1.0f, 1.0f);
 8002590:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8002594:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 8002598:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 800259c:	f000 f984 	bl	80028a8 <constrain>
 80025a0:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
		  }

		  // Step 4: Map total_force to PWM and determine direction
		  float pwm_output = scale_to_pwm(total_force);
 80025a4:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 80025a8:	f000 fa60 	bl	8002a6c <scale_to_pwm>
 80025ac:	ed87 0a03 	vstr	s0, [r7, #12]
		  // 0 is negative direction; 1 is positive direction
		  uint8_t motor_direction = (total_force >= 0) ? 1 : 0;
 80025b0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80025b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025bc:	bfac      	ite	ge
 80025be:	2301      	movge	r3, #1
 80025c0:	2300      	movlt	r3, #0
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	72fb      	strb	r3, [r7, #11]

		  // Debug
		  gDir = motor_direction;
 80025c6:	4a13      	ldr	r2, [pc, #76]	@ (8002614 <StartFFBTask+0x180>)
 80025c8:	7afb      	ldrb	r3, [r7, #11]
 80025ca:	7013      	strb	r3, [r2, #0]
		  gTotalforce = total_force;
 80025cc:	4a12      	ldr	r2, [pc, #72]	@ (8002618 <StartFFBTask+0x184>)
 80025ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025d0:	6013      	str	r3, [r2, #0]
		  gPWMConst = pwm_output;
 80025d2:	4a12      	ldr	r2, [pc, #72]	@ (800261c <StartFFBTask+0x188>)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6013      	str	r3, [r2, #0]

		  // Step 5: Send PWM signal to H-bridge for motor control:
		  set_motor_direction(motor_direction);
 80025d8:	7afb      	ldrb	r3, [r7, #11]
 80025da:	4618      	mov	r0, r3
 80025dc:	f000 fbc6 	bl	8002d6c <set_motor_direction>
		  set_motor_pwm(pwm_output);
 80025e0:	ed97 0a03 	vldr	s0, [r7, #12]
 80025e4:	f000 fb90 	bl	8002d08 <set_motor_pwm>

		  // Step 6: Update wheel position and velocity for next loop:
		  update_wheel_position_and_velocity(&wheel_angle, &angular_velocity);
 80025e8:	4904      	ldr	r1, [pc, #16]	@ (80025fc <StartFFBTask+0x168>)
 80025ea:	4805      	ldr	r0, [pc, #20]	@ (8002600 <StartFFBTask+0x16c>)
 80025ec:	f000 fafa 	bl	8002be4 <update_wheel_position_and_velocity>

		  // Run this task periodically (every 10ms):
		  osDelay(10);
 80025f0:	200a      	movs	r0, #10
 80025f2:	f00b ff60 	bl	800e4b6 <osDelay>
	  for (;;) {
 80025f6:	e757      	b.n	80024a8 <StartFFBTask+0x14>
 80025f8:	20000720 	.word	0x20000720
 80025fc:	2000070c 	.word	0x2000070c
 8002600:	20000708 	.word	0x20000708
 8002604:	2000000c 	.word	0x2000000c
 8002608:	3d4ccccd 	.word	0x3d4ccccd
 800260c:	42480000 	.word	0x42480000
 8002610:	43e10000 	.word	0x43e10000
 8002614:	20000706 	.word	0x20000706
 8002618:	20000700 	.word	0x20000700
 800261c:	200006fc 	.word	0x200006fc

08002620 <startHIDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startHIDTask */
void startHIDTask(void const * argument)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
//	  report.steering = getSteeringValue();       // Function to read steering value (-127 to +127)
//	  report.accelerator = getAcceleratorValue(); // Function to read accelerator value (0 to 255)
//	  report.brake = getBrakeValue();             // Function to read brake value (0 to 255)
//	  report.buttons = getButtonStates();         // Function to read buttons as a 16-bit value

	  HIDReport.steering = gSteering;        // Steering data (0-255)
 8002628:	4b19      	ldr	r3, [pc, #100]	@ (8002690 <startHIDTask+0x70>)
 800262a:	edd3 7a00 	vldr	s15, [r3]
 800262e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002632:	edc7 7a00 	vstr	s15, [r7]
 8002636:	783b      	ldrb	r3, [r7, #0]
 8002638:	b2da      	uxtb	r2, r3
 800263a:	4b16      	ldr	r3, [pc, #88]	@ (8002694 <startHIDTask+0x74>)
 800263c:	701a      	strb	r2, [r3, #0]
	  HIDReport.throttle = gAccel;        // Throttle data (0-255)
 800263e:	4b16      	ldr	r3, [pc, #88]	@ (8002698 <startHIDTask+0x78>)
 8002640:	edd3 7a00 	vldr	s15, [r3]
 8002644:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002648:	edc7 7a00 	vstr	s15, [r7]
 800264c:	783b      	ldrb	r3, [r7, #0]
 800264e:	b2da      	uxtb	r2, r3
 8002650:	4b10      	ldr	r3, [pc, #64]	@ (8002694 <startHIDTask+0x74>)
 8002652:	705a      	strb	r2, [r3, #1]
	  HIDReport.brake = gBrake;           // Brake data (0-255)
 8002654:	4b11      	ldr	r3, [pc, #68]	@ (800269c <startHIDTask+0x7c>)
 8002656:	edd3 7a00 	vldr	s15, [r3]
 800265a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800265e:	edc7 7a00 	vstr	s15, [r7]
 8002662:	783b      	ldrb	r3, [r7, #0]
 8002664:	b2da      	uxtb	r2, r3
 8002666:	4b0b      	ldr	r3, [pc, #44]	@ (8002694 <startHIDTask+0x74>)
 8002668:	709a      	strb	r2, [r3, #2]
	  HIDReport.clutch = 0;         // Clutch data (0-255)
 800266a:	4b0a      	ldr	r3, [pc, #40]	@ (8002694 <startHIDTask+0x74>)
 800266c:	2200      	movs	r2, #0
 800266e:	70da      	strb	r2, [r3, #3]
	  HIDReport.buttons = 0;   // Each bit represents a button'
 8002670:	4b08      	ldr	r3, [pc, #32]	@ (8002694 <startHIDTask+0x74>)
 8002672:	2200      	movs	r2, #0
 8002674:	605a      	str	r2, [r3, #4]
	  HIDReport.rz = 0;
 8002676:	4b07      	ldr	r3, [pc, #28]	@ (8002694 <startHIDTask+0x74>)
 8002678:	2200      	movs	r2, #0
 800267a:	721a      	strb	r2, [r3, #8]
	  HIDReport.slider = 0;
 800267c:	4b05      	ldr	r3, [pc, #20]	@ (8002694 <startHIDTask+0x74>)
 800267e:	2200      	movs	r2, #0
 8002680:	725a      	strb	r2, [r3, #9]
	  USBD_CUSTOM_HID_SendCustomReport((uint8_t *)&HIDReport, sizeof(HIDReport));
 8002682:	210a      	movs	r1, #10
 8002684:	4803      	ldr	r0, [pc, #12]	@ (8002694 <startHIDTask+0x74>)
 8002686:	f008 ff4b 	bl	800b520 <USBD_CUSTOM_HID_SendCustomReport>
	  HIDReport.steering = gSteering;        // Steering data (0-255)
 800268a:	bf00      	nop
 800268c:	e7cc      	b.n	8002628 <startHIDTask+0x8>
 800268e:	bf00      	nop
 8002690:	2000071c 	.word	0x2000071c
 8002694:	200004ec 	.word	0x200004ec
 8002698:	20000718 	.word	0x20000718
 800269c:	20000714 	.word	0x20000714

080026a0 <DWT_Init>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
// Initialize DWT for cycle counting
void DWT_Init(void) {
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 80026a4:	4b0c      	ldr	r3, [pc, #48]	@ (80026d8 <DWT_Init+0x38>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d105      	bne.n	80026bc <DWT_Init+0x1c>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80026b0:	4b09      	ldr	r3, [pc, #36]	@ (80026d8 <DWT_Init+0x38>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	4a08      	ldr	r2, [pc, #32]	@ (80026d8 <DWT_Init+0x38>)
 80026b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026ba:	60d3      	str	r3, [r2, #12]
    }
    DWT->CYCCNT = 0; // Reset the cycle counter
 80026bc:	4b07      	ldr	r3, [pc, #28]	@ (80026dc <DWT_Init+0x3c>)
 80026be:	2200      	movs	r2, #0
 80026c0:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; // Enable the cycle counter
 80026c2:	4b06      	ldr	r3, [pc, #24]	@ (80026dc <DWT_Init+0x3c>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a05      	ldr	r2, [pc, #20]	@ (80026dc <DWT_Init+0x3c>)
 80026c8:	f043 0301 	orr.w	r3, r3, #1
 80026cc:	6013      	str	r3, [r2, #0]
}
 80026ce:	bf00      	nop
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	e000edf0 	.word	0xe000edf0
 80026dc:	e0001000 	.word	0xe0001000

080026e0 <DWT_Delay_us>:

// Delay function using DWT for accurate timing in microseconds
void DWT_Delay_us(uint32_t us) {
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT;
 80026e8:	4b0d      	ldr	r3, [pc, #52]	@ (8002720 <DWT_Delay_us+0x40>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	60fb      	str	r3, [r7, #12]
    uint32_t delayTicks = us * (SystemCoreClock / 1000000); // Convert microseconds to ticks
 80026ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002724 <DWT_Delay_us+0x44>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a0d      	ldr	r2, [pc, #52]	@ (8002728 <DWT_Delay_us+0x48>)
 80026f4:	fba2 2303 	umull	r2, r3, r2, r3
 80026f8:	0c9a      	lsrs	r2, r3, #18
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	fb02 f303 	mul.w	r3, r2, r3
 8002700:	60bb      	str	r3, [r7, #8]

    while ((DWT->CYCCNT - startTick) < delayTicks) {
 8002702:	bf00      	nop
 8002704:	4b06      	ldr	r3, [pc, #24]	@ (8002720 <DWT_Delay_us+0x40>)
 8002706:	685a      	ldr	r2, [r3, #4]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	68ba      	ldr	r2, [r7, #8]
 800270e:	429a      	cmp	r2, r3
 8002710:	d8f8      	bhi.n	8002704 <DWT_Delay_us+0x24>
        // Wait until the required delay has passed
    }
}
 8002712:	bf00      	nop
 8002714:	bf00      	nop
 8002716:	3714      	adds	r7, #20
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	e0001000 	.word	0xe0001000
 8002724:	20000010 	.word	0x20000010
 8002728:	431bde83 	.word	0x431bde83

0800272c <process_command>:

void process_command(char* cmd) {
 800272c:	b580      	push	{r7, lr}
 800272e:	b08c      	sub	sp, #48	@ 0x30
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
	cJSON *json_data = cJSON_Parse(cmd);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f7ff f9d3 	bl	8001ae0 <cJSON_Parse>
 800273a:	62f8      	str	r0, [r7, #44]	@ 0x2c
	if (json_data != NULL) {
 800273c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800273e:	2b00      	cmp	r3, #0
 8002740:	f000 808d 	beq.w	800285e <process_command+0x132>
		// Extract data from the JSON object
		cJSON *rpm = cJSON_GetObjectItem(json_data, "rpm");
 8002744:	494c      	ldr	r1, [pc, #304]	@ (8002878 <process_command+0x14c>)
 8002746:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002748:	f7ff fcdc 	bl	8002104 <cJSON_GetObjectItem>
 800274c:	62b8      	str	r0, [r7, #40]	@ 0x28
		cJSON *gear = cJSON_GetObjectItem(json_data, "gear");
 800274e:	494b      	ldr	r1, [pc, #300]	@ (800287c <process_command+0x150>)
 8002750:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002752:	f7ff fcd7 	bl	8002104 <cJSON_GetObjectItem>
 8002756:	6278      	str	r0, [r7, #36]	@ 0x24
		cJSON *speedKmh = cJSON_GetObjectItem(json_data, "speedKmh");
 8002758:	4949      	ldr	r1, [pc, #292]	@ (8002880 <process_command+0x154>)
 800275a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800275c:	f7ff fcd2 	bl	8002104 <cJSON_GetObjectItem>
 8002760:	6238      	str	r0, [r7, #32]
		cJSON *hasDRS = cJSON_GetObjectItem(json_data, "hasDRS");
 8002762:	4948      	ldr	r1, [pc, #288]	@ (8002884 <process_command+0x158>)
 8002764:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002766:	f7ff fccd 	bl	8002104 <cJSON_GetObjectItem>
 800276a:	61f8      	str	r0, [r7, #28]
		cJSON *drs = cJSON_GetObjectItem(json_data, "drs");
 800276c:	4946      	ldr	r1, [pc, #280]	@ (8002888 <process_command+0x15c>)
 800276e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002770:	f7ff fcc8 	bl	8002104 <cJSON_GetObjectItem>
 8002774:	61b8      	str	r0, [r7, #24]
		cJSON *pitLim = cJSON_GetObjectItem(json_data, "pitLim");
 8002776:	4945      	ldr	r1, [pc, #276]	@ (800288c <process_command+0x160>)
 8002778:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800277a:	f7ff fcc3 	bl	8002104 <cJSON_GetObjectItem>
 800277e:	6178      	str	r0, [r7, #20]
		cJSON *fuel = cJSON_GetObjectItem(json_data, "fuel");
 8002780:	4943      	ldr	r1, [pc, #268]	@ (8002890 <process_command+0x164>)
 8002782:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002784:	f7ff fcbe 	bl	8002104 <cJSON_GetObjectItem>
 8002788:	6138      	str	r0, [r7, #16]
		cJSON *brakeBias = cJSON_GetObjectItem(json_data, "brakeBias");
 800278a:	4942      	ldr	r1, [pc, #264]	@ (8002894 <process_command+0x168>)
 800278c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800278e:	f7ff fcb9 	bl	8002104 <cJSON_GetObjectItem>
 8002792:	60f8      	str	r0, [r7, #12]
		cJSON *forceFB = cJSON_GetObjectItem(json_data, "forceFB");
 8002794:	4940      	ldr	r1, [pc, #256]	@ (8002898 <process_command+0x16c>)
 8002796:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002798:	f7ff fcb4 	bl	8002104 <cJSON_GetObjectItem>
 800279c:	60b8      	str	r0, [r7, #8]

		// Check if items were found and extract values
		if (cJSON_IsNumber(rpm)) { telemetry_data.tRpm = rpm->valueint; }
 800279e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80027a0:	f7ff fcbf 	bl	8002122 <cJSON_IsNumber>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d003      	beq.n	80027b2 <process_command+0x86>
 80027aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	4a3b      	ldr	r2, [pc, #236]	@ (800289c <process_command+0x170>)
 80027b0:	6013      	str	r3, [r2, #0]
		if (cJSON_IsNumber(gear)) { telemetry_data.tGear = gear->valueint; }
 80027b2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80027b4:	f7ff fcb5 	bl	8002122 <cJSON_IsNumber>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d003      	beq.n	80027c6 <process_command+0x9a>
 80027be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	4a36      	ldr	r2, [pc, #216]	@ (800289c <process_command+0x170>)
 80027c4:	6053      	str	r3, [r2, #4]
		if (cJSON_IsNumber(speedKmh)) { telemetry_data.tSpeedKmh = speedKmh->valueint; }
 80027c6:	6a38      	ldr	r0, [r7, #32]
 80027c8:	f7ff fcab 	bl	8002122 <cJSON_IsNumber>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d003      	beq.n	80027da <process_command+0xae>
 80027d2:	6a3b      	ldr	r3, [r7, #32]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	4a31      	ldr	r2, [pc, #196]	@ (800289c <process_command+0x170>)
 80027d8:	6093      	str	r3, [r2, #8]
		if (cJSON_IsNumber(hasDRS)) { telemetry_data.tHasDRS = hasDRS->valueint; }
 80027da:	69f8      	ldr	r0, [r7, #28]
 80027dc:	f7ff fca1 	bl	8002122 <cJSON_IsNumber>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d003      	beq.n	80027ee <process_command+0xc2>
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	4a2c      	ldr	r2, [pc, #176]	@ (800289c <process_command+0x170>)
 80027ec:	60d3      	str	r3, [r2, #12]
		if (cJSON_IsNumber(drs)) { telemetry_data.tDrs = drs->valueint; }
 80027ee:	69b8      	ldr	r0, [r7, #24]
 80027f0:	f7ff fc97 	bl	8002122 <cJSON_IsNumber>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <process_command+0xd6>
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	4a27      	ldr	r2, [pc, #156]	@ (800289c <process_command+0x170>)
 8002800:	6113      	str	r3, [r2, #16]
		if (cJSON_IsNumber(pitLim)) { telemetry_data.tPitLim = pitLim->valueint; }
 8002802:	6978      	ldr	r0, [r7, #20]
 8002804:	f7ff fc8d 	bl	8002122 <cJSON_IsNumber>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d003      	beq.n	8002816 <process_command+0xea>
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	4a22      	ldr	r2, [pc, #136]	@ (800289c <process_command+0x170>)
 8002814:	6153      	str	r3, [r2, #20]
		if (cJSON_IsNumber(fuel)) { telemetry_data.tFuel = fuel->valueint; }
 8002816:	6938      	ldr	r0, [r7, #16]
 8002818:	f7ff fc83 	bl	8002122 <cJSON_IsNumber>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <process_command+0xfe>
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	4a1d      	ldr	r2, [pc, #116]	@ (800289c <process_command+0x170>)
 8002828:	6193      	str	r3, [r2, #24]
		if (cJSON_IsNumber(brakeBias)) { telemetry_data.tBrakeBias = brakeBias->valueint; }
 800282a:	68f8      	ldr	r0, [r7, #12]
 800282c:	f7ff fc79 	bl	8002122 <cJSON_IsNumber>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <process_command+0x112>
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	4a18      	ldr	r2, [pc, #96]	@ (800289c <process_command+0x170>)
 800283c:	61d3      	str	r3, [r2, #28]

		if (cJSON_IsNumber(forceFB)) { gFfbSignal = (float)forceFB->valuedouble; }
 800283e:	68b8      	ldr	r0, [r7, #8]
 8002840:	f7ff fc6f 	bl	8002122 <cJSON_IsNumber>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d009      	beq.n	800285e <process_command+0x132>
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002850:	4610      	mov	r0, r2
 8002852:	4619      	mov	r1, r3
 8002854:	f7fe f9e2 	bl	8000c1c <__aeabi_d2f>
 8002858:	4603      	mov	r3, r0
 800285a:	4a11      	ldr	r2, [pc, #68]	@ (80028a0 <process_command+0x174>)
 800285c:	6013      	str	r3, [r2, #0]
		}
		// Cleanup
		cJSON_Delete(json_data);
 800285e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002860:	f7fe fc5c 	bl	800111c <cJSON_Delete>
		// Clear the buffer for the next message
		memset(gCommandData, 0, BUFFER_SIZE);
 8002864:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002868:	2100      	movs	r1, #0
 800286a:	480e      	ldr	r0, [pc, #56]	@ (80028a4 <process_command+0x178>)
 800286c:	f00f fc11 	bl	8012092 <memset>
}
 8002870:	bf00      	nop
 8002872:	3730      	adds	r7, #48	@ 0x30
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	0801421c 	.word	0x0801421c
 800287c:	08014220 	.word	0x08014220
 8002880:	08014228 	.word	0x08014228
 8002884:	08014234 	.word	0x08014234
 8002888:	0801423c 	.word	0x0801423c
 800288c:	08014240 	.word	0x08014240
 8002890:	08014248 	.word	0x08014248
 8002894:	08014250 	.word	0x08014250
 8002898:	0801425c 	.word	0x0801425c
 800289c:	200004cc 	.word	0x200004cc
 80028a0:	20000720 	.word	0x20000720
 80028a4:	200005f8 	.word	0x200005f8

080028a8 <constrain>:

    // Calculate the oscillation value using a sine wave
    return sin((2 * M_PI * elapsed_time) / period);
}

float constrain(float x, float lower, float upper) {
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	ed87 0a03 	vstr	s0, [r7, #12]
 80028b2:	edc7 0a02 	vstr	s1, [r7, #8]
 80028b6:	ed87 1a01 	vstr	s2, [r7, #4]
    if (x < lower) return lower;
 80028ba:	ed97 7a03 	vldr	s14, [r7, #12]
 80028be:	edd7 7a02 	vldr	s15, [r7, #8]
 80028c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ca:	d501      	bpl.n	80028d0 <constrain+0x28>
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	e00b      	b.n	80028e8 <constrain+0x40>
    if (x > upper) return upper;
 80028d0:	ed97 7a03 	vldr	s14, [r7, #12]
 80028d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80028d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028e0:	dd01      	ble.n	80028e6 <constrain+0x3e>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	e000      	b.n	80028e8 <constrain+0x40>
    return x;
 80028e6:	68fb      	ldr	r3, [r7, #12]
}
 80028e8:	ee07 3a90 	vmov	s15, r3
 80028ec:	eeb0 0a67 	vmov.f32	s0, s15
 80028f0:	3714      	adds	r7, #20
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
	...

080028fc <calculate_inertia>:

float calculate_inertia(float force_feedback, float angular_velocity) {
 80028fc:	b480      	push	{r7}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	ed87 0a01 	vstr	s0, [r7, #4]
 8002906:	edc7 0a00 	vstr	s1, [r7]
    static float previous_output = 0;
    float inertia_coefficient = 0.1; // Fine-tune for feel
 800290a:	4b12      	ldr	r3, [pc, #72]	@ (8002954 <calculate_inertia+0x58>)
 800290c:	60fb      	str	r3, [r7, #12]
    float inertia_force = inertia_coefficient * previous_output + (1 - inertia_coefficient) * force_feedback;
 800290e:	4b12      	ldr	r3, [pc, #72]	@ (8002958 <calculate_inertia+0x5c>)
 8002910:	ed93 7a00 	vldr	s14, [r3]
 8002914:	edd7 7a03 	vldr	s15, [r7, #12]
 8002918:	ee27 7a27 	vmul.f32	s14, s14, s15
 800291c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002920:	edd7 7a03 	vldr	s15, [r7, #12]
 8002924:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002928:	edd7 7a01 	vldr	s15, [r7, #4]
 800292c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002930:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002934:	edc7 7a02 	vstr	s15, [r7, #8]
    previous_output = inertia_force;
 8002938:	4a07      	ldr	r2, [pc, #28]	@ (8002958 <calculate_inertia+0x5c>)
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	6013      	str	r3, [r2, #0]
    return inertia_force;
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	ee07 3a90 	vmov	s15, r3
}
 8002944:	eeb0 0a67 	vmov.f32	s0, s15
 8002948:	3714      	adds	r7, #20
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	3dcccccd 	.word	0x3dcccccd
 8002958:	200009e8 	.word	0x200009e8

0800295c <calculate_damping>:

float calculate_damping(float angular_velocity) {
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	ed87 0a01 	vstr	s0, [r7, #4]
    float damping_coefficient = 0.05;
 8002966:	4b08      	ldr	r3, [pc, #32]	@ (8002988 <calculate_damping+0x2c>)
 8002968:	60fb      	str	r3, [r7, #12]
    return -damping_coefficient * angular_velocity;
 800296a:	edd7 7a03 	vldr	s15, [r7, #12]
 800296e:	eeb1 7a67 	vneg.f32	s14, s15
 8002972:	edd7 7a01 	vldr	s15, [r7, #4]
 8002976:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800297a:	eeb0 0a67 	vmov.f32	s0, s15
 800297e:	3714      	adds	r7, #20
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr
 8002988:	3d4ccccd 	.word	0x3d4ccccd

0800298c <calculate_friction>:

float calculate_friction(float angular_velocity) {
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	ed87 0a01 	vstr	s0, [r7, #4]
    float friction_coefficient = 0.02;
 8002996:	4b10      	ldr	r3, [pc, #64]	@ (80029d8 <calculate_friction+0x4c>)
 8002998:	60fb      	str	r3, [r7, #12]
    if (angular_velocity > 0) {
 800299a:	edd7 7a01 	vldr	s15, [r7, #4]
 800299e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029a6:	dd04      	ble.n	80029b2 <calculate_friction+0x26>
        return -friction_coefficient;
 80029a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80029ac:	eef1 7a67 	vneg.f32	s15, s15
 80029b0:	e00b      	b.n	80029ca <calculate_friction+0x3e>
    } else if (angular_velocity < 0) {
 80029b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80029b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029be:	d502      	bpl.n	80029c6 <calculate_friction+0x3a>
        return friction_coefficient;
 80029c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80029c4:	e001      	b.n	80029ca <calculate_friction+0x3e>
    } else {
        return 0;
 80029c6:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80029dc <calculate_friction+0x50>
    }
}
 80029ca:	eeb0 0a67 	vmov.f32	s0, s15
 80029ce:	3714      	adds	r7, #20
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr
 80029d8:	3ca3d70a 	.word	0x3ca3d70a
 80029dc:	00000000 	.word	0x00000000

080029e0 <calculate_lock>:

float calculate_lock(float angle) {
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	ed87 0a01 	vstr	s0, [r7, #4]
    float lock_coefficient = 1.0;
 80029ea:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80029ee:	60fb      	str	r3, [r7, #12]
    float max_angle = 450.0;
 80029f0:	4b1c      	ldr	r3, [pc, #112]	@ (8002a64 <calculate_lock+0x84>)
 80029f2:	60bb      	str	r3, [r7, #8]
    if (angle > max_angle) {
 80029f4:	ed97 7a01 	vldr	s14, [r7, #4]
 80029f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80029fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a04:	dd0c      	ble.n	8002a20 <calculate_lock+0x40>
        return -lock_coefficient * (angle - max_angle);
 8002a06:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a0a:	eeb1 7a67 	vneg.f32	s14, s15
 8002a0e:	edd7 6a01 	vldr	s13, [r7, #4]
 8002a12:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a16:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a1e:	e019      	b.n	8002a54 <calculate_lock+0x74>
    } else if (angle < -max_angle) {
 8002a20:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a24:	eef1 7a67 	vneg.f32	s15, s15
 8002a28:	ed97 7a01 	vldr	s14, [r7, #4]
 8002a2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a34:	d50c      	bpl.n	8002a50 <calculate_lock+0x70>
        return -lock_coefficient * (angle + max_angle);
 8002a36:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a3a:	eeb1 7a67 	vneg.f32	s14, s15
 8002a3e:	edd7 6a01 	vldr	s13, [r7, #4]
 8002a42:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a4e:	e001      	b.n	8002a54 <calculate_lock+0x74>
    }
    return 0;
 8002a50:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8002a68 <calculate_lock+0x88>
}
 8002a54:	eeb0 0a67 	vmov.f32	s0, s15
 8002a58:	3714      	adds	r7, #20
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	43e10000 	.word	0x43e10000
 8002a68:	00000000 	.word	0x00000000

08002a6c <scale_to_pwm>:
//    gPWM = pwm_output;
//
//    return pwm_output;
//}

float scale_to_pwm(float total_force) {
 8002a6c:	b5b0      	push	{r4, r5, r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	ed87 0a01 	vstr	s0, [r7, #4]
    const float MIN_PWM = 50.0f;    // Minimum PWM value for the motor to start moving
 8002a76:	4b2b      	ldr	r3, [pc, #172]	@ (8002b24 <scale_to_pwm+0xb8>)
 8002a78:	617b      	str	r3, [r7, #20]
    const float MAX_PWM = 255.0f;   // Maximum PWM value
 8002a7a:	4b2b      	ldr	r3, [pc, #172]	@ (8002b28 <scale_to_pwm+0xbc>)
 8002a7c:	613b      	str	r3, [r7, #16]

    // If total_force is zero, return zero PWM output
    if (total_force == 0.0f) {
 8002a7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a82:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a8a:	d106      	bne.n	8002a9a <scale_to_pwm+0x2e>
        gPWM = 0.0f;
 8002a8c:	4b27      	ldr	r3, [pc, #156]	@ (8002b2c <scale_to_pwm+0xc0>)
 8002a8e:	f04f 0200 	mov.w	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
        return 0.0f;
 8002a94:	f04f 0300 	mov.w	r3, #0
 8002a98:	e03c      	b.n	8002b14 <scale_to_pwm+0xa8>
    }

    // Calculate PWM output
    float pwm_output = fabs(total_force) * (MAX_PWM - MIN_PWM) + MIN_PWM;
 8002a9a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a9e:	eef0 7ae7 	vabs.f32	s15, s15
 8002aa2:	ee17 0a90 	vmov	r0, s15
 8002aa6:	f7fd fd7f 	bl	80005a8 <__aeabi_f2d>
 8002aaa:	4604      	mov	r4, r0
 8002aac:	460d      	mov	r5, r1
 8002aae:	ed97 7a04 	vldr	s14, [r7, #16]
 8002ab2:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ab6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aba:	ee17 0a90 	vmov	r0, s15
 8002abe:	f7fd fd73 	bl	80005a8 <__aeabi_f2d>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	4620      	mov	r0, r4
 8002ac8:	4629      	mov	r1, r5
 8002aca:	f7fd fdc5 	bl	8000658 <__aeabi_dmul>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	4614      	mov	r4, r2
 8002ad4:	461d      	mov	r5, r3
 8002ad6:	6978      	ldr	r0, [r7, #20]
 8002ad8:	f7fd fd66 	bl	80005a8 <__aeabi_f2d>
 8002adc:	4602      	mov	r2, r0
 8002ade:	460b      	mov	r3, r1
 8002ae0:	4620      	mov	r0, r4
 8002ae2:	4629      	mov	r1, r5
 8002ae4:	f7fd fc02 	bl	80002ec <__adddf3>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	460b      	mov	r3, r1
 8002aec:	4610      	mov	r0, r2
 8002aee:	4619      	mov	r1, r3
 8002af0:	f7fe f894 	bl	8000c1c <__aeabi_d2f>
 8002af4:	4603      	mov	r3, r0
 8002af6:	60fb      	str	r3, [r7, #12]

    // Constrain PWM output to valid range
    pwm_output = constrain(pwm_output, MIN_PWM, MAX_PWM);
 8002af8:	ed97 1a04 	vldr	s2, [r7, #16]
 8002afc:	edd7 0a05 	vldr	s1, [r7, #20]
 8002b00:	ed97 0a03 	vldr	s0, [r7, #12]
 8002b04:	f7ff fed0 	bl	80028a8 <constrain>
 8002b08:	ed87 0a03 	vstr	s0, [r7, #12]

    // Update debug variable
    gPWM = pwm_output;
 8002b0c:	4a07      	ldr	r2, [pc, #28]	@ (8002b2c <scale_to_pwm+0xc0>)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6013      	str	r3, [r2, #0]

    return pwm_output;
 8002b12:	68fb      	ldr	r3, [r7, #12]
}
 8002b14:	ee07 3a90 	vmov	s15, r3
 8002b18:	eeb0 0a67 	vmov.f32	s0, s15
 8002b1c:	3718      	adds	r7, #24
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bdb0      	pop	{r4, r5, r7, pc}
 8002b22:	bf00      	nop
 8002b24:	42480000 	.word	0x42480000
 8002b28:	437f0000 	.word	0x437f0000
 8002b2c:	200006f8 	.word	0x200006f8

08002b30 <init_encoder>:

extern void init_encoder() {
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
    // Start the encoder mode timer
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8002b34:	213c      	movs	r1, #60	@ 0x3c
 8002b36:	4803      	ldr	r0, [pc, #12]	@ (8002b44 <init_encoder+0x14>)
 8002b38:	f005 f918 	bl	8007d6c <HAL_TIM_Encoder_Start>
    reset_encoder_position();
 8002b3c:	f000 f812 	bl	8002b64 <reset_encoder_position>
}
 8002b40:	bf00      	nop
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	20000af0 	.word	0x20000af0

08002b48 <read_encoder_position>:

int16_t read_encoder_position() {
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
    return __HAL_TIM_GET_COUNTER(&htim2);  // Get the current encoder count
 8002b4c:	4b04      	ldr	r3, [pc, #16]	@ (8002b60 <read_encoder_position+0x18>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b52:	b21b      	sxth	r3, r3
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	20000af0 	.word	0x20000af0

08002b64 <reset_encoder_position>:

void reset_encoder_position() {
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
    __HAL_TIM_SET_COUNTER(&htim2, 0);  // Reset the encoder count to zero
 8002b68:	4b04      	ldr	r3, [pc, #16]	@ (8002b7c <reset_encoder_position+0x18>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002b70:	bf00      	nop
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	20000af0 	.word	0x20000af0

08002b80 <get_angle_degrees>:

float get_angle_degrees() {
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
    int16_t position = read_encoder_position();
 8002b86:	f7ff ffdf 	bl	8002b48 <read_encoder_position>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	80fb      	strh	r3, [r7, #6]
    gPosition = position;
 8002b8e:	4a12      	ldr	r2, [pc, #72]	@ (8002bd8 <get_angle_degrees+0x58>)
 8002b90:	88fb      	ldrh	r3, [r7, #6]
 8002b92:	8013      	strh	r3, [r2, #0]
    return (position * 360.0) / ENCODER_RESOLUTION;
 8002b94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7fd fcf3 	bl	8000584 <__aeabi_i2d>
 8002b9e:	f04f 0200 	mov.w	r2, #0
 8002ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8002bdc <get_angle_degrees+0x5c>)
 8002ba4:	f7fd fd58 	bl	8000658 <__aeabi_dmul>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	460b      	mov	r3, r1
 8002bac:	4610      	mov	r0, r2
 8002bae:	4619      	mov	r1, r3
 8002bb0:	f04f 0200 	mov.w	r2, #0
 8002bb4:	4b0a      	ldr	r3, [pc, #40]	@ (8002be0 <get_angle_degrees+0x60>)
 8002bb6:	f7fd fe79 	bl	80008ac <__aeabi_ddiv>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	4610      	mov	r0, r2
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	f7fe f82b 	bl	8000c1c <__aeabi_d2f>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	ee07 3a90 	vmov	s15, r3
}
 8002bcc:	eeb0 0a67 	vmov.f32	s0, s15
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	20000704 	.word	0x20000704
 8002bdc:	40768000 	.word	0x40768000
 8002be0:	40a2c000 	.word	0x40a2c000

08002be4 <update_wheel_position_and_velocity>:

void update_wheel_position_and_velocity(float *wheel_angle, float *angular_velocity) {
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
    // Get the current encoder count
    float current_angle = get_angle_degrees();
 8002bee:	f7ff ffc7 	bl	8002b80 <get_angle_degrees>
 8002bf2:	ed87 0a04 	vstr	s0, [r7, #16]

    // Calculate time difference (in seconds) since the last update
    uint32_t current_time = HAL_GetTick();  // In milliseconds
 8002bf6:	f001 f8d3 	bl	8003da0 <HAL_GetTick>
 8002bfa:	60f8      	str	r0, [r7, #12]
    float dt = (current_time - last_update_time) / 1000.0f;  // Convert ms to seconds
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	ee07 3a90 	vmov	s15, r3
 8002c02:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c06:	4b37      	ldr	r3, [pc, #220]	@ (8002ce4 <update_wheel_position_and_velocity+0x100>)
 8002c08:	edd3 7a00 	vldr	s15, [r3]
 8002c0c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c10:	eddf 6a35 	vldr	s13, [pc, #212]	@ 8002ce8 <update_wheel_position_and_velocity+0x104>
 8002c14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c18:	edc7 7a02 	vstr	s15, [r7, #8]

    // Calculate the change in angle
    float delta_angle = current_angle - last_encoder_count;
 8002c1c:	4b33      	ldr	r3, [pc, #204]	@ (8002cec <update_wheel_position_and_velocity+0x108>)
 8002c1e:	edd3 7a00 	vldr	s15, [r3]
 8002c22:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c2a:	edc7 7a05 	vstr	s15, [r7, #20]

    // Implement a threshold to ignore small changes
    if (fabs(delta_angle) < 0.25f) {  // Adjust the threshold as needed
 8002c2e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c32:	eef0 7ae7 	vabs.f32	s15, s15
 8002c36:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 8002c3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c42:	d502      	bpl.n	8002c4a <update_wheel_position_and_velocity+0x66>
        delta_angle = 0.0f;
 8002c44:	f04f 0300 	mov.w	r3, #0
 8002c48:	617b      	str	r3, [r7, #20]
    }

    // Update the wheel angle, keeping within the lock limit
    *wheel_angle += delta_angle;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	ed93 7a00 	vldr	s14, [r3]
 8002c50:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	edc3 7a00 	vstr	s15, [r3]
    if (*wheel_angle > WHEEL_MAX_ANGLE) *wheel_angle = WHEEL_MAX_ANGLE;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	edd3 7a00 	vldr	s15, [r3]
 8002c64:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8002cf0 <update_wheel_position_and_velocity+0x10c>
 8002c68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c70:	dd02      	ble.n	8002c78 <update_wheel_position_and_velocity+0x94>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a1f      	ldr	r2, [pc, #124]	@ (8002cf4 <update_wheel_position_and_velocity+0x110>)
 8002c76:	601a      	str	r2, [r3, #0]
    if (*wheel_angle < -WHEEL_MAX_ANGLE) *wheel_angle = -WHEEL_MAX_ANGLE;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	edd3 7a00 	vldr	s15, [r3]
 8002c7e:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8002cf8 <update_wheel_position_and_velocity+0x114>
 8002c82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c8a:	d502      	bpl.n	8002c92 <update_wheel_position_and_velocity+0xae>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a1b      	ldr	r2, [pc, #108]	@ (8002cfc <update_wheel_position_and_velocity+0x118>)
 8002c90:	601a      	str	r2, [r3, #0]

    gDelta = delta_angle;
 8002c92:	4a1b      	ldr	r2, [pc, #108]	@ (8002d00 <update_wheel_position_and_velocity+0x11c>)
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	6013      	str	r3, [r2, #0]
    // Calculate angular velocity (degrees per second)
    if (dt > 0.0001f) {  // Avoid division by zero
 8002c98:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c9c:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8002d04 <update_wheel_position_and_velocity+0x120>
 8002ca0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ca8:	dd09      	ble.n	8002cbe <update_wheel_position_and_velocity+0xda>
        *angular_velocity = delta_angle / dt;
 8002caa:	edd7 6a05 	vldr	s13, [r7, #20]
 8002cae:	ed97 7a02 	vldr	s14, [r7, #8]
 8002cb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	edc3 7a00 	vstr	s15, [r3]
 8002cbc:	e003      	b.n	8002cc6 <update_wheel_position_and_velocity+0xe2>
    } else {
        *angular_velocity = 0.0f;
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	f04f 0200 	mov.w	r2, #0
 8002cc4:	601a      	str	r2, [r3, #0]
    }

    // Store the current values for the next update
    last_encoder_count = current_angle;
 8002cc6:	4a09      	ldr	r2, [pc, #36]	@ (8002cec <update_wheel_position_and_velocity+0x108>)
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	6013      	str	r3, [r2, #0]
    last_update_time = current_time;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	ee07 3a90 	vmov	s15, r3
 8002cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cd6:	4b03      	ldr	r3, [pc, #12]	@ (8002ce4 <update_wheel_position_and_velocity+0x100>)
 8002cd8:	edc3 7a00 	vstr	s15, [r3]
}
 8002cdc:	bf00      	nop
 8002cde:	3718      	adds	r7, #24
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	20000728 	.word	0x20000728
 8002ce8:	447a0000 	.word	0x447a0000
 8002cec:	20000724 	.word	0x20000724
 8002cf0:	43e10000 	.word	0x43e10000
 8002cf4:	43e10000 	.word	0x43e10000
 8002cf8:	c3e10000 	.word	0xc3e10000
 8002cfc:	c3e10000 	.word	0xc3e10000
 8002d00:	20000710 	.word	0x20000710
 8002d04:	38d1b717 	.word	0x38d1b717

08002d08 <set_motor_pwm>:


void set_motor_pwm(float pwm_value) {
 8002d08:	b5b0      	push	{r4, r5, r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	ed87 0a01 	vstr	s0, [r7, #4]
    // Assuming pwm_value ranges from 0 to 255
    uint32_t pulse = (uint32_t)((pwm_value / 255.0) * htim3.Init.Period);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f7fd fc48 	bl	80005a8 <__aeabi_f2d>
 8002d18:	a312      	add	r3, pc, #72	@ (adr r3, 8002d64 <set_motor_pwm+0x5c>)
 8002d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d1e:	f7fd fdc5 	bl	80008ac <__aeabi_ddiv>
 8002d22:	4602      	mov	r2, r0
 8002d24:	460b      	mov	r3, r1
 8002d26:	4614      	mov	r4, r2
 8002d28:	461d      	mov	r5, r3
 8002d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8002d60 <set_motor_pwm+0x58>)
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fd fc18 	bl	8000564 <__aeabi_ui2d>
 8002d34:	4602      	mov	r2, r0
 8002d36:	460b      	mov	r3, r1
 8002d38:	4620      	mov	r0, r4
 8002d3a:	4629      	mov	r1, r5
 8002d3c:	f7fd fc8c 	bl	8000658 <__aeabi_dmul>
 8002d40:	4602      	mov	r2, r0
 8002d42:	460b      	mov	r3, r1
 8002d44:	4610      	mov	r0, r2
 8002d46:	4619      	mov	r1, r3
 8002d48:	f7fd ff48 	bl	8000bdc <__aeabi_d2uiz>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	60fb      	str	r3, [r7, #12]

    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulse);
 8002d50:	4b03      	ldr	r3, [pc, #12]	@ (8002d60 <set_motor_pwm+0x58>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002d58:	bf00      	nop
 8002d5a:	3710      	adds	r7, #16
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bdb0      	pop	{r4, r5, r7, pc}
 8002d60:	20000b38 	.word	0x20000b38
 8002d64:	00000000 	.word	0x00000000
 8002d68:	406fe000 	.word	0x406fe000

08002d6c <set_motor_direction>:

void set_motor_direction(uint8_t direction) {
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	4603      	mov	r3, r0
 8002d74:	71fb      	strb	r3, [r7, #7]
    if (direction == 1) { // Forward
 8002d76:	79fb      	ldrb	r3, [r7, #7]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d10a      	bne.n	8002d92 <set_motor_direction+0x26>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);   // IN1 = HIGH
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	2102      	movs	r1, #2
 8002d80:	4812      	ldr	r0, [pc, #72]	@ (8002dcc <set_motor_direction+0x60>)
 8002d82:	f001 feb5 	bl	8004af0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); // IN2 = LOW
 8002d86:	2200      	movs	r2, #0
 8002d88:	2104      	movs	r1, #4
 8002d8a:	4810      	ldr	r0, [pc, #64]	@ (8002dcc <set_motor_direction+0x60>)
 8002d8c:	f001 feb0 	bl	8004af0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);   // IN2 = HIGH
    } else { // Stop
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);   // IN1 = LOW
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);   // IN2 = LOW
    }
}
 8002d90:	e017      	b.n	8002dc2 <set_motor_direction+0x56>
    } else if (direction == 0) { // Reverse
 8002d92:	79fb      	ldrb	r3, [r7, #7]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10a      	bne.n	8002dae <set_motor_direction+0x42>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // IN1 = LOW
 8002d98:	2200      	movs	r2, #0
 8002d9a:	2102      	movs	r1, #2
 8002d9c:	480b      	ldr	r0, [pc, #44]	@ (8002dcc <set_motor_direction+0x60>)
 8002d9e:	f001 fea7 	bl	8004af0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);   // IN2 = HIGH
 8002da2:	2201      	movs	r2, #1
 8002da4:	2104      	movs	r1, #4
 8002da6:	4809      	ldr	r0, [pc, #36]	@ (8002dcc <set_motor_direction+0x60>)
 8002da8:	f001 fea2 	bl	8004af0 <HAL_GPIO_WritePin>
}
 8002dac:	e009      	b.n	8002dc2 <set_motor_direction+0x56>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);   // IN1 = LOW
 8002dae:	2200      	movs	r2, #0
 8002db0:	2102      	movs	r1, #2
 8002db2:	4806      	ldr	r0, [pc, #24]	@ (8002dcc <set_motor_direction+0x60>)
 8002db4:	f001 fe9c 	bl	8004af0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);   // IN2 = LOW
 8002db8:	2200      	movs	r2, #0
 8002dba:	2104      	movs	r1, #4
 8002dbc:	4803      	ldr	r0, [pc, #12]	@ (8002dcc <set_motor_direction+0x60>)
 8002dbe:	f001 fe97 	bl	8004af0 <HAL_GPIO_WritePin>
}
 8002dc2:	bf00      	nop
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	40020400 	.word	0x40020400

08002dd0 <releaseSPI>:

extern void releaseSPI() {
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
	// Process the received data (rx_buffer)
	memcpy(gCommandData, rx_buffer, sizeof(rx_buffer));
 8002dd4:	4a0a      	ldr	r2, [pc, #40]	@ (8002e00 <releaseSPI+0x30>)
 8002dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8002e04 <releaseSPI+0x34>)
 8002dd8:	4610      	mov	r0, r2
 8002dda:	4619      	mov	r1, r3
 8002ddc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002de0:	461a      	mov	r2, r3
 8002de2:	f00f fa4a 	bl	801227a <memcpy>
	osSemaphoreRelease(spiSendMutexHandle);
 8002de6:	4b08      	ldr	r3, [pc, #32]	@ (8002e08 <releaseSPI+0x38>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f00b fc38 	bl	800e660 <osSemaphoreRelease>
	// Clear the buffer for the next message
	memset(rx_buffer, 0, BUFFER_SIZE);
 8002df0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002df4:	2100      	movs	r1, #0
 8002df6:	4803      	ldr	r0, [pc, #12]	@ (8002e04 <releaseSPI+0x34>)
 8002df8:	f00f f94b 	bl	8012092 <memset>
}
 8002dfc:	bf00      	nop
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	200005f8 	.word	0x200005f8
 8002e04:	200004f8 	.word	0x200004f8
 8002e08:	20000744 	.word	0x20000744

08002e0c <signalTelemetryTask>:

extern void signalTelemetryTask() {
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
    // Pull CS line high to deselect the slave
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8002e10:	2201      	movs	r2, #1
 8002e12:	2110      	movs	r1, #16
 8002e14:	4806      	ldr	r0, [pc, #24]	@ (8002e30 <signalTelemetryTask+0x24>)
 8002e16:	f001 fe6b 	bl	8004af0 <HAL_GPIO_WritePin>
    DWT_Delay_us(2);
 8002e1a:	2002      	movs	r0, #2
 8002e1c:	f7ff fc60 	bl	80026e0 <DWT_Delay_us>
	osSignalSet(telemetryTaskHandle, 0x01);  // Set signal for telemetry task
 8002e20:	4b04      	ldr	r3, [pc, #16]	@ (8002e34 <signalTelemetryTask+0x28>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2101      	movs	r1, #1
 8002e26:	4618      	mov	r0, r3
 8002e28:	f00b fb5a 	bl	800e4e0 <osSignalSet>
}
 8002e2c:	bf00      	nop
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	40020000 	.word	0x40020000
 8002e34:	20000730 	.word	0x20000730

08002e38 <restartUart>:

extern void restartUart(UART_HandleTypeDef *huart) {
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(huart, rx_buffer, sizeof(rx_buffer));
 8002e40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e44:	4903      	ldr	r1, [pc, #12]	@ (8002e54 <restartUart+0x1c>)
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f005 fde5 	bl	8008a16 <HAL_UART_Receive_IT>
}
 8002e4c:	bf00      	nop
 8002e4e:	3708      	adds	r7, #8
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	200004f8 	.word	0x200004f8

08002e58 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b08a      	sub	sp, #40	@ 0x28
 8002e5c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e5e:	f107 0314 	add.w	r3, r7, #20
 8002e62:	2200      	movs	r2, #0
 8002e64:	601a      	str	r2, [r3, #0]
 8002e66:	605a      	str	r2, [r3, #4]
 8002e68:	609a      	str	r2, [r3, #8]
 8002e6a:	60da      	str	r2, [r3, #12]
 8002e6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e6e:	2300      	movs	r3, #0
 8002e70:	613b      	str	r3, [r7, #16]
 8002e72:	4b37      	ldr	r3, [pc, #220]	@ (8002f50 <MX_GPIO_Init+0xf8>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e76:	4a36      	ldr	r2, [pc, #216]	@ (8002f50 <MX_GPIO_Init+0xf8>)
 8002e78:	f043 0304 	orr.w	r3, r3, #4
 8002e7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e7e:	4b34      	ldr	r3, [pc, #208]	@ (8002f50 <MX_GPIO_Init+0xf8>)
 8002e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e82:	f003 0304 	and.w	r3, r3, #4
 8002e86:	613b      	str	r3, [r7, #16]
 8002e88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	60fb      	str	r3, [r7, #12]
 8002e8e:	4b30      	ldr	r3, [pc, #192]	@ (8002f50 <MX_GPIO_Init+0xf8>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e92:	4a2f      	ldr	r2, [pc, #188]	@ (8002f50 <MX_GPIO_Init+0xf8>)
 8002e94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e98:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e9a:	4b2d      	ldr	r3, [pc, #180]	@ (8002f50 <MX_GPIO_Init+0xf8>)
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	60bb      	str	r3, [r7, #8]
 8002eaa:	4b29      	ldr	r3, [pc, #164]	@ (8002f50 <MX_GPIO_Init+0xf8>)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eae:	4a28      	ldr	r2, [pc, #160]	@ (8002f50 <MX_GPIO_Init+0xf8>)
 8002eb0:	f043 0301 	orr.w	r3, r3, #1
 8002eb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002eb6:	4b26      	ldr	r3, [pc, #152]	@ (8002f50 <MX_GPIO_Init+0xf8>)
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	60bb      	str	r3, [r7, #8]
 8002ec0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	607b      	str	r3, [r7, #4]
 8002ec6:	4b22      	ldr	r3, [pc, #136]	@ (8002f50 <MX_GPIO_Init+0xf8>)
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eca:	4a21      	ldr	r2, [pc, #132]	@ (8002f50 <MX_GPIO_Init+0xf8>)
 8002ecc:	f043 0302 	orr.w	r3, r3, #2
 8002ed0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ed2:	4b1f      	ldr	r3, [pc, #124]	@ (8002f50 <MX_GPIO_Init+0xf8>)
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	607b      	str	r3, [r7, #4]
 8002edc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8002ede:	2200      	movs	r2, #0
 8002ee0:	2130      	movs	r1, #48	@ 0x30
 8002ee2:	481c      	ldr	r0, [pc, #112]	@ (8002f54 <MX_GPIO_Init+0xfc>)
 8002ee4:	f001 fe04 	bl	8004af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8002ee8:	2200      	movs	r2, #0
 8002eea:	2106      	movs	r1, #6
 8002eec:	481a      	ldr	r0, [pc, #104]	@ (8002f58 <MX_GPIO_Init+0x100>)
 8002eee:	f001 fdff 	bl	8004af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002ef2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002ef6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002ef8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002efc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efe:	2300      	movs	r3, #0
 8002f00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002f02:	f107 0314 	add.w	r3, r7, #20
 8002f06:	4619      	mov	r1, r3
 8002f08:	4814      	ldr	r0, [pc, #80]	@ (8002f5c <MX_GPIO_Init+0x104>)
 8002f0a:	f001 fc5d 	bl	80047c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 8002f0e:	2330      	movs	r3, #48	@ 0x30
 8002f10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f12:	2301      	movs	r3, #1
 8002f14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f16:	2300      	movs	r3, #0
 8002f18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f1e:	f107 0314 	add.w	r3, r7, #20
 8002f22:	4619      	mov	r1, r3
 8002f24:	480b      	ldr	r0, [pc, #44]	@ (8002f54 <MX_GPIO_Init+0xfc>)
 8002f26:	f001 fc4f 	bl	80047c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8002f2a:	2306      	movs	r3, #6
 8002f2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f32:	2300      	movs	r3, #0
 8002f34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f36:	2300      	movs	r3, #0
 8002f38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f3a:	f107 0314 	add.w	r3, r7, #20
 8002f3e:	4619      	mov	r1, r3
 8002f40:	4805      	ldr	r0, [pc, #20]	@ (8002f58 <MX_GPIO_Init+0x100>)
 8002f42:	f001 fc41 	bl	80047c8 <HAL_GPIO_Init>

}
 8002f46:	bf00      	nop
 8002f48:	3728      	adds	r7, #40	@ 0x28
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	40023800 	.word	0x40023800
 8002f54:	40020000 	.word	0x40020000
 8002f58:	40020400 	.word	0x40020400
 8002f5c:	40020800 	.word	0x40020800

08002f60 <send_response>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void send_response(const char* str) {
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
    if (str == NULL) {
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00c      	beq.n	8002f88 <send_response+0x28>
        return; // Handle null pointer case if necessary
    }

    // Calculate the length of the string
    uint16_t len = strlen(str);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f7fd f958 	bl	8000224 <strlen>
 8002f74:	4603      	mov	r3, r0
 8002f76:	81fb      	strh	r3, [r7, #14]

    // Transmit the string using HAL_UART_Transmit
    HAL_UART_Transmit(&huart2, (uint8_t*)str, len, HAL_MAX_DELAY);
 8002f78:	89fa      	ldrh	r2, [r7, #14]
 8002f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f7e:	6879      	ldr	r1, [r7, #4]
 8002f80:	4803      	ldr	r0, [pc, #12]	@ (8002f90 <send_response+0x30>)
 8002f82:	f005 fcbd 	bl	8008900 <HAL_UART_Transmit>
 8002f86:	e000      	b.n	8002f8a <send_response+0x2a>
        return; // Handle null pointer case if necessary
 8002f88:	bf00      	nop
}
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	20000b80 	.word	0x20000b80

08002f94 <_write>:

int _write(int file, char *data, int len) {
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
    // Replace 'huart2' with your specific UART handle (e.g., 'huart1', 'huart3', etc.)
    HAL_UART_Transmit(&huart2, (uint8_t *)data, len, HAL_MAX_DELAY);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8002fa8:	68b9      	ldr	r1, [r7, #8]
 8002faa:	4804      	ldr	r0, [pc, #16]	@ (8002fbc <_write+0x28>)
 8002fac:	f005 fca8 	bl	8008900 <HAL_UART_Transmit>
    return len;
 8002fb0:	687b      	ldr	r3, [r7, #4]
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	20000b80 	.word	0x20000b80

08002fc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002fc4:	f000 feb6 	bl	8003d34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002fc8:	f000 f828 	bl	800301c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002fcc:	f7ff ff44 	bl	8002e58 <MX_GPIO_Init>
  MX_DMA_Init();
 8002fd0:	f7ff f8be 	bl	8002150 <MX_DMA_Init>
  MX_SPI2_Init();
 8002fd4:	f000 f906 	bl	80031e4 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8002fd8:	f000 fd70 	bl	8003abc <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8002fdc:	f000 fc1e 	bl	800381c <MX_TIM2_Init>
  MX_TIM3_Init();
 8002fe0:	f000 fc70 	bl	80038c4 <MX_TIM3_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002fe4:	f000 fde4 	bl	8003bb0 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */



  init_encoder();
 8002fe8:	f7ff fda2 	bl	8002b30 <init_encoder>
  DWT_Init();
 8002fec:	f7ff fb58 	bl	80026a0 <DWT_Init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002ff0:	2100      	movs	r1, #0
 8002ff2:	4808      	ldr	r0, [pc, #32]	@ (8003014 <main+0x54>)
 8002ff4:	f004 fd4c 	bl	8007a90 <HAL_TIM_PWM_Start>

  MX_USB_DEVICE_Init();
 8002ff8:	f007 ffcc 	bl	800af94 <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8002ffc:	f7ff f8e2 	bl	80021c4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003000:	f00b fa06 	bl	800e410 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // Task creation
  // Start scheduler
  vTaskStartScheduler();
 8003004:	f00c fb8a 	bl	800f71c <vTaskStartScheduler>
  send_response("STM Started");
 8003008:	4803      	ldr	r0, [pc, #12]	@ (8003018 <main+0x58>)
 800300a:	f7ff ffa9 	bl	8002f60 <send_response>

  while (1)
 800300e:	bf00      	nop
 8003010:	e7fd      	b.n	800300e <main+0x4e>
 8003012:	bf00      	nop
 8003014:	20000b38 	.word	0x20000b38
 8003018:	08014264 	.word	0x08014264

0800301c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b094      	sub	sp, #80	@ 0x50
 8003020:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003022:	f107 031c 	add.w	r3, r7, #28
 8003026:	2234      	movs	r2, #52	@ 0x34
 8003028:	2100      	movs	r1, #0
 800302a:	4618      	mov	r0, r3
 800302c:	f00f f831 	bl	8012092 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003030:	f107 0308 	add.w	r3, r7, #8
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]
 8003038:	605a      	str	r2, [r3, #4]
 800303a:	609a      	str	r2, [r3, #8]
 800303c:	60da      	str	r2, [r3, #12]
 800303e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003040:	2300      	movs	r3, #0
 8003042:	607b      	str	r3, [r7, #4]
 8003044:	4b29      	ldr	r3, [pc, #164]	@ (80030ec <SystemClock_Config+0xd0>)
 8003046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003048:	4a28      	ldr	r2, [pc, #160]	@ (80030ec <SystemClock_Config+0xd0>)
 800304a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800304e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003050:	4b26      	ldr	r3, [pc, #152]	@ (80030ec <SystemClock_Config+0xd0>)
 8003052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003054:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003058:	607b      	str	r3, [r7, #4]
 800305a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800305c:	2300      	movs	r3, #0
 800305e:	603b      	str	r3, [r7, #0]
 8003060:	4b23      	ldr	r3, [pc, #140]	@ (80030f0 <SystemClock_Config+0xd4>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003068:	4a21      	ldr	r2, [pc, #132]	@ (80030f0 <SystemClock_Config+0xd4>)
 800306a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800306e:	6013      	str	r3, [r2, #0]
 8003070:	4b1f      	ldr	r3, [pc, #124]	@ (80030f0 <SystemClock_Config+0xd4>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003078:	603b      	str	r3, [r7, #0]
 800307a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800307c:	2301      	movs	r3, #1
 800307e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003080:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003084:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003086:	2302      	movs	r3, #2
 8003088:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800308a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800308e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003090:	2304      	movs	r3, #4
 8003092:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8003094:	2348      	movs	r3, #72	@ 0x48
 8003096:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003098:	2302      	movs	r3, #2
 800309a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800309c:	2303      	movs	r3, #3
 800309e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80030a0:	2302      	movs	r3, #2
 80030a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030a4:	f107 031c 	add.w	r3, r7, #28
 80030a8:	4618      	mov	r0, r3
 80030aa:	f003 fe8b 	bl	8006dc4 <HAL_RCC_OscConfig>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80030b4:	f000 f890 	bl	80031d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030b8:	230f      	movs	r3, #15
 80030ba:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030bc:	2302      	movs	r3, #2
 80030be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030c0:	2300      	movs	r3, #0
 80030c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80030c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80030ca:	2300      	movs	r3, #0
 80030cc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80030ce:	f107 0308 	add.w	r3, r7, #8
 80030d2:	2102      	movs	r1, #2
 80030d4:	4618      	mov	r0, r3
 80030d6:	f002 ffcf 	bl	8006078 <HAL_RCC_ClockConfig>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80030e0:	f000 f87a 	bl	80031d8 <Error_Handler>
  }
}
 80030e4:	bf00      	nop
 80030e6:	3750      	adds	r7, #80	@ 0x50
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	40023800 	.word	0x40023800
 80030f0:	40007000 	.word	0x40007000

080030f4 <HAL_SPI_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
    releaseSPI();
 80030fc:	f7ff fe68 	bl	8002dd0 <releaseSPI>
}
 8003100:	bf00      	nop
 8003102:	3708      	adds	r7, #8
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a04      	ldr	r2, [pc, #16]	@ (8003128 <HAL_UART_RxCpltCallback+0x20>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d101      	bne.n	800311e <HAL_UART_RxCpltCallback+0x16>
        // Notify the telemetry task to process the command
        signalTelemetryTask();
 800311a:	f7ff fe77 	bl	8002e0c <signalTelemetryTask>
    }
}
 800311e:	bf00      	nop
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	40004400 	.word	0x40004400

0800312c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
    uint32_t error_code = HAL_UART_GetError(huart);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f005 ff3b 	bl	8008fb0 <HAL_UART_GetError>
 800313a:	60f8      	str	r0, [r7, #12]

    // Identify which UART instance is causing the error (USART2 in this case)
    if (huart->Instance == USART2) {
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a18      	ldr	r2, [pc, #96]	@ (80031a4 <HAL_UART_ErrorCallback+0x78>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d12a      	bne.n	800319c <HAL_UART_ErrorCallback+0x70>

        // Handle Overrun Error (ORE)
        if (error_code & HAL_UART_ERROR_ORE) {
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f003 0308 	and.w	r3, r3, #8
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00a      	beq.n	8003166 <HAL_UART_ErrorCallback+0x3a>
            __HAL_UART_CLEAR_OREFLAG(huart);  // Clear overrun error flag
 8003150:	2300      	movs	r3, #0
 8003152:	60bb      	str	r3, [r7, #8]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	60bb      	str	r3, [r7, #8]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	60bb      	str	r3, [r7, #8]
 8003164:	68bb      	ldr	r3, [r7, #8]
            // Optionally log or handle the error
            //send_response("UART Overrun Error");
        }

        // Handle Framing Error (FE)
        if (error_code & HAL_UART_ERROR_FE) {
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f003 0304 	and.w	r3, r3, #4
 800316c:	2b00      	cmp	r3, #0
 800316e:	d002      	beq.n	8003176 <HAL_UART_ErrorCallback+0x4a>
            // Clear framing error flag automatically by reading the status register
        	send_response("UART Framing Error");
 8003170:	480d      	ldr	r0, [pc, #52]	@ (80031a8 <HAL_UART_ErrorCallback+0x7c>)
 8003172:	f7ff fef5 	bl	8002f60 <send_response>
        }

        // Handle Parity Error (PE)
        if (error_code & HAL_UART_ERROR_PE) {
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f003 0301 	and.w	r3, r3, #1
 800317c:	2b00      	cmp	r3, #0
 800317e:	d002      	beq.n	8003186 <HAL_UART_ErrorCallback+0x5a>
            // Parity errors may indicate data corruption or mismatch in settings
        	send_response("UART Parity Error");
 8003180:	480a      	ldr	r0, [pc, #40]	@ (80031ac <HAL_UART_ErrorCallback+0x80>)
 8003182:	f7ff feed 	bl	8002f60 <send_response>
        }

        // Handle Noise Error (NE)
        if (error_code & HAL_UART_ERROR_NE) {
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d002      	beq.n	8003196 <HAL_UART_ErrorCallback+0x6a>
            // Noise errors are usually transient but worth logging
        	send_response("UART Noise Error");
 8003190:	4807      	ldr	r0, [pc, #28]	@ (80031b0 <HAL_UART_ErrorCallback+0x84>)
 8003192:	f7ff fee5 	bl	8002f60 <send_response>
        }

        // Recovery: Restart UART reception after clearing the error flags
        restartUart(huart);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f7ff fe4e 	bl	8002e38 <restartUart>
    }
}
 800319c:	bf00      	nop
 800319e:	3710      	adds	r7, #16
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	40004400 	.word	0x40004400
 80031a8:	08014270 	.word	0x08014270
 80031ac:	08014284 	.word	0x08014284
 80031b0:	08014298 	.word	0x08014298

080031b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a04      	ldr	r2, [pc, #16]	@ (80031d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d101      	bne.n	80031ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80031c6:	f000 fdd7 	bl	8003d78 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80031ca:	bf00      	nop
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	40001000 	.word	0x40001000

080031d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031dc:	b672      	cpsid	i
}
 80031de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80031e0:	bf00      	nop
 80031e2:	e7fd      	b.n	80031e0 <Error_Handler+0x8>

080031e4 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80031e8:	4b17      	ldr	r3, [pc, #92]	@ (8003248 <MX_SPI2_Init+0x64>)
 80031ea:	4a18      	ldr	r2, [pc, #96]	@ (800324c <MX_SPI2_Init+0x68>)
 80031ec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80031ee:	4b16      	ldr	r3, [pc, #88]	@ (8003248 <MX_SPI2_Init+0x64>)
 80031f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80031f4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80031f6:	4b14      	ldr	r3, [pc, #80]	@ (8003248 <MX_SPI2_Init+0x64>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80031fc:	4b12      	ldr	r3, [pc, #72]	@ (8003248 <MX_SPI2_Init+0x64>)
 80031fe:	2200      	movs	r2, #0
 8003200:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003202:	4b11      	ldr	r3, [pc, #68]	@ (8003248 <MX_SPI2_Init+0x64>)
 8003204:	2200      	movs	r2, #0
 8003206:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003208:	4b0f      	ldr	r3, [pc, #60]	@ (8003248 <MX_SPI2_Init+0x64>)
 800320a:	2200      	movs	r2, #0
 800320c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800320e:	4b0e      	ldr	r3, [pc, #56]	@ (8003248 <MX_SPI2_Init+0x64>)
 8003210:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003214:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003216:	4b0c      	ldr	r3, [pc, #48]	@ (8003248 <MX_SPI2_Init+0x64>)
 8003218:	2228      	movs	r2, #40	@ 0x28
 800321a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800321c:	4b0a      	ldr	r3, [pc, #40]	@ (8003248 <MX_SPI2_Init+0x64>)
 800321e:	2200      	movs	r2, #0
 8003220:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003222:	4b09      	ldr	r3, [pc, #36]	@ (8003248 <MX_SPI2_Init+0x64>)
 8003224:	2200      	movs	r2, #0
 8003226:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003228:	4b07      	ldr	r3, [pc, #28]	@ (8003248 <MX_SPI2_Init+0x64>)
 800322a:	2200      	movs	r2, #0
 800322c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800322e:	4b06      	ldr	r3, [pc, #24]	@ (8003248 <MX_SPI2_Init+0x64>)
 8003230:	220a      	movs	r2, #10
 8003232:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003234:	4804      	ldr	r0, [pc, #16]	@ (8003248 <MX_SPI2_Init+0x64>)
 8003236:	f004 f863 	bl	8007300 <HAL_SPI_Init>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003240:	f7ff ffca 	bl	80031d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003244:	bf00      	nop
 8003246:	bd80      	pop	{r7, pc}
 8003248:	200009ec 	.word	0x200009ec
 800324c:	40003800 	.word	0x40003800

08003250 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b08a      	sub	sp, #40	@ 0x28
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003258:	f107 0314 	add.w	r3, r7, #20
 800325c:	2200      	movs	r2, #0
 800325e:	601a      	str	r2, [r3, #0]
 8003260:	605a      	str	r2, [r3, #4]
 8003262:	609a      	str	r2, [r3, #8]
 8003264:	60da      	str	r2, [r3, #12]
 8003266:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a48      	ldr	r2, [pc, #288]	@ (8003390 <HAL_SPI_MspInit+0x140>)
 800326e:	4293      	cmp	r3, r2
 8003270:	f040 8089 	bne.w	8003386 <HAL_SPI_MspInit+0x136>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003274:	2300      	movs	r3, #0
 8003276:	613b      	str	r3, [r7, #16]
 8003278:	4b46      	ldr	r3, [pc, #280]	@ (8003394 <HAL_SPI_MspInit+0x144>)
 800327a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327c:	4a45      	ldr	r2, [pc, #276]	@ (8003394 <HAL_SPI_MspInit+0x144>)
 800327e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003282:	6413      	str	r3, [r2, #64]	@ 0x40
 8003284:	4b43      	ldr	r3, [pc, #268]	@ (8003394 <HAL_SPI_MspInit+0x144>)
 8003286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003288:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800328c:	613b      	str	r3, [r7, #16]
 800328e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003290:	2300      	movs	r3, #0
 8003292:	60fb      	str	r3, [r7, #12]
 8003294:	4b3f      	ldr	r3, [pc, #252]	@ (8003394 <HAL_SPI_MspInit+0x144>)
 8003296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003298:	4a3e      	ldr	r2, [pc, #248]	@ (8003394 <HAL_SPI_MspInit+0x144>)
 800329a:	f043 0304 	orr.w	r3, r3, #4
 800329e:	6313      	str	r3, [r2, #48]	@ 0x30
 80032a0:	4b3c      	ldr	r3, [pc, #240]	@ (8003394 <HAL_SPI_MspInit+0x144>)
 80032a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a4:	f003 0304 	and.w	r3, r3, #4
 80032a8:	60fb      	str	r3, [r7, #12]
 80032aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ac:	2300      	movs	r3, #0
 80032ae:	60bb      	str	r3, [r7, #8]
 80032b0:	4b38      	ldr	r3, [pc, #224]	@ (8003394 <HAL_SPI_MspInit+0x144>)
 80032b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b4:	4a37      	ldr	r2, [pc, #220]	@ (8003394 <HAL_SPI_MspInit+0x144>)
 80032b6:	f043 0301 	orr.w	r3, r3, #1
 80032ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80032bc:	4b35      	ldr	r3, [pc, #212]	@ (8003394 <HAL_SPI_MspInit+0x144>)
 80032be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	60bb      	str	r3, [r7, #8]
 80032c6:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PA9     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80032c8:	2302      	movs	r3, #2
 80032ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032cc:	2302      	movs	r3, #2
 80032ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d0:	2300      	movs	r3, #0
 80032d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032d4:	2303      	movs	r3, #3
 80032d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80032d8:	2307      	movs	r3, #7
 80032da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032dc:	f107 0314 	add.w	r3, r7, #20
 80032e0:	4619      	mov	r1, r3
 80032e2:	482d      	ldr	r0, [pc, #180]	@ (8003398 <HAL_SPI_MspInit+0x148>)
 80032e4:	f001 fa70 	bl	80047c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80032e8:	2304      	movs	r3, #4
 80032ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ec:	2302      	movs	r3, #2
 80032ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f0:	2300      	movs	r3, #0
 80032f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032f4:	2303      	movs	r3, #3
 80032f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80032f8:	2305      	movs	r3, #5
 80032fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032fc:	f107 0314 	add.w	r3, r7, #20
 8003300:	4619      	mov	r1, r3
 8003302:	4825      	ldr	r0, [pc, #148]	@ (8003398 <HAL_SPI_MspInit+0x148>)
 8003304:	f001 fa60 	bl	80047c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003308:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800330c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800330e:	2302      	movs	r3, #2
 8003310:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003312:	2300      	movs	r3, #0
 8003314:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003316:	2303      	movs	r3, #3
 8003318:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800331a:	2305      	movs	r3, #5
 800331c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800331e:	f107 0314 	add.w	r3, r7, #20
 8003322:	4619      	mov	r1, r3
 8003324:	481d      	ldr	r0, [pc, #116]	@ (800339c <HAL_SPI_MspInit+0x14c>)
 8003326:	f001 fa4f 	bl	80047c8 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800332a:	4b1d      	ldr	r3, [pc, #116]	@ (80033a0 <HAL_SPI_MspInit+0x150>)
 800332c:	4a1d      	ldr	r2, [pc, #116]	@ (80033a4 <HAL_SPI_MspInit+0x154>)
 800332e:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8003330:	4b1b      	ldr	r3, [pc, #108]	@ (80033a0 <HAL_SPI_MspInit+0x150>)
 8003332:	2200      	movs	r2, #0
 8003334:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003336:	4b1a      	ldr	r3, [pc, #104]	@ (80033a0 <HAL_SPI_MspInit+0x150>)
 8003338:	2240      	movs	r2, #64	@ 0x40
 800333a:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800333c:	4b18      	ldr	r3, [pc, #96]	@ (80033a0 <HAL_SPI_MspInit+0x150>)
 800333e:	2200      	movs	r2, #0
 8003340:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003342:	4b17      	ldr	r3, [pc, #92]	@ (80033a0 <HAL_SPI_MspInit+0x150>)
 8003344:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003348:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800334a:	4b15      	ldr	r3, [pc, #84]	@ (80033a0 <HAL_SPI_MspInit+0x150>)
 800334c:	2200      	movs	r2, #0
 800334e:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003350:	4b13      	ldr	r3, [pc, #76]	@ (80033a0 <HAL_SPI_MspInit+0x150>)
 8003352:	2200      	movs	r2, #0
 8003354:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8003356:	4b12      	ldr	r3, [pc, #72]	@ (80033a0 <HAL_SPI_MspInit+0x150>)
 8003358:	2200      	movs	r2, #0
 800335a:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800335c:	4b10      	ldr	r3, [pc, #64]	@ (80033a0 <HAL_SPI_MspInit+0x150>)
 800335e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003362:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003364:	4b0e      	ldr	r3, [pc, #56]	@ (80033a0 <HAL_SPI_MspInit+0x150>)
 8003366:	2200      	movs	r2, #0
 8003368:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800336a:	480d      	ldr	r0, [pc, #52]	@ (80033a0 <HAL_SPI_MspInit+0x150>)
 800336c:	f000 fe2a 	bl	8003fc4 <HAL_DMA_Init>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <HAL_SPI_MspInit+0x12a>
    {
      Error_Handler();
 8003376:	f7ff ff2f 	bl	80031d8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a08      	ldr	r2, [pc, #32]	@ (80033a0 <HAL_SPI_MspInit+0x150>)
 800337e:	649a      	str	r2, [r3, #72]	@ 0x48
 8003380:	4a07      	ldr	r2, [pc, #28]	@ (80033a0 <HAL_SPI_MspInit+0x150>)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003386:	bf00      	nop
 8003388:	3728      	adds	r7, #40	@ 0x28
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	40003800 	.word	0x40003800
 8003394:	40023800 	.word	0x40023800
 8003398:	40020800 	.word	0x40020800
 800339c:	40020000 	.word	0x40020000
 80033a0:	20000a44 	.word	0x20000a44
 80033a4:	40026070 	.word	0x40026070

080033a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033ae:	2300      	movs	r3, #0
 80033b0:	607b      	str	r3, [r7, #4]
 80033b2:	4b12      	ldr	r3, [pc, #72]	@ (80033fc <HAL_MspInit+0x54>)
 80033b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033b6:	4a11      	ldr	r2, [pc, #68]	@ (80033fc <HAL_MspInit+0x54>)
 80033b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80033be:	4b0f      	ldr	r3, [pc, #60]	@ (80033fc <HAL_MspInit+0x54>)
 80033c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033c6:	607b      	str	r3, [r7, #4]
 80033c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033ca:	2300      	movs	r3, #0
 80033cc:	603b      	str	r3, [r7, #0]
 80033ce:	4b0b      	ldr	r3, [pc, #44]	@ (80033fc <HAL_MspInit+0x54>)
 80033d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d2:	4a0a      	ldr	r2, [pc, #40]	@ (80033fc <HAL_MspInit+0x54>)
 80033d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80033da:	4b08      	ldr	r3, [pc, #32]	@ (80033fc <HAL_MspInit+0x54>)
 80033dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033e2:	603b      	str	r3, [r7, #0]
 80033e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80033e6:	2200      	movs	r2, #0
 80033e8:	210f      	movs	r1, #15
 80033ea:	f06f 0001 	mvn.w	r0, #1
 80033ee:	f000 fdbf 	bl	8003f70 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033f2:	bf00      	nop
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	40023800 	.word	0x40023800

08003400 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b08e      	sub	sp, #56	@ 0x38
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003408:	2300      	movs	r3, #0
 800340a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800340c:	2300      	movs	r3, #0
 800340e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003410:	2300      	movs	r3, #0
 8003412:	60fb      	str	r3, [r7, #12]
 8003414:	4b33      	ldr	r3, [pc, #204]	@ (80034e4 <HAL_InitTick+0xe4>)
 8003416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003418:	4a32      	ldr	r2, [pc, #200]	@ (80034e4 <HAL_InitTick+0xe4>)
 800341a:	f043 0310 	orr.w	r3, r3, #16
 800341e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003420:	4b30      	ldr	r3, [pc, #192]	@ (80034e4 <HAL_InitTick+0xe4>)
 8003422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003424:	f003 0310 	and.w	r3, r3, #16
 8003428:	60fb      	str	r3, [r7, #12]
 800342a:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800342c:	f107 0210 	add.w	r2, r7, #16
 8003430:	f107 0314 	add.w	r3, r7, #20
 8003434:	4611      	mov	r1, r2
 8003436:	4618      	mov	r0, r3
 8003438:	f002 ff38 	bl	80062ac <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800343c:	6a3b      	ldr	r3, [r7, #32]
 800343e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003442:	2b00      	cmp	r3, #0
 8003444:	d103      	bne.n	800344e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003446:	f002 ff09 	bl	800625c <HAL_RCC_GetPCLK1Freq>
 800344a:	6378      	str	r0, [r7, #52]	@ 0x34
 800344c:	e004      	b.n	8003458 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800344e:	f002 ff05 	bl	800625c <HAL_RCC_GetPCLK1Freq>
 8003452:	4603      	mov	r3, r0
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003458:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800345a:	4a23      	ldr	r2, [pc, #140]	@ (80034e8 <HAL_InitTick+0xe8>)
 800345c:	fba2 2303 	umull	r2, r3, r2, r3
 8003460:	0c9b      	lsrs	r3, r3, #18
 8003462:	3b01      	subs	r3, #1
 8003464:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003466:	4b21      	ldr	r3, [pc, #132]	@ (80034ec <HAL_InitTick+0xec>)
 8003468:	4a21      	ldr	r2, [pc, #132]	@ (80034f0 <HAL_InitTick+0xf0>)
 800346a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800346c:	4b1f      	ldr	r3, [pc, #124]	@ (80034ec <HAL_InitTick+0xec>)
 800346e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003472:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003474:	4a1d      	ldr	r2, [pc, #116]	@ (80034ec <HAL_InitTick+0xec>)
 8003476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003478:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800347a:	4b1c      	ldr	r3, [pc, #112]	@ (80034ec <HAL_InitTick+0xec>)
 800347c:	2200      	movs	r2, #0
 800347e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003480:	4b1a      	ldr	r3, [pc, #104]	@ (80034ec <HAL_InitTick+0xec>)
 8003482:	2200      	movs	r2, #0
 8003484:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003486:	4b19      	ldr	r3, [pc, #100]	@ (80034ec <HAL_InitTick+0xec>)
 8003488:	2200      	movs	r2, #0
 800348a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800348c:	4817      	ldr	r0, [pc, #92]	@ (80034ec <HAL_InitTick+0xec>)
 800348e:	f004 f9e5 	bl	800785c <HAL_TIM_Base_Init>
 8003492:	4603      	mov	r3, r0
 8003494:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003498:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800349c:	2b00      	cmp	r3, #0
 800349e:	d11b      	bne.n	80034d8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80034a0:	4812      	ldr	r0, [pc, #72]	@ (80034ec <HAL_InitTick+0xec>)
 80034a2:	f004 fa35 	bl	8007910 <HAL_TIM_Base_Start_IT>
 80034a6:	4603      	mov	r3, r0
 80034a8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80034ac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d111      	bne.n	80034d8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80034b4:	2036      	movs	r0, #54	@ 0x36
 80034b6:	f000 fd77 	bl	8003fa8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2b0f      	cmp	r3, #15
 80034be:	d808      	bhi.n	80034d2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80034c0:	2200      	movs	r2, #0
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	2036      	movs	r0, #54	@ 0x36
 80034c6:	f000 fd53 	bl	8003f70 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80034ca:	4a0a      	ldr	r2, [pc, #40]	@ (80034f4 <HAL_InitTick+0xf4>)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6013      	str	r3, [r2, #0]
 80034d0:	e002      	b.n	80034d8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80034d8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3738      	adds	r7, #56	@ 0x38
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	40023800 	.word	0x40023800
 80034e8:	431bde83 	.word	0x431bde83
 80034ec:	20000aa4 	.word	0x20000aa4
 80034f0:	40001000 	.word	0x40001000
 80034f4:	20000014 	.word	0x20000014

080034f8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80034fc:	f3bf 8f4f 	dsb	sy
}
 8003500:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003502:	4b06      	ldr	r3, [pc, #24]	@ (800351c <__NVIC_SystemReset+0x24>)
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800350a:	4904      	ldr	r1, [pc, #16]	@ (800351c <__NVIC_SystemReset+0x24>)
 800350c:	4b04      	ldr	r3, [pc, #16]	@ (8003520 <__NVIC_SystemReset+0x28>)
 800350e:	4313      	orrs	r3, r2
 8003510:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003512:	f3bf 8f4f 	dsb	sy
}
 8003516:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003518:	bf00      	nop
 800351a:	e7fd      	b.n	8003518 <__NVIC_SystemReset+0x20>
 800351c:	e000ed00 	.word	0xe000ed00
 8003520:	05fa0004 	.word	0x05fa0004

08003524 <log_message>:
extern PCD_HandleTypeDef hpcd_USB_OTG_FS;
extern TIM_HandleTypeDef htim6;

/* USER CODE BEGIN EV */
/* USER CODE BEGIN 0 */
void log_message(const char *message) {
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
    // Send the log message over UART
    HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f7fc fe79 	bl	8000224 <strlen>
 8003532:	4603      	mov	r3, r0
 8003534:	b29a      	uxth	r2, r3
 8003536:	f04f 33ff 	mov.w	r3, #4294967295
 800353a:	6879      	ldr	r1, [r7, #4]
 800353c:	4803      	ldr	r0, [pc, #12]	@ (800354c <log_message+0x28>)
 800353e:	f005 f9df 	bl	8008900 <HAL_UART_Transmit>
}
 8003542:	bf00      	nop
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	20000b80 	.word	0x20000b80

08003550 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003554:	bf00      	nop
 8003556:	e7fd      	b.n	8003554 <NMI_Handler+0x4>

08003558 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b0d6      	sub	sp, #344	@ 0x158
 800355c:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE BEGIN HardFault_IRQn 0 */
	// Store stack pointer
	uint32_t *stack_pointer;
	__asm volatile (
 800355e:	f01e 0f04 	tst.w	lr, #4
 8003562:	bf0c      	ite	eq
 8003564:	f3ef 8308 	mrseq	r3, MSP
 8003568:	f3ef 8309 	mrsne	r3, PSP
 800356c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
		"MRSNE %0, PSP \n"   // If PSP, move PSP to stack_pointer
		: "=r" (stack_pointer)
	);

	// Log or store the stack pointer contents for analysis
	uint32_t r0 = stack_pointer[0];  // R0
 8003570:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	uint32_t r1 = stack_pointer[1];  // R1
 800357a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	uint32_t r2 = stack_pointer[2];  // R2
 8003584:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	uint32_t r3 = stack_pointer[3];  // R3
 800358e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	uint32_t r12 = stack_pointer[4]; // R12
 8003598:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	uint32_t lr = stack_pointer[5];  // LR
 80035a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80035a6:	695b      	ldr	r3, [r3, #20]
 80035a8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	uint32_t pc = stack_pointer[6];  // PC
 80035ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	uint32_t psr = stack_pointer[7]; // PSR
 80035b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80035ba:	69db      	ldr	r3, [r3, #28]
 80035bc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	// Read the HFSR and CFSR registers for diagnostics
	uint32_t hfsr = SCB->HFSR;
 80035c0:	4b18      	ldr	r3, [pc, #96]	@ (8003624 <HardFault_Handler+0xcc>)
 80035c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035c4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
	uint32_t cfsr = SCB->CFSR;
 80035c8:	4b16      	ldr	r3, [pc, #88]	@ (8003624 <HardFault_Handler+0xcc>)
 80035ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035cc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

	// Create a log message
	char log_buffer[256];
	snprintf(log_buffer, sizeof(log_buffer),
 80035d0:	1d38      	adds	r0, r7, #4
 80035d2:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80035d6:	9308      	str	r3, [sp, #32]
 80035d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035dc:	9307      	str	r3, [sp, #28]
 80035de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80035e2:	9306      	str	r3, [sp, #24]
 80035e4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80035e8:	9305      	str	r3, [sp, #20]
 80035ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ee:	9304      	str	r3, [sp, #16]
 80035f0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80035f4:	9303      	str	r3, [sp, #12]
 80035f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035fa:	9302      	str	r3, [sp, #8]
 80035fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003600:	9301      	str	r3, [sp, #4]
 8003602:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003606:	9300      	str	r3, [sp, #0]
 8003608:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800360c:	4a06      	ldr	r2, [pc, #24]	@ (8003628 <HardFault_Handler+0xd0>)
 800360e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003612:	f00e fcc7 	bl	8011fa4 <sniprintf>
		"CFSR: %08X HFSR: %08X\n",
		r0, r1, r2, r3, r12, lr, pc, psr, cfsr, hfsr
	);

	// Log the message
	log_message(log_buffer);
 8003616:	1d3b      	adds	r3, r7, #4
 8003618:	4618      	mov	r0, r3
 800361a:	f7ff ff83 	bl	8003524 <log_message>

	NVIC_SystemReset();
 800361e:	f7ff ff6b 	bl	80034f8 <__NVIC_SystemReset>
 8003622:	bf00      	nop
 8003624:	e000ed00 	.word	0xe000ed00
 8003628:	080142ac 	.word	0x080142ac

0800362c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800362c:	b480      	push	{r7}
 800362e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003630:	bf00      	nop
 8003632:	e7fd      	b.n	8003630 <MemManage_Handler+0x4>

08003634 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003638:	bf00      	nop
 800363a:	e7fd      	b.n	8003638 <BusFault_Handler+0x4>

0800363c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800363c:	b480      	push	{r7}
 800363e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003640:	bf00      	nop
 8003642:	e7fd      	b.n	8003640 <UsageFault_Handler+0x4>

08003644 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003644:	b480      	push	{r7}
 8003646:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003648:	bf00      	nop
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
	...

08003654 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8003658:	4802      	ldr	r0, [pc, #8]	@ (8003664 <DMA1_Stream4_IRQHandler+0x10>)
 800365a:	f000 fe4b 	bl	80042f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800365e:	bf00      	nop
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	20000a44 	.word	0x20000a44

08003668 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800366c:	4802      	ldr	r0, [pc, #8]	@ (8003678 <USART2_IRQHandler+0x10>)
 800366e:	f005 f9f7 	bl	8008a60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003672:	bf00      	nop
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	20000b80 	.word	0x20000b80

0800367c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003680:	4802      	ldr	r0, [pc, #8]	@ (800368c <TIM6_DAC_IRQHandler+0x10>)
 8003682:	f004 fc01 	bl	8007e88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003686:	bf00      	nop
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	20000aa4 	.word	0x20000aa4

08003690 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003694:	4802      	ldr	r0, [pc, #8]	@ (80036a0 <OTG_FS_IRQHandler+0x10>)
 8003696:	f001 fb8f 	bl	8004db8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800369a:	bf00      	nop
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	20000bc8 	.word	0x20000bc8

080036a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
  return 1;
 80036a8:	2301      	movs	r3, #1
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <_kill>:

int _kill(int pid, int sig)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80036be:	f00e fdaf 	bl	8012220 <__errno>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2216      	movs	r2, #22
 80036c6:	601a      	str	r2, [r3, #0]
  return -1;
 80036c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3708      	adds	r7, #8
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <_exit>:

void _exit (int status)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80036dc:	f04f 31ff 	mov.w	r1, #4294967295
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f7ff ffe7 	bl	80036b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80036e6:	bf00      	nop
 80036e8:	e7fd      	b.n	80036e6 <_exit+0x12>

080036ea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b086      	sub	sp, #24
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	60f8      	str	r0, [r7, #12]
 80036f2:	60b9      	str	r1, [r7, #8]
 80036f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036f6:	2300      	movs	r3, #0
 80036f8:	617b      	str	r3, [r7, #20]
 80036fa:	e00a      	b.n	8003712 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80036fc:	f3af 8000 	nop.w
 8003700:	4601      	mov	r1, r0
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	1c5a      	adds	r2, r3, #1
 8003706:	60ba      	str	r2, [r7, #8]
 8003708:	b2ca      	uxtb	r2, r1
 800370a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	3301      	adds	r3, #1
 8003710:	617b      	str	r3, [r7, #20]
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	429a      	cmp	r2, r3
 8003718:	dbf0      	blt.n	80036fc <_read+0x12>
  }

  return len;
 800371a:	687b      	ldr	r3, [r7, #4]
}
 800371c:	4618      	mov	r0, r3
 800371e:	3718      	adds	r7, #24
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800372c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003730:	4618      	mov	r0, r3
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800374c:	605a      	str	r2, [r3, #4]
  return 0;
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <_isatty>:

int _isatty(int file)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003764:	2301      	movs	r3, #1
}
 8003766:	4618      	mov	r0, r3
 8003768:	370c      	adds	r7, #12
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr

08003772 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003772:	b480      	push	{r7}
 8003774:	b085      	sub	sp, #20
 8003776:	af00      	add	r7, sp, #0
 8003778:	60f8      	str	r0, [r7, #12]
 800377a:	60b9      	str	r1, [r7, #8]
 800377c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	3714      	adds	r7, #20
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b086      	sub	sp, #24
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003794:	4a14      	ldr	r2, [pc, #80]	@ (80037e8 <_sbrk+0x5c>)
 8003796:	4b15      	ldr	r3, [pc, #84]	@ (80037ec <_sbrk+0x60>)
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80037a0:	4b13      	ldr	r3, [pc, #76]	@ (80037f0 <_sbrk+0x64>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d102      	bne.n	80037ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80037a8:	4b11      	ldr	r3, [pc, #68]	@ (80037f0 <_sbrk+0x64>)
 80037aa:	4a12      	ldr	r2, [pc, #72]	@ (80037f4 <_sbrk+0x68>)
 80037ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037ae:	4b10      	ldr	r3, [pc, #64]	@ (80037f0 <_sbrk+0x64>)
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4413      	add	r3, r2
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d207      	bcs.n	80037cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037bc:	f00e fd30 	bl	8012220 <__errno>
 80037c0:	4603      	mov	r3, r0
 80037c2:	220c      	movs	r2, #12
 80037c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80037c6:	f04f 33ff 	mov.w	r3, #4294967295
 80037ca:	e009      	b.n	80037e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037cc:	4b08      	ldr	r3, [pc, #32]	@ (80037f0 <_sbrk+0x64>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037d2:	4b07      	ldr	r3, [pc, #28]	@ (80037f0 <_sbrk+0x64>)
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4413      	add	r3, r2
 80037da:	4a05      	ldr	r2, [pc, #20]	@ (80037f0 <_sbrk+0x64>)
 80037dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80037de:	68fb      	ldr	r3, [r7, #12]
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3718      	adds	r7, #24
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	20020000 	.word	0x20020000
 80037ec:	00000400 	.word	0x00000400
 80037f0:	20000aec 	.word	0x20000aec
 80037f4:	20005868 	.word	0x20005868

080037f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80037fc:	4b06      	ldr	r3, [pc, #24]	@ (8003818 <SystemInit+0x20>)
 80037fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003802:	4a05      	ldr	r2, [pc, #20]	@ (8003818 <SystemInit+0x20>)
 8003804:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003808:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800380c:	bf00      	nop
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	e000ed00 	.word	0xe000ed00

0800381c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b08c      	sub	sp, #48	@ 0x30
 8003820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003822:	f107 030c 	add.w	r3, r7, #12
 8003826:	2224      	movs	r2, #36	@ 0x24
 8003828:	2100      	movs	r1, #0
 800382a:	4618      	mov	r0, r3
 800382c:	f00e fc31 	bl	8012092 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003830:	1d3b      	adds	r3, r7, #4
 8003832:	2200      	movs	r2, #0
 8003834:	601a      	str	r2, [r3, #0]
 8003836:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003838:	4b21      	ldr	r3, [pc, #132]	@ (80038c0 <MX_TIM2_Init+0xa4>)
 800383a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800383e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003840:	4b1f      	ldr	r3, [pc, #124]	@ (80038c0 <MX_TIM2_Init+0xa4>)
 8003842:	2200      	movs	r2, #0
 8003844:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003846:	4b1e      	ldr	r3, [pc, #120]	@ (80038c0 <MX_TIM2_Init+0xa4>)
 8003848:	2200      	movs	r2, #0
 800384a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800384c:	4b1c      	ldr	r3, [pc, #112]	@ (80038c0 <MX_TIM2_Init+0xa4>)
 800384e:	f04f 32ff 	mov.w	r2, #4294967295
 8003852:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003854:	4b1a      	ldr	r3, [pc, #104]	@ (80038c0 <MX_TIM2_Init+0xa4>)
 8003856:	2200      	movs	r2, #0
 8003858:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800385a:	4b19      	ldr	r3, [pc, #100]	@ (80038c0 <MX_TIM2_Init+0xa4>)
 800385c:	2200      	movs	r2, #0
 800385e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003860:	2303      	movs	r3, #3
 8003862:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003864:	2300      	movs	r3, #0
 8003866:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003868:	2301      	movs	r3, #1
 800386a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800386c:	2300      	movs	r3, #0
 800386e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003870:	2300      	movs	r3, #0
 8003872:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003874:	2300      	movs	r3, #0
 8003876:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003878:	2301      	movs	r3, #1
 800387a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800387c:	2300      	movs	r3, #0
 800387e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003880:	2300      	movs	r3, #0
 8003882:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003884:	f107 030c 	add.w	r3, r7, #12
 8003888:	4619      	mov	r1, r3
 800388a:	480d      	ldr	r0, [pc, #52]	@ (80038c0 <MX_TIM2_Init+0xa4>)
 800388c:	f004 f9c8 	bl	8007c20 <HAL_TIM_Encoder_Init>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8003896:	f7ff fc9f 	bl	80031d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800389a:	2300      	movs	r3, #0
 800389c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800389e:	2300      	movs	r3, #0
 80038a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80038a2:	1d3b      	adds	r3, r7, #4
 80038a4:	4619      	mov	r1, r3
 80038a6:	4806      	ldr	r0, [pc, #24]	@ (80038c0 <MX_TIM2_Init+0xa4>)
 80038a8:	f004 ff4a 	bl	8008740 <HAL_TIMEx_MasterConfigSynchronization>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80038b2:	f7ff fc91 	bl	80031d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80038b6:	bf00      	nop
 80038b8:	3730      	adds	r7, #48	@ 0x30
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	20000af0 	.word	0x20000af0

080038c4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b08a      	sub	sp, #40	@ 0x28
 80038c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038ca:	f107 0320 	add.w	r3, r7, #32
 80038ce:	2200      	movs	r2, #0
 80038d0:	601a      	str	r2, [r3, #0]
 80038d2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80038d4:	1d3b      	adds	r3, r7, #4
 80038d6:	2200      	movs	r2, #0
 80038d8:	601a      	str	r2, [r3, #0]
 80038da:	605a      	str	r2, [r3, #4]
 80038dc:	609a      	str	r2, [r3, #8]
 80038de:	60da      	str	r2, [r3, #12]
 80038e0:	611a      	str	r2, [r3, #16]
 80038e2:	615a      	str	r2, [r3, #20]
 80038e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80038e6:	4b22      	ldr	r3, [pc, #136]	@ (8003970 <MX_TIM3_Init+0xac>)
 80038e8:	4a22      	ldr	r2, [pc, #136]	@ (8003974 <MX_TIM3_Init+0xb0>)
 80038ea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84 -1;
 80038ec:	4b20      	ldr	r3, [pc, #128]	@ (8003970 <MX_TIM3_Init+0xac>)
 80038ee:	2253      	movs	r2, #83	@ 0x53
 80038f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038f2:	4b1f      	ldr	r3, [pc, #124]	@ (8003970 <MX_TIM3_Init+0xac>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000 - 1;
 80038f8:	4b1d      	ldr	r3, [pc, #116]	@ (8003970 <MX_TIM3_Init+0xac>)
 80038fa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80038fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003900:	4b1b      	ldr	r3, [pc, #108]	@ (8003970 <MX_TIM3_Init+0xac>)
 8003902:	2200      	movs	r2, #0
 8003904:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003906:	4b1a      	ldr	r3, [pc, #104]	@ (8003970 <MX_TIM3_Init+0xac>)
 8003908:	2200      	movs	r2, #0
 800390a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800390c:	4818      	ldr	r0, [pc, #96]	@ (8003970 <MX_TIM3_Init+0xac>)
 800390e:	f004 f86f 	bl	80079f0 <HAL_TIM_PWM_Init>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d001      	beq.n	800391c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8003918:	f7ff fc5e 	bl	80031d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800391c:	2300      	movs	r3, #0
 800391e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003920:	2300      	movs	r3, #0
 8003922:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003924:	f107 0320 	add.w	r3, r7, #32
 8003928:	4619      	mov	r1, r3
 800392a:	4811      	ldr	r0, [pc, #68]	@ (8003970 <MX_TIM3_Init+0xac>)
 800392c:	f004 ff08 	bl	8008740 <HAL_TIMEx_MasterConfigSynchronization>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8003936:	f7ff fc4f 	bl	80031d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800393a:	2360      	movs	r3, #96	@ 0x60
 800393c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 800393e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003942:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003944:	2300      	movs	r3, #0
 8003946:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003948:	2300      	movs	r3, #0
 800394a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800394c:	1d3b      	adds	r3, r7, #4
 800394e:	2200      	movs	r2, #0
 8003950:	4619      	mov	r1, r3
 8003952:	4807      	ldr	r0, [pc, #28]	@ (8003970 <MX_TIM3_Init+0xac>)
 8003954:	f004 fb88 	bl	8008068 <HAL_TIM_PWM_ConfigChannel>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800395e:	f7ff fc3b 	bl	80031d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003962:	4803      	ldr	r0, [pc, #12]	@ (8003970 <MX_TIM3_Init+0xac>)
 8003964:	f000 f870 	bl	8003a48 <HAL_TIM_MspPostInit>

}
 8003968:	bf00      	nop
 800396a:	3728      	adds	r7, #40	@ 0x28
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	20000b38 	.word	0x20000b38
 8003974:	40000400 	.word	0x40000400

08003978 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b08a      	sub	sp, #40	@ 0x28
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003980:	f107 0314 	add.w	r3, r7, #20
 8003984:	2200      	movs	r2, #0
 8003986:	601a      	str	r2, [r3, #0]
 8003988:	605a      	str	r2, [r3, #4]
 800398a:	609a      	str	r2, [r3, #8]
 800398c:	60da      	str	r2, [r3, #12]
 800398e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003998:	d12b      	bne.n	80039f2 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800399a:	2300      	movs	r3, #0
 800399c:	613b      	str	r3, [r7, #16]
 800399e:	4b17      	ldr	r3, [pc, #92]	@ (80039fc <HAL_TIM_Encoder_MspInit+0x84>)
 80039a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a2:	4a16      	ldr	r2, [pc, #88]	@ (80039fc <HAL_TIM_Encoder_MspInit+0x84>)
 80039a4:	f043 0301 	orr.w	r3, r3, #1
 80039a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80039aa:	4b14      	ldr	r3, [pc, #80]	@ (80039fc <HAL_TIM_Encoder_MspInit+0x84>)
 80039ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	613b      	str	r3, [r7, #16]
 80039b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039b6:	2300      	movs	r3, #0
 80039b8:	60fb      	str	r3, [r7, #12]
 80039ba:	4b10      	ldr	r3, [pc, #64]	@ (80039fc <HAL_TIM_Encoder_MspInit+0x84>)
 80039bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039be:	4a0f      	ldr	r2, [pc, #60]	@ (80039fc <HAL_TIM_Encoder_MspInit+0x84>)
 80039c0:	f043 0301 	orr.w	r3, r3, #1
 80039c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80039c6:	4b0d      	ldr	r3, [pc, #52]	@ (80039fc <HAL_TIM_Encoder_MspInit+0x84>)
 80039c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	60fb      	str	r3, [r7, #12]
 80039d0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80039d2:	2303      	movs	r3, #3
 80039d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d6:	2302      	movs	r3, #2
 80039d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039da:	2300      	movs	r3, #0
 80039dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039de:	2300      	movs	r3, #0
 80039e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80039e2:	2301      	movs	r3, #1
 80039e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039e6:	f107 0314 	add.w	r3, r7, #20
 80039ea:	4619      	mov	r1, r3
 80039ec:	4804      	ldr	r0, [pc, #16]	@ (8003a00 <HAL_TIM_Encoder_MspInit+0x88>)
 80039ee:	f000 feeb 	bl	80047c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80039f2:	bf00      	nop
 80039f4:	3728      	adds	r7, #40	@ 0x28
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	40023800 	.word	0x40023800
 8003a00:	40020000 	.word	0x40020000

08003a04 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a0b      	ldr	r2, [pc, #44]	@ (8003a40 <HAL_TIM_PWM_MspInit+0x3c>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d10d      	bne.n	8003a32 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003a16:	2300      	movs	r3, #0
 8003a18:	60fb      	str	r3, [r7, #12]
 8003a1a:	4b0a      	ldr	r3, [pc, #40]	@ (8003a44 <HAL_TIM_PWM_MspInit+0x40>)
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1e:	4a09      	ldr	r2, [pc, #36]	@ (8003a44 <HAL_TIM_PWM_MspInit+0x40>)
 8003a20:	f043 0302 	orr.w	r3, r3, #2
 8003a24:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a26:	4b07      	ldr	r3, [pc, #28]	@ (8003a44 <HAL_TIM_PWM_MspInit+0x40>)
 8003a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	60fb      	str	r3, [r7, #12]
 8003a30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003a32:	bf00      	nop
 8003a34:	3714      	adds	r7, #20
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	40000400 	.word	0x40000400
 8003a44:	40023800 	.word	0x40023800

08003a48 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b088      	sub	sp, #32
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a50:	f107 030c 	add.w	r3, r7, #12
 8003a54:	2200      	movs	r2, #0
 8003a56:	601a      	str	r2, [r3, #0]
 8003a58:	605a      	str	r2, [r3, #4]
 8003a5a:	609a      	str	r2, [r3, #8]
 8003a5c:	60da      	str	r2, [r3, #12]
 8003a5e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a12      	ldr	r2, [pc, #72]	@ (8003ab0 <HAL_TIM_MspPostInit+0x68>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d11d      	bne.n	8003aa6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	60bb      	str	r3, [r7, #8]
 8003a6e:	4b11      	ldr	r3, [pc, #68]	@ (8003ab4 <HAL_TIM_MspPostInit+0x6c>)
 8003a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a72:	4a10      	ldr	r2, [pc, #64]	@ (8003ab4 <HAL_TIM_MspPostInit+0x6c>)
 8003a74:	f043 0301 	orr.w	r3, r3, #1
 8003a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8003ab4 <HAL_TIM_MspPostInit+0x6c>)
 8003a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	60bb      	str	r3, [r7, #8]
 8003a84:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003a86:	2340      	movs	r3, #64	@ 0x40
 8003a88:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a92:	2300      	movs	r3, #0
 8003a94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003a96:	2302      	movs	r3, #2
 8003a98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a9a:	f107 030c 	add.w	r3, r7, #12
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	4805      	ldr	r0, [pc, #20]	@ (8003ab8 <HAL_TIM_MspPostInit+0x70>)
 8003aa2:	f000 fe91 	bl	80047c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003aa6:	bf00      	nop
 8003aa8:	3720      	adds	r7, #32
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	40000400 	.word	0x40000400
 8003ab4:	40023800 	.word	0x40023800
 8003ab8:	40020000 	.word	0x40020000

08003abc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003ac0:	4b11      	ldr	r3, [pc, #68]	@ (8003b08 <MX_USART2_UART_Init+0x4c>)
 8003ac2:	4a12      	ldr	r2, [pc, #72]	@ (8003b0c <MX_USART2_UART_Init+0x50>)
 8003ac4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003ac6:	4b10      	ldr	r3, [pc, #64]	@ (8003b08 <MX_USART2_UART_Init+0x4c>)
 8003ac8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003acc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003ace:	4b0e      	ldr	r3, [pc, #56]	@ (8003b08 <MX_USART2_UART_Init+0x4c>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8003b08 <MX_USART2_UART_Init+0x4c>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003ada:	4b0b      	ldr	r3, [pc, #44]	@ (8003b08 <MX_USART2_UART_Init+0x4c>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003ae0:	4b09      	ldr	r3, [pc, #36]	@ (8003b08 <MX_USART2_UART_Init+0x4c>)
 8003ae2:	220c      	movs	r2, #12
 8003ae4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ae6:	4b08      	ldr	r3, [pc, #32]	@ (8003b08 <MX_USART2_UART_Init+0x4c>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003aec:	4b06      	ldr	r3, [pc, #24]	@ (8003b08 <MX_USART2_UART_Init+0x4c>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003af2:	4805      	ldr	r0, [pc, #20]	@ (8003b08 <MX_USART2_UART_Init+0x4c>)
 8003af4:	f004 feb4 	bl	8008860 <HAL_UART_Init>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003afe:	f7ff fb6b 	bl	80031d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003b02:	bf00      	nop
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	20000b80 	.word	0x20000b80
 8003b0c:	40004400 	.word	0x40004400

08003b10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b08a      	sub	sp, #40	@ 0x28
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b18:	f107 0314 	add.w	r3, r7, #20
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	601a      	str	r2, [r3, #0]
 8003b20:	605a      	str	r2, [r3, #4]
 8003b22:	609a      	str	r2, [r3, #8]
 8003b24:	60da      	str	r2, [r3, #12]
 8003b26:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a1d      	ldr	r2, [pc, #116]	@ (8003ba4 <HAL_UART_MspInit+0x94>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d133      	bne.n	8003b9a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003b32:	2300      	movs	r3, #0
 8003b34:	613b      	str	r3, [r7, #16]
 8003b36:	4b1c      	ldr	r3, [pc, #112]	@ (8003ba8 <HAL_UART_MspInit+0x98>)
 8003b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3a:	4a1b      	ldr	r2, [pc, #108]	@ (8003ba8 <HAL_UART_MspInit+0x98>)
 8003b3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b40:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b42:	4b19      	ldr	r3, [pc, #100]	@ (8003ba8 <HAL_UART_MspInit+0x98>)
 8003b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b4a:	613b      	str	r3, [r7, #16]
 8003b4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b4e:	2300      	movs	r3, #0
 8003b50:	60fb      	str	r3, [r7, #12]
 8003b52:	4b15      	ldr	r3, [pc, #84]	@ (8003ba8 <HAL_UART_MspInit+0x98>)
 8003b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b56:	4a14      	ldr	r2, [pc, #80]	@ (8003ba8 <HAL_UART_MspInit+0x98>)
 8003b58:	f043 0301 	orr.w	r3, r3, #1
 8003b5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b5e:	4b12      	ldr	r3, [pc, #72]	@ (8003ba8 <HAL_UART_MspInit+0x98>)
 8003b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	60fb      	str	r3, [r7, #12]
 8003b68:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003b6a:	230c      	movs	r3, #12
 8003b6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b6e:	2302      	movs	r3, #2
 8003b70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b72:	2300      	movs	r3, #0
 8003b74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b76:	2303      	movs	r3, #3
 8003b78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003b7a:	2307      	movs	r3, #7
 8003b7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b7e:	f107 0314 	add.w	r3, r7, #20
 8003b82:	4619      	mov	r1, r3
 8003b84:	4809      	ldr	r0, [pc, #36]	@ (8003bac <HAL_UART_MspInit+0x9c>)
 8003b86:	f000 fe1f 	bl	80047c8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	2106      	movs	r1, #6
 8003b8e:	2026      	movs	r0, #38	@ 0x26
 8003b90:	f000 f9ee 	bl	8003f70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003b94:	2026      	movs	r0, #38	@ 0x26
 8003b96:	f000 fa07 	bl	8003fa8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003b9a:	bf00      	nop
 8003b9c:	3728      	adds	r7, #40	@ 0x28
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	40004400 	.word	0x40004400
 8003ba8:	40023800 	.word	0x40023800
 8003bac:	40020000 	.word	0x40020000

08003bb0 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003bb4:	4b14      	ldr	r3, [pc, #80]	@ (8003c08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003bb6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8003bba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8003bbc:	4b12      	ldr	r3, [pc, #72]	@ (8003c08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003bbe:	2206      	movs	r2, #6
 8003bc0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003bc2:	4b11      	ldr	r3, [pc, #68]	@ (8003c08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003bc4:	2202      	movs	r2, #2
 8003bc6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003bc8:	4b0f      	ldr	r3, [pc, #60]	@ (8003c08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003bce:	4b0e      	ldr	r3, [pc, #56]	@ (8003c08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003bd0:	2202      	movs	r2, #2
 8003bd2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8003bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8003c08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8003bda:	4b0b      	ldr	r3, [pc, #44]	@ (8003c08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8003be0:	4b09      	ldr	r3, [pc, #36]	@ (8003c08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8003be6:	4b08      	ldr	r3, [pc, #32]	@ (8003c08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003bec:	4b06      	ldr	r3, [pc, #24]	@ (8003c08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003bf2:	4805      	ldr	r0, [pc, #20]	@ (8003c08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003bf4:	f000 ff95 	bl	8004b22 <HAL_PCD_Init>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8003bfe:	f7ff faeb 	bl	80031d8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8003c02:	bf00      	nop
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	20000bc8 	.word	0x20000bc8

08003c0c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b0a0      	sub	sp, #128	@ 0x80
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c14:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003c18:	2200      	movs	r2, #0
 8003c1a:	601a      	str	r2, [r3, #0]
 8003c1c:	605a      	str	r2, [r3, #4]
 8003c1e:	609a      	str	r2, [r3, #8]
 8003c20:	60da      	str	r2, [r3, #12]
 8003c22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003c24:	f107 0310 	add.w	r3, r7, #16
 8003c28:	225c      	movs	r2, #92	@ 0x5c
 8003c2a:	2100      	movs	r1, #0
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f00e fa30 	bl	8012092 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c3a:	d149      	bne.n	8003cd0 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8003c3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003c40:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8003c42:	2300      	movs	r3, #0
 8003c44:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c46:	f107 0310 	add.w	r3, r7, #16
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f002 fb60 	bl	8006310 <HAL_RCCEx_PeriphCLKConfig>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d001      	beq.n	8003c5a <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8003c56:	f7ff fabf 	bl	80031d8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	60fb      	str	r3, [r7, #12]
 8003c5e:	4b1e      	ldr	r3, [pc, #120]	@ (8003cd8 <HAL_PCD_MspInit+0xcc>)
 8003c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c62:	4a1d      	ldr	r2, [pc, #116]	@ (8003cd8 <HAL_PCD_MspInit+0xcc>)
 8003c64:	f043 0301 	orr.w	r3, r3, #1
 8003c68:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c6a:	4b1b      	ldr	r3, [pc, #108]	@ (8003cd8 <HAL_PCD_MspInit+0xcc>)
 8003c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	60fb      	str	r3, [r7, #12]
 8003c74:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003c76:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003c7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c80:	2300      	movs	r3, #0
 8003c82:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c84:	2303      	movs	r3, #3
 8003c86:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003c88:	230a      	movs	r3, #10
 8003c8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c8c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003c90:	4619      	mov	r1, r3
 8003c92:	4812      	ldr	r0, [pc, #72]	@ (8003cdc <HAL_PCD_MspInit+0xd0>)
 8003c94:	f000 fd98 	bl	80047c8 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003c98:	4b0f      	ldr	r3, [pc, #60]	@ (8003cd8 <HAL_PCD_MspInit+0xcc>)
 8003c9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c9c:	4a0e      	ldr	r2, [pc, #56]	@ (8003cd8 <HAL_PCD_MspInit+0xcc>)
 8003c9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ca2:	6353      	str	r3, [r2, #52]	@ 0x34
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	60bb      	str	r3, [r7, #8]
 8003ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8003cd8 <HAL_PCD_MspInit+0xcc>)
 8003caa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cac:	4a0a      	ldr	r2, [pc, #40]	@ (8003cd8 <HAL_PCD_MspInit+0xcc>)
 8003cae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003cb2:	6453      	str	r3, [r2, #68]	@ 0x44
 8003cb4:	4b08      	ldr	r3, [pc, #32]	@ (8003cd8 <HAL_PCD_MspInit+0xcc>)
 8003cb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cbc:	60bb      	str	r3, [r7, #8]
 8003cbe:	68bb      	ldr	r3, [r7, #8]

    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	2105      	movs	r1, #5
 8003cc4:	2043      	movs	r0, #67	@ 0x43
 8003cc6:	f000 f953 	bl	8003f70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8003cca:	2043      	movs	r0, #67	@ 0x43
 8003ccc:	f000 f96c 	bl	8003fa8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8003cd0:	bf00      	nop
 8003cd2:	3780      	adds	r7, #128	@ 0x80
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	40023800 	.word	0x40023800
 8003cdc:	40020000 	.word	0x40020000

08003ce0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003ce0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003d18 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003ce4:	f7ff fd88 	bl	80037f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ce8:	480c      	ldr	r0, [pc, #48]	@ (8003d1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003cea:	490d      	ldr	r1, [pc, #52]	@ (8003d20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003cec:	4a0d      	ldr	r2, [pc, #52]	@ (8003d24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003cee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003cf0:	e002      	b.n	8003cf8 <LoopCopyDataInit>

08003cf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003cf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003cf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003cf6:	3304      	adds	r3, #4

08003cf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003cf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003cfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003cfc:	d3f9      	bcc.n	8003cf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003cfe:	4a0a      	ldr	r2, [pc, #40]	@ (8003d28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003d00:	4c0a      	ldr	r4, [pc, #40]	@ (8003d2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003d02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d04:	e001      	b.n	8003d0a <LoopFillZerobss>

08003d06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d08:	3204      	adds	r2, #4

08003d0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d0c:	d3fb      	bcc.n	8003d06 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003d0e:	f00e fa8d 	bl	801222c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d12:	f7ff f955 	bl	8002fc0 <main>
  bx  lr    
 8003d16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003d18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003d1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d20:	200004a8 	.word	0x200004a8
  ldr r2, =_sidata
 8003d24:	08014778 	.word	0x08014778
  ldr r2, =_sbss
 8003d28:	200004a8 	.word	0x200004a8
  ldr r4, =_ebss
 8003d2c:	20005864 	.word	0x20005864

08003d30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d30:	e7fe      	b.n	8003d30 <ADC_IRQHandler>
	...

08003d34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d38:	4b0e      	ldr	r3, [pc, #56]	@ (8003d74 <HAL_Init+0x40>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a0d      	ldr	r2, [pc, #52]	@ (8003d74 <HAL_Init+0x40>)
 8003d3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003d44:	4b0b      	ldr	r3, [pc, #44]	@ (8003d74 <HAL_Init+0x40>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a0a      	ldr	r2, [pc, #40]	@ (8003d74 <HAL_Init+0x40>)
 8003d4a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003d4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d50:	4b08      	ldr	r3, [pc, #32]	@ (8003d74 <HAL_Init+0x40>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a07      	ldr	r2, [pc, #28]	@ (8003d74 <HAL_Init+0x40>)
 8003d56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d5c:	2003      	movs	r0, #3
 8003d5e:	f000 f8fc 	bl	8003f5a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d62:	200f      	movs	r0, #15
 8003d64:	f7ff fb4c 	bl	8003400 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d68:	f7ff fb1e 	bl	80033a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	40023c00 	.word	0x40023c00

08003d78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d7c:	4b06      	ldr	r3, [pc, #24]	@ (8003d98 <HAL_IncTick+0x20>)
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	461a      	mov	r2, r3
 8003d82:	4b06      	ldr	r3, [pc, #24]	@ (8003d9c <HAL_IncTick+0x24>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4413      	add	r3, r2
 8003d88:	4a04      	ldr	r2, [pc, #16]	@ (8003d9c <HAL_IncTick+0x24>)
 8003d8a:	6013      	str	r3, [r2, #0]
}
 8003d8c:	bf00      	nop
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	20000018 	.word	0x20000018
 8003d9c:	200010ac 	.word	0x200010ac

08003da0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003da0:	b480      	push	{r7}
 8003da2:	af00      	add	r7, sp, #0
  return uwTick;
 8003da4:	4b03      	ldr	r3, [pc, #12]	@ (8003db4 <HAL_GetTick+0x14>)
 8003da6:	681b      	ldr	r3, [r3, #0]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	200010ac 	.word	0x200010ac

08003db8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003dc0:	f7ff ffee 	bl	8003da0 <HAL_GetTick>
 8003dc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd0:	d005      	beq.n	8003dde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8003dfc <HAL_Delay+0x44>)
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	4413      	add	r3, r2
 8003ddc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003dde:	bf00      	nop
 8003de0:	f7ff ffde 	bl	8003da0 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d8f7      	bhi.n	8003de0 <HAL_Delay+0x28>
  {
  }
}
 8003df0:	bf00      	nop
 8003df2:	bf00      	nop
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	20000018 	.word	0x20000018

08003e00 <__NVIC_SetPriorityGrouping>:
{
 8003e00:	b480      	push	{r7}
 8003e02:	b085      	sub	sp, #20
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f003 0307 	and.w	r3, r3, #7
 8003e0e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e10:	4b0c      	ldr	r3, [pc, #48]	@ (8003e44 <__NVIC_SetPriorityGrouping+0x44>)
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e16:	68ba      	ldr	r2, [r7, #8]
 8003e18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003e2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e32:	4a04      	ldr	r2, [pc, #16]	@ (8003e44 <__NVIC_SetPriorityGrouping+0x44>)
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	60d3      	str	r3, [r2, #12]
}
 8003e38:	bf00      	nop
 8003e3a:	3714      	adds	r7, #20
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr
 8003e44:	e000ed00 	.word	0xe000ed00

08003e48 <__NVIC_GetPriorityGrouping>:
{
 8003e48:	b480      	push	{r7}
 8003e4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e4c:	4b04      	ldr	r3, [pc, #16]	@ (8003e60 <__NVIC_GetPriorityGrouping+0x18>)
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	0a1b      	lsrs	r3, r3, #8
 8003e52:	f003 0307 	and.w	r3, r3, #7
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr
 8003e60:	e000ed00 	.word	0xe000ed00

08003e64 <__NVIC_EnableIRQ>:
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	db0b      	blt.n	8003e8e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e76:	79fb      	ldrb	r3, [r7, #7]
 8003e78:	f003 021f 	and.w	r2, r3, #31
 8003e7c:	4907      	ldr	r1, [pc, #28]	@ (8003e9c <__NVIC_EnableIRQ+0x38>)
 8003e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e82:	095b      	lsrs	r3, r3, #5
 8003e84:	2001      	movs	r0, #1
 8003e86:	fa00 f202 	lsl.w	r2, r0, r2
 8003e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003e8e:	bf00      	nop
 8003e90:	370c      	adds	r7, #12
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	e000e100 	.word	0xe000e100

08003ea0 <__NVIC_SetPriority>:
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	6039      	str	r1, [r7, #0]
 8003eaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	db0a      	blt.n	8003eca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	b2da      	uxtb	r2, r3
 8003eb8:	490c      	ldr	r1, [pc, #48]	@ (8003eec <__NVIC_SetPriority+0x4c>)
 8003eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ebe:	0112      	lsls	r2, r2, #4
 8003ec0:	b2d2      	uxtb	r2, r2
 8003ec2:	440b      	add	r3, r1
 8003ec4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003ec8:	e00a      	b.n	8003ee0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	b2da      	uxtb	r2, r3
 8003ece:	4908      	ldr	r1, [pc, #32]	@ (8003ef0 <__NVIC_SetPriority+0x50>)
 8003ed0:	79fb      	ldrb	r3, [r7, #7]
 8003ed2:	f003 030f 	and.w	r3, r3, #15
 8003ed6:	3b04      	subs	r3, #4
 8003ed8:	0112      	lsls	r2, r2, #4
 8003eda:	b2d2      	uxtb	r2, r2
 8003edc:	440b      	add	r3, r1
 8003ede:	761a      	strb	r2, [r3, #24]
}
 8003ee0:	bf00      	nop
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr
 8003eec:	e000e100 	.word	0xe000e100
 8003ef0:	e000ed00 	.word	0xe000ed00

08003ef4 <NVIC_EncodePriority>:
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b089      	sub	sp, #36	@ 0x24
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f003 0307 	and.w	r3, r3, #7
 8003f06:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	f1c3 0307 	rsb	r3, r3, #7
 8003f0e:	2b04      	cmp	r3, #4
 8003f10:	bf28      	it	cs
 8003f12:	2304      	movcs	r3, #4
 8003f14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	3304      	adds	r3, #4
 8003f1a:	2b06      	cmp	r3, #6
 8003f1c:	d902      	bls.n	8003f24 <NVIC_EncodePriority+0x30>
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	3b03      	subs	r3, #3
 8003f22:	e000      	b.n	8003f26 <NVIC_EncodePriority+0x32>
 8003f24:	2300      	movs	r3, #0
 8003f26:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f28:	f04f 32ff 	mov.w	r2, #4294967295
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f32:	43da      	mvns	r2, r3
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	401a      	ands	r2, r3
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f3c:	f04f 31ff 	mov.w	r1, #4294967295
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	fa01 f303 	lsl.w	r3, r1, r3
 8003f46:	43d9      	mvns	r1, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f4c:	4313      	orrs	r3, r2
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3724      	adds	r7, #36	@ 0x24
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr

08003f5a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b082      	sub	sp, #8
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f7ff ff4c 	bl	8003e00 <__NVIC_SetPriorityGrouping>
}
 8003f68:	bf00      	nop
 8003f6a:	3708      	adds	r7, #8
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b086      	sub	sp, #24
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	4603      	mov	r3, r0
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	607a      	str	r2, [r7, #4]
 8003f7c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f82:	f7ff ff61 	bl	8003e48 <__NVIC_GetPriorityGrouping>
 8003f86:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	68b9      	ldr	r1, [r7, #8]
 8003f8c:	6978      	ldr	r0, [r7, #20]
 8003f8e:	f7ff ffb1 	bl	8003ef4 <NVIC_EncodePriority>
 8003f92:	4602      	mov	r2, r0
 8003f94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f98:	4611      	mov	r1, r2
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7ff ff80 	bl	8003ea0 <__NVIC_SetPriority>
}
 8003fa0:	bf00      	nop
 8003fa2:	3718      	adds	r7, #24
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	4603      	mov	r3, r0
 8003fb0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7ff ff54 	bl	8003e64 <__NVIC_EnableIRQ>
}
 8003fbc:	bf00      	nop
 8003fbe:	3708      	adds	r7, #8
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b086      	sub	sp, #24
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003fd0:	f7ff fee6 	bl	8003da0 <HAL_GetTick>
 8003fd4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d101      	bne.n	8003fe0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e099      	b.n	8004114 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f022 0201 	bic.w	r2, r2, #1
 8003ffe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004000:	e00f      	b.n	8004022 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004002:	f7ff fecd 	bl	8003da0 <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	2b05      	cmp	r3, #5
 800400e:	d908      	bls.n	8004022 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2220      	movs	r2, #32
 8004014:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2203      	movs	r2, #3
 800401a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e078      	b.n	8004114 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0301 	and.w	r3, r3, #1
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1e8      	bne.n	8004002 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004038:	697a      	ldr	r2, [r7, #20]
 800403a:	4b38      	ldr	r3, [pc, #224]	@ (800411c <HAL_DMA_Init+0x158>)
 800403c:	4013      	ands	r3, r2
 800403e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685a      	ldr	r2, [r3, #4]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800404e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800405a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004066:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a1b      	ldr	r3, [r3, #32]
 800406c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	4313      	orrs	r3, r2
 8004072:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004078:	2b04      	cmp	r3, #4
 800407a:	d107      	bne.n	800408c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004084:	4313      	orrs	r3, r2
 8004086:	697a      	ldr	r2, [r7, #20]
 8004088:	4313      	orrs	r3, r2
 800408a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	697a      	ldr	r2, [r7, #20]
 8004092:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	f023 0307 	bic.w	r3, r3, #7
 80040a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a8:	697a      	ldr	r2, [r7, #20]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b2:	2b04      	cmp	r3, #4
 80040b4:	d117      	bne.n	80040e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	4313      	orrs	r3, r2
 80040be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00e      	beq.n	80040e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 fb01 	bl	80046d0 <DMA_CheckFifoParam>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d008      	beq.n	80040e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2240      	movs	r2, #64	@ 0x40
 80040d8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80040e2:	2301      	movs	r3, #1
 80040e4:	e016      	b.n	8004114 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	697a      	ldr	r2, [r7, #20]
 80040ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 fab8 	bl	8004664 <DMA_CalcBaseAndBitshift>
 80040f4:	4603      	mov	r3, r0
 80040f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040fc:	223f      	movs	r2, #63	@ 0x3f
 80040fe:	409a      	lsls	r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2201      	movs	r2, #1
 800410e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	3718      	adds	r7, #24
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	f010803f 	.word	0xf010803f

08004120 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	607a      	str	r2, [r7, #4]
 800412c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800412e:	2300      	movs	r3, #0
 8004130:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004136:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800413e:	2b01      	cmp	r3, #1
 8004140:	d101      	bne.n	8004146 <HAL_DMA_Start_IT+0x26>
 8004142:	2302      	movs	r3, #2
 8004144:	e040      	b.n	80041c8 <HAL_DMA_Start_IT+0xa8>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2201      	movs	r2, #1
 800414a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b01      	cmp	r3, #1
 8004158:	d12f      	bne.n	80041ba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2202      	movs	r2, #2
 800415e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	68b9      	ldr	r1, [r7, #8]
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f000 fa4a 	bl	8004608 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004178:	223f      	movs	r2, #63	@ 0x3f
 800417a:	409a      	lsls	r2, r3
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f042 0216 	orr.w	r2, r2, #22
 800418e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004194:	2b00      	cmp	r3, #0
 8004196:	d007      	beq.n	80041a8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f042 0208 	orr.w	r2, r2, #8
 80041a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f042 0201 	orr.w	r2, r2, #1
 80041b6:	601a      	str	r2, [r3, #0]
 80041b8:	e005      	b.n	80041c6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80041c2:	2302      	movs	r3, #2
 80041c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80041c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3718      	adds	r7, #24
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041dc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80041de:	f7ff fddf 	bl	8003da0 <HAL_GetTick>
 80041e2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d008      	beq.n	8004202 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2280      	movs	r2, #128	@ 0x80
 80041f4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e052      	b.n	80042a8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f022 0216 	bic.w	r2, r2, #22
 8004210:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	695a      	ldr	r2, [r3, #20]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004220:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004226:	2b00      	cmp	r3, #0
 8004228:	d103      	bne.n	8004232 <HAL_DMA_Abort+0x62>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800422e:	2b00      	cmp	r3, #0
 8004230:	d007      	beq.n	8004242 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 0208 	bic.w	r2, r2, #8
 8004240:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f022 0201 	bic.w	r2, r2, #1
 8004250:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004252:	e013      	b.n	800427c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004254:	f7ff fda4 	bl	8003da0 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	2b05      	cmp	r3, #5
 8004260:	d90c      	bls.n	800427c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2220      	movs	r2, #32
 8004266:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2203      	movs	r2, #3
 800426c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e015      	b.n	80042a8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1e4      	bne.n	8004254 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800428e:	223f      	movs	r2, #63	@ 0x3f
 8004290:	409a      	lsls	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2201      	movs	r2, #1
 800429a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d004      	beq.n	80042ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2280      	movs	r2, #128	@ 0x80
 80042c8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e00c      	b.n	80042e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2205      	movs	r2, #5
 80042d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f022 0201 	bic.w	r2, r2, #1
 80042e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80042e6:	2300      	movs	r3, #0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b086      	sub	sp, #24
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80042fc:	2300      	movs	r3, #0
 80042fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004300:	4b8e      	ldr	r3, [pc, #568]	@ (800453c <HAL_DMA_IRQHandler+0x248>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a8e      	ldr	r2, [pc, #568]	@ (8004540 <HAL_DMA_IRQHandler+0x24c>)
 8004306:	fba2 2303 	umull	r2, r3, r2, r3
 800430a:	0a9b      	lsrs	r3, r3, #10
 800430c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004312:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800431e:	2208      	movs	r2, #8
 8004320:	409a      	lsls	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	4013      	ands	r3, r2
 8004326:	2b00      	cmp	r3, #0
 8004328:	d01a      	beq.n	8004360 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0304 	and.w	r3, r3, #4
 8004334:	2b00      	cmp	r3, #0
 8004336:	d013      	beq.n	8004360 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f022 0204 	bic.w	r2, r2, #4
 8004346:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800434c:	2208      	movs	r2, #8
 800434e:	409a      	lsls	r2, r3
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004358:	f043 0201 	orr.w	r2, r3, #1
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004364:	2201      	movs	r2, #1
 8004366:	409a      	lsls	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	4013      	ands	r3, r2
 800436c:	2b00      	cmp	r3, #0
 800436e:	d012      	beq.n	8004396 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00b      	beq.n	8004396 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004382:	2201      	movs	r2, #1
 8004384:	409a      	lsls	r2, r3
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800438e:	f043 0202 	orr.w	r2, r3, #2
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800439a:	2204      	movs	r2, #4
 800439c:	409a      	lsls	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	4013      	ands	r3, r2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d012      	beq.n	80043cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00b      	beq.n	80043cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043b8:	2204      	movs	r2, #4
 80043ba:	409a      	lsls	r2, r3
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043c4:	f043 0204 	orr.w	r2, r3, #4
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043d0:	2210      	movs	r2, #16
 80043d2:	409a      	lsls	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	4013      	ands	r3, r2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d043      	beq.n	8004464 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0308 	and.w	r3, r3, #8
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d03c      	beq.n	8004464 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ee:	2210      	movs	r2, #16
 80043f0:	409a      	lsls	r2, r3
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d018      	beq.n	8004436 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d108      	bne.n	8004424 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004416:	2b00      	cmp	r3, #0
 8004418:	d024      	beq.n	8004464 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	4798      	blx	r3
 8004422:	e01f      	b.n	8004464 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004428:	2b00      	cmp	r3, #0
 800442a:	d01b      	beq.n	8004464 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	4798      	blx	r3
 8004434:	e016      	b.n	8004464 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004440:	2b00      	cmp	r3, #0
 8004442:	d107      	bne.n	8004454 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f022 0208 	bic.w	r2, r2, #8
 8004452:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004458:	2b00      	cmp	r3, #0
 800445a:	d003      	beq.n	8004464 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004468:	2220      	movs	r2, #32
 800446a:	409a      	lsls	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	4013      	ands	r3, r2
 8004470:	2b00      	cmp	r3, #0
 8004472:	f000 808f 	beq.w	8004594 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0310 	and.w	r3, r3, #16
 8004480:	2b00      	cmp	r3, #0
 8004482:	f000 8087 	beq.w	8004594 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800448a:	2220      	movs	r2, #32
 800448c:	409a      	lsls	r2, r3
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004498:	b2db      	uxtb	r3, r3
 800449a:	2b05      	cmp	r3, #5
 800449c:	d136      	bne.n	800450c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f022 0216 	bic.w	r2, r2, #22
 80044ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	695a      	ldr	r2, [r3, #20]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80044bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d103      	bne.n	80044ce <HAL_DMA_IRQHandler+0x1da>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d007      	beq.n	80044de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 0208 	bic.w	r2, r2, #8
 80044dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044e2:	223f      	movs	r2, #63	@ 0x3f
 80044e4:	409a      	lsls	r2, r3
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2201      	movs	r2, #1
 80044ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d07e      	beq.n	8004600 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	4798      	blx	r3
        }
        return;
 800450a:	e079      	b.n	8004600 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d01d      	beq.n	8004556 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d10d      	bne.n	8004544 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800452c:	2b00      	cmp	r3, #0
 800452e:	d031      	beq.n	8004594 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	4798      	blx	r3
 8004538:	e02c      	b.n	8004594 <HAL_DMA_IRQHandler+0x2a0>
 800453a:	bf00      	nop
 800453c:	20000010 	.word	0x20000010
 8004540:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004548:	2b00      	cmp	r3, #0
 800454a:	d023      	beq.n	8004594 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	4798      	blx	r3
 8004554:	e01e      	b.n	8004594 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004560:	2b00      	cmp	r3, #0
 8004562:	d10f      	bne.n	8004584 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f022 0210 	bic.w	r2, r2, #16
 8004572:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004588:	2b00      	cmp	r3, #0
 800458a:	d003      	beq.n	8004594 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004598:	2b00      	cmp	r3, #0
 800459a:	d032      	beq.n	8004602 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045a0:	f003 0301 	and.w	r3, r3, #1
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d022      	beq.n	80045ee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2205      	movs	r2, #5
 80045ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f022 0201 	bic.w	r2, r2, #1
 80045be:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	3301      	adds	r3, #1
 80045c4:	60bb      	str	r3, [r7, #8]
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d307      	bcc.n	80045dc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0301 	and.w	r3, r3, #1
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1f2      	bne.n	80045c0 <HAL_DMA_IRQHandler+0x2cc>
 80045da:	e000      	b.n	80045de <HAL_DMA_IRQHandler+0x2ea>
          break;
 80045dc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2201      	movs	r2, #1
 80045e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d005      	beq.n	8004602 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	4798      	blx	r3
 80045fe:	e000      	b.n	8004602 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004600:	bf00      	nop
    }
  }
}
 8004602:	3718      	adds	r7, #24
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
 8004614:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004624:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	683a      	ldr	r2, [r7, #0]
 800462c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	2b40      	cmp	r3, #64	@ 0x40
 8004634:	d108      	bne.n	8004648 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68ba      	ldr	r2, [r7, #8]
 8004644:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004646:	e007      	b.n	8004658 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68ba      	ldr	r2, [r7, #8]
 800464e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	60da      	str	r2, [r3, #12]
}
 8004658:	bf00      	nop
 800465a:	3714      	adds	r7, #20
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	b2db      	uxtb	r3, r3
 8004672:	3b10      	subs	r3, #16
 8004674:	4a14      	ldr	r2, [pc, #80]	@ (80046c8 <DMA_CalcBaseAndBitshift+0x64>)
 8004676:	fba2 2303 	umull	r2, r3, r2, r3
 800467a:	091b      	lsrs	r3, r3, #4
 800467c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800467e:	4a13      	ldr	r2, [pc, #76]	@ (80046cc <DMA_CalcBaseAndBitshift+0x68>)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	4413      	add	r3, r2
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	461a      	mov	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2b03      	cmp	r3, #3
 8004690:	d909      	bls.n	80046a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800469a:	f023 0303 	bic.w	r3, r3, #3
 800469e:	1d1a      	adds	r2, r3, #4
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	659a      	str	r2, [r3, #88]	@ 0x58
 80046a4:	e007      	b.n	80046b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80046ae:	f023 0303 	bic.w	r3, r3, #3
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3714      	adds	r7, #20
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	aaaaaaab 	.word	0xaaaaaaab
 80046cc:	080143a8 	.word	0x080143a8

080046d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046d8:	2300      	movs	r3, #0
 80046da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d11f      	bne.n	800472a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	2b03      	cmp	r3, #3
 80046ee:	d856      	bhi.n	800479e <DMA_CheckFifoParam+0xce>
 80046f0:	a201      	add	r2, pc, #4	@ (adr r2, 80046f8 <DMA_CheckFifoParam+0x28>)
 80046f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f6:	bf00      	nop
 80046f8:	08004709 	.word	0x08004709
 80046fc:	0800471b 	.word	0x0800471b
 8004700:	08004709 	.word	0x08004709
 8004704:	0800479f 	.word	0x0800479f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800470c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d046      	beq.n	80047a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004718:	e043      	b.n	80047a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800471e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004722:	d140      	bne.n	80047a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004728:	e03d      	b.n	80047a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004732:	d121      	bne.n	8004778 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	2b03      	cmp	r3, #3
 8004738:	d837      	bhi.n	80047aa <DMA_CheckFifoParam+0xda>
 800473a:	a201      	add	r2, pc, #4	@ (adr r2, 8004740 <DMA_CheckFifoParam+0x70>)
 800473c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004740:	08004751 	.word	0x08004751
 8004744:	08004757 	.word	0x08004757
 8004748:	08004751 	.word	0x08004751
 800474c:	08004769 	.word	0x08004769
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	73fb      	strb	r3, [r7, #15]
      break;
 8004754:	e030      	b.n	80047b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800475a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d025      	beq.n	80047ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004766:	e022      	b.n	80047ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800476c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004770:	d11f      	bne.n	80047b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004776:	e01c      	b.n	80047b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	2b02      	cmp	r3, #2
 800477c:	d903      	bls.n	8004786 <DMA_CheckFifoParam+0xb6>
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	2b03      	cmp	r3, #3
 8004782:	d003      	beq.n	800478c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004784:	e018      	b.n	80047b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	73fb      	strb	r3, [r7, #15]
      break;
 800478a:	e015      	b.n	80047b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004790:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d00e      	beq.n	80047b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	73fb      	strb	r3, [r7, #15]
      break;
 800479c:	e00b      	b.n	80047b6 <DMA_CheckFifoParam+0xe6>
      break;
 800479e:	bf00      	nop
 80047a0:	e00a      	b.n	80047b8 <DMA_CheckFifoParam+0xe8>
      break;
 80047a2:	bf00      	nop
 80047a4:	e008      	b.n	80047b8 <DMA_CheckFifoParam+0xe8>
      break;
 80047a6:	bf00      	nop
 80047a8:	e006      	b.n	80047b8 <DMA_CheckFifoParam+0xe8>
      break;
 80047aa:	bf00      	nop
 80047ac:	e004      	b.n	80047b8 <DMA_CheckFifoParam+0xe8>
      break;
 80047ae:	bf00      	nop
 80047b0:	e002      	b.n	80047b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80047b2:	bf00      	nop
 80047b4:	e000      	b.n	80047b8 <DMA_CheckFifoParam+0xe8>
      break;
 80047b6:	bf00      	nop
    }
  } 
  
  return status; 
 80047b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3714      	adds	r7, #20
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop

080047c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b089      	sub	sp, #36	@ 0x24
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80047d2:	2300      	movs	r3, #0
 80047d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80047d6:	2300      	movs	r3, #0
 80047d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80047da:	2300      	movs	r3, #0
 80047dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047de:	2300      	movs	r3, #0
 80047e0:	61fb      	str	r3, [r7, #28]
 80047e2:	e165      	b.n	8004ab0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80047e4:	2201      	movs	r2, #1
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	697a      	ldr	r2, [r7, #20]
 80047f4:	4013      	ands	r3, r2
 80047f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80047f8:	693a      	ldr	r2, [r7, #16]
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	f040 8154 	bne.w	8004aaa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f003 0303 	and.w	r3, r3, #3
 800480a:	2b01      	cmp	r3, #1
 800480c:	d005      	beq.n	800481a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004816:	2b02      	cmp	r3, #2
 8004818:	d130      	bne.n	800487c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	005b      	lsls	r3, r3, #1
 8004824:	2203      	movs	r2, #3
 8004826:	fa02 f303 	lsl.w	r3, r2, r3
 800482a:	43db      	mvns	r3, r3
 800482c:	69ba      	ldr	r2, [r7, #24]
 800482e:	4013      	ands	r3, r2
 8004830:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	68da      	ldr	r2, [r3, #12]
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	005b      	lsls	r3, r3, #1
 800483a:	fa02 f303 	lsl.w	r3, r2, r3
 800483e:	69ba      	ldr	r2, [r7, #24]
 8004840:	4313      	orrs	r3, r2
 8004842:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	69ba      	ldr	r2, [r7, #24]
 8004848:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004850:	2201      	movs	r2, #1
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	fa02 f303 	lsl.w	r3, r2, r3
 8004858:	43db      	mvns	r3, r3
 800485a:	69ba      	ldr	r2, [r7, #24]
 800485c:	4013      	ands	r3, r2
 800485e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	091b      	lsrs	r3, r3, #4
 8004866:	f003 0201 	and.w	r2, r3, #1
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	fa02 f303 	lsl.w	r3, r2, r3
 8004870:	69ba      	ldr	r2, [r7, #24]
 8004872:	4313      	orrs	r3, r2
 8004874:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f003 0303 	and.w	r3, r3, #3
 8004884:	2b03      	cmp	r3, #3
 8004886:	d017      	beq.n	80048b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	005b      	lsls	r3, r3, #1
 8004892:	2203      	movs	r2, #3
 8004894:	fa02 f303 	lsl.w	r3, r2, r3
 8004898:	43db      	mvns	r3, r3
 800489a:	69ba      	ldr	r2, [r7, #24]
 800489c:	4013      	ands	r3, r2
 800489e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	689a      	ldr	r2, [r3, #8]
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	005b      	lsls	r3, r3, #1
 80048a8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	69ba      	ldr	r2, [r7, #24]
 80048b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f003 0303 	and.w	r3, r3, #3
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d123      	bne.n	800490c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	08da      	lsrs	r2, r3, #3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	3208      	adds	r2, #8
 80048cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	f003 0307 	and.w	r3, r3, #7
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	220f      	movs	r2, #15
 80048dc:	fa02 f303 	lsl.w	r3, r2, r3
 80048e0:	43db      	mvns	r3, r3
 80048e2:	69ba      	ldr	r2, [r7, #24]
 80048e4:	4013      	ands	r3, r2
 80048e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	691a      	ldr	r2, [r3, #16]
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	f003 0307 	and.w	r3, r3, #7
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	fa02 f303 	lsl.w	r3, r2, r3
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	08da      	lsrs	r2, r3, #3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	3208      	adds	r2, #8
 8004906:	69b9      	ldr	r1, [r7, #24]
 8004908:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	005b      	lsls	r3, r3, #1
 8004916:	2203      	movs	r2, #3
 8004918:	fa02 f303 	lsl.w	r3, r2, r3
 800491c:	43db      	mvns	r3, r3
 800491e:	69ba      	ldr	r2, [r7, #24]
 8004920:	4013      	ands	r3, r2
 8004922:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f003 0203 	and.w	r2, r3, #3
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	005b      	lsls	r3, r3, #1
 8004930:	fa02 f303 	lsl.w	r3, r2, r3
 8004934:	69ba      	ldr	r2, [r7, #24]
 8004936:	4313      	orrs	r3, r2
 8004938:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	69ba      	ldr	r2, [r7, #24]
 800493e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004948:	2b00      	cmp	r3, #0
 800494a:	f000 80ae 	beq.w	8004aaa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800494e:	2300      	movs	r3, #0
 8004950:	60fb      	str	r3, [r7, #12]
 8004952:	4b5d      	ldr	r3, [pc, #372]	@ (8004ac8 <HAL_GPIO_Init+0x300>)
 8004954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004956:	4a5c      	ldr	r2, [pc, #368]	@ (8004ac8 <HAL_GPIO_Init+0x300>)
 8004958:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800495c:	6453      	str	r3, [r2, #68]	@ 0x44
 800495e:	4b5a      	ldr	r3, [pc, #360]	@ (8004ac8 <HAL_GPIO_Init+0x300>)
 8004960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004962:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004966:	60fb      	str	r3, [r7, #12]
 8004968:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800496a:	4a58      	ldr	r2, [pc, #352]	@ (8004acc <HAL_GPIO_Init+0x304>)
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	089b      	lsrs	r3, r3, #2
 8004970:	3302      	adds	r3, #2
 8004972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004976:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	f003 0303 	and.w	r3, r3, #3
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	220f      	movs	r2, #15
 8004982:	fa02 f303 	lsl.w	r3, r2, r3
 8004986:	43db      	mvns	r3, r3
 8004988:	69ba      	ldr	r2, [r7, #24]
 800498a:	4013      	ands	r3, r2
 800498c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a4f      	ldr	r2, [pc, #316]	@ (8004ad0 <HAL_GPIO_Init+0x308>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d025      	beq.n	80049e2 <HAL_GPIO_Init+0x21a>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a4e      	ldr	r2, [pc, #312]	@ (8004ad4 <HAL_GPIO_Init+0x30c>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d01f      	beq.n	80049de <HAL_GPIO_Init+0x216>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a4d      	ldr	r2, [pc, #308]	@ (8004ad8 <HAL_GPIO_Init+0x310>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d019      	beq.n	80049da <HAL_GPIO_Init+0x212>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a4c      	ldr	r2, [pc, #304]	@ (8004adc <HAL_GPIO_Init+0x314>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d013      	beq.n	80049d6 <HAL_GPIO_Init+0x20e>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a4b      	ldr	r2, [pc, #300]	@ (8004ae0 <HAL_GPIO_Init+0x318>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d00d      	beq.n	80049d2 <HAL_GPIO_Init+0x20a>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a4a      	ldr	r2, [pc, #296]	@ (8004ae4 <HAL_GPIO_Init+0x31c>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d007      	beq.n	80049ce <HAL_GPIO_Init+0x206>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a49      	ldr	r2, [pc, #292]	@ (8004ae8 <HAL_GPIO_Init+0x320>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d101      	bne.n	80049ca <HAL_GPIO_Init+0x202>
 80049c6:	2306      	movs	r3, #6
 80049c8:	e00c      	b.n	80049e4 <HAL_GPIO_Init+0x21c>
 80049ca:	2307      	movs	r3, #7
 80049cc:	e00a      	b.n	80049e4 <HAL_GPIO_Init+0x21c>
 80049ce:	2305      	movs	r3, #5
 80049d0:	e008      	b.n	80049e4 <HAL_GPIO_Init+0x21c>
 80049d2:	2304      	movs	r3, #4
 80049d4:	e006      	b.n	80049e4 <HAL_GPIO_Init+0x21c>
 80049d6:	2303      	movs	r3, #3
 80049d8:	e004      	b.n	80049e4 <HAL_GPIO_Init+0x21c>
 80049da:	2302      	movs	r3, #2
 80049dc:	e002      	b.n	80049e4 <HAL_GPIO_Init+0x21c>
 80049de:	2301      	movs	r3, #1
 80049e0:	e000      	b.n	80049e4 <HAL_GPIO_Init+0x21c>
 80049e2:	2300      	movs	r3, #0
 80049e4:	69fa      	ldr	r2, [r7, #28]
 80049e6:	f002 0203 	and.w	r2, r2, #3
 80049ea:	0092      	lsls	r2, r2, #2
 80049ec:	4093      	lsls	r3, r2
 80049ee:	69ba      	ldr	r2, [r7, #24]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049f4:	4935      	ldr	r1, [pc, #212]	@ (8004acc <HAL_GPIO_Init+0x304>)
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	089b      	lsrs	r3, r3, #2
 80049fa:	3302      	adds	r3, #2
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a02:	4b3a      	ldr	r3, [pc, #232]	@ (8004aec <HAL_GPIO_Init+0x324>)
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	43db      	mvns	r3, r3
 8004a0c:	69ba      	ldr	r2, [r7, #24]
 8004a0e:	4013      	ands	r3, r2
 8004a10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d003      	beq.n	8004a26 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004a1e:	69ba      	ldr	r2, [r7, #24]
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a26:	4a31      	ldr	r2, [pc, #196]	@ (8004aec <HAL_GPIO_Init+0x324>)
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a2c:	4b2f      	ldr	r3, [pc, #188]	@ (8004aec <HAL_GPIO_Init+0x324>)
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	43db      	mvns	r3, r3
 8004a36:	69ba      	ldr	r2, [r7, #24]
 8004a38:	4013      	ands	r3, r2
 8004a3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d003      	beq.n	8004a50 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004a48:	69ba      	ldr	r2, [r7, #24]
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a50:	4a26      	ldr	r2, [pc, #152]	@ (8004aec <HAL_GPIO_Init+0x324>)
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004a56:	4b25      	ldr	r3, [pc, #148]	@ (8004aec <HAL_GPIO_Init+0x324>)
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	43db      	mvns	r3, r3
 8004a60:	69ba      	ldr	r2, [r7, #24]
 8004a62:	4013      	ands	r3, r2
 8004a64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d003      	beq.n	8004a7a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004a72:	69ba      	ldr	r2, [r7, #24]
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a7a:	4a1c      	ldr	r2, [pc, #112]	@ (8004aec <HAL_GPIO_Init+0x324>)
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a80:	4b1a      	ldr	r3, [pc, #104]	@ (8004aec <HAL_GPIO_Init+0x324>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	43db      	mvns	r3, r3
 8004a8a:	69ba      	ldr	r2, [r7, #24]
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d003      	beq.n	8004aa4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004a9c:	69ba      	ldr	r2, [r7, #24]
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004aa4:	4a11      	ldr	r2, [pc, #68]	@ (8004aec <HAL_GPIO_Init+0x324>)
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	3301      	adds	r3, #1
 8004aae:	61fb      	str	r3, [r7, #28]
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	2b0f      	cmp	r3, #15
 8004ab4:	f67f ae96 	bls.w	80047e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004ab8:	bf00      	nop
 8004aba:	bf00      	nop
 8004abc:	3724      	adds	r7, #36	@ 0x24
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	40023800 	.word	0x40023800
 8004acc:	40013800 	.word	0x40013800
 8004ad0:	40020000 	.word	0x40020000
 8004ad4:	40020400 	.word	0x40020400
 8004ad8:	40020800 	.word	0x40020800
 8004adc:	40020c00 	.word	0x40020c00
 8004ae0:	40021000 	.word	0x40021000
 8004ae4:	40021400 	.word	0x40021400
 8004ae8:	40021800 	.word	0x40021800
 8004aec:	40013c00 	.word	0x40013c00

08004af0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	460b      	mov	r3, r1
 8004afa:	807b      	strh	r3, [r7, #2]
 8004afc:	4613      	mov	r3, r2
 8004afe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b00:	787b      	ldrb	r3, [r7, #1]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d003      	beq.n	8004b0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b06:	887a      	ldrh	r2, [r7, #2]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004b0c:	e003      	b.n	8004b16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b0e:	887b      	ldrh	r3, [r7, #2]
 8004b10:	041a      	lsls	r2, r3, #16
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	619a      	str	r2, [r3, #24]
}
 8004b16:	bf00      	nop
 8004b18:	370c      	adds	r7, #12
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr

08004b22 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004b22:	b580      	push	{r7, lr}
 8004b24:	b086      	sub	sp, #24
 8004b26:	af02      	add	r7, sp, #8
 8004b28:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d101      	bne.n	8004b34 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e108      	b.n	8004d46 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d106      	bne.n	8004b54 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f7ff f85c 	bl	8003c0c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2203      	movs	r2, #3
 8004b58:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b62:	d102      	bne.n	8004b6a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f004 ffe5 	bl	8009b3e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6818      	ldr	r0, [r3, #0]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	7c1a      	ldrb	r2, [r3, #16]
 8004b7c:	f88d 2000 	strb.w	r2, [sp]
 8004b80:	3304      	adds	r3, #4
 8004b82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b84:	f004 fec4 	bl	8009910 <USB_CoreInit>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d005      	beq.n	8004b9a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2202      	movs	r2, #2
 8004b92:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e0d5      	b.n	8004d46 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f004 ffdd 	bl	8009b60 <USB_SetCurrentMode>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d005      	beq.n	8004bb8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2202      	movs	r2, #2
 8004bb0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e0c6      	b.n	8004d46 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bb8:	2300      	movs	r3, #0
 8004bba:	73fb      	strb	r3, [r7, #15]
 8004bbc:	e04a      	b.n	8004c54 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004bbe:	7bfa      	ldrb	r2, [r7, #15]
 8004bc0:	6879      	ldr	r1, [r7, #4]
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	00db      	lsls	r3, r3, #3
 8004bc6:	4413      	add	r3, r2
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	440b      	add	r3, r1
 8004bcc:	3315      	adds	r3, #21
 8004bce:	2201      	movs	r2, #1
 8004bd0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004bd2:	7bfa      	ldrb	r2, [r7, #15]
 8004bd4:	6879      	ldr	r1, [r7, #4]
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	00db      	lsls	r3, r3, #3
 8004bda:	4413      	add	r3, r2
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	440b      	add	r3, r1
 8004be0:	3314      	adds	r3, #20
 8004be2:	7bfa      	ldrb	r2, [r7, #15]
 8004be4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004be6:	7bfa      	ldrb	r2, [r7, #15]
 8004be8:	7bfb      	ldrb	r3, [r7, #15]
 8004bea:	b298      	uxth	r0, r3
 8004bec:	6879      	ldr	r1, [r7, #4]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	00db      	lsls	r3, r3, #3
 8004bf2:	4413      	add	r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	440b      	add	r3, r1
 8004bf8:	332e      	adds	r3, #46	@ 0x2e
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004bfe:	7bfa      	ldrb	r2, [r7, #15]
 8004c00:	6879      	ldr	r1, [r7, #4]
 8004c02:	4613      	mov	r3, r2
 8004c04:	00db      	lsls	r3, r3, #3
 8004c06:	4413      	add	r3, r2
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	440b      	add	r3, r1
 8004c0c:	3318      	adds	r3, #24
 8004c0e:	2200      	movs	r2, #0
 8004c10:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004c12:	7bfa      	ldrb	r2, [r7, #15]
 8004c14:	6879      	ldr	r1, [r7, #4]
 8004c16:	4613      	mov	r3, r2
 8004c18:	00db      	lsls	r3, r3, #3
 8004c1a:	4413      	add	r3, r2
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	440b      	add	r3, r1
 8004c20:	331c      	adds	r3, #28
 8004c22:	2200      	movs	r2, #0
 8004c24:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004c26:	7bfa      	ldrb	r2, [r7, #15]
 8004c28:	6879      	ldr	r1, [r7, #4]
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	00db      	lsls	r3, r3, #3
 8004c2e:	4413      	add	r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	440b      	add	r3, r1
 8004c34:	3320      	adds	r3, #32
 8004c36:	2200      	movs	r2, #0
 8004c38:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004c3a:	7bfa      	ldrb	r2, [r7, #15]
 8004c3c:	6879      	ldr	r1, [r7, #4]
 8004c3e:	4613      	mov	r3, r2
 8004c40:	00db      	lsls	r3, r3, #3
 8004c42:	4413      	add	r3, r2
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	440b      	add	r3, r1
 8004c48:	3324      	adds	r3, #36	@ 0x24
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c4e:	7bfb      	ldrb	r3, [r7, #15]
 8004c50:	3301      	adds	r3, #1
 8004c52:	73fb      	strb	r3, [r7, #15]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	791b      	ldrb	r3, [r3, #4]
 8004c58:	7bfa      	ldrb	r2, [r7, #15]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d3af      	bcc.n	8004bbe <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c5e:	2300      	movs	r3, #0
 8004c60:	73fb      	strb	r3, [r7, #15]
 8004c62:	e044      	b.n	8004cee <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004c64:	7bfa      	ldrb	r2, [r7, #15]
 8004c66:	6879      	ldr	r1, [r7, #4]
 8004c68:	4613      	mov	r3, r2
 8004c6a:	00db      	lsls	r3, r3, #3
 8004c6c:	4413      	add	r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	440b      	add	r3, r1
 8004c72:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004c76:	2200      	movs	r2, #0
 8004c78:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004c7a:	7bfa      	ldrb	r2, [r7, #15]
 8004c7c:	6879      	ldr	r1, [r7, #4]
 8004c7e:	4613      	mov	r3, r2
 8004c80:	00db      	lsls	r3, r3, #3
 8004c82:	4413      	add	r3, r2
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	440b      	add	r3, r1
 8004c88:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004c8c:	7bfa      	ldrb	r2, [r7, #15]
 8004c8e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004c90:	7bfa      	ldrb	r2, [r7, #15]
 8004c92:	6879      	ldr	r1, [r7, #4]
 8004c94:	4613      	mov	r3, r2
 8004c96:	00db      	lsls	r3, r3, #3
 8004c98:	4413      	add	r3, r2
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	440b      	add	r3, r1
 8004c9e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004ca6:	7bfa      	ldrb	r2, [r7, #15]
 8004ca8:	6879      	ldr	r1, [r7, #4]
 8004caa:	4613      	mov	r3, r2
 8004cac:	00db      	lsls	r3, r3, #3
 8004cae:	4413      	add	r3, r2
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	440b      	add	r3, r1
 8004cb4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004cb8:	2200      	movs	r2, #0
 8004cba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004cbc:	7bfa      	ldrb	r2, [r7, #15]
 8004cbe:	6879      	ldr	r1, [r7, #4]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	00db      	lsls	r3, r3, #3
 8004cc4:	4413      	add	r3, r2
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	440b      	add	r3, r1
 8004cca:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004cce:	2200      	movs	r2, #0
 8004cd0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004cd2:	7bfa      	ldrb	r2, [r7, #15]
 8004cd4:	6879      	ldr	r1, [r7, #4]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	00db      	lsls	r3, r3, #3
 8004cda:	4413      	add	r3, r2
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	440b      	add	r3, r1
 8004ce0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ce8:	7bfb      	ldrb	r3, [r7, #15]
 8004cea:	3301      	adds	r3, #1
 8004cec:	73fb      	strb	r3, [r7, #15]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	791b      	ldrb	r3, [r3, #4]
 8004cf2:	7bfa      	ldrb	r2, [r7, #15]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d3b5      	bcc.n	8004c64 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6818      	ldr	r0, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	7c1a      	ldrb	r2, [r3, #16]
 8004d00:	f88d 2000 	strb.w	r2, [sp]
 8004d04:	3304      	adds	r3, #4
 8004d06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d08:	f004 ff76 	bl	8009bf8 <USB_DevInit>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d005      	beq.n	8004d1e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2202      	movs	r2, #2
 8004d16:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e013      	b.n	8004d46 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	7b1b      	ldrb	r3, [r3, #12]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d102      	bne.n	8004d3a <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f001 f96f 	bl	8006018 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f005 ffb3 	bl	800acaa <USB_DevDisconnect>

  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004d4e:	b580      	push	{r7, lr}
 8004d50:	b084      	sub	sp, #16
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d101      	bne.n	8004d6a <HAL_PCD_Start+0x1c>
 8004d66:	2302      	movs	r3, #2
 8004d68:	e022      	b.n	8004db0 <HAL_PCD_Start+0x62>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d009      	beq.n	8004d92 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d105      	bne.n	8004d92 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d8a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4618      	mov	r0, r3
 8004d98:	f004 fec0 	bl	8009b1c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4618      	mov	r0, r3
 8004da2:	f005 ff61 	bl	800ac68 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3710      	adds	r7, #16
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004db8:	b590      	push	{r4, r7, lr}
 8004dba:	b08d      	sub	sp, #52	@ 0x34
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dc6:	6a3b      	ldr	r3, [r7, #32]
 8004dc8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f006 f81f 	bl	800ae12 <USB_GetMode>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	f040 84b9 	bne.w	800574e <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4618      	mov	r0, r3
 8004de2:	f005 ff83 	bl	800acec <USB_ReadInterrupts>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f000 84af 	beq.w	800574c <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	0a1b      	lsrs	r3, r3, #8
 8004df8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f005 ff70 	bl	800acec <USB_ReadInterrupts>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	f003 0302 	and.w	r3, r3, #2
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d107      	bne.n	8004e26 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	695a      	ldr	r2, [r3, #20]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f002 0202 	and.w	r2, r2, #2
 8004e24:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f005 ff5e 	bl	800acec <USB_ReadInterrupts>
 8004e30:	4603      	mov	r3, r0
 8004e32:	f003 0310 	and.w	r3, r3, #16
 8004e36:	2b10      	cmp	r3, #16
 8004e38:	d161      	bne.n	8004efe <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	699a      	ldr	r2, [r3, #24]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f022 0210 	bic.w	r2, r2, #16
 8004e48:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004e4a:	6a3b      	ldr	r3, [r7, #32]
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
 8004e4e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	f003 020f 	and.w	r2, r3, #15
 8004e56:	4613      	mov	r3, r2
 8004e58:	00db      	lsls	r3, r3, #3
 8004e5a:	4413      	add	r3, r2
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	4413      	add	r3, r2
 8004e66:	3304      	adds	r3, #4
 8004e68:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	0c5b      	lsrs	r3, r3, #17
 8004e6e:	f003 030f 	and.w	r3, r3, #15
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d124      	bne.n	8004ec0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004e76:	69ba      	ldr	r2, [r7, #24]
 8004e78:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d035      	beq.n	8004eee <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	091b      	lsrs	r3, r3, #4
 8004e8a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004e8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	461a      	mov	r2, r3
 8004e94:	6a38      	ldr	r0, [r7, #32]
 8004e96:	f005 fd95 	bl	800a9c4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	68da      	ldr	r2, [r3, #12]
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	091b      	lsrs	r3, r3, #4
 8004ea2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ea6:	441a      	add	r2, r3
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	695a      	ldr	r2, [r3, #20]
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	091b      	lsrs	r3, r3, #4
 8004eb4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004eb8:	441a      	add	r2, r3
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	615a      	str	r2, [r3, #20]
 8004ebe:	e016      	b.n	8004eee <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	0c5b      	lsrs	r3, r3, #17
 8004ec4:	f003 030f 	and.w	r3, r3, #15
 8004ec8:	2b06      	cmp	r3, #6
 8004eca:	d110      	bne.n	8004eee <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004ed2:	2208      	movs	r2, #8
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	6a38      	ldr	r0, [r7, #32]
 8004ed8:	f005 fd74 	bl	800a9c4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	695a      	ldr	r2, [r3, #20]
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	091b      	lsrs	r3, r3, #4
 8004ee4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ee8:	441a      	add	r2, r3
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	699a      	ldr	r2, [r3, #24]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f042 0210 	orr.w	r2, r2, #16
 8004efc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4618      	mov	r0, r3
 8004f04:	f005 fef2 	bl	800acec <USB_ReadInterrupts>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f0e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004f12:	f040 80a7 	bne.w	8005064 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004f16:	2300      	movs	r3, #0
 8004f18:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f005 fef7 	bl	800ad12 <USB_ReadDevAllOutEpInterrupt>
 8004f24:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004f26:	e099      	b.n	800505c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	f000 808e 	beq.w	8005050 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f3a:	b2d2      	uxtb	r2, r2
 8004f3c:	4611      	mov	r1, r2
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f005 ff1b 	bl	800ad7a <USB_ReadDevOutEPInterrupt>
 8004f44:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	f003 0301 	and.w	r3, r3, #1
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d00c      	beq.n	8004f6a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f52:	015a      	lsls	r2, r3, #5
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	4413      	add	r3, r2
 8004f58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	2301      	movs	r3, #1
 8004f60:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004f62:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 fed1 	bl	8005d0c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	f003 0308 	and.w	r3, r3, #8
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d00c      	beq.n	8004f8e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f76:	015a      	lsls	r2, r3, #5
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f80:	461a      	mov	r2, r3
 8004f82:	2308      	movs	r3, #8
 8004f84:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004f86:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 ffa7 	bl	8005edc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	f003 0310 	and.w	r3, r3, #16
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d008      	beq.n	8004faa <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f9a:	015a      	lsls	r2, r3, #5
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	2310      	movs	r3, #16
 8004fa8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	f003 0302 	and.w	r3, r3, #2
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d030      	beq.n	8005016 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004fb4:	6a3b      	ldr	r3, [r7, #32]
 8004fb6:	695b      	ldr	r3, [r3, #20]
 8004fb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fbc:	2b80      	cmp	r3, #128	@ 0x80
 8004fbe:	d109      	bne.n	8004fd4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	69fa      	ldr	r2, [r7, #28]
 8004fca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004fce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004fd2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004fd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	00db      	lsls	r3, r3, #3
 8004fda:	4413      	add	r3, r2
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	4413      	add	r3, r2
 8004fe6:	3304      	adds	r3, #4
 8004fe8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	78db      	ldrb	r3, [r3, #3]
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d108      	bne.n	8005004 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f008 ffd4 	bl	800dfac <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005006:	015a      	lsls	r2, r3, #5
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	4413      	add	r3, r2
 800500c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005010:	461a      	mov	r2, r3
 8005012:	2302      	movs	r3, #2
 8005014:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	f003 0320 	and.w	r3, r3, #32
 800501c:	2b00      	cmp	r3, #0
 800501e:	d008      	beq.n	8005032 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005022:	015a      	lsls	r2, r3, #5
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	4413      	add	r3, r2
 8005028:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800502c:	461a      	mov	r2, r3
 800502e:	2320      	movs	r3, #32
 8005030:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d009      	beq.n	8005050 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800503c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800503e:	015a      	lsls	r2, r3, #5
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	4413      	add	r3, r2
 8005044:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005048:	461a      	mov	r2, r3
 800504a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800504e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005052:	3301      	adds	r3, #1
 8005054:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005058:	085b      	lsrs	r3, r3, #1
 800505a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800505c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800505e:	2b00      	cmp	r3, #0
 8005060:	f47f af62 	bne.w	8004f28 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4618      	mov	r0, r3
 800506a:	f005 fe3f 	bl	800acec <USB_ReadInterrupts>
 800506e:	4603      	mov	r3, r0
 8005070:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005074:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005078:	f040 80db 	bne.w	8005232 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4618      	mov	r0, r3
 8005082:	f005 fe60 	bl	800ad46 <USB_ReadDevAllInEpInterrupt>
 8005086:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8005088:	2300      	movs	r3, #0
 800508a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800508c:	e0cd      	b.n	800522a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800508e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005090:	f003 0301 	and.w	r3, r3, #1
 8005094:	2b00      	cmp	r3, #0
 8005096:	f000 80c2 	beq.w	800521e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050a0:	b2d2      	uxtb	r2, r2
 80050a2:	4611      	mov	r1, r2
 80050a4:	4618      	mov	r0, r3
 80050a6:	f005 fe86 	bl	800adb6 <USB_ReadDevInEPInterrupt>
 80050aa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d057      	beq.n	8005166 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80050b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b8:	f003 030f 	and.w	r3, r3, #15
 80050bc:	2201      	movs	r2, #1
 80050be:	fa02 f303 	lsl.w	r3, r2, r3
 80050c2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	43db      	mvns	r3, r3
 80050d0:	69f9      	ldr	r1, [r7, #28]
 80050d2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80050d6:	4013      	ands	r3, r2
 80050d8:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80050da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050dc:	015a      	lsls	r2, r3, #5
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	4413      	add	r3, r2
 80050e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050e6:	461a      	mov	r2, r3
 80050e8:	2301      	movs	r3, #1
 80050ea:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	799b      	ldrb	r3, [r3, #6]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d132      	bne.n	800515a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80050f4:	6879      	ldr	r1, [r7, #4]
 80050f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050f8:	4613      	mov	r3, r2
 80050fa:	00db      	lsls	r3, r3, #3
 80050fc:	4413      	add	r3, r2
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	440b      	add	r3, r1
 8005102:	3320      	adds	r3, #32
 8005104:	6819      	ldr	r1, [r3, #0]
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800510a:	4613      	mov	r3, r2
 800510c:	00db      	lsls	r3, r3, #3
 800510e:	4413      	add	r3, r2
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	4403      	add	r3, r0
 8005114:	331c      	adds	r3, #28
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4419      	add	r1, r3
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800511e:	4613      	mov	r3, r2
 8005120:	00db      	lsls	r3, r3, #3
 8005122:	4413      	add	r3, r2
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	4403      	add	r3, r0
 8005128:	3320      	adds	r3, #32
 800512a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800512c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800512e:	2b00      	cmp	r3, #0
 8005130:	d113      	bne.n	800515a <HAL_PCD_IRQHandler+0x3a2>
 8005132:	6879      	ldr	r1, [r7, #4]
 8005134:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005136:	4613      	mov	r3, r2
 8005138:	00db      	lsls	r3, r3, #3
 800513a:	4413      	add	r3, r2
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	440b      	add	r3, r1
 8005140:	3324      	adds	r3, #36	@ 0x24
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d108      	bne.n	800515a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6818      	ldr	r0, [r3, #0]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005152:	461a      	mov	r2, r3
 8005154:	2101      	movs	r1, #1
 8005156:	f005 fe8d 	bl	800ae74 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800515a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800515c:	b2db      	uxtb	r3, r3
 800515e:	4619      	mov	r1, r3
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f008 fe9e 	bl	800dea2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	f003 0308 	and.w	r3, r3, #8
 800516c:	2b00      	cmp	r3, #0
 800516e:	d008      	beq.n	8005182 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005172:	015a      	lsls	r2, r3, #5
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	4413      	add	r3, r2
 8005178:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800517c:	461a      	mov	r2, r3
 800517e:	2308      	movs	r3, #8
 8005180:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	f003 0310 	and.w	r3, r3, #16
 8005188:	2b00      	cmp	r3, #0
 800518a:	d008      	beq.n	800519e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800518c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800518e:	015a      	lsls	r2, r3, #5
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	4413      	add	r3, r2
 8005194:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005198:	461a      	mov	r2, r3
 800519a:	2310      	movs	r3, #16
 800519c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d008      	beq.n	80051ba <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80051a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051aa:	015a      	lsls	r2, r3, #5
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	4413      	add	r3, r2
 80051b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051b4:	461a      	mov	r2, r3
 80051b6:	2340      	movs	r3, #64	@ 0x40
 80051b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	f003 0302 	and.w	r3, r3, #2
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d023      	beq.n	800520c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80051c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80051c6:	6a38      	ldr	r0, [r7, #32]
 80051c8:	f004 fe74 	bl	8009eb4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80051cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051ce:	4613      	mov	r3, r2
 80051d0:	00db      	lsls	r3, r3, #3
 80051d2:	4413      	add	r3, r2
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	3310      	adds	r3, #16
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	4413      	add	r3, r2
 80051dc:	3304      	adds	r3, #4
 80051de:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	78db      	ldrb	r3, [r3, #3]
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d108      	bne.n	80051fa <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	2200      	movs	r2, #0
 80051ec:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80051ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	4619      	mov	r1, r3
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f008 feeb 	bl	800dfd0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80051fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051fc:	015a      	lsls	r2, r3, #5
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	4413      	add	r3, r2
 8005202:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005206:	461a      	mov	r2, r3
 8005208:	2302      	movs	r3, #2
 800520a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005212:	2b00      	cmp	r3, #0
 8005214:	d003      	beq.n	800521e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005216:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 fcea 	bl	8005bf2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800521e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005220:	3301      	adds	r3, #1
 8005222:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005226:	085b      	lsrs	r3, r3, #1
 8005228:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800522a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800522c:	2b00      	cmp	r3, #0
 800522e:	f47f af2e 	bne.w	800508e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4618      	mov	r0, r3
 8005238:	f005 fd58 	bl	800acec <USB_ReadInterrupts>
 800523c:	4603      	mov	r3, r0
 800523e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005242:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005246:	d122      	bne.n	800528e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	69fa      	ldr	r2, [r7, #28]
 8005252:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005256:	f023 0301 	bic.w	r3, r3, #1
 800525a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005262:	2b01      	cmp	r3, #1
 8005264:	d108      	bne.n	8005278 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800526e:	2100      	movs	r1, #0
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 fef5 	bl	8006060 <HAL_PCDEx_LPM_Callback>
 8005276:	e002      	b.n	800527e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f008 fe89 	bl	800df90 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	695a      	ldr	r2, [r3, #20]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800528c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4618      	mov	r0, r3
 8005294:	f005 fd2a 	bl	800acec <USB_ReadInterrupts>
 8005298:	4603      	mov	r3, r0
 800529a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800529e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052a2:	d112      	bne.n	80052ca <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f003 0301 	and.w	r3, r3, #1
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d102      	bne.n	80052ba <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f008 fe45 	bl	800df44 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	695a      	ldr	r2, [r3, #20]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80052c8:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4618      	mov	r0, r3
 80052d0:	f005 fd0c 	bl	800acec <USB_ReadInterrupts>
 80052d4:	4603      	mov	r3, r0
 80052d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80052da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80052de:	d121      	bne.n	8005324 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	695a      	ldr	r2, [r3, #20]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80052ee:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d111      	bne.n	800531e <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005308:	089b      	lsrs	r3, r3, #2
 800530a:	f003 020f 	and.w	r2, r3, #15
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005314:	2101      	movs	r1, #1
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 fea2 	bl	8006060 <HAL_PCDEx_LPM_Callback>
 800531c:	e002      	b.n	8005324 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f008 fe10 	bl	800df44 <HAL_PCD_SuspendCallback>
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4618      	mov	r0, r3
 800532a:	f005 fcdf 	bl	800acec <USB_ReadInterrupts>
 800532e:	4603      	mov	r3, r0
 8005330:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005334:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005338:	f040 80b7 	bne.w	80054aa <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	69fa      	ldr	r2, [r7, #28]
 8005346:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800534a:	f023 0301 	bic.w	r3, r3, #1
 800534e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2110      	movs	r1, #16
 8005356:	4618      	mov	r0, r3
 8005358:	f004 fdac 	bl	8009eb4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800535c:	2300      	movs	r3, #0
 800535e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005360:	e046      	b.n	80053f0 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005364:	015a      	lsls	r2, r3, #5
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	4413      	add	r3, r2
 800536a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800536e:	461a      	mov	r2, r3
 8005370:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005374:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005378:	015a      	lsls	r2, r3, #5
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	4413      	add	r3, r2
 800537e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005386:	0151      	lsls	r1, r2, #5
 8005388:	69fa      	ldr	r2, [r7, #28]
 800538a:	440a      	add	r2, r1
 800538c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005390:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005394:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005398:	015a      	lsls	r2, r3, #5
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	4413      	add	r3, r2
 800539e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053a2:	461a      	mov	r2, r3
 80053a4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80053a8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80053aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053ac:	015a      	lsls	r2, r3, #5
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	4413      	add	r3, r2
 80053b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053ba:	0151      	lsls	r1, r2, #5
 80053bc:	69fa      	ldr	r2, [r7, #28]
 80053be:	440a      	add	r2, r1
 80053c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053c4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80053c8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80053ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053cc:	015a      	lsls	r2, r3, #5
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	4413      	add	r3, r2
 80053d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053da:	0151      	lsls	r1, r2, #5
 80053dc:	69fa      	ldr	r2, [r7, #28]
 80053de:	440a      	add	r2, r1
 80053e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053e4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80053e8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053ec:	3301      	adds	r3, #1
 80053ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	791b      	ldrb	r3, [r3, #4]
 80053f4:	461a      	mov	r2, r3
 80053f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d3b2      	bcc.n	8005362 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005402:	69db      	ldr	r3, [r3, #28]
 8005404:	69fa      	ldr	r2, [r7, #28]
 8005406:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800540a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800540e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	7bdb      	ldrb	r3, [r3, #15]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d016      	beq.n	8005446 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800541e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005422:	69fa      	ldr	r2, [r7, #28]
 8005424:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005428:	f043 030b 	orr.w	r3, r3, #11
 800542c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005436:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005438:	69fa      	ldr	r2, [r7, #28]
 800543a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800543e:	f043 030b 	orr.w	r3, r3, #11
 8005442:	6453      	str	r3, [r2, #68]	@ 0x44
 8005444:	e015      	b.n	8005472 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	69fa      	ldr	r2, [r7, #28]
 8005450:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005454:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005458:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800545c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	69fa      	ldr	r2, [r7, #28]
 8005468:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800546c:	f043 030b 	orr.w	r3, r3, #11
 8005470:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	69fa      	ldr	r2, [r7, #28]
 800547c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005480:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005484:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6818      	ldr	r0, [r3, #0]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005494:	461a      	mov	r2, r3
 8005496:	f005 fced 	bl	800ae74 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	695a      	ldr	r2, [r3, #20]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80054a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4618      	mov	r0, r3
 80054b0:	f005 fc1c 	bl	800acec <USB_ReadInterrupts>
 80054b4:	4603      	mov	r3, r0
 80054b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80054ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054be:	d123      	bne.n	8005508 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4618      	mov	r0, r3
 80054c6:	f005 fcb2 	bl	800ae2e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4618      	mov	r0, r3
 80054d0:	f004 fd69 	bl	8009fa6 <USB_GetDevSpeed>
 80054d4:	4603      	mov	r3, r0
 80054d6:	461a      	mov	r2, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681c      	ldr	r4, [r3, #0]
 80054e0:	f000 feb0 	bl	8006244 <HAL_RCC_GetHCLKFreq>
 80054e4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80054ea:	461a      	mov	r2, r3
 80054ec:	4620      	mov	r0, r4
 80054ee:	f004 fa73 	bl	80099d8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f008 fcfd 	bl	800def2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	695a      	ldr	r2, [r3, #20]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005506:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4618      	mov	r0, r3
 800550e:	f005 fbed 	bl	800acec <USB_ReadInterrupts>
 8005512:	4603      	mov	r3, r0
 8005514:	f003 0308 	and.w	r3, r3, #8
 8005518:	2b08      	cmp	r3, #8
 800551a:	d10a      	bne.n	8005532 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f008 fcda 	bl	800ded6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	695a      	ldr	r2, [r3, #20]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f002 0208 	and.w	r2, r2, #8
 8005530:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4618      	mov	r0, r3
 8005538:	f005 fbd8 	bl	800acec <USB_ReadInterrupts>
 800553c:	4603      	mov	r3, r0
 800553e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005542:	2b80      	cmp	r3, #128	@ 0x80
 8005544:	d123      	bne.n	800558e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005546:	6a3b      	ldr	r3, [r7, #32]
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800554e:	6a3b      	ldr	r3, [r7, #32]
 8005550:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005552:	2301      	movs	r3, #1
 8005554:	627b      	str	r3, [r7, #36]	@ 0x24
 8005556:	e014      	b.n	8005582 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005558:	6879      	ldr	r1, [r7, #4]
 800555a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800555c:	4613      	mov	r3, r2
 800555e:	00db      	lsls	r3, r3, #3
 8005560:	4413      	add	r3, r2
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	440b      	add	r3, r1
 8005566:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	2b01      	cmp	r3, #1
 800556e:	d105      	bne.n	800557c <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005572:	b2db      	uxtb	r3, r3
 8005574:	4619      	mov	r1, r3
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 fb0a 	bl	8005b90 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800557c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800557e:	3301      	adds	r3, #1
 8005580:	627b      	str	r3, [r7, #36]	@ 0x24
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	791b      	ldrb	r3, [r3, #4]
 8005586:	461a      	mov	r2, r3
 8005588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800558a:	4293      	cmp	r3, r2
 800558c:	d3e4      	bcc.n	8005558 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4618      	mov	r0, r3
 8005594:	f005 fbaa 	bl	800acec <USB_ReadInterrupts>
 8005598:	4603      	mov	r3, r0
 800559a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800559e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055a2:	d13c      	bne.n	800561e <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80055a4:	2301      	movs	r3, #1
 80055a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80055a8:	e02b      	b.n	8005602 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80055aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ac:	015a      	lsls	r2, r3, #5
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	4413      	add	r3, r2
 80055b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80055ba:	6879      	ldr	r1, [r7, #4]
 80055bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055be:	4613      	mov	r3, r2
 80055c0:	00db      	lsls	r3, r3, #3
 80055c2:	4413      	add	r3, r2
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	440b      	add	r3, r1
 80055c8:	3318      	adds	r3, #24
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d115      	bne.n	80055fc <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80055d0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	da12      	bge.n	80055fc <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80055d6:	6879      	ldr	r1, [r7, #4]
 80055d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055da:	4613      	mov	r3, r2
 80055dc:	00db      	lsls	r3, r3, #3
 80055de:	4413      	add	r3, r2
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	440b      	add	r3, r1
 80055e4:	3317      	adds	r3, #23
 80055e6:	2201      	movs	r2, #1
 80055e8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80055ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	4619      	mov	r1, r3
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 faca 	bl	8005b90 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80055fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fe:	3301      	adds	r3, #1
 8005600:	627b      	str	r3, [r7, #36]	@ 0x24
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	791b      	ldrb	r3, [r3, #4]
 8005606:	461a      	mov	r2, r3
 8005608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560a:	4293      	cmp	r3, r2
 800560c:	d3cd      	bcc.n	80055aa <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	695a      	ldr	r2, [r3, #20]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800561c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4618      	mov	r0, r3
 8005624:	f005 fb62 	bl	800acec <USB_ReadInterrupts>
 8005628:	4603      	mov	r3, r0
 800562a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800562e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005632:	d156      	bne.n	80056e2 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005634:	2301      	movs	r3, #1
 8005636:	627b      	str	r3, [r7, #36]	@ 0x24
 8005638:	e045      	b.n	80056c6 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800563a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800563c:	015a      	lsls	r2, r3, #5
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	4413      	add	r3, r2
 8005642:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800564a:	6879      	ldr	r1, [r7, #4]
 800564c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800564e:	4613      	mov	r3, r2
 8005650:	00db      	lsls	r3, r3, #3
 8005652:	4413      	add	r3, r2
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	440b      	add	r3, r1
 8005658:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	2b01      	cmp	r3, #1
 8005660:	d12e      	bne.n	80056c0 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005662:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005664:	2b00      	cmp	r3, #0
 8005666:	da2b      	bge.n	80056c0 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005674:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005678:	429a      	cmp	r2, r3
 800567a:	d121      	bne.n	80056c0 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800567c:	6879      	ldr	r1, [r7, #4]
 800567e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005680:	4613      	mov	r3, r2
 8005682:	00db      	lsls	r3, r3, #3
 8005684:	4413      	add	r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	440b      	add	r3, r1
 800568a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800568e:	2201      	movs	r2, #1
 8005690:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005692:	6a3b      	ldr	r3, [r7, #32]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800569a:	6a3b      	ldr	r3, [r7, #32]
 800569c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800569e:	6a3b      	ldr	r3, [r7, #32]
 80056a0:	695b      	ldr	r3, [r3, #20]
 80056a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d10a      	bne.n	80056c0 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	69fa      	ldr	r2, [r7, #28]
 80056b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80056b8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80056bc:	6053      	str	r3, [r2, #4]
            break;
 80056be:	e008      	b.n	80056d2 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80056c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c2:	3301      	adds	r3, #1
 80056c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	791b      	ldrb	r3, [r3, #4]
 80056ca:	461a      	mov	r2, r3
 80056cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d3b3      	bcc.n	800563a <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	695a      	ldr	r2, [r3, #20]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80056e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4618      	mov	r0, r3
 80056e8:	f005 fb00 	bl	800acec <USB_ReadInterrupts>
 80056ec:	4603      	mov	r3, r0
 80056ee:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80056f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056f6:	d10a      	bne.n	800570e <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f008 fc7b 	bl	800dff4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	695a      	ldr	r2, [r3, #20]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800570c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4618      	mov	r0, r3
 8005714:	f005 faea 	bl	800acec <USB_ReadInterrupts>
 8005718:	4603      	mov	r3, r0
 800571a:	f003 0304 	and.w	r3, r3, #4
 800571e:	2b04      	cmp	r3, #4
 8005720:	d115      	bne.n	800574e <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	f003 0304 	and.w	r3, r3, #4
 8005730:	2b00      	cmp	r3, #0
 8005732:	d002      	beq.n	800573a <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f008 fc6b 	bl	800e010 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	6859      	ldr	r1, [r3, #4]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	69ba      	ldr	r2, [r7, #24]
 8005746:	430a      	orrs	r2, r1
 8005748:	605a      	str	r2, [r3, #4]
 800574a:	e000      	b.n	800574e <HAL_PCD_IRQHandler+0x996>
      return;
 800574c:	bf00      	nop
    }
  }
}
 800574e:	3734      	adds	r7, #52	@ 0x34
 8005750:	46bd      	mov	sp, r7
 8005752:	bd90      	pop	{r4, r7, pc}

08005754 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b082      	sub	sp, #8
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	460b      	mov	r3, r1
 800575e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005766:	2b01      	cmp	r3, #1
 8005768:	d101      	bne.n	800576e <HAL_PCD_SetAddress+0x1a>
 800576a:	2302      	movs	r3, #2
 800576c:	e012      	b.n	8005794 <HAL_PCD_SetAddress+0x40>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2201      	movs	r2, #1
 8005772:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	78fa      	ldrb	r2, [r7, #3]
 800577a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	78fa      	ldrb	r2, [r7, #3]
 8005782:	4611      	mov	r1, r2
 8005784:	4618      	mov	r0, r3
 8005786:	f005 fa49 	bl	800ac1c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3708      	adds	r7, #8
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	4608      	mov	r0, r1
 80057a6:	4611      	mov	r1, r2
 80057a8:	461a      	mov	r2, r3
 80057aa:	4603      	mov	r3, r0
 80057ac:	70fb      	strb	r3, [r7, #3]
 80057ae:	460b      	mov	r3, r1
 80057b0:	803b      	strh	r3, [r7, #0]
 80057b2:	4613      	mov	r3, r2
 80057b4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80057b6:	2300      	movs	r3, #0
 80057b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80057ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	da0f      	bge.n	80057e2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057c2:	78fb      	ldrb	r3, [r7, #3]
 80057c4:	f003 020f 	and.w	r2, r3, #15
 80057c8:	4613      	mov	r3, r2
 80057ca:	00db      	lsls	r3, r3, #3
 80057cc:	4413      	add	r3, r2
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	3310      	adds	r3, #16
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	4413      	add	r3, r2
 80057d6:	3304      	adds	r3, #4
 80057d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2201      	movs	r2, #1
 80057de:	705a      	strb	r2, [r3, #1]
 80057e0:	e00f      	b.n	8005802 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80057e2:	78fb      	ldrb	r3, [r7, #3]
 80057e4:	f003 020f 	and.w	r2, r3, #15
 80057e8:	4613      	mov	r3, r2
 80057ea:	00db      	lsls	r3, r3, #3
 80057ec:	4413      	add	r3, r2
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	4413      	add	r3, r2
 80057f8:	3304      	adds	r3, #4
 80057fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2200      	movs	r2, #0
 8005800:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005802:	78fb      	ldrb	r3, [r7, #3]
 8005804:	f003 030f 	and.w	r3, r3, #15
 8005808:	b2da      	uxtb	r2, r3
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800580e:	883b      	ldrh	r3, [r7, #0]
 8005810:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	78ba      	ldrb	r2, [r7, #2]
 800581c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	785b      	ldrb	r3, [r3, #1]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d004      	beq.n	8005830 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	461a      	mov	r2, r3
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005830:	78bb      	ldrb	r3, [r7, #2]
 8005832:	2b02      	cmp	r3, #2
 8005834:	d102      	bne.n	800583c <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2200      	movs	r2, #0
 800583a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005842:	2b01      	cmp	r3, #1
 8005844:	d101      	bne.n	800584a <HAL_PCD_EP_Open+0xae>
 8005846:	2302      	movs	r3, #2
 8005848:	e00e      	b.n	8005868 <HAL_PCD_EP_Open+0xcc>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2201      	movs	r2, #1
 800584e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68f9      	ldr	r1, [r7, #12]
 8005858:	4618      	mov	r0, r3
 800585a:	f004 fbc9 	bl	8009ff0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005866:	7afb      	ldrb	r3, [r7, #11]
}
 8005868:	4618      	mov	r0, r3
 800586a:	3710      	adds	r7, #16
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	460b      	mov	r3, r1
 800587a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800587c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005880:	2b00      	cmp	r3, #0
 8005882:	da0f      	bge.n	80058a4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005884:	78fb      	ldrb	r3, [r7, #3]
 8005886:	f003 020f 	and.w	r2, r3, #15
 800588a:	4613      	mov	r3, r2
 800588c:	00db      	lsls	r3, r3, #3
 800588e:	4413      	add	r3, r2
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	3310      	adds	r3, #16
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	4413      	add	r3, r2
 8005898:	3304      	adds	r3, #4
 800589a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2201      	movs	r2, #1
 80058a0:	705a      	strb	r2, [r3, #1]
 80058a2:	e00f      	b.n	80058c4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80058a4:	78fb      	ldrb	r3, [r7, #3]
 80058a6:	f003 020f 	and.w	r2, r3, #15
 80058aa:	4613      	mov	r3, r2
 80058ac:	00db      	lsls	r3, r3, #3
 80058ae:	4413      	add	r3, r2
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	4413      	add	r3, r2
 80058ba:	3304      	adds	r3, #4
 80058bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2200      	movs	r2, #0
 80058c2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80058c4:	78fb      	ldrb	r3, [r7, #3]
 80058c6:	f003 030f 	and.w	r3, r3, #15
 80058ca:	b2da      	uxtb	r2, r3
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d101      	bne.n	80058de <HAL_PCD_EP_Close+0x6e>
 80058da:	2302      	movs	r3, #2
 80058dc:	e00e      	b.n	80058fc <HAL_PCD_EP_Close+0x8c>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2201      	movs	r2, #1
 80058e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68f9      	ldr	r1, [r7, #12]
 80058ec:	4618      	mov	r0, r3
 80058ee:	f004 fc07 	bl	800a100 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3710      	adds	r7, #16
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b086      	sub	sp, #24
 8005908:	af00      	add	r7, sp, #0
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	607a      	str	r2, [r7, #4]
 800590e:	603b      	str	r3, [r7, #0]
 8005910:	460b      	mov	r3, r1
 8005912:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005914:	7afb      	ldrb	r3, [r7, #11]
 8005916:	f003 020f 	and.w	r2, r3, #15
 800591a:	4613      	mov	r3, r2
 800591c:	00db      	lsls	r3, r3, #3
 800591e:	4413      	add	r3, r2
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	4413      	add	r3, r2
 800592a:	3304      	adds	r3, #4
 800592c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	683a      	ldr	r2, [r7, #0]
 8005938:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	2200      	movs	r2, #0
 800593e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	2200      	movs	r2, #0
 8005944:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005946:	7afb      	ldrb	r3, [r7, #11]
 8005948:	f003 030f 	and.w	r3, r3, #15
 800594c:	b2da      	uxtb	r2, r3
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	799b      	ldrb	r3, [r3, #6]
 8005956:	2b01      	cmp	r3, #1
 8005958:	d102      	bne.n	8005960 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6818      	ldr	r0, [r3, #0]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	799b      	ldrb	r3, [r3, #6]
 8005968:	461a      	mov	r2, r3
 800596a:	6979      	ldr	r1, [r7, #20]
 800596c:	f004 fca4 	bl	800a2b8 <USB_EPStartXfer>

  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3718      	adds	r7, #24
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}

0800597a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800597a:	b480      	push	{r7}
 800597c:	b083      	sub	sp, #12
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
 8005982:	460b      	mov	r3, r1
 8005984:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005986:	78fb      	ldrb	r3, [r7, #3]
 8005988:	f003 020f 	and.w	r2, r3, #15
 800598c:	6879      	ldr	r1, [r7, #4]
 800598e:	4613      	mov	r3, r2
 8005990:	00db      	lsls	r3, r3, #3
 8005992:	4413      	add	r3, r2
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	440b      	add	r3, r1
 8005998:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800599c:	681b      	ldr	r3, [r3, #0]
}
 800599e:	4618      	mov	r0, r3
 80059a0:	370c      	adds	r7, #12
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr

080059aa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80059aa:	b580      	push	{r7, lr}
 80059ac:	b086      	sub	sp, #24
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	60f8      	str	r0, [r7, #12]
 80059b2:	607a      	str	r2, [r7, #4]
 80059b4:	603b      	str	r3, [r7, #0]
 80059b6:	460b      	mov	r3, r1
 80059b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059ba:	7afb      	ldrb	r3, [r7, #11]
 80059bc:	f003 020f 	and.w	r2, r3, #15
 80059c0:	4613      	mov	r3, r2
 80059c2:	00db      	lsls	r3, r3, #3
 80059c4:	4413      	add	r3, r2
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	3310      	adds	r3, #16
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	4413      	add	r3, r2
 80059ce:	3304      	adds	r3, #4
 80059d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	683a      	ldr	r2, [r7, #0]
 80059dc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	2200      	movs	r2, #0
 80059e2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	2201      	movs	r2, #1
 80059e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80059ea:	7afb      	ldrb	r3, [r7, #11]
 80059ec:	f003 030f 	and.w	r3, r3, #15
 80059f0:	b2da      	uxtb	r2, r3
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	799b      	ldrb	r3, [r3, #6]
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d102      	bne.n	8005a04 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6818      	ldr	r0, [r3, #0]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	799b      	ldrb	r3, [r3, #6]
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	6979      	ldr	r1, [r7, #20]
 8005a10:	f004 fc52 	bl	800a2b8 <USB_EPStartXfer>

  return HAL_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3718      	adds	r7, #24
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b084      	sub	sp, #16
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
 8005a26:	460b      	mov	r3, r1
 8005a28:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005a2a:	78fb      	ldrb	r3, [r7, #3]
 8005a2c:	f003 030f 	and.w	r3, r3, #15
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	7912      	ldrb	r2, [r2, #4]
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d901      	bls.n	8005a3c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e04f      	b.n	8005adc <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005a3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	da0f      	bge.n	8005a64 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a44:	78fb      	ldrb	r3, [r7, #3]
 8005a46:	f003 020f 	and.w	r2, r3, #15
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	00db      	lsls	r3, r3, #3
 8005a4e:	4413      	add	r3, r2
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	3310      	adds	r3, #16
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	4413      	add	r3, r2
 8005a58:	3304      	adds	r3, #4
 8005a5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	705a      	strb	r2, [r3, #1]
 8005a62:	e00d      	b.n	8005a80 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005a64:	78fa      	ldrb	r2, [r7, #3]
 8005a66:	4613      	mov	r3, r2
 8005a68:	00db      	lsls	r3, r3, #3
 8005a6a:	4413      	add	r3, r2
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	4413      	add	r3, r2
 8005a76:	3304      	adds	r3, #4
 8005a78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2201      	movs	r2, #1
 8005a84:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a86:	78fb      	ldrb	r3, [r7, #3]
 8005a88:	f003 030f 	and.w	r3, r3, #15
 8005a8c:	b2da      	uxtb	r2, r3
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d101      	bne.n	8005aa0 <HAL_PCD_EP_SetStall+0x82>
 8005a9c:	2302      	movs	r3, #2
 8005a9e:	e01d      	b.n	8005adc <HAL_PCD_EP_SetStall+0xbe>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68f9      	ldr	r1, [r7, #12]
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f004 ffe0 	bl	800aa74 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005ab4:	78fb      	ldrb	r3, [r7, #3]
 8005ab6:	f003 030f 	and.w	r3, r3, #15
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d109      	bne.n	8005ad2 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6818      	ldr	r0, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	7999      	ldrb	r1, [r3, #6]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005acc:	461a      	mov	r2, r3
 8005ace:	f005 f9d1 	bl	800ae74 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005ada:	2300      	movs	r3, #0
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3710      	adds	r7, #16
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	460b      	mov	r3, r1
 8005aee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005af0:	78fb      	ldrb	r3, [r7, #3]
 8005af2:	f003 030f 	and.w	r3, r3, #15
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	7912      	ldrb	r2, [r2, #4]
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d901      	bls.n	8005b02 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e042      	b.n	8005b88 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005b02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	da0f      	bge.n	8005b2a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b0a:	78fb      	ldrb	r3, [r7, #3]
 8005b0c:	f003 020f 	and.w	r2, r3, #15
 8005b10:	4613      	mov	r3, r2
 8005b12:	00db      	lsls	r3, r3, #3
 8005b14:	4413      	add	r3, r2
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	3310      	adds	r3, #16
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	3304      	adds	r3, #4
 8005b20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2201      	movs	r2, #1
 8005b26:	705a      	strb	r2, [r3, #1]
 8005b28:	e00f      	b.n	8005b4a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b2a:	78fb      	ldrb	r3, [r7, #3]
 8005b2c:	f003 020f 	and.w	r2, r3, #15
 8005b30:	4613      	mov	r3, r2
 8005b32:	00db      	lsls	r3, r3, #3
 8005b34:	4413      	add	r3, r2
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	4413      	add	r3, r2
 8005b40:	3304      	adds	r3, #4
 8005b42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b50:	78fb      	ldrb	r3, [r7, #3]
 8005b52:	f003 030f 	and.w	r3, r3, #15
 8005b56:	b2da      	uxtb	r2, r3
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d101      	bne.n	8005b6a <HAL_PCD_EP_ClrStall+0x86>
 8005b66:	2302      	movs	r3, #2
 8005b68:	e00e      	b.n	8005b88 <HAL_PCD_EP_ClrStall+0xa4>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68f9      	ldr	r1, [r7, #12]
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f004 ffe9 	bl	800ab50 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005b86:	2300      	movs	r3, #0
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3710      	adds	r7, #16
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	460b      	mov	r3, r1
 8005b9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005b9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	da0c      	bge.n	8005bbe <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ba4:	78fb      	ldrb	r3, [r7, #3]
 8005ba6:	f003 020f 	and.w	r2, r3, #15
 8005baa:	4613      	mov	r3, r2
 8005bac:	00db      	lsls	r3, r3, #3
 8005bae:	4413      	add	r3, r2
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	3310      	adds	r3, #16
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	3304      	adds	r3, #4
 8005bba:	60fb      	str	r3, [r7, #12]
 8005bbc:	e00c      	b.n	8005bd8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005bbe:	78fb      	ldrb	r3, [r7, #3]
 8005bc0:	f003 020f 	and.w	r2, r3, #15
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	00db      	lsls	r3, r3, #3
 8005bc8:	4413      	add	r3, r2
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	3304      	adds	r3, #4
 8005bd6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68f9      	ldr	r1, [r7, #12]
 8005bde:	4618      	mov	r0, r3
 8005be0:	f004 fe08 	bl	800a7f4 <USB_EPStopXfer>
 8005be4:	4603      	mov	r3, r0
 8005be6:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005be8:	7afb      	ldrb	r3, [r7, #11]
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b08a      	sub	sp, #40	@ 0x28
 8005bf6:	af02      	add	r7, sp, #8
 8005bf8:	6078      	str	r0, [r7, #4]
 8005bfa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005c06:	683a      	ldr	r2, [r7, #0]
 8005c08:	4613      	mov	r3, r2
 8005c0a:	00db      	lsls	r3, r3, #3
 8005c0c:	4413      	add	r3, r2
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	3310      	adds	r3, #16
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	4413      	add	r3, r2
 8005c16:	3304      	adds	r3, #4
 8005c18:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	695a      	ldr	r2, [r3, #20]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d901      	bls.n	8005c2a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e06b      	b.n	8005d02 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	691a      	ldr	r2, [r3, #16]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	695b      	ldr	r3, [r3, #20]
 8005c32:	1ad3      	subs	r3, r2, r3
 8005c34:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	69fa      	ldr	r2, [r7, #28]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d902      	bls.n	8005c46 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	3303      	adds	r3, #3
 8005c4a:	089b      	lsrs	r3, r3, #2
 8005c4c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005c4e:	e02a      	b.n	8005ca6 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	691a      	ldr	r2, [r3, #16]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	695b      	ldr	r3, [r3, #20]
 8005c58:	1ad3      	subs	r3, r2, r3
 8005c5a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	69fa      	ldr	r2, [r7, #28]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d902      	bls.n	8005c6c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	3303      	adds	r3, #3
 8005c70:	089b      	lsrs	r3, r3, #2
 8005c72:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	68d9      	ldr	r1, [r3, #12]
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	b2da      	uxtb	r2, r3
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005c84:	9300      	str	r3, [sp, #0]
 8005c86:	4603      	mov	r3, r0
 8005c88:	6978      	ldr	r0, [r7, #20]
 8005c8a:	f004 fe5d 	bl	800a948 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	68da      	ldr	r2, [r3, #12]
 8005c92:	69fb      	ldr	r3, [r7, #28]
 8005c94:	441a      	add	r2, r3
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	695a      	ldr	r2, [r3, #20]
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	441a      	add	r2, r3
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	015a      	lsls	r2, r3, #5
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	4413      	add	r3, r2
 8005cae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cb2:	699b      	ldr	r3, [r3, #24]
 8005cb4:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005cb6:	69ba      	ldr	r2, [r7, #24]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d809      	bhi.n	8005cd0 <PCD_WriteEmptyTxFifo+0xde>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	695a      	ldr	r2, [r3, #20]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d203      	bcs.n	8005cd0 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d1bf      	bne.n	8005c50 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	691a      	ldr	r2, [r3, #16]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	695b      	ldr	r3, [r3, #20]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d811      	bhi.n	8005d00 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	f003 030f 	and.w	r3, r3, #15
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cf0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	43db      	mvns	r3, r3
 8005cf6:	6939      	ldr	r1, [r7, #16]
 8005cf8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005d00:	2300      	movs	r3, #0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3720      	adds	r7, #32
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
	...

08005d0c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b088      	sub	sp, #32
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	333c      	adds	r3, #60	@ 0x3c
 8005d24:	3304      	adds	r3, #4
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	015a      	lsls	r2, r3, #5
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	4413      	add	r3, r2
 8005d32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	799b      	ldrb	r3, [r3, #6]
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d17b      	bne.n	8005e3a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	f003 0308 	and.w	r3, r3, #8
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d015      	beq.n	8005d78 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	4a61      	ldr	r2, [pc, #388]	@ (8005ed4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	f240 80b9 	bls.w	8005ec8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	f000 80b3 	beq.w	8005ec8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	015a      	lsls	r2, r3, #5
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	4413      	add	r3, r2
 8005d6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d6e:	461a      	mov	r2, r3
 8005d70:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d74:	6093      	str	r3, [r2, #8]
 8005d76:	e0a7      	b.n	8005ec8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	f003 0320 	and.w	r3, r3, #32
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d009      	beq.n	8005d96 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	015a      	lsls	r2, r3, #5
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	4413      	add	r3, r2
 8005d8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d8e:	461a      	mov	r2, r3
 8005d90:	2320      	movs	r3, #32
 8005d92:	6093      	str	r3, [r2, #8]
 8005d94:	e098      	b.n	8005ec8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f040 8093 	bne.w	8005ec8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	4a4b      	ldr	r2, [pc, #300]	@ (8005ed4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d90f      	bls.n	8005dca <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d00a      	beq.n	8005dca <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	015a      	lsls	r2, r3, #5
 8005db8:	69bb      	ldr	r3, [r7, #24]
 8005dba:	4413      	add	r3, r2
 8005dbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005dc6:	6093      	str	r3, [r2, #8]
 8005dc8:	e07e      	b.n	8005ec8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005dca:	683a      	ldr	r2, [r7, #0]
 8005dcc:	4613      	mov	r3, r2
 8005dce:	00db      	lsls	r3, r3, #3
 8005dd0:	4413      	add	r3, r2
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	4413      	add	r3, r2
 8005ddc:	3304      	adds	r3, #4
 8005dde:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6a1a      	ldr	r2, [r3, #32]
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	0159      	lsls	r1, r3, #5
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	440b      	add	r3, r1
 8005dec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005df6:	1ad2      	subs	r2, r2, r3
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d114      	bne.n	8005e2c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d109      	bne.n	8005e1e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6818      	ldr	r0, [r3, #0]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005e14:	461a      	mov	r2, r3
 8005e16:	2101      	movs	r1, #1
 8005e18:	f005 f82c 	bl	800ae74 <USB_EP0_OutStart>
 8005e1c:	e006      	b.n	8005e2c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	68da      	ldr	r2, [r3, #12]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	695b      	ldr	r3, [r3, #20]
 8005e26:	441a      	add	r2, r3
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	4619      	mov	r1, r3
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f008 f81a 	bl	800de6c <HAL_PCD_DataOutStageCallback>
 8005e38:	e046      	b.n	8005ec8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	4a26      	ldr	r2, [pc, #152]	@ (8005ed8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d124      	bne.n	8005e8c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00a      	beq.n	8005e62 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	015a      	lsls	r2, r3, #5
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	4413      	add	r3, r2
 8005e54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e58:	461a      	mov	r2, r3
 8005e5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e5e:	6093      	str	r3, [r2, #8]
 8005e60:	e032      	b.n	8005ec8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	f003 0320 	and.w	r3, r3, #32
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d008      	beq.n	8005e7e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	015a      	lsls	r2, r3, #5
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	4413      	add	r3, r2
 8005e74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e78:	461a      	mov	r2, r3
 8005e7a:	2320      	movs	r3, #32
 8005e7c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	4619      	mov	r1, r3
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f007 fff1 	bl	800de6c <HAL_PCD_DataOutStageCallback>
 8005e8a:	e01d      	b.n	8005ec8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d114      	bne.n	8005ebc <PCD_EP_OutXfrComplete_int+0x1b0>
 8005e92:	6879      	ldr	r1, [r7, #4]
 8005e94:	683a      	ldr	r2, [r7, #0]
 8005e96:	4613      	mov	r3, r2
 8005e98:	00db      	lsls	r3, r3, #3
 8005e9a:	4413      	add	r3, r2
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	440b      	add	r3, r1
 8005ea0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d108      	bne.n	8005ebc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6818      	ldr	r0, [r3, #0]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	2100      	movs	r1, #0
 8005eb8:	f004 ffdc 	bl	800ae74 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f007 ffd2 	bl	800de6c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005ec8:	2300      	movs	r3, #0
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3720      	adds	r7, #32
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	4f54300a 	.word	0x4f54300a
 8005ed8:	4f54310a 	.word	0x4f54310a

08005edc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b086      	sub	sp, #24
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	333c      	adds	r3, #60	@ 0x3c
 8005ef4:	3304      	adds	r3, #4
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	015a      	lsls	r2, r3, #5
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	4413      	add	r3, r2
 8005f02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	4a15      	ldr	r2, [pc, #84]	@ (8005f64 <PCD_EP_OutSetupPacket_int+0x88>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d90e      	bls.n	8005f30 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d009      	beq.n	8005f30 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	015a      	lsls	r2, r3, #5
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	4413      	add	r3, r2
 8005f24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f28:	461a      	mov	r2, r3
 8005f2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f2e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f007 ff89 	bl	800de48 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	4a0a      	ldr	r2, [pc, #40]	@ (8005f64 <PCD_EP_OutSetupPacket_int+0x88>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d90c      	bls.n	8005f58 <PCD_EP_OutSetupPacket_int+0x7c>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	799b      	ldrb	r3, [r3, #6]
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d108      	bne.n	8005f58 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6818      	ldr	r0, [r3, #0]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005f50:	461a      	mov	r2, r3
 8005f52:	2101      	movs	r1, #1
 8005f54:	f004 ff8e 	bl	800ae74 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005f58:	2300      	movs	r3, #0
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3718      	adds	r7, #24
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop
 8005f64:	4f54300a 	.word	0x4f54300a

08005f68 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	460b      	mov	r3, r1
 8005f72:	70fb      	strb	r3, [r7, #3]
 8005f74:	4613      	mov	r3, r2
 8005f76:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f7e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005f80:	78fb      	ldrb	r3, [r7, #3]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d107      	bne.n	8005f96 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005f86:	883b      	ldrh	r3, [r7, #0]
 8005f88:	0419      	lsls	r1, r3, #16
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	68ba      	ldr	r2, [r7, #8]
 8005f90:	430a      	orrs	r2, r1
 8005f92:	629a      	str	r2, [r3, #40]	@ 0x28
 8005f94:	e028      	b.n	8005fe8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f9c:	0c1b      	lsrs	r3, r3, #16
 8005f9e:	68ba      	ldr	r2, [r7, #8]
 8005fa0:	4413      	add	r3, r2
 8005fa2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	73fb      	strb	r3, [r7, #15]
 8005fa8:	e00d      	b.n	8005fc6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	7bfb      	ldrb	r3, [r7, #15]
 8005fb0:	3340      	adds	r3, #64	@ 0x40
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	4413      	add	r3, r2
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	0c1b      	lsrs	r3, r3, #16
 8005fba:	68ba      	ldr	r2, [r7, #8]
 8005fbc:	4413      	add	r3, r2
 8005fbe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005fc0:	7bfb      	ldrb	r3, [r7, #15]
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	73fb      	strb	r3, [r7, #15]
 8005fc6:	7bfa      	ldrb	r2, [r7, #15]
 8005fc8:	78fb      	ldrb	r3, [r7, #3]
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d3ec      	bcc.n	8005faa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005fd0:	883b      	ldrh	r3, [r7, #0]
 8005fd2:	0418      	lsls	r0, r3, #16
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6819      	ldr	r1, [r3, #0]
 8005fd8:	78fb      	ldrb	r3, [r7, #3]
 8005fda:	3b01      	subs	r3, #1
 8005fdc:	68ba      	ldr	r2, [r7, #8]
 8005fde:	4302      	orrs	r2, r0
 8005fe0:	3340      	adds	r3, #64	@ 0x40
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	440b      	add	r3, r1
 8005fe6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3714      	adds	r7, #20
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr

08005ff6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005ff6:	b480      	push	{r7}
 8005ff8:	b083      	sub	sp, #12
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
 8005ffe:	460b      	mov	r3, r1
 8006000:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	887a      	ldrh	r2, [r7, #2]
 8006008:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800600a:	2300      	movs	r3, #0
}
 800600c:	4618      	mov	r0, r3
 800600e:	370c      	adds	r7, #12
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr

08006018 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006018:	b480      	push	{r7}
 800601a:	b085      	sub	sp, #20
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2201      	movs	r2, #1
 800602a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	699b      	ldr	r3, [r3, #24]
 800603a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006046:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800604a:	f043 0303 	orr.w	r3, r3, #3
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3714      	adds	r7, #20
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	460b      	mov	r3, r1
 800606a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800606c:	bf00      	nop
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d101      	bne.n	800608c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	e0cc      	b.n	8006226 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800608c:	4b68      	ldr	r3, [pc, #416]	@ (8006230 <HAL_RCC_ClockConfig+0x1b8>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 030f 	and.w	r3, r3, #15
 8006094:	683a      	ldr	r2, [r7, #0]
 8006096:	429a      	cmp	r2, r3
 8006098:	d90c      	bls.n	80060b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800609a:	4b65      	ldr	r3, [pc, #404]	@ (8006230 <HAL_RCC_ClockConfig+0x1b8>)
 800609c:	683a      	ldr	r2, [r7, #0]
 800609e:	b2d2      	uxtb	r2, r2
 80060a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060a2:	4b63      	ldr	r3, [pc, #396]	@ (8006230 <HAL_RCC_ClockConfig+0x1b8>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 030f 	and.w	r3, r3, #15
 80060aa:	683a      	ldr	r2, [r7, #0]
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d001      	beq.n	80060b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	e0b8      	b.n	8006226 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0302 	and.w	r3, r3, #2
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d020      	beq.n	8006102 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 0304 	and.w	r3, r3, #4
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d005      	beq.n	80060d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80060cc:	4b59      	ldr	r3, [pc, #356]	@ (8006234 <HAL_RCC_ClockConfig+0x1bc>)
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	4a58      	ldr	r2, [pc, #352]	@ (8006234 <HAL_RCC_ClockConfig+0x1bc>)
 80060d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80060d6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 0308 	and.w	r3, r3, #8
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d005      	beq.n	80060f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80060e4:	4b53      	ldr	r3, [pc, #332]	@ (8006234 <HAL_RCC_ClockConfig+0x1bc>)
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	4a52      	ldr	r2, [pc, #328]	@ (8006234 <HAL_RCC_ClockConfig+0x1bc>)
 80060ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80060ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060f0:	4b50      	ldr	r3, [pc, #320]	@ (8006234 <HAL_RCC_ClockConfig+0x1bc>)
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	494d      	ldr	r1, [pc, #308]	@ (8006234 <HAL_RCC_ClockConfig+0x1bc>)
 80060fe:	4313      	orrs	r3, r2
 8006100:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f003 0301 	and.w	r3, r3, #1
 800610a:	2b00      	cmp	r3, #0
 800610c:	d044      	beq.n	8006198 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	2b01      	cmp	r3, #1
 8006114:	d107      	bne.n	8006126 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006116:	4b47      	ldr	r3, [pc, #284]	@ (8006234 <HAL_RCC_ClockConfig+0x1bc>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800611e:	2b00      	cmp	r3, #0
 8006120:	d119      	bne.n	8006156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e07f      	b.n	8006226 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	2b02      	cmp	r3, #2
 800612c:	d003      	beq.n	8006136 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006132:	2b03      	cmp	r3, #3
 8006134:	d107      	bne.n	8006146 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006136:	4b3f      	ldr	r3, [pc, #252]	@ (8006234 <HAL_RCC_ClockConfig+0x1bc>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800613e:	2b00      	cmp	r3, #0
 8006140:	d109      	bne.n	8006156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e06f      	b.n	8006226 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006146:	4b3b      	ldr	r3, [pc, #236]	@ (8006234 <HAL_RCC_ClockConfig+0x1bc>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 0302 	and.w	r3, r3, #2
 800614e:	2b00      	cmp	r3, #0
 8006150:	d101      	bne.n	8006156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e067      	b.n	8006226 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006156:	4b37      	ldr	r3, [pc, #220]	@ (8006234 <HAL_RCC_ClockConfig+0x1bc>)
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	f023 0203 	bic.w	r2, r3, #3
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	4934      	ldr	r1, [pc, #208]	@ (8006234 <HAL_RCC_ClockConfig+0x1bc>)
 8006164:	4313      	orrs	r3, r2
 8006166:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006168:	f7fd fe1a 	bl	8003da0 <HAL_GetTick>
 800616c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800616e:	e00a      	b.n	8006186 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006170:	f7fd fe16 	bl	8003da0 <HAL_GetTick>
 8006174:	4602      	mov	r2, r0
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800617e:	4293      	cmp	r3, r2
 8006180:	d901      	bls.n	8006186 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006182:	2303      	movs	r3, #3
 8006184:	e04f      	b.n	8006226 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006186:	4b2b      	ldr	r3, [pc, #172]	@ (8006234 <HAL_RCC_ClockConfig+0x1bc>)
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	f003 020c 	and.w	r2, r3, #12
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	429a      	cmp	r2, r3
 8006196:	d1eb      	bne.n	8006170 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006198:	4b25      	ldr	r3, [pc, #148]	@ (8006230 <HAL_RCC_ClockConfig+0x1b8>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 030f 	and.w	r3, r3, #15
 80061a0:	683a      	ldr	r2, [r7, #0]
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d20c      	bcs.n	80061c0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061a6:	4b22      	ldr	r3, [pc, #136]	@ (8006230 <HAL_RCC_ClockConfig+0x1b8>)
 80061a8:	683a      	ldr	r2, [r7, #0]
 80061aa:	b2d2      	uxtb	r2, r2
 80061ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061ae:	4b20      	ldr	r3, [pc, #128]	@ (8006230 <HAL_RCC_ClockConfig+0x1b8>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 030f 	and.w	r3, r3, #15
 80061b6:	683a      	ldr	r2, [r7, #0]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d001      	beq.n	80061c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	e032      	b.n	8006226 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 0304 	and.w	r3, r3, #4
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d008      	beq.n	80061de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80061cc:	4b19      	ldr	r3, [pc, #100]	@ (8006234 <HAL_RCC_ClockConfig+0x1bc>)
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	4916      	ldr	r1, [pc, #88]	@ (8006234 <HAL_RCC_ClockConfig+0x1bc>)
 80061da:	4313      	orrs	r3, r2
 80061dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f003 0308 	and.w	r3, r3, #8
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d009      	beq.n	80061fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80061ea:	4b12      	ldr	r3, [pc, #72]	@ (8006234 <HAL_RCC_ClockConfig+0x1bc>)
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	00db      	lsls	r3, r3, #3
 80061f8:	490e      	ldr	r1, [pc, #56]	@ (8006234 <HAL_RCC_ClockConfig+0x1bc>)
 80061fa:	4313      	orrs	r3, r2
 80061fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80061fe:	f000 fbb1 	bl	8006964 <HAL_RCC_GetSysClockFreq>
 8006202:	4602      	mov	r2, r0
 8006204:	4b0b      	ldr	r3, [pc, #44]	@ (8006234 <HAL_RCC_ClockConfig+0x1bc>)
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	091b      	lsrs	r3, r3, #4
 800620a:	f003 030f 	and.w	r3, r3, #15
 800620e:	490a      	ldr	r1, [pc, #40]	@ (8006238 <HAL_RCC_ClockConfig+0x1c0>)
 8006210:	5ccb      	ldrb	r3, [r1, r3]
 8006212:	fa22 f303 	lsr.w	r3, r2, r3
 8006216:	4a09      	ldr	r2, [pc, #36]	@ (800623c <HAL_RCC_ClockConfig+0x1c4>)
 8006218:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800621a:	4b09      	ldr	r3, [pc, #36]	@ (8006240 <HAL_RCC_ClockConfig+0x1c8>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4618      	mov	r0, r3
 8006220:	f7fd f8ee 	bl	8003400 <HAL_InitTick>

  return HAL_OK;
 8006224:	2300      	movs	r3, #0
}
 8006226:	4618      	mov	r0, r3
 8006228:	3710      	adds	r7, #16
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	40023c00 	.word	0x40023c00
 8006234:	40023800 	.word	0x40023800
 8006238:	08014390 	.word	0x08014390
 800623c:	20000010 	.word	0x20000010
 8006240:	20000014 	.word	0x20000014

08006244 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006244:	b480      	push	{r7}
 8006246:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006248:	4b03      	ldr	r3, [pc, #12]	@ (8006258 <HAL_RCC_GetHCLKFreq+0x14>)
 800624a:	681b      	ldr	r3, [r3, #0]
}
 800624c:	4618      	mov	r0, r3
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr
 8006256:	bf00      	nop
 8006258:	20000010 	.word	0x20000010

0800625c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006260:	f7ff fff0 	bl	8006244 <HAL_RCC_GetHCLKFreq>
 8006264:	4602      	mov	r2, r0
 8006266:	4b05      	ldr	r3, [pc, #20]	@ (800627c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	0a9b      	lsrs	r3, r3, #10
 800626c:	f003 0307 	and.w	r3, r3, #7
 8006270:	4903      	ldr	r1, [pc, #12]	@ (8006280 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006272:	5ccb      	ldrb	r3, [r1, r3]
 8006274:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006278:	4618      	mov	r0, r3
 800627a:	bd80      	pop	{r7, pc}
 800627c:	40023800 	.word	0x40023800
 8006280:	080143a0 	.word	0x080143a0

08006284 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006288:	f7ff ffdc 	bl	8006244 <HAL_RCC_GetHCLKFreq>
 800628c:	4602      	mov	r2, r0
 800628e:	4b05      	ldr	r3, [pc, #20]	@ (80062a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	0b5b      	lsrs	r3, r3, #13
 8006294:	f003 0307 	and.w	r3, r3, #7
 8006298:	4903      	ldr	r1, [pc, #12]	@ (80062a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800629a:	5ccb      	ldrb	r3, [r1, r3]
 800629c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	40023800 	.word	0x40023800
 80062a8:	080143a0 	.word	0x080143a0

080062ac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	220f      	movs	r2, #15
 80062ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80062bc:	4b12      	ldr	r3, [pc, #72]	@ (8006308 <HAL_RCC_GetClockConfig+0x5c>)
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	f003 0203 	and.w	r2, r3, #3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80062c8:	4b0f      	ldr	r3, [pc, #60]	@ (8006308 <HAL_RCC_GetClockConfig+0x5c>)
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80062d4:	4b0c      	ldr	r3, [pc, #48]	@ (8006308 <HAL_RCC_GetClockConfig+0x5c>)
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80062e0:	4b09      	ldr	r3, [pc, #36]	@ (8006308 <HAL_RCC_GetClockConfig+0x5c>)
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	08db      	lsrs	r3, r3, #3
 80062e6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80062ee:	4b07      	ldr	r3, [pc, #28]	@ (800630c <HAL_RCC_GetClockConfig+0x60>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 020f 	and.w	r2, r3, #15
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	601a      	str	r2, [r3, #0]
}
 80062fa:	bf00      	nop
 80062fc:	370c      	adds	r7, #12
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
 8006306:	bf00      	nop
 8006308:	40023800 	.word	0x40023800
 800630c:	40023c00 	.word	0x40023c00

08006310 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b08c      	sub	sp, #48	@ 0x30
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006318:	2300      	movs	r3, #0
 800631a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 800631c:	2300      	movs	r3, #0
 800631e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8006320:	2300      	movs	r3, #0
 8006322:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8006324:	2300      	movs	r3, #0
 8006326:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8006328:	2300      	movs	r3, #0
 800632a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800632c:	2300      	movs	r3, #0
 800632e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8006330:	2300      	movs	r3, #0
 8006332:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8006334:	2300      	movs	r3, #0
 8006336:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8006338:	2300      	movs	r3, #0
 800633a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 0301 	and.w	r3, r3, #1
 8006344:	2b00      	cmp	r3, #0
 8006346:	d010      	beq.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8006348:	4b6f      	ldr	r3, [pc, #444]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800634a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800634e:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006356:	496c      	ldr	r1, [pc, #432]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006358:	4313      	orrs	r3, r2
 800635a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006362:	2b00      	cmp	r3, #0
 8006364:	d101      	bne.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8006366:	2301      	movs	r3, #1
 8006368:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 0302 	and.w	r3, r3, #2
 8006372:	2b00      	cmp	r3, #0
 8006374:	d010      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8006376:	4b64      	ldr	r3, [pc, #400]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006378:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800637c:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006384:	4960      	ldr	r1, [pc, #384]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006386:	4313      	orrs	r3, r2
 8006388:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006390:	2b00      	cmp	r3, #0
 8006392:	d101      	bne.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8006394:	2301      	movs	r3, #1
 8006396:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 0304 	and.w	r3, r3, #4
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d017      	beq.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80063a4:	4b58      	ldr	r3, [pc, #352]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80063a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80063aa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063b2:	4955      	ldr	r1, [pc, #340]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80063b4:	4313      	orrs	r3, r2
 80063b6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063c2:	d101      	bne.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80063c4:	2301      	movs	r3, #1
 80063c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d101      	bne.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80063d0:	2301      	movs	r3, #1
 80063d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 0308 	and.w	r3, r3, #8
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d017      	beq.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80063e0:	4b49      	ldr	r3, [pc, #292]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80063e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80063e6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063ee:	4946      	ldr	r1, [pc, #280]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80063f0:	4313      	orrs	r3, r2
 80063f2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80063fe:	d101      	bne.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8006400:	2301      	movs	r3, #1
 8006402:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006408:	2b00      	cmp	r3, #0
 800640a:	d101      	bne.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800640c:	2301      	movs	r3, #1
 800640e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 0320 	and.w	r3, r3, #32
 8006418:	2b00      	cmp	r3, #0
 800641a:	f000 808a 	beq.w	8006532 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800641e:	2300      	movs	r3, #0
 8006420:	60bb      	str	r3, [r7, #8]
 8006422:	4b39      	ldr	r3, [pc, #228]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006426:	4a38      	ldr	r2, [pc, #224]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006428:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800642c:	6413      	str	r3, [r2, #64]	@ 0x40
 800642e:	4b36      	ldr	r3, [pc, #216]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006432:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006436:	60bb      	str	r3, [r7, #8]
 8006438:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800643a:	4b34      	ldr	r3, [pc, #208]	@ (800650c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a33      	ldr	r2, [pc, #204]	@ (800650c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006440:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006444:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006446:	f7fd fcab 	bl	8003da0 <HAL_GetTick>
 800644a:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800644c:	e008      	b.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800644e:	f7fd fca7 	bl	8003da0 <HAL_GetTick>
 8006452:	4602      	mov	r2, r0
 8006454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006456:	1ad3      	subs	r3, r2, r3
 8006458:	2b02      	cmp	r3, #2
 800645a:	d901      	bls.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800645c:	2303      	movs	r3, #3
 800645e:	e278      	b.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006460:	4b2a      	ldr	r3, [pc, #168]	@ (800650c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006468:	2b00      	cmp	r3, #0
 800646a:	d0f0      	beq.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800646c:	4b26      	ldr	r3, [pc, #152]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800646e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006470:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006474:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006476:	6a3b      	ldr	r3, [r7, #32]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d02f      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006480:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006484:	6a3a      	ldr	r2, [r7, #32]
 8006486:	429a      	cmp	r2, r3
 8006488:	d028      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800648a:	4b1f      	ldr	r3, [pc, #124]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800648c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800648e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006492:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006494:	4b1e      	ldr	r3, [pc, #120]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8006496:	2201      	movs	r2, #1
 8006498:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800649a:	4b1d      	ldr	r3, [pc, #116]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800649c:	2200      	movs	r2, #0
 800649e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80064a0:	4a19      	ldr	r2, [pc, #100]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80064a2:	6a3b      	ldr	r3, [r7, #32]
 80064a4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80064a6:	4b18      	ldr	r3, [pc, #96]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80064a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064aa:	f003 0301 	and.w	r3, r3, #1
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d114      	bne.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80064b2:	f7fd fc75 	bl	8003da0 <HAL_GetTick>
 80064b6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064b8:	e00a      	b.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064ba:	f7fd fc71 	bl	8003da0 <HAL_GetTick>
 80064be:	4602      	mov	r2, r0
 80064c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d901      	bls.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80064cc:	2303      	movs	r3, #3
 80064ce:	e240      	b.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064d0:	4b0d      	ldr	r3, [pc, #52]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80064d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064d4:	f003 0302 	and.w	r3, r3, #2
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d0ee      	beq.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064e8:	d114      	bne.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80064ea:	4b07      	ldr	r3, [pc, #28]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064f6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80064fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064fe:	4902      	ldr	r1, [pc, #8]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006500:	4313      	orrs	r3, r2
 8006502:	608b      	str	r3, [r1, #8]
 8006504:	e00c      	b.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8006506:	bf00      	nop
 8006508:	40023800 	.word	0x40023800
 800650c:	40007000 	.word	0x40007000
 8006510:	42470e40 	.word	0x42470e40
 8006514:	4b4a      	ldr	r3, [pc, #296]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	4a49      	ldr	r2, [pc, #292]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800651a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800651e:	6093      	str	r3, [r2, #8]
 8006520:	4b47      	ldr	r3, [pc, #284]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006522:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006528:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800652c:	4944      	ldr	r1, [pc, #272]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800652e:	4313      	orrs	r3, r2
 8006530:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f003 0310 	and.w	r3, r3, #16
 800653a:	2b00      	cmp	r3, #0
 800653c:	d004      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8006544:	4b3f      	ldr	r3, [pc, #252]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8006546:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006550:	2b00      	cmp	r3, #0
 8006552:	d00a      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8006554:	4b3a      	ldr	r3, [pc, #232]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006556:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800655a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006562:	4937      	ldr	r1, [pc, #220]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006564:	4313      	orrs	r3, r2
 8006566:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006572:	2b00      	cmp	r3, #0
 8006574:	d00a      	beq.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006576:	4b32      	ldr	r3, [pc, #200]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006578:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800657c:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006584:	492e      	ldr	r1, [pc, #184]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006586:	4313      	orrs	r3, r2
 8006588:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006594:	2b00      	cmp	r3, #0
 8006596:	d011      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006598:	4b29      	ldr	r3, [pc, #164]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800659a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800659e:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065a6:	4926      	ldr	r1, [pc, #152]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80065a8:	4313      	orrs	r3, r2
 80065aa:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065b6:	d101      	bne.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80065b8:	2301      	movs	r3, #1
 80065ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d00a      	beq.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80065c8:	4b1d      	ldr	r3, [pc, #116]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80065ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065ce:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065d6:	491a      	ldr	r1, [pc, #104]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80065d8:	4313      	orrs	r3, r2
 80065da:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d011      	beq.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80065ea:	4b15      	ldr	r3, [pc, #84]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80065ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065f0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065f8:	4911      	ldr	r1, [pc, #68]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80065fa:	4313      	orrs	r3, r2
 80065fc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006604:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006608:	d101      	bne.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800660a:	2301      	movs	r3, #1
 800660c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800660e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006610:	2b01      	cmp	r3, #1
 8006612:	d005      	beq.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800661c:	f040 80ff 	bne.w	800681e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006620:	4b09      	ldr	r3, [pc, #36]	@ (8006648 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006622:	2200      	movs	r2, #0
 8006624:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006626:	f7fd fbbb 	bl	8003da0 <HAL_GetTick>
 800662a:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800662c:	e00e      	b.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800662e:	f7fd fbb7 	bl	8003da0 <HAL_GetTick>
 8006632:	4602      	mov	r2, r0
 8006634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006636:	1ad3      	subs	r3, r2, r3
 8006638:	2b02      	cmp	r3, #2
 800663a:	d907      	bls.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800663c:	2303      	movs	r3, #3
 800663e:	e188      	b.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8006640:	40023800 	.word	0x40023800
 8006644:	424711e0 	.word	0x424711e0
 8006648:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800664c:	4b7e      	ldr	r3, [pc, #504]	@ (8006848 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006654:	2b00      	cmp	r3, #0
 8006656:	d1ea      	bne.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 0301 	and.w	r3, r3, #1
 8006660:	2b00      	cmp	r3, #0
 8006662:	d003      	beq.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006668:	2b00      	cmp	r3, #0
 800666a:	d009      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006674:	2b00      	cmp	r3, #0
 8006676:	d028      	beq.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800667c:	2b00      	cmp	r3, #0
 800667e:	d124      	bne.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006680:	4b71      	ldr	r3, [pc, #452]	@ (8006848 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006682:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006686:	0c1b      	lsrs	r3, r3, #16
 8006688:	f003 0303 	and.w	r3, r3, #3
 800668c:	3301      	adds	r3, #1
 800668e:	005b      	lsls	r3, r3, #1
 8006690:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006692:	4b6d      	ldr	r3, [pc, #436]	@ (8006848 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006694:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006698:	0e1b      	lsrs	r3, r3, #24
 800669a:	f003 030f 	and.w	r3, r3, #15
 800669e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685a      	ldr	r2, [r3, #4]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	019b      	lsls	r3, r3, #6
 80066aa:	431a      	orrs	r2, r3
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	085b      	lsrs	r3, r3, #1
 80066b0:	3b01      	subs	r3, #1
 80066b2:	041b      	lsls	r3, r3, #16
 80066b4:	431a      	orrs	r2, r3
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	061b      	lsls	r3, r3, #24
 80066ba:	431a      	orrs	r2, r3
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	695b      	ldr	r3, [r3, #20]
 80066c0:	071b      	lsls	r3, r3, #28
 80066c2:	4961      	ldr	r1, [pc, #388]	@ (8006848 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80066c4:	4313      	orrs	r3, r2
 80066c6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f003 0304 	and.w	r3, r3, #4
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d004      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80066de:	d00a      	beq.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d035      	beq.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80066f4:	d130      	bne.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80066f6:	4b54      	ldr	r3, [pc, #336]	@ (8006848 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80066f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066fc:	0c1b      	lsrs	r3, r3, #16
 80066fe:	f003 0303 	and.w	r3, r3, #3
 8006702:	3301      	adds	r3, #1
 8006704:	005b      	lsls	r3, r3, #1
 8006706:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006708:	4b4f      	ldr	r3, [pc, #316]	@ (8006848 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800670a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800670e:	0f1b      	lsrs	r3, r3, #28
 8006710:	f003 0307 	and.w	r3, r3, #7
 8006714:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	685a      	ldr	r2, [r3, #4]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	019b      	lsls	r3, r3, #6
 8006720:	431a      	orrs	r2, r3
 8006722:	69fb      	ldr	r3, [r7, #28]
 8006724:	085b      	lsrs	r3, r3, #1
 8006726:	3b01      	subs	r3, #1
 8006728:	041b      	lsls	r3, r3, #16
 800672a:	431a      	orrs	r2, r3
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	061b      	lsls	r3, r3, #24
 8006732:	431a      	orrs	r2, r3
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	071b      	lsls	r3, r3, #28
 8006738:	4943      	ldr	r1, [pc, #268]	@ (8006848 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800673a:	4313      	orrs	r3, r2
 800673c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006740:	4b41      	ldr	r3, [pc, #260]	@ (8006848 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006742:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006746:	f023 021f 	bic.w	r2, r3, #31
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800674e:	3b01      	subs	r3, #1
 8006750:	493d      	ldr	r1, [pc, #244]	@ (8006848 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006752:	4313      	orrs	r3, r2
 8006754:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006760:	2b00      	cmp	r3, #0
 8006762:	d029      	beq.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006768:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800676c:	d124      	bne.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800676e:	4b36      	ldr	r3, [pc, #216]	@ (8006848 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006770:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006774:	0c1b      	lsrs	r3, r3, #16
 8006776:	f003 0303 	and.w	r3, r3, #3
 800677a:	3301      	adds	r3, #1
 800677c:	005b      	lsls	r3, r3, #1
 800677e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006780:	4b31      	ldr	r3, [pc, #196]	@ (8006848 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006782:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006786:	0f1b      	lsrs	r3, r3, #28
 8006788:	f003 0307 	and.w	r3, r3, #7
 800678c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	685a      	ldr	r2, [r3, #4]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	019b      	lsls	r3, r3, #6
 8006798:	431a      	orrs	r2, r3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	085b      	lsrs	r3, r3, #1
 80067a0:	3b01      	subs	r3, #1
 80067a2:	041b      	lsls	r3, r3, #16
 80067a4:	431a      	orrs	r2, r3
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	061b      	lsls	r3, r3, #24
 80067aa:	431a      	orrs	r2, r3
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	071b      	lsls	r3, r3, #28
 80067b0:	4925      	ldr	r1, [pc, #148]	@ (8006848 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80067b2:	4313      	orrs	r3, r2
 80067b4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d016      	beq.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	685a      	ldr	r2, [r3, #4]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	019b      	lsls	r3, r3, #6
 80067ce:	431a      	orrs	r2, r3
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	085b      	lsrs	r3, r3, #1
 80067d6:	3b01      	subs	r3, #1
 80067d8:	041b      	lsls	r3, r3, #16
 80067da:	431a      	orrs	r2, r3
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	691b      	ldr	r3, [r3, #16]
 80067e0:	061b      	lsls	r3, r3, #24
 80067e2:	431a      	orrs	r2, r3
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	695b      	ldr	r3, [r3, #20]
 80067e8:	071b      	lsls	r3, r3, #28
 80067ea:	4917      	ldr	r1, [pc, #92]	@ (8006848 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80067ec:	4313      	orrs	r3, r2
 80067ee:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80067f2:	4b16      	ldr	r3, [pc, #88]	@ (800684c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80067f4:	2201      	movs	r2, #1
 80067f6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80067f8:	f7fd fad2 	bl	8003da0 <HAL_GetTick>
 80067fc:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80067fe:	e008      	b.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006800:	f7fd face 	bl	8003da0 <HAL_GetTick>
 8006804:	4602      	mov	r2, r0
 8006806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006808:	1ad3      	subs	r3, r2, r3
 800680a:	2b02      	cmp	r3, #2
 800680c:	d901      	bls.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800680e:	2303      	movs	r3, #3
 8006810:	e09f      	b.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006812:	4b0d      	ldr	r3, [pc, #52]	@ (8006848 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800681a:	2b00      	cmp	r3, #0
 800681c:	d0f0      	beq.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 800681e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006820:	2b01      	cmp	r3, #1
 8006822:	f040 8095 	bne.w	8006950 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006826:	4b0a      	ldr	r3, [pc, #40]	@ (8006850 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8006828:	2200      	movs	r2, #0
 800682a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800682c:	f7fd fab8 	bl	8003da0 <HAL_GetTick>
 8006830:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006832:	e00f      	b.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006834:	f7fd fab4 	bl	8003da0 <HAL_GetTick>
 8006838:	4602      	mov	r2, r0
 800683a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800683c:	1ad3      	subs	r3, r2, r3
 800683e:	2b02      	cmp	r3, #2
 8006840:	d908      	bls.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006842:	2303      	movs	r3, #3
 8006844:	e085      	b.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8006846:	bf00      	nop
 8006848:	40023800 	.word	0x40023800
 800684c:	42470068 	.word	0x42470068
 8006850:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006854:	4b41      	ldr	r3, [pc, #260]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800685c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006860:	d0e8      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 0304 	and.w	r3, r3, #4
 800686a:	2b00      	cmp	r3, #0
 800686c:	d003      	beq.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006872:	2b00      	cmp	r3, #0
 8006874:	d009      	beq.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800687e:	2b00      	cmp	r3, #0
 8006880:	d02b      	beq.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006886:	2b00      	cmp	r3, #0
 8006888:	d127      	bne.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800688a:	4b34      	ldr	r3, [pc, #208]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800688c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006890:	0c1b      	lsrs	r3, r3, #16
 8006892:	f003 0303 	and.w	r3, r3, #3
 8006896:	3301      	adds	r3, #1
 8006898:	005b      	lsls	r3, r3, #1
 800689a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	699a      	ldr	r2, [r3, #24]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	69db      	ldr	r3, [r3, #28]
 80068a4:	019b      	lsls	r3, r3, #6
 80068a6:	431a      	orrs	r2, r3
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	085b      	lsrs	r3, r3, #1
 80068ac:	3b01      	subs	r3, #1
 80068ae:	041b      	lsls	r3, r3, #16
 80068b0:	431a      	orrs	r2, r3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068b6:	061b      	lsls	r3, r3, #24
 80068b8:	4928      	ldr	r1, [pc, #160]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80068ba:	4313      	orrs	r3, r2
 80068bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80068c0:	4b26      	ldr	r3, [pc, #152]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80068c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80068c6:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ce:	3b01      	subs	r3, #1
 80068d0:	021b      	lsls	r3, r3, #8
 80068d2:	4922      	ldr	r1, [pc, #136]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80068d4:	4313      	orrs	r3, r2
 80068d6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d01d      	beq.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80068ee:	d118      	bne.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80068f0:	4b1a      	ldr	r3, [pc, #104]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80068f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068f6:	0e1b      	lsrs	r3, r3, #24
 80068f8:	f003 030f 	and.w	r3, r3, #15
 80068fc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	699a      	ldr	r2, [r3, #24]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	69db      	ldr	r3, [r3, #28]
 8006906:	019b      	lsls	r3, r3, #6
 8006908:	431a      	orrs	r2, r3
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6a1b      	ldr	r3, [r3, #32]
 800690e:	085b      	lsrs	r3, r3, #1
 8006910:	3b01      	subs	r3, #1
 8006912:	041b      	lsls	r3, r3, #16
 8006914:	431a      	orrs	r2, r3
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	061b      	lsls	r3, r3, #24
 800691a:	4910      	ldr	r1, [pc, #64]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800691c:	4313      	orrs	r3, r2
 800691e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006922:	4b0f      	ldr	r3, [pc, #60]	@ (8006960 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8006924:	2201      	movs	r2, #1
 8006926:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006928:	f7fd fa3a 	bl	8003da0 <HAL_GetTick>
 800692c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800692e:	e008      	b.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006930:	f7fd fa36 	bl	8003da0 <HAL_GetTick>
 8006934:	4602      	mov	r2, r0
 8006936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006938:	1ad3      	subs	r3, r2, r3
 800693a:	2b02      	cmp	r3, #2
 800693c:	d901      	bls.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800693e:	2303      	movs	r3, #3
 8006940:	e007      	b.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006942:	4b06      	ldr	r3, [pc, #24]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800694a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800694e:	d1ef      	bne.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8006950:	2300      	movs	r3, #0
}
 8006952:	4618      	mov	r0, r3
 8006954:	3730      	adds	r7, #48	@ 0x30
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	40023800 	.word	0x40023800
 8006960:	42470070 	.word	0x42470070

08006964 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006964:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006968:	b0ae      	sub	sp, #184	@ 0xb8
 800696a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800696c:	2300      	movs	r3, #0
 800696e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8006972:	2300      	movs	r3, #0
 8006974:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8006978:	2300      	movs	r3, #0
 800697a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800697e:	2300      	movs	r3, #0
 8006980:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8006984:	2300      	movs	r3, #0
 8006986:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800698a:	4bcb      	ldr	r3, [pc, #812]	@ (8006cb8 <HAL_RCC_GetSysClockFreq+0x354>)
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	f003 030c 	and.w	r3, r3, #12
 8006992:	2b0c      	cmp	r3, #12
 8006994:	f200 8206 	bhi.w	8006da4 <HAL_RCC_GetSysClockFreq+0x440>
 8006998:	a201      	add	r2, pc, #4	@ (adr r2, 80069a0 <HAL_RCC_GetSysClockFreq+0x3c>)
 800699a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800699e:	bf00      	nop
 80069a0:	080069d5 	.word	0x080069d5
 80069a4:	08006da5 	.word	0x08006da5
 80069a8:	08006da5 	.word	0x08006da5
 80069ac:	08006da5 	.word	0x08006da5
 80069b0:	080069dd 	.word	0x080069dd
 80069b4:	08006da5 	.word	0x08006da5
 80069b8:	08006da5 	.word	0x08006da5
 80069bc:	08006da5 	.word	0x08006da5
 80069c0:	080069e5 	.word	0x080069e5
 80069c4:	08006da5 	.word	0x08006da5
 80069c8:	08006da5 	.word	0x08006da5
 80069cc:	08006da5 	.word	0x08006da5
 80069d0:	08006bd5 	.word	0x08006bd5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80069d4:	4bb9      	ldr	r3, [pc, #740]	@ (8006cbc <HAL_RCC_GetSysClockFreq+0x358>)
 80069d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80069da:	e1e7      	b.n	8006dac <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80069dc:	4bb8      	ldr	r3, [pc, #736]	@ (8006cc0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80069de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80069e2:	e1e3      	b.n	8006dac <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80069e4:	4bb4      	ldr	r3, [pc, #720]	@ (8006cb8 <HAL_RCC_GetSysClockFreq+0x354>)
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80069ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80069f0:	4bb1      	ldr	r3, [pc, #708]	@ (8006cb8 <HAL_RCC_GetSysClockFreq+0x354>)
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d071      	beq.n	8006ae0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069fc:	4bae      	ldr	r3, [pc, #696]	@ (8006cb8 <HAL_RCC_GetSysClockFreq+0x354>)
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	099b      	lsrs	r3, r3, #6
 8006a02:	2200      	movs	r2, #0
 8006a04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006a08:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8006a0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006a10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a14:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006a18:	2300      	movs	r3, #0
 8006a1a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006a1e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006a22:	4622      	mov	r2, r4
 8006a24:	462b      	mov	r3, r5
 8006a26:	f04f 0000 	mov.w	r0, #0
 8006a2a:	f04f 0100 	mov.w	r1, #0
 8006a2e:	0159      	lsls	r1, r3, #5
 8006a30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a34:	0150      	lsls	r0, r2, #5
 8006a36:	4602      	mov	r2, r0
 8006a38:	460b      	mov	r3, r1
 8006a3a:	4621      	mov	r1, r4
 8006a3c:	1a51      	subs	r1, r2, r1
 8006a3e:	6439      	str	r1, [r7, #64]	@ 0x40
 8006a40:	4629      	mov	r1, r5
 8006a42:	eb63 0301 	sbc.w	r3, r3, r1
 8006a46:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a48:	f04f 0200 	mov.w	r2, #0
 8006a4c:	f04f 0300 	mov.w	r3, #0
 8006a50:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8006a54:	4649      	mov	r1, r9
 8006a56:	018b      	lsls	r3, r1, #6
 8006a58:	4641      	mov	r1, r8
 8006a5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006a5e:	4641      	mov	r1, r8
 8006a60:	018a      	lsls	r2, r1, #6
 8006a62:	4641      	mov	r1, r8
 8006a64:	1a51      	subs	r1, r2, r1
 8006a66:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006a68:	4649      	mov	r1, r9
 8006a6a:	eb63 0301 	sbc.w	r3, r3, r1
 8006a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a70:	f04f 0200 	mov.w	r2, #0
 8006a74:	f04f 0300 	mov.w	r3, #0
 8006a78:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8006a7c:	4649      	mov	r1, r9
 8006a7e:	00cb      	lsls	r3, r1, #3
 8006a80:	4641      	mov	r1, r8
 8006a82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a86:	4641      	mov	r1, r8
 8006a88:	00ca      	lsls	r2, r1, #3
 8006a8a:	4610      	mov	r0, r2
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	4603      	mov	r3, r0
 8006a90:	4622      	mov	r2, r4
 8006a92:	189b      	adds	r3, r3, r2
 8006a94:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a96:	462b      	mov	r3, r5
 8006a98:	460a      	mov	r2, r1
 8006a9a:	eb42 0303 	adc.w	r3, r2, r3
 8006a9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006aa0:	f04f 0200 	mov.w	r2, #0
 8006aa4:	f04f 0300 	mov.w	r3, #0
 8006aa8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006aac:	4629      	mov	r1, r5
 8006aae:	024b      	lsls	r3, r1, #9
 8006ab0:	4621      	mov	r1, r4
 8006ab2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006ab6:	4621      	mov	r1, r4
 8006ab8:	024a      	lsls	r2, r1, #9
 8006aba:	4610      	mov	r0, r2
 8006abc:	4619      	mov	r1, r3
 8006abe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006ac8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006acc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006ad0:	f7fa f8f4 	bl	8000cbc <__aeabi_uldivmod>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	460b      	mov	r3, r1
 8006ad8:	4613      	mov	r3, r2
 8006ada:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006ade:	e067      	b.n	8006bb0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ae0:	4b75      	ldr	r3, [pc, #468]	@ (8006cb8 <HAL_RCC_GetSysClockFreq+0x354>)
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	099b      	lsrs	r3, r3, #6
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006aec:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8006af0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006af4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006af8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006afa:	2300      	movs	r3, #0
 8006afc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006afe:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8006b02:	4622      	mov	r2, r4
 8006b04:	462b      	mov	r3, r5
 8006b06:	f04f 0000 	mov.w	r0, #0
 8006b0a:	f04f 0100 	mov.w	r1, #0
 8006b0e:	0159      	lsls	r1, r3, #5
 8006b10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b14:	0150      	lsls	r0, r2, #5
 8006b16:	4602      	mov	r2, r0
 8006b18:	460b      	mov	r3, r1
 8006b1a:	4621      	mov	r1, r4
 8006b1c:	1a51      	subs	r1, r2, r1
 8006b1e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006b20:	4629      	mov	r1, r5
 8006b22:	eb63 0301 	sbc.w	r3, r3, r1
 8006b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b28:	f04f 0200 	mov.w	r2, #0
 8006b2c:	f04f 0300 	mov.w	r3, #0
 8006b30:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8006b34:	4649      	mov	r1, r9
 8006b36:	018b      	lsls	r3, r1, #6
 8006b38:	4641      	mov	r1, r8
 8006b3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006b3e:	4641      	mov	r1, r8
 8006b40:	018a      	lsls	r2, r1, #6
 8006b42:	4641      	mov	r1, r8
 8006b44:	ebb2 0a01 	subs.w	sl, r2, r1
 8006b48:	4649      	mov	r1, r9
 8006b4a:	eb63 0b01 	sbc.w	fp, r3, r1
 8006b4e:	f04f 0200 	mov.w	r2, #0
 8006b52:	f04f 0300 	mov.w	r3, #0
 8006b56:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006b5a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006b5e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b62:	4692      	mov	sl, r2
 8006b64:	469b      	mov	fp, r3
 8006b66:	4623      	mov	r3, r4
 8006b68:	eb1a 0303 	adds.w	r3, sl, r3
 8006b6c:	623b      	str	r3, [r7, #32]
 8006b6e:	462b      	mov	r3, r5
 8006b70:	eb4b 0303 	adc.w	r3, fp, r3
 8006b74:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b76:	f04f 0200 	mov.w	r2, #0
 8006b7a:	f04f 0300 	mov.w	r3, #0
 8006b7e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006b82:	4629      	mov	r1, r5
 8006b84:	028b      	lsls	r3, r1, #10
 8006b86:	4621      	mov	r1, r4
 8006b88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006b8c:	4621      	mov	r1, r4
 8006b8e:	028a      	lsls	r2, r1, #10
 8006b90:	4610      	mov	r0, r2
 8006b92:	4619      	mov	r1, r3
 8006b94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006b98:	2200      	movs	r2, #0
 8006b9a:	673b      	str	r3, [r7, #112]	@ 0x70
 8006b9c:	677a      	str	r2, [r7, #116]	@ 0x74
 8006b9e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8006ba2:	f7fa f88b 	bl	8000cbc <__aeabi_uldivmod>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	460b      	mov	r3, r1
 8006baa:	4613      	mov	r3, r2
 8006bac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006bb0:	4b41      	ldr	r3, [pc, #260]	@ (8006cb8 <HAL_RCC_GetSysClockFreq+0x354>)
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	0c1b      	lsrs	r3, r3, #16
 8006bb6:	f003 0303 	and.w	r3, r3, #3
 8006bba:	3301      	adds	r3, #1
 8006bbc:	005b      	lsls	r3, r3, #1
 8006bbe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8006bc2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006bc6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006bd2:	e0eb      	b.n	8006dac <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006bd4:	4b38      	ldr	r3, [pc, #224]	@ (8006cb8 <HAL_RCC_GetSysClockFreq+0x354>)
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006bdc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006be0:	4b35      	ldr	r3, [pc, #212]	@ (8006cb8 <HAL_RCC_GetSysClockFreq+0x354>)
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d06b      	beq.n	8006cc4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006bec:	4b32      	ldr	r3, [pc, #200]	@ (8006cb8 <HAL_RCC_GetSysClockFreq+0x354>)
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	099b      	lsrs	r3, r3, #6
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006bf6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006bf8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bfe:	663b      	str	r3, [r7, #96]	@ 0x60
 8006c00:	2300      	movs	r3, #0
 8006c02:	667b      	str	r3, [r7, #100]	@ 0x64
 8006c04:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8006c08:	4622      	mov	r2, r4
 8006c0a:	462b      	mov	r3, r5
 8006c0c:	f04f 0000 	mov.w	r0, #0
 8006c10:	f04f 0100 	mov.w	r1, #0
 8006c14:	0159      	lsls	r1, r3, #5
 8006c16:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c1a:	0150      	lsls	r0, r2, #5
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	460b      	mov	r3, r1
 8006c20:	4621      	mov	r1, r4
 8006c22:	1a51      	subs	r1, r2, r1
 8006c24:	61b9      	str	r1, [r7, #24]
 8006c26:	4629      	mov	r1, r5
 8006c28:	eb63 0301 	sbc.w	r3, r3, r1
 8006c2c:	61fb      	str	r3, [r7, #28]
 8006c2e:	f04f 0200 	mov.w	r2, #0
 8006c32:	f04f 0300 	mov.w	r3, #0
 8006c36:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8006c3a:	4659      	mov	r1, fp
 8006c3c:	018b      	lsls	r3, r1, #6
 8006c3e:	4651      	mov	r1, sl
 8006c40:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006c44:	4651      	mov	r1, sl
 8006c46:	018a      	lsls	r2, r1, #6
 8006c48:	4651      	mov	r1, sl
 8006c4a:	ebb2 0801 	subs.w	r8, r2, r1
 8006c4e:	4659      	mov	r1, fp
 8006c50:	eb63 0901 	sbc.w	r9, r3, r1
 8006c54:	f04f 0200 	mov.w	r2, #0
 8006c58:	f04f 0300 	mov.w	r3, #0
 8006c5c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c60:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c64:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c68:	4690      	mov	r8, r2
 8006c6a:	4699      	mov	r9, r3
 8006c6c:	4623      	mov	r3, r4
 8006c6e:	eb18 0303 	adds.w	r3, r8, r3
 8006c72:	613b      	str	r3, [r7, #16]
 8006c74:	462b      	mov	r3, r5
 8006c76:	eb49 0303 	adc.w	r3, r9, r3
 8006c7a:	617b      	str	r3, [r7, #20]
 8006c7c:	f04f 0200 	mov.w	r2, #0
 8006c80:	f04f 0300 	mov.w	r3, #0
 8006c84:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006c88:	4629      	mov	r1, r5
 8006c8a:	024b      	lsls	r3, r1, #9
 8006c8c:	4621      	mov	r1, r4
 8006c8e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006c92:	4621      	mov	r1, r4
 8006c94:	024a      	lsls	r2, r1, #9
 8006c96:	4610      	mov	r0, r2
 8006c98:	4619      	mov	r1, r3
 8006c9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ca2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8006ca4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006ca8:	f7fa f808 	bl	8000cbc <__aeabi_uldivmod>
 8006cac:	4602      	mov	r2, r0
 8006cae:	460b      	mov	r3, r1
 8006cb0:	4613      	mov	r3, r2
 8006cb2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006cb6:	e065      	b.n	8006d84 <HAL_RCC_GetSysClockFreq+0x420>
 8006cb8:	40023800 	.word	0x40023800
 8006cbc:	00f42400 	.word	0x00f42400
 8006cc0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006cc4:	4b3d      	ldr	r3, [pc, #244]	@ (8006dbc <HAL_RCC_GetSysClockFreq+0x458>)
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	099b      	lsrs	r3, r3, #6
 8006cca:	2200      	movs	r2, #0
 8006ccc:	4618      	mov	r0, r3
 8006cce:	4611      	mov	r1, r2
 8006cd0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006cd4:	653b      	str	r3, [r7, #80]	@ 0x50
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	657b      	str	r3, [r7, #84]	@ 0x54
 8006cda:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8006cde:	4642      	mov	r2, r8
 8006ce0:	464b      	mov	r3, r9
 8006ce2:	f04f 0000 	mov.w	r0, #0
 8006ce6:	f04f 0100 	mov.w	r1, #0
 8006cea:	0159      	lsls	r1, r3, #5
 8006cec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006cf0:	0150      	lsls	r0, r2, #5
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	4641      	mov	r1, r8
 8006cf8:	1a51      	subs	r1, r2, r1
 8006cfa:	60b9      	str	r1, [r7, #8]
 8006cfc:	4649      	mov	r1, r9
 8006cfe:	eb63 0301 	sbc.w	r3, r3, r1
 8006d02:	60fb      	str	r3, [r7, #12]
 8006d04:	f04f 0200 	mov.w	r2, #0
 8006d08:	f04f 0300 	mov.w	r3, #0
 8006d0c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006d10:	4659      	mov	r1, fp
 8006d12:	018b      	lsls	r3, r1, #6
 8006d14:	4651      	mov	r1, sl
 8006d16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006d1a:	4651      	mov	r1, sl
 8006d1c:	018a      	lsls	r2, r1, #6
 8006d1e:	4651      	mov	r1, sl
 8006d20:	1a54      	subs	r4, r2, r1
 8006d22:	4659      	mov	r1, fp
 8006d24:	eb63 0501 	sbc.w	r5, r3, r1
 8006d28:	f04f 0200 	mov.w	r2, #0
 8006d2c:	f04f 0300 	mov.w	r3, #0
 8006d30:	00eb      	lsls	r3, r5, #3
 8006d32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d36:	00e2      	lsls	r2, r4, #3
 8006d38:	4614      	mov	r4, r2
 8006d3a:	461d      	mov	r5, r3
 8006d3c:	4643      	mov	r3, r8
 8006d3e:	18e3      	adds	r3, r4, r3
 8006d40:	603b      	str	r3, [r7, #0]
 8006d42:	464b      	mov	r3, r9
 8006d44:	eb45 0303 	adc.w	r3, r5, r3
 8006d48:	607b      	str	r3, [r7, #4]
 8006d4a:	f04f 0200 	mov.w	r2, #0
 8006d4e:	f04f 0300 	mov.w	r3, #0
 8006d52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006d56:	4629      	mov	r1, r5
 8006d58:	028b      	lsls	r3, r1, #10
 8006d5a:	4621      	mov	r1, r4
 8006d5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006d60:	4621      	mov	r1, r4
 8006d62:	028a      	lsls	r2, r1, #10
 8006d64:	4610      	mov	r0, r2
 8006d66:	4619      	mov	r1, r3
 8006d68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d70:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006d72:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006d76:	f7f9 ffa1 	bl	8000cbc <__aeabi_uldivmod>
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	4613      	mov	r3, r2
 8006d80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006d84:	4b0d      	ldr	r3, [pc, #52]	@ (8006dbc <HAL_RCC_GetSysClockFreq+0x458>)
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	0f1b      	lsrs	r3, r3, #28
 8006d8a:	f003 0307 	and.w	r3, r3, #7
 8006d8e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8006d92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006d96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d9e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006da2:	e003      	b.n	8006dac <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006da4:	4b06      	ldr	r3, [pc, #24]	@ (8006dc0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8006da6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006daa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006dac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	37b8      	adds	r7, #184	@ 0xb8
 8006db4:	46bd      	mov	sp, r7
 8006db6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006dba:	bf00      	nop
 8006dbc:	40023800 	.word	0x40023800
 8006dc0:	00f42400 	.word	0x00f42400

08006dc4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b086      	sub	sp, #24
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d101      	bne.n	8006dd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e28d      	b.n	80072f2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f003 0301 	and.w	r3, r3, #1
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	f000 8083 	beq.w	8006eea <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006de4:	4b94      	ldr	r3, [pc, #592]	@ (8007038 <HAL_RCC_OscConfig+0x274>)
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	f003 030c 	and.w	r3, r3, #12
 8006dec:	2b04      	cmp	r3, #4
 8006dee:	d019      	beq.n	8006e24 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006df0:	4b91      	ldr	r3, [pc, #580]	@ (8007038 <HAL_RCC_OscConfig+0x274>)
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	f003 030c 	and.w	r3, r3, #12
        || \
 8006df8:	2b08      	cmp	r3, #8
 8006dfa:	d106      	bne.n	8006e0a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006dfc:	4b8e      	ldr	r3, [pc, #568]	@ (8007038 <HAL_RCC_OscConfig+0x274>)
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e04:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006e08:	d00c      	beq.n	8006e24 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e0a:	4b8b      	ldr	r3, [pc, #556]	@ (8007038 <HAL_RCC_OscConfig+0x274>)
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006e12:	2b0c      	cmp	r3, #12
 8006e14:	d112      	bne.n	8006e3c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e16:	4b88      	ldr	r3, [pc, #544]	@ (8007038 <HAL_RCC_OscConfig+0x274>)
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006e22:	d10b      	bne.n	8006e3c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e24:	4b84      	ldr	r3, [pc, #528]	@ (8007038 <HAL_RCC_OscConfig+0x274>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d05b      	beq.n	8006ee8 <HAL_RCC_OscConfig+0x124>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d157      	bne.n	8006ee8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	e25a      	b.n	80072f2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e44:	d106      	bne.n	8006e54 <HAL_RCC_OscConfig+0x90>
 8006e46:	4b7c      	ldr	r3, [pc, #496]	@ (8007038 <HAL_RCC_OscConfig+0x274>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a7b      	ldr	r2, [pc, #492]	@ (8007038 <HAL_RCC_OscConfig+0x274>)
 8006e4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e50:	6013      	str	r3, [r2, #0]
 8006e52:	e01d      	b.n	8006e90 <HAL_RCC_OscConfig+0xcc>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006e5c:	d10c      	bne.n	8006e78 <HAL_RCC_OscConfig+0xb4>
 8006e5e:	4b76      	ldr	r3, [pc, #472]	@ (8007038 <HAL_RCC_OscConfig+0x274>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a75      	ldr	r2, [pc, #468]	@ (8007038 <HAL_RCC_OscConfig+0x274>)
 8006e64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006e68:	6013      	str	r3, [r2, #0]
 8006e6a:	4b73      	ldr	r3, [pc, #460]	@ (8007038 <HAL_RCC_OscConfig+0x274>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a72      	ldr	r2, [pc, #456]	@ (8007038 <HAL_RCC_OscConfig+0x274>)
 8006e70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e74:	6013      	str	r3, [r2, #0]
 8006e76:	e00b      	b.n	8006e90 <HAL_RCC_OscConfig+0xcc>
 8006e78:	4b6f      	ldr	r3, [pc, #444]	@ (8007038 <HAL_RCC_OscConfig+0x274>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a6e      	ldr	r2, [pc, #440]	@ (8007038 <HAL_RCC_OscConfig+0x274>)
 8006e7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e82:	6013      	str	r3, [r2, #0]
 8006e84:	4b6c      	ldr	r3, [pc, #432]	@ (8007038 <HAL_RCC_OscConfig+0x274>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a6b      	ldr	r2, [pc, #428]	@ (8007038 <HAL_RCC_OscConfig+0x274>)
 8006e8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006e8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d013      	beq.n	8006ec0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e98:	f7fc ff82 	bl	8003da0 <HAL_GetTick>
 8006e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e9e:	e008      	b.n	8006eb2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ea0:	f7fc ff7e 	bl	8003da0 <HAL_GetTick>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	1ad3      	subs	r3, r2, r3
 8006eaa:	2b64      	cmp	r3, #100	@ 0x64
 8006eac:	d901      	bls.n	8006eb2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e21f      	b.n	80072f2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006eb2:	4b61      	ldr	r3, [pc, #388]	@ (8007038 <HAL_RCC_OscConfig+0x274>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d0f0      	beq.n	8006ea0 <HAL_RCC_OscConfig+0xdc>
 8006ebe:	e014      	b.n	8006eea <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ec0:	f7fc ff6e 	bl	8003da0 <HAL_GetTick>
 8006ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ec6:	e008      	b.n	8006eda <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ec8:	f7fc ff6a 	bl	8003da0 <HAL_GetTick>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	1ad3      	subs	r3, r2, r3
 8006ed2:	2b64      	cmp	r3, #100	@ 0x64
 8006ed4:	d901      	bls.n	8006eda <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006ed6:	2303      	movs	r3, #3
 8006ed8:	e20b      	b.n	80072f2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006eda:	4b57      	ldr	r3, [pc, #348]	@ (8007038 <HAL_RCC_OscConfig+0x274>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d1f0      	bne.n	8006ec8 <HAL_RCC_OscConfig+0x104>
 8006ee6:	e000      	b.n	8006eea <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ee8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f003 0302 	and.w	r3, r3, #2
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d06f      	beq.n	8006fd6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006ef6:	4b50      	ldr	r3, [pc, #320]	@ (8007038 <HAL_RCC_OscConfig+0x274>)
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	f003 030c 	and.w	r3, r3, #12
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d017      	beq.n	8006f32 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006f02:	4b4d      	ldr	r3, [pc, #308]	@ (8007038 <HAL_RCC_OscConfig+0x274>)
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	f003 030c 	and.w	r3, r3, #12
        || \
 8006f0a:	2b08      	cmp	r3, #8
 8006f0c:	d105      	bne.n	8006f1a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006f0e:	4b4a      	ldr	r3, [pc, #296]	@ (8007038 <HAL_RCC_OscConfig+0x274>)
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d00b      	beq.n	8006f32 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f1a:	4b47      	ldr	r3, [pc, #284]	@ (8007038 <HAL_RCC_OscConfig+0x274>)
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006f22:	2b0c      	cmp	r3, #12
 8006f24:	d11c      	bne.n	8006f60 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f26:	4b44      	ldr	r3, [pc, #272]	@ (8007038 <HAL_RCC_OscConfig+0x274>)
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d116      	bne.n	8006f60 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f32:	4b41      	ldr	r3, [pc, #260]	@ (8007038 <HAL_RCC_OscConfig+0x274>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f003 0302 	and.w	r3, r3, #2
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d005      	beq.n	8006f4a <HAL_RCC_OscConfig+0x186>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d001      	beq.n	8006f4a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	e1d3      	b.n	80072f2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f4a:	4b3b      	ldr	r3, [pc, #236]	@ (8007038 <HAL_RCC_OscConfig+0x274>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	691b      	ldr	r3, [r3, #16]
 8006f56:	00db      	lsls	r3, r3, #3
 8006f58:	4937      	ldr	r1, [pc, #220]	@ (8007038 <HAL_RCC_OscConfig+0x274>)
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f5e:	e03a      	b.n	8006fd6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d020      	beq.n	8006faa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f68:	4b34      	ldr	r3, [pc, #208]	@ (800703c <HAL_RCC_OscConfig+0x278>)
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f6e:	f7fc ff17 	bl	8003da0 <HAL_GetTick>
 8006f72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f74:	e008      	b.n	8006f88 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f76:	f7fc ff13 	bl	8003da0 <HAL_GetTick>
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	1ad3      	subs	r3, r2, r3
 8006f80:	2b02      	cmp	r3, #2
 8006f82:	d901      	bls.n	8006f88 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006f84:	2303      	movs	r3, #3
 8006f86:	e1b4      	b.n	80072f2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f88:	4b2b      	ldr	r3, [pc, #172]	@ (8007038 <HAL_RCC_OscConfig+0x274>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 0302 	and.w	r3, r3, #2
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d0f0      	beq.n	8006f76 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f94:	4b28      	ldr	r3, [pc, #160]	@ (8007038 <HAL_RCC_OscConfig+0x274>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	691b      	ldr	r3, [r3, #16]
 8006fa0:	00db      	lsls	r3, r3, #3
 8006fa2:	4925      	ldr	r1, [pc, #148]	@ (8007038 <HAL_RCC_OscConfig+0x274>)
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	600b      	str	r3, [r1, #0]
 8006fa8:	e015      	b.n	8006fd6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006faa:	4b24      	ldr	r3, [pc, #144]	@ (800703c <HAL_RCC_OscConfig+0x278>)
 8006fac:	2200      	movs	r2, #0
 8006fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fb0:	f7fc fef6 	bl	8003da0 <HAL_GetTick>
 8006fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006fb6:	e008      	b.n	8006fca <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006fb8:	f7fc fef2 	bl	8003da0 <HAL_GetTick>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	1ad3      	subs	r3, r2, r3
 8006fc2:	2b02      	cmp	r3, #2
 8006fc4:	d901      	bls.n	8006fca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006fc6:	2303      	movs	r3, #3
 8006fc8:	e193      	b.n	80072f2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006fca:	4b1b      	ldr	r3, [pc, #108]	@ (8007038 <HAL_RCC_OscConfig+0x274>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f003 0302 	and.w	r3, r3, #2
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d1f0      	bne.n	8006fb8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 0308 	and.w	r3, r3, #8
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d036      	beq.n	8007050 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	695b      	ldr	r3, [r3, #20]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d016      	beq.n	8007018 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006fea:	4b15      	ldr	r3, [pc, #84]	@ (8007040 <HAL_RCC_OscConfig+0x27c>)
 8006fec:	2201      	movs	r2, #1
 8006fee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ff0:	f7fc fed6 	bl	8003da0 <HAL_GetTick>
 8006ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ff6:	e008      	b.n	800700a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ff8:	f7fc fed2 	bl	8003da0 <HAL_GetTick>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	1ad3      	subs	r3, r2, r3
 8007002:	2b02      	cmp	r3, #2
 8007004:	d901      	bls.n	800700a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8007006:	2303      	movs	r3, #3
 8007008:	e173      	b.n	80072f2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800700a:	4b0b      	ldr	r3, [pc, #44]	@ (8007038 <HAL_RCC_OscConfig+0x274>)
 800700c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800700e:	f003 0302 	and.w	r3, r3, #2
 8007012:	2b00      	cmp	r3, #0
 8007014:	d0f0      	beq.n	8006ff8 <HAL_RCC_OscConfig+0x234>
 8007016:	e01b      	b.n	8007050 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007018:	4b09      	ldr	r3, [pc, #36]	@ (8007040 <HAL_RCC_OscConfig+0x27c>)
 800701a:	2200      	movs	r2, #0
 800701c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800701e:	f7fc febf 	bl	8003da0 <HAL_GetTick>
 8007022:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007024:	e00e      	b.n	8007044 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007026:	f7fc febb 	bl	8003da0 <HAL_GetTick>
 800702a:	4602      	mov	r2, r0
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	1ad3      	subs	r3, r2, r3
 8007030:	2b02      	cmp	r3, #2
 8007032:	d907      	bls.n	8007044 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007034:	2303      	movs	r3, #3
 8007036:	e15c      	b.n	80072f2 <HAL_RCC_OscConfig+0x52e>
 8007038:	40023800 	.word	0x40023800
 800703c:	42470000 	.word	0x42470000
 8007040:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007044:	4b8a      	ldr	r3, [pc, #552]	@ (8007270 <HAL_RCC_OscConfig+0x4ac>)
 8007046:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007048:	f003 0302 	and.w	r3, r3, #2
 800704c:	2b00      	cmp	r3, #0
 800704e:	d1ea      	bne.n	8007026 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 0304 	and.w	r3, r3, #4
 8007058:	2b00      	cmp	r3, #0
 800705a:	f000 8097 	beq.w	800718c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800705e:	2300      	movs	r3, #0
 8007060:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007062:	4b83      	ldr	r3, [pc, #524]	@ (8007270 <HAL_RCC_OscConfig+0x4ac>)
 8007064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007066:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800706a:	2b00      	cmp	r3, #0
 800706c:	d10f      	bne.n	800708e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800706e:	2300      	movs	r3, #0
 8007070:	60bb      	str	r3, [r7, #8]
 8007072:	4b7f      	ldr	r3, [pc, #508]	@ (8007270 <HAL_RCC_OscConfig+0x4ac>)
 8007074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007076:	4a7e      	ldr	r2, [pc, #504]	@ (8007270 <HAL_RCC_OscConfig+0x4ac>)
 8007078:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800707c:	6413      	str	r3, [r2, #64]	@ 0x40
 800707e:	4b7c      	ldr	r3, [pc, #496]	@ (8007270 <HAL_RCC_OscConfig+0x4ac>)
 8007080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007082:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007086:	60bb      	str	r3, [r7, #8]
 8007088:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800708a:	2301      	movs	r3, #1
 800708c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800708e:	4b79      	ldr	r3, [pc, #484]	@ (8007274 <HAL_RCC_OscConfig+0x4b0>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007096:	2b00      	cmp	r3, #0
 8007098:	d118      	bne.n	80070cc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800709a:	4b76      	ldr	r3, [pc, #472]	@ (8007274 <HAL_RCC_OscConfig+0x4b0>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a75      	ldr	r2, [pc, #468]	@ (8007274 <HAL_RCC_OscConfig+0x4b0>)
 80070a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80070a6:	f7fc fe7b 	bl	8003da0 <HAL_GetTick>
 80070aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070ac:	e008      	b.n	80070c0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070ae:	f7fc fe77 	bl	8003da0 <HAL_GetTick>
 80070b2:	4602      	mov	r2, r0
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	1ad3      	subs	r3, r2, r3
 80070b8:	2b02      	cmp	r3, #2
 80070ba:	d901      	bls.n	80070c0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80070bc:	2303      	movs	r3, #3
 80070be:	e118      	b.n	80072f2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070c0:	4b6c      	ldr	r3, [pc, #432]	@ (8007274 <HAL_RCC_OscConfig+0x4b0>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d0f0      	beq.n	80070ae <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d106      	bne.n	80070e2 <HAL_RCC_OscConfig+0x31e>
 80070d4:	4b66      	ldr	r3, [pc, #408]	@ (8007270 <HAL_RCC_OscConfig+0x4ac>)
 80070d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070d8:	4a65      	ldr	r2, [pc, #404]	@ (8007270 <HAL_RCC_OscConfig+0x4ac>)
 80070da:	f043 0301 	orr.w	r3, r3, #1
 80070de:	6713      	str	r3, [r2, #112]	@ 0x70
 80070e0:	e01c      	b.n	800711c <HAL_RCC_OscConfig+0x358>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	2b05      	cmp	r3, #5
 80070e8:	d10c      	bne.n	8007104 <HAL_RCC_OscConfig+0x340>
 80070ea:	4b61      	ldr	r3, [pc, #388]	@ (8007270 <HAL_RCC_OscConfig+0x4ac>)
 80070ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070ee:	4a60      	ldr	r2, [pc, #384]	@ (8007270 <HAL_RCC_OscConfig+0x4ac>)
 80070f0:	f043 0304 	orr.w	r3, r3, #4
 80070f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80070f6:	4b5e      	ldr	r3, [pc, #376]	@ (8007270 <HAL_RCC_OscConfig+0x4ac>)
 80070f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070fa:	4a5d      	ldr	r2, [pc, #372]	@ (8007270 <HAL_RCC_OscConfig+0x4ac>)
 80070fc:	f043 0301 	orr.w	r3, r3, #1
 8007100:	6713      	str	r3, [r2, #112]	@ 0x70
 8007102:	e00b      	b.n	800711c <HAL_RCC_OscConfig+0x358>
 8007104:	4b5a      	ldr	r3, [pc, #360]	@ (8007270 <HAL_RCC_OscConfig+0x4ac>)
 8007106:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007108:	4a59      	ldr	r2, [pc, #356]	@ (8007270 <HAL_RCC_OscConfig+0x4ac>)
 800710a:	f023 0301 	bic.w	r3, r3, #1
 800710e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007110:	4b57      	ldr	r3, [pc, #348]	@ (8007270 <HAL_RCC_OscConfig+0x4ac>)
 8007112:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007114:	4a56      	ldr	r2, [pc, #344]	@ (8007270 <HAL_RCC_OscConfig+0x4ac>)
 8007116:	f023 0304 	bic.w	r3, r3, #4
 800711a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d015      	beq.n	8007150 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007124:	f7fc fe3c 	bl	8003da0 <HAL_GetTick>
 8007128:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800712a:	e00a      	b.n	8007142 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800712c:	f7fc fe38 	bl	8003da0 <HAL_GetTick>
 8007130:	4602      	mov	r2, r0
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	1ad3      	subs	r3, r2, r3
 8007136:	f241 3288 	movw	r2, #5000	@ 0x1388
 800713a:	4293      	cmp	r3, r2
 800713c:	d901      	bls.n	8007142 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800713e:	2303      	movs	r3, #3
 8007140:	e0d7      	b.n	80072f2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007142:	4b4b      	ldr	r3, [pc, #300]	@ (8007270 <HAL_RCC_OscConfig+0x4ac>)
 8007144:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007146:	f003 0302 	and.w	r3, r3, #2
 800714a:	2b00      	cmp	r3, #0
 800714c:	d0ee      	beq.n	800712c <HAL_RCC_OscConfig+0x368>
 800714e:	e014      	b.n	800717a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007150:	f7fc fe26 	bl	8003da0 <HAL_GetTick>
 8007154:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007156:	e00a      	b.n	800716e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007158:	f7fc fe22 	bl	8003da0 <HAL_GetTick>
 800715c:	4602      	mov	r2, r0
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	1ad3      	subs	r3, r2, r3
 8007162:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007166:	4293      	cmp	r3, r2
 8007168:	d901      	bls.n	800716e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800716a:	2303      	movs	r3, #3
 800716c:	e0c1      	b.n	80072f2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800716e:	4b40      	ldr	r3, [pc, #256]	@ (8007270 <HAL_RCC_OscConfig+0x4ac>)
 8007170:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007172:	f003 0302 	and.w	r3, r3, #2
 8007176:	2b00      	cmp	r3, #0
 8007178:	d1ee      	bne.n	8007158 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800717a:	7dfb      	ldrb	r3, [r7, #23]
 800717c:	2b01      	cmp	r3, #1
 800717e:	d105      	bne.n	800718c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007180:	4b3b      	ldr	r3, [pc, #236]	@ (8007270 <HAL_RCC_OscConfig+0x4ac>)
 8007182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007184:	4a3a      	ldr	r2, [pc, #232]	@ (8007270 <HAL_RCC_OscConfig+0x4ac>)
 8007186:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800718a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	699b      	ldr	r3, [r3, #24]
 8007190:	2b00      	cmp	r3, #0
 8007192:	f000 80ad 	beq.w	80072f0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007196:	4b36      	ldr	r3, [pc, #216]	@ (8007270 <HAL_RCC_OscConfig+0x4ac>)
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	f003 030c 	and.w	r3, r3, #12
 800719e:	2b08      	cmp	r3, #8
 80071a0:	d060      	beq.n	8007264 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	699b      	ldr	r3, [r3, #24]
 80071a6:	2b02      	cmp	r3, #2
 80071a8:	d145      	bne.n	8007236 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071aa:	4b33      	ldr	r3, [pc, #204]	@ (8007278 <HAL_RCC_OscConfig+0x4b4>)
 80071ac:	2200      	movs	r2, #0
 80071ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071b0:	f7fc fdf6 	bl	8003da0 <HAL_GetTick>
 80071b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071b6:	e008      	b.n	80071ca <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071b8:	f7fc fdf2 	bl	8003da0 <HAL_GetTick>
 80071bc:	4602      	mov	r2, r0
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	1ad3      	subs	r3, r2, r3
 80071c2:	2b02      	cmp	r3, #2
 80071c4:	d901      	bls.n	80071ca <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80071c6:	2303      	movs	r3, #3
 80071c8:	e093      	b.n	80072f2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071ca:	4b29      	ldr	r3, [pc, #164]	@ (8007270 <HAL_RCC_OscConfig+0x4ac>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d1f0      	bne.n	80071b8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	69da      	ldr	r2, [r3, #28]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6a1b      	ldr	r3, [r3, #32]
 80071de:	431a      	orrs	r2, r3
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071e4:	019b      	lsls	r3, r3, #6
 80071e6:	431a      	orrs	r2, r3
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071ec:	085b      	lsrs	r3, r3, #1
 80071ee:	3b01      	subs	r3, #1
 80071f0:	041b      	lsls	r3, r3, #16
 80071f2:	431a      	orrs	r2, r3
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071f8:	061b      	lsls	r3, r3, #24
 80071fa:	431a      	orrs	r2, r3
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007200:	071b      	lsls	r3, r3, #28
 8007202:	491b      	ldr	r1, [pc, #108]	@ (8007270 <HAL_RCC_OscConfig+0x4ac>)
 8007204:	4313      	orrs	r3, r2
 8007206:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007208:	4b1b      	ldr	r3, [pc, #108]	@ (8007278 <HAL_RCC_OscConfig+0x4b4>)
 800720a:	2201      	movs	r2, #1
 800720c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800720e:	f7fc fdc7 	bl	8003da0 <HAL_GetTick>
 8007212:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007214:	e008      	b.n	8007228 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007216:	f7fc fdc3 	bl	8003da0 <HAL_GetTick>
 800721a:	4602      	mov	r2, r0
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	1ad3      	subs	r3, r2, r3
 8007220:	2b02      	cmp	r3, #2
 8007222:	d901      	bls.n	8007228 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007224:	2303      	movs	r3, #3
 8007226:	e064      	b.n	80072f2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007228:	4b11      	ldr	r3, [pc, #68]	@ (8007270 <HAL_RCC_OscConfig+0x4ac>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007230:	2b00      	cmp	r3, #0
 8007232:	d0f0      	beq.n	8007216 <HAL_RCC_OscConfig+0x452>
 8007234:	e05c      	b.n	80072f0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007236:	4b10      	ldr	r3, [pc, #64]	@ (8007278 <HAL_RCC_OscConfig+0x4b4>)
 8007238:	2200      	movs	r2, #0
 800723a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800723c:	f7fc fdb0 	bl	8003da0 <HAL_GetTick>
 8007240:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007242:	e008      	b.n	8007256 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007244:	f7fc fdac 	bl	8003da0 <HAL_GetTick>
 8007248:	4602      	mov	r2, r0
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	1ad3      	subs	r3, r2, r3
 800724e:	2b02      	cmp	r3, #2
 8007250:	d901      	bls.n	8007256 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8007252:	2303      	movs	r3, #3
 8007254:	e04d      	b.n	80072f2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007256:	4b06      	ldr	r3, [pc, #24]	@ (8007270 <HAL_RCC_OscConfig+0x4ac>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800725e:	2b00      	cmp	r3, #0
 8007260:	d1f0      	bne.n	8007244 <HAL_RCC_OscConfig+0x480>
 8007262:	e045      	b.n	80072f0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	699b      	ldr	r3, [r3, #24]
 8007268:	2b01      	cmp	r3, #1
 800726a:	d107      	bne.n	800727c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800726c:	2301      	movs	r3, #1
 800726e:	e040      	b.n	80072f2 <HAL_RCC_OscConfig+0x52e>
 8007270:	40023800 	.word	0x40023800
 8007274:	40007000 	.word	0x40007000
 8007278:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800727c:	4b1f      	ldr	r3, [pc, #124]	@ (80072fc <HAL_RCC_OscConfig+0x538>)
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	699b      	ldr	r3, [r3, #24]
 8007286:	2b01      	cmp	r3, #1
 8007288:	d030      	beq.n	80072ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007294:	429a      	cmp	r2, r3
 8007296:	d129      	bne.n	80072ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d122      	bne.n	80072ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80072a6:	68fa      	ldr	r2, [r7, #12]
 80072a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80072ac:	4013      	ands	r3, r2
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80072b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d119      	bne.n	80072ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072c2:	085b      	lsrs	r3, r3, #1
 80072c4:	3b01      	subs	r3, #1
 80072c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d10f      	bne.n	80072ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80072d8:	429a      	cmp	r2, r3
 80072da:	d107      	bne.n	80072ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072e6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d001      	beq.n	80072f0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	e000      	b.n	80072f2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80072f0:	2300      	movs	r3, #0
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3718      	adds	r7, #24
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	40023800 	.word	0x40023800

08007300 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b082      	sub	sp, #8
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d101      	bne.n	8007312 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	e07b      	b.n	800740a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007316:	2b00      	cmp	r3, #0
 8007318:	d108      	bne.n	800732c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007322:	d009      	beq.n	8007338 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	61da      	str	r2, [r3, #28]
 800732a:	e005      	b.n	8007338 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2200      	movs	r2, #0
 8007330:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007344:	b2db      	uxtb	r3, r3
 8007346:	2b00      	cmp	r3, #0
 8007348:	d106      	bne.n	8007358 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2200      	movs	r2, #0
 800734e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f7fb ff7c 	bl	8003250 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2202      	movs	r2, #2
 800735c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800736e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007380:	431a      	orrs	r2, r3
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	68db      	ldr	r3, [r3, #12]
 8007386:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800738a:	431a      	orrs	r2, r3
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	691b      	ldr	r3, [r3, #16]
 8007390:	f003 0302 	and.w	r3, r3, #2
 8007394:	431a      	orrs	r2, r3
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	695b      	ldr	r3, [r3, #20]
 800739a:	f003 0301 	and.w	r3, r3, #1
 800739e:	431a      	orrs	r2, r3
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	699b      	ldr	r3, [r3, #24]
 80073a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80073a8:	431a      	orrs	r2, r3
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	69db      	ldr	r3, [r3, #28]
 80073ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80073b2:	431a      	orrs	r2, r3
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6a1b      	ldr	r3, [r3, #32]
 80073b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073bc:	ea42 0103 	orr.w	r1, r2, r3
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073c4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	430a      	orrs	r2, r1
 80073ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	699b      	ldr	r3, [r3, #24]
 80073d4:	0c1b      	lsrs	r3, r3, #16
 80073d6:	f003 0104 	and.w	r1, r3, #4
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073de:	f003 0210 	and.w	r2, r3, #16
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	430a      	orrs	r2, r1
 80073e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	69da      	ldr	r2, [r3, #28]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80073f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2201      	movs	r2, #1
 8007404:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007408:	2300      	movs	r3, #0
}
 800740a:	4618      	mov	r0, r3
 800740c:	3708      	adds	r7, #8
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
	...

08007414 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	60b9      	str	r1, [r7, #8]
 800741e:	4613      	mov	r3, r2
 8007420:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007428:	b2db      	uxtb	r3, r3
 800742a:	2b01      	cmp	r3, #1
 800742c:	d001      	beq.n	8007432 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800742e:	2302      	movs	r3, #2
 8007430:	e097      	b.n	8007562 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d002      	beq.n	800743e <HAL_SPI_Transmit_DMA+0x2a>
 8007438:	88fb      	ldrh	r3, [r7, #6]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d101      	bne.n	8007442 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800743e:	2301      	movs	r3, #1
 8007440:	e08f      	b.n	8007562 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007448:	2b01      	cmp	r3, #1
 800744a:	d101      	bne.n	8007450 <HAL_SPI_Transmit_DMA+0x3c>
 800744c:	2302      	movs	r3, #2
 800744e:	e088      	b.n	8007562 <HAL_SPI_Transmit_DMA+0x14e>
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2201      	movs	r2, #1
 8007454:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2203      	movs	r2, #3
 800745c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2200      	movs	r2, #0
 8007464:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	68ba      	ldr	r2, [r7, #8]
 800746a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	88fa      	ldrh	r2, [r7, #6]
 8007470:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	88fa      	ldrh	r2, [r7, #6]
 8007476:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2200      	movs	r2, #0
 800747c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2200      	movs	r2, #0
 8007482:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2200      	movs	r2, #0
 8007488:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2200      	movs	r2, #0
 800748e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2200      	movs	r2, #0
 8007494:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800749e:	d10f      	bne.n	80074c0 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	681a      	ldr	r2, [r3, #0]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80074ae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80074be:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074c4:	4a29      	ldr	r2, [pc, #164]	@ (800756c <HAL_SPI_Transmit_DMA+0x158>)
 80074c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074cc:	4a28      	ldr	r2, [pc, #160]	@ (8007570 <HAL_SPI_Transmit_DMA+0x15c>)
 80074ce:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074d4:	4a27      	ldr	r2, [pc, #156]	@ (8007574 <HAL_SPI_Transmit_DMA+0x160>)
 80074d6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074dc:	2200      	movs	r2, #0
 80074de:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074e8:	4619      	mov	r1, r3
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	330c      	adds	r3, #12
 80074f0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80074f6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80074f8:	f7fc fe12 	bl	8004120 <HAL_DMA_Start_IT>
 80074fc:	4603      	mov	r3, r0
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d00b      	beq.n	800751a <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007506:	f043 0210 	orr.w	r2, r3, #16
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2200      	movs	r2, #0
 8007512:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007516:	2301      	movs	r3, #1
 8007518:	e023      	b.n	8007562 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007524:	2b40      	cmp	r3, #64	@ 0x40
 8007526:	d007      	beq.n	8007538 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007536:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2200      	movs	r2, #0
 800753c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	685a      	ldr	r2, [r3, #4]
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f042 0220 	orr.w	r2, r2, #32
 800754e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	685a      	ldr	r2, [r3, #4]
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f042 0202 	orr.w	r2, r2, #2
 800755e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007560:	2300      	movs	r3, #0
}
 8007562:	4618      	mov	r0, r3
 8007564:	3710      	adds	r7, #16
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	08007649 	.word	0x08007649
 8007570:	080075a1 	.word	0x080075a1
 8007574:	08007665 	.word	0x08007665

08007578 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007578:	b480      	push	{r7}
 800757a:	b083      	sub	sp, #12
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007580:	bf00      	nop
 8007582:	370c      	adds	r7, #12
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr

0800758c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800758c:	b480      	push	{r7}
 800758e:	b083      	sub	sp, #12
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007594:	bf00      	nop
 8007596:	370c      	adds	r7, #12
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr

080075a0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b086      	sub	sp, #24
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075ac:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80075ae:	f7fc fbf7 	bl	8003da0 <HAL_GetTick>
 80075b2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80075c2:	d03b      	beq.n	800763c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	685a      	ldr	r2, [r3, #4]
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f022 0220 	bic.w	r2, r2, #32
 80075d2:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	685a      	ldr	r2, [r3, #4]
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f022 0202 	bic.w	r2, r2, #2
 80075e2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80075e4:	693a      	ldr	r2, [r7, #16]
 80075e6:	2164      	movs	r1, #100	@ 0x64
 80075e8:	6978      	ldr	r0, [r7, #20]
 80075ea:	f000 f8e3 	bl	80077b4 <SPI_EndRxTxTransaction>
 80075ee:	4603      	mov	r3, r0
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d005      	beq.n	8007600 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075f8:	f043 0220 	orr.w	r2, r3, #32
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d10a      	bne.n	800761e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007608:	2300      	movs	r3, #0
 800760a:	60fb      	str	r3, [r7, #12]
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	68db      	ldr	r3, [r3, #12]
 8007612:	60fb      	str	r3, [r7, #12]
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	60fb      	str	r3, [r7, #12]
 800761c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	2200      	movs	r2, #0
 8007622:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	2201      	movs	r2, #1
 8007628:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007630:	2b00      	cmp	r3, #0
 8007632:	d003      	beq.n	800763c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007634:	6978      	ldr	r0, [r7, #20]
 8007636:	f7ff ffa9 	bl	800758c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800763a:	e002      	b.n	8007642 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800763c:	6978      	ldr	r0, [r7, #20]
 800763e:	f7fb fd59 	bl	80030f4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007642:	3718      	adds	r7, #24
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b084      	sub	sp, #16
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007654:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8007656:	68f8      	ldr	r0, [r7, #12]
 8007658:	f7ff ff8e 	bl	8007578 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800765c:	bf00      	nop
 800765e:	3710      	adds	r7, #16
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}

08007664 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007670:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	685a      	ldr	r2, [r3, #4]
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f022 0203 	bic.w	r2, r2, #3
 8007680:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007686:	f043 0210 	orr.w	r2, r3, #16
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2201      	movs	r2, #1
 8007692:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007696:	68f8      	ldr	r0, [r7, #12]
 8007698:	f7ff ff78 	bl	800758c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800769c:	bf00      	nop
 800769e:	3710      	adds	r7, #16
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b088      	sub	sp, #32
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	60f8      	str	r0, [r7, #12]
 80076ac:	60b9      	str	r1, [r7, #8]
 80076ae:	603b      	str	r3, [r7, #0]
 80076b0:	4613      	mov	r3, r2
 80076b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80076b4:	f7fc fb74 	bl	8003da0 <HAL_GetTick>
 80076b8:	4602      	mov	r2, r0
 80076ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076bc:	1a9b      	subs	r3, r3, r2
 80076be:	683a      	ldr	r2, [r7, #0]
 80076c0:	4413      	add	r3, r2
 80076c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80076c4:	f7fc fb6c 	bl	8003da0 <HAL_GetTick>
 80076c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80076ca:	4b39      	ldr	r3, [pc, #228]	@ (80077b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	015b      	lsls	r3, r3, #5
 80076d0:	0d1b      	lsrs	r3, r3, #20
 80076d2:	69fa      	ldr	r2, [r7, #28]
 80076d4:	fb02 f303 	mul.w	r3, r2, r3
 80076d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80076da:	e054      	b.n	8007786 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076e2:	d050      	beq.n	8007786 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80076e4:	f7fc fb5c 	bl	8003da0 <HAL_GetTick>
 80076e8:	4602      	mov	r2, r0
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	1ad3      	subs	r3, r2, r3
 80076ee:	69fa      	ldr	r2, [r7, #28]
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d902      	bls.n	80076fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80076f4:	69fb      	ldr	r3, [r7, #28]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d13d      	bne.n	8007776 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	685a      	ldr	r2, [r3, #4]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007708:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007712:	d111      	bne.n	8007738 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800771c:	d004      	beq.n	8007728 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007726:	d107      	bne.n	8007738 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007736:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800773c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007740:	d10f      	bne.n	8007762 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007750:	601a      	str	r2, [r3, #0]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007760:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2201      	movs	r2, #1
 8007766:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2200      	movs	r2, #0
 800776e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007772:	2303      	movs	r3, #3
 8007774:	e017      	b.n	80077a6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d101      	bne.n	8007780 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800777c:	2300      	movs	r3, #0
 800777e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	3b01      	subs	r3, #1
 8007784:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	689a      	ldr	r2, [r3, #8]
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	4013      	ands	r3, r2
 8007790:	68ba      	ldr	r2, [r7, #8]
 8007792:	429a      	cmp	r2, r3
 8007794:	bf0c      	ite	eq
 8007796:	2301      	moveq	r3, #1
 8007798:	2300      	movne	r3, #0
 800779a:	b2db      	uxtb	r3, r3
 800779c:	461a      	mov	r2, r3
 800779e:	79fb      	ldrb	r3, [r7, #7]
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d19b      	bne.n	80076dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80077a4:	2300      	movs	r3, #0
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3720      	adds	r7, #32
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	bf00      	nop
 80077b0:	20000010 	.word	0x20000010

080077b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b088      	sub	sp, #32
 80077b8:	af02      	add	r7, sp, #8
 80077ba:	60f8      	str	r0, [r7, #12]
 80077bc:	60b9      	str	r1, [r7, #8]
 80077be:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	9300      	str	r3, [sp, #0]
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	2201      	movs	r2, #1
 80077c8:	2102      	movs	r1, #2
 80077ca:	68f8      	ldr	r0, [r7, #12]
 80077cc:	f7ff ff6a 	bl	80076a4 <SPI_WaitFlagStateUntilTimeout>
 80077d0:	4603      	mov	r3, r0
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d007      	beq.n	80077e6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077da:	f043 0220 	orr.w	r2, r3, #32
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80077e2:	2303      	movs	r3, #3
 80077e4:	e032      	b.n	800784c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80077e6:	4b1b      	ldr	r3, [pc, #108]	@ (8007854 <SPI_EndRxTxTransaction+0xa0>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a1b      	ldr	r2, [pc, #108]	@ (8007858 <SPI_EndRxTxTransaction+0xa4>)
 80077ec:	fba2 2303 	umull	r2, r3, r2, r3
 80077f0:	0d5b      	lsrs	r3, r3, #21
 80077f2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80077f6:	fb02 f303 	mul.w	r3, r2, r3
 80077fa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007804:	d112      	bne.n	800782c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	9300      	str	r3, [sp, #0]
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	2200      	movs	r2, #0
 800780e:	2180      	movs	r1, #128	@ 0x80
 8007810:	68f8      	ldr	r0, [r7, #12]
 8007812:	f7ff ff47 	bl	80076a4 <SPI_WaitFlagStateUntilTimeout>
 8007816:	4603      	mov	r3, r0
 8007818:	2b00      	cmp	r3, #0
 800781a:	d016      	beq.n	800784a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007820:	f043 0220 	orr.w	r2, r3, #32
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007828:	2303      	movs	r3, #3
 800782a:	e00f      	b.n	800784c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d00a      	beq.n	8007848 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	3b01      	subs	r3, #1
 8007836:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007842:	2b80      	cmp	r3, #128	@ 0x80
 8007844:	d0f2      	beq.n	800782c <SPI_EndRxTxTransaction+0x78>
 8007846:	e000      	b.n	800784a <SPI_EndRxTxTransaction+0x96>
        break;
 8007848:	bf00      	nop
  }

  return HAL_OK;
 800784a:	2300      	movs	r3, #0
}
 800784c:	4618      	mov	r0, r3
 800784e:	3718      	adds	r7, #24
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}
 8007854:	20000010 	.word	0x20000010
 8007858:	165e9f81 	.word	0x165e9f81

0800785c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b082      	sub	sp, #8
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d101      	bne.n	800786e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800786a:	2301      	movs	r3, #1
 800786c:	e041      	b.n	80078f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007874:	b2db      	uxtb	r3, r3
 8007876:	2b00      	cmp	r3, #0
 8007878:	d106      	bne.n	8007888 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2200      	movs	r2, #0
 800787e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 f839 	bl	80078fa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2202      	movs	r2, #2
 800788c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	3304      	adds	r3, #4
 8007898:	4619      	mov	r1, r3
 800789a:	4610      	mov	r0, r2
 800789c:	f000 fcce 	bl	800823c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2201      	movs	r2, #1
 80078a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2201      	movs	r2, #1
 80078ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2201      	movs	r2, #1
 80078b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2201      	movs	r2, #1
 80078bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2201      	movs	r2, #1
 80078c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2201      	movs	r2, #1
 80078cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2201      	movs	r2, #1
 80078d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2201      	movs	r2, #1
 80078dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2201      	movs	r2, #1
 80078e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2201      	movs	r2, #1
 80078ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80078f0:	2300      	movs	r3, #0
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3708      	adds	r7, #8
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}

080078fa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80078fa:	b480      	push	{r7}
 80078fc:	b083      	sub	sp, #12
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007902:	bf00      	nop
 8007904:	370c      	adds	r7, #12
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr
	...

08007910 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007910:	b480      	push	{r7}
 8007912:	b085      	sub	sp, #20
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800791e:	b2db      	uxtb	r3, r3
 8007920:	2b01      	cmp	r3, #1
 8007922:	d001      	beq.n	8007928 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	e04e      	b.n	80079c6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2202      	movs	r2, #2
 800792c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	68da      	ldr	r2, [r3, #12]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f042 0201 	orr.w	r2, r2, #1
 800793e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a23      	ldr	r2, [pc, #140]	@ (80079d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d022      	beq.n	8007990 <HAL_TIM_Base_Start_IT+0x80>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007952:	d01d      	beq.n	8007990 <HAL_TIM_Base_Start_IT+0x80>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a1f      	ldr	r2, [pc, #124]	@ (80079d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d018      	beq.n	8007990 <HAL_TIM_Base_Start_IT+0x80>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a1e      	ldr	r2, [pc, #120]	@ (80079dc <HAL_TIM_Base_Start_IT+0xcc>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d013      	beq.n	8007990 <HAL_TIM_Base_Start_IT+0x80>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a1c      	ldr	r2, [pc, #112]	@ (80079e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d00e      	beq.n	8007990 <HAL_TIM_Base_Start_IT+0x80>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a1b      	ldr	r2, [pc, #108]	@ (80079e4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d009      	beq.n	8007990 <HAL_TIM_Base_Start_IT+0x80>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a19      	ldr	r2, [pc, #100]	@ (80079e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d004      	beq.n	8007990 <HAL_TIM_Base_Start_IT+0x80>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a18      	ldr	r2, [pc, #96]	@ (80079ec <HAL_TIM_Base_Start_IT+0xdc>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d111      	bne.n	80079b4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	f003 0307 	and.w	r3, r3, #7
 800799a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2b06      	cmp	r3, #6
 80079a0:	d010      	beq.n	80079c4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	681a      	ldr	r2, [r3, #0]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f042 0201 	orr.w	r2, r2, #1
 80079b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079b2:	e007      	b.n	80079c4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f042 0201 	orr.w	r2, r2, #1
 80079c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80079c4:	2300      	movs	r3, #0
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3714      	adds	r7, #20
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr
 80079d2:	bf00      	nop
 80079d4:	40010000 	.word	0x40010000
 80079d8:	40000400 	.word	0x40000400
 80079dc:	40000800 	.word	0x40000800
 80079e0:	40000c00 	.word	0x40000c00
 80079e4:	40010400 	.word	0x40010400
 80079e8:	40014000 	.word	0x40014000
 80079ec:	40001800 	.word	0x40001800

080079f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d101      	bne.n	8007a02 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80079fe:	2301      	movs	r3, #1
 8007a00:	e041      	b.n	8007a86 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d106      	bne.n	8007a1c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2200      	movs	r2, #0
 8007a12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f7fb fff4 	bl	8003a04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2202      	movs	r2, #2
 8007a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681a      	ldr	r2, [r3, #0]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	3304      	adds	r3, #4
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	4610      	mov	r0, r2
 8007a30:	f000 fc04 	bl	800823c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2201      	movs	r2, #1
 8007a38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2201      	movs	r2, #1
 8007a48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2201      	movs	r2, #1
 8007a58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2201      	movs	r2, #1
 8007a68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2201      	movs	r2, #1
 8007a78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007a84:	2300      	movs	r3, #0
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3708      	adds	r7, #8
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
	...

08007a90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d109      	bne.n	8007ab4 <HAL_TIM_PWM_Start+0x24>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	bf14      	ite	ne
 8007aac:	2301      	movne	r3, #1
 8007aae:	2300      	moveq	r3, #0
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	e022      	b.n	8007afa <HAL_TIM_PWM_Start+0x6a>
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	2b04      	cmp	r3, #4
 8007ab8:	d109      	bne.n	8007ace <HAL_TIM_PWM_Start+0x3e>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	bf14      	ite	ne
 8007ac6:	2301      	movne	r3, #1
 8007ac8:	2300      	moveq	r3, #0
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	e015      	b.n	8007afa <HAL_TIM_PWM_Start+0x6a>
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	2b08      	cmp	r3, #8
 8007ad2:	d109      	bne.n	8007ae8 <HAL_TIM_PWM_Start+0x58>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	bf14      	ite	ne
 8007ae0:	2301      	movne	r3, #1
 8007ae2:	2300      	moveq	r3, #0
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	e008      	b.n	8007afa <HAL_TIM_PWM_Start+0x6a>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007aee:	b2db      	uxtb	r3, r3
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	bf14      	ite	ne
 8007af4:	2301      	movne	r3, #1
 8007af6:	2300      	moveq	r3, #0
 8007af8:	b2db      	uxtb	r3, r3
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d001      	beq.n	8007b02 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007afe:	2301      	movs	r3, #1
 8007b00:	e07c      	b.n	8007bfc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d104      	bne.n	8007b12 <HAL_TIM_PWM_Start+0x82>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2202      	movs	r2, #2
 8007b0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b10:	e013      	b.n	8007b3a <HAL_TIM_PWM_Start+0xaa>
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	2b04      	cmp	r3, #4
 8007b16:	d104      	bne.n	8007b22 <HAL_TIM_PWM_Start+0x92>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2202      	movs	r2, #2
 8007b1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b20:	e00b      	b.n	8007b3a <HAL_TIM_PWM_Start+0xaa>
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	2b08      	cmp	r3, #8
 8007b26:	d104      	bne.n	8007b32 <HAL_TIM_PWM_Start+0xa2>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2202      	movs	r2, #2
 8007b2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b30:	e003      	b.n	8007b3a <HAL_TIM_PWM_Start+0xaa>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2202      	movs	r2, #2
 8007b36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	6839      	ldr	r1, [r7, #0]
 8007b42:	4618      	mov	r0, r3
 8007b44:	f000 fdd6 	bl	80086f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a2d      	ldr	r2, [pc, #180]	@ (8007c04 <HAL_TIM_PWM_Start+0x174>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d004      	beq.n	8007b5c <HAL_TIM_PWM_Start+0xcc>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a2c      	ldr	r2, [pc, #176]	@ (8007c08 <HAL_TIM_PWM_Start+0x178>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d101      	bne.n	8007b60 <HAL_TIM_PWM_Start+0xd0>
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	e000      	b.n	8007b62 <HAL_TIM_PWM_Start+0xd2>
 8007b60:	2300      	movs	r3, #0
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d007      	beq.n	8007b76 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007b74:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a22      	ldr	r2, [pc, #136]	@ (8007c04 <HAL_TIM_PWM_Start+0x174>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d022      	beq.n	8007bc6 <HAL_TIM_PWM_Start+0x136>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b88:	d01d      	beq.n	8007bc6 <HAL_TIM_PWM_Start+0x136>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a1f      	ldr	r2, [pc, #124]	@ (8007c0c <HAL_TIM_PWM_Start+0x17c>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d018      	beq.n	8007bc6 <HAL_TIM_PWM_Start+0x136>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a1d      	ldr	r2, [pc, #116]	@ (8007c10 <HAL_TIM_PWM_Start+0x180>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d013      	beq.n	8007bc6 <HAL_TIM_PWM_Start+0x136>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a1c      	ldr	r2, [pc, #112]	@ (8007c14 <HAL_TIM_PWM_Start+0x184>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d00e      	beq.n	8007bc6 <HAL_TIM_PWM_Start+0x136>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a16      	ldr	r2, [pc, #88]	@ (8007c08 <HAL_TIM_PWM_Start+0x178>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d009      	beq.n	8007bc6 <HAL_TIM_PWM_Start+0x136>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a18      	ldr	r2, [pc, #96]	@ (8007c18 <HAL_TIM_PWM_Start+0x188>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d004      	beq.n	8007bc6 <HAL_TIM_PWM_Start+0x136>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a16      	ldr	r2, [pc, #88]	@ (8007c1c <HAL_TIM_PWM_Start+0x18c>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d111      	bne.n	8007bea <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	f003 0307 	and.w	r3, r3, #7
 8007bd0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2b06      	cmp	r3, #6
 8007bd6:	d010      	beq.n	8007bfa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f042 0201 	orr.w	r2, r2, #1
 8007be6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007be8:	e007      	b.n	8007bfa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f042 0201 	orr.w	r2, r2, #1
 8007bf8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007bfa:	2300      	movs	r3, #0
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3710      	adds	r7, #16
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}
 8007c04:	40010000 	.word	0x40010000
 8007c08:	40010400 	.word	0x40010400
 8007c0c:	40000400 	.word	0x40000400
 8007c10:	40000800 	.word	0x40000800
 8007c14:	40000c00 	.word	0x40000c00
 8007c18:	40014000 	.word	0x40014000
 8007c1c:	40001800 	.word	0x40001800

08007c20 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b086      	sub	sp, #24
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d101      	bne.n	8007c34 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007c30:	2301      	movs	r3, #1
 8007c32:	e097      	b.n	8007d64 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d106      	bne.n	8007c4e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f7fb fe95 	bl	8003978 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2202      	movs	r2, #2
 8007c52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	689b      	ldr	r3, [r3, #8]
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	6812      	ldr	r2, [r2, #0]
 8007c60:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007c64:	f023 0307 	bic.w	r3, r3, #7
 8007c68:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681a      	ldr	r2, [r3, #0]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	3304      	adds	r3, #4
 8007c72:	4619      	mov	r1, r3
 8007c74:	4610      	mov	r0, r2
 8007c76:	f000 fae1 	bl	800823c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	699b      	ldr	r3, [r3, #24]
 8007c88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	6a1b      	ldr	r3, [r3, #32]
 8007c90:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	697a      	ldr	r2, [r7, #20]
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ca2:	f023 0303 	bic.w	r3, r3, #3
 8007ca6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	689a      	ldr	r2, [r3, #8]
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	699b      	ldr	r3, [r3, #24]
 8007cb0:	021b      	lsls	r3, r3, #8
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	693a      	ldr	r2, [r7, #16]
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007cc0:	f023 030c 	bic.w	r3, r3, #12
 8007cc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007ccc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007cd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	68da      	ldr	r2, [r3, #12]
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	69db      	ldr	r3, [r3, #28]
 8007cda:	021b      	lsls	r3, r3, #8
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	693a      	ldr	r2, [r7, #16]
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	691b      	ldr	r3, [r3, #16]
 8007ce8:	011a      	lsls	r2, r3, #4
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	6a1b      	ldr	r3, [r3, #32]
 8007cee:	031b      	lsls	r3, r3, #12
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	693a      	ldr	r2, [r7, #16]
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007cfe:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007d06:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	685a      	ldr	r2, [r3, #4]
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	695b      	ldr	r3, [r3, #20]
 8007d10:	011b      	lsls	r3, r3, #4
 8007d12:	4313      	orrs	r3, r2
 8007d14:	68fa      	ldr	r2, [r7, #12]
 8007d16:	4313      	orrs	r3, r2
 8007d18:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	697a      	ldr	r2, [r7, #20]
 8007d20:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	693a      	ldr	r2, [r7, #16]
 8007d28:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	68fa      	ldr	r2, [r7, #12]
 8007d30:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2201      	movs	r2, #1
 8007d36:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2201      	movs	r2, #1
 8007d46:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2201      	movs	r2, #1
 8007d56:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007d62:	2300      	movs	r3, #0
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3718      	adds	r7, #24
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007d7c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007d84:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007d8c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007d94:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d110      	bne.n	8007dbe <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d9c:	7bfb      	ldrb	r3, [r7, #15]
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d102      	bne.n	8007da8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007da2:	7b7b      	ldrb	r3, [r7, #13]
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d001      	beq.n	8007dac <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007da8:	2301      	movs	r3, #1
 8007daa:	e069      	b.n	8007e80 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2202      	movs	r2, #2
 8007db0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2202      	movs	r2, #2
 8007db8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007dbc:	e031      	b.n	8007e22 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	2b04      	cmp	r3, #4
 8007dc2:	d110      	bne.n	8007de6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007dc4:	7bbb      	ldrb	r3, [r7, #14]
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	d102      	bne.n	8007dd0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007dca:	7b3b      	ldrb	r3, [r7, #12]
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d001      	beq.n	8007dd4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	e055      	b.n	8007e80 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2202      	movs	r2, #2
 8007dd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2202      	movs	r2, #2
 8007de0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007de4:	e01d      	b.n	8007e22 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007de6:	7bfb      	ldrb	r3, [r7, #15]
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d108      	bne.n	8007dfe <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007dec:	7bbb      	ldrb	r3, [r7, #14]
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d105      	bne.n	8007dfe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007df2:	7b7b      	ldrb	r3, [r7, #13]
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d102      	bne.n	8007dfe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007df8:	7b3b      	ldrb	r3, [r7, #12]
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	d001      	beq.n	8007e02 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e03e      	b.n	8007e80 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2202      	movs	r2, #2
 8007e06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2202      	movs	r2, #2
 8007e0e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2202      	movs	r2, #2
 8007e16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2202      	movs	r2, #2
 8007e1e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d003      	beq.n	8007e30 <HAL_TIM_Encoder_Start+0xc4>
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	2b04      	cmp	r3, #4
 8007e2c:	d008      	beq.n	8007e40 <HAL_TIM_Encoder_Start+0xd4>
 8007e2e:	e00f      	b.n	8007e50 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	2201      	movs	r2, #1
 8007e36:	2100      	movs	r1, #0
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f000 fc5b 	bl	80086f4 <TIM_CCxChannelCmd>
      break;
 8007e3e:	e016      	b.n	8007e6e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	2201      	movs	r2, #1
 8007e46:	2104      	movs	r1, #4
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f000 fc53 	bl	80086f4 <TIM_CCxChannelCmd>
      break;
 8007e4e:	e00e      	b.n	8007e6e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	2201      	movs	r2, #1
 8007e56:	2100      	movs	r1, #0
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f000 fc4b 	bl	80086f4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	2201      	movs	r2, #1
 8007e64:	2104      	movs	r1, #4
 8007e66:	4618      	mov	r0, r3
 8007e68:	f000 fc44 	bl	80086f4 <TIM_CCxChannelCmd>
      break;
 8007e6c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	681a      	ldr	r2, [r3, #0]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f042 0201 	orr.w	r2, r2, #1
 8007e7c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007e7e:	2300      	movs	r3, #0
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3710      	adds	r7, #16
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	68db      	ldr	r3, [r3, #12]
 8007e96:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	691b      	ldr	r3, [r3, #16]
 8007e9e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	f003 0302 	and.w	r3, r3, #2
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d020      	beq.n	8007eec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f003 0302 	and.w	r3, r3, #2
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d01b      	beq.n	8007eec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f06f 0202 	mvn.w	r2, #2
 8007ebc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	699b      	ldr	r3, [r3, #24]
 8007eca:	f003 0303 	and.w	r3, r3, #3
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d003      	beq.n	8007eda <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 f994 	bl	8008200 <HAL_TIM_IC_CaptureCallback>
 8007ed8:	e005      	b.n	8007ee6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 f986 	bl	80081ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 f997 	bl	8008214 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	f003 0304 	and.w	r3, r3, #4
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d020      	beq.n	8007f38 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f003 0304 	and.w	r3, r3, #4
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d01b      	beq.n	8007f38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f06f 0204 	mvn.w	r2, #4
 8007f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2202      	movs	r2, #2
 8007f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	699b      	ldr	r3, [r3, #24]
 8007f16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d003      	beq.n	8007f26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 f96e 	bl	8008200 <HAL_TIM_IC_CaptureCallback>
 8007f24:	e005      	b.n	8007f32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 f960 	bl	80081ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 f971 	bl	8008214 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	f003 0308 	and.w	r3, r3, #8
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d020      	beq.n	8007f84 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f003 0308 	and.w	r3, r3, #8
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d01b      	beq.n	8007f84 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f06f 0208 	mvn.w	r2, #8
 8007f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2204      	movs	r2, #4
 8007f5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	69db      	ldr	r3, [r3, #28]
 8007f62:	f003 0303 	and.w	r3, r3, #3
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d003      	beq.n	8007f72 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 f948 	bl	8008200 <HAL_TIM_IC_CaptureCallback>
 8007f70:	e005      	b.n	8007f7e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 f93a 	bl	80081ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 f94b 	bl	8008214 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2200      	movs	r2, #0
 8007f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	f003 0310 	and.w	r3, r3, #16
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d020      	beq.n	8007fd0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	f003 0310 	and.w	r3, r3, #16
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d01b      	beq.n	8007fd0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f06f 0210 	mvn.w	r2, #16
 8007fa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2208      	movs	r2, #8
 8007fa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	69db      	ldr	r3, [r3, #28]
 8007fae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d003      	beq.n	8007fbe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 f922 	bl	8008200 <HAL_TIM_IC_CaptureCallback>
 8007fbc:	e005      	b.n	8007fca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 f914 	bl	80081ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 f925 	bl	8008214 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	f003 0301 	and.w	r3, r3, #1
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d00c      	beq.n	8007ff4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f003 0301 	and.w	r3, r3, #1
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d007      	beq.n	8007ff4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f06f 0201 	mvn.w	r2, #1
 8007fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f7fb f8e0 	bl	80031b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d00c      	beq.n	8008018 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008004:	2b00      	cmp	r3, #0
 8008006:	d007      	beq.n	8008018 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 fc1a 	bl	800884c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800801e:	2b00      	cmp	r3, #0
 8008020:	d00c      	beq.n	800803c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008028:	2b00      	cmp	r3, #0
 800802a:	d007      	beq.n	800803c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 f8f6 	bl	8008228 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	f003 0320 	and.w	r3, r3, #32
 8008042:	2b00      	cmp	r3, #0
 8008044:	d00c      	beq.n	8008060 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	f003 0320 	and.w	r3, r3, #32
 800804c:	2b00      	cmp	r3, #0
 800804e:	d007      	beq.n	8008060 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f06f 0220 	mvn.w	r2, #32
 8008058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 fbec 	bl	8008838 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008060:	bf00      	nop
 8008062:	3710      	adds	r7, #16
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b086      	sub	sp, #24
 800806c:	af00      	add	r7, sp, #0
 800806e:	60f8      	str	r0, [r7, #12]
 8008070:	60b9      	str	r1, [r7, #8]
 8008072:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008074:	2300      	movs	r3, #0
 8008076:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800807e:	2b01      	cmp	r3, #1
 8008080:	d101      	bne.n	8008086 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008082:	2302      	movs	r3, #2
 8008084:	e0ae      	b.n	80081e4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2201      	movs	r2, #1
 800808a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2b0c      	cmp	r3, #12
 8008092:	f200 809f 	bhi.w	80081d4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008096:	a201      	add	r2, pc, #4	@ (adr r2, 800809c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800809c:	080080d1 	.word	0x080080d1
 80080a0:	080081d5 	.word	0x080081d5
 80080a4:	080081d5 	.word	0x080081d5
 80080a8:	080081d5 	.word	0x080081d5
 80080ac:	08008111 	.word	0x08008111
 80080b0:	080081d5 	.word	0x080081d5
 80080b4:	080081d5 	.word	0x080081d5
 80080b8:	080081d5 	.word	0x080081d5
 80080bc:	08008153 	.word	0x08008153
 80080c0:	080081d5 	.word	0x080081d5
 80080c4:	080081d5 	.word	0x080081d5
 80080c8:	080081d5 	.word	0x080081d5
 80080cc:	08008193 	.word	0x08008193
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	68b9      	ldr	r1, [r7, #8]
 80080d6:	4618      	mov	r0, r3
 80080d8:	f000 f95c 	bl	8008394 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	699a      	ldr	r2, [r3, #24]
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f042 0208 	orr.w	r2, r2, #8
 80080ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	699a      	ldr	r2, [r3, #24]
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f022 0204 	bic.w	r2, r2, #4
 80080fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	6999      	ldr	r1, [r3, #24]
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	691a      	ldr	r2, [r3, #16]
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	430a      	orrs	r2, r1
 800810c:	619a      	str	r2, [r3, #24]
      break;
 800810e:	e064      	b.n	80081da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	68b9      	ldr	r1, [r7, #8]
 8008116:	4618      	mov	r0, r3
 8008118:	f000 f9ac 	bl	8008474 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	699a      	ldr	r2, [r3, #24]
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800812a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	699a      	ldr	r2, [r3, #24]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800813a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	6999      	ldr	r1, [r3, #24]
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	691b      	ldr	r3, [r3, #16]
 8008146:	021a      	lsls	r2, r3, #8
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	430a      	orrs	r2, r1
 800814e:	619a      	str	r2, [r3, #24]
      break;
 8008150:	e043      	b.n	80081da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	68b9      	ldr	r1, [r7, #8]
 8008158:	4618      	mov	r0, r3
 800815a:	f000 fa01 	bl	8008560 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	69da      	ldr	r2, [r3, #28]
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f042 0208 	orr.w	r2, r2, #8
 800816c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	69da      	ldr	r2, [r3, #28]
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f022 0204 	bic.w	r2, r2, #4
 800817c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	69d9      	ldr	r1, [r3, #28]
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	691a      	ldr	r2, [r3, #16]
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	430a      	orrs	r2, r1
 800818e:	61da      	str	r2, [r3, #28]
      break;
 8008190:	e023      	b.n	80081da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	68b9      	ldr	r1, [r7, #8]
 8008198:	4618      	mov	r0, r3
 800819a:	f000 fa55 	bl	8008648 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	69da      	ldr	r2, [r3, #28]
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80081ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	69da      	ldr	r2, [r3, #28]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80081bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	69d9      	ldr	r1, [r3, #28]
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	691b      	ldr	r3, [r3, #16]
 80081c8:	021a      	lsls	r2, r3, #8
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	430a      	orrs	r2, r1
 80081d0:	61da      	str	r2, [r3, #28]
      break;
 80081d2:	e002      	b.n	80081da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80081d4:	2301      	movs	r3, #1
 80081d6:	75fb      	strb	r3, [r7, #23]
      break;
 80081d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2200      	movs	r2, #0
 80081de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80081e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3718      	adds	r7, #24
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}

080081ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b083      	sub	sp, #12
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80081f4:	bf00      	nop
 80081f6:	370c      	adds	r7, #12
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr

08008200 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008200:	b480      	push	{r7}
 8008202:	b083      	sub	sp, #12
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008208:	bf00      	nop
 800820a:	370c      	adds	r7, #12
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr

08008214 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008214:	b480      	push	{r7}
 8008216:	b083      	sub	sp, #12
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800821c:	bf00      	nop
 800821e:	370c      	adds	r7, #12
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr

08008228 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008228:	b480      	push	{r7}
 800822a:	b083      	sub	sp, #12
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008230:	bf00      	nop
 8008232:	370c      	adds	r7, #12
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr

0800823c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800823c:	b480      	push	{r7}
 800823e:	b085      	sub	sp, #20
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	4a46      	ldr	r2, [pc, #280]	@ (8008368 <TIM_Base_SetConfig+0x12c>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d013      	beq.n	800827c <TIM_Base_SetConfig+0x40>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800825a:	d00f      	beq.n	800827c <TIM_Base_SetConfig+0x40>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	4a43      	ldr	r2, [pc, #268]	@ (800836c <TIM_Base_SetConfig+0x130>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d00b      	beq.n	800827c <TIM_Base_SetConfig+0x40>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	4a42      	ldr	r2, [pc, #264]	@ (8008370 <TIM_Base_SetConfig+0x134>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d007      	beq.n	800827c <TIM_Base_SetConfig+0x40>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	4a41      	ldr	r2, [pc, #260]	@ (8008374 <TIM_Base_SetConfig+0x138>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d003      	beq.n	800827c <TIM_Base_SetConfig+0x40>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	4a40      	ldr	r2, [pc, #256]	@ (8008378 <TIM_Base_SetConfig+0x13c>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d108      	bne.n	800828e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008282:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	68fa      	ldr	r2, [r7, #12]
 800828a:	4313      	orrs	r3, r2
 800828c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	4a35      	ldr	r2, [pc, #212]	@ (8008368 <TIM_Base_SetConfig+0x12c>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d02b      	beq.n	80082ee <TIM_Base_SetConfig+0xb2>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800829c:	d027      	beq.n	80082ee <TIM_Base_SetConfig+0xb2>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	4a32      	ldr	r2, [pc, #200]	@ (800836c <TIM_Base_SetConfig+0x130>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d023      	beq.n	80082ee <TIM_Base_SetConfig+0xb2>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	4a31      	ldr	r2, [pc, #196]	@ (8008370 <TIM_Base_SetConfig+0x134>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d01f      	beq.n	80082ee <TIM_Base_SetConfig+0xb2>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	4a30      	ldr	r2, [pc, #192]	@ (8008374 <TIM_Base_SetConfig+0x138>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d01b      	beq.n	80082ee <TIM_Base_SetConfig+0xb2>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	4a2f      	ldr	r2, [pc, #188]	@ (8008378 <TIM_Base_SetConfig+0x13c>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d017      	beq.n	80082ee <TIM_Base_SetConfig+0xb2>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	4a2e      	ldr	r2, [pc, #184]	@ (800837c <TIM_Base_SetConfig+0x140>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d013      	beq.n	80082ee <TIM_Base_SetConfig+0xb2>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	4a2d      	ldr	r2, [pc, #180]	@ (8008380 <TIM_Base_SetConfig+0x144>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d00f      	beq.n	80082ee <TIM_Base_SetConfig+0xb2>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	4a2c      	ldr	r2, [pc, #176]	@ (8008384 <TIM_Base_SetConfig+0x148>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d00b      	beq.n	80082ee <TIM_Base_SetConfig+0xb2>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	4a2b      	ldr	r2, [pc, #172]	@ (8008388 <TIM_Base_SetConfig+0x14c>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d007      	beq.n	80082ee <TIM_Base_SetConfig+0xb2>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	4a2a      	ldr	r2, [pc, #168]	@ (800838c <TIM_Base_SetConfig+0x150>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d003      	beq.n	80082ee <TIM_Base_SetConfig+0xb2>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	4a29      	ldr	r2, [pc, #164]	@ (8008390 <TIM_Base_SetConfig+0x154>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d108      	bne.n	8008300 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80082f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	68db      	ldr	r3, [r3, #12]
 80082fa:	68fa      	ldr	r2, [r7, #12]
 80082fc:	4313      	orrs	r3, r2
 80082fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	695b      	ldr	r3, [r3, #20]
 800830a:	4313      	orrs	r3, r2
 800830c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	68fa      	ldr	r2, [r7, #12]
 8008312:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	689a      	ldr	r2, [r3, #8]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	4a10      	ldr	r2, [pc, #64]	@ (8008368 <TIM_Base_SetConfig+0x12c>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d003      	beq.n	8008334 <TIM_Base_SetConfig+0xf8>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	4a12      	ldr	r2, [pc, #72]	@ (8008378 <TIM_Base_SetConfig+0x13c>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d103      	bne.n	800833c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	691a      	ldr	r2, [r3, #16]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2201      	movs	r2, #1
 8008340:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	691b      	ldr	r3, [r3, #16]
 8008346:	f003 0301 	and.w	r3, r3, #1
 800834a:	2b01      	cmp	r3, #1
 800834c:	d105      	bne.n	800835a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	691b      	ldr	r3, [r3, #16]
 8008352:	f023 0201 	bic.w	r2, r3, #1
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	611a      	str	r2, [r3, #16]
  }
}
 800835a:	bf00      	nop
 800835c:	3714      	adds	r7, #20
 800835e:	46bd      	mov	sp, r7
 8008360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008364:	4770      	bx	lr
 8008366:	bf00      	nop
 8008368:	40010000 	.word	0x40010000
 800836c:	40000400 	.word	0x40000400
 8008370:	40000800 	.word	0x40000800
 8008374:	40000c00 	.word	0x40000c00
 8008378:	40010400 	.word	0x40010400
 800837c:	40014000 	.word	0x40014000
 8008380:	40014400 	.word	0x40014400
 8008384:	40014800 	.word	0x40014800
 8008388:	40001800 	.word	0x40001800
 800838c:	40001c00 	.word	0x40001c00
 8008390:	40002000 	.word	0x40002000

08008394 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008394:	b480      	push	{r7}
 8008396:	b087      	sub	sp, #28
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6a1b      	ldr	r3, [r3, #32]
 80083a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6a1b      	ldr	r3, [r3, #32]
 80083a8:	f023 0201 	bic.w	r2, r3, #1
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	699b      	ldr	r3, [r3, #24]
 80083ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f023 0303 	bic.w	r3, r3, #3
 80083ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	68fa      	ldr	r2, [r7, #12]
 80083d2:	4313      	orrs	r3, r2
 80083d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	f023 0302 	bic.w	r3, r3, #2
 80083dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	689b      	ldr	r3, [r3, #8]
 80083e2:	697a      	ldr	r2, [r7, #20]
 80083e4:	4313      	orrs	r3, r2
 80083e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	4a20      	ldr	r2, [pc, #128]	@ (800846c <TIM_OC1_SetConfig+0xd8>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d003      	beq.n	80083f8 <TIM_OC1_SetConfig+0x64>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	4a1f      	ldr	r2, [pc, #124]	@ (8008470 <TIM_OC1_SetConfig+0xdc>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d10c      	bne.n	8008412 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	f023 0308 	bic.w	r3, r3, #8
 80083fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	68db      	ldr	r3, [r3, #12]
 8008404:	697a      	ldr	r2, [r7, #20]
 8008406:	4313      	orrs	r3, r2
 8008408:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	f023 0304 	bic.w	r3, r3, #4
 8008410:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	4a15      	ldr	r2, [pc, #84]	@ (800846c <TIM_OC1_SetConfig+0xd8>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d003      	beq.n	8008422 <TIM_OC1_SetConfig+0x8e>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	4a14      	ldr	r2, [pc, #80]	@ (8008470 <TIM_OC1_SetConfig+0xdc>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d111      	bne.n	8008446 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008428:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008430:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	695b      	ldr	r3, [r3, #20]
 8008436:	693a      	ldr	r2, [r7, #16]
 8008438:	4313      	orrs	r3, r2
 800843a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	699b      	ldr	r3, [r3, #24]
 8008440:	693a      	ldr	r2, [r7, #16]
 8008442:	4313      	orrs	r3, r2
 8008444:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	693a      	ldr	r2, [r7, #16]
 800844a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	68fa      	ldr	r2, [r7, #12]
 8008450:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	685a      	ldr	r2, [r3, #4]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	697a      	ldr	r2, [r7, #20]
 800845e:	621a      	str	r2, [r3, #32]
}
 8008460:	bf00      	nop
 8008462:	371c      	adds	r7, #28
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr
 800846c:	40010000 	.word	0x40010000
 8008470:	40010400 	.word	0x40010400

08008474 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008474:	b480      	push	{r7}
 8008476:	b087      	sub	sp, #28
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6a1b      	ldr	r3, [r3, #32]
 8008482:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6a1b      	ldr	r3, [r3, #32]
 8008488:	f023 0210 	bic.w	r2, r3, #16
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	699b      	ldr	r3, [r3, #24]
 800849a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80084a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80084aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	021b      	lsls	r3, r3, #8
 80084b2:	68fa      	ldr	r2, [r7, #12]
 80084b4:	4313      	orrs	r3, r2
 80084b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	f023 0320 	bic.w	r3, r3, #32
 80084be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	011b      	lsls	r3, r3, #4
 80084c6:	697a      	ldr	r2, [r7, #20]
 80084c8:	4313      	orrs	r3, r2
 80084ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	4a22      	ldr	r2, [pc, #136]	@ (8008558 <TIM_OC2_SetConfig+0xe4>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d003      	beq.n	80084dc <TIM_OC2_SetConfig+0x68>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	4a21      	ldr	r2, [pc, #132]	@ (800855c <TIM_OC2_SetConfig+0xe8>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d10d      	bne.n	80084f8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80084e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	68db      	ldr	r3, [r3, #12]
 80084e8:	011b      	lsls	r3, r3, #4
 80084ea:	697a      	ldr	r2, [r7, #20]
 80084ec:	4313      	orrs	r3, r2
 80084ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80084f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	4a17      	ldr	r2, [pc, #92]	@ (8008558 <TIM_OC2_SetConfig+0xe4>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d003      	beq.n	8008508 <TIM_OC2_SetConfig+0x94>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	4a16      	ldr	r2, [pc, #88]	@ (800855c <TIM_OC2_SetConfig+0xe8>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d113      	bne.n	8008530 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800850e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008516:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	695b      	ldr	r3, [r3, #20]
 800851c:	009b      	lsls	r3, r3, #2
 800851e:	693a      	ldr	r2, [r7, #16]
 8008520:	4313      	orrs	r3, r2
 8008522:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	699b      	ldr	r3, [r3, #24]
 8008528:	009b      	lsls	r3, r3, #2
 800852a:	693a      	ldr	r2, [r7, #16]
 800852c:	4313      	orrs	r3, r2
 800852e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	693a      	ldr	r2, [r7, #16]
 8008534:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	68fa      	ldr	r2, [r7, #12]
 800853a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	685a      	ldr	r2, [r3, #4]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	697a      	ldr	r2, [r7, #20]
 8008548:	621a      	str	r2, [r3, #32]
}
 800854a:	bf00      	nop
 800854c:	371c      	adds	r7, #28
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr
 8008556:	bf00      	nop
 8008558:	40010000 	.word	0x40010000
 800855c:	40010400 	.word	0x40010400

08008560 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008560:	b480      	push	{r7}
 8008562:	b087      	sub	sp, #28
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6a1b      	ldr	r3, [r3, #32]
 800856e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6a1b      	ldr	r3, [r3, #32]
 8008574:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	69db      	ldr	r3, [r3, #28]
 8008586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800858e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f023 0303 	bic.w	r3, r3, #3
 8008596:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	68fa      	ldr	r2, [r7, #12]
 800859e:	4313      	orrs	r3, r2
 80085a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80085a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	689b      	ldr	r3, [r3, #8]
 80085ae:	021b      	lsls	r3, r3, #8
 80085b0:	697a      	ldr	r2, [r7, #20]
 80085b2:	4313      	orrs	r3, r2
 80085b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	4a21      	ldr	r2, [pc, #132]	@ (8008640 <TIM_OC3_SetConfig+0xe0>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d003      	beq.n	80085c6 <TIM_OC3_SetConfig+0x66>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	4a20      	ldr	r2, [pc, #128]	@ (8008644 <TIM_OC3_SetConfig+0xe4>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d10d      	bne.n	80085e2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80085cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	68db      	ldr	r3, [r3, #12]
 80085d2:	021b      	lsls	r3, r3, #8
 80085d4:	697a      	ldr	r2, [r7, #20]
 80085d6:	4313      	orrs	r3, r2
 80085d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80085e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	4a16      	ldr	r2, [pc, #88]	@ (8008640 <TIM_OC3_SetConfig+0xe0>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d003      	beq.n	80085f2 <TIM_OC3_SetConfig+0x92>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	4a15      	ldr	r2, [pc, #84]	@ (8008644 <TIM_OC3_SetConfig+0xe4>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d113      	bne.n	800861a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80085f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008600:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	695b      	ldr	r3, [r3, #20]
 8008606:	011b      	lsls	r3, r3, #4
 8008608:	693a      	ldr	r2, [r7, #16]
 800860a:	4313      	orrs	r3, r2
 800860c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	699b      	ldr	r3, [r3, #24]
 8008612:	011b      	lsls	r3, r3, #4
 8008614:	693a      	ldr	r2, [r7, #16]
 8008616:	4313      	orrs	r3, r2
 8008618:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	693a      	ldr	r2, [r7, #16]
 800861e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	68fa      	ldr	r2, [r7, #12]
 8008624:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	685a      	ldr	r2, [r3, #4]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	697a      	ldr	r2, [r7, #20]
 8008632:	621a      	str	r2, [r3, #32]
}
 8008634:	bf00      	nop
 8008636:	371c      	adds	r7, #28
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr
 8008640:	40010000 	.word	0x40010000
 8008644:	40010400 	.word	0x40010400

08008648 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008648:	b480      	push	{r7}
 800864a:	b087      	sub	sp, #28
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6a1b      	ldr	r3, [r3, #32]
 8008656:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6a1b      	ldr	r3, [r3, #32]
 800865c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	69db      	ldr	r3, [r3, #28]
 800866e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800867e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	021b      	lsls	r3, r3, #8
 8008686:	68fa      	ldr	r2, [r7, #12]
 8008688:	4313      	orrs	r3, r2
 800868a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008692:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	689b      	ldr	r3, [r3, #8]
 8008698:	031b      	lsls	r3, r3, #12
 800869a:	693a      	ldr	r2, [r7, #16]
 800869c:	4313      	orrs	r3, r2
 800869e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	4a12      	ldr	r2, [pc, #72]	@ (80086ec <TIM_OC4_SetConfig+0xa4>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d003      	beq.n	80086b0 <TIM_OC4_SetConfig+0x68>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	4a11      	ldr	r2, [pc, #68]	@ (80086f0 <TIM_OC4_SetConfig+0xa8>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d109      	bne.n	80086c4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80086b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	695b      	ldr	r3, [r3, #20]
 80086bc:	019b      	lsls	r3, r3, #6
 80086be:	697a      	ldr	r2, [r7, #20]
 80086c0:	4313      	orrs	r3, r2
 80086c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	697a      	ldr	r2, [r7, #20]
 80086c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	68fa      	ldr	r2, [r7, #12]
 80086ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	685a      	ldr	r2, [r3, #4]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	693a      	ldr	r2, [r7, #16]
 80086dc:	621a      	str	r2, [r3, #32]
}
 80086de:	bf00      	nop
 80086e0:	371c      	adds	r7, #28
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr
 80086ea:	bf00      	nop
 80086ec:	40010000 	.word	0x40010000
 80086f0:	40010400 	.word	0x40010400

080086f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b087      	sub	sp, #28
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	60f8      	str	r0, [r7, #12]
 80086fc:	60b9      	str	r1, [r7, #8]
 80086fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	f003 031f 	and.w	r3, r3, #31
 8008706:	2201      	movs	r2, #1
 8008708:	fa02 f303 	lsl.w	r3, r2, r3
 800870c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	6a1a      	ldr	r2, [r3, #32]
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	43db      	mvns	r3, r3
 8008716:	401a      	ands	r2, r3
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	6a1a      	ldr	r2, [r3, #32]
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	f003 031f 	and.w	r3, r3, #31
 8008726:	6879      	ldr	r1, [r7, #4]
 8008728:	fa01 f303 	lsl.w	r3, r1, r3
 800872c:	431a      	orrs	r2, r3
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	621a      	str	r2, [r3, #32]
}
 8008732:	bf00      	nop
 8008734:	371c      	adds	r7, #28
 8008736:	46bd      	mov	sp, r7
 8008738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873c:	4770      	bx	lr
	...

08008740 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008740:	b480      	push	{r7}
 8008742:	b085      	sub	sp, #20
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008750:	2b01      	cmp	r3, #1
 8008752:	d101      	bne.n	8008758 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008754:	2302      	movs	r3, #2
 8008756:	e05a      	b.n	800880e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2201      	movs	r2, #1
 800875c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2202      	movs	r2, #2
 8008764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	689b      	ldr	r3, [r3, #8]
 8008776:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800877e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	68fa      	ldr	r2, [r7, #12]
 8008786:	4313      	orrs	r3, r2
 8008788:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	68fa      	ldr	r2, [r7, #12]
 8008790:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4a21      	ldr	r2, [pc, #132]	@ (800881c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d022      	beq.n	80087e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087a4:	d01d      	beq.n	80087e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a1d      	ldr	r2, [pc, #116]	@ (8008820 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d018      	beq.n	80087e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a1b      	ldr	r2, [pc, #108]	@ (8008824 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d013      	beq.n	80087e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4a1a      	ldr	r2, [pc, #104]	@ (8008828 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d00e      	beq.n	80087e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a18      	ldr	r2, [pc, #96]	@ (800882c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d009      	beq.n	80087e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a17      	ldr	r2, [pc, #92]	@ (8008830 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d004      	beq.n	80087e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a15      	ldr	r2, [pc, #84]	@ (8008834 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d10c      	bne.n	80087fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80087e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	68ba      	ldr	r2, [r7, #8]
 80087f0:	4313      	orrs	r3, r2
 80087f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	68ba      	ldr	r2, [r7, #8]
 80087fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2201      	movs	r2, #1
 8008800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2200      	movs	r2, #0
 8008808:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800880c:	2300      	movs	r3, #0
}
 800880e:	4618      	mov	r0, r3
 8008810:	3714      	adds	r7, #20
 8008812:	46bd      	mov	sp, r7
 8008814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008818:	4770      	bx	lr
 800881a:	bf00      	nop
 800881c:	40010000 	.word	0x40010000
 8008820:	40000400 	.word	0x40000400
 8008824:	40000800 	.word	0x40000800
 8008828:	40000c00 	.word	0x40000c00
 800882c:	40010400 	.word	0x40010400
 8008830:	40014000 	.word	0x40014000
 8008834:	40001800 	.word	0x40001800

08008838 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008838:	b480      	push	{r7}
 800883a:	b083      	sub	sp, #12
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008840:	bf00      	nop
 8008842:	370c      	adds	r7, #12
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr

0800884c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800884c:	b480      	push	{r7}
 800884e:	b083      	sub	sp, #12
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008854:	bf00      	nop
 8008856:	370c      	adds	r7, #12
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr

08008860 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b082      	sub	sp, #8
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d101      	bne.n	8008872 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800886e:	2301      	movs	r3, #1
 8008870:	e042      	b.n	80088f8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008878:	b2db      	uxtb	r3, r3
 800887a:	2b00      	cmp	r3, #0
 800887c:	d106      	bne.n	800888c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2200      	movs	r2, #0
 8008882:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f7fb f942 	bl	8003b10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2224      	movs	r2, #36	@ 0x24
 8008890:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	68da      	ldr	r2, [r3, #12]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80088a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f000 fdbf 	bl	8009428 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	691a      	ldr	r2, [r3, #16]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80088b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	695a      	ldr	r2, [r3, #20]
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80088c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	68da      	ldr	r2, [r3, #12]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80088d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2200      	movs	r2, #0
 80088de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2220      	movs	r2, #32
 80088e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2220      	movs	r2, #32
 80088ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2200      	movs	r2, #0
 80088f4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80088f6:	2300      	movs	r3, #0
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	3708      	adds	r7, #8
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b08a      	sub	sp, #40	@ 0x28
 8008904:	af02      	add	r7, sp, #8
 8008906:	60f8      	str	r0, [r7, #12]
 8008908:	60b9      	str	r1, [r7, #8]
 800890a:	603b      	str	r3, [r7, #0]
 800890c:	4613      	mov	r3, r2
 800890e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008910:	2300      	movs	r3, #0
 8008912:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800891a:	b2db      	uxtb	r3, r3
 800891c:	2b20      	cmp	r3, #32
 800891e:	d175      	bne.n	8008a0c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d002      	beq.n	800892c <HAL_UART_Transmit+0x2c>
 8008926:	88fb      	ldrh	r3, [r7, #6]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d101      	bne.n	8008930 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800892c:	2301      	movs	r3, #1
 800892e:	e06e      	b.n	8008a0e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2200      	movs	r2, #0
 8008934:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2221      	movs	r2, #33	@ 0x21
 800893a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800893e:	f7fb fa2f 	bl	8003da0 <HAL_GetTick>
 8008942:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	88fa      	ldrh	r2, [r7, #6]
 8008948:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	88fa      	ldrh	r2, [r7, #6]
 800894e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	689b      	ldr	r3, [r3, #8]
 8008954:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008958:	d108      	bne.n	800896c <HAL_UART_Transmit+0x6c>
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	691b      	ldr	r3, [r3, #16]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d104      	bne.n	800896c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008962:	2300      	movs	r3, #0
 8008964:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	61bb      	str	r3, [r7, #24]
 800896a:	e003      	b.n	8008974 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008970:	2300      	movs	r3, #0
 8008972:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008974:	e02e      	b.n	80089d4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	9300      	str	r3, [sp, #0]
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	2200      	movs	r2, #0
 800897e:	2180      	movs	r1, #128	@ 0x80
 8008980:	68f8      	ldr	r0, [r7, #12]
 8008982:	f000 fb21 	bl	8008fc8 <UART_WaitOnFlagUntilTimeout>
 8008986:	4603      	mov	r3, r0
 8008988:	2b00      	cmp	r3, #0
 800898a:	d005      	beq.n	8008998 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2220      	movs	r2, #32
 8008990:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008994:	2303      	movs	r3, #3
 8008996:	e03a      	b.n	8008a0e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008998:	69fb      	ldr	r3, [r7, #28]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d10b      	bne.n	80089b6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800899e:	69bb      	ldr	r3, [r7, #24]
 80089a0:	881b      	ldrh	r3, [r3, #0]
 80089a2:	461a      	mov	r2, r3
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80089ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80089ae:	69bb      	ldr	r3, [r7, #24]
 80089b0:	3302      	adds	r3, #2
 80089b2:	61bb      	str	r3, [r7, #24]
 80089b4:	e007      	b.n	80089c6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80089b6:	69fb      	ldr	r3, [r7, #28]
 80089b8:	781a      	ldrb	r2, [r3, #0]
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80089c0:	69fb      	ldr	r3, [r7, #28]
 80089c2:	3301      	adds	r3, #1
 80089c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80089ca:	b29b      	uxth	r3, r3
 80089cc:	3b01      	subs	r3, #1
 80089ce:	b29a      	uxth	r2, r3
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80089d8:	b29b      	uxth	r3, r3
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d1cb      	bne.n	8008976 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	9300      	str	r3, [sp, #0]
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	2200      	movs	r2, #0
 80089e6:	2140      	movs	r1, #64	@ 0x40
 80089e8:	68f8      	ldr	r0, [r7, #12]
 80089ea:	f000 faed 	bl	8008fc8 <UART_WaitOnFlagUntilTimeout>
 80089ee:	4603      	mov	r3, r0
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d005      	beq.n	8008a00 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2220      	movs	r2, #32
 80089f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80089fc:	2303      	movs	r3, #3
 80089fe:	e006      	b.n	8008a0e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2220      	movs	r2, #32
 8008a04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	e000      	b.n	8008a0e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008a0c:	2302      	movs	r3, #2
  }
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3720      	adds	r7, #32
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}

08008a16 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a16:	b580      	push	{r7, lr}
 8008a18:	b084      	sub	sp, #16
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	60f8      	str	r0, [r7, #12]
 8008a1e:	60b9      	str	r1, [r7, #8]
 8008a20:	4613      	mov	r3, r2
 8008a22:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008a2a:	b2db      	uxtb	r3, r3
 8008a2c:	2b20      	cmp	r3, #32
 8008a2e:	d112      	bne.n	8008a56 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d002      	beq.n	8008a3c <HAL_UART_Receive_IT+0x26>
 8008a36:	88fb      	ldrh	r3, [r7, #6]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d101      	bne.n	8008a40 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	e00b      	b.n	8008a58 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2200      	movs	r2, #0
 8008a44:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008a46:	88fb      	ldrh	r3, [r7, #6]
 8008a48:	461a      	mov	r2, r3
 8008a4a:	68b9      	ldr	r1, [r7, #8]
 8008a4c:	68f8      	ldr	r0, [r7, #12]
 8008a4e:	f000 fb14 	bl	800907a <UART_Start_Receive_IT>
 8008a52:	4603      	mov	r3, r0
 8008a54:	e000      	b.n	8008a58 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008a56:	2302      	movs	r3, #2
  }
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3710      	adds	r7, #16
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b0ba      	sub	sp, #232	@ 0xe8
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	68db      	ldr	r3, [r3, #12]
 8008a78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	695b      	ldr	r3, [r3, #20]
 8008a82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008a86:	2300      	movs	r3, #0
 8008a88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a96:	f003 030f 	and.w	r3, r3, #15
 8008a9a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008a9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d10f      	bne.n	8008ac6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008aaa:	f003 0320 	and.w	r3, r3, #32
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d009      	beq.n	8008ac6 <HAL_UART_IRQHandler+0x66>
 8008ab2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ab6:	f003 0320 	and.w	r3, r3, #32
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d003      	beq.n	8008ac6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 fbf4 	bl	80092ac <UART_Receive_IT>
      return;
 8008ac4:	e25b      	b.n	8008f7e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008ac6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	f000 80de 	beq.w	8008c8c <HAL_UART_IRQHandler+0x22c>
 8008ad0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ad4:	f003 0301 	and.w	r3, r3, #1
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d106      	bne.n	8008aea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008adc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ae0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	f000 80d1 	beq.w	8008c8c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008aee:	f003 0301 	and.w	r3, r3, #1
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d00b      	beq.n	8008b0e <HAL_UART_IRQHandler+0xae>
 8008af6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008afa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d005      	beq.n	8008b0e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b06:	f043 0201 	orr.w	r2, r3, #1
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b12:	f003 0304 	and.w	r3, r3, #4
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d00b      	beq.n	8008b32 <HAL_UART_IRQHandler+0xd2>
 8008b1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b1e:	f003 0301 	and.w	r3, r3, #1
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d005      	beq.n	8008b32 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b2a:	f043 0202 	orr.w	r2, r3, #2
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b36:	f003 0302 	and.w	r3, r3, #2
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d00b      	beq.n	8008b56 <HAL_UART_IRQHandler+0xf6>
 8008b3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b42:	f003 0301 	and.w	r3, r3, #1
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d005      	beq.n	8008b56 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b4e:	f043 0204 	orr.w	r2, r3, #4
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b5a:	f003 0308 	and.w	r3, r3, #8
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d011      	beq.n	8008b86 <HAL_UART_IRQHandler+0x126>
 8008b62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b66:	f003 0320 	and.w	r3, r3, #32
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d105      	bne.n	8008b7a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008b6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b72:	f003 0301 	and.w	r3, r3, #1
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d005      	beq.n	8008b86 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b7e:	f043 0208 	orr.w	r2, r3, #8
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	f000 81f2 	beq.w	8008f74 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008b90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b94:	f003 0320 	and.w	r3, r3, #32
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d008      	beq.n	8008bae <HAL_UART_IRQHandler+0x14e>
 8008b9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ba0:	f003 0320 	and.w	r3, r3, #32
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d002      	beq.n	8008bae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 fb7f 	bl	80092ac <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	695b      	ldr	r3, [r3, #20]
 8008bb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bb8:	2b40      	cmp	r3, #64	@ 0x40
 8008bba:	bf0c      	ite	eq
 8008bbc:	2301      	moveq	r3, #1
 8008bbe:	2300      	movne	r3, #0
 8008bc0:	b2db      	uxtb	r3, r3
 8008bc2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bca:	f003 0308 	and.w	r3, r3, #8
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d103      	bne.n	8008bda <HAL_UART_IRQHandler+0x17a>
 8008bd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d04f      	beq.n	8008c7a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f000 fa87 	bl	80090ee <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	695b      	ldr	r3, [r3, #20]
 8008be6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bea:	2b40      	cmp	r3, #64	@ 0x40
 8008bec:	d141      	bne.n	8008c72 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	3314      	adds	r3, #20
 8008bf4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008bfc:	e853 3f00 	ldrex	r3, [r3]
 8008c00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008c04:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008c08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	3314      	adds	r3, #20
 8008c16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008c1a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008c1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008c26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008c2a:	e841 2300 	strex	r3, r2, [r1]
 8008c2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008c32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d1d9      	bne.n	8008bee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d013      	beq.n	8008c6a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c46:	4a7e      	ldr	r2, [pc, #504]	@ (8008e40 <HAL_UART_IRQHandler+0x3e0>)
 8008c48:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f7fb fb2e 	bl	80042b0 <HAL_DMA_Abort_IT>
 8008c54:	4603      	mov	r3, r0
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d016      	beq.n	8008c88 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008c64:	4610      	mov	r0, r2
 8008c66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c68:	e00e      	b.n	8008c88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f7fa fa5e 	bl	800312c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c70:	e00a      	b.n	8008c88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f7fa fa5a 	bl	800312c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c78:	e006      	b.n	8008c88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f7fa fa56 	bl	800312c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2200      	movs	r2, #0
 8008c84:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008c86:	e175      	b.n	8008f74 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c88:	bf00      	nop
    return;
 8008c8a:	e173      	b.n	8008f74 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	f040 814f 	bne.w	8008f34 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c9a:	f003 0310 	and.w	r3, r3, #16
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	f000 8148 	beq.w	8008f34 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008ca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ca8:	f003 0310 	and.w	r3, r3, #16
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	f000 8141 	beq.w	8008f34 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	60bb      	str	r3, [r7, #8]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	60bb      	str	r3, [r7, #8]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	60bb      	str	r3, [r7, #8]
 8008cc6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	695b      	ldr	r3, [r3, #20]
 8008cce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cd2:	2b40      	cmp	r3, #64	@ 0x40
 8008cd4:	f040 80b6 	bne.w	8008e44 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008ce4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	f000 8145 	beq.w	8008f78 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008cf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	f080 813e 	bcs.w	8008f78 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008d02:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d08:	69db      	ldr	r3, [r3, #28]
 8008d0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d0e:	f000 8088 	beq.w	8008e22 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	330c      	adds	r3, #12
 8008d18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008d20:	e853 3f00 	ldrex	r3, [r3]
 8008d24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008d28:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008d2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	330c      	adds	r3, #12
 8008d3a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008d3e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008d42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d46:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008d4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008d4e:	e841 2300 	strex	r3, r2, [r1]
 8008d52:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008d56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d1d9      	bne.n	8008d12 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	3314      	adds	r3, #20
 8008d64:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008d68:	e853 3f00 	ldrex	r3, [r3]
 8008d6c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008d6e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008d70:	f023 0301 	bic.w	r3, r3, #1
 8008d74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	3314      	adds	r3, #20
 8008d7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008d82:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008d86:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d88:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008d8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008d8e:	e841 2300 	strex	r3, r2, [r1]
 8008d92:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008d94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d1e1      	bne.n	8008d5e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	3314      	adds	r3, #20
 8008da0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008da4:	e853 3f00 	ldrex	r3, [r3]
 8008da8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008daa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008dac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008db0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	3314      	adds	r3, #20
 8008dba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008dbe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008dc0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008dc4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008dc6:	e841 2300 	strex	r3, r2, [r1]
 8008dca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008dcc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d1e3      	bne.n	8008d9a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2220      	movs	r2, #32
 8008dd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	330c      	adds	r3, #12
 8008de6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008de8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008dea:	e853 3f00 	ldrex	r3, [r3]
 8008dee:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008df0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008df2:	f023 0310 	bic.w	r3, r3, #16
 8008df6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	330c      	adds	r3, #12
 8008e00:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008e04:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008e06:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e08:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008e0a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008e0c:	e841 2300 	strex	r3, r2, [r1]
 8008e10:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008e12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d1e3      	bne.n	8008de0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f7fb f9d7 	bl	80041d0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2202      	movs	r2, #2
 8008e26:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008e30:	b29b      	uxth	r3, r3
 8008e32:	1ad3      	subs	r3, r2, r3
 8008e34:	b29b      	uxth	r3, r3
 8008e36:	4619      	mov	r1, r3
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 f8ad 	bl	8008f98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008e3e:	e09b      	b.n	8008f78 <HAL_UART_IRQHandler+0x518>
 8008e40:	080091b5 	.word	0x080091b5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	1ad3      	subs	r3, r2, r3
 8008e50:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	f000 808e 	beq.w	8008f7c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008e60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	f000 8089 	beq.w	8008f7c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	330c      	adds	r3, #12
 8008e70:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e74:	e853 3f00 	ldrex	r3, [r3]
 8008e78:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008e7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e80:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	330c      	adds	r3, #12
 8008e8a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008e8e:	647a      	str	r2, [r7, #68]	@ 0x44
 8008e90:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e92:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008e94:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008e96:	e841 2300 	strex	r3, r2, [r1]
 8008e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008e9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d1e3      	bne.n	8008e6a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	3314      	adds	r3, #20
 8008ea8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eac:	e853 3f00 	ldrex	r3, [r3]
 8008eb0:	623b      	str	r3, [r7, #32]
   return(result);
 8008eb2:	6a3b      	ldr	r3, [r7, #32]
 8008eb4:	f023 0301 	bic.w	r3, r3, #1
 8008eb8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	3314      	adds	r3, #20
 8008ec2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008ec6:	633a      	str	r2, [r7, #48]	@ 0x30
 8008ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ecc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ece:	e841 2300 	strex	r3, r2, [r1]
 8008ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d1e3      	bne.n	8008ea2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2220      	movs	r2, #32
 8008ede:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	330c      	adds	r3, #12
 8008eee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	e853 3f00 	ldrex	r3, [r3]
 8008ef6:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	f023 0310 	bic.w	r3, r3, #16
 8008efe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	330c      	adds	r3, #12
 8008f08:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008f0c:	61fa      	str	r2, [r7, #28]
 8008f0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f10:	69b9      	ldr	r1, [r7, #24]
 8008f12:	69fa      	ldr	r2, [r7, #28]
 8008f14:	e841 2300 	strex	r3, r2, [r1]
 8008f18:	617b      	str	r3, [r7, #20]
   return(result);
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d1e3      	bne.n	8008ee8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2202      	movs	r2, #2
 8008f24:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008f26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008f2a:	4619      	mov	r1, r3
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f000 f833 	bl	8008f98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008f32:	e023      	b.n	8008f7c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008f34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d009      	beq.n	8008f54 <HAL_UART_IRQHandler+0x4f4>
 8008f40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d003      	beq.n	8008f54 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f000 f945 	bl	80091dc <UART_Transmit_IT>
    return;
 8008f52:	e014      	b.n	8008f7e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008f54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d00e      	beq.n	8008f7e <HAL_UART_IRQHandler+0x51e>
 8008f60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d008      	beq.n	8008f7e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f000 f985 	bl	800927c <UART_EndTransmit_IT>
    return;
 8008f72:	e004      	b.n	8008f7e <HAL_UART_IRQHandler+0x51e>
    return;
 8008f74:	bf00      	nop
 8008f76:	e002      	b.n	8008f7e <HAL_UART_IRQHandler+0x51e>
      return;
 8008f78:	bf00      	nop
 8008f7a:	e000      	b.n	8008f7e <HAL_UART_IRQHandler+0x51e>
      return;
 8008f7c:	bf00      	nop
  }
}
 8008f7e:	37e8      	adds	r7, #232	@ 0xe8
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}

08008f84 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b083      	sub	sp, #12
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008f8c:	bf00      	nop
 8008f8e:	370c      	adds	r7, #12
 8008f90:	46bd      	mov	sp, r7
 8008f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f96:	4770      	bx	lr

08008f98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b083      	sub	sp, #12
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
 8008fa0:	460b      	mov	r3, r1
 8008fa2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008fa4:	bf00      	nop
 8008fa6:	370c      	adds	r7, #12
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr

08008fb0 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b083      	sub	sp, #12
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	370c      	adds	r7, #12
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b086      	sub	sp, #24
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	60f8      	str	r0, [r7, #12]
 8008fd0:	60b9      	str	r1, [r7, #8]
 8008fd2:	603b      	str	r3, [r7, #0]
 8008fd4:	4613      	mov	r3, r2
 8008fd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fd8:	e03b      	b.n	8009052 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008fda:	6a3b      	ldr	r3, [r7, #32]
 8008fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fe0:	d037      	beq.n	8009052 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008fe2:	f7fa fedd 	bl	8003da0 <HAL_GetTick>
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	1ad3      	subs	r3, r2, r3
 8008fec:	6a3a      	ldr	r2, [r7, #32]
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d302      	bcc.n	8008ff8 <UART_WaitOnFlagUntilTimeout+0x30>
 8008ff2:	6a3b      	ldr	r3, [r7, #32]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d101      	bne.n	8008ffc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008ff8:	2303      	movs	r3, #3
 8008ffa:	e03a      	b.n	8009072 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	68db      	ldr	r3, [r3, #12]
 8009002:	f003 0304 	and.w	r3, r3, #4
 8009006:	2b00      	cmp	r3, #0
 8009008:	d023      	beq.n	8009052 <UART_WaitOnFlagUntilTimeout+0x8a>
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	2b80      	cmp	r3, #128	@ 0x80
 800900e:	d020      	beq.n	8009052 <UART_WaitOnFlagUntilTimeout+0x8a>
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	2b40      	cmp	r3, #64	@ 0x40
 8009014:	d01d      	beq.n	8009052 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f003 0308 	and.w	r3, r3, #8
 8009020:	2b08      	cmp	r3, #8
 8009022:	d116      	bne.n	8009052 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009024:	2300      	movs	r3, #0
 8009026:	617b      	str	r3, [r7, #20]
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	617b      	str	r3, [r7, #20]
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	617b      	str	r3, [r7, #20]
 8009038:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800903a:	68f8      	ldr	r0, [r7, #12]
 800903c:	f000 f857 	bl	80090ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2208      	movs	r2, #8
 8009044:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	2200      	movs	r2, #0
 800904a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800904e:	2301      	movs	r3, #1
 8009050:	e00f      	b.n	8009072 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	681a      	ldr	r2, [r3, #0]
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	4013      	ands	r3, r2
 800905c:	68ba      	ldr	r2, [r7, #8]
 800905e:	429a      	cmp	r2, r3
 8009060:	bf0c      	ite	eq
 8009062:	2301      	moveq	r3, #1
 8009064:	2300      	movne	r3, #0
 8009066:	b2db      	uxtb	r3, r3
 8009068:	461a      	mov	r2, r3
 800906a:	79fb      	ldrb	r3, [r7, #7]
 800906c:	429a      	cmp	r2, r3
 800906e:	d0b4      	beq.n	8008fda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009070:	2300      	movs	r3, #0
}
 8009072:	4618      	mov	r0, r3
 8009074:	3718      	adds	r7, #24
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}

0800907a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800907a:	b480      	push	{r7}
 800907c:	b085      	sub	sp, #20
 800907e:	af00      	add	r7, sp, #0
 8009080:	60f8      	str	r0, [r7, #12]
 8009082:	60b9      	str	r1, [r7, #8]
 8009084:	4613      	mov	r3, r2
 8009086:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	68ba      	ldr	r2, [r7, #8]
 800908c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	88fa      	ldrh	r2, [r7, #6]
 8009092:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	88fa      	ldrh	r2, [r7, #6]
 8009098:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2200      	movs	r2, #0
 800909e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	2222      	movs	r2, #34	@ 0x22
 80090a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	691b      	ldr	r3, [r3, #16]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d007      	beq.n	80090c0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	68da      	ldr	r2, [r3, #12]
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80090be:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	695a      	ldr	r2, [r3, #20]
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f042 0201 	orr.w	r2, r2, #1
 80090ce:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	68da      	ldr	r2, [r3, #12]
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f042 0220 	orr.w	r2, r2, #32
 80090de:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80090e0:	2300      	movs	r3, #0
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3714      	adds	r7, #20
 80090e6:	46bd      	mov	sp, r7
 80090e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ec:	4770      	bx	lr

080090ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80090ee:	b480      	push	{r7}
 80090f0:	b095      	sub	sp, #84	@ 0x54
 80090f2:	af00      	add	r7, sp, #0
 80090f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	330c      	adds	r3, #12
 80090fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009100:	e853 3f00 	ldrex	r3, [r3]
 8009104:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009108:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800910c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	330c      	adds	r3, #12
 8009114:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009116:	643a      	str	r2, [r7, #64]	@ 0x40
 8009118:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800911a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800911c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800911e:	e841 2300 	strex	r3, r2, [r1]
 8009122:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009126:	2b00      	cmp	r3, #0
 8009128:	d1e5      	bne.n	80090f6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	3314      	adds	r3, #20
 8009130:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009132:	6a3b      	ldr	r3, [r7, #32]
 8009134:	e853 3f00 	ldrex	r3, [r3]
 8009138:	61fb      	str	r3, [r7, #28]
   return(result);
 800913a:	69fb      	ldr	r3, [r7, #28]
 800913c:	f023 0301 	bic.w	r3, r3, #1
 8009140:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	3314      	adds	r3, #20
 8009148:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800914a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800914c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800914e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009150:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009152:	e841 2300 	strex	r3, r2, [r1]
 8009156:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800915a:	2b00      	cmp	r3, #0
 800915c:	d1e5      	bne.n	800912a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009162:	2b01      	cmp	r3, #1
 8009164:	d119      	bne.n	800919a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	330c      	adds	r3, #12
 800916c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	e853 3f00 	ldrex	r3, [r3]
 8009174:	60bb      	str	r3, [r7, #8]
   return(result);
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	f023 0310 	bic.w	r3, r3, #16
 800917c:	647b      	str	r3, [r7, #68]	@ 0x44
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	330c      	adds	r3, #12
 8009184:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009186:	61ba      	str	r2, [r7, #24]
 8009188:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800918a:	6979      	ldr	r1, [r7, #20]
 800918c:	69ba      	ldr	r2, [r7, #24]
 800918e:	e841 2300 	strex	r3, r2, [r1]
 8009192:	613b      	str	r3, [r7, #16]
   return(result);
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d1e5      	bne.n	8009166 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2220      	movs	r2, #32
 800919e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2200      	movs	r2, #0
 80091a6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80091a8:	bf00      	nop
 80091aa:	3754      	adds	r7, #84	@ 0x54
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr

080091b4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b084      	sub	sp, #16
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	2200      	movs	r2, #0
 80091c6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2200      	movs	r2, #0
 80091cc:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80091ce:	68f8      	ldr	r0, [r7, #12]
 80091d0:	f7f9 ffac 	bl	800312c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091d4:	bf00      	nop
 80091d6:	3710      	adds	r7, #16
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80091dc:	b480      	push	{r7}
 80091de:	b085      	sub	sp, #20
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80091ea:	b2db      	uxtb	r3, r3
 80091ec:	2b21      	cmp	r3, #33	@ 0x21
 80091ee:	d13e      	bne.n	800926e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80091f8:	d114      	bne.n	8009224 <UART_Transmit_IT+0x48>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	691b      	ldr	r3, [r3, #16]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d110      	bne.n	8009224 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6a1b      	ldr	r3, [r3, #32]
 8009206:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	881b      	ldrh	r3, [r3, #0]
 800920c:	461a      	mov	r2, r3
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009216:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6a1b      	ldr	r3, [r3, #32]
 800921c:	1c9a      	adds	r2, r3, #2
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	621a      	str	r2, [r3, #32]
 8009222:	e008      	b.n	8009236 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6a1b      	ldr	r3, [r3, #32]
 8009228:	1c59      	adds	r1, r3, #1
 800922a:	687a      	ldr	r2, [r7, #4]
 800922c:	6211      	str	r1, [r2, #32]
 800922e:	781a      	ldrb	r2, [r3, #0]
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800923a:	b29b      	uxth	r3, r3
 800923c:	3b01      	subs	r3, #1
 800923e:	b29b      	uxth	r3, r3
 8009240:	687a      	ldr	r2, [r7, #4]
 8009242:	4619      	mov	r1, r3
 8009244:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009246:	2b00      	cmp	r3, #0
 8009248:	d10f      	bne.n	800926a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	68da      	ldr	r2, [r3, #12]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009258:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	68da      	ldr	r2, [r3, #12]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009268:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800926a:	2300      	movs	r3, #0
 800926c:	e000      	b.n	8009270 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800926e:	2302      	movs	r3, #2
  }
}
 8009270:	4618      	mov	r0, r3
 8009272:	3714      	adds	r7, #20
 8009274:	46bd      	mov	sp, r7
 8009276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927a:	4770      	bx	lr

0800927c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b082      	sub	sp, #8
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	68da      	ldr	r2, [r3, #12]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009292:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2220      	movs	r2, #32
 8009298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f7ff fe71 	bl	8008f84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80092a2:	2300      	movs	r3, #0
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3708      	adds	r7, #8
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b08c      	sub	sp, #48	@ 0x30
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80092ba:	b2db      	uxtb	r3, r3
 80092bc:	2b22      	cmp	r3, #34	@ 0x22
 80092be:	f040 80ae 	bne.w	800941e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	689b      	ldr	r3, [r3, #8]
 80092c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092ca:	d117      	bne.n	80092fc <UART_Receive_IT+0x50>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	691b      	ldr	r3, [r3, #16]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d113      	bne.n	80092fc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80092d4:	2300      	movs	r3, #0
 80092d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092dc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	b29b      	uxth	r3, r3
 80092e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092ea:	b29a      	uxth	r2, r3
 80092ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092ee:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092f4:	1c9a      	adds	r2, r3, #2
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	629a      	str	r2, [r3, #40]	@ 0x28
 80092fa:	e026      	b.n	800934a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009300:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009302:	2300      	movs	r3, #0
 8009304:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	689b      	ldr	r3, [r3, #8]
 800930a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800930e:	d007      	beq.n	8009320 <UART_Receive_IT+0x74>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	689b      	ldr	r3, [r3, #8]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d10a      	bne.n	800932e <UART_Receive_IT+0x82>
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	691b      	ldr	r3, [r3, #16]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d106      	bne.n	800932e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	b2da      	uxtb	r2, r3
 8009328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800932a:	701a      	strb	r2, [r3, #0]
 800932c:	e008      	b.n	8009340 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	b2db      	uxtb	r3, r3
 8009336:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800933a:	b2da      	uxtb	r2, r3
 800933c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800933e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009344:	1c5a      	adds	r2, r3, #1
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800934e:	b29b      	uxth	r3, r3
 8009350:	3b01      	subs	r3, #1
 8009352:	b29b      	uxth	r3, r3
 8009354:	687a      	ldr	r2, [r7, #4]
 8009356:	4619      	mov	r1, r3
 8009358:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800935a:	2b00      	cmp	r3, #0
 800935c:	d15d      	bne.n	800941a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	68da      	ldr	r2, [r3, #12]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f022 0220 	bic.w	r2, r2, #32
 800936c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	68da      	ldr	r2, [r3, #12]
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800937c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	695a      	ldr	r2, [r3, #20]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f022 0201 	bic.w	r2, r2, #1
 800938c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2220      	movs	r2, #32
 8009392:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2200      	movs	r2, #0
 800939a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	d135      	bne.n	8009410 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2200      	movs	r2, #0
 80093a8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	330c      	adds	r3, #12
 80093b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	e853 3f00 	ldrex	r3, [r3]
 80093b8:	613b      	str	r3, [r7, #16]
   return(result);
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	f023 0310 	bic.w	r3, r3, #16
 80093c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	330c      	adds	r3, #12
 80093c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093ca:	623a      	str	r2, [r7, #32]
 80093cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ce:	69f9      	ldr	r1, [r7, #28]
 80093d0:	6a3a      	ldr	r2, [r7, #32]
 80093d2:	e841 2300 	strex	r3, r2, [r1]
 80093d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80093d8:	69bb      	ldr	r3, [r7, #24]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d1e5      	bne.n	80093aa <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f003 0310 	and.w	r3, r3, #16
 80093e8:	2b10      	cmp	r3, #16
 80093ea:	d10a      	bne.n	8009402 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80093ec:	2300      	movs	r3, #0
 80093ee:	60fb      	str	r3, [r7, #12]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	60fb      	str	r3, [r7, #12]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	685b      	ldr	r3, [r3, #4]
 80093fe:	60fb      	str	r3, [r7, #12]
 8009400:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009406:	4619      	mov	r1, r3
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f7ff fdc5 	bl	8008f98 <HAL_UARTEx_RxEventCallback>
 800940e:	e002      	b.n	8009416 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f7f9 fe79 	bl	8003108 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009416:	2300      	movs	r3, #0
 8009418:	e002      	b.n	8009420 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800941a:	2300      	movs	r3, #0
 800941c:	e000      	b.n	8009420 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800941e:	2302      	movs	r3, #2
  }
}
 8009420:	4618      	mov	r0, r3
 8009422:	3730      	adds	r7, #48	@ 0x30
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}

08009428 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009428:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800942c:	b0c0      	sub	sp, #256	@ 0x100
 800942e:	af00      	add	r7, sp, #0
 8009430:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	691b      	ldr	r3, [r3, #16]
 800943c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009444:	68d9      	ldr	r1, [r3, #12]
 8009446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800944a:	681a      	ldr	r2, [r3, #0]
 800944c:	ea40 0301 	orr.w	r3, r0, r1
 8009450:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009456:	689a      	ldr	r2, [r3, #8]
 8009458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800945c:	691b      	ldr	r3, [r3, #16]
 800945e:	431a      	orrs	r2, r3
 8009460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009464:	695b      	ldr	r3, [r3, #20]
 8009466:	431a      	orrs	r2, r3
 8009468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800946c:	69db      	ldr	r3, [r3, #28]
 800946e:	4313      	orrs	r3, r2
 8009470:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	68db      	ldr	r3, [r3, #12]
 800947c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009480:	f021 010c 	bic.w	r1, r1, #12
 8009484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009488:	681a      	ldr	r2, [r3, #0]
 800948a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800948e:	430b      	orrs	r3, r1
 8009490:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	695b      	ldr	r3, [r3, #20]
 800949a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800949e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094a2:	6999      	ldr	r1, [r3, #24]
 80094a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094a8:	681a      	ldr	r2, [r3, #0]
 80094aa:	ea40 0301 	orr.w	r3, r0, r1
 80094ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80094b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094b4:	681a      	ldr	r2, [r3, #0]
 80094b6:	4b8f      	ldr	r3, [pc, #572]	@ (80096f4 <UART_SetConfig+0x2cc>)
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d005      	beq.n	80094c8 <UART_SetConfig+0xa0>
 80094bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094c0:	681a      	ldr	r2, [r3, #0]
 80094c2:	4b8d      	ldr	r3, [pc, #564]	@ (80096f8 <UART_SetConfig+0x2d0>)
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d104      	bne.n	80094d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80094c8:	f7fc fedc 	bl	8006284 <HAL_RCC_GetPCLK2Freq>
 80094cc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80094d0:	e003      	b.n	80094da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80094d2:	f7fc fec3 	bl	800625c <HAL_RCC_GetPCLK1Freq>
 80094d6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80094da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094de:	69db      	ldr	r3, [r3, #28]
 80094e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80094e4:	f040 810c 	bne.w	8009700 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80094e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80094ec:	2200      	movs	r2, #0
 80094ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80094f2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80094f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80094fa:	4622      	mov	r2, r4
 80094fc:	462b      	mov	r3, r5
 80094fe:	1891      	adds	r1, r2, r2
 8009500:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009502:	415b      	adcs	r3, r3
 8009504:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009506:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800950a:	4621      	mov	r1, r4
 800950c:	eb12 0801 	adds.w	r8, r2, r1
 8009510:	4629      	mov	r1, r5
 8009512:	eb43 0901 	adc.w	r9, r3, r1
 8009516:	f04f 0200 	mov.w	r2, #0
 800951a:	f04f 0300 	mov.w	r3, #0
 800951e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009522:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009526:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800952a:	4690      	mov	r8, r2
 800952c:	4699      	mov	r9, r3
 800952e:	4623      	mov	r3, r4
 8009530:	eb18 0303 	adds.w	r3, r8, r3
 8009534:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009538:	462b      	mov	r3, r5
 800953a:	eb49 0303 	adc.w	r3, r9, r3
 800953e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009546:	685b      	ldr	r3, [r3, #4]
 8009548:	2200      	movs	r2, #0
 800954a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800954e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009552:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009556:	460b      	mov	r3, r1
 8009558:	18db      	adds	r3, r3, r3
 800955a:	653b      	str	r3, [r7, #80]	@ 0x50
 800955c:	4613      	mov	r3, r2
 800955e:	eb42 0303 	adc.w	r3, r2, r3
 8009562:	657b      	str	r3, [r7, #84]	@ 0x54
 8009564:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009568:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800956c:	f7f7 fba6 	bl	8000cbc <__aeabi_uldivmod>
 8009570:	4602      	mov	r2, r0
 8009572:	460b      	mov	r3, r1
 8009574:	4b61      	ldr	r3, [pc, #388]	@ (80096fc <UART_SetConfig+0x2d4>)
 8009576:	fba3 2302 	umull	r2, r3, r3, r2
 800957a:	095b      	lsrs	r3, r3, #5
 800957c:	011c      	lsls	r4, r3, #4
 800957e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009582:	2200      	movs	r2, #0
 8009584:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009588:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800958c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009590:	4642      	mov	r2, r8
 8009592:	464b      	mov	r3, r9
 8009594:	1891      	adds	r1, r2, r2
 8009596:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009598:	415b      	adcs	r3, r3
 800959a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800959c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80095a0:	4641      	mov	r1, r8
 80095a2:	eb12 0a01 	adds.w	sl, r2, r1
 80095a6:	4649      	mov	r1, r9
 80095a8:	eb43 0b01 	adc.w	fp, r3, r1
 80095ac:	f04f 0200 	mov.w	r2, #0
 80095b0:	f04f 0300 	mov.w	r3, #0
 80095b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80095b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80095bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80095c0:	4692      	mov	sl, r2
 80095c2:	469b      	mov	fp, r3
 80095c4:	4643      	mov	r3, r8
 80095c6:	eb1a 0303 	adds.w	r3, sl, r3
 80095ca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80095ce:	464b      	mov	r3, r9
 80095d0:	eb4b 0303 	adc.w	r3, fp, r3
 80095d4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80095d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095dc:	685b      	ldr	r3, [r3, #4]
 80095de:	2200      	movs	r2, #0
 80095e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80095e4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80095e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80095ec:	460b      	mov	r3, r1
 80095ee:	18db      	adds	r3, r3, r3
 80095f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80095f2:	4613      	mov	r3, r2
 80095f4:	eb42 0303 	adc.w	r3, r2, r3
 80095f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80095fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80095fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009602:	f7f7 fb5b 	bl	8000cbc <__aeabi_uldivmod>
 8009606:	4602      	mov	r2, r0
 8009608:	460b      	mov	r3, r1
 800960a:	4611      	mov	r1, r2
 800960c:	4b3b      	ldr	r3, [pc, #236]	@ (80096fc <UART_SetConfig+0x2d4>)
 800960e:	fba3 2301 	umull	r2, r3, r3, r1
 8009612:	095b      	lsrs	r3, r3, #5
 8009614:	2264      	movs	r2, #100	@ 0x64
 8009616:	fb02 f303 	mul.w	r3, r2, r3
 800961a:	1acb      	subs	r3, r1, r3
 800961c:	00db      	lsls	r3, r3, #3
 800961e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009622:	4b36      	ldr	r3, [pc, #216]	@ (80096fc <UART_SetConfig+0x2d4>)
 8009624:	fba3 2302 	umull	r2, r3, r3, r2
 8009628:	095b      	lsrs	r3, r3, #5
 800962a:	005b      	lsls	r3, r3, #1
 800962c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009630:	441c      	add	r4, r3
 8009632:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009636:	2200      	movs	r2, #0
 8009638:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800963c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009640:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009644:	4642      	mov	r2, r8
 8009646:	464b      	mov	r3, r9
 8009648:	1891      	adds	r1, r2, r2
 800964a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800964c:	415b      	adcs	r3, r3
 800964e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009650:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009654:	4641      	mov	r1, r8
 8009656:	1851      	adds	r1, r2, r1
 8009658:	6339      	str	r1, [r7, #48]	@ 0x30
 800965a:	4649      	mov	r1, r9
 800965c:	414b      	adcs	r3, r1
 800965e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009660:	f04f 0200 	mov.w	r2, #0
 8009664:	f04f 0300 	mov.w	r3, #0
 8009668:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800966c:	4659      	mov	r1, fp
 800966e:	00cb      	lsls	r3, r1, #3
 8009670:	4651      	mov	r1, sl
 8009672:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009676:	4651      	mov	r1, sl
 8009678:	00ca      	lsls	r2, r1, #3
 800967a:	4610      	mov	r0, r2
 800967c:	4619      	mov	r1, r3
 800967e:	4603      	mov	r3, r0
 8009680:	4642      	mov	r2, r8
 8009682:	189b      	adds	r3, r3, r2
 8009684:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009688:	464b      	mov	r3, r9
 800968a:	460a      	mov	r2, r1
 800968c:	eb42 0303 	adc.w	r3, r2, r3
 8009690:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009698:	685b      	ldr	r3, [r3, #4]
 800969a:	2200      	movs	r2, #0
 800969c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80096a0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80096a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80096a8:	460b      	mov	r3, r1
 80096aa:	18db      	adds	r3, r3, r3
 80096ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80096ae:	4613      	mov	r3, r2
 80096b0:	eb42 0303 	adc.w	r3, r2, r3
 80096b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80096b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80096ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80096be:	f7f7 fafd 	bl	8000cbc <__aeabi_uldivmod>
 80096c2:	4602      	mov	r2, r0
 80096c4:	460b      	mov	r3, r1
 80096c6:	4b0d      	ldr	r3, [pc, #52]	@ (80096fc <UART_SetConfig+0x2d4>)
 80096c8:	fba3 1302 	umull	r1, r3, r3, r2
 80096cc:	095b      	lsrs	r3, r3, #5
 80096ce:	2164      	movs	r1, #100	@ 0x64
 80096d0:	fb01 f303 	mul.w	r3, r1, r3
 80096d4:	1ad3      	subs	r3, r2, r3
 80096d6:	00db      	lsls	r3, r3, #3
 80096d8:	3332      	adds	r3, #50	@ 0x32
 80096da:	4a08      	ldr	r2, [pc, #32]	@ (80096fc <UART_SetConfig+0x2d4>)
 80096dc:	fba2 2303 	umull	r2, r3, r2, r3
 80096e0:	095b      	lsrs	r3, r3, #5
 80096e2:	f003 0207 	and.w	r2, r3, #7
 80096e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4422      	add	r2, r4
 80096ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80096f0:	e106      	b.n	8009900 <UART_SetConfig+0x4d8>
 80096f2:	bf00      	nop
 80096f4:	40011000 	.word	0x40011000
 80096f8:	40011400 	.word	0x40011400
 80096fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009700:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009704:	2200      	movs	r2, #0
 8009706:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800970a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800970e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009712:	4642      	mov	r2, r8
 8009714:	464b      	mov	r3, r9
 8009716:	1891      	adds	r1, r2, r2
 8009718:	6239      	str	r1, [r7, #32]
 800971a:	415b      	adcs	r3, r3
 800971c:	627b      	str	r3, [r7, #36]	@ 0x24
 800971e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009722:	4641      	mov	r1, r8
 8009724:	1854      	adds	r4, r2, r1
 8009726:	4649      	mov	r1, r9
 8009728:	eb43 0501 	adc.w	r5, r3, r1
 800972c:	f04f 0200 	mov.w	r2, #0
 8009730:	f04f 0300 	mov.w	r3, #0
 8009734:	00eb      	lsls	r3, r5, #3
 8009736:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800973a:	00e2      	lsls	r2, r4, #3
 800973c:	4614      	mov	r4, r2
 800973e:	461d      	mov	r5, r3
 8009740:	4643      	mov	r3, r8
 8009742:	18e3      	adds	r3, r4, r3
 8009744:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009748:	464b      	mov	r3, r9
 800974a:	eb45 0303 	adc.w	r3, r5, r3
 800974e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009756:	685b      	ldr	r3, [r3, #4]
 8009758:	2200      	movs	r2, #0
 800975a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800975e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009762:	f04f 0200 	mov.w	r2, #0
 8009766:	f04f 0300 	mov.w	r3, #0
 800976a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800976e:	4629      	mov	r1, r5
 8009770:	008b      	lsls	r3, r1, #2
 8009772:	4621      	mov	r1, r4
 8009774:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009778:	4621      	mov	r1, r4
 800977a:	008a      	lsls	r2, r1, #2
 800977c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009780:	f7f7 fa9c 	bl	8000cbc <__aeabi_uldivmod>
 8009784:	4602      	mov	r2, r0
 8009786:	460b      	mov	r3, r1
 8009788:	4b60      	ldr	r3, [pc, #384]	@ (800990c <UART_SetConfig+0x4e4>)
 800978a:	fba3 2302 	umull	r2, r3, r3, r2
 800978e:	095b      	lsrs	r3, r3, #5
 8009790:	011c      	lsls	r4, r3, #4
 8009792:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009796:	2200      	movs	r2, #0
 8009798:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800979c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80097a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80097a4:	4642      	mov	r2, r8
 80097a6:	464b      	mov	r3, r9
 80097a8:	1891      	adds	r1, r2, r2
 80097aa:	61b9      	str	r1, [r7, #24]
 80097ac:	415b      	adcs	r3, r3
 80097ae:	61fb      	str	r3, [r7, #28]
 80097b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80097b4:	4641      	mov	r1, r8
 80097b6:	1851      	adds	r1, r2, r1
 80097b8:	6139      	str	r1, [r7, #16]
 80097ba:	4649      	mov	r1, r9
 80097bc:	414b      	adcs	r3, r1
 80097be:	617b      	str	r3, [r7, #20]
 80097c0:	f04f 0200 	mov.w	r2, #0
 80097c4:	f04f 0300 	mov.w	r3, #0
 80097c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80097cc:	4659      	mov	r1, fp
 80097ce:	00cb      	lsls	r3, r1, #3
 80097d0:	4651      	mov	r1, sl
 80097d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80097d6:	4651      	mov	r1, sl
 80097d8:	00ca      	lsls	r2, r1, #3
 80097da:	4610      	mov	r0, r2
 80097dc:	4619      	mov	r1, r3
 80097de:	4603      	mov	r3, r0
 80097e0:	4642      	mov	r2, r8
 80097e2:	189b      	adds	r3, r3, r2
 80097e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80097e8:	464b      	mov	r3, r9
 80097ea:	460a      	mov	r2, r1
 80097ec:	eb42 0303 	adc.w	r3, r2, r3
 80097f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80097f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097f8:	685b      	ldr	r3, [r3, #4]
 80097fa:	2200      	movs	r2, #0
 80097fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80097fe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009800:	f04f 0200 	mov.w	r2, #0
 8009804:	f04f 0300 	mov.w	r3, #0
 8009808:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800980c:	4649      	mov	r1, r9
 800980e:	008b      	lsls	r3, r1, #2
 8009810:	4641      	mov	r1, r8
 8009812:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009816:	4641      	mov	r1, r8
 8009818:	008a      	lsls	r2, r1, #2
 800981a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800981e:	f7f7 fa4d 	bl	8000cbc <__aeabi_uldivmod>
 8009822:	4602      	mov	r2, r0
 8009824:	460b      	mov	r3, r1
 8009826:	4611      	mov	r1, r2
 8009828:	4b38      	ldr	r3, [pc, #224]	@ (800990c <UART_SetConfig+0x4e4>)
 800982a:	fba3 2301 	umull	r2, r3, r3, r1
 800982e:	095b      	lsrs	r3, r3, #5
 8009830:	2264      	movs	r2, #100	@ 0x64
 8009832:	fb02 f303 	mul.w	r3, r2, r3
 8009836:	1acb      	subs	r3, r1, r3
 8009838:	011b      	lsls	r3, r3, #4
 800983a:	3332      	adds	r3, #50	@ 0x32
 800983c:	4a33      	ldr	r2, [pc, #204]	@ (800990c <UART_SetConfig+0x4e4>)
 800983e:	fba2 2303 	umull	r2, r3, r2, r3
 8009842:	095b      	lsrs	r3, r3, #5
 8009844:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009848:	441c      	add	r4, r3
 800984a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800984e:	2200      	movs	r2, #0
 8009850:	673b      	str	r3, [r7, #112]	@ 0x70
 8009852:	677a      	str	r2, [r7, #116]	@ 0x74
 8009854:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009858:	4642      	mov	r2, r8
 800985a:	464b      	mov	r3, r9
 800985c:	1891      	adds	r1, r2, r2
 800985e:	60b9      	str	r1, [r7, #8]
 8009860:	415b      	adcs	r3, r3
 8009862:	60fb      	str	r3, [r7, #12]
 8009864:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009868:	4641      	mov	r1, r8
 800986a:	1851      	adds	r1, r2, r1
 800986c:	6039      	str	r1, [r7, #0]
 800986e:	4649      	mov	r1, r9
 8009870:	414b      	adcs	r3, r1
 8009872:	607b      	str	r3, [r7, #4]
 8009874:	f04f 0200 	mov.w	r2, #0
 8009878:	f04f 0300 	mov.w	r3, #0
 800987c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009880:	4659      	mov	r1, fp
 8009882:	00cb      	lsls	r3, r1, #3
 8009884:	4651      	mov	r1, sl
 8009886:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800988a:	4651      	mov	r1, sl
 800988c:	00ca      	lsls	r2, r1, #3
 800988e:	4610      	mov	r0, r2
 8009890:	4619      	mov	r1, r3
 8009892:	4603      	mov	r3, r0
 8009894:	4642      	mov	r2, r8
 8009896:	189b      	adds	r3, r3, r2
 8009898:	66bb      	str	r3, [r7, #104]	@ 0x68
 800989a:	464b      	mov	r3, r9
 800989c:	460a      	mov	r2, r1
 800989e:	eb42 0303 	adc.w	r3, r2, r3
 80098a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80098a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	2200      	movs	r2, #0
 80098ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80098ae:	667a      	str	r2, [r7, #100]	@ 0x64
 80098b0:	f04f 0200 	mov.w	r2, #0
 80098b4:	f04f 0300 	mov.w	r3, #0
 80098b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80098bc:	4649      	mov	r1, r9
 80098be:	008b      	lsls	r3, r1, #2
 80098c0:	4641      	mov	r1, r8
 80098c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80098c6:	4641      	mov	r1, r8
 80098c8:	008a      	lsls	r2, r1, #2
 80098ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80098ce:	f7f7 f9f5 	bl	8000cbc <__aeabi_uldivmod>
 80098d2:	4602      	mov	r2, r0
 80098d4:	460b      	mov	r3, r1
 80098d6:	4b0d      	ldr	r3, [pc, #52]	@ (800990c <UART_SetConfig+0x4e4>)
 80098d8:	fba3 1302 	umull	r1, r3, r3, r2
 80098dc:	095b      	lsrs	r3, r3, #5
 80098de:	2164      	movs	r1, #100	@ 0x64
 80098e0:	fb01 f303 	mul.w	r3, r1, r3
 80098e4:	1ad3      	subs	r3, r2, r3
 80098e6:	011b      	lsls	r3, r3, #4
 80098e8:	3332      	adds	r3, #50	@ 0x32
 80098ea:	4a08      	ldr	r2, [pc, #32]	@ (800990c <UART_SetConfig+0x4e4>)
 80098ec:	fba2 2303 	umull	r2, r3, r2, r3
 80098f0:	095b      	lsrs	r3, r3, #5
 80098f2:	f003 020f 	and.w	r2, r3, #15
 80098f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4422      	add	r2, r4
 80098fe:	609a      	str	r2, [r3, #8]
}
 8009900:	bf00      	nop
 8009902:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009906:	46bd      	mov	sp, r7
 8009908:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800990c:	51eb851f 	.word	0x51eb851f

08009910 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009910:	b084      	sub	sp, #16
 8009912:	b580      	push	{r7, lr}
 8009914:	b084      	sub	sp, #16
 8009916:	af00      	add	r7, sp, #0
 8009918:	6078      	str	r0, [r7, #4]
 800991a:	f107 001c 	add.w	r0, r7, #28
 800991e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009922:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009926:	2b01      	cmp	r3, #1
 8009928:	d123      	bne.n	8009972 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800992e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	68db      	ldr	r3, [r3, #12]
 800993a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800993e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009942:	687a      	ldr	r2, [r7, #4]
 8009944:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	68db      	ldr	r3, [r3, #12]
 800994a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009952:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009956:	2b01      	cmp	r3, #1
 8009958:	d105      	bne.n	8009966 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	68db      	ldr	r3, [r3, #12]
 800995e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f001 fae2 	bl	800af30 <USB_CoreReset>
 800996c:	4603      	mov	r3, r0
 800996e:	73fb      	strb	r3, [r7, #15]
 8009970:	e01b      	b.n	80099aa <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	68db      	ldr	r3, [r3, #12]
 8009976:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f001 fad6 	bl	800af30 <USB_CoreReset>
 8009984:	4603      	mov	r3, r0
 8009986:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009988:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800998c:	2b00      	cmp	r3, #0
 800998e:	d106      	bne.n	800999e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009994:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	639a      	str	r2, [r3, #56]	@ 0x38
 800999c:	e005      	b.n	80099aa <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099a2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80099aa:	7fbb      	ldrb	r3, [r7, #30]
 80099ac:	2b01      	cmp	r3, #1
 80099ae:	d10b      	bne.n	80099c8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	689b      	ldr	r3, [r3, #8]
 80099b4:	f043 0206 	orr.w	r2, r3, #6
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	689b      	ldr	r3, [r3, #8]
 80099c0:	f043 0220 	orr.w	r2, r3, #32
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80099c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3710      	adds	r7, #16
 80099ce:	46bd      	mov	sp, r7
 80099d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80099d4:	b004      	add	sp, #16
 80099d6:	4770      	bx	lr

080099d8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80099d8:	b480      	push	{r7}
 80099da:	b087      	sub	sp, #28
 80099dc:	af00      	add	r7, sp, #0
 80099de:	60f8      	str	r0, [r7, #12]
 80099e0:	60b9      	str	r1, [r7, #8]
 80099e2:	4613      	mov	r3, r2
 80099e4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80099e6:	79fb      	ldrb	r3, [r7, #7]
 80099e8:	2b02      	cmp	r3, #2
 80099ea:	d165      	bne.n	8009ab8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	4a41      	ldr	r2, [pc, #260]	@ (8009af4 <USB_SetTurnaroundTime+0x11c>)
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d906      	bls.n	8009a02 <USB_SetTurnaroundTime+0x2a>
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	4a40      	ldr	r2, [pc, #256]	@ (8009af8 <USB_SetTurnaroundTime+0x120>)
 80099f8:	4293      	cmp	r3, r2
 80099fa:	d202      	bcs.n	8009a02 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80099fc:	230f      	movs	r3, #15
 80099fe:	617b      	str	r3, [r7, #20]
 8009a00:	e062      	b.n	8009ac8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	4a3c      	ldr	r2, [pc, #240]	@ (8009af8 <USB_SetTurnaroundTime+0x120>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d306      	bcc.n	8009a18 <USB_SetTurnaroundTime+0x40>
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	4a3b      	ldr	r2, [pc, #236]	@ (8009afc <USB_SetTurnaroundTime+0x124>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d202      	bcs.n	8009a18 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009a12:	230e      	movs	r3, #14
 8009a14:	617b      	str	r3, [r7, #20]
 8009a16:	e057      	b.n	8009ac8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	4a38      	ldr	r2, [pc, #224]	@ (8009afc <USB_SetTurnaroundTime+0x124>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d306      	bcc.n	8009a2e <USB_SetTurnaroundTime+0x56>
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	4a37      	ldr	r2, [pc, #220]	@ (8009b00 <USB_SetTurnaroundTime+0x128>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d202      	bcs.n	8009a2e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009a28:	230d      	movs	r3, #13
 8009a2a:	617b      	str	r3, [r7, #20]
 8009a2c:	e04c      	b.n	8009ac8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	4a33      	ldr	r2, [pc, #204]	@ (8009b00 <USB_SetTurnaroundTime+0x128>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d306      	bcc.n	8009a44 <USB_SetTurnaroundTime+0x6c>
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	4a32      	ldr	r2, [pc, #200]	@ (8009b04 <USB_SetTurnaroundTime+0x12c>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d802      	bhi.n	8009a44 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009a3e:	230c      	movs	r3, #12
 8009a40:	617b      	str	r3, [r7, #20]
 8009a42:	e041      	b.n	8009ac8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	4a2f      	ldr	r2, [pc, #188]	@ (8009b04 <USB_SetTurnaroundTime+0x12c>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d906      	bls.n	8009a5a <USB_SetTurnaroundTime+0x82>
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	4a2e      	ldr	r2, [pc, #184]	@ (8009b08 <USB_SetTurnaroundTime+0x130>)
 8009a50:	4293      	cmp	r3, r2
 8009a52:	d802      	bhi.n	8009a5a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009a54:	230b      	movs	r3, #11
 8009a56:	617b      	str	r3, [r7, #20]
 8009a58:	e036      	b.n	8009ac8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	4a2a      	ldr	r2, [pc, #168]	@ (8009b08 <USB_SetTurnaroundTime+0x130>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d906      	bls.n	8009a70 <USB_SetTurnaroundTime+0x98>
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	4a29      	ldr	r2, [pc, #164]	@ (8009b0c <USB_SetTurnaroundTime+0x134>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d802      	bhi.n	8009a70 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009a6a:	230a      	movs	r3, #10
 8009a6c:	617b      	str	r3, [r7, #20]
 8009a6e:	e02b      	b.n	8009ac8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	4a26      	ldr	r2, [pc, #152]	@ (8009b0c <USB_SetTurnaroundTime+0x134>)
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d906      	bls.n	8009a86 <USB_SetTurnaroundTime+0xae>
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	4a25      	ldr	r2, [pc, #148]	@ (8009b10 <USB_SetTurnaroundTime+0x138>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d202      	bcs.n	8009a86 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009a80:	2309      	movs	r3, #9
 8009a82:	617b      	str	r3, [r7, #20]
 8009a84:	e020      	b.n	8009ac8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	4a21      	ldr	r2, [pc, #132]	@ (8009b10 <USB_SetTurnaroundTime+0x138>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d306      	bcc.n	8009a9c <USB_SetTurnaroundTime+0xc4>
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	4a20      	ldr	r2, [pc, #128]	@ (8009b14 <USB_SetTurnaroundTime+0x13c>)
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d802      	bhi.n	8009a9c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009a96:	2308      	movs	r3, #8
 8009a98:	617b      	str	r3, [r7, #20]
 8009a9a:	e015      	b.n	8009ac8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	4a1d      	ldr	r2, [pc, #116]	@ (8009b14 <USB_SetTurnaroundTime+0x13c>)
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d906      	bls.n	8009ab2 <USB_SetTurnaroundTime+0xda>
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	4a1c      	ldr	r2, [pc, #112]	@ (8009b18 <USB_SetTurnaroundTime+0x140>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d202      	bcs.n	8009ab2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009aac:	2307      	movs	r3, #7
 8009aae:	617b      	str	r3, [r7, #20]
 8009ab0:	e00a      	b.n	8009ac8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009ab2:	2306      	movs	r3, #6
 8009ab4:	617b      	str	r3, [r7, #20]
 8009ab6:	e007      	b.n	8009ac8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009ab8:	79fb      	ldrb	r3, [r7, #7]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d102      	bne.n	8009ac4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009abe:	2309      	movs	r3, #9
 8009ac0:	617b      	str	r3, [r7, #20]
 8009ac2:	e001      	b.n	8009ac8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009ac4:	2309      	movs	r3, #9
 8009ac6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	68db      	ldr	r3, [r3, #12]
 8009acc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	68da      	ldr	r2, [r3, #12]
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	029b      	lsls	r3, r3, #10
 8009adc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009ae0:	431a      	orrs	r2, r3
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009ae6:	2300      	movs	r3, #0
}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	371c      	adds	r7, #28
 8009aec:	46bd      	mov	sp, r7
 8009aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af2:	4770      	bx	lr
 8009af4:	00d8acbf 	.word	0x00d8acbf
 8009af8:	00e4e1c0 	.word	0x00e4e1c0
 8009afc:	00f42400 	.word	0x00f42400
 8009b00:	01067380 	.word	0x01067380
 8009b04:	011a499f 	.word	0x011a499f
 8009b08:	01312cff 	.word	0x01312cff
 8009b0c:	014ca43f 	.word	0x014ca43f
 8009b10:	016e3600 	.word	0x016e3600
 8009b14:	01a6ab1f 	.word	0x01a6ab1f
 8009b18:	01e84800 	.word	0x01e84800

08009b1c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b083      	sub	sp, #12
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	689b      	ldr	r3, [r3, #8]
 8009b28:	f043 0201 	orr.w	r2, r3, #1
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009b30:	2300      	movs	r3, #0
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	370c      	adds	r7, #12
 8009b36:	46bd      	mov	sp, r7
 8009b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3c:	4770      	bx	lr

08009b3e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009b3e:	b480      	push	{r7}
 8009b40:	b083      	sub	sp, #12
 8009b42:	af00      	add	r7, sp, #0
 8009b44:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	689b      	ldr	r3, [r3, #8]
 8009b4a:	f023 0201 	bic.w	r2, r3, #1
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009b52:	2300      	movs	r3, #0
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	370c      	adds	r7, #12
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr

08009b60 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b084      	sub	sp, #16
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	460b      	mov	r3, r1
 8009b6a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	68db      	ldr	r3, [r3, #12]
 8009b74:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009b7c:	78fb      	ldrb	r3, [r7, #3]
 8009b7e:	2b01      	cmp	r3, #1
 8009b80:	d115      	bne.n	8009bae <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	68db      	ldr	r3, [r3, #12]
 8009b86:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009b8e:	200a      	movs	r0, #10
 8009b90:	f7fa f912 	bl	8003db8 <HAL_Delay>
      ms += 10U;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	330a      	adds	r3, #10
 8009b98:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f001 f939 	bl	800ae12 <USB_GetMode>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	2b01      	cmp	r3, #1
 8009ba4:	d01e      	beq.n	8009be4 <USB_SetCurrentMode+0x84>
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	2bc7      	cmp	r3, #199	@ 0xc7
 8009baa:	d9f0      	bls.n	8009b8e <USB_SetCurrentMode+0x2e>
 8009bac:	e01a      	b.n	8009be4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009bae:	78fb      	ldrb	r3, [r7, #3]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d115      	bne.n	8009be0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	68db      	ldr	r3, [r3, #12]
 8009bb8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009bc0:	200a      	movs	r0, #10
 8009bc2:	f7fa f8f9 	bl	8003db8 <HAL_Delay>
      ms += 10U;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	330a      	adds	r3, #10
 8009bca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f001 f920 	bl	800ae12 <USB_GetMode>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d005      	beq.n	8009be4 <USB_SetCurrentMode+0x84>
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	2bc7      	cmp	r3, #199	@ 0xc7
 8009bdc:	d9f0      	bls.n	8009bc0 <USB_SetCurrentMode+0x60>
 8009bde:	e001      	b.n	8009be4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009be0:	2301      	movs	r3, #1
 8009be2:	e005      	b.n	8009bf0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2bc8      	cmp	r3, #200	@ 0xc8
 8009be8:	d101      	bne.n	8009bee <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009bea:	2301      	movs	r3, #1
 8009bec:	e000      	b.n	8009bf0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009bee:	2300      	movs	r3, #0
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	3710      	adds	r7, #16
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}

08009bf8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009bf8:	b084      	sub	sp, #16
 8009bfa:	b580      	push	{r7, lr}
 8009bfc:	b086      	sub	sp, #24
 8009bfe:	af00      	add	r7, sp, #0
 8009c00:	6078      	str	r0, [r7, #4]
 8009c02:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009c06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009c12:	2300      	movs	r3, #0
 8009c14:	613b      	str	r3, [r7, #16]
 8009c16:	e009      	b.n	8009c2c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009c18:	687a      	ldr	r2, [r7, #4]
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	3340      	adds	r3, #64	@ 0x40
 8009c1e:	009b      	lsls	r3, r3, #2
 8009c20:	4413      	add	r3, r2
 8009c22:	2200      	movs	r2, #0
 8009c24:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009c26:	693b      	ldr	r3, [r7, #16]
 8009c28:	3301      	adds	r3, #1
 8009c2a:	613b      	str	r3, [r7, #16]
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	2b0e      	cmp	r3, #14
 8009c30:	d9f2      	bls.n	8009c18 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009c32:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d11c      	bne.n	8009c74 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c40:	685b      	ldr	r3, [r3, #4]
 8009c42:	68fa      	ldr	r2, [r7, #12]
 8009c44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009c48:	f043 0302 	orr.w	r3, r3, #2
 8009c4c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c52:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	601a      	str	r2, [r3, #0]
 8009c72:	e005      	b.n	8009c80 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c78:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009c86:	461a      	mov	r2, r3
 8009c88:	2300      	movs	r3, #0
 8009c8a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009c8c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009c90:	2b01      	cmp	r3, #1
 8009c92:	d10d      	bne.n	8009cb0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009c94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d104      	bne.n	8009ca6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009c9c:	2100      	movs	r1, #0
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f000 f968 	bl	8009f74 <USB_SetDevSpeed>
 8009ca4:	e008      	b.n	8009cb8 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009ca6:	2101      	movs	r1, #1
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f000 f963 	bl	8009f74 <USB_SetDevSpeed>
 8009cae:	e003      	b.n	8009cb8 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009cb0:	2103      	movs	r1, #3
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f000 f95e 	bl	8009f74 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009cb8:	2110      	movs	r1, #16
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f000 f8fa 	bl	8009eb4 <USB_FlushTxFifo>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d001      	beq.n	8009cca <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f000 f924 	bl	8009f18 <USB_FlushRxFifo>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d001      	beq.n	8009cda <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009cec:	461a      	mov	r2, r3
 8009cee:	2300      	movs	r3, #0
 8009cf0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009cf8:	461a      	mov	r2, r3
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009cfe:	2300      	movs	r3, #0
 8009d00:	613b      	str	r3, [r7, #16]
 8009d02:	e043      	b.n	8009d8c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	015a      	lsls	r2, r3, #5
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	4413      	add	r3, r2
 8009d0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009d16:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009d1a:	d118      	bne.n	8009d4e <USB_DevInit+0x156>
    {
      if (i == 0U)
 8009d1c:	693b      	ldr	r3, [r7, #16]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d10a      	bne.n	8009d38 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	015a      	lsls	r2, r3, #5
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	4413      	add	r3, r2
 8009d2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d2e:	461a      	mov	r2, r3
 8009d30:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009d34:	6013      	str	r3, [r2, #0]
 8009d36:	e013      	b.n	8009d60 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	015a      	lsls	r2, r3, #5
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	4413      	add	r3, r2
 8009d40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d44:	461a      	mov	r2, r3
 8009d46:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009d4a:	6013      	str	r3, [r2, #0]
 8009d4c:	e008      	b.n	8009d60 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	015a      	lsls	r2, r3, #5
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	4413      	add	r3, r2
 8009d56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d5a:	461a      	mov	r2, r3
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009d60:	693b      	ldr	r3, [r7, #16]
 8009d62:	015a      	lsls	r2, r3, #5
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	4413      	add	r3, r2
 8009d68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d6c:	461a      	mov	r2, r3
 8009d6e:	2300      	movs	r3, #0
 8009d70:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	015a      	lsls	r2, r3, #5
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	4413      	add	r3, r2
 8009d7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d7e:	461a      	mov	r2, r3
 8009d80:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009d84:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	3301      	adds	r3, #1
 8009d8a:	613b      	str	r3, [r7, #16]
 8009d8c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009d90:	461a      	mov	r2, r3
 8009d92:	693b      	ldr	r3, [r7, #16]
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d3b5      	bcc.n	8009d04 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009d98:	2300      	movs	r3, #0
 8009d9a:	613b      	str	r3, [r7, #16]
 8009d9c:	e043      	b.n	8009e26 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	015a      	lsls	r2, r3, #5
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	4413      	add	r3, r2
 8009da6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009db0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009db4:	d118      	bne.n	8009de8 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8009db6:	693b      	ldr	r3, [r7, #16]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d10a      	bne.n	8009dd2 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	015a      	lsls	r2, r3, #5
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	4413      	add	r3, r2
 8009dc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009dc8:	461a      	mov	r2, r3
 8009dca:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009dce:	6013      	str	r3, [r2, #0]
 8009dd0:	e013      	b.n	8009dfa <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009dd2:	693b      	ldr	r3, [r7, #16]
 8009dd4:	015a      	lsls	r2, r3, #5
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	4413      	add	r3, r2
 8009dda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009dde:	461a      	mov	r2, r3
 8009de0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009de4:	6013      	str	r3, [r2, #0]
 8009de6:	e008      	b.n	8009dfa <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	015a      	lsls	r2, r3, #5
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	4413      	add	r3, r2
 8009df0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009df4:	461a      	mov	r2, r3
 8009df6:	2300      	movs	r3, #0
 8009df8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009dfa:	693b      	ldr	r3, [r7, #16]
 8009dfc:	015a      	lsls	r2, r3, #5
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	4413      	add	r3, r2
 8009e02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e06:	461a      	mov	r2, r3
 8009e08:	2300      	movs	r3, #0
 8009e0a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	015a      	lsls	r2, r3, #5
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	4413      	add	r3, r2
 8009e14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e18:	461a      	mov	r2, r3
 8009e1a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009e1e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	3301      	adds	r3, #1
 8009e24:	613b      	str	r3, [r7, #16]
 8009e26:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009e2a:	461a      	mov	r2, r3
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d3b5      	bcc.n	8009d9e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e38:	691b      	ldr	r3, [r3, #16]
 8009e3a:	68fa      	ldr	r2, [r7, #12]
 8009e3c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009e40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e44:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009e52:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009e54:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d105      	bne.n	8009e68 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	699b      	ldr	r3, [r3, #24]
 8009e60:	f043 0210 	orr.w	r2, r3, #16
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	699a      	ldr	r2, [r3, #24]
 8009e6c:	4b10      	ldr	r3, [pc, #64]	@ (8009eb0 <USB_DevInit+0x2b8>)
 8009e6e:	4313      	orrs	r3, r2
 8009e70:	687a      	ldr	r2, [r7, #4]
 8009e72:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009e74:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d005      	beq.n	8009e88 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	699b      	ldr	r3, [r3, #24]
 8009e80:	f043 0208 	orr.w	r2, r3, #8
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009e88:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009e8c:	2b01      	cmp	r3, #1
 8009e8e:	d107      	bne.n	8009ea0 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	699b      	ldr	r3, [r3, #24]
 8009e94:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009e98:	f043 0304 	orr.w	r3, r3, #4
 8009e9c:	687a      	ldr	r2, [r7, #4]
 8009e9e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009ea0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3718      	adds	r7, #24
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009eac:	b004      	add	sp, #16
 8009eae:	4770      	bx	lr
 8009eb0:	803c3800 	.word	0x803c3800

08009eb4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b085      	sub	sp, #20
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
 8009ebc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	3301      	adds	r3, #1
 8009ec6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009ece:	d901      	bls.n	8009ed4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009ed0:	2303      	movs	r3, #3
 8009ed2:	e01b      	b.n	8009f0c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	691b      	ldr	r3, [r3, #16]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	daf2      	bge.n	8009ec2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009edc:	2300      	movs	r3, #0
 8009ede:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	019b      	lsls	r3, r3, #6
 8009ee4:	f043 0220 	orr.w	r2, r3, #32
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	3301      	adds	r3, #1
 8009ef0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009ef8:	d901      	bls.n	8009efe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009efa:	2303      	movs	r3, #3
 8009efc:	e006      	b.n	8009f0c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	691b      	ldr	r3, [r3, #16]
 8009f02:	f003 0320 	and.w	r3, r3, #32
 8009f06:	2b20      	cmp	r3, #32
 8009f08:	d0f0      	beq.n	8009eec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009f0a:	2300      	movs	r3, #0
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3714      	adds	r7, #20
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr

08009f18 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b085      	sub	sp, #20
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009f20:	2300      	movs	r3, #0
 8009f22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	3301      	adds	r3, #1
 8009f28:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009f30:	d901      	bls.n	8009f36 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009f32:	2303      	movs	r3, #3
 8009f34:	e018      	b.n	8009f68 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	691b      	ldr	r3, [r3, #16]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	daf2      	bge.n	8009f24 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2210      	movs	r2, #16
 8009f46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	3301      	adds	r3, #1
 8009f4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009f54:	d901      	bls.n	8009f5a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009f56:	2303      	movs	r3, #3
 8009f58:	e006      	b.n	8009f68 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	691b      	ldr	r3, [r3, #16]
 8009f5e:	f003 0310 	and.w	r3, r3, #16
 8009f62:	2b10      	cmp	r3, #16
 8009f64:	d0f0      	beq.n	8009f48 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009f66:	2300      	movs	r3, #0
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3714      	adds	r7, #20
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f72:	4770      	bx	lr

08009f74 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b085      	sub	sp, #20
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
 8009f7c:	460b      	mov	r3, r1
 8009f7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f8a:	681a      	ldr	r2, [r3, #0]
 8009f8c:	78fb      	ldrb	r3, [r7, #3]
 8009f8e:	68f9      	ldr	r1, [r7, #12]
 8009f90:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009f94:	4313      	orrs	r3, r2
 8009f96:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009f98:	2300      	movs	r3, #0
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	3714      	adds	r7, #20
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa4:	4770      	bx	lr

08009fa6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009fa6:	b480      	push	{r7}
 8009fa8:	b087      	sub	sp, #28
 8009faa:	af00      	add	r7, sp, #0
 8009fac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009fb8:	689b      	ldr	r3, [r3, #8]
 8009fba:	f003 0306 	and.w	r3, r3, #6
 8009fbe:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d102      	bne.n	8009fcc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	75fb      	strb	r3, [r7, #23]
 8009fca:	e00a      	b.n	8009fe2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	2b02      	cmp	r3, #2
 8009fd0:	d002      	beq.n	8009fd8 <USB_GetDevSpeed+0x32>
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	2b06      	cmp	r3, #6
 8009fd6:	d102      	bne.n	8009fde <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009fd8:	2302      	movs	r3, #2
 8009fda:	75fb      	strb	r3, [r7, #23]
 8009fdc:	e001      	b.n	8009fe2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009fde:	230f      	movs	r3, #15
 8009fe0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009fe2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	371c      	adds	r7, #28
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fee:	4770      	bx	lr

08009ff0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b085      	sub	sp, #20
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
 8009ff8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	781b      	ldrb	r3, [r3, #0]
 800a002:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	785b      	ldrb	r3, [r3, #1]
 800a008:	2b01      	cmp	r3, #1
 800a00a:	d13a      	bne.n	800a082 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a012:	69da      	ldr	r2, [r3, #28]
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	781b      	ldrb	r3, [r3, #0]
 800a018:	f003 030f 	and.w	r3, r3, #15
 800a01c:	2101      	movs	r1, #1
 800a01e:	fa01 f303 	lsl.w	r3, r1, r3
 800a022:	b29b      	uxth	r3, r3
 800a024:	68f9      	ldr	r1, [r7, #12]
 800a026:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a02a:	4313      	orrs	r3, r2
 800a02c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	015a      	lsls	r2, r3, #5
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	4413      	add	r3, r2
 800a036:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a040:	2b00      	cmp	r3, #0
 800a042:	d155      	bne.n	800a0f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	015a      	lsls	r2, r3, #5
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	4413      	add	r3, r2
 800a04c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a050:	681a      	ldr	r2, [r3, #0]
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	689b      	ldr	r3, [r3, #8]
 800a056:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	791b      	ldrb	r3, [r3, #4]
 800a05e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a060:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	059b      	lsls	r3, r3, #22
 800a066:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a068:	4313      	orrs	r3, r2
 800a06a:	68ba      	ldr	r2, [r7, #8]
 800a06c:	0151      	lsls	r1, r2, #5
 800a06e:	68fa      	ldr	r2, [r7, #12]
 800a070:	440a      	add	r2, r1
 800a072:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a076:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a07a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a07e:	6013      	str	r3, [r2, #0]
 800a080:	e036      	b.n	800a0f0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a088:	69da      	ldr	r2, [r3, #28]
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	781b      	ldrb	r3, [r3, #0]
 800a08e:	f003 030f 	and.w	r3, r3, #15
 800a092:	2101      	movs	r1, #1
 800a094:	fa01 f303 	lsl.w	r3, r1, r3
 800a098:	041b      	lsls	r3, r3, #16
 800a09a:	68f9      	ldr	r1, [r7, #12]
 800a09c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a0a0:	4313      	orrs	r3, r2
 800a0a2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	015a      	lsls	r2, r3, #5
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	4413      	add	r3, r2
 800a0ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d11a      	bne.n	800a0f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	015a      	lsls	r2, r3, #5
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	4413      	add	r3, r2
 800a0c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0c6:	681a      	ldr	r2, [r3, #0]
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	689b      	ldr	r3, [r3, #8]
 800a0cc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	791b      	ldrb	r3, [r3, #4]
 800a0d4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a0d6:	430b      	orrs	r3, r1
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	68ba      	ldr	r2, [r7, #8]
 800a0dc:	0151      	lsls	r1, r2, #5
 800a0de:	68fa      	ldr	r2, [r7, #12]
 800a0e0:	440a      	add	r2, r1
 800a0e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a0e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a0ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a0ee:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a0f0:	2300      	movs	r3, #0
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3714      	adds	r7, #20
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fc:	4770      	bx	lr
	...

0800a100 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a100:	b480      	push	{r7}
 800a102:	b085      	sub	sp, #20
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
 800a108:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	781b      	ldrb	r3, [r3, #0]
 800a112:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	785b      	ldrb	r3, [r3, #1]
 800a118:	2b01      	cmp	r3, #1
 800a11a:	d161      	bne.n	800a1e0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	015a      	lsls	r2, r3, #5
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	4413      	add	r3, r2
 800a124:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a12e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a132:	d11f      	bne.n	800a174 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	015a      	lsls	r2, r3, #5
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	4413      	add	r3, r2
 800a13c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	68ba      	ldr	r2, [r7, #8]
 800a144:	0151      	lsls	r1, r2, #5
 800a146:	68fa      	ldr	r2, [r7, #12]
 800a148:	440a      	add	r2, r1
 800a14a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a14e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a152:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	015a      	lsls	r2, r3, #5
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	4413      	add	r3, r2
 800a15c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	68ba      	ldr	r2, [r7, #8]
 800a164:	0151      	lsls	r1, r2, #5
 800a166:	68fa      	ldr	r2, [r7, #12]
 800a168:	440a      	add	r2, r1
 800a16a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a16e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a172:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a17a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	781b      	ldrb	r3, [r3, #0]
 800a180:	f003 030f 	and.w	r3, r3, #15
 800a184:	2101      	movs	r1, #1
 800a186:	fa01 f303 	lsl.w	r3, r1, r3
 800a18a:	b29b      	uxth	r3, r3
 800a18c:	43db      	mvns	r3, r3
 800a18e:	68f9      	ldr	r1, [r7, #12]
 800a190:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a194:	4013      	ands	r3, r2
 800a196:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a19e:	69da      	ldr	r2, [r3, #28]
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	781b      	ldrb	r3, [r3, #0]
 800a1a4:	f003 030f 	and.w	r3, r3, #15
 800a1a8:	2101      	movs	r1, #1
 800a1aa:	fa01 f303 	lsl.w	r3, r1, r3
 800a1ae:	b29b      	uxth	r3, r3
 800a1b0:	43db      	mvns	r3, r3
 800a1b2:	68f9      	ldr	r1, [r7, #12]
 800a1b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a1b8:	4013      	ands	r3, r2
 800a1ba:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	015a      	lsls	r2, r3, #5
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	4413      	add	r3, r2
 800a1c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1c8:	681a      	ldr	r2, [r3, #0]
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	0159      	lsls	r1, r3, #5
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	440b      	add	r3, r1
 800a1d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1d6:	4619      	mov	r1, r3
 800a1d8:	4b35      	ldr	r3, [pc, #212]	@ (800a2b0 <USB_DeactivateEndpoint+0x1b0>)
 800a1da:	4013      	ands	r3, r2
 800a1dc:	600b      	str	r3, [r1, #0]
 800a1de:	e060      	b.n	800a2a2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	015a      	lsls	r2, r3, #5
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	4413      	add	r3, r2
 800a1e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a1f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a1f6:	d11f      	bne.n	800a238 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	015a      	lsls	r2, r3, #5
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	4413      	add	r3, r2
 800a200:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	68ba      	ldr	r2, [r7, #8]
 800a208:	0151      	lsls	r1, r2, #5
 800a20a:	68fa      	ldr	r2, [r7, #12]
 800a20c:	440a      	add	r2, r1
 800a20e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a212:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a216:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	015a      	lsls	r2, r3, #5
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	4413      	add	r3, r2
 800a220:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	68ba      	ldr	r2, [r7, #8]
 800a228:	0151      	lsls	r1, r2, #5
 800a22a:	68fa      	ldr	r2, [r7, #12]
 800a22c:	440a      	add	r2, r1
 800a22e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a232:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a236:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a23e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	781b      	ldrb	r3, [r3, #0]
 800a244:	f003 030f 	and.w	r3, r3, #15
 800a248:	2101      	movs	r1, #1
 800a24a:	fa01 f303 	lsl.w	r3, r1, r3
 800a24e:	041b      	lsls	r3, r3, #16
 800a250:	43db      	mvns	r3, r3
 800a252:	68f9      	ldr	r1, [r7, #12]
 800a254:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a258:	4013      	ands	r3, r2
 800a25a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a262:	69da      	ldr	r2, [r3, #28]
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	781b      	ldrb	r3, [r3, #0]
 800a268:	f003 030f 	and.w	r3, r3, #15
 800a26c:	2101      	movs	r1, #1
 800a26e:	fa01 f303 	lsl.w	r3, r1, r3
 800a272:	041b      	lsls	r3, r3, #16
 800a274:	43db      	mvns	r3, r3
 800a276:	68f9      	ldr	r1, [r7, #12]
 800a278:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a27c:	4013      	ands	r3, r2
 800a27e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	015a      	lsls	r2, r3, #5
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	4413      	add	r3, r2
 800a288:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a28c:	681a      	ldr	r2, [r3, #0]
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	0159      	lsls	r1, r3, #5
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	440b      	add	r3, r1
 800a296:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a29a:	4619      	mov	r1, r3
 800a29c:	4b05      	ldr	r3, [pc, #20]	@ (800a2b4 <USB_DeactivateEndpoint+0x1b4>)
 800a29e:	4013      	ands	r3, r2
 800a2a0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a2a2:	2300      	movs	r3, #0
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3714      	adds	r7, #20
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ae:	4770      	bx	lr
 800a2b0:	ec337800 	.word	0xec337800
 800a2b4:	eff37800 	.word	0xeff37800

0800a2b8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b08a      	sub	sp, #40	@ 0x28
 800a2bc:	af02      	add	r7, sp, #8
 800a2be:	60f8      	str	r0, [r7, #12]
 800a2c0:	60b9      	str	r1, [r7, #8]
 800a2c2:	4613      	mov	r3, r2
 800a2c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	781b      	ldrb	r3, [r3, #0]
 800a2ce:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	785b      	ldrb	r3, [r3, #1]
 800a2d4:	2b01      	cmp	r3, #1
 800a2d6:	f040 817f 	bne.w	800a5d8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	691b      	ldr	r3, [r3, #16]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d132      	bne.n	800a348 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a2e2:	69bb      	ldr	r3, [r7, #24]
 800a2e4:	015a      	lsls	r2, r3, #5
 800a2e6:	69fb      	ldr	r3, [r7, #28]
 800a2e8:	4413      	add	r3, r2
 800a2ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2ee:	691b      	ldr	r3, [r3, #16]
 800a2f0:	69ba      	ldr	r2, [r7, #24]
 800a2f2:	0151      	lsls	r1, r2, #5
 800a2f4:	69fa      	ldr	r2, [r7, #28]
 800a2f6:	440a      	add	r2, r1
 800a2f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a2fc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a300:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a304:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a306:	69bb      	ldr	r3, [r7, #24]
 800a308:	015a      	lsls	r2, r3, #5
 800a30a:	69fb      	ldr	r3, [r7, #28]
 800a30c:	4413      	add	r3, r2
 800a30e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a312:	691b      	ldr	r3, [r3, #16]
 800a314:	69ba      	ldr	r2, [r7, #24]
 800a316:	0151      	lsls	r1, r2, #5
 800a318:	69fa      	ldr	r2, [r7, #28]
 800a31a:	440a      	add	r2, r1
 800a31c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a320:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a324:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a326:	69bb      	ldr	r3, [r7, #24]
 800a328:	015a      	lsls	r2, r3, #5
 800a32a:	69fb      	ldr	r3, [r7, #28]
 800a32c:	4413      	add	r3, r2
 800a32e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a332:	691b      	ldr	r3, [r3, #16]
 800a334:	69ba      	ldr	r2, [r7, #24]
 800a336:	0151      	lsls	r1, r2, #5
 800a338:	69fa      	ldr	r2, [r7, #28]
 800a33a:	440a      	add	r2, r1
 800a33c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a340:	0cdb      	lsrs	r3, r3, #19
 800a342:	04db      	lsls	r3, r3, #19
 800a344:	6113      	str	r3, [r2, #16]
 800a346:	e097      	b.n	800a478 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a348:	69bb      	ldr	r3, [r7, #24]
 800a34a:	015a      	lsls	r2, r3, #5
 800a34c:	69fb      	ldr	r3, [r7, #28]
 800a34e:	4413      	add	r3, r2
 800a350:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a354:	691b      	ldr	r3, [r3, #16]
 800a356:	69ba      	ldr	r2, [r7, #24]
 800a358:	0151      	lsls	r1, r2, #5
 800a35a:	69fa      	ldr	r2, [r7, #28]
 800a35c:	440a      	add	r2, r1
 800a35e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a362:	0cdb      	lsrs	r3, r3, #19
 800a364:	04db      	lsls	r3, r3, #19
 800a366:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a368:	69bb      	ldr	r3, [r7, #24]
 800a36a:	015a      	lsls	r2, r3, #5
 800a36c:	69fb      	ldr	r3, [r7, #28]
 800a36e:	4413      	add	r3, r2
 800a370:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a374:	691b      	ldr	r3, [r3, #16]
 800a376:	69ba      	ldr	r2, [r7, #24]
 800a378:	0151      	lsls	r1, r2, #5
 800a37a:	69fa      	ldr	r2, [r7, #28]
 800a37c:	440a      	add	r2, r1
 800a37e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a382:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a386:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a38a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800a38c:	69bb      	ldr	r3, [r7, #24]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d11a      	bne.n	800a3c8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	691a      	ldr	r2, [r3, #16]
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	689b      	ldr	r3, [r3, #8]
 800a39a:	429a      	cmp	r2, r3
 800a39c:	d903      	bls.n	800a3a6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	689a      	ldr	r2, [r3, #8]
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a3a6:	69bb      	ldr	r3, [r7, #24]
 800a3a8:	015a      	lsls	r2, r3, #5
 800a3aa:	69fb      	ldr	r3, [r7, #28]
 800a3ac:	4413      	add	r3, r2
 800a3ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3b2:	691b      	ldr	r3, [r3, #16]
 800a3b4:	69ba      	ldr	r2, [r7, #24]
 800a3b6:	0151      	lsls	r1, r2, #5
 800a3b8:	69fa      	ldr	r2, [r7, #28]
 800a3ba:	440a      	add	r2, r1
 800a3bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a3c0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a3c4:	6113      	str	r3, [r2, #16]
 800a3c6:	e044      	b.n	800a452 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	691a      	ldr	r2, [r3, #16]
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	689b      	ldr	r3, [r3, #8]
 800a3d0:	4413      	add	r3, r2
 800a3d2:	1e5a      	subs	r2, r3, #1
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	689b      	ldr	r3, [r3, #8]
 800a3d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3dc:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800a3de:	69bb      	ldr	r3, [r7, #24]
 800a3e0:	015a      	lsls	r2, r3, #5
 800a3e2:	69fb      	ldr	r3, [r7, #28]
 800a3e4:	4413      	add	r3, r2
 800a3e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3ea:	691a      	ldr	r2, [r3, #16]
 800a3ec:	8afb      	ldrh	r3, [r7, #22]
 800a3ee:	04d9      	lsls	r1, r3, #19
 800a3f0:	4ba4      	ldr	r3, [pc, #656]	@ (800a684 <USB_EPStartXfer+0x3cc>)
 800a3f2:	400b      	ands	r3, r1
 800a3f4:	69b9      	ldr	r1, [r7, #24]
 800a3f6:	0148      	lsls	r0, r1, #5
 800a3f8:	69f9      	ldr	r1, [r7, #28]
 800a3fa:	4401      	add	r1, r0
 800a3fc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a400:	4313      	orrs	r3, r2
 800a402:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	791b      	ldrb	r3, [r3, #4]
 800a408:	2b01      	cmp	r3, #1
 800a40a:	d122      	bne.n	800a452 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a40c:	69bb      	ldr	r3, [r7, #24]
 800a40e:	015a      	lsls	r2, r3, #5
 800a410:	69fb      	ldr	r3, [r7, #28]
 800a412:	4413      	add	r3, r2
 800a414:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a418:	691b      	ldr	r3, [r3, #16]
 800a41a:	69ba      	ldr	r2, [r7, #24]
 800a41c:	0151      	lsls	r1, r2, #5
 800a41e:	69fa      	ldr	r2, [r7, #28]
 800a420:	440a      	add	r2, r1
 800a422:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a426:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800a42a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800a42c:	69bb      	ldr	r3, [r7, #24]
 800a42e:	015a      	lsls	r2, r3, #5
 800a430:	69fb      	ldr	r3, [r7, #28]
 800a432:	4413      	add	r3, r2
 800a434:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a438:	691a      	ldr	r2, [r3, #16]
 800a43a:	8afb      	ldrh	r3, [r7, #22]
 800a43c:	075b      	lsls	r3, r3, #29
 800a43e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800a442:	69b9      	ldr	r1, [r7, #24]
 800a444:	0148      	lsls	r0, r1, #5
 800a446:	69f9      	ldr	r1, [r7, #28]
 800a448:	4401      	add	r1, r0
 800a44a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a44e:	4313      	orrs	r3, r2
 800a450:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a452:	69bb      	ldr	r3, [r7, #24]
 800a454:	015a      	lsls	r2, r3, #5
 800a456:	69fb      	ldr	r3, [r7, #28]
 800a458:	4413      	add	r3, r2
 800a45a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a45e:	691a      	ldr	r2, [r3, #16]
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	691b      	ldr	r3, [r3, #16]
 800a464:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a468:	69b9      	ldr	r1, [r7, #24]
 800a46a:	0148      	lsls	r0, r1, #5
 800a46c:	69f9      	ldr	r1, [r7, #28]
 800a46e:	4401      	add	r1, r0
 800a470:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a474:	4313      	orrs	r3, r2
 800a476:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a478:	79fb      	ldrb	r3, [r7, #7]
 800a47a:	2b01      	cmp	r3, #1
 800a47c:	d14b      	bne.n	800a516 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	69db      	ldr	r3, [r3, #28]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d009      	beq.n	800a49a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a486:	69bb      	ldr	r3, [r7, #24]
 800a488:	015a      	lsls	r2, r3, #5
 800a48a:	69fb      	ldr	r3, [r7, #28]
 800a48c:	4413      	add	r3, r2
 800a48e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a492:	461a      	mov	r2, r3
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	69db      	ldr	r3, [r3, #28]
 800a498:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	791b      	ldrb	r3, [r3, #4]
 800a49e:	2b01      	cmp	r3, #1
 800a4a0:	d128      	bne.n	800a4f4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a4a2:	69fb      	ldr	r3, [r7, #28]
 800a4a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4a8:	689b      	ldr	r3, [r3, #8]
 800a4aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d110      	bne.n	800a4d4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a4b2:	69bb      	ldr	r3, [r7, #24]
 800a4b4:	015a      	lsls	r2, r3, #5
 800a4b6:	69fb      	ldr	r3, [r7, #28]
 800a4b8:	4413      	add	r3, r2
 800a4ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	69ba      	ldr	r2, [r7, #24]
 800a4c2:	0151      	lsls	r1, r2, #5
 800a4c4:	69fa      	ldr	r2, [r7, #28]
 800a4c6:	440a      	add	r2, r1
 800a4c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a4cc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a4d0:	6013      	str	r3, [r2, #0]
 800a4d2:	e00f      	b.n	800a4f4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a4d4:	69bb      	ldr	r3, [r7, #24]
 800a4d6:	015a      	lsls	r2, r3, #5
 800a4d8:	69fb      	ldr	r3, [r7, #28]
 800a4da:	4413      	add	r3, r2
 800a4dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	69ba      	ldr	r2, [r7, #24]
 800a4e4:	0151      	lsls	r1, r2, #5
 800a4e6:	69fa      	ldr	r2, [r7, #28]
 800a4e8:	440a      	add	r2, r1
 800a4ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a4ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a4f2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a4f4:	69bb      	ldr	r3, [r7, #24]
 800a4f6:	015a      	lsls	r2, r3, #5
 800a4f8:	69fb      	ldr	r3, [r7, #28]
 800a4fa:	4413      	add	r3, r2
 800a4fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	69ba      	ldr	r2, [r7, #24]
 800a504:	0151      	lsls	r1, r2, #5
 800a506:	69fa      	ldr	r2, [r7, #28]
 800a508:	440a      	add	r2, r1
 800a50a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a50e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a512:	6013      	str	r3, [r2, #0]
 800a514:	e166      	b.n	800a7e4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a516:	69bb      	ldr	r3, [r7, #24]
 800a518:	015a      	lsls	r2, r3, #5
 800a51a:	69fb      	ldr	r3, [r7, #28]
 800a51c:	4413      	add	r3, r2
 800a51e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	69ba      	ldr	r2, [r7, #24]
 800a526:	0151      	lsls	r1, r2, #5
 800a528:	69fa      	ldr	r2, [r7, #28]
 800a52a:	440a      	add	r2, r1
 800a52c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a530:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a534:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a536:	68bb      	ldr	r3, [r7, #8]
 800a538:	791b      	ldrb	r3, [r3, #4]
 800a53a:	2b01      	cmp	r3, #1
 800a53c:	d015      	beq.n	800a56a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	691b      	ldr	r3, [r3, #16]
 800a542:	2b00      	cmp	r3, #0
 800a544:	f000 814e 	beq.w	800a7e4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a548:	69fb      	ldr	r3, [r7, #28]
 800a54a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a54e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	781b      	ldrb	r3, [r3, #0]
 800a554:	f003 030f 	and.w	r3, r3, #15
 800a558:	2101      	movs	r1, #1
 800a55a:	fa01 f303 	lsl.w	r3, r1, r3
 800a55e:	69f9      	ldr	r1, [r7, #28]
 800a560:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a564:	4313      	orrs	r3, r2
 800a566:	634b      	str	r3, [r1, #52]	@ 0x34
 800a568:	e13c      	b.n	800a7e4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a56a:	69fb      	ldr	r3, [r7, #28]
 800a56c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a570:	689b      	ldr	r3, [r3, #8]
 800a572:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a576:	2b00      	cmp	r3, #0
 800a578:	d110      	bne.n	800a59c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a57a:	69bb      	ldr	r3, [r7, #24]
 800a57c:	015a      	lsls	r2, r3, #5
 800a57e:	69fb      	ldr	r3, [r7, #28]
 800a580:	4413      	add	r3, r2
 800a582:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	69ba      	ldr	r2, [r7, #24]
 800a58a:	0151      	lsls	r1, r2, #5
 800a58c:	69fa      	ldr	r2, [r7, #28]
 800a58e:	440a      	add	r2, r1
 800a590:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a594:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a598:	6013      	str	r3, [r2, #0]
 800a59a:	e00f      	b.n	800a5bc <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a59c:	69bb      	ldr	r3, [r7, #24]
 800a59e:	015a      	lsls	r2, r3, #5
 800a5a0:	69fb      	ldr	r3, [r7, #28]
 800a5a2:	4413      	add	r3, r2
 800a5a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	69ba      	ldr	r2, [r7, #24]
 800a5ac:	0151      	lsls	r1, r2, #5
 800a5ae:	69fa      	ldr	r2, [r7, #28]
 800a5b0:	440a      	add	r2, r1
 800a5b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a5b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a5ba:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	68d9      	ldr	r1, [r3, #12]
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	781a      	ldrb	r2, [r3, #0]
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	691b      	ldr	r3, [r3, #16]
 800a5c8:	b298      	uxth	r0, r3
 800a5ca:	79fb      	ldrb	r3, [r7, #7]
 800a5cc:	9300      	str	r3, [sp, #0]
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	68f8      	ldr	r0, [r7, #12]
 800a5d2:	f000 f9b9 	bl	800a948 <USB_WritePacket>
 800a5d6:	e105      	b.n	800a7e4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a5d8:	69bb      	ldr	r3, [r7, #24]
 800a5da:	015a      	lsls	r2, r3, #5
 800a5dc:	69fb      	ldr	r3, [r7, #28]
 800a5de:	4413      	add	r3, r2
 800a5e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5e4:	691b      	ldr	r3, [r3, #16]
 800a5e6:	69ba      	ldr	r2, [r7, #24]
 800a5e8:	0151      	lsls	r1, r2, #5
 800a5ea:	69fa      	ldr	r2, [r7, #28]
 800a5ec:	440a      	add	r2, r1
 800a5ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a5f2:	0cdb      	lsrs	r3, r3, #19
 800a5f4:	04db      	lsls	r3, r3, #19
 800a5f6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a5f8:	69bb      	ldr	r3, [r7, #24]
 800a5fa:	015a      	lsls	r2, r3, #5
 800a5fc:	69fb      	ldr	r3, [r7, #28]
 800a5fe:	4413      	add	r3, r2
 800a600:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a604:	691b      	ldr	r3, [r3, #16]
 800a606:	69ba      	ldr	r2, [r7, #24]
 800a608:	0151      	lsls	r1, r2, #5
 800a60a:	69fa      	ldr	r2, [r7, #28]
 800a60c:	440a      	add	r2, r1
 800a60e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a612:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a616:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a61a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800a61c:	69bb      	ldr	r3, [r7, #24]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d132      	bne.n	800a688 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	691b      	ldr	r3, [r3, #16]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d003      	beq.n	800a632 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	689a      	ldr	r2, [r3, #8]
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	689a      	ldr	r2, [r3, #8]
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a63a:	69bb      	ldr	r3, [r7, #24]
 800a63c:	015a      	lsls	r2, r3, #5
 800a63e:	69fb      	ldr	r3, [r7, #28]
 800a640:	4413      	add	r3, r2
 800a642:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a646:	691a      	ldr	r2, [r3, #16]
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	6a1b      	ldr	r3, [r3, #32]
 800a64c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a650:	69b9      	ldr	r1, [r7, #24]
 800a652:	0148      	lsls	r0, r1, #5
 800a654:	69f9      	ldr	r1, [r7, #28]
 800a656:	4401      	add	r1, r0
 800a658:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a65c:	4313      	orrs	r3, r2
 800a65e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a660:	69bb      	ldr	r3, [r7, #24]
 800a662:	015a      	lsls	r2, r3, #5
 800a664:	69fb      	ldr	r3, [r7, #28]
 800a666:	4413      	add	r3, r2
 800a668:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a66c:	691b      	ldr	r3, [r3, #16]
 800a66e:	69ba      	ldr	r2, [r7, #24]
 800a670:	0151      	lsls	r1, r2, #5
 800a672:	69fa      	ldr	r2, [r7, #28]
 800a674:	440a      	add	r2, r1
 800a676:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a67a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a67e:	6113      	str	r3, [r2, #16]
 800a680:	e062      	b.n	800a748 <USB_EPStartXfer+0x490>
 800a682:	bf00      	nop
 800a684:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	691b      	ldr	r3, [r3, #16]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d123      	bne.n	800a6d8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a690:	69bb      	ldr	r3, [r7, #24]
 800a692:	015a      	lsls	r2, r3, #5
 800a694:	69fb      	ldr	r3, [r7, #28]
 800a696:	4413      	add	r3, r2
 800a698:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a69c:	691a      	ldr	r2, [r3, #16]
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	689b      	ldr	r3, [r3, #8]
 800a6a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a6a6:	69b9      	ldr	r1, [r7, #24]
 800a6a8:	0148      	lsls	r0, r1, #5
 800a6aa:	69f9      	ldr	r1, [r7, #28]
 800a6ac:	4401      	add	r1, r0
 800a6ae:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a6b2:	4313      	orrs	r3, r2
 800a6b4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a6b6:	69bb      	ldr	r3, [r7, #24]
 800a6b8:	015a      	lsls	r2, r3, #5
 800a6ba:	69fb      	ldr	r3, [r7, #28]
 800a6bc:	4413      	add	r3, r2
 800a6be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6c2:	691b      	ldr	r3, [r3, #16]
 800a6c4:	69ba      	ldr	r2, [r7, #24]
 800a6c6:	0151      	lsls	r1, r2, #5
 800a6c8:	69fa      	ldr	r2, [r7, #28]
 800a6ca:	440a      	add	r2, r1
 800a6cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a6d0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a6d4:	6113      	str	r3, [r2, #16]
 800a6d6:	e037      	b.n	800a748 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	691a      	ldr	r2, [r3, #16]
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	689b      	ldr	r3, [r3, #8]
 800a6e0:	4413      	add	r3, r2
 800a6e2:	1e5a      	subs	r2, r3, #1
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	689b      	ldr	r3, [r3, #8]
 800a6e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6ec:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	689b      	ldr	r3, [r3, #8]
 800a6f2:	8afa      	ldrh	r2, [r7, #22]
 800a6f4:	fb03 f202 	mul.w	r2, r3, r2
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a6fc:	69bb      	ldr	r3, [r7, #24]
 800a6fe:	015a      	lsls	r2, r3, #5
 800a700:	69fb      	ldr	r3, [r7, #28]
 800a702:	4413      	add	r3, r2
 800a704:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a708:	691a      	ldr	r2, [r3, #16]
 800a70a:	8afb      	ldrh	r3, [r7, #22]
 800a70c:	04d9      	lsls	r1, r3, #19
 800a70e:	4b38      	ldr	r3, [pc, #224]	@ (800a7f0 <USB_EPStartXfer+0x538>)
 800a710:	400b      	ands	r3, r1
 800a712:	69b9      	ldr	r1, [r7, #24]
 800a714:	0148      	lsls	r0, r1, #5
 800a716:	69f9      	ldr	r1, [r7, #28]
 800a718:	4401      	add	r1, r0
 800a71a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a71e:	4313      	orrs	r3, r2
 800a720:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a722:	69bb      	ldr	r3, [r7, #24]
 800a724:	015a      	lsls	r2, r3, #5
 800a726:	69fb      	ldr	r3, [r7, #28]
 800a728:	4413      	add	r3, r2
 800a72a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a72e:	691a      	ldr	r2, [r3, #16]
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	6a1b      	ldr	r3, [r3, #32]
 800a734:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a738:	69b9      	ldr	r1, [r7, #24]
 800a73a:	0148      	lsls	r0, r1, #5
 800a73c:	69f9      	ldr	r1, [r7, #28]
 800a73e:	4401      	add	r1, r0
 800a740:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a744:	4313      	orrs	r3, r2
 800a746:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800a748:	79fb      	ldrb	r3, [r7, #7]
 800a74a:	2b01      	cmp	r3, #1
 800a74c:	d10d      	bne.n	800a76a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	68db      	ldr	r3, [r3, #12]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d009      	beq.n	800a76a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	68d9      	ldr	r1, [r3, #12]
 800a75a:	69bb      	ldr	r3, [r7, #24]
 800a75c:	015a      	lsls	r2, r3, #5
 800a75e:	69fb      	ldr	r3, [r7, #28]
 800a760:	4413      	add	r3, r2
 800a762:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a766:	460a      	mov	r2, r1
 800a768:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	791b      	ldrb	r3, [r3, #4]
 800a76e:	2b01      	cmp	r3, #1
 800a770:	d128      	bne.n	800a7c4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a772:	69fb      	ldr	r3, [r7, #28]
 800a774:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a778:	689b      	ldr	r3, [r3, #8]
 800a77a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d110      	bne.n	800a7a4 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a782:	69bb      	ldr	r3, [r7, #24]
 800a784:	015a      	lsls	r2, r3, #5
 800a786:	69fb      	ldr	r3, [r7, #28]
 800a788:	4413      	add	r3, r2
 800a78a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	69ba      	ldr	r2, [r7, #24]
 800a792:	0151      	lsls	r1, r2, #5
 800a794:	69fa      	ldr	r2, [r7, #28]
 800a796:	440a      	add	r2, r1
 800a798:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a79c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a7a0:	6013      	str	r3, [r2, #0]
 800a7a2:	e00f      	b.n	800a7c4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a7a4:	69bb      	ldr	r3, [r7, #24]
 800a7a6:	015a      	lsls	r2, r3, #5
 800a7a8:	69fb      	ldr	r3, [r7, #28]
 800a7aa:	4413      	add	r3, r2
 800a7ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	69ba      	ldr	r2, [r7, #24]
 800a7b4:	0151      	lsls	r1, r2, #5
 800a7b6:	69fa      	ldr	r2, [r7, #28]
 800a7b8:	440a      	add	r2, r1
 800a7ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a7be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a7c2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a7c4:	69bb      	ldr	r3, [r7, #24]
 800a7c6:	015a      	lsls	r2, r3, #5
 800a7c8:	69fb      	ldr	r3, [r7, #28]
 800a7ca:	4413      	add	r3, r2
 800a7cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	69ba      	ldr	r2, [r7, #24]
 800a7d4:	0151      	lsls	r1, r2, #5
 800a7d6:	69fa      	ldr	r2, [r7, #28]
 800a7d8:	440a      	add	r2, r1
 800a7da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a7de:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a7e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a7e4:	2300      	movs	r3, #0
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	3720      	adds	r7, #32
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}
 800a7ee:	bf00      	nop
 800a7f0:	1ff80000 	.word	0x1ff80000

0800a7f4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b087      	sub	sp, #28
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
 800a7fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a7fe:	2300      	movs	r3, #0
 800a800:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a802:	2300      	movs	r3, #0
 800a804:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	785b      	ldrb	r3, [r3, #1]
 800a80e:	2b01      	cmp	r3, #1
 800a810:	d14a      	bne.n	800a8a8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	781b      	ldrb	r3, [r3, #0]
 800a816:	015a      	lsls	r2, r3, #5
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	4413      	add	r3, r2
 800a81c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a826:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a82a:	f040 8086 	bne.w	800a93a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	781b      	ldrb	r3, [r3, #0]
 800a832:	015a      	lsls	r2, r3, #5
 800a834:	693b      	ldr	r3, [r7, #16]
 800a836:	4413      	add	r3, r2
 800a838:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	683a      	ldr	r2, [r7, #0]
 800a840:	7812      	ldrb	r2, [r2, #0]
 800a842:	0151      	lsls	r1, r2, #5
 800a844:	693a      	ldr	r2, [r7, #16]
 800a846:	440a      	add	r2, r1
 800a848:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a84c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a850:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	781b      	ldrb	r3, [r3, #0]
 800a856:	015a      	lsls	r2, r3, #5
 800a858:	693b      	ldr	r3, [r7, #16]
 800a85a:	4413      	add	r3, r2
 800a85c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	683a      	ldr	r2, [r7, #0]
 800a864:	7812      	ldrb	r2, [r2, #0]
 800a866:	0151      	lsls	r1, r2, #5
 800a868:	693a      	ldr	r2, [r7, #16]
 800a86a:	440a      	add	r2, r1
 800a86c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a870:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a874:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	3301      	adds	r3, #1
 800a87a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a882:	4293      	cmp	r3, r2
 800a884:	d902      	bls.n	800a88c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a886:	2301      	movs	r3, #1
 800a888:	75fb      	strb	r3, [r7, #23]
          break;
 800a88a:	e056      	b.n	800a93a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	781b      	ldrb	r3, [r3, #0]
 800a890:	015a      	lsls	r2, r3, #5
 800a892:	693b      	ldr	r3, [r7, #16]
 800a894:	4413      	add	r3, r2
 800a896:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a8a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a8a4:	d0e7      	beq.n	800a876 <USB_EPStopXfer+0x82>
 800a8a6:	e048      	b.n	800a93a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	781b      	ldrb	r3, [r3, #0]
 800a8ac:	015a      	lsls	r2, r3, #5
 800a8ae:	693b      	ldr	r3, [r7, #16]
 800a8b0:	4413      	add	r3, r2
 800a8b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a8bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a8c0:	d13b      	bne.n	800a93a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	781b      	ldrb	r3, [r3, #0]
 800a8c6:	015a      	lsls	r2, r3, #5
 800a8c8:	693b      	ldr	r3, [r7, #16]
 800a8ca:	4413      	add	r3, r2
 800a8cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	683a      	ldr	r2, [r7, #0]
 800a8d4:	7812      	ldrb	r2, [r2, #0]
 800a8d6:	0151      	lsls	r1, r2, #5
 800a8d8:	693a      	ldr	r2, [r7, #16]
 800a8da:	440a      	add	r2, r1
 800a8dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a8e0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a8e4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	781b      	ldrb	r3, [r3, #0]
 800a8ea:	015a      	lsls	r2, r3, #5
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	4413      	add	r3, r2
 800a8f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	683a      	ldr	r2, [r7, #0]
 800a8f8:	7812      	ldrb	r2, [r2, #0]
 800a8fa:	0151      	lsls	r1, r2, #5
 800a8fc:	693a      	ldr	r2, [r7, #16]
 800a8fe:	440a      	add	r2, r1
 800a900:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a904:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a908:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	3301      	adds	r3, #1
 800a90e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a916:	4293      	cmp	r3, r2
 800a918:	d902      	bls.n	800a920 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a91a:	2301      	movs	r3, #1
 800a91c:	75fb      	strb	r3, [r7, #23]
          break;
 800a91e:	e00c      	b.n	800a93a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	781b      	ldrb	r3, [r3, #0]
 800a924:	015a      	lsls	r2, r3, #5
 800a926:	693b      	ldr	r3, [r7, #16]
 800a928:	4413      	add	r3, r2
 800a92a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a934:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a938:	d0e7      	beq.n	800a90a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a93a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	371c      	adds	r7, #28
 800a940:	46bd      	mov	sp, r7
 800a942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a946:	4770      	bx	lr

0800a948 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a948:	b480      	push	{r7}
 800a94a:	b089      	sub	sp, #36	@ 0x24
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	60f8      	str	r0, [r7, #12]
 800a950:	60b9      	str	r1, [r7, #8]
 800a952:	4611      	mov	r1, r2
 800a954:	461a      	mov	r2, r3
 800a956:	460b      	mov	r3, r1
 800a958:	71fb      	strb	r3, [r7, #7]
 800a95a:	4613      	mov	r3, r2
 800a95c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a966:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d123      	bne.n	800a9b6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a96e:	88bb      	ldrh	r3, [r7, #4]
 800a970:	3303      	adds	r3, #3
 800a972:	089b      	lsrs	r3, r3, #2
 800a974:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a976:	2300      	movs	r3, #0
 800a978:	61bb      	str	r3, [r7, #24]
 800a97a:	e018      	b.n	800a9ae <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a97c:	79fb      	ldrb	r3, [r7, #7]
 800a97e:	031a      	lsls	r2, r3, #12
 800a980:	697b      	ldr	r3, [r7, #20]
 800a982:	4413      	add	r3, r2
 800a984:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a988:	461a      	mov	r2, r3
 800a98a:	69fb      	ldr	r3, [r7, #28]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a990:	69fb      	ldr	r3, [r7, #28]
 800a992:	3301      	adds	r3, #1
 800a994:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a996:	69fb      	ldr	r3, [r7, #28]
 800a998:	3301      	adds	r3, #1
 800a99a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a99c:	69fb      	ldr	r3, [r7, #28]
 800a99e:	3301      	adds	r3, #1
 800a9a0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a9a2:	69fb      	ldr	r3, [r7, #28]
 800a9a4:	3301      	adds	r3, #1
 800a9a6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a9a8:	69bb      	ldr	r3, [r7, #24]
 800a9aa:	3301      	adds	r3, #1
 800a9ac:	61bb      	str	r3, [r7, #24]
 800a9ae:	69ba      	ldr	r2, [r7, #24]
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	429a      	cmp	r2, r3
 800a9b4:	d3e2      	bcc.n	800a97c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a9b6:	2300      	movs	r3, #0
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	3724      	adds	r7, #36	@ 0x24
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c2:	4770      	bx	lr

0800a9c4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a9c4:	b480      	push	{r7}
 800a9c6:	b08b      	sub	sp, #44	@ 0x2c
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	60f8      	str	r0, [r7, #12]
 800a9cc:	60b9      	str	r1, [r7, #8]
 800a9ce:	4613      	mov	r3, r2
 800a9d0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a9da:	88fb      	ldrh	r3, [r7, #6]
 800a9dc:	089b      	lsrs	r3, r3, #2
 800a9de:	b29b      	uxth	r3, r3
 800a9e0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a9e2:	88fb      	ldrh	r3, [r7, #6]
 800a9e4:	f003 0303 	and.w	r3, r3, #3
 800a9e8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	623b      	str	r3, [r7, #32]
 800a9ee:	e014      	b.n	800aa1a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a9f0:	69bb      	ldr	r3, [r7, #24]
 800a9f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a9f6:	681a      	ldr	r2, [r3, #0]
 800a9f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9fa:	601a      	str	r2, [r3, #0]
    pDest++;
 800a9fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9fe:	3301      	adds	r3, #1
 800aa00:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800aa02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa04:	3301      	adds	r3, #1
 800aa06:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800aa08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa0a:	3301      	adds	r3, #1
 800aa0c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800aa0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa10:	3301      	adds	r3, #1
 800aa12:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800aa14:	6a3b      	ldr	r3, [r7, #32]
 800aa16:	3301      	adds	r3, #1
 800aa18:	623b      	str	r3, [r7, #32]
 800aa1a:	6a3a      	ldr	r2, [r7, #32]
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	d3e6      	bcc.n	800a9f0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800aa22:	8bfb      	ldrh	r3, [r7, #30]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d01e      	beq.n	800aa66 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800aa28:	2300      	movs	r3, #0
 800aa2a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800aa2c:	69bb      	ldr	r3, [r7, #24]
 800aa2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa32:	461a      	mov	r2, r3
 800aa34:	f107 0310 	add.w	r3, r7, #16
 800aa38:	6812      	ldr	r2, [r2, #0]
 800aa3a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800aa3c:	693a      	ldr	r2, [r7, #16]
 800aa3e:	6a3b      	ldr	r3, [r7, #32]
 800aa40:	b2db      	uxtb	r3, r3
 800aa42:	00db      	lsls	r3, r3, #3
 800aa44:	fa22 f303 	lsr.w	r3, r2, r3
 800aa48:	b2da      	uxtb	r2, r3
 800aa4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa4c:	701a      	strb	r2, [r3, #0]
      i++;
 800aa4e:	6a3b      	ldr	r3, [r7, #32]
 800aa50:	3301      	adds	r3, #1
 800aa52:	623b      	str	r3, [r7, #32]
      pDest++;
 800aa54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa56:	3301      	adds	r3, #1
 800aa58:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800aa5a:	8bfb      	ldrh	r3, [r7, #30]
 800aa5c:	3b01      	subs	r3, #1
 800aa5e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800aa60:	8bfb      	ldrh	r3, [r7, #30]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d1ea      	bne.n	800aa3c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800aa66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800aa68:	4618      	mov	r0, r3
 800aa6a:	372c      	adds	r7, #44	@ 0x2c
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa72:	4770      	bx	lr

0800aa74 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800aa74:	b480      	push	{r7}
 800aa76:	b085      	sub	sp, #20
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
 800aa7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	781b      	ldrb	r3, [r3, #0]
 800aa86:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	785b      	ldrb	r3, [r3, #1]
 800aa8c:	2b01      	cmp	r3, #1
 800aa8e:	d12c      	bne.n	800aaea <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	015a      	lsls	r2, r3, #5
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	4413      	add	r3, r2
 800aa98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	db12      	blt.n	800aac8 <USB_EPSetStall+0x54>
 800aaa2:	68bb      	ldr	r3, [r7, #8]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d00f      	beq.n	800aac8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800aaa8:	68bb      	ldr	r3, [r7, #8]
 800aaaa:	015a      	lsls	r2, r3, #5
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	4413      	add	r3, r2
 800aab0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	68ba      	ldr	r2, [r7, #8]
 800aab8:	0151      	lsls	r1, r2, #5
 800aaba:	68fa      	ldr	r2, [r7, #12]
 800aabc:	440a      	add	r2, r1
 800aabe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aac2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800aac6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	015a      	lsls	r2, r3, #5
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	4413      	add	r3, r2
 800aad0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	68ba      	ldr	r2, [r7, #8]
 800aad8:	0151      	lsls	r1, r2, #5
 800aada:	68fa      	ldr	r2, [r7, #12]
 800aadc:	440a      	add	r2, r1
 800aade:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aae2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800aae6:	6013      	str	r3, [r2, #0]
 800aae8:	e02b      	b.n	800ab42 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	015a      	lsls	r2, r3, #5
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	4413      	add	r3, r2
 800aaf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	db12      	blt.n	800ab22 <USB_EPSetStall+0xae>
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d00f      	beq.n	800ab22 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ab02:	68bb      	ldr	r3, [r7, #8]
 800ab04:	015a      	lsls	r2, r3, #5
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	4413      	add	r3, r2
 800ab0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	68ba      	ldr	r2, [r7, #8]
 800ab12:	0151      	lsls	r1, r2, #5
 800ab14:	68fa      	ldr	r2, [r7, #12]
 800ab16:	440a      	add	r2, r1
 800ab18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab1c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ab20:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	015a      	lsls	r2, r3, #5
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	4413      	add	r3, r2
 800ab2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	68ba      	ldr	r2, [r7, #8]
 800ab32:	0151      	lsls	r1, r2, #5
 800ab34:	68fa      	ldr	r2, [r7, #12]
 800ab36:	440a      	add	r2, r1
 800ab38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab3c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ab40:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ab42:	2300      	movs	r3, #0
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	3714      	adds	r7, #20
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4e:	4770      	bx	lr

0800ab50 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ab50:	b480      	push	{r7}
 800ab52:	b085      	sub	sp, #20
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
 800ab58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	781b      	ldrb	r3, [r3, #0]
 800ab62:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	785b      	ldrb	r3, [r3, #1]
 800ab68:	2b01      	cmp	r3, #1
 800ab6a:	d128      	bne.n	800abbe <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ab6c:	68bb      	ldr	r3, [r7, #8]
 800ab6e:	015a      	lsls	r2, r3, #5
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	4413      	add	r3, r2
 800ab74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	68ba      	ldr	r2, [r7, #8]
 800ab7c:	0151      	lsls	r1, r2, #5
 800ab7e:	68fa      	ldr	r2, [r7, #12]
 800ab80:	440a      	add	r2, r1
 800ab82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab86:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ab8a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	791b      	ldrb	r3, [r3, #4]
 800ab90:	2b03      	cmp	r3, #3
 800ab92:	d003      	beq.n	800ab9c <USB_EPClearStall+0x4c>
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	791b      	ldrb	r3, [r3, #4]
 800ab98:	2b02      	cmp	r3, #2
 800ab9a:	d138      	bne.n	800ac0e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	015a      	lsls	r2, r3, #5
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	4413      	add	r3, r2
 800aba4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	68ba      	ldr	r2, [r7, #8]
 800abac:	0151      	lsls	r1, r2, #5
 800abae:	68fa      	ldr	r2, [r7, #12]
 800abb0:	440a      	add	r2, r1
 800abb2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800abb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800abba:	6013      	str	r3, [r2, #0]
 800abbc:	e027      	b.n	800ac0e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	015a      	lsls	r2, r3, #5
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	4413      	add	r3, r2
 800abc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	68ba      	ldr	r2, [r7, #8]
 800abce:	0151      	lsls	r1, r2, #5
 800abd0:	68fa      	ldr	r2, [r7, #12]
 800abd2:	440a      	add	r2, r1
 800abd4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800abd8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800abdc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	791b      	ldrb	r3, [r3, #4]
 800abe2:	2b03      	cmp	r3, #3
 800abe4:	d003      	beq.n	800abee <USB_EPClearStall+0x9e>
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	791b      	ldrb	r3, [r3, #4]
 800abea:	2b02      	cmp	r3, #2
 800abec:	d10f      	bne.n	800ac0e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	015a      	lsls	r2, r3, #5
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	4413      	add	r3, r2
 800abf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	68ba      	ldr	r2, [r7, #8]
 800abfe:	0151      	lsls	r1, r2, #5
 800ac00:	68fa      	ldr	r2, [r7, #12]
 800ac02:	440a      	add	r2, r1
 800ac04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ac08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ac0c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ac0e:	2300      	movs	r3, #0
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	3714      	adds	r7, #20
 800ac14:	46bd      	mov	sp, r7
 800ac16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1a:	4770      	bx	lr

0800ac1c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ac1c:	b480      	push	{r7}
 800ac1e:	b085      	sub	sp, #20
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
 800ac24:	460b      	mov	r3, r1
 800ac26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	68fa      	ldr	r2, [r7, #12]
 800ac36:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ac3a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800ac3e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac46:	681a      	ldr	r2, [r3, #0]
 800ac48:	78fb      	ldrb	r3, [r7, #3]
 800ac4a:	011b      	lsls	r3, r3, #4
 800ac4c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800ac50:	68f9      	ldr	r1, [r7, #12]
 800ac52:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ac56:	4313      	orrs	r3, r2
 800ac58:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ac5a:	2300      	movs	r3, #0
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	3714      	adds	r7, #20
 800ac60:	46bd      	mov	sp, r7
 800ac62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac66:	4770      	bx	lr

0800ac68 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b085      	sub	sp, #20
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	68fa      	ldr	r2, [r7, #12]
 800ac7e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ac82:	f023 0303 	bic.w	r3, r3, #3
 800ac86:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac8e:	685b      	ldr	r3, [r3, #4]
 800ac90:	68fa      	ldr	r2, [r7, #12]
 800ac92:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ac96:	f023 0302 	bic.w	r3, r3, #2
 800ac9a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ac9c:	2300      	movs	r3, #0
}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	3714      	adds	r7, #20
 800aca2:	46bd      	mov	sp, r7
 800aca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca8:	4770      	bx	lr

0800acaa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800acaa:	b480      	push	{r7}
 800acac:	b085      	sub	sp, #20
 800acae:	af00      	add	r7, sp, #0
 800acb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	68fa      	ldr	r2, [r7, #12]
 800acc0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800acc4:	f023 0303 	bic.w	r3, r3, #3
 800acc8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800acd0:	685b      	ldr	r3, [r3, #4]
 800acd2:	68fa      	ldr	r2, [r7, #12]
 800acd4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800acd8:	f043 0302 	orr.w	r3, r3, #2
 800acdc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800acde:	2300      	movs	r3, #0
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	3714      	adds	r7, #20
 800ace4:	46bd      	mov	sp, r7
 800ace6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acea:	4770      	bx	lr

0800acec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800acec:	b480      	push	{r7}
 800acee:	b085      	sub	sp, #20
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	695b      	ldr	r3, [r3, #20]
 800acf8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	699b      	ldr	r3, [r3, #24]
 800acfe:	68fa      	ldr	r2, [r7, #12]
 800ad00:	4013      	ands	r3, r2
 800ad02:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ad04:	68fb      	ldr	r3, [r7, #12]
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	3714      	adds	r7, #20
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad10:	4770      	bx	lr

0800ad12 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ad12:	b480      	push	{r7}
 800ad14:	b085      	sub	sp, #20
 800ad16:	af00      	add	r7, sp, #0
 800ad18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad24:	699b      	ldr	r3, [r3, #24]
 800ad26:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad2e:	69db      	ldr	r3, [r3, #28]
 800ad30:	68ba      	ldr	r2, [r7, #8]
 800ad32:	4013      	ands	r3, r2
 800ad34:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ad36:	68bb      	ldr	r3, [r7, #8]
 800ad38:	0c1b      	lsrs	r3, r3, #16
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	3714      	adds	r7, #20
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad44:	4770      	bx	lr

0800ad46 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ad46:	b480      	push	{r7}
 800ad48:	b085      	sub	sp, #20
 800ad4a:	af00      	add	r7, sp, #0
 800ad4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad58:	699b      	ldr	r3, [r3, #24]
 800ad5a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad62:	69db      	ldr	r3, [r3, #28]
 800ad64:	68ba      	ldr	r2, [r7, #8]
 800ad66:	4013      	ands	r3, r2
 800ad68:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	b29b      	uxth	r3, r3
}
 800ad6e:	4618      	mov	r0, r3
 800ad70:	3714      	adds	r7, #20
 800ad72:	46bd      	mov	sp, r7
 800ad74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad78:	4770      	bx	lr

0800ad7a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ad7a:	b480      	push	{r7}
 800ad7c:	b085      	sub	sp, #20
 800ad7e:	af00      	add	r7, sp, #0
 800ad80:	6078      	str	r0, [r7, #4]
 800ad82:	460b      	mov	r3, r1
 800ad84:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ad8a:	78fb      	ldrb	r3, [r7, #3]
 800ad8c:	015a      	lsls	r2, r3, #5
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	4413      	add	r3, r2
 800ad92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad96:	689b      	ldr	r3, [r3, #8]
 800ad98:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ada0:	695b      	ldr	r3, [r3, #20]
 800ada2:	68ba      	ldr	r2, [r7, #8]
 800ada4:	4013      	ands	r3, r2
 800ada6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ada8:	68bb      	ldr	r3, [r7, #8]
}
 800adaa:	4618      	mov	r0, r3
 800adac:	3714      	adds	r7, #20
 800adae:	46bd      	mov	sp, r7
 800adb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb4:	4770      	bx	lr

0800adb6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800adb6:	b480      	push	{r7}
 800adb8:	b087      	sub	sp, #28
 800adba:	af00      	add	r7, sp, #0
 800adbc:	6078      	str	r0, [r7, #4]
 800adbe:	460b      	mov	r3, r1
 800adc0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800adc6:	697b      	ldr	r3, [r7, #20]
 800adc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800adcc:	691b      	ldr	r3, [r3, #16]
 800adce:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800add0:	697b      	ldr	r3, [r7, #20]
 800add2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800add6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800add8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800adda:	78fb      	ldrb	r3, [r7, #3]
 800addc:	f003 030f 	and.w	r3, r3, #15
 800ade0:	68fa      	ldr	r2, [r7, #12]
 800ade2:	fa22 f303 	lsr.w	r3, r2, r3
 800ade6:	01db      	lsls	r3, r3, #7
 800ade8:	b2db      	uxtb	r3, r3
 800adea:	693a      	ldr	r2, [r7, #16]
 800adec:	4313      	orrs	r3, r2
 800adee:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800adf0:	78fb      	ldrb	r3, [r7, #3]
 800adf2:	015a      	lsls	r2, r3, #5
 800adf4:	697b      	ldr	r3, [r7, #20]
 800adf6:	4413      	add	r3, r2
 800adf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800adfc:	689b      	ldr	r3, [r3, #8]
 800adfe:	693a      	ldr	r2, [r7, #16]
 800ae00:	4013      	ands	r3, r2
 800ae02:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ae04:	68bb      	ldr	r3, [r7, #8]
}
 800ae06:	4618      	mov	r0, r3
 800ae08:	371c      	adds	r7, #28
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae10:	4770      	bx	lr

0800ae12 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800ae12:	b480      	push	{r7}
 800ae14:	b083      	sub	sp, #12
 800ae16:	af00      	add	r7, sp, #0
 800ae18:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	695b      	ldr	r3, [r3, #20]
 800ae1e:	f003 0301 	and.w	r3, r3, #1
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	370c      	adds	r7, #12
 800ae26:	46bd      	mov	sp, r7
 800ae28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2c:	4770      	bx	lr

0800ae2e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800ae2e:	b480      	push	{r7}
 800ae30:	b085      	sub	sp, #20
 800ae32:	af00      	add	r7, sp, #0
 800ae34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	68fa      	ldr	r2, [r7, #12]
 800ae44:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ae48:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800ae4c:	f023 0307 	bic.w	r3, r3, #7
 800ae50:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae58:	685b      	ldr	r3, [r3, #4]
 800ae5a:	68fa      	ldr	r2, [r7, #12]
 800ae5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ae60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ae64:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ae66:	2300      	movs	r3, #0
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	3714      	adds	r7, #20
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae72:	4770      	bx	lr

0800ae74 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800ae74:	b480      	push	{r7}
 800ae76:	b087      	sub	sp, #28
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	60f8      	str	r0, [r7, #12]
 800ae7c:	460b      	mov	r3, r1
 800ae7e:	607a      	str	r2, [r7, #4]
 800ae80:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	333c      	adds	r3, #60	@ 0x3c
 800ae8a:	3304      	adds	r3, #4
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ae90:	693b      	ldr	r3, [r7, #16]
 800ae92:	4a26      	ldr	r2, [pc, #152]	@ (800af2c <USB_EP0_OutStart+0xb8>)
 800ae94:	4293      	cmp	r3, r2
 800ae96:	d90a      	bls.n	800aeae <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ae98:	697b      	ldr	r3, [r7, #20]
 800ae9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aea4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aea8:	d101      	bne.n	800aeae <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800aeaa:	2300      	movs	r3, #0
 800aeac:	e037      	b.n	800af1e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aeb4:	461a      	mov	r2, r3
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aec0:	691b      	ldr	r3, [r3, #16]
 800aec2:	697a      	ldr	r2, [r7, #20]
 800aec4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aec8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800aecc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800aece:	697b      	ldr	r3, [r7, #20]
 800aed0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aed4:	691b      	ldr	r3, [r3, #16]
 800aed6:	697a      	ldr	r2, [r7, #20]
 800aed8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aedc:	f043 0318 	orr.w	r3, r3, #24
 800aee0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aee8:	691b      	ldr	r3, [r3, #16]
 800aeea:	697a      	ldr	r2, [r7, #20]
 800aeec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aef0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800aef4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800aef6:	7afb      	ldrb	r3, [r7, #11]
 800aef8:	2b01      	cmp	r3, #1
 800aefa:	d10f      	bne.n	800af1c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800aefc:	697b      	ldr	r3, [r7, #20]
 800aefe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af02:	461a      	mov	r2, r3
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800af08:	697b      	ldr	r3, [r7, #20]
 800af0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	697a      	ldr	r2, [r7, #20]
 800af12:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af16:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800af1a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800af1c:	2300      	movs	r3, #0
}
 800af1e:	4618      	mov	r0, r3
 800af20:	371c      	adds	r7, #28
 800af22:	46bd      	mov	sp, r7
 800af24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af28:	4770      	bx	lr
 800af2a:	bf00      	nop
 800af2c:	4f54300a 	.word	0x4f54300a

0800af30 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800af30:	b480      	push	{r7}
 800af32:	b085      	sub	sp, #20
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800af38:	2300      	movs	r3, #0
 800af3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	3301      	adds	r3, #1
 800af40:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800af48:	d901      	bls.n	800af4e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800af4a:	2303      	movs	r3, #3
 800af4c:	e01b      	b.n	800af86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	691b      	ldr	r3, [r3, #16]
 800af52:	2b00      	cmp	r3, #0
 800af54:	daf2      	bge.n	800af3c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800af56:	2300      	movs	r3, #0
 800af58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	691b      	ldr	r3, [r3, #16]
 800af5e:	f043 0201 	orr.w	r2, r3, #1
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	3301      	adds	r3, #1
 800af6a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800af72:	d901      	bls.n	800af78 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800af74:	2303      	movs	r3, #3
 800af76:	e006      	b.n	800af86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	691b      	ldr	r3, [r3, #16]
 800af7c:	f003 0301 	and.w	r3, r3, #1
 800af80:	2b01      	cmp	r3, #1
 800af82:	d0f0      	beq.n	800af66 <USB_CoreReset+0x36>

  return HAL_OK;
 800af84:	2300      	movs	r3, #0
}
 800af86:	4618      	mov	r0, r3
 800af88:	3714      	adds	r7, #20
 800af8a:	46bd      	mov	sp, r7
 800af8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af90:	4770      	bx	lr
	...

0800af94 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  USBD_COMPOSITE_Mount_Class();
 800af98:	f001 f98c 	bl	800c2b4 <USBD_COMPOSITE_Mount_Class>
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_HS) != USBD_OK)
  {
    Error_Handler();
  }
#else
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_FS) != USBD_OK)
 800af9c:	2200      	movs	r2, #0
 800af9e:	4917      	ldr	r1, [pc, #92]	@ (800affc <MX_USB_DEVICE_Init+0x68>)
 800afa0:	4817      	ldr	r0, [pc, #92]	@ (800b000 <MX_USB_DEVICE_Init+0x6c>)
 800afa2:	f001 fda1 	bl	800cae8 <USBD_Init>
 800afa6:	4603      	mov	r3, r0
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d001      	beq.n	800afb0 <MX_USB_DEVICE_Init+0x1c>
  {
    Error_Handler();
 800afac:	f7f8 f914 	bl	80031d8 <Error_Handler>
  }
#endif
  if (USBD_RegisterClass(&hUsbDevice, &USBD_COMPOSITE) != USBD_OK)
 800afb0:	4914      	ldr	r1, [pc, #80]	@ (800b004 <MX_USB_DEVICE_Init+0x70>)
 800afb2:	4813      	ldr	r0, [pc, #76]	@ (800b000 <MX_USB_DEVICE_Init+0x6c>)
 800afb4:	f001 fdc4 	bl	800cb40 <USBD_RegisterClass>
 800afb8:	4603      	mov	r3, r0
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d001      	beq.n	800afc2 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 800afbe:	f7f8 f90b 	bl	80031d8 <Error_Handler>
  }
#if (USBD_USE_CDC_ACM == 1)
  if (USBD_CDC_ACM_RegisterInterface(&hUsbDevice, &USBD_CDC_ACM_fops) != USBD_OK)
 800afc2:	4911      	ldr	r1, [pc, #68]	@ (800b008 <MX_USB_DEVICE_Init+0x74>)
 800afc4:	480e      	ldr	r0, [pc, #56]	@ (800b000 <MX_USB_DEVICE_Init+0x6c>)
 800afc6:	f000 fe4f 	bl	800bc68 <USBD_CDC_ACM_RegisterInterface>
 800afca:	4603      	mov	r3, r0
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d001      	beq.n	800afd4 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800afd0:	f7f8 f902 	bl	80031d8 <Error_Handler>
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDevice, &USBD_CustomHID_fops) != USBD_OK)
 800afd4:	490d      	ldr	r1, [pc, #52]	@ (800b00c <MX_USB_DEVICE_Init+0x78>)
 800afd6:	480a      	ldr	r0, [pc, #40]	@ (800b000 <MX_USB_DEVICE_Init+0x6c>)
 800afd8:	f001 fd38 	bl	800ca4c <USBD_CUSTOM_HID_RegisterInterface>
 800afdc:	4603      	mov	r3, r0
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d001      	beq.n	800afe6 <MX_USB_DEVICE_Init+0x52>
  {
    Error_Handler();
 800afe2:	f7f8 f8f9 	bl	80031d8 <Error_Handler>
  if (USBD_PRNT_RegisterInterface(&hUsbDevice, &USBD_PRNT_fops) != USBD_OK)
  {
    Error_Handler();
  }
#endif
  if (USBD_Start(&hUsbDevice) != USBD_OK)
 800afe6:	4806      	ldr	r0, [pc, #24]	@ (800b000 <MX_USB_DEVICE_Init+0x6c>)
 800afe8:	f001 fde8 	bl	800cbbc <USBD_Start>
 800afec:	4603      	mov	r3, r0
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d001      	beq.n	800aff6 <MX_USB_DEVICE_Init+0x62>
  {
    Error_Handler();
 800aff2:	f7f8 f8f1 	bl	80031d8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800aff6:	bf00      	nop
 800aff8:	bd80      	pop	{r7, pc}
 800affa:	bf00      	nop
 800affc:	20000030 	.word	0x20000030
 800b000:	200010b0 	.word	0x200010b0
 800b004:	200001b8 	.word	0x200001b8
 800b008:	2000001c 	.word	0x2000001c
 800b00c:	200000c8 	.word	0x200000c8

0800b010 <CDC_Init>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init(uint8_t cdc_ch)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b082      	sub	sp, #8
 800b014:	af00      	add	r7, sp, #0
 800b016:	4603      	mov	r3, r0
 800b018:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */

  /* ##-1- Set Application Buffers */
  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, RX_Buffer[cdc_ch]);
 800b01a:	79fb      	ldrb	r3, [r7, #7]
 800b01c:	01db      	lsls	r3, r3, #7
 800b01e:	4a06      	ldr	r2, [pc, #24]	@ (800b038 <CDC_Init+0x28>)
 800b020:	441a      	add	r2, r3
 800b022:	79fb      	ldrb	r3, [r7, #7]
 800b024:	4905      	ldr	r1, [pc, #20]	@ (800b03c <CDC_Init+0x2c>)
 800b026:	4618      	mov	r0, r3
 800b028:	f000 fe58 	bl	800bcdc <USBD_CDC_SetRxBuffer>
  //  {
  //    /* Starting Error */
  //    Error_Handler();
  //  }

  return (USBD_OK);
 800b02c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b02e:	4618      	mov	r0, r3
 800b030:	3708      	adds	r7, #8
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}
 800b036:	bf00      	nop
 800b038:	200013cc 	.word	0x200013cc
 800b03c:	200010b0 	.word	0x200010b0

0800b040 <CDC_DeInit>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit(uint8_t cdc_ch)
{
 800b040:	b480      	push	{r7}
 800b042:	b083      	sub	sp, #12
 800b044:	af00      	add	r7, sp, #0
 800b046:	4603      	mov	r3, r0
 800b048:	71fb      	strb	r3, [r7, #7]
  //  if (HAL_UART_DeInit(CDC_CH_To_UART_Handle(cdc_ch)) != HAL_OK)
  //  {
  //    /* Initialization Error */
  //    Error_Handler();
  //  }
  return (USBD_OK);
 800b04a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	370c      	adds	r7, #12
 800b050:	46bd      	mov	sp, r7
 800b052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b056:	4770      	bx	lr

0800b058 <CDC_Control>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control(uint8_t cdc_ch, uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 800b058:	b480      	push	{r7}
 800b05a:	b083      	sub	sp, #12
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	603a      	str	r2, [r7, #0]
 800b060:	461a      	mov	r2, r3
 800b062:	4603      	mov	r3, r0
 800b064:	71fb      	strb	r3, [r7, #7]
 800b066:	460b      	mov	r3, r1
 800b068:	71bb      	strb	r3, [r7, #6]
 800b06a:	4613      	mov	r3, r2
 800b06c:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd)
 800b06e:	79bb      	ldrb	r3, [r7, #6]
 800b070:	2b23      	cmp	r3, #35	@ 0x23
 800b072:	f200 80b6 	bhi.w	800b1e2 <CDC_Control+0x18a>
 800b076:	a201      	add	r2, pc, #4	@ (adr r2, 800b07c <CDC_Control+0x24>)
 800b078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b07c:	0800b1e3 	.word	0x0800b1e3
 800b080:	0800b1e3 	.word	0x0800b1e3
 800b084:	0800b1e3 	.word	0x0800b1e3
 800b088:	0800b1e3 	.word	0x0800b1e3
 800b08c:	0800b1e3 	.word	0x0800b1e3
 800b090:	0800b1e3 	.word	0x0800b1e3
 800b094:	0800b1e3 	.word	0x0800b1e3
 800b098:	0800b1e3 	.word	0x0800b1e3
 800b09c:	0800b1e3 	.word	0x0800b1e3
 800b0a0:	0800b1e3 	.word	0x0800b1e3
 800b0a4:	0800b1e3 	.word	0x0800b1e3
 800b0a8:	0800b1e3 	.word	0x0800b1e3
 800b0ac:	0800b1e3 	.word	0x0800b1e3
 800b0b0:	0800b1e3 	.word	0x0800b1e3
 800b0b4:	0800b1e3 	.word	0x0800b1e3
 800b0b8:	0800b1e3 	.word	0x0800b1e3
 800b0bc:	0800b1e3 	.word	0x0800b1e3
 800b0c0:	0800b1e3 	.word	0x0800b1e3
 800b0c4:	0800b1e3 	.word	0x0800b1e3
 800b0c8:	0800b1e3 	.word	0x0800b1e3
 800b0cc:	0800b1e3 	.word	0x0800b1e3
 800b0d0:	0800b1e3 	.word	0x0800b1e3
 800b0d4:	0800b1e3 	.word	0x0800b1e3
 800b0d8:	0800b1e3 	.word	0x0800b1e3
 800b0dc:	0800b1e3 	.word	0x0800b1e3
 800b0e0:	0800b1e3 	.word	0x0800b1e3
 800b0e4:	0800b1e3 	.word	0x0800b1e3
 800b0e8:	0800b1e3 	.word	0x0800b1e3
 800b0ec:	0800b1e3 	.word	0x0800b1e3
 800b0f0:	0800b1e3 	.word	0x0800b1e3
 800b0f4:	0800b1e3 	.word	0x0800b1e3
 800b0f8:	0800b1e3 	.word	0x0800b1e3
 800b0fc:	0800b10d 	.word	0x0800b10d
 800b100:	0800b16d 	.word	0x0800b16d
 800b104:	0800b1e3 	.word	0x0800b1e3
 800b108:	0800b1e3 	.word	0x0800b1e3
    /*                                        3 - Mark                             */
    /*                                        4 - Space                            */
    /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
    /*******************************************************************************/
  case CDC_SET_LINE_CODING:
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	781b      	ldrb	r3, [r3, #0]
 800b110:	461a      	mov	r2, r3
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	3301      	adds	r3, #1
 800b116:	781b      	ldrb	r3, [r3, #0]
 800b118:	021b      	lsls	r3, r3, #8
 800b11a:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	3302      	adds	r3, #2
 800b120:	781b      	ldrb	r3, [r3, #0]
 800b122:	041b      	lsls	r3, r3, #16
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 800b124:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	3303      	adds	r3, #3
 800b12a:	781b      	ldrb	r3, [r3, #0]
 800b12c:	061b      	lsls	r3, r3, #24
 800b12e:	431a      	orrs	r2, r3
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 800b130:	79fb      	ldrb	r3, [r7, #7]
 800b132:	4611      	mov	r1, r2
 800b134:	4a2f      	ldr	r2, [pc, #188]	@ (800b1f4 <CDC_Control+0x19c>)
 800b136:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    Line_Coding[cdc_ch].format = pbuf[4];
 800b13a:	79fb      	ldrb	r3, [r7, #7]
 800b13c:	683a      	ldr	r2, [r7, #0]
 800b13e:	7911      	ldrb	r1, [r2, #4]
 800b140:	4a2c      	ldr	r2, [pc, #176]	@ (800b1f4 <CDC_Control+0x19c>)
 800b142:	00db      	lsls	r3, r3, #3
 800b144:	4413      	add	r3, r2
 800b146:	460a      	mov	r2, r1
 800b148:	711a      	strb	r2, [r3, #4]
    Line_Coding[cdc_ch].paritytype = pbuf[5];
 800b14a:	79fb      	ldrb	r3, [r7, #7]
 800b14c:	683a      	ldr	r2, [r7, #0]
 800b14e:	7951      	ldrb	r1, [r2, #5]
 800b150:	4a28      	ldr	r2, [pc, #160]	@ (800b1f4 <CDC_Control+0x19c>)
 800b152:	00db      	lsls	r3, r3, #3
 800b154:	4413      	add	r3, r2
 800b156:	460a      	mov	r2, r1
 800b158:	715a      	strb	r2, [r3, #5]
    Line_Coding[cdc_ch].datatype = pbuf[6];
 800b15a:	79fb      	ldrb	r3, [r7, #7]
 800b15c:	683a      	ldr	r2, [r7, #0]
 800b15e:	7991      	ldrb	r1, [r2, #6]
 800b160:	4a24      	ldr	r2, [pc, #144]	@ (800b1f4 <CDC_Control+0x19c>)
 800b162:	00db      	lsls	r3, r3, #3
 800b164:	4413      	add	r3, r2
 800b166:	460a      	mov	r2, r1
 800b168:	719a      	strb	r2, [r3, #6]

    //Change_UART_Setting(cdc_ch);
    break;
 800b16a:	e03b      	b.n	800b1e4 <CDC_Control+0x18c>

  case CDC_GET_LINE_CODING:
    pbuf[0] = (uint8_t)(Line_Coding[cdc_ch].bitrate);
 800b16c:	79fb      	ldrb	r3, [r7, #7]
 800b16e:	4a21      	ldr	r2, [pc, #132]	@ (800b1f4 <CDC_Control+0x19c>)
 800b170:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b174:	b2da      	uxtb	r2, r3
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	701a      	strb	r2, [r3, #0]
    pbuf[1] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 8);
 800b17a:	79fb      	ldrb	r3, [r7, #7]
 800b17c:	4a1d      	ldr	r2, [pc, #116]	@ (800b1f4 <CDC_Control+0x19c>)
 800b17e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b182:	0a1a      	lsrs	r2, r3, #8
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	3301      	adds	r3, #1
 800b188:	b2d2      	uxtb	r2, r2
 800b18a:	701a      	strb	r2, [r3, #0]
    pbuf[2] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 16);
 800b18c:	79fb      	ldrb	r3, [r7, #7]
 800b18e:	4a19      	ldr	r2, [pc, #100]	@ (800b1f4 <CDC_Control+0x19c>)
 800b190:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b194:	0c1a      	lsrs	r2, r3, #16
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	3302      	adds	r3, #2
 800b19a:	b2d2      	uxtb	r2, r2
 800b19c:	701a      	strb	r2, [r3, #0]
    pbuf[3] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 24);
 800b19e:	79fb      	ldrb	r3, [r7, #7]
 800b1a0:	4a14      	ldr	r2, [pc, #80]	@ (800b1f4 <CDC_Control+0x19c>)
 800b1a2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b1a6:	0e1a      	lsrs	r2, r3, #24
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	3303      	adds	r3, #3
 800b1ac:	b2d2      	uxtb	r2, r2
 800b1ae:	701a      	strb	r2, [r3, #0]
    pbuf[4] = Line_Coding[cdc_ch].format;
 800b1b0:	79fb      	ldrb	r3, [r7, #7]
 800b1b2:	683a      	ldr	r2, [r7, #0]
 800b1b4:	3204      	adds	r2, #4
 800b1b6:	490f      	ldr	r1, [pc, #60]	@ (800b1f4 <CDC_Control+0x19c>)
 800b1b8:	00db      	lsls	r3, r3, #3
 800b1ba:	440b      	add	r3, r1
 800b1bc:	791b      	ldrb	r3, [r3, #4]
 800b1be:	7013      	strb	r3, [r2, #0]
    pbuf[5] = Line_Coding[cdc_ch].paritytype;
 800b1c0:	79fb      	ldrb	r3, [r7, #7]
 800b1c2:	683a      	ldr	r2, [r7, #0]
 800b1c4:	3205      	adds	r2, #5
 800b1c6:	490b      	ldr	r1, [pc, #44]	@ (800b1f4 <CDC_Control+0x19c>)
 800b1c8:	00db      	lsls	r3, r3, #3
 800b1ca:	440b      	add	r3, r1
 800b1cc:	795b      	ldrb	r3, [r3, #5]
 800b1ce:	7013      	strb	r3, [r2, #0]
    pbuf[6] = Line_Coding[cdc_ch].datatype;
 800b1d0:	79fb      	ldrb	r3, [r7, #7]
 800b1d2:	683a      	ldr	r2, [r7, #0]
 800b1d4:	3206      	adds	r2, #6
 800b1d6:	4907      	ldr	r1, [pc, #28]	@ (800b1f4 <CDC_Control+0x19c>)
 800b1d8:	00db      	lsls	r3, r3, #3
 800b1da:	440b      	add	r3, r1
 800b1dc:	799b      	ldrb	r3, [r3, #6]
 800b1de:	7013      	strb	r3, [r2, #0]
    break;
 800b1e0:	e000      	b.n	800b1e4 <CDC_Control+0x18c>
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b1e2:	bf00      	nop
  }

  return (USBD_OK);
 800b1e4:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	370c      	adds	r7, #12
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f0:	4770      	bx	lr
 800b1f2:	bf00      	nop
 800b1f4:	2000144c 	.word	0x2000144c

0800b1f8 <CDC_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b084      	sub	sp, #16
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	4603      	mov	r3, r0
 800b200:	60b9      	str	r1, [r7, #8]
 800b202:	607a      	str	r2, [r7, #4]
 800b204:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 6 */
  //HAL_UART_Transmit_DMA(CDC_CH_To_UART_Handle(cdc_ch), Buf, *Len);
  CDC_Transmit(cdc_ch, Buf, *Len); // echo back on same channel
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	b29a      	uxth	r2, r3
 800b20c:	7bfb      	ldrb	r3, [r7, #15]
 800b20e:	68b9      	ldr	r1, [r7, #8]
 800b210:	4618      	mov	r0, r3
 800b212:	f000 f825 	bl	800b260 <CDC_Transmit>

  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, &Buf[0]);
 800b216:	7bfb      	ldrb	r3, [r7, #15]
 800b218:	68ba      	ldr	r2, [r7, #8]
 800b21a:	4907      	ldr	r1, [pc, #28]	@ (800b238 <CDC_Receive+0x40>)
 800b21c:	4618      	mov	r0, r3
 800b21e:	f000 fd5d 	bl	800bcdc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(cdc_ch, &hUsbDevice);
 800b222:	7bfb      	ldrb	r3, [r7, #15]
 800b224:	4904      	ldr	r1, [pc, #16]	@ (800b238 <CDC_Receive+0x40>)
 800b226:	4618      	mov	r0, r3
 800b228:	f000 fdb8 	bl	800bd9c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b22c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b22e:	4618      	mov	r0, r3
 800b230:	3710      	adds	r7, #16
 800b232:	46bd      	mov	sp, r7
 800b234:	bd80      	pop	{r7, pc}
 800b236:	bf00      	nop
 800b238:	200010b0 	.word	0x200010b0

0800b23c <CDC_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b23c:	b480      	push	{r7}
 800b23e:	b085      	sub	sp, #20
 800b240:	af00      	add	r7, sp, #0
 800b242:	60b9      	str	r1, [r7, #8]
 800b244:	607a      	str	r2, [r7, #4]
 800b246:	461a      	mov	r2, r3
 800b248:	4603      	mov	r3, r0
 800b24a:	73fb      	strb	r3, [r7, #15]
 800b24c:	4613      	mov	r3, r2
 800b24e:	73bb      	strb	r3, [r7, #14]
  return (USBD_OK);
 800b250:	2300      	movs	r3, #0
}
 800b252:	4618      	mov	r0, r3
 800b254:	3714      	adds	r7, #20
 800b256:	46bd      	mov	sp, r7
 800b258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25c:	4770      	bx	lr
	...

0800b260 <CDC_Transmit>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit(uint8_t ch, uint8_t *Buf, uint16_t Len)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b084      	sub	sp, #16
 800b264:	af00      	add	r7, sp, #0
 800b266:	4603      	mov	r3, r0
 800b268:	6039      	str	r1, [r7, #0]
 800b26a:	71fb      	strb	r3, [r7, #7]
 800b26c:	4613      	mov	r3, r2
 800b26e:	80bb      	strh	r3, [r7, #4]
  uint8_t result = USBD_OK;
 800b270:	2300      	movs	r3, #0
 800b272:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  extern USBD_CDC_ACM_HandleTypeDef CDC_ACM_Class_Data[];
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800b274:	2300      	movs	r3, #0
 800b276:	60bb      	str	r3, [r7, #8]
  hcdc = &CDC_ACM_Class_Data[ch];
 800b278:	79fb      	ldrb	r3, [r7, #7]
 800b27a:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800b27e:	fb02 f303 	mul.w	r3, r2, r3
 800b282:	4a0e      	ldr	r2, [pc, #56]	@ (800b2bc <CDC_Transmit+0x5c>)
 800b284:	4413      	add	r3, r2
 800b286:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0)
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d001      	beq.n	800b296 <CDC_Transmit+0x36>
  {
    return USBD_BUSY;
 800b292:	2301      	movs	r3, #1
 800b294:	e00d      	b.n	800b2b2 <CDC_Transmit+0x52>
  }
  USBD_CDC_SetTxBuffer(ch, &hUsbDevice, Buf, Len);
 800b296:	88bb      	ldrh	r3, [r7, #4]
 800b298:	79f8      	ldrb	r0, [r7, #7]
 800b29a:	683a      	ldr	r2, [r7, #0]
 800b29c:	4908      	ldr	r1, [pc, #32]	@ (800b2c0 <CDC_Transmit+0x60>)
 800b29e:	f000 fcf9 	bl	800bc94 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(ch, &hUsbDevice);
 800b2a2:	79fb      	ldrb	r3, [r7, #7]
 800b2a4:	4906      	ldr	r1, [pc, #24]	@ (800b2c0 <CDC_Transmit+0x60>)
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f000 fd36 	bl	800bd18 <USBD_CDC_TransmitPacket>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b2b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	3710      	adds	r7, #16
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd80      	pop	{r7, pc}
 800b2ba:	bf00      	nop
 800b2bc:	2000166c 	.word	0x2000166c
 800b2c0:	200010b0 	.word	0x200010b0

0800b2c4 <USBD_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b083      	sub	sp, #12
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	6039      	str	r1, [r7, #0]
 800b2ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_DeviceDesc);
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	2212      	movs	r2, #18
 800b2d4:	801a      	strh	r2, [r3, #0]
  return USBD_DeviceDesc;
 800b2d6:	4b03      	ldr	r3, [pc, #12]	@ (800b2e4 <USBD_DeviceDescriptor+0x20>)
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	370c      	adds	r7, #12
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e2:	4770      	bx	lr
 800b2e4:	2000004c 	.word	0x2000004c

0800b2e8 <USBD_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b083      	sub	sp, #12
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	6039      	str	r1, [r7, #0]
 800b2f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	2204      	movs	r2, #4
 800b2f8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b2fa:	4b03      	ldr	r3, [pc, #12]	@ (800b308 <USBD_LangIDStrDescriptor+0x20>)
}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	370c      	adds	r7, #12
 800b300:	46bd      	mov	sp, r7
 800b302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b306:	4770      	bx	lr
 800b308:	20000060 	.word	0x20000060

0800b30c <USBD_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b082      	sub	sp, #8
 800b310:	af00      	add	r7, sp, #0
 800b312:	4603      	mov	r3, r0
 800b314:	6039      	str	r1, [r7, #0]
 800b316:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b318:	79fb      	ldrb	r3, [r7, #7]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d105      	bne.n	800b32a <USBD_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b31e:	683a      	ldr	r2, [r7, #0]
 800b320:	4907      	ldr	r1, [pc, #28]	@ (800b340 <USBD_ProductStrDescriptor+0x34>)
 800b322:	4808      	ldr	r0, [pc, #32]	@ (800b344 <USBD_ProductStrDescriptor+0x38>)
 800b324:	f002 fc89 	bl	800dc3a <USBD_GetString>
 800b328:	e004      	b.n	800b334 <USBD_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b32a:	683a      	ldr	r2, [r7, #0]
 800b32c:	4904      	ldr	r1, [pc, #16]	@ (800b340 <USBD_ProductStrDescriptor+0x34>)
 800b32e:	4805      	ldr	r0, [pc, #20]	@ (800b344 <USBD_ProductStrDescriptor+0x38>)
 800b330:	f002 fc83 	bl	800dc3a <USBD_GetString>
  }
  return USBD_StrDesc;
 800b334:	4b02      	ldr	r3, [pc, #8]	@ (800b340 <USBD_ProductStrDescriptor+0x34>)
}
 800b336:	4618      	mov	r0, r3
 800b338:	3708      	adds	r7, #8
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}
 800b33e:	bf00      	nop
 800b340:	20001454 	.word	0x20001454
 800b344:	08014318 	.word	0x08014318

0800b348 <USBD_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b082      	sub	sp, #8
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	4603      	mov	r3, r0
 800b350:	6039      	str	r1, [r7, #0]
 800b352:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b354:	683a      	ldr	r2, [r7, #0]
 800b356:	4904      	ldr	r1, [pc, #16]	@ (800b368 <USBD_ManufacturerStrDescriptor+0x20>)
 800b358:	4804      	ldr	r0, [pc, #16]	@ (800b36c <USBD_ManufacturerStrDescriptor+0x24>)
 800b35a:	f002 fc6e 	bl	800dc3a <USBD_GetString>
  return USBD_StrDesc;
 800b35e:	4b02      	ldr	r3, [pc, #8]	@ (800b368 <USBD_ManufacturerStrDescriptor+0x20>)
}
 800b360:	4618      	mov	r0, r3
 800b362:	3708      	adds	r7, #8
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}
 800b368:	20001454 	.word	0x20001454
 800b36c:	08014330 	.word	0x08014330

0800b370 <USBD_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b082      	sub	sp, #8
 800b374:	af00      	add	r7, sp, #0
 800b376:	4603      	mov	r3, r0
 800b378:	6039      	str	r1, [r7, #0]
 800b37a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	221a      	movs	r2, #26
 800b380:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b382:	f000 f843 	bl	800b40c <Get_SerialNum>
  /* USER CODE BEGIN USBD_SerialStrDescriptor */

  /* USER CODE END USBD_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800b386:	4b02      	ldr	r3, [pc, #8]	@ (800b390 <USBD_SerialStrDescriptor+0x20>)
}
 800b388:	4618      	mov	r0, r3
 800b38a:	3708      	adds	r7, #8
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}
 800b390:	20000064 	.word	0x20000064

0800b394 <USBD_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b082      	sub	sp, #8
 800b398:	af00      	add	r7, sp, #0
 800b39a:	4603      	mov	r3, r0
 800b39c:	6039      	str	r1, [r7, #0]
 800b39e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b3a0:	79fb      	ldrb	r3, [r7, #7]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d105      	bne.n	800b3b2 <USBD_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b3a6:	683a      	ldr	r2, [r7, #0]
 800b3a8:	4907      	ldr	r1, [pc, #28]	@ (800b3c8 <USBD_ConfigStrDescriptor+0x34>)
 800b3aa:	4808      	ldr	r0, [pc, #32]	@ (800b3cc <USBD_ConfigStrDescriptor+0x38>)
 800b3ac:	f002 fc45 	bl	800dc3a <USBD_GetString>
 800b3b0:	e004      	b.n	800b3bc <USBD_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b3b2:	683a      	ldr	r2, [r7, #0]
 800b3b4:	4904      	ldr	r1, [pc, #16]	@ (800b3c8 <USBD_ConfigStrDescriptor+0x34>)
 800b3b6:	4805      	ldr	r0, [pc, #20]	@ (800b3cc <USBD_ConfigStrDescriptor+0x38>)
 800b3b8:	f002 fc3f 	bl	800dc3a <USBD_GetString>
  }
  return USBD_StrDesc;
 800b3bc:	4b02      	ldr	r3, [pc, #8]	@ (800b3c8 <USBD_ConfigStrDescriptor+0x34>)
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	3708      	adds	r7, #8
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}
 800b3c6:	bf00      	nop
 800b3c8:	20001454 	.word	0x20001454
 800b3cc:	08014344 	.word	0x08014344

0800b3d0 <USBD_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b082      	sub	sp, #8
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	6039      	str	r1, [r7, #0]
 800b3da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b3dc:	79fb      	ldrb	r3, [r7, #7]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d105      	bne.n	800b3ee <USBD_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b3e2:	683a      	ldr	r2, [r7, #0]
 800b3e4:	4907      	ldr	r1, [pc, #28]	@ (800b404 <USBD_InterfaceStrDescriptor+0x34>)
 800b3e6:	4808      	ldr	r0, [pc, #32]	@ (800b408 <USBD_InterfaceStrDescriptor+0x38>)
 800b3e8:	f002 fc27 	bl	800dc3a <USBD_GetString>
 800b3ec:	e004      	b.n	800b3f8 <USBD_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b3ee:	683a      	ldr	r2, [r7, #0]
 800b3f0:	4904      	ldr	r1, [pc, #16]	@ (800b404 <USBD_InterfaceStrDescriptor+0x34>)
 800b3f2:	4805      	ldr	r0, [pc, #20]	@ (800b408 <USBD_InterfaceStrDescriptor+0x38>)
 800b3f4:	f002 fc21 	bl	800dc3a <USBD_GetString>
  }
  return USBD_StrDesc;
 800b3f8:	4b02      	ldr	r3, [pc, #8]	@ (800b404 <USBD_InterfaceStrDescriptor+0x34>)
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3708      	adds	r7, #8
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}
 800b402:	bf00      	nop
 800b404:	20001454 	.word	0x20001454
 800b408:	08014354 	.word	0x08014354

0800b40c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b084      	sub	sp, #16
 800b410:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b412:	4b0f      	ldr	r3, [pc, #60]	@ (800b450 <Get_SerialNum+0x44>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b418:	4b0e      	ldr	r3, [pc, #56]	@ (800b454 <Get_SerialNum+0x48>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b41e:	4b0e      	ldr	r3, [pc, #56]	@ (800b458 <Get_SerialNum+0x4c>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b424:	68fa      	ldr	r2, [r7, #12]
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	4413      	add	r3, r2
 800b42a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d009      	beq.n	800b446 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b432:	2208      	movs	r2, #8
 800b434:	4909      	ldr	r1, [pc, #36]	@ (800b45c <Get_SerialNum+0x50>)
 800b436:	68f8      	ldr	r0, [r7, #12]
 800b438:	f000 f814 	bl	800b464 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b43c:	2204      	movs	r2, #4
 800b43e:	4908      	ldr	r1, [pc, #32]	@ (800b460 <Get_SerialNum+0x54>)
 800b440:	68b8      	ldr	r0, [r7, #8]
 800b442:	f000 f80f 	bl	800b464 <IntToUnicode>
  }
}
 800b446:	bf00      	nop
 800b448:	3710      	adds	r7, #16
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}
 800b44e:	bf00      	nop
 800b450:	1fff7a10 	.word	0x1fff7a10
 800b454:	1fff7a14 	.word	0x1fff7a14
 800b458:	1fff7a18 	.word	0x1fff7a18
 800b45c:	20000066 	.word	0x20000066
 800b460:	20000076 	.word	0x20000076

0800b464 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b464:	b480      	push	{r7}
 800b466:	b087      	sub	sp, #28
 800b468:	af00      	add	r7, sp, #0
 800b46a:	60f8      	str	r0, [r7, #12]
 800b46c:	60b9      	str	r1, [r7, #8]
 800b46e:	4613      	mov	r3, r2
 800b470:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b472:	2300      	movs	r3, #0
 800b474:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b476:	2300      	movs	r3, #0
 800b478:	75fb      	strb	r3, [r7, #23]
 800b47a:	e027      	b.n	800b4cc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	0f1b      	lsrs	r3, r3, #28
 800b480:	2b09      	cmp	r3, #9
 800b482:	d80b      	bhi.n	800b49c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	0f1b      	lsrs	r3, r3, #28
 800b488:	b2da      	uxtb	r2, r3
 800b48a:	7dfb      	ldrb	r3, [r7, #23]
 800b48c:	005b      	lsls	r3, r3, #1
 800b48e:	4619      	mov	r1, r3
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	440b      	add	r3, r1
 800b494:	3230      	adds	r2, #48	@ 0x30
 800b496:	b2d2      	uxtb	r2, r2
 800b498:	701a      	strb	r2, [r3, #0]
 800b49a:	e00a      	b.n	800b4b2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	0f1b      	lsrs	r3, r3, #28
 800b4a0:	b2da      	uxtb	r2, r3
 800b4a2:	7dfb      	ldrb	r3, [r7, #23]
 800b4a4:	005b      	lsls	r3, r3, #1
 800b4a6:	4619      	mov	r1, r3
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	440b      	add	r3, r1
 800b4ac:	3237      	adds	r2, #55	@ 0x37
 800b4ae:	b2d2      	uxtb	r2, r2
 800b4b0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	011b      	lsls	r3, r3, #4
 800b4b6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b4b8:	7dfb      	ldrb	r3, [r7, #23]
 800b4ba:	005b      	lsls	r3, r3, #1
 800b4bc:	3301      	adds	r3, #1
 800b4be:	68ba      	ldr	r2, [r7, #8]
 800b4c0:	4413      	add	r3, r2
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b4c6:	7dfb      	ldrb	r3, [r7, #23]
 800b4c8:	3301      	adds	r3, #1
 800b4ca:	75fb      	strb	r3, [r7, #23]
 800b4cc:	7dfa      	ldrb	r2, [r7, #23]
 800b4ce:	79fb      	ldrb	r3, [r7, #7]
 800b4d0:	429a      	cmp	r2, r3
 800b4d2:	d3d3      	bcc.n	800b47c <IntToUnicode+0x18>
  }
}
 800b4d4:	bf00      	nop
 800b4d6:	bf00      	nop
 800b4d8:	371c      	adds	r7, #28
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e0:	4770      	bx	lr

0800b4e2 <CUSTOM_HID_Init>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init(void)
{
 800b4e2:	b480      	push	{r7}
 800b4e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b4e6:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f0:	4770      	bx	lr

0800b4f2 <CUSTOM_HID_DeInit>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit(void)
{
 800b4f2:	b480      	push	{r7}
 800b4f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800b4f6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b500:	4770      	bx	lr

0800b502 <CUSTOM_HID_OutEvent>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent(uint8_t event_idx, uint8_t state)
{
 800b502:	b480      	push	{r7}
 800b504:	b083      	sub	sp, #12
 800b506:	af00      	add	r7, sp, #0
 800b508:	4603      	mov	r3, r0
 800b50a:	460a      	mov	r2, r1
 800b50c:	71fb      	strb	r3, [r7, #7]
 800b50e:	4613      	mov	r3, r2
 800b510:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  //memcpy(buffer, state, 0x40);
  //USBD_CUSTOM_HID_SendReport(&hUsbDevice, (uint8_t *)buffer, 0x40);
  return (USBD_OK);
 800b512:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b514:	4618      	mov	r0, r3
 800b516:	370c      	adds	r7, #12
 800b518:	46bd      	mov	sp, r7
 800b51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51e:	4770      	bx	lr

0800b520 <USBD_CUSTOM_HID_SendCustomReport>:
  * @param  report: The report to be sent
  * @param  len: The report length
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t USBD_CUSTOM_HID_SendCustomReport(uint8_t *report, uint16_t len)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b082      	sub	sp, #8
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
 800b528:	460b      	mov	r3, r1
 800b52a:	807b      	strh	r3, [r7, #2]
  return USBD_CUSTOM_HID_SendReport(&hUsbDevice, report, len);
 800b52c:	887b      	ldrh	r3, [r7, #2]
 800b52e:	461a      	mov	r2, r3
 800b530:	6879      	ldr	r1, [r7, #4]
 800b532:	4804      	ldr	r0, [pc, #16]	@ (800b544 <USBD_CUSTOM_HID_SendCustomReport+0x24>)
 800b534:	f001 f9c4 	bl	800c8c0 <USBD_CUSTOM_HID_SendReport>
 800b538:	4603      	mov	r3, r0
 800b53a:	b25b      	sxtb	r3, r3
}
 800b53c:	4618      	mov	r0, r3
 800b53e:	3708      	adds	r7, #8
 800b540:	46bd      	mov	sp, r7
 800b542:	bd80      	pop	{r7, pc}
 800b544:	200010b0 	.word	0x200010b0

0800b548 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b084      	sub	sp, #16
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
 800b550:	460b      	mov	r3, r1
 800b552:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800b554:	2300      	movs	r3, #0
 800b556:	60bb      	str	r3, [r7, #8]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800b558:	2300      	movs	r3, #0
 800b55a:	73fb      	strb	r3, [r7, #15]
 800b55c:	e0c6      	b.n	800b6ec <USBD_CDC_Init+0x1a4>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 800b55e:	7bfb      	ldrb	r3, [r7, #15]
 800b560:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800b564:	fb02 f303 	mul.w	r3, r2, r3
 800b568:	4a65      	ldr	r2, [pc, #404]	@ (800b700 <USBD_CDC_Init+0x1b8>)
 800b56a:	4413      	add	r3, r2
 800b56c:	60bb      	str	r3, [r7, #8]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	7c1b      	ldrb	r3, [r3, #16]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d13d      	bne.n	800b5f2 <USBD_CDC_Init+0xaa>
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 800b576:	7bfb      	ldrb	r3, [r7, #15]
 800b578:	4a62      	ldr	r2, [pc, #392]	@ (800b704 <USBD_CDC_Init+0x1bc>)
 800b57a:	5cd1      	ldrb	r1, [r2, r3]
 800b57c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b580:	2202      	movs	r2, #2
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f002 fdcb 	bl	800e11e <USBD_LL_OpenEP>
                           CDC_DATA_HS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 800b588:	7bfb      	ldrb	r3, [r7, #15]
 800b58a:	4a5e      	ldr	r2, [pc, #376]	@ (800b704 <USBD_CDC_Init+0x1bc>)
 800b58c:	5cd3      	ldrb	r3, [r2, r3]
 800b58e:	f003 020f 	and.w	r2, r3, #15
 800b592:	6879      	ldr	r1, [r7, #4]
 800b594:	4613      	mov	r3, r2
 800b596:	009b      	lsls	r3, r3, #2
 800b598:	4413      	add	r3, r2
 800b59a:	009b      	lsls	r3, r3, #2
 800b59c:	440b      	add	r3, r1
 800b59e:	3324      	adds	r3, #36	@ 0x24
 800b5a0:	2201      	movs	r2, #1
 800b5a2:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 800b5a4:	7bfb      	ldrb	r3, [r7, #15]
 800b5a6:	4a58      	ldr	r2, [pc, #352]	@ (800b708 <USBD_CDC_Init+0x1c0>)
 800b5a8:	5cd1      	ldrb	r1, [r2, r3]
 800b5aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b5ae:	2202      	movs	r2, #2
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	f002 fdb4 	bl	800e11e <USBD_LL_OpenEP>
                           CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 800b5b6:	7bfb      	ldrb	r3, [r7, #15]
 800b5b8:	4a53      	ldr	r2, [pc, #332]	@ (800b708 <USBD_CDC_Init+0x1c0>)
 800b5ba:	5cd3      	ldrb	r3, [r2, r3]
 800b5bc:	f003 020f 	and.w	r2, r3, #15
 800b5c0:	6879      	ldr	r1, [r7, #4]
 800b5c2:	4613      	mov	r3, r2
 800b5c4:	009b      	lsls	r3, r3, #2
 800b5c6:	4413      	add	r3, r2
 800b5c8:	009b      	lsls	r3, r3, #2
 800b5ca:	440b      	add	r3, r1
 800b5cc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b5d0:	2201      	movs	r2, #1
 800b5d2:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b5d4:	7bfb      	ldrb	r3, [r7, #15]
 800b5d6:	4a4d      	ldr	r2, [pc, #308]	@ (800b70c <USBD_CDC_Init+0x1c4>)
 800b5d8:	5cd3      	ldrb	r3, [r2, r3]
 800b5da:	f003 020f 	and.w	r2, r3, #15
 800b5de:	6879      	ldr	r1, [r7, #4]
 800b5e0:	4613      	mov	r3, r2
 800b5e2:	009b      	lsls	r3, r3, #2
 800b5e4:	4413      	add	r3, r2
 800b5e6:	009b      	lsls	r3, r3, #2
 800b5e8:	440b      	add	r3, r1
 800b5ea:	3326      	adds	r3, #38	@ 0x26
 800b5ec:	2210      	movs	r2, #16
 800b5ee:	801a      	strh	r2, [r3, #0]
 800b5f0:	e03a      	b.n	800b668 <USBD_CDC_Init+0x120>
    }
    else
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 800b5f2:	7bfb      	ldrb	r3, [r7, #15]
 800b5f4:	4a43      	ldr	r2, [pc, #268]	@ (800b704 <USBD_CDC_Init+0x1bc>)
 800b5f6:	5cd1      	ldrb	r1, [r2, r3]
 800b5f8:	2340      	movs	r3, #64	@ 0x40
 800b5fa:	2202      	movs	r2, #2
 800b5fc:	6878      	ldr	r0, [r7, #4]
 800b5fe:	f002 fd8e 	bl	800e11e <USBD_LL_OpenEP>
                           CDC_DATA_FS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 800b602:	7bfb      	ldrb	r3, [r7, #15]
 800b604:	4a3f      	ldr	r2, [pc, #252]	@ (800b704 <USBD_CDC_Init+0x1bc>)
 800b606:	5cd3      	ldrb	r3, [r2, r3]
 800b608:	f003 020f 	and.w	r2, r3, #15
 800b60c:	6879      	ldr	r1, [r7, #4]
 800b60e:	4613      	mov	r3, r2
 800b610:	009b      	lsls	r3, r3, #2
 800b612:	4413      	add	r3, r2
 800b614:	009b      	lsls	r3, r3, #2
 800b616:	440b      	add	r3, r1
 800b618:	3324      	adds	r3, #36	@ 0x24
 800b61a:	2201      	movs	r2, #1
 800b61c:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 800b61e:	7bfb      	ldrb	r3, [r7, #15]
 800b620:	4a39      	ldr	r2, [pc, #228]	@ (800b708 <USBD_CDC_Init+0x1c0>)
 800b622:	5cd1      	ldrb	r1, [r2, r3]
 800b624:	2340      	movs	r3, #64	@ 0x40
 800b626:	2202      	movs	r2, #2
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f002 fd78 	bl	800e11e <USBD_LL_OpenEP>
                           CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 800b62e:	7bfb      	ldrb	r3, [r7, #15]
 800b630:	4a35      	ldr	r2, [pc, #212]	@ (800b708 <USBD_CDC_Init+0x1c0>)
 800b632:	5cd3      	ldrb	r3, [r2, r3]
 800b634:	f003 020f 	and.w	r2, r3, #15
 800b638:	6879      	ldr	r1, [r7, #4]
 800b63a:	4613      	mov	r3, r2
 800b63c:	009b      	lsls	r3, r3, #2
 800b63e:	4413      	add	r3, r2
 800b640:	009b      	lsls	r3, r3, #2
 800b642:	440b      	add	r3, r1
 800b644:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b648:	2201      	movs	r2, #1
 800b64a:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b64c:	7bfb      	ldrb	r3, [r7, #15]
 800b64e:	4a2f      	ldr	r2, [pc, #188]	@ (800b70c <USBD_CDC_Init+0x1c4>)
 800b650:	5cd3      	ldrb	r3, [r2, r3]
 800b652:	f003 020f 	and.w	r2, r3, #15
 800b656:	6879      	ldr	r1, [r7, #4]
 800b658:	4613      	mov	r3, r2
 800b65a:	009b      	lsls	r3, r3, #2
 800b65c:	4413      	add	r3, r2
 800b65e:	009b      	lsls	r3, r3, #2
 800b660:	440b      	add	r3, r1
 800b662:	3326      	adds	r3, #38	@ 0x26
 800b664:	2210      	movs	r2, #16
 800b666:	801a      	strh	r2, [r3, #0]
    }

    /* Open Command IN EP */
    (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP[i], USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b668:	7bfb      	ldrb	r3, [r7, #15]
 800b66a:	4a28      	ldr	r2, [pc, #160]	@ (800b70c <USBD_CDC_Init+0x1c4>)
 800b66c:	5cd1      	ldrb	r1, [r2, r3]
 800b66e:	2308      	movs	r3, #8
 800b670:	2203      	movs	r2, #3
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f002 fd53 	bl	800e11e <USBD_LL_OpenEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 1U;
 800b678:	7bfb      	ldrb	r3, [r7, #15]
 800b67a:	4a24      	ldr	r2, [pc, #144]	@ (800b70c <USBD_CDC_Init+0x1c4>)
 800b67c:	5cd3      	ldrb	r3, [r2, r3]
 800b67e:	f003 020f 	and.w	r2, r3, #15
 800b682:	6879      	ldr	r1, [r7, #4]
 800b684:	4613      	mov	r3, r2
 800b686:	009b      	lsls	r3, r3, #2
 800b688:	4413      	add	r3, r2
 800b68a:	009b      	lsls	r3, r3, #2
 800b68c:	440b      	add	r3, r1
 800b68e:	3324      	adds	r3, #36	@ 0x24
 800b690:	2201      	movs	r2, #1
 800b692:	801a      	strh	r2, [r3, #0]

    /* Init  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Init(i);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	7bfa      	ldrb	r2, [r7, #15]
 800b69e:	4610      	mov	r0, r2
 800b6a0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800b6a2:	68bb      	ldr	r3, [r7, #8]
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800b6aa:	68bb      	ldr	r3, [r7, #8]
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	7c1b      	ldrb	r3, [r3, #16]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d10b      	bne.n	800b6d2 <USBD_CDC_Init+0x18a>
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 800b6ba:	7bfb      	ldrb	r3, [r7, #15]
 800b6bc:	4a12      	ldr	r2, [pc, #72]	@ (800b708 <USBD_CDC_Init+0x1c0>)
 800b6be:	5cd1      	ldrb	r1, [r2, r3]
 800b6c0:	68bb      	ldr	r3, [r7, #8]
 800b6c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b6c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b6ca:	6878      	ldr	r0, [r7, #4]
 800b6cc:	f002 fe16 	bl	800e2fc <USBD_LL_PrepareReceive>
 800b6d0:	e009      	b.n	800b6e6 <USBD_CDC_Init+0x19e>
                                   CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 800b6d2:	7bfb      	ldrb	r3, [r7, #15]
 800b6d4:	4a0c      	ldr	r2, [pc, #48]	@ (800b708 <USBD_CDC_Init+0x1c0>)
 800b6d6:	5cd1      	ldrb	r1, [r2, r3]
 800b6d8:	68bb      	ldr	r3, [r7, #8]
 800b6da:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b6de:	2340      	movs	r3, #64	@ 0x40
 800b6e0:	6878      	ldr	r0, [r7, #4]
 800b6e2:	f002 fe0b 	bl	800e2fc <USBD_LL_PrepareReceive>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800b6e6:	7bfb      	ldrb	r3, [r7, #15]
 800b6e8:	3301      	adds	r3, #1
 800b6ea:	73fb      	strb	r3, [r7, #15]
 800b6ec:	7bfb      	ldrb	r3, [r7, #15]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	f43f af35 	beq.w	800b55e <USBD_CDC_Init+0x16>
                                   CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return (uint8_t)USBD_OK;
 800b6f4:	2300      	movs	r3, #0
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3710      	adds	r7, #16
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}
 800b6fe:	bf00      	nop
 800b700:	2000166c 	.word	0x2000166c
 800b704:	20001654 	.word	0x20001654
 800b708:	20001658 	.word	0x20001658
 800b70c:	2000165c 	.word	0x2000165c

0800b710 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b084      	sub	sp, #16
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
 800b718:	460b      	mov	r3, r1
 800b71a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800b71c:	2300      	movs	r3, #0
 800b71e:	73fb      	strb	r3, [r7, #15]
 800b720:	e057      	b.n	800b7d2 <USBD_CDC_DeInit+0xc2>
  {
    /* Close EP IN */
    (void)USBD_LL_CloseEP(pdev, CDC_IN_EP[i]);
 800b722:	7bfb      	ldrb	r3, [r7, #15]
 800b724:	4a2f      	ldr	r2, [pc, #188]	@ (800b7e4 <USBD_CDC_DeInit+0xd4>)
 800b726:	5cd3      	ldrb	r3, [r2, r3]
 800b728:	4619      	mov	r1, r3
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f002 fd1d 	bl	800e16a <USBD_LL_CloseEP>
    pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 0U;
 800b730:	7bfb      	ldrb	r3, [r7, #15]
 800b732:	4a2c      	ldr	r2, [pc, #176]	@ (800b7e4 <USBD_CDC_DeInit+0xd4>)
 800b734:	5cd3      	ldrb	r3, [r2, r3]
 800b736:	f003 020f 	and.w	r2, r3, #15
 800b73a:	6879      	ldr	r1, [r7, #4]
 800b73c:	4613      	mov	r3, r2
 800b73e:	009b      	lsls	r3, r3, #2
 800b740:	4413      	add	r3, r2
 800b742:	009b      	lsls	r3, r3, #2
 800b744:	440b      	add	r3, r1
 800b746:	3324      	adds	r3, #36	@ 0x24
 800b748:	2200      	movs	r2, #0
 800b74a:	801a      	strh	r2, [r3, #0]

    /* Close EP OUT */
    (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP[i]);
 800b74c:	7bfb      	ldrb	r3, [r7, #15]
 800b74e:	4a26      	ldr	r2, [pc, #152]	@ (800b7e8 <USBD_CDC_DeInit+0xd8>)
 800b750:	5cd3      	ldrb	r3, [r2, r3]
 800b752:	4619      	mov	r1, r3
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f002 fd08 	bl	800e16a <USBD_LL_CloseEP>
    pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 0U;
 800b75a:	7bfb      	ldrb	r3, [r7, #15]
 800b75c:	4a22      	ldr	r2, [pc, #136]	@ (800b7e8 <USBD_CDC_DeInit+0xd8>)
 800b75e:	5cd3      	ldrb	r3, [r2, r3]
 800b760:	f003 020f 	and.w	r2, r3, #15
 800b764:	6879      	ldr	r1, [r7, #4]
 800b766:	4613      	mov	r3, r2
 800b768:	009b      	lsls	r3, r3, #2
 800b76a:	4413      	add	r3, r2
 800b76c:	009b      	lsls	r3, r3, #2
 800b76e:	440b      	add	r3, r1
 800b770:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b774:	2200      	movs	r2, #0
 800b776:	801a      	strh	r2, [r3, #0]

    /* Close Command IN EP */
    (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP[i]);
 800b778:	7bfb      	ldrb	r3, [r7, #15]
 800b77a:	4a1c      	ldr	r2, [pc, #112]	@ (800b7ec <USBD_CDC_DeInit+0xdc>)
 800b77c:	5cd3      	ldrb	r3, [r2, r3]
 800b77e:	4619      	mov	r1, r3
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f002 fcf2 	bl	800e16a <USBD_LL_CloseEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 0U;
 800b786:	7bfb      	ldrb	r3, [r7, #15]
 800b788:	4a18      	ldr	r2, [pc, #96]	@ (800b7ec <USBD_CDC_DeInit+0xdc>)
 800b78a:	5cd3      	ldrb	r3, [r2, r3]
 800b78c:	f003 020f 	and.w	r2, r3, #15
 800b790:	6879      	ldr	r1, [r7, #4]
 800b792:	4613      	mov	r3, r2
 800b794:	009b      	lsls	r3, r3, #2
 800b796:	4413      	add	r3, r2
 800b798:	009b      	lsls	r3, r3, #2
 800b79a:	440b      	add	r3, r1
 800b79c:	3324      	adds	r3, #36	@ 0x24
 800b79e:	2200      	movs	r2, #0
 800b7a0:	801a      	strh	r2, [r3, #0]
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = 0U;
 800b7a2:	7bfb      	ldrb	r3, [r7, #15]
 800b7a4:	4a11      	ldr	r2, [pc, #68]	@ (800b7ec <USBD_CDC_DeInit+0xdc>)
 800b7a6:	5cd3      	ldrb	r3, [r2, r3]
 800b7a8:	f003 020f 	and.w	r2, r3, #15
 800b7ac:	6879      	ldr	r1, [r7, #4]
 800b7ae:	4613      	mov	r3, r2
 800b7b0:	009b      	lsls	r3, r3, #2
 800b7b2:	4413      	add	r3, r2
 800b7b4:	009b      	lsls	r3, r3, #2
 800b7b6:	440b      	add	r3, r1
 800b7b8:	3326      	adds	r3, #38	@ 0x26
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	801a      	strh	r2, [r3, #0]

    /* DeInit  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->DeInit(i);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b7c4:	685b      	ldr	r3, [r3, #4]
 800b7c6:	7bfa      	ldrb	r2, [r7, #15]
 800b7c8:	4610      	mov	r0, r2
 800b7ca:	4798      	blx	r3
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800b7cc:	7bfb      	ldrb	r3, [r7, #15]
 800b7ce:	3301      	adds	r3, #1
 800b7d0:	73fb      	strb	r3, [r7, #15]
 800b7d2:	7bfb      	ldrb	r3, [r7, #15]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d0a4      	beq.n	800b722 <USBD_CDC_DeInit+0x12>
  }
  return (uint8_t)USBD_OK;
 800b7d8:	2300      	movs	r3, #0
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	3710      	adds	r7, #16
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}
 800b7e2:	bf00      	nop
 800b7e4:	20001654 	.word	0x20001654
 800b7e8:	20001658 	.word	0x20001658
 800b7ec:	2000165c 	.word	0x2000165c

0800b7f0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b7f0:	b590      	push	{r4, r7, lr}
 800b7f2:	b087      	sub	sp, #28
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
 800b7f8:	6039      	str	r1, [r7, #0]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b7fe:	2300      	movs	r3, #0
 800b800:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b802:	2300      	movs	r3, #0
 800b804:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b806:	2300      	movs	r3, #0
 800b808:	75fb      	strb	r3, [r7, #23]

  uint8_t windex_to_ch = 0;
 800b80a:	2300      	movs	r3, #0
 800b80c:	75bb      	strb	r3, [r7, #22]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800b80e:	2300      	movs	r3, #0
 800b810:	757b      	strb	r3, [r7, #21]
 800b812:	e015      	b.n	800b840 <USBD_CDC_Setup+0x50>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	889b      	ldrh	r3, [r3, #4]
 800b818:	b2da      	uxtb	r2, r3
 800b81a:	7d7b      	ldrb	r3, [r7, #21]
 800b81c:	496d      	ldr	r1, [pc, #436]	@ (800b9d4 <USBD_CDC_Setup+0x1e4>)
 800b81e:	5ccb      	ldrb	r3, [r1, r3]
 800b820:	429a      	cmp	r2, r3
 800b822:	d007      	beq.n	800b834 <USBD_CDC_Setup+0x44>
 800b824:	683b      	ldr	r3, [r7, #0]
 800b826:	889b      	ldrh	r3, [r3, #4]
 800b828:	b2da      	uxtb	r2, r3
 800b82a:	7d7b      	ldrb	r3, [r7, #21]
 800b82c:	496a      	ldr	r1, [pc, #424]	@ (800b9d8 <USBD_CDC_Setup+0x1e8>)
 800b82e:	5ccb      	ldrb	r3, [r1, r3]
 800b830:	429a      	cmp	r2, r3
 800b832:	d102      	bne.n	800b83a <USBD_CDC_Setup+0x4a>
    {
      windex_to_ch = i;
 800b834:	7d7b      	ldrb	r3, [r7, #21]
 800b836:	75bb      	strb	r3, [r7, #22]
      break;
 800b838:	e005      	b.n	800b846 <USBD_CDC_Setup+0x56>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800b83a:	7d7b      	ldrb	r3, [r7, #21]
 800b83c:	3301      	adds	r3, #1
 800b83e:	757b      	strb	r3, [r7, #21]
 800b840:	7d7b      	ldrb	r3, [r7, #21]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d0e6      	beq.n	800b814 <USBD_CDC_Setup+0x24>
    }
  }

  hcdc = &CDC_ACM_Class_Data[windex_to_ch];
 800b846:	7dbb      	ldrb	r3, [r7, #22]
 800b848:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800b84c:	fb02 f303 	mul.w	r3, r2, r3
 800b850:	4a62      	ldr	r2, [pc, #392]	@ (800b9dc <USBD_CDC_Setup+0x1ec>)
 800b852:	4413      	add	r3, r2
 800b854:	613b      	str	r3, [r7, #16]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	781b      	ldrb	r3, [r3, #0]
 800b85a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d04a      	beq.n	800b8f8 <USBD_CDC_Setup+0x108>
 800b862:	2b20      	cmp	r3, #32
 800b864:	f040 80aa 	bne.w	800b9bc <USBD_CDC_Setup+0x1cc>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	88db      	ldrh	r3, [r3, #6]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d038      	beq.n	800b8e2 <USBD_CDC_Setup+0xf2>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	781b      	ldrb	r3, [r3, #0]
 800b874:	b25b      	sxtb	r3, r3
 800b876:	2b00      	cmp	r3, #0
 800b878:	da1d      	bge.n	800b8b6 <USBD_CDC_Setup+0xc6>
      {
        ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b880:	689c      	ldr	r4, [r3, #8]
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	7859      	ldrb	r1, [r3, #1]
 800b886:	7dbb      	ldrb	r3, [r7, #22]
 800b888:	025b      	lsls	r3, r3, #9
 800b88a:	693a      	ldr	r2, [r7, #16]
 800b88c:	441a      	add	r2, r3
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	88db      	ldrh	r3, [r3, #6]
 800b892:	7db8      	ldrb	r0, [r7, #22]
 800b894:	47a0      	blx	r4

        len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	88db      	ldrh	r3, [r3, #6]
 800b89a:	2b07      	cmp	r3, #7
 800b89c:	bf28      	it	cs
 800b89e:	2307      	movcs	r3, #7
 800b8a0:	81fb      	strh	r3, [r7, #14]
        (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data[windex_to_ch], len);
 800b8a2:	7dbb      	ldrb	r3, [r7, #22]
 800b8a4:	025b      	lsls	r3, r3, #9
 800b8a6:	693a      	ldr	r2, [r7, #16]
 800b8a8:	4413      	add	r3, r2
 800b8aa:	89fa      	ldrh	r2, [r7, #14]
 800b8ac:	4619      	mov	r1, r3
 800b8ae:	6878      	ldr	r0, [r7, #4]
 800b8b0:	f002 fa23 	bl	800dcfa <USBD_CtlSendData>
    }
    else
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
    }
    break;
 800b8b4:	e089      	b.n	800b9ca <USBD_CDC_Setup+0x1da>
        hcdc->CmdOpCode = req->bRequest;
 800b8b6:	683b      	ldr	r3, [r7, #0]
 800b8b8:	785a      	ldrb	r2, [r3, #1]
 800b8ba:	693b      	ldr	r3, [r7, #16]
 800b8bc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	88db      	ldrh	r3, [r3, #6]
 800b8c4:	b2da      	uxtb	r2, r3
 800b8c6:	693b      	ldr	r3, [r7, #16]
 800b8c8:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 800b8cc:	7dbb      	ldrb	r3, [r7, #22]
 800b8ce:	025b      	lsls	r3, r3, #9
 800b8d0:	693a      	ldr	r2, [r7, #16]
 800b8d2:	18d1      	adds	r1, r2, r3
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	88db      	ldrh	r3, [r3, #6]
 800b8d8:	461a      	mov	r2, r3
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f002 fa39 	bl	800dd52 <USBD_CtlPrepareRx>
    break;
 800b8e0:	e073      	b.n	800b9ca <USBD_CDC_Setup+0x1da>
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b8e8:	689c      	ldr	r4, [r3, #8]
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	7859      	ldrb	r1, [r3, #1]
 800b8ee:	7db8      	ldrb	r0, [r7, #22]
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	683a      	ldr	r2, [r7, #0]
 800b8f4:	47a0      	blx	r4
    break;
 800b8f6:	e068      	b.n	800b9ca <USBD_CDC_Setup+0x1da>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	785b      	ldrb	r3, [r3, #1]
 800b8fc:	2b0b      	cmp	r3, #11
 800b8fe:	d852      	bhi.n	800b9a6 <USBD_CDC_Setup+0x1b6>
 800b900:	a201      	add	r2, pc, #4	@ (adr r2, 800b908 <USBD_CDC_Setup+0x118>)
 800b902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b906:	bf00      	nop
 800b908:	0800b939 	.word	0x0800b939
 800b90c:	0800b9b5 	.word	0x0800b9b5
 800b910:	0800b9a7 	.word	0x0800b9a7
 800b914:	0800b9a7 	.word	0x0800b9a7
 800b918:	0800b9a7 	.word	0x0800b9a7
 800b91c:	0800b9a7 	.word	0x0800b9a7
 800b920:	0800b9a7 	.word	0x0800b9a7
 800b924:	0800b9a7 	.word	0x0800b9a7
 800b928:	0800b9a7 	.word	0x0800b9a7
 800b92c:	0800b9a7 	.word	0x0800b9a7
 800b930:	0800b963 	.word	0x0800b963
 800b934:	0800b98d 	.word	0x0800b98d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b93e:	b2db      	uxtb	r3, r3
 800b940:	2b03      	cmp	r3, #3
 800b942:	d107      	bne.n	800b954 <USBD_CDC_Setup+0x164>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b944:	f107 030a 	add.w	r3, r7, #10
 800b948:	2202      	movs	r2, #2
 800b94a:	4619      	mov	r1, r3
 800b94c:	6878      	ldr	r0, [r7, #4]
 800b94e:	f002 f9d4 	bl	800dcfa <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b952:	e032      	b.n	800b9ba <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 800b954:	6839      	ldr	r1, [r7, #0]
 800b956:	6878      	ldr	r0, [r7, #4]
 800b958:	f002 f95e 	bl	800dc18 <USBD_CtlError>
        ret = USBD_FAIL;
 800b95c:	2303      	movs	r3, #3
 800b95e:	75fb      	strb	r3, [r7, #23]
      break;
 800b960:	e02b      	b.n	800b9ba <USBD_CDC_Setup+0x1ca>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b968:	b2db      	uxtb	r3, r3
 800b96a:	2b03      	cmp	r3, #3
 800b96c:	d107      	bne.n	800b97e <USBD_CDC_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b96e:	f107 030d 	add.w	r3, r7, #13
 800b972:	2201      	movs	r2, #1
 800b974:	4619      	mov	r1, r3
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	f002 f9bf 	bl	800dcfa <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b97c:	e01d      	b.n	800b9ba <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 800b97e:	6839      	ldr	r1, [r7, #0]
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	f002 f949 	bl	800dc18 <USBD_CtlError>
        ret = USBD_FAIL;
 800b986:	2303      	movs	r3, #3
 800b988:	75fb      	strb	r3, [r7, #23]
      break;
 800b98a:	e016      	b.n	800b9ba <USBD_CDC_Setup+0x1ca>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b992:	b2db      	uxtb	r3, r3
 800b994:	2b03      	cmp	r3, #3
 800b996:	d00f      	beq.n	800b9b8 <USBD_CDC_Setup+0x1c8>
      {
        USBD_CtlError(pdev, req);
 800b998:	6839      	ldr	r1, [r7, #0]
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f002 f93c 	bl	800dc18 <USBD_CtlError>
        ret = USBD_FAIL;
 800b9a0:	2303      	movs	r3, #3
 800b9a2:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800b9a4:	e008      	b.n	800b9b8 <USBD_CDC_Setup+0x1c8>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800b9a6:	6839      	ldr	r1, [r7, #0]
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	f002 f935 	bl	800dc18 <USBD_CtlError>
      ret = USBD_FAIL;
 800b9ae:	2303      	movs	r3, #3
 800b9b0:	75fb      	strb	r3, [r7, #23]
      break;
 800b9b2:	e002      	b.n	800b9ba <USBD_CDC_Setup+0x1ca>
      break;
 800b9b4:	bf00      	nop
 800b9b6:	e008      	b.n	800b9ca <USBD_CDC_Setup+0x1da>
      break;
 800b9b8:	bf00      	nop
    }
    break;
 800b9ba:	e006      	b.n	800b9ca <USBD_CDC_Setup+0x1da>

  default:
    USBD_CtlError(pdev, req);
 800b9bc:	6839      	ldr	r1, [r7, #0]
 800b9be:	6878      	ldr	r0, [r7, #4]
 800b9c0:	f002 f92a 	bl	800dc18 <USBD_CtlError>
    ret = USBD_FAIL;
 800b9c4:	2303      	movs	r3, #3
 800b9c6:	75fb      	strb	r3, [r7, #23]
    break;
 800b9c8:	bf00      	nop
  }

  return (uint8_t)ret;
 800b9ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	371c      	adds	r7, #28
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bd90      	pop	{r4, r7, pc}
 800b9d4:	20001660 	.word	0x20001660
 800b9d8:	20001664 	.word	0x20001664
 800b9dc:	2000166c 	.word	0x2000166c

0800b9e0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b9e0:	b590      	push	{r4, r7, lr}
 800b9e2:	b087      	sub	sp, #28
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
 800b9e8:	460b      	mov	r3, r1
 800b9ea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	613b      	str	r3, [r7, #16]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800b9f6:	60fb      	str	r3, [r7, #12]
  uint8_t ep_to_ch = 0;
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	75fb      	strb	r3, [r7, #23]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	75bb      	strb	r3, [r7, #22]
 800ba00:	e00d      	b.n	800ba1e <USBD_CDC_DataIn+0x3e>
  {
    if (epnum == (CDC_IN_EP[i] & 0x0F))
 800ba02:	78fa      	ldrb	r2, [r7, #3]
 800ba04:	7dbb      	ldrb	r3, [r7, #22]
 800ba06:	4934      	ldr	r1, [pc, #208]	@ (800bad8 <USBD_CDC_DataIn+0xf8>)
 800ba08:	5ccb      	ldrb	r3, [r1, r3]
 800ba0a:	f003 030f 	and.w	r3, r3, #15
 800ba0e:	429a      	cmp	r2, r3
 800ba10:	d102      	bne.n	800ba18 <USBD_CDC_DataIn+0x38>
    {
      ep_to_ch = i;
 800ba12:	7dbb      	ldrb	r3, [r7, #22]
 800ba14:	75fb      	strb	r3, [r7, #23]
      break;
 800ba16:	e005      	b.n	800ba24 <USBD_CDC_DataIn+0x44>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800ba18:	7dbb      	ldrb	r3, [r7, #22]
 800ba1a:	3301      	adds	r3, #1
 800ba1c:	75bb      	strb	r3, [r7, #22]
 800ba1e:	7dbb      	ldrb	r3, [r7, #22]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d0ee      	beq.n	800ba02 <USBD_CDC_DataIn+0x22>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 800ba24:	7dfb      	ldrb	r3, [r7, #23]
 800ba26:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800ba2a:	fb02 f303 	mul.w	r3, r2, r3
 800ba2e:	4a2b      	ldr	r2, [pc, #172]	@ (800badc <USBD_CDC_DataIn+0xfc>)
 800ba30:	4413      	add	r3, r2
 800ba32:	613b      	str	r3, [r7, #16]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ba34:	78fa      	ldrb	r2, [r7, #3]
 800ba36:	6879      	ldr	r1, [r7, #4]
 800ba38:	4613      	mov	r3, r2
 800ba3a:	009b      	lsls	r3, r3, #2
 800ba3c:	4413      	add	r3, r2
 800ba3e:	009b      	lsls	r3, r3, #2
 800ba40:	440b      	add	r3, r1
 800ba42:	3318      	adds	r3, #24
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d029      	beq.n	800ba9e <USBD_CDC_DataIn+0xbe>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ba4a:	78fa      	ldrb	r2, [r7, #3]
 800ba4c:	6879      	ldr	r1, [r7, #4]
 800ba4e:	4613      	mov	r3, r2
 800ba50:	009b      	lsls	r3, r3, #2
 800ba52:	4413      	add	r3, r2
 800ba54:	009b      	lsls	r3, r3, #2
 800ba56:	440b      	add	r3, r1
 800ba58:	3318      	adds	r3, #24
 800ba5a:	681a      	ldr	r2, [r3, #0]
 800ba5c:	78f9      	ldrb	r1, [r7, #3]
 800ba5e:	68f8      	ldr	r0, [r7, #12]
 800ba60:	460b      	mov	r3, r1
 800ba62:	00db      	lsls	r3, r3, #3
 800ba64:	440b      	add	r3, r1
 800ba66:	009b      	lsls	r3, r3, #2
 800ba68:	4403      	add	r3, r0
 800ba6a:	331c      	adds	r3, #28
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	fbb2 f1f3 	udiv	r1, r2, r3
 800ba72:	fb01 f303 	mul.w	r3, r1, r3
 800ba76:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d110      	bne.n	800ba9e <USBD_CDC_DataIn+0xbe>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800ba7c:	78fa      	ldrb	r2, [r7, #3]
 800ba7e:	6879      	ldr	r1, [r7, #4]
 800ba80:	4613      	mov	r3, r2
 800ba82:	009b      	lsls	r3, r3, #2
 800ba84:	4413      	add	r3, r2
 800ba86:	009b      	lsls	r3, r3, #2
 800ba88:	440b      	add	r3, r1
 800ba8a:	3318      	adds	r3, #24
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ba90:	78f9      	ldrb	r1, [r7, #3]
 800ba92:	2300      	movs	r3, #0
 800ba94:	2200      	movs	r2, #0
 800ba96:	6878      	ldr	r0, [r7, #4]
 800ba98:	f002 fc0f 	bl	800e2ba <USBD_LL_Transmit>
 800ba9c:	e016      	b.n	800bacc <USBD_CDC_DataIn+0xec>
  }
  else
  {
    hcdc->TxState = 0U;
 800ba9e:	693b      	ldr	r3, [r7, #16]
 800baa0:	2200      	movs	r2, #0
 800baa2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt != NULL)
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800baac:	691b      	ldr	r3, [r3, #16]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d00c      	beq.n	800bacc <USBD_CDC_DataIn+0xec>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt(ep_to_ch, hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800bab8:	691c      	ldr	r4, [r3, #16]
 800baba:	693b      	ldr	r3, [r7, #16]
 800babc:	f8d3 1208 	ldr.w	r1, [r3, #520]	@ 0x208
 800bac0:	693b      	ldr	r3, [r7, #16]
 800bac2:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 800bac6:	78fb      	ldrb	r3, [r7, #3]
 800bac8:	7df8      	ldrb	r0, [r7, #23]
 800baca:	47a0      	blx	r4
    }
  }

  return (uint8_t)USBD_OK;
 800bacc:	2300      	movs	r3, #0
}
 800bace:	4618      	mov	r0, r3
 800bad0:	371c      	adds	r7, #28
 800bad2:	46bd      	mov	sp, r7
 800bad4:	bd90      	pop	{r4, r7, pc}
 800bad6:	bf00      	nop
 800bad8:	20001654 	.word	0x20001654
 800badc:	2000166c 	.word	0x2000166c

0800bae0 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b084      	sub	sp, #16
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
 800bae8:	460b      	mov	r3, r1
 800baea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800baec:	2300      	movs	r3, #0
 800baee:	60bb      	str	r3, [r7, #8]
  uint8_t ep_to_ch = 0;
 800baf0:	2300      	movs	r3, #0
 800baf2:	73fb      	strb	r3, [r7, #15]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800baf4:	2300      	movs	r3, #0
 800baf6:	73bb      	strb	r3, [r7, #14]
 800baf8:	e00b      	b.n	800bb12 <USBD_CDC_DataOut+0x32>
  {
    if (epnum == CDC_OUT_EP[i])
 800bafa:	7bbb      	ldrb	r3, [r7, #14]
 800bafc:	4a17      	ldr	r2, [pc, #92]	@ (800bb5c <USBD_CDC_DataOut+0x7c>)
 800bafe:	5cd3      	ldrb	r3, [r2, r3]
 800bb00:	78fa      	ldrb	r2, [r7, #3]
 800bb02:	429a      	cmp	r2, r3
 800bb04:	d102      	bne.n	800bb0c <USBD_CDC_DataOut+0x2c>
    {
      ep_to_ch = i;
 800bb06:	7bbb      	ldrb	r3, [r7, #14]
 800bb08:	73fb      	strb	r3, [r7, #15]
      break;
 800bb0a:	e005      	b.n	800bb18 <USBD_CDC_DataOut+0x38>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800bb0c:	7bbb      	ldrb	r3, [r7, #14]
 800bb0e:	3301      	adds	r3, #1
 800bb10:	73bb      	strb	r3, [r7, #14]
 800bb12:	7bbb      	ldrb	r3, [r7, #14]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d0f0      	beq.n	800bafa <USBD_CDC_DataOut+0x1a>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 800bb18:	7bfb      	ldrb	r3, [r7, #15]
 800bb1a:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800bb1e:	fb02 f303 	mul.w	r3, r2, r3
 800bb22:	4a0f      	ldr	r2, [pc, #60]	@ (800bb60 <USBD_CDC_DataOut+0x80>)
 800bb24:	4413      	add	r3, r2
 800bb26:	60bb      	str	r3, [r7, #8]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bb28:	78fb      	ldrb	r3, [r7, #3]
 800bb2a:	4619      	mov	r1, r3
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	f002 fc06 	bl	800e33e <USBD_LL_GetRxDataSize>
 800bb32:	4602      	mov	r2, r0
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Receive(ep_to_ch, hcdc->RxBuffer, &hcdc->RxLength);
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800bb40:	68db      	ldr	r3, [r3, #12]
 800bb42:	68ba      	ldr	r2, [r7, #8]
 800bb44:	f8d2 1204 	ldr.w	r1, [r2, #516]	@ 0x204
 800bb48:	68ba      	ldr	r2, [r7, #8]
 800bb4a:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800bb4e:	7bf8      	ldrb	r0, [r7, #15]
 800bb50:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800bb52:	2300      	movs	r3, #0
}
 800bb54:	4618      	mov	r0, r3
 800bb56:	3710      	adds	r7, #16
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	bd80      	pop	{r7, pc}
 800bb5c:	20001658 	.word	0x20001658
 800bb60:	2000166c 	.word	0x2000166c

0800bb64 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bb64:	b590      	push	{r4, r7, lr}
 800bb66:	b085      	sub	sp, #20
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	60bb      	str	r3, [r7, #8]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800bb70:	2300      	movs	r3, #0
 800bb72:	73fb      	strb	r3, [r7, #15]
 800bb74:	e02d      	b.n	800bbd2 <USBD_CDC_EP0_RxReady+0x6e>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 800bb76:	7bfb      	ldrb	r3, [r7, #15]
 800bb78:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800bb7c:	fb02 f303 	mul.w	r3, r2, r3
 800bb80:	4a18      	ldr	r2, [pc, #96]	@ (800bbe4 <USBD_CDC_EP0_RxReady+0x80>)
 800bb82:	4413      	add	r3, r2
 800bb84:	60bb      	str	r3, [r7, #8]

    if (hcdc == NULL)
 800bb86:	68bb      	ldr	r3, [r7, #8]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d101      	bne.n	800bb90 <USBD_CDC_EP0_RxReady+0x2c>
    {
      return (uint8_t)USBD_FAIL;
 800bb8c:	2303      	movs	r3, #3
 800bb8e:	e024      	b.n	800bbda <USBD_CDC_EP0_RxReady+0x76>
    }

    if ((pdev->pUserData_CDC_ACM != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d018      	beq.n	800bbcc <USBD_CDC_EP0_RxReady+0x68>
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800bba0:	2bff      	cmp	r3, #255	@ 0xff
 800bba2:	d013      	beq.n	800bbcc <USBD_CDC_EP0_RxReady+0x68>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(i, hcdc->CmdOpCode, (uint8_t *)hcdc->data[i], (uint16_t)hcdc->CmdLength);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800bbaa:	689c      	ldr	r4, [r3, #8]
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	f893 1200 	ldrb.w	r1, [r3, #512]	@ 0x200
 800bbb2:	7bfb      	ldrb	r3, [r7, #15]
 800bbb4:	025b      	lsls	r3, r3, #9
 800bbb6:	68ba      	ldr	r2, [r7, #8]
 800bbb8:	441a      	add	r2, r3
 800bbba:	68bb      	ldr	r3, [r7, #8]
 800bbbc:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800bbc0:	7bf8      	ldrb	r0, [r7, #15]
 800bbc2:	47a0      	blx	r4
      hcdc->CmdOpCode = 0xFFU;
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	22ff      	movs	r2, #255	@ 0xff
 800bbc8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800bbcc:	7bfb      	ldrb	r3, [r7, #15]
 800bbce:	3301      	adds	r3, #1
 800bbd0:	73fb      	strb	r3, [r7, #15]
 800bbd2:	7bfb      	ldrb	r3, [r7, #15]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d0ce      	beq.n	800bb76 <USBD_CDC_EP0_RxReady+0x12>
    }
  }

  return (uint8_t)USBD_OK;
 800bbd8:	2300      	movs	r3, #0
}
 800bbda:	4618      	mov	r0, r3
 800bbdc:	3714      	adds	r7, #20
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd90      	pop	{r4, r7, pc}
 800bbe2:	bf00      	nop
 800bbe4:	2000166c 	.word	0x2000166c

0800bbe8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bbe8:	b480      	push	{r7}
 800bbea:	b083      	sub	sp, #12
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	224b      	movs	r2, #75	@ 0x4b
 800bbf4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800bbf6:	4b03      	ldr	r3, [pc, #12]	@ (800bc04 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	370c      	adds	r7, #12
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc02:	4770      	bx	lr
 800bc04:	2000016c 	.word	0x2000016c

0800bc08 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bc08:	b480      	push	{r7}
 800bc0a:	b083      	sub	sp, #12
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	224b      	movs	r2, #75	@ 0x4b
 800bc14:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800bc16:	4b03      	ldr	r3, [pc, #12]	@ (800bc24 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800bc18:	4618      	mov	r0, r3
 800bc1a:	370c      	adds	r7, #12
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc22:	4770      	bx	lr
 800bc24:	20000120 	.word	0x20000120

0800bc28 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800bc28:	b480      	push	{r7}
 800bc2a:	b083      	sub	sp, #12
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	224b      	movs	r2, #75	@ 0x4b
 800bc34:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800bc36:	4b03      	ldr	r3, [pc, #12]	@ (800bc44 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800bc38:	4618      	mov	r0, r3
 800bc3a:	370c      	adds	r7, #12
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc42:	4770      	bx	lr
 800bc44:	2000016c 	.word	0x2000016c

0800bc48 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800bc48:	b480      	push	{r7}
 800bc4a:	b083      	sub	sp, #12
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	220a      	movs	r2, #10
 800bc54:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800bc56:	4b03      	ldr	r3, [pc, #12]	@ (800bc64 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	370c      	adds	r7, #12
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc62:	4770      	bx	lr
 800bc64:	200000d8 	.word	0x200000d8

0800bc68 <USBD_CDC_ACM_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_ACM_RegisterInterface(USBD_HandleTypeDef *pdev,
                                       USBD_CDC_ACM_ItfTypeDef *fops)
{
 800bc68:	b480      	push	{r7}
 800bc6a:	b083      	sub	sp, #12
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
 800bc70:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d101      	bne.n	800bc7c <USBD_CDC_ACM_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800bc78:	2303      	movs	r3, #3
 800bc7a:	e004      	b.n	800bc86 <USBD_CDC_ACM_RegisterInterface+0x1e>
  }

  pdev->pUserData_CDC_ACM = fops;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	683a      	ldr	r2, [r7, #0]
 800bc80:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  return (uint8_t)USBD_OK;
 800bc84:	2300      	movs	r3, #0
}
 800bc86:	4618      	mov	r0, r3
 800bc88:	370c      	adds	r7, #12
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc90:	4770      	bx	lr
	...

0800bc94 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800bc94:	b480      	push	{r7}
 800bc96:	b087      	sub	sp, #28
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	60b9      	str	r1, [r7, #8]
 800bc9c:	607a      	str	r2, [r7, #4]
 800bc9e:	603b      	str	r3, [r7, #0]
 800bca0:	4603      	mov	r3, r0
 800bca2:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800bca4:	2300      	movs	r3, #0
 800bca6:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 800bca8:	7bfb      	ldrb	r3, [r7, #15]
 800bcaa:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800bcae:	fb02 f303 	mul.w	r3, r2, r3
 800bcb2:	4a09      	ldr	r2, [pc, #36]	@ (800bcd8 <USBD_CDC_SetTxBuffer+0x44>)
 800bcb4:	4413      	add	r3, r2
 800bcb6:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800bcb8:	697b      	ldr	r3, [r7, #20]
 800bcba:	687a      	ldr	r2, [r7, #4]
 800bcbc:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800bcc0:	697b      	ldr	r3, [r7, #20]
 800bcc2:	683a      	ldr	r2, [r7, #0]
 800bcc4:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800bcc8:	2300      	movs	r3, #0
}
 800bcca:	4618      	mov	r0, r3
 800bccc:	371c      	adds	r7, #28
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd4:	4770      	bx	lr
 800bcd6:	bf00      	nop
 800bcd8:	2000166c 	.word	0x2000166c

0800bcdc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800bcdc:	b480      	push	{r7}
 800bcde:	b087      	sub	sp, #28
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	4603      	mov	r3, r0
 800bce4:	60b9      	str	r1, [r7, #8]
 800bce6:	607a      	str	r2, [r7, #4]
 800bce8:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800bcea:	2300      	movs	r3, #0
 800bcec:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 800bcee:	7bfb      	ldrb	r3, [r7, #15]
 800bcf0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800bcf4:	fb02 f303 	mul.w	r3, r2, r3
 800bcf8:	4a06      	ldr	r2, [pc, #24]	@ (800bd14 <USBD_CDC_SetRxBuffer+0x38>)
 800bcfa:	4413      	add	r3, r2
 800bcfc:	617b      	str	r3, [r7, #20]

  hcdc->RxBuffer = pbuff;
 800bcfe:	697b      	ldr	r3, [r7, #20]
 800bd00:	687a      	ldr	r2, [r7, #4]
 800bd02:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800bd06:	2300      	movs	r3, #0
}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	371c      	adds	r7, #28
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd12:	4770      	bx	lr
 800bd14:	2000166c 	.word	0x2000166c

0800bd18 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b084      	sub	sp, #16
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	4603      	mov	r3, r0
 800bd20:	6039      	str	r1, [r7, #0]
 800bd22:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800bd24:	2300      	movs	r3, #0
 800bd26:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800bd28:	2301      	movs	r3, #1
 800bd2a:	73fb      	strb	r3, [r7, #15]

  hcdc = &CDC_ACM_Class_Data[ch];
 800bd2c:	79fb      	ldrb	r3, [r7, #7]
 800bd2e:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800bd32:	fb02 f303 	mul.w	r3, r2, r3
 800bd36:	4a17      	ldr	r2, [pc, #92]	@ (800bd94 <USBD_CDC_TransmitPacket+0x7c>)
 800bd38:	4413      	add	r3, r2
 800bd3a:	60bb      	str	r3, [r7, #8]

  if (hcdc->TxState == 0U)
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d121      	bne.n	800bd8a <USBD_CDC_TransmitPacket+0x72>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	2201      	movs	r2, #1
 800bd4a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP[ch] & 0xFU].total_length = hcdc->TxLength;
 800bd4e:	79fb      	ldrb	r3, [r7, #7]
 800bd50:	4a11      	ldr	r2, [pc, #68]	@ (800bd98 <USBD_CDC_TransmitPacket+0x80>)
 800bd52:	5cd3      	ldrb	r3, [r2, r3]
 800bd54:	f003 020f 	and.w	r2, r3, #15
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800bd5e:	6838      	ldr	r0, [r7, #0]
 800bd60:	4613      	mov	r3, r2
 800bd62:	009b      	lsls	r3, r3, #2
 800bd64:	4413      	add	r3, r2
 800bd66:	009b      	lsls	r3, r3, #2
 800bd68:	4403      	add	r3, r0
 800bd6a:	3318      	adds	r3, #24
 800bd6c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP[ch], hcdc->TxBuffer, hcdc->TxLength);
 800bd6e:	79fb      	ldrb	r3, [r7, #7]
 800bd70:	4a09      	ldr	r2, [pc, #36]	@ (800bd98 <USBD_CDC_TransmitPacket+0x80>)
 800bd72:	5cd1      	ldrb	r1, [r2, r3]
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800bd80:	6838      	ldr	r0, [r7, #0]
 800bd82:	f002 fa9a 	bl	800e2ba <USBD_LL_Transmit>

    ret = USBD_OK;
 800bd86:	2300      	movs	r3, #0
 800bd88:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800bd8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	3710      	adds	r7, #16
 800bd90:	46bd      	mov	sp, r7
 800bd92:	bd80      	pop	{r7, pc}
 800bd94:	2000166c 	.word	0x2000166c
 800bd98:	20001654 	.word	0x20001654

0800bd9c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b084      	sub	sp, #16
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	4603      	mov	r3, r0
 800bda4:	6039      	str	r1, [r7, #0]
 800bda6:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800bda8:	2300      	movs	r3, #0
 800bdaa:	60fb      	str	r3, [r7, #12]

  hcdc = &CDC_ACM_Class_Data[ch];
 800bdac:	79fb      	ldrb	r3, [r7, #7]
 800bdae:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800bdb2:	fb02 f303 	mul.w	r3, r2, r3
 800bdb6:	4a11      	ldr	r2, [pc, #68]	@ (800bdfc <USBD_CDC_ReceivePacket+0x60>)
 800bdb8:	4413      	add	r3, r2
 800bdba:	60fb      	str	r3, [r7, #12]

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	7c1b      	ldrb	r3, [r3, #16]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d10b      	bne.n	800bddc <USBD_CDC_ReceivePacket+0x40>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 800bdc4:	79fb      	ldrb	r3, [r7, #7]
 800bdc6:	4a0e      	ldr	r2, [pc, #56]	@ (800be00 <USBD_CDC_ReceivePacket+0x64>)
 800bdc8:	5cd1      	ldrb	r1, [r2, r3]
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bdd0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bdd4:	6838      	ldr	r0, [r7, #0]
 800bdd6:	f002 fa91 	bl	800e2fc <USBD_LL_PrepareReceive>
 800bdda:	e009      	b.n	800bdf0 <USBD_CDC_ReceivePacket+0x54>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 800bddc:	79fb      	ldrb	r3, [r7, #7]
 800bdde:	4a08      	ldr	r2, [pc, #32]	@ (800be00 <USBD_CDC_ReceivePacket+0x64>)
 800bde0:	5cd1      	ldrb	r1, [r2, r3]
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bde8:	2340      	movs	r3, #64	@ 0x40
 800bdea:	6838      	ldr	r0, [r7, #0]
 800bdec:	f002 fa86 	bl	800e2fc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bdf0:	2300      	movs	r3, #0
}
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	3710      	adds	r7, #16
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bd80      	pop	{r7, pc}
 800bdfa:	bf00      	nop
 800bdfc:	2000166c 	.word	0x2000166c
 800be00:	20001658 	.word	0x20001658

0800be04 <USBD_Update_CDC_ACM_DESC>:
                              uint8_t com_itf,
                              uint8_t in_ep,
                              uint8_t cmd_ep,
                              uint8_t out_ep,
                              uint8_t str_idx)
{
 800be04:	b480      	push	{r7}
 800be06:	b085      	sub	sp, #20
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
 800be0c:	4608      	mov	r0, r1
 800be0e:	4611      	mov	r1, r2
 800be10:	461a      	mov	r2, r3
 800be12:	4603      	mov	r3, r0
 800be14:	70fb      	strb	r3, [r7, #3]
 800be16:	460b      	mov	r3, r1
 800be18:	70bb      	strb	r3, [r7, #2]
 800be1a:	4613      	mov	r3, r2
 800be1c:	707b      	strb	r3, [r7, #1]
  desc += 9;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	3309      	adds	r3, #9
 800be22:	607b      	str	r3, [r7, #4]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800be24:	2300      	movs	r3, #0
 800be26:	73fb      	strb	r3, [r7, #15]
 800be28:	e05b      	b.n	800bee2 <USBD_Update_CDC_ACM_DESC+0xde>
  {
    desc[2] = cmd_itf;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	3302      	adds	r3, #2
 800be2e:	78fa      	ldrb	r2, [r7, #3]
 800be30:	701a      	strb	r2, [r3, #0]
    desc[16] = str_idx;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	3310      	adds	r3, #16
 800be36:	f897 2020 	ldrb.w	r2, [r7, #32]
 800be3a:	701a      	strb	r2, [r3, #0]
    desc[10] = cmd_itf;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	330a      	adds	r3, #10
 800be40:	78fa      	ldrb	r2, [r7, #3]
 800be42:	701a      	strb	r2, [r3, #0]
    desc[26] = com_itf;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	331a      	adds	r3, #26
 800be48:	78ba      	ldrb	r2, [r7, #2]
 800be4a:	701a      	strb	r2, [r3, #0]
    desc[34] = cmd_itf;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	3322      	adds	r3, #34	@ 0x22
 800be50:	78fa      	ldrb	r2, [r7, #3]
 800be52:	701a      	strb	r2, [r3, #0]
    desc[35] = com_itf;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	3323      	adds	r3, #35	@ 0x23
 800be58:	78ba      	ldrb	r2, [r7, #2]
 800be5a:	701a      	strb	r2, [r3, #0]
    desc[38] = cmd_ep;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	3326      	adds	r3, #38	@ 0x26
 800be60:	7e3a      	ldrb	r2, [r7, #24]
 800be62:	701a      	strb	r2, [r3, #0]
    desc[45] = com_itf;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	332d      	adds	r3, #45	@ 0x2d
 800be68:	78ba      	ldrb	r2, [r7, #2]
 800be6a:	701a      	strb	r2, [r3, #0]
    desc[54] = out_ep;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	3336      	adds	r3, #54	@ 0x36
 800be70:	7f3a      	ldrb	r2, [r7, #28]
 800be72:	701a      	strb	r2, [r3, #0]
    desc[61] = in_ep;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	333d      	adds	r3, #61	@ 0x3d
 800be78:	787a      	ldrb	r2, [r7, #1]
 800be7a:	701a      	strb	r2, [r3, #0]

    desc += 66;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	3342      	adds	r3, #66	@ 0x42
 800be80:	607b      	str	r3, [r7, #4]
    CDC_IN_EP[i] = in_ep;
 800be82:	7bfb      	ldrb	r3, [r7, #15]
 800be84:	491c      	ldr	r1, [pc, #112]	@ (800bef8 <USBD_Update_CDC_ACM_DESC+0xf4>)
 800be86:	787a      	ldrb	r2, [r7, #1]
 800be88:	54ca      	strb	r2, [r1, r3]
    CDC_OUT_EP[i] = out_ep;
 800be8a:	7bfb      	ldrb	r3, [r7, #15]
 800be8c:	491b      	ldr	r1, [pc, #108]	@ (800befc <USBD_Update_CDC_ACM_DESC+0xf8>)
 800be8e:	7f3a      	ldrb	r2, [r7, #28]
 800be90:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_EP[i] = cmd_ep;
 800be92:	7bfb      	ldrb	r3, [r7, #15]
 800be94:	491a      	ldr	r1, [pc, #104]	@ (800bf00 <USBD_Update_CDC_ACM_DESC+0xfc>)
 800be96:	7e3a      	ldrb	r2, [r7, #24]
 800be98:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_ITF_NBR[i] = cmd_itf;
 800be9a:	7bfb      	ldrb	r3, [r7, #15]
 800be9c:	4919      	ldr	r1, [pc, #100]	@ (800bf04 <USBD_Update_CDC_ACM_DESC+0x100>)
 800be9e:	78fa      	ldrb	r2, [r7, #3]
 800bea0:	54ca      	strb	r2, [r1, r3]
    CDC_COM_ITF_NBR[i] = com_itf;
 800bea2:	7bfb      	ldrb	r3, [r7, #15]
 800bea4:	4918      	ldr	r1, [pc, #96]	@ (800bf08 <USBD_Update_CDC_ACM_DESC+0x104>)
 800bea6:	78ba      	ldrb	r2, [r7, #2]
 800bea8:	54ca      	strb	r2, [r1, r3]
    CDC_STR_DESC_IDX[i] = str_idx;
 800beaa:	7bfb      	ldrb	r3, [r7, #15]
 800beac:	4917      	ldr	r1, [pc, #92]	@ (800bf0c <USBD_Update_CDC_ACM_DESC+0x108>)
 800beae:	f897 2020 	ldrb.w	r2, [r7, #32]
 800beb2:	54ca      	strb	r2, [r1, r3]

    in_ep += 2;
 800beb4:	787b      	ldrb	r3, [r7, #1]
 800beb6:	3302      	adds	r3, #2
 800beb8:	707b      	strb	r3, [r7, #1]
    cmd_ep = in_ep + 1;
 800beba:	787b      	ldrb	r3, [r7, #1]
 800bebc:	3301      	adds	r3, #1
 800bebe:	763b      	strb	r3, [r7, #24]
    out_ep++;
 800bec0:	7f3b      	ldrb	r3, [r7, #28]
 800bec2:	3301      	adds	r3, #1
 800bec4:	773b      	strb	r3, [r7, #28]
    str_idx++;
 800bec6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800beca:	3301      	adds	r3, #1
 800becc:	f887 3020 	strb.w	r3, [r7, #32]

    cmd_itf += 2;
 800bed0:	78fb      	ldrb	r3, [r7, #3]
 800bed2:	3302      	adds	r3, #2
 800bed4:	70fb      	strb	r3, [r7, #3]
    com_itf = cmd_itf + 1;
 800bed6:	78fb      	ldrb	r3, [r7, #3]
 800bed8:	3301      	adds	r3, #1
 800beda:	70bb      	strb	r3, [r7, #2]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800bedc:	7bfb      	ldrb	r3, [r7, #15]
 800bede:	3301      	adds	r3, #1
 800bee0:	73fb      	strb	r3, [r7, #15]
 800bee2:	7bfb      	ldrb	r3, [r7, #15]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d0a0      	beq.n	800be2a <USBD_Update_CDC_ACM_DESC+0x26>
  }
}
 800bee8:	bf00      	nop
 800beea:	bf00      	nop
 800beec:	3714      	adds	r7, #20
 800beee:	46bd      	mov	sp, r7
 800bef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef4:	4770      	bx	lr
 800bef6:	bf00      	nop
 800bef8:	20001654 	.word	0x20001654
 800befc:	20001658 	.word	0x20001658
 800bf00:	2000165c 	.word	0x2000165c
 800bf04:	20001660 	.word	0x20001660
 800bf08:	20001664 	.word	0x20001664
 800bf0c:	20001668 	.word	0x20001668

0800bf10 <USBD_COMPOSITE_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b082      	sub	sp, #8
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
 800bf18:	460b      	mov	r3, r1
 800bf1a:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.Init(pdev, cfgidx);
 800bf1c:	4b08      	ldr	r3, [pc, #32]	@ (800bf40 <USBD_COMPOSITE_Init+0x30>)
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	78fa      	ldrb	r2, [r7, #3]
 800bf22:	4611      	mov	r1, r2
 800bf24:	6878      	ldr	r0, [r7, #4]
 800bf26:	4798      	blx	r3
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.Init(pdev, cfgidx);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.Init(pdev, cfgidx);
 800bf28:	4b06      	ldr	r3, [pc, #24]	@ (800bf44 <USBD_COMPOSITE_Init+0x34>)
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	78fa      	ldrb	r2, [r7, #3]
 800bf2e:	4611      	mov	r1, r2
 800bf30:	6878      	ldr	r0, [r7, #4]
 800bf32:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.Init(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 800bf34:	2300      	movs	r3, #0
}
 800bf36:	4618      	mov	r0, r3
 800bf38:	3708      	adds	r7, #8
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	bd80      	pop	{r7, pc}
 800bf3e:	bf00      	nop
 800bf40:	200000e4 	.word	0x200000e4
 800bf44:	20000204 	.word	0x20000204

0800bf48 <USBD_COMPOSITE_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b082      	sub	sp, #8
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
 800bf50:	460b      	mov	r3, r1
 800bf52:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.DeInit(pdev, cfgidx);
 800bf54:	4b08      	ldr	r3, [pc, #32]	@ (800bf78 <USBD_COMPOSITE_DeInit+0x30>)
 800bf56:	685b      	ldr	r3, [r3, #4]
 800bf58:	78fa      	ldrb	r2, [r7, #3]
 800bf5a:	4611      	mov	r1, r2
 800bf5c:	6878      	ldr	r0, [r7, #4]
 800bf5e:	4798      	blx	r3
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.DeInit(pdev, cfgidx);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.DeInit(pdev, cfgidx);
 800bf60:	4b06      	ldr	r3, [pc, #24]	@ (800bf7c <USBD_COMPOSITE_DeInit+0x34>)
 800bf62:	685b      	ldr	r3, [r3, #4]
 800bf64:	78fa      	ldrb	r2, [r7, #3]
 800bf66:	4611      	mov	r1, r2
 800bf68:	6878      	ldr	r0, [r7, #4]
 800bf6a:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.DeInit(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 800bf6c:	2300      	movs	r3, #0
}
 800bf6e:	4618      	mov	r0, r3
 800bf70:	3708      	adds	r7, #8
 800bf72:	46bd      	mov	sp, r7
 800bf74:	bd80      	pop	{r7, pc}
 800bf76:	bf00      	nop
 800bf78:	200000e4 	.word	0x200000e4
 800bf7c:	20000204 	.word	0x20000204

0800bf80 <USBD_COMPOSITE_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Setup(USBD_HandleTypeDef *pdev,
                                    USBD_SetupReqTypedef *req)
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b084      	sub	sp, #16
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
 800bf88:	6039      	str	r1, [r7, #0]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	73fb      	strb	r3, [r7, #15]
 800bf8e:	e019      	b.n	800bfc4 <USBD_COMPOSITE_Setup+0x44>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	889b      	ldrh	r3, [r3, #4]
 800bf94:	b2da      	uxtb	r2, r3
 800bf96:	7bfb      	ldrb	r3, [r7, #15]
 800bf98:	4915      	ldr	r1, [pc, #84]	@ (800bff0 <USBD_COMPOSITE_Setup+0x70>)
 800bf9a:	5ccb      	ldrb	r3, [r1, r3]
 800bf9c:	429a      	cmp	r2, r3
 800bf9e:	d007      	beq.n	800bfb0 <USBD_COMPOSITE_Setup+0x30>
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	889b      	ldrh	r3, [r3, #4]
 800bfa4:	b2da      	uxtb	r2, r3
 800bfa6:	7bfb      	ldrb	r3, [r7, #15]
 800bfa8:	4912      	ldr	r1, [pc, #72]	@ (800bff4 <USBD_COMPOSITE_Setup+0x74>)
 800bfaa:	5ccb      	ldrb	r3, [r1, r3]
 800bfac:	429a      	cmp	r2, r3
 800bfae:	d106      	bne.n	800bfbe <USBD_COMPOSITE_Setup+0x3e>
    {
      return USBD_CDC_ACM.Setup(pdev, req);
 800bfb0:	4b11      	ldr	r3, [pc, #68]	@ (800bff8 <USBD_COMPOSITE_Setup+0x78>)
 800bfb2:	689b      	ldr	r3, [r3, #8]
 800bfb4:	6839      	ldr	r1, [r7, #0]
 800bfb6:	6878      	ldr	r0, [r7, #4]
 800bfb8:	4798      	blx	r3
 800bfba:	4603      	mov	r3, r0
 800bfbc:	e014      	b.n	800bfe8 <USBD_COMPOSITE_Setup+0x68>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800bfbe:	7bfb      	ldrb	r3, [r7, #15]
 800bfc0:	3301      	adds	r3, #1
 800bfc2:	73fb      	strb	r3, [r7, #15]
 800bfc4:	7bfb      	ldrb	r3, [r7, #15]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d0e2      	beq.n	800bf90 <USBD_COMPOSITE_Setup+0x10>
  {
    return USBD_HID_KEYBOARD.Setup(pdev, req);
  }
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (LOBYTE(req->wIndex) == CUSTOM_HID_ITF_NBR)
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	889b      	ldrh	r3, [r3, #4]
 800bfce:	b2da      	uxtb	r2, r3
 800bfd0:	4b0a      	ldr	r3, [pc, #40]	@ (800bffc <USBD_COMPOSITE_Setup+0x7c>)
 800bfd2:	781b      	ldrb	r3, [r3, #0]
 800bfd4:	429a      	cmp	r2, r3
 800bfd6:	d106      	bne.n	800bfe6 <USBD_COMPOSITE_Setup+0x66>
  {
    return USBD_HID_CUSTOM.Setup(pdev, req);
 800bfd8:	4b09      	ldr	r3, [pc, #36]	@ (800c000 <USBD_COMPOSITE_Setup+0x80>)
 800bfda:	689b      	ldr	r3, [r3, #8]
 800bfdc:	6839      	ldr	r1, [r7, #0]
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	4798      	blx	r3
 800bfe2:	4603      	mov	r3, r0
 800bfe4:	e000      	b.n	800bfe8 <USBD_COMPOSITE_Setup+0x68>
  {
    USBD_PRNT.Setup(pdev, req);
  }
#endif

  return USBD_FAIL;
 800bfe6:	2303      	movs	r3, #3
}
 800bfe8:	4618      	mov	r0, r3
 800bfea:	3710      	adds	r7, #16
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bd80      	pop	{r7, pc}
 800bff0:	20001660 	.word	0x20001660
 800bff4:	20001664 	.word	0x20001664
 800bff8:	200000e4 	.word	0x200000e4
 800bffc:	200019a0 	.word	0x200019a0
 800c000:	20000204 	.word	0x20000204

0800c004 <USBD_COMPOSITE_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b084      	sub	sp, #16
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
 800c00c:	460b      	mov	r3, r1
 800c00e:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800c010:	2300      	movs	r3, #0
 800c012:	73fb      	strb	r3, [r7, #15]
 800c014:	e01a      	b.n	800c04c <USBD_COMPOSITE_DataIn+0x48>
  {
    if (epnum == (CDC_IN_EP[i] & 0x7F) || epnum == (CDC_CMD_EP[i] & 0x7F))
 800c016:	78fa      	ldrb	r2, [r7, #3]
 800c018:	7bfb      	ldrb	r3, [r7, #15]
 800c01a:	4918      	ldr	r1, [pc, #96]	@ (800c07c <USBD_COMPOSITE_DataIn+0x78>)
 800c01c:	5ccb      	ldrb	r3, [r1, r3]
 800c01e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c022:	429a      	cmp	r2, r3
 800c024:	d007      	beq.n	800c036 <USBD_COMPOSITE_DataIn+0x32>
 800c026:	78fa      	ldrb	r2, [r7, #3]
 800c028:	7bfb      	ldrb	r3, [r7, #15]
 800c02a:	4915      	ldr	r1, [pc, #84]	@ (800c080 <USBD_COMPOSITE_DataIn+0x7c>)
 800c02c:	5ccb      	ldrb	r3, [r1, r3]
 800c02e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c032:	429a      	cmp	r2, r3
 800c034:	d107      	bne.n	800c046 <USBD_COMPOSITE_DataIn+0x42>
    {
      return USBD_CDC_ACM.DataIn(pdev, epnum);
 800c036:	4b13      	ldr	r3, [pc, #76]	@ (800c084 <USBD_COMPOSITE_DataIn+0x80>)
 800c038:	695b      	ldr	r3, [r3, #20]
 800c03a:	78fa      	ldrb	r2, [r7, #3]
 800c03c:	4611      	mov	r1, r2
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	4798      	blx	r3
 800c042:	4603      	mov	r3, r0
 800c044:	e015      	b.n	800c072 <USBD_COMPOSITE_DataIn+0x6e>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800c046:	7bfb      	ldrb	r3, [r7, #15]
 800c048:	3301      	adds	r3, #1
 800c04a:	73fb      	strb	r3, [r7, #15]
 800c04c:	7bfb      	ldrb	r3, [r7, #15]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d0e1      	beq.n	800c016 <USBD_COMPOSITE_DataIn+0x12>
  {
    return USBD_HID_KEYBOARD.DataIn(pdev, epnum);
  }
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (epnum == (CUSTOM_HID_IN_EP & 0x7F))
 800c052:	78fa      	ldrb	r2, [r7, #3]
 800c054:	4b0c      	ldr	r3, [pc, #48]	@ (800c088 <USBD_COMPOSITE_DataIn+0x84>)
 800c056:	781b      	ldrb	r3, [r3, #0]
 800c058:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c05c:	429a      	cmp	r2, r3
 800c05e:	d107      	bne.n	800c070 <USBD_COMPOSITE_DataIn+0x6c>
  {
    return USBD_HID_CUSTOM.DataIn(pdev, epnum);
 800c060:	4b0a      	ldr	r3, [pc, #40]	@ (800c08c <USBD_COMPOSITE_DataIn+0x88>)
 800c062:	695b      	ldr	r3, [r3, #20]
 800c064:	78fa      	ldrb	r2, [r7, #3]
 800c066:	4611      	mov	r1, r2
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	4798      	blx	r3
 800c06c:	4603      	mov	r3, r0
 800c06e:	e000      	b.n	800c072 <USBD_COMPOSITE_DataIn+0x6e>
  {
    USBD_PRNT.DataIn(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 800c070:	2303      	movs	r3, #3
}
 800c072:	4618      	mov	r0, r3
 800c074:	3710      	adds	r7, #16
 800c076:	46bd      	mov	sp, r7
 800c078:	bd80      	pop	{r7, pc}
 800c07a:	bf00      	nop
 800c07c:	20001654 	.word	0x20001654
 800c080:	2000165c 	.word	0x2000165c
 800c084:	200000e4 	.word	0x200000e4
 800c088:	20000202 	.word	0x20000202
 800c08c:	20000204 	.word	0x20000204

0800c090 <USBD_COMPOSITE_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b082      	sub	sp, #8
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.EP0_RxReady(pdev);
 800c098:	4b06      	ldr	r3, [pc, #24]	@ (800c0b4 <USBD_COMPOSITE_EP0_RxReady+0x24>)
 800c09a:	691b      	ldr	r3, [r3, #16]
 800c09c:	6878      	ldr	r0, [r7, #4]
 800c09e:	4798      	blx	r3
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.EP0_RxReady(pdev);
 800c0a0:	4b05      	ldr	r3, [pc, #20]	@ (800c0b8 <USBD_COMPOSITE_EP0_RxReady+0x28>)
 800c0a2:	691b      	ldr	r3, [r3, #16]
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	4798      	blx	r3
  USBD_DFU.EP0_RxReady(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800c0a8:	2300      	movs	r3, #0
}
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	3708      	adds	r7, #8
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bd80      	pop	{r7, pc}
 800c0b2:	bf00      	nop
 800c0b4:	200000e4 	.word	0x200000e4
 800c0b8:	20000204 	.word	0x20000204

0800c0bc <USBD_COMPOSITE_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 800c0bc:	b480      	push	{r7}
 800c0be:	b083      	sub	sp, #12
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
  USBD_DFU.EP0_TxSent(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800c0c4:	2300      	movs	r3, #0
}
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	370c      	adds	r7, #12
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d0:	4770      	bx	lr

0800c0d2 <USBD_COMPOSITE_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_SOF(USBD_HandleTypeDef *pdev)
{
 800c0d2:	b480      	push	{r7}
 800c0d4:	b083      	sub	sp, #12
 800c0d6:	af00      	add	r7, sp, #0
 800c0d8:	6078      	str	r0, [r7, #4]
  USBD_DFU.SOF(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800c0da:	2300      	movs	r3, #0
}
 800c0dc:	4618      	mov	r0, r3
 800c0de:	370c      	adds	r7, #12
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e6:	4770      	bx	lr

0800c0e8 <USBD_COMPOSITE_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	b083      	sub	sp, #12
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
 800c0f0:	460b      	mov	r3, r1
 800c0f2:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800c0f4:	2300      	movs	r3, #0
}
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	370c      	adds	r7, #12
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c100:	4770      	bx	lr

0800c102 <USBD_COMPOSITE_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c102:	b480      	push	{r7}
 800c104:	b083      	sub	sp, #12
 800c106:	af00      	add	r7, sp, #0
 800c108:	6078      	str	r0, [r7, #4]
 800c10a:	460b      	mov	r3, r1
 800c10c:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800c10e:	2300      	movs	r3, #0
}
 800c110:	4618      	mov	r0, r3
 800c112:	370c      	adds	r7, #12
 800c114:	46bd      	mov	sp, r7
 800c116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11a:	4770      	bx	lr

0800c11c <USBD_COMPOSITE_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b084      	sub	sp, #16
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
 800c124:	460b      	mov	r3, r1
 800c126:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800c128:	2300      	movs	r3, #0
 800c12a:	73fb      	strb	r3, [r7, #15]
 800c12c:	e010      	b.n	800c150 <USBD_COMPOSITE_DataOut+0x34>
  {
    if (epnum == CDC_OUT_EP[i])
 800c12e:	7bfb      	ldrb	r3, [r7, #15]
 800c130:	4a12      	ldr	r2, [pc, #72]	@ (800c17c <USBD_COMPOSITE_DataOut+0x60>)
 800c132:	5cd3      	ldrb	r3, [r2, r3]
 800c134:	78fa      	ldrb	r2, [r7, #3]
 800c136:	429a      	cmp	r2, r3
 800c138:	d107      	bne.n	800c14a <USBD_COMPOSITE_DataOut+0x2e>
    {
      return USBD_CDC_ACM.DataOut(pdev, epnum);
 800c13a:	4b11      	ldr	r3, [pc, #68]	@ (800c180 <USBD_COMPOSITE_DataOut+0x64>)
 800c13c:	699b      	ldr	r3, [r3, #24]
 800c13e:	78fa      	ldrb	r2, [r7, #3]
 800c140:	4611      	mov	r1, r2
 800c142:	6878      	ldr	r0, [r7, #4]
 800c144:	4798      	blx	r3
 800c146:	4603      	mov	r3, r0
 800c148:	e013      	b.n	800c172 <USBD_COMPOSITE_DataOut+0x56>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800c14a:	7bfb      	ldrb	r3, [r7, #15]
 800c14c:	3301      	adds	r3, #1
 800c14e:	73fb      	strb	r3, [r7, #15]
 800c150:	7bfb      	ldrb	r3, [r7, #15]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d0eb      	beq.n	800c12e <USBD_COMPOSITE_DataOut+0x12>
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (epnum == CUSTOM_HID_OUT_EP)
 800c156:	4b0b      	ldr	r3, [pc, #44]	@ (800c184 <USBD_COMPOSITE_DataOut+0x68>)
 800c158:	781b      	ldrb	r3, [r3, #0]
 800c15a:	78fa      	ldrb	r2, [r7, #3]
 800c15c:	429a      	cmp	r2, r3
 800c15e:	d107      	bne.n	800c170 <USBD_COMPOSITE_DataOut+0x54>
  {
    return USBD_HID_CUSTOM.DataOut(pdev, epnum);
 800c160:	4b09      	ldr	r3, [pc, #36]	@ (800c188 <USBD_COMPOSITE_DataOut+0x6c>)
 800c162:	699b      	ldr	r3, [r3, #24]
 800c164:	78fa      	ldrb	r2, [r7, #3]
 800c166:	4611      	mov	r1, r2
 800c168:	6878      	ldr	r0, [r7, #4]
 800c16a:	4798      	blx	r3
 800c16c:	4603      	mov	r3, r0
 800c16e:	e000      	b.n	800c172 <USBD_COMPOSITE_DataOut+0x56>
  {
    USBD_PRNT.DataOut(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 800c170:	2303      	movs	r3, #3
}
 800c172:	4618      	mov	r0, r3
 800c174:	3710      	adds	r7, #16
 800c176:	46bd      	mov	sp, r7
 800c178:	bd80      	pop	{r7, pc}
 800c17a:	bf00      	nop
 800c17c:	20001658 	.word	0x20001658
 800c180:	200000e4 	.word	0x200000e4
 800c184:	20000203 	.word	0x20000203
 800c188:	20000204 	.word	0x20000204

0800c18c <USBD_COMPOSITE_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetHSCfgDesc(uint16_t *length)
{
 800c18c:	b480      	push	{r7}
 800c18e:	b083      	sub	sp, #12
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	226b      	movs	r2, #107	@ 0x6b
 800c198:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 800c19a:	4b03      	ldr	r3, [pc, #12]	@ (800c1a8 <USBD_COMPOSITE_GetHSCfgDesc+0x1c>)
}
 800c19c:	4618      	mov	r0, r3
 800c19e:	370c      	adds	r7, #12
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a6:	4770      	bx	lr
 800c1a8:	200018f4 	.word	0x200018f4

0800c1ac <USBD_COMPOSITE_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetFSCfgDesc(uint16_t *length)
{
 800c1ac:	b480      	push	{r7}
 800c1ae:	b083      	sub	sp, #12
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	226b      	movs	r2, #107	@ 0x6b
 800c1b8:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
 800c1ba:	4b03      	ldr	r3, [pc, #12]	@ (800c1c8 <USBD_COMPOSITE_GetFSCfgDesc+0x1c>)
}
 800c1bc:	4618      	mov	r0, r3
 800c1be:	370c      	adds	r7, #12
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c6:	4770      	bx	lr
 800c1c8:	20001888 	.word	0x20001888

0800c1cc <USBD_COMPOSITE_GetOtherSpeedCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c1cc:	b480      	push	{r7}
 800c1ce:	b083      	sub	sp, #12
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
#if (USBD_USE_HS == 1)
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
#else
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	226b      	movs	r2, #107	@ 0x6b
 800c1d8:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 800c1da:	4b03      	ldr	r3, [pc, #12]	@ (800c1e8 <USBD_COMPOSITE_GetOtherSpeedCfgDesc+0x1c>)
#endif
}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	370c      	adds	r7, #12
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e6:	4770      	bx	lr
 800c1e8:	200018f4 	.word	0x200018f4

0800c1ec <USBD_COMPOSITE_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_COMPOSITE_GetDeviceQualifierDesc(uint16_t *length)
{
 800c1ec:	b480      	push	{r7}
 800c1ee:	b083      	sub	sp, #12
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_DeviceQualifierDesc);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	220a      	movs	r2, #10
 800c1f8:	801a      	strh	r2, [r3, #0]
  return USBD_COMPOSITE_DeviceQualifierDesc;
 800c1fa:	4b03      	ldr	r3, [pc, #12]	@ (800c208 <USBD_COMPOSITE_GetDeviceQualifierDesc+0x1c>)
}
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	370c      	adds	r7, #12
 800c200:	46bd      	mov	sp, r7
 800c202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c206:	4770      	bx	lr
 800c208:	200001f8 	.word	0x200001f8

0800c20c <USBD_COMPOSITE_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_COMPOSITE_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b08a      	sub	sp, #40	@ 0x28
 800c210:	af00      	add	r7, sp, #0
 800c212:	60f8      	str	r0, [r7, #12]
 800c214:	460b      	mov	r3, r1
 800c216:	607a      	str	r2, [r7, #4]
 800c218:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[64];

  /* Check if the requested string interface is supported */
  if (index <= USBD_Track_String_Index)
 800c21a:	4b20      	ldr	r3, [pc, #128]	@ (800c29c <USBD_COMPOSITE_GetUsrStringDesc+0x90>)
 800c21c:	781b      	ldrb	r3, [r3, #0]
 800c21e:	7afa      	ldrb	r2, [r7, #11]
 800c220:	429a      	cmp	r2, r3
 800c222:	d836      	bhi.n	800c292 <USBD_COMPOSITE_GetUsrStringDesc+0x86>
  {
#if (USBD_USE_CDC_ACM == 1)
    char str_buffer[16] = "";
 800c224:	2300      	movs	r3, #0
 800c226:	617b      	str	r3, [r7, #20]
 800c228:	f107 0318 	add.w	r3, r7, #24
 800c22c:	2200      	movs	r2, #0
 800c22e:	601a      	str	r2, [r3, #0]
 800c230:	605a      	str	r2, [r3, #4]
 800c232:	609a      	str	r2, [r3, #8]
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800c234:	2300      	movs	r3, #0
 800c236:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c23a:	e01a      	b.n	800c272 <USBD_COMPOSITE_GetUsrStringDesc+0x66>
    {
      if (index == CDC_STR_DESC_IDX[i])
 800c23c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c240:	4a17      	ldr	r2, [pc, #92]	@ (800c2a0 <USBD_COMPOSITE_GetUsrStringDesc+0x94>)
 800c242:	5cd3      	ldrb	r3, [r2, r3]
 800c244:	7afa      	ldrb	r2, [r7, #11]
 800c246:	429a      	cmp	r2, r3
 800c248:	d10e      	bne.n	800c268 <USBD_COMPOSITE_GetUsrStringDesc+0x5c>
      {
        snprintf(str_buffer, sizeof(str_buffer), CDC_ACM_STR_DESC, i);
 800c24a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c24e:	f107 0014 	add.w	r0, r7, #20
 800c252:	4a14      	ldr	r2, [pc, #80]	@ (800c2a4 <USBD_COMPOSITE_GetUsrStringDesc+0x98>)
 800c254:	2110      	movs	r1, #16
 800c256:	f005 fea5 	bl	8011fa4 <sniprintf>
        USBD_GetString((uint8_t *)str_buffer, USBD_StrDesc, length);
 800c25a:	f107 0314 	add.w	r3, r7, #20
 800c25e:	687a      	ldr	r2, [r7, #4]
 800c260:	4911      	ldr	r1, [pc, #68]	@ (800c2a8 <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 800c262:	4618      	mov	r0, r3
 800c264:	f001 fce9 	bl	800dc3a <USBD_GetString>
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800c268:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c26c:	3301      	adds	r3, #1
 800c26e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c272:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c276:	2b00      	cmp	r3, #0
 800c278:	d0e0      	beq.n	800c23c <USBD_COMPOSITE_GetUsrStringDesc+0x30>
    {
      USBD_GetString((uint8_t *)HID_KEYBOARD_STR_DESC, USBD_StrDesc, length);
    }
#endif
#if (USBD_USE_HID_CUSTOM == 1)
    if (index == CUSTOM_HID_STR_DESC_IDX)
 800c27a:	4b0c      	ldr	r3, [pc, #48]	@ (800c2ac <USBD_COMPOSITE_GetUsrStringDesc+0xa0>)
 800c27c:	781b      	ldrb	r3, [r3, #0]
 800c27e:	7afa      	ldrb	r2, [r7, #11]
 800c280:	429a      	cmp	r2, r3
 800c282:	d104      	bne.n	800c28e <USBD_COMPOSITE_GetUsrStringDesc+0x82>
    {
      USBD_GetString((uint8_t *)CUSTOM_HID_STR_DESC, USBD_StrDesc, length);
 800c284:	687a      	ldr	r2, [r7, #4]
 800c286:	4908      	ldr	r1, [pc, #32]	@ (800c2a8 <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 800c288:	4809      	ldr	r0, [pc, #36]	@ (800c2b0 <USBD_COMPOSITE_GetUsrStringDesc+0xa4>)
 800c28a:	f001 fcd6 	bl	800dc3a <USBD_GetString>
    if (index == PRINTER_STR_DESC_IDX)
    {
      USBD_GetString((uint8_t *)PRNT_STR_DESC, USBD_StrDesc, length);
    }
#endif
    return USBD_StrDesc;
 800c28e:	4b06      	ldr	r3, [pc, #24]	@ (800c2a8 <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 800c290:	e000      	b.n	800c294 <USBD_COMPOSITE_GetUsrStringDesc+0x88>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 800c292:	2300      	movs	r3, #0
  }
}
 800c294:	4618      	mov	r0, r3
 800c296:	3728      	adds	r7, #40	@ 0x28
 800c298:	46bd      	mov	sp, r7
 800c29a:	bd80      	pop	{r7, pc}
 800c29c:	200001f4 	.word	0x200001f4
 800c2a0:	20001668 	.word	0x20001668
 800c2a4:	08014368 	.word	0x08014368
 800c2a8:	20001960 	.word	0x20001960
 800c2ac:	200019a1 	.word	0x200019a1
 800c2b0:	08014378 	.word	0x08014378

0800c2b4 <USBD_COMPOSITE_Mount_Class>:
#endif

void USBD_COMPOSITE_Mount_Class(void)
{
 800c2b4:	b590      	push	{r4, r7, lr}
 800c2b6:	b089      	sub	sp, #36	@ 0x24
 800c2b8:	af04      	add	r7, sp, #16
  uint16_t len = 0;
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	80bb      	strh	r3, [r7, #4]
  uint8_t *ptr = NULL;
 800c2be:	2300      	movs	r3, #0
 800c2c0:	60fb      	str	r3, [r7, #12]

  uint8_t in_ep_track = 0x81;
 800c2c2:	2381      	movs	r3, #129	@ 0x81
 800c2c4:	72fb      	strb	r3, [r7, #11]
  uint8_t out_ep_track = 0x01;
 800c2c6:	2301      	movs	r3, #1
 800c2c8:	72bb      	strb	r3, [r7, #10]
  uint8_t interface_no_track = 0x00;
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	727b      	strb	r3, [r7, #9]
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_HID_CUSTOM == 1)
  ptr = USBD_HID_CUSTOM.GetFSConfigDescriptor(&len);
 800c2ce:	4b74      	ldr	r3, [pc, #464]	@ (800c4a0 <USBD_COMPOSITE_Mount_Class+0x1ec>)
 800c2d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2d2:	1d3a      	adds	r2, r7, #4
 800c2d4:	4610      	mov	r0, r2
 800c2d6:	4798      	blx	r3
 800c2d8:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID_Custom_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 800c2da:	4b72      	ldr	r3, [pc, #456]	@ (800c4a4 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800c2dc:	781b      	ldrb	r3, [r3, #0]
 800c2de:	7ab8      	ldrb	r0, [r7, #10]
 800c2e0:	7afa      	ldrb	r2, [r7, #11]
 800c2e2:	7a79      	ldrb	r1, [r7, #9]
 800c2e4:	9300      	str	r3, [sp, #0]
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	68f8      	ldr	r0, [r7, #12]
 800c2ea:	f000 fbc5 	bl	800ca78 <USBD_Update_HID_Custom_DESC>
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_HID_CUSTOM_DESC, ptr + 0x09, len - 0x09);
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	3309      	adds	r3, #9
 800c2f2:	88ba      	ldrh	r2, [r7, #4]
 800c2f4:	3a09      	subs	r2, #9
 800c2f6:	4619      	mov	r1, r3
 800c2f8:	486b      	ldr	r0, [pc, #428]	@ (800c4a8 <USBD_COMPOSITE_Mount_Class+0x1f4>)
 800c2fa:	f005 ffbe 	bl	801227a <memcpy>

  ptr = USBD_HID_CUSTOM.GetHSConfigDescriptor(&len);
 800c2fe:	4b68      	ldr	r3, [pc, #416]	@ (800c4a0 <USBD_COMPOSITE_Mount_Class+0x1ec>)
 800c300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c302:	1d3a      	adds	r2, r7, #4
 800c304:	4610      	mov	r0, r2
 800c306:	4798      	blx	r3
 800c308:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID_Custom_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 800c30a:	4b66      	ldr	r3, [pc, #408]	@ (800c4a4 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800c30c:	781b      	ldrb	r3, [r3, #0]
 800c30e:	7ab8      	ldrb	r0, [r7, #10]
 800c310:	7afa      	ldrb	r2, [r7, #11]
 800c312:	7a79      	ldrb	r1, [r7, #9]
 800c314:	9300      	str	r3, [sp, #0]
 800c316:	4603      	mov	r3, r0
 800c318:	68f8      	ldr	r0, [r7, #12]
 800c31a:	f000 fbad 	bl	800ca78 <USBD_Update_HID_Custom_DESC>
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_HID_CUSTOM_DESC, ptr + 0x09, len - 0x09);
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	3309      	adds	r3, #9
 800c322:	88ba      	ldrh	r2, [r7, #4]
 800c324:	3a09      	subs	r2, #9
 800c326:	4619      	mov	r1, r3
 800c328:	4860      	ldr	r0, [pc, #384]	@ (800c4ac <USBD_COMPOSITE_Mount_Class+0x1f8>)
 800c32a:	f005 ffa6 	bl	801227a <memcpy>

  in_ep_track += 1;
 800c32e:	7afb      	ldrb	r3, [r7, #11]
 800c330:	3301      	adds	r3, #1
 800c332:	72fb      	strb	r3, [r7, #11]
  out_ep_track += 1;
 800c334:	7abb      	ldrb	r3, [r7, #10]
 800c336:	3301      	adds	r3, #1
 800c338:	72bb      	strb	r3, [r7, #10]
  interface_no_track += 1;
 800c33a:	7a7b      	ldrb	r3, [r7, #9]
 800c33c:	3301      	adds	r3, #1
 800c33e:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += 1;
 800c340:	4b58      	ldr	r3, [pc, #352]	@ (800c4a4 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800c342:	781b      	ldrb	r3, [r3, #0]
 800c344:	3301      	adds	r3, #1
 800c346:	b2da      	uxtb	r2, r3
 800c348:	4b56      	ldr	r3, [pc, #344]	@ (800c4a4 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800c34a:	701a      	strb	r2, [r3, #0]
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_CDC_ACM == 1)
  ptr = USBD_CDC_ACM.GetFSConfigDescriptor(&len);
 800c34c:	4b58      	ldr	r3, [pc, #352]	@ (800c4b0 <USBD_COMPOSITE_Mount_Class+0x1fc>)
 800c34e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c350:	1d3a      	adds	r2, r7, #4
 800c352:	4610      	mov	r0, r2
 800c354:	4798      	blx	r3
 800c356:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 800c358:	7a7b      	ldrb	r3, [r7, #9]
 800c35a:	3301      	adds	r3, #1
 800c35c:	b2d8      	uxtb	r0, r3
 800c35e:	7afb      	ldrb	r3, [r7, #11]
 800c360:	3301      	adds	r3, #1
 800c362:	b2db      	uxtb	r3, r3
 800c364:	4a4f      	ldr	r2, [pc, #316]	@ (800c4a4 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800c366:	7812      	ldrb	r2, [r2, #0]
 800c368:	7afc      	ldrb	r4, [r7, #11]
 800c36a:	7a79      	ldrb	r1, [r7, #9]
 800c36c:	9202      	str	r2, [sp, #8]
 800c36e:	7aba      	ldrb	r2, [r7, #10]
 800c370:	9201      	str	r2, [sp, #4]
 800c372:	9300      	str	r3, [sp, #0]
 800c374:	4623      	mov	r3, r4
 800c376:	4602      	mov	r2, r0
 800c378:	68f8      	ldr	r0, [r7, #12]
 800c37a:	f7ff fd43 	bl	800be04 <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	3309      	adds	r3, #9
 800c382:	88ba      	ldrh	r2, [r7, #4]
 800c384:	3a09      	subs	r2, #9
 800c386:	4619      	mov	r1, r3
 800c388:	484a      	ldr	r0, [pc, #296]	@ (800c4b4 <USBD_COMPOSITE_Mount_Class+0x200>)
 800c38a:	f005 ff76 	bl	801227a <memcpy>

  ptr = USBD_CDC_ACM.GetHSConfigDescriptor(&len);
 800c38e:	4b48      	ldr	r3, [pc, #288]	@ (800c4b0 <USBD_COMPOSITE_Mount_Class+0x1fc>)
 800c390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c392:	1d3a      	adds	r2, r7, #4
 800c394:	4610      	mov	r0, r2
 800c396:	4798      	blx	r3
 800c398:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 800c39a:	7a7b      	ldrb	r3, [r7, #9]
 800c39c:	3301      	adds	r3, #1
 800c39e:	b2d8      	uxtb	r0, r3
 800c3a0:	7afb      	ldrb	r3, [r7, #11]
 800c3a2:	3301      	adds	r3, #1
 800c3a4:	b2db      	uxtb	r3, r3
 800c3a6:	4a3f      	ldr	r2, [pc, #252]	@ (800c4a4 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800c3a8:	7812      	ldrb	r2, [r2, #0]
 800c3aa:	7afc      	ldrb	r4, [r7, #11]
 800c3ac:	7a79      	ldrb	r1, [r7, #9]
 800c3ae:	9202      	str	r2, [sp, #8]
 800c3b0:	7aba      	ldrb	r2, [r7, #10]
 800c3b2:	9201      	str	r2, [sp, #4]
 800c3b4:	9300      	str	r3, [sp, #0]
 800c3b6:	4623      	mov	r3, r4
 800c3b8:	4602      	mov	r2, r0
 800c3ba:	68f8      	ldr	r0, [r7, #12]
 800c3bc:	f7ff fd22 	bl	800be04 <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	3309      	adds	r3, #9
 800c3c4:	88ba      	ldrh	r2, [r7, #4]
 800c3c6:	3a09      	subs	r2, #9
 800c3c8:	4619      	mov	r1, r3
 800c3ca:	483b      	ldr	r0, [pc, #236]	@ (800c4b8 <USBD_COMPOSITE_Mount_Class+0x204>)
 800c3cc:	f005 ff55 	bl	801227a <memcpy>

  in_ep_track += 2 * USBD_CDC_ACM_COUNT;
 800c3d0:	7afb      	ldrb	r3, [r7, #11]
 800c3d2:	3302      	adds	r3, #2
 800c3d4:	72fb      	strb	r3, [r7, #11]
  out_ep_track += 1 * USBD_CDC_ACM_COUNT;
 800c3d6:	7abb      	ldrb	r3, [r7, #10]
 800c3d8:	3301      	adds	r3, #1
 800c3da:	72bb      	strb	r3, [r7, #10]
  interface_no_track += 2 * USBD_CDC_ACM_COUNT;
 800c3dc:	7a7b      	ldrb	r3, [r7, #9]
 800c3de:	3302      	adds	r3, #2
 800c3e0:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += USBD_CDC_ACM_COUNT;
 800c3e2:	4b30      	ldr	r3, [pc, #192]	@ (800c4a4 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800c3e4:	781b      	ldrb	r3, [r3, #0]
 800c3e6:	3301      	adds	r3, #1
 800c3e8:	b2da      	uxtb	r2, r3
 800c3ea:	4b2e      	ldr	r3, [pc, #184]	@ (800c4a4 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800c3ec:	701a      	strb	r2, [r3, #0]
#endif

  uint16_t CFG_SIZE = sizeof(USBD_COMPOSITE_CFG_DESC_t);
 800c3ee:	236b      	movs	r3, #107	@ 0x6b
 800c3f0:	80fb      	strh	r3, [r7, #6]
  ptr = USBD_COMPOSITE_HSCfgDesc.CONFIG_DESC;
 800c3f2:	4b32      	ldr	r3, [pc, #200]	@ (800c4bc <USBD_COMPOSITE_Mount_Class+0x208>)
 800c3f4:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	2209      	movs	r2, #9
 800c3fa:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	3301      	adds	r3, #1
 800c400:	2202      	movs	r2, #2
 800c402:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	3302      	adds	r3, #2
 800c408:	88fa      	ldrh	r2, [r7, #6]
 800c40a:	b2d2      	uxtb	r2, r2
 800c40c:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 800c40e:	88fb      	ldrh	r3, [r7, #6]
 800c410:	0a1b      	lsrs	r3, r3, #8
 800c412:	b29a      	uxth	r2, r3
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	3303      	adds	r3, #3
 800c418:	b2d2      	uxtb	r2, r2
 800c41a:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	3304      	adds	r3, #4
 800c420:	7a7a      	ldrb	r2, [r7, #9]
 800c422:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	3305      	adds	r3, #5
 800c428:	2201      	movs	r2, #1
 800c42a:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	3306      	adds	r3, #6
 800c430:	2200      	movs	r2, #0
 800c432:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	3307      	adds	r3, #7
 800c438:	22c0      	movs	r2, #192	@ 0xc0
 800c43a:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	3308      	adds	r3, #8
 800c440:	2232      	movs	r2, #50	@ 0x32
 800c442:	701a      	strb	r2, [r3, #0]

  ptr = USBD_COMPOSITE_FSCfgDesc.CONFIG_DESC;
 800c444:	4b1e      	ldr	r3, [pc, #120]	@ (800c4c0 <USBD_COMPOSITE_Mount_Class+0x20c>)
 800c446:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	2209      	movs	r2, #9
 800c44c:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	3301      	adds	r3, #1
 800c452:	2202      	movs	r2, #2
 800c454:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	3302      	adds	r3, #2
 800c45a:	88fa      	ldrh	r2, [r7, #6]
 800c45c:	b2d2      	uxtb	r2, r2
 800c45e:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 800c460:	88fb      	ldrh	r3, [r7, #6]
 800c462:	0a1b      	lsrs	r3, r3, #8
 800c464:	b29a      	uxth	r2, r3
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	3303      	adds	r3, #3
 800c46a:	b2d2      	uxtb	r2, r2
 800c46c:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	3304      	adds	r3, #4
 800c472:	7a7a      	ldrb	r2, [r7, #9]
 800c474:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	3305      	adds	r3, #5
 800c47a:	2201      	movs	r2, #1
 800c47c:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	3306      	adds	r3, #6
 800c482:	2200      	movs	r2, #0
 800c484:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	3307      	adds	r3, #7
 800c48a:	22c0      	movs	r2, #192	@ 0xc0
 800c48c:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	3308      	adds	r3, #8
 800c492:	2232      	movs	r2, #50	@ 0x32
 800c494:	701a      	strb	r2, [r3, #0]

  (void)out_ep_track;
  (void)in_ep_track;
}
 800c496:	bf00      	nop
 800c498:	3714      	adds	r7, #20
 800c49a:	46bd      	mov	sp, r7
 800c49c:	bd90      	pop	{r4, r7, pc}
 800c49e:	bf00      	nop
 800c4a0:	20000204 	.word	0x20000204
 800c4a4:	200001f4 	.word	0x200001f4
 800c4a8:	20001891 	.word	0x20001891
 800c4ac:	200018fd 	.word	0x200018fd
 800c4b0:	200000e4 	.word	0x200000e4
 800c4b4:	200018b1 	.word	0x200018b1
 800c4b8:	2000191d 	.word	0x2000191d
 800c4bc:	200018f4 	.word	0x200018f4
 800c4c0:	20001888 	.word	0x20001888

0800c4c4 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b084      	sub	sp, #16
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
 800c4cc:	460b      	mov	r3, r1
 800c4ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = &CUSTOM_HID_Instance;
 800c4d0:	4b43      	ldr	r3, [pc, #268]	@ (800c5e0 <USBD_CUSTOM_HID_Init+0x11c>)
 800c4d2:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d105      	bne.n	800c4e6 <USBD_CUSTOM_HID_Init+0x22>
  {
    pdev->pClassData_HID_Custom = NULL;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	2200      	movs	r2, #0
 800c4de:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
    return (uint8_t)USBD_EMEM;
 800c4e2:	2302      	movs	r3, #2
 800c4e4:	e077      	b.n	800c5d6 <USBD_CUSTOM_HID_Init+0x112>
  }

  pdev->pClassData_HID_Custom = (void *)hhid;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	68fa      	ldr	r2, [r7, #12]
 800c4ea:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	7c1b      	ldrb	r3, [r3, #16]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d11b      	bne.n	800c52e <USBD_CUSTOM_HID_Init+0x6a>
  {
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800c4f6:	4b3b      	ldr	r3, [pc, #236]	@ (800c5e4 <USBD_CUSTOM_HID_Init+0x120>)
 800c4f8:	781b      	ldrb	r3, [r3, #0]
 800c4fa:	f003 020f 	and.w	r2, r3, #15
 800c4fe:	6879      	ldr	r1, [r7, #4]
 800c500:	4613      	mov	r3, r2
 800c502:	009b      	lsls	r3, r3, #2
 800c504:	4413      	add	r3, r2
 800c506:	009b      	lsls	r3, r3, #2
 800c508:	440b      	add	r3, r1
 800c50a:	3326      	adds	r3, #38	@ 0x26
 800c50c:	2205      	movs	r2, #5
 800c50e:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800c510:	4b35      	ldr	r3, [pc, #212]	@ (800c5e8 <USBD_CUSTOM_HID_Init+0x124>)
 800c512:	781b      	ldrb	r3, [r3, #0]
 800c514:	f003 020f 	and.w	r2, r3, #15
 800c518:	6879      	ldr	r1, [r7, #4]
 800c51a:	4613      	mov	r3, r2
 800c51c:	009b      	lsls	r3, r3, #2
 800c51e:	4413      	add	r3, r2
 800c520:	009b      	lsls	r3, r3, #2
 800c522:	440b      	add	r3, r1
 800c524:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800c528:	2205      	movs	r2, #5
 800c52a:	801a      	strh	r2, [r3, #0]
 800c52c:	e01a      	b.n	800c564 <USBD_CUSTOM_HID_Init+0xa0>
  }
  else /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800c52e:	4b2d      	ldr	r3, [pc, #180]	@ (800c5e4 <USBD_CUSTOM_HID_Init+0x120>)
 800c530:	781b      	ldrb	r3, [r3, #0]
 800c532:	f003 020f 	and.w	r2, r3, #15
 800c536:	6879      	ldr	r1, [r7, #4]
 800c538:	4613      	mov	r3, r2
 800c53a:	009b      	lsls	r3, r3, #2
 800c53c:	4413      	add	r3, r2
 800c53e:	009b      	lsls	r3, r3, #2
 800c540:	440b      	add	r3, r1
 800c542:	3326      	adds	r3, #38	@ 0x26
 800c544:	2205      	movs	r2, #5
 800c546:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800c548:	4b27      	ldr	r3, [pc, #156]	@ (800c5e8 <USBD_CUSTOM_HID_Init+0x124>)
 800c54a:	781b      	ldrb	r3, [r3, #0]
 800c54c:	f003 020f 	and.w	r2, r3, #15
 800c550:	6879      	ldr	r1, [r7, #4]
 800c552:	4613      	mov	r3, r2
 800c554:	009b      	lsls	r3, r3, #2
 800c556:	4413      	add	r3, r2
 800c558:	009b      	lsls	r3, r3, #2
 800c55a:	440b      	add	r3, r1
 800c55c:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800c560:	2205      	movs	r2, #5
 800c562:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_IN_EP, USBD_EP_TYPE_INTR,
 800c564:	4b1f      	ldr	r3, [pc, #124]	@ (800c5e4 <USBD_CUSTOM_HID_Init+0x120>)
 800c566:	7819      	ldrb	r1, [r3, #0]
 800c568:	2302      	movs	r3, #2
 800c56a:	2203      	movs	r2, #3
 800c56c:	6878      	ldr	r0, [r7, #4]
 800c56e:	f001 fdd6 	bl	800e11e <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].is_used = 1U;
 800c572:	4b1c      	ldr	r3, [pc, #112]	@ (800c5e4 <USBD_CUSTOM_HID_Init+0x120>)
 800c574:	781b      	ldrb	r3, [r3, #0]
 800c576:	f003 020f 	and.w	r2, r3, #15
 800c57a:	6879      	ldr	r1, [r7, #4]
 800c57c:	4613      	mov	r3, r2
 800c57e:	009b      	lsls	r3, r3, #2
 800c580:	4413      	add	r3, r2
 800c582:	009b      	lsls	r3, r3, #2
 800c584:	440b      	add	r3, r1
 800c586:	3324      	adds	r3, #36	@ 0x24
 800c588:	2201      	movs	r2, #1
 800c58a:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_OUT_EP, USBD_EP_TYPE_INTR,
 800c58c:	4b16      	ldr	r3, [pc, #88]	@ (800c5e8 <USBD_CUSTOM_HID_Init+0x124>)
 800c58e:	7819      	ldrb	r1, [r3, #0]
 800c590:	2302      	movs	r3, #2
 800c592:	2203      	movs	r2, #3
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	f001 fdc2 	bl	800e11e <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].is_used = 1U;
 800c59a:	4b13      	ldr	r3, [pc, #76]	@ (800c5e8 <USBD_CUSTOM_HID_Init+0x124>)
 800c59c:	781b      	ldrb	r3, [r3, #0]
 800c59e:	f003 020f 	and.w	r2, r3, #15
 800c5a2:	6879      	ldr	r1, [r7, #4]
 800c5a4:	4613      	mov	r3, r2
 800c5a6:	009b      	lsls	r3, r3, #2
 800c5a8:	4413      	add	r3, r2
 800c5aa:	009b      	lsls	r3, r3, #2
 800c5ac:	440b      	add	r3, r1
 800c5ae:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c5b2:	2201      	movs	r2, #1
 800c5b4:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	751a      	strb	r2, [r3, #20]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->Init();
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800c5c2:	685b      	ldr	r3, [r3, #4]
 800c5c4:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_OUT_EP, hhid->Report_buf,
 800c5c6:	4b08      	ldr	r3, [pc, #32]	@ (800c5e8 <USBD_CUSTOM_HID_Init+0x124>)
 800c5c8:	7819      	ldrb	r1, [r3, #0]
 800c5ca:	68fa      	ldr	r2, [r7, #12]
 800c5cc:	2302      	movs	r3, #2
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f001 fe94 	bl	800e2fc <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 800c5d4:	2300      	movs	r3, #0
}
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	3710      	adds	r7, #16
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	bd80      	pop	{r7, pc}
 800c5de:	bf00      	nop
 800c5e0:	200019a4 	.word	0x200019a4
 800c5e4:	20000202 	.word	0x20000202
 800c5e8:	20000203 	.word	0x20000203

0800c5ec <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b082      	sub	sp, #8
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
 800c5f4:	460b      	mov	r3, r1
 800c5f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_IN_EP);
 800c5f8:	4b2a      	ldr	r3, [pc, #168]	@ (800c6a4 <USBD_CUSTOM_HID_DeInit+0xb8>)
 800c5fa:	781b      	ldrb	r3, [r3, #0]
 800c5fc:	4619      	mov	r1, r3
 800c5fe:	6878      	ldr	r0, [r7, #4]
 800c600:	f001 fdb3 	bl	800e16a <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].is_used = 0U;
 800c604:	4b27      	ldr	r3, [pc, #156]	@ (800c6a4 <USBD_CUSTOM_HID_DeInit+0xb8>)
 800c606:	781b      	ldrb	r3, [r3, #0]
 800c608:	f003 020f 	and.w	r2, r3, #15
 800c60c:	6879      	ldr	r1, [r7, #4]
 800c60e:	4613      	mov	r3, r2
 800c610:	009b      	lsls	r3, r3, #2
 800c612:	4413      	add	r3, r2
 800c614:	009b      	lsls	r3, r3, #2
 800c616:	440b      	add	r3, r1
 800c618:	3324      	adds	r3, #36	@ 0x24
 800c61a:	2200      	movs	r2, #0
 800c61c:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = 0U;
 800c61e:	4b21      	ldr	r3, [pc, #132]	@ (800c6a4 <USBD_CUSTOM_HID_DeInit+0xb8>)
 800c620:	781b      	ldrb	r3, [r3, #0]
 800c622:	f003 020f 	and.w	r2, r3, #15
 800c626:	6879      	ldr	r1, [r7, #4]
 800c628:	4613      	mov	r3, r2
 800c62a:	009b      	lsls	r3, r3, #2
 800c62c:	4413      	add	r3, r2
 800c62e:	009b      	lsls	r3, r3, #2
 800c630:	440b      	add	r3, r1
 800c632:	3326      	adds	r3, #38	@ 0x26
 800c634:	2200      	movs	r2, #0
 800c636:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_OUT_EP);
 800c638:	4b1b      	ldr	r3, [pc, #108]	@ (800c6a8 <USBD_CUSTOM_HID_DeInit+0xbc>)
 800c63a:	781b      	ldrb	r3, [r3, #0]
 800c63c:	4619      	mov	r1, r3
 800c63e:	6878      	ldr	r0, [r7, #4]
 800c640:	f001 fd93 	bl	800e16a <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].is_used = 0U;
 800c644:	4b18      	ldr	r3, [pc, #96]	@ (800c6a8 <USBD_CUSTOM_HID_DeInit+0xbc>)
 800c646:	781b      	ldrb	r3, [r3, #0]
 800c648:	f003 020f 	and.w	r2, r3, #15
 800c64c:	6879      	ldr	r1, [r7, #4]
 800c64e:	4613      	mov	r3, r2
 800c650:	009b      	lsls	r3, r3, #2
 800c652:	4413      	add	r3, r2
 800c654:	009b      	lsls	r3, r3, #2
 800c656:	440b      	add	r3, r1
 800c658:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c65c:	2200      	movs	r2, #0
 800c65e:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = 0U;
 800c660:	4b11      	ldr	r3, [pc, #68]	@ (800c6a8 <USBD_CUSTOM_HID_DeInit+0xbc>)
 800c662:	781b      	ldrb	r3, [r3, #0]
 800c664:	f003 020f 	and.w	r2, r3, #15
 800c668:	6879      	ldr	r1, [r7, #4]
 800c66a:	4613      	mov	r3, r2
 800c66c:	009b      	lsls	r3, r3, #2
 800c66e:	4413      	add	r3, r2
 800c670:	009b      	lsls	r3, r3, #2
 800c672:	440b      	add	r3, r1
 800c674:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800c678:	2200      	movs	r2, #0
 800c67a:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassData_HID_Custom != NULL)
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c682:	2b00      	cmp	r3, #0
 800c684:	d008      	beq.n	800c698 <USBD_CUSTOM_HID_DeInit+0xac>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->DeInit();
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800c68c:	689b      	ldr	r3, [r3, #8]
 800c68e:	4798      	blx	r3
#if (0)
    USBD_free(pdev->pClassData_HID_Custom);
#endif
    pdev->pClassData_HID_Custom = NULL;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2200      	movs	r2, #0
 800c694:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
  }

  return (uint8_t)USBD_OK;
 800c698:	2300      	movs	r3, #0
}
 800c69a:	4618      	mov	r0, r3
 800c69c:	3708      	adds	r7, #8
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bd80      	pop	{r7, pc}
 800c6a2:	bf00      	nop
 800c6a4:	20000202 	.word	0x20000202
 800c6a8:	20000203 	.word	0x20000203

0800c6ac <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b088      	sub	sp, #32
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
 800c6b4:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c6bc:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800c6be:	2300      	movs	r3, #0
 800c6c0:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 800c6ce:	693b      	ldr	r3, [r7, #16]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d101      	bne.n	800c6d8 <USBD_CUSTOM_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800c6d4:	2303      	movs	r3, #3
 800c6d6:	e0ed      	b.n	800c8b4 <USBD_CUSTOM_HID_Setup+0x208>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	781b      	ldrb	r3, [r3, #0]
 800c6dc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d052      	beq.n	800c78a <USBD_CUSTOM_HID_Setup+0xde>
 800c6e4:	2b20      	cmp	r3, #32
 800c6e6:	f040 80dd 	bne.w	800c8a4 <USBD_CUSTOM_HID_Setup+0x1f8>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	785b      	ldrb	r3, [r3, #1]
 800c6ee:	3b02      	subs	r3, #2
 800c6f0:	2b09      	cmp	r3, #9
 800c6f2:	d842      	bhi.n	800c77a <USBD_CUSTOM_HID_Setup+0xce>
 800c6f4:	a201      	add	r2, pc, #4	@ (adr r2, 800c6fc <USBD_CUSTOM_HID_Setup+0x50>)
 800c6f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6fa:	bf00      	nop
 800c6fc:	0800c755 	.word	0x0800c755
 800c700:	0800c733 	.word	0x0800c733
 800c704:	0800c77b 	.word	0x0800c77b
 800c708:	0800c77b 	.word	0x0800c77b
 800c70c:	0800c77b 	.word	0x0800c77b
 800c710:	0800c77b 	.word	0x0800c77b
 800c714:	0800c77b 	.word	0x0800c77b
 800c718:	0800c765 	.word	0x0800c765
 800c71c:	0800c743 	.word	0x0800c743
 800c720:	0800c725 	.word	0x0800c725
    {
    case CUSTOM_HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 800c724:	683b      	ldr	r3, [r7, #0]
 800c726:	885b      	ldrh	r3, [r3, #2]
 800c728:	b2db      	uxtb	r3, r3
 800c72a:	461a      	mov	r2, r3
 800c72c:	693b      	ldr	r3, [r7, #16]
 800c72e:	605a      	str	r2, [r3, #4]
      break;
 800c730:	e02a      	b.n	800c788 <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800c732:	693b      	ldr	r3, [r7, #16]
 800c734:	3304      	adds	r3, #4
 800c736:	2201      	movs	r2, #1
 800c738:	4619      	mov	r1, r3
 800c73a:	6878      	ldr	r0, [r7, #4]
 800c73c:	f001 fadd 	bl	800dcfa <USBD_CtlSendData>
      break;
 800c740:	e022      	b.n	800c788 <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800c742:	683b      	ldr	r3, [r7, #0]
 800c744:	885b      	ldrh	r3, [r3, #2]
 800c746:	0a1b      	lsrs	r3, r3, #8
 800c748:	b29b      	uxth	r3, r3
 800c74a:	b2db      	uxtb	r3, r3
 800c74c:	461a      	mov	r2, r3
 800c74e:	693b      	ldr	r3, [r7, #16]
 800c750:	609a      	str	r2, [r3, #8]
      break;
 800c752:	e019      	b.n	800c788 <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800c754:	693b      	ldr	r3, [r7, #16]
 800c756:	3308      	adds	r3, #8
 800c758:	2201      	movs	r2, #1
 800c75a:	4619      	mov	r1, r3
 800c75c:	6878      	ldr	r0, [r7, #4]
 800c75e:	f001 facc 	bl	800dcfa <USBD_CtlSendData>
      break;
 800c762:	e011      	b.n	800c788 <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_SET_REPORT:
      hhid->IsReportAvailable = 1U;
 800c764:	693b      	ldr	r3, [r7, #16]
 800c766:	2201      	movs	r2, #1
 800c768:	611a      	str	r2, [r3, #16]
      (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 800c76a:	6939      	ldr	r1, [r7, #16]
 800c76c:	683b      	ldr	r3, [r7, #0]
 800c76e:	88db      	ldrh	r3, [r3, #6]
 800c770:	461a      	mov	r2, r3
 800c772:	6878      	ldr	r0, [r7, #4]
 800c774:	f001 faed 	bl	800dd52 <USBD_CtlPrepareRx>
      break;
 800c778:	e006      	b.n	800c788 <USBD_CUSTOM_HID_Setup+0xdc>

    default:
      USBD_CtlError(pdev, req);
 800c77a:	6839      	ldr	r1, [r7, #0]
 800c77c:	6878      	ldr	r0, [r7, #4]
 800c77e:	f001 fa4b 	bl	800dc18 <USBD_CtlError>
      ret = USBD_FAIL;
 800c782:	2303      	movs	r3, #3
 800c784:	75fb      	strb	r3, [r7, #23]
      break;
 800c786:	bf00      	nop
    }
    break;
 800c788:	e093      	b.n	800c8b2 <USBD_CUSTOM_HID_Setup+0x206>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	785b      	ldrb	r3, [r3, #1]
 800c78e:	2b0b      	cmp	r3, #11
 800c790:	d87f      	bhi.n	800c892 <USBD_CUSTOM_HID_Setup+0x1e6>
 800c792:	a201      	add	r2, pc, #4	@ (adr r2, 800c798 <USBD_CUSTOM_HID_Setup+0xec>)
 800c794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c798:	0800c7c9 	.word	0x0800c7c9
 800c79c:	0800c8a1 	.word	0x0800c8a1
 800c7a0:	0800c893 	.word	0x0800c893
 800c7a4:	0800c893 	.word	0x0800c893
 800c7a8:	0800c893 	.word	0x0800c893
 800c7ac:	0800c893 	.word	0x0800c893
 800c7b0:	0800c7f3 	.word	0x0800c7f3
 800c7b4:	0800c893 	.word	0x0800c893
 800c7b8:	0800c893 	.word	0x0800c893
 800c7bc:	0800c893 	.word	0x0800c893
 800c7c0:	0800c841 	.word	0x0800c841
 800c7c4:	0800c86b 	.word	0x0800c86b
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c7ce:	b2db      	uxtb	r3, r3
 800c7d0:	2b03      	cmp	r3, #3
 800c7d2:	d107      	bne.n	800c7e4 <USBD_CUSTOM_HID_Setup+0x138>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c7d4:	f107 030e 	add.w	r3, r7, #14
 800c7d8:	2202      	movs	r2, #2
 800c7da:	4619      	mov	r1, r3
 800c7dc:	6878      	ldr	r0, [r7, #4]
 800c7de:	f001 fa8c 	bl	800dcfa <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800c7e2:	e05e      	b.n	800c8a2 <USBD_CUSTOM_HID_Setup+0x1f6>
        USBD_CtlError(pdev, req);
 800c7e4:	6839      	ldr	r1, [r7, #0]
 800c7e6:	6878      	ldr	r0, [r7, #4]
 800c7e8:	f001 fa16 	bl	800dc18 <USBD_CtlError>
        ret = USBD_FAIL;
 800c7ec:	2303      	movs	r3, #3
 800c7ee:	75fb      	strb	r3, [r7, #23]
      break;
 800c7f0:	e057      	b.n	800c8a2 <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	885b      	ldrh	r3, [r3, #2]
 800c7f6:	0a1b      	lsrs	r3, r3, #8
 800c7f8:	b29b      	uxth	r3, r3
 800c7fa:	2b22      	cmp	r3, #34	@ 0x22
 800c7fc:	d10b      	bne.n	800c816 <USBD_CUSTOM_HID_Setup+0x16a>
      {
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	88db      	ldrh	r3, [r3, #6]
 800c802:	2b46      	cmp	r3, #70	@ 0x46
 800c804:	bf28      	it	cs
 800c806:	2346      	movcs	r3, #70	@ 0x46
 800c808:	83fb      	strh	r3, [r7, #30]
        pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->pReport;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	61bb      	str	r3, [r7, #24]
 800c814:	e00d      	b.n	800c832 <USBD_CUSTOM_HID_Setup+0x186>
      }
      else
      {
        if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	885b      	ldrh	r3, [r3, #2]
 800c81a:	0a1b      	lsrs	r3, r3, #8
 800c81c:	b29b      	uxth	r3, r3
 800c81e:	2b21      	cmp	r3, #33	@ 0x21
 800c820:	d107      	bne.n	800c832 <USBD_CUSTOM_HID_Setup+0x186>
        {
          pbuf = USBD_CUSTOM_HID_Desc;
 800c822:	4b26      	ldr	r3, [pc, #152]	@ (800c8bc <USBD_CUSTOM_HID_Setup+0x210>)
 800c824:	61bb      	str	r3, [r7, #24]
          len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	88db      	ldrh	r3, [r3, #6]
 800c82a:	2b09      	cmp	r3, #9
 800c82c:	bf28      	it	cs
 800c82e:	2309      	movcs	r3, #9
 800c830:	83fb      	strh	r3, [r7, #30]
        }
      }

      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c832:	8bfb      	ldrh	r3, [r7, #30]
 800c834:	461a      	mov	r2, r3
 800c836:	69b9      	ldr	r1, [r7, #24]
 800c838:	6878      	ldr	r0, [r7, #4]
 800c83a:	f001 fa5e 	bl	800dcfa <USBD_CtlSendData>
      break;
 800c83e:	e030      	b.n	800c8a2 <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c846:	b2db      	uxtb	r3, r3
 800c848:	2b03      	cmp	r3, #3
 800c84a:	d107      	bne.n	800c85c <USBD_CUSTOM_HID_Setup+0x1b0>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800c84c:	693b      	ldr	r3, [r7, #16]
 800c84e:	330c      	adds	r3, #12
 800c850:	2201      	movs	r2, #1
 800c852:	4619      	mov	r1, r3
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f001 fa50 	bl	800dcfa <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800c85a:	e022      	b.n	800c8a2 <USBD_CUSTOM_HID_Setup+0x1f6>
        USBD_CtlError(pdev, req);
 800c85c:	6839      	ldr	r1, [r7, #0]
 800c85e:	6878      	ldr	r0, [r7, #4]
 800c860:	f001 f9da 	bl	800dc18 <USBD_CtlError>
        ret = USBD_FAIL;
 800c864:	2303      	movs	r3, #3
 800c866:	75fb      	strb	r3, [r7, #23]
      break;
 800c868:	e01b      	b.n	800c8a2 <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c870:	b2db      	uxtb	r3, r3
 800c872:	2b03      	cmp	r3, #3
 800c874:	d106      	bne.n	800c884 <USBD_CUSTOM_HID_Setup+0x1d8>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 800c876:	683b      	ldr	r3, [r7, #0]
 800c878:	885b      	ldrh	r3, [r3, #2]
 800c87a:	b2db      	uxtb	r3, r3
 800c87c:	461a      	mov	r2, r3
 800c87e:	693b      	ldr	r3, [r7, #16]
 800c880:	60da      	str	r2, [r3, #12]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800c882:	e00e      	b.n	800c8a2 <USBD_CUSTOM_HID_Setup+0x1f6>
        USBD_CtlError(pdev, req);
 800c884:	6839      	ldr	r1, [r7, #0]
 800c886:	6878      	ldr	r0, [r7, #4]
 800c888:	f001 f9c6 	bl	800dc18 <USBD_CtlError>
        ret = USBD_FAIL;
 800c88c:	2303      	movs	r3, #3
 800c88e:	75fb      	strb	r3, [r7, #23]
      break;
 800c890:	e007      	b.n	800c8a2 <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800c892:	6839      	ldr	r1, [r7, #0]
 800c894:	6878      	ldr	r0, [r7, #4]
 800c896:	f001 f9bf 	bl	800dc18 <USBD_CtlError>
      ret = USBD_FAIL;
 800c89a:	2303      	movs	r3, #3
 800c89c:	75fb      	strb	r3, [r7, #23]
      break;
 800c89e:	e000      	b.n	800c8a2 <USBD_CUSTOM_HID_Setup+0x1f6>
      break;
 800c8a0:	bf00      	nop
    }
    break;
 800c8a2:	e006      	b.n	800c8b2 <USBD_CUSTOM_HID_Setup+0x206>

  default:
    USBD_CtlError(pdev, req);
 800c8a4:	6839      	ldr	r1, [r7, #0]
 800c8a6:	6878      	ldr	r0, [r7, #4]
 800c8a8:	f001 f9b6 	bl	800dc18 <USBD_CtlError>
    ret = USBD_FAIL;
 800c8ac:	2303      	movs	r3, #3
 800c8ae:	75fb      	strb	r3, [r7, #23]
    break;
 800c8b0:	bf00      	nop
  }
  return (uint8_t)ret;
 800c8b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	3720      	adds	r7, #32
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bd80      	pop	{r7, pc}
 800c8bc:	200002c4 	.word	0x200002c4

0800c8c0 <USBD_CUSTOM_HID_SendReport>:
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b086      	sub	sp, #24
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	60f8      	str	r0, [r7, #12]
 800c8c8:	60b9      	str	r1, [r7, #8]
 800c8ca:	4613      	mov	r3, r2
 800c8cc:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData_HID_Custom == NULL)
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d101      	bne.n	800c8dc <USBD_CUSTOM_HID_SendReport+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800c8d8:	2303      	movs	r3, #3
 800c8da:	e01b      	b.n	800c914 <USBD_CUSTOM_HID_SendReport+0x54>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c8e2:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c8ea:	b2db      	uxtb	r3, r3
 800c8ec:	2b03      	cmp	r3, #3
 800c8ee:	d110      	bne.n	800c912 <USBD_CUSTOM_HID_SendReport+0x52>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 800c8f0:	697b      	ldr	r3, [r7, #20]
 800c8f2:	7d1b      	ldrb	r3, [r3, #20]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d10a      	bne.n	800c90e <USBD_CUSTOM_HID_SendReport+0x4e>
    {
      hhid->state = CUSTOM_HID_BUSY;
 800c8f8:	697b      	ldr	r3, [r7, #20]
 800c8fa:	2201      	movs	r2, #1
 800c8fc:	751a      	strb	r2, [r3, #20]
      (void)USBD_LL_Transmit(pdev, CUSTOM_HID_IN_EP, report, len);
 800c8fe:	4b07      	ldr	r3, [pc, #28]	@ (800c91c <USBD_CUSTOM_HID_SendReport+0x5c>)
 800c900:	7819      	ldrb	r1, [r3, #0]
 800c902:	88fb      	ldrh	r3, [r7, #6]
 800c904:	68ba      	ldr	r2, [r7, #8]
 800c906:	68f8      	ldr	r0, [r7, #12]
 800c908:	f001 fcd7 	bl	800e2ba <USBD_LL_Transmit>
 800c90c:	e001      	b.n	800c912 <USBD_CUSTOM_HID_SendReport+0x52>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 800c90e:	2301      	movs	r3, #1
 800c910:	e000      	b.n	800c914 <USBD_CUSTOM_HID_SendReport+0x54>
    }
  }
  return (uint8_t)USBD_OK;
 800c912:	2300      	movs	r3, #0
}
 800c914:	4618      	mov	r0, r3
 800c916:	3718      	adds	r7, #24
 800c918:	46bd      	mov	sp, r7
 800c91a:	bd80      	pop	{r7, pc}
 800c91c:	20000202 	.word	0x20000202

0800c920 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 800c920:	b480      	push	{r7}
 800c922:	b083      	sub	sp, #12
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2229      	movs	r2, #41	@ 0x29
 800c92c:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgFSDesc;
 800c92e:	4b03      	ldr	r3, [pc, #12]	@ (800c93c <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 800c930:	4618      	mov	r0, r3
 800c932:	370c      	adds	r7, #12
 800c934:	46bd      	mov	sp, r7
 800c936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93a:	4770      	bx	lr
 800c93c:	20000240 	.word	0x20000240

0800c940 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 800c940:	b480      	push	{r7}
 800c942:	b083      	sub	sp, #12
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2229      	movs	r2, #41	@ 0x29
 800c94c:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgHSDesc;
 800c94e:	4b03      	ldr	r3, [pc, #12]	@ (800c95c <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 800c950:	4618      	mov	r0, r3
 800c952:	370c      	adds	r7, #12
 800c954:	46bd      	mov	sp, r7
 800c956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95a:	4770      	bx	lr
 800c95c:	2000026c 	.word	0x2000026c

0800c960 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c960:	b480      	push	{r7}
 800c962:	b083      	sub	sp, #12
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	2229      	movs	r2, #41	@ 0x29
 800c96c:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 800c96e:	4b03      	ldr	r3, [pc, #12]	@ (800c97c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800c970:	4618      	mov	r0, r3
 800c972:	370c      	adds	r7, #12
 800c974:	46bd      	mov	sp, r7
 800c976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97a:	4770      	bx	lr
 800c97c:	20000298 	.word	0x20000298

0800c980 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c980:	b480      	push	{r7}
 800c982:	b083      	sub	sp, #12
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
 800c988:	460b      	mov	r3, r1
 800c98a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom)->state = CUSTOM_HID_IDLE;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c992:	2200      	movs	r2, #0
 800c994:	751a      	strb	r2, [r3, #20]

  return (uint8_t)USBD_OK;
 800c996:	2300      	movs	r3, #0
}
 800c998:	4618      	mov	r0, r3
 800c99a:	370c      	adds	r7, #12
 800c99c:	46bd      	mov	sp, r7
 800c99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a2:	4770      	bx	lr

0800c9a4 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b084      	sub	sp, #16
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
 800c9ac:	460b      	mov	r3, r1
 800c9ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData_HID_Custom == NULL)
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d101      	bne.n	800c9be <USBD_CUSTOM_HID_DataOut+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800c9ba:	2303      	movs	r3, #3
 800c9bc:	e00e      	b.n	800c9dc <USBD_CUSTOM_HID_DataOut+0x38>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c9c4:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->OutEvent(hhid->Report_buf[0], hhid->Report_buf[1]);
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800c9cc:	68db      	ldr	r3, [r3, #12]
 800c9ce:	68fa      	ldr	r2, [r7, #12]
 800c9d0:	7810      	ldrb	r0, [r2, #0]
 800c9d2:	68fa      	ldr	r2, [r7, #12]
 800c9d4:	7852      	ldrb	r2, [r2, #1]
 800c9d6:	4611      	mov	r1, r2
 800c9d8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c9da:	2300      	movs	r3, #0
}
 800c9dc:	4618      	mov	r0, r3
 800c9de:	3710      	adds	r7, #16
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	bd80      	pop	{r7, pc}

0800c9e4 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b084      	sub	sp, #16
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c9f2:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d101      	bne.n	800c9fe <USBD_CUSTOM_HID_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800c9fa:	2303      	movs	r3, #3
 800c9fc:	e011      	b.n	800ca22 <USBD_CUSTOM_HID_EP0_RxReady+0x3e>
  }

  if (hhid->IsReportAvailable == 1U)
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	691b      	ldr	r3, [r3, #16]
 800ca02:	2b01      	cmp	r3, #1
 800ca04:	d10c      	bne.n	800ca20 <USBD_CUSTOM_HID_EP0_RxReady+0x3c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->OutEvent(hhid->Report_buf[0], hhid->Report_buf[1]);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800ca0c:	68db      	ldr	r3, [r3, #12]
 800ca0e:	68fa      	ldr	r2, [r7, #12]
 800ca10:	7810      	ldrb	r0, [r2, #0]
 800ca12:	68fa      	ldr	r2, [r7, #12]
 800ca14:	7852      	ldrb	r2, [r2, #1]
 800ca16:	4611      	mov	r1, r2
 800ca18:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	611a      	str	r2, [r3, #16]
  }

  return (uint8_t)USBD_OK;
 800ca20:	2300      	movs	r3, #0
}
 800ca22:	4618      	mov	r0, r3
 800ca24:	3710      	adds	r7, #16
 800ca26:	46bd      	mov	sp, r7
 800ca28:	bd80      	pop	{r7, pc}
	...

0800ca2c <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800ca2c:	b480      	push	{r7}
 800ca2e:	b083      	sub	sp, #12
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	220a      	movs	r2, #10
 800ca38:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800ca3a:	4b03      	ldr	r3, [pc, #12]	@ (800ca48 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	370c      	adds	r7, #12
 800ca40:	46bd      	mov	sp, r7
 800ca42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca46:	4770      	bx	lr
 800ca48:	200002d0 	.word	0x200002d0

0800ca4c <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800ca4c:	b480      	push	{r7}
 800ca4e:	b083      	sub	sp, #12
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
 800ca54:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d101      	bne.n	800ca60 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ca5c:	2303      	movs	r3, #3
 800ca5e:	e004      	b.n	800ca6a <USBD_CUSTOM_HID_RegisterInterface+0x1e>
  }

  pdev->pUserData_HID_Custom = fops;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	683a      	ldr	r2, [r7, #0]
 800ca64:	f8c3 22dc 	str.w	r2, [r3, #732]	@ 0x2dc

  return (uint8_t)USBD_OK;
 800ca68:	2300      	movs	r3, #0
}
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	370c      	adds	r7, #12
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca74:	4770      	bx	lr
	...

0800ca78 <USBD_Update_HID_Custom_DESC>:

void USBD_Update_HID_Custom_DESC(uint8_t *desc, uint8_t itf_no, uint8_t in_ep, uint8_t out_ep, uint8_t str_idx)
{
 800ca78:	b480      	push	{r7}
 800ca7a:	b083      	sub	sp, #12
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
 800ca80:	4608      	mov	r0, r1
 800ca82:	4611      	mov	r1, r2
 800ca84:	461a      	mov	r2, r3
 800ca86:	4603      	mov	r3, r0
 800ca88:	70fb      	strb	r3, [r7, #3]
 800ca8a:	460b      	mov	r3, r1
 800ca8c:	70bb      	strb	r3, [r7, #2]
 800ca8e:	4613      	mov	r3, r2
 800ca90:	707b      	strb	r3, [r7, #1]
  desc[11] = itf_no;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	330b      	adds	r3, #11
 800ca96:	78fa      	ldrb	r2, [r7, #3]
 800ca98:	701a      	strb	r2, [r3, #0]
  desc[17] = str_idx;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	3311      	adds	r3, #17
 800ca9e:	7c3a      	ldrb	r2, [r7, #16]
 800caa0:	701a      	strb	r2, [r3, #0]
  desc[29] = in_ep;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	331d      	adds	r3, #29
 800caa6:	78ba      	ldrb	r2, [r7, #2]
 800caa8:	701a      	strb	r2, [r3, #0]
  desc[36] = out_ep;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	3324      	adds	r3, #36	@ 0x24
 800caae:	787a      	ldrb	r2, [r7, #1]
 800cab0:	701a      	strb	r2, [r3, #0]

  CUSTOM_HID_IN_EP = in_ep;
 800cab2:	4a09      	ldr	r2, [pc, #36]	@ (800cad8 <USBD_Update_HID_Custom_DESC+0x60>)
 800cab4:	78bb      	ldrb	r3, [r7, #2]
 800cab6:	7013      	strb	r3, [r2, #0]
  CUSTOM_HID_OUT_EP = out_ep;
 800cab8:	4a08      	ldr	r2, [pc, #32]	@ (800cadc <USBD_Update_HID_Custom_DESC+0x64>)
 800caba:	787b      	ldrb	r3, [r7, #1]
 800cabc:	7013      	strb	r3, [r2, #0]
  CUSTOM_HID_ITF_NBR = itf_no;
 800cabe:	4a08      	ldr	r2, [pc, #32]	@ (800cae0 <USBD_Update_HID_Custom_DESC+0x68>)
 800cac0:	78fb      	ldrb	r3, [r7, #3]
 800cac2:	7013      	strb	r3, [r2, #0]
  CUSTOM_HID_STR_DESC_IDX = str_idx;
 800cac4:	4a07      	ldr	r2, [pc, #28]	@ (800cae4 <USBD_Update_HID_Custom_DESC+0x6c>)
 800cac6:	7c3b      	ldrb	r3, [r7, #16]
 800cac8:	7013      	strb	r3, [r2, #0]
}
 800caca:	bf00      	nop
 800cacc:	370c      	adds	r7, #12
 800cace:	46bd      	mov	sp, r7
 800cad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad4:	4770      	bx	lr
 800cad6:	bf00      	nop
 800cad8:	20000202 	.word	0x20000202
 800cadc:	20000203 	.word	0x20000203
 800cae0:	200019a0 	.word	0x200019a0
 800cae4:	200019a1 	.word	0x200019a1

0800cae8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b086      	sub	sp, #24
 800caec:	af00      	add	r7, sp, #0
 800caee:	60f8      	str	r0, [r7, #12]
 800caf0:	60b9      	str	r1, [r7, #8]
 800caf2:	4613      	mov	r3, r2
 800caf4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d101      	bne.n	800cb00 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800cafc:	2303      	movs	r3, #3
 800cafe:	e01b      	b.n	800cb38 <USBD_Init+0x50>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	2200      	movs	r2, #0
 800cb04:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pConfDesc = NULL;
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800cb10:	68bb      	ldr	r3, [r7, #8]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d003      	beq.n	800cb1e <USBD_Init+0x36>
  {
    pdev->pDesc = pdesc;
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	68ba      	ldr	r2, [r7, #8]
 800cb1a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	2201      	movs	r2, #1
 800cb22:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	79fa      	ldrb	r2, [r7, #7]
 800cb2a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800cb2c:	68f8      	ldr	r0, [r7, #12]
 800cb2e:	f001 fa7d 	bl	800e02c <USBD_LL_Init>
 800cb32:	4603      	mov	r3, r0
 800cb34:	75fb      	strb	r3, [r7, #23]

  return ret;
 800cb36:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb38:	4618      	mov	r0, r3
 800cb3a:	3718      	adds	r7, #24
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	bd80      	pop	{r7, pc}

0800cb40 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b084      	sub	sp, #16
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]
 800cb48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800cb4e:	683b      	ldr	r3, [r7, #0]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d101      	bne.n	800cb58 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800cb54:	2303      	movs	r3, #3
 800cb56:	e02d      	b.n	800cbb4 <USBD_RegisterClass+0x74>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	683a      	ldr	r2, [r7, #0]
 800cb5c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  /* Get Device Configuration Descriptor */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	7c1b      	ldrb	r3, [r3, #16]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d112      	bne.n	800cb8e <USBD_RegisterClass+0x4e>
  {
	  if (pdev->pClass->GetHSConfigDescriptor != NULL)
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cb6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d01e      	beq.n	800cbb2 <USBD_RegisterClass+0x72>
	  {
		  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cb7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb7c:	f107 020e 	add.w	r2, r7, #14
 800cb80:	4610      	mov	r0, r2
 800cb82:	4798      	blx	r3
 800cb84:	4602      	mov	r2, r0
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318
 800cb8c:	e011      	b.n	800cbb2 <USBD_RegisterClass+0x72>
	  }
  }
  else if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cb94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d00b      	beq.n	800cbb2 <USBD_RegisterClass+0x72>
  {
	  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cba2:	f107 020e 	add.w	r2, r7, #14
 800cba6:	4610      	mov	r0, r2
 800cba8:	4798      	blx	r3
 800cbaa:	4602      	mov	r2, r0
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318
  }

  return USBD_OK;
 800cbb2:	2300      	movs	r3, #0
}
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	3710      	adds	r7, #16
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd80      	pop	{r7, pc}

0800cbbc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b082      	sub	sp, #8
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800cbc4:	6878      	ldr	r0, [r7, #4]
 800cbc6:	f001 fa8f 	bl	800e0e8 <USBD_LL_Start>
 800cbca:	4603      	mov	r3, r0
}
 800cbcc:	4618      	mov	r0, r3
 800cbce:	3708      	adds	r7, #8
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	bd80      	pop	{r7, pc}

0800cbd4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800cbd4:	b480      	push	{r7}
 800cbd6:	b083      	sub	sp, #12
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cbdc:	2300      	movs	r3, #0
}
 800cbde:	4618      	mov	r0, r3
 800cbe0:	370c      	adds	r7, #12
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe8:	4770      	bx	lr

0800cbea <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cbea:	b580      	push	{r7, lr}
 800cbec:	b084      	sub	sp, #16
 800cbee:	af00      	add	r7, sp, #0
 800cbf0:	6078      	str	r0, [r7, #4]
 800cbf2:	460b      	mov	r3, r1
 800cbf4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800cbf6:	2303      	movs	r3, #3
 800cbf8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d009      	beq.n	800cc18 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	78fa      	ldrb	r2, [r7, #3]
 800cc0e:	4611      	mov	r1, r2
 800cc10:	6878      	ldr	r0, [r7, #4]
 800cc12:	4798      	blx	r3
 800cc14:	4603      	mov	r3, r0
 800cc16:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800cc18:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	3710      	adds	r7, #16
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	bd80      	pop	{r7, pc}

0800cc22 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cc22:	b580      	push	{r7, lr}
 800cc24:	b082      	sub	sp, #8
 800cc26:	af00      	add	r7, sp, #0
 800cc28:	6078      	str	r0, [r7, #4]
 800cc2a:	460b      	mov	r3, r1
 800cc2c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d007      	beq.n	800cc48 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cc3e:	685b      	ldr	r3, [r3, #4]
 800cc40:	78fa      	ldrb	r2, [r7, #3]
 800cc42:	4611      	mov	r1, r2
 800cc44:	6878      	ldr	r0, [r7, #4]
 800cc46:	4798      	blx	r3
  }

  return USBD_OK;
 800cc48:	2300      	movs	r3, #0
}
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	3708      	adds	r7, #8
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bd80      	pop	{r7, pc}

0800cc52 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800cc52:	b580      	push	{r7, lr}
 800cc54:	b084      	sub	sp, #16
 800cc56:	af00      	add	r7, sp, #0
 800cc58:	6078      	str	r0, [r7, #4]
 800cc5a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800cc62:	6839      	ldr	r1, [r7, #0]
 800cc64:	4618      	mov	r0, r3
 800cc66:	f000 ff9d 	bl	800dba4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	2201      	movs	r2, #1
 800cc6e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800cc78:	461a      	mov	r2, r3
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800cc86:	f003 031f 	and.w	r3, r3, #31
 800cc8a:	2b02      	cmp	r3, #2
 800cc8c:	d01a      	beq.n	800ccc4 <USBD_LL_SetupStage+0x72>
 800cc8e:	2b02      	cmp	r3, #2
 800cc90:	d822      	bhi.n	800ccd8 <USBD_LL_SetupStage+0x86>
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d002      	beq.n	800cc9c <USBD_LL_SetupStage+0x4a>
 800cc96:	2b01      	cmp	r3, #1
 800cc98:	d00a      	beq.n	800ccb0 <USBD_LL_SetupStage+0x5e>
 800cc9a:	e01d      	b.n	800ccd8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800cca2:	4619      	mov	r1, r3
 800cca4:	6878      	ldr	r0, [r7, #4]
 800cca6:	f000 fa5d 	bl	800d164 <USBD_StdDevReq>
 800ccaa:	4603      	mov	r3, r0
 800ccac:	73fb      	strb	r3, [r7, #15]
      break;
 800ccae:	e020      	b.n	800ccf2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ccb6:	4619      	mov	r1, r3
 800ccb8:	6878      	ldr	r0, [r7, #4]
 800ccba:	f000 fac1 	bl	800d240 <USBD_StdItfReq>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	73fb      	strb	r3, [r7, #15]
      break;
 800ccc2:	e016      	b.n	800ccf2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ccca:	4619      	mov	r1, r3
 800cccc:	6878      	ldr	r0, [r7, #4]
 800ccce:	f000 fb00 	bl	800d2d2 <USBD_StdEPReq>
 800ccd2:	4603      	mov	r3, r0
 800ccd4:	73fb      	strb	r3, [r7, #15]
      break;
 800ccd6:	e00c      	b.n	800ccf2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ccde:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800cce2:	b2db      	uxtb	r3, r3
 800cce4:	4619      	mov	r1, r3
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	f001 fa5e 	bl	800e1a8 <USBD_LL_StallEP>
 800ccec:	4603      	mov	r3, r0
 800ccee:	73fb      	strb	r3, [r7, #15]
      break;
 800ccf0:	bf00      	nop
  }

  return ret;
 800ccf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	3710      	adds	r7, #16
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	bd80      	pop	{r7, pc}

0800ccfc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b086      	sub	sp, #24
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	60f8      	str	r0, [r7, #12]
 800cd04:	460b      	mov	r3, r1
 800cd06:	607a      	str	r2, [r7, #4]
 800cd08:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800cd0a:	7afb      	ldrb	r3, [r7, #11]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d138      	bne.n	800cd82 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800cd16:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800cd1e:	2b03      	cmp	r3, #3
 800cd20:	d14a      	bne.n	800cdb8 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800cd22:	693b      	ldr	r3, [r7, #16]
 800cd24:	689a      	ldr	r2, [r3, #8]
 800cd26:	693b      	ldr	r3, [r7, #16]
 800cd28:	68db      	ldr	r3, [r3, #12]
 800cd2a:	429a      	cmp	r2, r3
 800cd2c:	d913      	bls.n	800cd56 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800cd2e:	693b      	ldr	r3, [r7, #16]
 800cd30:	689a      	ldr	r2, [r3, #8]
 800cd32:	693b      	ldr	r3, [r7, #16]
 800cd34:	68db      	ldr	r3, [r3, #12]
 800cd36:	1ad2      	subs	r2, r2, r3
 800cd38:	693b      	ldr	r3, [r7, #16]
 800cd3a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800cd3c:	693b      	ldr	r3, [r7, #16]
 800cd3e:	68da      	ldr	r2, [r3, #12]
 800cd40:	693b      	ldr	r3, [r7, #16]
 800cd42:	689b      	ldr	r3, [r3, #8]
 800cd44:	4293      	cmp	r3, r2
 800cd46:	bf28      	it	cs
 800cd48:	4613      	movcs	r3, r2
 800cd4a:	461a      	mov	r2, r3
 800cd4c:	6879      	ldr	r1, [r7, #4]
 800cd4e:	68f8      	ldr	r0, [r7, #12]
 800cd50:	f001 f81c 	bl	800dd8c <USBD_CtlContinueRx>
 800cd54:	e030      	b.n	800cdb8 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd5c:	b2db      	uxtb	r3, r3
 800cd5e:	2b03      	cmp	r3, #3
 800cd60:	d10b      	bne.n	800cd7a <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd68:	691b      	ldr	r3, [r3, #16]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d005      	beq.n	800cd7a <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd74:	691b      	ldr	r3, [r3, #16]
 800cd76:	68f8      	ldr	r0, [r7, #12]
 800cd78:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800cd7a:	68f8      	ldr	r0, [r7, #12]
 800cd7c:	f001 f817 	bl	800ddae <USBD_CtlSendStatus>
 800cd80:	e01a      	b.n	800cdb8 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd88:	b2db      	uxtb	r3, r3
 800cd8a:	2b03      	cmp	r3, #3
 800cd8c:	d114      	bne.n	800cdb8 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd94:	699b      	ldr	r3, [r3, #24]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d00e      	beq.n	800cdb8 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cda0:	699b      	ldr	r3, [r3, #24]
 800cda2:	7afa      	ldrb	r2, [r7, #11]
 800cda4:	4611      	mov	r1, r2
 800cda6:	68f8      	ldr	r0, [r7, #12]
 800cda8:	4798      	blx	r3
 800cdaa:	4603      	mov	r3, r0
 800cdac:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800cdae:	7dfb      	ldrb	r3, [r7, #23]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d001      	beq.n	800cdb8 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800cdb4:	7dfb      	ldrb	r3, [r7, #23]
 800cdb6:	e000      	b.n	800cdba <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800cdb8:	2300      	movs	r3, #0
}
 800cdba:	4618      	mov	r0, r3
 800cdbc:	3718      	adds	r7, #24
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	bd80      	pop	{r7, pc}

0800cdc2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800cdc2:	b580      	push	{r7, lr}
 800cdc4:	b086      	sub	sp, #24
 800cdc6:	af00      	add	r7, sp, #0
 800cdc8:	60f8      	str	r0, [r7, #12]
 800cdca:	460b      	mov	r3, r1
 800cdcc:	607a      	str	r2, [r7, #4]
 800cdce:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800cdd0:	7afb      	ldrb	r3, [r7, #11]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d16b      	bne.n	800ceae <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	3314      	adds	r3, #20
 800cdda:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800cde2:	2b02      	cmp	r3, #2
 800cde4:	d156      	bne.n	800ce94 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800cde6:	693b      	ldr	r3, [r7, #16]
 800cde8:	689a      	ldr	r2, [r3, #8]
 800cdea:	693b      	ldr	r3, [r7, #16]
 800cdec:	68db      	ldr	r3, [r3, #12]
 800cdee:	429a      	cmp	r2, r3
 800cdf0:	d914      	bls.n	800ce1c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800cdf2:	693b      	ldr	r3, [r7, #16]
 800cdf4:	689a      	ldr	r2, [r3, #8]
 800cdf6:	693b      	ldr	r3, [r7, #16]
 800cdf8:	68db      	ldr	r3, [r3, #12]
 800cdfa:	1ad2      	subs	r2, r2, r3
 800cdfc:	693b      	ldr	r3, [r7, #16]
 800cdfe:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ce00:	693b      	ldr	r3, [r7, #16]
 800ce02:	689b      	ldr	r3, [r3, #8]
 800ce04:	461a      	mov	r2, r3
 800ce06:	6879      	ldr	r1, [r7, #4]
 800ce08:	68f8      	ldr	r0, [r7, #12]
 800ce0a:	f000 ff91 	bl	800dd30 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ce0e:	2300      	movs	r3, #0
 800ce10:	2200      	movs	r2, #0
 800ce12:	2100      	movs	r1, #0
 800ce14:	68f8      	ldr	r0, [r7, #12]
 800ce16:	f001 fa71 	bl	800e2fc <USBD_LL_PrepareReceive>
 800ce1a:	e03b      	b.n	800ce94 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ce1c:	693b      	ldr	r3, [r7, #16]
 800ce1e:	68da      	ldr	r2, [r3, #12]
 800ce20:	693b      	ldr	r3, [r7, #16]
 800ce22:	689b      	ldr	r3, [r3, #8]
 800ce24:	429a      	cmp	r2, r3
 800ce26:	d11c      	bne.n	800ce62 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ce28:	693b      	ldr	r3, [r7, #16]
 800ce2a:	685a      	ldr	r2, [r3, #4]
 800ce2c:	693b      	ldr	r3, [r7, #16]
 800ce2e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ce30:	429a      	cmp	r2, r3
 800ce32:	d316      	bcc.n	800ce62 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ce34:	693b      	ldr	r3, [r7, #16]
 800ce36:	685a      	ldr	r2, [r3, #4]
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ce3e:	429a      	cmp	r2, r3
 800ce40:	d20f      	bcs.n	800ce62 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ce42:	2200      	movs	r2, #0
 800ce44:	2100      	movs	r1, #0
 800ce46:	68f8      	ldr	r0, [r7, #12]
 800ce48:	f000 ff72 	bl	800dd30 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	2200      	movs	r2, #0
 800ce50:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ce54:	2300      	movs	r3, #0
 800ce56:	2200      	movs	r2, #0
 800ce58:	2100      	movs	r1, #0
 800ce5a:	68f8      	ldr	r0, [r7, #12]
 800ce5c:	f001 fa4e 	bl	800e2fc <USBD_LL_PrepareReceive>
 800ce60:	e018      	b.n	800ce94 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce68:	b2db      	uxtb	r3, r3
 800ce6a:	2b03      	cmp	r3, #3
 800ce6c:	d10b      	bne.n	800ce86 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ce74:	68db      	ldr	r3, [r3, #12]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d005      	beq.n	800ce86 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ce80:	68db      	ldr	r3, [r3, #12]
 800ce82:	68f8      	ldr	r0, [r7, #12]
 800ce84:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ce86:	2180      	movs	r1, #128	@ 0x80
 800ce88:	68f8      	ldr	r0, [r7, #12]
 800ce8a:	f001 f98d 	bl	800e1a8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ce8e:	68f8      	ldr	r0, [r7, #12]
 800ce90:	f000 ffa0 	bl	800ddd4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800ce9a:	2b01      	cmp	r3, #1
 800ce9c:	d122      	bne.n	800cee4 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ce9e:	68f8      	ldr	r0, [r7, #12]
 800cea0:	f7ff fe98 	bl	800cbd4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	2200      	movs	r2, #0
 800cea8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800ceac:	e01a      	b.n	800cee4 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ceb4:	b2db      	uxtb	r3, r3
 800ceb6:	2b03      	cmp	r3, #3
 800ceb8:	d114      	bne.n	800cee4 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cec0:	695b      	ldr	r3, [r3, #20]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d00e      	beq.n	800cee4 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cecc:	695b      	ldr	r3, [r3, #20]
 800cece:	7afa      	ldrb	r2, [r7, #11]
 800ced0:	4611      	mov	r1, r2
 800ced2:	68f8      	ldr	r0, [r7, #12]
 800ced4:	4798      	blx	r3
 800ced6:	4603      	mov	r3, r0
 800ced8:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ceda:	7dfb      	ldrb	r3, [r7, #23]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d001      	beq.n	800cee4 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800cee0:	7dfb      	ldrb	r3, [r7, #23]
 800cee2:	e000      	b.n	800cee6 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800cee4:	2300      	movs	r3, #0
}
 800cee6:	4618      	mov	r0, r3
 800cee8:	3718      	adds	r7, #24
 800ceea:	46bd      	mov	sp, r7
 800ceec:	bd80      	pop	{r7, pc}

0800ceee <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ceee:	b580      	push	{r7, lr}
 800cef0:	b082      	sub	sp, #8
 800cef2:	af00      	add	r7, sp, #0
 800cef4:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	2201      	movs	r2, #1
 800cefa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	2200      	movs	r2, #0
 800cf02:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	2200      	movs	r2, #0
 800cf0a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	2200      	movs	r2, #0
 800cf10:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d101      	bne.n	800cf22 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800cf1e:	2303      	movs	r3, #3
 800cf20:	e02a      	b.n	800cf78 <USBD_LL_Reset+0x8a>
  }

	if (pdev->pClass->DeInit != NULL)
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cf28:	685b      	ldr	r3, [r3, #4]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d009      	beq.n	800cf42 <USBD_LL_Reset+0x54>
	{
	  (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cf34:	685b      	ldr	r3, [r3, #4]
 800cf36:	687a      	ldr	r2, [r7, #4]
 800cf38:	6852      	ldr	r2, [r2, #4]
 800cf3a:	b2d2      	uxtb	r2, r2
 800cf3c:	4611      	mov	r1, r2
 800cf3e:	6878      	ldr	r0, [r7, #4]
 800cf40:	4798      	blx	r3
	}

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cf42:	2340      	movs	r3, #64	@ 0x40
 800cf44:	2200      	movs	r2, #0
 800cf46:	2100      	movs	r1, #0
 800cf48:	6878      	ldr	r0, [r7, #4]
 800cf4a:	f001 f8e8 	bl	800e11e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	2201      	movs	r2, #1
 800cf52:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	2240      	movs	r2, #64	@ 0x40
 800cf5a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cf5e:	2340      	movs	r3, #64	@ 0x40
 800cf60:	2200      	movs	r2, #0
 800cf62:	2180      	movs	r1, #128	@ 0x80
 800cf64:	6878      	ldr	r0, [r7, #4]
 800cf66:	f001 f8da 	bl	800e11e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	2201      	movs	r2, #1
 800cf6e:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2240      	movs	r2, #64	@ 0x40
 800cf74:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800cf76:	2300      	movs	r3, #0
}
 800cf78:	4618      	mov	r0, r3
 800cf7a:	3708      	adds	r7, #8
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}

0800cf80 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800cf80:	b480      	push	{r7}
 800cf82:	b083      	sub	sp, #12
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
 800cf88:	460b      	mov	r3, r1
 800cf8a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	78fa      	ldrb	r2, [r7, #3]
 800cf90:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800cf92:	2300      	movs	r3, #0
}
 800cf94:	4618      	mov	r0, r3
 800cf96:	370c      	adds	r7, #12
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9e:	4770      	bx	lr

0800cfa0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800cfa0:	b480      	push	{r7}
 800cfa2:	b083      	sub	sp, #12
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cfae:	b2da      	uxtb	r2, r3
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	2204      	movs	r2, #4
 800cfba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800cfbe:	2300      	movs	r3, #0
}
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	370c      	adds	r7, #12
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfca:	4770      	bx	lr

0800cfcc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800cfcc:	b480      	push	{r7}
 800cfce:	b083      	sub	sp, #12
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cfda:	b2db      	uxtb	r3, r3
 800cfdc:	2b04      	cmp	r3, #4
 800cfde:	d106      	bne.n	800cfee <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800cfe6:	b2da      	uxtb	r2, r3
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800cfee:	2300      	movs	r3, #0
}
 800cff0:	4618      	mov	r0, r3
 800cff2:	370c      	adds	r7, #12
 800cff4:	46bd      	mov	sp, r7
 800cff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffa:	4770      	bx	lr

0800cffc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b082      	sub	sp, #8
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d101      	bne.n	800d012 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800d00e:	2303      	movs	r3, #3
 800d010:	e012      	b.n	800d038 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d018:	b2db      	uxtb	r3, r3
 800d01a:	2b03      	cmp	r3, #3
 800d01c:	d10b      	bne.n	800d036 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d024:	69db      	ldr	r3, [r3, #28]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d005      	beq.n	800d036 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d030:	69db      	ldr	r3, [r3, #28]
 800d032:	6878      	ldr	r0, [r7, #4]
 800d034:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d036:	2300      	movs	r3, #0
}
 800d038:	4618      	mov	r0, r3
 800d03a:	3708      	adds	r7, #8
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bd80      	pop	{r7, pc}

0800d040 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b082      	sub	sp, #8
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
 800d048:	460b      	mov	r3, r1
 800d04a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d052:	2b00      	cmp	r3, #0
 800d054:	d101      	bne.n	800d05a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800d056:	2303      	movs	r3, #3
 800d058:	e014      	b.n	800d084 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d060:	b2db      	uxtb	r3, r3
 800d062:	2b03      	cmp	r3, #3
 800d064:	d10d      	bne.n	800d082 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d06c:	6a1b      	ldr	r3, [r3, #32]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d007      	beq.n	800d082 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d078:	6a1b      	ldr	r3, [r3, #32]
 800d07a:	78fa      	ldrb	r2, [r7, #3]
 800d07c:	4611      	mov	r1, r2
 800d07e:	6878      	ldr	r0, [r7, #4]
 800d080:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d082:	2300      	movs	r3, #0
}
 800d084:	4618      	mov	r0, r3
 800d086:	3708      	adds	r7, #8
 800d088:	46bd      	mov	sp, r7
 800d08a:	bd80      	pop	{r7, pc}

0800d08c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b082      	sub	sp, #8
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
 800d094:	460b      	mov	r3, r1
 800d096:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d101      	bne.n	800d0a6 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800d0a2:	2303      	movs	r3, #3
 800d0a4:	e014      	b.n	800d0d0 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d0ac:	b2db      	uxtb	r3, r3
 800d0ae:	2b03      	cmp	r3, #3
 800d0b0:	d10d      	bne.n	800d0ce <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d0b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d007      	beq.n	800d0ce <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d0c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0c6:	78fa      	ldrb	r2, [r7, #3]
 800d0c8:	4611      	mov	r1, r2
 800d0ca:	6878      	ldr	r0, [r7, #4]
 800d0cc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d0ce:	2300      	movs	r3, #0
}
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	3708      	adds	r7, #8
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	bd80      	pop	{r7, pc}

0800d0d8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d0d8:	b480      	push	{r7}
 800d0da:	b083      	sub	sp, #12
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d0e0:	2300      	movs	r3, #0
}
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	370c      	adds	r7, #12
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ec:	4770      	bx	lr

0800d0ee <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d0ee:	b580      	push	{r7, lr}
 800d0f0:	b082      	sub	sp, #8
 800d0f2:	af00      	add	r7, sp, #0
 800d0f4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	2201      	movs	r2, #1
 800d0fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  if (pdev->pClass != NULL)
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d104:	2b00      	cmp	r3, #0
 800d106:	d009      	beq.n	800d11c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d10e:	685b      	ldr	r3, [r3, #4]
 800d110:	687a      	ldr	r2, [r7, #4]
 800d112:	6852      	ldr	r2, [r2, #4]
 800d114:	b2d2      	uxtb	r2, r2
 800d116:	4611      	mov	r1, r2
 800d118:	6878      	ldr	r0, [r7, #4]
 800d11a:	4798      	blx	r3
  }

  return USBD_OK;
 800d11c:	2300      	movs	r3, #0
}
 800d11e:	4618      	mov	r0, r3
 800d120:	3708      	adds	r7, #8
 800d122:	46bd      	mov	sp, r7
 800d124:	bd80      	pop	{r7, pc}

0800d126 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d126:	b480      	push	{r7}
 800d128:	b087      	sub	sp, #28
 800d12a:	af00      	add	r7, sp, #0
 800d12c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d132:	697b      	ldr	r3, [r7, #20]
 800d134:	781b      	ldrb	r3, [r3, #0]
 800d136:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d138:	697b      	ldr	r3, [r7, #20]
 800d13a:	3301      	adds	r3, #1
 800d13c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d13e:	697b      	ldr	r3, [r7, #20]
 800d140:	781b      	ldrb	r3, [r3, #0]
 800d142:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d144:	8a3b      	ldrh	r3, [r7, #16]
 800d146:	021b      	lsls	r3, r3, #8
 800d148:	b21a      	sxth	r2, r3
 800d14a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d14e:	4313      	orrs	r3, r2
 800d150:	b21b      	sxth	r3, r3
 800d152:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d154:	89fb      	ldrh	r3, [r7, #14]
}
 800d156:	4618      	mov	r0, r3
 800d158:	371c      	adds	r7, #28
 800d15a:	46bd      	mov	sp, r7
 800d15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d160:	4770      	bx	lr
	...

0800d164 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d164:	b580      	push	{r7, lr}
 800d166:	b084      	sub	sp, #16
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
 800d16c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d16e:	2300      	movs	r3, #0
 800d170:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	781b      	ldrb	r3, [r3, #0]
 800d176:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d17a:	2b40      	cmp	r3, #64	@ 0x40
 800d17c:	d005      	beq.n	800d18a <USBD_StdDevReq+0x26>
 800d17e:	2b40      	cmp	r3, #64	@ 0x40
 800d180:	d853      	bhi.n	800d22a <USBD_StdDevReq+0xc6>
 800d182:	2b00      	cmp	r3, #0
 800d184:	d00b      	beq.n	800d19e <USBD_StdDevReq+0x3a>
 800d186:	2b20      	cmp	r3, #32
 800d188:	d14f      	bne.n	800d22a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d190:	689b      	ldr	r3, [r3, #8]
 800d192:	6839      	ldr	r1, [r7, #0]
 800d194:	6878      	ldr	r0, [r7, #4]
 800d196:	4798      	blx	r3
 800d198:	4603      	mov	r3, r0
 800d19a:	73fb      	strb	r3, [r7, #15]
      break;
 800d19c:	e04a      	b.n	800d234 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d19e:	683b      	ldr	r3, [r7, #0]
 800d1a0:	785b      	ldrb	r3, [r3, #1]
 800d1a2:	2b09      	cmp	r3, #9
 800d1a4:	d83b      	bhi.n	800d21e <USBD_StdDevReq+0xba>
 800d1a6:	a201      	add	r2, pc, #4	@ (adr r2, 800d1ac <USBD_StdDevReq+0x48>)
 800d1a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1ac:	0800d201 	.word	0x0800d201
 800d1b0:	0800d215 	.word	0x0800d215
 800d1b4:	0800d21f 	.word	0x0800d21f
 800d1b8:	0800d20b 	.word	0x0800d20b
 800d1bc:	0800d21f 	.word	0x0800d21f
 800d1c0:	0800d1df 	.word	0x0800d1df
 800d1c4:	0800d1d5 	.word	0x0800d1d5
 800d1c8:	0800d21f 	.word	0x0800d21f
 800d1cc:	0800d1f7 	.word	0x0800d1f7
 800d1d0:	0800d1e9 	.word	0x0800d1e9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d1d4:	6839      	ldr	r1, [r7, #0]
 800d1d6:	6878      	ldr	r0, [r7, #4]
 800d1d8:	f000 f9de 	bl	800d598 <USBD_GetDescriptor>
          break;
 800d1dc:	e024      	b.n	800d228 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d1de:	6839      	ldr	r1, [r7, #0]
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f000 fb55 	bl	800d890 <USBD_SetAddress>
          break;
 800d1e6:	e01f      	b.n	800d228 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d1e8:	6839      	ldr	r1, [r7, #0]
 800d1ea:	6878      	ldr	r0, [r7, #4]
 800d1ec:	f000 fb94 	bl	800d918 <USBD_SetConfig>
 800d1f0:	4603      	mov	r3, r0
 800d1f2:	73fb      	strb	r3, [r7, #15]
          break;
 800d1f4:	e018      	b.n	800d228 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d1f6:	6839      	ldr	r1, [r7, #0]
 800d1f8:	6878      	ldr	r0, [r7, #4]
 800d1fa:	f000 fc33 	bl	800da64 <USBD_GetConfig>
          break;
 800d1fe:	e013      	b.n	800d228 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d200:	6839      	ldr	r1, [r7, #0]
 800d202:	6878      	ldr	r0, [r7, #4]
 800d204:	f000 fc64 	bl	800dad0 <USBD_GetStatus>
          break;
 800d208:	e00e      	b.n	800d228 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d20a:	6839      	ldr	r1, [r7, #0]
 800d20c:	6878      	ldr	r0, [r7, #4]
 800d20e:	f000 fc93 	bl	800db38 <USBD_SetFeature>
          break;
 800d212:	e009      	b.n	800d228 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d214:	6839      	ldr	r1, [r7, #0]
 800d216:	6878      	ldr	r0, [r7, #4]
 800d218:	f000 fca2 	bl	800db60 <USBD_ClrFeature>
          break;
 800d21c:	e004      	b.n	800d228 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800d21e:	6839      	ldr	r1, [r7, #0]
 800d220:	6878      	ldr	r0, [r7, #4]
 800d222:	f000 fcf9 	bl	800dc18 <USBD_CtlError>
          break;
 800d226:	bf00      	nop
      }
      break;
 800d228:	e004      	b.n	800d234 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800d22a:	6839      	ldr	r1, [r7, #0]
 800d22c:	6878      	ldr	r0, [r7, #4]
 800d22e:	f000 fcf3 	bl	800dc18 <USBD_CtlError>
      break;
 800d232:	bf00      	nop
  }

  return ret;
 800d234:	7bfb      	ldrb	r3, [r7, #15]
}
 800d236:	4618      	mov	r0, r3
 800d238:	3710      	adds	r7, #16
 800d23a:	46bd      	mov	sp, r7
 800d23c:	bd80      	pop	{r7, pc}
 800d23e:	bf00      	nop

0800d240 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b084      	sub	sp, #16
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
 800d248:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d24a:	2300      	movs	r3, #0
 800d24c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d24e:	683b      	ldr	r3, [r7, #0]
 800d250:	781b      	ldrb	r3, [r3, #0]
 800d252:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d256:	2b40      	cmp	r3, #64	@ 0x40
 800d258:	d005      	beq.n	800d266 <USBD_StdItfReq+0x26>
 800d25a:	2b40      	cmp	r3, #64	@ 0x40
 800d25c:	d82f      	bhi.n	800d2be <USBD_StdItfReq+0x7e>
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d001      	beq.n	800d266 <USBD_StdItfReq+0x26>
 800d262:	2b20      	cmp	r3, #32
 800d264:	d12b      	bne.n	800d2be <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d26c:	b2db      	uxtb	r3, r3
 800d26e:	3b01      	subs	r3, #1
 800d270:	2b02      	cmp	r3, #2
 800d272:	d81d      	bhi.n	800d2b0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d274:	683b      	ldr	r3, [r7, #0]
 800d276:	889b      	ldrh	r3, [r3, #4]
 800d278:	b2db      	uxtb	r3, r3
 800d27a:	2b0f      	cmp	r3, #15
 800d27c:	d813      	bhi.n	800d2a6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d284:	689b      	ldr	r3, [r3, #8]
 800d286:	6839      	ldr	r1, [r7, #0]
 800d288:	6878      	ldr	r0, [r7, #4]
 800d28a:	4798      	blx	r3
 800d28c:	4603      	mov	r3, r0
 800d28e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	88db      	ldrh	r3, [r3, #6]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d110      	bne.n	800d2ba <USBD_StdItfReq+0x7a>
 800d298:	7bfb      	ldrb	r3, [r7, #15]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d10d      	bne.n	800d2ba <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d29e:	6878      	ldr	r0, [r7, #4]
 800d2a0:	f000 fd85 	bl	800ddae <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d2a4:	e009      	b.n	800d2ba <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800d2a6:	6839      	ldr	r1, [r7, #0]
 800d2a8:	6878      	ldr	r0, [r7, #4]
 800d2aa:	f000 fcb5 	bl	800dc18 <USBD_CtlError>
          break;
 800d2ae:	e004      	b.n	800d2ba <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800d2b0:	6839      	ldr	r1, [r7, #0]
 800d2b2:	6878      	ldr	r0, [r7, #4]
 800d2b4:	f000 fcb0 	bl	800dc18 <USBD_CtlError>
          break;
 800d2b8:	e000      	b.n	800d2bc <USBD_StdItfReq+0x7c>
          break;
 800d2ba:	bf00      	nop
      }
      break;
 800d2bc:	e004      	b.n	800d2c8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800d2be:	6839      	ldr	r1, [r7, #0]
 800d2c0:	6878      	ldr	r0, [r7, #4]
 800d2c2:	f000 fca9 	bl	800dc18 <USBD_CtlError>
      break;
 800d2c6:	bf00      	nop
  }

  return ret;
 800d2c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	3710      	adds	r7, #16
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	bd80      	pop	{r7, pc}

0800d2d2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2d2:	b580      	push	{r7, lr}
 800d2d4:	b084      	sub	sp, #16
 800d2d6:	af00      	add	r7, sp, #0
 800d2d8:	6078      	str	r0, [r7, #4]
 800d2da:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800d2dc:	2300      	movs	r3, #0
 800d2de:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	889b      	ldrh	r3, [r3, #4]
 800d2e4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	781b      	ldrb	r3, [r3, #0]
 800d2ea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d2ee:	2b40      	cmp	r3, #64	@ 0x40
 800d2f0:	d007      	beq.n	800d302 <USBD_StdEPReq+0x30>
 800d2f2:	2b40      	cmp	r3, #64	@ 0x40
 800d2f4:	f200 8145 	bhi.w	800d582 <USBD_StdEPReq+0x2b0>
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d00c      	beq.n	800d316 <USBD_StdEPReq+0x44>
 800d2fc:	2b20      	cmp	r3, #32
 800d2fe:	f040 8140 	bne.w	800d582 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d308:	689b      	ldr	r3, [r3, #8]
 800d30a:	6839      	ldr	r1, [r7, #0]
 800d30c:	6878      	ldr	r0, [r7, #4]
 800d30e:	4798      	blx	r3
 800d310:	4603      	mov	r3, r0
 800d312:	73fb      	strb	r3, [r7, #15]
      break;
 800d314:	e13a      	b.n	800d58c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d316:	683b      	ldr	r3, [r7, #0]
 800d318:	785b      	ldrb	r3, [r3, #1]
 800d31a:	2b03      	cmp	r3, #3
 800d31c:	d007      	beq.n	800d32e <USBD_StdEPReq+0x5c>
 800d31e:	2b03      	cmp	r3, #3
 800d320:	f300 8129 	bgt.w	800d576 <USBD_StdEPReq+0x2a4>
 800d324:	2b00      	cmp	r3, #0
 800d326:	d07f      	beq.n	800d428 <USBD_StdEPReq+0x156>
 800d328:	2b01      	cmp	r3, #1
 800d32a:	d03c      	beq.n	800d3a6 <USBD_StdEPReq+0xd4>
 800d32c:	e123      	b.n	800d576 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d334:	b2db      	uxtb	r3, r3
 800d336:	2b02      	cmp	r3, #2
 800d338:	d002      	beq.n	800d340 <USBD_StdEPReq+0x6e>
 800d33a:	2b03      	cmp	r3, #3
 800d33c:	d016      	beq.n	800d36c <USBD_StdEPReq+0x9a>
 800d33e:	e02c      	b.n	800d39a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d340:	7bbb      	ldrb	r3, [r7, #14]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d00d      	beq.n	800d362 <USBD_StdEPReq+0x90>
 800d346:	7bbb      	ldrb	r3, [r7, #14]
 800d348:	2b80      	cmp	r3, #128	@ 0x80
 800d34a:	d00a      	beq.n	800d362 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d34c:	7bbb      	ldrb	r3, [r7, #14]
 800d34e:	4619      	mov	r1, r3
 800d350:	6878      	ldr	r0, [r7, #4]
 800d352:	f000 ff29 	bl	800e1a8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d356:	2180      	movs	r1, #128	@ 0x80
 800d358:	6878      	ldr	r0, [r7, #4]
 800d35a:	f000 ff25 	bl	800e1a8 <USBD_LL_StallEP>
 800d35e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d360:	e020      	b.n	800d3a4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800d362:	6839      	ldr	r1, [r7, #0]
 800d364:	6878      	ldr	r0, [r7, #4]
 800d366:	f000 fc57 	bl	800dc18 <USBD_CtlError>
              break;
 800d36a:	e01b      	b.n	800d3a4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d36c:	683b      	ldr	r3, [r7, #0]
 800d36e:	885b      	ldrh	r3, [r3, #2]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d10e      	bne.n	800d392 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d374:	7bbb      	ldrb	r3, [r7, #14]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d00b      	beq.n	800d392 <USBD_StdEPReq+0xc0>
 800d37a:	7bbb      	ldrb	r3, [r7, #14]
 800d37c:	2b80      	cmp	r3, #128	@ 0x80
 800d37e:	d008      	beq.n	800d392 <USBD_StdEPReq+0xc0>
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	88db      	ldrh	r3, [r3, #6]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d104      	bne.n	800d392 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d388:	7bbb      	ldrb	r3, [r7, #14]
 800d38a:	4619      	mov	r1, r3
 800d38c:	6878      	ldr	r0, [r7, #4]
 800d38e:	f000 ff0b 	bl	800e1a8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d392:	6878      	ldr	r0, [r7, #4]
 800d394:	f000 fd0b 	bl	800ddae <USBD_CtlSendStatus>

              break;
 800d398:	e004      	b.n	800d3a4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800d39a:	6839      	ldr	r1, [r7, #0]
 800d39c:	6878      	ldr	r0, [r7, #4]
 800d39e:	f000 fc3b 	bl	800dc18 <USBD_CtlError>
              break;
 800d3a2:	bf00      	nop
          }
          break;
 800d3a4:	e0ec      	b.n	800d580 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d3ac:	b2db      	uxtb	r3, r3
 800d3ae:	2b02      	cmp	r3, #2
 800d3b0:	d002      	beq.n	800d3b8 <USBD_StdEPReq+0xe6>
 800d3b2:	2b03      	cmp	r3, #3
 800d3b4:	d016      	beq.n	800d3e4 <USBD_StdEPReq+0x112>
 800d3b6:	e030      	b.n	800d41a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d3b8:	7bbb      	ldrb	r3, [r7, #14]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d00d      	beq.n	800d3da <USBD_StdEPReq+0x108>
 800d3be:	7bbb      	ldrb	r3, [r7, #14]
 800d3c0:	2b80      	cmp	r3, #128	@ 0x80
 800d3c2:	d00a      	beq.n	800d3da <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d3c4:	7bbb      	ldrb	r3, [r7, #14]
 800d3c6:	4619      	mov	r1, r3
 800d3c8:	6878      	ldr	r0, [r7, #4]
 800d3ca:	f000 feed 	bl	800e1a8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d3ce:	2180      	movs	r1, #128	@ 0x80
 800d3d0:	6878      	ldr	r0, [r7, #4]
 800d3d2:	f000 fee9 	bl	800e1a8 <USBD_LL_StallEP>
 800d3d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d3d8:	e025      	b.n	800d426 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800d3da:	6839      	ldr	r1, [r7, #0]
 800d3dc:	6878      	ldr	r0, [r7, #4]
 800d3de:	f000 fc1b 	bl	800dc18 <USBD_CtlError>
              break;
 800d3e2:	e020      	b.n	800d426 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d3e4:	683b      	ldr	r3, [r7, #0]
 800d3e6:	885b      	ldrh	r3, [r3, #2]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d11b      	bne.n	800d424 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d3ec:	7bbb      	ldrb	r3, [r7, #14]
 800d3ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d004      	beq.n	800d400 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d3f6:	7bbb      	ldrb	r3, [r7, #14]
 800d3f8:	4619      	mov	r1, r3
 800d3fa:	6878      	ldr	r0, [r7, #4]
 800d3fc:	f000 fef3 	bl	800e1e6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d400:	6878      	ldr	r0, [r7, #4]
 800d402:	f000 fcd4 	bl	800ddae <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d40c:	689b      	ldr	r3, [r3, #8]
 800d40e:	6839      	ldr	r1, [r7, #0]
 800d410:	6878      	ldr	r0, [r7, #4]
 800d412:	4798      	blx	r3
 800d414:	4603      	mov	r3, r0
 800d416:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800d418:	e004      	b.n	800d424 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800d41a:	6839      	ldr	r1, [r7, #0]
 800d41c:	6878      	ldr	r0, [r7, #4]
 800d41e:	f000 fbfb 	bl	800dc18 <USBD_CtlError>
              break;
 800d422:	e000      	b.n	800d426 <USBD_StdEPReq+0x154>
              break;
 800d424:	bf00      	nop
          }
          break;
 800d426:	e0ab      	b.n	800d580 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d42e:	b2db      	uxtb	r3, r3
 800d430:	2b02      	cmp	r3, #2
 800d432:	d002      	beq.n	800d43a <USBD_StdEPReq+0x168>
 800d434:	2b03      	cmp	r3, #3
 800d436:	d032      	beq.n	800d49e <USBD_StdEPReq+0x1cc>
 800d438:	e097      	b.n	800d56a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d43a:	7bbb      	ldrb	r3, [r7, #14]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d007      	beq.n	800d450 <USBD_StdEPReq+0x17e>
 800d440:	7bbb      	ldrb	r3, [r7, #14]
 800d442:	2b80      	cmp	r3, #128	@ 0x80
 800d444:	d004      	beq.n	800d450 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800d446:	6839      	ldr	r1, [r7, #0]
 800d448:	6878      	ldr	r0, [r7, #4]
 800d44a:	f000 fbe5 	bl	800dc18 <USBD_CtlError>
                break;
 800d44e:	e091      	b.n	800d574 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d450:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d454:	2b00      	cmp	r3, #0
 800d456:	da0b      	bge.n	800d470 <USBD_StdEPReq+0x19e>
 800d458:	7bbb      	ldrb	r3, [r7, #14]
 800d45a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d45e:	4613      	mov	r3, r2
 800d460:	009b      	lsls	r3, r3, #2
 800d462:	4413      	add	r3, r2
 800d464:	009b      	lsls	r3, r3, #2
 800d466:	3310      	adds	r3, #16
 800d468:	687a      	ldr	r2, [r7, #4]
 800d46a:	4413      	add	r3, r2
 800d46c:	3304      	adds	r3, #4
 800d46e:	e00b      	b.n	800d488 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d470:	7bbb      	ldrb	r3, [r7, #14]
 800d472:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d476:	4613      	mov	r3, r2
 800d478:	009b      	lsls	r3, r3, #2
 800d47a:	4413      	add	r3, r2
 800d47c:	009b      	lsls	r3, r3, #2
 800d47e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d482:	687a      	ldr	r2, [r7, #4]
 800d484:	4413      	add	r3, r2
 800d486:	3304      	adds	r3, #4
 800d488:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d48a:	68bb      	ldr	r3, [r7, #8]
 800d48c:	2200      	movs	r2, #0
 800d48e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d490:	68bb      	ldr	r3, [r7, #8]
 800d492:	2202      	movs	r2, #2
 800d494:	4619      	mov	r1, r3
 800d496:	6878      	ldr	r0, [r7, #4]
 800d498:	f000 fc2f 	bl	800dcfa <USBD_CtlSendData>
              break;
 800d49c:	e06a      	b.n	800d574 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d49e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	da11      	bge.n	800d4ca <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d4a6:	7bbb      	ldrb	r3, [r7, #14]
 800d4a8:	f003 020f 	and.w	r2, r3, #15
 800d4ac:	6879      	ldr	r1, [r7, #4]
 800d4ae:	4613      	mov	r3, r2
 800d4b0:	009b      	lsls	r3, r3, #2
 800d4b2:	4413      	add	r3, r2
 800d4b4:	009b      	lsls	r3, r3, #2
 800d4b6:	440b      	add	r3, r1
 800d4b8:	3324      	adds	r3, #36	@ 0x24
 800d4ba:	881b      	ldrh	r3, [r3, #0]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d117      	bne.n	800d4f0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800d4c0:	6839      	ldr	r1, [r7, #0]
 800d4c2:	6878      	ldr	r0, [r7, #4]
 800d4c4:	f000 fba8 	bl	800dc18 <USBD_CtlError>
                  break;
 800d4c8:	e054      	b.n	800d574 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d4ca:	7bbb      	ldrb	r3, [r7, #14]
 800d4cc:	f003 020f 	and.w	r2, r3, #15
 800d4d0:	6879      	ldr	r1, [r7, #4]
 800d4d2:	4613      	mov	r3, r2
 800d4d4:	009b      	lsls	r3, r3, #2
 800d4d6:	4413      	add	r3, r2
 800d4d8:	009b      	lsls	r3, r3, #2
 800d4da:	440b      	add	r3, r1
 800d4dc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d4e0:	881b      	ldrh	r3, [r3, #0]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d104      	bne.n	800d4f0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800d4e6:	6839      	ldr	r1, [r7, #0]
 800d4e8:	6878      	ldr	r0, [r7, #4]
 800d4ea:	f000 fb95 	bl	800dc18 <USBD_CtlError>
                  break;
 800d4ee:	e041      	b.n	800d574 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d4f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	da0b      	bge.n	800d510 <USBD_StdEPReq+0x23e>
 800d4f8:	7bbb      	ldrb	r3, [r7, #14]
 800d4fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d4fe:	4613      	mov	r3, r2
 800d500:	009b      	lsls	r3, r3, #2
 800d502:	4413      	add	r3, r2
 800d504:	009b      	lsls	r3, r3, #2
 800d506:	3310      	adds	r3, #16
 800d508:	687a      	ldr	r2, [r7, #4]
 800d50a:	4413      	add	r3, r2
 800d50c:	3304      	adds	r3, #4
 800d50e:	e00b      	b.n	800d528 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d510:	7bbb      	ldrb	r3, [r7, #14]
 800d512:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d516:	4613      	mov	r3, r2
 800d518:	009b      	lsls	r3, r3, #2
 800d51a:	4413      	add	r3, r2
 800d51c:	009b      	lsls	r3, r3, #2
 800d51e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d522:	687a      	ldr	r2, [r7, #4]
 800d524:	4413      	add	r3, r2
 800d526:	3304      	adds	r3, #4
 800d528:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d52a:	7bbb      	ldrb	r3, [r7, #14]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d002      	beq.n	800d536 <USBD_StdEPReq+0x264>
 800d530:	7bbb      	ldrb	r3, [r7, #14]
 800d532:	2b80      	cmp	r3, #128	@ 0x80
 800d534:	d103      	bne.n	800d53e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800d536:	68bb      	ldr	r3, [r7, #8]
 800d538:	2200      	movs	r2, #0
 800d53a:	601a      	str	r2, [r3, #0]
 800d53c:	e00e      	b.n	800d55c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d53e:	7bbb      	ldrb	r3, [r7, #14]
 800d540:	4619      	mov	r1, r3
 800d542:	6878      	ldr	r0, [r7, #4]
 800d544:	f000 fe6e 	bl	800e224 <USBD_LL_IsStallEP>
 800d548:	4603      	mov	r3, r0
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d003      	beq.n	800d556 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800d54e:	68bb      	ldr	r3, [r7, #8]
 800d550:	2201      	movs	r2, #1
 800d552:	601a      	str	r2, [r3, #0]
 800d554:	e002      	b.n	800d55c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800d556:	68bb      	ldr	r3, [r7, #8]
 800d558:	2200      	movs	r2, #0
 800d55a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d55c:	68bb      	ldr	r3, [r7, #8]
 800d55e:	2202      	movs	r2, #2
 800d560:	4619      	mov	r1, r3
 800d562:	6878      	ldr	r0, [r7, #4]
 800d564:	f000 fbc9 	bl	800dcfa <USBD_CtlSendData>
              break;
 800d568:	e004      	b.n	800d574 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800d56a:	6839      	ldr	r1, [r7, #0]
 800d56c:	6878      	ldr	r0, [r7, #4]
 800d56e:	f000 fb53 	bl	800dc18 <USBD_CtlError>
              break;
 800d572:	bf00      	nop
          }
          break;
 800d574:	e004      	b.n	800d580 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800d576:	6839      	ldr	r1, [r7, #0]
 800d578:	6878      	ldr	r0, [r7, #4]
 800d57a:	f000 fb4d 	bl	800dc18 <USBD_CtlError>
          break;
 800d57e:	bf00      	nop
      }
      break;
 800d580:	e004      	b.n	800d58c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800d582:	6839      	ldr	r1, [r7, #0]
 800d584:	6878      	ldr	r0, [r7, #4]
 800d586:	f000 fb47 	bl	800dc18 <USBD_CtlError>
      break;
 800d58a:	bf00      	nop
  }

  return ret;
 800d58c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d58e:	4618      	mov	r0, r3
 800d590:	3710      	adds	r7, #16
 800d592:	46bd      	mov	sp, r7
 800d594:	bd80      	pop	{r7, pc}
	...

0800d598 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d598:	b580      	push	{r7, lr}
 800d59a:	b084      	sub	sp, #16
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	6078      	str	r0, [r7, #4]
 800d5a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	885b      	ldrh	r3, [r3, #2]
 800d5b2:	0a1b      	lsrs	r3, r3, #8
 800d5b4:	b29b      	uxth	r3, r3
 800d5b6:	3b01      	subs	r3, #1
 800d5b8:	2b06      	cmp	r3, #6
 800d5ba:	f200 813b 	bhi.w	800d834 <USBD_GetDescriptor+0x29c>
 800d5be:	a201      	add	r2, pc, #4	@ (adr r2, 800d5c4 <USBD_GetDescriptor+0x2c>)
 800d5c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5c4:	0800d5e1 	.word	0x0800d5e1
 800d5c8:	0800d5f9 	.word	0x0800d5f9
 800d5cc:	0800d639 	.word	0x0800d639
 800d5d0:	0800d835 	.word	0x0800d835
 800d5d4:	0800d835 	.word	0x0800d835
 800d5d8:	0800d7d5 	.word	0x0800d7d5
 800d5dc:	0800d801 	.word	0x0800d801
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	687a      	ldr	r2, [r7, #4]
 800d5ea:	7c12      	ldrb	r2, [r2, #16]
 800d5ec:	f107 0108 	add.w	r1, r7, #8
 800d5f0:	4610      	mov	r0, r2
 800d5f2:	4798      	blx	r3
 800d5f4:	60f8      	str	r0, [r7, #12]
      break;
 800d5f6:	e125      	b.n	800d844 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	7c1b      	ldrb	r3, [r3, #16]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d10d      	bne.n	800d61c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d608:	f107 0208 	add.w	r2, r7, #8
 800d60c:	4610      	mov	r0, r2
 800d60e:	4798      	blx	r3
 800d610:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	3301      	adds	r3, #1
 800d616:	2202      	movs	r2, #2
 800d618:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d61a:	e113      	b.n	800d844 <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d624:	f107 0208 	add.w	r2, r7, #8
 800d628:	4610      	mov	r0, r2
 800d62a:	4798      	blx	r3
 800d62c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	3301      	adds	r3, #1
 800d632:	2202      	movs	r2, #2
 800d634:	701a      	strb	r2, [r3, #0]
      break;
 800d636:	e105      	b.n	800d844 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d638:	683b      	ldr	r3, [r7, #0]
 800d63a:	885b      	ldrh	r3, [r3, #2]
 800d63c:	b2db      	uxtb	r3, r3
 800d63e:	2b05      	cmp	r3, #5
 800d640:	f200 80ac 	bhi.w	800d79c <USBD_GetDescriptor+0x204>
 800d644:	a201      	add	r2, pc, #4	@ (adr r2, 800d64c <USBD_GetDescriptor+0xb4>)
 800d646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d64a:	bf00      	nop
 800d64c:	0800d665 	.word	0x0800d665
 800d650:	0800d699 	.word	0x0800d699
 800d654:	0800d6cd 	.word	0x0800d6cd
 800d658:	0800d701 	.word	0x0800d701
 800d65c:	0800d735 	.word	0x0800d735
 800d660:	0800d769 	.word	0x0800d769
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d66a:	685b      	ldr	r3, [r3, #4]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d00b      	beq.n	800d688 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d676:	685b      	ldr	r3, [r3, #4]
 800d678:	687a      	ldr	r2, [r7, #4]
 800d67a:	7c12      	ldrb	r2, [r2, #16]
 800d67c:	f107 0108 	add.w	r1, r7, #8
 800d680:	4610      	mov	r0, r2
 800d682:	4798      	blx	r3
 800d684:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d686:	e0a4      	b.n	800d7d2 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800d688:	6839      	ldr	r1, [r7, #0]
 800d68a:	6878      	ldr	r0, [r7, #4]
 800d68c:	f000 fac4 	bl	800dc18 <USBD_CtlError>
            err++;
 800d690:	7afb      	ldrb	r3, [r7, #11]
 800d692:	3301      	adds	r3, #1
 800d694:	72fb      	strb	r3, [r7, #11]
          break;
 800d696:	e09c      	b.n	800d7d2 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d69e:	689b      	ldr	r3, [r3, #8]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d00b      	beq.n	800d6bc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d6aa:	689b      	ldr	r3, [r3, #8]
 800d6ac:	687a      	ldr	r2, [r7, #4]
 800d6ae:	7c12      	ldrb	r2, [r2, #16]
 800d6b0:	f107 0108 	add.w	r1, r7, #8
 800d6b4:	4610      	mov	r0, r2
 800d6b6:	4798      	blx	r3
 800d6b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d6ba:	e08a      	b.n	800d7d2 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800d6bc:	6839      	ldr	r1, [r7, #0]
 800d6be:	6878      	ldr	r0, [r7, #4]
 800d6c0:	f000 faaa 	bl	800dc18 <USBD_CtlError>
            err++;
 800d6c4:	7afb      	ldrb	r3, [r7, #11]
 800d6c6:	3301      	adds	r3, #1
 800d6c8:	72fb      	strb	r3, [r7, #11]
          break;
 800d6ca:	e082      	b.n	800d7d2 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d6d2:	68db      	ldr	r3, [r3, #12]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d00b      	beq.n	800d6f0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d6de:	68db      	ldr	r3, [r3, #12]
 800d6e0:	687a      	ldr	r2, [r7, #4]
 800d6e2:	7c12      	ldrb	r2, [r2, #16]
 800d6e4:	f107 0108 	add.w	r1, r7, #8
 800d6e8:	4610      	mov	r0, r2
 800d6ea:	4798      	blx	r3
 800d6ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d6ee:	e070      	b.n	800d7d2 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800d6f0:	6839      	ldr	r1, [r7, #0]
 800d6f2:	6878      	ldr	r0, [r7, #4]
 800d6f4:	f000 fa90 	bl	800dc18 <USBD_CtlError>
            err++;
 800d6f8:	7afb      	ldrb	r3, [r7, #11]
 800d6fa:	3301      	adds	r3, #1
 800d6fc:	72fb      	strb	r3, [r7, #11]
          break;
 800d6fe:	e068      	b.n	800d7d2 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d706:	691b      	ldr	r3, [r3, #16]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d00b      	beq.n	800d724 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d712:	691b      	ldr	r3, [r3, #16]
 800d714:	687a      	ldr	r2, [r7, #4]
 800d716:	7c12      	ldrb	r2, [r2, #16]
 800d718:	f107 0108 	add.w	r1, r7, #8
 800d71c:	4610      	mov	r0, r2
 800d71e:	4798      	blx	r3
 800d720:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d722:	e056      	b.n	800d7d2 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800d724:	6839      	ldr	r1, [r7, #0]
 800d726:	6878      	ldr	r0, [r7, #4]
 800d728:	f000 fa76 	bl	800dc18 <USBD_CtlError>
            err++;
 800d72c:	7afb      	ldrb	r3, [r7, #11]
 800d72e:	3301      	adds	r3, #1
 800d730:	72fb      	strb	r3, [r7, #11]
          break;
 800d732:	e04e      	b.n	800d7d2 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d73a:	695b      	ldr	r3, [r3, #20]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d00b      	beq.n	800d758 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d746:	695b      	ldr	r3, [r3, #20]
 800d748:	687a      	ldr	r2, [r7, #4]
 800d74a:	7c12      	ldrb	r2, [r2, #16]
 800d74c:	f107 0108 	add.w	r1, r7, #8
 800d750:	4610      	mov	r0, r2
 800d752:	4798      	blx	r3
 800d754:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d756:	e03c      	b.n	800d7d2 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800d758:	6839      	ldr	r1, [r7, #0]
 800d75a:	6878      	ldr	r0, [r7, #4]
 800d75c:	f000 fa5c 	bl	800dc18 <USBD_CtlError>
            err++;
 800d760:	7afb      	ldrb	r3, [r7, #11]
 800d762:	3301      	adds	r3, #1
 800d764:	72fb      	strb	r3, [r7, #11]
          break;
 800d766:	e034      	b.n	800d7d2 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d76e:	699b      	ldr	r3, [r3, #24]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d00b      	beq.n	800d78c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d77a:	699b      	ldr	r3, [r3, #24]
 800d77c:	687a      	ldr	r2, [r7, #4]
 800d77e:	7c12      	ldrb	r2, [r2, #16]
 800d780:	f107 0108 	add.w	r1, r7, #8
 800d784:	4610      	mov	r0, r2
 800d786:	4798      	blx	r3
 800d788:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d78a:	e022      	b.n	800d7d2 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800d78c:	6839      	ldr	r1, [r7, #0]
 800d78e:	6878      	ldr	r0, [r7, #4]
 800d790:	f000 fa42 	bl	800dc18 <USBD_CtlError>
            err++;
 800d794:	7afb      	ldrb	r3, [r7, #11]
 800d796:	3301      	adds	r3, #1
 800d798:	72fb      	strb	r3, [r7, #11]
          break;
 800d79a:	e01a      	b.n	800d7d2 <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d7a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d00c      	beq.n	800d7c2 <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d7ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7b0:	683a      	ldr	r2, [r7, #0]
 800d7b2:	8852      	ldrh	r2, [r2, #2]
 800d7b4:	b2d1      	uxtb	r1, r2
 800d7b6:	f107 0208 	add.w	r2, r7, #8
 800d7ba:	6878      	ldr	r0, [r7, #4]
 800d7bc:	4798      	blx	r3
 800d7be:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 800d7c0:	e006      	b.n	800d7d0 <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 800d7c2:	6839      	ldr	r1, [r7, #0]
 800d7c4:	6878      	ldr	r0, [r7, #4]
 800d7c6:	f000 fa27 	bl	800dc18 <USBD_CtlError>
            err++;
 800d7ca:	7afb      	ldrb	r3, [r7, #11]
 800d7cc:	3301      	adds	r3, #1
 800d7ce:	72fb      	strb	r3, [r7, #11]
          break;
 800d7d0:	bf00      	nop
      }
      break;
 800d7d2:	e037      	b.n	800d844 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	7c1b      	ldrb	r3, [r3, #16]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d109      	bne.n	800d7f0 <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d7e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d7e4:	f107 0208 	add.w	r2, r7, #8
 800d7e8:	4610      	mov	r0, r2
 800d7ea:	4798      	blx	r3
 800d7ec:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d7ee:	e029      	b.n	800d844 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 800d7f0:	6839      	ldr	r1, [r7, #0]
 800d7f2:	6878      	ldr	r0, [r7, #4]
 800d7f4:	f000 fa10 	bl	800dc18 <USBD_CtlError>
        err++;
 800d7f8:	7afb      	ldrb	r3, [r7, #11]
 800d7fa:	3301      	adds	r3, #1
 800d7fc:	72fb      	strb	r3, [r7, #11]
      break;
 800d7fe:	e021      	b.n	800d844 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	7c1b      	ldrb	r3, [r3, #16]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d10d      	bne.n	800d824 <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d80e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d810:	f107 0208 	add.w	r2, r7, #8
 800d814:	4610      	mov	r0, r2
 800d816:	4798      	blx	r3
 800d818:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	3301      	adds	r3, #1
 800d81e:	2207      	movs	r2, #7
 800d820:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d822:	e00f      	b.n	800d844 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 800d824:	6839      	ldr	r1, [r7, #0]
 800d826:	6878      	ldr	r0, [r7, #4]
 800d828:	f000 f9f6 	bl	800dc18 <USBD_CtlError>
        err++;
 800d82c:	7afb      	ldrb	r3, [r7, #11]
 800d82e:	3301      	adds	r3, #1
 800d830:	72fb      	strb	r3, [r7, #11]
      break;
 800d832:	e007      	b.n	800d844 <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 800d834:	6839      	ldr	r1, [r7, #0]
 800d836:	6878      	ldr	r0, [r7, #4]
 800d838:	f000 f9ee 	bl	800dc18 <USBD_CtlError>
      err++;
 800d83c:	7afb      	ldrb	r3, [r7, #11]
 800d83e:	3301      	adds	r3, #1
 800d840:	72fb      	strb	r3, [r7, #11]
      break;
 800d842:	bf00      	nop
  }

  if (err != 0U)
 800d844:	7afb      	ldrb	r3, [r7, #11]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d11e      	bne.n	800d888 <USBD_GetDescriptor+0x2f0>
  {
    return;
  }

  if (req->wLength != 0U)
 800d84a:	683b      	ldr	r3, [r7, #0]
 800d84c:	88db      	ldrh	r3, [r3, #6]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d016      	beq.n	800d880 <USBD_GetDescriptor+0x2e8>
  {
    if (len != 0U)
 800d852:	893b      	ldrh	r3, [r7, #8]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d00e      	beq.n	800d876 <USBD_GetDescriptor+0x2de>
    {
      len = MIN(len, req->wLength);
 800d858:	683b      	ldr	r3, [r7, #0]
 800d85a:	88da      	ldrh	r2, [r3, #6]
 800d85c:	893b      	ldrh	r3, [r7, #8]
 800d85e:	4293      	cmp	r3, r2
 800d860:	bf28      	it	cs
 800d862:	4613      	movcs	r3, r2
 800d864:	b29b      	uxth	r3, r3
 800d866:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d868:	893b      	ldrh	r3, [r7, #8]
 800d86a:	461a      	mov	r2, r3
 800d86c:	68f9      	ldr	r1, [r7, #12]
 800d86e:	6878      	ldr	r0, [r7, #4]
 800d870:	f000 fa43 	bl	800dcfa <USBD_CtlSendData>
 800d874:	e009      	b.n	800d88a <USBD_GetDescriptor+0x2f2>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d876:	6839      	ldr	r1, [r7, #0]
 800d878:	6878      	ldr	r0, [r7, #4]
 800d87a:	f000 f9cd 	bl	800dc18 <USBD_CtlError>
 800d87e:	e004      	b.n	800d88a <USBD_GetDescriptor+0x2f2>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d880:	6878      	ldr	r0, [r7, #4]
 800d882:	f000 fa94 	bl	800ddae <USBD_CtlSendStatus>
 800d886:	e000      	b.n	800d88a <USBD_GetDescriptor+0x2f2>
    return;
 800d888:	bf00      	nop
  }
}
 800d88a:	3710      	adds	r7, #16
 800d88c:	46bd      	mov	sp, r7
 800d88e:	bd80      	pop	{r7, pc}

0800d890 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d890:	b580      	push	{r7, lr}
 800d892:	b084      	sub	sp, #16
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
 800d898:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d89a:	683b      	ldr	r3, [r7, #0]
 800d89c:	889b      	ldrh	r3, [r3, #4]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d131      	bne.n	800d906 <USBD_SetAddress+0x76>
 800d8a2:	683b      	ldr	r3, [r7, #0]
 800d8a4:	88db      	ldrh	r3, [r3, #6]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d12d      	bne.n	800d906 <USBD_SetAddress+0x76>
 800d8aa:	683b      	ldr	r3, [r7, #0]
 800d8ac:	885b      	ldrh	r3, [r3, #2]
 800d8ae:	2b7f      	cmp	r3, #127	@ 0x7f
 800d8b0:	d829      	bhi.n	800d906 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d8b2:	683b      	ldr	r3, [r7, #0]
 800d8b4:	885b      	ldrh	r3, [r3, #2]
 800d8b6:	b2db      	uxtb	r3, r3
 800d8b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d8bc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d8c4:	b2db      	uxtb	r3, r3
 800d8c6:	2b03      	cmp	r3, #3
 800d8c8:	d104      	bne.n	800d8d4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d8ca:	6839      	ldr	r1, [r7, #0]
 800d8cc:	6878      	ldr	r0, [r7, #4]
 800d8ce:	f000 f9a3 	bl	800dc18 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d8d2:	e01d      	b.n	800d910 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	7bfa      	ldrb	r2, [r7, #15]
 800d8d8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d8dc:	7bfb      	ldrb	r3, [r7, #15]
 800d8de:	4619      	mov	r1, r3
 800d8e0:	6878      	ldr	r0, [r7, #4]
 800d8e2:	f000 fccb 	bl	800e27c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d8e6:	6878      	ldr	r0, [r7, #4]
 800d8e8:	f000 fa61 	bl	800ddae <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d8ec:	7bfb      	ldrb	r3, [r7, #15]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d004      	beq.n	800d8fc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	2202      	movs	r2, #2
 800d8f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d8fa:	e009      	b.n	800d910 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	2201      	movs	r2, #1
 800d900:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d904:	e004      	b.n	800d910 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d906:	6839      	ldr	r1, [r7, #0]
 800d908:	6878      	ldr	r0, [r7, #4]
 800d90a:	f000 f985 	bl	800dc18 <USBD_CtlError>
  }
}
 800d90e:	bf00      	nop
 800d910:	bf00      	nop
 800d912:	3710      	adds	r7, #16
 800d914:	46bd      	mov	sp, r7
 800d916:	bd80      	pop	{r7, pc}

0800d918 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b084      	sub	sp, #16
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
 800d920:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d922:	2300      	movs	r3, #0
 800d924:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	885b      	ldrh	r3, [r3, #2]
 800d92a:	b2da      	uxtb	r2, r3
 800d92c:	4b4c      	ldr	r3, [pc, #304]	@ (800da60 <USBD_SetConfig+0x148>)
 800d92e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d930:	4b4b      	ldr	r3, [pc, #300]	@ (800da60 <USBD_SetConfig+0x148>)
 800d932:	781b      	ldrb	r3, [r3, #0]
 800d934:	2b01      	cmp	r3, #1
 800d936:	d905      	bls.n	800d944 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d938:	6839      	ldr	r1, [r7, #0]
 800d93a:	6878      	ldr	r0, [r7, #4]
 800d93c:	f000 f96c 	bl	800dc18 <USBD_CtlError>
    return USBD_FAIL;
 800d940:	2303      	movs	r3, #3
 800d942:	e088      	b.n	800da56 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d94a:	b2db      	uxtb	r3, r3
 800d94c:	2b02      	cmp	r3, #2
 800d94e:	d002      	beq.n	800d956 <USBD_SetConfig+0x3e>
 800d950:	2b03      	cmp	r3, #3
 800d952:	d025      	beq.n	800d9a0 <USBD_SetConfig+0x88>
 800d954:	e071      	b.n	800da3a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d956:	4b42      	ldr	r3, [pc, #264]	@ (800da60 <USBD_SetConfig+0x148>)
 800d958:	781b      	ldrb	r3, [r3, #0]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d01c      	beq.n	800d998 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800d95e:	4b40      	ldr	r3, [pc, #256]	@ (800da60 <USBD_SetConfig+0x148>)
 800d960:	781b      	ldrb	r3, [r3, #0]
 800d962:	461a      	mov	r2, r3
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d968:	4b3d      	ldr	r3, [pc, #244]	@ (800da60 <USBD_SetConfig+0x148>)
 800d96a:	781b      	ldrb	r3, [r3, #0]
 800d96c:	4619      	mov	r1, r3
 800d96e:	6878      	ldr	r0, [r7, #4]
 800d970:	f7ff f93b 	bl	800cbea <USBD_SetClassConfig>
 800d974:	4603      	mov	r3, r0
 800d976:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d978:	7bfb      	ldrb	r3, [r7, #15]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d004      	beq.n	800d988 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800d97e:	6839      	ldr	r1, [r7, #0]
 800d980:	6878      	ldr	r0, [r7, #4]
 800d982:	f000 f949 	bl	800dc18 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d986:	e065      	b.n	800da54 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d988:	6878      	ldr	r0, [r7, #4]
 800d98a:	f000 fa10 	bl	800ddae <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	2203      	movs	r2, #3
 800d992:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d996:	e05d      	b.n	800da54 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d998:	6878      	ldr	r0, [r7, #4]
 800d99a:	f000 fa08 	bl	800ddae <USBD_CtlSendStatus>
      break;
 800d99e:	e059      	b.n	800da54 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d9a0:	4b2f      	ldr	r3, [pc, #188]	@ (800da60 <USBD_SetConfig+0x148>)
 800d9a2:	781b      	ldrb	r3, [r3, #0]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d112      	bne.n	800d9ce <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	2202      	movs	r2, #2
 800d9ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800d9b0:	4b2b      	ldr	r3, [pc, #172]	@ (800da60 <USBD_SetConfig+0x148>)
 800d9b2:	781b      	ldrb	r3, [r3, #0]
 800d9b4:	461a      	mov	r2, r3
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d9ba:	4b29      	ldr	r3, [pc, #164]	@ (800da60 <USBD_SetConfig+0x148>)
 800d9bc:	781b      	ldrb	r3, [r3, #0]
 800d9be:	4619      	mov	r1, r3
 800d9c0:	6878      	ldr	r0, [r7, #4]
 800d9c2:	f7ff f92e 	bl	800cc22 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d9c6:	6878      	ldr	r0, [r7, #4]
 800d9c8:	f000 f9f1 	bl	800ddae <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d9cc:	e042      	b.n	800da54 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800d9ce:	4b24      	ldr	r3, [pc, #144]	@ (800da60 <USBD_SetConfig+0x148>)
 800d9d0:	781b      	ldrb	r3, [r3, #0]
 800d9d2:	461a      	mov	r2, r3
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	685b      	ldr	r3, [r3, #4]
 800d9d8:	429a      	cmp	r2, r3
 800d9da:	d02a      	beq.n	800da32 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	685b      	ldr	r3, [r3, #4]
 800d9e0:	b2db      	uxtb	r3, r3
 800d9e2:	4619      	mov	r1, r3
 800d9e4:	6878      	ldr	r0, [r7, #4]
 800d9e6:	f7ff f91c 	bl	800cc22 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d9ea:	4b1d      	ldr	r3, [pc, #116]	@ (800da60 <USBD_SetConfig+0x148>)
 800d9ec:	781b      	ldrb	r3, [r3, #0]
 800d9ee:	461a      	mov	r2, r3
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d9f4:	4b1a      	ldr	r3, [pc, #104]	@ (800da60 <USBD_SetConfig+0x148>)
 800d9f6:	781b      	ldrb	r3, [r3, #0]
 800d9f8:	4619      	mov	r1, r3
 800d9fa:	6878      	ldr	r0, [r7, #4]
 800d9fc:	f7ff f8f5 	bl	800cbea <USBD_SetClassConfig>
 800da00:	4603      	mov	r3, r0
 800da02:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800da04:	7bfb      	ldrb	r3, [r7, #15]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d00f      	beq.n	800da2a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800da0a:	6839      	ldr	r1, [r7, #0]
 800da0c:	6878      	ldr	r0, [r7, #4]
 800da0e:	f000 f903 	bl	800dc18 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	685b      	ldr	r3, [r3, #4]
 800da16:	b2db      	uxtb	r3, r3
 800da18:	4619      	mov	r1, r3
 800da1a:	6878      	ldr	r0, [r7, #4]
 800da1c:	f7ff f901 	bl	800cc22 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	2202      	movs	r2, #2
 800da24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800da28:	e014      	b.n	800da54 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800da2a:	6878      	ldr	r0, [r7, #4]
 800da2c:	f000 f9bf 	bl	800ddae <USBD_CtlSendStatus>
      break;
 800da30:	e010      	b.n	800da54 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800da32:	6878      	ldr	r0, [r7, #4]
 800da34:	f000 f9bb 	bl	800ddae <USBD_CtlSendStatus>
      break;
 800da38:	e00c      	b.n	800da54 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800da3a:	6839      	ldr	r1, [r7, #0]
 800da3c:	6878      	ldr	r0, [r7, #4]
 800da3e:	f000 f8eb 	bl	800dc18 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800da42:	4b07      	ldr	r3, [pc, #28]	@ (800da60 <USBD_SetConfig+0x148>)
 800da44:	781b      	ldrb	r3, [r3, #0]
 800da46:	4619      	mov	r1, r3
 800da48:	6878      	ldr	r0, [r7, #4]
 800da4a:	f7ff f8ea 	bl	800cc22 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800da4e:	2303      	movs	r3, #3
 800da50:	73fb      	strb	r3, [r7, #15]
      break;
 800da52:	bf00      	nop
  }

  return ret;
 800da54:	7bfb      	ldrb	r3, [r7, #15]
}
 800da56:	4618      	mov	r0, r3
 800da58:	3710      	adds	r7, #16
 800da5a:	46bd      	mov	sp, r7
 800da5c:	bd80      	pop	{r7, pc}
 800da5e:	bf00      	nop
 800da60:	200019bc 	.word	0x200019bc

0800da64 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b082      	sub	sp, #8
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
 800da6c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800da6e:	683b      	ldr	r3, [r7, #0]
 800da70:	88db      	ldrh	r3, [r3, #6]
 800da72:	2b01      	cmp	r3, #1
 800da74:	d004      	beq.n	800da80 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800da76:	6839      	ldr	r1, [r7, #0]
 800da78:	6878      	ldr	r0, [r7, #4]
 800da7a:	f000 f8cd 	bl	800dc18 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800da7e:	e023      	b.n	800dac8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800da86:	b2db      	uxtb	r3, r3
 800da88:	2b02      	cmp	r3, #2
 800da8a:	dc02      	bgt.n	800da92 <USBD_GetConfig+0x2e>
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	dc03      	bgt.n	800da98 <USBD_GetConfig+0x34>
 800da90:	e015      	b.n	800dabe <USBD_GetConfig+0x5a>
 800da92:	2b03      	cmp	r3, #3
 800da94:	d00b      	beq.n	800daae <USBD_GetConfig+0x4a>
 800da96:	e012      	b.n	800dabe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	2200      	movs	r2, #0
 800da9c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	3308      	adds	r3, #8
 800daa2:	2201      	movs	r2, #1
 800daa4:	4619      	mov	r1, r3
 800daa6:	6878      	ldr	r0, [r7, #4]
 800daa8:	f000 f927 	bl	800dcfa <USBD_CtlSendData>
        break;
 800daac:	e00c      	b.n	800dac8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	3304      	adds	r3, #4
 800dab2:	2201      	movs	r2, #1
 800dab4:	4619      	mov	r1, r3
 800dab6:	6878      	ldr	r0, [r7, #4]
 800dab8:	f000 f91f 	bl	800dcfa <USBD_CtlSendData>
        break;
 800dabc:	e004      	b.n	800dac8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800dabe:	6839      	ldr	r1, [r7, #0]
 800dac0:	6878      	ldr	r0, [r7, #4]
 800dac2:	f000 f8a9 	bl	800dc18 <USBD_CtlError>
        break;
 800dac6:	bf00      	nop
}
 800dac8:	bf00      	nop
 800daca:	3708      	adds	r7, #8
 800dacc:	46bd      	mov	sp, r7
 800dace:	bd80      	pop	{r7, pc}

0800dad0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b082      	sub	sp, #8
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
 800dad8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dae0:	b2db      	uxtb	r3, r3
 800dae2:	3b01      	subs	r3, #1
 800dae4:	2b02      	cmp	r3, #2
 800dae6:	d81e      	bhi.n	800db26 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800dae8:	683b      	ldr	r3, [r7, #0]
 800daea:	88db      	ldrh	r3, [r3, #6]
 800daec:	2b02      	cmp	r3, #2
 800daee:	d004      	beq.n	800dafa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800daf0:	6839      	ldr	r1, [r7, #0]
 800daf2:	6878      	ldr	r0, [r7, #4]
 800daf4:	f000 f890 	bl	800dc18 <USBD_CtlError>
        break;
 800daf8:	e01a      	b.n	800db30 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	2201      	movs	r2, #1
 800dafe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800db06:	2b00      	cmp	r3, #0
 800db08:	d005      	beq.n	800db16 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	68db      	ldr	r3, [r3, #12]
 800db0e:	f043 0202 	orr.w	r2, r3, #2
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	330c      	adds	r3, #12
 800db1a:	2202      	movs	r2, #2
 800db1c:	4619      	mov	r1, r3
 800db1e:	6878      	ldr	r0, [r7, #4]
 800db20:	f000 f8eb 	bl	800dcfa <USBD_CtlSendData>
      break;
 800db24:	e004      	b.n	800db30 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800db26:	6839      	ldr	r1, [r7, #0]
 800db28:	6878      	ldr	r0, [r7, #4]
 800db2a:	f000 f875 	bl	800dc18 <USBD_CtlError>
      break;
 800db2e:	bf00      	nop
  }
}
 800db30:	bf00      	nop
 800db32:	3708      	adds	r7, #8
 800db34:	46bd      	mov	sp, r7
 800db36:	bd80      	pop	{r7, pc}

0800db38 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b082      	sub	sp, #8
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
 800db40:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800db42:	683b      	ldr	r3, [r7, #0]
 800db44:	885b      	ldrh	r3, [r3, #2]
 800db46:	2b01      	cmp	r3, #1
 800db48:	d106      	bne.n	800db58 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	2201      	movs	r2, #1
 800db4e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800db52:	6878      	ldr	r0, [r7, #4]
 800db54:	f000 f92b 	bl	800ddae <USBD_CtlSendStatus>
  }
}
 800db58:	bf00      	nop
 800db5a:	3708      	adds	r7, #8
 800db5c:	46bd      	mov	sp, r7
 800db5e:	bd80      	pop	{r7, pc}

0800db60 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b082      	sub	sp, #8
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
 800db68:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800db70:	b2db      	uxtb	r3, r3
 800db72:	3b01      	subs	r3, #1
 800db74:	2b02      	cmp	r3, #2
 800db76:	d80b      	bhi.n	800db90 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	885b      	ldrh	r3, [r3, #2]
 800db7c:	2b01      	cmp	r3, #1
 800db7e:	d10c      	bne.n	800db9a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	2200      	movs	r2, #0
 800db84:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800db88:	6878      	ldr	r0, [r7, #4]
 800db8a:	f000 f910 	bl	800ddae <USBD_CtlSendStatus>
      }
      break;
 800db8e:	e004      	b.n	800db9a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800db90:	6839      	ldr	r1, [r7, #0]
 800db92:	6878      	ldr	r0, [r7, #4]
 800db94:	f000 f840 	bl	800dc18 <USBD_CtlError>
      break;
 800db98:	e000      	b.n	800db9c <USBD_ClrFeature+0x3c>
      break;
 800db9a:	bf00      	nop
  }
}
 800db9c:	bf00      	nop
 800db9e:	3708      	adds	r7, #8
 800dba0:	46bd      	mov	sp, r7
 800dba2:	bd80      	pop	{r7, pc}

0800dba4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b084      	sub	sp, #16
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
 800dbac:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800dbae:	683b      	ldr	r3, [r7, #0]
 800dbb0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	781a      	ldrb	r2, [r3, #0]
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	3301      	adds	r3, #1
 800dbbe:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	781a      	ldrb	r2, [r3, #0]
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	3301      	adds	r3, #1
 800dbcc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800dbce:	68f8      	ldr	r0, [r7, #12]
 800dbd0:	f7ff faa9 	bl	800d126 <SWAPBYTE>
 800dbd4:	4603      	mov	r3, r0
 800dbd6:	461a      	mov	r2, r3
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	3301      	adds	r3, #1
 800dbe0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	3301      	adds	r3, #1
 800dbe6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800dbe8:	68f8      	ldr	r0, [r7, #12]
 800dbea:	f7ff fa9c 	bl	800d126 <SWAPBYTE>
 800dbee:	4603      	mov	r3, r0
 800dbf0:	461a      	mov	r2, r3
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	3301      	adds	r3, #1
 800dbfa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	3301      	adds	r3, #1
 800dc00:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800dc02:	68f8      	ldr	r0, [r7, #12]
 800dc04:	f7ff fa8f 	bl	800d126 <SWAPBYTE>
 800dc08:	4603      	mov	r3, r0
 800dc0a:	461a      	mov	r2, r3
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	80da      	strh	r2, [r3, #6]
}
 800dc10:	bf00      	nop
 800dc12:	3710      	adds	r7, #16
 800dc14:	46bd      	mov	sp, r7
 800dc16:	bd80      	pop	{r7, pc}

0800dc18 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b082      	sub	sp, #8
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
 800dc20:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800dc22:	2180      	movs	r1, #128	@ 0x80
 800dc24:	6878      	ldr	r0, [r7, #4]
 800dc26:	f000 fabf 	bl	800e1a8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800dc2a:	2100      	movs	r1, #0
 800dc2c:	6878      	ldr	r0, [r7, #4]
 800dc2e:	f000 fabb 	bl	800e1a8 <USBD_LL_StallEP>
}
 800dc32:	bf00      	nop
 800dc34:	3708      	adds	r7, #8
 800dc36:	46bd      	mov	sp, r7
 800dc38:	bd80      	pop	{r7, pc}

0800dc3a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800dc3a:	b580      	push	{r7, lr}
 800dc3c:	b086      	sub	sp, #24
 800dc3e:	af00      	add	r7, sp, #0
 800dc40:	60f8      	str	r0, [r7, #12]
 800dc42:	60b9      	str	r1, [r7, #8]
 800dc44:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800dc46:	2300      	movs	r3, #0
 800dc48:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d036      	beq.n	800dcbe <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800dc54:	6938      	ldr	r0, [r7, #16]
 800dc56:	f000 f836 	bl	800dcc6 <USBD_GetLen>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	3301      	adds	r3, #1
 800dc5e:	b29b      	uxth	r3, r3
 800dc60:	005b      	lsls	r3, r3, #1
 800dc62:	b29a      	uxth	r2, r3
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800dc68:	7dfb      	ldrb	r3, [r7, #23]
 800dc6a:	68ba      	ldr	r2, [r7, #8]
 800dc6c:	4413      	add	r3, r2
 800dc6e:	687a      	ldr	r2, [r7, #4]
 800dc70:	7812      	ldrb	r2, [r2, #0]
 800dc72:	701a      	strb	r2, [r3, #0]
  idx++;
 800dc74:	7dfb      	ldrb	r3, [r7, #23]
 800dc76:	3301      	adds	r3, #1
 800dc78:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800dc7a:	7dfb      	ldrb	r3, [r7, #23]
 800dc7c:	68ba      	ldr	r2, [r7, #8]
 800dc7e:	4413      	add	r3, r2
 800dc80:	2203      	movs	r2, #3
 800dc82:	701a      	strb	r2, [r3, #0]
  idx++;
 800dc84:	7dfb      	ldrb	r3, [r7, #23]
 800dc86:	3301      	adds	r3, #1
 800dc88:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800dc8a:	e013      	b.n	800dcb4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800dc8c:	7dfb      	ldrb	r3, [r7, #23]
 800dc8e:	68ba      	ldr	r2, [r7, #8]
 800dc90:	4413      	add	r3, r2
 800dc92:	693a      	ldr	r2, [r7, #16]
 800dc94:	7812      	ldrb	r2, [r2, #0]
 800dc96:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800dc98:	693b      	ldr	r3, [r7, #16]
 800dc9a:	3301      	adds	r3, #1
 800dc9c:	613b      	str	r3, [r7, #16]
    idx++;
 800dc9e:	7dfb      	ldrb	r3, [r7, #23]
 800dca0:	3301      	adds	r3, #1
 800dca2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800dca4:	7dfb      	ldrb	r3, [r7, #23]
 800dca6:	68ba      	ldr	r2, [r7, #8]
 800dca8:	4413      	add	r3, r2
 800dcaa:	2200      	movs	r2, #0
 800dcac:	701a      	strb	r2, [r3, #0]
    idx++;
 800dcae:	7dfb      	ldrb	r3, [r7, #23]
 800dcb0:	3301      	adds	r3, #1
 800dcb2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800dcb4:	693b      	ldr	r3, [r7, #16]
 800dcb6:	781b      	ldrb	r3, [r3, #0]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d1e7      	bne.n	800dc8c <USBD_GetString+0x52>
 800dcbc:	e000      	b.n	800dcc0 <USBD_GetString+0x86>
    return;
 800dcbe:	bf00      	nop
  }
}
 800dcc0:	3718      	adds	r7, #24
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	bd80      	pop	{r7, pc}

0800dcc6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800dcc6:	b480      	push	{r7}
 800dcc8:	b085      	sub	sp, #20
 800dcca:	af00      	add	r7, sp, #0
 800dccc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800dcce:	2300      	movs	r3, #0
 800dcd0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800dcd6:	e005      	b.n	800dce4 <USBD_GetLen+0x1e>
  {
    len++;
 800dcd8:	7bfb      	ldrb	r3, [r7, #15]
 800dcda:	3301      	adds	r3, #1
 800dcdc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800dcde:	68bb      	ldr	r3, [r7, #8]
 800dce0:	3301      	adds	r3, #1
 800dce2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800dce4:	68bb      	ldr	r3, [r7, #8]
 800dce6:	781b      	ldrb	r3, [r3, #0]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d1f5      	bne.n	800dcd8 <USBD_GetLen+0x12>
  }

  return len;
 800dcec:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcee:	4618      	mov	r0, r3
 800dcf0:	3714      	adds	r7, #20
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf8:	4770      	bx	lr

0800dcfa <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800dcfa:	b580      	push	{r7, lr}
 800dcfc:	b084      	sub	sp, #16
 800dcfe:	af00      	add	r7, sp, #0
 800dd00:	60f8      	str	r0, [r7, #12]
 800dd02:	60b9      	str	r1, [r7, #8]
 800dd04:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	2202      	movs	r2, #2
 800dd0a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	687a      	ldr	r2, [r7, #4]
 800dd12:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	687a      	ldr	r2, [r7, #4]
 800dd18:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	68ba      	ldr	r2, [r7, #8]
 800dd1e:	2100      	movs	r1, #0
 800dd20:	68f8      	ldr	r0, [r7, #12]
 800dd22:	f000 faca 	bl	800e2ba <USBD_LL_Transmit>

  return USBD_OK;
 800dd26:	2300      	movs	r3, #0
}
 800dd28:	4618      	mov	r0, r3
 800dd2a:	3710      	adds	r7, #16
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	bd80      	pop	{r7, pc}

0800dd30 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b084      	sub	sp, #16
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	60f8      	str	r0, [r7, #12]
 800dd38:	60b9      	str	r1, [r7, #8]
 800dd3a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	68ba      	ldr	r2, [r7, #8]
 800dd40:	2100      	movs	r1, #0
 800dd42:	68f8      	ldr	r0, [r7, #12]
 800dd44:	f000 fab9 	bl	800e2ba <USBD_LL_Transmit>

  return USBD_OK;
 800dd48:	2300      	movs	r3, #0
}
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	3710      	adds	r7, #16
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	bd80      	pop	{r7, pc}

0800dd52 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800dd52:	b580      	push	{r7, lr}
 800dd54:	b084      	sub	sp, #16
 800dd56:	af00      	add	r7, sp, #0
 800dd58:	60f8      	str	r0, [r7, #12]
 800dd5a:	60b9      	str	r1, [r7, #8]
 800dd5c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	2203      	movs	r2, #3
 800dd62:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	687a      	ldr	r2, [r7, #4]
 800dd6a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	687a      	ldr	r2, [r7, #4]
 800dd72:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	68ba      	ldr	r2, [r7, #8]
 800dd7a:	2100      	movs	r1, #0
 800dd7c:	68f8      	ldr	r0, [r7, #12]
 800dd7e:	f000 fabd 	bl	800e2fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dd82:	2300      	movs	r3, #0
}
 800dd84:	4618      	mov	r0, r3
 800dd86:	3710      	adds	r7, #16
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	bd80      	pop	{r7, pc}

0800dd8c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b084      	sub	sp, #16
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	60f8      	str	r0, [r7, #12]
 800dd94:	60b9      	str	r1, [r7, #8]
 800dd96:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	68ba      	ldr	r2, [r7, #8]
 800dd9c:	2100      	movs	r1, #0
 800dd9e:	68f8      	ldr	r0, [r7, #12]
 800dda0:	f000 faac 	bl	800e2fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dda4:	2300      	movs	r3, #0
}
 800dda6:	4618      	mov	r0, r3
 800dda8:	3710      	adds	r7, #16
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	bd80      	pop	{r7, pc}

0800ddae <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ddae:	b580      	push	{r7, lr}
 800ddb0:	b082      	sub	sp, #8
 800ddb2:	af00      	add	r7, sp, #0
 800ddb4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	2204      	movs	r2, #4
 800ddba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	2100      	movs	r1, #0
 800ddc4:	6878      	ldr	r0, [r7, #4]
 800ddc6:	f000 fa78 	bl	800e2ba <USBD_LL_Transmit>

  return USBD_OK;
 800ddca:	2300      	movs	r3, #0
}
 800ddcc:	4618      	mov	r0, r3
 800ddce:	3708      	adds	r7, #8
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	bd80      	pop	{r7, pc}

0800ddd4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b082      	sub	sp, #8
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	2205      	movs	r2, #5
 800dde0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dde4:	2300      	movs	r3, #0
 800dde6:	2200      	movs	r2, #0
 800dde8:	2100      	movs	r1, #0
 800ddea:	6878      	ldr	r0, [r7, #4]
 800ddec:	f000 fa86 	bl	800e2fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ddf0:	2300      	movs	r3, #0
}
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	3708      	adds	r7, #8
 800ddf6:	46bd      	mov	sp, r7
 800ddf8:	bd80      	pop	{r7, pc}

0800ddfa <HAL_PCDEx_SetTxFiFoInBytes>:
/* Private functions ---------------------------------------------------------*/

/* USER CODE BEGIN 1 */
#if(!STM32F1_DEVICE)
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFoInBytes(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800ddfa:	b580      	push	{r7, lr}
 800ddfc:	b082      	sub	sp, #8
 800ddfe:	af00      	add	r7, sp, #0
 800de00:	6078      	str	r0, [r7, #4]
 800de02:	460b      	mov	r3, r1
 800de04:	70fb      	strb	r3, [r7, #3]
 800de06:	4613      	mov	r3, r2
 800de08:	803b      	strh	r3, [r7, #0]
	return HAL_PCDEx_SetTxFiFo(hpcd, fifo, (size/4));
 800de0a:	883b      	ldrh	r3, [r7, #0]
 800de0c:	089b      	lsrs	r3, r3, #2
 800de0e:	b29a      	uxth	r2, r3
 800de10:	78fb      	ldrb	r3, [r7, #3]
 800de12:	4619      	mov	r1, r3
 800de14:	6878      	ldr	r0, [r7, #4]
 800de16:	f7f8 f8a7 	bl	8005f68 <HAL_PCDEx_SetTxFiFo>
 800de1a:	4603      	mov	r3, r0
}
 800de1c:	4618      	mov	r0, r3
 800de1e:	3708      	adds	r7, #8
 800de20:	46bd      	mov	sp, r7
 800de22:	bd80      	pop	{r7, pc}

0800de24 <HAL_PCDEx_SetRxFiFoInBytes>:

HAL_StatusTypeDef HAL_PCDEx_SetRxFiFoInBytes(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800de24:	b580      	push	{r7, lr}
 800de26:	b082      	sub	sp, #8
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
 800de2c:	460b      	mov	r3, r1
 800de2e:	807b      	strh	r3, [r7, #2]
	return HAL_PCDEx_SetRxFiFo(hpcd, (size/4));
 800de30:	887b      	ldrh	r3, [r7, #2]
 800de32:	089b      	lsrs	r3, r3, #2
 800de34:	b29b      	uxth	r3, r3
 800de36:	4619      	mov	r1, r3
 800de38:	6878      	ldr	r0, [r7, #4]
 800de3a:	f7f8 f8dc 	bl	8005ff6 <HAL_PCDEx_SetRxFiFo>
 800de3e:	4603      	mov	r3, r0
}
 800de40:	4618      	mov	r0, r3
 800de42:	3708      	adds	r7, #8
 800de44:	46bd      	mov	sp, r7
 800de46:	bd80      	pop	{r7, pc}

0800de48 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de48:	b580      	push	{r7, lr}
 800de4a:	b082      	sub	sp, #8
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef *)hpcd->pData, (uint8_t *)hpcd->Setup);
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800de5c:	4619      	mov	r1, r3
 800de5e:	4610      	mov	r0, r2
 800de60:	f7fe fef7 	bl	800cc52 <USBD_LL_SetupStage>
}
 800de64:	bf00      	nop
 800de66:	3708      	adds	r7, #8
 800de68:	46bd      	mov	sp, r7
 800de6a:	bd80      	pop	{r7, pc}

0800de6c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de6c:	b580      	push	{r7, lr}
 800de6e:	b082      	sub	sp, #8
 800de70:	af00      	add	r7, sp, #0
 800de72:	6078      	str	r0, [r7, #4]
 800de74:	460b      	mov	r3, r1
 800de76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800de7e:	78fa      	ldrb	r2, [r7, #3]
 800de80:	6879      	ldr	r1, [r7, #4]
 800de82:	4613      	mov	r3, r2
 800de84:	00db      	lsls	r3, r3, #3
 800de86:	4413      	add	r3, r2
 800de88:	009b      	lsls	r3, r3, #2
 800de8a:	440b      	add	r3, r1
 800de8c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800de90:	681a      	ldr	r2, [r3, #0]
 800de92:	78fb      	ldrb	r3, [r7, #3]
 800de94:	4619      	mov	r1, r3
 800de96:	f7fe ff31 	bl	800ccfc <USBD_LL_DataOutStage>
}
 800de9a:	bf00      	nop
 800de9c:	3708      	adds	r7, #8
 800de9e:	46bd      	mov	sp, r7
 800dea0:	bd80      	pop	{r7, pc}

0800dea2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dea2:	b580      	push	{r7, lr}
 800dea4:	b082      	sub	sp, #8
 800dea6:	af00      	add	r7, sp, #0
 800dea8:	6078      	str	r0, [r7, #4]
 800deaa:	460b      	mov	r3, r1
 800deac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800deb4:	78fa      	ldrb	r2, [r7, #3]
 800deb6:	6879      	ldr	r1, [r7, #4]
 800deb8:	4613      	mov	r3, r2
 800deba:	00db      	lsls	r3, r3, #3
 800debc:	4413      	add	r3, r2
 800debe:	009b      	lsls	r3, r3, #2
 800dec0:	440b      	add	r3, r1
 800dec2:	3320      	adds	r3, #32
 800dec4:	681a      	ldr	r2, [r3, #0]
 800dec6:	78fb      	ldrb	r3, [r7, #3]
 800dec8:	4619      	mov	r1, r3
 800deca:	f7fe ff7a 	bl	800cdc2 <USBD_LL_DataInStage>
}
 800dece:	bf00      	nop
 800ded0:	3708      	adds	r7, #8
 800ded2:	46bd      	mov	sp, r7
 800ded4:	bd80      	pop	{r7, pc}

0800ded6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ded6:	b580      	push	{r7, lr}
 800ded8:	b082      	sub	sp, #8
 800deda:	af00      	add	r7, sp, #0
 800dedc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef *)hpcd->pData);
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dee4:	4618      	mov	r0, r3
 800dee6:	f7ff f889 	bl	800cffc <USBD_LL_SOF>
}
 800deea:	bf00      	nop
 800deec:	3708      	adds	r7, #8
 800deee:	46bd      	mov	sp, r7
 800def0:	bd80      	pop	{r7, pc}

0800def2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800def2:	b580      	push	{r7, lr}
 800def4:	b084      	sub	sp, #16
 800def6:	af00      	add	r7, sp, #0
 800def8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800defa:	2301      	movs	r3, #1
 800defc:	73fb      	strb	r3, [r7, #15]

  if (hpcd->Init.speed == PCD_SPEED_FULL)
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	79db      	ldrb	r3, [r3, #7]
 800df02:	2b02      	cmp	r3, #2
 800df04:	d102      	bne.n	800df0c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_FULL; 
 800df06:	2301      	movs	r3, #1
 800df08:	73fb      	strb	r3, [r7, #15]
 800df0a:	e008      	b.n	800df1e <HAL_PCD_ResetCallback+0x2c>
  }
  #if(!STM32F1_DEVICE)
  else if (hpcd->Init.speed == PCD_SPEED_HIGH)
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	79db      	ldrb	r3, [r3, #7]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d102      	bne.n	800df1a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_HIGH;
 800df14:	2300      	movs	r3, #0
 800df16:	73fb      	strb	r3, [r7, #15]
 800df18:	e001      	b.n	800df1e <HAL_PCD_ResetCallback+0x2c>
  }
  #endif
  else
  {
    Error_Handler();
 800df1a:	f7f5 f95d 	bl	80031d8 <Error_Handler>
  }
  /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef *)hpcd->pData, speed);
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800df24:	7bfa      	ldrb	r2, [r7, #15]
 800df26:	4611      	mov	r1, r2
 800df28:	4618      	mov	r0, r3
 800df2a:	f7ff f829 	bl	800cf80 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef *)hpcd->pData);
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800df34:	4618      	mov	r0, r3
 800df36:	f7fe ffda 	bl	800ceee <USBD_LL_Reset>
}
 800df3a:	bf00      	nop
 800df3c:	3710      	adds	r7, #16
 800df3e:	46bd      	mov	sp, r7
 800df40:	bd80      	pop	{r7, pc}
	...

0800df44 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df44:	b580      	push	{r7, lr}
 800df46:	b082      	sub	sp, #8
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef *)hpcd->pData);
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800df52:	4618      	mov	r0, r3
 800df54:	f7ff f824 	bl	800cfa0 <USBD_LL_Suspend>
#if (!STM32F1_DEVICE)
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	687a      	ldr	r2, [r7, #4]
 800df64:	6812      	ldr	r2, [r2, #0]
 800df66:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800df6a:	f043 0301 	orr.w	r3, r3, #1
 800df6e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	7adb      	ldrb	r3, [r3, #11]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d005      	beq.n	800df84 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800df78:	4b04      	ldr	r3, [pc, #16]	@ (800df8c <HAL_PCD_SuspendCallback+0x48>)
 800df7a:	691b      	ldr	r3, [r3, #16]
 800df7c:	4a03      	ldr	r2, [pc, #12]	@ (800df8c <HAL_PCD_SuspendCallback+0x48>)
 800df7e:	f043 0306 	orr.w	r3, r3, #6
 800df82:	6113      	str	r3, [r2, #16]
  }
#endif
  /* USER CODE END 2 */
}
 800df84:	bf00      	nop
 800df86:	3708      	adds	r7, #8
 800df88:	46bd      	mov	sp, r7
 800df8a:	bd80      	pop	{r7, pc}
 800df8c:	e000ed00 	.word	0xe000ed00

0800df90 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df90:	b580      	push	{r7, lr}
 800df92:	b082      	sub	sp, #8
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef *)hpcd->pData);
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800df9e:	4618      	mov	r0, r3
 800dfa0:	f7ff f814 	bl	800cfcc <USBD_LL_Resume>
}
 800dfa4:	bf00      	nop
 800dfa6:	3708      	adds	r7, #8
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	bd80      	pop	{r7, pc}

0800dfac <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b082      	sub	sp, #8
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
 800dfb4:	460b      	mov	r3, r1
 800dfb6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dfbe:	78fa      	ldrb	r2, [r7, #3]
 800dfc0:	4611      	mov	r1, r2
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	f7ff f862 	bl	800d08c <USBD_LL_IsoOUTIncomplete>
}
 800dfc8:	bf00      	nop
 800dfca:	3708      	adds	r7, #8
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	bd80      	pop	{r7, pc}

0800dfd0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b082      	sub	sp, #8
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	6078      	str	r0, [r7, #4]
 800dfd8:	460b      	mov	r3, r1
 800dfda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dfe2:	78fa      	ldrb	r2, [r7, #3]
 800dfe4:	4611      	mov	r1, r2
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	f7ff f82a 	bl	800d040 <USBD_LL_IsoINIncomplete>
}
 800dfec:	bf00      	nop
 800dfee:	3708      	adds	r7, #8
 800dff0:	46bd      	mov	sp, r7
 800dff2:	bd80      	pop	{r7, pc}

0800dff4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b082      	sub	sp, #8
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef *)hpcd->pData);
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e002:	4618      	mov	r0, r3
 800e004:	f7ff f868 	bl	800d0d8 <USBD_LL_DevConnected>
}
 800e008:	bf00      	nop
 800e00a:	3708      	adds	r7, #8
 800e00c:	46bd      	mov	sp, r7
 800e00e:	bd80      	pop	{r7, pc}

0800e010 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e010:	b580      	push	{r7, lr}
 800e012:	b082      	sub	sp, #8
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef *)hpcd->pData);
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e01e:	4618      	mov	r0, r3
 800e020:	f7ff f865 	bl	800d0ee <USBD_LL_DevDisconnected>
}
 800e024:	bf00      	nop
 800e026:	3708      	adds	r7, #8
 800e028:	46bd      	mov	sp, r7
 800e02a:	bd80      	pop	{r7, pc}

0800e02c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b084      	sub	sp, #16
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
#else
  /**FULL SPEED USB */
#if (STM32F1_DEVICE) /** for STM32F1 or similar */
  hpcd_USB_OTG_PTR = &hpcd_USB_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
#else
  hpcd_USB_OTG_PTR = &hpcd_USB_OTG_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
 800e034:	4b27      	ldr	r3, [pc, #156]	@ (800e0d4 <USBD_LL_Init+0xa8>)
 800e036:	4a28      	ldr	r2, [pc, #160]	@ (800e0d8 <USBD_LL_Init+0xac>)
 800e038:	601a      	str	r2, [r3, #0]
#endif

  if (pdev->id == DEVICE_FS)
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	781b      	ldrb	r3, [r3, #0]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d143      	bne.n	800e0ca <USBD_LL_Init+0x9e>
  {
    /* Link the driver to the stack. */
    hpcd_USB_OTG_PTR->pData = pdev;
 800e042:	4b24      	ldr	r3, [pc, #144]	@ (800e0d4 <USBD_LL_Init+0xa8>)
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	687a      	ldr	r2, [r7, #4]
 800e048:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
    pdev->pData = hpcd_USB_OTG_PTR;
 800e04c:	4b21      	ldr	r3, [pc, #132]	@ (800e0d4 <USBD_LL_Init+0xa8>)
 800e04e:	681a      	ldr	r2, [r3, #0]
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	f8c3 2310 	str.w	r2, [r3, #784]	@ 0x310
      pma_track += 8;
    }
#endif
#else /** if HAL_PCDEx_SetRxFiFo() is used by HAL driver */

    HAL_PCDEx_SetRxFiFoInBytes(hpcd_USB_OTG_PTR, 512); // ALL OUT EP Buffer
 800e056:	4b1f      	ldr	r3, [pc, #124]	@ (800e0d4 <USBD_LL_Init+0xa8>)
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800e05e:	4618      	mov	r0, r3
 800e060:	f7ff fee0 	bl	800de24 <HAL_PCDEx_SetRxFiFoInBytes>

    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, 0, 64); // EP0 IN
 800e064:	4b1b      	ldr	r3, [pc, #108]	@ (800e0d4 <USBD_LL_Init+0xa8>)
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	2240      	movs	r2, #64	@ 0x40
 800e06a:	2100      	movs	r1, #0
 800e06c:	4618      	mov	r0, r3
 800e06e:	f7ff fec4 	bl	800ddfa <HAL_PCDEx_SetTxFiFoInBytes>
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (HID_KEYBOARD_IN_EP & 0x7F), 64);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CUSTOM_HID_IN_EP & 0x7F), 64);
 800e072:	4b18      	ldr	r3, [pc, #96]	@ (800e0d4 <USBD_LL_Init+0xa8>)
 800e074:	6818      	ldr	r0, [r3, #0]
 800e076:	4b19      	ldr	r3, [pc, #100]	@ (800e0dc <USBD_LL_Init+0xb0>)
 800e078:	781b      	ldrb	r3, [r3, #0]
 800e07a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e07e:	b2db      	uxtb	r3, r3
 800e080:	2240      	movs	r2, #64	@ 0x40
 800e082:	4619      	mov	r1, r3
 800e084:	f7ff feb9 	bl	800ddfa <HAL_PCDEx_SetTxFiFoInBytes>
#endif
#if (USBD_USE_PRNTR == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (PRNT_IN_EP & 0x7F), 128);
#endif
#if (USBD_USE_CDC_ACM == 1)
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800e088:	2300      	movs	r3, #0
 800e08a:	73fb      	strb	r3, [r7, #15]
 800e08c:	e01a      	b.n	800e0c4 <USBD_LL_Init+0x98>
    {
      HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CDC_IN_EP[i] & 0x7F), 128);
 800e08e:	4b11      	ldr	r3, [pc, #68]	@ (800e0d4 <USBD_LL_Init+0xa8>)
 800e090:	6818      	ldr	r0, [r3, #0]
 800e092:	7bfb      	ldrb	r3, [r7, #15]
 800e094:	4a12      	ldr	r2, [pc, #72]	@ (800e0e0 <USBD_LL_Init+0xb4>)
 800e096:	5cd3      	ldrb	r3, [r2, r3]
 800e098:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e09c:	b2db      	uxtb	r3, r3
 800e09e:	2280      	movs	r2, #128	@ 0x80
 800e0a0:	4619      	mov	r1, r3
 800e0a2:	f7ff feaa 	bl	800ddfa <HAL_PCDEx_SetTxFiFoInBytes>
      HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CDC_CMD_EP[i] & 0x7F), 64);
 800e0a6:	4b0b      	ldr	r3, [pc, #44]	@ (800e0d4 <USBD_LL_Init+0xa8>)
 800e0a8:	6818      	ldr	r0, [r3, #0]
 800e0aa:	7bfb      	ldrb	r3, [r7, #15]
 800e0ac:	4a0d      	ldr	r2, [pc, #52]	@ (800e0e4 <USBD_LL_Init+0xb8>)
 800e0ae:	5cd3      	ldrb	r3, [r2, r3]
 800e0b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e0b4:	b2db      	uxtb	r3, r3
 800e0b6:	2240      	movs	r2, #64	@ 0x40
 800e0b8:	4619      	mov	r1, r3
 800e0ba:	f7ff fe9e 	bl	800ddfa <HAL_PCDEx_SetTxFiFoInBytes>
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800e0be:	7bfb      	ldrb	r3, [r7, #15]
 800e0c0:	3301      	adds	r3, #1
 800e0c2:	73fb      	strb	r3, [r7, #15]
 800e0c4:	7bfb      	ldrb	r3, [r7, #15]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d0e1      	beq.n	800e08e <USBD_LL_Init+0x62>
  HAL_PCD_RegisterDataOutStageCallback(hpcd_USB_OTG_PTR, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(hpcd_USB_OTG_PTR, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  return USBD_OK;
 800e0ca:	2300      	movs	r3, #0
}
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	3710      	adds	r7, #16
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	bd80      	pop	{r7, pc}
 800e0d4:	200019c0 	.word	0x200019c0
 800e0d8:	20000bc8 	.word	0x20000bc8
 800e0dc:	20000202 	.word	0x20000202
 800e0e0:	20001654 	.word	0x20001654
 800e0e4:	2000165c 	.word	0x2000165c

0800e0e8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b084      	sub	sp, #16
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800e0fe:	4618      	mov	r0, r3
 800e100:	f7f6 fe25 	bl	8004d4e <HAL_PCD_Start>
 800e104:	4603      	mov	r3, r0
 800e106:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800e108:	7bfb      	ldrb	r3, [r7, #15]
 800e10a:	4618      	mov	r0, r3
 800e10c:	f000 f92a 	bl	800e364 <USBD_Get_USB_Status>
 800e110:	4603      	mov	r3, r0
 800e112:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e114:	7bbb      	ldrb	r3, [r7, #14]
}
 800e116:	4618      	mov	r0, r3
 800e118:	3710      	adds	r7, #16
 800e11a:	46bd      	mov	sp, r7
 800e11c:	bd80      	pop	{r7, pc}

0800e11e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e11e:	b580      	push	{r7, lr}
 800e120:	b084      	sub	sp, #16
 800e122:	af00      	add	r7, sp, #0
 800e124:	6078      	str	r0, [r7, #4]
 800e126:	4608      	mov	r0, r1
 800e128:	4611      	mov	r1, r2
 800e12a:	461a      	mov	r2, r3
 800e12c:	4603      	mov	r3, r0
 800e12e:	70fb      	strb	r3, [r7, #3]
 800e130:	460b      	mov	r3, r1
 800e132:	70bb      	strb	r3, [r7, #2]
 800e134:	4613      	mov	r3, r2
 800e136:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e138:	2300      	movs	r3, #0
 800e13a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e13c:	2300      	movs	r3, #0
 800e13e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 800e146:	78bb      	ldrb	r3, [r7, #2]
 800e148:	883a      	ldrh	r2, [r7, #0]
 800e14a:	78f9      	ldrb	r1, [r7, #3]
 800e14c:	f7f7 fb26 	bl	800579c <HAL_PCD_EP_Open>
 800e150:	4603      	mov	r3, r0
 800e152:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800e154:	7bfb      	ldrb	r3, [r7, #15]
 800e156:	4618      	mov	r0, r3
 800e158:	f000 f904 	bl	800e364 <USBD_Get_USB_Status>
 800e15c:	4603      	mov	r3, r0
 800e15e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e160:	7bbb      	ldrb	r3, [r7, #14]
}
 800e162:	4618      	mov	r0, r3
 800e164:	3710      	adds	r7, #16
 800e166:	46bd      	mov	sp, r7
 800e168:	bd80      	pop	{r7, pc}

0800e16a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e16a:	b580      	push	{r7, lr}
 800e16c:	b084      	sub	sp, #16
 800e16e:	af00      	add	r7, sp, #0
 800e170:	6078      	str	r0, [r7, #4]
 800e172:	460b      	mov	r3, r1
 800e174:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e176:	2300      	movs	r3, #0
 800e178:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e17a:	2300      	movs	r3, #0
 800e17c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800e184:	78fa      	ldrb	r2, [r7, #3]
 800e186:	4611      	mov	r1, r2
 800e188:	4618      	mov	r0, r3
 800e18a:	f7f7 fb71 	bl	8005870 <HAL_PCD_EP_Close>
 800e18e:	4603      	mov	r3, r0
 800e190:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800e192:	7bfb      	ldrb	r3, [r7, #15]
 800e194:	4618      	mov	r0, r3
 800e196:	f000 f8e5 	bl	800e364 <USBD_Get_USB_Status>
 800e19a:	4603      	mov	r3, r0
 800e19c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e19e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	3710      	adds	r7, #16
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	bd80      	pop	{r7, pc}

0800e1a8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b084      	sub	sp, #16
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
 800e1b0:	460b      	mov	r3, r1
 800e1b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800e1c2:	78fa      	ldrb	r2, [r7, #3]
 800e1c4:	4611      	mov	r1, r2
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	f7f7 fc29 	bl	8005a1e <HAL_PCD_EP_SetStall>
 800e1cc:	4603      	mov	r3, r0
 800e1ce:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800e1d0:	7bfb      	ldrb	r3, [r7, #15]
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	f000 f8c6 	bl	800e364 <USBD_Get_USB_Status>
 800e1d8:	4603      	mov	r3, r0
 800e1da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e1dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800e1de:	4618      	mov	r0, r3
 800e1e0:	3710      	adds	r7, #16
 800e1e2:	46bd      	mov	sp, r7
 800e1e4:	bd80      	pop	{r7, pc}

0800e1e6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e1e6:	b580      	push	{r7, lr}
 800e1e8:	b084      	sub	sp, #16
 800e1ea:	af00      	add	r7, sp, #0
 800e1ec:	6078      	str	r0, [r7, #4]
 800e1ee:	460b      	mov	r3, r1
 800e1f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800e200:	78fa      	ldrb	r2, [r7, #3]
 800e202:	4611      	mov	r1, r2
 800e204:	4618      	mov	r0, r3
 800e206:	f7f7 fc6d 	bl	8005ae4 <HAL_PCD_EP_ClrStall>
 800e20a:	4603      	mov	r3, r0
 800e20c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800e20e:	7bfb      	ldrb	r3, [r7, #15]
 800e210:	4618      	mov	r0, r3
 800e212:	f000 f8a7 	bl	800e364 <USBD_Get_USB_Status>
 800e216:	4603      	mov	r3, r0
 800e218:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e21a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e21c:	4618      	mov	r0, r3
 800e21e:	3710      	adds	r7, #16
 800e220:	46bd      	mov	sp, r7
 800e222:	bd80      	pop	{r7, pc}

0800e224 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e224:	b480      	push	{r7}
 800e226:	b085      	sub	sp, #20
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
 800e22c:	460b      	mov	r3, r1
 800e22e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800e236:	60fb      	str	r3, [r7, #12]

  if ((ep_addr & 0x80) == 0x80)
 800e238:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	da0b      	bge.n	800e258 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e240:	78fb      	ldrb	r3, [r7, #3]
 800e242:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e246:	68f9      	ldr	r1, [r7, #12]
 800e248:	4613      	mov	r3, r2
 800e24a:	00db      	lsls	r3, r3, #3
 800e24c:	4413      	add	r3, r2
 800e24e:	009b      	lsls	r3, r3, #2
 800e250:	440b      	add	r3, r1
 800e252:	3316      	adds	r3, #22
 800e254:	781b      	ldrb	r3, [r3, #0]
 800e256:	e00b      	b.n	800e270 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e258:	78fb      	ldrb	r3, [r7, #3]
 800e25a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e25e:	68f9      	ldr	r1, [r7, #12]
 800e260:	4613      	mov	r3, r2
 800e262:	00db      	lsls	r3, r3, #3
 800e264:	4413      	add	r3, r2
 800e266:	009b      	lsls	r3, r3, #2
 800e268:	440b      	add	r3, r1
 800e26a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800e26e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e270:	4618      	mov	r0, r3
 800e272:	3714      	adds	r7, #20
 800e274:	46bd      	mov	sp, r7
 800e276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27a:	4770      	bx	lr

0800e27c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b084      	sub	sp, #16
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
 800e284:	460b      	mov	r3, r1
 800e286:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e288:	2300      	movs	r3, #0
 800e28a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e28c:	2300      	movs	r3, #0
 800e28e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800e296:	78fa      	ldrb	r2, [r7, #3]
 800e298:	4611      	mov	r1, r2
 800e29a:	4618      	mov	r0, r3
 800e29c:	f7f7 fa5a 	bl	8005754 <HAL_PCD_SetAddress>
 800e2a0:	4603      	mov	r3, r0
 800e2a2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800e2a4:	7bfb      	ldrb	r3, [r7, #15]
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	f000 f85c 	bl	800e364 <USBD_Get_USB_Status>
 800e2ac:	4603      	mov	r3, r0
 800e2ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e2b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	3710      	adds	r7, #16
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	bd80      	pop	{r7, pc}

0800e2ba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e2ba:	b580      	push	{r7, lr}
 800e2bc:	b086      	sub	sp, #24
 800e2be:	af00      	add	r7, sp, #0
 800e2c0:	60f8      	str	r0, [r7, #12]
 800e2c2:	607a      	str	r2, [r7, #4]
 800e2c4:	603b      	str	r3, [r7, #0]
 800e2c6:	460b      	mov	r3, r1
 800e2c8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 800e2d8:	7af9      	ldrb	r1, [r7, #11]
 800e2da:	683b      	ldr	r3, [r7, #0]
 800e2dc:	687a      	ldr	r2, [r7, #4]
 800e2de:	f7f7 fb64 	bl	80059aa <HAL_PCD_EP_Transmit>
 800e2e2:	4603      	mov	r3, r0
 800e2e4:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 800e2e6:	7dfb      	ldrb	r3, [r7, #23]
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	f000 f83b 	bl	800e364 <USBD_Get_USB_Status>
 800e2ee:	4603      	mov	r3, r0
 800e2f0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e2f2:	7dbb      	ldrb	r3, [r7, #22]
}
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	3718      	adds	r7, #24
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	bd80      	pop	{r7, pc}

0800e2fc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	b086      	sub	sp, #24
 800e300:	af00      	add	r7, sp, #0
 800e302:	60f8      	str	r0, [r7, #12]
 800e304:	607a      	str	r2, [r7, #4]
 800e306:	603b      	str	r3, [r7, #0]
 800e308:	460b      	mov	r3, r1
 800e30a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e30c:	2300      	movs	r3, #0
 800e30e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e310:	2300      	movs	r3, #0
 800e312:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 800e31a:	7af9      	ldrb	r1, [r7, #11]
 800e31c:	683b      	ldr	r3, [r7, #0]
 800e31e:	687a      	ldr	r2, [r7, #4]
 800e320:	f7f7 faf0 	bl	8005904 <HAL_PCD_EP_Receive>
 800e324:	4603      	mov	r3, r0
 800e326:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 800e328:	7dfb      	ldrb	r3, [r7, #23]
 800e32a:	4618      	mov	r0, r3
 800e32c:	f000 f81a 	bl	800e364 <USBD_Get_USB_Status>
 800e330:	4603      	mov	r3, r0
 800e332:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e334:	7dbb      	ldrb	r3, [r7, #22]
}
 800e336:	4618      	mov	r0, r3
 800e338:	3718      	adds	r7, #24
 800e33a:	46bd      	mov	sp, r7
 800e33c:	bd80      	pop	{r7, pc}

0800e33e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e33e:	b580      	push	{r7, lr}
 800e340:	b082      	sub	sp, #8
 800e342:	af00      	add	r7, sp, #0
 800e344:	6078      	str	r0, [r7, #4]
 800e346:	460b      	mov	r3, r1
 800e348:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef *)pdev->pData, ep_addr);
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800e350:	78fa      	ldrb	r2, [r7, #3]
 800e352:	4611      	mov	r1, r2
 800e354:	4618      	mov	r0, r3
 800e356:	f7f7 fb10 	bl	800597a <HAL_PCD_EP_GetRxCount>
 800e35a:	4603      	mov	r3, r0
}
 800e35c:	4618      	mov	r0, r3
 800e35e:	3708      	adds	r7, #8
 800e360:	46bd      	mov	sp, r7
 800e362:	bd80      	pop	{r7, pc}

0800e364 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e364:	b480      	push	{r7}
 800e366:	b085      	sub	sp, #20
 800e368:	af00      	add	r7, sp, #0
 800e36a:	4603      	mov	r3, r0
 800e36c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e36e:	2300      	movs	r3, #0
 800e370:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e372:	79fb      	ldrb	r3, [r7, #7]
 800e374:	2b03      	cmp	r3, #3
 800e376:	d817      	bhi.n	800e3a8 <USBD_Get_USB_Status+0x44>
 800e378:	a201      	add	r2, pc, #4	@ (adr r2, 800e380 <USBD_Get_USB_Status+0x1c>)
 800e37a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e37e:	bf00      	nop
 800e380:	0800e391 	.word	0x0800e391
 800e384:	0800e397 	.word	0x0800e397
 800e388:	0800e39d 	.word	0x0800e39d
 800e38c:	0800e3a3 	.word	0x0800e3a3
  {
  case HAL_OK:
    usb_status = USBD_OK;
 800e390:	2300      	movs	r3, #0
 800e392:	73fb      	strb	r3, [r7, #15]
    break;
 800e394:	e00b      	b.n	800e3ae <USBD_Get_USB_Status+0x4a>
  case HAL_ERROR:
    usb_status = USBD_FAIL;
 800e396:	2303      	movs	r3, #3
 800e398:	73fb      	strb	r3, [r7, #15]
    break;
 800e39a:	e008      	b.n	800e3ae <USBD_Get_USB_Status+0x4a>
  case HAL_BUSY:
    usb_status = USBD_BUSY;
 800e39c:	2301      	movs	r3, #1
 800e39e:	73fb      	strb	r3, [r7, #15]
    break;
 800e3a0:	e005      	b.n	800e3ae <USBD_Get_USB_Status+0x4a>
  case HAL_TIMEOUT:
    usb_status = USBD_FAIL;
 800e3a2:	2303      	movs	r3, #3
 800e3a4:	73fb      	strb	r3, [r7, #15]
    break;
 800e3a6:	e002      	b.n	800e3ae <USBD_Get_USB_Status+0x4a>
  default:
    usb_status = USBD_FAIL;
 800e3a8:	2303      	movs	r3, #3
 800e3aa:	73fb      	strb	r3, [r7, #15]
    break;
 800e3ac:	bf00      	nop
  }
  return usb_status;
 800e3ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	3714      	adds	r7, #20
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ba:	4770      	bx	lr

0800e3bc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800e3bc:	b480      	push	{r7}
 800e3be:	b085      	sub	sp, #20
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	4603      	mov	r3, r0
 800e3c4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800e3ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e3ce:	2b84      	cmp	r3, #132	@ 0x84
 800e3d0:	d005      	beq.n	800e3de <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800e3d2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	4413      	add	r3, r2
 800e3da:	3303      	adds	r3, #3
 800e3dc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800e3de:	68fb      	ldr	r3, [r7, #12]
}
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	3714      	adds	r7, #20
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ea:	4770      	bx	lr

0800e3ec <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800e3ec:	b480      	push	{r7}
 800e3ee:	b083      	sub	sp, #12
 800e3f0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e3f2:	f3ef 8305 	mrs	r3, IPSR
 800e3f6:	607b      	str	r3, [r7, #4]
  return(result);
 800e3f8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	bf14      	ite	ne
 800e3fe:	2301      	movne	r3, #1
 800e400:	2300      	moveq	r3, #0
 800e402:	b2db      	uxtb	r3, r3
}
 800e404:	4618      	mov	r0, r3
 800e406:	370c      	adds	r7, #12
 800e408:	46bd      	mov	sp, r7
 800e40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40e:	4770      	bx	lr

0800e410 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800e410:	b580      	push	{r7, lr}
 800e412:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800e414:	f001 f982 	bl	800f71c <vTaskStartScheduler>
  
  return osOK;
 800e418:	2300      	movs	r3, #0
}
 800e41a:	4618      	mov	r0, r3
 800e41c:	bd80      	pop	{r7, pc}

0800e41e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800e41e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e420:	b089      	sub	sp, #36	@ 0x24
 800e422:	af04      	add	r7, sp, #16
 800e424:	6078      	str	r0, [r7, #4]
 800e426:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	695b      	ldr	r3, [r3, #20]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d020      	beq.n	800e472 <osThreadCreate+0x54>
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	699b      	ldr	r3, [r3, #24]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d01c      	beq.n	800e472 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	685c      	ldr	r4, [r3, #4]
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	691e      	ldr	r6, [r3, #16]
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e44a:	4618      	mov	r0, r3
 800e44c:	f7ff ffb6 	bl	800e3bc <makeFreeRtosPriority>
 800e450:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	695b      	ldr	r3, [r3, #20]
 800e456:	687a      	ldr	r2, [r7, #4]
 800e458:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e45a:	9202      	str	r2, [sp, #8]
 800e45c:	9301      	str	r3, [sp, #4]
 800e45e:	9100      	str	r1, [sp, #0]
 800e460:	683b      	ldr	r3, [r7, #0]
 800e462:	4632      	mov	r2, r6
 800e464:	4629      	mov	r1, r5
 800e466:	4620      	mov	r0, r4
 800e468:	f000 ff72 	bl	800f350 <xTaskCreateStatic>
 800e46c:	4603      	mov	r3, r0
 800e46e:	60fb      	str	r3, [r7, #12]
 800e470:	e01c      	b.n	800e4ac <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	685c      	ldr	r4, [r3, #4]
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e47e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e486:	4618      	mov	r0, r3
 800e488:	f7ff ff98 	bl	800e3bc <makeFreeRtosPriority>
 800e48c:	4602      	mov	r2, r0
 800e48e:	f107 030c 	add.w	r3, r7, #12
 800e492:	9301      	str	r3, [sp, #4]
 800e494:	9200      	str	r2, [sp, #0]
 800e496:	683b      	ldr	r3, [r7, #0]
 800e498:	4632      	mov	r2, r6
 800e49a:	4629      	mov	r1, r5
 800e49c:	4620      	mov	r0, r4
 800e49e:	f000 ffb7 	bl	800f410 <xTaskCreate>
 800e4a2:	4603      	mov	r3, r0
 800e4a4:	2b01      	cmp	r3, #1
 800e4a6:	d001      	beq.n	800e4ac <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	e000      	b.n	800e4ae <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800e4ac:	68fb      	ldr	r3, [r7, #12]
}
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	3714      	adds	r7, #20
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e4b6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800e4b6:	b580      	push	{r7, lr}
 800e4b8:	b084      	sub	sp, #16
 800e4ba:	af00      	add	r7, sp, #0
 800e4bc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d001      	beq.n	800e4cc <osDelay+0x16>
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	e000      	b.n	800e4ce <osDelay+0x18>
 800e4cc:	2301      	movs	r3, #1
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	f001 f8ee 	bl	800f6b0 <vTaskDelay>
  
  return osOK;
 800e4d4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	3710      	adds	r7, #16
 800e4da:	46bd      	mov	sp, r7
 800e4dc:	bd80      	pop	{r7, pc}
	...

0800e4e0 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b086      	sub	sp, #24
 800e4e4:	af02      	add	r7, sp, #8
 800e4e6:	6078      	str	r0, [r7, #4]
 800e4e8:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 800e4f2:	f7ff ff7b 	bl	800e3ec <inHandlerMode>
 800e4f6:	4603      	mov	r3, r0
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d01c      	beq.n	800e536 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 800e4fc:	6839      	ldr	r1, [r7, #0]
 800e4fe:	f107 0208 	add.w	r2, r7, #8
 800e502:	f107 030c 	add.w	r3, r7, #12
 800e506:	9300      	str	r3, [sp, #0]
 800e508:	4613      	mov	r3, r2
 800e50a:	2201      	movs	r2, #1
 800e50c:	6878      	ldr	r0, [r7, #4]
 800e50e:	f001 fff3 	bl	80104f8 <xTaskGenericNotifyFromISR>
 800e512:	4603      	mov	r3, r0
 800e514:	2b01      	cmp	r3, #1
 800e516:	d002      	beq.n	800e51e <osSignalSet+0x3e>
      return 0x80000000;
 800e518:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e51c:	e019      	b.n	800e552 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d015      	beq.n	800e550 <osSignalSet+0x70>
 800e524:	4b0d      	ldr	r3, [pc, #52]	@ (800e55c <osSignalSet+0x7c>)
 800e526:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e52a:	601a      	str	r2, [r3, #0]
 800e52c:	f3bf 8f4f 	dsb	sy
 800e530:	f3bf 8f6f 	isb	sy
 800e534:	e00c      	b.n	800e550 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 800e536:	6839      	ldr	r1, [r7, #0]
 800e538:	f107 0308 	add.w	r3, r7, #8
 800e53c:	2201      	movs	r2, #1
 800e53e:	6878      	ldr	r0, [r7, #4]
 800e540:	f001 ff18 	bl	8010374 <xTaskGenericNotify>
 800e544:	4603      	mov	r3, r0
 800e546:	2b01      	cmp	r3, #1
 800e548:	d002      	beq.n	800e550 <osSignalSet+0x70>
    return 0x80000000;
 800e54a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e54e:	e000      	b.n	800e552 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 800e550:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 800e552:	4618      	mov	r0, r3
 800e554:	3710      	adds	r7, #16
 800e556:	46bd      	mov	sp, r7
 800e558:	bd80      	pop	{r7, pc}
 800e55a:	bf00      	nop
 800e55c:	e000ed04 	.word	0xe000ed04

0800e560 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800e560:	b580      	push	{r7, lr}
 800e562:	b086      	sub	sp, #24
 800e564:	af02      	add	r7, sp, #8
 800e566:	6078      	str	r0, [r7, #4]
 800e568:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	685b      	ldr	r3, [r3, #4]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d00f      	beq.n	800e592 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800e572:	683b      	ldr	r3, [r7, #0]
 800e574:	2b01      	cmp	r3, #1
 800e576:	d10a      	bne.n	800e58e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	685b      	ldr	r3, [r3, #4]
 800e57c:	2203      	movs	r2, #3
 800e57e:	9200      	str	r2, [sp, #0]
 800e580:	2200      	movs	r2, #0
 800e582:	2100      	movs	r1, #0
 800e584:	2001      	movs	r0, #1
 800e586:	f000 f9bf 	bl	800e908 <xQueueGenericCreateStatic>
 800e58a:	4603      	mov	r3, r0
 800e58c:	e016      	b.n	800e5bc <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800e58e:	2300      	movs	r3, #0
 800e590:	e014      	b.n	800e5bc <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800e592:	683b      	ldr	r3, [r7, #0]
 800e594:	2b01      	cmp	r3, #1
 800e596:	d110      	bne.n	800e5ba <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800e598:	2203      	movs	r2, #3
 800e59a:	2100      	movs	r1, #0
 800e59c:	2001      	movs	r0, #1
 800e59e:	f000 fa30 	bl	800ea02 <xQueueGenericCreate>
 800e5a2:	60f8      	str	r0, [r7, #12]
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d005      	beq.n	800e5b6 <osSemaphoreCreate+0x56>
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	2200      	movs	r2, #0
 800e5ae:	2100      	movs	r1, #0
 800e5b0:	68f8      	ldr	r0, [r7, #12]
 800e5b2:	f000 fa81 	bl	800eab8 <xQueueGenericSend>
      return sema;
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	e000      	b.n	800e5bc <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800e5ba:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800e5bc:	4618      	mov	r0, r3
 800e5be:	3710      	adds	r7, #16
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	bd80      	pop	{r7, pc}

0800e5c4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	b084      	sub	sp, #16
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
 800e5cc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d101      	bne.n	800e5dc <osSemaphoreWait+0x18>
    return osErrorParameter;
 800e5d8:	2380      	movs	r3, #128	@ 0x80
 800e5da:	e03a      	b.n	800e652 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800e5dc:	2300      	movs	r3, #0
 800e5de:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800e5e0:	683b      	ldr	r3, [r7, #0]
 800e5e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5e6:	d103      	bne.n	800e5f0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800e5e8:	f04f 33ff 	mov.w	r3, #4294967295
 800e5ec:	60fb      	str	r3, [r7, #12]
 800e5ee:	e009      	b.n	800e604 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800e5f0:	683b      	ldr	r3, [r7, #0]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d006      	beq.n	800e604 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800e5f6:	683b      	ldr	r3, [r7, #0]
 800e5f8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d101      	bne.n	800e604 <osSemaphoreWait+0x40>
      ticks = 1;
 800e600:	2301      	movs	r3, #1
 800e602:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800e604:	f7ff fef2 	bl	800e3ec <inHandlerMode>
 800e608:	4603      	mov	r3, r0
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d017      	beq.n	800e63e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e60e:	f107 0308 	add.w	r3, r7, #8
 800e612:	461a      	mov	r2, r3
 800e614:	2100      	movs	r1, #0
 800e616:	6878      	ldr	r0, [r7, #4]
 800e618:	f000 fcf0 	bl	800effc <xQueueReceiveFromISR>
 800e61c:	4603      	mov	r3, r0
 800e61e:	2b01      	cmp	r3, #1
 800e620:	d001      	beq.n	800e626 <osSemaphoreWait+0x62>
      return osErrorOS;
 800e622:	23ff      	movs	r3, #255	@ 0xff
 800e624:	e015      	b.n	800e652 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800e626:	68bb      	ldr	r3, [r7, #8]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d011      	beq.n	800e650 <osSemaphoreWait+0x8c>
 800e62c:	4b0b      	ldr	r3, [pc, #44]	@ (800e65c <osSemaphoreWait+0x98>)
 800e62e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e632:	601a      	str	r2, [r3, #0]
 800e634:	f3bf 8f4f 	dsb	sy
 800e638:	f3bf 8f6f 	isb	sy
 800e63c:	e008      	b.n	800e650 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800e63e:	68f9      	ldr	r1, [r7, #12]
 800e640:	6878      	ldr	r0, [r7, #4]
 800e642:	f000 fbcb 	bl	800eddc <xQueueSemaphoreTake>
 800e646:	4603      	mov	r3, r0
 800e648:	2b01      	cmp	r3, #1
 800e64a:	d001      	beq.n	800e650 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800e64c:	23ff      	movs	r3, #255	@ 0xff
 800e64e:	e000      	b.n	800e652 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800e650:	2300      	movs	r3, #0
}
 800e652:	4618      	mov	r0, r3
 800e654:	3710      	adds	r7, #16
 800e656:	46bd      	mov	sp, r7
 800e658:	bd80      	pop	{r7, pc}
 800e65a:	bf00      	nop
 800e65c:	e000ed04 	.word	0xe000ed04

0800e660 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800e660:	b580      	push	{r7, lr}
 800e662:	b084      	sub	sp, #16
 800e664:	af00      	add	r7, sp, #0
 800e666:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800e668:	2300      	movs	r3, #0
 800e66a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800e66c:	2300      	movs	r3, #0
 800e66e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800e670:	f7ff febc 	bl	800e3ec <inHandlerMode>
 800e674:	4603      	mov	r3, r0
 800e676:	2b00      	cmp	r3, #0
 800e678:	d016      	beq.n	800e6a8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e67a:	f107 0308 	add.w	r3, r7, #8
 800e67e:	4619      	mov	r1, r3
 800e680:	6878      	ldr	r0, [r7, #4]
 800e682:	f000 fb1b 	bl	800ecbc <xQueueGiveFromISR>
 800e686:	4603      	mov	r3, r0
 800e688:	2b01      	cmp	r3, #1
 800e68a:	d001      	beq.n	800e690 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800e68c:	23ff      	movs	r3, #255	@ 0xff
 800e68e:	e017      	b.n	800e6c0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e690:	68bb      	ldr	r3, [r7, #8]
 800e692:	2b00      	cmp	r3, #0
 800e694:	d013      	beq.n	800e6be <osSemaphoreRelease+0x5e>
 800e696:	4b0c      	ldr	r3, [pc, #48]	@ (800e6c8 <osSemaphoreRelease+0x68>)
 800e698:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e69c:	601a      	str	r2, [r3, #0]
 800e69e:	f3bf 8f4f 	dsb	sy
 800e6a2:	f3bf 8f6f 	isb	sy
 800e6a6:	e00a      	b.n	800e6be <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	2200      	movs	r2, #0
 800e6ac:	2100      	movs	r1, #0
 800e6ae:	6878      	ldr	r0, [r7, #4]
 800e6b0:	f000 fa02 	bl	800eab8 <xQueueGenericSend>
 800e6b4:	4603      	mov	r3, r0
 800e6b6:	2b01      	cmp	r3, #1
 800e6b8:	d001      	beq.n	800e6be <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800e6ba:	23ff      	movs	r3, #255	@ 0xff
 800e6bc:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800e6be:	68fb      	ldr	r3, [r7, #12]
}
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	3710      	adds	r7, #16
 800e6c4:	46bd      	mov	sp, r7
 800e6c6:	bd80      	pop	{r7, pc}
 800e6c8:	e000ed04 	.word	0xe000ed04

0800e6cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e6cc:	b480      	push	{r7}
 800e6ce:	b083      	sub	sp, #12
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	f103 0208 	add.w	r2, r3, #8
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	f04f 32ff 	mov.w	r2, #4294967295
 800e6e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	f103 0208 	add.w	r2, r3, #8
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	f103 0208 	add.w	r2, r3, #8
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	2200      	movs	r2, #0
 800e6fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e700:	bf00      	nop
 800e702:	370c      	adds	r7, #12
 800e704:	46bd      	mov	sp, r7
 800e706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70a:	4770      	bx	lr

0800e70c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e70c:	b480      	push	{r7}
 800e70e:	b083      	sub	sp, #12
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	2200      	movs	r2, #0
 800e718:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e71a:	bf00      	nop
 800e71c:	370c      	adds	r7, #12
 800e71e:	46bd      	mov	sp, r7
 800e720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e724:	4770      	bx	lr

0800e726 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e726:	b480      	push	{r7}
 800e728:	b085      	sub	sp, #20
 800e72a:	af00      	add	r7, sp, #0
 800e72c:	6078      	str	r0, [r7, #4]
 800e72e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	685b      	ldr	r3, [r3, #4]
 800e734:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e736:	683b      	ldr	r3, [r7, #0]
 800e738:	68fa      	ldr	r2, [r7, #12]
 800e73a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	689a      	ldr	r2, [r3, #8]
 800e740:	683b      	ldr	r3, [r7, #0]
 800e742:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	689b      	ldr	r3, [r3, #8]
 800e748:	683a      	ldr	r2, [r7, #0]
 800e74a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	683a      	ldr	r2, [r7, #0]
 800e750:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e752:	683b      	ldr	r3, [r7, #0]
 800e754:	687a      	ldr	r2, [r7, #4]
 800e756:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	1c5a      	adds	r2, r3, #1
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	601a      	str	r2, [r3, #0]
}
 800e762:	bf00      	nop
 800e764:	3714      	adds	r7, #20
 800e766:	46bd      	mov	sp, r7
 800e768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76c:	4770      	bx	lr

0800e76e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e76e:	b480      	push	{r7}
 800e770:	b085      	sub	sp, #20
 800e772:	af00      	add	r7, sp, #0
 800e774:	6078      	str	r0, [r7, #4]
 800e776:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e778:	683b      	ldr	r3, [r7, #0]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e77e:	68bb      	ldr	r3, [r7, #8]
 800e780:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e784:	d103      	bne.n	800e78e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	691b      	ldr	r3, [r3, #16]
 800e78a:	60fb      	str	r3, [r7, #12]
 800e78c:	e00c      	b.n	800e7a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	3308      	adds	r3, #8
 800e792:	60fb      	str	r3, [r7, #12]
 800e794:	e002      	b.n	800e79c <vListInsert+0x2e>
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	685b      	ldr	r3, [r3, #4]
 800e79a:	60fb      	str	r3, [r7, #12]
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	685b      	ldr	r3, [r3, #4]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	68ba      	ldr	r2, [r7, #8]
 800e7a4:	429a      	cmp	r2, r3
 800e7a6:	d2f6      	bcs.n	800e796 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	685a      	ldr	r2, [r3, #4]
 800e7ac:	683b      	ldr	r3, [r7, #0]
 800e7ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e7b0:	683b      	ldr	r3, [r7, #0]
 800e7b2:	685b      	ldr	r3, [r3, #4]
 800e7b4:	683a      	ldr	r2, [r7, #0]
 800e7b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e7b8:	683b      	ldr	r3, [r7, #0]
 800e7ba:	68fa      	ldr	r2, [r7, #12]
 800e7bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	683a      	ldr	r2, [r7, #0]
 800e7c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e7c4:	683b      	ldr	r3, [r7, #0]
 800e7c6:	687a      	ldr	r2, [r7, #4]
 800e7c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	1c5a      	adds	r2, r3, #1
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	601a      	str	r2, [r3, #0]
}
 800e7d4:	bf00      	nop
 800e7d6:	3714      	adds	r7, #20
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7de:	4770      	bx	lr

0800e7e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e7e0:	b480      	push	{r7}
 800e7e2:	b085      	sub	sp, #20
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	691b      	ldr	r3, [r3, #16]
 800e7ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	685b      	ldr	r3, [r3, #4]
 800e7f2:	687a      	ldr	r2, [r7, #4]
 800e7f4:	6892      	ldr	r2, [r2, #8]
 800e7f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	689b      	ldr	r3, [r3, #8]
 800e7fc:	687a      	ldr	r2, [r7, #4]
 800e7fe:	6852      	ldr	r2, [r2, #4]
 800e800:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	685b      	ldr	r3, [r3, #4]
 800e806:	687a      	ldr	r2, [r7, #4]
 800e808:	429a      	cmp	r2, r3
 800e80a:	d103      	bne.n	800e814 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	689a      	ldr	r2, [r3, #8]
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	2200      	movs	r2, #0
 800e818:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	1e5a      	subs	r2, r3, #1
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	681b      	ldr	r3, [r3, #0]
}
 800e828:	4618      	mov	r0, r3
 800e82a:	3714      	adds	r7, #20
 800e82c:	46bd      	mov	sp, r7
 800e82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e832:	4770      	bx	lr

0800e834 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e834:	b580      	push	{r7, lr}
 800e836:	b084      	sub	sp, #16
 800e838:	af00      	add	r7, sp, #0
 800e83a:	6078      	str	r0, [r7, #4]
 800e83c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d10b      	bne.n	800e860 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e84c:	f383 8811 	msr	BASEPRI, r3
 800e850:	f3bf 8f6f 	isb	sy
 800e854:	f3bf 8f4f 	dsb	sy
 800e858:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e85a:	bf00      	nop
 800e85c:	bf00      	nop
 800e85e:	e7fd      	b.n	800e85c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e860:	f002 f8ca 	bl	80109f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	681a      	ldr	r2, [r3, #0]
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e86c:	68f9      	ldr	r1, [r7, #12]
 800e86e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800e870:	fb01 f303 	mul.w	r3, r1, r3
 800e874:	441a      	add	r2, r3
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	2200      	movs	r2, #0
 800e87e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	681a      	ldr	r2, [r3, #0]
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	681a      	ldr	r2, [r3, #0]
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e890:	3b01      	subs	r3, #1
 800e892:	68f9      	ldr	r1, [r7, #12]
 800e894:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800e896:	fb01 f303 	mul.w	r3, r1, r3
 800e89a:	441a      	add	r2, r3
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	22ff      	movs	r2, #255	@ 0xff
 800e8a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	22ff      	movs	r2, #255	@ 0xff
 800e8ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800e8b0:	683b      	ldr	r3, [r7, #0]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d114      	bne.n	800e8e0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	691b      	ldr	r3, [r3, #16]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d01a      	beq.n	800e8f4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	3310      	adds	r3, #16
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	f001 f984 	bl	800fbd0 <xTaskRemoveFromEventList>
 800e8c8:	4603      	mov	r3, r0
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d012      	beq.n	800e8f4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e8ce:	4b0d      	ldr	r3, [pc, #52]	@ (800e904 <xQueueGenericReset+0xd0>)
 800e8d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e8d4:	601a      	str	r2, [r3, #0]
 800e8d6:	f3bf 8f4f 	dsb	sy
 800e8da:	f3bf 8f6f 	isb	sy
 800e8de:	e009      	b.n	800e8f4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	3310      	adds	r3, #16
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	f7ff fef1 	bl	800e6cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	3324      	adds	r3, #36	@ 0x24
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	f7ff feec 	bl	800e6cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e8f4:	f002 f8b2 	bl	8010a5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e8f8:	2301      	movs	r3, #1
}
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	3710      	adds	r7, #16
 800e8fe:	46bd      	mov	sp, r7
 800e900:	bd80      	pop	{r7, pc}
 800e902:	bf00      	nop
 800e904:	e000ed04 	.word	0xe000ed04

0800e908 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e908:	b580      	push	{r7, lr}
 800e90a:	b08e      	sub	sp, #56	@ 0x38
 800e90c:	af02      	add	r7, sp, #8
 800e90e:	60f8      	str	r0, [r7, #12]
 800e910:	60b9      	str	r1, [r7, #8]
 800e912:	607a      	str	r2, [r7, #4]
 800e914:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d10b      	bne.n	800e934 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800e91c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e920:	f383 8811 	msr	BASEPRI, r3
 800e924:	f3bf 8f6f 	isb	sy
 800e928:	f3bf 8f4f 	dsb	sy
 800e92c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e92e:	bf00      	nop
 800e930:	bf00      	nop
 800e932:	e7fd      	b.n	800e930 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e934:	683b      	ldr	r3, [r7, #0]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d10b      	bne.n	800e952 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800e93a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e93e:	f383 8811 	msr	BASEPRI, r3
 800e942:	f3bf 8f6f 	isb	sy
 800e946:	f3bf 8f4f 	dsb	sy
 800e94a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e94c:	bf00      	nop
 800e94e:	bf00      	nop
 800e950:	e7fd      	b.n	800e94e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d002      	beq.n	800e95e <xQueueGenericCreateStatic+0x56>
 800e958:	68bb      	ldr	r3, [r7, #8]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d001      	beq.n	800e962 <xQueueGenericCreateStatic+0x5a>
 800e95e:	2301      	movs	r3, #1
 800e960:	e000      	b.n	800e964 <xQueueGenericCreateStatic+0x5c>
 800e962:	2300      	movs	r3, #0
 800e964:	2b00      	cmp	r3, #0
 800e966:	d10b      	bne.n	800e980 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800e968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e96c:	f383 8811 	msr	BASEPRI, r3
 800e970:	f3bf 8f6f 	isb	sy
 800e974:	f3bf 8f4f 	dsb	sy
 800e978:	623b      	str	r3, [r7, #32]
}
 800e97a:	bf00      	nop
 800e97c:	bf00      	nop
 800e97e:	e7fd      	b.n	800e97c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d102      	bne.n	800e98c <xQueueGenericCreateStatic+0x84>
 800e986:	68bb      	ldr	r3, [r7, #8]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d101      	bne.n	800e990 <xQueueGenericCreateStatic+0x88>
 800e98c:	2301      	movs	r3, #1
 800e98e:	e000      	b.n	800e992 <xQueueGenericCreateStatic+0x8a>
 800e990:	2300      	movs	r3, #0
 800e992:	2b00      	cmp	r3, #0
 800e994:	d10b      	bne.n	800e9ae <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800e996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e99a:	f383 8811 	msr	BASEPRI, r3
 800e99e:	f3bf 8f6f 	isb	sy
 800e9a2:	f3bf 8f4f 	dsb	sy
 800e9a6:	61fb      	str	r3, [r7, #28]
}
 800e9a8:	bf00      	nop
 800e9aa:	bf00      	nop
 800e9ac:	e7fd      	b.n	800e9aa <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e9ae:	2348      	movs	r3, #72	@ 0x48
 800e9b0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e9b2:	697b      	ldr	r3, [r7, #20]
 800e9b4:	2b48      	cmp	r3, #72	@ 0x48
 800e9b6:	d00b      	beq.n	800e9d0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800e9b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9bc:	f383 8811 	msr	BASEPRI, r3
 800e9c0:	f3bf 8f6f 	isb	sy
 800e9c4:	f3bf 8f4f 	dsb	sy
 800e9c8:	61bb      	str	r3, [r7, #24]
}
 800e9ca:	bf00      	nop
 800e9cc:	bf00      	nop
 800e9ce:	e7fd      	b.n	800e9cc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e9d0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e9d2:	683b      	ldr	r3, [r7, #0]
 800e9d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800e9d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d00d      	beq.n	800e9f8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e9dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9de:	2201      	movs	r2, #1
 800e9e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e9e4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800e9e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9ea:	9300      	str	r3, [sp, #0]
 800e9ec:	4613      	mov	r3, r2
 800e9ee:	687a      	ldr	r2, [r7, #4]
 800e9f0:	68b9      	ldr	r1, [r7, #8]
 800e9f2:	68f8      	ldr	r0, [r7, #12]
 800e9f4:	f000 f840 	bl	800ea78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e9f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	3730      	adds	r7, #48	@ 0x30
 800e9fe:	46bd      	mov	sp, r7
 800ea00:	bd80      	pop	{r7, pc}

0800ea02 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ea02:	b580      	push	{r7, lr}
 800ea04:	b08a      	sub	sp, #40	@ 0x28
 800ea06:	af02      	add	r7, sp, #8
 800ea08:	60f8      	str	r0, [r7, #12]
 800ea0a:	60b9      	str	r1, [r7, #8]
 800ea0c:	4613      	mov	r3, r2
 800ea0e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d10b      	bne.n	800ea2e <xQueueGenericCreate+0x2c>
	__asm volatile
 800ea16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea1a:	f383 8811 	msr	BASEPRI, r3
 800ea1e:	f3bf 8f6f 	isb	sy
 800ea22:	f3bf 8f4f 	dsb	sy
 800ea26:	613b      	str	r3, [r7, #16]
}
 800ea28:	bf00      	nop
 800ea2a:	bf00      	nop
 800ea2c:	e7fd      	b.n	800ea2a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	68ba      	ldr	r2, [r7, #8]
 800ea32:	fb02 f303 	mul.w	r3, r2, r3
 800ea36:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ea38:	69fb      	ldr	r3, [r7, #28]
 800ea3a:	3348      	adds	r3, #72	@ 0x48
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	f002 f8fd 	bl	8010c3c <pvPortMalloc>
 800ea42:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ea44:	69bb      	ldr	r3, [r7, #24]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d011      	beq.n	800ea6e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ea4a:	69bb      	ldr	r3, [r7, #24]
 800ea4c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ea4e:	697b      	ldr	r3, [r7, #20]
 800ea50:	3348      	adds	r3, #72	@ 0x48
 800ea52:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ea54:	69bb      	ldr	r3, [r7, #24]
 800ea56:	2200      	movs	r2, #0
 800ea58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ea5c:	79fa      	ldrb	r2, [r7, #7]
 800ea5e:	69bb      	ldr	r3, [r7, #24]
 800ea60:	9300      	str	r3, [sp, #0]
 800ea62:	4613      	mov	r3, r2
 800ea64:	697a      	ldr	r2, [r7, #20]
 800ea66:	68b9      	ldr	r1, [r7, #8]
 800ea68:	68f8      	ldr	r0, [r7, #12]
 800ea6a:	f000 f805 	bl	800ea78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ea6e:	69bb      	ldr	r3, [r7, #24]
	}
 800ea70:	4618      	mov	r0, r3
 800ea72:	3720      	adds	r7, #32
 800ea74:	46bd      	mov	sp, r7
 800ea76:	bd80      	pop	{r7, pc}

0800ea78 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b084      	sub	sp, #16
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	60f8      	str	r0, [r7, #12]
 800ea80:	60b9      	str	r1, [r7, #8]
 800ea82:	607a      	str	r2, [r7, #4]
 800ea84:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ea86:	68bb      	ldr	r3, [r7, #8]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d103      	bne.n	800ea94 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ea8c:	69bb      	ldr	r3, [r7, #24]
 800ea8e:	69ba      	ldr	r2, [r7, #24]
 800ea90:	601a      	str	r2, [r3, #0]
 800ea92:	e002      	b.n	800ea9a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ea94:	69bb      	ldr	r3, [r7, #24]
 800ea96:	687a      	ldr	r2, [r7, #4]
 800ea98:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ea9a:	69bb      	ldr	r3, [r7, #24]
 800ea9c:	68fa      	ldr	r2, [r7, #12]
 800ea9e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800eaa0:	69bb      	ldr	r3, [r7, #24]
 800eaa2:	68ba      	ldr	r2, [r7, #8]
 800eaa4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800eaa6:	2101      	movs	r1, #1
 800eaa8:	69b8      	ldr	r0, [r7, #24]
 800eaaa:	f7ff fec3 	bl	800e834 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800eaae:	bf00      	nop
 800eab0:	3710      	adds	r7, #16
 800eab2:	46bd      	mov	sp, r7
 800eab4:	bd80      	pop	{r7, pc}
	...

0800eab8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b08e      	sub	sp, #56	@ 0x38
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	60f8      	str	r0, [r7, #12]
 800eac0:	60b9      	str	r1, [r7, #8]
 800eac2:	607a      	str	r2, [r7, #4]
 800eac4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800eac6:	2300      	movs	r3, #0
 800eac8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800eace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d10b      	bne.n	800eaec <xQueueGenericSend+0x34>
	__asm volatile
 800ead4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ead8:	f383 8811 	msr	BASEPRI, r3
 800eadc:	f3bf 8f6f 	isb	sy
 800eae0:	f3bf 8f4f 	dsb	sy
 800eae4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800eae6:	bf00      	nop
 800eae8:	bf00      	nop
 800eaea:	e7fd      	b.n	800eae8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eaec:	68bb      	ldr	r3, [r7, #8]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d103      	bne.n	800eafa <xQueueGenericSend+0x42>
 800eaf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eaf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d101      	bne.n	800eafe <xQueueGenericSend+0x46>
 800eafa:	2301      	movs	r3, #1
 800eafc:	e000      	b.n	800eb00 <xQueueGenericSend+0x48>
 800eafe:	2300      	movs	r3, #0
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d10b      	bne.n	800eb1c <xQueueGenericSend+0x64>
	__asm volatile
 800eb04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb08:	f383 8811 	msr	BASEPRI, r3
 800eb0c:	f3bf 8f6f 	isb	sy
 800eb10:	f3bf 8f4f 	dsb	sy
 800eb14:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800eb16:	bf00      	nop
 800eb18:	bf00      	nop
 800eb1a:	e7fd      	b.n	800eb18 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800eb1c:	683b      	ldr	r3, [r7, #0]
 800eb1e:	2b02      	cmp	r3, #2
 800eb20:	d103      	bne.n	800eb2a <xQueueGenericSend+0x72>
 800eb22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eb26:	2b01      	cmp	r3, #1
 800eb28:	d101      	bne.n	800eb2e <xQueueGenericSend+0x76>
 800eb2a:	2301      	movs	r3, #1
 800eb2c:	e000      	b.n	800eb30 <xQueueGenericSend+0x78>
 800eb2e:	2300      	movs	r3, #0
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d10b      	bne.n	800eb4c <xQueueGenericSend+0x94>
	__asm volatile
 800eb34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb38:	f383 8811 	msr	BASEPRI, r3
 800eb3c:	f3bf 8f6f 	isb	sy
 800eb40:	f3bf 8f4f 	dsb	sy
 800eb44:	623b      	str	r3, [r7, #32]
}
 800eb46:	bf00      	nop
 800eb48:	bf00      	nop
 800eb4a:	e7fd      	b.n	800eb48 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800eb4c:	f001 fa06 	bl	800ff5c <xTaskGetSchedulerState>
 800eb50:	4603      	mov	r3, r0
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d102      	bne.n	800eb5c <xQueueGenericSend+0xa4>
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d101      	bne.n	800eb60 <xQueueGenericSend+0xa8>
 800eb5c:	2301      	movs	r3, #1
 800eb5e:	e000      	b.n	800eb62 <xQueueGenericSend+0xaa>
 800eb60:	2300      	movs	r3, #0
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d10b      	bne.n	800eb7e <xQueueGenericSend+0xc6>
	__asm volatile
 800eb66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb6a:	f383 8811 	msr	BASEPRI, r3
 800eb6e:	f3bf 8f6f 	isb	sy
 800eb72:	f3bf 8f4f 	dsb	sy
 800eb76:	61fb      	str	r3, [r7, #28]
}
 800eb78:	bf00      	nop
 800eb7a:	bf00      	nop
 800eb7c:	e7fd      	b.n	800eb7a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800eb7e:	f001 ff3b 	bl	80109f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800eb82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800eb86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eb8a:	429a      	cmp	r2, r3
 800eb8c:	d302      	bcc.n	800eb94 <xQueueGenericSend+0xdc>
 800eb8e:	683b      	ldr	r3, [r7, #0]
 800eb90:	2b02      	cmp	r3, #2
 800eb92:	d129      	bne.n	800ebe8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800eb94:	683a      	ldr	r2, [r7, #0]
 800eb96:	68b9      	ldr	r1, [r7, #8]
 800eb98:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800eb9a:	f000 fac9 	bl	800f130 <prvCopyDataToQueue>
 800eb9e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d010      	beq.n	800ebca <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebaa:	3324      	adds	r3, #36	@ 0x24
 800ebac:	4618      	mov	r0, r3
 800ebae:	f001 f80f 	bl	800fbd0 <xTaskRemoveFromEventList>
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d013      	beq.n	800ebe0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ebb8:	4b3f      	ldr	r3, [pc, #252]	@ (800ecb8 <xQueueGenericSend+0x200>)
 800ebba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ebbe:	601a      	str	r2, [r3, #0]
 800ebc0:	f3bf 8f4f 	dsb	sy
 800ebc4:	f3bf 8f6f 	isb	sy
 800ebc8:	e00a      	b.n	800ebe0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ebca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d007      	beq.n	800ebe0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ebd0:	4b39      	ldr	r3, [pc, #228]	@ (800ecb8 <xQueueGenericSend+0x200>)
 800ebd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ebd6:	601a      	str	r2, [r3, #0]
 800ebd8:	f3bf 8f4f 	dsb	sy
 800ebdc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ebe0:	f001 ff3c 	bl	8010a5c <vPortExitCritical>
				return pdPASS;
 800ebe4:	2301      	movs	r3, #1
 800ebe6:	e063      	b.n	800ecb0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d103      	bne.n	800ebf6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ebee:	f001 ff35 	bl	8010a5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	e05c      	b.n	800ecb0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ebf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d106      	bne.n	800ec0a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ebfc:	f107 0314 	add.w	r3, r7, #20
 800ec00:	4618      	mov	r0, r3
 800ec02:	f001 f849 	bl	800fc98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ec06:	2301      	movs	r3, #1
 800ec08:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ec0a:	f001 ff27 	bl	8010a5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ec0e:	f000 fdef 	bl	800f7f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ec12:	f001 fef1 	bl	80109f8 <vPortEnterCritical>
 800ec16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec18:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ec1c:	b25b      	sxtb	r3, r3
 800ec1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec22:	d103      	bne.n	800ec2c <xQueueGenericSend+0x174>
 800ec24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec26:	2200      	movs	r2, #0
 800ec28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ec2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec2e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ec32:	b25b      	sxtb	r3, r3
 800ec34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec38:	d103      	bne.n	800ec42 <xQueueGenericSend+0x18a>
 800ec3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec3c:	2200      	movs	r2, #0
 800ec3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ec42:	f001 ff0b 	bl	8010a5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ec46:	1d3a      	adds	r2, r7, #4
 800ec48:	f107 0314 	add.w	r3, r7, #20
 800ec4c:	4611      	mov	r1, r2
 800ec4e:	4618      	mov	r0, r3
 800ec50:	f001 f838 	bl	800fcc4 <xTaskCheckForTimeOut>
 800ec54:	4603      	mov	r3, r0
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d124      	bne.n	800eca4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ec5a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ec5c:	f000 fb60 	bl	800f320 <prvIsQueueFull>
 800ec60:	4603      	mov	r3, r0
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d018      	beq.n	800ec98 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ec66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec68:	3310      	adds	r3, #16
 800ec6a:	687a      	ldr	r2, [r7, #4]
 800ec6c:	4611      	mov	r1, r2
 800ec6e:	4618      	mov	r0, r3
 800ec70:	f000 ff88 	bl	800fb84 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ec74:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ec76:	f000 faeb 	bl	800f250 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ec7a:	f000 fdc7 	bl	800f80c <xTaskResumeAll>
 800ec7e:	4603      	mov	r3, r0
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	f47f af7c 	bne.w	800eb7e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800ec86:	4b0c      	ldr	r3, [pc, #48]	@ (800ecb8 <xQueueGenericSend+0x200>)
 800ec88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ec8c:	601a      	str	r2, [r3, #0]
 800ec8e:	f3bf 8f4f 	dsb	sy
 800ec92:	f3bf 8f6f 	isb	sy
 800ec96:	e772      	b.n	800eb7e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ec98:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ec9a:	f000 fad9 	bl	800f250 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ec9e:	f000 fdb5 	bl	800f80c <xTaskResumeAll>
 800eca2:	e76c      	b.n	800eb7e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800eca4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800eca6:	f000 fad3 	bl	800f250 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ecaa:	f000 fdaf 	bl	800f80c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ecae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	3738      	adds	r7, #56	@ 0x38
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	bd80      	pop	{r7, pc}
 800ecb8:	e000ed04 	.word	0xe000ed04

0800ecbc <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b08e      	sub	sp, #56	@ 0x38
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	6078      	str	r0, [r7, #4]
 800ecc4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ecca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d10b      	bne.n	800ece8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800ecd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecd4:	f383 8811 	msr	BASEPRI, r3
 800ecd8:	f3bf 8f6f 	isb	sy
 800ecdc:	f3bf 8f4f 	dsb	sy
 800ece0:	623b      	str	r3, [r7, #32]
}
 800ece2:	bf00      	nop
 800ece4:	bf00      	nop
 800ece6:	e7fd      	b.n	800ece4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ece8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d00b      	beq.n	800ed08 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800ecf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecf4:	f383 8811 	msr	BASEPRI, r3
 800ecf8:	f3bf 8f6f 	isb	sy
 800ecfc:	f3bf 8f4f 	dsb	sy
 800ed00:	61fb      	str	r3, [r7, #28]
}
 800ed02:	bf00      	nop
 800ed04:	bf00      	nop
 800ed06:	e7fd      	b.n	800ed04 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ed08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d103      	bne.n	800ed18 <xQueueGiveFromISR+0x5c>
 800ed10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed12:	689b      	ldr	r3, [r3, #8]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d101      	bne.n	800ed1c <xQueueGiveFromISR+0x60>
 800ed18:	2301      	movs	r3, #1
 800ed1a:	e000      	b.n	800ed1e <xQueueGiveFromISR+0x62>
 800ed1c:	2300      	movs	r3, #0
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d10b      	bne.n	800ed3a <xQueueGiveFromISR+0x7e>
	__asm volatile
 800ed22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed26:	f383 8811 	msr	BASEPRI, r3
 800ed2a:	f3bf 8f6f 	isb	sy
 800ed2e:	f3bf 8f4f 	dsb	sy
 800ed32:	61bb      	str	r3, [r7, #24]
}
 800ed34:	bf00      	nop
 800ed36:	bf00      	nop
 800ed38:	e7fd      	b.n	800ed36 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ed3a:	f001 ff3d 	bl	8010bb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ed3e:	f3ef 8211 	mrs	r2, BASEPRI
 800ed42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed46:	f383 8811 	msr	BASEPRI, r3
 800ed4a:	f3bf 8f6f 	isb	sy
 800ed4e:	f3bf 8f4f 	dsb	sy
 800ed52:	617a      	str	r2, [r7, #20]
 800ed54:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ed56:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ed58:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ed5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed5e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ed60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ed64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ed66:	429a      	cmp	r2, r3
 800ed68:	d22b      	bcs.n	800edc2 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ed6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed6c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ed70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ed74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed76:	1c5a      	adds	r2, r3, #1
 800ed78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed7a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ed7c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ed80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed84:	d112      	bne.n	800edac <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ed86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d016      	beq.n	800edbc <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ed8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed90:	3324      	adds	r3, #36	@ 0x24
 800ed92:	4618      	mov	r0, r3
 800ed94:	f000 ff1c 	bl	800fbd0 <xTaskRemoveFromEventList>
 800ed98:	4603      	mov	r3, r0
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d00e      	beq.n	800edbc <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ed9e:	683b      	ldr	r3, [r7, #0]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d00b      	beq.n	800edbc <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800eda4:	683b      	ldr	r3, [r7, #0]
 800eda6:	2201      	movs	r2, #1
 800eda8:	601a      	str	r2, [r3, #0]
 800edaa:	e007      	b.n	800edbc <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800edac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800edb0:	3301      	adds	r3, #1
 800edb2:	b2db      	uxtb	r3, r3
 800edb4:	b25a      	sxtb	r2, r3
 800edb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800edbc:	2301      	movs	r3, #1
 800edbe:	637b      	str	r3, [r7, #52]	@ 0x34
 800edc0:	e001      	b.n	800edc6 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800edc2:	2300      	movs	r3, #0
 800edc4:	637b      	str	r3, [r7, #52]	@ 0x34
 800edc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edc8:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800edd0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800edd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800edd4:	4618      	mov	r0, r3
 800edd6:	3738      	adds	r7, #56	@ 0x38
 800edd8:	46bd      	mov	sp, r7
 800edda:	bd80      	pop	{r7, pc}

0800eddc <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800eddc:	b580      	push	{r7, lr}
 800edde:	b08e      	sub	sp, #56	@ 0x38
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	6078      	str	r0, [r7, #4]
 800ede4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ede6:	2300      	movs	r3, #0
 800ede8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800edee:	2300      	movs	r3, #0
 800edf0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800edf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d10b      	bne.n	800ee10 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800edf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edfc:	f383 8811 	msr	BASEPRI, r3
 800ee00:	f3bf 8f6f 	isb	sy
 800ee04:	f3bf 8f4f 	dsb	sy
 800ee08:	623b      	str	r3, [r7, #32]
}
 800ee0a:	bf00      	nop
 800ee0c:	bf00      	nop
 800ee0e:	e7fd      	b.n	800ee0c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ee10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d00b      	beq.n	800ee30 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800ee18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee1c:	f383 8811 	msr	BASEPRI, r3
 800ee20:	f3bf 8f6f 	isb	sy
 800ee24:	f3bf 8f4f 	dsb	sy
 800ee28:	61fb      	str	r3, [r7, #28]
}
 800ee2a:	bf00      	nop
 800ee2c:	bf00      	nop
 800ee2e:	e7fd      	b.n	800ee2c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ee30:	f001 f894 	bl	800ff5c <xTaskGetSchedulerState>
 800ee34:	4603      	mov	r3, r0
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d102      	bne.n	800ee40 <xQueueSemaphoreTake+0x64>
 800ee3a:	683b      	ldr	r3, [r7, #0]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d101      	bne.n	800ee44 <xQueueSemaphoreTake+0x68>
 800ee40:	2301      	movs	r3, #1
 800ee42:	e000      	b.n	800ee46 <xQueueSemaphoreTake+0x6a>
 800ee44:	2300      	movs	r3, #0
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d10b      	bne.n	800ee62 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800ee4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee4e:	f383 8811 	msr	BASEPRI, r3
 800ee52:	f3bf 8f6f 	isb	sy
 800ee56:	f3bf 8f4f 	dsb	sy
 800ee5a:	61bb      	str	r3, [r7, #24]
}
 800ee5c:	bf00      	nop
 800ee5e:	bf00      	nop
 800ee60:	e7fd      	b.n	800ee5e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ee62:	f001 fdc9 	bl	80109f8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ee66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ee6a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ee6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d024      	beq.n	800eebc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ee72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee74:	1e5a      	subs	r2, r3, #1
 800ee76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee78:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ee7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d104      	bne.n	800ee8c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ee82:	f001 fa17 	bl	80102b4 <pvTaskIncrementMutexHeldCount>
 800ee86:	4602      	mov	r2, r0
 800ee88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee8a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ee8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee8e:	691b      	ldr	r3, [r3, #16]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d00f      	beq.n	800eeb4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ee94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee96:	3310      	adds	r3, #16
 800ee98:	4618      	mov	r0, r3
 800ee9a:	f000 fe99 	bl	800fbd0 <xTaskRemoveFromEventList>
 800ee9e:	4603      	mov	r3, r0
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d007      	beq.n	800eeb4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800eea4:	4b54      	ldr	r3, [pc, #336]	@ (800eff8 <xQueueSemaphoreTake+0x21c>)
 800eea6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eeaa:	601a      	str	r2, [r3, #0]
 800eeac:	f3bf 8f4f 	dsb	sy
 800eeb0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800eeb4:	f001 fdd2 	bl	8010a5c <vPortExitCritical>
				return pdPASS;
 800eeb8:	2301      	movs	r3, #1
 800eeba:	e098      	b.n	800efee <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800eebc:	683b      	ldr	r3, [r7, #0]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d112      	bne.n	800eee8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800eec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d00b      	beq.n	800eee0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800eec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eecc:	f383 8811 	msr	BASEPRI, r3
 800eed0:	f3bf 8f6f 	isb	sy
 800eed4:	f3bf 8f4f 	dsb	sy
 800eed8:	617b      	str	r3, [r7, #20]
}
 800eeda:	bf00      	nop
 800eedc:	bf00      	nop
 800eede:	e7fd      	b.n	800eedc <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800eee0:	f001 fdbc 	bl	8010a5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800eee4:	2300      	movs	r3, #0
 800eee6:	e082      	b.n	800efee <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800eee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d106      	bne.n	800eefc <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800eeee:	f107 030c 	add.w	r3, r7, #12
 800eef2:	4618      	mov	r0, r3
 800eef4:	f000 fed0 	bl	800fc98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800eef8:	2301      	movs	r3, #1
 800eefa:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800eefc:	f001 fdae 	bl	8010a5c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ef00:	f000 fc76 	bl	800f7f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ef04:	f001 fd78 	bl	80109f8 <vPortEnterCritical>
 800ef08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef0a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ef0e:	b25b      	sxtb	r3, r3
 800ef10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef14:	d103      	bne.n	800ef1e <xQueueSemaphoreTake+0x142>
 800ef16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef18:	2200      	movs	r2, #0
 800ef1a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ef1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef20:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ef24:	b25b      	sxtb	r3, r3
 800ef26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef2a:	d103      	bne.n	800ef34 <xQueueSemaphoreTake+0x158>
 800ef2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef2e:	2200      	movs	r2, #0
 800ef30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ef34:	f001 fd92 	bl	8010a5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ef38:	463a      	mov	r2, r7
 800ef3a:	f107 030c 	add.w	r3, r7, #12
 800ef3e:	4611      	mov	r1, r2
 800ef40:	4618      	mov	r0, r3
 800ef42:	f000 febf 	bl	800fcc4 <xTaskCheckForTimeOut>
 800ef46:	4603      	mov	r3, r0
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d132      	bne.n	800efb2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ef4c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ef4e:	f000 f9d1 	bl	800f2f4 <prvIsQueueEmpty>
 800ef52:	4603      	mov	r3, r0
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d026      	beq.n	800efa6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ef58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d109      	bne.n	800ef74 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800ef60:	f001 fd4a 	bl	80109f8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ef64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef66:	689b      	ldr	r3, [r3, #8]
 800ef68:	4618      	mov	r0, r3
 800ef6a:	f001 f815 	bl	800ff98 <xTaskPriorityInherit>
 800ef6e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800ef70:	f001 fd74 	bl	8010a5c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ef74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef76:	3324      	adds	r3, #36	@ 0x24
 800ef78:	683a      	ldr	r2, [r7, #0]
 800ef7a:	4611      	mov	r1, r2
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	f000 fe01 	bl	800fb84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ef82:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ef84:	f000 f964 	bl	800f250 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ef88:	f000 fc40 	bl	800f80c <xTaskResumeAll>
 800ef8c:	4603      	mov	r3, r0
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	f47f af67 	bne.w	800ee62 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800ef94:	4b18      	ldr	r3, [pc, #96]	@ (800eff8 <xQueueSemaphoreTake+0x21c>)
 800ef96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ef9a:	601a      	str	r2, [r3, #0]
 800ef9c:	f3bf 8f4f 	dsb	sy
 800efa0:	f3bf 8f6f 	isb	sy
 800efa4:	e75d      	b.n	800ee62 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800efa6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800efa8:	f000 f952 	bl	800f250 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800efac:	f000 fc2e 	bl	800f80c <xTaskResumeAll>
 800efb0:	e757      	b.n	800ee62 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800efb2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800efb4:	f000 f94c 	bl	800f250 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800efb8:	f000 fc28 	bl	800f80c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800efbc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800efbe:	f000 f999 	bl	800f2f4 <prvIsQueueEmpty>
 800efc2:	4603      	mov	r3, r0
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	f43f af4c 	beq.w	800ee62 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800efca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d00d      	beq.n	800efec <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800efd0:	f001 fd12 	bl	80109f8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800efd4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800efd6:	f000 f893 	bl	800f100 <prvGetDisinheritPriorityAfterTimeout>
 800efda:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800efdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efde:	689b      	ldr	r3, [r3, #8]
 800efe0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800efe2:	4618      	mov	r0, r3
 800efe4:	f001 f8d6 	bl	8010194 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800efe8:	f001 fd38 	bl	8010a5c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800efec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800efee:	4618      	mov	r0, r3
 800eff0:	3738      	adds	r7, #56	@ 0x38
 800eff2:	46bd      	mov	sp, r7
 800eff4:	bd80      	pop	{r7, pc}
 800eff6:	bf00      	nop
 800eff8:	e000ed04 	.word	0xe000ed04

0800effc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800effc:	b580      	push	{r7, lr}
 800effe:	b08e      	sub	sp, #56	@ 0x38
 800f000:	af00      	add	r7, sp, #0
 800f002:	60f8      	str	r0, [r7, #12]
 800f004:	60b9      	str	r1, [r7, #8]
 800f006:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800f00c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d10b      	bne.n	800f02a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800f012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f016:	f383 8811 	msr	BASEPRI, r3
 800f01a:	f3bf 8f6f 	isb	sy
 800f01e:	f3bf 8f4f 	dsb	sy
 800f022:	623b      	str	r3, [r7, #32]
}
 800f024:	bf00      	nop
 800f026:	bf00      	nop
 800f028:	e7fd      	b.n	800f026 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f02a:	68bb      	ldr	r3, [r7, #8]
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d103      	bne.n	800f038 <xQueueReceiveFromISR+0x3c>
 800f030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f034:	2b00      	cmp	r3, #0
 800f036:	d101      	bne.n	800f03c <xQueueReceiveFromISR+0x40>
 800f038:	2301      	movs	r3, #1
 800f03a:	e000      	b.n	800f03e <xQueueReceiveFromISR+0x42>
 800f03c:	2300      	movs	r3, #0
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d10b      	bne.n	800f05a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800f042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f046:	f383 8811 	msr	BASEPRI, r3
 800f04a:	f3bf 8f6f 	isb	sy
 800f04e:	f3bf 8f4f 	dsb	sy
 800f052:	61fb      	str	r3, [r7, #28]
}
 800f054:	bf00      	nop
 800f056:	bf00      	nop
 800f058:	e7fd      	b.n	800f056 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f05a:	f001 fdad 	bl	8010bb8 <vPortValidateInterruptPriority>
	__asm volatile
 800f05e:	f3ef 8211 	mrs	r2, BASEPRI
 800f062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f066:	f383 8811 	msr	BASEPRI, r3
 800f06a:	f3bf 8f6f 	isb	sy
 800f06e:	f3bf 8f4f 	dsb	sy
 800f072:	61ba      	str	r2, [r7, #24]
 800f074:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f076:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f078:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f07a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f07c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f07e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f082:	2b00      	cmp	r3, #0
 800f084:	d02f      	beq.n	800f0e6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f088:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f08c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f090:	68b9      	ldr	r1, [r7, #8]
 800f092:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f094:	f000 f8b6 	bl	800f204 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f09a:	1e5a      	subs	r2, r3, #1
 800f09c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f09e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f0a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800f0a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0a8:	d112      	bne.n	800f0d0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f0aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0ac:	691b      	ldr	r3, [r3, #16]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d016      	beq.n	800f0e0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f0b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0b4:	3310      	adds	r3, #16
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	f000 fd8a 	bl	800fbd0 <xTaskRemoveFromEventList>
 800f0bc:	4603      	mov	r3, r0
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d00e      	beq.n	800f0e0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d00b      	beq.n	800f0e0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	2201      	movs	r2, #1
 800f0cc:	601a      	str	r2, [r3, #0]
 800f0ce:	e007      	b.n	800f0e0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f0d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f0d4:	3301      	adds	r3, #1
 800f0d6:	b2db      	uxtb	r3, r3
 800f0d8:	b25a      	sxtb	r2, r3
 800f0da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800f0e0:	2301      	movs	r3, #1
 800f0e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800f0e4:	e001      	b.n	800f0ea <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	637b      	str	r3, [r7, #52]	@ 0x34
 800f0ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0ec:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f0ee:	693b      	ldr	r3, [r7, #16]
 800f0f0:	f383 8811 	msr	BASEPRI, r3
}
 800f0f4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f0f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800f0f8:	4618      	mov	r0, r3
 800f0fa:	3738      	adds	r7, #56	@ 0x38
 800f0fc:	46bd      	mov	sp, r7
 800f0fe:	bd80      	pop	{r7, pc}

0800f100 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f100:	b480      	push	{r7}
 800f102:	b085      	sub	sp, #20
 800f104:	af00      	add	r7, sp, #0
 800f106:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d006      	beq.n	800f11e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	f1c3 0307 	rsb	r3, r3, #7
 800f11a:	60fb      	str	r3, [r7, #12]
 800f11c:	e001      	b.n	800f122 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f11e:	2300      	movs	r3, #0
 800f120:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f122:	68fb      	ldr	r3, [r7, #12]
	}
 800f124:	4618      	mov	r0, r3
 800f126:	3714      	adds	r7, #20
 800f128:	46bd      	mov	sp, r7
 800f12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12e:	4770      	bx	lr

0800f130 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f130:	b580      	push	{r7, lr}
 800f132:	b086      	sub	sp, #24
 800f134:	af00      	add	r7, sp, #0
 800f136:	60f8      	str	r0, [r7, #12]
 800f138:	60b9      	str	r1, [r7, #8]
 800f13a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f13c:	2300      	movs	r3, #0
 800f13e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f144:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d10d      	bne.n	800f16a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d14d      	bne.n	800f1f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	689b      	ldr	r3, [r3, #8]
 800f15a:	4618      	mov	r0, r3
 800f15c:	f000 ff92 	bl	8010084 <xTaskPriorityDisinherit>
 800f160:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	2200      	movs	r2, #0
 800f166:	609a      	str	r2, [r3, #8]
 800f168:	e043      	b.n	800f1f2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d119      	bne.n	800f1a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	6858      	ldr	r0, [r3, #4]
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f178:	461a      	mov	r2, r3
 800f17a:	68b9      	ldr	r1, [r7, #8]
 800f17c:	f003 f87d 	bl	801227a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	685a      	ldr	r2, [r3, #4]
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f188:	441a      	add	r2, r3
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	685a      	ldr	r2, [r3, #4]
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	689b      	ldr	r3, [r3, #8]
 800f196:	429a      	cmp	r2, r3
 800f198:	d32b      	bcc.n	800f1f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	681a      	ldr	r2, [r3, #0]
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	605a      	str	r2, [r3, #4]
 800f1a2:	e026      	b.n	800f1f2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	68d8      	ldr	r0, [r3, #12]
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f1ac:	461a      	mov	r2, r3
 800f1ae:	68b9      	ldr	r1, [r7, #8]
 800f1b0:	f003 f863 	bl	801227a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	68da      	ldr	r2, [r3, #12]
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f1bc:	425b      	negs	r3, r3
 800f1be:	441a      	add	r2, r3
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	68da      	ldr	r2, [r3, #12]
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	429a      	cmp	r2, r3
 800f1ce:	d207      	bcs.n	800f1e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	689a      	ldr	r2, [r3, #8]
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f1d8:	425b      	negs	r3, r3
 800f1da:	441a      	add	r2, r3
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	2b02      	cmp	r3, #2
 800f1e4:	d105      	bne.n	800f1f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f1e6:	693b      	ldr	r3, [r7, #16]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d002      	beq.n	800f1f2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f1ec:	693b      	ldr	r3, [r7, #16]
 800f1ee:	3b01      	subs	r3, #1
 800f1f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f1f2:	693b      	ldr	r3, [r7, #16]
 800f1f4:	1c5a      	adds	r2, r3, #1
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800f1fa:	697b      	ldr	r3, [r7, #20]
}
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	3718      	adds	r7, #24
 800f200:	46bd      	mov	sp, r7
 800f202:	bd80      	pop	{r7, pc}

0800f204 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f204:	b580      	push	{r7, lr}
 800f206:	b082      	sub	sp, #8
 800f208:	af00      	add	r7, sp, #0
 800f20a:	6078      	str	r0, [r7, #4]
 800f20c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f212:	2b00      	cmp	r3, #0
 800f214:	d018      	beq.n	800f248 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	68da      	ldr	r2, [r3, #12]
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f21e:	441a      	add	r2, r3
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	68da      	ldr	r2, [r3, #12]
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	689b      	ldr	r3, [r3, #8]
 800f22c:	429a      	cmp	r2, r3
 800f22e:	d303      	bcc.n	800f238 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	681a      	ldr	r2, [r3, #0]
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	68d9      	ldr	r1, [r3, #12]
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f240:	461a      	mov	r2, r3
 800f242:	6838      	ldr	r0, [r7, #0]
 800f244:	f003 f819 	bl	801227a <memcpy>
	}
}
 800f248:	bf00      	nop
 800f24a:	3708      	adds	r7, #8
 800f24c:	46bd      	mov	sp, r7
 800f24e:	bd80      	pop	{r7, pc}

0800f250 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f250:	b580      	push	{r7, lr}
 800f252:	b084      	sub	sp, #16
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f258:	f001 fbce 	bl	80109f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f262:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f264:	e011      	b.n	800f28a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d012      	beq.n	800f294 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	3324      	adds	r3, #36	@ 0x24
 800f272:	4618      	mov	r0, r3
 800f274:	f000 fcac 	bl	800fbd0 <xTaskRemoveFromEventList>
 800f278:	4603      	mov	r3, r0
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d001      	beq.n	800f282 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f27e:	f000 fd85 	bl	800fd8c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f282:	7bfb      	ldrb	r3, [r7, #15]
 800f284:	3b01      	subs	r3, #1
 800f286:	b2db      	uxtb	r3, r3
 800f288:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f28a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f28e:	2b00      	cmp	r3, #0
 800f290:	dce9      	bgt.n	800f266 <prvUnlockQueue+0x16>
 800f292:	e000      	b.n	800f296 <prvUnlockQueue+0x46>
					break;
 800f294:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	22ff      	movs	r2, #255	@ 0xff
 800f29a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800f29e:	f001 fbdd 	bl	8010a5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f2a2:	f001 fba9 	bl	80109f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f2ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f2ae:	e011      	b.n	800f2d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	691b      	ldr	r3, [r3, #16]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d012      	beq.n	800f2de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	3310      	adds	r3, #16
 800f2bc:	4618      	mov	r0, r3
 800f2be:	f000 fc87 	bl	800fbd0 <xTaskRemoveFromEventList>
 800f2c2:	4603      	mov	r3, r0
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d001      	beq.n	800f2cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f2c8:	f000 fd60 	bl	800fd8c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f2cc:	7bbb      	ldrb	r3, [r7, #14]
 800f2ce:	3b01      	subs	r3, #1
 800f2d0:	b2db      	uxtb	r3, r3
 800f2d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f2d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	dce9      	bgt.n	800f2b0 <prvUnlockQueue+0x60>
 800f2dc:	e000      	b.n	800f2e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f2de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	22ff      	movs	r2, #255	@ 0xff
 800f2e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800f2e8:	f001 fbb8 	bl	8010a5c <vPortExitCritical>
}
 800f2ec:	bf00      	nop
 800f2ee:	3710      	adds	r7, #16
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	bd80      	pop	{r7, pc}

0800f2f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f2f4:	b580      	push	{r7, lr}
 800f2f6:	b084      	sub	sp, #16
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f2fc:	f001 fb7c 	bl	80109f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f304:	2b00      	cmp	r3, #0
 800f306:	d102      	bne.n	800f30e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f308:	2301      	movs	r3, #1
 800f30a:	60fb      	str	r3, [r7, #12]
 800f30c:	e001      	b.n	800f312 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f30e:	2300      	movs	r3, #0
 800f310:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f312:	f001 fba3 	bl	8010a5c <vPortExitCritical>

	return xReturn;
 800f316:	68fb      	ldr	r3, [r7, #12]
}
 800f318:	4618      	mov	r0, r3
 800f31a:	3710      	adds	r7, #16
 800f31c:	46bd      	mov	sp, r7
 800f31e:	bd80      	pop	{r7, pc}

0800f320 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f320:	b580      	push	{r7, lr}
 800f322:	b084      	sub	sp, #16
 800f324:	af00      	add	r7, sp, #0
 800f326:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f328:	f001 fb66 	bl	80109f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f334:	429a      	cmp	r2, r3
 800f336:	d102      	bne.n	800f33e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f338:	2301      	movs	r3, #1
 800f33a:	60fb      	str	r3, [r7, #12]
 800f33c:	e001      	b.n	800f342 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f33e:	2300      	movs	r3, #0
 800f340:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f342:	f001 fb8b 	bl	8010a5c <vPortExitCritical>

	return xReturn;
 800f346:	68fb      	ldr	r3, [r7, #12]
}
 800f348:	4618      	mov	r0, r3
 800f34a:	3710      	adds	r7, #16
 800f34c:	46bd      	mov	sp, r7
 800f34e:	bd80      	pop	{r7, pc}

0800f350 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f350:	b580      	push	{r7, lr}
 800f352:	b08e      	sub	sp, #56	@ 0x38
 800f354:	af04      	add	r7, sp, #16
 800f356:	60f8      	str	r0, [r7, #12]
 800f358:	60b9      	str	r1, [r7, #8]
 800f35a:	607a      	str	r2, [r7, #4]
 800f35c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f35e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f360:	2b00      	cmp	r3, #0
 800f362:	d10b      	bne.n	800f37c <xTaskCreateStatic+0x2c>
	__asm volatile
 800f364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f368:	f383 8811 	msr	BASEPRI, r3
 800f36c:	f3bf 8f6f 	isb	sy
 800f370:	f3bf 8f4f 	dsb	sy
 800f374:	623b      	str	r3, [r7, #32]
}
 800f376:	bf00      	nop
 800f378:	bf00      	nop
 800f37a:	e7fd      	b.n	800f378 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f37c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d10b      	bne.n	800f39a <xTaskCreateStatic+0x4a>
	__asm volatile
 800f382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f386:	f383 8811 	msr	BASEPRI, r3
 800f38a:	f3bf 8f6f 	isb	sy
 800f38e:	f3bf 8f4f 	dsb	sy
 800f392:	61fb      	str	r3, [r7, #28]
}
 800f394:	bf00      	nop
 800f396:	bf00      	nop
 800f398:	e7fd      	b.n	800f396 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f39a:	23a0      	movs	r3, #160	@ 0xa0
 800f39c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f39e:	693b      	ldr	r3, [r7, #16]
 800f3a0:	2ba0      	cmp	r3, #160	@ 0xa0
 800f3a2:	d00b      	beq.n	800f3bc <xTaskCreateStatic+0x6c>
	__asm volatile
 800f3a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3a8:	f383 8811 	msr	BASEPRI, r3
 800f3ac:	f3bf 8f6f 	isb	sy
 800f3b0:	f3bf 8f4f 	dsb	sy
 800f3b4:	61bb      	str	r3, [r7, #24]
}
 800f3b6:	bf00      	nop
 800f3b8:	bf00      	nop
 800f3ba:	e7fd      	b.n	800f3b8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f3bc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f3be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d01e      	beq.n	800f402 <xTaskCreateStatic+0xb2>
 800f3c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d01b      	beq.n	800f402 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f3ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3cc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f3ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f3d2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f3d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3d6:	2202      	movs	r2, #2
 800f3d8:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f3dc:	2300      	movs	r3, #0
 800f3de:	9303      	str	r3, [sp, #12]
 800f3e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3e2:	9302      	str	r3, [sp, #8]
 800f3e4:	f107 0314 	add.w	r3, r7, #20
 800f3e8:	9301      	str	r3, [sp, #4]
 800f3ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3ec:	9300      	str	r3, [sp, #0]
 800f3ee:	683b      	ldr	r3, [r7, #0]
 800f3f0:	687a      	ldr	r2, [r7, #4]
 800f3f2:	68b9      	ldr	r1, [r7, #8]
 800f3f4:	68f8      	ldr	r0, [r7, #12]
 800f3f6:	f000 f851 	bl	800f49c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f3fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f3fc:	f000 f8ee 	bl	800f5dc <prvAddNewTaskToReadyList>
 800f400:	e001      	b.n	800f406 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800f402:	2300      	movs	r3, #0
 800f404:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f406:	697b      	ldr	r3, [r7, #20]
	}
 800f408:	4618      	mov	r0, r3
 800f40a:	3728      	adds	r7, #40	@ 0x28
 800f40c:	46bd      	mov	sp, r7
 800f40e:	bd80      	pop	{r7, pc}

0800f410 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f410:	b580      	push	{r7, lr}
 800f412:	b08c      	sub	sp, #48	@ 0x30
 800f414:	af04      	add	r7, sp, #16
 800f416:	60f8      	str	r0, [r7, #12]
 800f418:	60b9      	str	r1, [r7, #8]
 800f41a:	603b      	str	r3, [r7, #0]
 800f41c:	4613      	mov	r3, r2
 800f41e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f420:	88fb      	ldrh	r3, [r7, #6]
 800f422:	009b      	lsls	r3, r3, #2
 800f424:	4618      	mov	r0, r3
 800f426:	f001 fc09 	bl	8010c3c <pvPortMalloc>
 800f42a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f42c:	697b      	ldr	r3, [r7, #20]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d00e      	beq.n	800f450 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f432:	20a0      	movs	r0, #160	@ 0xa0
 800f434:	f001 fc02 	bl	8010c3c <pvPortMalloc>
 800f438:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f43a:	69fb      	ldr	r3, [r7, #28]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d003      	beq.n	800f448 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f440:	69fb      	ldr	r3, [r7, #28]
 800f442:	697a      	ldr	r2, [r7, #20]
 800f444:	631a      	str	r2, [r3, #48]	@ 0x30
 800f446:	e005      	b.n	800f454 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f448:	6978      	ldr	r0, [r7, #20]
 800f44a:	f001 fcc5 	bl	8010dd8 <vPortFree>
 800f44e:	e001      	b.n	800f454 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f450:	2300      	movs	r3, #0
 800f452:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f454:	69fb      	ldr	r3, [r7, #28]
 800f456:	2b00      	cmp	r3, #0
 800f458:	d017      	beq.n	800f48a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f45a:	69fb      	ldr	r3, [r7, #28]
 800f45c:	2200      	movs	r2, #0
 800f45e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f462:	88fa      	ldrh	r2, [r7, #6]
 800f464:	2300      	movs	r3, #0
 800f466:	9303      	str	r3, [sp, #12]
 800f468:	69fb      	ldr	r3, [r7, #28]
 800f46a:	9302      	str	r3, [sp, #8]
 800f46c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f46e:	9301      	str	r3, [sp, #4]
 800f470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f472:	9300      	str	r3, [sp, #0]
 800f474:	683b      	ldr	r3, [r7, #0]
 800f476:	68b9      	ldr	r1, [r7, #8]
 800f478:	68f8      	ldr	r0, [r7, #12]
 800f47a:	f000 f80f 	bl	800f49c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f47e:	69f8      	ldr	r0, [r7, #28]
 800f480:	f000 f8ac 	bl	800f5dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f484:	2301      	movs	r3, #1
 800f486:	61bb      	str	r3, [r7, #24]
 800f488:	e002      	b.n	800f490 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f48a:	f04f 33ff 	mov.w	r3, #4294967295
 800f48e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f490:	69bb      	ldr	r3, [r7, #24]
	}
 800f492:	4618      	mov	r0, r3
 800f494:	3720      	adds	r7, #32
 800f496:	46bd      	mov	sp, r7
 800f498:	bd80      	pop	{r7, pc}
	...

0800f49c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f49c:	b580      	push	{r7, lr}
 800f49e:	b088      	sub	sp, #32
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	60f8      	str	r0, [r7, #12]
 800f4a4:	60b9      	str	r1, [r7, #8]
 800f4a6:	607a      	str	r2, [r7, #4]
 800f4a8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f4aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f4b4:	3b01      	subs	r3, #1
 800f4b6:	009b      	lsls	r3, r3, #2
 800f4b8:	4413      	add	r3, r2
 800f4ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f4bc:	69bb      	ldr	r3, [r7, #24]
 800f4be:	f023 0307 	bic.w	r3, r3, #7
 800f4c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f4c4:	69bb      	ldr	r3, [r7, #24]
 800f4c6:	f003 0307 	and.w	r3, r3, #7
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d00b      	beq.n	800f4e6 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800f4ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4d2:	f383 8811 	msr	BASEPRI, r3
 800f4d6:	f3bf 8f6f 	isb	sy
 800f4da:	f3bf 8f4f 	dsb	sy
 800f4de:	617b      	str	r3, [r7, #20]
}
 800f4e0:	bf00      	nop
 800f4e2:	bf00      	nop
 800f4e4:	e7fd      	b.n	800f4e2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f4e6:	68bb      	ldr	r3, [r7, #8]
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d01f      	beq.n	800f52c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f4ec:	2300      	movs	r3, #0
 800f4ee:	61fb      	str	r3, [r7, #28]
 800f4f0:	e012      	b.n	800f518 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f4f2:	68ba      	ldr	r2, [r7, #8]
 800f4f4:	69fb      	ldr	r3, [r7, #28]
 800f4f6:	4413      	add	r3, r2
 800f4f8:	7819      	ldrb	r1, [r3, #0]
 800f4fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f4fc:	69fb      	ldr	r3, [r7, #28]
 800f4fe:	4413      	add	r3, r2
 800f500:	3334      	adds	r3, #52	@ 0x34
 800f502:	460a      	mov	r2, r1
 800f504:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f506:	68ba      	ldr	r2, [r7, #8]
 800f508:	69fb      	ldr	r3, [r7, #28]
 800f50a:	4413      	add	r3, r2
 800f50c:	781b      	ldrb	r3, [r3, #0]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d006      	beq.n	800f520 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f512:	69fb      	ldr	r3, [r7, #28]
 800f514:	3301      	adds	r3, #1
 800f516:	61fb      	str	r3, [r7, #28]
 800f518:	69fb      	ldr	r3, [r7, #28]
 800f51a:	2b0f      	cmp	r3, #15
 800f51c:	d9e9      	bls.n	800f4f2 <prvInitialiseNewTask+0x56>
 800f51e:	e000      	b.n	800f522 <prvInitialiseNewTask+0x86>
			{
				break;
 800f520:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f524:	2200      	movs	r2, #0
 800f526:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f52a:	e003      	b.n	800f534 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f52c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f52e:	2200      	movs	r2, #0
 800f530:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f536:	2b06      	cmp	r3, #6
 800f538:	d901      	bls.n	800f53e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f53a:	2306      	movs	r3, #6
 800f53c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f53e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f540:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f542:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f546:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f548:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800f54a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f54c:	2200      	movs	r2, #0
 800f54e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f552:	3304      	adds	r3, #4
 800f554:	4618      	mov	r0, r3
 800f556:	f7ff f8d9 	bl	800e70c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f55a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f55c:	3318      	adds	r3, #24
 800f55e:	4618      	mov	r0, r3
 800f560:	f7ff f8d4 	bl	800e70c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f566:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f568:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f56a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f56c:	f1c3 0207 	rsb	r2, r3, #7
 800f570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f572:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f576:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f578:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f57a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f57c:	2200      	movs	r2, #0
 800f57e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f584:	2200      	movs	r2, #0
 800f586:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f58a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f58c:	334c      	adds	r3, #76	@ 0x4c
 800f58e:	224c      	movs	r2, #76	@ 0x4c
 800f590:	2100      	movs	r1, #0
 800f592:	4618      	mov	r0, r3
 800f594:	f002 fd7d 	bl	8012092 <memset>
 800f598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f59a:	4a0d      	ldr	r2, [pc, #52]	@ (800f5d0 <prvInitialiseNewTask+0x134>)
 800f59c:	651a      	str	r2, [r3, #80]	@ 0x50
 800f59e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5a0:	4a0c      	ldr	r2, [pc, #48]	@ (800f5d4 <prvInitialiseNewTask+0x138>)
 800f5a2:	655a      	str	r2, [r3, #84]	@ 0x54
 800f5a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5a6:	4a0c      	ldr	r2, [pc, #48]	@ (800f5d8 <prvInitialiseNewTask+0x13c>)
 800f5a8:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f5aa:	683a      	ldr	r2, [r7, #0]
 800f5ac:	68f9      	ldr	r1, [r7, #12]
 800f5ae:	69b8      	ldr	r0, [r7, #24]
 800f5b0:	f001 f8ee 	bl	8010790 <pxPortInitialiseStack>
 800f5b4:	4602      	mov	r2, r0
 800f5b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f5ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d002      	beq.n	800f5c6 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f5c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f5c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f5c6:	bf00      	nop
 800f5c8:	3720      	adds	r7, #32
 800f5ca:	46bd      	mov	sp, r7
 800f5cc:	bd80      	pop	{r7, pc}
 800f5ce:	bf00      	nop
 800f5d0:	20005720 	.word	0x20005720
 800f5d4:	20005788 	.word	0x20005788
 800f5d8:	200057f0 	.word	0x200057f0

0800f5dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f5dc:	b580      	push	{r7, lr}
 800f5de:	b082      	sub	sp, #8
 800f5e0:	af00      	add	r7, sp, #0
 800f5e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f5e4:	f001 fa08 	bl	80109f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f5e8:	4b2a      	ldr	r3, [pc, #168]	@ (800f694 <prvAddNewTaskToReadyList+0xb8>)
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	3301      	adds	r3, #1
 800f5ee:	4a29      	ldr	r2, [pc, #164]	@ (800f694 <prvAddNewTaskToReadyList+0xb8>)
 800f5f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f5f2:	4b29      	ldr	r3, [pc, #164]	@ (800f698 <prvAddNewTaskToReadyList+0xbc>)
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d109      	bne.n	800f60e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f5fa:	4a27      	ldr	r2, [pc, #156]	@ (800f698 <prvAddNewTaskToReadyList+0xbc>)
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f600:	4b24      	ldr	r3, [pc, #144]	@ (800f694 <prvAddNewTaskToReadyList+0xb8>)
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	2b01      	cmp	r3, #1
 800f606:	d110      	bne.n	800f62a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f608:	f000 fbe4 	bl	800fdd4 <prvInitialiseTaskLists>
 800f60c:	e00d      	b.n	800f62a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f60e:	4b23      	ldr	r3, [pc, #140]	@ (800f69c <prvAddNewTaskToReadyList+0xc0>)
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	2b00      	cmp	r3, #0
 800f614:	d109      	bne.n	800f62a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f616:	4b20      	ldr	r3, [pc, #128]	@ (800f698 <prvAddNewTaskToReadyList+0xbc>)
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f620:	429a      	cmp	r2, r3
 800f622:	d802      	bhi.n	800f62a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f624:	4a1c      	ldr	r2, [pc, #112]	@ (800f698 <prvAddNewTaskToReadyList+0xbc>)
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f62a:	4b1d      	ldr	r3, [pc, #116]	@ (800f6a0 <prvAddNewTaskToReadyList+0xc4>)
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	3301      	adds	r3, #1
 800f630:	4a1b      	ldr	r2, [pc, #108]	@ (800f6a0 <prvAddNewTaskToReadyList+0xc4>)
 800f632:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f638:	2201      	movs	r2, #1
 800f63a:	409a      	lsls	r2, r3
 800f63c:	4b19      	ldr	r3, [pc, #100]	@ (800f6a4 <prvAddNewTaskToReadyList+0xc8>)
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	4313      	orrs	r3, r2
 800f642:	4a18      	ldr	r2, [pc, #96]	@ (800f6a4 <prvAddNewTaskToReadyList+0xc8>)
 800f644:	6013      	str	r3, [r2, #0]
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f64a:	4613      	mov	r3, r2
 800f64c:	009b      	lsls	r3, r3, #2
 800f64e:	4413      	add	r3, r2
 800f650:	009b      	lsls	r3, r3, #2
 800f652:	4a15      	ldr	r2, [pc, #84]	@ (800f6a8 <prvAddNewTaskToReadyList+0xcc>)
 800f654:	441a      	add	r2, r3
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	3304      	adds	r3, #4
 800f65a:	4619      	mov	r1, r3
 800f65c:	4610      	mov	r0, r2
 800f65e:	f7ff f862 	bl	800e726 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f662:	f001 f9fb 	bl	8010a5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f666:	4b0d      	ldr	r3, [pc, #52]	@ (800f69c <prvAddNewTaskToReadyList+0xc0>)
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d00e      	beq.n	800f68c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f66e:	4b0a      	ldr	r3, [pc, #40]	@ (800f698 <prvAddNewTaskToReadyList+0xbc>)
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f678:	429a      	cmp	r2, r3
 800f67a:	d207      	bcs.n	800f68c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f67c:	4b0b      	ldr	r3, [pc, #44]	@ (800f6ac <prvAddNewTaskToReadyList+0xd0>)
 800f67e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f682:	601a      	str	r2, [r3, #0]
 800f684:	f3bf 8f4f 	dsb	sy
 800f688:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f68c:	bf00      	nop
 800f68e:	3708      	adds	r7, #8
 800f690:	46bd      	mov	sp, r7
 800f692:	bd80      	pop	{r7, pc}
 800f694:	20001ac4 	.word	0x20001ac4
 800f698:	200019c4 	.word	0x200019c4
 800f69c:	20001ad0 	.word	0x20001ad0
 800f6a0:	20001ae0 	.word	0x20001ae0
 800f6a4:	20001acc 	.word	0x20001acc
 800f6a8:	200019c8 	.word	0x200019c8
 800f6ac:	e000ed04 	.word	0xe000ed04

0800f6b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f6b0:	b580      	push	{r7, lr}
 800f6b2:	b084      	sub	sp, #16
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f6b8:	2300      	movs	r3, #0
 800f6ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d018      	beq.n	800f6f4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f6c2:	4b14      	ldr	r3, [pc, #80]	@ (800f714 <vTaskDelay+0x64>)
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d00b      	beq.n	800f6e2 <vTaskDelay+0x32>
	__asm volatile
 800f6ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6ce:	f383 8811 	msr	BASEPRI, r3
 800f6d2:	f3bf 8f6f 	isb	sy
 800f6d6:	f3bf 8f4f 	dsb	sy
 800f6da:	60bb      	str	r3, [r7, #8]
}
 800f6dc:	bf00      	nop
 800f6de:	bf00      	nop
 800f6e0:	e7fd      	b.n	800f6de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f6e2:	f000 f885 	bl	800f7f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f6e6:	2100      	movs	r1, #0
 800f6e8:	6878      	ldr	r0, [r7, #4]
 800f6ea:	f000 ffeb 	bl	80106c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f6ee:	f000 f88d 	bl	800f80c <xTaskResumeAll>
 800f6f2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d107      	bne.n	800f70a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800f6fa:	4b07      	ldr	r3, [pc, #28]	@ (800f718 <vTaskDelay+0x68>)
 800f6fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f700:	601a      	str	r2, [r3, #0]
 800f702:	f3bf 8f4f 	dsb	sy
 800f706:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f70a:	bf00      	nop
 800f70c:	3710      	adds	r7, #16
 800f70e:	46bd      	mov	sp, r7
 800f710:	bd80      	pop	{r7, pc}
 800f712:	bf00      	nop
 800f714:	20001aec 	.word	0x20001aec
 800f718:	e000ed04 	.word	0xe000ed04

0800f71c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f71c:	b580      	push	{r7, lr}
 800f71e:	b08a      	sub	sp, #40	@ 0x28
 800f720:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f722:	2300      	movs	r3, #0
 800f724:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f726:	2300      	movs	r3, #0
 800f728:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f72a:	463a      	mov	r2, r7
 800f72c:	1d39      	adds	r1, r7, #4
 800f72e:	f107 0308 	add.w	r3, r7, #8
 800f732:	4618      	mov	r0, r3
 800f734:	f7f2 fd2c 	bl	8002190 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f738:	6839      	ldr	r1, [r7, #0]
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	68ba      	ldr	r2, [r7, #8]
 800f73e:	9202      	str	r2, [sp, #8]
 800f740:	9301      	str	r3, [sp, #4]
 800f742:	2300      	movs	r3, #0
 800f744:	9300      	str	r3, [sp, #0]
 800f746:	2300      	movs	r3, #0
 800f748:	460a      	mov	r2, r1
 800f74a:	4921      	ldr	r1, [pc, #132]	@ (800f7d0 <vTaskStartScheduler+0xb4>)
 800f74c:	4821      	ldr	r0, [pc, #132]	@ (800f7d4 <vTaskStartScheduler+0xb8>)
 800f74e:	f7ff fdff 	bl	800f350 <xTaskCreateStatic>
 800f752:	4603      	mov	r3, r0
 800f754:	4a20      	ldr	r2, [pc, #128]	@ (800f7d8 <vTaskStartScheduler+0xbc>)
 800f756:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f758:	4b1f      	ldr	r3, [pc, #124]	@ (800f7d8 <vTaskStartScheduler+0xbc>)
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d002      	beq.n	800f766 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f760:	2301      	movs	r3, #1
 800f762:	617b      	str	r3, [r7, #20]
 800f764:	e001      	b.n	800f76a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f766:	2300      	movs	r3, #0
 800f768:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f76a:	697b      	ldr	r3, [r7, #20]
 800f76c:	2b01      	cmp	r3, #1
 800f76e:	d11b      	bne.n	800f7a8 <vTaskStartScheduler+0x8c>
	__asm volatile
 800f770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f774:	f383 8811 	msr	BASEPRI, r3
 800f778:	f3bf 8f6f 	isb	sy
 800f77c:	f3bf 8f4f 	dsb	sy
 800f780:	613b      	str	r3, [r7, #16]
}
 800f782:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f784:	4b15      	ldr	r3, [pc, #84]	@ (800f7dc <vTaskStartScheduler+0xc0>)
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	334c      	adds	r3, #76	@ 0x4c
 800f78a:	4a15      	ldr	r2, [pc, #84]	@ (800f7e0 <vTaskStartScheduler+0xc4>)
 800f78c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f78e:	4b15      	ldr	r3, [pc, #84]	@ (800f7e4 <vTaskStartScheduler+0xc8>)
 800f790:	f04f 32ff 	mov.w	r2, #4294967295
 800f794:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f796:	4b14      	ldr	r3, [pc, #80]	@ (800f7e8 <vTaskStartScheduler+0xcc>)
 800f798:	2201      	movs	r2, #1
 800f79a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f79c:	4b13      	ldr	r3, [pc, #76]	@ (800f7ec <vTaskStartScheduler+0xd0>)
 800f79e:	2200      	movs	r2, #0
 800f7a0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f7a2:	f001 f885 	bl	80108b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f7a6:	e00f      	b.n	800f7c8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f7a8:	697b      	ldr	r3, [r7, #20]
 800f7aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7ae:	d10b      	bne.n	800f7c8 <vTaskStartScheduler+0xac>
	__asm volatile
 800f7b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7b4:	f383 8811 	msr	BASEPRI, r3
 800f7b8:	f3bf 8f6f 	isb	sy
 800f7bc:	f3bf 8f4f 	dsb	sy
 800f7c0:	60fb      	str	r3, [r7, #12]
}
 800f7c2:	bf00      	nop
 800f7c4:	bf00      	nop
 800f7c6:	e7fd      	b.n	800f7c4 <vTaskStartScheduler+0xa8>
}
 800f7c8:	bf00      	nop
 800f7ca:	3718      	adds	r7, #24
 800f7cc:	46bd      	mov	sp, r7
 800f7ce:	bd80      	pop	{r7, pc}
 800f7d0:	08014388 	.word	0x08014388
 800f7d4:	0800fda5 	.word	0x0800fda5
 800f7d8:	20001ae8 	.word	0x20001ae8
 800f7dc:	200019c4 	.word	0x200019c4
 800f7e0:	20000458 	.word	0x20000458
 800f7e4:	20001ae4 	.word	0x20001ae4
 800f7e8:	20001ad0 	.word	0x20001ad0
 800f7ec:	20001ac8 	.word	0x20001ac8

0800f7f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f7f0:	b480      	push	{r7}
 800f7f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f7f4:	4b04      	ldr	r3, [pc, #16]	@ (800f808 <vTaskSuspendAll+0x18>)
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	3301      	adds	r3, #1
 800f7fa:	4a03      	ldr	r2, [pc, #12]	@ (800f808 <vTaskSuspendAll+0x18>)
 800f7fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f7fe:	bf00      	nop
 800f800:	46bd      	mov	sp, r7
 800f802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f806:	4770      	bx	lr
 800f808:	20001aec 	.word	0x20001aec

0800f80c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f80c:	b580      	push	{r7, lr}
 800f80e:	b084      	sub	sp, #16
 800f810:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f812:	2300      	movs	r3, #0
 800f814:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f816:	2300      	movs	r3, #0
 800f818:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f81a:	4b42      	ldr	r3, [pc, #264]	@ (800f924 <xTaskResumeAll+0x118>)
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d10b      	bne.n	800f83a <xTaskResumeAll+0x2e>
	__asm volatile
 800f822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f826:	f383 8811 	msr	BASEPRI, r3
 800f82a:	f3bf 8f6f 	isb	sy
 800f82e:	f3bf 8f4f 	dsb	sy
 800f832:	603b      	str	r3, [r7, #0]
}
 800f834:	bf00      	nop
 800f836:	bf00      	nop
 800f838:	e7fd      	b.n	800f836 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f83a:	f001 f8dd 	bl	80109f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f83e:	4b39      	ldr	r3, [pc, #228]	@ (800f924 <xTaskResumeAll+0x118>)
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	3b01      	subs	r3, #1
 800f844:	4a37      	ldr	r2, [pc, #220]	@ (800f924 <xTaskResumeAll+0x118>)
 800f846:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f848:	4b36      	ldr	r3, [pc, #216]	@ (800f924 <xTaskResumeAll+0x118>)
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d161      	bne.n	800f914 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f850:	4b35      	ldr	r3, [pc, #212]	@ (800f928 <xTaskResumeAll+0x11c>)
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d05d      	beq.n	800f914 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f858:	e02e      	b.n	800f8b8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f85a:	4b34      	ldr	r3, [pc, #208]	@ (800f92c <xTaskResumeAll+0x120>)
 800f85c:	68db      	ldr	r3, [r3, #12]
 800f85e:	68db      	ldr	r3, [r3, #12]
 800f860:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	3318      	adds	r3, #24
 800f866:	4618      	mov	r0, r3
 800f868:	f7fe ffba 	bl	800e7e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	3304      	adds	r3, #4
 800f870:	4618      	mov	r0, r3
 800f872:	f7fe ffb5 	bl	800e7e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f87a:	2201      	movs	r2, #1
 800f87c:	409a      	lsls	r2, r3
 800f87e:	4b2c      	ldr	r3, [pc, #176]	@ (800f930 <xTaskResumeAll+0x124>)
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	4313      	orrs	r3, r2
 800f884:	4a2a      	ldr	r2, [pc, #168]	@ (800f930 <xTaskResumeAll+0x124>)
 800f886:	6013      	str	r3, [r2, #0]
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f88c:	4613      	mov	r3, r2
 800f88e:	009b      	lsls	r3, r3, #2
 800f890:	4413      	add	r3, r2
 800f892:	009b      	lsls	r3, r3, #2
 800f894:	4a27      	ldr	r2, [pc, #156]	@ (800f934 <xTaskResumeAll+0x128>)
 800f896:	441a      	add	r2, r3
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	3304      	adds	r3, #4
 800f89c:	4619      	mov	r1, r3
 800f89e:	4610      	mov	r0, r2
 800f8a0:	f7fe ff41 	bl	800e726 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f8a8:	4b23      	ldr	r3, [pc, #140]	@ (800f938 <xTaskResumeAll+0x12c>)
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f8ae:	429a      	cmp	r2, r3
 800f8b0:	d302      	bcc.n	800f8b8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800f8b2:	4b22      	ldr	r3, [pc, #136]	@ (800f93c <xTaskResumeAll+0x130>)
 800f8b4:	2201      	movs	r2, #1
 800f8b6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f8b8:	4b1c      	ldr	r3, [pc, #112]	@ (800f92c <xTaskResumeAll+0x120>)
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d1cc      	bne.n	800f85a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d001      	beq.n	800f8ca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f8c6:	f000 fb29 	bl	800ff1c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f8ca:	4b1d      	ldr	r3, [pc, #116]	@ (800f940 <xTaskResumeAll+0x134>)
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d010      	beq.n	800f8f8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f8d6:	f000 f837 	bl	800f948 <xTaskIncrementTick>
 800f8da:	4603      	mov	r3, r0
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d002      	beq.n	800f8e6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800f8e0:	4b16      	ldr	r3, [pc, #88]	@ (800f93c <xTaskResumeAll+0x130>)
 800f8e2:	2201      	movs	r2, #1
 800f8e4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	3b01      	subs	r3, #1
 800f8ea:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d1f1      	bne.n	800f8d6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800f8f2:	4b13      	ldr	r3, [pc, #76]	@ (800f940 <xTaskResumeAll+0x134>)
 800f8f4:	2200      	movs	r2, #0
 800f8f6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f8f8:	4b10      	ldr	r3, [pc, #64]	@ (800f93c <xTaskResumeAll+0x130>)
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d009      	beq.n	800f914 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f900:	2301      	movs	r3, #1
 800f902:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f904:	4b0f      	ldr	r3, [pc, #60]	@ (800f944 <xTaskResumeAll+0x138>)
 800f906:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f90a:	601a      	str	r2, [r3, #0]
 800f90c:	f3bf 8f4f 	dsb	sy
 800f910:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f914:	f001 f8a2 	bl	8010a5c <vPortExitCritical>

	return xAlreadyYielded;
 800f918:	68bb      	ldr	r3, [r7, #8]
}
 800f91a:	4618      	mov	r0, r3
 800f91c:	3710      	adds	r7, #16
 800f91e:	46bd      	mov	sp, r7
 800f920:	bd80      	pop	{r7, pc}
 800f922:	bf00      	nop
 800f924:	20001aec 	.word	0x20001aec
 800f928:	20001ac4 	.word	0x20001ac4
 800f92c:	20001a84 	.word	0x20001a84
 800f930:	20001acc 	.word	0x20001acc
 800f934:	200019c8 	.word	0x200019c8
 800f938:	200019c4 	.word	0x200019c4
 800f93c:	20001ad8 	.word	0x20001ad8
 800f940:	20001ad4 	.word	0x20001ad4
 800f944:	e000ed04 	.word	0xe000ed04

0800f948 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f948:	b580      	push	{r7, lr}
 800f94a:	b086      	sub	sp, #24
 800f94c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f94e:	2300      	movs	r3, #0
 800f950:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f952:	4b4f      	ldr	r3, [pc, #316]	@ (800fa90 <xTaskIncrementTick+0x148>)
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	2b00      	cmp	r3, #0
 800f958:	f040 808f 	bne.w	800fa7a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f95c:	4b4d      	ldr	r3, [pc, #308]	@ (800fa94 <xTaskIncrementTick+0x14c>)
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	3301      	adds	r3, #1
 800f962:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f964:	4a4b      	ldr	r2, [pc, #300]	@ (800fa94 <xTaskIncrementTick+0x14c>)
 800f966:	693b      	ldr	r3, [r7, #16]
 800f968:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f96a:	693b      	ldr	r3, [r7, #16]
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d121      	bne.n	800f9b4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800f970:	4b49      	ldr	r3, [pc, #292]	@ (800fa98 <xTaskIncrementTick+0x150>)
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	2b00      	cmp	r3, #0
 800f978:	d00b      	beq.n	800f992 <xTaskIncrementTick+0x4a>
	__asm volatile
 800f97a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f97e:	f383 8811 	msr	BASEPRI, r3
 800f982:	f3bf 8f6f 	isb	sy
 800f986:	f3bf 8f4f 	dsb	sy
 800f98a:	603b      	str	r3, [r7, #0]
}
 800f98c:	bf00      	nop
 800f98e:	bf00      	nop
 800f990:	e7fd      	b.n	800f98e <xTaskIncrementTick+0x46>
 800f992:	4b41      	ldr	r3, [pc, #260]	@ (800fa98 <xTaskIncrementTick+0x150>)
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	60fb      	str	r3, [r7, #12]
 800f998:	4b40      	ldr	r3, [pc, #256]	@ (800fa9c <xTaskIncrementTick+0x154>)
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	4a3e      	ldr	r2, [pc, #248]	@ (800fa98 <xTaskIncrementTick+0x150>)
 800f99e:	6013      	str	r3, [r2, #0]
 800f9a0:	4a3e      	ldr	r2, [pc, #248]	@ (800fa9c <xTaskIncrementTick+0x154>)
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	6013      	str	r3, [r2, #0]
 800f9a6:	4b3e      	ldr	r3, [pc, #248]	@ (800faa0 <xTaskIncrementTick+0x158>)
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	3301      	adds	r3, #1
 800f9ac:	4a3c      	ldr	r2, [pc, #240]	@ (800faa0 <xTaskIncrementTick+0x158>)
 800f9ae:	6013      	str	r3, [r2, #0]
 800f9b0:	f000 fab4 	bl	800ff1c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f9b4:	4b3b      	ldr	r3, [pc, #236]	@ (800faa4 <xTaskIncrementTick+0x15c>)
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	693a      	ldr	r2, [r7, #16]
 800f9ba:	429a      	cmp	r2, r3
 800f9bc:	d348      	bcc.n	800fa50 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f9be:	4b36      	ldr	r3, [pc, #216]	@ (800fa98 <xTaskIncrementTick+0x150>)
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d104      	bne.n	800f9d2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f9c8:	4b36      	ldr	r3, [pc, #216]	@ (800faa4 <xTaskIncrementTick+0x15c>)
 800f9ca:	f04f 32ff 	mov.w	r2, #4294967295
 800f9ce:	601a      	str	r2, [r3, #0]
					break;
 800f9d0:	e03e      	b.n	800fa50 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f9d2:	4b31      	ldr	r3, [pc, #196]	@ (800fa98 <xTaskIncrementTick+0x150>)
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	68db      	ldr	r3, [r3, #12]
 800f9d8:	68db      	ldr	r3, [r3, #12]
 800f9da:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f9dc:	68bb      	ldr	r3, [r7, #8]
 800f9de:	685b      	ldr	r3, [r3, #4]
 800f9e0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f9e2:	693a      	ldr	r2, [r7, #16]
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	429a      	cmp	r2, r3
 800f9e8:	d203      	bcs.n	800f9f2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f9ea:	4a2e      	ldr	r2, [pc, #184]	@ (800faa4 <xTaskIncrementTick+0x15c>)
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f9f0:	e02e      	b.n	800fa50 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f9f2:	68bb      	ldr	r3, [r7, #8]
 800f9f4:	3304      	adds	r3, #4
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	f7fe fef2 	bl	800e7e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f9fc:	68bb      	ldr	r3, [r7, #8]
 800f9fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d004      	beq.n	800fa0e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fa04:	68bb      	ldr	r3, [r7, #8]
 800fa06:	3318      	adds	r3, #24
 800fa08:	4618      	mov	r0, r3
 800fa0a:	f7fe fee9 	bl	800e7e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fa0e:	68bb      	ldr	r3, [r7, #8]
 800fa10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa12:	2201      	movs	r2, #1
 800fa14:	409a      	lsls	r2, r3
 800fa16:	4b24      	ldr	r3, [pc, #144]	@ (800faa8 <xTaskIncrementTick+0x160>)
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	4313      	orrs	r3, r2
 800fa1c:	4a22      	ldr	r2, [pc, #136]	@ (800faa8 <xTaskIncrementTick+0x160>)
 800fa1e:	6013      	str	r3, [r2, #0]
 800fa20:	68bb      	ldr	r3, [r7, #8]
 800fa22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa24:	4613      	mov	r3, r2
 800fa26:	009b      	lsls	r3, r3, #2
 800fa28:	4413      	add	r3, r2
 800fa2a:	009b      	lsls	r3, r3, #2
 800fa2c:	4a1f      	ldr	r2, [pc, #124]	@ (800faac <xTaskIncrementTick+0x164>)
 800fa2e:	441a      	add	r2, r3
 800fa30:	68bb      	ldr	r3, [r7, #8]
 800fa32:	3304      	adds	r3, #4
 800fa34:	4619      	mov	r1, r3
 800fa36:	4610      	mov	r0, r2
 800fa38:	f7fe fe75 	bl	800e726 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fa3c:	68bb      	ldr	r3, [r7, #8]
 800fa3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa40:	4b1b      	ldr	r3, [pc, #108]	@ (800fab0 <xTaskIncrementTick+0x168>)
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa46:	429a      	cmp	r2, r3
 800fa48:	d3b9      	bcc.n	800f9be <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800fa4a:	2301      	movs	r3, #1
 800fa4c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fa4e:	e7b6      	b.n	800f9be <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fa50:	4b17      	ldr	r3, [pc, #92]	@ (800fab0 <xTaskIncrementTick+0x168>)
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa56:	4915      	ldr	r1, [pc, #84]	@ (800faac <xTaskIncrementTick+0x164>)
 800fa58:	4613      	mov	r3, r2
 800fa5a:	009b      	lsls	r3, r3, #2
 800fa5c:	4413      	add	r3, r2
 800fa5e:	009b      	lsls	r3, r3, #2
 800fa60:	440b      	add	r3, r1
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	2b01      	cmp	r3, #1
 800fa66:	d901      	bls.n	800fa6c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800fa68:	2301      	movs	r3, #1
 800fa6a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800fa6c:	4b11      	ldr	r3, [pc, #68]	@ (800fab4 <xTaskIncrementTick+0x16c>)
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d007      	beq.n	800fa84 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800fa74:	2301      	movs	r3, #1
 800fa76:	617b      	str	r3, [r7, #20]
 800fa78:	e004      	b.n	800fa84 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800fa7a:	4b0f      	ldr	r3, [pc, #60]	@ (800fab8 <xTaskIncrementTick+0x170>)
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	3301      	adds	r3, #1
 800fa80:	4a0d      	ldr	r2, [pc, #52]	@ (800fab8 <xTaskIncrementTick+0x170>)
 800fa82:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800fa84:	697b      	ldr	r3, [r7, #20]
}
 800fa86:	4618      	mov	r0, r3
 800fa88:	3718      	adds	r7, #24
 800fa8a:	46bd      	mov	sp, r7
 800fa8c:	bd80      	pop	{r7, pc}
 800fa8e:	bf00      	nop
 800fa90:	20001aec 	.word	0x20001aec
 800fa94:	20001ac8 	.word	0x20001ac8
 800fa98:	20001a7c 	.word	0x20001a7c
 800fa9c:	20001a80 	.word	0x20001a80
 800faa0:	20001adc 	.word	0x20001adc
 800faa4:	20001ae4 	.word	0x20001ae4
 800faa8:	20001acc 	.word	0x20001acc
 800faac:	200019c8 	.word	0x200019c8
 800fab0:	200019c4 	.word	0x200019c4
 800fab4:	20001ad8 	.word	0x20001ad8
 800fab8:	20001ad4 	.word	0x20001ad4

0800fabc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fabc:	b480      	push	{r7}
 800fabe:	b087      	sub	sp, #28
 800fac0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fac2:	4b2a      	ldr	r3, [pc, #168]	@ (800fb6c <vTaskSwitchContext+0xb0>)
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d003      	beq.n	800fad2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800faca:	4b29      	ldr	r3, [pc, #164]	@ (800fb70 <vTaskSwitchContext+0xb4>)
 800facc:	2201      	movs	r2, #1
 800face:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fad0:	e045      	b.n	800fb5e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800fad2:	4b27      	ldr	r3, [pc, #156]	@ (800fb70 <vTaskSwitchContext+0xb4>)
 800fad4:	2200      	movs	r2, #0
 800fad6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fad8:	4b26      	ldr	r3, [pc, #152]	@ (800fb74 <vTaskSwitchContext+0xb8>)
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	fab3 f383 	clz	r3, r3
 800fae4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800fae6:	7afb      	ldrb	r3, [r7, #11]
 800fae8:	f1c3 031f 	rsb	r3, r3, #31
 800faec:	617b      	str	r3, [r7, #20]
 800faee:	4922      	ldr	r1, [pc, #136]	@ (800fb78 <vTaskSwitchContext+0xbc>)
 800faf0:	697a      	ldr	r2, [r7, #20]
 800faf2:	4613      	mov	r3, r2
 800faf4:	009b      	lsls	r3, r3, #2
 800faf6:	4413      	add	r3, r2
 800faf8:	009b      	lsls	r3, r3, #2
 800fafa:	440b      	add	r3, r1
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d10b      	bne.n	800fb1a <vTaskSwitchContext+0x5e>
	__asm volatile
 800fb02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb06:	f383 8811 	msr	BASEPRI, r3
 800fb0a:	f3bf 8f6f 	isb	sy
 800fb0e:	f3bf 8f4f 	dsb	sy
 800fb12:	607b      	str	r3, [r7, #4]
}
 800fb14:	bf00      	nop
 800fb16:	bf00      	nop
 800fb18:	e7fd      	b.n	800fb16 <vTaskSwitchContext+0x5a>
 800fb1a:	697a      	ldr	r2, [r7, #20]
 800fb1c:	4613      	mov	r3, r2
 800fb1e:	009b      	lsls	r3, r3, #2
 800fb20:	4413      	add	r3, r2
 800fb22:	009b      	lsls	r3, r3, #2
 800fb24:	4a14      	ldr	r2, [pc, #80]	@ (800fb78 <vTaskSwitchContext+0xbc>)
 800fb26:	4413      	add	r3, r2
 800fb28:	613b      	str	r3, [r7, #16]
 800fb2a:	693b      	ldr	r3, [r7, #16]
 800fb2c:	685b      	ldr	r3, [r3, #4]
 800fb2e:	685a      	ldr	r2, [r3, #4]
 800fb30:	693b      	ldr	r3, [r7, #16]
 800fb32:	605a      	str	r2, [r3, #4]
 800fb34:	693b      	ldr	r3, [r7, #16]
 800fb36:	685a      	ldr	r2, [r3, #4]
 800fb38:	693b      	ldr	r3, [r7, #16]
 800fb3a:	3308      	adds	r3, #8
 800fb3c:	429a      	cmp	r2, r3
 800fb3e:	d104      	bne.n	800fb4a <vTaskSwitchContext+0x8e>
 800fb40:	693b      	ldr	r3, [r7, #16]
 800fb42:	685b      	ldr	r3, [r3, #4]
 800fb44:	685a      	ldr	r2, [r3, #4]
 800fb46:	693b      	ldr	r3, [r7, #16]
 800fb48:	605a      	str	r2, [r3, #4]
 800fb4a:	693b      	ldr	r3, [r7, #16]
 800fb4c:	685b      	ldr	r3, [r3, #4]
 800fb4e:	68db      	ldr	r3, [r3, #12]
 800fb50:	4a0a      	ldr	r2, [pc, #40]	@ (800fb7c <vTaskSwitchContext+0xc0>)
 800fb52:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fb54:	4b09      	ldr	r3, [pc, #36]	@ (800fb7c <vTaskSwitchContext+0xc0>)
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	334c      	adds	r3, #76	@ 0x4c
 800fb5a:	4a09      	ldr	r2, [pc, #36]	@ (800fb80 <vTaskSwitchContext+0xc4>)
 800fb5c:	6013      	str	r3, [r2, #0]
}
 800fb5e:	bf00      	nop
 800fb60:	371c      	adds	r7, #28
 800fb62:	46bd      	mov	sp, r7
 800fb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb68:	4770      	bx	lr
 800fb6a:	bf00      	nop
 800fb6c:	20001aec 	.word	0x20001aec
 800fb70:	20001ad8 	.word	0x20001ad8
 800fb74:	20001acc 	.word	0x20001acc
 800fb78:	200019c8 	.word	0x200019c8
 800fb7c:	200019c4 	.word	0x200019c4
 800fb80:	20000458 	.word	0x20000458

0800fb84 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fb84:	b580      	push	{r7, lr}
 800fb86:	b084      	sub	sp, #16
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	6078      	str	r0, [r7, #4]
 800fb8c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d10b      	bne.n	800fbac <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800fb94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb98:	f383 8811 	msr	BASEPRI, r3
 800fb9c:	f3bf 8f6f 	isb	sy
 800fba0:	f3bf 8f4f 	dsb	sy
 800fba4:	60fb      	str	r3, [r7, #12]
}
 800fba6:	bf00      	nop
 800fba8:	bf00      	nop
 800fbaa:	e7fd      	b.n	800fba8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fbac:	4b07      	ldr	r3, [pc, #28]	@ (800fbcc <vTaskPlaceOnEventList+0x48>)
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	3318      	adds	r3, #24
 800fbb2:	4619      	mov	r1, r3
 800fbb4:	6878      	ldr	r0, [r7, #4]
 800fbb6:	f7fe fdda 	bl	800e76e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fbba:	2101      	movs	r1, #1
 800fbbc:	6838      	ldr	r0, [r7, #0]
 800fbbe:	f000 fd81 	bl	80106c4 <prvAddCurrentTaskToDelayedList>
}
 800fbc2:	bf00      	nop
 800fbc4:	3710      	adds	r7, #16
 800fbc6:	46bd      	mov	sp, r7
 800fbc8:	bd80      	pop	{r7, pc}
 800fbca:	bf00      	nop
 800fbcc:	200019c4 	.word	0x200019c4

0800fbd0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fbd0:	b580      	push	{r7, lr}
 800fbd2:	b086      	sub	sp, #24
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	68db      	ldr	r3, [r3, #12]
 800fbdc:	68db      	ldr	r3, [r3, #12]
 800fbde:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800fbe0:	693b      	ldr	r3, [r7, #16]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d10b      	bne.n	800fbfe <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800fbe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbea:	f383 8811 	msr	BASEPRI, r3
 800fbee:	f3bf 8f6f 	isb	sy
 800fbf2:	f3bf 8f4f 	dsb	sy
 800fbf6:	60fb      	str	r3, [r7, #12]
}
 800fbf8:	bf00      	nop
 800fbfa:	bf00      	nop
 800fbfc:	e7fd      	b.n	800fbfa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fbfe:	693b      	ldr	r3, [r7, #16]
 800fc00:	3318      	adds	r3, #24
 800fc02:	4618      	mov	r0, r3
 800fc04:	f7fe fdec 	bl	800e7e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fc08:	4b1d      	ldr	r3, [pc, #116]	@ (800fc80 <xTaskRemoveFromEventList+0xb0>)
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d11c      	bne.n	800fc4a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fc10:	693b      	ldr	r3, [r7, #16]
 800fc12:	3304      	adds	r3, #4
 800fc14:	4618      	mov	r0, r3
 800fc16:	f7fe fde3 	bl	800e7e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fc1a:	693b      	ldr	r3, [r7, #16]
 800fc1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc1e:	2201      	movs	r2, #1
 800fc20:	409a      	lsls	r2, r3
 800fc22:	4b18      	ldr	r3, [pc, #96]	@ (800fc84 <xTaskRemoveFromEventList+0xb4>)
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	4313      	orrs	r3, r2
 800fc28:	4a16      	ldr	r2, [pc, #88]	@ (800fc84 <xTaskRemoveFromEventList+0xb4>)
 800fc2a:	6013      	str	r3, [r2, #0]
 800fc2c:	693b      	ldr	r3, [r7, #16]
 800fc2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc30:	4613      	mov	r3, r2
 800fc32:	009b      	lsls	r3, r3, #2
 800fc34:	4413      	add	r3, r2
 800fc36:	009b      	lsls	r3, r3, #2
 800fc38:	4a13      	ldr	r2, [pc, #76]	@ (800fc88 <xTaskRemoveFromEventList+0xb8>)
 800fc3a:	441a      	add	r2, r3
 800fc3c:	693b      	ldr	r3, [r7, #16]
 800fc3e:	3304      	adds	r3, #4
 800fc40:	4619      	mov	r1, r3
 800fc42:	4610      	mov	r0, r2
 800fc44:	f7fe fd6f 	bl	800e726 <vListInsertEnd>
 800fc48:	e005      	b.n	800fc56 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fc4a:	693b      	ldr	r3, [r7, #16]
 800fc4c:	3318      	adds	r3, #24
 800fc4e:	4619      	mov	r1, r3
 800fc50:	480e      	ldr	r0, [pc, #56]	@ (800fc8c <xTaskRemoveFromEventList+0xbc>)
 800fc52:	f7fe fd68 	bl	800e726 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fc56:	693b      	ldr	r3, [r7, #16]
 800fc58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc5a:	4b0d      	ldr	r3, [pc, #52]	@ (800fc90 <xTaskRemoveFromEventList+0xc0>)
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc60:	429a      	cmp	r2, r3
 800fc62:	d905      	bls.n	800fc70 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800fc64:	2301      	movs	r3, #1
 800fc66:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800fc68:	4b0a      	ldr	r3, [pc, #40]	@ (800fc94 <xTaskRemoveFromEventList+0xc4>)
 800fc6a:	2201      	movs	r2, #1
 800fc6c:	601a      	str	r2, [r3, #0]
 800fc6e:	e001      	b.n	800fc74 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800fc70:	2300      	movs	r3, #0
 800fc72:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800fc74:	697b      	ldr	r3, [r7, #20]
}
 800fc76:	4618      	mov	r0, r3
 800fc78:	3718      	adds	r7, #24
 800fc7a:	46bd      	mov	sp, r7
 800fc7c:	bd80      	pop	{r7, pc}
 800fc7e:	bf00      	nop
 800fc80:	20001aec 	.word	0x20001aec
 800fc84:	20001acc 	.word	0x20001acc
 800fc88:	200019c8 	.word	0x200019c8
 800fc8c:	20001a84 	.word	0x20001a84
 800fc90:	200019c4 	.word	0x200019c4
 800fc94:	20001ad8 	.word	0x20001ad8

0800fc98 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800fc98:	b480      	push	{r7}
 800fc9a:	b083      	sub	sp, #12
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fca0:	4b06      	ldr	r3, [pc, #24]	@ (800fcbc <vTaskInternalSetTimeOutState+0x24>)
 800fca2:	681a      	ldr	r2, [r3, #0]
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fca8:	4b05      	ldr	r3, [pc, #20]	@ (800fcc0 <vTaskInternalSetTimeOutState+0x28>)
 800fcaa:	681a      	ldr	r2, [r3, #0]
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	605a      	str	r2, [r3, #4]
}
 800fcb0:	bf00      	nop
 800fcb2:	370c      	adds	r7, #12
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcba:	4770      	bx	lr
 800fcbc:	20001adc 	.word	0x20001adc
 800fcc0:	20001ac8 	.word	0x20001ac8

0800fcc4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800fcc4:	b580      	push	{r7, lr}
 800fcc6:	b088      	sub	sp, #32
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	6078      	str	r0, [r7, #4]
 800fccc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d10b      	bne.n	800fcec <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800fcd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcd8:	f383 8811 	msr	BASEPRI, r3
 800fcdc:	f3bf 8f6f 	isb	sy
 800fce0:	f3bf 8f4f 	dsb	sy
 800fce4:	613b      	str	r3, [r7, #16]
}
 800fce6:	bf00      	nop
 800fce8:	bf00      	nop
 800fcea:	e7fd      	b.n	800fce8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800fcec:	683b      	ldr	r3, [r7, #0]
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d10b      	bne.n	800fd0a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800fcf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcf6:	f383 8811 	msr	BASEPRI, r3
 800fcfa:	f3bf 8f6f 	isb	sy
 800fcfe:	f3bf 8f4f 	dsb	sy
 800fd02:	60fb      	str	r3, [r7, #12]
}
 800fd04:	bf00      	nop
 800fd06:	bf00      	nop
 800fd08:	e7fd      	b.n	800fd06 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800fd0a:	f000 fe75 	bl	80109f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800fd0e:	4b1d      	ldr	r3, [pc, #116]	@ (800fd84 <xTaskCheckForTimeOut+0xc0>)
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	685b      	ldr	r3, [r3, #4]
 800fd18:	69ba      	ldr	r2, [r7, #24]
 800fd1a:	1ad3      	subs	r3, r2, r3
 800fd1c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800fd1e:	683b      	ldr	r3, [r7, #0]
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd26:	d102      	bne.n	800fd2e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800fd28:	2300      	movs	r3, #0
 800fd2a:	61fb      	str	r3, [r7, #28]
 800fd2c:	e023      	b.n	800fd76 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	681a      	ldr	r2, [r3, #0]
 800fd32:	4b15      	ldr	r3, [pc, #84]	@ (800fd88 <xTaskCheckForTimeOut+0xc4>)
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	429a      	cmp	r2, r3
 800fd38:	d007      	beq.n	800fd4a <xTaskCheckForTimeOut+0x86>
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	685b      	ldr	r3, [r3, #4]
 800fd3e:	69ba      	ldr	r2, [r7, #24]
 800fd40:	429a      	cmp	r2, r3
 800fd42:	d302      	bcc.n	800fd4a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800fd44:	2301      	movs	r3, #1
 800fd46:	61fb      	str	r3, [r7, #28]
 800fd48:	e015      	b.n	800fd76 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800fd4a:	683b      	ldr	r3, [r7, #0]
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	697a      	ldr	r2, [r7, #20]
 800fd50:	429a      	cmp	r2, r3
 800fd52:	d20b      	bcs.n	800fd6c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800fd54:	683b      	ldr	r3, [r7, #0]
 800fd56:	681a      	ldr	r2, [r3, #0]
 800fd58:	697b      	ldr	r3, [r7, #20]
 800fd5a:	1ad2      	subs	r2, r2, r3
 800fd5c:	683b      	ldr	r3, [r7, #0]
 800fd5e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fd60:	6878      	ldr	r0, [r7, #4]
 800fd62:	f7ff ff99 	bl	800fc98 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800fd66:	2300      	movs	r3, #0
 800fd68:	61fb      	str	r3, [r7, #28]
 800fd6a:	e004      	b.n	800fd76 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800fd6c:	683b      	ldr	r3, [r7, #0]
 800fd6e:	2200      	movs	r2, #0
 800fd70:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800fd72:	2301      	movs	r3, #1
 800fd74:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800fd76:	f000 fe71 	bl	8010a5c <vPortExitCritical>

	return xReturn;
 800fd7a:	69fb      	ldr	r3, [r7, #28]
}
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	3720      	adds	r7, #32
 800fd80:	46bd      	mov	sp, r7
 800fd82:	bd80      	pop	{r7, pc}
 800fd84:	20001ac8 	.word	0x20001ac8
 800fd88:	20001adc 	.word	0x20001adc

0800fd8c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fd8c:	b480      	push	{r7}
 800fd8e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fd90:	4b03      	ldr	r3, [pc, #12]	@ (800fda0 <vTaskMissedYield+0x14>)
 800fd92:	2201      	movs	r2, #1
 800fd94:	601a      	str	r2, [r3, #0]
}
 800fd96:	bf00      	nop
 800fd98:	46bd      	mov	sp, r7
 800fd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd9e:	4770      	bx	lr
 800fda0:	20001ad8 	.word	0x20001ad8

0800fda4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800fda4:	b580      	push	{r7, lr}
 800fda6:	b082      	sub	sp, #8
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800fdac:	f000 f852 	bl	800fe54 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fdb0:	4b06      	ldr	r3, [pc, #24]	@ (800fdcc <prvIdleTask+0x28>)
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	2b01      	cmp	r3, #1
 800fdb6:	d9f9      	bls.n	800fdac <prvIdleTask+0x8>
			{
				taskYIELD();
 800fdb8:	4b05      	ldr	r3, [pc, #20]	@ (800fdd0 <prvIdleTask+0x2c>)
 800fdba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fdbe:	601a      	str	r2, [r3, #0]
 800fdc0:	f3bf 8f4f 	dsb	sy
 800fdc4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800fdc8:	e7f0      	b.n	800fdac <prvIdleTask+0x8>
 800fdca:	bf00      	nop
 800fdcc:	200019c8 	.word	0x200019c8
 800fdd0:	e000ed04 	.word	0xe000ed04

0800fdd4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fdd4:	b580      	push	{r7, lr}
 800fdd6:	b082      	sub	sp, #8
 800fdd8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fdda:	2300      	movs	r3, #0
 800fddc:	607b      	str	r3, [r7, #4]
 800fdde:	e00c      	b.n	800fdfa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fde0:	687a      	ldr	r2, [r7, #4]
 800fde2:	4613      	mov	r3, r2
 800fde4:	009b      	lsls	r3, r3, #2
 800fde6:	4413      	add	r3, r2
 800fde8:	009b      	lsls	r3, r3, #2
 800fdea:	4a12      	ldr	r2, [pc, #72]	@ (800fe34 <prvInitialiseTaskLists+0x60>)
 800fdec:	4413      	add	r3, r2
 800fdee:	4618      	mov	r0, r3
 800fdf0:	f7fe fc6c 	bl	800e6cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	3301      	adds	r3, #1
 800fdf8:	607b      	str	r3, [r7, #4]
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	2b06      	cmp	r3, #6
 800fdfe:	d9ef      	bls.n	800fde0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fe00:	480d      	ldr	r0, [pc, #52]	@ (800fe38 <prvInitialiseTaskLists+0x64>)
 800fe02:	f7fe fc63 	bl	800e6cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fe06:	480d      	ldr	r0, [pc, #52]	@ (800fe3c <prvInitialiseTaskLists+0x68>)
 800fe08:	f7fe fc60 	bl	800e6cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fe0c:	480c      	ldr	r0, [pc, #48]	@ (800fe40 <prvInitialiseTaskLists+0x6c>)
 800fe0e:	f7fe fc5d 	bl	800e6cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800fe12:	480c      	ldr	r0, [pc, #48]	@ (800fe44 <prvInitialiseTaskLists+0x70>)
 800fe14:	f7fe fc5a 	bl	800e6cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fe18:	480b      	ldr	r0, [pc, #44]	@ (800fe48 <prvInitialiseTaskLists+0x74>)
 800fe1a:	f7fe fc57 	bl	800e6cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800fe1e:	4b0b      	ldr	r3, [pc, #44]	@ (800fe4c <prvInitialiseTaskLists+0x78>)
 800fe20:	4a05      	ldr	r2, [pc, #20]	@ (800fe38 <prvInitialiseTaskLists+0x64>)
 800fe22:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fe24:	4b0a      	ldr	r3, [pc, #40]	@ (800fe50 <prvInitialiseTaskLists+0x7c>)
 800fe26:	4a05      	ldr	r2, [pc, #20]	@ (800fe3c <prvInitialiseTaskLists+0x68>)
 800fe28:	601a      	str	r2, [r3, #0]
}
 800fe2a:	bf00      	nop
 800fe2c:	3708      	adds	r7, #8
 800fe2e:	46bd      	mov	sp, r7
 800fe30:	bd80      	pop	{r7, pc}
 800fe32:	bf00      	nop
 800fe34:	200019c8 	.word	0x200019c8
 800fe38:	20001a54 	.word	0x20001a54
 800fe3c:	20001a68 	.word	0x20001a68
 800fe40:	20001a84 	.word	0x20001a84
 800fe44:	20001a98 	.word	0x20001a98
 800fe48:	20001ab0 	.word	0x20001ab0
 800fe4c:	20001a7c 	.word	0x20001a7c
 800fe50:	20001a80 	.word	0x20001a80

0800fe54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800fe54:	b580      	push	{r7, lr}
 800fe56:	b082      	sub	sp, #8
 800fe58:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fe5a:	e019      	b.n	800fe90 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800fe5c:	f000 fdcc 	bl	80109f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe60:	4b10      	ldr	r3, [pc, #64]	@ (800fea4 <prvCheckTasksWaitingTermination+0x50>)
 800fe62:	68db      	ldr	r3, [r3, #12]
 800fe64:	68db      	ldr	r3, [r3, #12]
 800fe66:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	3304      	adds	r3, #4
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	f7fe fcb7 	bl	800e7e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800fe72:	4b0d      	ldr	r3, [pc, #52]	@ (800fea8 <prvCheckTasksWaitingTermination+0x54>)
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	3b01      	subs	r3, #1
 800fe78:	4a0b      	ldr	r2, [pc, #44]	@ (800fea8 <prvCheckTasksWaitingTermination+0x54>)
 800fe7a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800fe7c:	4b0b      	ldr	r3, [pc, #44]	@ (800feac <prvCheckTasksWaitingTermination+0x58>)
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	3b01      	subs	r3, #1
 800fe82:	4a0a      	ldr	r2, [pc, #40]	@ (800feac <prvCheckTasksWaitingTermination+0x58>)
 800fe84:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800fe86:	f000 fde9 	bl	8010a5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800fe8a:	6878      	ldr	r0, [r7, #4]
 800fe8c:	f000 f810 	bl	800feb0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fe90:	4b06      	ldr	r3, [pc, #24]	@ (800feac <prvCheckTasksWaitingTermination+0x58>)
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d1e1      	bne.n	800fe5c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800fe98:	bf00      	nop
 800fe9a:	bf00      	nop
 800fe9c:	3708      	adds	r7, #8
 800fe9e:	46bd      	mov	sp, r7
 800fea0:	bd80      	pop	{r7, pc}
 800fea2:	bf00      	nop
 800fea4:	20001a98 	.word	0x20001a98
 800fea8:	20001ac4 	.word	0x20001ac4
 800feac:	20001aac 	.word	0x20001aac

0800feb0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800feb0:	b580      	push	{r7, lr}
 800feb2:	b084      	sub	sp, #16
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	334c      	adds	r3, #76	@ 0x4c
 800febc:	4618      	mov	r0, r3
 800febe:	f002 f913 	bl	80120e8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d108      	bne.n	800fede <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fed0:	4618      	mov	r0, r3
 800fed2:	f000 ff81 	bl	8010dd8 <vPortFree>
				vPortFree( pxTCB );
 800fed6:	6878      	ldr	r0, [r7, #4]
 800fed8:	f000 ff7e 	bl	8010dd8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800fedc:	e019      	b.n	800ff12 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800fee4:	2b01      	cmp	r3, #1
 800fee6:	d103      	bne.n	800fef0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800fee8:	6878      	ldr	r0, [r7, #4]
 800feea:	f000 ff75 	bl	8010dd8 <vPortFree>
	}
 800feee:	e010      	b.n	800ff12 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800fef6:	2b02      	cmp	r3, #2
 800fef8:	d00b      	beq.n	800ff12 <prvDeleteTCB+0x62>
	__asm volatile
 800fefa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fefe:	f383 8811 	msr	BASEPRI, r3
 800ff02:	f3bf 8f6f 	isb	sy
 800ff06:	f3bf 8f4f 	dsb	sy
 800ff0a:	60fb      	str	r3, [r7, #12]
}
 800ff0c:	bf00      	nop
 800ff0e:	bf00      	nop
 800ff10:	e7fd      	b.n	800ff0e <prvDeleteTCB+0x5e>
	}
 800ff12:	bf00      	nop
 800ff14:	3710      	adds	r7, #16
 800ff16:	46bd      	mov	sp, r7
 800ff18:	bd80      	pop	{r7, pc}
	...

0800ff1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ff1c:	b480      	push	{r7}
 800ff1e:	b083      	sub	sp, #12
 800ff20:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ff22:	4b0c      	ldr	r3, [pc, #48]	@ (800ff54 <prvResetNextTaskUnblockTime+0x38>)
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d104      	bne.n	800ff36 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ff2c:	4b0a      	ldr	r3, [pc, #40]	@ (800ff58 <prvResetNextTaskUnblockTime+0x3c>)
 800ff2e:	f04f 32ff 	mov.w	r2, #4294967295
 800ff32:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ff34:	e008      	b.n	800ff48 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff36:	4b07      	ldr	r3, [pc, #28]	@ (800ff54 <prvResetNextTaskUnblockTime+0x38>)
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	68db      	ldr	r3, [r3, #12]
 800ff3c:	68db      	ldr	r3, [r3, #12]
 800ff3e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	685b      	ldr	r3, [r3, #4]
 800ff44:	4a04      	ldr	r2, [pc, #16]	@ (800ff58 <prvResetNextTaskUnblockTime+0x3c>)
 800ff46:	6013      	str	r3, [r2, #0]
}
 800ff48:	bf00      	nop
 800ff4a:	370c      	adds	r7, #12
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff52:	4770      	bx	lr
 800ff54:	20001a7c 	.word	0x20001a7c
 800ff58:	20001ae4 	.word	0x20001ae4

0800ff5c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ff5c:	b480      	push	{r7}
 800ff5e:	b083      	sub	sp, #12
 800ff60:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ff62:	4b0b      	ldr	r3, [pc, #44]	@ (800ff90 <xTaskGetSchedulerState+0x34>)
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d102      	bne.n	800ff70 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ff6a:	2301      	movs	r3, #1
 800ff6c:	607b      	str	r3, [r7, #4]
 800ff6e:	e008      	b.n	800ff82 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ff70:	4b08      	ldr	r3, [pc, #32]	@ (800ff94 <xTaskGetSchedulerState+0x38>)
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d102      	bne.n	800ff7e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ff78:	2302      	movs	r3, #2
 800ff7a:	607b      	str	r3, [r7, #4]
 800ff7c:	e001      	b.n	800ff82 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ff7e:	2300      	movs	r3, #0
 800ff80:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ff82:	687b      	ldr	r3, [r7, #4]
	}
 800ff84:	4618      	mov	r0, r3
 800ff86:	370c      	adds	r7, #12
 800ff88:	46bd      	mov	sp, r7
 800ff8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff8e:	4770      	bx	lr
 800ff90:	20001ad0 	.word	0x20001ad0
 800ff94:	20001aec 	.word	0x20001aec

0800ff98 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ff98:	b580      	push	{r7, lr}
 800ff9a:	b084      	sub	sp, #16
 800ff9c:	af00      	add	r7, sp, #0
 800ff9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ffa4:	2300      	movs	r3, #0
 800ffa6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d05e      	beq.n	801006c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ffae:	68bb      	ldr	r3, [r7, #8]
 800ffb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ffb2:	4b31      	ldr	r3, [pc, #196]	@ (8010078 <xTaskPriorityInherit+0xe0>)
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ffb8:	429a      	cmp	r2, r3
 800ffba:	d24e      	bcs.n	801005a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ffbc:	68bb      	ldr	r3, [r7, #8]
 800ffbe:	699b      	ldr	r3, [r3, #24]
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	db06      	blt.n	800ffd2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ffc4:	4b2c      	ldr	r3, [pc, #176]	@ (8010078 <xTaskPriorityInherit+0xe0>)
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ffca:	f1c3 0207 	rsb	r2, r3, #7
 800ffce:	68bb      	ldr	r3, [r7, #8]
 800ffd0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ffd2:	68bb      	ldr	r3, [r7, #8]
 800ffd4:	6959      	ldr	r1, [r3, #20]
 800ffd6:	68bb      	ldr	r3, [r7, #8]
 800ffd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ffda:	4613      	mov	r3, r2
 800ffdc:	009b      	lsls	r3, r3, #2
 800ffde:	4413      	add	r3, r2
 800ffe0:	009b      	lsls	r3, r3, #2
 800ffe2:	4a26      	ldr	r2, [pc, #152]	@ (801007c <xTaskPriorityInherit+0xe4>)
 800ffe4:	4413      	add	r3, r2
 800ffe6:	4299      	cmp	r1, r3
 800ffe8:	d12f      	bne.n	801004a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ffea:	68bb      	ldr	r3, [r7, #8]
 800ffec:	3304      	adds	r3, #4
 800ffee:	4618      	mov	r0, r3
 800fff0:	f7fe fbf6 	bl	800e7e0 <uxListRemove>
 800fff4:	4603      	mov	r3, r0
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d10a      	bne.n	8010010 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800fffa:	68bb      	ldr	r3, [r7, #8]
 800fffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fffe:	2201      	movs	r2, #1
 8010000:	fa02 f303 	lsl.w	r3, r2, r3
 8010004:	43da      	mvns	r2, r3
 8010006:	4b1e      	ldr	r3, [pc, #120]	@ (8010080 <xTaskPriorityInherit+0xe8>)
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	4013      	ands	r3, r2
 801000c:	4a1c      	ldr	r2, [pc, #112]	@ (8010080 <xTaskPriorityInherit+0xe8>)
 801000e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010010:	4b19      	ldr	r3, [pc, #100]	@ (8010078 <xTaskPriorityInherit+0xe0>)
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010016:	68bb      	ldr	r3, [r7, #8]
 8010018:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801001a:	68bb      	ldr	r3, [r7, #8]
 801001c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801001e:	2201      	movs	r2, #1
 8010020:	409a      	lsls	r2, r3
 8010022:	4b17      	ldr	r3, [pc, #92]	@ (8010080 <xTaskPriorityInherit+0xe8>)
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	4313      	orrs	r3, r2
 8010028:	4a15      	ldr	r2, [pc, #84]	@ (8010080 <xTaskPriorityInherit+0xe8>)
 801002a:	6013      	str	r3, [r2, #0]
 801002c:	68bb      	ldr	r3, [r7, #8]
 801002e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010030:	4613      	mov	r3, r2
 8010032:	009b      	lsls	r3, r3, #2
 8010034:	4413      	add	r3, r2
 8010036:	009b      	lsls	r3, r3, #2
 8010038:	4a10      	ldr	r2, [pc, #64]	@ (801007c <xTaskPriorityInherit+0xe4>)
 801003a:	441a      	add	r2, r3
 801003c:	68bb      	ldr	r3, [r7, #8]
 801003e:	3304      	adds	r3, #4
 8010040:	4619      	mov	r1, r3
 8010042:	4610      	mov	r0, r2
 8010044:	f7fe fb6f 	bl	800e726 <vListInsertEnd>
 8010048:	e004      	b.n	8010054 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801004a:	4b0b      	ldr	r3, [pc, #44]	@ (8010078 <xTaskPriorityInherit+0xe0>)
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010050:	68bb      	ldr	r3, [r7, #8]
 8010052:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8010054:	2301      	movs	r3, #1
 8010056:	60fb      	str	r3, [r7, #12]
 8010058:	e008      	b.n	801006c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801005a:	68bb      	ldr	r3, [r7, #8]
 801005c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801005e:	4b06      	ldr	r3, [pc, #24]	@ (8010078 <xTaskPriorityInherit+0xe0>)
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010064:	429a      	cmp	r2, r3
 8010066:	d201      	bcs.n	801006c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8010068:	2301      	movs	r3, #1
 801006a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801006c:	68fb      	ldr	r3, [r7, #12]
	}
 801006e:	4618      	mov	r0, r3
 8010070:	3710      	adds	r7, #16
 8010072:	46bd      	mov	sp, r7
 8010074:	bd80      	pop	{r7, pc}
 8010076:	bf00      	nop
 8010078:	200019c4 	.word	0x200019c4
 801007c:	200019c8 	.word	0x200019c8
 8010080:	20001acc 	.word	0x20001acc

08010084 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010084:	b580      	push	{r7, lr}
 8010086:	b086      	sub	sp, #24
 8010088:	af00      	add	r7, sp, #0
 801008a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010090:	2300      	movs	r3, #0
 8010092:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	2b00      	cmp	r3, #0
 8010098:	d070      	beq.n	801017c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801009a:	4b3b      	ldr	r3, [pc, #236]	@ (8010188 <xTaskPriorityDisinherit+0x104>)
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	693a      	ldr	r2, [r7, #16]
 80100a0:	429a      	cmp	r2, r3
 80100a2:	d00b      	beq.n	80100bc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80100a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100a8:	f383 8811 	msr	BASEPRI, r3
 80100ac:	f3bf 8f6f 	isb	sy
 80100b0:	f3bf 8f4f 	dsb	sy
 80100b4:	60fb      	str	r3, [r7, #12]
}
 80100b6:	bf00      	nop
 80100b8:	bf00      	nop
 80100ba:	e7fd      	b.n	80100b8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80100bc:	693b      	ldr	r3, [r7, #16]
 80100be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d10b      	bne.n	80100dc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80100c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100c8:	f383 8811 	msr	BASEPRI, r3
 80100cc:	f3bf 8f6f 	isb	sy
 80100d0:	f3bf 8f4f 	dsb	sy
 80100d4:	60bb      	str	r3, [r7, #8]
}
 80100d6:	bf00      	nop
 80100d8:	bf00      	nop
 80100da:	e7fd      	b.n	80100d8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80100dc:	693b      	ldr	r3, [r7, #16]
 80100de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80100e0:	1e5a      	subs	r2, r3, #1
 80100e2:	693b      	ldr	r3, [r7, #16]
 80100e4:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80100e6:	693b      	ldr	r3, [r7, #16]
 80100e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80100ea:	693b      	ldr	r3, [r7, #16]
 80100ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80100ee:	429a      	cmp	r2, r3
 80100f0:	d044      	beq.n	801017c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80100f2:	693b      	ldr	r3, [r7, #16]
 80100f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d140      	bne.n	801017c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80100fa:	693b      	ldr	r3, [r7, #16]
 80100fc:	3304      	adds	r3, #4
 80100fe:	4618      	mov	r0, r3
 8010100:	f7fe fb6e 	bl	800e7e0 <uxListRemove>
 8010104:	4603      	mov	r3, r0
 8010106:	2b00      	cmp	r3, #0
 8010108:	d115      	bne.n	8010136 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801010a:	693b      	ldr	r3, [r7, #16]
 801010c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801010e:	491f      	ldr	r1, [pc, #124]	@ (801018c <xTaskPriorityDisinherit+0x108>)
 8010110:	4613      	mov	r3, r2
 8010112:	009b      	lsls	r3, r3, #2
 8010114:	4413      	add	r3, r2
 8010116:	009b      	lsls	r3, r3, #2
 8010118:	440b      	add	r3, r1
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	2b00      	cmp	r3, #0
 801011e:	d10a      	bne.n	8010136 <xTaskPriorityDisinherit+0xb2>
 8010120:	693b      	ldr	r3, [r7, #16]
 8010122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010124:	2201      	movs	r2, #1
 8010126:	fa02 f303 	lsl.w	r3, r2, r3
 801012a:	43da      	mvns	r2, r3
 801012c:	4b18      	ldr	r3, [pc, #96]	@ (8010190 <xTaskPriorityDisinherit+0x10c>)
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	4013      	ands	r3, r2
 8010132:	4a17      	ldr	r2, [pc, #92]	@ (8010190 <xTaskPriorityDisinherit+0x10c>)
 8010134:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010136:	693b      	ldr	r3, [r7, #16]
 8010138:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801013a:	693b      	ldr	r3, [r7, #16]
 801013c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801013e:	693b      	ldr	r3, [r7, #16]
 8010140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010142:	f1c3 0207 	rsb	r2, r3, #7
 8010146:	693b      	ldr	r3, [r7, #16]
 8010148:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801014a:	693b      	ldr	r3, [r7, #16]
 801014c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801014e:	2201      	movs	r2, #1
 8010150:	409a      	lsls	r2, r3
 8010152:	4b0f      	ldr	r3, [pc, #60]	@ (8010190 <xTaskPriorityDisinherit+0x10c>)
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	4313      	orrs	r3, r2
 8010158:	4a0d      	ldr	r2, [pc, #52]	@ (8010190 <xTaskPriorityDisinherit+0x10c>)
 801015a:	6013      	str	r3, [r2, #0]
 801015c:	693b      	ldr	r3, [r7, #16]
 801015e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010160:	4613      	mov	r3, r2
 8010162:	009b      	lsls	r3, r3, #2
 8010164:	4413      	add	r3, r2
 8010166:	009b      	lsls	r3, r3, #2
 8010168:	4a08      	ldr	r2, [pc, #32]	@ (801018c <xTaskPriorityDisinherit+0x108>)
 801016a:	441a      	add	r2, r3
 801016c:	693b      	ldr	r3, [r7, #16]
 801016e:	3304      	adds	r3, #4
 8010170:	4619      	mov	r1, r3
 8010172:	4610      	mov	r0, r2
 8010174:	f7fe fad7 	bl	800e726 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010178:	2301      	movs	r3, #1
 801017a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801017c:	697b      	ldr	r3, [r7, #20]
	}
 801017e:	4618      	mov	r0, r3
 8010180:	3718      	adds	r7, #24
 8010182:	46bd      	mov	sp, r7
 8010184:	bd80      	pop	{r7, pc}
 8010186:	bf00      	nop
 8010188:	200019c4 	.word	0x200019c4
 801018c:	200019c8 	.word	0x200019c8
 8010190:	20001acc 	.word	0x20001acc

08010194 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010194:	b580      	push	{r7, lr}
 8010196:	b088      	sub	sp, #32
 8010198:	af00      	add	r7, sp, #0
 801019a:	6078      	str	r0, [r7, #4]
 801019c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80101a2:	2301      	movs	r3, #1
 80101a4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d079      	beq.n	80102a0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80101ac:	69bb      	ldr	r3, [r7, #24]
 80101ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d10b      	bne.n	80101cc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80101b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101b8:	f383 8811 	msr	BASEPRI, r3
 80101bc:	f3bf 8f6f 	isb	sy
 80101c0:	f3bf 8f4f 	dsb	sy
 80101c4:	60fb      	str	r3, [r7, #12]
}
 80101c6:	bf00      	nop
 80101c8:	bf00      	nop
 80101ca:	e7fd      	b.n	80101c8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80101cc:	69bb      	ldr	r3, [r7, #24]
 80101ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80101d0:	683a      	ldr	r2, [r7, #0]
 80101d2:	429a      	cmp	r2, r3
 80101d4:	d902      	bls.n	80101dc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80101d6:	683b      	ldr	r3, [r7, #0]
 80101d8:	61fb      	str	r3, [r7, #28]
 80101da:	e002      	b.n	80101e2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80101dc:	69bb      	ldr	r3, [r7, #24]
 80101de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80101e0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80101e2:	69bb      	ldr	r3, [r7, #24]
 80101e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101e6:	69fa      	ldr	r2, [r7, #28]
 80101e8:	429a      	cmp	r2, r3
 80101ea:	d059      	beq.n	80102a0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80101ec:	69bb      	ldr	r3, [r7, #24]
 80101ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80101f0:	697a      	ldr	r2, [r7, #20]
 80101f2:	429a      	cmp	r2, r3
 80101f4:	d154      	bne.n	80102a0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80101f6:	4b2c      	ldr	r3, [pc, #176]	@ (80102a8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	69ba      	ldr	r2, [r7, #24]
 80101fc:	429a      	cmp	r2, r3
 80101fe:	d10b      	bne.n	8010218 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8010200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010204:	f383 8811 	msr	BASEPRI, r3
 8010208:	f3bf 8f6f 	isb	sy
 801020c:	f3bf 8f4f 	dsb	sy
 8010210:	60bb      	str	r3, [r7, #8]
}
 8010212:	bf00      	nop
 8010214:	bf00      	nop
 8010216:	e7fd      	b.n	8010214 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010218:	69bb      	ldr	r3, [r7, #24]
 801021a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801021c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801021e:	69bb      	ldr	r3, [r7, #24]
 8010220:	69fa      	ldr	r2, [r7, #28]
 8010222:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010224:	69bb      	ldr	r3, [r7, #24]
 8010226:	699b      	ldr	r3, [r3, #24]
 8010228:	2b00      	cmp	r3, #0
 801022a:	db04      	blt.n	8010236 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801022c:	69fb      	ldr	r3, [r7, #28]
 801022e:	f1c3 0207 	rsb	r2, r3, #7
 8010232:	69bb      	ldr	r3, [r7, #24]
 8010234:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010236:	69bb      	ldr	r3, [r7, #24]
 8010238:	6959      	ldr	r1, [r3, #20]
 801023a:	693a      	ldr	r2, [r7, #16]
 801023c:	4613      	mov	r3, r2
 801023e:	009b      	lsls	r3, r3, #2
 8010240:	4413      	add	r3, r2
 8010242:	009b      	lsls	r3, r3, #2
 8010244:	4a19      	ldr	r2, [pc, #100]	@ (80102ac <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8010246:	4413      	add	r3, r2
 8010248:	4299      	cmp	r1, r3
 801024a:	d129      	bne.n	80102a0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801024c:	69bb      	ldr	r3, [r7, #24]
 801024e:	3304      	adds	r3, #4
 8010250:	4618      	mov	r0, r3
 8010252:	f7fe fac5 	bl	800e7e0 <uxListRemove>
 8010256:	4603      	mov	r3, r0
 8010258:	2b00      	cmp	r3, #0
 801025a:	d10a      	bne.n	8010272 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 801025c:	69bb      	ldr	r3, [r7, #24]
 801025e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010260:	2201      	movs	r2, #1
 8010262:	fa02 f303 	lsl.w	r3, r2, r3
 8010266:	43da      	mvns	r2, r3
 8010268:	4b11      	ldr	r3, [pc, #68]	@ (80102b0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	4013      	ands	r3, r2
 801026e:	4a10      	ldr	r2, [pc, #64]	@ (80102b0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8010270:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8010272:	69bb      	ldr	r3, [r7, #24]
 8010274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010276:	2201      	movs	r2, #1
 8010278:	409a      	lsls	r2, r3
 801027a:	4b0d      	ldr	r3, [pc, #52]	@ (80102b0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	4313      	orrs	r3, r2
 8010280:	4a0b      	ldr	r2, [pc, #44]	@ (80102b0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8010282:	6013      	str	r3, [r2, #0]
 8010284:	69bb      	ldr	r3, [r7, #24]
 8010286:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010288:	4613      	mov	r3, r2
 801028a:	009b      	lsls	r3, r3, #2
 801028c:	4413      	add	r3, r2
 801028e:	009b      	lsls	r3, r3, #2
 8010290:	4a06      	ldr	r2, [pc, #24]	@ (80102ac <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8010292:	441a      	add	r2, r3
 8010294:	69bb      	ldr	r3, [r7, #24]
 8010296:	3304      	adds	r3, #4
 8010298:	4619      	mov	r1, r3
 801029a:	4610      	mov	r0, r2
 801029c:	f7fe fa43 	bl	800e726 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80102a0:	bf00      	nop
 80102a2:	3720      	adds	r7, #32
 80102a4:	46bd      	mov	sp, r7
 80102a6:	bd80      	pop	{r7, pc}
 80102a8:	200019c4 	.word	0x200019c4
 80102ac:	200019c8 	.word	0x200019c8
 80102b0:	20001acc 	.word	0x20001acc

080102b4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80102b4:	b480      	push	{r7}
 80102b6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80102b8:	4b07      	ldr	r3, [pc, #28]	@ (80102d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d004      	beq.n	80102ca <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80102c0:	4b05      	ldr	r3, [pc, #20]	@ (80102d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80102c6:	3201      	adds	r2, #1
 80102c8:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80102ca:	4b03      	ldr	r3, [pc, #12]	@ (80102d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80102cc:	681b      	ldr	r3, [r3, #0]
	}
 80102ce:	4618      	mov	r0, r3
 80102d0:	46bd      	mov	sp, r7
 80102d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d6:	4770      	bx	lr
 80102d8:	200019c4 	.word	0x200019c4

080102dc <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80102dc:	b580      	push	{r7, lr}
 80102de:	b084      	sub	sp, #16
 80102e0:	af00      	add	r7, sp, #0
 80102e2:	6078      	str	r0, [r7, #4]
 80102e4:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80102e6:	f000 fb87 	bl	80109f8 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80102ea:	4b20      	ldr	r3, [pc, #128]	@ (801036c <ulTaskNotifyTake+0x90>)
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d113      	bne.n	801031e <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80102f6:	4b1d      	ldr	r3, [pc, #116]	@ (801036c <ulTaskNotifyTake+0x90>)
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	2201      	movs	r2, #1
 80102fc:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 8010300:	683b      	ldr	r3, [r7, #0]
 8010302:	2b00      	cmp	r3, #0
 8010304:	d00b      	beq.n	801031e <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010306:	2101      	movs	r1, #1
 8010308:	6838      	ldr	r0, [r7, #0]
 801030a:	f000 f9db 	bl	80106c4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 801030e:	4b18      	ldr	r3, [pc, #96]	@ (8010370 <ulTaskNotifyTake+0x94>)
 8010310:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010314:	601a      	str	r2, [r3, #0]
 8010316:	f3bf 8f4f 	dsb	sy
 801031a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801031e:	f000 fb9d 	bl	8010a5c <vPortExitCritical>

		taskENTER_CRITICAL();
 8010322:	f000 fb69 	bl	80109f8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8010326:	4b11      	ldr	r3, [pc, #68]	@ (801036c <ulTaskNotifyTake+0x90>)
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801032e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	2b00      	cmp	r3, #0
 8010334:	d00e      	beq.n	8010354 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d005      	beq.n	8010348 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 801033c:	4b0b      	ldr	r3, [pc, #44]	@ (801036c <ulTaskNotifyTake+0x90>)
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	2200      	movs	r2, #0
 8010342:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8010346:	e005      	b.n	8010354 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8010348:	4b08      	ldr	r3, [pc, #32]	@ (801036c <ulTaskNotifyTake+0x90>)
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	68fa      	ldr	r2, [r7, #12]
 801034e:	3a01      	subs	r2, #1
 8010350:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010354:	4b05      	ldr	r3, [pc, #20]	@ (801036c <ulTaskNotifyTake+0x90>)
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	2200      	movs	r2, #0
 801035a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
		}
		taskEXIT_CRITICAL();
 801035e:	f000 fb7d 	bl	8010a5c <vPortExitCritical>

		return ulReturn;
 8010362:	68fb      	ldr	r3, [r7, #12]
	}
 8010364:	4618      	mov	r0, r3
 8010366:	3710      	adds	r7, #16
 8010368:	46bd      	mov	sp, r7
 801036a:	bd80      	pop	{r7, pc}
 801036c:	200019c4 	.word	0x200019c4
 8010370:	e000ed04 	.word	0xe000ed04

08010374 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8010374:	b580      	push	{r7, lr}
 8010376:	b08a      	sub	sp, #40	@ 0x28
 8010378:	af00      	add	r7, sp, #0
 801037a:	60f8      	str	r0, [r7, #12]
 801037c:	60b9      	str	r1, [r7, #8]
 801037e:	603b      	str	r3, [r7, #0]
 8010380:	4613      	mov	r3, r2
 8010382:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8010384:	2301      	movs	r3, #1
 8010386:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	2b00      	cmp	r3, #0
 801038c:	d10b      	bne.n	80103a6 <xTaskGenericNotify+0x32>
	__asm volatile
 801038e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010392:	f383 8811 	msr	BASEPRI, r3
 8010396:	f3bf 8f6f 	isb	sy
 801039a:	f3bf 8f4f 	dsb	sy
 801039e:	61bb      	str	r3, [r7, #24]
}
 80103a0:	bf00      	nop
 80103a2:	bf00      	nop
 80103a4:	e7fd      	b.n	80103a2 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80103aa:	f000 fb25 	bl	80109f8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80103ae:	683b      	ldr	r3, [r7, #0]
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d004      	beq.n	80103be <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80103b4:	6a3b      	ldr	r3, [r7, #32]
 80103b6:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80103ba:	683b      	ldr	r3, [r7, #0]
 80103bc:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80103be:	6a3b      	ldr	r3, [r7, #32]
 80103c0:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 80103c4:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80103c6:	6a3b      	ldr	r3, [r7, #32]
 80103c8:	2202      	movs	r2, #2
 80103ca:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 80103ce:	79fb      	ldrb	r3, [r7, #7]
 80103d0:	2b04      	cmp	r3, #4
 80103d2:	d82e      	bhi.n	8010432 <xTaskGenericNotify+0xbe>
 80103d4:	a201      	add	r2, pc, #4	@ (adr r2, 80103dc <xTaskGenericNotify+0x68>)
 80103d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103da:	bf00      	nop
 80103dc:	08010457 	.word	0x08010457
 80103e0:	080103f1 	.word	0x080103f1
 80103e4:	08010403 	.word	0x08010403
 80103e8:	08010413 	.word	0x08010413
 80103ec:	0801041d 	.word	0x0801041d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80103f0:	6a3b      	ldr	r3, [r7, #32]
 80103f2:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80103f6:	68bb      	ldr	r3, [r7, #8]
 80103f8:	431a      	orrs	r2, r3
 80103fa:	6a3b      	ldr	r3, [r7, #32]
 80103fc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8010400:	e02c      	b.n	801045c <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8010402:	6a3b      	ldr	r3, [r7, #32]
 8010404:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8010408:	1c5a      	adds	r2, r3, #1
 801040a:	6a3b      	ldr	r3, [r7, #32]
 801040c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8010410:	e024      	b.n	801045c <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8010412:	6a3b      	ldr	r3, [r7, #32]
 8010414:	68ba      	ldr	r2, [r7, #8]
 8010416:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 801041a:	e01f      	b.n	801045c <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801041c:	7ffb      	ldrb	r3, [r7, #31]
 801041e:	2b02      	cmp	r3, #2
 8010420:	d004      	beq.n	801042c <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8010422:	6a3b      	ldr	r3, [r7, #32]
 8010424:	68ba      	ldr	r2, [r7, #8]
 8010426:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801042a:	e017      	b.n	801045c <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 801042c:	2300      	movs	r3, #0
 801042e:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8010430:	e014      	b.n	801045c <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8010432:	6a3b      	ldr	r3, [r7, #32]
 8010434:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8010438:	f1b3 3fff 	cmp.w	r3, #4294967295
 801043c:	d00d      	beq.n	801045a <xTaskGenericNotify+0xe6>
	__asm volatile
 801043e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010442:	f383 8811 	msr	BASEPRI, r3
 8010446:	f3bf 8f6f 	isb	sy
 801044a:	f3bf 8f4f 	dsb	sy
 801044e:	617b      	str	r3, [r7, #20]
}
 8010450:	bf00      	nop
 8010452:	bf00      	nop
 8010454:	e7fd      	b.n	8010452 <xTaskGenericNotify+0xde>
					break;
 8010456:	bf00      	nop
 8010458:	e000      	b.n	801045c <xTaskGenericNotify+0xe8>

					break;
 801045a:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801045c:	7ffb      	ldrb	r3, [r7, #31]
 801045e:	2b01      	cmp	r3, #1
 8010460:	d13a      	bne.n	80104d8 <xTaskGenericNotify+0x164>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010462:	6a3b      	ldr	r3, [r7, #32]
 8010464:	3304      	adds	r3, #4
 8010466:	4618      	mov	r0, r3
 8010468:	f7fe f9ba 	bl	800e7e0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 801046c:	6a3b      	ldr	r3, [r7, #32]
 801046e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010470:	2201      	movs	r2, #1
 8010472:	409a      	lsls	r2, r3
 8010474:	4b1c      	ldr	r3, [pc, #112]	@ (80104e8 <xTaskGenericNotify+0x174>)
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	4313      	orrs	r3, r2
 801047a:	4a1b      	ldr	r2, [pc, #108]	@ (80104e8 <xTaskGenericNotify+0x174>)
 801047c:	6013      	str	r3, [r2, #0]
 801047e:	6a3b      	ldr	r3, [r7, #32]
 8010480:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010482:	4613      	mov	r3, r2
 8010484:	009b      	lsls	r3, r3, #2
 8010486:	4413      	add	r3, r2
 8010488:	009b      	lsls	r3, r3, #2
 801048a:	4a18      	ldr	r2, [pc, #96]	@ (80104ec <xTaskGenericNotify+0x178>)
 801048c:	441a      	add	r2, r3
 801048e:	6a3b      	ldr	r3, [r7, #32]
 8010490:	3304      	adds	r3, #4
 8010492:	4619      	mov	r1, r3
 8010494:	4610      	mov	r0, r2
 8010496:	f7fe f946 	bl	800e726 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801049a:	6a3b      	ldr	r3, [r7, #32]
 801049c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d00b      	beq.n	80104ba <xTaskGenericNotify+0x146>
	__asm volatile
 80104a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80104a6:	f383 8811 	msr	BASEPRI, r3
 80104aa:	f3bf 8f6f 	isb	sy
 80104ae:	f3bf 8f4f 	dsb	sy
 80104b2:	613b      	str	r3, [r7, #16]
}
 80104b4:	bf00      	nop
 80104b6:	bf00      	nop
 80104b8:	e7fd      	b.n	80104b6 <xTaskGenericNotify+0x142>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80104ba:	6a3b      	ldr	r3, [r7, #32]
 80104bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80104be:	4b0c      	ldr	r3, [pc, #48]	@ (80104f0 <xTaskGenericNotify+0x17c>)
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80104c4:	429a      	cmp	r2, r3
 80104c6:	d907      	bls.n	80104d8 <xTaskGenericNotify+0x164>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80104c8:	4b0a      	ldr	r3, [pc, #40]	@ (80104f4 <xTaskGenericNotify+0x180>)
 80104ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80104ce:	601a      	str	r2, [r3, #0]
 80104d0:	f3bf 8f4f 	dsb	sy
 80104d4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80104d8:	f000 fac0 	bl	8010a5c <vPortExitCritical>

		return xReturn;
 80104dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 80104de:	4618      	mov	r0, r3
 80104e0:	3728      	adds	r7, #40	@ 0x28
 80104e2:	46bd      	mov	sp, r7
 80104e4:	bd80      	pop	{r7, pc}
 80104e6:	bf00      	nop
 80104e8:	20001acc 	.word	0x20001acc
 80104ec:	200019c8 	.word	0x200019c8
 80104f0:	200019c4 	.word	0x200019c4
 80104f4:	e000ed04 	.word	0xe000ed04

080104f8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80104f8:	b580      	push	{r7, lr}
 80104fa:	b08e      	sub	sp, #56	@ 0x38
 80104fc:	af00      	add	r7, sp, #0
 80104fe:	60f8      	str	r0, [r7, #12]
 8010500:	60b9      	str	r1, [r7, #8]
 8010502:	603b      	str	r3, [r7, #0]
 8010504:	4613      	mov	r3, r2
 8010506:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8010508:	2301      	movs	r3, #1
 801050a:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	2b00      	cmp	r3, #0
 8010510:	d10b      	bne.n	801052a <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8010512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010516:	f383 8811 	msr	BASEPRI, r3
 801051a:	f3bf 8f6f 	isb	sy
 801051e:	f3bf 8f4f 	dsb	sy
 8010522:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8010524:	bf00      	nop
 8010526:	bf00      	nop
 8010528:	e7fd      	b.n	8010526 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801052a:	f000 fb45 	bl	8010bb8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8010532:	f3ef 8211 	mrs	r2, BASEPRI
 8010536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801053a:	f383 8811 	msr	BASEPRI, r3
 801053e:	f3bf 8f6f 	isb	sy
 8010542:	f3bf 8f4f 	dsb	sy
 8010546:	623a      	str	r2, [r7, #32]
 8010548:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 801054a:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801054c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 801054e:	683b      	ldr	r3, [r7, #0]
 8010550:	2b00      	cmp	r3, #0
 8010552:	d004      	beq.n	801055e <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8010554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010556:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 801055a:	683b      	ldr	r3, [r7, #0]
 801055c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801055e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010560:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8010564:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8010568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801056a:	2202      	movs	r2, #2
 801056c:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 8010570:	79fb      	ldrb	r3, [r7, #7]
 8010572:	2b04      	cmp	r3, #4
 8010574:	d82e      	bhi.n	80105d4 <xTaskGenericNotifyFromISR+0xdc>
 8010576:	a201      	add	r2, pc, #4	@ (adr r2, 801057c <xTaskGenericNotifyFromISR+0x84>)
 8010578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801057c:	080105f9 	.word	0x080105f9
 8010580:	08010591 	.word	0x08010591
 8010584:	080105a3 	.word	0x080105a3
 8010588:	080105b3 	.word	0x080105b3
 801058c:	080105bd 	.word	0x080105bd
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8010590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010592:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8010596:	68bb      	ldr	r3, [r7, #8]
 8010598:	431a      	orrs	r2, r3
 801059a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801059c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 80105a0:	e02d      	b.n	80105fe <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80105a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80105a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80105a8:	1c5a      	adds	r2, r3, #1
 80105aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80105ac:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 80105b0:	e025      	b.n	80105fe <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80105b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80105b4:	68ba      	ldr	r2, [r7, #8]
 80105b6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 80105ba:	e020      	b.n	80105fe <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80105bc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80105c0:	2b02      	cmp	r3, #2
 80105c2:	d004      	beq.n	80105ce <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80105c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80105c6:	68ba      	ldr	r2, [r7, #8]
 80105c8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80105cc:	e017      	b.n	80105fe <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 80105ce:	2300      	movs	r3, #0
 80105d0:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 80105d2:	e014      	b.n	80105fe <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80105d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80105d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80105da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105de:	d00d      	beq.n	80105fc <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 80105e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80105e4:	f383 8811 	msr	BASEPRI, r3
 80105e8:	f3bf 8f6f 	isb	sy
 80105ec:	f3bf 8f4f 	dsb	sy
 80105f0:	61bb      	str	r3, [r7, #24]
}
 80105f2:	bf00      	nop
 80105f4:	bf00      	nop
 80105f6:	e7fd      	b.n	80105f4 <xTaskGenericNotifyFromISR+0xfc>
					break;
 80105f8:	bf00      	nop
 80105fa:	e000      	b.n	80105fe <xTaskGenericNotifyFromISR+0x106>
					break;
 80105fc:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80105fe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010602:	2b01      	cmp	r3, #1
 8010604:	d146      	bne.n	8010694 <xTaskGenericNotifyFromISR+0x19c>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8010606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801060a:	2b00      	cmp	r3, #0
 801060c:	d00b      	beq.n	8010626 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 801060e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010612:	f383 8811 	msr	BASEPRI, r3
 8010616:	f3bf 8f6f 	isb	sy
 801061a:	f3bf 8f4f 	dsb	sy
 801061e:	617b      	str	r3, [r7, #20]
}
 8010620:	bf00      	nop
 8010622:	bf00      	nop
 8010624:	e7fd      	b.n	8010622 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010626:	4b21      	ldr	r3, [pc, #132]	@ (80106ac <xTaskGenericNotifyFromISR+0x1b4>)
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	2b00      	cmp	r3, #0
 801062c:	d11c      	bne.n	8010668 <xTaskGenericNotifyFromISR+0x170>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801062e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010630:	3304      	adds	r3, #4
 8010632:	4618      	mov	r0, r3
 8010634:	f7fe f8d4 	bl	800e7e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801063a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801063c:	2201      	movs	r2, #1
 801063e:	409a      	lsls	r2, r3
 8010640:	4b1b      	ldr	r3, [pc, #108]	@ (80106b0 <xTaskGenericNotifyFromISR+0x1b8>)
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	4313      	orrs	r3, r2
 8010646:	4a1a      	ldr	r2, [pc, #104]	@ (80106b0 <xTaskGenericNotifyFromISR+0x1b8>)
 8010648:	6013      	str	r3, [r2, #0]
 801064a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801064c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801064e:	4613      	mov	r3, r2
 8010650:	009b      	lsls	r3, r3, #2
 8010652:	4413      	add	r3, r2
 8010654:	009b      	lsls	r3, r3, #2
 8010656:	4a17      	ldr	r2, [pc, #92]	@ (80106b4 <xTaskGenericNotifyFromISR+0x1bc>)
 8010658:	441a      	add	r2, r3
 801065a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801065c:	3304      	adds	r3, #4
 801065e:	4619      	mov	r1, r3
 8010660:	4610      	mov	r0, r2
 8010662:	f7fe f860 	bl	800e726 <vListInsertEnd>
 8010666:	e005      	b.n	8010674 <xTaskGenericNotifyFromISR+0x17c>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8010668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801066a:	3318      	adds	r3, #24
 801066c:	4619      	mov	r1, r3
 801066e:	4812      	ldr	r0, [pc, #72]	@ (80106b8 <xTaskGenericNotifyFromISR+0x1c0>)
 8010670:	f7fe f859 	bl	800e726 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010676:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010678:	4b10      	ldr	r3, [pc, #64]	@ (80106bc <xTaskGenericNotifyFromISR+0x1c4>)
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801067e:	429a      	cmp	r2, r3
 8010680:	d908      	bls.n	8010694 <xTaskGenericNotifyFromISR+0x19c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8010682:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010684:	2b00      	cmp	r3, #0
 8010686:	d002      	beq.n	801068e <xTaskGenericNotifyFromISR+0x196>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8010688:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801068a:	2201      	movs	r2, #1
 801068c:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 801068e:	4b0c      	ldr	r3, [pc, #48]	@ (80106c0 <xTaskGenericNotifyFromISR+0x1c8>)
 8010690:	2201      	movs	r2, #1
 8010692:	601a      	str	r2, [r3, #0]
 8010694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010696:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010698:	693b      	ldr	r3, [r7, #16]
 801069a:	f383 8811 	msr	BASEPRI, r3
}
 801069e:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80106a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 80106a2:	4618      	mov	r0, r3
 80106a4:	3738      	adds	r7, #56	@ 0x38
 80106a6:	46bd      	mov	sp, r7
 80106a8:	bd80      	pop	{r7, pc}
 80106aa:	bf00      	nop
 80106ac:	20001aec 	.word	0x20001aec
 80106b0:	20001acc 	.word	0x20001acc
 80106b4:	200019c8 	.word	0x200019c8
 80106b8:	20001a84 	.word	0x20001a84
 80106bc:	200019c4 	.word	0x200019c4
 80106c0:	20001ad8 	.word	0x20001ad8

080106c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80106c4:	b580      	push	{r7, lr}
 80106c6:	b084      	sub	sp, #16
 80106c8:	af00      	add	r7, sp, #0
 80106ca:	6078      	str	r0, [r7, #4]
 80106cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80106ce:	4b29      	ldr	r3, [pc, #164]	@ (8010774 <prvAddCurrentTaskToDelayedList+0xb0>)
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80106d4:	4b28      	ldr	r3, [pc, #160]	@ (8010778 <prvAddCurrentTaskToDelayedList+0xb4>)
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	3304      	adds	r3, #4
 80106da:	4618      	mov	r0, r3
 80106dc:	f7fe f880 	bl	800e7e0 <uxListRemove>
 80106e0:	4603      	mov	r3, r0
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d10b      	bne.n	80106fe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80106e6:	4b24      	ldr	r3, [pc, #144]	@ (8010778 <prvAddCurrentTaskToDelayedList+0xb4>)
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106ec:	2201      	movs	r2, #1
 80106ee:	fa02 f303 	lsl.w	r3, r2, r3
 80106f2:	43da      	mvns	r2, r3
 80106f4:	4b21      	ldr	r3, [pc, #132]	@ (801077c <prvAddCurrentTaskToDelayedList+0xb8>)
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	4013      	ands	r3, r2
 80106fa:	4a20      	ldr	r2, [pc, #128]	@ (801077c <prvAddCurrentTaskToDelayedList+0xb8>)
 80106fc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010704:	d10a      	bne.n	801071c <prvAddCurrentTaskToDelayedList+0x58>
 8010706:	683b      	ldr	r3, [r7, #0]
 8010708:	2b00      	cmp	r3, #0
 801070a:	d007      	beq.n	801071c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801070c:	4b1a      	ldr	r3, [pc, #104]	@ (8010778 <prvAddCurrentTaskToDelayedList+0xb4>)
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	3304      	adds	r3, #4
 8010712:	4619      	mov	r1, r3
 8010714:	481a      	ldr	r0, [pc, #104]	@ (8010780 <prvAddCurrentTaskToDelayedList+0xbc>)
 8010716:	f7fe f806 	bl	800e726 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801071a:	e026      	b.n	801076a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801071c:	68fa      	ldr	r2, [r7, #12]
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	4413      	add	r3, r2
 8010722:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010724:	4b14      	ldr	r3, [pc, #80]	@ (8010778 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	68ba      	ldr	r2, [r7, #8]
 801072a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801072c:	68ba      	ldr	r2, [r7, #8]
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	429a      	cmp	r2, r3
 8010732:	d209      	bcs.n	8010748 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010734:	4b13      	ldr	r3, [pc, #76]	@ (8010784 <prvAddCurrentTaskToDelayedList+0xc0>)
 8010736:	681a      	ldr	r2, [r3, #0]
 8010738:	4b0f      	ldr	r3, [pc, #60]	@ (8010778 <prvAddCurrentTaskToDelayedList+0xb4>)
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	3304      	adds	r3, #4
 801073e:	4619      	mov	r1, r3
 8010740:	4610      	mov	r0, r2
 8010742:	f7fe f814 	bl	800e76e <vListInsert>
}
 8010746:	e010      	b.n	801076a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010748:	4b0f      	ldr	r3, [pc, #60]	@ (8010788 <prvAddCurrentTaskToDelayedList+0xc4>)
 801074a:	681a      	ldr	r2, [r3, #0]
 801074c:	4b0a      	ldr	r3, [pc, #40]	@ (8010778 <prvAddCurrentTaskToDelayedList+0xb4>)
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	3304      	adds	r3, #4
 8010752:	4619      	mov	r1, r3
 8010754:	4610      	mov	r0, r2
 8010756:	f7fe f80a 	bl	800e76e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801075a:	4b0c      	ldr	r3, [pc, #48]	@ (801078c <prvAddCurrentTaskToDelayedList+0xc8>)
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	68ba      	ldr	r2, [r7, #8]
 8010760:	429a      	cmp	r2, r3
 8010762:	d202      	bcs.n	801076a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8010764:	4a09      	ldr	r2, [pc, #36]	@ (801078c <prvAddCurrentTaskToDelayedList+0xc8>)
 8010766:	68bb      	ldr	r3, [r7, #8]
 8010768:	6013      	str	r3, [r2, #0]
}
 801076a:	bf00      	nop
 801076c:	3710      	adds	r7, #16
 801076e:	46bd      	mov	sp, r7
 8010770:	bd80      	pop	{r7, pc}
 8010772:	bf00      	nop
 8010774:	20001ac8 	.word	0x20001ac8
 8010778:	200019c4 	.word	0x200019c4
 801077c:	20001acc 	.word	0x20001acc
 8010780:	20001ab0 	.word	0x20001ab0
 8010784:	20001a80 	.word	0x20001a80
 8010788:	20001a7c 	.word	0x20001a7c
 801078c:	20001ae4 	.word	0x20001ae4

08010790 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010790:	b480      	push	{r7}
 8010792:	b085      	sub	sp, #20
 8010794:	af00      	add	r7, sp, #0
 8010796:	60f8      	str	r0, [r7, #12]
 8010798:	60b9      	str	r1, [r7, #8]
 801079a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	3b04      	subs	r3, #4
 80107a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80107a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	3b04      	subs	r3, #4
 80107ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80107b0:	68bb      	ldr	r3, [r7, #8]
 80107b2:	f023 0201 	bic.w	r2, r3, #1
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	3b04      	subs	r3, #4
 80107be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80107c0:	4a0c      	ldr	r2, [pc, #48]	@ (80107f4 <pxPortInitialiseStack+0x64>)
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	3b14      	subs	r3, #20
 80107ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80107cc:	687a      	ldr	r2, [r7, #4]
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	3b04      	subs	r3, #4
 80107d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	f06f 0202 	mvn.w	r2, #2
 80107de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	3b20      	subs	r3, #32
 80107e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80107e6:	68fb      	ldr	r3, [r7, #12]
}
 80107e8:	4618      	mov	r0, r3
 80107ea:	3714      	adds	r7, #20
 80107ec:	46bd      	mov	sp, r7
 80107ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f2:	4770      	bx	lr
 80107f4:	080107f9 	.word	0x080107f9

080107f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80107f8:	b480      	push	{r7}
 80107fa:	b085      	sub	sp, #20
 80107fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80107fe:	2300      	movs	r3, #0
 8010800:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010802:	4b13      	ldr	r3, [pc, #76]	@ (8010850 <prvTaskExitError+0x58>)
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	f1b3 3fff 	cmp.w	r3, #4294967295
 801080a:	d00b      	beq.n	8010824 <prvTaskExitError+0x2c>
	__asm volatile
 801080c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010810:	f383 8811 	msr	BASEPRI, r3
 8010814:	f3bf 8f6f 	isb	sy
 8010818:	f3bf 8f4f 	dsb	sy
 801081c:	60fb      	str	r3, [r7, #12]
}
 801081e:	bf00      	nop
 8010820:	bf00      	nop
 8010822:	e7fd      	b.n	8010820 <prvTaskExitError+0x28>
	__asm volatile
 8010824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010828:	f383 8811 	msr	BASEPRI, r3
 801082c:	f3bf 8f6f 	isb	sy
 8010830:	f3bf 8f4f 	dsb	sy
 8010834:	60bb      	str	r3, [r7, #8]
}
 8010836:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010838:	bf00      	nop
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	2b00      	cmp	r3, #0
 801083e:	d0fc      	beq.n	801083a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010840:	bf00      	nop
 8010842:	bf00      	nop
 8010844:	3714      	adds	r7, #20
 8010846:	46bd      	mov	sp, r7
 8010848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801084c:	4770      	bx	lr
 801084e:	bf00      	nop
 8010850:	200002dc 	.word	0x200002dc
	...

08010860 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010860:	4b07      	ldr	r3, [pc, #28]	@ (8010880 <pxCurrentTCBConst2>)
 8010862:	6819      	ldr	r1, [r3, #0]
 8010864:	6808      	ldr	r0, [r1, #0]
 8010866:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801086a:	f380 8809 	msr	PSP, r0
 801086e:	f3bf 8f6f 	isb	sy
 8010872:	f04f 0000 	mov.w	r0, #0
 8010876:	f380 8811 	msr	BASEPRI, r0
 801087a:	4770      	bx	lr
 801087c:	f3af 8000 	nop.w

08010880 <pxCurrentTCBConst2>:
 8010880:	200019c4 	.word	0x200019c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010884:	bf00      	nop
 8010886:	bf00      	nop

08010888 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010888:	4808      	ldr	r0, [pc, #32]	@ (80108ac <prvPortStartFirstTask+0x24>)
 801088a:	6800      	ldr	r0, [r0, #0]
 801088c:	6800      	ldr	r0, [r0, #0]
 801088e:	f380 8808 	msr	MSP, r0
 8010892:	f04f 0000 	mov.w	r0, #0
 8010896:	f380 8814 	msr	CONTROL, r0
 801089a:	b662      	cpsie	i
 801089c:	b661      	cpsie	f
 801089e:	f3bf 8f4f 	dsb	sy
 80108a2:	f3bf 8f6f 	isb	sy
 80108a6:	df00      	svc	0
 80108a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80108aa:	bf00      	nop
 80108ac:	e000ed08 	.word	0xe000ed08

080108b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80108b0:	b580      	push	{r7, lr}
 80108b2:	b086      	sub	sp, #24
 80108b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80108b6:	4b47      	ldr	r3, [pc, #284]	@ (80109d4 <xPortStartScheduler+0x124>)
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	4a47      	ldr	r2, [pc, #284]	@ (80109d8 <xPortStartScheduler+0x128>)
 80108bc:	4293      	cmp	r3, r2
 80108be:	d10b      	bne.n	80108d8 <xPortStartScheduler+0x28>
	__asm volatile
 80108c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108c4:	f383 8811 	msr	BASEPRI, r3
 80108c8:	f3bf 8f6f 	isb	sy
 80108cc:	f3bf 8f4f 	dsb	sy
 80108d0:	613b      	str	r3, [r7, #16]
}
 80108d2:	bf00      	nop
 80108d4:	bf00      	nop
 80108d6:	e7fd      	b.n	80108d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80108d8:	4b3e      	ldr	r3, [pc, #248]	@ (80109d4 <xPortStartScheduler+0x124>)
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	4a3f      	ldr	r2, [pc, #252]	@ (80109dc <xPortStartScheduler+0x12c>)
 80108de:	4293      	cmp	r3, r2
 80108e0:	d10b      	bne.n	80108fa <xPortStartScheduler+0x4a>
	__asm volatile
 80108e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108e6:	f383 8811 	msr	BASEPRI, r3
 80108ea:	f3bf 8f6f 	isb	sy
 80108ee:	f3bf 8f4f 	dsb	sy
 80108f2:	60fb      	str	r3, [r7, #12]
}
 80108f4:	bf00      	nop
 80108f6:	bf00      	nop
 80108f8:	e7fd      	b.n	80108f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80108fa:	4b39      	ldr	r3, [pc, #228]	@ (80109e0 <xPortStartScheduler+0x130>)
 80108fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80108fe:	697b      	ldr	r3, [r7, #20]
 8010900:	781b      	ldrb	r3, [r3, #0]
 8010902:	b2db      	uxtb	r3, r3
 8010904:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010906:	697b      	ldr	r3, [r7, #20]
 8010908:	22ff      	movs	r2, #255	@ 0xff
 801090a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801090c:	697b      	ldr	r3, [r7, #20]
 801090e:	781b      	ldrb	r3, [r3, #0]
 8010910:	b2db      	uxtb	r3, r3
 8010912:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010914:	78fb      	ldrb	r3, [r7, #3]
 8010916:	b2db      	uxtb	r3, r3
 8010918:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801091c:	b2da      	uxtb	r2, r3
 801091e:	4b31      	ldr	r3, [pc, #196]	@ (80109e4 <xPortStartScheduler+0x134>)
 8010920:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010922:	4b31      	ldr	r3, [pc, #196]	@ (80109e8 <xPortStartScheduler+0x138>)
 8010924:	2207      	movs	r2, #7
 8010926:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010928:	e009      	b.n	801093e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801092a:	4b2f      	ldr	r3, [pc, #188]	@ (80109e8 <xPortStartScheduler+0x138>)
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	3b01      	subs	r3, #1
 8010930:	4a2d      	ldr	r2, [pc, #180]	@ (80109e8 <xPortStartScheduler+0x138>)
 8010932:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010934:	78fb      	ldrb	r3, [r7, #3]
 8010936:	b2db      	uxtb	r3, r3
 8010938:	005b      	lsls	r3, r3, #1
 801093a:	b2db      	uxtb	r3, r3
 801093c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801093e:	78fb      	ldrb	r3, [r7, #3]
 8010940:	b2db      	uxtb	r3, r3
 8010942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010946:	2b80      	cmp	r3, #128	@ 0x80
 8010948:	d0ef      	beq.n	801092a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801094a:	4b27      	ldr	r3, [pc, #156]	@ (80109e8 <xPortStartScheduler+0x138>)
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	f1c3 0307 	rsb	r3, r3, #7
 8010952:	2b04      	cmp	r3, #4
 8010954:	d00b      	beq.n	801096e <xPortStartScheduler+0xbe>
	__asm volatile
 8010956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801095a:	f383 8811 	msr	BASEPRI, r3
 801095e:	f3bf 8f6f 	isb	sy
 8010962:	f3bf 8f4f 	dsb	sy
 8010966:	60bb      	str	r3, [r7, #8]
}
 8010968:	bf00      	nop
 801096a:	bf00      	nop
 801096c:	e7fd      	b.n	801096a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801096e:	4b1e      	ldr	r3, [pc, #120]	@ (80109e8 <xPortStartScheduler+0x138>)
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	021b      	lsls	r3, r3, #8
 8010974:	4a1c      	ldr	r2, [pc, #112]	@ (80109e8 <xPortStartScheduler+0x138>)
 8010976:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010978:	4b1b      	ldr	r3, [pc, #108]	@ (80109e8 <xPortStartScheduler+0x138>)
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8010980:	4a19      	ldr	r2, [pc, #100]	@ (80109e8 <xPortStartScheduler+0x138>)
 8010982:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	b2da      	uxtb	r2, r3
 8010988:	697b      	ldr	r3, [r7, #20]
 801098a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801098c:	4b17      	ldr	r3, [pc, #92]	@ (80109ec <xPortStartScheduler+0x13c>)
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	4a16      	ldr	r2, [pc, #88]	@ (80109ec <xPortStartScheduler+0x13c>)
 8010992:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8010996:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010998:	4b14      	ldr	r3, [pc, #80]	@ (80109ec <xPortStartScheduler+0x13c>)
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	4a13      	ldr	r2, [pc, #76]	@ (80109ec <xPortStartScheduler+0x13c>)
 801099e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80109a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80109a4:	f000 f8da 	bl	8010b5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80109a8:	4b11      	ldr	r3, [pc, #68]	@ (80109f0 <xPortStartScheduler+0x140>)
 80109aa:	2200      	movs	r2, #0
 80109ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80109ae:	f000 f8f9 	bl	8010ba4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80109b2:	4b10      	ldr	r3, [pc, #64]	@ (80109f4 <xPortStartScheduler+0x144>)
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	4a0f      	ldr	r2, [pc, #60]	@ (80109f4 <xPortStartScheduler+0x144>)
 80109b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80109bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80109be:	f7ff ff63 	bl	8010888 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80109c2:	f7ff f87b 	bl	800fabc <vTaskSwitchContext>
	prvTaskExitError();
 80109c6:	f7ff ff17 	bl	80107f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80109ca:	2300      	movs	r3, #0
}
 80109cc:	4618      	mov	r0, r3
 80109ce:	3718      	adds	r7, #24
 80109d0:	46bd      	mov	sp, r7
 80109d2:	bd80      	pop	{r7, pc}
 80109d4:	e000ed00 	.word	0xe000ed00
 80109d8:	410fc271 	.word	0x410fc271
 80109dc:	410fc270 	.word	0x410fc270
 80109e0:	e000e400 	.word	0xe000e400
 80109e4:	20001af0 	.word	0x20001af0
 80109e8:	20001af4 	.word	0x20001af4
 80109ec:	e000ed20 	.word	0xe000ed20
 80109f0:	200002dc 	.word	0x200002dc
 80109f4:	e000ef34 	.word	0xe000ef34

080109f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80109f8:	b480      	push	{r7}
 80109fa:	b083      	sub	sp, #12
 80109fc:	af00      	add	r7, sp, #0
	__asm volatile
 80109fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a02:	f383 8811 	msr	BASEPRI, r3
 8010a06:	f3bf 8f6f 	isb	sy
 8010a0a:	f3bf 8f4f 	dsb	sy
 8010a0e:	607b      	str	r3, [r7, #4]
}
 8010a10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010a12:	4b10      	ldr	r3, [pc, #64]	@ (8010a54 <vPortEnterCritical+0x5c>)
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	3301      	adds	r3, #1
 8010a18:	4a0e      	ldr	r2, [pc, #56]	@ (8010a54 <vPortEnterCritical+0x5c>)
 8010a1a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010a1c:	4b0d      	ldr	r3, [pc, #52]	@ (8010a54 <vPortEnterCritical+0x5c>)
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	2b01      	cmp	r3, #1
 8010a22:	d110      	bne.n	8010a46 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010a24:	4b0c      	ldr	r3, [pc, #48]	@ (8010a58 <vPortEnterCritical+0x60>)
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	b2db      	uxtb	r3, r3
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d00b      	beq.n	8010a46 <vPortEnterCritical+0x4e>
	__asm volatile
 8010a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a32:	f383 8811 	msr	BASEPRI, r3
 8010a36:	f3bf 8f6f 	isb	sy
 8010a3a:	f3bf 8f4f 	dsb	sy
 8010a3e:	603b      	str	r3, [r7, #0]
}
 8010a40:	bf00      	nop
 8010a42:	bf00      	nop
 8010a44:	e7fd      	b.n	8010a42 <vPortEnterCritical+0x4a>
	}
}
 8010a46:	bf00      	nop
 8010a48:	370c      	adds	r7, #12
 8010a4a:	46bd      	mov	sp, r7
 8010a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a50:	4770      	bx	lr
 8010a52:	bf00      	nop
 8010a54:	200002dc 	.word	0x200002dc
 8010a58:	e000ed04 	.word	0xe000ed04

08010a5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010a5c:	b480      	push	{r7}
 8010a5e:	b083      	sub	sp, #12
 8010a60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010a62:	4b12      	ldr	r3, [pc, #72]	@ (8010aac <vPortExitCritical+0x50>)
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d10b      	bne.n	8010a82 <vPortExitCritical+0x26>
	__asm volatile
 8010a6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a6e:	f383 8811 	msr	BASEPRI, r3
 8010a72:	f3bf 8f6f 	isb	sy
 8010a76:	f3bf 8f4f 	dsb	sy
 8010a7a:	607b      	str	r3, [r7, #4]
}
 8010a7c:	bf00      	nop
 8010a7e:	bf00      	nop
 8010a80:	e7fd      	b.n	8010a7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010a82:	4b0a      	ldr	r3, [pc, #40]	@ (8010aac <vPortExitCritical+0x50>)
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	3b01      	subs	r3, #1
 8010a88:	4a08      	ldr	r2, [pc, #32]	@ (8010aac <vPortExitCritical+0x50>)
 8010a8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010a8c:	4b07      	ldr	r3, [pc, #28]	@ (8010aac <vPortExitCritical+0x50>)
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d105      	bne.n	8010aa0 <vPortExitCritical+0x44>
 8010a94:	2300      	movs	r3, #0
 8010a96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010a98:	683b      	ldr	r3, [r7, #0]
 8010a9a:	f383 8811 	msr	BASEPRI, r3
}
 8010a9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010aa0:	bf00      	nop
 8010aa2:	370c      	adds	r7, #12
 8010aa4:	46bd      	mov	sp, r7
 8010aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aaa:	4770      	bx	lr
 8010aac:	200002dc 	.word	0x200002dc

08010ab0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010ab0:	f3ef 8009 	mrs	r0, PSP
 8010ab4:	f3bf 8f6f 	isb	sy
 8010ab8:	4b15      	ldr	r3, [pc, #84]	@ (8010b10 <pxCurrentTCBConst>)
 8010aba:	681a      	ldr	r2, [r3, #0]
 8010abc:	f01e 0f10 	tst.w	lr, #16
 8010ac0:	bf08      	it	eq
 8010ac2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010ac6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010aca:	6010      	str	r0, [r2, #0]
 8010acc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010ad0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8010ad4:	f380 8811 	msr	BASEPRI, r0
 8010ad8:	f3bf 8f4f 	dsb	sy
 8010adc:	f3bf 8f6f 	isb	sy
 8010ae0:	f7fe ffec 	bl	800fabc <vTaskSwitchContext>
 8010ae4:	f04f 0000 	mov.w	r0, #0
 8010ae8:	f380 8811 	msr	BASEPRI, r0
 8010aec:	bc09      	pop	{r0, r3}
 8010aee:	6819      	ldr	r1, [r3, #0]
 8010af0:	6808      	ldr	r0, [r1, #0]
 8010af2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010af6:	f01e 0f10 	tst.w	lr, #16
 8010afa:	bf08      	it	eq
 8010afc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010b00:	f380 8809 	msr	PSP, r0
 8010b04:	f3bf 8f6f 	isb	sy
 8010b08:	4770      	bx	lr
 8010b0a:	bf00      	nop
 8010b0c:	f3af 8000 	nop.w

08010b10 <pxCurrentTCBConst>:
 8010b10:	200019c4 	.word	0x200019c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010b14:	bf00      	nop
 8010b16:	bf00      	nop

08010b18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010b18:	b580      	push	{r7, lr}
 8010b1a:	b082      	sub	sp, #8
 8010b1c:	af00      	add	r7, sp, #0
	__asm volatile
 8010b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b22:	f383 8811 	msr	BASEPRI, r3
 8010b26:	f3bf 8f6f 	isb	sy
 8010b2a:	f3bf 8f4f 	dsb	sy
 8010b2e:	607b      	str	r3, [r7, #4]
}
 8010b30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010b32:	f7fe ff09 	bl	800f948 <xTaskIncrementTick>
 8010b36:	4603      	mov	r3, r0
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d003      	beq.n	8010b44 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010b3c:	4b06      	ldr	r3, [pc, #24]	@ (8010b58 <SysTick_Handler+0x40>)
 8010b3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010b42:	601a      	str	r2, [r3, #0]
 8010b44:	2300      	movs	r3, #0
 8010b46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010b48:	683b      	ldr	r3, [r7, #0]
 8010b4a:	f383 8811 	msr	BASEPRI, r3
}
 8010b4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010b50:	bf00      	nop
 8010b52:	3708      	adds	r7, #8
 8010b54:	46bd      	mov	sp, r7
 8010b56:	bd80      	pop	{r7, pc}
 8010b58:	e000ed04 	.word	0xe000ed04

08010b5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010b5c:	b480      	push	{r7}
 8010b5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010b60:	4b0b      	ldr	r3, [pc, #44]	@ (8010b90 <vPortSetupTimerInterrupt+0x34>)
 8010b62:	2200      	movs	r2, #0
 8010b64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010b66:	4b0b      	ldr	r3, [pc, #44]	@ (8010b94 <vPortSetupTimerInterrupt+0x38>)
 8010b68:	2200      	movs	r2, #0
 8010b6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8010b98 <vPortSetupTimerInterrupt+0x3c>)
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	4a0a      	ldr	r2, [pc, #40]	@ (8010b9c <vPortSetupTimerInterrupt+0x40>)
 8010b72:	fba2 2303 	umull	r2, r3, r2, r3
 8010b76:	099b      	lsrs	r3, r3, #6
 8010b78:	4a09      	ldr	r2, [pc, #36]	@ (8010ba0 <vPortSetupTimerInterrupt+0x44>)
 8010b7a:	3b01      	subs	r3, #1
 8010b7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010b7e:	4b04      	ldr	r3, [pc, #16]	@ (8010b90 <vPortSetupTimerInterrupt+0x34>)
 8010b80:	2207      	movs	r2, #7
 8010b82:	601a      	str	r2, [r3, #0]
}
 8010b84:	bf00      	nop
 8010b86:	46bd      	mov	sp, r7
 8010b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b8c:	4770      	bx	lr
 8010b8e:	bf00      	nop
 8010b90:	e000e010 	.word	0xe000e010
 8010b94:	e000e018 	.word	0xe000e018
 8010b98:	20000010 	.word	0x20000010
 8010b9c:	10624dd3 	.word	0x10624dd3
 8010ba0:	e000e014 	.word	0xe000e014

08010ba4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010ba4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8010bb4 <vPortEnableVFP+0x10>
 8010ba8:	6801      	ldr	r1, [r0, #0]
 8010baa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8010bae:	6001      	str	r1, [r0, #0]
 8010bb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010bb2:	bf00      	nop
 8010bb4:	e000ed88 	.word	0xe000ed88

08010bb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010bb8:	b480      	push	{r7}
 8010bba:	b085      	sub	sp, #20
 8010bbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010bbe:	f3ef 8305 	mrs	r3, IPSR
 8010bc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	2b0f      	cmp	r3, #15
 8010bc8:	d915      	bls.n	8010bf6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010bca:	4a18      	ldr	r2, [pc, #96]	@ (8010c2c <vPortValidateInterruptPriority+0x74>)
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	4413      	add	r3, r2
 8010bd0:	781b      	ldrb	r3, [r3, #0]
 8010bd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010bd4:	4b16      	ldr	r3, [pc, #88]	@ (8010c30 <vPortValidateInterruptPriority+0x78>)
 8010bd6:	781b      	ldrb	r3, [r3, #0]
 8010bd8:	7afa      	ldrb	r2, [r7, #11]
 8010bda:	429a      	cmp	r2, r3
 8010bdc:	d20b      	bcs.n	8010bf6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8010bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010be2:	f383 8811 	msr	BASEPRI, r3
 8010be6:	f3bf 8f6f 	isb	sy
 8010bea:	f3bf 8f4f 	dsb	sy
 8010bee:	607b      	str	r3, [r7, #4]
}
 8010bf0:	bf00      	nop
 8010bf2:	bf00      	nop
 8010bf4:	e7fd      	b.n	8010bf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010bf6:	4b0f      	ldr	r3, [pc, #60]	@ (8010c34 <vPortValidateInterruptPriority+0x7c>)
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8010bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8010c38 <vPortValidateInterruptPriority+0x80>)
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	429a      	cmp	r2, r3
 8010c04:	d90b      	bls.n	8010c1e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8010c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c0a:	f383 8811 	msr	BASEPRI, r3
 8010c0e:	f3bf 8f6f 	isb	sy
 8010c12:	f3bf 8f4f 	dsb	sy
 8010c16:	603b      	str	r3, [r7, #0]
}
 8010c18:	bf00      	nop
 8010c1a:	bf00      	nop
 8010c1c:	e7fd      	b.n	8010c1a <vPortValidateInterruptPriority+0x62>
	}
 8010c1e:	bf00      	nop
 8010c20:	3714      	adds	r7, #20
 8010c22:	46bd      	mov	sp, r7
 8010c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c28:	4770      	bx	lr
 8010c2a:	bf00      	nop
 8010c2c:	e000e3f0 	.word	0xe000e3f0
 8010c30:	20001af0 	.word	0x20001af0
 8010c34:	e000ed0c 	.word	0xe000ed0c
 8010c38:	20001af4 	.word	0x20001af4

08010c3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010c3c:	b580      	push	{r7, lr}
 8010c3e:	b08a      	sub	sp, #40	@ 0x28
 8010c40:	af00      	add	r7, sp, #0
 8010c42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010c44:	2300      	movs	r3, #0
 8010c46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010c48:	f7fe fdd2 	bl	800f7f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010c4c:	4b5c      	ldr	r3, [pc, #368]	@ (8010dc0 <pvPortMalloc+0x184>)
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d101      	bne.n	8010c58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010c54:	f000 f924 	bl	8010ea0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010c58:	4b5a      	ldr	r3, [pc, #360]	@ (8010dc4 <pvPortMalloc+0x188>)
 8010c5a:	681a      	ldr	r2, [r3, #0]
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	4013      	ands	r3, r2
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	f040 8095 	bne.w	8010d90 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d01e      	beq.n	8010caa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8010c6c:	2208      	movs	r2, #8
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	4413      	add	r3, r2
 8010c72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	f003 0307 	and.w	r3, r3, #7
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d015      	beq.n	8010caa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	f023 0307 	bic.w	r3, r3, #7
 8010c84:	3308      	adds	r3, #8
 8010c86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	f003 0307 	and.w	r3, r3, #7
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d00b      	beq.n	8010caa <pvPortMalloc+0x6e>
	__asm volatile
 8010c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c96:	f383 8811 	msr	BASEPRI, r3
 8010c9a:	f3bf 8f6f 	isb	sy
 8010c9e:	f3bf 8f4f 	dsb	sy
 8010ca2:	617b      	str	r3, [r7, #20]
}
 8010ca4:	bf00      	nop
 8010ca6:	bf00      	nop
 8010ca8:	e7fd      	b.n	8010ca6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d06f      	beq.n	8010d90 <pvPortMalloc+0x154>
 8010cb0:	4b45      	ldr	r3, [pc, #276]	@ (8010dc8 <pvPortMalloc+0x18c>)
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	687a      	ldr	r2, [r7, #4]
 8010cb6:	429a      	cmp	r2, r3
 8010cb8:	d86a      	bhi.n	8010d90 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010cba:	4b44      	ldr	r3, [pc, #272]	@ (8010dcc <pvPortMalloc+0x190>)
 8010cbc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010cbe:	4b43      	ldr	r3, [pc, #268]	@ (8010dcc <pvPortMalloc+0x190>)
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010cc4:	e004      	b.n	8010cd0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8010cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cc8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cd2:	685b      	ldr	r3, [r3, #4]
 8010cd4:	687a      	ldr	r2, [r7, #4]
 8010cd6:	429a      	cmp	r2, r3
 8010cd8:	d903      	bls.n	8010ce2 <pvPortMalloc+0xa6>
 8010cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d1f1      	bne.n	8010cc6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010ce2:	4b37      	ldr	r3, [pc, #220]	@ (8010dc0 <pvPortMalloc+0x184>)
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010ce8:	429a      	cmp	r2, r3
 8010cea:	d051      	beq.n	8010d90 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010cec:	6a3b      	ldr	r3, [r7, #32]
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	2208      	movs	r2, #8
 8010cf2:	4413      	add	r3, r2
 8010cf4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cf8:	681a      	ldr	r2, [r3, #0]
 8010cfa:	6a3b      	ldr	r3, [r7, #32]
 8010cfc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d00:	685a      	ldr	r2, [r3, #4]
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	1ad2      	subs	r2, r2, r3
 8010d06:	2308      	movs	r3, #8
 8010d08:	005b      	lsls	r3, r3, #1
 8010d0a:	429a      	cmp	r2, r3
 8010d0c:	d920      	bls.n	8010d50 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010d0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	4413      	add	r3, r2
 8010d14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010d16:	69bb      	ldr	r3, [r7, #24]
 8010d18:	f003 0307 	and.w	r3, r3, #7
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d00b      	beq.n	8010d38 <pvPortMalloc+0xfc>
	__asm volatile
 8010d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d24:	f383 8811 	msr	BASEPRI, r3
 8010d28:	f3bf 8f6f 	isb	sy
 8010d2c:	f3bf 8f4f 	dsb	sy
 8010d30:	613b      	str	r3, [r7, #16]
}
 8010d32:	bf00      	nop
 8010d34:	bf00      	nop
 8010d36:	e7fd      	b.n	8010d34 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d3a:	685a      	ldr	r2, [r3, #4]
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	1ad2      	subs	r2, r2, r3
 8010d40:	69bb      	ldr	r3, [r7, #24]
 8010d42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d46:	687a      	ldr	r2, [r7, #4]
 8010d48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010d4a:	69b8      	ldr	r0, [r7, #24]
 8010d4c:	f000 f90a 	bl	8010f64 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010d50:	4b1d      	ldr	r3, [pc, #116]	@ (8010dc8 <pvPortMalloc+0x18c>)
 8010d52:	681a      	ldr	r2, [r3, #0]
 8010d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d56:	685b      	ldr	r3, [r3, #4]
 8010d58:	1ad3      	subs	r3, r2, r3
 8010d5a:	4a1b      	ldr	r2, [pc, #108]	@ (8010dc8 <pvPortMalloc+0x18c>)
 8010d5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010d5e:	4b1a      	ldr	r3, [pc, #104]	@ (8010dc8 <pvPortMalloc+0x18c>)
 8010d60:	681a      	ldr	r2, [r3, #0]
 8010d62:	4b1b      	ldr	r3, [pc, #108]	@ (8010dd0 <pvPortMalloc+0x194>)
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	429a      	cmp	r2, r3
 8010d68:	d203      	bcs.n	8010d72 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010d6a:	4b17      	ldr	r3, [pc, #92]	@ (8010dc8 <pvPortMalloc+0x18c>)
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	4a18      	ldr	r2, [pc, #96]	@ (8010dd0 <pvPortMalloc+0x194>)
 8010d70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d74:	685a      	ldr	r2, [r3, #4]
 8010d76:	4b13      	ldr	r3, [pc, #76]	@ (8010dc4 <pvPortMalloc+0x188>)
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	431a      	orrs	r2, r3
 8010d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d82:	2200      	movs	r2, #0
 8010d84:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010d86:	4b13      	ldr	r3, [pc, #76]	@ (8010dd4 <pvPortMalloc+0x198>)
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	3301      	adds	r3, #1
 8010d8c:	4a11      	ldr	r2, [pc, #68]	@ (8010dd4 <pvPortMalloc+0x198>)
 8010d8e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010d90:	f7fe fd3c 	bl	800f80c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010d94:	69fb      	ldr	r3, [r7, #28]
 8010d96:	f003 0307 	and.w	r3, r3, #7
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d00b      	beq.n	8010db6 <pvPortMalloc+0x17a>
	__asm volatile
 8010d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010da2:	f383 8811 	msr	BASEPRI, r3
 8010da6:	f3bf 8f6f 	isb	sy
 8010daa:	f3bf 8f4f 	dsb	sy
 8010dae:	60fb      	str	r3, [r7, #12]
}
 8010db0:	bf00      	nop
 8010db2:	bf00      	nop
 8010db4:	e7fd      	b.n	8010db2 <pvPortMalloc+0x176>
	return pvReturn;
 8010db6:	69fb      	ldr	r3, [r7, #28]
}
 8010db8:	4618      	mov	r0, r3
 8010dba:	3728      	adds	r7, #40	@ 0x28
 8010dbc:	46bd      	mov	sp, r7
 8010dbe:	bd80      	pop	{r7, pc}
 8010dc0:	20005700 	.word	0x20005700
 8010dc4:	20005714 	.word	0x20005714
 8010dc8:	20005704 	.word	0x20005704
 8010dcc:	200056f8 	.word	0x200056f8
 8010dd0:	20005708 	.word	0x20005708
 8010dd4:	2000570c 	.word	0x2000570c

08010dd8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010dd8:	b580      	push	{r7, lr}
 8010dda:	b086      	sub	sp, #24
 8010ddc:	af00      	add	r7, sp, #0
 8010dde:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d04f      	beq.n	8010e8a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010dea:	2308      	movs	r3, #8
 8010dec:	425b      	negs	r3, r3
 8010dee:	697a      	ldr	r2, [r7, #20]
 8010df0:	4413      	add	r3, r2
 8010df2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010df4:	697b      	ldr	r3, [r7, #20]
 8010df6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010df8:	693b      	ldr	r3, [r7, #16]
 8010dfa:	685a      	ldr	r2, [r3, #4]
 8010dfc:	4b25      	ldr	r3, [pc, #148]	@ (8010e94 <vPortFree+0xbc>)
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	4013      	ands	r3, r2
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d10b      	bne.n	8010e1e <vPortFree+0x46>
	__asm volatile
 8010e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e0a:	f383 8811 	msr	BASEPRI, r3
 8010e0e:	f3bf 8f6f 	isb	sy
 8010e12:	f3bf 8f4f 	dsb	sy
 8010e16:	60fb      	str	r3, [r7, #12]
}
 8010e18:	bf00      	nop
 8010e1a:	bf00      	nop
 8010e1c:	e7fd      	b.n	8010e1a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010e1e:	693b      	ldr	r3, [r7, #16]
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d00b      	beq.n	8010e3e <vPortFree+0x66>
	__asm volatile
 8010e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e2a:	f383 8811 	msr	BASEPRI, r3
 8010e2e:	f3bf 8f6f 	isb	sy
 8010e32:	f3bf 8f4f 	dsb	sy
 8010e36:	60bb      	str	r3, [r7, #8]
}
 8010e38:	bf00      	nop
 8010e3a:	bf00      	nop
 8010e3c:	e7fd      	b.n	8010e3a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010e3e:	693b      	ldr	r3, [r7, #16]
 8010e40:	685a      	ldr	r2, [r3, #4]
 8010e42:	4b14      	ldr	r3, [pc, #80]	@ (8010e94 <vPortFree+0xbc>)
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	4013      	ands	r3, r2
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d01e      	beq.n	8010e8a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010e4c:	693b      	ldr	r3, [r7, #16]
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d11a      	bne.n	8010e8a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010e54:	693b      	ldr	r3, [r7, #16]
 8010e56:	685a      	ldr	r2, [r3, #4]
 8010e58:	4b0e      	ldr	r3, [pc, #56]	@ (8010e94 <vPortFree+0xbc>)
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	43db      	mvns	r3, r3
 8010e5e:	401a      	ands	r2, r3
 8010e60:	693b      	ldr	r3, [r7, #16]
 8010e62:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010e64:	f7fe fcc4 	bl	800f7f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010e68:	693b      	ldr	r3, [r7, #16]
 8010e6a:	685a      	ldr	r2, [r3, #4]
 8010e6c:	4b0a      	ldr	r3, [pc, #40]	@ (8010e98 <vPortFree+0xc0>)
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	4413      	add	r3, r2
 8010e72:	4a09      	ldr	r2, [pc, #36]	@ (8010e98 <vPortFree+0xc0>)
 8010e74:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010e76:	6938      	ldr	r0, [r7, #16]
 8010e78:	f000 f874 	bl	8010f64 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010e7c:	4b07      	ldr	r3, [pc, #28]	@ (8010e9c <vPortFree+0xc4>)
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	3301      	adds	r3, #1
 8010e82:	4a06      	ldr	r2, [pc, #24]	@ (8010e9c <vPortFree+0xc4>)
 8010e84:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010e86:	f7fe fcc1 	bl	800f80c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010e8a:	bf00      	nop
 8010e8c:	3718      	adds	r7, #24
 8010e8e:	46bd      	mov	sp, r7
 8010e90:	bd80      	pop	{r7, pc}
 8010e92:	bf00      	nop
 8010e94:	20005714 	.word	0x20005714
 8010e98:	20005704 	.word	0x20005704
 8010e9c:	20005710 	.word	0x20005710

08010ea0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010ea0:	b480      	push	{r7}
 8010ea2:	b085      	sub	sp, #20
 8010ea4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010ea6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8010eaa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010eac:	4b27      	ldr	r3, [pc, #156]	@ (8010f4c <prvHeapInit+0xac>)
 8010eae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	f003 0307 	and.w	r3, r3, #7
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d00c      	beq.n	8010ed4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	3307      	adds	r3, #7
 8010ebe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	f023 0307 	bic.w	r3, r3, #7
 8010ec6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010ec8:	68ba      	ldr	r2, [r7, #8]
 8010eca:	68fb      	ldr	r3, [r7, #12]
 8010ecc:	1ad3      	subs	r3, r2, r3
 8010ece:	4a1f      	ldr	r2, [pc, #124]	@ (8010f4c <prvHeapInit+0xac>)
 8010ed0:	4413      	add	r3, r2
 8010ed2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010ed4:	68fb      	ldr	r3, [r7, #12]
 8010ed6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010ed8:	4a1d      	ldr	r2, [pc, #116]	@ (8010f50 <prvHeapInit+0xb0>)
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010ede:	4b1c      	ldr	r3, [pc, #112]	@ (8010f50 <prvHeapInit+0xb0>)
 8010ee0:	2200      	movs	r2, #0
 8010ee2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	68ba      	ldr	r2, [r7, #8]
 8010ee8:	4413      	add	r3, r2
 8010eea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010eec:	2208      	movs	r2, #8
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	1a9b      	subs	r3, r3, r2
 8010ef2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	f023 0307 	bic.w	r3, r3, #7
 8010efa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	4a15      	ldr	r2, [pc, #84]	@ (8010f54 <prvHeapInit+0xb4>)
 8010f00:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010f02:	4b14      	ldr	r3, [pc, #80]	@ (8010f54 <prvHeapInit+0xb4>)
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	2200      	movs	r2, #0
 8010f08:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010f0a:	4b12      	ldr	r3, [pc, #72]	@ (8010f54 <prvHeapInit+0xb4>)
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	2200      	movs	r2, #0
 8010f10:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010f16:	683b      	ldr	r3, [r7, #0]
 8010f18:	68fa      	ldr	r2, [r7, #12]
 8010f1a:	1ad2      	subs	r2, r2, r3
 8010f1c:	683b      	ldr	r3, [r7, #0]
 8010f1e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010f20:	4b0c      	ldr	r3, [pc, #48]	@ (8010f54 <prvHeapInit+0xb4>)
 8010f22:	681a      	ldr	r2, [r3, #0]
 8010f24:	683b      	ldr	r3, [r7, #0]
 8010f26:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010f28:	683b      	ldr	r3, [r7, #0]
 8010f2a:	685b      	ldr	r3, [r3, #4]
 8010f2c:	4a0a      	ldr	r2, [pc, #40]	@ (8010f58 <prvHeapInit+0xb8>)
 8010f2e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010f30:	683b      	ldr	r3, [r7, #0]
 8010f32:	685b      	ldr	r3, [r3, #4]
 8010f34:	4a09      	ldr	r2, [pc, #36]	@ (8010f5c <prvHeapInit+0xbc>)
 8010f36:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010f38:	4b09      	ldr	r3, [pc, #36]	@ (8010f60 <prvHeapInit+0xc0>)
 8010f3a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8010f3e:	601a      	str	r2, [r3, #0]
}
 8010f40:	bf00      	nop
 8010f42:	3714      	adds	r7, #20
 8010f44:	46bd      	mov	sp, r7
 8010f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f4a:	4770      	bx	lr
 8010f4c:	20001af8 	.word	0x20001af8
 8010f50:	200056f8 	.word	0x200056f8
 8010f54:	20005700 	.word	0x20005700
 8010f58:	20005708 	.word	0x20005708
 8010f5c:	20005704 	.word	0x20005704
 8010f60:	20005714 	.word	0x20005714

08010f64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010f64:	b480      	push	{r7}
 8010f66:	b085      	sub	sp, #20
 8010f68:	af00      	add	r7, sp, #0
 8010f6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010f6c:	4b28      	ldr	r3, [pc, #160]	@ (8011010 <prvInsertBlockIntoFreeList+0xac>)
 8010f6e:	60fb      	str	r3, [r7, #12]
 8010f70:	e002      	b.n	8010f78 <prvInsertBlockIntoFreeList+0x14>
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	60fb      	str	r3, [r7, #12]
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	687a      	ldr	r2, [r7, #4]
 8010f7e:	429a      	cmp	r2, r3
 8010f80:	d8f7      	bhi.n	8010f72 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	685b      	ldr	r3, [r3, #4]
 8010f8a:	68ba      	ldr	r2, [r7, #8]
 8010f8c:	4413      	add	r3, r2
 8010f8e:	687a      	ldr	r2, [r7, #4]
 8010f90:	429a      	cmp	r2, r3
 8010f92:	d108      	bne.n	8010fa6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	685a      	ldr	r2, [r3, #4]
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	685b      	ldr	r3, [r3, #4]
 8010f9c:	441a      	add	r2, r3
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	685b      	ldr	r3, [r3, #4]
 8010fae:	68ba      	ldr	r2, [r7, #8]
 8010fb0:	441a      	add	r2, r3
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	429a      	cmp	r2, r3
 8010fb8:	d118      	bne.n	8010fec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	681a      	ldr	r2, [r3, #0]
 8010fbe:	4b15      	ldr	r3, [pc, #84]	@ (8011014 <prvInsertBlockIntoFreeList+0xb0>)
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	429a      	cmp	r2, r3
 8010fc4:	d00d      	beq.n	8010fe2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	685a      	ldr	r2, [r3, #4]
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	685b      	ldr	r3, [r3, #4]
 8010fd0:	441a      	add	r2, r3
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	681a      	ldr	r2, [r3, #0]
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	601a      	str	r2, [r3, #0]
 8010fe0:	e008      	b.n	8010ff4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8011014 <prvInsertBlockIntoFreeList+0xb0>)
 8010fe4:	681a      	ldr	r2, [r3, #0]
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	601a      	str	r2, [r3, #0]
 8010fea:	e003      	b.n	8010ff4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	681a      	ldr	r2, [r3, #0]
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010ff4:	68fa      	ldr	r2, [r7, #12]
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	429a      	cmp	r2, r3
 8010ffa:	d002      	beq.n	8011002 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	687a      	ldr	r2, [r7, #4]
 8011000:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011002:	bf00      	nop
 8011004:	3714      	adds	r7, #20
 8011006:	46bd      	mov	sp, r7
 8011008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801100c:	4770      	bx	lr
 801100e:	bf00      	nop
 8011010:	200056f8 	.word	0x200056f8
 8011014:	20005700 	.word	0x20005700

08011018 <malloc>:
 8011018:	4b02      	ldr	r3, [pc, #8]	@ (8011024 <malloc+0xc>)
 801101a:	4601      	mov	r1, r0
 801101c:	6818      	ldr	r0, [r3, #0]
 801101e:	f000 b82d 	b.w	801107c <_malloc_r>
 8011022:	bf00      	nop
 8011024:	20000458 	.word	0x20000458

08011028 <free>:
 8011028:	4b02      	ldr	r3, [pc, #8]	@ (8011034 <free+0xc>)
 801102a:	4601      	mov	r1, r0
 801102c:	6818      	ldr	r0, [r3, #0]
 801102e:	f001 b93b 	b.w	80122a8 <_free_r>
 8011032:	bf00      	nop
 8011034:	20000458 	.word	0x20000458

08011038 <sbrk_aligned>:
 8011038:	b570      	push	{r4, r5, r6, lr}
 801103a:	4e0f      	ldr	r6, [pc, #60]	@ (8011078 <sbrk_aligned+0x40>)
 801103c:	460c      	mov	r4, r1
 801103e:	6831      	ldr	r1, [r6, #0]
 8011040:	4605      	mov	r5, r0
 8011042:	b911      	cbnz	r1, 801104a <sbrk_aligned+0x12>
 8011044:	f001 f8ca 	bl	80121dc <_sbrk_r>
 8011048:	6030      	str	r0, [r6, #0]
 801104a:	4621      	mov	r1, r4
 801104c:	4628      	mov	r0, r5
 801104e:	f001 f8c5 	bl	80121dc <_sbrk_r>
 8011052:	1c43      	adds	r3, r0, #1
 8011054:	d103      	bne.n	801105e <sbrk_aligned+0x26>
 8011056:	f04f 34ff 	mov.w	r4, #4294967295
 801105a:	4620      	mov	r0, r4
 801105c:	bd70      	pop	{r4, r5, r6, pc}
 801105e:	1cc4      	adds	r4, r0, #3
 8011060:	f024 0403 	bic.w	r4, r4, #3
 8011064:	42a0      	cmp	r0, r4
 8011066:	d0f8      	beq.n	801105a <sbrk_aligned+0x22>
 8011068:	1a21      	subs	r1, r4, r0
 801106a:	4628      	mov	r0, r5
 801106c:	f001 f8b6 	bl	80121dc <_sbrk_r>
 8011070:	3001      	adds	r0, #1
 8011072:	d1f2      	bne.n	801105a <sbrk_aligned+0x22>
 8011074:	e7ef      	b.n	8011056 <sbrk_aligned+0x1e>
 8011076:	bf00      	nop
 8011078:	20005718 	.word	0x20005718

0801107c <_malloc_r>:
 801107c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011080:	1ccd      	adds	r5, r1, #3
 8011082:	f025 0503 	bic.w	r5, r5, #3
 8011086:	3508      	adds	r5, #8
 8011088:	2d0c      	cmp	r5, #12
 801108a:	bf38      	it	cc
 801108c:	250c      	movcc	r5, #12
 801108e:	2d00      	cmp	r5, #0
 8011090:	4606      	mov	r6, r0
 8011092:	db01      	blt.n	8011098 <_malloc_r+0x1c>
 8011094:	42a9      	cmp	r1, r5
 8011096:	d904      	bls.n	80110a2 <_malloc_r+0x26>
 8011098:	230c      	movs	r3, #12
 801109a:	6033      	str	r3, [r6, #0]
 801109c:	2000      	movs	r0, #0
 801109e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80110a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011178 <_malloc_r+0xfc>
 80110a6:	f000 f869 	bl	801117c <__malloc_lock>
 80110aa:	f8d8 3000 	ldr.w	r3, [r8]
 80110ae:	461c      	mov	r4, r3
 80110b0:	bb44      	cbnz	r4, 8011104 <_malloc_r+0x88>
 80110b2:	4629      	mov	r1, r5
 80110b4:	4630      	mov	r0, r6
 80110b6:	f7ff ffbf 	bl	8011038 <sbrk_aligned>
 80110ba:	1c43      	adds	r3, r0, #1
 80110bc:	4604      	mov	r4, r0
 80110be:	d158      	bne.n	8011172 <_malloc_r+0xf6>
 80110c0:	f8d8 4000 	ldr.w	r4, [r8]
 80110c4:	4627      	mov	r7, r4
 80110c6:	2f00      	cmp	r7, #0
 80110c8:	d143      	bne.n	8011152 <_malloc_r+0xd6>
 80110ca:	2c00      	cmp	r4, #0
 80110cc:	d04b      	beq.n	8011166 <_malloc_r+0xea>
 80110ce:	6823      	ldr	r3, [r4, #0]
 80110d0:	4639      	mov	r1, r7
 80110d2:	4630      	mov	r0, r6
 80110d4:	eb04 0903 	add.w	r9, r4, r3
 80110d8:	f001 f880 	bl	80121dc <_sbrk_r>
 80110dc:	4581      	cmp	r9, r0
 80110de:	d142      	bne.n	8011166 <_malloc_r+0xea>
 80110e0:	6821      	ldr	r1, [r4, #0]
 80110e2:	1a6d      	subs	r5, r5, r1
 80110e4:	4629      	mov	r1, r5
 80110e6:	4630      	mov	r0, r6
 80110e8:	f7ff ffa6 	bl	8011038 <sbrk_aligned>
 80110ec:	3001      	adds	r0, #1
 80110ee:	d03a      	beq.n	8011166 <_malloc_r+0xea>
 80110f0:	6823      	ldr	r3, [r4, #0]
 80110f2:	442b      	add	r3, r5
 80110f4:	6023      	str	r3, [r4, #0]
 80110f6:	f8d8 3000 	ldr.w	r3, [r8]
 80110fa:	685a      	ldr	r2, [r3, #4]
 80110fc:	bb62      	cbnz	r2, 8011158 <_malloc_r+0xdc>
 80110fe:	f8c8 7000 	str.w	r7, [r8]
 8011102:	e00f      	b.n	8011124 <_malloc_r+0xa8>
 8011104:	6822      	ldr	r2, [r4, #0]
 8011106:	1b52      	subs	r2, r2, r5
 8011108:	d420      	bmi.n	801114c <_malloc_r+0xd0>
 801110a:	2a0b      	cmp	r2, #11
 801110c:	d917      	bls.n	801113e <_malloc_r+0xc2>
 801110e:	1961      	adds	r1, r4, r5
 8011110:	42a3      	cmp	r3, r4
 8011112:	6025      	str	r5, [r4, #0]
 8011114:	bf18      	it	ne
 8011116:	6059      	strne	r1, [r3, #4]
 8011118:	6863      	ldr	r3, [r4, #4]
 801111a:	bf08      	it	eq
 801111c:	f8c8 1000 	streq.w	r1, [r8]
 8011120:	5162      	str	r2, [r4, r5]
 8011122:	604b      	str	r3, [r1, #4]
 8011124:	4630      	mov	r0, r6
 8011126:	f000 f82f 	bl	8011188 <__malloc_unlock>
 801112a:	f104 000b 	add.w	r0, r4, #11
 801112e:	1d23      	adds	r3, r4, #4
 8011130:	f020 0007 	bic.w	r0, r0, #7
 8011134:	1ac2      	subs	r2, r0, r3
 8011136:	bf1c      	itt	ne
 8011138:	1a1b      	subne	r3, r3, r0
 801113a:	50a3      	strne	r3, [r4, r2]
 801113c:	e7af      	b.n	801109e <_malloc_r+0x22>
 801113e:	6862      	ldr	r2, [r4, #4]
 8011140:	42a3      	cmp	r3, r4
 8011142:	bf0c      	ite	eq
 8011144:	f8c8 2000 	streq.w	r2, [r8]
 8011148:	605a      	strne	r2, [r3, #4]
 801114a:	e7eb      	b.n	8011124 <_malloc_r+0xa8>
 801114c:	4623      	mov	r3, r4
 801114e:	6864      	ldr	r4, [r4, #4]
 8011150:	e7ae      	b.n	80110b0 <_malloc_r+0x34>
 8011152:	463c      	mov	r4, r7
 8011154:	687f      	ldr	r7, [r7, #4]
 8011156:	e7b6      	b.n	80110c6 <_malloc_r+0x4a>
 8011158:	461a      	mov	r2, r3
 801115a:	685b      	ldr	r3, [r3, #4]
 801115c:	42a3      	cmp	r3, r4
 801115e:	d1fb      	bne.n	8011158 <_malloc_r+0xdc>
 8011160:	2300      	movs	r3, #0
 8011162:	6053      	str	r3, [r2, #4]
 8011164:	e7de      	b.n	8011124 <_malloc_r+0xa8>
 8011166:	230c      	movs	r3, #12
 8011168:	6033      	str	r3, [r6, #0]
 801116a:	4630      	mov	r0, r6
 801116c:	f000 f80c 	bl	8011188 <__malloc_unlock>
 8011170:	e794      	b.n	801109c <_malloc_r+0x20>
 8011172:	6005      	str	r5, [r0, #0]
 8011174:	e7d6      	b.n	8011124 <_malloc_r+0xa8>
 8011176:	bf00      	nop
 8011178:	2000571c 	.word	0x2000571c

0801117c <__malloc_lock>:
 801117c:	4801      	ldr	r0, [pc, #4]	@ (8011184 <__malloc_lock+0x8>)
 801117e:	f001 b87a 	b.w	8012276 <__retarget_lock_acquire_recursive>
 8011182:	bf00      	nop
 8011184:	20005860 	.word	0x20005860

08011188 <__malloc_unlock>:
 8011188:	4801      	ldr	r0, [pc, #4]	@ (8011190 <__malloc_unlock+0x8>)
 801118a:	f001 b875 	b.w	8012278 <__retarget_lock_release_recursive>
 801118e:	bf00      	nop
 8011190:	20005860 	.word	0x20005860

08011194 <realloc>:
 8011194:	4b02      	ldr	r3, [pc, #8]	@ (80111a0 <realloc+0xc>)
 8011196:	460a      	mov	r2, r1
 8011198:	4601      	mov	r1, r0
 801119a:	6818      	ldr	r0, [r3, #0]
 801119c:	f000 b802 	b.w	80111a4 <_realloc_r>
 80111a0:	20000458 	.word	0x20000458

080111a4 <_realloc_r>:
 80111a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111a8:	4680      	mov	r8, r0
 80111aa:	4615      	mov	r5, r2
 80111ac:	460c      	mov	r4, r1
 80111ae:	b921      	cbnz	r1, 80111ba <_realloc_r+0x16>
 80111b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80111b4:	4611      	mov	r1, r2
 80111b6:	f7ff bf61 	b.w	801107c <_malloc_r>
 80111ba:	b92a      	cbnz	r2, 80111c8 <_realloc_r+0x24>
 80111bc:	f001 f874 	bl	80122a8 <_free_r>
 80111c0:	2400      	movs	r4, #0
 80111c2:	4620      	mov	r0, r4
 80111c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111c8:	f002 f8b6 	bl	8013338 <_malloc_usable_size_r>
 80111cc:	4285      	cmp	r5, r0
 80111ce:	4606      	mov	r6, r0
 80111d0:	d802      	bhi.n	80111d8 <_realloc_r+0x34>
 80111d2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80111d6:	d8f4      	bhi.n	80111c2 <_realloc_r+0x1e>
 80111d8:	4629      	mov	r1, r5
 80111da:	4640      	mov	r0, r8
 80111dc:	f7ff ff4e 	bl	801107c <_malloc_r>
 80111e0:	4607      	mov	r7, r0
 80111e2:	2800      	cmp	r0, #0
 80111e4:	d0ec      	beq.n	80111c0 <_realloc_r+0x1c>
 80111e6:	42b5      	cmp	r5, r6
 80111e8:	462a      	mov	r2, r5
 80111ea:	4621      	mov	r1, r4
 80111ec:	bf28      	it	cs
 80111ee:	4632      	movcs	r2, r6
 80111f0:	f001 f843 	bl	801227a <memcpy>
 80111f4:	4621      	mov	r1, r4
 80111f6:	4640      	mov	r0, r8
 80111f8:	f001 f856 	bl	80122a8 <_free_r>
 80111fc:	463c      	mov	r4, r7
 80111fe:	e7e0      	b.n	80111c2 <_realloc_r+0x1e>

08011200 <sulp>:
 8011200:	b570      	push	{r4, r5, r6, lr}
 8011202:	4604      	mov	r4, r0
 8011204:	460d      	mov	r5, r1
 8011206:	ec45 4b10 	vmov	d0, r4, r5
 801120a:	4616      	mov	r6, r2
 801120c:	f001 ff56 	bl	80130bc <__ulp>
 8011210:	ec51 0b10 	vmov	r0, r1, d0
 8011214:	b17e      	cbz	r6, 8011236 <sulp+0x36>
 8011216:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801121a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801121e:	2b00      	cmp	r3, #0
 8011220:	dd09      	ble.n	8011236 <sulp+0x36>
 8011222:	051b      	lsls	r3, r3, #20
 8011224:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8011228:	2400      	movs	r4, #0
 801122a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801122e:	4622      	mov	r2, r4
 8011230:	462b      	mov	r3, r5
 8011232:	f7ef fa11 	bl	8000658 <__aeabi_dmul>
 8011236:	ec41 0b10 	vmov	d0, r0, r1
 801123a:	bd70      	pop	{r4, r5, r6, pc}
 801123c:	0000      	movs	r0, r0
	...

08011240 <_strtod_l>:
 8011240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011244:	b09f      	sub	sp, #124	@ 0x7c
 8011246:	460c      	mov	r4, r1
 8011248:	9217      	str	r2, [sp, #92]	@ 0x5c
 801124a:	2200      	movs	r2, #0
 801124c:	921a      	str	r2, [sp, #104]	@ 0x68
 801124e:	9005      	str	r0, [sp, #20]
 8011250:	f04f 0a00 	mov.w	sl, #0
 8011254:	f04f 0b00 	mov.w	fp, #0
 8011258:	460a      	mov	r2, r1
 801125a:	9219      	str	r2, [sp, #100]	@ 0x64
 801125c:	7811      	ldrb	r1, [r2, #0]
 801125e:	292b      	cmp	r1, #43	@ 0x2b
 8011260:	d04a      	beq.n	80112f8 <_strtod_l+0xb8>
 8011262:	d838      	bhi.n	80112d6 <_strtod_l+0x96>
 8011264:	290d      	cmp	r1, #13
 8011266:	d832      	bhi.n	80112ce <_strtod_l+0x8e>
 8011268:	2908      	cmp	r1, #8
 801126a:	d832      	bhi.n	80112d2 <_strtod_l+0x92>
 801126c:	2900      	cmp	r1, #0
 801126e:	d03b      	beq.n	80112e8 <_strtod_l+0xa8>
 8011270:	2200      	movs	r2, #0
 8011272:	920b      	str	r2, [sp, #44]	@ 0x2c
 8011274:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8011276:	782a      	ldrb	r2, [r5, #0]
 8011278:	2a30      	cmp	r2, #48	@ 0x30
 801127a:	f040 80b3 	bne.w	80113e4 <_strtod_l+0x1a4>
 801127e:	786a      	ldrb	r2, [r5, #1]
 8011280:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011284:	2a58      	cmp	r2, #88	@ 0x58
 8011286:	d16e      	bne.n	8011366 <_strtod_l+0x126>
 8011288:	9302      	str	r3, [sp, #8]
 801128a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801128c:	9301      	str	r3, [sp, #4]
 801128e:	ab1a      	add	r3, sp, #104	@ 0x68
 8011290:	9300      	str	r3, [sp, #0]
 8011292:	4a8e      	ldr	r2, [pc, #568]	@ (80114cc <_strtod_l+0x28c>)
 8011294:	9805      	ldr	r0, [sp, #20]
 8011296:	ab1b      	add	r3, sp, #108	@ 0x6c
 8011298:	a919      	add	r1, sp, #100	@ 0x64
 801129a:	f001 f8b7 	bl	801240c <__gethex>
 801129e:	f010 060f 	ands.w	r6, r0, #15
 80112a2:	4604      	mov	r4, r0
 80112a4:	d005      	beq.n	80112b2 <_strtod_l+0x72>
 80112a6:	2e06      	cmp	r6, #6
 80112a8:	d128      	bne.n	80112fc <_strtod_l+0xbc>
 80112aa:	3501      	adds	r5, #1
 80112ac:	2300      	movs	r3, #0
 80112ae:	9519      	str	r5, [sp, #100]	@ 0x64
 80112b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80112b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	f040 858e 	bne.w	8011dd6 <_strtod_l+0xb96>
 80112ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80112bc:	b1cb      	cbz	r3, 80112f2 <_strtod_l+0xb2>
 80112be:	4652      	mov	r2, sl
 80112c0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80112c4:	ec43 2b10 	vmov	d0, r2, r3
 80112c8:	b01f      	add	sp, #124	@ 0x7c
 80112ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112ce:	2920      	cmp	r1, #32
 80112d0:	d1ce      	bne.n	8011270 <_strtod_l+0x30>
 80112d2:	3201      	adds	r2, #1
 80112d4:	e7c1      	b.n	801125a <_strtod_l+0x1a>
 80112d6:	292d      	cmp	r1, #45	@ 0x2d
 80112d8:	d1ca      	bne.n	8011270 <_strtod_l+0x30>
 80112da:	2101      	movs	r1, #1
 80112dc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80112de:	1c51      	adds	r1, r2, #1
 80112e0:	9119      	str	r1, [sp, #100]	@ 0x64
 80112e2:	7852      	ldrb	r2, [r2, #1]
 80112e4:	2a00      	cmp	r2, #0
 80112e6:	d1c5      	bne.n	8011274 <_strtod_l+0x34>
 80112e8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80112ea:	9419      	str	r4, [sp, #100]	@ 0x64
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	f040 8570 	bne.w	8011dd2 <_strtod_l+0xb92>
 80112f2:	4652      	mov	r2, sl
 80112f4:	465b      	mov	r3, fp
 80112f6:	e7e5      	b.n	80112c4 <_strtod_l+0x84>
 80112f8:	2100      	movs	r1, #0
 80112fa:	e7ef      	b.n	80112dc <_strtod_l+0x9c>
 80112fc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80112fe:	b13a      	cbz	r2, 8011310 <_strtod_l+0xd0>
 8011300:	2135      	movs	r1, #53	@ 0x35
 8011302:	a81c      	add	r0, sp, #112	@ 0x70
 8011304:	f001 ffd4 	bl	80132b0 <__copybits>
 8011308:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801130a:	9805      	ldr	r0, [sp, #20]
 801130c:	f001 fba2 	bl	8012a54 <_Bfree>
 8011310:	3e01      	subs	r6, #1
 8011312:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8011314:	2e04      	cmp	r6, #4
 8011316:	d806      	bhi.n	8011326 <_strtod_l+0xe6>
 8011318:	e8df f006 	tbb	[pc, r6]
 801131c:	201d0314 	.word	0x201d0314
 8011320:	14          	.byte	0x14
 8011321:	00          	.byte	0x00
 8011322:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8011326:	05e1      	lsls	r1, r4, #23
 8011328:	bf48      	it	mi
 801132a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801132e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011332:	0d1b      	lsrs	r3, r3, #20
 8011334:	051b      	lsls	r3, r3, #20
 8011336:	2b00      	cmp	r3, #0
 8011338:	d1bb      	bne.n	80112b2 <_strtod_l+0x72>
 801133a:	f000 ff71 	bl	8012220 <__errno>
 801133e:	2322      	movs	r3, #34	@ 0x22
 8011340:	6003      	str	r3, [r0, #0]
 8011342:	e7b6      	b.n	80112b2 <_strtod_l+0x72>
 8011344:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8011348:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801134c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8011350:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8011354:	e7e7      	b.n	8011326 <_strtod_l+0xe6>
 8011356:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80114d4 <_strtod_l+0x294>
 801135a:	e7e4      	b.n	8011326 <_strtod_l+0xe6>
 801135c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8011360:	f04f 3aff 	mov.w	sl, #4294967295
 8011364:	e7df      	b.n	8011326 <_strtod_l+0xe6>
 8011366:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011368:	1c5a      	adds	r2, r3, #1
 801136a:	9219      	str	r2, [sp, #100]	@ 0x64
 801136c:	785b      	ldrb	r3, [r3, #1]
 801136e:	2b30      	cmp	r3, #48	@ 0x30
 8011370:	d0f9      	beq.n	8011366 <_strtod_l+0x126>
 8011372:	2b00      	cmp	r3, #0
 8011374:	d09d      	beq.n	80112b2 <_strtod_l+0x72>
 8011376:	2301      	movs	r3, #1
 8011378:	9309      	str	r3, [sp, #36]	@ 0x24
 801137a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801137c:	930c      	str	r3, [sp, #48]	@ 0x30
 801137e:	2300      	movs	r3, #0
 8011380:	9308      	str	r3, [sp, #32]
 8011382:	930a      	str	r3, [sp, #40]	@ 0x28
 8011384:	461f      	mov	r7, r3
 8011386:	220a      	movs	r2, #10
 8011388:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801138a:	7805      	ldrb	r5, [r0, #0]
 801138c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8011390:	b2d9      	uxtb	r1, r3
 8011392:	2909      	cmp	r1, #9
 8011394:	d928      	bls.n	80113e8 <_strtod_l+0x1a8>
 8011396:	494e      	ldr	r1, [pc, #312]	@ (80114d0 <_strtod_l+0x290>)
 8011398:	2201      	movs	r2, #1
 801139a:	f000 fe82 	bl	80120a2 <strncmp>
 801139e:	2800      	cmp	r0, #0
 80113a0:	d032      	beq.n	8011408 <_strtod_l+0x1c8>
 80113a2:	2000      	movs	r0, #0
 80113a4:	462a      	mov	r2, r5
 80113a6:	4681      	mov	r9, r0
 80113a8:	463d      	mov	r5, r7
 80113aa:	4603      	mov	r3, r0
 80113ac:	2a65      	cmp	r2, #101	@ 0x65
 80113ae:	d001      	beq.n	80113b4 <_strtod_l+0x174>
 80113b0:	2a45      	cmp	r2, #69	@ 0x45
 80113b2:	d114      	bne.n	80113de <_strtod_l+0x19e>
 80113b4:	b91d      	cbnz	r5, 80113be <_strtod_l+0x17e>
 80113b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80113b8:	4302      	orrs	r2, r0
 80113ba:	d095      	beq.n	80112e8 <_strtod_l+0xa8>
 80113bc:	2500      	movs	r5, #0
 80113be:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80113c0:	1c62      	adds	r2, r4, #1
 80113c2:	9219      	str	r2, [sp, #100]	@ 0x64
 80113c4:	7862      	ldrb	r2, [r4, #1]
 80113c6:	2a2b      	cmp	r2, #43	@ 0x2b
 80113c8:	d077      	beq.n	80114ba <_strtod_l+0x27a>
 80113ca:	2a2d      	cmp	r2, #45	@ 0x2d
 80113cc:	d07b      	beq.n	80114c6 <_strtod_l+0x286>
 80113ce:	f04f 0c00 	mov.w	ip, #0
 80113d2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80113d6:	2909      	cmp	r1, #9
 80113d8:	f240 8082 	bls.w	80114e0 <_strtod_l+0x2a0>
 80113dc:	9419      	str	r4, [sp, #100]	@ 0x64
 80113de:	f04f 0800 	mov.w	r8, #0
 80113e2:	e0a2      	b.n	801152a <_strtod_l+0x2ea>
 80113e4:	2300      	movs	r3, #0
 80113e6:	e7c7      	b.n	8011378 <_strtod_l+0x138>
 80113e8:	2f08      	cmp	r7, #8
 80113ea:	bfd5      	itete	le
 80113ec:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80113ee:	9908      	ldrgt	r1, [sp, #32]
 80113f0:	fb02 3301 	mlale	r3, r2, r1, r3
 80113f4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80113f8:	f100 0001 	add.w	r0, r0, #1
 80113fc:	bfd4      	ite	le
 80113fe:	930a      	strle	r3, [sp, #40]	@ 0x28
 8011400:	9308      	strgt	r3, [sp, #32]
 8011402:	3701      	adds	r7, #1
 8011404:	9019      	str	r0, [sp, #100]	@ 0x64
 8011406:	e7bf      	b.n	8011388 <_strtod_l+0x148>
 8011408:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801140a:	1c5a      	adds	r2, r3, #1
 801140c:	9219      	str	r2, [sp, #100]	@ 0x64
 801140e:	785a      	ldrb	r2, [r3, #1]
 8011410:	b37f      	cbz	r7, 8011472 <_strtod_l+0x232>
 8011412:	4681      	mov	r9, r0
 8011414:	463d      	mov	r5, r7
 8011416:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801141a:	2b09      	cmp	r3, #9
 801141c:	d912      	bls.n	8011444 <_strtod_l+0x204>
 801141e:	2301      	movs	r3, #1
 8011420:	e7c4      	b.n	80113ac <_strtod_l+0x16c>
 8011422:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011424:	1c5a      	adds	r2, r3, #1
 8011426:	9219      	str	r2, [sp, #100]	@ 0x64
 8011428:	785a      	ldrb	r2, [r3, #1]
 801142a:	3001      	adds	r0, #1
 801142c:	2a30      	cmp	r2, #48	@ 0x30
 801142e:	d0f8      	beq.n	8011422 <_strtod_l+0x1e2>
 8011430:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8011434:	2b08      	cmp	r3, #8
 8011436:	f200 84d3 	bhi.w	8011de0 <_strtod_l+0xba0>
 801143a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801143c:	930c      	str	r3, [sp, #48]	@ 0x30
 801143e:	4681      	mov	r9, r0
 8011440:	2000      	movs	r0, #0
 8011442:	4605      	mov	r5, r0
 8011444:	3a30      	subs	r2, #48	@ 0x30
 8011446:	f100 0301 	add.w	r3, r0, #1
 801144a:	d02a      	beq.n	80114a2 <_strtod_l+0x262>
 801144c:	4499      	add	r9, r3
 801144e:	eb00 0c05 	add.w	ip, r0, r5
 8011452:	462b      	mov	r3, r5
 8011454:	210a      	movs	r1, #10
 8011456:	4563      	cmp	r3, ip
 8011458:	d10d      	bne.n	8011476 <_strtod_l+0x236>
 801145a:	1c69      	adds	r1, r5, #1
 801145c:	4401      	add	r1, r0
 801145e:	4428      	add	r0, r5
 8011460:	2808      	cmp	r0, #8
 8011462:	dc16      	bgt.n	8011492 <_strtod_l+0x252>
 8011464:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8011466:	230a      	movs	r3, #10
 8011468:	fb03 2300 	mla	r3, r3, r0, r2
 801146c:	930a      	str	r3, [sp, #40]	@ 0x28
 801146e:	2300      	movs	r3, #0
 8011470:	e018      	b.n	80114a4 <_strtod_l+0x264>
 8011472:	4638      	mov	r0, r7
 8011474:	e7da      	b.n	801142c <_strtod_l+0x1ec>
 8011476:	2b08      	cmp	r3, #8
 8011478:	f103 0301 	add.w	r3, r3, #1
 801147c:	dc03      	bgt.n	8011486 <_strtod_l+0x246>
 801147e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8011480:	434e      	muls	r6, r1
 8011482:	960a      	str	r6, [sp, #40]	@ 0x28
 8011484:	e7e7      	b.n	8011456 <_strtod_l+0x216>
 8011486:	2b10      	cmp	r3, #16
 8011488:	bfde      	ittt	le
 801148a:	9e08      	ldrle	r6, [sp, #32]
 801148c:	434e      	mulle	r6, r1
 801148e:	9608      	strle	r6, [sp, #32]
 8011490:	e7e1      	b.n	8011456 <_strtod_l+0x216>
 8011492:	280f      	cmp	r0, #15
 8011494:	dceb      	bgt.n	801146e <_strtod_l+0x22e>
 8011496:	9808      	ldr	r0, [sp, #32]
 8011498:	230a      	movs	r3, #10
 801149a:	fb03 2300 	mla	r3, r3, r0, r2
 801149e:	9308      	str	r3, [sp, #32]
 80114a0:	e7e5      	b.n	801146e <_strtod_l+0x22e>
 80114a2:	4629      	mov	r1, r5
 80114a4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80114a6:	1c50      	adds	r0, r2, #1
 80114a8:	9019      	str	r0, [sp, #100]	@ 0x64
 80114aa:	7852      	ldrb	r2, [r2, #1]
 80114ac:	4618      	mov	r0, r3
 80114ae:	460d      	mov	r5, r1
 80114b0:	e7b1      	b.n	8011416 <_strtod_l+0x1d6>
 80114b2:	f04f 0900 	mov.w	r9, #0
 80114b6:	2301      	movs	r3, #1
 80114b8:	e77d      	b.n	80113b6 <_strtod_l+0x176>
 80114ba:	f04f 0c00 	mov.w	ip, #0
 80114be:	1ca2      	adds	r2, r4, #2
 80114c0:	9219      	str	r2, [sp, #100]	@ 0x64
 80114c2:	78a2      	ldrb	r2, [r4, #2]
 80114c4:	e785      	b.n	80113d2 <_strtod_l+0x192>
 80114c6:	f04f 0c01 	mov.w	ip, #1
 80114ca:	e7f8      	b.n	80114be <_strtod_l+0x27e>
 80114cc:	080143d4 	.word	0x080143d4
 80114d0:	080143b0 	.word	0x080143b0
 80114d4:	7ff00000 	.word	0x7ff00000
 80114d8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80114da:	1c51      	adds	r1, r2, #1
 80114dc:	9119      	str	r1, [sp, #100]	@ 0x64
 80114de:	7852      	ldrb	r2, [r2, #1]
 80114e0:	2a30      	cmp	r2, #48	@ 0x30
 80114e2:	d0f9      	beq.n	80114d8 <_strtod_l+0x298>
 80114e4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80114e8:	2908      	cmp	r1, #8
 80114ea:	f63f af78 	bhi.w	80113de <_strtod_l+0x19e>
 80114ee:	3a30      	subs	r2, #48	@ 0x30
 80114f0:	920e      	str	r2, [sp, #56]	@ 0x38
 80114f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80114f4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80114f6:	f04f 080a 	mov.w	r8, #10
 80114fa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80114fc:	1c56      	adds	r6, r2, #1
 80114fe:	9619      	str	r6, [sp, #100]	@ 0x64
 8011500:	7852      	ldrb	r2, [r2, #1]
 8011502:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8011506:	f1be 0f09 	cmp.w	lr, #9
 801150a:	d939      	bls.n	8011580 <_strtod_l+0x340>
 801150c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801150e:	1a76      	subs	r6, r6, r1
 8011510:	2e08      	cmp	r6, #8
 8011512:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8011516:	dc03      	bgt.n	8011520 <_strtod_l+0x2e0>
 8011518:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801151a:	4588      	cmp	r8, r1
 801151c:	bfa8      	it	ge
 801151e:	4688      	movge	r8, r1
 8011520:	f1bc 0f00 	cmp.w	ip, #0
 8011524:	d001      	beq.n	801152a <_strtod_l+0x2ea>
 8011526:	f1c8 0800 	rsb	r8, r8, #0
 801152a:	2d00      	cmp	r5, #0
 801152c:	d14e      	bne.n	80115cc <_strtod_l+0x38c>
 801152e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011530:	4308      	orrs	r0, r1
 8011532:	f47f aebe 	bne.w	80112b2 <_strtod_l+0x72>
 8011536:	2b00      	cmp	r3, #0
 8011538:	f47f aed6 	bne.w	80112e8 <_strtod_l+0xa8>
 801153c:	2a69      	cmp	r2, #105	@ 0x69
 801153e:	d028      	beq.n	8011592 <_strtod_l+0x352>
 8011540:	dc25      	bgt.n	801158e <_strtod_l+0x34e>
 8011542:	2a49      	cmp	r2, #73	@ 0x49
 8011544:	d025      	beq.n	8011592 <_strtod_l+0x352>
 8011546:	2a4e      	cmp	r2, #78	@ 0x4e
 8011548:	f47f aece 	bne.w	80112e8 <_strtod_l+0xa8>
 801154c:	499b      	ldr	r1, [pc, #620]	@ (80117bc <_strtod_l+0x57c>)
 801154e:	a819      	add	r0, sp, #100	@ 0x64
 8011550:	f001 f97e 	bl	8012850 <__match>
 8011554:	2800      	cmp	r0, #0
 8011556:	f43f aec7 	beq.w	80112e8 <_strtod_l+0xa8>
 801155a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801155c:	781b      	ldrb	r3, [r3, #0]
 801155e:	2b28      	cmp	r3, #40	@ 0x28
 8011560:	d12e      	bne.n	80115c0 <_strtod_l+0x380>
 8011562:	4997      	ldr	r1, [pc, #604]	@ (80117c0 <_strtod_l+0x580>)
 8011564:	aa1c      	add	r2, sp, #112	@ 0x70
 8011566:	a819      	add	r0, sp, #100	@ 0x64
 8011568:	f001 f986 	bl	8012878 <__hexnan>
 801156c:	2805      	cmp	r0, #5
 801156e:	d127      	bne.n	80115c0 <_strtod_l+0x380>
 8011570:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011572:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8011576:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801157a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801157e:	e698      	b.n	80112b2 <_strtod_l+0x72>
 8011580:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011582:	fb08 2101 	mla	r1, r8, r1, r2
 8011586:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801158a:	920e      	str	r2, [sp, #56]	@ 0x38
 801158c:	e7b5      	b.n	80114fa <_strtod_l+0x2ba>
 801158e:	2a6e      	cmp	r2, #110	@ 0x6e
 8011590:	e7da      	b.n	8011548 <_strtod_l+0x308>
 8011592:	498c      	ldr	r1, [pc, #560]	@ (80117c4 <_strtod_l+0x584>)
 8011594:	a819      	add	r0, sp, #100	@ 0x64
 8011596:	f001 f95b 	bl	8012850 <__match>
 801159a:	2800      	cmp	r0, #0
 801159c:	f43f aea4 	beq.w	80112e8 <_strtod_l+0xa8>
 80115a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80115a2:	4989      	ldr	r1, [pc, #548]	@ (80117c8 <_strtod_l+0x588>)
 80115a4:	3b01      	subs	r3, #1
 80115a6:	a819      	add	r0, sp, #100	@ 0x64
 80115a8:	9319      	str	r3, [sp, #100]	@ 0x64
 80115aa:	f001 f951 	bl	8012850 <__match>
 80115ae:	b910      	cbnz	r0, 80115b6 <_strtod_l+0x376>
 80115b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80115b2:	3301      	adds	r3, #1
 80115b4:	9319      	str	r3, [sp, #100]	@ 0x64
 80115b6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80117d8 <_strtod_l+0x598>
 80115ba:	f04f 0a00 	mov.w	sl, #0
 80115be:	e678      	b.n	80112b2 <_strtod_l+0x72>
 80115c0:	4882      	ldr	r0, [pc, #520]	@ (80117cc <_strtod_l+0x58c>)
 80115c2:	f000 fe69 	bl	8012298 <nan>
 80115c6:	ec5b ab10 	vmov	sl, fp, d0
 80115ca:	e672      	b.n	80112b2 <_strtod_l+0x72>
 80115cc:	eba8 0309 	sub.w	r3, r8, r9
 80115d0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80115d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80115d4:	2f00      	cmp	r7, #0
 80115d6:	bf08      	it	eq
 80115d8:	462f      	moveq	r7, r5
 80115da:	2d10      	cmp	r5, #16
 80115dc:	462c      	mov	r4, r5
 80115de:	bfa8      	it	ge
 80115e0:	2410      	movge	r4, #16
 80115e2:	f7ee ffbf 	bl	8000564 <__aeabi_ui2d>
 80115e6:	2d09      	cmp	r5, #9
 80115e8:	4682      	mov	sl, r0
 80115ea:	468b      	mov	fp, r1
 80115ec:	dc13      	bgt.n	8011616 <_strtod_l+0x3d6>
 80115ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	f43f ae5e 	beq.w	80112b2 <_strtod_l+0x72>
 80115f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80115f8:	dd78      	ble.n	80116ec <_strtod_l+0x4ac>
 80115fa:	2b16      	cmp	r3, #22
 80115fc:	dc5f      	bgt.n	80116be <_strtod_l+0x47e>
 80115fe:	4974      	ldr	r1, [pc, #464]	@ (80117d0 <_strtod_l+0x590>)
 8011600:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011604:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011608:	4652      	mov	r2, sl
 801160a:	465b      	mov	r3, fp
 801160c:	f7ef f824 	bl	8000658 <__aeabi_dmul>
 8011610:	4682      	mov	sl, r0
 8011612:	468b      	mov	fp, r1
 8011614:	e64d      	b.n	80112b2 <_strtod_l+0x72>
 8011616:	4b6e      	ldr	r3, [pc, #440]	@ (80117d0 <_strtod_l+0x590>)
 8011618:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801161c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8011620:	f7ef f81a 	bl	8000658 <__aeabi_dmul>
 8011624:	4682      	mov	sl, r0
 8011626:	9808      	ldr	r0, [sp, #32]
 8011628:	468b      	mov	fp, r1
 801162a:	f7ee ff9b 	bl	8000564 <__aeabi_ui2d>
 801162e:	4602      	mov	r2, r0
 8011630:	460b      	mov	r3, r1
 8011632:	4650      	mov	r0, sl
 8011634:	4659      	mov	r1, fp
 8011636:	f7ee fe59 	bl	80002ec <__adddf3>
 801163a:	2d0f      	cmp	r5, #15
 801163c:	4682      	mov	sl, r0
 801163e:	468b      	mov	fp, r1
 8011640:	ddd5      	ble.n	80115ee <_strtod_l+0x3ae>
 8011642:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011644:	1b2c      	subs	r4, r5, r4
 8011646:	441c      	add	r4, r3
 8011648:	2c00      	cmp	r4, #0
 801164a:	f340 8096 	ble.w	801177a <_strtod_l+0x53a>
 801164e:	f014 030f 	ands.w	r3, r4, #15
 8011652:	d00a      	beq.n	801166a <_strtod_l+0x42a>
 8011654:	495e      	ldr	r1, [pc, #376]	@ (80117d0 <_strtod_l+0x590>)
 8011656:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801165a:	4652      	mov	r2, sl
 801165c:	465b      	mov	r3, fp
 801165e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011662:	f7ee fff9 	bl	8000658 <__aeabi_dmul>
 8011666:	4682      	mov	sl, r0
 8011668:	468b      	mov	fp, r1
 801166a:	f034 040f 	bics.w	r4, r4, #15
 801166e:	d073      	beq.n	8011758 <_strtod_l+0x518>
 8011670:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8011674:	dd48      	ble.n	8011708 <_strtod_l+0x4c8>
 8011676:	2400      	movs	r4, #0
 8011678:	46a0      	mov	r8, r4
 801167a:	940a      	str	r4, [sp, #40]	@ 0x28
 801167c:	46a1      	mov	r9, r4
 801167e:	9a05      	ldr	r2, [sp, #20]
 8011680:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80117d8 <_strtod_l+0x598>
 8011684:	2322      	movs	r3, #34	@ 0x22
 8011686:	6013      	str	r3, [r2, #0]
 8011688:	f04f 0a00 	mov.w	sl, #0
 801168c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801168e:	2b00      	cmp	r3, #0
 8011690:	f43f ae0f 	beq.w	80112b2 <_strtod_l+0x72>
 8011694:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011696:	9805      	ldr	r0, [sp, #20]
 8011698:	f001 f9dc 	bl	8012a54 <_Bfree>
 801169c:	9805      	ldr	r0, [sp, #20]
 801169e:	4649      	mov	r1, r9
 80116a0:	f001 f9d8 	bl	8012a54 <_Bfree>
 80116a4:	9805      	ldr	r0, [sp, #20]
 80116a6:	4641      	mov	r1, r8
 80116a8:	f001 f9d4 	bl	8012a54 <_Bfree>
 80116ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80116ae:	9805      	ldr	r0, [sp, #20]
 80116b0:	f001 f9d0 	bl	8012a54 <_Bfree>
 80116b4:	9805      	ldr	r0, [sp, #20]
 80116b6:	4621      	mov	r1, r4
 80116b8:	f001 f9cc 	bl	8012a54 <_Bfree>
 80116bc:	e5f9      	b.n	80112b2 <_strtod_l+0x72>
 80116be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80116c0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80116c4:	4293      	cmp	r3, r2
 80116c6:	dbbc      	blt.n	8011642 <_strtod_l+0x402>
 80116c8:	4c41      	ldr	r4, [pc, #260]	@ (80117d0 <_strtod_l+0x590>)
 80116ca:	f1c5 050f 	rsb	r5, r5, #15
 80116ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80116d2:	4652      	mov	r2, sl
 80116d4:	465b      	mov	r3, fp
 80116d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80116da:	f7ee ffbd 	bl	8000658 <__aeabi_dmul>
 80116de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80116e0:	1b5d      	subs	r5, r3, r5
 80116e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80116e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80116ea:	e78f      	b.n	801160c <_strtod_l+0x3cc>
 80116ec:	3316      	adds	r3, #22
 80116ee:	dba8      	blt.n	8011642 <_strtod_l+0x402>
 80116f0:	4b37      	ldr	r3, [pc, #220]	@ (80117d0 <_strtod_l+0x590>)
 80116f2:	eba9 0808 	sub.w	r8, r9, r8
 80116f6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80116fa:	e9d8 2300 	ldrd	r2, r3, [r8]
 80116fe:	4650      	mov	r0, sl
 8011700:	4659      	mov	r1, fp
 8011702:	f7ef f8d3 	bl	80008ac <__aeabi_ddiv>
 8011706:	e783      	b.n	8011610 <_strtod_l+0x3d0>
 8011708:	4b32      	ldr	r3, [pc, #200]	@ (80117d4 <_strtod_l+0x594>)
 801170a:	9308      	str	r3, [sp, #32]
 801170c:	2300      	movs	r3, #0
 801170e:	1124      	asrs	r4, r4, #4
 8011710:	4650      	mov	r0, sl
 8011712:	4659      	mov	r1, fp
 8011714:	461e      	mov	r6, r3
 8011716:	2c01      	cmp	r4, #1
 8011718:	dc21      	bgt.n	801175e <_strtod_l+0x51e>
 801171a:	b10b      	cbz	r3, 8011720 <_strtod_l+0x4e0>
 801171c:	4682      	mov	sl, r0
 801171e:	468b      	mov	fp, r1
 8011720:	492c      	ldr	r1, [pc, #176]	@ (80117d4 <_strtod_l+0x594>)
 8011722:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8011726:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801172a:	4652      	mov	r2, sl
 801172c:	465b      	mov	r3, fp
 801172e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011732:	f7ee ff91 	bl	8000658 <__aeabi_dmul>
 8011736:	4b28      	ldr	r3, [pc, #160]	@ (80117d8 <_strtod_l+0x598>)
 8011738:	460a      	mov	r2, r1
 801173a:	400b      	ands	r3, r1
 801173c:	4927      	ldr	r1, [pc, #156]	@ (80117dc <_strtod_l+0x59c>)
 801173e:	428b      	cmp	r3, r1
 8011740:	4682      	mov	sl, r0
 8011742:	d898      	bhi.n	8011676 <_strtod_l+0x436>
 8011744:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8011748:	428b      	cmp	r3, r1
 801174a:	bf86      	itte	hi
 801174c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80117e0 <_strtod_l+0x5a0>
 8011750:	f04f 3aff 	movhi.w	sl, #4294967295
 8011754:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8011758:	2300      	movs	r3, #0
 801175a:	9308      	str	r3, [sp, #32]
 801175c:	e07a      	b.n	8011854 <_strtod_l+0x614>
 801175e:	07e2      	lsls	r2, r4, #31
 8011760:	d505      	bpl.n	801176e <_strtod_l+0x52e>
 8011762:	9b08      	ldr	r3, [sp, #32]
 8011764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011768:	f7ee ff76 	bl	8000658 <__aeabi_dmul>
 801176c:	2301      	movs	r3, #1
 801176e:	9a08      	ldr	r2, [sp, #32]
 8011770:	3208      	adds	r2, #8
 8011772:	3601      	adds	r6, #1
 8011774:	1064      	asrs	r4, r4, #1
 8011776:	9208      	str	r2, [sp, #32]
 8011778:	e7cd      	b.n	8011716 <_strtod_l+0x4d6>
 801177a:	d0ed      	beq.n	8011758 <_strtod_l+0x518>
 801177c:	4264      	negs	r4, r4
 801177e:	f014 020f 	ands.w	r2, r4, #15
 8011782:	d00a      	beq.n	801179a <_strtod_l+0x55a>
 8011784:	4b12      	ldr	r3, [pc, #72]	@ (80117d0 <_strtod_l+0x590>)
 8011786:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801178a:	4650      	mov	r0, sl
 801178c:	4659      	mov	r1, fp
 801178e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011792:	f7ef f88b 	bl	80008ac <__aeabi_ddiv>
 8011796:	4682      	mov	sl, r0
 8011798:	468b      	mov	fp, r1
 801179a:	1124      	asrs	r4, r4, #4
 801179c:	d0dc      	beq.n	8011758 <_strtod_l+0x518>
 801179e:	2c1f      	cmp	r4, #31
 80117a0:	dd20      	ble.n	80117e4 <_strtod_l+0x5a4>
 80117a2:	2400      	movs	r4, #0
 80117a4:	46a0      	mov	r8, r4
 80117a6:	940a      	str	r4, [sp, #40]	@ 0x28
 80117a8:	46a1      	mov	r9, r4
 80117aa:	9a05      	ldr	r2, [sp, #20]
 80117ac:	2322      	movs	r3, #34	@ 0x22
 80117ae:	f04f 0a00 	mov.w	sl, #0
 80117b2:	f04f 0b00 	mov.w	fp, #0
 80117b6:	6013      	str	r3, [r2, #0]
 80117b8:	e768      	b.n	801168c <_strtod_l+0x44c>
 80117ba:	bf00      	nop
 80117bc:	080143bb 	.word	0x080143bb
 80117c0:	080143c0 	.word	0x080143c0
 80117c4:	080143b2 	.word	0x080143b2
 80117c8:	080143b5 	.word	0x080143b5
 80117cc:	08014766 	.word	0x08014766
 80117d0:	08014630 	.word	0x08014630
 80117d4:	08014608 	.word	0x08014608
 80117d8:	7ff00000 	.word	0x7ff00000
 80117dc:	7ca00000 	.word	0x7ca00000
 80117e0:	7fefffff 	.word	0x7fefffff
 80117e4:	f014 0310 	ands.w	r3, r4, #16
 80117e8:	bf18      	it	ne
 80117ea:	236a      	movne	r3, #106	@ 0x6a
 80117ec:	4ea9      	ldr	r6, [pc, #676]	@ (8011a94 <_strtod_l+0x854>)
 80117ee:	9308      	str	r3, [sp, #32]
 80117f0:	4650      	mov	r0, sl
 80117f2:	4659      	mov	r1, fp
 80117f4:	2300      	movs	r3, #0
 80117f6:	07e2      	lsls	r2, r4, #31
 80117f8:	d504      	bpl.n	8011804 <_strtod_l+0x5c4>
 80117fa:	e9d6 2300 	ldrd	r2, r3, [r6]
 80117fe:	f7ee ff2b 	bl	8000658 <__aeabi_dmul>
 8011802:	2301      	movs	r3, #1
 8011804:	1064      	asrs	r4, r4, #1
 8011806:	f106 0608 	add.w	r6, r6, #8
 801180a:	d1f4      	bne.n	80117f6 <_strtod_l+0x5b6>
 801180c:	b10b      	cbz	r3, 8011812 <_strtod_l+0x5d2>
 801180e:	4682      	mov	sl, r0
 8011810:	468b      	mov	fp, r1
 8011812:	9b08      	ldr	r3, [sp, #32]
 8011814:	b1b3      	cbz	r3, 8011844 <_strtod_l+0x604>
 8011816:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801181a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 801181e:	2b00      	cmp	r3, #0
 8011820:	4659      	mov	r1, fp
 8011822:	dd0f      	ble.n	8011844 <_strtod_l+0x604>
 8011824:	2b1f      	cmp	r3, #31
 8011826:	dd55      	ble.n	80118d4 <_strtod_l+0x694>
 8011828:	2b34      	cmp	r3, #52	@ 0x34
 801182a:	bfde      	ittt	le
 801182c:	f04f 33ff 	movle.w	r3, #4294967295
 8011830:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8011834:	4093      	lslle	r3, r2
 8011836:	f04f 0a00 	mov.w	sl, #0
 801183a:	bfcc      	ite	gt
 801183c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8011840:	ea03 0b01 	andle.w	fp, r3, r1
 8011844:	2200      	movs	r2, #0
 8011846:	2300      	movs	r3, #0
 8011848:	4650      	mov	r0, sl
 801184a:	4659      	mov	r1, fp
 801184c:	f7ef f96c 	bl	8000b28 <__aeabi_dcmpeq>
 8011850:	2800      	cmp	r0, #0
 8011852:	d1a6      	bne.n	80117a2 <_strtod_l+0x562>
 8011854:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011856:	9300      	str	r3, [sp, #0]
 8011858:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801185a:	9805      	ldr	r0, [sp, #20]
 801185c:	462b      	mov	r3, r5
 801185e:	463a      	mov	r2, r7
 8011860:	f001 f960 	bl	8012b24 <__s2b>
 8011864:	900a      	str	r0, [sp, #40]	@ 0x28
 8011866:	2800      	cmp	r0, #0
 8011868:	f43f af05 	beq.w	8011676 <_strtod_l+0x436>
 801186c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801186e:	2a00      	cmp	r2, #0
 8011870:	eba9 0308 	sub.w	r3, r9, r8
 8011874:	bfa8      	it	ge
 8011876:	2300      	movge	r3, #0
 8011878:	9312      	str	r3, [sp, #72]	@ 0x48
 801187a:	2400      	movs	r4, #0
 801187c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8011880:	9316      	str	r3, [sp, #88]	@ 0x58
 8011882:	46a0      	mov	r8, r4
 8011884:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011886:	9805      	ldr	r0, [sp, #20]
 8011888:	6859      	ldr	r1, [r3, #4]
 801188a:	f001 f8a3 	bl	80129d4 <_Balloc>
 801188e:	4681      	mov	r9, r0
 8011890:	2800      	cmp	r0, #0
 8011892:	f43f aef4 	beq.w	801167e <_strtod_l+0x43e>
 8011896:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011898:	691a      	ldr	r2, [r3, #16]
 801189a:	3202      	adds	r2, #2
 801189c:	f103 010c 	add.w	r1, r3, #12
 80118a0:	0092      	lsls	r2, r2, #2
 80118a2:	300c      	adds	r0, #12
 80118a4:	f000 fce9 	bl	801227a <memcpy>
 80118a8:	ec4b ab10 	vmov	d0, sl, fp
 80118ac:	9805      	ldr	r0, [sp, #20]
 80118ae:	aa1c      	add	r2, sp, #112	@ 0x70
 80118b0:	a91b      	add	r1, sp, #108	@ 0x6c
 80118b2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80118b6:	f001 fc71 	bl	801319c <__d2b>
 80118ba:	901a      	str	r0, [sp, #104]	@ 0x68
 80118bc:	2800      	cmp	r0, #0
 80118be:	f43f aede 	beq.w	801167e <_strtod_l+0x43e>
 80118c2:	9805      	ldr	r0, [sp, #20]
 80118c4:	2101      	movs	r1, #1
 80118c6:	f001 f9c3 	bl	8012c50 <__i2b>
 80118ca:	4680      	mov	r8, r0
 80118cc:	b948      	cbnz	r0, 80118e2 <_strtod_l+0x6a2>
 80118ce:	f04f 0800 	mov.w	r8, #0
 80118d2:	e6d4      	b.n	801167e <_strtod_l+0x43e>
 80118d4:	f04f 32ff 	mov.w	r2, #4294967295
 80118d8:	fa02 f303 	lsl.w	r3, r2, r3
 80118dc:	ea03 0a0a 	and.w	sl, r3, sl
 80118e0:	e7b0      	b.n	8011844 <_strtod_l+0x604>
 80118e2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80118e4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80118e6:	2d00      	cmp	r5, #0
 80118e8:	bfab      	itete	ge
 80118ea:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80118ec:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80118ee:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80118f0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80118f2:	bfac      	ite	ge
 80118f4:	18ef      	addge	r7, r5, r3
 80118f6:	1b5e      	sublt	r6, r3, r5
 80118f8:	9b08      	ldr	r3, [sp, #32]
 80118fa:	1aed      	subs	r5, r5, r3
 80118fc:	4415      	add	r5, r2
 80118fe:	4b66      	ldr	r3, [pc, #408]	@ (8011a98 <_strtod_l+0x858>)
 8011900:	3d01      	subs	r5, #1
 8011902:	429d      	cmp	r5, r3
 8011904:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8011908:	da50      	bge.n	80119ac <_strtod_l+0x76c>
 801190a:	1b5b      	subs	r3, r3, r5
 801190c:	2b1f      	cmp	r3, #31
 801190e:	eba2 0203 	sub.w	r2, r2, r3
 8011912:	f04f 0101 	mov.w	r1, #1
 8011916:	dc3d      	bgt.n	8011994 <_strtod_l+0x754>
 8011918:	fa01 f303 	lsl.w	r3, r1, r3
 801191c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801191e:	2300      	movs	r3, #0
 8011920:	9310      	str	r3, [sp, #64]	@ 0x40
 8011922:	18bd      	adds	r5, r7, r2
 8011924:	9b08      	ldr	r3, [sp, #32]
 8011926:	42af      	cmp	r7, r5
 8011928:	4416      	add	r6, r2
 801192a:	441e      	add	r6, r3
 801192c:	463b      	mov	r3, r7
 801192e:	bfa8      	it	ge
 8011930:	462b      	movge	r3, r5
 8011932:	42b3      	cmp	r3, r6
 8011934:	bfa8      	it	ge
 8011936:	4633      	movge	r3, r6
 8011938:	2b00      	cmp	r3, #0
 801193a:	bfc2      	ittt	gt
 801193c:	1aed      	subgt	r5, r5, r3
 801193e:	1af6      	subgt	r6, r6, r3
 8011940:	1aff      	subgt	r7, r7, r3
 8011942:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011944:	2b00      	cmp	r3, #0
 8011946:	dd16      	ble.n	8011976 <_strtod_l+0x736>
 8011948:	4641      	mov	r1, r8
 801194a:	9805      	ldr	r0, [sp, #20]
 801194c:	461a      	mov	r2, r3
 801194e:	f001 fa3f 	bl	8012dd0 <__pow5mult>
 8011952:	4680      	mov	r8, r0
 8011954:	2800      	cmp	r0, #0
 8011956:	d0ba      	beq.n	80118ce <_strtod_l+0x68e>
 8011958:	4601      	mov	r1, r0
 801195a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801195c:	9805      	ldr	r0, [sp, #20]
 801195e:	f001 f98d 	bl	8012c7c <__multiply>
 8011962:	900e      	str	r0, [sp, #56]	@ 0x38
 8011964:	2800      	cmp	r0, #0
 8011966:	f43f ae8a 	beq.w	801167e <_strtod_l+0x43e>
 801196a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801196c:	9805      	ldr	r0, [sp, #20]
 801196e:	f001 f871 	bl	8012a54 <_Bfree>
 8011972:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011974:	931a      	str	r3, [sp, #104]	@ 0x68
 8011976:	2d00      	cmp	r5, #0
 8011978:	dc1d      	bgt.n	80119b6 <_strtod_l+0x776>
 801197a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801197c:	2b00      	cmp	r3, #0
 801197e:	dd23      	ble.n	80119c8 <_strtod_l+0x788>
 8011980:	4649      	mov	r1, r9
 8011982:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8011984:	9805      	ldr	r0, [sp, #20]
 8011986:	f001 fa23 	bl	8012dd0 <__pow5mult>
 801198a:	4681      	mov	r9, r0
 801198c:	b9e0      	cbnz	r0, 80119c8 <_strtod_l+0x788>
 801198e:	f04f 0900 	mov.w	r9, #0
 8011992:	e674      	b.n	801167e <_strtod_l+0x43e>
 8011994:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8011998:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801199c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80119a0:	35e2      	adds	r5, #226	@ 0xe2
 80119a2:	fa01 f305 	lsl.w	r3, r1, r5
 80119a6:	9310      	str	r3, [sp, #64]	@ 0x40
 80119a8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80119aa:	e7ba      	b.n	8011922 <_strtod_l+0x6e2>
 80119ac:	2300      	movs	r3, #0
 80119ae:	9310      	str	r3, [sp, #64]	@ 0x40
 80119b0:	2301      	movs	r3, #1
 80119b2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80119b4:	e7b5      	b.n	8011922 <_strtod_l+0x6e2>
 80119b6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80119b8:	9805      	ldr	r0, [sp, #20]
 80119ba:	462a      	mov	r2, r5
 80119bc:	f001 fa62 	bl	8012e84 <__lshift>
 80119c0:	901a      	str	r0, [sp, #104]	@ 0x68
 80119c2:	2800      	cmp	r0, #0
 80119c4:	d1d9      	bne.n	801197a <_strtod_l+0x73a>
 80119c6:	e65a      	b.n	801167e <_strtod_l+0x43e>
 80119c8:	2e00      	cmp	r6, #0
 80119ca:	dd07      	ble.n	80119dc <_strtod_l+0x79c>
 80119cc:	4649      	mov	r1, r9
 80119ce:	9805      	ldr	r0, [sp, #20]
 80119d0:	4632      	mov	r2, r6
 80119d2:	f001 fa57 	bl	8012e84 <__lshift>
 80119d6:	4681      	mov	r9, r0
 80119d8:	2800      	cmp	r0, #0
 80119da:	d0d8      	beq.n	801198e <_strtod_l+0x74e>
 80119dc:	2f00      	cmp	r7, #0
 80119de:	dd08      	ble.n	80119f2 <_strtod_l+0x7b2>
 80119e0:	4641      	mov	r1, r8
 80119e2:	9805      	ldr	r0, [sp, #20]
 80119e4:	463a      	mov	r2, r7
 80119e6:	f001 fa4d 	bl	8012e84 <__lshift>
 80119ea:	4680      	mov	r8, r0
 80119ec:	2800      	cmp	r0, #0
 80119ee:	f43f ae46 	beq.w	801167e <_strtod_l+0x43e>
 80119f2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80119f4:	9805      	ldr	r0, [sp, #20]
 80119f6:	464a      	mov	r2, r9
 80119f8:	f001 facc 	bl	8012f94 <__mdiff>
 80119fc:	4604      	mov	r4, r0
 80119fe:	2800      	cmp	r0, #0
 8011a00:	f43f ae3d 	beq.w	801167e <_strtod_l+0x43e>
 8011a04:	68c3      	ldr	r3, [r0, #12]
 8011a06:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011a08:	2300      	movs	r3, #0
 8011a0a:	60c3      	str	r3, [r0, #12]
 8011a0c:	4641      	mov	r1, r8
 8011a0e:	f001 faa5 	bl	8012f5c <__mcmp>
 8011a12:	2800      	cmp	r0, #0
 8011a14:	da46      	bge.n	8011aa4 <_strtod_l+0x864>
 8011a16:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011a18:	ea53 030a 	orrs.w	r3, r3, sl
 8011a1c:	d16c      	bne.n	8011af8 <_strtod_l+0x8b8>
 8011a1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d168      	bne.n	8011af8 <_strtod_l+0x8b8>
 8011a26:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011a2a:	0d1b      	lsrs	r3, r3, #20
 8011a2c:	051b      	lsls	r3, r3, #20
 8011a2e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8011a32:	d961      	bls.n	8011af8 <_strtod_l+0x8b8>
 8011a34:	6963      	ldr	r3, [r4, #20]
 8011a36:	b913      	cbnz	r3, 8011a3e <_strtod_l+0x7fe>
 8011a38:	6923      	ldr	r3, [r4, #16]
 8011a3a:	2b01      	cmp	r3, #1
 8011a3c:	dd5c      	ble.n	8011af8 <_strtod_l+0x8b8>
 8011a3e:	4621      	mov	r1, r4
 8011a40:	2201      	movs	r2, #1
 8011a42:	9805      	ldr	r0, [sp, #20]
 8011a44:	f001 fa1e 	bl	8012e84 <__lshift>
 8011a48:	4641      	mov	r1, r8
 8011a4a:	4604      	mov	r4, r0
 8011a4c:	f001 fa86 	bl	8012f5c <__mcmp>
 8011a50:	2800      	cmp	r0, #0
 8011a52:	dd51      	ble.n	8011af8 <_strtod_l+0x8b8>
 8011a54:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011a58:	9a08      	ldr	r2, [sp, #32]
 8011a5a:	0d1b      	lsrs	r3, r3, #20
 8011a5c:	051b      	lsls	r3, r3, #20
 8011a5e:	2a00      	cmp	r2, #0
 8011a60:	d06b      	beq.n	8011b3a <_strtod_l+0x8fa>
 8011a62:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8011a66:	d868      	bhi.n	8011b3a <_strtod_l+0x8fa>
 8011a68:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8011a6c:	f67f ae9d 	bls.w	80117aa <_strtod_l+0x56a>
 8011a70:	4b0a      	ldr	r3, [pc, #40]	@ (8011a9c <_strtod_l+0x85c>)
 8011a72:	4650      	mov	r0, sl
 8011a74:	4659      	mov	r1, fp
 8011a76:	2200      	movs	r2, #0
 8011a78:	f7ee fdee 	bl	8000658 <__aeabi_dmul>
 8011a7c:	4b08      	ldr	r3, [pc, #32]	@ (8011aa0 <_strtod_l+0x860>)
 8011a7e:	400b      	ands	r3, r1
 8011a80:	4682      	mov	sl, r0
 8011a82:	468b      	mov	fp, r1
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	f47f ae05 	bne.w	8011694 <_strtod_l+0x454>
 8011a8a:	9a05      	ldr	r2, [sp, #20]
 8011a8c:	2322      	movs	r3, #34	@ 0x22
 8011a8e:	6013      	str	r3, [r2, #0]
 8011a90:	e600      	b.n	8011694 <_strtod_l+0x454>
 8011a92:	bf00      	nop
 8011a94:	080143e8 	.word	0x080143e8
 8011a98:	fffffc02 	.word	0xfffffc02
 8011a9c:	39500000 	.word	0x39500000
 8011aa0:	7ff00000 	.word	0x7ff00000
 8011aa4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8011aa8:	d165      	bne.n	8011b76 <_strtod_l+0x936>
 8011aaa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011aac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011ab0:	b35a      	cbz	r2, 8011b0a <_strtod_l+0x8ca>
 8011ab2:	4a9f      	ldr	r2, [pc, #636]	@ (8011d30 <_strtod_l+0xaf0>)
 8011ab4:	4293      	cmp	r3, r2
 8011ab6:	d12b      	bne.n	8011b10 <_strtod_l+0x8d0>
 8011ab8:	9b08      	ldr	r3, [sp, #32]
 8011aba:	4651      	mov	r1, sl
 8011abc:	b303      	cbz	r3, 8011b00 <_strtod_l+0x8c0>
 8011abe:	4b9d      	ldr	r3, [pc, #628]	@ (8011d34 <_strtod_l+0xaf4>)
 8011ac0:	465a      	mov	r2, fp
 8011ac2:	4013      	ands	r3, r2
 8011ac4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8011ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8011acc:	d81b      	bhi.n	8011b06 <_strtod_l+0x8c6>
 8011ace:	0d1b      	lsrs	r3, r3, #20
 8011ad0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8011ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8011ad8:	4299      	cmp	r1, r3
 8011ada:	d119      	bne.n	8011b10 <_strtod_l+0x8d0>
 8011adc:	4b96      	ldr	r3, [pc, #600]	@ (8011d38 <_strtod_l+0xaf8>)
 8011ade:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011ae0:	429a      	cmp	r2, r3
 8011ae2:	d102      	bne.n	8011aea <_strtod_l+0x8aa>
 8011ae4:	3101      	adds	r1, #1
 8011ae6:	f43f adca 	beq.w	801167e <_strtod_l+0x43e>
 8011aea:	4b92      	ldr	r3, [pc, #584]	@ (8011d34 <_strtod_l+0xaf4>)
 8011aec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011aee:	401a      	ands	r2, r3
 8011af0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8011af4:	f04f 0a00 	mov.w	sl, #0
 8011af8:	9b08      	ldr	r3, [sp, #32]
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d1b8      	bne.n	8011a70 <_strtod_l+0x830>
 8011afe:	e5c9      	b.n	8011694 <_strtod_l+0x454>
 8011b00:	f04f 33ff 	mov.w	r3, #4294967295
 8011b04:	e7e8      	b.n	8011ad8 <_strtod_l+0x898>
 8011b06:	4613      	mov	r3, r2
 8011b08:	e7e6      	b.n	8011ad8 <_strtod_l+0x898>
 8011b0a:	ea53 030a 	orrs.w	r3, r3, sl
 8011b0e:	d0a1      	beq.n	8011a54 <_strtod_l+0x814>
 8011b10:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011b12:	b1db      	cbz	r3, 8011b4c <_strtod_l+0x90c>
 8011b14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011b16:	4213      	tst	r3, r2
 8011b18:	d0ee      	beq.n	8011af8 <_strtod_l+0x8b8>
 8011b1a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011b1c:	9a08      	ldr	r2, [sp, #32]
 8011b1e:	4650      	mov	r0, sl
 8011b20:	4659      	mov	r1, fp
 8011b22:	b1bb      	cbz	r3, 8011b54 <_strtod_l+0x914>
 8011b24:	f7ff fb6c 	bl	8011200 <sulp>
 8011b28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011b2c:	ec53 2b10 	vmov	r2, r3, d0
 8011b30:	f7ee fbdc 	bl	80002ec <__adddf3>
 8011b34:	4682      	mov	sl, r0
 8011b36:	468b      	mov	fp, r1
 8011b38:	e7de      	b.n	8011af8 <_strtod_l+0x8b8>
 8011b3a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8011b3e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8011b42:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8011b46:	f04f 3aff 	mov.w	sl, #4294967295
 8011b4a:	e7d5      	b.n	8011af8 <_strtod_l+0x8b8>
 8011b4c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011b4e:	ea13 0f0a 	tst.w	r3, sl
 8011b52:	e7e1      	b.n	8011b18 <_strtod_l+0x8d8>
 8011b54:	f7ff fb54 	bl	8011200 <sulp>
 8011b58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011b5c:	ec53 2b10 	vmov	r2, r3, d0
 8011b60:	f7ee fbc2 	bl	80002e8 <__aeabi_dsub>
 8011b64:	2200      	movs	r2, #0
 8011b66:	2300      	movs	r3, #0
 8011b68:	4682      	mov	sl, r0
 8011b6a:	468b      	mov	fp, r1
 8011b6c:	f7ee ffdc 	bl	8000b28 <__aeabi_dcmpeq>
 8011b70:	2800      	cmp	r0, #0
 8011b72:	d0c1      	beq.n	8011af8 <_strtod_l+0x8b8>
 8011b74:	e619      	b.n	80117aa <_strtod_l+0x56a>
 8011b76:	4641      	mov	r1, r8
 8011b78:	4620      	mov	r0, r4
 8011b7a:	f001 fb67 	bl	801324c <__ratio>
 8011b7e:	ec57 6b10 	vmov	r6, r7, d0
 8011b82:	2200      	movs	r2, #0
 8011b84:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8011b88:	4630      	mov	r0, r6
 8011b8a:	4639      	mov	r1, r7
 8011b8c:	f7ee ffe0 	bl	8000b50 <__aeabi_dcmple>
 8011b90:	2800      	cmp	r0, #0
 8011b92:	d06f      	beq.n	8011c74 <_strtod_l+0xa34>
 8011b94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d17a      	bne.n	8011c90 <_strtod_l+0xa50>
 8011b9a:	f1ba 0f00 	cmp.w	sl, #0
 8011b9e:	d158      	bne.n	8011c52 <_strtod_l+0xa12>
 8011ba0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011ba2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d15a      	bne.n	8011c60 <_strtod_l+0xa20>
 8011baa:	4b64      	ldr	r3, [pc, #400]	@ (8011d3c <_strtod_l+0xafc>)
 8011bac:	2200      	movs	r2, #0
 8011bae:	4630      	mov	r0, r6
 8011bb0:	4639      	mov	r1, r7
 8011bb2:	f7ee ffc3 	bl	8000b3c <__aeabi_dcmplt>
 8011bb6:	2800      	cmp	r0, #0
 8011bb8:	d159      	bne.n	8011c6e <_strtod_l+0xa2e>
 8011bba:	4630      	mov	r0, r6
 8011bbc:	4639      	mov	r1, r7
 8011bbe:	4b60      	ldr	r3, [pc, #384]	@ (8011d40 <_strtod_l+0xb00>)
 8011bc0:	2200      	movs	r2, #0
 8011bc2:	f7ee fd49 	bl	8000658 <__aeabi_dmul>
 8011bc6:	4606      	mov	r6, r0
 8011bc8:	460f      	mov	r7, r1
 8011bca:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8011bce:	9606      	str	r6, [sp, #24]
 8011bd0:	9307      	str	r3, [sp, #28]
 8011bd2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011bd6:	4d57      	ldr	r5, [pc, #348]	@ (8011d34 <_strtod_l+0xaf4>)
 8011bd8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8011bdc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011bde:	401d      	ands	r5, r3
 8011be0:	4b58      	ldr	r3, [pc, #352]	@ (8011d44 <_strtod_l+0xb04>)
 8011be2:	429d      	cmp	r5, r3
 8011be4:	f040 80b2 	bne.w	8011d4c <_strtod_l+0xb0c>
 8011be8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011bea:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8011bee:	ec4b ab10 	vmov	d0, sl, fp
 8011bf2:	f001 fa63 	bl	80130bc <__ulp>
 8011bf6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011bfa:	ec51 0b10 	vmov	r0, r1, d0
 8011bfe:	f7ee fd2b 	bl	8000658 <__aeabi_dmul>
 8011c02:	4652      	mov	r2, sl
 8011c04:	465b      	mov	r3, fp
 8011c06:	f7ee fb71 	bl	80002ec <__adddf3>
 8011c0a:	460b      	mov	r3, r1
 8011c0c:	4949      	ldr	r1, [pc, #292]	@ (8011d34 <_strtod_l+0xaf4>)
 8011c0e:	4a4e      	ldr	r2, [pc, #312]	@ (8011d48 <_strtod_l+0xb08>)
 8011c10:	4019      	ands	r1, r3
 8011c12:	4291      	cmp	r1, r2
 8011c14:	4682      	mov	sl, r0
 8011c16:	d942      	bls.n	8011c9e <_strtod_l+0xa5e>
 8011c18:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011c1a:	4b47      	ldr	r3, [pc, #284]	@ (8011d38 <_strtod_l+0xaf8>)
 8011c1c:	429a      	cmp	r2, r3
 8011c1e:	d103      	bne.n	8011c28 <_strtod_l+0x9e8>
 8011c20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011c22:	3301      	adds	r3, #1
 8011c24:	f43f ad2b 	beq.w	801167e <_strtod_l+0x43e>
 8011c28:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8011d38 <_strtod_l+0xaf8>
 8011c2c:	f04f 3aff 	mov.w	sl, #4294967295
 8011c30:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011c32:	9805      	ldr	r0, [sp, #20]
 8011c34:	f000 ff0e 	bl	8012a54 <_Bfree>
 8011c38:	9805      	ldr	r0, [sp, #20]
 8011c3a:	4649      	mov	r1, r9
 8011c3c:	f000 ff0a 	bl	8012a54 <_Bfree>
 8011c40:	9805      	ldr	r0, [sp, #20]
 8011c42:	4641      	mov	r1, r8
 8011c44:	f000 ff06 	bl	8012a54 <_Bfree>
 8011c48:	9805      	ldr	r0, [sp, #20]
 8011c4a:	4621      	mov	r1, r4
 8011c4c:	f000 ff02 	bl	8012a54 <_Bfree>
 8011c50:	e618      	b.n	8011884 <_strtod_l+0x644>
 8011c52:	f1ba 0f01 	cmp.w	sl, #1
 8011c56:	d103      	bne.n	8011c60 <_strtod_l+0xa20>
 8011c58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	f43f ada5 	beq.w	80117aa <_strtod_l+0x56a>
 8011c60:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8011d10 <_strtod_l+0xad0>
 8011c64:	4f35      	ldr	r7, [pc, #212]	@ (8011d3c <_strtod_l+0xafc>)
 8011c66:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011c6a:	2600      	movs	r6, #0
 8011c6c:	e7b1      	b.n	8011bd2 <_strtod_l+0x992>
 8011c6e:	4f34      	ldr	r7, [pc, #208]	@ (8011d40 <_strtod_l+0xb00>)
 8011c70:	2600      	movs	r6, #0
 8011c72:	e7aa      	b.n	8011bca <_strtod_l+0x98a>
 8011c74:	4b32      	ldr	r3, [pc, #200]	@ (8011d40 <_strtod_l+0xb00>)
 8011c76:	4630      	mov	r0, r6
 8011c78:	4639      	mov	r1, r7
 8011c7a:	2200      	movs	r2, #0
 8011c7c:	f7ee fcec 	bl	8000658 <__aeabi_dmul>
 8011c80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011c82:	4606      	mov	r6, r0
 8011c84:	460f      	mov	r7, r1
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d09f      	beq.n	8011bca <_strtod_l+0x98a>
 8011c8a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8011c8e:	e7a0      	b.n	8011bd2 <_strtod_l+0x992>
 8011c90:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8011d18 <_strtod_l+0xad8>
 8011c94:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011c98:	ec57 6b17 	vmov	r6, r7, d7
 8011c9c:	e799      	b.n	8011bd2 <_strtod_l+0x992>
 8011c9e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8011ca2:	9b08      	ldr	r3, [sp, #32]
 8011ca4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d1c1      	bne.n	8011c30 <_strtod_l+0x9f0>
 8011cac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011cb0:	0d1b      	lsrs	r3, r3, #20
 8011cb2:	051b      	lsls	r3, r3, #20
 8011cb4:	429d      	cmp	r5, r3
 8011cb6:	d1bb      	bne.n	8011c30 <_strtod_l+0x9f0>
 8011cb8:	4630      	mov	r0, r6
 8011cba:	4639      	mov	r1, r7
 8011cbc:	f7ef f816 	bl	8000cec <__aeabi_d2lz>
 8011cc0:	f7ee fc9c 	bl	80005fc <__aeabi_l2d>
 8011cc4:	4602      	mov	r2, r0
 8011cc6:	460b      	mov	r3, r1
 8011cc8:	4630      	mov	r0, r6
 8011cca:	4639      	mov	r1, r7
 8011ccc:	f7ee fb0c 	bl	80002e8 <__aeabi_dsub>
 8011cd0:	460b      	mov	r3, r1
 8011cd2:	4602      	mov	r2, r0
 8011cd4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8011cd8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8011cdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011cde:	ea46 060a 	orr.w	r6, r6, sl
 8011ce2:	431e      	orrs	r6, r3
 8011ce4:	d06f      	beq.n	8011dc6 <_strtod_l+0xb86>
 8011ce6:	a30e      	add	r3, pc, #56	@ (adr r3, 8011d20 <_strtod_l+0xae0>)
 8011ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cec:	f7ee ff26 	bl	8000b3c <__aeabi_dcmplt>
 8011cf0:	2800      	cmp	r0, #0
 8011cf2:	f47f accf 	bne.w	8011694 <_strtod_l+0x454>
 8011cf6:	a30c      	add	r3, pc, #48	@ (adr r3, 8011d28 <_strtod_l+0xae8>)
 8011cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cfc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011d00:	f7ee ff3a 	bl	8000b78 <__aeabi_dcmpgt>
 8011d04:	2800      	cmp	r0, #0
 8011d06:	d093      	beq.n	8011c30 <_strtod_l+0x9f0>
 8011d08:	e4c4      	b.n	8011694 <_strtod_l+0x454>
 8011d0a:	bf00      	nop
 8011d0c:	f3af 8000 	nop.w
 8011d10:	00000000 	.word	0x00000000
 8011d14:	bff00000 	.word	0xbff00000
 8011d18:	00000000 	.word	0x00000000
 8011d1c:	3ff00000 	.word	0x3ff00000
 8011d20:	94a03595 	.word	0x94a03595
 8011d24:	3fdfffff 	.word	0x3fdfffff
 8011d28:	35afe535 	.word	0x35afe535
 8011d2c:	3fe00000 	.word	0x3fe00000
 8011d30:	000fffff 	.word	0x000fffff
 8011d34:	7ff00000 	.word	0x7ff00000
 8011d38:	7fefffff 	.word	0x7fefffff
 8011d3c:	3ff00000 	.word	0x3ff00000
 8011d40:	3fe00000 	.word	0x3fe00000
 8011d44:	7fe00000 	.word	0x7fe00000
 8011d48:	7c9fffff 	.word	0x7c9fffff
 8011d4c:	9b08      	ldr	r3, [sp, #32]
 8011d4e:	b323      	cbz	r3, 8011d9a <_strtod_l+0xb5a>
 8011d50:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8011d54:	d821      	bhi.n	8011d9a <_strtod_l+0xb5a>
 8011d56:	a328      	add	r3, pc, #160	@ (adr r3, 8011df8 <_strtod_l+0xbb8>)
 8011d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d5c:	4630      	mov	r0, r6
 8011d5e:	4639      	mov	r1, r7
 8011d60:	f7ee fef6 	bl	8000b50 <__aeabi_dcmple>
 8011d64:	b1a0      	cbz	r0, 8011d90 <_strtod_l+0xb50>
 8011d66:	4639      	mov	r1, r7
 8011d68:	4630      	mov	r0, r6
 8011d6a:	f7ee ff37 	bl	8000bdc <__aeabi_d2uiz>
 8011d6e:	2801      	cmp	r0, #1
 8011d70:	bf38      	it	cc
 8011d72:	2001      	movcc	r0, #1
 8011d74:	f7ee fbf6 	bl	8000564 <__aeabi_ui2d>
 8011d78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011d7a:	4606      	mov	r6, r0
 8011d7c:	460f      	mov	r7, r1
 8011d7e:	b9fb      	cbnz	r3, 8011dc0 <_strtod_l+0xb80>
 8011d80:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011d84:	9014      	str	r0, [sp, #80]	@ 0x50
 8011d86:	9315      	str	r3, [sp, #84]	@ 0x54
 8011d88:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8011d8c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8011d90:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011d92:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8011d96:	1b5b      	subs	r3, r3, r5
 8011d98:	9311      	str	r3, [sp, #68]	@ 0x44
 8011d9a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8011d9e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8011da2:	f001 f98b 	bl	80130bc <__ulp>
 8011da6:	4650      	mov	r0, sl
 8011da8:	ec53 2b10 	vmov	r2, r3, d0
 8011dac:	4659      	mov	r1, fp
 8011dae:	f7ee fc53 	bl	8000658 <__aeabi_dmul>
 8011db2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8011db6:	f7ee fa99 	bl	80002ec <__adddf3>
 8011dba:	4682      	mov	sl, r0
 8011dbc:	468b      	mov	fp, r1
 8011dbe:	e770      	b.n	8011ca2 <_strtod_l+0xa62>
 8011dc0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8011dc4:	e7e0      	b.n	8011d88 <_strtod_l+0xb48>
 8011dc6:	a30e      	add	r3, pc, #56	@ (adr r3, 8011e00 <_strtod_l+0xbc0>)
 8011dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dcc:	f7ee feb6 	bl	8000b3c <__aeabi_dcmplt>
 8011dd0:	e798      	b.n	8011d04 <_strtod_l+0xac4>
 8011dd2:	2300      	movs	r3, #0
 8011dd4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011dd6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8011dd8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011dda:	6013      	str	r3, [r2, #0]
 8011ddc:	f7ff ba6d 	b.w	80112ba <_strtod_l+0x7a>
 8011de0:	2a65      	cmp	r2, #101	@ 0x65
 8011de2:	f43f ab66 	beq.w	80114b2 <_strtod_l+0x272>
 8011de6:	2a45      	cmp	r2, #69	@ 0x45
 8011de8:	f43f ab63 	beq.w	80114b2 <_strtod_l+0x272>
 8011dec:	2301      	movs	r3, #1
 8011dee:	f7ff bb9e 	b.w	801152e <_strtod_l+0x2ee>
 8011df2:	bf00      	nop
 8011df4:	f3af 8000 	nop.w
 8011df8:	ffc00000 	.word	0xffc00000
 8011dfc:	41dfffff 	.word	0x41dfffff
 8011e00:	94a03595 	.word	0x94a03595
 8011e04:	3fcfffff 	.word	0x3fcfffff

08011e08 <strtod>:
 8011e08:	460a      	mov	r2, r1
 8011e0a:	4601      	mov	r1, r0
 8011e0c:	4802      	ldr	r0, [pc, #8]	@ (8011e18 <strtod+0x10>)
 8011e0e:	4b03      	ldr	r3, [pc, #12]	@ (8011e1c <strtod+0x14>)
 8011e10:	6800      	ldr	r0, [r0, #0]
 8011e12:	f7ff ba15 	b.w	8011240 <_strtod_l>
 8011e16:	bf00      	nop
 8011e18:	20000458 	.word	0x20000458
 8011e1c:	200002ec 	.word	0x200002ec

08011e20 <std>:
 8011e20:	2300      	movs	r3, #0
 8011e22:	b510      	push	{r4, lr}
 8011e24:	4604      	mov	r4, r0
 8011e26:	e9c0 3300 	strd	r3, r3, [r0]
 8011e2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011e2e:	6083      	str	r3, [r0, #8]
 8011e30:	8181      	strh	r1, [r0, #12]
 8011e32:	6643      	str	r3, [r0, #100]	@ 0x64
 8011e34:	81c2      	strh	r2, [r0, #14]
 8011e36:	6183      	str	r3, [r0, #24]
 8011e38:	4619      	mov	r1, r3
 8011e3a:	2208      	movs	r2, #8
 8011e3c:	305c      	adds	r0, #92	@ 0x5c
 8011e3e:	f000 f928 	bl	8012092 <memset>
 8011e42:	4b0d      	ldr	r3, [pc, #52]	@ (8011e78 <std+0x58>)
 8011e44:	6263      	str	r3, [r4, #36]	@ 0x24
 8011e46:	4b0d      	ldr	r3, [pc, #52]	@ (8011e7c <std+0x5c>)
 8011e48:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8011e80 <std+0x60>)
 8011e4c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8011e84 <std+0x64>)
 8011e50:	6323      	str	r3, [r4, #48]	@ 0x30
 8011e52:	4b0d      	ldr	r3, [pc, #52]	@ (8011e88 <std+0x68>)
 8011e54:	6224      	str	r4, [r4, #32]
 8011e56:	429c      	cmp	r4, r3
 8011e58:	d006      	beq.n	8011e68 <std+0x48>
 8011e5a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011e5e:	4294      	cmp	r4, r2
 8011e60:	d002      	beq.n	8011e68 <std+0x48>
 8011e62:	33d0      	adds	r3, #208	@ 0xd0
 8011e64:	429c      	cmp	r4, r3
 8011e66:	d105      	bne.n	8011e74 <std+0x54>
 8011e68:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011e70:	f000 ba00 	b.w	8012274 <__retarget_lock_init_recursive>
 8011e74:	bd10      	pop	{r4, pc}
 8011e76:	bf00      	nop
 8011e78:	0801200d 	.word	0x0801200d
 8011e7c:	0801202f 	.word	0x0801202f
 8011e80:	08012067 	.word	0x08012067
 8011e84:	0801208b 	.word	0x0801208b
 8011e88:	20005720 	.word	0x20005720

08011e8c <stdio_exit_handler>:
 8011e8c:	4a02      	ldr	r2, [pc, #8]	@ (8011e98 <stdio_exit_handler+0xc>)
 8011e8e:	4903      	ldr	r1, [pc, #12]	@ (8011e9c <stdio_exit_handler+0x10>)
 8011e90:	4803      	ldr	r0, [pc, #12]	@ (8011ea0 <stdio_exit_handler+0x14>)
 8011e92:	f000 b869 	b.w	8011f68 <_fwalk_sglue>
 8011e96:	bf00      	nop
 8011e98:	200002e0 	.word	0x200002e0
 8011e9c:	08013a35 	.word	0x08013a35
 8011ea0:	2000045c 	.word	0x2000045c

08011ea4 <cleanup_stdio>:
 8011ea4:	6841      	ldr	r1, [r0, #4]
 8011ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8011ed8 <cleanup_stdio+0x34>)
 8011ea8:	4299      	cmp	r1, r3
 8011eaa:	b510      	push	{r4, lr}
 8011eac:	4604      	mov	r4, r0
 8011eae:	d001      	beq.n	8011eb4 <cleanup_stdio+0x10>
 8011eb0:	f001 fdc0 	bl	8013a34 <_fflush_r>
 8011eb4:	68a1      	ldr	r1, [r4, #8]
 8011eb6:	4b09      	ldr	r3, [pc, #36]	@ (8011edc <cleanup_stdio+0x38>)
 8011eb8:	4299      	cmp	r1, r3
 8011eba:	d002      	beq.n	8011ec2 <cleanup_stdio+0x1e>
 8011ebc:	4620      	mov	r0, r4
 8011ebe:	f001 fdb9 	bl	8013a34 <_fflush_r>
 8011ec2:	68e1      	ldr	r1, [r4, #12]
 8011ec4:	4b06      	ldr	r3, [pc, #24]	@ (8011ee0 <cleanup_stdio+0x3c>)
 8011ec6:	4299      	cmp	r1, r3
 8011ec8:	d004      	beq.n	8011ed4 <cleanup_stdio+0x30>
 8011eca:	4620      	mov	r0, r4
 8011ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ed0:	f001 bdb0 	b.w	8013a34 <_fflush_r>
 8011ed4:	bd10      	pop	{r4, pc}
 8011ed6:	bf00      	nop
 8011ed8:	20005720 	.word	0x20005720
 8011edc:	20005788 	.word	0x20005788
 8011ee0:	200057f0 	.word	0x200057f0

08011ee4 <global_stdio_init.part.0>:
 8011ee4:	b510      	push	{r4, lr}
 8011ee6:	4b0b      	ldr	r3, [pc, #44]	@ (8011f14 <global_stdio_init.part.0+0x30>)
 8011ee8:	4c0b      	ldr	r4, [pc, #44]	@ (8011f18 <global_stdio_init.part.0+0x34>)
 8011eea:	4a0c      	ldr	r2, [pc, #48]	@ (8011f1c <global_stdio_init.part.0+0x38>)
 8011eec:	601a      	str	r2, [r3, #0]
 8011eee:	4620      	mov	r0, r4
 8011ef0:	2200      	movs	r2, #0
 8011ef2:	2104      	movs	r1, #4
 8011ef4:	f7ff ff94 	bl	8011e20 <std>
 8011ef8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011efc:	2201      	movs	r2, #1
 8011efe:	2109      	movs	r1, #9
 8011f00:	f7ff ff8e 	bl	8011e20 <std>
 8011f04:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011f08:	2202      	movs	r2, #2
 8011f0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f0e:	2112      	movs	r1, #18
 8011f10:	f7ff bf86 	b.w	8011e20 <std>
 8011f14:	20005858 	.word	0x20005858
 8011f18:	20005720 	.word	0x20005720
 8011f1c:	08011e8d 	.word	0x08011e8d

08011f20 <__sfp_lock_acquire>:
 8011f20:	4801      	ldr	r0, [pc, #4]	@ (8011f28 <__sfp_lock_acquire+0x8>)
 8011f22:	f000 b9a8 	b.w	8012276 <__retarget_lock_acquire_recursive>
 8011f26:	bf00      	nop
 8011f28:	20005861 	.word	0x20005861

08011f2c <__sfp_lock_release>:
 8011f2c:	4801      	ldr	r0, [pc, #4]	@ (8011f34 <__sfp_lock_release+0x8>)
 8011f2e:	f000 b9a3 	b.w	8012278 <__retarget_lock_release_recursive>
 8011f32:	bf00      	nop
 8011f34:	20005861 	.word	0x20005861

08011f38 <__sinit>:
 8011f38:	b510      	push	{r4, lr}
 8011f3a:	4604      	mov	r4, r0
 8011f3c:	f7ff fff0 	bl	8011f20 <__sfp_lock_acquire>
 8011f40:	6a23      	ldr	r3, [r4, #32]
 8011f42:	b11b      	cbz	r3, 8011f4c <__sinit+0x14>
 8011f44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f48:	f7ff bff0 	b.w	8011f2c <__sfp_lock_release>
 8011f4c:	4b04      	ldr	r3, [pc, #16]	@ (8011f60 <__sinit+0x28>)
 8011f4e:	6223      	str	r3, [r4, #32]
 8011f50:	4b04      	ldr	r3, [pc, #16]	@ (8011f64 <__sinit+0x2c>)
 8011f52:	681b      	ldr	r3, [r3, #0]
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d1f5      	bne.n	8011f44 <__sinit+0xc>
 8011f58:	f7ff ffc4 	bl	8011ee4 <global_stdio_init.part.0>
 8011f5c:	e7f2      	b.n	8011f44 <__sinit+0xc>
 8011f5e:	bf00      	nop
 8011f60:	08011ea5 	.word	0x08011ea5
 8011f64:	20005858 	.word	0x20005858

08011f68 <_fwalk_sglue>:
 8011f68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011f6c:	4607      	mov	r7, r0
 8011f6e:	4688      	mov	r8, r1
 8011f70:	4614      	mov	r4, r2
 8011f72:	2600      	movs	r6, #0
 8011f74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011f78:	f1b9 0901 	subs.w	r9, r9, #1
 8011f7c:	d505      	bpl.n	8011f8a <_fwalk_sglue+0x22>
 8011f7e:	6824      	ldr	r4, [r4, #0]
 8011f80:	2c00      	cmp	r4, #0
 8011f82:	d1f7      	bne.n	8011f74 <_fwalk_sglue+0xc>
 8011f84:	4630      	mov	r0, r6
 8011f86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f8a:	89ab      	ldrh	r3, [r5, #12]
 8011f8c:	2b01      	cmp	r3, #1
 8011f8e:	d907      	bls.n	8011fa0 <_fwalk_sglue+0x38>
 8011f90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011f94:	3301      	adds	r3, #1
 8011f96:	d003      	beq.n	8011fa0 <_fwalk_sglue+0x38>
 8011f98:	4629      	mov	r1, r5
 8011f9a:	4638      	mov	r0, r7
 8011f9c:	47c0      	blx	r8
 8011f9e:	4306      	orrs	r6, r0
 8011fa0:	3568      	adds	r5, #104	@ 0x68
 8011fa2:	e7e9      	b.n	8011f78 <_fwalk_sglue+0x10>

08011fa4 <sniprintf>:
 8011fa4:	b40c      	push	{r2, r3}
 8011fa6:	b530      	push	{r4, r5, lr}
 8011fa8:	4b17      	ldr	r3, [pc, #92]	@ (8012008 <sniprintf+0x64>)
 8011faa:	1e0c      	subs	r4, r1, #0
 8011fac:	681d      	ldr	r5, [r3, #0]
 8011fae:	b09d      	sub	sp, #116	@ 0x74
 8011fb0:	da08      	bge.n	8011fc4 <sniprintf+0x20>
 8011fb2:	238b      	movs	r3, #139	@ 0x8b
 8011fb4:	602b      	str	r3, [r5, #0]
 8011fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8011fba:	b01d      	add	sp, #116	@ 0x74
 8011fbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011fc0:	b002      	add	sp, #8
 8011fc2:	4770      	bx	lr
 8011fc4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8011fc8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011fcc:	bf14      	ite	ne
 8011fce:	f104 33ff 	addne.w	r3, r4, #4294967295
 8011fd2:	4623      	moveq	r3, r4
 8011fd4:	9304      	str	r3, [sp, #16]
 8011fd6:	9307      	str	r3, [sp, #28]
 8011fd8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011fdc:	9002      	str	r0, [sp, #8]
 8011fde:	9006      	str	r0, [sp, #24]
 8011fe0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011fe4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8011fe6:	ab21      	add	r3, sp, #132	@ 0x84
 8011fe8:	a902      	add	r1, sp, #8
 8011fea:	4628      	mov	r0, r5
 8011fec:	9301      	str	r3, [sp, #4]
 8011fee:	f001 fa13 	bl	8013418 <_svfiprintf_r>
 8011ff2:	1c43      	adds	r3, r0, #1
 8011ff4:	bfbc      	itt	lt
 8011ff6:	238b      	movlt	r3, #139	@ 0x8b
 8011ff8:	602b      	strlt	r3, [r5, #0]
 8011ffa:	2c00      	cmp	r4, #0
 8011ffc:	d0dd      	beq.n	8011fba <sniprintf+0x16>
 8011ffe:	9b02      	ldr	r3, [sp, #8]
 8012000:	2200      	movs	r2, #0
 8012002:	701a      	strb	r2, [r3, #0]
 8012004:	e7d9      	b.n	8011fba <sniprintf+0x16>
 8012006:	bf00      	nop
 8012008:	20000458 	.word	0x20000458

0801200c <__sread>:
 801200c:	b510      	push	{r4, lr}
 801200e:	460c      	mov	r4, r1
 8012010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012014:	f000 f8d0 	bl	80121b8 <_read_r>
 8012018:	2800      	cmp	r0, #0
 801201a:	bfab      	itete	ge
 801201c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801201e:	89a3      	ldrhlt	r3, [r4, #12]
 8012020:	181b      	addge	r3, r3, r0
 8012022:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012026:	bfac      	ite	ge
 8012028:	6563      	strge	r3, [r4, #84]	@ 0x54
 801202a:	81a3      	strhlt	r3, [r4, #12]
 801202c:	bd10      	pop	{r4, pc}

0801202e <__swrite>:
 801202e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012032:	461f      	mov	r7, r3
 8012034:	898b      	ldrh	r3, [r1, #12]
 8012036:	05db      	lsls	r3, r3, #23
 8012038:	4605      	mov	r5, r0
 801203a:	460c      	mov	r4, r1
 801203c:	4616      	mov	r6, r2
 801203e:	d505      	bpl.n	801204c <__swrite+0x1e>
 8012040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012044:	2302      	movs	r3, #2
 8012046:	2200      	movs	r2, #0
 8012048:	f000 f8a4 	bl	8012194 <_lseek_r>
 801204c:	89a3      	ldrh	r3, [r4, #12]
 801204e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012052:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012056:	81a3      	strh	r3, [r4, #12]
 8012058:	4632      	mov	r2, r6
 801205a:	463b      	mov	r3, r7
 801205c:	4628      	mov	r0, r5
 801205e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012062:	f000 b8cb 	b.w	80121fc <_write_r>

08012066 <__sseek>:
 8012066:	b510      	push	{r4, lr}
 8012068:	460c      	mov	r4, r1
 801206a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801206e:	f000 f891 	bl	8012194 <_lseek_r>
 8012072:	1c43      	adds	r3, r0, #1
 8012074:	89a3      	ldrh	r3, [r4, #12]
 8012076:	bf15      	itete	ne
 8012078:	6560      	strne	r0, [r4, #84]	@ 0x54
 801207a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801207e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012082:	81a3      	strheq	r3, [r4, #12]
 8012084:	bf18      	it	ne
 8012086:	81a3      	strhne	r3, [r4, #12]
 8012088:	bd10      	pop	{r4, pc}

0801208a <__sclose>:
 801208a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801208e:	f000 b81b 	b.w	80120c8 <_close_r>

08012092 <memset>:
 8012092:	4402      	add	r2, r0
 8012094:	4603      	mov	r3, r0
 8012096:	4293      	cmp	r3, r2
 8012098:	d100      	bne.n	801209c <memset+0xa>
 801209a:	4770      	bx	lr
 801209c:	f803 1b01 	strb.w	r1, [r3], #1
 80120a0:	e7f9      	b.n	8012096 <memset+0x4>

080120a2 <strncmp>:
 80120a2:	b510      	push	{r4, lr}
 80120a4:	b16a      	cbz	r2, 80120c2 <strncmp+0x20>
 80120a6:	3901      	subs	r1, #1
 80120a8:	1884      	adds	r4, r0, r2
 80120aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80120ae:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80120b2:	429a      	cmp	r2, r3
 80120b4:	d103      	bne.n	80120be <strncmp+0x1c>
 80120b6:	42a0      	cmp	r0, r4
 80120b8:	d001      	beq.n	80120be <strncmp+0x1c>
 80120ba:	2a00      	cmp	r2, #0
 80120bc:	d1f5      	bne.n	80120aa <strncmp+0x8>
 80120be:	1ad0      	subs	r0, r2, r3
 80120c0:	bd10      	pop	{r4, pc}
 80120c2:	4610      	mov	r0, r2
 80120c4:	e7fc      	b.n	80120c0 <strncmp+0x1e>
	...

080120c8 <_close_r>:
 80120c8:	b538      	push	{r3, r4, r5, lr}
 80120ca:	4d06      	ldr	r5, [pc, #24]	@ (80120e4 <_close_r+0x1c>)
 80120cc:	2300      	movs	r3, #0
 80120ce:	4604      	mov	r4, r0
 80120d0:	4608      	mov	r0, r1
 80120d2:	602b      	str	r3, [r5, #0]
 80120d4:	f7f1 fb26 	bl	8003724 <_close>
 80120d8:	1c43      	adds	r3, r0, #1
 80120da:	d102      	bne.n	80120e2 <_close_r+0x1a>
 80120dc:	682b      	ldr	r3, [r5, #0]
 80120de:	b103      	cbz	r3, 80120e2 <_close_r+0x1a>
 80120e0:	6023      	str	r3, [r4, #0]
 80120e2:	bd38      	pop	{r3, r4, r5, pc}
 80120e4:	2000585c 	.word	0x2000585c

080120e8 <_reclaim_reent>:
 80120e8:	4b29      	ldr	r3, [pc, #164]	@ (8012190 <_reclaim_reent+0xa8>)
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	4283      	cmp	r3, r0
 80120ee:	b570      	push	{r4, r5, r6, lr}
 80120f0:	4604      	mov	r4, r0
 80120f2:	d04b      	beq.n	801218c <_reclaim_reent+0xa4>
 80120f4:	69c3      	ldr	r3, [r0, #28]
 80120f6:	b1ab      	cbz	r3, 8012124 <_reclaim_reent+0x3c>
 80120f8:	68db      	ldr	r3, [r3, #12]
 80120fa:	b16b      	cbz	r3, 8012118 <_reclaim_reent+0x30>
 80120fc:	2500      	movs	r5, #0
 80120fe:	69e3      	ldr	r3, [r4, #28]
 8012100:	68db      	ldr	r3, [r3, #12]
 8012102:	5959      	ldr	r1, [r3, r5]
 8012104:	2900      	cmp	r1, #0
 8012106:	d13b      	bne.n	8012180 <_reclaim_reent+0x98>
 8012108:	3504      	adds	r5, #4
 801210a:	2d80      	cmp	r5, #128	@ 0x80
 801210c:	d1f7      	bne.n	80120fe <_reclaim_reent+0x16>
 801210e:	69e3      	ldr	r3, [r4, #28]
 8012110:	4620      	mov	r0, r4
 8012112:	68d9      	ldr	r1, [r3, #12]
 8012114:	f000 f8c8 	bl	80122a8 <_free_r>
 8012118:	69e3      	ldr	r3, [r4, #28]
 801211a:	6819      	ldr	r1, [r3, #0]
 801211c:	b111      	cbz	r1, 8012124 <_reclaim_reent+0x3c>
 801211e:	4620      	mov	r0, r4
 8012120:	f000 f8c2 	bl	80122a8 <_free_r>
 8012124:	6961      	ldr	r1, [r4, #20]
 8012126:	b111      	cbz	r1, 801212e <_reclaim_reent+0x46>
 8012128:	4620      	mov	r0, r4
 801212a:	f000 f8bd 	bl	80122a8 <_free_r>
 801212e:	69e1      	ldr	r1, [r4, #28]
 8012130:	b111      	cbz	r1, 8012138 <_reclaim_reent+0x50>
 8012132:	4620      	mov	r0, r4
 8012134:	f000 f8b8 	bl	80122a8 <_free_r>
 8012138:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801213a:	b111      	cbz	r1, 8012142 <_reclaim_reent+0x5a>
 801213c:	4620      	mov	r0, r4
 801213e:	f000 f8b3 	bl	80122a8 <_free_r>
 8012142:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012144:	b111      	cbz	r1, 801214c <_reclaim_reent+0x64>
 8012146:	4620      	mov	r0, r4
 8012148:	f000 f8ae 	bl	80122a8 <_free_r>
 801214c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801214e:	b111      	cbz	r1, 8012156 <_reclaim_reent+0x6e>
 8012150:	4620      	mov	r0, r4
 8012152:	f000 f8a9 	bl	80122a8 <_free_r>
 8012156:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8012158:	b111      	cbz	r1, 8012160 <_reclaim_reent+0x78>
 801215a:	4620      	mov	r0, r4
 801215c:	f000 f8a4 	bl	80122a8 <_free_r>
 8012160:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8012162:	b111      	cbz	r1, 801216a <_reclaim_reent+0x82>
 8012164:	4620      	mov	r0, r4
 8012166:	f000 f89f 	bl	80122a8 <_free_r>
 801216a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801216c:	b111      	cbz	r1, 8012174 <_reclaim_reent+0x8c>
 801216e:	4620      	mov	r0, r4
 8012170:	f000 f89a 	bl	80122a8 <_free_r>
 8012174:	6a23      	ldr	r3, [r4, #32]
 8012176:	b14b      	cbz	r3, 801218c <_reclaim_reent+0xa4>
 8012178:	4620      	mov	r0, r4
 801217a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801217e:	4718      	bx	r3
 8012180:	680e      	ldr	r6, [r1, #0]
 8012182:	4620      	mov	r0, r4
 8012184:	f000 f890 	bl	80122a8 <_free_r>
 8012188:	4631      	mov	r1, r6
 801218a:	e7bb      	b.n	8012104 <_reclaim_reent+0x1c>
 801218c:	bd70      	pop	{r4, r5, r6, pc}
 801218e:	bf00      	nop
 8012190:	20000458 	.word	0x20000458

08012194 <_lseek_r>:
 8012194:	b538      	push	{r3, r4, r5, lr}
 8012196:	4d07      	ldr	r5, [pc, #28]	@ (80121b4 <_lseek_r+0x20>)
 8012198:	4604      	mov	r4, r0
 801219a:	4608      	mov	r0, r1
 801219c:	4611      	mov	r1, r2
 801219e:	2200      	movs	r2, #0
 80121a0:	602a      	str	r2, [r5, #0]
 80121a2:	461a      	mov	r2, r3
 80121a4:	f7f1 fae5 	bl	8003772 <_lseek>
 80121a8:	1c43      	adds	r3, r0, #1
 80121aa:	d102      	bne.n	80121b2 <_lseek_r+0x1e>
 80121ac:	682b      	ldr	r3, [r5, #0]
 80121ae:	b103      	cbz	r3, 80121b2 <_lseek_r+0x1e>
 80121b0:	6023      	str	r3, [r4, #0]
 80121b2:	bd38      	pop	{r3, r4, r5, pc}
 80121b4:	2000585c 	.word	0x2000585c

080121b8 <_read_r>:
 80121b8:	b538      	push	{r3, r4, r5, lr}
 80121ba:	4d07      	ldr	r5, [pc, #28]	@ (80121d8 <_read_r+0x20>)
 80121bc:	4604      	mov	r4, r0
 80121be:	4608      	mov	r0, r1
 80121c0:	4611      	mov	r1, r2
 80121c2:	2200      	movs	r2, #0
 80121c4:	602a      	str	r2, [r5, #0]
 80121c6:	461a      	mov	r2, r3
 80121c8:	f7f1 fa8f 	bl	80036ea <_read>
 80121cc:	1c43      	adds	r3, r0, #1
 80121ce:	d102      	bne.n	80121d6 <_read_r+0x1e>
 80121d0:	682b      	ldr	r3, [r5, #0]
 80121d2:	b103      	cbz	r3, 80121d6 <_read_r+0x1e>
 80121d4:	6023      	str	r3, [r4, #0]
 80121d6:	bd38      	pop	{r3, r4, r5, pc}
 80121d8:	2000585c 	.word	0x2000585c

080121dc <_sbrk_r>:
 80121dc:	b538      	push	{r3, r4, r5, lr}
 80121de:	4d06      	ldr	r5, [pc, #24]	@ (80121f8 <_sbrk_r+0x1c>)
 80121e0:	2300      	movs	r3, #0
 80121e2:	4604      	mov	r4, r0
 80121e4:	4608      	mov	r0, r1
 80121e6:	602b      	str	r3, [r5, #0]
 80121e8:	f7f1 fad0 	bl	800378c <_sbrk>
 80121ec:	1c43      	adds	r3, r0, #1
 80121ee:	d102      	bne.n	80121f6 <_sbrk_r+0x1a>
 80121f0:	682b      	ldr	r3, [r5, #0]
 80121f2:	b103      	cbz	r3, 80121f6 <_sbrk_r+0x1a>
 80121f4:	6023      	str	r3, [r4, #0]
 80121f6:	bd38      	pop	{r3, r4, r5, pc}
 80121f8:	2000585c 	.word	0x2000585c

080121fc <_write_r>:
 80121fc:	b538      	push	{r3, r4, r5, lr}
 80121fe:	4d07      	ldr	r5, [pc, #28]	@ (801221c <_write_r+0x20>)
 8012200:	4604      	mov	r4, r0
 8012202:	4608      	mov	r0, r1
 8012204:	4611      	mov	r1, r2
 8012206:	2200      	movs	r2, #0
 8012208:	602a      	str	r2, [r5, #0]
 801220a:	461a      	mov	r2, r3
 801220c:	f7f0 fec2 	bl	8002f94 <_write>
 8012210:	1c43      	adds	r3, r0, #1
 8012212:	d102      	bne.n	801221a <_write_r+0x1e>
 8012214:	682b      	ldr	r3, [r5, #0]
 8012216:	b103      	cbz	r3, 801221a <_write_r+0x1e>
 8012218:	6023      	str	r3, [r4, #0]
 801221a:	bd38      	pop	{r3, r4, r5, pc}
 801221c:	2000585c 	.word	0x2000585c

08012220 <__errno>:
 8012220:	4b01      	ldr	r3, [pc, #4]	@ (8012228 <__errno+0x8>)
 8012222:	6818      	ldr	r0, [r3, #0]
 8012224:	4770      	bx	lr
 8012226:	bf00      	nop
 8012228:	20000458 	.word	0x20000458

0801222c <__libc_init_array>:
 801222c:	b570      	push	{r4, r5, r6, lr}
 801222e:	4d0d      	ldr	r5, [pc, #52]	@ (8012264 <__libc_init_array+0x38>)
 8012230:	4c0d      	ldr	r4, [pc, #52]	@ (8012268 <__libc_init_array+0x3c>)
 8012232:	1b64      	subs	r4, r4, r5
 8012234:	10a4      	asrs	r4, r4, #2
 8012236:	2600      	movs	r6, #0
 8012238:	42a6      	cmp	r6, r4
 801223a:	d109      	bne.n	8012250 <__libc_init_array+0x24>
 801223c:	4d0b      	ldr	r5, [pc, #44]	@ (801226c <__libc_init_array+0x40>)
 801223e:	4c0c      	ldr	r4, [pc, #48]	@ (8012270 <__libc_init_array+0x44>)
 8012240:	f001 ff22 	bl	8014088 <_init>
 8012244:	1b64      	subs	r4, r4, r5
 8012246:	10a4      	asrs	r4, r4, #2
 8012248:	2600      	movs	r6, #0
 801224a:	42a6      	cmp	r6, r4
 801224c:	d105      	bne.n	801225a <__libc_init_array+0x2e>
 801224e:	bd70      	pop	{r4, r5, r6, pc}
 8012250:	f855 3b04 	ldr.w	r3, [r5], #4
 8012254:	4798      	blx	r3
 8012256:	3601      	adds	r6, #1
 8012258:	e7ee      	b.n	8012238 <__libc_init_array+0xc>
 801225a:	f855 3b04 	ldr.w	r3, [r5], #4
 801225e:	4798      	blx	r3
 8012260:	3601      	adds	r6, #1
 8012262:	e7f2      	b.n	801224a <__libc_init_array+0x1e>
 8012264:	08014770 	.word	0x08014770
 8012268:	08014770 	.word	0x08014770
 801226c:	08014770 	.word	0x08014770
 8012270:	08014774 	.word	0x08014774

08012274 <__retarget_lock_init_recursive>:
 8012274:	4770      	bx	lr

08012276 <__retarget_lock_acquire_recursive>:
 8012276:	4770      	bx	lr

08012278 <__retarget_lock_release_recursive>:
 8012278:	4770      	bx	lr

0801227a <memcpy>:
 801227a:	440a      	add	r2, r1
 801227c:	4291      	cmp	r1, r2
 801227e:	f100 33ff 	add.w	r3, r0, #4294967295
 8012282:	d100      	bne.n	8012286 <memcpy+0xc>
 8012284:	4770      	bx	lr
 8012286:	b510      	push	{r4, lr}
 8012288:	f811 4b01 	ldrb.w	r4, [r1], #1
 801228c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012290:	4291      	cmp	r1, r2
 8012292:	d1f9      	bne.n	8012288 <memcpy+0xe>
 8012294:	bd10      	pop	{r4, pc}
	...

08012298 <nan>:
 8012298:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80122a0 <nan+0x8>
 801229c:	4770      	bx	lr
 801229e:	bf00      	nop
 80122a0:	00000000 	.word	0x00000000
 80122a4:	7ff80000 	.word	0x7ff80000

080122a8 <_free_r>:
 80122a8:	b538      	push	{r3, r4, r5, lr}
 80122aa:	4605      	mov	r5, r0
 80122ac:	2900      	cmp	r1, #0
 80122ae:	d041      	beq.n	8012334 <_free_r+0x8c>
 80122b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80122b4:	1f0c      	subs	r4, r1, #4
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	bfb8      	it	lt
 80122ba:	18e4      	addlt	r4, r4, r3
 80122bc:	f7fe ff5e 	bl	801117c <__malloc_lock>
 80122c0:	4a1d      	ldr	r2, [pc, #116]	@ (8012338 <_free_r+0x90>)
 80122c2:	6813      	ldr	r3, [r2, #0]
 80122c4:	b933      	cbnz	r3, 80122d4 <_free_r+0x2c>
 80122c6:	6063      	str	r3, [r4, #4]
 80122c8:	6014      	str	r4, [r2, #0]
 80122ca:	4628      	mov	r0, r5
 80122cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80122d0:	f7fe bf5a 	b.w	8011188 <__malloc_unlock>
 80122d4:	42a3      	cmp	r3, r4
 80122d6:	d908      	bls.n	80122ea <_free_r+0x42>
 80122d8:	6820      	ldr	r0, [r4, #0]
 80122da:	1821      	adds	r1, r4, r0
 80122dc:	428b      	cmp	r3, r1
 80122de:	bf01      	itttt	eq
 80122e0:	6819      	ldreq	r1, [r3, #0]
 80122e2:	685b      	ldreq	r3, [r3, #4]
 80122e4:	1809      	addeq	r1, r1, r0
 80122e6:	6021      	streq	r1, [r4, #0]
 80122e8:	e7ed      	b.n	80122c6 <_free_r+0x1e>
 80122ea:	461a      	mov	r2, r3
 80122ec:	685b      	ldr	r3, [r3, #4]
 80122ee:	b10b      	cbz	r3, 80122f4 <_free_r+0x4c>
 80122f0:	42a3      	cmp	r3, r4
 80122f2:	d9fa      	bls.n	80122ea <_free_r+0x42>
 80122f4:	6811      	ldr	r1, [r2, #0]
 80122f6:	1850      	adds	r0, r2, r1
 80122f8:	42a0      	cmp	r0, r4
 80122fa:	d10b      	bne.n	8012314 <_free_r+0x6c>
 80122fc:	6820      	ldr	r0, [r4, #0]
 80122fe:	4401      	add	r1, r0
 8012300:	1850      	adds	r0, r2, r1
 8012302:	4283      	cmp	r3, r0
 8012304:	6011      	str	r1, [r2, #0]
 8012306:	d1e0      	bne.n	80122ca <_free_r+0x22>
 8012308:	6818      	ldr	r0, [r3, #0]
 801230a:	685b      	ldr	r3, [r3, #4]
 801230c:	6053      	str	r3, [r2, #4]
 801230e:	4408      	add	r0, r1
 8012310:	6010      	str	r0, [r2, #0]
 8012312:	e7da      	b.n	80122ca <_free_r+0x22>
 8012314:	d902      	bls.n	801231c <_free_r+0x74>
 8012316:	230c      	movs	r3, #12
 8012318:	602b      	str	r3, [r5, #0]
 801231a:	e7d6      	b.n	80122ca <_free_r+0x22>
 801231c:	6820      	ldr	r0, [r4, #0]
 801231e:	1821      	adds	r1, r4, r0
 8012320:	428b      	cmp	r3, r1
 8012322:	bf04      	itt	eq
 8012324:	6819      	ldreq	r1, [r3, #0]
 8012326:	685b      	ldreq	r3, [r3, #4]
 8012328:	6063      	str	r3, [r4, #4]
 801232a:	bf04      	itt	eq
 801232c:	1809      	addeq	r1, r1, r0
 801232e:	6021      	streq	r1, [r4, #0]
 8012330:	6054      	str	r4, [r2, #4]
 8012332:	e7ca      	b.n	80122ca <_free_r+0x22>
 8012334:	bd38      	pop	{r3, r4, r5, pc}
 8012336:	bf00      	nop
 8012338:	2000571c 	.word	0x2000571c

0801233c <rshift>:
 801233c:	6903      	ldr	r3, [r0, #16]
 801233e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012342:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012346:	ea4f 1261 	mov.w	r2, r1, asr #5
 801234a:	f100 0414 	add.w	r4, r0, #20
 801234e:	dd45      	ble.n	80123dc <rshift+0xa0>
 8012350:	f011 011f 	ands.w	r1, r1, #31
 8012354:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012358:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801235c:	d10c      	bne.n	8012378 <rshift+0x3c>
 801235e:	f100 0710 	add.w	r7, r0, #16
 8012362:	4629      	mov	r1, r5
 8012364:	42b1      	cmp	r1, r6
 8012366:	d334      	bcc.n	80123d2 <rshift+0x96>
 8012368:	1a9b      	subs	r3, r3, r2
 801236a:	009b      	lsls	r3, r3, #2
 801236c:	1eea      	subs	r2, r5, #3
 801236e:	4296      	cmp	r6, r2
 8012370:	bf38      	it	cc
 8012372:	2300      	movcc	r3, #0
 8012374:	4423      	add	r3, r4
 8012376:	e015      	b.n	80123a4 <rshift+0x68>
 8012378:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801237c:	f1c1 0820 	rsb	r8, r1, #32
 8012380:	40cf      	lsrs	r7, r1
 8012382:	f105 0e04 	add.w	lr, r5, #4
 8012386:	46a1      	mov	r9, r4
 8012388:	4576      	cmp	r6, lr
 801238a:	46f4      	mov	ip, lr
 801238c:	d815      	bhi.n	80123ba <rshift+0x7e>
 801238e:	1a9a      	subs	r2, r3, r2
 8012390:	0092      	lsls	r2, r2, #2
 8012392:	3a04      	subs	r2, #4
 8012394:	3501      	adds	r5, #1
 8012396:	42ae      	cmp	r6, r5
 8012398:	bf38      	it	cc
 801239a:	2200      	movcc	r2, #0
 801239c:	18a3      	adds	r3, r4, r2
 801239e:	50a7      	str	r7, [r4, r2]
 80123a0:	b107      	cbz	r7, 80123a4 <rshift+0x68>
 80123a2:	3304      	adds	r3, #4
 80123a4:	1b1a      	subs	r2, r3, r4
 80123a6:	42a3      	cmp	r3, r4
 80123a8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80123ac:	bf08      	it	eq
 80123ae:	2300      	moveq	r3, #0
 80123b0:	6102      	str	r2, [r0, #16]
 80123b2:	bf08      	it	eq
 80123b4:	6143      	streq	r3, [r0, #20]
 80123b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80123ba:	f8dc c000 	ldr.w	ip, [ip]
 80123be:	fa0c fc08 	lsl.w	ip, ip, r8
 80123c2:	ea4c 0707 	orr.w	r7, ip, r7
 80123c6:	f849 7b04 	str.w	r7, [r9], #4
 80123ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 80123ce:	40cf      	lsrs	r7, r1
 80123d0:	e7da      	b.n	8012388 <rshift+0x4c>
 80123d2:	f851 cb04 	ldr.w	ip, [r1], #4
 80123d6:	f847 cf04 	str.w	ip, [r7, #4]!
 80123da:	e7c3      	b.n	8012364 <rshift+0x28>
 80123dc:	4623      	mov	r3, r4
 80123de:	e7e1      	b.n	80123a4 <rshift+0x68>

080123e0 <__hexdig_fun>:
 80123e0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80123e4:	2b09      	cmp	r3, #9
 80123e6:	d802      	bhi.n	80123ee <__hexdig_fun+0xe>
 80123e8:	3820      	subs	r0, #32
 80123ea:	b2c0      	uxtb	r0, r0
 80123ec:	4770      	bx	lr
 80123ee:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80123f2:	2b05      	cmp	r3, #5
 80123f4:	d801      	bhi.n	80123fa <__hexdig_fun+0x1a>
 80123f6:	3847      	subs	r0, #71	@ 0x47
 80123f8:	e7f7      	b.n	80123ea <__hexdig_fun+0xa>
 80123fa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80123fe:	2b05      	cmp	r3, #5
 8012400:	d801      	bhi.n	8012406 <__hexdig_fun+0x26>
 8012402:	3827      	subs	r0, #39	@ 0x27
 8012404:	e7f1      	b.n	80123ea <__hexdig_fun+0xa>
 8012406:	2000      	movs	r0, #0
 8012408:	4770      	bx	lr
	...

0801240c <__gethex>:
 801240c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012410:	b085      	sub	sp, #20
 8012412:	468a      	mov	sl, r1
 8012414:	9302      	str	r3, [sp, #8]
 8012416:	680b      	ldr	r3, [r1, #0]
 8012418:	9001      	str	r0, [sp, #4]
 801241a:	4690      	mov	r8, r2
 801241c:	1c9c      	adds	r4, r3, #2
 801241e:	46a1      	mov	r9, r4
 8012420:	f814 0b01 	ldrb.w	r0, [r4], #1
 8012424:	2830      	cmp	r0, #48	@ 0x30
 8012426:	d0fa      	beq.n	801241e <__gethex+0x12>
 8012428:	eba9 0303 	sub.w	r3, r9, r3
 801242c:	f1a3 0b02 	sub.w	fp, r3, #2
 8012430:	f7ff ffd6 	bl	80123e0 <__hexdig_fun>
 8012434:	4605      	mov	r5, r0
 8012436:	2800      	cmp	r0, #0
 8012438:	d168      	bne.n	801250c <__gethex+0x100>
 801243a:	49a0      	ldr	r1, [pc, #640]	@ (80126bc <__gethex+0x2b0>)
 801243c:	2201      	movs	r2, #1
 801243e:	4648      	mov	r0, r9
 8012440:	f7ff fe2f 	bl	80120a2 <strncmp>
 8012444:	4607      	mov	r7, r0
 8012446:	2800      	cmp	r0, #0
 8012448:	d167      	bne.n	801251a <__gethex+0x10e>
 801244a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801244e:	4626      	mov	r6, r4
 8012450:	f7ff ffc6 	bl	80123e0 <__hexdig_fun>
 8012454:	2800      	cmp	r0, #0
 8012456:	d062      	beq.n	801251e <__gethex+0x112>
 8012458:	4623      	mov	r3, r4
 801245a:	7818      	ldrb	r0, [r3, #0]
 801245c:	2830      	cmp	r0, #48	@ 0x30
 801245e:	4699      	mov	r9, r3
 8012460:	f103 0301 	add.w	r3, r3, #1
 8012464:	d0f9      	beq.n	801245a <__gethex+0x4e>
 8012466:	f7ff ffbb 	bl	80123e0 <__hexdig_fun>
 801246a:	fab0 f580 	clz	r5, r0
 801246e:	096d      	lsrs	r5, r5, #5
 8012470:	f04f 0b01 	mov.w	fp, #1
 8012474:	464a      	mov	r2, r9
 8012476:	4616      	mov	r6, r2
 8012478:	3201      	adds	r2, #1
 801247a:	7830      	ldrb	r0, [r6, #0]
 801247c:	f7ff ffb0 	bl	80123e0 <__hexdig_fun>
 8012480:	2800      	cmp	r0, #0
 8012482:	d1f8      	bne.n	8012476 <__gethex+0x6a>
 8012484:	498d      	ldr	r1, [pc, #564]	@ (80126bc <__gethex+0x2b0>)
 8012486:	2201      	movs	r2, #1
 8012488:	4630      	mov	r0, r6
 801248a:	f7ff fe0a 	bl	80120a2 <strncmp>
 801248e:	2800      	cmp	r0, #0
 8012490:	d13f      	bne.n	8012512 <__gethex+0x106>
 8012492:	b944      	cbnz	r4, 80124a6 <__gethex+0x9a>
 8012494:	1c74      	adds	r4, r6, #1
 8012496:	4622      	mov	r2, r4
 8012498:	4616      	mov	r6, r2
 801249a:	3201      	adds	r2, #1
 801249c:	7830      	ldrb	r0, [r6, #0]
 801249e:	f7ff ff9f 	bl	80123e0 <__hexdig_fun>
 80124a2:	2800      	cmp	r0, #0
 80124a4:	d1f8      	bne.n	8012498 <__gethex+0x8c>
 80124a6:	1ba4      	subs	r4, r4, r6
 80124a8:	00a7      	lsls	r7, r4, #2
 80124aa:	7833      	ldrb	r3, [r6, #0]
 80124ac:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80124b0:	2b50      	cmp	r3, #80	@ 0x50
 80124b2:	d13e      	bne.n	8012532 <__gethex+0x126>
 80124b4:	7873      	ldrb	r3, [r6, #1]
 80124b6:	2b2b      	cmp	r3, #43	@ 0x2b
 80124b8:	d033      	beq.n	8012522 <__gethex+0x116>
 80124ba:	2b2d      	cmp	r3, #45	@ 0x2d
 80124bc:	d034      	beq.n	8012528 <__gethex+0x11c>
 80124be:	1c71      	adds	r1, r6, #1
 80124c0:	2400      	movs	r4, #0
 80124c2:	7808      	ldrb	r0, [r1, #0]
 80124c4:	f7ff ff8c 	bl	80123e0 <__hexdig_fun>
 80124c8:	1e43      	subs	r3, r0, #1
 80124ca:	b2db      	uxtb	r3, r3
 80124cc:	2b18      	cmp	r3, #24
 80124ce:	d830      	bhi.n	8012532 <__gethex+0x126>
 80124d0:	f1a0 0210 	sub.w	r2, r0, #16
 80124d4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80124d8:	f7ff ff82 	bl	80123e0 <__hexdig_fun>
 80124dc:	f100 3cff 	add.w	ip, r0, #4294967295
 80124e0:	fa5f fc8c 	uxtb.w	ip, ip
 80124e4:	f1bc 0f18 	cmp.w	ip, #24
 80124e8:	f04f 030a 	mov.w	r3, #10
 80124ec:	d91e      	bls.n	801252c <__gethex+0x120>
 80124ee:	b104      	cbz	r4, 80124f2 <__gethex+0xe6>
 80124f0:	4252      	negs	r2, r2
 80124f2:	4417      	add	r7, r2
 80124f4:	f8ca 1000 	str.w	r1, [sl]
 80124f8:	b1ed      	cbz	r5, 8012536 <__gethex+0x12a>
 80124fa:	f1bb 0f00 	cmp.w	fp, #0
 80124fe:	bf0c      	ite	eq
 8012500:	2506      	moveq	r5, #6
 8012502:	2500      	movne	r5, #0
 8012504:	4628      	mov	r0, r5
 8012506:	b005      	add	sp, #20
 8012508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801250c:	2500      	movs	r5, #0
 801250e:	462c      	mov	r4, r5
 8012510:	e7b0      	b.n	8012474 <__gethex+0x68>
 8012512:	2c00      	cmp	r4, #0
 8012514:	d1c7      	bne.n	80124a6 <__gethex+0x9a>
 8012516:	4627      	mov	r7, r4
 8012518:	e7c7      	b.n	80124aa <__gethex+0x9e>
 801251a:	464e      	mov	r6, r9
 801251c:	462f      	mov	r7, r5
 801251e:	2501      	movs	r5, #1
 8012520:	e7c3      	b.n	80124aa <__gethex+0x9e>
 8012522:	2400      	movs	r4, #0
 8012524:	1cb1      	adds	r1, r6, #2
 8012526:	e7cc      	b.n	80124c2 <__gethex+0xb6>
 8012528:	2401      	movs	r4, #1
 801252a:	e7fb      	b.n	8012524 <__gethex+0x118>
 801252c:	fb03 0002 	mla	r0, r3, r2, r0
 8012530:	e7ce      	b.n	80124d0 <__gethex+0xc4>
 8012532:	4631      	mov	r1, r6
 8012534:	e7de      	b.n	80124f4 <__gethex+0xe8>
 8012536:	eba6 0309 	sub.w	r3, r6, r9
 801253a:	3b01      	subs	r3, #1
 801253c:	4629      	mov	r1, r5
 801253e:	2b07      	cmp	r3, #7
 8012540:	dc0a      	bgt.n	8012558 <__gethex+0x14c>
 8012542:	9801      	ldr	r0, [sp, #4]
 8012544:	f000 fa46 	bl	80129d4 <_Balloc>
 8012548:	4604      	mov	r4, r0
 801254a:	b940      	cbnz	r0, 801255e <__gethex+0x152>
 801254c:	4b5c      	ldr	r3, [pc, #368]	@ (80126c0 <__gethex+0x2b4>)
 801254e:	4602      	mov	r2, r0
 8012550:	21e4      	movs	r1, #228	@ 0xe4
 8012552:	485c      	ldr	r0, [pc, #368]	@ (80126c4 <__gethex+0x2b8>)
 8012554:	f001 fab0 	bl	8013ab8 <__assert_func>
 8012558:	3101      	adds	r1, #1
 801255a:	105b      	asrs	r3, r3, #1
 801255c:	e7ef      	b.n	801253e <__gethex+0x132>
 801255e:	f100 0a14 	add.w	sl, r0, #20
 8012562:	2300      	movs	r3, #0
 8012564:	4655      	mov	r5, sl
 8012566:	469b      	mov	fp, r3
 8012568:	45b1      	cmp	r9, r6
 801256a:	d337      	bcc.n	80125dc <__gethex+0x1d0>
 801256c:	f845 bb04 	str.w	fp, [r5], #4
 8012570:	eba5 050a 	sub.w	r5, r5, sl
 8012574:	10ad      	asrs	r5, r5, #2
 8012576:	6125      	str	r5, [r4, #16]
 8012578:	4658      	mov	r0, fp
 801257a:	f000 fb1d 	bl	8012bb8 <__hi0bits>
 801257e:	016d      	lsls	r5, r5, #5
 8012580:	f8d8 6000 	ldr.w	r6, [r8]
 8012584:	1a2d      	subs	r5, r5, r0
 8012586:	42b5      	cmp	r5, r6
 8012588:	dd54      	ble.n	8012634 <__gethex+0x228>
 801258a:	1bad      	subs	r5, r5, r6
 801258c:	4629      	mov	r1, r5
 801258e:	4620      	mov	r0, r4
 8012590:	f000 feb1 	bl	80132f6 <__any_on>
 8012594:	4681      	mov	r9, r0
 8012596:	b178      	cbz	r0, 80125b8 <__gethex+0x1ac>
 8012598:	1e6b      	subs	r3, r5, #1
 801259a:	1159      	asrs	r1, r3, #5
 801259c:	f003 021f 	and.w	r2, r3, #31
 80125a0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80125a4:	f04f 0901 	mov.w	r9, #1
 80125a8:	fa09 f202 	lsl.w	r2, r9, r2
 80125ac:	420a      	tst	r2, r1
 80125ae:	d003      	beq.n	80125b8 <__gethex+0x1ac>
 80125b0:	454b      	cmp	r3, r9
 80125b2:	dc36      	bgt.n	8012622 <__gethex+0x216>
 80125b4:	f04f 0902 	mov.w	r9, #2
 80125b8:	4629      	mov	r1, r5
 80125ba:	4620      	mov	r0, r4
 80125bc:	f7ff febe 	bl	801233c <rshift>
 80125c0:	442f      	add	r7, r5
 80125c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80125c6:	42bb      	cmp	r3, r7
 80125c8:	da42      	bge.n	8012650 <__gethex+0x244>
 80125ca:	9801      	ldr	r0, [sp, #4]
 80125cc:	4621      	mov	r1, r4
 80125ce:	f000 fa41 	bl	8012a54 <_Bfree>
 80125d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80125d4:	2300      	movs	r3, #0
 80125d6:	6013      	str	r3, [r2, #0]
 80125d8:	25a3      	movs	r5, #163	@ 0xa3
 80125da:	e793      	b.n	8012504 <__gethex+0xf8>
 80125dc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80125e0:	2a2e      	cmp	r2, #46	@ 0x2e
 80125e2:	d012      	beq.n	801260a <__gethex+0x1fe>
 80125e4:	2b20      	cmp	r3, #32
 80125e6:	d104      	bne.n	80125f2 <__gethex+0x1e6>
 80125e8:	f845 bb04 	str.w	fp, [r5], #4
 80125ec:	f04f 0b00 	mov.w	fp, #0
 80125f0:	465b      	mov	r3, fp
 80125f2:	7830      	ldrb	r0, [r6, #0]
 80125f4:	9303      	str	r3, [sp, #12]
 80125f6:	f7ff fef3 	bl	80123e0 <__hexdig_fun>
 80125fa:	9b03      	ldr	r3, [sp, #12]
 80125fc:	f000 000f 	and.w	r0, r0, #15
 8012600:	4098      	lsls	r0, r3
 8012602:	ea4b 0b00 	orr.w	fp, fp, r0
 8012606:	3304      	adds	r3, #4
 8012608:	e7ae      	b.n	8012568 <__gethex+0x15c>
 801260a:	45b1      	cmp	r9, r6
 801260c:	d8ea      	bhi.n	80125e4 <__gethex+0x1d8>
 801260e:	492b      	ldr	r1, [pc, #172]	@ (80126bc <__gethex+0x2b0>)
 8012610:	9303      	str	r3, [sp, #12]
 8012612:	2201      	movs	r2, #1
 8012614:	4630      	mov	r0, r6
 8012616:	f7ff fd44 	bl	80120a2 <strncmp>
 801261a:	9b03      	ldr	r3, [sp, #12]
 801261c:	2800      	cmp	r0, #0
 801261e:	d1e1      	bne.n	80125e4 <__gethex+0x1d8>
 8012620:	e7a2      	b.n	8012568 <__gethex+0x15c>
 8012622:	1ea9      	subs	r1, r5, #2
 8012624:	4620      	mov	r0, r4
 8012626:	f000 fe66 	bl	80132f6 <__any_on>
 801262a:	2800      	cmp	r0, #0
 801262c:	d0c2      	beq.n	80125b4 <__gethex+0x1a8>
 801262e:	f04f 0903 	mov.w	r9, #3
 8012632:	e7c1      	b.n	80125b8 <__gethex+0x1ac>
 8012634:	da09      	bge.n	801264a <__gethex+0x23e>
 8012636:	1b75      	subs	r5, r6, r5
 8012638:	4621      	mov	r1, r4
 801263a:	9801      	ldr	r0, [sp, #4]
 801263c:	462a      	mov	r2, r5
 801263e:	f000 fc21 	bl	8012e84 <__lshift>
 8012642:	1b7f      	subs	r7, r7, r5
 8012644:	4604      	mov	r4, r0
 8012646:	f100 0a14 	add.w	sl, r0, #20
 801264a:	f04f 0900 	mov.w	r9, #0
 801264e:	e7b8      	b.n	80125c2 <__gethex+0x1b6>
 8012650:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8012654:	42bd      	cmp	r5, r7
 8012656:	dd6f      	ble.n	8012738 <__gethex+0x32c>
 8012658:	1bed      	subs	r5, r5, r7
 801265a:	42ae      	cmp	r6, r5
 801265c:	dc34      	bgt.n	80126c8 <__gethex+0x2bc>
 801265e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012662:	2b02      	cmp	r3, #2
 8012664:	d022      	beq.n	80126ac <__gethex+0x2a0>
 8012666:	2b03      	cmp	r3, #3
 8012668:	d024      	beq.n	80126b4 <__gethex+0x2a8>
 801266a:	2b01      	cmp	r3, #1
 801266c:	d115      	bne.n	801269a <__gethex+0x28e>
 801266e:	42ae      	cmp	r6, r5
 8012670:	d113      	bne.n	801269a <__gethex+0x28e>
 8012672:	2e01      	cmp	r6, #1
 8012674:	d10b      	bne.n	801268e <__gethex+0x282>
 8012676:	9a02      	ldr	r2, [sp, #8]
 8012678:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801267c:	6013      	str	r3, [r2, #0]
 801267e:	2301      	movs	r3, #1
 8012680:	6123      	str	r3, [r4, #16]
 8012682:	f8ca 3000 	str.w	r3, [sl]
 8012686:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012688:	2562      	movs	r5, #98	@ 0x62
 801268a:	601c      	str	r4, [r3, #0]
 801268c:	e73a      	b.n	8012504 <__gethex+0xf8>
 801268e:	1e71      	subs	r1, r6, #1
 8012690:	4620      	mov	r0, r4
 8012692:	f000 fe30 	bl	80132f6 <__any_on>
 8012696:	2800      	cmp	r0, #0
 8012698:	d1ed      	bne.n	8012676 <__gethex+0x26a>
 801269a:	9801      	ldr	r0, [sp, #4]
 801269c:	4621      	mov	r1, r4
 801269e:	f000 f9d9 	bl	8012a54 <_Bfree>
 80126a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80126a4:	2300      	movs	r3, #0
 80126a6:	6013      	str	r3, [r2, #0]
 80126a8:	2550      	movs	r5, #80	@ 0x50
 80126aa:	e72b      	b.n	8012504 <__gethex+0xf8>
 80126ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d1f3      	bne.n	801269a <__gethex+0x28e>
 80126b2:	e7e0      	b.n	8012676 <__gethex+0x26a>
 80126b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d1dd      	bne.n	8012676 <__gethex+0x26a>
 80126ba:	e7ee      	b.n	801269a <__gethex+0x28e>
 80126bc:	080143b0 	.word	0x080143b0
 80126c0:	08014519 	.word	0x08014519
 80126c4:	0801452a 	.word	0x0801452a
 80126c8:	1e6f      	subs	r7, r5, #1
 80126ca:	f1b9 0f00 	cmp.w	r9, #0
 80126ce:	d130      	bne.n	8012732 <__gethex+0x326>
 80126d0:	b127      	cbz	r7, 80126dc <__gethex+0x2d0>
 80126d2:	4639      	mov	r1, r7
 80126d4:	4620      	mov	r0, r4
 80126d6:	f000 fe0e 	bl	80132f6 <__any_on>
 80126da:	4681      	mov	r9, r0
 80126dc:	117a      	asrs	r2, r7, #5
 80126de:	2301      	movs	r3, #1
 80126e0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80126e4:	f007 071f 	and.w	r7, r7, #31
 80126e8:	40bb      	lsls	r3, r7
 80126ea:	4213      	tst	r3, r2
 80126ec:	4629      	mov	r1, r5
 80126ee:	4620      	mov	r0, r4
 80126f0:	bf18      	it	ne
 80126f2:	f049 0902 	orrne.w	r9, r9, #2
 80126f6:	f7ff fe21 	bl	801233c <rshift>
 80126fa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80126fe:	1b76      	subs	r6, r6, r5
 8012700:	2502      	movs	r5, #2
 8012702:	f1b9 0f00 	cmp.w	r9, #0
 8012706:	d047      	beq.n	8012798 <__gethex+0x38c>
 8012708:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801270c:	2b02      	cmp	r3, #2
 801270e:	d015      	beq.n	801273c <__gethex+0x330>
 8012710:	2b03      	cmp	r3, #3
 8012712:	d017      	beq.n	8012744 <__gethex+0x338>
 8012714:	2b01      	cmp	r3, #1
 8012716:	d109      	bne.n	801272c <__gethex+0x320>
 8012718:	f019 0f02 	tst.w	r9, #2
 801271c:	d006      	beq.n	801272c <__gethex+0x320>
 801271e:	f8da 3000 	ldr.w	r3, [sl]
 8012722:	ea49 0903 	orr.w	r9, r9, r3
 8012726:	f019 0f01 	tst.w	r9, #1
 801272a:	d10e      	bne.n	801274a <__gethex+0x33e>
 801272c:	f045 0510 	orr.w	r5, r5, #16
 8012730:	e032      	b.n	8012798 <__gethex+0x38c>
 8012732:	f04f 0901 	mov.w	r9, #1
 8012736:	e7d1      	b.n	80126dc <__gethex+0x2d0>
 8012738:	2501      	movs	r5, #1
 801273a:	e7e2      	b.n	8012702 <__gethex+0x2f6>
 801273c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801273e:	f1c3 0301 	rsb	r3, r3, #1
 8012742:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012744:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012746:	2b00      	cmp	r3, #0
 8012748:	d0f0      	beq.n	801272c <__gethex+0x320>
 801274a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801274e:	f104 0314 	add.w	r3, r4, #20
 8012752:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8012756:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801275a:	f04f 0c00 	mov.w	ip, #0
 801275e:	4618      	mov	r0, r3
 8012760:	f853 2b04 	ldr.w	r2, [r3], #4
 8012764:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012768:	d01b      	beq.n	80127a2 <__gethex+0x396>
 801276a:	3201      	adds	r2, #1
 801276c:	6002      	str	r2, [r0, #0]
 801276e:	2d02      	cmp	r5, #2
 8012770:	f104 0314 	add.w	r3, r4, #20
 8012774:	d13c      	bne.n	80127f0 <__gethex+0x3e4>
 8012776:	f8d8 2000 	ldr.w	r2, [r8]
 801277a:	3a01      	subs	r2, #1
 801277c:	42b2      	cmp	r2, r6
 801277e:	d109      	bne.n	8012794 <__gethex+0x388>
 8012780:	1171      	asrs	r1, r6, #5
 8012782:	2201      	movs	r2, #1
 8012784:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012788:	f006 061f 	and.w	r6, r6, #31
 801278c:	fa02 f606 	lsl.w	r6, r2, r6
 8012790:	421e      	tst	r6, r3
 8012792:	d13a      	bne.n	801280a <__gethex+0x3fe>
 8012794:	f045 0520 	orr.w	r5, r5, #32
 8012798:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801279a:	601c      	str	r4, [r3, #0]
 801279c:	9b02      	ldr	r3, [sp, #8]
 801279e:	601f      	str	r7, [r3, #0]
 80127a0:	e6b0      	b.n	8012504 <__gethex+0xf8>
 80127a2:	4299      	cmp	r1, r3
 80127a4:	f843 cc04 	str.w	ip, [r3, #-4]
 80127a8:	d8d9      	bhi.n	801275e <__gethex+0x352>
 80127aa:	68a3      	ldr	r3, [r4, #8]
 80127ac:	459b      	cmp	fp, r3
 80127ae:	db17      	blt.n	80127e0 <__gethex+0x3d4>
 80127b0:	6861      	ldr	r1, [r4, #4]
 80127b2:	9801      	ldr	r0, [sp, #4]
 80127b4:	3101      	adds	r1, #1
 80127b6:	f000 f90d 	bl	80129d4 <_Balloc>
 80127ba:	4681      	mov	r9, r0
 80127bc:	b918      	cbnz	r0, 80127c6 <__gethex+0x3ba>
 80127be:	4b1a      	ldr	r3, [pc, #104]	@ (8012828 <__gethex+0x41c>)
 80127c0:	4602      	mov	r2, r0
 80127c2:	2184      	movs	r1, #132	@ 0x84
 80127c4:	e6c5      	b.n	8012552 <__gethex+0x146>
 80127c6:	6922      	ldr	r2, [r4, #16]
 80127c8:	3202      	adds	r2, #2
 80127ca:	f104 010c 	add.w	r1, r4, #12
 80127ce:	0092      	lsls	r2, r2, #2
 80127d0:	300c      	adds	r0, #12
 80127d2:	f7ff fd52 	bl	801227a <memcpy>
 80127d6:	4621      	mov	r1, r4
 80127d8:	9801      	ldr	r0, [sp, #4]
 80127da:	f000 f93b 	bl	8012a54 <_Bfree>
 80127de:	464c      	mov	r4, r9
 80127e0:	6923      	ldr	r3, [r4, #16]
 80127e2:	1c5a      	adds	r2, r3, #1
 80127e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80127e8:	6122      	str	r2, [r4, #16]
 80127ea:	2201      	movs	r2, #1
 80127ec:	615a      	str	r2, [r3, #20]
 80127ee:	e7be      	b.n	801276e <__gethex+0x362>
 80127f0:	6922      	ldr	r2, [r4, #16]
 80127f2:	455a      	cmp	r2, fp
 80127f4:	dd0b      	ble.n	801280e <__gethex+0x402>
 80127f6:	2101      	movs	r1, #1
 80127f8:	4620      	mov	r0, r4
 80127fa:	f7ff fd9f 	bl	801233c <rshift>
 80127fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012802:	3701      	adds	r7, #1
 8012804:	42bb      	cmp	r3, r7
 8012806:	f6ff aee0 	blt.w	80125ca <__gethex+0x1be>
 801280a:	2501      	movs	r5, #1
 801280c:	e7c2      	b.n	8012794 <__gethex+0x388>
 801280e:	f016 061f 	ands.w	r6, r6, #31
 8012812:	d0fa      	beq.n	801280a <__gethex+0x3fe>
 8012814:	4453      	add	r3, sl
 8012816:	f1c6 0620 	rsb	r6, r6, #32
 801281a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801281e:	f000 f9cb 	bl	8012bb8 <__hi0bits>
 8012822:	42b0      	cmp	r0, r6
 8012824:	dbe7      	blt.n	80127f6 <__gethex+0x3ea>
 8012826:	e7f0      	b.n	801280a <__gethex+0x3fe>
 8012828:	08014519 	.word	0x08014519

0801282c <L_shift>:
 801282c:	f1c2 0208 	rsb	r2, r2, #8
 8012830:	0092      	lsls	r2, r2, #2
 8012832:	b570      	push	{r4, r5, r6, lr}
 8012834:	f1c2 0620 	rsb	r6, r2, #32
 8012838:	6843      	ldr	r3, [r0, #4]
 801283a:	6804      	ldr	r4, [r0, #0]
 801283c:	fa03 f506 	lsl.w	r5, r3, r6
 8012840:	432c      	orrs	r4, r5
 8012842:	40d3      	lsrs	r3, r2
 8012844:	6004      	str	r4, [r0, #0]
 8012846:	f840 3f04 	str.w	r3, [r0, #4]!
 801284a:	4288      	cmp	r0, r1
 801284c:	d3f4      	bcc.n	8012838 <L_shift+0xc>
 801284e:	bd70      	pop	{r4, r5, r6, pc}

08012850 <__match>:
 8012850:	b530      	push	{r4, r5, lr}
 8012852:	6803      	ldr	r3, [r0, #0]
 8012854:	3301      	adds	r3, #1
 8012856:	f811 4b01 	ldrb.w	r4, [r1], #1
 801285a:	b914      	cbnz	r4, 8012862 <__match+0x12>
 801285c:	6003      	str	r3, [r0, #0]
 801285e:	2001      	movs	r0, #1
 8012860:	bd30      	pop	{r4, r5, pc}
 8012862:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012866:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801286a:	2d19      	cmp	r5, #25
 801286c:	bf98      	it	ls
 801286e:	3220      	addls	r2, #32
 8012870:	42a2      	cmp	r2, r4
 8012872:	d0f0      	beq.n	8012856 <__match+0x6>
 8012874:	2000      	movs	r0, #0
 8012876:	e7f3      	b.n	8012860 <__match+0x10>

08012878 <__hexnan>:
 8012878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801287c:	680b      	ldr	r3, [r1, #0]
 801287e:	6801      	ldr	r1, [r0, #0]
 8012880:	115e      	asrs	r6, r3, #5
 8012882:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012886:	f013 031f 	ands.w	r3, r3, #31
 801288a:	b087      	sub	sp, #28
 801288c:	bf18      	it	ne
 801288e:	3604      	addne	r6, #4
 8012890:	2500      	movs	r5, #0
 8012892:	1f37      	subs	r7, r6, #4
 8012894:	4682      	mov	sl, r0
 8012896:	4690      	mov	r8, r2
 8012898:	9301      	str	r3, [sp, #4]
 801289a:	f846 5c04 	str.w	r5, [r6, #-4]
 801289e:	46b9      	mov	r9, r7
 80128a0:	463c      	mov	r4, r7
 80128a2:	9502      	str	r5, [sp, #8]
 80128a4:	46ab      	mov	fp, r5
 80128a6:	784a      	ldrb	r2, [r1, #1]
 80128a8:	1c4b      	adds	r3, r1, #1
 80128aa:	9303      	str	r3, [sp, #12]
 80128ac:	b342      	cbz	r2, 8012900 <__hexnan+0x88>
 80128ae:	4610      	mov	r0, r2
 80128b0:	9105      	str	r1, [sp, #20]
 80128b2:	9204      	str	r2, [sp, #16]
 80128b4:	f7ff fd94 	bl	80123e0 <__hexdig_fun>
 80128b8:	2800      	cmp	r0, #0
 80128ba:	d151      	bne.n	8012960 <__hexnan+0xe8>
 80128bc:	9a04      	ldr	r2, [sp, #16]
 80128be:	9905      	ldr	r1, [sp, #20]
 80128c0:	2a20      	cmp	r2, #32
 80128c2:	d818      	bhi.n	80128f6 <__hexnan+0x7e>
 80128c4:	9b02      	ldr	r3, [sp, #8]
 80128c6:	459b      	cmp	fp, r3
 80128c8:	dd13      	ble.n	80128f2 <__hexnan+0x7a>
 80128ca:	454c      	cmp	r4, r9
 80128cc:	d206      	bcs.n	80128dc <__hexnan+0x64>
 80128ce:	2d07      	cmp	r5, #7
 80128d0:	dc04      	bgt.n	80128dc <__hexnan+0x64>
 80128d2:	462a      	mov	r2, r5
 80128d4:	4649      	mov	r1, r9
 80128d6:	4620      	mov	r0, r4
 80128d8:	f7ff ffa8 	bl	801282c <L_shift>
 80128dc:	4544      	cmp	r4, r8
 80128de:	d952      	bls.n	8012986 <__hexnan+0x10e>
 80128e0:	2300      	movs	r3, #0
 80128e2:	f1a4 0904 	sub.w	r9, r4, #4
 80128e6:	f844 3c04 	str.w	r3, [r4, #-4]
 80128ea:	f8cd b008 	str.w	fp, [sp, #8]
 80128ee:	464c      	mov	r4, r9
 80128f0:	461d      	mov	r5, r3
 80128f2:	9903      	ldr	r1, [sp, #12]
 80128f4:	e7d7      	b.n	80128a6 <__hexnan+0x2e>
 80128f6:	2a29      	cmp	r2, #41	@ 0x29
 80128f8:	d157      	bne.n	80129aa <__hexnan+0x132>
 80128fa:	3102      	adds	r1, #2
 80128fc:	f8ca 1000 	str.w	r1, [sl]
 8012900:	f1bb 0f00 	cmp.w	fp, #0
 8012904:	d051      	beq.n	80129aa <__hexnan+0x132>
 8012906:	454c      	cmp	r4, r9
 8012908:	d206      	bcs.n	8012918 <__hexnan+0xa0>
 801290a:	2d07      	cmp	r5, #7
 801290c:	dc04      	bgt.n	8012918 <__hexnan+0xa0>
 801290e:	462a      	mov	r2, r5
 8012910:	4649      	mov	r1, r9
 8012912:	4620      	mov	r0, r4
 8012914:	f7ff ff8a 	bl	801282c <L_shift>
 8012918:	4544      	cmp	r4, r8
 801291a:	d936      	bls.n	801298a <__hexnan+0x112>
 801291c:	f1a8 0204 	sub.w	r2, r8, #4
 8012920:	4623      	mov	r3, r4
 8012922:	f853 1b04 	ldr.w	r1, [r3], #4
 8012926:	f842 1f04 	str.w	r1, [r2, #4]!
 801292a:	429f      	cmp	r7, r3
 801292c:	d2f9      	bcs.n	8012922 <__hexnan+0xaa>
 801292e:	1b3b      	subs	r3, r7, r4
 8012930:	f023 0303 	bic.w	r3, r3, #3
 8012934:	3304      	adds	r3, #4
 8012936:	3401      	adds	r4, #1
 8012938:	3e03      	subs	r6, #3
 801293a:	42b4      	cmp	r4, r6
 801293c:	bf88      	it	hi
 801293e:	2304      	movhi	r3, #4
 8012940:	4443      	add	r3, r8
 8012942:	2200      	movs	r2, #0
 8012944:	f843 2b04 	str.w	r2, [r3], #4
 8012948:	429f      	cmp	r7, r3
 801294a:	d2fb      	bcs.n	8012944 <__hexnan+0xcc>
 801294c:	683b      	ldr	r3, [r7, #0]
 801294e:	b91b      	cbnz	r3, 8012958 <__hexnan+0xe0>
 8012950:	4547      	cmp	r7, r8
 8012952:	d128      	bne.n	80129a6 <__hexnan+0x12e>
 8012954:	2301      	movs	r3, #1
 8012956:	603b      	str	r3, [r7, #0]
 8012958:	2005      	movs	r0, #5
 801295a:	b007      	add	sp, #28
 801295c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012960:	3501      	adds	r5, #1
 8012962:	2d08      	cmp	r5, #8
 8012964:	f10b 0b01 	add.w	fp, fp, #1
 8012968:	dd06      	ble.n	8012978 <__hexnan+0x100>
 801296a:	4544      	cmp	r4, r8
 801296c:	d9c1      	bls.n	80128f2 <__hexnan+0x7a>
 801296e:	2300      	movs	r3, #0
 8012970:	f844 3c04 	str.w	r3, [r4, #-4]
 8012974:	2501      	movs	r5, #1
 8012976:	3c04      	subs	r4, #4
 8012978:	6822      	ldr	r2, [r4, #0]
 801297a:	f000 000f 	and.w	r0, r0, #15
 801297e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8012982:	6020      	str	r0, [r4, #0]
 8012984:	e7b5      	b.n	80128f2 <__hexnan+0x7a>
 8012986:	2508      	movs	r5, #8
 8012988:	e7b3      	b.n	80128f2 <__hexnan+0x7a>
 801298a:	9b01      	ldr	r3, [sp, #4]
 801298c:	2b00      	cmp	r3, #0
 801298e:	d0dd      	beq.n	801294c <__hexnan+0xd4>
 8012990:	f1c3 0320 	rsb	r3, r3, #32
 8012994:	f04f 32ff 	mov.w	r2, #4294967295
 8012998:	40da      	lsrs	r2, r3
 801299a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801299e:	4013      	ands	r3, r2
 80129a0:	f846 3c04 	str.w	r3, [r6, #-4]
 80129a4:	e7d2      	b.n	801294c <__hexnan+0xd4>
 80129a6:	3f04      	subs	r7, #4
 80129a8:	e7d0      	b.n	801294c <__hexnan+0xd4>
 80129aa:	2004      	movs	r0, #4
 80129ac:	e7d5      	b.n	801295a <__hexnan+0xe2>

080129ae <__ascii_mbtowc>:
 80129ae:	b082      	sub	sp, #8
 80129b0:	b901      	cbnz	r1, 80129b4 <__ascii_mbtowc+0x6>
 80129b2:	a901      	add	r1, sp, #4
 80129b4:	b142      	cbz	r2, 80129c8 <__ascii_mbtowc+0x1a>
 80129b6:	b14b      	cbz	r3, 80129cc <__ascii_mbtowc+0x1e>
 80129b8:	7813      	ldrb	r3, [r2, #0]
 80129ba:	600b      	str	r3, [r1, #0]
 80129bc:	7812      	ldrb	r2, [r2, #0]
 80129be:	1e10      	subs	r0, r2, #0
 80129c0:	bf18      	it	ne
 80129c2:	2001      	movne	r0, #1
 80129c4:	b002      	add	sp, #8
 80129c6:	4770      	bx	lr
 80129c8:	4610      	mov	r0, r2
 80129ca:	e7fb      	b.n	80129c4 <__ascii_mbtowc+0x16>
 80129cc:	f06f 0001 	mvn.w	r0, #1
 80129d0:	e7f8      	b.n	80129c4 <__ascii_mbtowc+0x16>
	...

080129d4 <_Balloc>:
 80129d4:	b570      	push	{r4, r5, r6, lr}
 80129d6:	69c6      	ldr	r6, [r0, #28]
 80129d8:	4604      	mov	r4, r0
 80129da:	460d      	mov	r5, r1
 80129dc:	b976      	cbnz	r6, 80129fc <_Balloc+0x28>
 80129de:	2010      	movs	r0, #16
 80129e0:	f7fe fb1a 	bl	8011018 <malloc>
 80129e4:	4602      	mov	r2, r0
 80129e6:	61e0      	str	r0, [r4, #28]
 80129e8:	b920      	cbnz	r0, 80129f4 <_Balloc+0x20>
 80129ea:	4b18      	ldr	r3, [pc, #96]	@ (8012a4c <_Balloc+0x78>)
 80129ec:	4818      	ldr	r0, [pc, #96]	@ (8012a50 <_Balloc+0x7c>)
 80129ee:	216b      	movs	r1, #107	@ 0x6b
 80129f0:	f001 f862 	bl	8013ab8 <__assert_func>
 80129f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80129f8:	6006      	str	r6, [r0, #0]
 80129fa:	60c6      	str	r6, [r0, #12]
 80129fc:	69e6      	ldr	r6, [r4, #28]
 80129fe:	68f3      	ldr	r3, [r6, #12]
 8012a00:	b183      	cbz	r3, 8012a24 <_Balloc+0x50>
 8012a02:	69e3      	ldr	r3, [r4, #28]
 8012a04:	68db      	ldr	r3, [r3, #12]
 8012a06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012a0a:	b9b8      	cbnz	r0, 8012a3c <_Balloc+0x68>
 8012a0c:	2101      	movs	r1, #1
 8012a0e:	fa01 f605 	lsl.w	r6, r1, r5
 8012a12:	1d72      	adds	r2, r6, #5
 8012a14:	0092      	lsls	r2, r2, #2
 8012a16:	4620      	mov	r0, r4
 8012a18:	f001 f86c 	bl	8013af4 <_calloc_r>
 8012a1c:	b160      	cbz	r0, 8012a38 <_Balloc+0x64>
 8012a1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012a22:	e00e      	b.n	8012a42 <_Balloc+0x6e>
 8012a24:	2221      	movs	r2, #33	@ 0x21
 8012a26:	2104      	movs	r1, #4
 8012a28:	4620      	mov	r0, r4
 8012a2a:	f001 f863 	bl	8013af4 <_calloc_r>
 8012a2e:	69e3      	ldr	r3, [r4, #28]
 8012a30:	60f0      	str	r0, [r6, #12]
 8012a32:	68db      	ldr	r3, [r3, #12]
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d1e4      	bne.n	8012a02 <_Balloc+0x2e>
 8012a38:	2000      	movs	r0, #0
 8012a3a:	bd70      	pop	{r4, r5, r6, pc}
 8012a3c:	6802      	ldr	r2, [r0, #0]
 8012a3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012a42:	2300      	movs	r3, #0
 8012a44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012a48:	e7f7      	b.n	8012a3a <_Balloc+0x66>
 8012a4a:	bf00      	nop
 8012a4c:	0801458a 	.word	0x0801458a
 8012a50:	080145a1 	.word	0x080145a1

08012a54 <_Bfree>:
 8012a54:	b570      	push	{r4, r5, r6, lr}
 8012a56:	69c6      	ldr	r6, [r0, #28]
 8012a58:	4605      	mov	r5, r0
 8012a5a:	460c      	mov	r4, r1
 8012a5c:	b976      	cbnz	r6, 8012a7c <_Bfree+0x28>
 8012a5e:	2010      	movs	r0, #16
 8012a60:	f7fe fada 	bl	8011018 <malloc>
 8012a64:	4602      	mov	r2, r0
 8012a66:	61e8      	str	r0, [r5, #28]
 8012a68:	b920      	cbnz	r0, 8012a74 <_Bfree+0x20>
 8012a6a:	4b09      	ldr	r3, [pc, #36]	@ (8012a90 <_Bfree+0x3c>)
 8012a6c:	4809      	ldr	r0, [pc, #36]	@ (8012a94 <_Bfree+0x40>)
 8012a6e:	218f      	movs	r1, #143	@ 0x8f
 8012a70:	f001 f822 	bl	8013ab8 <__assert_func>
 8012a74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012a78:	6006      	str	r6, [r0, #0]
 8012a7a:	60c6      	str	r6, [r0, #12]
 8012a7c:	b13c      	cbz	r4, 8012a8e <_Bfree+0x3a>
 8012a7e:	69eb      	ldr	r3, [r5, #28]
 8012a80:	6862      	ldr	r2, [r4, #4]
 8012a82:	68db      	ldr	r3, [r3, #12]
 8012a84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012a88:	6021      	str	r1, [r4, #0]
 8012a8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012a8e:	bd70      	pop	{r4, r5, r6, pc}
 8012a90:	0801458a 	.word	0x0801458a
 8012a94:	080145a1 	.word	0x080145a1

08012a98 <__multadd>:
 8012a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a9c:	690d      	ldr	r5, [r1, #16]
 8012a9e:	4607      	mov	r7, r0
 8012aa0:	460c      	mov	r4, r1
 8012aa2:	461e      	mov	r6, r3
 8012aa4:	f101 0c14 	add.w	ip, r1, #20
 8012aa8:	2000      	movs	r0, #0
 8012aaa:	f8dc 3000 	ldr.w	r3, [ip]
 8012aae:	b299      	uxth	r1, r3
 8012ab0:	fb02 6101 	mla	r1, r2, r1, r6
 8012ab4:	0c1e      	lsrs	r6, r3, #16
 8012ab6:	0c0b      	lsrs	r3, r1, #16
 8012ab8:	fb02 3306 	mla	r3, r2, r6, r3
 8012abc:	b289      	uxth	r1, r1
 8012abe:	3001      	adds	r0, #1
 8012ac0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012ac4:	4285      	cmp	r5, r0
 8012ac6:	f84c 1b04 	str.w	r1, [ip], #4
 8012aca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012ace:	dcec      	bgt.n	8012aaa <__multadd+0x12>
 8012ad0:	b30e      	cbz	r6, 8012b16 <__multadd+0x7e>
 8012ad2:	68a3      	ldr	r3, [r4, #8]
 8012ad4:	42ab      	cmp	r3, r5
 8012ad6:	dc19      	bgt.n	8012b0c <__multadd+0x74>
 8012ad8:	6861      	ldr	r1, [r4, #4]
 8012ada:	4638      	mov	r0, r7
 8012adc:	3101      	adds	r1, #1
 8012ade:	f7ff ff79 	bl	80129d4 <_Balloc>
 8012ae2:	4680      	mov	r8, r0
 8012ae4:	b928      	cbnz	r0, 8012af2 <__multadd+0x5a>
 8012ae6:	4602      	mov	r2, r0
 8012ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8012b1c <__multadd+0x84>)
 8012aea:	480d      	ldr	r0, [pc, #52]	@ (8012b20 <__multadd+0x88>)
 8012aec:	21ba      	movs	r1, #186	@ 0xba
 8012aee:	f000 ffe3 	bl	8013ab8 <__assert_func>
 8012af2:	6922      	ldr	r2, [r4, #16]
 8012af4:	3202      	adds	r2, #2
 8012af6:	f104 010c 	add.w	r1, r4, #12
 8012afa:	0092      	lsls	r2, r2, #2
 8012afc:	300c      	adds	r0, #12
 8012afe:	f7ff fbbc 	bl	801227a <memcpy>
 8012b02:	4621      	mov	r1, r4
 8012b04:	4638      	mov	r0, r7
 8012b06:	f7ff ffa5 	bl	8012a54 <_Bfree>
 8012b0a:	4644      	mov	r4, r8
 8012b0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012b10:	3501      	adds	r5, #1
 8012b12:	615e      	str	r6, [r3, #20]
 8012b14:	6125      	str	r5, [r4, #16]
 8012b16:	4620      	mov	r0, r4
 8012b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b1c:	08014519 	.word	0x08014519
 8012b20:	080145a1 	.word	0x080145a1

08012b24 <__s2b>:
 8012b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012b28:	460c      	mov	r4, r1
 8012b2a:	4615      	mov	r5, r2
 8012b2c:	461f      	mov	r7, r3
 8012b2e:	2209      	movs	r2, #9
 8012b30:	3308      	adds	r3, #8
 8012b32:	4606      	mov	r6, r0
 8012b34:	fb93 f3f2 	sdiv	r3, r3, r2
 8012b38:	2100      	movs	r1, #0
 8012b3a:	2201      	movs	r2, #1
 8012b3c:	429a      	cmp	r2, r3
 8012b3e:	db09      	blt.n	8012b54 <__s2b+0x30>
 8012b40:	4630      	mov	r0, r6
 8012b42:	f7ff ff47 	bl	80129d4 <_Balloc>
 8012b46:	b940      	cbnz	r0, 8012b5a <__s2b+0x36>
 8012b48:	4602      	mov	r2, r0
 8012b4a:	4b19      	ldr	r3, [pc, #100]	@ (8012bb0 <__s2b+0x8c>)
 8012b4c:	4819      	ldr	r0, [pc, #100]	@ (8012bb4 <__s2b+0x90>)
 8012b4e:	21d3      	movs	r1, #211	@ 0xd3
 8012b50:	f000 ffb2 	bl	8013ab8 <__assert_func>
 8012b54:	0052      	lsls	r2, r2, #1
 8012b56:	3101      	adds	r1, #1
 8012b58:	e7f0      	b.n	8012b3c <__s2b+0x18>
 8012b5a:	9b08      	ldr	r3, [sp, #32]
 8012b5c:	6143      	str	r3, [r0, #20]
 8012b5e:	2d09      	cmp	r5, #9
 8012b60:	f04f 0301 	mov.w	r3, #1
 8012b64:	6103      	str	r3, [r0, #16]
 8012b66:	dd16      	ble.n	8012b96 <__s2b+0x72>
 8012b68:	f104 0909 	add.w	r9, r4, #9
 8012b6c:	46c8      	mov	r8, r9
 8012b6e:	442c      	add	r4, r5
 8012b70:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012b74:	4601      	mov	r1, r0
 8012b76:	3b30      	subs	r3, #48	@ 0x30
 8012b78:	220a      	movs	r2, #10
 8012b7a:	4630      	mov	r0, r6
 8012b7c:	f7ff ff8c 	bl	8012a98 <__multadd>
 8012b80:	45a0      	cmp	r8, r4
 8012b82:	d1f5      	bne.n	8012b70 <__s2b+0x4c>
 8012b84:	f1a5 0408 	sub.w	r4, r5, #8
 8012b88:	444c      	add	r4, r9
 8012b8a:	1b2d      	subs	r5, r5, r4
 8012b8c:	1963      	adds	r3, r4, r5
 8012b8e:	42bb      	cmp	r3, r7
 8012b90:	db04      	blt.n	8012b9c <__s2b+0x78>
 8012b92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b96:	340a      	adds	r4, #10
 8012b98:	2509      	movs	r5, #9
 8012b9a:	e7f6      	b.n	8012b8a <__s2b+0x66>
 8012b9c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012ba0:	4601      	mov	r1, r0
 8012ba2:	3b30      	subs	r3, #48	@ 0x30
 8012ba4:	220a      	movs	r2, #10
 8012ba6:	4630      	mov	r0, r6
 8012ba8:	f7ff ff76 	bl	8012a98 <__multadd>
 8012bac:	e7ee      	b.n	8012b8c <__s2b+0x68>
 8012bae:	bf00      	nop
 8012bb0:	08014519 	.word	0x08014519
 8012bb4:	080145a1 	.word	0x080145a1

08012bb8 <__hi0bits>:
 8012bb8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8012bbc:	4603      	mov	r3, r0
 8012bbe:	bf36      	itet	cc
 8012bc0:	0403      	lslcc	r3, r0, #16
 8012bc2:	2000      	movcs	r0, #0
 8012bc4:	2010      	movcc	r0, #16
 8012bc6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012bca:	bf3c      	itt	cc
 8012bcc:	021b      	lslcc	r3, r3, #8
 8012bce:	3008      	addcc	r0, #8
 8012bd0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012bd4:	bf3c      	itt	cc
 8012bd6:	011b      	lslcc	r3, r3, #4
 8012bd8:	3004      	addcc	r0, #4
 8012bda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012bde:	bf3c      	itt	cc
 8012be0:	009b      	lslcc	r3, r3, #2
 8012be2:	3002      	addcc	r0, #2
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	db05      	blt.n	8012bf4 <__hi0bits+0x3c>
 8012be8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8012bec:	f100 0001 	add.w	r0, r0, #1
 8012bf0:	bf08      	it	eq
 8012bf2:	2020      	moveq	r0, #32
 8012bf4:	4770      	bx	lr

08012bf6 <__lo0bits>:
 8012bf6:	6803      	ldr	r3, [r0, #0]
 8012bf8:	4602      	mov	r2, r0
 8012bfa:	f013 0007 	ands.w	r0, r3, #7
 8012bfe:	d00b      	beq.n	8012c18 <__lo0bits+0x22>
 8012c00:	07d9      	lsls	r1, r3, #31
 8012c02:	d421      	bmi.n	8012c48 <__lo0bits+0x52>
 8012c04:	0798      	lsls	r0, r3, #30
 8012c06:	bf49      	itett	mi
 8012c08:	085b      	lsrmi	r3, r3, #1
 8012c0a:	089b      	lsrpl	r3, r3, #2
 8012c0c:	2001      	movmi	r0, #1
 8012c0e:	6013      	strmi	r3, [r2, #0]
 8012c10:	bf5c      	itt	pl
 8012c12:	6013      	strpl	r3, [r2, #0]
 8012c14:	2002      	movpl	r0, #2
 8012c16:	4770      	bx	lr
 8012c18:	b299      	uxth	r1, r3
 8012c1a:	b909      	cbnz	r1, 8012c20 <__lo0bits+0x2a>
 8012c1c:	0c1b      	lsrs	r3, r3, #16
 8012c1e:	2010      	movs	r0, #16
 8012c20:	b2d9      	uxtb	r1, r3
 8012c22:	b909      	cbnz	r1, 8012c28 <__lo0bits+0x32>
 8012c24:	3008      	adds	r0, #8
 8012c26:	0a1b      	lsrs	r3, r3, #8
 8012c28:	0719      	lsls	r1, r3, #28
 8012c2a:	bf04      	itt	eq
 8012c2c:	091b      	lsreq	r3, r3, #4
 8012c2e:	3004      	addeq	r0, #4
 8012c30:	0799      	lsls	r1, r3, #30
 8012c32:	bf04      	itt	eq
 8012c34:	089b      	lsreq	r3, r3, #2
 8012c36:	3002      	addeq	r0, #2
 8012c38:	07d9      	lsls	r1, r3, #31
 8012c3a:	d403      	bmi.n	8012c44 <__lo0bits+0x4e>
 8012c3c:	085b      	lsrs	r3, r3, #1
 8012c3e:	f100 0001 	add.w	r0, r0, #1
 8012c42:	d003      	beq.n	8012c4c <__lo0bits+0x56>
 8012c44:	6013      	str	r3, [r2, #0]
 8012c46:	4770      	bx	lr
 8012c48:	2000      	movs	r0, #0
 8012c4a:	4770      	bx	lr
 8012c4c:	2020      	movs	r0, #32
 8012c4e:	4770      	bx	lr

08012c50 <__i2b>:
 8012c50:	b510      	push	{r4, lr}
 8012c52:	460c      	mov	r4, r1
 8012c54:	2101      	movs	r1, #1
 8012c56:	f7ff febd 	bl	80129d4 <_Balloc>
 8012c5a:	4602      	mov	r2, r0
 8012c5c:	b928      	cbnz	r0, 8012c6a <__i2b+0x1a>
 8012c5e:	4b05      	ldr	r3, [pc, #20]	@ (8012c74 <__i2b+0x24>)
 8012c60:	4805      	ldr	r0, [pc, #20]	@ (8012c78 <__i2b+0x28>)
 8012c62:	f240 1145 	movw	r1, #325	@ 0x145
 8012c66:	f000 ff27 	bl	8013ab8 <__assert_func>
 8012c6a:	2301      	movs	r3, #1
 8012c6c:	6144      	str	r4, [r0, #20]
 8012c6e:	6103      	str	r3, [r0, #16]
 8012c70:	bd10      	pop	{r4, pc}
 8012c72:	bf00      	nop
 8012c74:	08014519 	.word	0x08014519
 8012c78:	080145a1 	.word	0x080145a1

08012c7c <__multiply>:
 8012c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c80:	4614      	mov	r4, r2
 8012c82:	690a      	ldr	r2, [r1, #16]
 8012c84:	6923      	ldr	r3, [r4, #16]
 8012c86:	429a      	cmp	r2, r3
 8012c88:	bfa8      	it	ge
 8012c8a:	4623      	movge	r3, r4
 8012c8c:	460f      	mov	r7, r1
 8012c8e:	bfa4      	itt	ge
 8012c90:	460c      	movge	r4, r1
 8012c92:	461f      	movge	r7, r3
 8012c94:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8012c98:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8012c9c:	68a3      	ldr	r3, [r4, #8]
 8012c9e:	6861      	ldr	r1, [r4, #4]
 8012ca0:	eb0a 0609 	add.w	r6, sl, r9
 8012ca4:	42b3      	cmp	r3, r6
 8012ca6:	b085      	sub	sp, #20
 8012ca8:	bfb8      	it	lt
 8012caa:	3101      	addlt	r1, #1
 8012cac:	f7ff fe92 	bl	80129d4 <_Balloc>
 8012cb0:	b930      	cbnz	r0, 8012cc0 <__multiply+0x44>
 8012cb2:	4602      	mov	r2, r0
 8012cb4:	4b44      	ldr	r3, [pc, #272]	@ (8012dc8 <__multiply+0x14c>)
 8012cb6:	4845      	ldr	r0, [pc, #276]	@ (8012dcc <__multiply+0x150>)
 8012cb8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012cbc:	f000 fefc 	bl	8013ab8 <__assert_func>
 8012cc0:	f100 0514 	add.w	r5, r0, #20
 8012cc4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012cc8:	462b      	mov	r3, r5
 8012cca:	2200      	movs	r2, #0
 8012ccc:	4543      	cmp	r3, r8
 8012cce:	d321      	bcc.n	8012d14 <__multiply+0x98>
 8012cd0:	f107 0114 	add.w	r1, r7, #20
 8012cd4:	f104 0214 	add.w	r2, r4, #20
 8012cd8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8012cdc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8012ce0:	9302      	str	r3, [sp, #8]
 8012ce2:	1b13      	subs	r3, r2, r4
 8012ce4:	3b15      	subs	r3, #21
 8012ce6:	f023 0303 	bic.w	r3, r3, #3
 8012cea:	3304      	adds	r3, #4
 8012cec:	f104 0715 	add.w	r7, r4, #21
 8012cf0:	42ba      	cmp	r2, r7
 8012cf2:	bf38      	it	cc
 8012cf4:	2304      	movcc	r3, #4
 8012cf6:	9301      	str	r3, [sp, #4]
 8012cf8:	9b02      	ldr	r3, [sp, #8]
 8012cfa:	9103      	str	r1, [sp, #12]
 8012cfc:	428b      	cmp	r3, r1
 8012cfe:	d80c      	bhi.n	8012d1a <__multiply+0x9e>
 8012d00:	2e00      	cmp	r6, #0
 8012d02:	dd03      	ble.n	8012d0c <__multiply+0x90>
 8012d04:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d05b      	beq.n	8012dc4 <__multiply+0x148>
 8012d0c:	6106      	str	r6, [r0, #16]
 8012d0e:	b005      	add	sp, #20
 8012d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d14:	f843 2b04 	str.w	r2, [r3], #4
 8012d18:	e7d8      	b.n	8012ccc <__multiply+0x50>
 8012d1a:	f8b1 a000 	ldrh.w	sl, [r1]
 8012d1e:	f1ba 0f00 	cmp.w	sl, #0
 8012d22:	d024      	beq.n	8012d6e <__multiply+0xf2>
 8012d24:	f104 0e14 	add.w	lr, r4, #20
 8012d28:	46a9      	mov	r9, r5
 8012d2a:	f04f 0c00 	mov.w	ip, #0
 8012d2e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012d32:	f8d9 3000 	ldr.w	r3, [r9]
 8012d36:	fa1f fb87 	uxth.w	fp, r7
 8012d3a:	b29b      	uxth	r3, r3
 8012d3c:	fb0a 330b 	mla	r3, sl, fp, r3
 8012d40:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8012d44:	f8d9 7000 	ldr.w	r7, [r9]
 8012d48:	4463      	add	r3, ip
 8012d4a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012d4e:	fb0a c70b 	mla	r7, sl, fp, ip
 8012d52:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8012d56:	b29b      	uxth	r3, r3
 8012d58:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012d5c:	4572      	cmp	r2, lr
 8012d5e:	f849 3b04 	str.w	r3, [r9], #4
 8012d62:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012d66:	d8e2      	bhi.n	8012d2e <__multiply+0xb2>
 8012d68:	9b01      	ldr	r3, [sp, #4]
 8012d6a:	f845 c003 	str.w	ip, [r5, r3]
 8012d6e:	9b03      	ldr	r3, [sp, #12]
 8012d70:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8012d74:	3104      	adds	r1, #4
 8012d76:	f1b9 0f00 	cmp.w	r9, #0
 8012d7a:	d021      	beq.n	8012dc0 <__multiply+0x144>
 8012d7c:	682b      	ldr	r3, [r5, #0]
 8012d7e:	f104 0c14 	add.w	ip, r4, #20
 8012d82:	46ae      	mov	lr, r5
 8012d84:	f04f 0a00 	mov.w	sl, #0
 8012d88:	f8bc b000 	ldrh.w	fp, [ip]
 8012d8c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8012d90:	fb09 770b 	mla	r7, r9, fp, r7
 8012d94:	4457      	add	r7, sl
 8012d96:	b29b      	uxth	r3, r3
 8012d98:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012d9c:	f84e 3b04 	str.w	r3, [lr], #4
 8012da0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012da4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012da8:	f8be 3000 	ldrh.w	r3, [lr]
 8012dac:	fb09 330a 	mla	r3, r9, sl, r3
 8012db0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8012db4:	4562      	cmp	r2, ip
 8012db6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012dba:	d8e5      	bhi.n	8012d88 <__multiply+0x10c>
 8012dbc:	9f01      	ldr	r7, [sp, #4]
 8012dbe:	51eb      	str	r3, [r5, r7]
 8012dc0:	3504      	adds	r5, #4
 8012dc2:	e799      	b.n	8012cf8 <__multiply+0x7c>
 8012dc4:	3e01      	subs	r6, #1
 8012dc6:	e79b      	b.n	8012d00 <__multiply+0x84>
 8012dc8:	08014519 	.word	0x08014519
 8012dcc:	080145a1 	.word	0x080145a1

08012dd0 <__pow5mult>:
 8012dd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012dd4:	4615      	mov	r5, r2
 8012dd6:	f012 0203 	ands.w	r2, r2, #3
 8012dda:	4607      	mov	r7, r0
 8012ddc:	460e      	mov	r6, r1
 8012dde:	d007      	beq.n	8012df0 <__pow5mult+0x20>
 8012de0:	4c25      	ldr	r4, [pc, #148]	@ (8012e78 <__pow5mult+0xa8>)
 8012de2:	3a01      	subs	r2, #1
 8012de4:	2300      	movs	r3, #0
 8012de6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012dea:	f7ff fe55 	bl	8012a98 <__multadd>
 8012dee:	4606      	mov	r6, r0
 8012df0:	10ad      	asrs	r5, r5, #2
 8012df2:	d03d      	beq.n	8012e70 <__pow5mult+0xa0>
 8012df4:	69fc      	ldr	r4, [r7, #28]
 8012df6:	b97c      	cbnz	r4, 8012e18 <__pow5mult+0x48>
 8012df8:	2010      	movs	r0, #16
 8012dfa:	f7fe f90d 	bl	8011018 <malloc>
 8012dfe:	4602      	mov	r2, r0
 8012e00:	61f8      	str	r0, [r7, #28]
 8012e02:	b928      	cbnz	r0, 8012e10 <__pow5mult+0x40>
 8012e04:	4b1d      	ldr	r3, [pc, #116]	@ (8012e7c <__pow5mult+0xac>)
 8012e06:	481e      	ldr	r0, [pc, #120]	@ (8012e80 <__pow5mult+0xb0>)
 8012e08:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8012e0c:	f000 fe54 	bl	8013ab8 <__assert_func>
 8012e10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012e14:	6004      	str	r4, [r0, #0]
 8012e16:	60c4      	str	r4, [r0, #12]
 8012e18:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8012e1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012e20:	b94c      	cbnz	r4, 8012e36 <__pow5mult+0x66>
 8012e22:	f240 2171 	movw	r1, #625	@ 0x271
 8012e26:	4638      	mov	r0, r7
 8012e28:	f7ff ff12 	bl	8012c50 <__i2b>
 8012e2c:	2300      	movs	r3, #0
 8012e2e:	f8c8 0008 	str.w	r0, [r8, #8]
 8012e32:	4604      	mov	r4, r0
 8012e34:	6003      	str	r3, [r0, #0]
 8012e36:	f04f 0900 	mov.w	r9, #0
 8012e3a:	07eb      	lsls	r3, r5, #31
 8012e3c:	d50a      	bpl.n	8012e54 <__pow5mult+0x84>
 8012e3e:	4631      	mov	r1, r6
 8012e40:	4622      	mov	r2, r4
 8012e42:	4638      	mov	r0, r7
 8012e44:	f7ff ff1a 	bl	8012c7c <__multiply>
 8012e48:	4631      	mov	r1, r6
 8012e4a:	4680      	mov	r8, r0
 8012e4c:	4638      	mov	r0, r7
 8012e4e:	f7ff fe01 	bl	8012a54 <_Bfree>
 8012e52:	4646      	mov	r6, r8
 8012e54:	106d      	asrs	r5, r5, #1
 8012e56:	d00b      	beq.n	8012e70 <__pow5mult+0xa0>
 8012e58:	6820      	ldr	r0, [r4, #0]
 8012e5a:	b938      	cbnz	r0, 8012e6c <__pow5mult+0x9c>
 8012e5c:	4622      	mov	r2, r4
 8012e5e:	4621      	mov	r1, r4
 8012e60:	4638      	mov	r0, r7
 8012e62:	f7ff ff0b 	bl	8012c7c <__multiply>
 8012e66:	6020      	str	r0, [r4, #0]
 8012e68:	f8c0 9000 	str.w	r9, [r0]
 8012e6c:	4604      	mov	r4, r0
 8012e6e:	e7e4      	b.n	8012e3a <__pow5mult+0x6a>
 8012e70:	4630      	mov	r0, r6
 8012e72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e76:	bf00      	nop
 8012e78:	080145fc 	.word	0x080145fc
 8012e7c:	0801458a 	.word	0x0801458a
 8012e80:	080145a1 	.word	0x080145a1

08012e84 <__lshift>:
 8012e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e88:	460c      	mov	r4, r1
 8012e8a:	6849      	ldr	r1, [r1, #4]
 8012e8c:	6923      	ldr	r3, [r4, #16]
 8012e8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012e92:	68a3      	ldr	r3, [r4, #8]
 8012e94:	4607      	mov	r7, r0
 8012e96:	4691      	mov	r9, r2
 8012e98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012e9c:	f108 0601 	add.w	r6, r8, #1
 8012ea0:	42b3      	cmp	r3, r6
 8012ea2:	db0b      	blt.n	8012ebc <__lshift+0x38>
 8012ea4:	4638      	mov	r0, r7
 8012ea6:	f7ff fd95 	bl	80129d4 <_Balloc>
 8012eaa:	4605      	mov	r5, r0
 8012eac:	b948      	cbnz	r0, 8012ec2 <__lshift+0x3e>
 8012eae:	4602      	mov	r2, r0
 8012eb0:	4b28      	ldr	r3, [pc, #160]	@ (8012f54 <__lshift+0xd0>)
 8012eb2:	4829      	ldr	r0, [pc, #164]	@ (8012f58 <__lshift+0xd4>)
 8012eb4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8012eb8:	f000 fdfe 	bl	8013ab8 <__assert_func>
 8012ebc:	3101      	adds	r1, #1
 8012ebe:	005b      	lsls	r3, r3, #1
 8012ec0:	e7ee      	b.n	8012ea0 <__lshift+0x1c>
 8012ec2:	2300      	movs	r3, #0
 8012ec4:	f100 0114 	add.w	r1, r0, #20
 8012ec8:	f100 0210 	add.w	r2, r0, #16
 8012ecc:	4618      	mov	r0, r3
 8012ece:	4553      	cmp	r3, sl
 8012ed0:	db33      	blt.n	8012f3a <__lshift+0xb6>
 8012ed2:	6920      	ldr	r0, [r4, #16]
 8012ed4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012ed8:	f104 0314 	add.w	r3, r4, #20
 8012edc:	f019 091f 	ands.w	r9, r9, #31
 8012ee0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012ee4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012ee8:	d02b      	beq.n	8012f42 <__lshift+0xbe>
 8012eea:	f1c9 0e20 	rsb	lr, r9, #32
 8012eee:	468a      	mov	sl, r1
 8012ef0:	2200      	movs	r2, #0
 8012ef2:	6818      	ldr	r0, [r3, #0]
 8012ef4:	fa00 f009 	lsl.w	r0, r0, r9
 8012ef8:	4310      	orrs	r0, r2
 8012efa:	f84a 0b04 	str.w	r0, [sl], #4
 8012efe:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f02:	459c      	cmp	ip, r3
 8012f04:	fa22 f20e 	lsr.w	r2, r2, lr
 8012f08:	d8f3      	bhi.n	8012ef2 <__lshift+0x6e>
 8012f0a:	ebac 0304 	sub.w	r3, ip, r4
 8012f0e:	3b15      	subs	r3, #21
 8012f10:	f023 0303 	bic.w	r3, r3, #3
 8012f14:	3304      	adds	r3, #4
 8012f16:	f104 0015 	add.w	r0, r4, #21
 8012f1a:	4584      	cmp	ip, r0
 8012f1c:	bf38      	it	cc
 8012f1e:	2304      	movcc	r3, #4
 8012f20:	50ca      	str	r2, [r1, r3]
 8012f22:	b10a      	cbz	r2, 8012f28 <__lshift+0xa4>
 8012f24:	f108 0602 	add.w	r6, r8, #2
 8012f28:	3e01      	subs	r6, #1
 8012f2a:	4638      	mov	r0, r7
 8012f2c:	612e      	str	r6, [r5, #16]
 8012f2e:	4621      	mov	r1, r4
 8012f30:	f7ff fd90 	bl	8012a54 <_Bfree>
 8012f34:	4628      	mov	r0, r5
 8012f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f3a:	f842 0f04 	str.w	r0, [r2, #4]!
 8012f3e:	3301      	adds	r3, #1
 8012f40:	e7c5      	b.n	8012ece <__lshift+0x4a>
 8012f42:	3904      	subs	r1, #4
 8012f44:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f48:	f841 2f04 	str.w	r2, [r1, #4]!
 8012f4c:	459c      	cmp	ip, r3
 8012f4e:	d8f9      	bhi.n	8012f44 <__lshift+0xc0>
 8012f50:	e7ea      	b.n	8012f28 <__lshift+0xa4>
 8012f52:	bf00      	nop
 8012f54:	08014519 	.word	0x08014519
 8012f58:	080145a1 	.word	0x080145a1

08012f5c <__mcmp>:
 8012f5c:	690a      	ldr	r2, [r1, #16]
 8012f5e:	4603      	mov	r3, r0
 8012f60:	6900      	ldr	r0, [r0, #16]
 8012f62:	1a80      	subs	r0, r0, r2
 8012f64:	b530      	push	{r4, r5, lr}
 8012f66:	d10e      	bne.n	8012f86 <__mcmp+0x2a>
 8012f68:	3314      	adds	r3, #20
 8012f6a:	3114      	adds	r1, #20
 8012f6c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012f70:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012f74:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012f78:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012f7c:	4295      	cmp	r5, r2
 8012f7e:	d003      	beq.n	8012f88 <__mcmp+0x2c>
 8012f80:	d205      	bcs.n	8012f8e <__mcmp+0x32>
 8012f82:	f04f 30ff 	mov.w	r0, #4294967295
 8012f86:	bd30      	pop	{r4, r5, pc}
 8012f88:	42a3      	cmp	r3, r4
 8012f8a:	d3f3      	bcc.n	8012f74 <__mcmp+0x18>
 8012f8c:	e7fb      	b.n	8012f86 <__mcmp+0x2a>
 8012f8e:	2001      	movs	r0, #1
 8012f90:	e7f9      	b.n	8012f86 <__mcmp+0x2a>
	...

08012f94 <__mdiff>:
 8012f94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f98:	4689      	mov	r9, r1
 8012f9a:	4606      	mov	r6, r0
 8012f9c:	4611      	mov	r1, r2
 8012f9e:	4648      	mov	r0, r9
 8012fa0:	4614      	mov	r4, r2
 8012fa2:	f7ff ffdb 	bl	8012f5c <__mcmp>
 8012fa6:	1e05      	subs	r5, r0, #0
 8012fa8:	d112      	bne.n	8012fd0 <__mdiff+0x3c>
 8012faa:	4629      	mov	r1, r5
 8012fac:	4630      	mov	r0, r6
 8012fae:	f7ff fd11 	bl	80129d4 <_Balloc>
 8012fb2:	4602      	mov	r2, r0
 8012fb4:	b928      	cbnz	r0, 8012fc2 <__mdiff+0x2e>
 8012fb6:	4b3f      	ldr	r3, [pc, #252]	@ (80130b4 <__mdiff+0x120>)
 8012fb8:	f240 2137 	movw	r1, #567	@ 0x237
 8012fbc:	483e      	ldr	r0, [pc, #248]	@ (80130b8 <__mdiff+0x124>)
 8012fbe:	f000 fd7b 	bl	8013ab8 <__assert_func>
 8012fc2:	2301      	movs	r3, #1
 8012fc4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012fc8:	4610      	mov	r0, r2
 8012fca:	b003      	add	sp, #12
 8012fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fd0:	bfbc      	itt	lt
 8012fd2:	464b      	movlt	r3, r9
 8012fd4:	46a1      	movlt	r9, r4
 8012fd6:	4630      	mov	r0, r6
 8012fd8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8012fdc:	bfba      	itte	lt
 8012fde:	461c      	movlt	r4, r3
 8012fe0:	2501      	movlt	r5, #1
 8012fe2:	2500      	movge	r5, #0
 8012fe4:	f7ff fcf6 	bl	80129d4 <_Balloc>
 8012fe8:	4602      	mov	r2, r0
 8012fea:	b918      	cbnz	r0, 8012ff4 <__mdiff+0x60>
 8012fec:	4b31      	ldr	r3, [pc, #196]	@ (80130b4 <__mdiff+0x120>)
 8012fee:	f240 2145 	movw	r1, #581	@ 0x245
 8012ff2:	e7e3      	b.n	8012fbc <__mdiff+0x28>
 8012ff4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8012ff8:	6926      	ldr	r6, [r4, #16]
 8012ffa:	60c5      	str	r5, [r0, #12]
 8012ffc:	f109 0310 	add.w	r3, r9, #16
 8013000:	f109 0514 	add.w	r5, r9, #20
 8013004:	f104 0e14 	add.w	lr, r4, #20
 8013008:	f100 0b14 	add.w	fp, r0, #20
 801300c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8013010:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8013014:	9301      	str	r3, [sp, #4]
 8013016:	46d9      	mov	r9, fp
 8013018:	f04f 0c00 	mov.w	ip, #0
 801301c:	9b01      	ldr	r3, [sp, #4]
 801301e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8013022:	f853 af04 	ldr.w	sl, [r3, #4]!
 8013026:	9301      	str	r3, [sp, #4]
 8013028:	fa1f f38a 	uxth.w	r3, sl
 801302c:	4619      	mov	r1, r3
 801302e:	b283      	uxth	r3, r0
 8013030:	1acb      	subs	r3, r1, r3
 8013032:	0c00      	lsrs	r0, r0, #16
 8013034:	4463      	add	r3, ip
 8013036:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801303a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801303e:	b29b      	uxth	r3, r3
 8013040:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8013044:	4576      	cmp	r6, lr
 8013046:	f849 3b04 	str.w	r3, [r9], #4
 801304a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801304e:	d8e5      	bhi.n	801301c <__mdiff+0x88>
 8013050:	1b33      	subs	r3, r6, r4
 8013052:	3b15      	subs	r3, #21
 8013054:	f023 0303 	bic.w	r3, r3, #3
 8013058:	3415      	adds	r4, #21
 801305a:	3304      	adds	r3, #4
 801305c:	42a6      	cmp	r6, r4
 801305e:	bf38      	it	cc
 8013060:	2304      	movcc	r3, #4
 8013062:	441d      	add	r5, r3
 8013064:	445b      	add	r3, fp
 8013066:	461e      	mov	r6, r3
 8013068:	462c      	mov	r4, r5
 801306a:	4544      	cmp	r4, r8
 801306c:	d30e      	bcc.n	801308c <__mdiff+0xf8>
 801306e:	f108 0103 	add.w	r1, r8, #3
 8013072:	1b49      	subs	r1, r1, r5
 8013074:	f021 0103 	bic.w	r1, r1, #3
 8013078:	3d03      	subs	r5, #3
 801307a:	45a8      	cmp	r8, r5
 801307c:	bf38      	it	cc
 801307e:	2100      	movcc	r1, #0
 8013080:	440b      	add	r3, r1
 8013082:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013086:	b191      	cbz	r1, 80130ae <__mdiff+0x11a>
 8013088:	6117      	str	r7, [r2, #16]
 801308a:	e79d      	b.n	8012fc8 <__mdiff+0x34>
 801308c:	f854 1b04 	ldr.w	r1, [r4], #4
 8013090:	46e6      	mov	lr, ip
 8013092:	0c08      	lsrs	r0, r1, #16
 8013094:	fa1c fc81 	uxtah	ip, ip, r1
 8013098:	4471      	add	r1, lr
 801309a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801309e:	b289      	uxth	r1, r1
 80130a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80130a4:	f846 1b04 	str.w	r1, [r6], #4
 80130a8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80130ac:	e7dd      	b.n	801306a <__mdiff+0xd6>
 80130ae:	3f01      	subs	r7, #1
 80130b0:	e7e7      	b.n	8013082 <__mdiff+0xee>
 80130b2:	bf00      	nop
 80130b4:	08014519 	.word	0x08014519
 80130b8:	080145a1 	.word	0x080145a1

080130bc <__ulp>:
 80130bc:	b082      	sub	sp, #8
 80130be:	ed8d 0b00 	vstr	d0, [sp]
 80130c2:	9a01      	ldr	r2, [sp, #4]
 80130c4:	4b0f      	ldr	r3, [pc, #60]	@ (8013104 <__ulp+0x48>)
 80130c6:	4013      	ands	r3, r2
 80130c8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	dc08      	bgt.n	80130e2 <__ulp+0x26>
 80130d0:	425b      	negs	r3, r3
 80130d2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80130d6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80130da:	da04      	bge.n	80130e6 <__ulp+0x2a>
 80130dc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80130e0:	4113      	asrs	r3, r2
 80130e2:	2200      	movs	r2, #0
 80130e4:	e008      	b.n	80130f8 <__ulp+0x3c>
 80130e6:	f1a2 0314 	sub.w	r3, r2, #20
 80130ea:	2b1e      	cmp	r3, #30
 80130ec:	bfda      	itte	le
 80130ee:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80130f2:	40da      	lsrle	r2, r3
 80130f4:	2201      	movgt	r2, #1
 80130f6:	2300      	movs	r3, #0
 80130f8:	4619      	mov	r1, r3
 80130fa:	4610      	mov	r0, r2
 80130fc:	ec41 0b10 	vmov	d0, r0, r1
 8013100:	b002      	add	sp, #8
 8013102:	4770      	bx	lr
 8013104:	7ff00000 	.word	0x7ff00000

08013108 <__b2d>:
 8013108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801310c:	6906      	ldr	r6, [r0, #16]
 801310e:	f100 0814 	add.w	r8, r0, #20
 8013112:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8013116:	1f37      	subs	r7, r6, #4
 8013118:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801311c:	4610      	mov	r0, r2
 801311e:	f7ff fd4b 	bl	8012bb8 <__hi0bits>
 8013122:	f1c0 0320 	rsb	r3, r0, #32
 8013126:	280a      	cmp	r0, #10
 8013128:	600b      	str	r3, [r1, #0]
 801312a:	491b      	ldr	r1, [pc, #108]	@ (8013198 <__b2d+0x90>)
 801312c:	dc15      	bgt.n	801315a <__b2d+0x52>
 801312e:	f1c0 0c0b 	rsb	ip, r0, #11
 8013132:	fa22 f30c 	lsr.w	r3, r2, ip
 8013136:	45b8      	cmp	r8, r7
 8013138:	ea43 0501 	orr.w	r5, r3, r1
 801313c:	bf34      	ite	cc
 801313e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8013142:	2300      	movcs	r3, #0
 8013144:	3015      	adds	r0, #21
 8013146:	fa02 f000 	lsl.w	r0, r2, r0
 801314a:	fa23 f30c 	lsr.w	r3, r3, ip
 801314e:	4303      	orrs	r3, r0
 8013150:	461c      	mov	r4, r3
 8013152:	ec45 4b10 	vmov	d0, r4, r5
 8013156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801315a:	45b8      	cmp	r8, r7
 801315c:	bf3a      	itte	cc
 801315e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8013162:	f1a6 0708 	subcc.w	r7, r6, #8
 8013166:	2300      	movcs	r3, #0
 8013168:	380b      	subs	r0, #11
 801316a:	d012      	beq.n	8013192 <__b2d+0x8a>
 801316c:	f1c0 0120 	rsb	r1, r0, #32
 8013170:	fa23 f401 	lsr.w	r4, r3, r1
 8013174:	4082      	lsls	r2, r0
 8013176:	4322      	orrs	r2, r4
 8013178:	4547      	cmp	r7, r8
 801317a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801317e:	bf8c      	ite	hi
 8013180:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8013184:	2200      	movls	r2, #0
 8013186:	4083      	lsls	r3, r0
 8013188:	40ca      	lsrs	r2, r1
 801318a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801318e:	4313      	orrs	r3, r2
 8013190:	e7de      	b.n	8013150 <__b2d+0x48>
 8013192:	ea42 0501 	orr.w	r5, r2, r1
 8013196:	e7db      	b.n	8013150 <__b2d+0x48>
 8013198:	3ff00000 	.word	0x3ff00000

0801319c <__d2b>:
 801319c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80131a0:	460f      	mov	r7, r1
 80131a2:	2101      	movs	r1, #1
 80131a4:	ec59 8b10 	vmov	r8, r9, d0
 80131a8:	4616      	mov	r6, r2
 80131aa:	f7ff fc13 	bl	80129d4 <_Balloc>
 80131ae:	4604      	mov	r4, r0
 80131b0:	b930      	cbnz	r0, 80131c0 <__d2b+0x24>
 80131b2:	4602      	mov	r2, r0
 80131b4:	4b23      	ldr	r3, [pc, #140]	@ (8013244 <__d2b+0xa8>)
 80131b6:	4824      	ldr	r0, [pc, #144]	@ (8013248 <__d2b+0xac>)
 80131b8:	f240 310f 	movw	r1, #783	@ 0x30f
 80131bc:	f000 fc7c 	bl	8013ab8 <__assert_func>
 80131c0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80131c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80131c8:	b10d      	cbz	r5, 80131ce <__d2b+0x32>
 80131ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80131ce:	9301      	str	r3, [sp, #4]
 80131d0:	f1b8 0300 	subs.w	r3, r8, #0
 80131d4:	d023      	beq.n	801321e <__d2b+0x82>
 80131d6:	4668      	mov	r0, sp
 80131d8:	9300      	str	r3, [sp, #0]
 80131da:	f7ff fd0c 	bl	8012bf6 <__lo0bits>
 80131de:	e9dd 1200 	ldrd	r1, r2, [sp]
 80131e2:	b1d0      	cbz	r0, 801321a <__d2b+0x7e>
 80131e4:	f1c0 0320 	rsb	r3, r0, #32
 80131e8:	fa02 f303 	lsl.w	r3, r2, r3
 80131ec:	430b      	orrs	r3, r1
 80131ee:	40c2      	lsrs	r2, r0
 80131f0:	6163      	str	r3, [r4, #20]
 80131f2:	9201      	str	r2, [sp, #4]
 80131f4:	9b01      	ldr	r3, [sp, #4]
 80131f6:	61a3      	str	r3, [r4, #24]
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	bf0c      	ite	eq
 80131fc:	2201      	moveq	r2, #1
 80131fe:	2202      	movne	r2, #2
 8013200:	6122      	str	r2, [r4, #16]
 8013202:	b1a5      	cbz	r5, 801322e <__d2b+0x92>
 8013204:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8013208:	4405      	add	r5, r0
 801320a:	603d      	str	r5, [r7, #0]
 801320c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8013210:	6030      	str	r0, [r6, #0]
 8013212:	4620      	mov	r0, r4
 8013214:	b003      	add	sp, #12
 8013216:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801321a:	6161      	str	r1, [r4, #20]
 801321c:	e7ea      	b.n	80131f4 <__d2b+0x58>
 801321e:	a801      	add	r0, sp, #4
 8013220:	f7ff fce9 	bl	8012bf6 <__lo0bits>
 8013224:	9b01      	ldr	r3, [sp, #4]
 8013226:	6163      	str	r3, [r4, #20]
 8013228:	3020      	adds	r0, #32
 801322a:	2201      	movs	r2, #1
 801322c:	e7e8      	b.n	8013200 <__d2b+0x64>
 801322e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013232:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8013236:	6038      	str	r0, [r7, #0]
 8013238:	6918      	ldr	r0, [r3, #16]
 801323a:	f7ff fcbd 	bl	8012bb8 <__hi0bits>
 801323e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013242:	e7e5      	b.n	8013210 <__d2b+0x74>
 8013244:	08014519 	.word	0x08014519
 8013248:	080145a1 	.word	0x080145a1

0801324c <__ratio>:
 801324c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013250:	b085      	sub	sp, #20
 8013252:	e9cd 1000 	strd	r1, r0, [sp]
 8013256:	a902      	add	r1, sp, #8
 8013258:	f7ff ff56 	bl	8013108 <__b2d>
 801325c:	9800      	ldr	r0, [sp, #0]
 801325e:	a903      	add	r1, sp, #12
 8013260:	ec55 4b10 	vmov	r4, r5, d0
 8013264:	f7ff ff50 	bl	8013108 <__b2d>
 8013268:	9b01      	ldr	r3, [sp, #4]
 801326a:	6919      	ldr	r1, [r3, #16]
 801326c:	9b00      	ldr	r3, [sp, #0]
 801326e:	691b      	ldr	r3, [r3, #16]
 8013270:	1ac9      	subs	r1, r1, r3
 8013272:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8013276:	1a9b      	subs	r3, r3, r2
 8013278:	ec5b ab10 	vmov	sl, fp, d0
 801327c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8013280:	2b00      	cmp	r3, #0
 8013282:	bfce      	itee	gt
 8013284:	462a      	movgt	r2, r5
 8013286:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801328a:	465a      	movle	r2, fp
 801328c:	462f      	mov	r7, r5
 801328e:	46d9      	mov	r9, fp
 8013290:	bfcc      	ite	gt
 8013292:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8013296:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801329a:	464b      	mov	r3, r9
 801329c:	4652      	mov	r2, sl
 801329e:	4620      	mov	r0, r4
 80132a0:	4639      	mov	r1, r7
 80132a2:	f7ed fb03 	bl	80008ac <__aeabi_ddiv>
 80132a6:	ec41 0b10 	vmov	d0, r0, r1
 80132aa:	b005      	add	sp, #20
 80132ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080132b0 <__copybits>:
 80132b0:	3901      	subs	r1, #1
 80132b2:	b570      	push	{r4, r5, r6, lr}
 80132b4:	1149      	asrs	r1, r1, #5
 80132b6:	6914      	ldr	r4, [r2, #16]
 80132b8:	3101      	adds	r1, #1
 80132ba:	f102 0314 	add.w	r3, r2, #20
 80132be:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80132c2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80132c6:	1f05      	subs	r5, r0, #4
 80132c8:	42a3      	cmp	r3, r4
 80132ca:	d30c      	bcc.n	80132e6 <__copybits+0x36>
 80132cc:	1aa3      	subs	r3, r4, r2
 80132ce:	3b11      	subs	r3, #17
 80132d0:	f023 0303 	bic.w	r3, r3, #3
 80132d4:	3211      	adds	r2, #17
 80132d6:	42a2      	cmp	r2, r4
 80132d8:	bf88      	it	hi
 80132da:	2300      	movhi	r3, #0
 80132dc:	4418      	add	r0, r3
 80132de:	2300      	movs	r3, #0
 80132e0:	4288      	cmp	r0, r1
 80132e2:	d305      	bcc.n	80132f0 <__copybits+0x40>
 80132e4:	bd70      	pop	{r4, r5, r6, pc}
 80132e6:	f853 6b04 	ldr.w	r6, [r3], #4
 80132ea:	f845 6f04 	str.w	r6, [r5, #4]!
 80132ee:	e7eb      	b.n	80132c8 <__copybits+0x18>
 80132f0:	f840 3b04 	str.w	r3, [r0], #4
 80132f4:	e7f4      	b.n	80132e0 <__copybits+0x30>

080132f6 <__any_on>:
 80132f6:	f100 0214 	add.w	r2, r0, #20
 80132fa:	6900      	ldr	r0, [r0, #16]
 80132fc:	114b      	asrs	r3, r1, #5
 80132fe:	4298      	cmp	r0, r3
 8013300:	b510      	push	{r4, lr}
 8013302:	db11      	blt.n	8013328 <__any_on+0x32>
 8013304:	dd0a      	ble.n	801331c <__any_on+0x26>
 8013306:	f011 011f 	ands.w	r1, r1, #31
 801330a:	d007      	beq.n	801331c <__any_on+0x26>
 801330c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013310:	fa24 f001 	lsr.w	r0, r4, r1
 8013314:	fa00 f101 	lsl.w	r1, r0, r1
 8013318:	428c      	cmp	r4, r1
 801331a:	d10b      	bne.n	8013334 <__any_on+0x3e>
 801331c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013320:	4293      	cmp	r3, r2
 8013322:	d803      	bhi.n	801332c <__any_on+0x36>
 8013324:	2000      	movs	r0, #0
 8013326:	bd10      	pop	{r4, pc}
 8013328:	4603      	mov	r3, r0
 801332a:	e7f7      	b.n	801331c <__any_on+0x26>
 801332c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013330:	2900      	cmp	r1, #0
 8013332:	d0f5      	beq.n	8013320 <__any_on+0x2a>
 8013334:	2001      	movs	r0, #1
 8013336:	e7f6      	b.n	8013326 <__any_on+0x30>

08013338 <_malloc_usable_size_r>:
 8013338:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801333c:	1f18      	subs	r0, r3, #4
 801333e:	2b00      	cmp	r3, #0
 8013340:	bfbc      	itt	lt
 8013342:	580b      	ldrlt	r3, [r1, r0]
 8013344:	18c0      	addlt	r0, r0, r3
 8013346:	4770      	bx	lr

08013348 <__ascii_wctomb>:
 8013348:	4603      	mov	r3, r0
 801334a:	4608      	mov	r0, r1
 801334c:	b141      	cbz	r1, 8013360 <__ascii_wctomb+0x18>
 801334e:	2aff      	cmp	r2, #255	@ 0xff
 8013350:	d904      	bls.n	801335c <__ascii_wctomb+0x14>
 8013352:	228a      	movs	r2, #138	@ 0x8a
 8013354:	601a      	str	r2, [r3, #0]
 8013356:	f04f 30ff 	mov.w	r0, #4294967295
 801335a:	4770      	bx	lr
 801335c:	700a      	strb	r2, [r1, #0]
 801335e:	2001      	movs	r0, #1
 8013360:	4770      	bx	lr

08013362 <__ssputs_r>:
 8013362:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013366:	688e      	ldr	r6, [r1, #8]
 8013368:	461f      	mov	r7, r3
 801336a:	42be      	cmp	r6, r7
 801336c:	680b      	ldr	r3, [r1, #0]
 801336e:	4682      	mov	sl, r0
 8013370:	460c      	mov	r4, r1
 8013372:	4690      	mov	r8, r2
 8013374:	d82d      	bhi.n	80133d2 <__ssputs_r+0x70>
 8013376:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801337a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801337e:	d026      	beq.n	80133ce <__ssputs_r+0x6c>
 8013380:	6965      	ldr	r5, [r4, #20]
 8013382:	6909      	ldr	r1, [r1, #16]
 8013384:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013388:	eba3 0901 	sub.w	r9, r3, r1
 801338c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013390:	1c7b      	adds	r3, r7, #1
 8013392:	444b      	add	r3, r9
 8013394:	106d      	asrs	r5, r5, #1
 8013396:	429d      	cmp	r5, r3
 8013398:	bf38      	it	cc
 801339a:	461d      	movcc	r5, r3
 801339c:	0553      	lsls	r3, r2, #21
 801339e:	d527      	bpl.n	80133f0 <__ssputs_r+0x8e>
 80133a0:	4629      	mov	r1, r5
 80133a2:	f7fd fe6b 	bl	801107c <_malloc_r>
 80133a6:	4606      	mov	r6, r0
 80133a8:	b360      	cbz	r0, 8013404 <__ssputs_r+0xa2>
 80133aa:	6921      	ldr	r1, [r4, #16]
 80133ac:	464a      	mov	r2, r9
 80133ae:	f7fe ff64 	bl	801227a <memcpy>
 80133b2:	89a3      	ldrh	r3, [r4, #12]
 80133b4:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80133b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80133bc:	81a3      	strh	r3, [r4, #12]
 80133be:	6126      	str	r6, [r4, #16]
 80133c0:	6165      	str	r5, [r4, #20]
 80133c2:	444e      	add	r6, r9
 80133c4:	eba5 0509 	sub.w	r5, r5, r9
 80133c8:	6026      	str	r6, [r4, #0]
 80133ca:	60a5      	str	r5, [r4, #8]
 80133cc:	463e      	mov	r6, r7
 80133ce:	42be      	cmp	r6, r7
 80133d0:	d900      	bls.n	80133d4 <__ssputs_r+0x72>
 80133d2:	463e      	mov	r6, r7
 80133d4:	6820      	ldr	r0, [r4, #0]
 80133d6:	4632      	mov	r2, r6
 80133d8:	4641      	mov	r1, r8
 80133da:	f000 fb53 	bl	8013a84 <memmove>
 80133de:	68a3      	ldr	r3, [r4, #8]
 80133e0:	1b9b      	subs	r3, r3, r6
 80133e2:	60a3      	str	r3, [r4, #8]
 80133e4:	6823      	ldr	r3, [r4, #0]
 80133e6:	4433      	add	r3, r6
 80133e8:	6023      	str	r3, [r4, #0]
 80133ea:	2000      	movs	r0, #0
 80133ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80133f0:	462a      	mov	r2, r5
 80133f2:	f7fd fed7 	bl	80111a4 <_realloc_r>
 80133f6:	4606      	mov	r6, r0
 80133f8:	2800      	cmp	r0, #0
 80133fa:	d1e0      	bne.n	80133be <__ssputs_r+0x5c>
 80133fc:	6921      	ldr	r1, [r4, #16]
 80133fe:	4650      	mov	r0, sl
 8013400:	f7fe ff52 	bl	80122a8 <_free_r>
 8013404:	230c      	movs	r3, #12
 8013406:	f8ca 3000 	str.w	r3, [sl]
 801340a:	89a3      	ldrh	r3, [r4, #12]
 801340c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013410:	81a3      	strh	r3, [r4, #12]
 8013412:	f04f 30ff 	mov.w	r0, #4294967295
 8013416:	e7e9      	b.n	80133ec <__ssputs_r+0x8a>

08013418 <_svfiprintf_r>:
 8013418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801341c:	4698      	mov	r8, r3
 801341e:	898b      	ldrh	r3, [r1, #12]
 8013420:	061b      	lsls	r3, r3, #24
 8013422:	b09d      	sub	sp, #116	@ 0x74
 8013424:	4607      	mov	r7, r0
 8013426:	460d      	mov	r5, r1
 8013428:	4614      	mov	r4, r2
 801342a:	d510      	bpl.n	801344e <_svfiprintf_r+0x36>
 801342c:	690b      	ldr	r3, [r1, #16]
 801342e:	b973      	cbnz	r3, 801344e <_svfiprintf_r+0x36>
 8013430:	2140      	movs	r1, #64	@ 0x40
 8013432:	f7fd fe23 	bl	801107c <_malloc_r>
 8013436:	6028      	str	r0, [r5, #0]
 8013438:	6128      	str	r0, [r5, #16]
 801343a:	b930      	cbnz	r0, 801344a <_svfiprintf_r+0x32>
 801343c:	230c      	movs	r3, #12
 801343e:	603b      	str	r3, [r7, #0]
 8013440:	f04f 30ff 	mov.w	r0, #4294967295
 8013444:	b01d      	add	sp, #116	@ 0x74
 8013446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801344a:	2340      	movs	r3, #64	@ 0x40
 801344c:	616b      	str	r3, [r5, #20]
 801344e:	2300      	movs	r3, #0
 8013450:	9309      	str	r3, [sp, #36]	@ 0x24
 8013452:	2320      	movs	r3, #32
 8013454:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013458:	f8cd 800c 	str.w	r8, [sp, #12]
 801345c:	2330      	movs	r3, #48	@ 0x30
 801345e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80135fc <_svfiprintf_r+0x1e4>
 8013462:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013466:	f04f 0901 	mov.w	r9, #1
 801346a:	4623      	mov	r3, r4
 801346c:	469a      	mov	sl, r3
 801346e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013472:	b10a      	cbz	r2, 8013478 <_svfiprintf_r+0x60>
 8013474:	2a25      	cmp	r2, #37	@ 0x25
 8013476:	d1f9      	bne.n	801346c <_svfiprintf_r+0x54>
 8013478:	ebba 0b04 	subs.w	fp, sl, r4
 801347c:	d00b      	beq.n	8013496 <_svfiprintf_r+0x7e>
 801347e:	465b      	mov	r3, fp
 8013480:	4622      	mov	r2, r4
 8013482:	4629      	mov	r1, r5
 8013484:	4638      	mov	r0, r7
 8013486:	f7ff ff6c 	bl	8013362 <__ssputs_r>
 801348a:	3001      	adds	r0, #1
 801348c:	f000 80a7 	beq.w	80135de <_svfiprintf_r+0x1c6>
 8013490:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013492:	445a      	add	r2, fp
 8013494:	9209      	str	r2, [sp, #36]	@ 0x24
 8013496:	f89a 3000 	ldrb.w	r3, [sl]
 801349a:	2b00      	cmp	r3, #0
 801349c:	f000 809f 	beq.w	80135de <_svfiprintf_r+0x1c6>
 80134a0:	2300      	movs	r3, #0
 80134a2:	f04f 32ff 	mov.w	r2, #4294967295
 80134a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80134aa:	f10a 0a01 	add.w	sl, sl, #1
 80134ae:	9304      	str	r3, [sp, #16]
 80134b0:	9307      	str	r3, [sp, #28]
 80134b2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80134b6:	931a      	str	r3, [sp, #104]	@ 0x68
 80134b8:	4654      	mov	r4, sl
 80134ba:	2205      	movs	r2, #5
 80134bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80134c0:	484e      	ldr	r0, [pc, #312]	@ (80135fc <_svfiprintf_r+0x1e4>)
 80134c2:	f7ec febd 	bl	8000240 <memchr>
 80134c6:	9a04      	ldr	r2, [sp, #16]
 80134c8:	b9d8      	cbnz	r0, 8013502 <_svfiprintf_r+0xea>
 80134ca:	06d0      	lsls	r0, r2, #27
 80134cc:	bf44      	itt	mi
 80134ce:	2320      	movmi	r3, #32
 80134d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80134d4:	0711      	lsls	r1, r2, #28
 80134d6:	bf44      	itt	mi
 80134d8:	232b      	movmi	r3, #43	@ 0x2b
 80134da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80134de:	f89a 3000 	ldrb.w	r3, [sl]
 80134e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80134e4:	d015      	beq.n	8013512 <_svfiprintf_r+0xfa>
 80134e6:	9a07      	ldr	r2, [sp, #28]
 80134e8:	4654      	mov	r4, sl
 80134ea:	2000      	movs	r0, #0
 80134ec:	f04f 0c0a 	mov.w	ip, #10
 80134f0:	4621      	mov	r1, r4
 80134f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80134f6:	3b30      	subs	r3, #48	@ 0x30
 80134f8:	2b09      	cmp	r3, #9
 80134fa:	d94b      	bls.n	8013594 <_svfiprintf_r+0x17c>
 80134fc:	b1b0      	cbz	r0, 801352c <_svfiprintf_r+0x114>
 80134fe:	9207      	str	r2, [sp, #28]
 8013500:	e014      	b.n	801352c <_svfiprintf_r+0x114>
 8013502:	eba0 0308 	sub.w	r3, r0, r8
 8013506:	fa09 f303 	lsl.w	r3, r9, r3
 801350a:	4313      	orrs	r3, r2
 801350c:	9304      	str	r3, [sp, #16]
 801350e:	46a2      	mov	sl, r4
 8013510:	e7d2      	b.n	80134b8 <_svfiprintf_r+0xa0>
 8013512:	9b03      	ldr	r3, [sp, #12]
 8013514:	1d19      	adds	r1, r3, #4
 8013516:	681b      	ldr	r3, [r3, #0]
 8013518:	9103      	str	r1, [sp, #12]
 801351a:	2b00      	cmp	r3, #0
 801351c:	bfbb      	ittet	lt
 801351e:	425b      	neglt	r3, r3
 8013520:	f042 0202 	orrlt.w	r2, r2, #2
 8013524:	9307      	strge	r3, [sp, #28]
 8013526:	9307      	strlt	r3, [sp, #28]
 8013528:	bfb8      	it	lt
 801352a:	9204      	strlt	r2, [sp, #16]
 801352c:	7823      	ldrb	r3, [r4, #0]
 801352e:	2b2e      	cmp	r3, #46	@ 0x2e
 8013530:	d10a      	bne.n	8013548 <_svfiprintf_r+0x130>
 8013532:	7863      	ldrb	r3, [r4, #1]
 8013534:	2b2a      	cmp	r3, #42	@ 0x2a
 8013536:	d132      	bne.n	801359e <_svfiprintf_r+0x186>
 8013538:	9b03      	ldr	r3, [sp, #12]
 801353a:	1d1a      	adds	r2, r3, #4
 801353c:	681b      	ldr	r3, [r3, #0]
 801353e:	9203      	str	r2, [sp, #12]
 8013540:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013544:	3402      	adds	r4, #2
 8013546:	9305      	str	r3, [sp, #20]
 8013548:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801360c <_svfiprintf_r+0x1f4>
 801354c:	7821      	ldrb	r1, [r4, #0]
 801354e:	2203      	movs	r2, #3
 8013550:	4650      	mov	r0, sl
 8013552:	f7ec fe75 	bl	8000240 <memchr>
 8013556:	b138      	cbz	r0, 8013568 <_svfiprintf_r+0x150>
 8013558:	9b04      	ldr	r3, [sp, #16]
 801355a:	eba0 000a 	sub.w	r0, r0, sl
 801355e:	2240      	movs	r2, #64	@ 0x40
 8013560:	4082      	lsls	r2, r0
 8013562:	4313      	orrs	r3, r2
 8013564:	3401      	adds	r4, #1
 8013566:	9304      	str	r3, [sp, #16]
 8013568:	f814 1b01 	ldrb.w	r1, [r4], #1
 801356c:	4824      	ldr	r0, [pc, #144]	@ (8013600 <_svfiprintf_r+0x1e8>)
 801356e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013572:	2206      	movs	r2, #6
 8013574:	f7ec fe64 	bl	8000240 <memchr>
 8013578:	2800      	cmp	r0, #0
 801357a:	d036      	beq.n	80135ea <_svfiprintf_r+0x1d2>
 801357c:	4b21      	ldr	r3, [pc, #132]	@ (8013604 <_svfiprintf_r+0x1ec>)
 801357e:	bb1b      	cbnz	r3, 80135c8 <_svfiprintf_r+0x1b0>
 8013580:	9b03      	ldr	r3, [sp, #12]
 8013582:	3307      	adds	r3, #7
 8013584:	f023 0307 	bic.w	r3, r3, #7
 8013588:	3308      	adds	r3, #8
 801358a:	9303      	str	r3, [sp, #12]
 801358c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801358e:	4433      	add	r3, r6
 8013590:	9309      	str	r3, [sp, #36]	@ 0x24
 8013592:	e76a      	b.n	801346a <_svfiprintf_r+0x52>
 8013594:	fb0c 3202 	mla	r2, ip, r2, r3
 8013598:	460c      	mov	r4, r1
 801359a:	2001      	movs	r0, #1
 801359c:	e7a8      	b.n	80134f0 <_svfiprintf_r+0xd8>
 801359e:	2300      	movs	r3, #0
 80135a0:	3401      	adds	r4, #1
 80135a2:	9305      	str	r3, [sp, #20]
 80135a4:	4619      	mov	r1, r3
 80135a6:	f04f 0c0a 	mov.w	ip, #10
 80135aa:	4620      	mov	r0, r4
 80135ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80135b0:	3a30      	subs	r2, #48	@ 0x30
 80135b2:	2a09      	cmp	r2, #9
 80135b4:	d903      	bls.n	80135be <_svfiprintf_r+0x1a6>
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d0c6      	beq.n	8013548 <_svfiprintf_r+0x130>
 80135ba:	9105      	str	r1, [sp, #20]
 80135bc:	e7c4      	b.n	8013548 <_svfiprintf_r+0x130>
 80135be:	fb0c 2101 	mla	r1, ip, r1, r2
 80135c2:	4604      	mov	r4, r0
 80135c4:	2301      	movs	r3, #1
 80135c6:	e7f0      	b.n	80135aa <_svfiprintf_r+0x192>
 80135c8:	ab03      	add	r3, sp, #12
 80135ca:	9300      	str	r3, [sp, #0]
 80135cc:	462a      	mov	r2, r5
 80135ce:	4b0e      	ldr	r3, [pc, #56]	@ (8013608 <_svfiprintf_r+0x1f0>)
 80135d0:	a904      	add	r1, sp, #16
 80135d2:	4638      	mov	r0, r7
 80135d4:	f3af 8000 	nop.w
 80135d8:	1c42      	adds	r2, r0, #1
 80135da:	4606      	mov	r6, r0
 80135dc:	d1d6      	bne.n	801358c <_svfiprintf_r+0x174>
 80135de:	89ab      	ldrh	r3, [r5, #12]
 80135e0:	065b      	lsls	r3, r3, #25
 80135e2:	f53f af2d 	bmi.w	8013440 <_svfiprintf_r+0x28>
 80135e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80135e8:	e72c      	b.n	8013444 <_svfiprintf_r+0x2c>
 80135ea:	ab03      	add	r3, sp, #12
 80135ec:	9300      	str	r3, [sp, #0]
 80135ee:	462a      	mov	r2, r5
 80135f0:	4b05      	ldr	r3, [pc, #20]	@ (8013608 <_svfiprintf_r+0x1f0>)
 80135f2:	a904      	add	r1, sp, #16
 80135f4:	4638      	mov	r0, r7
 80135f6:	f000 f879 	bl	80136ec <_printf_i>
 80135fa:	e7ed      	b.n	80135d8 <_svfiprintf_r+0x1c0>
 80135fc:	080146f8 	.word	0x080146f8
 8013600:	08014702 	.word	0x08014702
 8013604:	00000000 	.word	0x00000000
 8013608:	08013363 	.word	0x08013363
 801360c:	080146fe 	.word	0x080146fe

08013610 <_printf_common>:
 8013610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013614:	4616      	mov	r6, r2
 8013616:	4698      	mov	r8, r3
 8013618:	688a      	ldr	r2, [r1, #8]
 801361a:	690b      	ldr	r3, [r1, #16]
 801361c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013620:	4293      	cmp	r3, r2
 8013622:	bfb8      	it	lt
 8013624:	4613      	movlt	r3, r2
 8013626:	6033      	str	r3, [r6, #0]
 8013628:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801362c:	4607      	mov	r7, r0
 801362e:	460c      	mov	r4, r1
 8013630:	b10a      	cbz	r2, 8013636 <_printf_common+0x26>
 8013632:	3301      	adds	r3, #1
 8013634:	6033      	str	r3, [r6, #0]
 8013636:	6823      	ldr	r3, [r4, #0]
 8013638:	0699      	lsls	r1, r3, #26
 801363a:	bf42      	ittt	mi
 801363c:	6833      	ldrmi	r3, [r6, #0]
 801363e:	3302      	addmi	r3, #2
 8013640:	6033      	strmi	r3, [r6, #0]
 8013642:	6825      	ldr	r5, [r4, #0]
 8013644:	f015 0506 	ands.w	r5, r5, #6
 8013648:	d106      	bne.n	8013658 <_printf_common+0x48>
 801364a:	f104 0a19 	add.w	sl, r4, #25
 801364e:	68e3      	ldr	r3, [r4, #12]
 8013650:	6832      	ldr	r2, [r6, #0]
 8013652:	1a9b      	subs	r3, r3, r2
 8013654:	42ab      	cmp	r3, r5
 8013656:	dc26      	bgt.n	80136a6 <_printf_common+0x96>
 8013658:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801365c:	6822      	ldr	r2, [r4, #0]
 801365e:	3b00      	subs	r3, #0
 8013660:	bf18      	it	ne
 8013662:	2301      	movne	r3, #1
 8013664:	0692      	lsls	r2, r2, #26
 8013666:	d42b      	bmi.n	80136c0 <_printf_common+0xb0>
 8013668:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801366c:	4641      	mov	r1, r8
 801366e:	4638      	mov	r0, r7
 8013670:	47c8      	blx	r9
 8013672:	3001      	adds	r0, #1
 8013674:	d01e      	beq.n	80136b4 <_printf_common+0xa4>
 8013676:	6823      	ldr	r3, [r4, #0]
 8013678:	6922      	ldr	r2, [r4, #16]
 801367a:	f003 0306 	and.w	r3, r3, #6
 801367e:	2b04      	cmp	r3, #4
 8013680:	bf02      	ittt	eq
 8013682:	68e5      	ldreq	r5, [r4, #12]
 8013684:	6833      	ldreq	r3, [r6, #0]
 8013686:	1aed      	subeq	r5, r5, r3
 8013688:	68a3      	ldr	r3, [r4, #8]
 801368a:	bf0c      	ite	eq
 801368c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013690:	2500      	movne	r5, #0
 8013692:	4293      	cmp	r3, r2
 8013694:	bfc4      	itt	gt
 8013696:	1a9b      	subgt	r3, r3, r2
 8013698:	18ed      	addgt	r5, r5, r3
 801369a:	2600      	movs	r6, #0
 801369c:	341a      	adds	r4, #26
 801369e:	42b5      	cmp	r5, r6
 80136a0:	d11a      	bne.n	80136d8 <_printf_common+0xc8>
 80136a2:	2000      	movs	r0, #0
 80136a4:	e008      	b.n	80136b8 <_printf_common+0xa8>
 80136a6:	2301      	movs	r3, #1
 80136a8:	4652      	mov	r2, sl
 80136aa:	4641      	mov	r1, r8
 80136ac:	4638      	mov	r0, r7
 80136ae:	47c8      	blx	r9
 80136b0:	3001      	adds	r0, #1
 80136b2:	d103      	bne.n	80136bc <_printf_common+0xac>
 80136b4:	f04f 30ff 	mov.w	r0, #4294967295
 80136b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80136bc:	3501      	adds	r5, #1
 80136be:	e7c6      	b.n	801364e <_printf_common+0x3e>
 80136c0:	18e1      	adds	r1, r4, r3
 80136c2:	1c5a      	adds	r2, r3, #1
 80136c4:	2030      	movs	r0, #48	@ 0x30
 80136c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80136ca:	4422      	add	r2, r4
 80136cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80136d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80136d4:	3302      	adds	r3, #2
 80136d6:	e7c7      	b.n	8013668 <_printf_common+0x58>
 80136d8:	2301      	movs	r3, #1
 80136da:	4622      	mov	r2, r4
 80136dc:	4641      	mov	r1, r8
 80136de:	4638      	mov	r0, r7
 80136e0:	47c8      	blx	r9
 80136e2:	3001      	adds	r0, #1
 80136e4:	d0e6      	beq.n	80136b4 <_printf_common+0xa4>
 80136e6:	3601      	adds	r6, #1
 80136e8:	e7d9      	b.n	801369e <_printf_common+0x8e>
	...

080136ec <_printf_i>:
 80136ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80136f0:	7e0f      	ldrb	r7, [r1, #24]
 80136f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80136f4:	2f78      	cmp	r7, #120	@ 0x78
 80136f6:	4691      	mov	r9, r2
 80136f8:	4680      	mov	r8, r0
 80136fa:	460c      	mov	r4, r1
 80136fc:	469a      	mov	sl, r3
 80136fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8013702:	d807      	bhi.n	8013714 <_printf_i+0x28>
 8013704:	2f62      	cmp	r7, #98	@ 0x62
 8013706:	d80a      	bhi.n	801371e <_printf_i+0x32>
 8013708:	2f00      	cmp	r7, #0
 801370a:	f000 80d2 	beq.w	80138b2 <_printf_i+0x1c6>
 801370e:	2f58      	cmp	r7, #88	@ 0x58
 8013710:	f000 80b9 	beq.w	8013886 <_printf_i+0x19a>
 8013714:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013718:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801371c:	e03a      	b.n	8013794 <_printf_i+0xa8>
 801371e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8013722:	2b15      	cmp	r3, #21
 8013724:	d8f6      	bhi.n	8013714 <_printf_i+0x28>
 8013726:	a101      	add	r1, pc, #4	@ (adr r1, 801372c <_printf_i+0x40>)
 8013728:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801372c:	08013785 	.word	0x08013785
 8013730:	08013799 	.word	0x08013799
 8013734:	08013715 	.word	0x08013715
 8013738:	08013715 	.word	0x08013715
 801373c:	08013715 	.word	0x08013715
 8013740:	08013715 	.word	0x08013715
 8013744:	08013799 	.word	0x08013799
 8013748:	08013715 	.word	0x08013715
 801374c:	08013715 	.word	0x08013715
 8013750:	08013715 	.word	0x08013715
 8013754:	08013715 	.word	0x08013715
 8013758:	08013899 	.word	0x08013899
 801375c:	080137c3 	.word	0x080137c3
 8013760:	08013853 	.word	0x08013853
 8013764:	08013715 	.word	0x08013715
 8013768:	08013715 	.word	0x08013715
 801376c:	080138bb 	.word	0x080138bb
 8013770:	08013715 	.word	0x08013715
 8013774:	080137c3 	.word	0x080137c3
 8013778:	08013715 	.word	0x08013715
 801377c:	08013715 	.word	0x08013715
 8013780:	0801385b 	.word	0x0801385b
 8013784:	6833      	ldr	r3, [r6, #0]
 8013786:	1d1a      	adds	r2, r3, #4
 8013788:	681b      	ldr	r3, [r3, #0]
 801378a:	6032      	str	r2, [r6, #0]
 801378c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013790:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013794:	2301      	movs	r3, #1
 8013796:	e09d      	b.n	80138d4 <_printf_i+0x1e8>
 8013798:	6833      	ldr	r3, [r6, #0]
 801379a:	6820      	ldr	r0, [r4, #0]
 801379c:	1d19      	adds	r1, r3, #4
 801379e:	6031      	str	r1, [r6, #0]
 80137a0:	0606      	lsls	r6, r0, #24
 80137a2:	d501      	bpl.n	80137a8 <_printf_i+0xbc>
 80137a4:	681d      	ldr	r5, [r3, #0]
 80137a6:	e003      	b.n	80137b0 <_printf_i+0xc4>
 80137a8:	0645      	lsls	r5, r0, #25
 80137aa:	d5fb      	bpl.n	80137a4 <_printf_i+0xb8>
 80137ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80137b0:	2d00      	cmp	r5, #0
 80137b2:	da03      	bge.n	80137bc <_printf_i+0xd0>
 80137b4:	232d      	movs	r3, #45	@ 0x2d
 80137b6:	426d      	negs	r5, r5
 80137b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80137bc:	4859      	ldr	r0, [pc, #356]	@ (8013924 <_printf_i+0x238>)
 80137be:	230a      	movs	r3, #10
 80137c0:	e011      	b.n	80137e6 <_printf_i+0xfa>
 80137c2:	6821      	ldr	r1, [r4, #0]
 80137c4:	6833      	ldr	r3, [r6, #0]
 80137c6:	0608      	lsls	r0, r1, #24
 80137c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80137cc:	d402      	bmi.n	80137d4 <_printf_i+0xe8>
 80137ce:	0649      	lsls	r1, r1, #25
 80137d0:	bf48      	it	mi
 80137d2:	b2ad      	uxthmi	r5, r5
 80137d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80137d6:	4853      	ldr	r0, [pc, #332]	@ (8013924 <_printf_i+0x238>)
 80137d8:	6033      	str	r3, [r6, #0]
 80137da:	bf14      	ite	ne
 80137dc:	230a      	movne	r3, #10
 80137de:	2308      	moveq	r3, #8
 80137e0:	2100      	movs	r1, #0
 80137e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80137e6:	6866      	ldr	r6, [r4, #4]
 80137e8:	60a6      	str	r6, [r4, #8]
 80137ea:	2e00      	cmp	r6, #0
 80137ec:	bfa2      	ittt	ge
 80137ee:	6821      	ldrge	r1, [r4, #0]
 80137f0:	f021 0104 	bicge.w	r1, r1, #4
 80137f4:	6021      	strge	r1, [r4, #0]
 80137f6:	b90d      	cbnz	r5, 80137fc <_printf_i+0x110>
 80137f8:	2e00      	cmp	r6, #0
 80137fa:	d04b      	beq.n	8013894 <_printf_i+0x1a8>
 80137fc:	4616      	mov	r6, r2
 80137fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8013802:	fb03 5711 	mls	r7, r3, r1, r5
 8013806:	5dc7      	ldrb	r7, [r0, r7]
 8013808:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801380c:	462f      	mov	r7, r5
 801380e:	42bb      	cmp	r3, r7
 8013810:	460d      	mov	r5, r1
 8013812:	d9f4      	bls.n	80137fe <_printf_i+0x112>
 8013814:	2b08      	cmp	r3, #8
 8013816:	d10b      	bne.n	8013830 <_printf_i+0x144>
 8013818:	6823      	ldr	r3, [r4, #0]
 801381a:	07df      	lsls	r7, r3, #31
 801381c:	d508      	bpl.n	8013830 <_printf_i+0x144>
 801381e:	6923      	ldr	r3, [r4, #16]
 8013820:	6861      	ldr	r1, [r4, #4]
 8013822:	4299      	cmp	r1, r3
 8013824:	bfde      	ittt	le
 8013826:	2330      	movle	r3, #48	@ 0x30
 8013828:	f806 3c01 	strble.w	r3, [r6, #-1]
 801382c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013830:	1b92      	subs	r2, r2, r6
 8013832:	6122      	str	r2, [r4, #16]
 8013834:	f8cd a000 	str.w	sl, [sp]
 8013838:	464b      	mov	r3, r9
 801383a:	aa03      	add	r2, sp, #12
 801383c:	4621      	mov	r1, r4
 801383e:	4640      	mov	r0, r8
 8013840:	f7ff fee6 	bl	8013610 <_printf_common>
 8013844:	3001      	adds	r0, #1
 8013846:	d14a      	bne.n	80138de <_printf_i+0x1f2>
 8013848:	f04f 30ff 	mov.w	r0, #4294967295
 801384c:	b004      	add	sp, #16
 801384e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013852:	6823      	ldr	r3, [r4, #0]
 8013854:	f043 0320 	orr.w	r3, r3, #32
 8013858:	6023      	str	r3, [r4, #0]
 801385a:	4833      	ldr	r0, [pc, #204]	@ (8013928 <_printf_i+0x23c>)
 801385c:	2778      	movs	r7, #120	@ 0x78
 801385e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013862:	6823      	ldr	r3, [r4, #0]
 8013864:	6831      	ldr	r1, [r6, #0]
 8013866:	061f      	lsls	r7, r3, #24
 8013868:	f851 5b04 	ldr.w	r5, [r1], #4
 801386c:	d402      	bmi.n	8013874 <_printf_i+0x188>
 801386e:	065f      	lsls	r7, r3, #25
 8013870:	bf48      	it	mi
 8013872:	b2ad      	uxthmi	r5, r5
 8013874:	6031      	str	r1, [r6, #0]
 8013876:	07d9      	lsls	r1, r3, #31
 8013878:	bf44      	itt	mi
 801387a:	f043 0320 	orrmi.w	r3, r3, #32
 801387e:	6023      	strmi	r3, [r4, #0]
 8013880:	b11d      	cbz	r5, 801388a <_printf_i+0x19e>
 8013882:	2310      	movs	r3, #16
 8013884:	e7ac      	b.n	80137e0 <_printf_i+0xf4>
 8013886:	4827      	ldr	r0, [pc, #156]	@ (8013924 <_printf_i+0x238>)
 8013888:	e7e9      	b.n	801385e <_printf_i+0x172>
 801388a:	6823      	ldr	r3, [r4, #0]
 801388c:	f023 0320 	bic.w	r3, r3, #32
 8013890:	6023      	str	r3, [r4, #0]
 8013892:	e7f6      	b.n	8013882 <_printf_i+0x196>
 8013894:	4616      	mov	r6, r2
 8013896:	e7bd      	b.n	8013814 <_printf_i+0x128>
 8013898:	6833      	ldr	r3, [r6, #0]
 801389a:	6825      	ldr	r5, [r4, #0]
 801389c:	6961      	ldr	r1, [r4, #20]
 801389e:	1d18      	adds	r0, r3, #4
 80138a0:	6030      	str	r0, [r6, #0]
 80138a2:	062e      	lsls	r6, r5, #24
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	d501      	bpl.n	80138ac <_printf_i+0x1c0>
 80138a8:	6019      	str	r1, [r3, #0]
 80138aa:	e002      	b.n	80138b2 <_printf_i+0x1c6>
 80138ac:	0668      	lsls	r0, r5, #25
 80138ae:	d5fb      	bpl.n	80138a8 <_printf_i+0x1bc>
 80138b0:	8019      	strh	r1, [r3, #0]
 80138b2:	2300      	movs	r3, #0
 80138b4:	6123      	str	r3, [r4, #16]
 80138b6:	4616      	mov	r6, r2
 80138b8:	e7bc      	b.n	8013834 <_printf_i+0x148>
 80138ba:	6833      	ldr	r3, [r6, #0]
 80138bc:	1d1a      	adds	r2, r3, #4
 80138be:	6032      	str	r2, [r6, #0]
 80138c0:	681e      	ldr	r6, [r3, #0]
 80138c2:	6862      	ldr	r2, [r4, #4]
 80138c4:	2100      	movs	r1, #0
 80138c6:	4630      	mov	r0, r6
 80138c8:	f7ec fcba 	bl	8000240 <memchr>
 80138cc:	b108      	cbz	r0, 80138d2 <_printf_i+0x1e6>
 80138ce:	1b80      	subs	r0, r0, r6
 80138d0:	6060      	str	r0, [r4, #4]
 80138d2:	6863      	ldr	r3, [r4, #4]
 80138d4:	6123      	str	r3, [r4, #16]
 80138d6:	2300      	movs	r3, #0
 80138d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80138dc:	e7aa      	b.n	8013834 <_printf_i+0x148>
 80138de:	6923      	ldr	r3, [r4, #16]
 80138e0:	4632      	mov	r2, r6
 80138e2:	4649      	mov	r1, r9
 80138e4:	4640      	mov	r0, r8
 80138e6:	47d0      	blx	sl
 80138e8:	3001      	adds	r0, #1
 80138ea:	d0ad      	beq.n	8013848 <_printf_i+0x15c>
 80138ec:	6823      	ldr	r3, [r4, #0]
 80138ee:	079b      	lsls	r3, r3, #30
 80138f0:	d413      	bmi.n	801391a <_printf_i+0x22e>
 80138f2:	68e0      	ldr	r0, [r4, #12]
 80138f4:	9b03      	ldr	r3, [sp, #12]
 80138f6:	4298      	cmp	r0, r3
 80138f8:	bfb8      	it	lt
 80138fa:	4618      	movlt	r0, r3
 80138fc:	e7a6      	b.n	801384c <_printf_i+0x160>
 80138fe:	2301      	movs	r3, #1
 8013900:	4632      	mov	r2, r6
 8013902:	4649      	mov	r1, r9
 8013904:	4640      	mov	r0, r8
 8013906:	47d0      	blx	sl
 8013908:	3001      	adds	r0, #1
 801390a:	d09d      	beq.n	8013848 <_printf_i+0x15c>
 801390c:	3501      	adds	r5, #1
 801390e:	68e3      	ldr	r3, [r4, #12]
 8013910:	9903      	ldr	r1, [sp, #12]
 8013912:	1a5b      	subs	r3, r3, r1
 8013914:	42ab      	cmp	r3, r5
 8013916:	dcf2      	bgt.n	80138fe <_printf_i+0x212>
 8013918:	e7eb      	b.n	80138f2 <_printf_i+0x206>
 801391a:	2500      	movs	r5, #0
 801391c:	f104 0619 	add.w	r6, r4, #25
 8013920:	e7f5      	b.n	801390e <_printf_i+0x222>
 8013922:	bf00      	nop
 8013924:	08014709 	.word	0x08014709
 8013928:	0801471a 	.word	0x0801471a

0801392c <__sflush_r>:
 801392c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013934:	0716      	lsls	r6, r2, #28
 8013936:	4605      	mov	r5, r0
 8013938:	460c      	mov	r4, r1
 801393a:	d454      	bmi.n	80139e6 <__sflush_r+0xba>
 801393c:	684b      	ldr	r3, [r1, #4]
 801393e:	2b00      	cmp	r3, #0
 8013940:	dc02      	bgt.n	8013948 <__sflush_r+0x1c>
 8013942:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013944:	2b00      	cmp	r3, #0
 8013946:	dd48      	ble.n	80139da <__sflush_r+0xae>
 8013948:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801394a:	2e00      	cmp	r6, #0
 801394c:	d045      	beq.n	80139da <__sflush_r+0xae>
 801394e:	2300      	movs	r3, #0
 8013950:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013954:	682f      	ldr	r7, [r5, #0]
 8013956:	6a21      	ldr	r1, [r4, #32]
 8013958:	602b      	str	r3, [r5, #0]
 801395a:	d030      	beq.n	80139be <__sflush_r+0x92>
 801395c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801395e:	89a3      	ldrh	r3, [r4, #12]
 8013960:	0759      	lsls	r1, r3, #29
 8013962:	d505      	bpl.n	8013970 <__sflush_r+0x44>
 8013964:	6863      	ldr	r3, [r4, #4]
 8013966:	1ad2      	subs	r2, r2, r3
 8013968:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801396a:	b10b      	cbz	r3, 8013970 <__sflush_r+0x44>
 801396c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801396e:	1ad2      	subs	r2, r2, r3
 8013970:	2300      	movs	r3, #0
 8013972:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013974:	6a21      	ldr	r1, [r4, #32]
 8013976:	4628      	mov	r0, r5
 8013978:	47b0      	blx	r6
 801397a:	1c43      	adds	r3, r0, #1
 801397c:	89a3      	ldrh	r3, [r4, #12]
 801397e:	d106      	bne.n	801398e <__sflush_r+0x62>
 8013980:	6829      	ldr	r1, [r5, #0]
 8013982:	291d      	cmp	r1, #29
 8013984:	d82b      	bhi.n	80139de <__sflush_r+0xb2>
 8013986:	4a2a      	ldr	r2, [pc, #168]	@ (8013a30 <__sflush_r+0x104>)
 8013988:	410a      	asrs	r2, r1
 801398a:	07d6      	lsls	r6, r2, #31
 801398c:	d427      	bmi.n	80139de <__sflush_r+0xb2>
 801398e:	2200      	movs	r2, #0
 8013990:	6062      	str	r2, [r4, #4]
 8013992:	04d9      	lsls	r1, r3, #19
 8013994:	6922      	ldr	r2, [r4, #16]
 8013996:	6022      	str	r2, [r4, #0]
 8013998:	d504      	bpl.n	80139a4 <__sflush_r+0x78>
 801399a:	1c42      	adds	r2, r0, #1
 801399c:	d101      	bne.n	80139a2 <__sflush_r+0x76>
 801399e:	682b      	ldr	r3, [r5, #0]
 80139a0:	b903      	cbnz	r3, 80139a4 <__sflush_r+0x78>
 80139a2:	6560      	str	r0, [r4, #84]	@ 0x54
 80139a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80139a6:	602f      	str	r7, [r5, #0]
 80139a8:	b1b9      	cbz	r1, 80139da <__sflush_r+0xae>
 80139aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80139ae:	4299      	cmp	r1, r3
 80139b0:	d002      	beq.n	80139b8 <__sflush_r+0x8c>
 80139b2:	4628      	mov	r0, r5
 80139b4:	f7fe fc78 	bl	80122a8 <_free_r>
 80139b8:	2300      	movs	r3, #0
 80139ba:	6363      	str	r3, [r4, #52]	@ 0x34
 80139bc:	e00d      	b.n	80139da <__sflush_r+0xae>
 80139be:	2301      	movs	r3, #1
 80139c0:	4628      	mov	r0, r5
 80139c2:	47b0      	blx	r6
 80139c4:	4602      	mov	r2, r0
 80139c6:	1c50      	adds	r0, r2, #1
 80139c8:	d1c9      	bne.n	801395e <__sflush_r+0x32>
 80139ca:	682b      	ldr	r3, [r5, #0]
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d0c6      	beq.n	801395e <__sflush_r+0x32>
 80139d0:	2b1d      	cmp	r3, #29
 80139d2:	d001      	beq.n	80139d8 <__sflush_r+0xac>
 80139d4:	2b16      	cmp	r3, #22
 80139d6:	d11e      	bne.n	8013a16 <__sflush_r+0xea>
 80139d8:	602f      	str	r7, [r5, #0]
 80139da:	2000      	movs	r0, #0
 80139dc:	e022      	b.n	8013a24 <__sflush_r+0xf8>
 80139de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80139e2:	b21b      	sxth	r3, r3
 80139e4:	e01b      	b.n	8013a1e <__sflush_r+0xf2>
 80139e6:	690f      	ldr	r7, [r1, #16]
 80139e8:	2f00      	cmp	r7, #0
 80139ea:	d0f6      	beq.n	80139da <__sflush_r+0xae>
 80139ec:	0793      	lsls	r3, r2, #30
 80139ee:	680e      	ldr	r6, [r1, #0]
 80139f0:	bf08      	it	eq
 80139f2:	694b      	ldreq	r3, [r1, #20]
 80139f4:	600f      	str	r7, [r1, #0]
 80139f6:	bf18      	it	ne
 80139f8:	2300      	movne	r3, #0
 80139fa:	eba6 0807 	sub.w	r8, r6, r7
 80139fe:	608b      	str	r3, [r1, #8]
 8013a00:	f1b8 0f00 	cmp.w	r8, #0
 8013a04:	dde9      	ble.n	80139da <__sflush_r+0xae>
 8013a06:	6a21      	ldr	r1, [r4, #32]
 8013a08:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8013a0a:	4643      	mov	r3, r8
 8013a0c:	463a      	mov	r2, r7
 8013a0e:	4628      	mov	r0, r5
 8013a10:	47b0      	blx	r6
 8013a12:	2800      	cmp	r0, #0
 8013a14:	dc08      	bgt.n	8013a28 <__sflush_r+0xfc>
 8013a16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013a1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013a1e:	81a3      	strh	r3, [r4, #12]
 8013a20:	f04f 30ff 	mov.w	r0, #4294967295
 8013a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a28:	4407      	add	r7, r0
 8013a2a:	eba8 0800 	sub.w	r8, r8, r0
 8013a2e:	e7e7      	b.n	8013a00 <__sflush_r+0xd4>
 8013a30:	dfbffffe 	.word	0xdfbffffe

08013a34 <_fflush_r>:
 8013a34:	b538      	push	{r3, r4, r5, lr}
 8013a36:	690b      	ldr	r3, [r1, #16]
 8013a38:	4605      	mov	r5, r0
 8013a3a:	460c      	mov	r4, r1
 8013a3c:	b913      	cbnz	r3, 8013a44 <_fflush_r+0x10>
 8013a3e:	2500      	movs	r5, #0
 8013a40:	4628      	mov	r0, r5
 8013a42:	bd38      	pop	{r3, r4, r5, pc}
 8013a44:	b118      	cbz	r0, 8013a4e <_fflush_r+0x1a>
 8013a46:	6a03      	ldr	r3, [r0, #32]
 8013a48:	b90b      	cbnz	r3, 8013a4e <_fflush_r+0x1a>
 8013a4a:	f7fe fa75 	bl	8011f38 <__sinit>
 8013a4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d0f3      	beq.n	8013a3e <_fflush_r+0xa>
 8013a56:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013a58:	07d0      	lsls	r0, r2, #31
 8013a5a:	d404      	bmi.n	8013a66 <_fflush_r+0x32>
 8013a5c:	0599      	lsls	r1, r3, #22
 8013a5e:	d402      	bmi.n	8013a66 <_fflush_r+0x32>
 8013a60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013a62:	f7fe fc08 	bl	8012276 <__retarget_lock_acquire_recursive>
 8013a66:	4628      	mov	r0, r5
 8013a68:	4621      	mov	r1, r4
 8013a6a:	f7ff ff5f 	bl	801392c <__sflush_r>
 8013a6e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013a70:	07da      	lsls	r2, r3, #31
 8013a72:	4605      	mov	r5, r0
 8013a74:	d4e4      	bmi.n	8013a40 <_fflush_r+0xc>
 8013a76:	89a3      	ldrh	r3, [r4, #12]
 8013a78:	059b      	lsls	r3, r3, #22
 8013a7a:	d4e1      	bmi.n	8013a40 <_fflush_r+0xc>
 8013a7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013a7e:	f7fe fbfb 	bl	8012278 <__retarget_lock_release_recursive>
 8013a82:	e7dd      	b.n	8013a40 <_fflush_r+0xc>

08013a84 <memmove>:
 8013a84:	4288      	cmp	r0, r1
 8013a86:	b510      	push	{r4, lr}
 8013a88:	eb01 0402 	add.w	r4, r1, r2
 8013a8c:	d902      	bls.n	8013a94 <memmove+0x10>
 8013a8e:	4284      	cmp	r4, r0
 8013a90:	4623      	mov	r3, r4
 8013a92:	d807      	bhi.n	8013aa4 <memmove+0x20>
 8013a94:	1e43      	subs	r3, r0, #1
 8013a96:	42a1      	cmp	r1, r4
 8013a98:	d008      	beq.n	8013aac <memmove+0x28>
 8013a9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013a9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013aa2:	e7f8      	b.n	8013a96 <memmove+0x12>
 8013aa4:	4402      	add	r2, r0
 8013aa6:	4601      	mov	r1, r0
 8013aa8:	428a      	cmp	r2, r1
 8013aaa:	d100      	bne.n	8013aae <memmove+0x2a>
 8013aac:	bd10      	pop	{r4, pc}
 8013aae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013ab2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013ab6:	e7f7      	b.n	8013aa8 <memmove+0x24>

08013ab8 <__assert_func>:
 8013ab8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013aba:	4614      	mov	r4, r2
 8013abc:	461a      	mov	r2, r3
 8013abe:	4b09      	ldr	r3, [pc, #36]	@ (8013ae4 <__assert_func+0x2c>)
 8013ac0:	681b      	ldr	r3, [r3, #0]
 8013ac2:	4605      	mov	r5, r0
 8013ac4:	68d8      	ldr	r0, [r3, #12]
 8013ac6:	b954      	cbnz	r4, 8013ade <__assert_func+0x26>
 8013ac8:	4b07      	ldr	r3, [pc, #28]	@ (8013ae8 <__assert_func+0x30>)
 8013aca:	461c      	mov	r4, r3
 8013acc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013ad0:	9100      	str	r1, [sp, #0]
 8013ad2:	462b      	mov	r3, r5
 8013ad4:	4905      	ldr	r1, [pc, #20]	@ (8013aec <__assert_func+0x34>)
 8013ad6:	f000 f821 	bl	8013b1c <fiprintf>
 8013ada:	f000 f831 	bl	8013b40 <abort>
 8013ade:	4b04      	ldr	r3, [pc, #16]	@ (8013af0 <__assert_func+0x38>)
 8013ae0:	e7f4      	b.n	8013acc <__assert_func+0x14>
 8013ae2:	bf00      	nop
 8013ae4:	20000458 	.word	0x20000458
 8013ae8:	08014766 	.word	0x08014766
 8013aec:	08014738 	.word	0x08014738
 8013af0:	0801472b 	.word	0x0801472b

08013af4 <_calloc_r>:
 8013af4:	b570      	push	{r4, r5, r6, lr}
 8013af6:	fba1 5402 	umull	r5, r4, r1, r2
 8013afa:	b93c      	cbnz	r4, 8013b0c <_calloc_r+0x18>
 8013afc:	4629      	mov	r1, r5
 8013afe:	f7fd fabd 	bl	801107c <_malloc_r>
 8013b02:	4606      	mov	r6, r0
 8013b04:	b928      	cbnz	r0, 8013b12 <_calloc_r+0x1e>
 8013b06:	2600      	movs	r6, #0
 8013b08:	4630      	mov	r0, r6
 8013b0a:	bd70      	pop	{r4, r5, r6, pc}
 8013b0c:	220c      	movs	r2, #12
 8013b0e:	6002      	str	r2, [r0, #0]
 8013b10:	e7f9      	b.n	8013b06 <_calloc_r+0x12>
 8013b12:	462a      	mov	r2, r5
 8013b14:	4621      	mov	r1, r4
 8013b16:	f7fe fabc 	bl	8012092 <memset>
 8013b1a:	e7f5      	b.n	8013b08 <_calloc_r+0x14>

08013b1c <fiprintf>:
 8013b1c:	b40e      	push	{r1, r2, r3}
 8013b1e:	b503      	push	{r0, r1, lr}
 8013b20:	4601      	mov	r1, r0
 8013b22:	ab03      	add	r3, sp, #12
 8013b24:	4805      	ldr	r0, [pc, #20]	@ (8013b3c <fiprintf+0x20>)
 8013b26:	f853 2b04 	ldr.w	r2, [r3], #4
 8013b2a:	6800      	ldr	r0, [r0, #0]
 8013b2c:	9301      	str	r3, [sp, #4]
 8013b2e:	f000 f837 	bl	8013ba0 <_vfiprintf_r>
 8013b32:	b002      	add	sp, #8
 8013b34:	f85d eb04 	ldr.w	lr, [sp], #4
 8013b38:	b003      	add	sp, #12
 8013b3a:	4770      	bx	lr
 8013b3c:	20000458 	.word	0x20000458

08013b40 <abort>:
 8013b40:	b508      	push	{r3, lr}
 8013b42:	2006      	movs	r0, #6
 8013b44:	f000 fa00 	bl	8013f48 <raise>
 8013b48:	2001      	movs	r0, #1
 8013b4a:	f7ef fdc3 	bl	80036d4 <_exit>

08013b4e <__sfputc_r>:
 8013b4e:	6893      	ldr	r3, [r2, #8]
 8013b50:	3b01      	subs	r3, #1
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	b410      	push	{r4}
 8013b56:	6093      	str	r3, [r2, #8]
 8013b58:	da08      	bge.n	8013b6c <__sfputc_r+0x1e>
 8013b5a:	6994      	ldr	r4, [r2, #24]
 8013b5c:	42a3      	cmp	r3, r4
 8013b5e:	db01      	blt.n	8013b64 <__sfputc_r+0x16>
 8013b60:	290a      	cmp	r1, #10
 8013b62:	d103      	bne.n	8013b6c <__sfputc_r+0x1e>
 8013b64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013b68:	f000 b932 	b.w	8013dd0 <__swbuf_r>
 8013b6c:	6813      	ldr	r3, [r2, #0]
 8013b6e:	1c58      	adds	r0, r3, #1
 8013b70:	6010      	str	r0, [r2, #0]
 8013b72:	7019      	strb	r1, [r3, #0]
 8013b74:	4608      	mov	r0, r1
 8013b76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013b7a:	4770      	bx	lr

08013b7c <__sfputs_r>:
 8013b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b7e:	4606      	mov	r6, r0
 8013b80:	460f      	mov	r7, r1
 8013b82:	4614      	mov	r4, r2
 8013b84:	18d5      	adds	r5, r2, r3
 8013b86:	42ac      	cmp	r4, r5
 8013b88:	d101      	bne.n	8013b8e <__sfputs_r+0x12>
 8013b8a:	2000      	movs	r0, #0
 8013b8c:	e007      	b.n	8013b9e <__sfputs_r+0x22>
 8013b8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b92:	463a      	mov	r2, r7
 8013b94:	4630      	mov	r0, r6
 8013b96:	f7ff ffda 	bl	8013b4e <__sfputc_r>
 8013b9a:	1c43      	adds	r3, r0, #1
 8013b9c:	d1f3      	bne.n	8013b86 <__sfputs_r+0xa>
 8013b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013ba0 <_vfiprintf_r>:
 8013ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ba4:	460d      	mov	r5, r1
 8013ba6:	b09d      	sub	sp, #116	@ 0x74
 8013ba8:	4614      	mov	r4, r2
 8013baa:	4698      	mov	r8, r3
 8013bac:	4606      	mov	r6, r0
 8013bae:	b118      	cbz	r0, 8013bb8 <_vfiprintf_r+0x18>
 8013bb0:	6a03      	ldr	r3, [r0, #32]
 8013bb2:	b90b      	cbnz	r3, 8013bb8 <_vfiprintf_r+0x18>
 8013bb4:	f7fe f9c0 	bl	8011f38 <__sinit>
 8013bb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013bba:	07d9      	lsls	r1, r3, #31
 8013bbc:	d405      	bmi.n	8013bca <_vfiprintf_r+0x2a>
 8013bbe:	89ab      	ldrh	r3, [r5, #12]
 8013bc0:	059a      	lsls	r2, r3, #22
 8013bc2:	d402      	bmi.n	8013bca <_vfiprintf_r+0x2a>
 8013bc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013bc6:	f7fe fb56 	bl	8012276 <__retarget_lock_acquire_recursive>
 8013bca:	89ab      	ldrh	r3, [r5, #12]
 8013bcc:	071b      	lsls	r3, r3, #28
 8013bce:	d501      	bpl.n	8013bd4 <_vfiprintf_r+0x34>
 8013bd0:	692b      	ldr	r3, [r5, #16]
 8013bd2:	b99b      	cbnz	r3, 8013bfc <_vfiprintf_r+0x5c>
 8013bd4:	4629      	mov	r1, r5
 8013bd6:	4630      	mov	r0, r6
 8013bd8:	f000 f938 	bl	8013e4c <__swsetup_r>
 8013bdc:	b170      	cbz	r0, 8013bfc <_vfiprintf_r+0x5c>
 8013bde:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013be0:	07dc      	lsls	r4, r3, #31
 8013be2:	d504      	bpl.n	8013bee <_vfiprintf_r+0x4e>
 8013be4:	f04f 30ff 	mov.w	r0, #4294967295
 8013be8:	b01d      	add	sp, #116	@ 0x74
 8013bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bee:	89ab      	ldrh	r3, [r5, #12]
 8013bf0:	0598      	lsls	r0, r3, #22
 8013bf2:	d4f7      	bmi.n	8013be4 <_vfiprintf_r+0x44>
 8013bf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013bf6:	f7fe fb3f 	bl	8012278 <__retarget_lock_release_recursive>
 8013bfa:	e7f3      	b.n	8013be4 <_vfiprintf_r+0x44>
 8013bfc:	2300      	movs	r3, #0
 8013bfe:	9309      	str	r3, [sp, #36]	@ 0x24
 8013c00:	2320      	movs	r3, #32
 8013c02:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013c06:	f8cd 800c 	str.w	r8, [sp, #12]
 8013c0a:	2330      	movs	r3, #48	@ 0x30
 8013c0c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013dbc <_vfiprintf_r+0x21c>
 8013c10:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013c14:	f04f 0901 	mov.w	r9, #1
 8013c18:	4623      	mov	r3, r4
 8013c1a:	469a      	mov	sl, r3
 8013c1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013c20:	b10a      	cbz	r2, 8013c26 <_vfiprintf_r+0x86>
 8013c22:	2a25      	cmp	r2, #37	@ 0x25
 8013c24:	d1f9      	bne.n	8013c1a <_vfiprintf_r+0x7a>
 8013c26:	ebba 0b04 	subs.w	fp, sl, r4
 8013c2a:	d00b      	beq.n	8013c44 <_vfiprintf_r+0xa4>
 8013c2c:	465b      	mov	r3, fp
 8013c2e:	4622      	mov	r2, r4
 8013c30:	4629      	mov	r1, r5
 8013c32:	4630      	mov	r0, r6
 8013c34:	f7ff ffa2 	bl	8013b7c <__sfputs_r>
 8013c38:	3001      	adds	r0, #1
 8013c3a:	f000 80a7 	beq.w	8013d8c <_vfiprintf_r+0x1ec>
 8013c3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013c40:	445a      	add	r2, fp
 8013c42:	9209      	str	r2, [sp, #36]	@ 0x24
 8013c44:	f89a 3000 	ldrb.w	r3, [sl]
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	f000 809f 	beq.w	8013d8c <_vfiprintf_r+0x1ec>
 8013c4e:	2300      	movs	r3, #0
 8013c50:	f04f 32ff 	mov.w	r2, #4294967295
 8013c54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013c58:	f10a 0a01 	add.w	sl, sl, #1
 8013c5c:	9304      	str	r3, [sp, #16]
 8013c5e:	9307      	str	r3, [sp, #28]
 8013c60:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013c64:	931a      	str	r3, [sp, #104]	@ 0x68
 8013c66:	4654      	mov	r4, sl
 8013c68:	2205      	movs	r2, #5
 8013c6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c6e:	4853      	ldr	r0, [pc, #332]	@ (8013dbc <_vfiprintf_r+0x21c>)
 8013c70:	f7ec fae6 	bl	8000240 <memchr>
 8013c74:	9a04      	ldr	r2, [sp, #16]
 8013c76:	b9d8      	cbnz	r0, 8013cb0 <_vfiprintf_r+0x110>
 8013c78:	06d1      	lsls	r1, r2, #27
 8013c7a:	bf44      	itt	mi
 8013c7c:	2320      	movmi	r3, #32
 8013c7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013c82:	0713      	lsls	r3, r2, #28
 8013c84:	bf44      	itt	mi
 8013c86:	232b      	movmi	r3, #43	@ 0x2b
 8013c88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013c8c:	f89a 3000 	ldrb.w	r3, [sl]
 8013c90:	2b2a      	cmp	r3, #42	@ 0x2a
 8013c92:	d015      	beq.n	8013cc0 <_vfiprintf_r+0x120>
 8013c94:	9a07      	ldr	r2, [sp, #28]
 8013c96:	4654      	mov	r4, sl
 8013c98:	2000      	movs	r0, #0
 8013c9a:	f04f 0c0a 	mov.w	ip, #10
 8013c9e:	4621      	mov	r1, r4
 8013ca0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013ca4:	3b30      	subs	r3, #48	@ 0x30
 8013ca6:	2b09      	cmp	r3, #9
 8013ca8:	d94b      	bls.n	8013d42 <_vfiprintf_r+0x1a2>
 8013caa:	b1b0      	cbz	r0, 8013cda <_vfiprintf_r+0x13a>
 8013cac:	9207      	str	r2, [sp, #28]
 8013cae:	e014      	b.n	8013cda <_vfiprintf_r+0x13a>
 8013cb0:	eba0 0308 	sub.w	r3, r0, r8
 8013cb4:	fa09 f303 	lsl.w	r3, r9, r3
 8013cb8:	4313      	orrs	r3, r2
 8013cba:	9304      	str	r3, [sp, #16]
 8013cbc:	46a2      	mov	sl, r4
 8013cbe:	e7d2      	b.n	8013c66 <_vfiprintf_r+0xc6>
 8013cc0:	9b03      	ldr	r3, [sp, #12]
 8013cc2:	1d19      	adds	r1, r3, #4
 8013cc4:	681b      	ldr	r3, [r3, #0]
 8013cc6:	9103      	str	r1, [sp, #12]
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	bfbb      	ittet	lt
 8013ccc:	425b      	neglt	r3, r3
 8013cce:	f042 0202 	orrlt.w	r2, r2, #2
 8013cd2:	9307      	strge	r3, [sp, #28]
 8013cd4:	9307      	strlt	r3, [sp, #28]
 8013cd6:	bfb8      	it	lt
 8013cd8:	9204      	strlt	r2, [sp, #16]
 8013cda:	7823      	ldrb	r3, [r4, #0]
 8013cdc:	2b2e      	cmp	r3, #46	@ 0x2e
 8013cde:	d10a      	bne.n	8013cf6 <_vfiprintf_r+0x156>
 8013ce0:	7863      	ldrb	r3, [r4, #1]
 8013ce2:	2b2a      	cmp	r3, #42	@ 0x2a
 8013ce4:	d132      	bne.n	8013d4c <_vfiprintf_r+0x1ac>
 8013ce6:	9b03      	ldr	r3, [sp, #12]
 8013ce8:	1d1a      	adds	r2, r3, #4
 8013cea:	681b      	ldr	r3, [r3, #0]
 8013cec:	9203      	str	r2, [sp, #12]
 8013cee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013cf2:	3402      	adds	r4, #2
 8013cf4:	9305      	str	r3, [sp, #20]
 8013cf6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013dcc <_vfiprintf_r+0x22c>
 8013cfa:	7821      	ldrb	r1, [r4, #0]
 8013cfc:	2203      	movs	r2, #3
 8013cfe:	4650      	mov	r0, sl
 8013d00:	f7ec fa9e 	bl	8000240 <memchr>
 8013d04:	b138      	cbz	r0, 8013d16 <_vfiprintf_r+0x176>
 8013d06:	9b04      	ldr	r3, [sp, #16]
 8013d08:	eba0 000a 	sub.w	r0, r0, sl
 8013d0c:	2240      	movs	r2, #64	@ 0x40
 8013d0e:	4082      	lsls	r2, r0
 8013d10:	4313      	orrs	r3, r2
 8013d12:	3401      	adds	r4, #1
 8013d14:	9304      	str	r3, [sp, #16]
 8013d16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013d1a:	4829      	ldr	r0, [pc, #164]	@ (8013dc0 <_vfiprintf_r+0x220>)
 8013d1c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013d20:	2206      	movs	r2, #6
 8013d22:	f7ec fa8d 	bl	8000240 <memchr>
 8013d26:	2800      	cmp	r0, #0
 8013d28:	d03f      	beq.n	8013daa <_vfiprintf_r+0x20a>
 8013d2a:	4b26      	ldr	r3, [pc, #152]	@ (8013dc4 <_vfiprintf_r+0x224>)
 8013d2c:	bb1b      	cbnz	r3, 8013d76 <_vfiprintf_r+0x1d6>
 8013d2e:	9b03      	ldr	r3, [sp, #12]
 8013d30:	3307      	adds	r3, #7
 8013d32:	f023 0307 	bic.w	r3, r3, #7
 8013d36:	3308      	adds	r3, #8
 8013d38:	9303      	str	r3, [sp, #12]
 8013d3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013d3c:	443b      	add	r3, r7
 8013d3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8013d40:	e76a      	b.n	8013c18 <_vfiprintf_r+0x78>
 8013d42:	fb0c 3202 	mla	r2, ip, r2, r3
 8013d46:	460c      	mov	r4, r1
 8013d48:	2001      	movs	r0, #1
 8013d4a:	e7a8      	b.n	8013c9e <_vfiprintf_r+0xfe>
 8013d4c:	2300      	movs	r3, #0
 8013d4e:	3401      	adds	r4, #1
 8013d50:	9305      	str	r3, [sp, #20]
 8013d52:	4619      	mov	r1, r3
 8013d54:	f04f 0c0a 	mov.w	ip, #10
 8013d58:	4620      	mov	r0, r4
 8013d5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013d5e:	3a30      	subs	r2, #48	@ 0x30
 8013d60:	2a09      	cmp	r2, #9
 8013d62:	d903      	bls.n	8013d6c <_vfiprintf_r+0x1cc>
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d0c6      	beq.n	8013cf6 <_vfiprintf_r+0x156>
 8013d68:	9105      	str	r1, [sp, #20]
 8013d6a:	e7c4      	b.n	8013cf6 <_vfiprintf_r+0x156>
 8013d6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8013d70:	4604      	mov	r4, r0
 8013d72:	2301      	movs	r3, #1
 8013d74:	e7f0      	b.n	8013d58 <_vfiprintf_r+0x1b8>
 8013d76:	ab03      	add	r3, sp, #12
 8013d78:	9300      	str	r3, [sp, #0]
 8013d7a:	462a      	mov	r2, r5
 8013d7c:	4b12      	ldr	r3, [pc, #72]	@ (8013dc8 <_vfiprintf_r+0x228>)
 8013d7e:	a904      	add	r1, sp, #16
 8013d80:	4630      	mov	r0, r6
 8013d82:	f3af 8000 	nop.w
 8013d86:	4607      	mov	r7, r0
 8013d88:	1c78      	adds	r0, r7, #1
 8013d8a:	d1d6      	bne.n	8013d3a <_vfiprintf_r+0x19a>
 8013d8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013d8e:	07d9      	lsls	r1, r3, #31
 8013d90:	d405      	bmi.n	8013d9e <_vfiprintf_r+0x1fe>
 8013d92:	89ab      	ldrh	r3, [r5, #12]
 8013d94:	059a      	lsls	r2, r3, #22
 8013d96:	d402      	bmi.n	8013d9e <_vfiprintf_r+0x1fe>
 8013d98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013d9a:	f7fe fa6d 	bl	8012278 <__retarget_lock_release_recursive>
 8013d9e:	89ab      	ldrh	r3, [r5, #12]
 8013da0:	065b      	lsls	r3, r3, #25
 8013da2:	f53f af1f 	bmi.w	8013be4 <_vfiprintf_r+0x44>
 8013da6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013da8:	e71e      	b.n	8013be8 <_vfiprintf_r+0x48>
 8013daa:	ab03      	add	r3, sp, #12
 8013dac:	9300      	str	r3, [sp, #0]
 8013dae:	462a      	mov	r2, r5
 8013db0:	4b05      	ldr	r3, [pc, #20]	@ (8013dc8 <_vfiprintf_r+0x228>)
 8013db2:	a904      	add	r1, sp, #16
 8013db4:	4630      	mov	r0, r6
 8013db6:	f7ff fc99 	bl	80136ec <_printf_i>
 8013dba:	e7e4      	b.n	8013d86 <_vfiprintf_r+0x1e6>
 8013dbc:	080146f8 	.word	0x080146f8
 8013dc0:	08014702 	.word	0x08014702
 8013dc4:	00000000 	.word	0x00000000
 8013dc8:	08013b7d 	.word	0x08013b7d
 8013dcc:	080146fe 	.word	0x080146fe

08013dd0 <__swbuf_r>:
 8013dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013dd2:	460e      	mov	r6, r1
 8013dd4:	4614      	mov	r4, r2
 8013dd6:	4605      	mov	r5, r0
 8013dd8:	b118      	cbz	r0, 8013de2 <__swbuf_r+0x12>
 8013dda:	6a03      	ldr	r3, [r0, #32]
 8013ddc:	b90b      	cbnz	r3, 8013de2 <__swbuf_r+0x12>
 8013dde:	f7fe f8ab 	bl	8011f38 <__sinit>
 8013de2:	69a3      	ldr	r3, [r4, #24]
 8013de4:	60a3      	str	r3, [r4, #8]
 8013de6:	89a3      	ldrh	r3, [r4, #12]
 8013de8:	071a      	lsls	r2, r3, #28
 8013dea:	d501      	bpl.n	8013df0 <__swbuf_r+0x20>
 8013dec:	6923      	ldr	r3, [r4, #16]
 8013dee:	b943      	cbnz	r3, 8013e02 <__swbuf_r+0x32>
 8013df0:	4621      	mov	r1, r4
 8013df2:	4628      	mov	r0, r5
 8013df4:	f000 f82a 	bl	8013e4c <__swsetup_r>
 8013df8:	b118      	cbz	r0, 8013e02 <__swbuf_r+0x32>
 8013dfa:	f04f 37ff 	mov.w	r7, #4294967295
 8013dfe:	4638      	mov	r0, r7
 8013e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e02:	6823      	ldr	r3, [r4, #0]
 8013e04:	6922      	ldr	r2, [r4, #16]
 8013e06:	1a98      	subs	r0, r3, r2
 8013e08:	6963      	ldr	r3, [r4, #20]
 8013e0a:	b2f6      	uxtb	r6, r6
 8013e0c:	4283      	cmp	r3, r0
 8013e0e:	4637      	mov	r7, r6
 8013e10:	dc05      	bgt.n	8013e1e <__swbuf_r+0x4e>
 8013e12:	4621      	mov	r1, r4
 8013e14:	4628      	mov	r0, r5
 8013e16:	f7ff fe0d 	bl	8013a34 <_fflush_r>
 8013e1a:	2800      	cmp	r0, #0
 8013e1c:	d1ed      	bne.n	8013dfa <__swbuf_r+0x2a>
 8013e1e:	68a3      	ldr	r3, [r4, #8]
 8013e20:	3b01      	subs	r3, #1
 8013e22:	60a3      	str	r3, [r4, #8]
 8013e24:	6823      	ldr	r3, [r4, #0]
 8013e26:	1c5a      	adds	r2, r3, #1
 8013e28:	6022      	str	r2, [r4, #0]
 8013e2a:	701e      	strb	r6, [r3, #0]
 8013e2c:	6962      	ldr	r2, [r4, #20]
 8013e2e:	1c43      	adds	r3, r0, #1
 8013e30:	429a      	cmp	r2, r3
 8013e32:	d004      	beq.n	8013e3e <__swbuf_r+0x6e>
 8013e34:	89a3      	ldrh	r3, [r4, #12]
 8013e36:	07db      	lsls	r3, r3, #31
 8013e38:	d5e1      	bpl.n	8013dfe <__swbuf_r+0x2e>
 8013e3a:	2e0a      	cmp	r6, #10
 8013e3c:	d1df      	bne.n	8013dfe <__swbuf_r+0x2e>
 8013e3e:	4621      	mov	r1, r4
 8013e40:	4628      	mov	r0, r5
 8013e42:	f7ff fdf7 	bl	8013a34 <_fflush_r>
 8013e46:	2800      	cmp	r0, #0
 8013e48:	d0d9      	beq.n	8013dfe <__swbuf_r+0x2e>
 8013e4a:	e7d6      	b.n	8013dfa <__swbuf_r+0x2a>

08013e4c <__swsetup_r>:
 8013e4c:	b538      	push	{r3, r4, r5, lr}
 8013e4e:	4b29      	ldr	r3, [pc, #164]	@ (8013ef4 <__swsetup_r+0xa8>)
 8013e50:	4605      	mov	r5, r0
 8013e52:	6818      	ldr	r0, [r3, #0]
 8013e54:	460c      	mov	r4, r1
 8013e56:	b118      	cbz	r0, 8013e60 <__swsetup_r+0x14>
 8013e58:	6a03      	ldr	r3, [r0, #32]
 8013e5a:	b90b      	cbnz	r3, 8013e60 <__swsetup_r+0x14>
 8013e5c:	f7fe f86c 	bl	8011f38 <__sinit>
 8013e60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013e64:	0719      	lsls	r1, r3, #28
 8013e66:	d422      	bmi.n	8013eae <__swsetup_r+0x62>
 8013e68:	06da      	lsls	r2, r3, #27
 8013e6a:	d407      	bmi.n	8013e7c <__swsetup_r+0x30>
 8013e6c:	2209      	movs	r2, #9
 8013e6e:	602a      	str	r2, [r5, #0]
 8013e70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013e74:	81a3      	strh	r3, [r4, #12]
 8013e76:	f04f 30ff 	mov.w	r0, #4294967295
 8013e7a:	e033      	b.n	8013ee4 <__swsetup_r+0x98>
 8013e7c:	0758      	lsls	r0, r3, #29
 8013e7e:	d512      	bpl.n	8013ea6 <__swsetup_r+0x5a>
 8013e80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013e82:	b141      	cbz	r1, 8013e96 <__swsetup_r+0x4a>
 8013e84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013e88:	4299      	cmp	r1, r3
 8013e8a:	d002      	beq.n	8013e92 <__swsetup_r+0x46>
 8013e8c:	4628      	mov	r0, r5
 8013e8e:	f7fe fa0b 	bl	80122a8 <_free_r>
 8013e92:	2300      	movs	r3, #0
 8013e94:	6363      	str	r3, [r4, #52]	@ 0x34
 8013e96:	89a3      	ldrh	r3, [r4, #12]
 8013e98:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013e9c:	81a3      	strh	r3, [r4, #12]
 8013e9e:	2300      	movs	r3, #0
 8013ea0:	6063      	str	r3, [r4, #4]
 8013ea2:	6923      	ldr	r3, [r4, #16]
 8013ea4:	6023      	str	r3, [r4, #0]
 8013ea6:	89a3      	ldrh	r3, [r4, #12]
 8013ea8:	f043 0308 	orr.w	r3, r3, #8
 8013eac:	81a3      	strh	r3, [r4, #12]
 8013eae:	6923      	ldr	r3, [r4, #16]
 8013eb0:	b94b      	cbnz	r3, 8013ec6 <__swsetup_r+0x7a>
 8013eb2:	89a3      	ldrh	r3, [r4, #12]
 8013eb4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013eb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013ebc:	d003      	beq.n	8013ec6 <__swsetup_r+0x7a>
 8013ebe:	4621      	mov	r1, r4
 8013ec0:	4628      	mov	r0, r5
 8013ec2:	f000 f883 	bl	8013fcc <__smakebuf_r>
 8013ec6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013eca:	f013 0201 	ands.w	r2, r3, #1
 8013ece:	d00a      	beq.n	8013ee6 <__swsetup_r+0x9a>
 8013ed0:	2200      	movs	r2, #0
 8013ed2:	60a2      	str	r2, [r4, #8]
 8013ed4:	6962      	ldr	r2, [r4, #20]
 8013ed6:	4252      	negs	r2, r2
 8013ed8:	61a2      	str	r2, [r4, #24]
 8013eda:	6922      	ldr	r2, [r4, #16]
 8013edc:	b942      	cbnz	r2, 8013ef0 <__swsetup_r+0xa4>
 8013ede:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013ee2:	d1c5      	bne.n	8013e70 <__swsetup_r+0x24>
 8013ee4:	bd38      	pop	{r3, r4, r5, pc}
 8013ee6:	0799      	lsls	r1, r3, #30
 8013ee8:	bf58      	it	pl
 8013eea:	6962      	ldrpl	r2, [r4, #20]
 8013eec:	60a2      	str	r2, [r4, #8]
 8013eee:	e7f4      	b.n	8013eda <__swsetup_r+0x8e>
 8013ef0:	2000      	movs	r0, #0
 8013ef2:	e7f7      	b.n	8013ee4 <__swsetup_r+0x98>
 8013ef4:	20000458 	.word	0x20000458

08013ef8 <_raise_r>:
 8013ef8:	291f      	cmp	r1, #31
 8013efa:	b538      	push	{r3, r4, r5, lr}
 8013efc:	4605      	mov	r5, r0
 8013efe:	460c      	mov	r4, r1
 8013f00:	d904      	bls.n	8013f0c <_raise_r+0x14>
 8013f02:	2316      	movs	r3, #22
 8013f04:	6003      	str	r3, [r0, #0]
 8013f06:	f04f 30ff 	mov.w	r0, #4294967295
 8013f0a:	bd38      	pop	{r3, r4, r5, pc}
 8013f0c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013f0e:	b112      	cbz	r2, 8013f16 <_raise_r+0x1e>
 8013f10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013f14:	b94b      	cbnz	r3, 8013f2a <_raise_r+0x32>
 8013f16:	4628      	mov	r0, r5
 8013f18:	f000 f830 	bl	8013f7c <_getpid_r>
 8013f1c:	4622      	mov	r2, r4
 8013f1e:	4601      	mov	r1, r0
 8013f20:	4628      	mov	r0, r5
 8013f22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013f26:	f000 b817 	b.w	8013f58 <_kill_r>
 8013f2a:	2b01      	cmp	r3, #1
 8013f2c:	d00a      	beq.n	8013f44 <_raise_r+0x4c>
 8013f2e:	1c59      	adds	r1, r3, #1
 8013f30:	d103      	bne.n	8013f3a <_raise_r+0x42>
 8013f32:	2316      	movs	r3, #22
 8013f34:	6003      	str	r3, [r0, #0]
 8013f36:	2001      	movs	r0, #1
 8013f38:	e7e7      	b.n	8013f0a <_raise_r+0x12>
 8013f3a:	2100      	movs	r1, #0
 8013f3c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013f40:	4620      	mov	r0, r4
 8013f42:	4798      	blx	r3
 8013f44:	2000      	movs	r0, #0
 8013f46:	e7e0      	b.n	8013f0a <_raise_r+0x12>

08013f48 <raise>:
 8013f48:	4b02      	ldr	r3, [pc, #8]	@ (8013f54 <raise+0xc>)
 8013f4a:	4601      	mov	r1, r0
 8013f4c:	6818      	ldr	r0, [r3, #0]
 8013f4e:	f7ff bfd3 	b.w	8013ef8 <_raise_r>
 8013f52:	bf00      	nop
 8013f54:	20000458 	.word	0x20000458

08013f58 <_kill_r>:
 8013f58:	b538      	push	{r3, r4, r5, lr}
 8013f5a:	4d07      	ldr	r5, [pc, #28]	@ (8013f78 <_kill_r+0x20>)
 8013f5c:	2300      	movs	r3, #0
 8013f5e:	4604      	mov	r4, r0
 8013f60:	4608      	mov	r0, r1
 8013f62:	4611      	mov	r1, r2
 8013f64:	602b      	str	r3, [r5, #0]
 8013f66:	f7ef fba5 	bl	80036b4 <_kill>
 8013f6a:	1c43      	adds	r3, r0, #1
 8013f6c:	d102      	bne.n	8013f74 <_kill_r+0x1c>
 8013f6e:	682b      	ldr	r3, [r5, #0]
 8013f70:	b103      	cbz	r3, 8013f74 <_kill_r+0x1c>
 8013f72:	6023      	str	r3, [r4, #0]
 8013f74:	bd38      	pop	{r3, r4, r5, pc}
 8013f76:	bf00      	nop
 8013f78:	2000585c 	.word	0x2000585c

08013f7c <_getpid_r>:
 8013f7c:	f7ef bb92 	b.w	80036a4 <_getpid>

08013f80 <__swhatbuf_r>:
 8013f80:	b570      	push	{r4, r5, r6, lr}
 8013f82:	460c      	mov	r4, r1
 8013f84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013f88:	2900      	cmp	r1, #0
 8013f8a:	b096      	sub	sp, #88	@ 0x58
 8013f8c:	4615      	mov	r5, r2
 8013f8e:	461e      	mov	r6, r3
 8013f90:	da0d      	bge.n	8013fae <__swhatbuf_r+0x2e>
 8013f92:	89a3      	ldrh	r3, [r4, #12]
 8013f94:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013f98:	f04f 0100 	mov.w	r1, #0
 8013f9c:	bf14      	ite	ne
 8013f9e:	2340      	movne	r3, #64	@ 0x40
 8013fa0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013fa4:	2000      	movs	r0, #0
 8013fa6:	6031      	str	r1, [r6, #0]
 8013fa8:	602b      	str	r3, [r5, #0]
 8013faa:	b016      	add	sp, #88	@ 0x58
 8013fac:	bd70      	pop	{r4, r5, r6, pc}
 8013fae:	466a      	mov	r2, sp
 8013fb0:	f000 f848 	bl	8014044 <_fstat_r>
 8013fb4:	2800      	cmp	r0, #0
 8013fb6:	dbec      	blt.n	8013f92 <__swhatbuf_r+0x12>
 8013fb8:	9901      	ldr	r1, [sp, #4]
 8013fba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013fbe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013fc2:	4259      	negs	r1, r3
 8013fc4:	4159      	adcs	r1, r3
 8013fc6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013fca:	e7eb      	b.n	8013fa4 <__swhatbuf_r+0x24>

08013fcc <__smakebuf_r>:
 8013fcc:	898b      	ldrh	r3, [r1, #12]
 8013fce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013fd0:	079d      	lsls	r5, r3, #30
 8013fd2:	4606      	mov	r6, r0
 8013fd4:	460c      	mov	r4, r1
 8013fd6:	d507      	bpl.n	8013fe8 <__smakebuf_r+0x1c>
 8013fd8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013fdc:	6023      	str	r3, [r4, #0]
 8013fde:	6123      	str	r3, [r4, #16]
 8013fe0:	2301      	movs	r3, #1
 8013fe2:	6163      	str	r3, [r4, #20]
 8013fe4:	b003      	add	sp, #12
 8013fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013fe8:	ab01      	add	r3, sp, #4
 8013fea:	466a      	mov	r2, sp
 8013fec:	f7ff ffc8 	bl	8013f80 <__swhatbuf_r>
 8013ff0:	9f00      	ldr	r7, [sp, #0]
 8013ff2:	4605      	mov	r5, r0
 8013ff4:	4639      	mov	r1, r7
 8013ff6:	4630      	mov	r0, r6
 8013ff8:	f7fd f840 	bl	801107c <_malloc_r>
 8013ffc:	b948      	cbnz	r0, 8014012 <__smakebuf_r+0x46>
 8013ffe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014002:	059a      	lsls	r2, r3, #22
 8014004:	d4ee      	bmi.n	8013fe4 <__smakebuf_r+0x18>
 8014006:	f023 0303 	bic.w	r3, r3, #3
 801400a:	f043 0302 	orr.w	r3, r3, #2
 801400e:	81a3      	strh	r3, [r4, #12]
 8014010:	e7e2      	b.n	8013fd8 <__smakebuf_r+0xc>
 8014012:	89a3      	ldrh	r3, [r4, #12]
 8014014:	6020      	str	r0, [r4, #0]
 8014016:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801401a:	81a3      	strh	r3, [r4, #12]
 801401c:	9b01      	ldr	r3, [sp, #4]
 801401e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014022:	b15b      	cbz	r3, 801403c <__smakebuf_r+0x70>
 8014024:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014028:	4630      	mov	r0, r6
 801402a:	f000 f81d 	bl	8014068 <_isatty_r>
 801402e:	b128      	cbz	r0, 801403c <__smakebuf_r+0x70>
 8014030:	89a3      	ldrh	r3, [r4, #12]
 8014032:	f023 0303 	bic.w	r3, r3, #3
 8014036:	f043 0301 	orr.w	r3, r3, #1
 801403a:	81a3      	strh	r3, [r4, #12]
 801403c:	89a3      	ldrh	r3, [r4, #12]
 801403e:	431d      	orrs	r5, r3
 8014040:	81a5      	strh	r5, [r4, #12]
 8014042:	e7cf      	b.n	8013fe4 <__smakebuf_r+0x18>

08014044 <_fstat_r>:
 8014044:	b538      	push	{r3, r4, r5, lr}
 8014046:	4d07      	ldr	r5, [pc, #28]	@ (8014064 <_fstat_r+0x20>)
 8014048:	2300      	movs	r3, #0
 801404a:	4604      	mov	r4, r0
 801404c:	4608      	mov	r0, r1
 801404e:	4611      	mov	r1, r2
 8014050:	602b      	str	r3, [r5, #0]
 8014052:	f7ef fb73 	bl	800373c <_fstat>
 8014056:	1c43      	adds	r3, r0, #1
 8014058:	d102      	bne.n	8014060 <_fstat_r+0x1c>
 801405a:	682b      	ldr	r3, [r5, #0]
 801405c:	b103      	cbz	r3, 8014060 <_fstat_r+0x1c>
 801405e:	6023      	str	r3, [r4, #0]
 8014060:	bd38      	pop	{r3, r4, r5, pc}
 8014062:	bf00      	nop
 8014064:	2000585c 	.word	0x2000585c

08014068 <_isatty_r>:
 8014068:	b538      	push	{r3, r4, r5, lr}
 801406a:	4d06      	ldr	r5, [pc, #24]	@ (8014084 <_isatty_r+0x1c>)
 801406c:	2300      	movs	r3, #0
 801406e:	4604      	mov	r4, r0
 8014070:	4608      	mov	r0, r1
 8014072:	602b      	str	r3, [r5, #0]
 8014074:	f7ef fb72 	bl	800375c <_isatty>
 8014078:	1c43      	adds	r3, r0, #1
 801407a:	d102      	bne.n	8014082 <_isatty_r+0x1a>
 801407c:	682b      	ldr	r3, [r5, #0]
 801407e:	b103      	cbz	r3, 8014082 <_isatty_r+0x1a>
 8014080:	6023      	str	r3, [r4, #0]
 8014082:	bd38      	pop	{r3, r4, r5, pc}
 8014084:	2000585c 	.word	0x2000585c

08014088 <_init>:
 8014088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801408a:	bf00      	nop
 801408c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801408e:	bc08      	pop	{r3}
 8014090:	469e      	mov	lr, r3
 8014092:	4770      	bx	lr

08014094 <_fini>:
 8014094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014096:	bf00      	nop
 8014098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801409a:	bc08      	pop	{r3}
 801409c:	469e      	mov	lr, r3
 801409e:	4770      	bx	lr
