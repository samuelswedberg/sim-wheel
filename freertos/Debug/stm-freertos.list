
stm-freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0f0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000610  0800c2c0  0800c2c0  0000d2c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c8d0  0800c8d0  0000e1e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c8d0  0800c8d0  0000d8d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c8d8  0800c8d8  0000e1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c8d8  0800c8d8  0000d8d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c8dc  0800c8dc  0000d8dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  0800c8e0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000044ec  200001e4  0800cac4  0000e1e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200046d0  0800cac4  0000e6d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b18f  00000000  00000000  0000e214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c41  00000000  00000000  000293a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001918  00000000  00000000  0002cfe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013d0  00000000  00000000  0002e900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025a71  00000000  00000000  0002fcd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bee3  00000000  00000000  00055741  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0957  00000000  00000000  00071624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00151f7b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007d88  00000000  00000000  00151fc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  00159d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c2a8 	.word	0x0800c2a8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	0800c2a8 	.word	0x0800c2a8

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2iz>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b94:	d215      	bcs.n	8000bc2 <__aeabi_d2iz+0x36>
 8000b96:	d511      	bpl.n	8000bbc <__aeabi_d2iz+0x30>
 8000b98:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d912      	bls.n	8000bc8 <__aeabi_d2iz+0x3c>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bb2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	4240      	negne	r0, r0
 8000bba:	4770      	bx	lr
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc6:	d105      	bne.n	8000bd4 <__aeabi_d2iz+0x48>
 8000bc8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bcc:	bf08      	it	eq
 8000bce:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <__aeabi_d2uiz>:
 8000bdc:	004a      	lsls	r2, r1, #1
 8000bde:	d211      	bcs.n	8000c04 <__aeabi_d2uiz+0x28>
 8000be0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be4:	d211      	bcs.n	8000c0a <__aeabi_d2uiz+0x2e>
 8000be6:	d50d      	bpl.n	8000c04 <__aeabi_d2uiz+0x28>
 8000be8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bf0:	d40e      	bmi.n	8000c10 <__aeabi_d2uiz+0x34>
 8000bf2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bfa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfe:	fa23 f002 	lsr.w	r0, r3, r2
 8000c02:	4770      	bx	lr
 8000c04:	f04f 0000 	mov.w	r0, #0
 8000c08:	4770      	bx	lr
 8000c0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0e:	d102      	bne.n	8000c16 <__aeabi_d2uiz+0x3a>
 8000c10:	f04f 30ff 	mov.w	r0, #4294967295
 8000c14:	4770      	bx	lr
 8000c16:	f04f 0000 	mov.w	r0, #0
 8000c1a:	4770      	bx	lr

08000c1c <__aeabi_d2f>:
 8000c1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c24:	bf24      	itt	cs
 8000c26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2e:	d90d      	bls.n	8000c4c <__aeabi_d2f+0x30>
 8000c30:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c3c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c44:	bf08      	it	eq
 8000c46:	f020 0001 	biceq.w	r0, r0, #1
 8000c4a:	4770      	bx	lr
 8000c4c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c50:	d121      	bne.n	8000c96 <__aeabi_d2f+0x7a>
 8000c52:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c56:	bfbc      	itt	lt
 8000c58:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c5c:	4770      	bxlt	lr
 8000c5e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c66:	f1c2 0218 	rsb	r2, r2, #24
 8000c6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c72:	fa20 f002 	lsr.w	r0, r0, r2
 8000c76:	bf18      	it	ne
 8000c78:	f040 0001 	orrne.w	r0, r0, #1
 8000c7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c88:	ea40 000c 	orr.w	r0, r0, ip
 8000c8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c94:	e7cc      	b.n	8000c30 <__aeabi_d2f+0x14>
 8000c96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c9a:	d107      	bne.n	8000cac <__aeabi_d2f+0x90>
 8000c9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ca0:	bf1e      	ittt	ne
 8000ca2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000caa:	4770      	bxne	lr
 8000cac:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cb0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop

08000cbc <__aeabi_uldivmod>:
 8000cbc:	b953      	cbnz	r3, 8000cd4 <__aeabi_uldivmod+0x18>
 8000cbe:	b94a      	cbnz	r2, 8000cd4 <__aeabi_uldivmod+0x18>
 8000cc0:	2900      	cmp	r1, #0
 8000cc2:	bf08      	it	eq
 8000cc4:	2800      	cmpeq	r0, #0
 8000cc6:	bf1c      	itt	ne
 8000cc8:	f04f 31ff 	movne.w	r1, #4294967295
 8000ccc:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd0:	f000 b9a0 	b.w	8001014 <__aeabi_idiv0>
 8000cd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cdc:	f000 f83c 	bl	8000d58 <__udivmoddi4>
 8000ce0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce8:	b004      	add	sp, #16
 8000cea:	4770      	bx	lr

08000cec <__aeabi_d2lz>:
 8000cec:	b538      	push	{r3, r4, r5, lr}
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	4604      	mov	r4, r0
 8000cf4:	460d      	mov	r5, r1
 8000cf6:	f7ff ff21 	bl	8000b3c <__aeabi_dcmplt>
 8000cfa:	b928      	cbnz	r0, 8000d08 <__aeabi_d2lz+0x1c>
 8000cfc:	4620      	mov	r0, r4
 8000cfe:	4629      	mov	r1, r5
 8000d00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d04:	f000 b80a 	b.w	8000d1c <__aeabi_d2ulz>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d0e:	f000 f805 	bl	8000d1c <__aeabi_d2ulz>
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	bd38      	pop	{r3, r4, r5, pc}
 8000d1a:	bf00      	nop

08000d1c <__aeabi_d2ulz>:
 8000d1c:	b5d0      	push	{r4, r6, r7, lr}
 8000d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d50 <__aeabi_d2ulz+0x34>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	4606      	mov	r6, r0
 8000d24:	460f      	mov	r7, r1
 8000d26:	f7ff fc97 	bl	8000658 <__aeabi_dmul>
 8000d2a:	f7ff ff57 	bl	8000bdc <__aeabi_d2uiz>
 8000d2e:	4604      	mov	r4, r0
 8000d30:	f7ff fc18 	bl	8000564 <__aeabi_ui2d>
 8000d34:	4b07      	ldr	r3, [pc, #28]	@ (8000d54 <__aeabi_d2ulz+0x38>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	f7ff fc8e 	bl	8000658 <__aeabi_dmul>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	460b      	mov	r3, r1
 8000d40:	4630      	mov	r0, r6
 8000d42:	4639      	mov	r1, r7
 8000d44:	f7ff fad0 	bl	80002e8 <__aeabi_dsub>
 8000d48:	f7ff ff48 	bl	8000bdc <__aeabi_d2uiz>
 8000d4c:	4621      	mov	r1, r4
 8000d4e:	bdd0      	pop	{r4, r6, r7, pc}
 8000d50:	3df00000 	.word	0x3df00000
 8000d54:	41f00000 	.word	0x41f00000

08000d58 <__udivmoddi4>:
 8000d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d5c:	9d08      	ldr	r5, [sp, #32]
 8000d5e:	460c      	mov	r4, r1
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d14e      	bne.n	8000e02 <__udivmoddi4+0xaa>
 8000d64:	4694      	mov	ip, r2
 8000d66:	458c      	cmp	ip, r1
 8000d68:	4686      	mov	lr, r0
 8000d6a:	fab2 f282 	clz	r2, r2
 8000d6e:	d962      	bls.n	8000e36 <__udivmoddi4+0xde>
 8000d70:	b14a      	cbz	r2, 8000d86 <__udivmoddi4+0x2e>
 8000d72:	f1c2 0320 	rsb	r3, r2, #32
 8000d76:	4091      	lsls	r1, r2
 8000d78:	fa20 f303 	lsr.w	r3, r0, r3
 8000d7c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d80:	4319      	orrs	r1, r3
 8000d82:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d8a:	fa1f f68c 	uxth.w	r6, ip
 8000d8e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d92:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d96:	fb07 1114 	mls	r1, r7, r4, r1
 8000d9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9e:	fb04 f106 	mul.w	r1, r4, r6
 8000da2:	4299      	cmp	r1, r3
 8000da4:	d90a      	bls.n	8000dbc <__udivmoddi4+0x64>
 8000da6:	eb1c 0303 	adds.w	r3, ip, r3
 8000daa:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dae:	f080 8112 	bcs.w	8000fd6 <__udivmoddi4+0x27e>
 8000db2:	4299      	cmp	r1, r3
 8000db4:	f240 810f 	bls.w	8000fd6 <__udivmoddi4+0x27e>
 8000db8:	3c02      	subs	r4, #2
 8000dba:	4463      	add	r3, ip
 8000dbc:	1a59      	subs	r1, r3, r1
 8000dbe:	fa1f f38e 	uxth.w	r3, lr
 8000dc2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc6:	fb07 1110 	mls	r1, r7, r0, r1
 8000dca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dce:	fb00 f606 	mul.w	r6, r0, r6
 8000dd2:	429e      	cmp	r6, r3
 8000dd4:	d90a      	bls.n	8000dec <__udivmoddi4+0x94>
 8000dd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dda:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dde:	f080 80fc 	bcs.w	8000fda <__udivmoddi4+0x282>
 8000de2:	429e      	cmp	r6, r3
 8000de4:	f240 80f9 	bls.w	8000fda <__udivmoddi4+0x282>
 8000de8:	4463      	add	r3, ip
 8000dea:	3802      	subs	r0, #2
 8000dec:	1b9b      	subs	r3, r3, r6
 8000dee:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000df2:	2100      	movs	r1, #0
 8000df4:	b11d      	cbz	r5, 8000dfe <__udivmoddi4+0xa6>
 8000df6:	40d3      	lsrs	r3, r2
 8000df8:	2200      	movs	r2, #0
 8000dfa:	e9c5 3200 	strd	r3, r2, [r5]
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	428b      	cmp	r3, r1
 8000e04:	d905      	bls.n	8000e12 <__udivmoddi4+0xba>
 8000e06:	b10d      	cbz	r5, 8000e0c <__udivmoddi4+0xb4>
 8000e08:	e9c5 0100 	strd	r0, r1, [r5]
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	4608      	mov	r0, r1
 8000e10:	e7f5      	b.n	8000dfe <__udivmoddi4+0xa6>
 8000e12:	fab3 f183 	clz	r1, r3
 8000e16:	2900      	cmp	r1, #0
 8000e18:	d146      	bne.n	8000ea8 <__udivmoddi4+0x150>
 8000e1a:	42a3      	cmp	r3, r4
 8000e1c:	d302      	bcc.n	8000e24 <__udivmoddi4+0xcc>
 8000e1e:	4290      	cmp	r0, r2
 8000e20:	f0c0 80f0 	bcc.w	8001004 <__udivmoddi4+0x2ac>
 8000e24:	1a86      	subs	r6, r0, r2
 8000e26:	eb64 0303 	sbc.w	r3, r4, r3
 8000e2a:	2001      	movs	r0, #1
 8000e2c:	2d00      	cmp	r5, #0
 8000e2e:	d0e6      	beq.n	8000dfe <__udivmoddi4+0xa6>
 8000e30:	e9c5 6300 	strd	r6, r3, [r5]
 8000e34:	e7e3      	b.n	8000dfe <__udivmoddi4+0xa6>
 8000e36:	2a00      	cmp	r2, #0
 8000e38:	f040 8090 	bne.w	8000f5c <__udivmoddi4+0x204>
 8000e3c:	eba1 040c 	sub.w	r4, r1, ip
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa1f f78c 	uxth.w	r7, ip
 8000e48:	2101      	movs	r1, #1
 8000e4a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e4e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e52:	fb08 4416 	mls	r4, r8, r6, r4
 8000e56:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e5a:	fb07 f006 	mul.w	r0, r7, r6
 8000e5e:	4298      	cmp	r0, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x11c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e6a:	d202      	bcs.n	8000e72 <__udivmoddi4+0x11a>
 8000e6c:	4298      	cmp	r0, r3
 8000e6e:	f200 80cd 	bhi.w	800100c <__udivmoddi4+0x2b4>
 8000e72:	4626      	mov	r6, r4
 8000e74:	1a1c      	subs	r4, r3, r0
 8000e76:	fa1f f38e 	uxth.w	r3, lr
 8000e7a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e7e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e86:	fb00 f707 	mul.w	r7, r0, r7
 8000e8a:	429f      	cmp	r7, r3
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x148>
 8000e8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e92:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x146>
 8000e98:	429f      	cmp	r7, r3
 8000e9a:	f200 80b0 	bhi.w	8000ffe <__udivmoddi4+0x2a6>
 8000e9e:	4620      	mov	r0, r4
 8000ea0:	1bdb      	subs	r3, r3, r7
 8000ea2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ea6:	e7a5      	b.n	8000df4 <__udivmoddi4+0x9c>
 8000ea8:	f1c1 0620 	rsb	r6, r1, #32
 8000eac:	408b      	lsls	r3, r1
 8000eae:	fa22 f706 	lsr.w	r7, r2, r6
 8000eb2:	431f      	orrs	r7, r3
 8000eb4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000eb8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ebc:	ea43 030c 	orr.w	r3, r3, ip
 8000ec0:	40f4      	lsrs	r4, r6
 8000ec2:	fa00 f801 	lsl.w	r8, r0, r1
 8000ec6:	0c38      	lsrs	r0, r7, #16
 8000ec8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ecc:	fbb4 fef0 	udiv	lr, r4, r0
 8000ed0:	fa1f fc87 	uxth.w	ip, r7
 8000ed4:	fb00 441e 	mls	r4, r0, lr, r4
 8000ed8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000edc:	fb0e f90c 	mul.w	r9, lr, ip
 8000ee0:	45a1      	cmp	r9, r4
 8000ee2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ee6:	d90a      	bls.n	8000efe <__udivmoddi4+0x1a6>
 8000ee8:	193c      	adds	r4, r7, r4
 8000eea:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eee:	f080 8084 	bcs.w	8000ffa <__udivmoddi4+0x2a2>
 8000ef2:	45a1      	cmp	r9, r4
 8000ef4:	f240 8081 	bls.w	8000ffa <__udivmoddi4+0x2a2>
 8000ef8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000efc:	443c      	add	r4, r7
 8000efe:	eba4 0409 	sub.w	r4, r4, r9
 8000f02:	fa1f f983 	uxth.w	r9, r3
 8000f06:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f0a:	fb00 4413 	mls	r4, r0, r3, r4
 8000f0e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f12:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f16:	45a4      	cmp	ip, r4
 8000f18:	d907      	bls.n	8000f2a <__udivmoddi4+0x1d2>
 8000f1a:	193c      	adds	r4, r7, r4
 8000f1c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f20:	d267      	bcs.n	8000ff2 <__udivmoddi4+0x29a>
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d965      	bls.n	8000ff2 <__udivmoddi4+0x29a>
 8000f26:	3b02      	subs	r3, #2
 8000f28:	443c      	add	r4, r7
 8000f2a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f2e:	fba0 9302 	umull	r9, r3, r0, r2
 8000f32:	eba4 040c 	sub.w	r4, r4, ip
 8000f36:	429c      	cmp	r4, r3
 8000f38:	46ce      	mov	lr, r9
 8000f3a:	469c      	mov	ip, r3
 8000f3c:	d351      	bcc.n	8000fe2 <__udivmoddi4+0x28a>
 8000f3e:	d04e      	beq.n	8000fde <__udivmoddi4+0x286>
 8000f40:	b155      	cbz	r5, 8000f58 <__udivmoddi4+0x200>
 8000f42:	ebb8 030e 	subs.w	r3, r8, lr
 8000f46:	eb64 040c 	sbc.w	r4, r4, ip
 8000f4a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f4e:	40cb      	lsrs	r3, r1
 8000f50:	431e      	orrs	r6, r3
 8000f52:	40cc      	lsrs	r4, r1
 8000f54:	e9c5 6400 	strd	r6, r4, [r5]
 8000f58:	2100      	movs	r1, #0
 8000f5a:	e750      	b.n	8000dfe <__udivmoddi4+0xa6>
 8000f5c:	f1c2 0320 	rsb	r3, r2, #32
 8000f60:	fa20 f103 	lsr.w	r1, r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa24 f303 	lsr.w	r3, r4, r3
 8000f6c:	4094      	lsls	r4, r2
 8000f6e:	430c      	orrs	r4, r1
 8000f70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f74:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f78:	fa1f f78c 	uxth.w	r7, ip
 8000f7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f80:	fb08 3110 	mls	r1, r8, r0, r3
 8000f84:	0c23      	lsrs	r3, r4, #16
 8000f86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f8a:	fb00 f107 	mul.w	r1, r0, r7
 8000f8e:	4299      	cmp	r1, r3
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x24c>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f9a:	d22c      	bcs.n	8000ff6 <__udivmoddi4+0x29e>
 8000f9c:	4299      	cmp	r1, r3
 8000f9e:	d92a      	bls.n	8000ff6 <__udivmoddi4+0x29e>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1a5b      	subs	r3, r3, r1
 8000fa6:	b2a4      	uxth	r4, r4
 8000fa8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fac:	fb08 3311 	mls	r3, r8, r1, r3
 8000fb0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fb4:	fb01 f307 	mul.w	r3, r1, r7
 8000fb8:	42a3      	cmp	r3, r4
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x276>
 8000fbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000fc0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fc4:	d213      	bcs.n	8000fee <__udivmoddi4+0x296>
 8000fc6:	42a3      	cmp	r3, r4
 8000fc8:	d911      	bls.n	8000fee <__udivmoddi4+0x296>
 8000fca:	3902      	subs	r1, #2
 8000fcc:	4464      	add	r4, ip
 8000fce:	1ae4      	subs	r4, r4, r3
 8000fd0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fd4:	e739      	b.n	8000e4a <__udivmoddi4+0xf2>
 8000fd6:	4604      	mov	r4, r0
 8000fd8:	e6f0      	b.n	8000dbc <__udivmoddi4+0x64>
 8000fda:	4608      	mov	r0, r1
 8000fdc:	e706      	b.n	8000dec <__udivmoddi4+0x94>
 8000fde:	45c8      	cmp	r8, r9
 8000fe0:	d2ae      	bcs.n	8000f40 <__udivmoddi4+0x1e8>
 8000fe2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fe6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fea:	3801      	subs	r0, #1
 8000fec:	e7a8      	b.n	8000f40 <__udivmoddi4+0x1e8>
 8000fee:	4631      	mov	r1, r6
 8000ff0:	e7ed      	b.n	8000fce <__udivmoddi4+0x276>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	e799      	b.n	8000f2a <__udivmoddi4+0x1d2>
 8000ff6:	4630      	mov	r0, r6
 8000ff8:	e7d4      	b.n	8000fa4 <__udivmoddi4+0x24c>
 8000ffa:	46d6      	mov	lr, sl
 8000ffc:	e77f      	b.n	8000efe <__udivmoddi4+0x1a6>
 8000ffe:	4463      	add	r3, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e74d      	b.n	8000ea0 <__udivmoddi4+0x148>
 8001004:	4606      	mov	r6, r0
 8001006:	4623      	mov	r3, r4
 8001008:	4608      	mov	r0, r1
 800100a:	e70f      	b.n	8000e2c <__udivmoddi4+0xd4>
 800100c:	3e02      	subs	r6, #2
 800100e:	4463      	add	r3, ip
 8001010:	e730      	b.n	8000e74 <__udivmoddi4+0x11c>
 8001012:	bf00      	nop

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d002      	beq.n	800102e <case_insensitive_strcmp+0x16>
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d101      	bne.n	8001032 <case_insensitive_strcmp+0x1a>
    {
        return 1;
 800102e:	2301      	movs	r3, #1
 8001030:	e056      	b.n	80010e0 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	429a      	cmp	r2, r3
 8001038:	d10d      	bne.n	8001056 <case_insensitive_strcmp+0x3e>
    {
        return 0;
 800103a:	2300      	movs	r3, #0
 800103c:	e050      	b.n	80010e0 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d101      	bne.n	800104a <case_insensitive_strcmp+0x32>
        {
            return 0;
 8001046:	2300      	movs	r3, #0
 8001048:	e04a      	b.n	80010e0 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	3301      	adds	r3, #1
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	3301      	adds	r3, #1
 8001054:	603b      	str	r3, [r7, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	73fb      	strb	r3, [r7, #15]
 800105c:	7bfb      	ldrb	r3, [r7, #15]
 800105e:	3301      	adds	r3, #1
 8001060:	4a22      	ldr	r2, [pc, #136]	@ (80010ec <case_insensitive_strcmp+0xd4>)
 8001062:	4413      	add	r3, r2
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	f003 0303 	and.w	r3, r3, #3
 800106a:	2b01      	cmp	r3, #1
 800106c:	d103      	bne.n	8001076 <case_insensitive_strcmp+0x5e>
 800106e:	7bfb      	ldrb	r3, [r7, #15]
 8001070:	f103 0220 	add.w	r2, r3, #32
 8001074:	e000      	b.n	8001078 <case_insensitive_strcmp+0x60>
 8001076:	7bfa      	ldrb	r2, [r7, #15]
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	73bb      	strb	r3, [r7, #14]
 800107e:	7bbb      	ldrb	r3, [r7, #14]
 8001080:	3301      	adds	r3, #1
 8001082:	491a      	ldr	r1, [pc, #104]	@ (80010ec <case_insensitive_strcmp+0xd4>)
 8001084:	440b      	add	r3, r1
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	f003 0303 	and.w	r3, r3, #3
 800108c:	2b01      	cmp	r3, #1
 800108e:	d102      	bne.n	8001096 <case_insensitive_strcmp+0x7e>
 8001090:	7bbb      	ldrb	r3, [r7, #14]
 8001092:	3320      	adds	r3, #32
 8001094:	e000      	b.n	8001098 <case_insensitive_strcmp+0x80>
 8001096:	7bbb      	ldrb	r3, [r7, #14]
 8001098:	429a      	cmp	r2, r3
 800109a:	d0d0      	beq.n	800103e <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	737b      	strb	r3, [r7, #13]
 80010a2:	7b7b      	ldrb	r3, [r7, #13]
 80010a4:	3301      	adds	r3, #1
 80010a6:	4a11      	ldr	r2, [pc, #68]	@ (80010ec <case_insensitive_strcmp+0xd4>)
 80010a8:	4413      	add	r3, r2
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	f003 0303 	and.w	r3, r3, #3
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d103      	bne.n	80010bc <case_insensitive_strcmp+0xa4>
 80010b4:	7b7b      	ldrb	r3, [r7, #13]
 80010b6:	f103 0220 	add.w	r2, r3, #32
 80010ba:	e000      	b.n	80010be <case_insensitive_strcmp+0xa6>
 80010bc:	7b7a      	ldrb	r2, [r7, #13]
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	733b      	strb	r3, [r7, #12]
 80010c4:	7b3b      	ldrb	r3, [r7, #12]
 80010c6:	3301      	adds	r3, #1
 80010c8:	4908      	ldr	r1, [pc, #32]	@ (80010ec <case_insensitive_strcmp+0xd4>)
 80010ca:	440b      	add	r3, r1
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	f003 0303 	and.w	r3, r3, #3
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d102      	bne.n	80010dc <case_insensitive_strcmp+0xc4>
 80010d6:	7b3b      	ldrb	r3, [r7, #12]
 80010d8:	3320      	adds	r3, #32
 80010da:	e000      	b.n	80010de <case_insensitive_strcmp+0xc6>
 80010dc:	7b3b      	ldrb	r3, [r7, #12]
 80010de:	1ad3      	subs	r3, r2, r3
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	0800c578 	.word	0x0800c578

080010f0 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2028      	movs	r0, #40	@ 0x28
 80010fe:	4798      	blx	r3
 8001100:	60f8      	str	r0, [r7, #12]
    if (node)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d004      	beq.n	8001112 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8001108:	2228      	movs	r2, #40	@ 0x28
 800110a:	2100      	movs	r1, #0
 800110c:	68f8      	ldr	r0, [r7, #12]
 800110e:	f009 f8d0 	bl	800a2b2 <memset>
    }

    return node;
 8001112:	68fb      	ldr	r3, [r7, #12]
}
 8001114:	4618      	mov	r0, r3
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8001124:	2300      	movs	r3, #0
 8001126:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8001128:	e03d      	b.n	80011a6 <cJSON_Delete+0x8a>
    {
        next = item->next;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001138:	2b00      	cmp	r3, #0
 800113a:	d108      	bne.n	800114e <cJSON_Delete+0x32>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d004      	beq.n	800114e <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ffe7 	bl	800111c <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001156:	2b00      	cmp	r3, #0
 8001158:	d10c      	bne.n	8001174 <cJSON_Delete+0x58>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	691b      	ldr	r3, [r3, #16]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d008      	beq.n	8001174 <cJSON_Delete+0x58>
        {
            global_hooks.deallocate(item->valuestring);
 8001162:	4b15      	ldr	r3, [pc, #84]	@ (80011b8 <cJSON_Delete+0x9c>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	6912      	ldr	r2, [r2, #16]
 800116a:	4610      	mov	r0, r2
 800116c:	4798      	blx	r3
            item->valuestring = NULL;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	611a      	str	r2, [r3, #16]
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800117c:	2b00      	cmp	r3, #0
 800117e:	d10c      	bne.n	800119a <cJSON_Delete+0x7e>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6a1b      	ldr	r3, [r3, #32]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d008      	beq.n	800119a <cJSON_Delete+0x7e>
        {
            global_hooks.deallocate(item->string);
 8001188:	4b0b      	ldr	r3, [pc, #44]	@ (80011b8 <cJSON_Delete+0x9c>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	6a12      	ldr	r2, [r2, #32]
 8001190:	4610      	mov	r0, r2
 8001192:	4798      	blx	r3
            item->string = NULL;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	621a      	str	r2, [r3, #32]
        }
        global_hooks.deallocate(item);
 800119a:	4b07      	ldr	r3, [pc, #28]	@ (80011b8 <cJSON_Delete+0x9c>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	4798      	blx	r3
        item = next;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d1be      	bne.n	800112a <cJSON_Delete+0xe>
    }
}
 80011ac:	bf00      	nop
 80011ae:	bf00      	nop
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000000 	.word	0x20000000

080011bc <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 80011c0:	232e      	movs	r3, #46	@ 0x2e
#endif
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	0000      	movs	r0, r0
	...

080011d0 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b098      	sub	sp, #96	@ 0x60
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
    double number = 0;
 80011da:	f04f 0200 	mov.w	r2, #0
 80011de:	f04f 0300 	mov.w	r3, #0
 80011e2:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    unsigned char *after_end = NULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	64bb      	str	r3, [r7, #72]	@ 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 80011ea:	f7ff ffe7 	bl	80011bc <get_decimal_point>
 80011ee:	4603      	mov	r3, r0
 80011f0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    size_t i = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	65fb      	str	r3, [r7, #92]	@ 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <parse_number+0x36>
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d101      	bne.n	800120a <parse_number+0x3a>
    {
        return false;
 8001206:	2300      	movs	r3, #0
 8001208:	e0a0      	b.n	800134c <parse_number+0x17c>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800120a:	2300      	movs	r3, #0
 800120c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800120e:	e03d      	b.n	800128c <parse_number+0xbc>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	6899      	ldr	r1, [r3, #8]
 8001218:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800121a:	440b      	add	r3, r1
 800121c:	4413      	add	r3, r2
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b45      	cmp	r3, #69	@ 0x45
 8001222:	dc17      	bgt.n	8001254 <parse_number+0x84>
 8001224:	2b2b      	cmp	r3, #43	@ 0x2b
 8001226:	db40      	blt.n	80012aa <parse_number+0xda>
 8001228:	3b2b      	subs	r3, #43	@ 0x2b
 800122a:	2201      	movs	r2, #1
 800122c:	409a      	lsls	r2, r3
 800122e:	4b4c      	ldr	r3, [pc, #304]	@ (8001360 <parse_number+0x190>)
 8001230:	4013      	ands	r3, r2
 8001232:	2b00      	cmp	r3, #0
 8001234:	bf14      	ite	ne
 8001236:	2301      	movne	r3, #1
 8001238:	2300      	moveq	r3, #0
 800123a:	b2db      	uxtb	r3, r3
 800123c:	2b00      	cmp	r3, #0
 800123e:	d10b      	bne.n	8001258 <parse_number+0x88>
 8001240:	f002 0308 	and.w	r3, r2, #8
 8001244:	2b00      	cmp	r3, #0
 8001246:	bf14      	ite	ne
 8001248:	2301      	movne	r3, #1
 800124a:	2300      	moveq	r3, #0
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b00      	cmp	r3, #0
 8001250:	d111      	bne.n	8001276 <parse_number+0xa6>
            case '.':
                number_c_string[i] = decimal_point;
                break;

            default:
                goto loop_end;
 8001252:	e02a      	b.n	80012aa <parse_number+0xda>
        switch (buffer_at_offset(input_buffer)[i])
 8001254:	2b65      	cmp	r3, #101	@ 0x65
 8001256:	d128      	bne.n	80012aa <parse_number+0xda>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	6899      	ldr	r1, [r3, #8]
 8001260:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001262:	440b      	add	r3, r1
 8001264:	4413      	add	r3, r2
 8001266:	7819      	ldrb	r1, [r3, #0]
 8001268:	f107 0208 	add.w	r2, r7, #8
 800126c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800126e:	4413      	add	r3, r2
 8001270:	460a      	mov	r2, r1
 8001272:	701a      	strb	r2, [r3, #0]
                break;
 8001274:	e007      	b.n	8001286 <parse_number+0xb6>
                number_c_string[i] = decimal_point;
 8001276:	f107 0208 	add.w	r2, r7, #8
 800127a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800127c:	4413      	add	r3, r2
 800127e:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8001282:	701a      	strb	r2, [r3, #0]
                break;
 8001284:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8001286:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001288:	3301      	adds	r3, #1
 800128a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800128c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800128e:	2b3e      	cmp	r3, #62	@ 0x3e
 8001290:	d80d      	bhi.n	80012ae <parse_number+0xde>
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d00a      	beq.n	80012ae <parse_number+0xde>
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	689a      	ldr	r2, [r3, #8]
 800129c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800129e:	441a      	add	r2, r3
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d3b3      	bcc.n	8001210 <parse_number+0x40>
        }
    }
loop_end:
 80012a8:	e001      	b.n	80012ae <parse_number+0xde>
                goto loop_end;
 80012aa:	bf00      	nop
 80012ac:	e000      	b.n	80012b0 <parse_number+0xe0>
loop_end:
 80012ae:	bf00      	nop
    number_c_string[i] = '\0';
 80012b0:	f107 0208 	add.w	r2, r7, #8
 80012b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80012b6:	4413      	add	r3, r2
 80012b8:	2200      	movs	r2, #0
 80012ba:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 80012bc:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80012c0:	f107 0308 	add.w	r3, r7, #8
 80012c4:	4611      	mov	r1, r2
 80012c6:	4618      	mov	r0, r3
 80012c8:	f008 feae 	bl	800a028 <strtod>
 80012cc:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
    if (number_c_string == after_end)
 80012d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80012d2:	f107 0308 	add.w	r3, r7, #8
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d101      	bne.n	80012de <parse_number+0x10e>
    {
        return false; /* parse_error */
 80012da:	2300      	movs	r3, #0
 80012dc:	e036      	b.n	800134c <parse_number+0x17c>
    }

    item->valuedouble = number;
 80012de:	6879      	ldr	r1, [r7, #4]
 80012e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80012e4:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 80012e8:	a31b      	add	r3, pc, #108	@ (adr r3, 8001358 <parse_number+0x188>)
 80012ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ee:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80012f2:	f7ff fc37 	bl	8000b64 <__aeabi_dcmpge>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d004      	beq.n	8001306 <parse_number+0x136>
    {
        item->valueint = INT_MAX;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001302:	615a      	str	r2, [r3, #20]
 8001304:	e015      	b.n	8001332 <parse_number+0x162>
    }
    else if (number <= (double)INT_MIN)
 8001306:	f04f 0200 	mov.w	r2, #0
 800130a:	4b16      	ldr	r3, [pc, #88]	@ (8001364 <parse_number+0x194>)
 800130c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001310:	f7ff fc1e 	bl	8000b50 <__aeabi_dcmple>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d004      	beq.n	8001324 <parse_number+0x154>
    {
        item->valueint = INT_MIN;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001320:	615a      	str	r2, [r3, #20]
 8001322:	e006      	b.n	8001332 <parse_number+0x162>
    }
    else
    {
        item->valueint = (int)number;
 8001324:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001328:	f7ff fc30 	bl	8000b8c <__aeabi_d2iz>
 800132c:	4602      	mov	r2, r0
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2208      	movs	r2, #8
 8001336:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800133e:	f107 0208 	add.w	r2, r7, #8
 8001342:	1a8a      	subs	r2, r1, r2
 8001344:	441a      	add	r2, r3
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	609a      	str	r2, [r3, #8]
    return true;
 800134a:	2301      	movs	r3, #1
}
 800134c:	4618      	mov	r0, r3
 800134e:	3760      	adds	r7, #96	@ 0x60
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	f3af 8000 	nop.w
 8001358:	ffc00000 	.word	0xffc00000
 800135c:	41dfffff 	.word	0x41dfffff
 8001360:	04007fe5 	.word	0x04007fe5
 8001364:	c1e00000 	.word	0xc1e00000

08001368 <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 8001370:	2300      	movs	r3, #0
 8001372:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 8001378:	2300      	movs	r3, #0
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	e04c      	b.n	8001418 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	4413      	add	r3, r2
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2b2f      	cmp	r3, #47	@ 0x2f
 8001388:	d90f      	bls.n	80013aa <parse_hex4+0x42>
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	4413      	add	r3, r2
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2b39      	cmp	r3, #57	@ 0x39
 8001394:	d809      	bhi.n	80013aa <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	4413      	add	r3, r2
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	461a      	mov	r2, r3
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4413      	add	r3, r2
 80013a4:	3b30      	subs	r3, #48	@ 0x30
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	e02d      	b.n	8001406 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	4413      	add	r3, r2
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b40      	cmp	r3, #64	@ 0x40
 80013b4:	d90f      	bls.n	80013d6 <parse_hex4+0x6e>
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	4413      	add	r3, r2
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b46      	cmp	r3, #70	@ 0x46
 80013c0:	d809      	bhi.n	80013d6 <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	4413      	add	r3, r2
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	461a      	mov	r2, r3
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	4413      	add	r3, r2
 80013d0:	3b37      	subs	r3, #55	@ 0x37
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	e017      	b.n	8001406 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	4413      	add	r3, r2
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b60      	cmp	r3, #96	@ 0x60
 80013e0:	d90f      	bls.n	8001402 <parse_hex4+0x9a>
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	4413      	add	r3, r2
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b66      	cmp	r3, #102	@ 0x66
 80013ec:	d809      	bhi.n	8001402 <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	4413      	add	r3, r2
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	461a      	mov	r2, r3
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	4413      	add	r3, r2
 80013fc:	3b57      	subs	r3, #87	@ 0x57
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	e001      	b.n	8001406 <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 8001402:	2300      	movs	r3, #0
 8001404:	e00c      	b.n	8001420 <parse_hex4+0xb8>
        }

        if (i < 3)
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	2b02      	cmp	r3, #2
 800140a:	d802      	bhi.n	8001412 <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	011b      	lsls	r3, r3, #4
 8001410:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	3301      	adds	r3, #1
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	2b03      	cmp	r3, #3
 800141c:	d9af      	bls.n	800137e <parse_hex4+0x16>
        }
    }

    return h;
 800141e:	68fb      	ldr	r3, [r7, #12]
}
 8001420:	4618      	mov	r0, r3
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08a      	sub	sp, #40	@ 0x28
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 8001438:	2300      	movs	r3, #0
 800143a:	627b      	str	r3, [r7, #36]	@ 0x24
    unsigned int first_code = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 8001444:	2300      	movs	r3, #0
 8001446:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    unsigned char utf8_position = 0;
 800144a:	2300      	movs	r3, #0
 800144c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    unsigned char sequence_length = 0;
 8001450:	2300      	movs	r3, #0
 8001452:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    unsigned char first_byte_mark = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 800145c:	68ba      	ldr	r2, [r7, #8]
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b05      	cmp	r3, #5
 8001464:	f340 80b7 	ble.w	80015d6 <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	3302      	adds	r3, #2
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff ff7b 	bl	8001368 <parse_hex4>
 8001472:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 800147a:	d304      	bcc.n	8001486 <utf16_literal_to_utf8+0x5a>
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 8001482:	f0c0 80aa 	bcc.w	80015da <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 800148c:	d337      	bcc.n	80014fe <utf16_literal_to_utf8+0xd2>
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 8001494:	d233      	bcs.n	80014fe <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	3306      	adds	r3, #6
 800149a:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 80014a0:	230c      	movs	r3, #12
 80014a2:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

        if ((input_end - second_sequence) < 6)
 80014a6:	68ba      	ldr	r2, [r7, #8]
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	2b05      	cmp	r3, #5
 80014ae:	f340 8096 	ble.w	80015de <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b5c      	cmp	r3, #92	@ 0x5c
 80014b8:	f040 8093 	bne.w	80015e2 <utf16_literal_to_utf8+0x1b6>
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	3301      	adds	r3, #1
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b75      	cmp	r3, #117	@ 0x75
 80014c4:	f040 808d 	bne.w	80015e2 <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	3302      	adds	r3, #2
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ff4b 	bl	8001368 <parse_hex4>
 80014d2:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 80014da:	f0c0 8084 	bcc.w	80015e6 <utf16_literal_to_utf8+0x1ba>
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 80014e4:	d27f      	bcs.n	80015e6 <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	029a      	lsls	r2, r3, #10
 80014ea:	4b43      	ldr	r3, [pc, #268]	@ (80015f8 <utf16_literal_to_utf8+0x1cc>)
 80014ec:	4013      	ands	r3, r2
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80014f4:	4313      	orrs	r3, r2
 80014f6:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80014fa:	627b      	str	r3, [r7, #36]	@ 0x24
    {
 80014fc:	e004      	b.n	8001508 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 80014fe:	2306      	movs	r3, #6
 8001500:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        codepoint = first_code;
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 8001508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800150a:	2b7f      	cmp	r3, #127	@ 0x7f
 800150c:	d803      	bhi.n	8001516 <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 800150e:	2301      	movs	r3, #1
 8001510:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001514:	e01f      	b.n	8001556 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 8001516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001518:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800151c:	d206      	bcs.n	800152c <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 800151e:	2302      	movs	r3, #2
 8001520:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 8001524:	23c0      	movs	r3, #192	@ 0xc0
 8001526:	f887 3020 	strb.w	r3, [r7, #32]
 800152a:	e014      	b.n	8001556 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 800152c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800152e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001532:	d206      	bcs.n	8001542 <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 8001534:	2303      	movs	r3, #3
 8001536:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 800153a:	23e0      	movs	r3, #224	@ 0xe0
 800153c:	f887 3020 	strb.w	r3, [r7, #32]
 8001540:	e009      	b.n	8001556 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 8001542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001544:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8001548:	d24f      	bcs.n	80015ea <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 800154a:	2304      	movs	r3, #4
 800154c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 8001550:	23f0      	movs	r3, #240	@ 0xf0
 8001552:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8001556:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800155a:	3b01      	subs	r3, #1
 800155c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001560:	e015      	b.n	800158e <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 8001562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001564:	b2db      	uxtb	r3, r3
 8001566:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800156a:	b2da      	uxtb	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6819      	ldr	r1, [r3, #0]
 8001570:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001574:	440b      	add	r3, r1
 8001576:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800157a:	b2d2      	uxtb	r2, r2
 800157c:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 800157e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001580:	099b      	lsrs	r3, r3, #6
 8001582:	627b      	str	r3, [r7, #36]	@ 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8001584:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001588:	3b01      	subs	r3, #1
 800158a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800158e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001592:	2b00      	cmp	r3, #0
 8001594:	d1e5      	bne.n	8001562 <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 8001596:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800159a:	2b01      	cmp	r3, #1
 800159c:	d909      	bls.n	80015b2 <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 800159e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a0:	b2d9      	uxtb	r1, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80015aa:	430a      	orrs	r2, r1
 80015ac:	b2d2      	uxtb	r2, r2
 80015ae:	701a      	strb	r2, [r3, #0]
 80015b0:	e007      	b.n	80015c2 <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 80015b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80015be:	b2d2      	uxtb	r2, r2
 80015c0:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80015ca:	441a      	add	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	601a      	str	r2, [r3, #0]

    return sequence_length;
 80015d0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80015d4:	e00b      	b.n	80015ee <utf16_literal_to_utf8+0x1c2>
        goto fail;
 80015d6:	bf00      	nop
 80015d8:	e008      	b.n	80015ec <utf16_literal_to_utf8+0x1c0>
        goto fail;
 80015da:	bf00      	nop
 80015dc:	e006      	b.n	80015ec <utf16_literal_to_utf8+0x1c0>
            goto fail;
 80015de:	bf00      	nop
 80015e0:	e004      	b.n	80015ec <utf16_literal_to_utf8+0x1c0>
            goto fail;
 80015e2:	bf00      	nop
 80015e4:	e002      	b.n	80015ec <utf16_literal_to_utf8+0x1c0>
            goto fail;
 80015e6:	bf00      	nop
 80015e8:	e000      	b.n	80015ec <utf16_literal_to_utf8+0x1c0>
        goto fail;
 80015ea:	bf00      	nop

fail:
    return 0;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3728      	adds	r7, #40	@ 0x28
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	000ffc00 	.word	0x000ffc00

080015fc <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08a      	sub	sp, #40	@ 0x28
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	3301      	adds	r3, #1
 8001610:	4413      	add	r3, r2
 8001612:	627b      	str	r3, [r7, #36]	@ 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	3301      	adds	r3, #1
 800161e:	4413      	add	r3, r2
 8001620:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 8001622:	2300      	movs	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 8001626:	2300      	movs	r3, #0
 8001628:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	4413      	add	r3, r2
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b22      	cmp	r3, #34	@ 0x22
 8001638:	f040 8103 	bne.w	8001842 <parse_string+0x246>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 800163c:	2300      	movs	r3, #0
 800163e:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 8001640:	2300      	movs	r3, #0
 8001642:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001644:	e017      	b.n	8001676 <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 8001646:	6a3b      	ldr	r3, [r7, #32]
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b5c      	cmp	r3, #92	@ 0x5c
 800164c:	d110      	bne.n	8001670 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 800164e:	6a3b      	ldr	r3, [r7, #32]
 8001650:	1c5a      	adds	r2, r3, #1
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	461a      	mov	r2, r3
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	429a      	cmp	r2, r3
 8001660:	f080 80f1 	bcs.w	8001846 <parse_string+0x24a>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	3301      	adds	r3, #1
 8001668:	61bb      	str	r3, [r7, #24]
                input_end++;
 800166a:	6a3b      	ldr	r3, [r7, #32]
 800166c:	3301      	adds	r3, #1
 800166e:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 8001670:	6a3b      	ldr	r3, [r7, #32]
 8001672:	3301      	adds	r3, #1
 8001674:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6a3a      	ldr	r2, [r7, #32]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	461a      	mov	r2, r3
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	429a      	cmp	r2, r3
 8001686:	d203      	bcs.n	8001690 <parse_string+0x94>
 8001688:	6a3b      	ldr	r3, [r7, #32]
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b22      	cmp	r3, #34	@ 0x22
 800168e:	d1da      	bne.n	8001646 <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6a3a      	ldr	r2, [r7, #32]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	461a      	mov	r2, r3
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	429a      	cmp	r2, r3
 80016a0:	f080 80d3 	bcs.w	800184a <parse_string+0x24e>
 80016a4:	6a3b      	ldr	r3, [r7, #32]
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b22      	cmp	r3, #34	@ 0x22
 80016aa:	f040 80ce 	bne.w	800184a <parse_string+0x24e>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	4413      	add	r3, r2
 80016b8:	6a3a      	ldr	r2, [r7, #32]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	461a      	mov	r2, r3
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	3201      	adds	r2, #1
 80016cc:	4610      	mov	r0, r2
 80016ce:	4798      	blx	r3
 80016d0:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	f000 80ba 	beq.w	800184e <parse_string+0x252>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 80016de:	e094      	b.n	800180a <parse_string+0x20e>
    {
        if (*input_pointer != '\\')
 80016e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b5c      	cmp	r3, #92	@ 0x5c
 80016e6:	d008      	beq.n	80016fa <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 80016e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016ea:	1c53      	adds	r3, r2, #1
 80016ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	1c59      	adds	r1, r3, #1
 80016f2:	60f9      	str	r1, [r7, #12]
 80016f4:	7812      	ldrb	r2, [r2, #0]
 80016f6:	701a      	strb	r2, [r3, #0]
 80016f8:	e087      	b.n	800180a <parse_string+0x20e>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 80016fa:	2302      	movs	r3, #2
 80016fc:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 80016fe:	6a3a      	ldr	r2, [r7, #32]
 8001700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b00      	cmp	r3, #0
 8001706:	f340 80a4 	ble.w	8001852 <parse_string+0x256>
            {
                goto fail;
            }

            switch (input_pointer[1])
 800170a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800170c:	3301      	adds	r3, #1
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b75      	cmp	r3, #117	@ 0x75
 8001712:	f300 80a0 	bgt.w	8001856 <parse_string+0x25a>
 8001716:	2b5c      	cmp	r3, #92	@ 0x5c
 8001718:	da04      	bge.n	8001724 <parse_string+0x128>
 800171a:	2b22      	cmp	r3, #34	@ 0x22
 800171c:	d05c      	beq.n	80017d8 <parse_string+0x1dc>
 800171e:	2b2f      	cmp	r3, #47	@ 0x2f
 8001720:	d05a      	beq.n	80017d8 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 8001722:	e098      	b.n	8001856 <parse_string+0x25a>
            switch (input_pointer[1])
 8001724:	3b5c      	subs	r3, #92	@ 0x5c
 8001726:	2b19      	cmp	r3, #25
 8001728:	f200 8095 	bhi.w	8001856 <parse_string+0x25a>
 800172c:	a201      	add	r2, pc, #4	@ (adr r2, 8001734 <parse_string+0x138>)
 800172e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001732:	bf00      	nop
 8001734:	080017d9 	.word	0x080017d9
 8001738:	08001857 	.word	0x08001857
 800173c:	08001857 	.word	0x08001857
 8001740:	08001857 	.word	0x08001857
 8001744:	08001857 	.word	0x08001857
 8001748:	08001857 	.word	0x08001857
 800174c:	0800179d 	.word	0x0800179d
 8001750:	08001857 	.word	0x08001857
 8001754:	08001857 	.word	0x08001857
 8001758:	08001857 	.word	0x08001857
 800175c:	080017a9 	.word	0x080017a9
 8001760:	08001857 	.word	0x08001857
 8001764:	08001857 	.word	0x08001857
 8001768:	08001857 	.word	0x08001857
 800176c:	08001857 	.word	0x08001857
 8001770:	08001857 	.word	0x08001857
 8001774:	08001857 	.word	0x08001857
 8001778:	08001857 	.word	0x08001857
 800177c:	080017b5 	.word	0x080017b5
 8001780:	08001857 	.word	0x08001857
 8001784:	08001857 	.word	0x08001857
 8001788:	08001857 	.word	0x08001857
 800178c:	080017c1 	.word	0x080017c1
 8001790:	08001857 	.word	0x08001857
 8001794:	080017cd 	.word	0x080017cd
 8001798:	080017e9 	.word	0x080017e9
                    *output_pointer++ = '\b';
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	1c5a      	adds	r2, r3, #1
 80017a0:	60fa      	str	r2, [r7, #12]
 80017a2:	2208      	movs	r2, #8
 80017a4:	701a      	strb	r2, [r3, #0]
                    break;
 80017a6:	e02c      	b.n	8001802 <parse_string+0x206>
                    *output_pointer++ = '\f';
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	1c5a      	adds	r2, r3, #1
 80017ac:	60fa      	str	r2, [r7, #12]
 80017ae:	220c      	movs	r2, #12
 80017b0:	701a      	strb	r2, [r3, #0]
                    break;
 80017b2:	e026      	b.n	8001802 <parse_string+0x206>
                    *output_pointer++ = '\n';
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	1c5a      	adds	r2, r3, #1
 80017b8:	60fa      	str	r2, [r7, #12]
 80017ba:	220a      	movs	r2, #10
 80017bc:	701a      	strb	r2, [r3, #0]
                    break;
 80017be:	e020      	b.n	8001802 <parse_string+0x206>
                    *output_pointer++ = '\r';
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	1c5a      	adds	r2, r3, #1
 80017c4:	60fa      	str	r2, [r7, #12]
 80017c6:	220d      	movs	r2, #13
 80017c8:	701a      	strb	r2, [r3, #0]
                    break;
 80017ca:	e01a      	b.n	8001802 <parse_string+0x206>
                    *output_pointer++ = '\t';
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	1c5a      	adds	r2, r3, #1
 80017d0:	60fa      	str	r2, [r7, #12]
 80017d2:	2209      	movs	r2, #9
 80017d4:	701a      	strb	r2, [r3, #0]
                    break;
 80017d6:	e014      	b.n	8001802 <parse_string+0x206>
                    *output_pointer++ = input_pointer[1];
 80017d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017da:	1c5a      	adds	r2, r3, #1
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	1c59      	adds	r1, r3, #1
 80017e0:	60f9      	str	r1, [r7, #12]
 80017e2:	7812      	ldrb	r2, [r2, #0]
 80017e4:	701a      	strb	r2, [r3, #0]
                    break;
 80017e6:	e00c      	b.n	8001802 <parse_string+0x206>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 80017e8:	f107 030c 	add.w	r3, r7, #12
 80017ec:	461a      	mov	r2, r3
 80017ee:	6a39      	ldr	r1, [r7, #32]
 80017f0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80017f2:	f7ff fe1b 	bl	800142c <utf16_literal_to_utf8>
 80017f6:	4603      	mov	r3, r0
 80017f8:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 80017fa:	7dfb      	ldrb	r3, [r7, #23]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d02c      	beq.n	800185a <parse_string+0x25e>
                    break;
 8001800:	bf00      	nop
            }
            input_pointer += sequence_length;
 8001802:	7dfb      	ldrb	r3, [r7, #23]
 8001804:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001806:	4413      	add	r3, r2
 8001808:	627b      	str	r3, [r7, #36]	@ 0x24
    while (input_pointer < input_end)
 800180a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800180c:	6a3b      	ldr	r3, [r7, #32]
 800180e:	429a      	cmp	r2, r3
 8001810:	f4ff af66 	bcc.w	80016e0 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2200      	movs	r2, #0
 8001818:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2210      	movs	r2, #16
 800181e:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	69fa      	ldr	r2, [r7, #28]
 8001824:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6a3a      	ldr	r2, [r7, #32]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	461a      	mov	r2, r3
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	1c5a      	adds	r2, r3, #1
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	609a      	str	r2, [r3, #8]

    return true;
 800183e:	2301      	movs	r3, #1
 8001840:	e020      	b.n	8001884 <parse_string+0x288>
        goto fail;
 8001842:	bf00      	nop
 8001844:	e00a      	b.n	800185c <parse_string+0x260>
                    goto fail;
 8001846:	bf00      	nop
 8001848:	e008      	b.n	800185c <parse_string+0x260>
            goto fail; /* string ended unexpectedly */
 800184a:	bf00      	nop
 800184c:	e006      	b.n	800185c <parse_string+0x260>
            goto fail; /* allocation failure */
 800184e:	bf00      	nop
 8001850:	e004      	b.n	800185c <parse_string+0x260>
                goto fail;
 8001852:	bf00      	nop
 8001854:	e002      	b.n	800185c <parse_string+0x260>
                    goto fail;
 8001856:	bf00      	nop
 8001858:	e000      	b.n	800185c <parse_string+0x260>
                        goto fail;
 800185a:	bf00      	nop

fail:
    if (output != NULL)
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d005      	beq.n	800186e <parse_string+0x272>
    {
        input_buffer->hooks.deallocate(output);
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	695b      	ldr	r3, [r3, #20]
 8001866:	69f8      	ldr	r0, [r7, #28]
 8001868:	4798      	blx	r3
        output = NULL;
 800186a:	2300      	movs	r3, #0
 800186c:	61fb      	str	r3, [r7, #28]
    }

    if (input_pointer != NULL)
 800186e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001870:	2b00      	cmp	r3, #0
 8001872:	d006      	beq.n	8001882 <parse_string+0x286>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	461a      	mov	r2, r3
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	609a      	str	r2, [r3, #8]
    }

    return false;
 8001882:	2300      	movs	r3, #0
}
 8001884:	4618      	mov	r0, r3
 8001886:	3728      	adds	r7, #40	@ 0x28
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d003      	beq.n	80018a2 <buffer_skip_whitespace+0x16>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d101      	bne.n	80018a6 <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	e02c      	b.n	8001900 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d005      	beq.n	80018b8 <buffer_skip_whitespace+0x2c>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d306      	bcc.n	80018c6 <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	e021      	b.n	8001900 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	1c5a      	adds	r2, r3, #1
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d00d      	beq.n	80018e8 <buffer_skip_whitespace+0x5c>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d207      	bcs.n	80018e8 <buffer_skip_whitespace+0x5c>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	4413      	add	r3, r2
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b20      	cmp	r3, #32
 80018e6:	d9e9      	bls.n	80018bc <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689a      	ldr	r2, [r3, #8]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d104      	bne.n	80018fe <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	1e5a      	subs	r2, r3, #1
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 80018fe:	687b      	ldr	r3, [r7, #4]
}
 8001900:	4618      	mov	r0, r3
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d007      	beq.n	800192a <skip_utf8_bom+0x1e>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d003      	beq.n	800192a <skip_utf8_bom+0x1e>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <skip_utf8_bom+0x22>
    {
        return NULL;
 800192a:	2300      	movs	r3, #0
 800192c:	e01c      	b.n	8001968 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d018      	beq.n	8001966 <skip_utf8_bom+0x5a>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	1d1a      	adds	r2, r3, #4
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	429a      	cmp	r2, r3
 8001940:	d211      	bcs.n	8001966 <skip_utf8_bom+0x5a>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	4413      	add	r3, r2
 800194c:	2203      	movs	r2, #3
 800194e:	4908      	ldr	r1, [pc, #32]	@ (8001970 <skip_utf8_bom+0x64>)
 8001950:	4618      	mov	r0, r3
 8001952:	f008 fcb6 	bl	800a2c2 <strncmp>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d104      	bne.n	8001966 <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	1cda      	adds	r2, r3, #3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001966:	687b      	ldr	r3, [r7, #4]
}
 8001968:	4618      	mov	r0, r3
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	0800c2f8 	.word	0x0800c2f8

08001974 <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d101      	bne.n	800198a <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 8001986:	2300      	movs	r3, #0
 8001988:	e00c      	b.n	80019a4 <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 800198a:	68f8      	ldr	r0, [r7, #12]
 800198c:	f7fe fc4a 	bl	8000224 <strlen>
 8001990:	4603      	mov	r3, r0
 8001992:	3301      	adds	r3, #1
 8001994:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	68ba      	ldr	r2, [r7, #8]
 800199a:	6979      	ldr	r1, [r7, #20]
 800199c:	68f8      	ldr	r0, [r7, #12]
 800199e:	f000 f805 	bl	80019ac <cJSON_ParseWithLengthOpts>
 80019a2:	4603      	mov	r3, r0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3718      	adds	r7, #24
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08e      	sub	sp, #56	@ 0x38
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
 80019b8:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 80019ba:	f107 0318 	add.w	r3, r7, #24
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	605a      	str	r2, [r3, #4]
 80019c4:	609a      	str	r2, [r3, #8]
 80019c6:	60da      	str	r2, [r3, #12]
 80019c8:	611a      	str	r2, [r3, #16]
 80019ca:	615a      	str	r2, [r3, #20]
 80019cc:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	637b      	str	r3, [r7, #52]	@ 0x34

    /* reset error position */
    global_error.json = NULL;
 80019d2:	4b41      	ldr	r3, [pc, #260]	@ (8001ad8 <cJSON_ParseWithLengthOpts+0x12c>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 80019d8:	4b3f      	ldr	r3, [pc, #252]	@ (8001ad8 <cJSON_ParseWithLengthOpts+0x12c>)
 80019da:	2200      	movs	r2, #0
 80019dc:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d042      	beq.n	8001a6a <cJSON_ParseWithLengthOpts+0xbe>
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d03f      	beq.n	8001a6a <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 80019f6:	4a39      	ldr	r2, [pc, #228]	@ (8001adc <cJSON_ParseWithLengthOpts+0x130>)
 80019f8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80019fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 8001a02:	4836      	ldr	r0, [pc, #216]	@ (8001adc <cJSON_ParseWithLengthOpts+0x130>)
 8001a04:	f7ff fb74 	bl	80010f0 <cJSON_New_Item>
 8001a08:	6378      	str	r0, [r7, #52]	@ 0x34
    if (item == NULL) /* memory fail */
 8001a0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d02e      	beq.n	8001a6e <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 8001a10:	f107 0318 	add.w	r3, r7, #24
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff ff79 	bl	800190c <skip_utf8_bom>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff ff35 	bl	800188c <buffer_skip_whitespace>
 8001a22:	4603      	mov	r3, r0
 8001a24:	4619      	mov	r1, r3
 8001a26:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001a28:	f000 f868 	bl	8001afc <parse_value>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d01f      	beq.n	8001a72 <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d00e      	beq.n	8001a56 <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 8001a38:	f107 0318 	add.w	r3, r7, #24
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff ff25 	bl	800188c <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 8001a42:	6a3a      	ldr	r2, [r7, #32]
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d215      	bcs.n	8001a76 <cJSON_ParseWithLengthOpts+0xca>
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	6a3b      	ldr	r3, [r7, #32]
 8001a4e:	4413      	add	r3, r2
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d10f      	bne.n	8001a76 <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d004      	beq.n	8001a66 <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	6a3b      	ldr	r3, [r7, #32]
 8001a60:	441a      	add	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	601a      	str	r2, [r3, #0]
    }

    return item;
 8001a66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a68:	e031      	b.n	8001ace <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 8001a6a:	bf00      	nop
 8001a6c:	e004      	b.n	8001a78 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8001a6e:	bf00      	nop
 8001a70:	e002      	b.n	8001a78 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8001a72:	bf00      	nop
 8001a74:	e000      	b.n	8001a78 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 8001a76:	bf00      	nop

fail:
    if (item != NULL)
 8001a78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d002      	beq.n	8001a84 <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 8001a7e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001a80:	f7ff fb4c 	bl	800111c <cJSON_Delete>
    }

    if (value != NULL)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d020      	beq.n	8001acc <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 8001a92:	6a3a      	ldr	r2, [r7, #32]
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d202      	bcs.n	8001aa0 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 8001a9a:	6a3b      	ldr	r3, [r7, #32]
 8001a9c:	617b      	str	r3, [r7, #20]
 8001a9e:	e005      	b.n	8001aac <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d002      	beq.n	8001aac <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d004      	beq.n	8001abc <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	441a      	add	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 8001abc:	4b06      	ldr	r3, [pc, #24]	@ (8001ad8 <cJSON_ParseWithLengthOpts+0x12c>)
 8001abe:	461a      	mov	r2, r3
 8001ac0:	f107 0310 	add.w	r3, r7, #16
 8001ac4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001ac8:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3738      	adds	r7, #56	@ 0x38
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20000200 	.word	0x20000200
 8001adc:	20000000 	.word	0x20000000

08001ae0 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 8001ae8:	2200      	movs	r2, #0
 8001aea:	2100      	movs	r1, #0
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f7ff ff41 	bl	8001974 <cJSON_ParseWithOpts>
 8001af2:	4603      	mov	r3, r0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d003      	beq.n	8001b14 <parse_value+0x18>
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d101      	bne.n	8001b18 <parse_value+0x1c>
    {
        return false; /* no input */
 8001b14:	2300      	movs	r3, #0
 8001b16:	e0d2      	b.n	8001cbe <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d01d      	beq.n	8001b5a <parse_value+0x5e>
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	1d1a      	adds	r2, r3, #4
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d816      	bhi.n	8001b5a <parse_value+0x5e>
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	4413      	add	r3, r2
 8001b36:	2204      	movs	r2, #4
 8001b38:	4963      	ldr	r1, [pc, #396]	@ (8001cc8 <parse_value+0x1cc>)
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f008 fbc1 	bl	800a2c2 <strncmp>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d109      	bne.n	8001b5a <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2204      	movs	r2, #4
 8001b4a:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	1d1a      	adds	r2, r3, #4
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	609a      	str	r2, [r3, #8]
        return true;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e0b1      	b.n	8001cbe <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d01d      	beq.n	8001b9c <parse_value+0xa0>
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	1d5a      	adds	r2, r3, #5
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d816      	bhi.n	8001b9c <parse_value+0xa0>
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	4413      	add	r3, r2
 8001b78:	2205      	movs	r2, #5
 8001b7a:	4954      	ldr	r1, [pc, #336]	@ (8001ccc <parse_value+0x1d0>)
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f008 fba0 	bl	800a2c2 <strncmp>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d109      	bne.n	8001b9c <parse_value+0xa0>
    {
        item->type = cJSON_False;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	1d5a      	adds	r2, r3, #5
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	609a      	str	r2, [r3, #8]
        return true;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e090      	b.n	8001cbe <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d020      	beq.n	8001be4 <parse_value+0xe8>
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	1d1a      	adds	r2, r3, #4
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d819      	bhi.n	8001be4 <parse_value+0xe8>
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	4413      	add	r3, r2
 8001bba:	2204      	movs	r2, #4
 8001bbc:	4944      	ldr	r1, [pc, #272]	@ (8001cd0 <parse_value+0x1d4>)
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f008 fb7f 	bl	800a2c2 <strncmp>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d10c      	bne.n	8001be4 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2202      	movs	r2, #2
 8001bce:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	1d1a      	adds	r2, r3, #4
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	609a      	str	r2, [r3, #8]
        return true;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e06c      	b.n	8001cbe <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d013      	beq.n	8001c12 <parse_value+0x116>
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	689a      	ldr	r2, [r3, #8]
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d20d      	bcs.n	8001c12 <parse_value+0x116>
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	4413      	add	r3, r2
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	2b22      	cmp	r3, #34	@ 0x22
 8001c04:	d105      	bne.n	8001c12 <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 8001c06:	6839      	ldr	r1, [r7, #0]
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f7ff fcf7 	bl	80015fc <parse_string>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	e055      	b.n	8001cbe <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d023      	beq.n	8001c60 <parse_value+0x164>
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	689a      	ldr	r2, [r3, #8]
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d21d      	bcs.n	8001c60 <parse_value+0x164>
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b2d      	cmp	r3, #45	@ 0x2d
 8001c32:	d00f      	beq.n	8001c54 <parse_value+0x158>
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b2f      	cmp	r3, #47	@ 0x2f
 8001c42:	d90d      	bls.n	8001c60 <parse_value+0x164>
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2b39      	cmp	r3, #57	@ 0x39
 8001c52:	d805      	bhi.n	8001c60 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 8001c54:	6839      	ldr	r1, [r7, #0]
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7ff faba 	bl	80011d0 <parse_number>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	e02e      	b.n	8001cbe <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d013      	beq.n	8001c8e <parse_value+0x192>
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	689a      	ldr	r2, [r3, #8]
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d20d      	bcs.n	8001c8e <parse_value+0x192>
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	2b5b      	cmp	r3, #91	@ 0x5b
 8001c80:	d105      	bne.n	8001c8e <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 8001c82:	6839      	ldr	r1, [r7, #0]
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 f825 	bl	8001cd4 <parse_array>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	e017      	b.n	8001cbe <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d013      	beq.n	8001cbc <parse_value+0x1c0>
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d20d      	bcs.n	8001cbc <parse_value+0x1c0>
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	4413      	add	r3, r2
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b7b      	cmp	r3, #123	@ 0x7b
 8001cae:	d105      	bne.n	8001cbc <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 8001cb0:	6839      	ldr	r1, [r7, #0]
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 f8d2 	bl	8001e5c <parse_object>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	e000      	b.n	8001cbe <parse_value+0x1c2>
    }

    return false;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	0800c2cc 	.word	0x0800c2cc
 8001ccc:	0800c2fc 	.word	0x0800c2fc
 8001cd0:	0800c304 	.word	0x0800c304

08001cd4 <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 8001cde:	2300      	movs	r3, #0
 8001ce0:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001cee:	d301      	bcc.n	8001cf4 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	e0af      	b.n	8001e54 <parse_array+0x180>
    }
    input_buffer->depth++;
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	1c5a      	adds	r2, r3, #1
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	4413      	add	r3, r2
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	2b5b      	cmp	r3, #91	@ 0x5b
 8001d0c:	f040 8094 	bne.w	8001e38 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	1c5a      	adds	r2, r3, #1
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8001d1a:	6838      	ldr	r0, [r7, #0]
 8001d1c:	f7ff fdb6 	bl	800188c <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00d      	beq.n	8001d42 <parse_array+0x6e>
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	689a      	ldr	r2, [r3, #8]
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d207      	bcs.n	8001d42 <parse_array+0x6e>
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	2b5d      	cmp	r3, #93	@ 0x5d
 8001d40:	d061      	beq.n	8001e06 <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d005      	beq.n	8001d54 <parse_array+0x80>
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d305      	bcc.n	8001d60 <parse_array+0x8c>
    {
        input_buffer->offset--;
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	1e5a      	subs	r2, r3, #1
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	609a      	str	r2, [r3, #8]
        goto fail;
 8001d5e:	e072      	b.n	8001e46 <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	1e5a      	subs	r2, r3, #1
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	3310      	adds	r3, #16
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff f9be 	bl	80010f0 <cJSON_New_Item>
 8001d74:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d05f      	beq.n	8001e3c <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d104      	bne.n	8001d8c <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	617b      	str	r3, [r7, #20]
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	613b      	str	r3, [r7, #16]
 8001d8a:	e007      	b.n	8001d9c <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	1c5a      	adds	r2, r3, #1
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001da6:	6838      	ldr	r0, [r7, #0]
 8001da8:	f7ff fd70 	bl	800188c <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8001dac:	6839      	ldr	r1, [r7, #0]
 8001dae:	6938      	ldr	r0, [r7, #16]
 8001db0:	f7ff fea4 	bl	8001afc <parse_value>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d042      	beq.n	8001e40 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8001dba:	6838      	ldr	r0, [r7, #0]
 8001dbc:	f7ff fd66 	bl	800188c <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00d      	beq.n	8001de2 <parse_array+0x10e>
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	689a      	ldr	r2, [r3, #8]
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d207      	bcs.n	8001de2 <parse_array+0x10e>
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	4413      	add	r3, r2
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b2c      	cmp	r3, #44	@ 0x2c
 8001de0:	d0c3      	beq.n	8001d6a <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d02d      	beq.n	8001e44 <parse_array+0x170>
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d227      	bcs.n	8001e44 <parse_array+0x170>
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2b5d      	cmp	r3, #93	@ 0x5d
 8001e02:	d11f      	bne.n	8001e44 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 8001e04:	e000      	b.n	8001e08 <parse_array+0x134>
        goto success;
 8001e06:	bf00      	nop
    input_buffer->depth--;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	1e5a      	subs	r2, r3, #1
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d002      	beq.n	8001e1e <parse_array+0x14a>
        head->prev = current_item;
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2220      	movs	r2, #32
 8001e22:	60da      	str	r2, [r3, #12]
    item->child = head;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	697a      	ldr	r2, [r7, #20]
 8001e28:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	1c5a      	adds	r2, r3, #1
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	609a      	str	r2, [r3, #8]

    return true;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e00d      	b.n	8001e54 <parse_array+0x180>
        goto fail;
 8001e38:	bf00      	nop
 8001e3a:	e004      	b.n	8001e46 <parse_array+0x172>
            goto fail; /* allocation failure */
 8001e3c:	bf00      	nop
 8001e3e:	e002      	b.n	8001e46 <parse_array+0x172>
            goto fail; /* failed to parse value */
 8001e40:	bf00      	nop
 8001e42:	e000      	b.n	8001e46 <parse_array+0x172>
        goto fail; /* expected end of array */
 8001e44:	bf00      	nop

fail:
    if (head != NULL)
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d002      	beq.n	8001e52 <parse_array+0x17e>
    {
        cJSON_Delete(head);
 8001e4c:	6978      	ldr	r0, [r7, #20]
 8001e4e:	f7ff f965 	bl	800111c <cJSON_Delete>
    }

    return false;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3718      	adds	r7, #24
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 8001e66:	2300      	movs	r3, #0
 8001e68:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e76:	d301      	bcc.n	8001e7c <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8001e78:	2300      	movs	r3, #0
 8001e7a:	e0f7      	b.n	800206c <parse_object+0x210>
    }
    input_buffer->depth++;
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	1c5a      	adds	r2, r3, #1
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	f000 80db 	beq.w	8002044 <parse_object+0x1e8>
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	689a      	ldr	r2, [r3, #8]
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	f080 80d4 	bcs.w	8002044 <parse_object+0x1e8>
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b7b      	cmp	r3, #123	@ 0x7b
 8001eaa:	f040 80cb 	bne.w	8002044 <parse_object+0x1e8>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	1c5a      	adds	r2, r3, #1
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8001eb8:	6838      	ldr	r0, [r7, #0]
 8001eba:	f7ff fce7 	bl	800188c <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d00e      	beq.n	8001ee2 <parse_object+0x86>
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d208      	bcs.n	8001ee2 <parse_object+0x86>
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	4413      	add	r3, r2
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	2b7d      	cmp	r3, #125	@ 0x7d
 8001ede:	f000 8098 	beq.w	8002012 <parse_object+0x1b6>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d005      	beq.n	8001ef4 <parse_object+0x98>
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d305      	bcc.n	8001f00 <parse_object+0xa4>
    {
        input_buffer->offset--;
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	1e5a      	subs	r2, r3, #1
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	609a      	str	r2, [r3, #8]
        goto fail;
 8001efe:	e0ae      	b.n	800205e <parse_object+0x202>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	1e5a      	subs	r2, r3, #1
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	3310      	adds	r3, #16
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff f8ee 	bl	80010f0 <cJSON_New_Item>
 8001f14:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f000 8095 	beq.w	8002048 <parse_object+0x1ec>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d104      	bne.n	8001f2e <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	617b      	str	r3, [r7, #20]
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	613b      	str	r3, [r7, #16]
 8001f2c:	e007      	b.n	8001f3e <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	613b      	str	r3, [r7, #16]
        }

        if (cannot_access_at_index(input_buffer, 1))
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f000 8083 	beq.w	800204c <parse_object+0x1f0>
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	1c5a      	adds	r2, r3, #1
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d27b      	bcs.n	800204c <parse_object+0x1f0>
        {
            goto fail; /* nothing comes after the comma */
        }

        /* parse the name of the child */
        input_buffer->offset++;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	1c5a      	adds	r2, r3, #1
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001f5e:	6838      	ldr	r0, [r7, #0]
 8001f60:	f7ff fc94 	bl	800188c <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8001f64:	6839      	ldr	r1, [r7, #0]
 8001f66:	6938      	ldr	r0, [r7, #16]
 8001f68:	f7ff fb48 	bl	80015fc <parse_string>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d06e      	beq.n	8002050 <parse_object+0x1f4>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8001f72:	6838      	ldr	r0, [r7, #0]
 8001f74:	f7ff fc8a 	bl	800188c <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	691a      	ldr	r2, [r3, #16]
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	2200      	movs	r2, #0
 8001f84:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d063      	beq.n	8002054 <parse_object+0x1f8>
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	689a      	ldr	r2, [r3, #8]
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d25d      	bcs.n	8002054 <parse_object+0x1f8>
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b3a      	cmp	r3, #58	@ 0x3a
 8001fa6:	d155      	bne.n	8002054 <parse_object+0x1f8>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	1c5a      	adds	r2, r3, #1
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001fb2:	6838      	ldr	r0, [r7, #0]
 8001fb4:	f7ff fc6a 	bl	800188c <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8001fb8:	6839      	ldr	r1, [r7, #0]
 8001fba:	6938      	ldr	r0, [r7, #16]
 8001fbc:	f7ff fd9e 	bl	8001afc <parse_value>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d048      	beq.n	8002058 <parse_object+0x1fc>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8001fc6:	6838      	ldr	r0, [r7, #0]
 8001fc8:	f7ff fc60 	bl	800188c <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00d      	beq.n	8001fee <parse_object+0x192>
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	689a      	ldr	r2, [r3, #8]
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d207      	bcs.n	8001fee <parse_object+0x192>
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2b2c      	cmp	r3, #44	@ 0x2c
 8001fec:	d08d      	beq.n	8001f0a <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d033      	beq.n	800205c <parse_object+0x200>
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d22d      	bcs.n	800205c <parse_object+0x200>
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	4413      	add	r3, r2
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	2b7d      	cmp	r3, #125	@ 0x7d
 800200e:	d125      	bne.n	800205c <parse_object+0x200>
    {
        goto fail; /* expected end of object */
    }

success:
 8002010:	e000      	b.n	8002014 <parse_object+0x1b8>
        goto success; /* empty object */
 8002012:	bf00      	nop
    input_buffer->depth--;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	1e5a      	subs	r2, r3, #1
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d002      	beq.n	800202a <parse_object+0x1ce>
        head->prev = current_item;
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2240      	movs	r2, #64	@ 0x40
 800202e:	60da      	str	r2, [r3, #12]
    item->child = head;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	1c5a      	adds	r2, r3, #1
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	609a      	str	r2, [r3, #8]
    return true;
 8002040:	2301      	movs	r3, #1
 8002042:	e013      	b.n	800206c <parse_object+0x210>
        goto fail; /* not an object */
 8002044:	bf00      	nop
 8002046:	e00a      	b.n	800205e <parse_object+0x202>
            goto fail; /* allocation failure */
 8002048:	bf00      	nop
 800204a:	e008      	b.n	800205e <parse_object+0x202>
            goto fail; /* nothing comes after the comma */
 800204c:	bf00      	nop
 800204e:	e006      	b.n	800205e <parse_object+0x202>
            goto fail; /* failed to parse name */
 8002050:	bf00      	nop
 8002052:	e004      	b.n	800205e <parse_object+0x202>
            goto fail; /* invalid object */
 8002054:	bf00      	nop
 8002056:	e002      	b.n	800205e <parse_object+0x202>
            goto fail; /* failed to parse value */
 8002058:	bf00      	nop
 800205a:	e000      	b.n	800205e <parse_object+0x202>
        goto fail; /* expected end of object */
 800205c:	bf00      	nop

fail:
    if (head != NULL)
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d002      	beq.n	800206a <parse_object+0x20e>
    {
        cJSON_Delete(head);
 8002064:	6978      	ldr	r0, [r7, #20]
 8002066:	f7ff f859 	bl	800111c <cJSON_Delete>
    }

    return false;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3718      	adds	r7, #24
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d002      	beq.n	8002090 <get_object_item+0x1c>
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d101      	bne.n	8002094 <get_object_item+0x20>
    {
        return NULL;
 8002090:	2300      	movs	r3, #0
 8002092:	e033      	b.n	80020fc <get_object_item+0x88>
    }

    current_element = object->child;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d017      	beq.n	80020d0 <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 80020a0:	e002      	b.n	80020a8 <get_object_item+0x34>
        {
            current_element = current_element->next;
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d01c      	beq.n	80020e8 <get_object_item+0x74>
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d018      	beq.n	80020e8 <get_object_item+0x74>
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	6a1b      	ldr	r3, [r3, #32]
 80020ba:	4619      	mov	r1, r3
 80020bc:	68b8      	ldr	r0, [r7, #8]
 80020be:	f7fe f8a7 	bl	8000210 <strcmp>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1ec      	bne.n	80020a2 <get_object_item+0x2e>
 80020c8:	e00e      	b.n	80020e8 <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d008      	beq.n	80020e8 <get_object_item+0x74>
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	6a1b      	ldr	r3, [r3, #32]
 80020da:	4619      	mov	r1, r3
 80020dc:	68b8      	ldr	r0, [r7, #8]
 80020de:	f7fe ff9b 	bl	8001018 <case_insensitive_strcmp>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d1f0      	bne.n	80020ca <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <get_object_item+0x82>
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	6a1b      	ldr	r3, [r3, #32]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <get_object_item+0x86>
        return NULL;
 80020f6:	2300      	movs	r3, #0
 80020f8:	e000      	b.n	80020fc <get_object_item+0x88>
    }

    return current_element;
 80020fa:	697b      	ldr	r3, [r7, #20]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3718      	adds	r7, #24
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <cJSON_GetObjectItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 800210e:	2200      	movs	r2, #0
 8002110:	6839      	ldr	r1, [r7, #0]
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7ff ffae 	bl	8002074 <get_object_item>
 8002118:	4603      	mov	r3, r0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <cJSON_IsNumber>:

    return (item->type & 0xFF) == cJSON_NULL;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
 8002122:	b480      	push	{r7}
 8002124:	b083      	sub	sp, #12
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d101      	bne.n	8002134 <cJSON_IsNumber+0x12>
    {
        return false;
 8002130:	2300      	movs	r3, #0
 8002132:	e007      	b.n	8002144 <cJSON_IsNumber+0x22>
    }

    return (item->type & 0xFF) == cJSON_Number;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b08      	cmp	r3, #8
 800213c:	bf0c      	ite	eq
 800213e:	2301      	moveq	r3, #1
 8002140:	2300      	movne	r3, #0
 8002142:	b2db      	uxtb	r3, r3
}
 8002144:	4618      	mov	r0, r3
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	4a07      	ldr	r2, [pc, #28]	@ (800217c <vApplicationGetIdleTaskMemory+0x2c>)
 8002160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	4a06      	ldr	r2, [pc, #24]	@ (8002180 <vApplicationGetIdleTaskMemory+0x30>)
 8002166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2280      	movs	r2, #128	@ 0x80
 800216c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800216e:	bf00      	nop
 8002170:	3714      	adds	r7, #20
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	20000208 	.word	0x20000208
 8002180:	200002a8 	.word	0x200002a8

08002184 <process_command>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void process_command(char* cmd) {
 8002184:	b580      	push	{r7, lr}
 8002186:	b08c      	sub	sp, #48	@ 0x30
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
	cJSON *json_data = cJSON_Parse(cmd);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f7ff fca7 	bl	8001ae0 <cJSON_Parse>
 8002192:	62f8      	str	r0, [r7, #44]	@ 0x2c
	if (json_data != NULL) {
 8002194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002196:	2b00      	cmp	r3, #0
 8002198:	f000 8092 	beq.w	80022c0 <process_command+0x13c>
		// Extract data from the JSON object
		cJSON *rpm = cJSON_GetObjectItem(json_data, "rpm");
 800219c:	494f      	ldr	r1, [pc, #316]	@ (80022dc <process_command+0x158>)
 800219e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80021a0:	f7ff ffb0 	bl	8002104 <cJSON_GetObjectItem>
 80021a4:	62b8      	str	r0, [r7, #40]	@ 0x28
		cJSON *gear = cJSON_GetObjectItem(json_data, "gear");
 80021a6:	494e      	ldr	r1, [pc, #312]	@ (80022e0 <process_command+0x15c>)
 80021a8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80021aa:	f7ff ffab 	bl	8002104 <cJSON_GetObjectItem>
 80021ae:	6278      	str	r0, [r7, #36]	@ 0x24
		cJSON *speedKmh = cJSON_GetObjectItem(json_data, "speedKmh");
 80021b0:	494c      	ldr	r1, [pc, #304]	@ (80022e4 <process_command+0x160>)
 80021b2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80021b4:	f7ff ffa6 	bl	8002104 <cJSON_GetObjectItem>
 80021b8:	6238      	str	r0, [r7, #32]
		cJSON *hasDRS = cJSON_GetObjectItem(json_data, "hasDRS");
 80021ba:	494b      	ldr	r1, [pc, #300]	@ (80022e8 <process_command+0x164>)
 80021bc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80021be:	f7ff ffa1 	bl	8002104 <cJSON_GetObjectItem>
 80021c2:	61f8      	str	r0, [r7, #28]
		cJSON *drs = cJSON_GetObjectItem(json_data, "drs");
 80021c4:	4949      	ldr	r1, [pc, #292]	@ (80022ec <process_command+0x168>)
 80021c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80021c8:	f7ff ff9c 	bl	8002104 <cJSON_GetObjectItem>
 80021cc:	61b8      	str	r0, [r7, #24]
		cJSON *pitLim = cJSON_GetObjectItem(json_data, "pitLim");
 80021ce:	4948      	ldr	r1, [pc, #288]	@ (80022f0 <process_command+0x16c>)
 80021d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80021d2:	f7ff ff97 	bl	8002104 <cJSON_GetObjectItem>
 80021d6:	6178      	str	r0, [r7, #20]
		cJSON *fuel = cJSON_GetObjectItem(json_data, "fuel");
 80021d8:	4946      	ldr	r1, [pc, #280]	@ (80022f4 <process_command+0x170>)
 80021da:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80021dc:	f7ff ff92 	bl	8002104 <cJSON_GetObjectItem>
 80021e0:	6138      	str	r0, [r7, #16]
		cJSON *brakeBias = cJSON_GetObjectItem(json_data, "brakeBias");
 80021e2:	4945      	ldr	r1, [pc, #276]	@ (80022f8 <process_command+0x174>)
 80021e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80021e6:	f7ff ff8d 	bl	8002104 <cJSON_GetObjectItem>
 80021ea:	60f8      	str	r0, [r7, #12]
		cJSON *forceFB = cJSON_GetObjectItem(json_data, "forceFB");
 80021ec:	4943      	ldr	r1, [pc, #268]	@ (80022fc <process_command+0x178>)
 80021ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80021f0:	f7ff ff88 	bl	8002104 <cJSON_GetObjectItem>
 80021f4:	60b8      	str	r0, [r7, #8]

		// Check if items were found and extract values
		if (cJSON_IsNumber(rpm)) { telemetry_data.tRpm = rpm->valueint; }
 80021f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80021f8:	f7ff ff93 	bl	8002122 <cJSON_IsNumber>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <process_command+0x86>
 8002202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	4a3e      	ldr	r2, [pc, #248]	@ (8002300 <process_command+0x17c>)
 8002208:	6013      	str	r3, [r2, #0]
		if (cJSON_IsNumber(gear)) { telemetry_data.tGear = gear->valueint; }
 800220a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800220c:	f7ff ff89 	bl	8002122 <cJSON_IsNumber>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <process_command+0x9a>
 8002216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	4a39      	ldr	r2, [pc, #228]	@ (8002300 <process_command+0x17c>)
 800221c:	6053      	str	r3, [r2, #4]
		if (cJSON_IsNumber(speedKmh)) { telemetry_data.tSpeedKmh = speedKmh->valueint; }
 800221e:	6a38      	ldr	r0, [r7, #32]
 8002220:	f7ff ff7f 	bl	8002122 <cJSON_IsNumber>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d003      	beq.n	8002232 <process_command+0xae>
 800222a:	6a3b      	ldr	r3, [r7, #32]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	4a34      	ldr	r2, [pc, #208]	@ (8002300 <process_command+0x17c>)
 8002230:	6093      	str	r3, [r2, #8]
		if (cJSON_IsNumber(hasDRS)) { telemetry_data.tHasDRS = hasDRS->valueint; }
 8002232:	69f8      	ldr	r0, [r7, #28]
 8002234:	f7ff ff75 	bl	8002122 <cJSON_IsNumber>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d003      	beq.n	8002246 <process_command+0xc2>
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	4a2f      	ldr	r2, [pc, #188]	@ (8002300 <process_command+0x17c>)
 8002244:	60d3      	str	r3, [r2, #12]
		if (cJSON_IsNumber(drs)) { telemetry_data.tDrs = drs->valueint; }
 8002246:	69b8      	ldr	r0, [r7, #24]
 8002248:	f7ff ff6b 	bl	8002122 <cJSON_IsNumber>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <process_command+0xd6>
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	4a2a      	ldr	r2, [pc, #168]	@ (8002300 <process_command+0x17c>)
 8002258:	6113      	str	r3, [r2, #16]
		if (cJSON_IsNumber(pitLim)) { telemetry_data.tPitLim = pitLim->valueint; }
 800225a:	6978      	ldr	r0, [r7, #20]
 800225c:	f7ff ff61 	bl	8002122 <cJSON_IsNumber>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d003      	beq.n	800226e <process_command+0xea>
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	4a25      	ldr	r2, [pc, #148]	@ (8002300 <process_command+0x17c>)
 800226c:	6153      	str	r3, [r2, #20]
		if (cJSON_IsNumber(fuel)) { telemetry_data.tFuel = fuel->valueint; }
 800226e:	6938      	ldr	r0, [r7, #16]
 8002270:	f7ff ff57 	bl	8002122 <cJSON_IsNumber>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <process_command+0xfe>
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	4a20      	ldr	r2, [pc, #128]	@ (8002300 <process_command+0x17c>)
 8002280:	6193      	str	r3, [r2, #24]
		if (cJSON_IsNumber(brakeBias)) { telemetry_data.tBrakeBias = brakeBias->valueint; }
 8002282:	68f8      	ldr	r0, [r7, #12]
 8002284:	f7ff ff4d 	bl	8002122 <cJSON_IsNumber>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <process_command+0x112>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	4a1b      	ldr	r2, [pc, #108]	@ (8002300 <process_command+0x17c>)
 8002294:	61d3      	str	r3, [r2, #28]
		if (cJSON_IsNumber(forceFB)) { telemetry_data.tForceFB = (float)forceFB->valuedouble; }
 8002296:	68b8      	ldr	r0, [r7, #8]
 8002298:	f7ff ff43 	bl	8002122 <cJSON_IsNumber>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d00e      	beq.n	80022c0 <process_command+0x13c>
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80022a8:	4610      	mov	r0, r2
 80022aa:	4619      	mov	r1, r3
 80022ac:	f7fe fcb6 	bl	8000c1c <__aeabi_d2f>
 80022b0:	ee07 0a90 	vmov	s15, r0
 80022b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022b8:	ee17 2a90 	vmov	r2, s15
 80022bc:	4b10      	ldr	r3, [pc, #64]	@ (8002300 <process_command+0x17c>)
 80022be:	621a      	str	r2, [r3, #32]
		}
		// Cleanup
		cJSON_Delete(json_data);
 80022c0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80022c2:	f7fe ff2b 	bl	800111c <cJSON_Delete>
		// Clear the buffer for the next message
		memset(gCommandData, 0, BUFFER_SIZE);
 80022c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80022ca:	2100      	movs	r1, #0
 80022cc:	480d      	ldr	r0, [pc, #52]	@ (8002304 <process_command+0x180>)
 80022ce:	f007 fff0 	bl	800a2b2 <memset>
}
 80022d2:	bf00      	nop
 80022d4:	3730      	adds	r7, #48	@ 0x30
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	0800c30c 	.word	0x0800c30c
 80022e0:	0800c310 	.word	0x0800c310
 80022e4:	0800c318 	.word	0x0800c318
 80022e8:	0800c324 	.word	0x0800c324
 80022ec:	0800c32c 	.word	0x0800c32c
 80022f0:	0800c330 	.word	0x0800c330
 80022f4:	0800c338 	.word	0x0800c338
 80022f8:	0800c340 	.word	0x0800c340
 80022fc:	0800c34c 	.word	0x0800c34c
 8002300:	200004a8 	.word	0x200004a8
 8002304:	200006e0 	.word	0x200006e0

08002308 <send_response>:

void send_response(const char* str) {
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
    if (str == NULL) {
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00c      	beq.n	8002330 <send_response+0x28>
        return; // Handle null pointer case if necessary
    }

    // Calculate the length of the string
    uint16_t len = strlen(str);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f7fd ff84 	bl	8000224 <strlen>
 800231c:	4603      	mov	r3, r0
 800231e:	81fb      	strh	r3, [r7, #14]

    // Transmit the string using HAL_UART_Transmit
    HAL_UART_Transmit(&huart2, (uint8_t*)str, len, HAL_MAX_DELAY);
 8002320:	89fa      	ldrh	r2, [r7, #14]
 8002322:	f04f 33ff 	mov.w	r3, #4294967295
 8002326:	6879      	ldr	r1, [r7, #4]
 8002328:	4803      	ldr	r0, [pc, #12]	@ (8002338 <send_response+0x30>)
 800232a:	f003 f951 	bl	80055d0 <HAL_UART_Transmit>
 800232e:	e000      	b.n	8002332 <send_response+0x2a>
        return; // Handle null pointer case if necessary
 8002330:	bf00      	nop
}
 8002332:	3710      	adds	r7, #16
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	20000584 	.word	0x20000584

0800233c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800233c:	b5b0      	push	{r4, r5, r7, lr}
 800233e:	b09e      	sub	sp, #120	@ 0x78
 8002340:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002342:	f000 fead 	bl	80030a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002346:	f000 f89f 	bl	8002488 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800234a:	f000 f993 	bl	8002674 <MX_GPIO_Init>
  MX_DMA_Init();
 800234e:	f000 f971 	bl	8002634 <MX_DMA_Init>
  MX_SPI2_Init();
 8002352:	f000 f907 	bl	8002564 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8002356:	f000 f93b 	bl	80025d0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  telemetry_data.tRpm = 0;
 800235a:	4b40      	ldr	r3, [pc, #256]	@ (800245c <main+0x120>)
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
  telemetry_data.tRpm = 0;
 8002360:	4b3e      	ldr	r3, [pc, #248]	@ (800245c <main+0x120>)
 8002362:	2200      	movs	r2, #0
 8002364:	601a      	str	r2, [r3, #0]
  telemetry_data.tSpeedKmh = 0;
 8002366:	4b3d      	ldr	r3, [pc, #244]	@ (800245c <main+0x120>)
 8002368:	2200      	movs	r2, #0
 800236a:	609a      	str	r2, [r3, #8]
  telemetry_data.tHasDRS = 0;
 800236c:	4b3b      	ldr	r3, [pc, #236]	@ (800245c <main+0x120>)
 800236e:	2200      	movs	r2, #0
 8002370:	60da      	str	r2, [r3, #12]
  telemetry_data.tDrs = 0;
 8002372:	4b3a      	ldr	r3, [pc, #232]	@ (800245c <main+0x120>)
 8002374:	2200      	movs	r2, #0
 8002376:	611a      	str	r2, [r3, #16]
  telemetry_data.tPitLim = 0;
 8002378:	4b38      	ldr	r3, [pc, #224]	@ (800245c <main+0x120>)
 800237a:	2200      	movs	r2, #0
 800237c:	615a      	str	r2, [r3, #20]
  telemetry_data.tFuel = 0;
 800237e:	4b37      	ldr	r3, [pc, #220]	@ (800245c <main+0x120>)
 8002380:	2200      	movs	r2, #0
 8002382:	619a      	str	r2, [r3, #24]
  telemetry_data.tBrakeBias = 0;
 8002384:	4b35      	ldr	r3, [pc, #212]	@ (800245c <main+0x120>)
 8002386:	2200      	movs	r2, #0
 8002388:	61da      	str	r2, [r3, #28]
  telemetry_data.tForceFB = 0;
 800238a:	4b34      	ldr	r3, [pc, #208]	@ (800245c <main+0x120>)
 800238c:	2200      	movs	r2, #0
 800238e:	621a      	str	r2, [r3, #32]
  memset(&telemetry_data, 0, sizeof(telemetry_packet)); // Zero-initialize
 8002390:	2224      	movs	r2, #36	@ 0x24
 8002392:	2100      	movs	r1, #0
 8002394:	4831      	ldr	r0, [pc, #196]	@ (800245c <main+0x120>)
 8002396:	f007 ff8c 	bl	800a2b2 <memset>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of spiSendMutex */
  osSemaphoreDef(spiSendMutex);
 800239a:	2300      	movs	r3, #0
 800239c:	673b      	str	r3, [r7, #112]	@ 0x70
 800239e:	2300      	movs	r3, #0
 80023a0:	677b      	str	r3, [r7, #116]	@ 0x74
  spiSendMutexHandle = osSemaphoreCreate(osSemaphore(spiSendMutex), 1);
 80023a2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80023a6:	2101      	movs	r1, #1
 80023a8:	4618      	mov	r0, r3
 80023aa:	f004 f9eb 	bl	8006784 <osSemaphoreCreate>
 80023ae:	4603      	mov	r3, r0
 80023b0:	4a2b      	ldr	r2, [pc, #172]	@ (8002460 <main+0x124>)
 80023b2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80023b4:	4b2b      	ldr	r3, [pc, #172]	@ (8002464 <main+0x128>)
 80023b6:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 80023ba:	461d      	mov	r5, r3
 80023bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80023c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80023c8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80023cc:	2100      	movs	r1, #0
 80023ce:	4618      	mov	r0, r3
 80023d0:	f004 f937 	bl	8006642 <osThreadCreate>
 80023d4:	4603      	mov	r3, r0
 80023d6:	4a24      	ldr	r2, [pc, #144]	@ (8002468 <main+0x12c>)
 80023d8:	6013      	str	r3, [r2, #0]

  /* definition and creation of telemetryTask */
  osThreadDef(telemetryTask, StartTelemetryTask, osPriorityHigh, 0, 128);
 80023da:	4b24      	ldr	r3, [pc, #144]	@ (800246c <main+0x130>)
 80023dc:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 80023e0:	461d      	mov	r5, r3
 80023e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80023ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  telemetryTaskHandle = osThreadCreate(osThread(telemetryTask), NULL);
 80023ee:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80023f2:	2100      	movs	r1, #0
 80023f4:	4618      	mov	r0, r3
 80023f6:	f004 f924 	bl	8006642 <osThreadCreate>
 80023fa:	4603      	mov	r3, r0
 80023fc:	4a1c      	ldr	r2, [pc, #112]	@ (8002470 <main+0x134>)
 80023fe:	6013      	str	r3, [r2, #0]

  /* definition and creation of heartbeatTask */
  osThreadDef(heartbeatTask, StartHeartbeatTask, osPriorityLow, 0, 128);
 8002400:	4b1c      	ldr	r3, [pc, #112]	@ (8002474 <main+0x138>)
 8002402:	f107 041c 	add.w	r4, r7, #28
 8002406:	461d      	mov	r5, r3
 8002408:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800240a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800240c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002410:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  heartbeatTaskHandle = osThreadCreate(osThread(heartbeatTask), NULL);
 8002414:	f107 031c 	add.w	r3, r7, #28
 8002418:	2100      	movs	r1, #0
 800241a:	4618      	mov	r0, r3
 800241c:	f004 f911 	bl	8006642 <osThreadCreate>
 8002420:	4603      	mov	r3, r0
 8002422:	4a15      	ldr	r2, [pc, #84]	@ (8002478 <main+0x13c>)
 8002424:	6013      	str	r3, [r2, #0]

  /* definition and creation of SPISendDataTask */
  osThreadDef(SPISendDataTask, StartSPISend, osPriorityHigh, 0, 128);
 8002426:	4b15      	ldr	r3, [pc, #84]	@ (800247c <main+0x140>)
 8002428:	463c      	mov	r4, r7
 800242a:	461d      	mov	r5, r3
 800242c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800242e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002430:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002434:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SPISendDataTaskHandle = osThreadCreate(osThread(SPISendDataTask), NULL);
 8002438:	463b      	mov	r3, r7
 800243a:	2100      	movs	r1, #0
 800243c:	4618      	mov	r0, r3
 800243e:	f004 f900 	bl	8006642 <osThreadCreate>
 8002442:	4603      	mov	r3, r0
 8002444:	4a0e      	ldr	r2, [pc, #56]	@ (8002480 <main+0x144>)
 8002446:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002448:	f004 f8f4 	bl	8006634 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // Task creation
  // Start scheduler
  vTaskStartScheduler();
 800244c:	f005 fa78 	bl	8007940 <vTaskStartScheduler>
  send_response("STM Started");
 8002450:	480c      	ldr	r0, [pc, #48]	@ (8002484 <main+0x148>)
 8002452:	f7ff ff59 	bl	8002308 <send_response>
  while (1)
 8002456:	bf00      	nop
 8002458:	e7fd      	b.n	8002456 <main+0x11a>
 800245a:	bf00      	nop
 800245c:	200004a8 	.word	0x200004a8
 8002460:	200005dc 	.word	0x200005dc
 8002464:	0800c36c 	.word	0x0800c36c
 8002468:	200005cc 	.word	0x200005cc
 800246c:	0800c398 	.word	0x0800c398
 8002470:	200005d0 	.word	0x200005d0
 8002474:	0800c3c4 	.word	0x0800c3c4
 8002478:	200005d4 	.word	0x200005d4
 800247c:	0800c3f0 	.word	0x0800c3f0
 8002480:	200005d8 	.word	0x200005d8
 8002484:	0800c354 	.word	0x0800c354

08002488 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b094      	sub	sp, #80	@ 0x50
 800248c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800248e:	f107 031c 	add.w	r3, r7, #28
 8002492:	2234      	movs	r2, #52	@ 0x34
 8002494:	2100      	movs	r1, #0
 8002496:	4618      	mov	r0, r3
 8002498:	f007 ff0b 	bl	800a2b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800249c:	f107 0308 	add.w	r3, r7, #8
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	605a      	str	r2, [r3, #4]
 80024a6:	609a      	str	r2, [r3, #8]
 80024a8:	60da      	str	r2, [r3, #12]
 80024aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80024ac:	2300      	movs	r3, #0
 80024ae:	607b      	str	r3, [r7, #4]
 80024b0:	4b2a      	ldr	r3, [pc, #168]	@ (800255c <SystemClock_Config+0xd4>)
 80024b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b4:	4a29      	ldr	r2, [pc, #164]	@ (800255c <SystemClock_Config+0xd4>)
 80024b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80024bc:	4b27      	ldr	r3, [pc, #156]	@ (800255c <SystemClock_Config+0xd4>)
 80024be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024c4:	607b      	str	r3, [r7, #4]
 80024c6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80024c8:	2300      	movs	r3, #0
 80024ca:	603b      	str	r3, [r7, #0]
 80024cc:	4b24      	ldr	r3, [pc, #144]	@ (8002560 <SystemClock_Config+0xd8>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80024d4:	4a22      	ldr	r2, [pc, #136]	@ (8002560 <SystemClock_Config+0xd8>)
 80024d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024da:	6013      	str	r3, [r2, #0]
 80024dc:	4b20      	ldr	r3, [pc, #128]	@ (8002560 <SystemClock_Config+0xd8>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80024e4:	603b      	str	r3, [r7, #0]
 80024e6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80024e8:	2302      	movs	r3, #2
 80024ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024ec:	2301      	movs	r3, #1
 80024ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024f0:	2310      	movs	r3, #16
 80024f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024f4:	2302      	movs	r3, #2
 80024f6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80024f8:	2300      	movs	r3, #0
 80024fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80024fc:	2310      	movs	r3, #16
 80024fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002500:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002504:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002506:	2304      	movs	r3, #4
 8002508:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800250a:	2302      	movs	r3, #2
 800250c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800250e:	2302      	movs	r3, #2
 8002510:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002512:	f107 031c 	add.w	r3, r7, #28
 8002516:	4618      	mov	r0, r3
 8002518:	f002 f812 	bl	8004540 <HAL_RCC_OscConfig>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002522:	f000 fa45 	bl	80029b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002526:	230f      	movs	r3, #15
 8002528:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800252a:	2302      	movs	r3, #2
 800252c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800252e:	2300      	movs	r3, #0
 8002530:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002532:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002536:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002538:	2300      	movs	r3, #0
 800253a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800253c:	f107 0308 	add.w	r3, r7, #8
 8002540:	2102      	movs	r1, #2
 8002542:	4618      	mov	r0, r3
 8002544:	f001 fc80 	bl	8003e48 <HAL_RCC_ClockConfig>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800254e:	f000 fa2f 	bl	80029b0 <Error_Handler>
  }
}
 8002552:	bf00      	nop
 8002554:	3750      	adds	r7, #80	@ 0x50
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	40023800 	.word	0x40023800
 8002560:	40007000 	.word	0x40007000

08002564 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002568:	4b17      	ldr	r3, [pc, #92]	@ (80025c8 <MX_SPI2_Init+0x64>)
 800256a:	4a18      	ldr	r2, [pc, #96]	@ (80025cc <MX_SPI2_Init+0x68>)
 800256c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800256e:	4b16      	ldr	r3, [pc, #88]	@ (80025c8 <MX_SPI2_Init+0x64>)
 8002570:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002574:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002576:	4b14      	ldr	r3, [pc, #80]	@ (80025c8 <MX_SPI2_Init+0x64>)
 8002578:	2200      	movs	r2, #0
 800257a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800257c:	4b12      	ldr	r3, [pc, #72]	@ (80025c8 <MX_SPI2_Init+0x64>)
 800257e:	2200      	movs	r2, #0
 8002580:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002582:	4b11      	ldr	r3, [pc, #68]	@ (80025c8 <MX_SPI2_Init+0x64>)
 8002584:	2200      	movs	r2, #0
 8002586:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002588:	4b0f      	ldr	r3, [pc, #60]	@ (80025c8 <MX_SPI2_Init+0x64>)
 800258a:	2200      	movs	r2, #0
 800258c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800258e:	4b0e      	ldr	r3, [pc, #56]	@ (80025c8 <MX_SPI2_Init+0x64>)
 8002590:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002594:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002596:	4b0c      	ldr	r3, [pc, #48]	@ (80025c8 <MX_SPI2_Init+0x64>)
 8002598:	2230      	movs	r2, #48	@ 0x30
 800259a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800259c:	4b0a      	ldr	r3, [pc, #40]	@ (80025c8 <MX_SPI2_Init+0x64>)
 800259e:	2200      	movs	r2, #0
 80025a0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80025a2:	4b09      	ldr	r3, [pc, #36]	@ (80025c8 <MX_SPI2_Init+0x64>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025a8:	4b07      	ldr	r3, [pc, #28]	@ (80025c8 <MX_SPI2_Init+0x64>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80025ae:	4b06      	ldr	r3, [pc, #24]	@ (80025c8 <MX_SPI2_Init+0x64>)
 80025b0:	220a      	movs	r2, #10
 80025b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80025b4:	4804      	ldr	r0, [pc, #16]	@ (80025c8 <MX_SPI2_Init+0x64>)
 80025b6:	f002 fa61 	bl	8004a7c <HAL_SPI_Init>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80025c0:	f000 f9f6 	bl	80029b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80025c4:	bf00      	nop
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	200004cc 	.word	0x200004cc
 80025cc:	40003800 	.word	0x40003800

080025d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80025d4:	4b14      	ldr	r3, [pc, #80]	@ (8002628 <MX_USART2_UART_Init+0x58>)
 80025d6:	4a15      	ldr	r2, [pc, #84]	@ (800262c <MX_USART2_UART_Init+0x5c>)
 80025d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80025da:	4b13      	ldr	r3, [pc, #76]	@ (8002628 <MX_USART2_UART_Init+0x58>)
 80025dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80025e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80025e2:	4b11      	ldr	r3, [pc, #68]	@ (8002628 <MX_USART2_UART_Init+0x58>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80025e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002628 <MX_USART2_UART_Init+0x58>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80025ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002628 <MX_USART2_UART_Init+0x58>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80025f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002628 <MX_USART2_UART_Init+0x58>)
 80025f6:	220c      	movs	r2, #12
 80025f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002628 <MX_USART2_UART_Init+0x58>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002600:	4b09      	ldr	r3, [pc, #36]	@ (8002628 <MX_USART2_UART_Init+0x58>)
 8002602:	2200      	movs	r2, #0
 8002604:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002606:	4808      	ldr	r0, [pc, #32]	@ (8002628 <MX_USART2_UART_Init+0x58>)
 8002608:	f002 ff92 	bl	8005530 <HAL_UART_Init>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002612:	f000 f9cd 	bl	80029b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  HAL_UART_Receive_IT(&huart2, rx_buffer, sizeof(rx_buffer));
 8002616:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800261a:	4905      	ldr	r1, [pc, #20]	@ (8002630 <MX_USART2_UART_Init+0x60>)
 800261c:	4802      	ldr	r0, [pc, #8]	@ (8002628 <MX_USART2_UART_Init+0x58>)
 800261e:	f003 f862 	bl	80056e6 <HAL_UART_Receive_IT>
  /* USER CODE END USART2_Init 2 */

}
 8002622:	bf00      	nop
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	20000584 	.word	0x20000584
 800262c:	40004400 	.word	0x40004400
 8002630:	200005e0 	.word	0x200005e0

08002634 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800263a:	2300      	movs	r3, #0
 800263c:	607b      	str	r3, [r7, #4]
 800263e:	4b0c      	ldr	r3, [pc, #48]	@ (8002670 <MX_DMA_Init+0x3c>)
 8002640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002642:	4a0b      	ldr	r2, [pc, #44]	@ (8002670 <MX_DMA_Init+0x3c>)
 8002644:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002648:	6313      	str	r3, [r2, #48]	@ 0x30
 800264a:	4b09      	ldr	r3, [pc, #36]	@ (8002670 <MX_DMA_Init+0x3c>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002652:	607b      	str	r3, [r7, #4]
 8002654:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8002656:	2200      	movs	r2, #0
 8002658:	2105      	movs	r1, #5
 800265a:	200f      	movs	r0, #15
 800265c:	f000 fe1a 	bl	8003294 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002660:	200f      	movs	r0, #15
 8002662:	f000 fe33 	bl	80032cc <HAL_NVIC_EnableIRQ>

}
 8002666:	bf00      	nop
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	40023800 	.word	0x40023800

08002674 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b08a      	sub	sp, #40	@ 0x28
 8002678:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800267a:	f107 0314 	add.w	r3, r7, #20
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	605a      	str	r2, [r3, #4]
 8002684:	609a      	str	r2, [r3, #8]
 8002686:	60da      	str	r2, [r3, #12]
 8002688:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800268a:	2300      	movs	r3, #0
 800268c:	613b      	str	r3, [r7, #16]
 800268e:	4b2d      	ldr	r3, [pc, #180]	@ (8002744 <MX_GPIO_Init+0xd0>)
 8002690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002692:	4a2c      	ldr	r2, [pc, #176]	@ (8002744 <MX_GPIO_Init+0xd0>)
 8002694:	f043 0304 	orr.w	r3, r3, #4
 8002698:	6313      	str	r3, [r2, #48]	@ 0x30
 800269a:	4b2a      	ldr	r3, [pc, #168]	@ (8002744 <MX_GPIO_Init+0xd0>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269e:	f003 0304 	and.w	r3, r3, #4
 80026a2:	613b      	str	r3, [r7, #16]
 80026a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	4b26      	ldr	r3, [pc, #152]	@ (8002744 <MX_GPIO_Init+0xd0>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ae:	4a25      	ldr	r2, [pc, #148]	@ (8002744 <MX_GPIO_Init+0xd0>)
 80026b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026b6:	4b23      	ldr	r3, [pc, #140]	@ (8002744 <MX_GPIO_Init+0xd0>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c2:	2300      	movs	r3, #0
 80026c4:	60bb      	str	r3, [r7, #8]
 80026c6:	4b1f      	ldr	r3, [pc, #124]	@ (8002744 <MX_GPIO_Init+0xd0>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ca:	4a1e      	ldr	r2, [pc, #120]	@ (8002744 <MX_GPIO_Init+0xd0>)
 80026cc:	f043 0301 	orr.w	r3, r3, #1
 80026d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80026d2:	4b1c      	ldr	r3, [pc, #112]	@ (8002744 <MX_GPIO_Init+0xd0>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	60bb      	str	r3, [r7, #8]
 80026dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026de:	2300      	movs	r3, #0
 80026e0:	607b      	str	r3, [r7, #4]
 80026e2:	4b18      	ldr	r3, [pc, #96]	@ (8002744 <MX_GPIO_Init+0xd0>)
 80026e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e6:	4a17      	ldr	r2, [pc, #92]	@ (8002744 <MX_GPIO_Init+0xd0>)
 80026e8:	f043 0302 	orr.w	r3, r3, #2
 80026ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ee:	4b15      	ldr	r3, [pc, #84]	@ (8002744 <MX_GPIO_Init+0xd0>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	607b      	str	r3, [r7, #4]
 80026f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 80026fa:	2200      	movs	r2, #0
 80026fc:	2130      	movs	r1, #48	@ 0x30
 80026fe:	4812      	ldr	r0, [pc, #72]	@ (8002748 <MX_GPIO_Init+0xd4>)
 8002700:	f001 fb88 	bl	8003e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002704:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002708:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800270a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800270e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002710:	2300      	movs	r3, #0
 8002712:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002714:	f107 0314 	add.w	r3, r7, #20
 8002718:	4619      	mov	r1, r3
 800271a:	480c      	ldr	r0, [pc, #48]	@ (800274c <MX_GPIO_Init+0xd8>)
 800271c:	f001 f9e6 	bl	8003aec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 8002720:	2330      	movs	r3, #48	@ 0x30
 8002722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002724:	2301      	movs	r3, #1
 8002726:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002728:	2300      	movs	r3, #0
 800272a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800272c:	2300      	movs	r3, #0
 800272e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002730:	f107 0314 	add.w	r3, r7, #20
 8002734:	4619      	mov	r1, r3
 8002736:	4804      	ldr	r0, [pc, #16]	@ (8002748 <MX_GPIO_Init+0xd4>)
 8002738:	f001 f9d8 	bl	8003aec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800273c:	bf00      	nop
 800273e:	3728      	adds	r7, #40	@ 0x28
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40023800 	.word	0x40023800
 8002748:	40020000 	.word	0x40020000
 800274c:	40020800 	.word	0x40020800

08002750 <HAL_UART_RxCpltCallback>:
    if (hspi->Instance == SPI2) {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); // Pull CS high
    }
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a0d      	ldr	r2, [pc, #52]	@ (8002794 <HAL_UART_RxCpltCallback+0x44>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d114      	bne.n	800278c <HAL_UART_RxCpltCallback+0x3c>
        // Process the received data (rx_buffer)
        memcpy(gCommandData, rx_buffer, sizeof(rx_buffer));
 8002762:	4a0d      	ldr	r2, [pc, #52]	@ (8002798 <HAL_UART_RxCpltCallback+0x48>)
 8002764:	4b0d      	ldr	r3, [pc, #52]	@ (800279c <HAL_UART_RxCpltCallback+0x4c>)
 8002766:	4610      	mov	r0, r2
 8002768:	4619      	mov	r1, r3
 800276a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800276e:	461a      	mov	r2, r3
 8002770:	f007 fe93 	bl	800a49a <memcpy>
        // Notify the telemetry task to process the command
        osSignalSet(telemetryTaskHandle, 0x01);  // Set signal for telemetry task
 8002774:	4b0a      	ldr	r3, [pc, #40]	@ (80027a0 <HAL_UART_RxCpltCallback+0x50>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2101      	movs	r1, #1
 800277a:	4618      	mov	r0, r3
 800277c:	f003 ffc2 	bl	8006704 <osSignalSet>
        // Clear the buffer for the next message
        memset(rx_buffer, 0, BUFFER_SIZE);
 8002780:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002784:	2100      	movs	r1, #0
 8002786:	4805      	ldr	r0, [pc, #20]	@ (800279c <HAL_UART_RxCpltCallback+0x4c>)
 8002788:	f007 fd93 	bl	800a2b2 <memset>
    }
}
 800278c:	bf00      	nop
 800278e:	3708      	adds	r7, #8
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	40004400 	.word	0x40004400
 8002798:	200006e0 	.word	0x200006e0
 800279c:	200005e0 	.word	0x200005e0
 80027a0:	200005d0 	.word	0x200005d0

080027a4 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
    uint32_t error_code = HAL_UART_GetError(huart);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f003 fa67 	bl	8005c80 <HAL_UART_GetError>
 80027b2:	60f8      	str	r0, [r7, #12]

    // Identify which UART instance is causing the error (USART2 in this case)
    if (huart->Instance == USART2) {
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a1a      	ldr	r2, [pc, #104]	@ (8002824 <HAL_UART_ErrorCallback+0x80>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d12d      	bne.n	800281a <HAL_UART_ErrorCallback+0x76>

        // Handle Overrun Error (ORE)
        if (error_code & HAL_UART_ERROR_ORE) {
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f003 0308 	and.w	r3, r3, #8
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d00a      	beq.n	80027de <HAL_UART_ErrorCallback+0x3a>
            __HAL_UART_CLEAR_OREFLAG(huart);  // Clear overrun error flag
 80027c8:	2300      	movs	r3, #0
 80027ca:	60bb      	str	r3, [r7, #8]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	60bb      	str	r3, [r7, #8]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	60bb      	str	r3, [r7, #8]
 80027dc:	68bb      	ldr	r3, [r7, #8]
            // Optionally log or handle the error
            //send_response("UART Overrun Error");
        }

        // Handle Framing Error (FE)
        if (error_code & HAL_UART_ERROR_FE) {
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d002      	beq.n	80027ee <HAL_UART_ErrorCallback+0x4a>
            // Clear framing error flag automatically by reading the status register
        	send_response("UART Framing Error");
 80027e8:	480f      	ldr	r0, [pc, #60]	@ (8002828 <HAL_UART_ErrorCallback+0x84>)
 80027ea:	f7ff fd8d 	bl	8002308 <send_response>
        }

        // Handle Parity Error (PE)
        if (error_code & HAL_UART_ERROR_PE) {
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d002      	beq.n	80027fe <HAL_UART_ErrorCallback+0x5a>
            // Parity errors may indicate data corruption or mismatch in settings
        	send_response("UART Parity Error");
 80027f8:	480c      	ldr	r0, [pc, #48]	@ (800282c <HAL_UART_ErrorCallback+0x88>)
 80027fa:	f7ff fd85 	bl	8002308 <send_response>
        }

        // Handle Noise Error (NE)
        if (error_code & HAL_UART_ERROR_NE) {
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d002      	beq.n	800280e <HAL_UART_ErrorCallback+0x6a>
            // Noise errors are usually transient but worth logging
        	send_response("UART Noise Error");
 8002808:	4809      	ldr	r0, [pc, #36]	@ (8002830 <HAL_UART_ErrorCallback+0x8c>)
 800280a:	f7ff fd7d 	bl	8002308 <send_response>
        }

        // Recovery: Restart UART reception after clearing the error flags
        HAL_UART_Receive_IT(huart, rx_buffer, sizeof(rx_buffer));
 800280e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002812:	4908      	ldr	r1, [pc, #32]	@ (8002834 <HAL_UART_ErrorCallback+0x90>)
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f002 ff66 	bl	80056e6 <HAL_UART_Receive_IT>
    }
}
 800281a:	bf00      	nop
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	40004400 	.word	0x40004400
 8002828:	0800c40c 	.word	0x0800c40c
 800282c:	0800c420 	.word	0x0800c420
 8002830:	0800c434 	.word	0x0800c434
 8002834:	200005e0 	.word	0x200005e0

08002838 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	osSignalSet(SPISendDataTaskHandle, 0x01);  // Set signal for telemetry task
 8002840:	4b05      	ldr	r3, [pc, #20]	@ (8002858 <StartDefaultTask+0x20>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2101      	movs	r1, #1
 8002846:	4618      	mov	r0, r3
 8002848:	f003 ff5c 	bl	8006704 <osSignalSet>
    osDelay(1000);
 800284c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002850:	f003 ff43 	bl	80066da <osDelay>
	osSignalSet(SPISendDataTaskHandle, 0x01);  // Set signal for telemetry task
 8002854:	bf00      	nop
 8002856:	e7f3      	b.n	8002840 <StartDefaultTask+0x8>
 8002858:	200005d8 	.word	0x200005d8

0800285c <StartTelemetryTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTelemetryTask */
void StartTelemetryTask(void const * argument)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTelemetryTask */
  /* Infinite loop */
  for(;;)
  {
	// Wait for notification from UART callback
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8002864:	f04f 31ff 	mov.w	r1, #4294967295
 8002868:	2001      	movs	r0, #1
 800286a:	f005 fe49 	bl	8008500 <ulTaskNotifyTake>
	// Process the command received via UART
	process_command(gCommandData);
 800286e:	480b      	ldr	r0, [pc, #44]	@ (800289c <StartTelemetryTask+0x40>)
 8002870:	f7ff fc88 	bl	8002184 <process_command>

	// Introduce a delay if necessary
	vTaskDelay(pdMS_TO_TICKS(100)); // Adjust delay as needed
 8002874:	2064      	movs	r0, #100	@ 0x64
 8002876:	f005 f82d 	bl	80078d4 <vTaskDelay>
	// Re-enable UART reception
	HAL_UART_Receive_IT(&huart2, rx_buffer, sizeof(rx_buffer));
 800287a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800287e:	4908      	ldr	r1, [pc, #32]	@ (80028a0 <StartTelemetryTask+0x44>)
 8002880:	4808      	ldr	r0, [pc, #32]	@ (80028a4 <StartTelemetryTask+0x48>)
 8002882:	f002 ff30 	bl	80056e6 <HAL_UART_Receive_IT>

	osSignalSet(SPISendDataTaskHandle, 0x01);  // Set signal for telemetry task
 8002886:	4b08      	ldr	r3, [pc, #32]	@ (80028a8 <StartTelemetryTask+0x4c>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2101      	movs	r1, #1
 800288c:	4618      	mov	r0, r3
 800288e:	f003 ff39 	bl	8006704 <osSignalSet>
    osDelay(1);
 8002892:	2001      	movs	r0, #1
 8002894:	f003 ff21 	bl	80066da <osDelay>
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8002898:	bf00      	nop
 800289a:	e7e3      	b.n	8002864 <StartTelemetryTask+0x8>
 800289c:	200006e0 	.word	0x200006e0
 80028a0:	200005e0 	.word	0x200005e0
 80028a4:	20000584 	.word	0x20000584
 80028a8:	200005d8 	.word	0x200005d8

080028ac <StartHeartbeatTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartHeartbeatTask */
void StartHeartbeatTask(void const * argument)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHeartbeatTask */
  /* Infinite loop */
  for(;;)
  {
	// Perform actions based on telemetry data
	if (telemetry_data.tRpm >= 7000) {
 80028b4:	4b0a      	ldr	r3, [pc, #40]	@ (80028e0 <StartHeartbeatTask+0x34>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f641 3257 	movw	r2, #6999	@ 0x1b57
 80028bc:	4293      	cmp	r3, r2
 80028be:	dd05      	ble.n	80028cc <StartHeartbeatTask+0x20>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80028c0:	2201      	movs	r2, #1
 80028c2:	2120      	movs	r1, #32
 80028c4:	4807      	ldr	r0, [pc, #28]	@ (80028e4 <StartHeartbeatTask+0x38>)
 80028c6:	f001 faa5 	bl	8003e14 <HAL_GPIO_WritePin>
 80028ca:	e004      	b.n	80028d6 <StartHeartbeatTask+0x2a>
	} else {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80028cc:	2200      	movs	r2, #0
 80028ce:	2120      	movs	r1, #32
 80028d0:	4804      	ldr	r0, [pc, #16]	@ (80028e4 <StartHeartbeatTask+0x38>)
 80028d2:	f001 fa9f 	bl	8003e14 <HAL_GPIO_WritePin>
	}
    osDelay(1);
 80028d6:	2001      	movs	r0, #1
 80028d8:	f003 feff 	bl	80066da <osDelay>
	if (telemetry_data.tRpm >= 7000) {
 80028dc:	e7ea      	b.n	80028b4 <StartHeartbeatTask+0x8>
 80028de:	bf00      	nop
 80028e0:	200004a8 	.word	0x200004a8
 80028e4:	40020000 	.word	0x40020000

080028e8 <StartSPISend>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSPISend */
void StartSPISend(void const * argument)
{
 80028e8:	b5b0      	push	{r4, r5, r7, lr}
 80028ea:	b096      	sub	sp, #88	@ 0x58
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
	HAL_StatusTypeDef status;
	uint8_t buffer[sizeof(telemetry_packet)];
  for(;;)
  {
	  if (osSemaphoreWait(spiSendMutexHandle, osWaitForever) == osOK) {
 80028f0:	4b21      	ldr	r3, [pc, #132]	@ (8002978 <StartSPISend+0x90>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f04f 31ff 	mov.w	r1, #4294967295
 80028f8:	4618      	mov	r0, r3
 80028fa:	f003 ff75 	bl	80067e8 <osSemaphoreWait>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1f5      	bne.n	80028f0 <StartSPISend+0x8>
		// Wait for notification from UART callback
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8002904:	f04f 31ff 	mov.w	r1, #4294967295
 8002908:	2001      	movs	r0, #1
 800290a:	f005 fdf9 	bl	8008500 <ulTaskNotifyTake>
		telemetry_packet dataToSend = {3600, 1, 120.5, 0, 0, 0, 45, 0, 1};
 800290e:	4b1b      	ldr	r3, [pc, #108]	@ (800297c <StartSPISend+0x94>)
 8002910:	f107 040c 	add.w	r4, r7, #12
 8002914:	461d      	mov	r5, r3
 8002916:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002918:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800291a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800291c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800291e:	682b      	ldr	r3, [r5, #0]
 8002920:	6023      	str	r3, [r4, #0]
		memcpy(buffer, (uint8_t*)&dataToSend, sizeof(telemetry_packet));
 8002922:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8002926:	f107 050c 	add.w	r5, r7, #12
 800292a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800292c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800292e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002930:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002932:	682b      	ldr	r3, [r5, #0]
 8002934:	6023      	str	r3, [r4, #0]
		// Chip Select pin low to start transmission
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // Set NSS low
 8002936:	2200      	movs	r2, #0
 8002938:	2110      	movs	r1, #16
 800293a:	4811      	ldr	r0, [pc, #68]	@ (8002980 <StartSPISend+0x98>)
 800293c:	f001 fa6a 	bl	8003e14 <HAL_GPIO_WritePin>
		// Transmit the data using DMA
		status = HAL_SPI_Transmit_DMA(&hspi2, buffer, sizeof(telemetry_packet));
 8002940:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002944:	2224      	movs	r2, #36	@ 0x24
 8002946:	4619      	mov	r1, r3
 8002948:	480e      	ldr	r0, [pc, #56]	@ (8002984 <StartSPISend+0x9c>)
 800294a:	f002 f921 	bl	8004b90 <HAL_SPI_Transmit_DMA>
 800294e:	4603      	mov	r3, r0
 8002950:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		// Check for errors
		if (status != HAL_OK) {
 8002954:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002958:	2b00      	cmp	r3, #0
 800295a:	d002      	beq.n	8002962 <StartSPISend+0x7a>
			send_response("SPI Transmission Error");
 800295c:	480a      	ldr	r0, [pc, #40]	@ (8002988 <StartSPISend+0xa0>)
 800295e:	f7ff fcd3 	bl	8002308 <send_response>
		}
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8002962:	2201      	movs	r2, #1
 8002964:	2110      	movs	r1, #16
 8002966:	4806      	ldr	r0, [pc, #24]	@ (8002980 <StartSPISend+0x98>)
 8002968:	f001 fa54 	bl	8003e14 <HAL_GPIO_WritePin>
		// Release the semaphore
		osSemaphoreRelease(spiSendMutexHandle);
 800296c:	4b02      	ldr	r3, [pc, #8]	@ (8002978 <StartSPISend+0x90>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4618      	mov	r0, r3
 8002972:	f003 ff87 	bl	8006884 <osSemaphoreRelease>
	  if (osSemaphoreWait(spiSendMutexHandle, osWaitForever) == osOK) {
 8002976:	e7bb      	b.n	80028f0 <StartSPISend+0x8>
 8002978:	200005dc 	.word	0x200005dc
 800297c:	0800c460 	.word	0x0800c460
 8002980:	40020000 	.word	0x40020000
 8002984:	200004cc 	.word	0x200004cc
 8002988:	0800c448 	.word	0x0800c448

0800298c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a04      	ldr	r2, [pc, #16]	@ (80029ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d101      	bne.n	80029a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800299e:	f000 fba1 	bl	80030e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80029a2:	bf00      	nop
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	40001000 	.word	0x40001000

080029b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029b4:	b672      	cpsid	i
}
 80029b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029b8:	bf00      	nop
 80029ba:	e7fd      	b.n	80029b8 <Error_Handler+0x8>

080029bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029c2:	2300      	movs	r3, #0
 80029c4:	607b      	str	r3, [r7, #4]
 80029c6:	4b12      	ldr	r3, [pc, #72]	@ (8002a10 <HAL_MspInit+0x54>)
 80029c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ca:	4a11      	ldr	r2, [pc, #68]	@ (8002a10 <HAL_MspInit+0x54>)
 80029cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80029d2:	4b0f      	ldr	r3, [pc, #60]	@ (8002a10 <HAL_MspInit+0x54>)
 80029d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029da:	607b      	str	r3, [r7, #4]
 80029dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029de:	2300      	movs	r3, #0
 80029e0:	603b      	str	r3, [r7, #0]
 80029e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002a10 <HAL_MspInit+0x54>)
 80029e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002a10 <HAL_MspInit+0x54>)
 80029e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80029ee:	4b08      	ldr	r3, [pc, #32]	@ (8002a10 <HAL_MspInit+0x54>)
 80029f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029f6:	603b      	str	r3, [r7, #0]
 80029f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80029fa:	2200      	movs	r2, #0
 80029fc:	210f      	movs	r1, #15
 80029fe:	f06f 0001 	mvn.w	r0, #1
 8002a02:	f000 fc47 	bl	8003294 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a06:	bf00      	nop
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	40023800 	.word	0x40023800

08002a14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b08a      	sub	sp, #40	@ 0x28
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a1c:	f107 0314 	add.w	r3, r7, #20
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	605a      	str	r2, [r3, #4]
 8002a26:	609a      	str	r2, [r3, #8]
 8002a28:	60da      	str	r2, [r3, #12]
 8002a2a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a48      	ldr	r2, [pc, #288]	@ (8002b54 <HAL_SPI_MspInit+0x140>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	f040 8089 	bne.w	8002b4a <HAL_SPI_MspInit+0x136>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002a38:	2300      	movs	r3, #0
 8002a3a:	613b      	str	r3, [r7, #16]
 8002a3c:	4b46      	ldr	r3, [pc, #280]	@ (8002b58 <HAL_SPI_MspInit+0x144>)
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a40:	4a45      	ldr	r2, [pc, #276]	@ (8002b58 <HAL_SPI_MspInit+0x144>)
 8002a42:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a46:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a48:	4b43      	ldr	r3, [pc, #268]	@ (8002b58 <HAL_SPI_MspInit+0x144>)
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a50:	613b      	str	r3, [r7, #16]
 8002a52:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a54:	2300      	movs	r3, #0
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	4b3f      	ldr	r3, [pc, #252]	@ (8002b58 <HAL_SPI_MspInit+0x144>)
 8002a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5c:	4a3e      	ldr	r2, [pc, #248]	@ (8002b58 <HAL_SPI_MspInit+0x144>)
 8002a5e:	f043 0304 	orr.w	r3, r3, #4
 8002a62:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a64:	4b3c      	ldr	r3, [pc, #240]	@ (8002b58 <HAL_SPI_MspInit+0x144>)
 8002a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	60fb      	str	r3, [r7, #12]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a70:	2300      	movs	r3, #0
 8002a72:	60bb      	str	r3, [r7, #8]
 8002a74:	4b38      	ldr	r3, [pc, #224]	@ (8002b58 <HAL_SPI_MspInit+0x144>)
 8002a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a78:	4a37      	ldr	r2, [pc, #220]	@ (8002b58 <HAL_SPI_MspInit+0x144>)
 8002a7a:	f043 0301 	orr.w	r3, r3, #1
 8002a7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a80:	4b35      	ldr	r3, [pc, #212]	@ (8002b58 <HAL_SPI_MspInit+0x144>)
 8002a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a84:	f003 0301 	and.w	r3, r3, #1
 8002a88:	60bb      	str	r3, [r7, #8]
 8002a8a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PA9     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a90:	2302      	movs	r3, #2
 8002a92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a94:	2300      	movs	r3, #0
 8002a96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8002a9c:	2307      	movs	r3, #7
 8002a9e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aa0:	f107 0314 	add.w	r3, r7, #20
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	482d      	ldr	r0, [pc, #180]	@ (8002b5c <HAL_SPI_MspInit+0x148>)
 8002aa8:	f001 f820 	bl	8003aec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002aac:	2304      	movs	r3, #4
 8002aae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002abc:	2305      	movs	r3, #5
 8002abe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ac0:	f107 0314 	add.w	r3, r7, #20
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	4825      	ldr	r0, [pc, #148]	@ (8002b5c <HAL_SPI_MspInit+0x148>)
 8002ac8:	f001 f810 	bl	8003aec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002acc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ad0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ada:	2303      	movs	r3, #3
 8002adc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002ade:	2305      	movs	r3, #5
 8002ae0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ae2:	f107 0314 	add.w	r3, r7, #20
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	481d      	ldr	r0, [pc, #116]	@ (8002b60 <HAL_SPI_MspInit+0x14c>)
 8002aea:	f000 ffff 	bl	8003aec <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8002aee:	4b1d      	ldr	r3, [pc, #116]	@ (8002b64 <HAL_SPI_MspInit+0x150>)
 8002af0:	4a1d      	ldr	r2, [pc, #116]	@ (8002b68 <HAL_SPI_MspInit+0x154>)
 8002af2:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8002af4:	4b1b      	ldr	r3, [pc, #108]	@ (8002b64 <HAL_SPI_MspInit+0x150>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002afa:	4b1a      	ldr	r3, [pc, #104]	@ (8002b64 <HAL_SPI_MspInit+0x150>)
 8002afc:	2240      	movs	r2, #64	@ 0x40
 8002afe:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b00:	4b18      	ldr	r3, [pc, #96]	@ (8002b64 <HAL_SPI_MspInit+0x150>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b06:	4b17      	ldr	r3, [pc, #92]	@ (8002b64 <HAL_SPI_MspInit+0x150>)
 8002b08:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b0c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b0e:	4b15      	ldr	r3, [pc, #84]	@ (8002b64 <HAL_SPI_MspInit+0x150>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b14:	4b13      	ldr	r3, [pc, #76]	@ (8002b64 <HAL_SPI_MspInit+0x150>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002b1a:	4b12      	ldr	r3, [pc, #72]	@ (8002b64 <HAL_SPI_MspInit+0x150>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002b20:	4b10      	ldr	r3, [pc, #64]	@ (8002b64 <HAL_SPI_MspInit+0x150>)
 8002b22:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002b26:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b28:	4b0e      	ldr	r3, [pc, #56]	@ (8002b64 <HAL_SPI_MspInit+0x150>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002b2e:	480d      	ldr	r0, [pc, #52]	@ (8002b64 <HAL_SPI_MspInit+0x150>)
 8002b30:	f000 fbda 	bl	80032e8 <HAL_DMA_Init>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <HAL_SPI_MspInit+0x12a>
    {
      Error_Handler();
 8002b3a:	f7ff ff39 	bl	80029b0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a08      	ldr	r2, [pc, #32]	@ (8002b64 <HAL_SPI_MspInit+0x150>)
 8002b42:	649a      	str	r2, [r3, #72]	@ 0x48
 8002b44:	4a07      	ldr	r2, [pc, #28]	@ (8002b64 <HAL_SPI_MspInit+0x150>)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8002b4a:	bf00      	nop
 8002b4c:	3728      	adds	r7, #40	@ 0x28
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	40003800 	.word	0x40003800
 8002b58:	40023800 	.word	0x40023800
 8002b5c:	40020800 	.word	0x40020800
 8002b60:	40020000 	.word	0x40020000
 8002b64:	20000524 	.word	0x20000524
 8002b68:	40026070 	.word	0x40026070

08002b6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b08a      	sub	sp, #40	@ 0x28
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b74:	f107 0314 	add.w	r3, r7, #20
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	605a      	str	r2, [r3, #4]
 8002b7e:	609a      	str	r2, [r3, #8]
 8002b80:	60da      	str	r2, [r3, #12]
 8002b82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a1d      	ldr	r2, [pc, #116]	@ (8002c00 <HAL_UART_MspInit+0x94>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d133      	bne.n	8002bf6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b8e:	2300      	movs	r3, #0
 8002b90:	613b      	str	r3, [r7, #16]
 8002b92:	4b1c      	ldr	r3, [pc, #112]	@ (8002c04 <HAL_UART_MspInit+0x98>)
 8002b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b96:	4a1b      	ldr	r2, [pc, #108]	@ (8002c04 <HAL_UART_MspInit+0x98>)
 8002b98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b9e:	4b19      	ldr	r3, [pc, #100]	@ (8002c04 <HAL_UART_MspInit+0x98>)
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ba6:	613b      	str	r3, [r7, #16]
 8002ba8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002baa:	2300      	movs	r3, #0
 8002bac:	60fb      	str	r3, [r7, #12]
 8002bae:	4b15      	ldr	r3, [pc, #84]	@ (8002c04 <HAL_UART_MspInit+0x98>)
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb2:	4a14      	ldr	r2, [pc, #80]	@ (8002c04 <HAL_UART_MspInit+0x98>)
 8002bb4:	f043 0301 	orr.w	r3, r3, #1
 8002bb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bba:	4b12      	ldr	r3, [pc, #72]	@ (8002c04 <HAL_UART_MspInit+0x98>)
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	60fb      	str	r3, [r7, #12]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002bc6:	230c      	movs	r3, #12
 8002bc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bca:	2302      	movs	r3, #2
 8002bcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002bd6:	2307      	movs	r3, #7
 8002bd8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bda:	f107 0314 	add.w	r3, r7, #20
 8002bde:	4619      	mov	r1, r3
 8002be0:	4809      	ldr	r0, [pc, #36]	@ (8002c08 <HAL_UART_MspInit+0x9c>)
 8002be2:	f000 ff83 	bl	8003aec <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8002be6:	2200      	movs	r2, #0
 8002be8:	2106      	movs	r1, #6
 8002bea:	2026      	movs	r0, #38	@ 0x26
 8002bec:	f000 fb52 	bl	8003294 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002bf0:	2026      	movs	r0, #38	@ 0x26
 8002bf2:	f000 fb6b 	bl	80032cc <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002bf6:	bf00      	nop
 8002bf8:	3728      	adds	r7, #40	@ 0x28
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	40004400 	.word	0x40004400
 8002c04:	40023800 	.word	0x40023800
 8002c08:	40020000 	.word	0x40020000

08002c0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b08e      	sub	sp, #56	@ 0x38
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002c14:	2300      	movs	r3, #0
 8002c16:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	4b33      	ldr	r3, [pc, #204]	@ (8002cf0 <HAL_InitTick+0xe4>)
 8002c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c24:	4a32      	ldr	r2, [pc, #200]	@ (8002cf0 <HAL_InitTick+0xe4>)
 8002c26:	f043 0310 	orr.w	r3, r3, #16
 8002c2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c2c:	4b30      	ldr	r3, [pc, #192]	@ (8002cf0 <HAL_InitTick+0xe4>)
 8002c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c30:	f003 0310 	and.w	r3, r3, #16
 8002c34:	60fb      	str	r3, [r7, #12]
 8002c36:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002c38:	f107 0210 	add.w	r2, r7, #16
 8002c3c:	f107 0314 	add.w	r3, r7, #20
 8002c40:	4611      	mov	r1, r2
 8002c42:	4618      	mov	r0, r3
 8002c44:	f001 fa1a 	bl	800407c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002c48:	6a3b      	ldr	r3, [r7, #32]
 8002c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d103      	bne.n	8002c5a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002c52:	f001 f9eb 	bl	800402c <HAL_RCC_GetPCLK1Freq>
 8002c56:	6378      	str	r0, [r7, #52]	@ 0x34
 8002c58:	e004      	b.n	8002c64 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002c5a:	f001 f9e7 	bl	800402c <HAL_RCC_GetPCLK1Freq>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002c64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c66:	4a23      	ldr	r2, [pc, #140]	@ (8002cf4 <HAL_InitTick+0xe8>)
 8002c68:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6c:	0c9b      	lsrs	r3, r3, #18
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002c72:	4b21      	ldr	r3, [pc, #132]	@ (8002cf8 <HAL_InitTick+0xec>)
 8002c74:	4a21      	ldr	r2, [pc, #132]	@ (8002cfc <HAL_InitTick+0xf0>)
 8002c76:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002c78:	4b1f      	ldr	r3, [pc, #124]	@ (8002cf8 <HAL_InitTick+0xec>)
 8002c7a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002c7e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002c80:	4a1d      	ldr	r2, [pc, #116]	@ (8002cf8 <HAL_InitTick+0xec>)
 8002c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c84:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002c86:	4b1c      	ldr	r3, [pc, #112]	@ (8002cf8 <HAL_InitTick+0xec>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c8c:	4b1a      	ldr	r3, [pc, #104]	@ (8002cf8 <HAL_InitTick+0xec>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c92:	4b19      	ldr	r3, [pc, #100]	@ (8002cf8 <HAL_InitTick+0xec>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002c98:	4817      	ldr	r0, [pc, #92]	@ (8002cf8 <HAL_InitTick+0xec>)
 8002c9a:	f002 f9a7 	bl	8004fec <HAL_TIM_Base_Init>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002ca4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d11b      	bne.n	8002ce4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002cac:	4812      	ldr	r0, [pc, #72]	@ (8002cf8 <HAL_InitTick+0xec>)
 8002cae:	f002 f9f7 	bl	80050a0 <HAL_TIM_Base_Start_IT>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002cb8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d111      	bne.n	8002ce4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002cc0:	2036      	movs	r0, #54	@ 0x36
 8002cc2:	f000 fb03 	bl	80032cc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2b0f      	cmp	r3, #15
 8002cca:	d808      	bhi.n	8002cde <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002ccc:	2200      	movs	r2, #0
 8002cce:	6879      	ldr	r1, [r7, #4]
 8002cd0:	2036      	movs	r0, #54	@ 0x36
 8002cd2:	f000 fadf 	bl	8003294 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002cd6:	4a0a      	ldr	r2, [pc, #40]	@ (8002d00 <HAL_InitTick+0xf4>)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6013      	str	r3, [r2, #0]
 8002cdc:	e002      	b.n	8002ce4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002ce4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3738      	adds	r7, #56	@ 0x38
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	40023800 	.word	0x40023800
 8002cf4:	431bde83 	.word	0x431bde83
 8002cf8:	200007e0 	.word	0x200007e0
 8002cfc:	40001000 	.word	0x40001000
 8002d00:	20000010 	.word	0x20000010

08002d04 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8002d08:	f3bf 8f4f 	dsb	sy
}
 8002d0c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002d0e:	4b06      	ldr	r3, [pc, #24]	@ (8002d28 <__NVIC_SystemReset+0x24>)
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002d16:	4904      	ldr	r1, [pc, #16]	@ (8002d28 <__NVIC_SystemReset+0x24>)
 8002d18:	4b04      	ldr	r3, [pc, #16]	@ (8002d2c <__NVIC_SystemReset+0x28>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002d1e:	f3bf 8f4f 	dsb	sy
}
 8002d22:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002d24:	bf00      	nop
 8002d26:	e7fd      	b.n	8002d24 <__NVIC_SystemReset+0x20>
 8002d28:	e000ed00 	.word	0xe000ed00
 8002d2c:	05fa0004 	.word	0x05fa0004

08002d30 <log_message>:
extern UART_HandleTypeDef huart2;
extern TIM_HandleTypeDef htim6;

/* USER CODE BEGIN EV */
/* USER CODE BEGIN 0 */
void log_message(const char *message) {
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
    // Send the log message over UART
    HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f7fd fa73 	bl	8000224 <strlen>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	f04f 33ff 	mov.w	r3, #4294967295
 8002d46:	6879      	ldr	r1, [r7, #4]
 8002d48:	4803      	ldr	r0, [pc, #12]	@ (8002d58 <log_message+0x28>)
 8002d4a:	f002 fc41 	bl	80055d0 <HAL_UART_Transmit>
}
 8002d4e:	bf00      	nop
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	20000584 	.word	0x20000584

08002d5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d60:	bf00      	nop
 8002d62:	e7fd      	b.n	8002d60 <NMI_Handler+0x4>

08002d64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b0d6      	sub	sp, #344	@ 0x158
 8002d68:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE BEGIN HardFault_IRQn 0 */
	// Store stack pointer
	uint32_t *stack_pointer;
	__asm volatile (
 8002d6a:	f01e 0f04 	tst.w	lr, #4
 8002d6e:	bf0c      	ite	eq
 8002d70:	f3ef 8308 	mrseq	r3, MSP
 8002d74:	f3ef 8309 	mrsne	r3, PSP
 8002d78:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
		"MRSNE %0, PSP \n"   // If PSP, move PSP to stack_pointer
		: "=r" (stack_pointer)
	);

	// Log or store the stack pointer contents for analysis
	uint32_t r0 = stack_pointer[0];  // R0
 8002d7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	uint32_t r1 = stack_pointer[1];  // R1
 8002d86:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	uint32_t r2 = stack_pointer[2];  // R2
 8002d90:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	uint32_t r3 = stack_pointer[3];  // R3
 8002d9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	uint32_t r12 = stack_pointer[4]; // R12
 8002da4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	uint32_t lr = stack_pointer[5];  // LR
 8002dae:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002db2:	695b      	ldr	r3, [r3, #20]
 8002db4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	uint32_t pc = stack_pointer[6];  // PC
 8002db8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	uint32_t psr = stack_pointer[7]; // PSR
 8002dc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002dc6:	69db      	ldr	r3, [r3, #28]
 8002dc8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	// Read the HFSR and CFSR registers for diagnostics
	uint32_t hfsr = SCB->HFSR;
 8002dcc:	4b18      	ldr	r3, [pc, #96]	@ (8002e30 <HardFault_Handler+0xcc>)
 8002dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dd0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
	uint32_t cfsr = SCB->CFSR;
 8002dd4:	4b16      	ldr	r3, [pc, #88]	@ (8002e30 <HardFault_Handler+0xcc>)
 8002dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dd8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

	// Create a log message
	char log_buffer[256];
	snprintf(log_buffer, sizeof(log_buffer),
 8002ddc:	1d38      	adds	r0, r7, #4
 8002dde:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002de2:	9308      	str	r3, [sp, #32]
 8002de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002de8:	9307      	str	r3, [sp, #28]
 8002dea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002dee:	9306      	str	r3, [sp, #24]
 8002df0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002df4:	9305      	str	r3, [sp, #20]
 8002df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dfa:	9304      	str	r3, [sp, #16]
 8002dfc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002e00:	9303      	str	r3, [sp, #12]
 8002e02:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e06:	9302      	str	r3, [sp, #8]
 8002e08:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002e0c:	9301      	str	r3, [sp, #4]
 8002e0e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002e12:	9300      	str	r3, [sp, #0]
 8002e14:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002e18:	4a06      	ldr	r2, [pc, #24]	@ (8002e34 <HardFault_Handler+0xd0>)
 8002e1a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002e1e:	f007 f9d1 	bl	800a1c4 <sniprintf>
		"CFSR: %08X HFSR: %08X\n",
		r0, r1, r2, r3, r12, lr, pc, psr, cfsr, hfsr
	);

	// Log the message
	log_message(log_buffer);
 8002e22:	1d3b      	adds	r3, r7, #4
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff ff83 	bl	8002d30 <log_message>

	NVIC_SystemReset();
 8002e2a:	f7ff ff6b 	bl	8002d04 <__NVIC_SystemReset>
 8002e2e:	bf00      	nop
 8002e30:	e000ed00 	.word	0xe000ed00
 8002e34:	0800c484 	.word	0x0800c484

08002e38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e3c:	bf00      	nop
 8002e3e:	e7fd      	b.n	8002e3c <MemManage_Handler+0x4>

08002e40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e44:	bf00      	nop
 8002e46:	e7fd      	b.n	8002e44 <BusFault_Handler+0x4>

08002e48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e4c:	bf00      	nop
 8002e4e:	e7fd      	b.n	8002e4c <UsageFault_Handler+0x4>

08002e50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e54:	bf00      	nop
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
	...

08002e60 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002e64:	4802      	ldr	r0, [pc, #8]	@ (8002e70 <DMA1_Stream4_IRQHandler+0x10>)
 8002e66:	f000 fbd7 	bl	8003618 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002e6a:	bf00      	nop
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	20000524 	.word	0x20000524

08002e74 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002e78:	4802      	ldr	r0, [pc, #8]	@ (8002e84 <USART2_IRQHandler+0x10>)
 8002e7a:	f002 fc59 	bl	8005730 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002e7e:	bf00      	nop
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	20000584 	.word	0x20000584

08002e88 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002e8c:	4802      	ldr	r0, [pc, #8]	@ (8002e98 <TIM6_DAC_IRQHandler+0x10>)
 8002e8e:	f002 f977 	bl	8005180 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002e92:	bf00      	nop
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	200007e0 	.word	0x200007e0

08002e9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  return 1;
 8002ea0:	2301      	movs	r3, #1
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <_kill>:

int _kill(int pid, int sig)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002eb6:	f007 fac3 	bl	800a440 <__errno>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2216      	movs	r2, #22
 8002ebe:	601a      	str	r2, [r3, #0]
  return -1;
 8002ec0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3708      	adds	r7, #8
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <_exit>:

void _exit (int status)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ed4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f7ff ffe7 	bl	8002eac <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ede:	bf00      	nop
 8002ee0:	e7fd      	b.n	8002ede <_exit+0x12>

08002ee2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b086      	sub	sp, #24
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	60f8      	str	r0, [r7, #12]
 8002eea:	60b9      	str	r1, [r7, #8]
 8002eec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eee:	2300      	movs	r3, #0
 8002ef0:	617b      	str	r3, [r7, #20]
 8002ef2:	e00a      	b.n	8002f0a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ef4:	f3af 8000 	nop.w
 8002ef8:	4601      	mov	r1, r0
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	1c5a      	adds	r2, r3, #1
 8002efe:	60ba      	str	r2, [r7, #8]
 8002f00:	b2ca      	uxtb	r2, r1
 8002f02:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	3301      	adds	r3, #1
 8002f08:	617b      	str	r3, [r7, #20]
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	dbf0      	blt.n	8002ef4 <_read+0x12>
  }

  return len;
 8002f12:	687b      	ldr	r3, [r7, #4]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3718      	adds	r7, #24
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f28:	2300      	movs	r3, #0
 8002f2a:	617b      	str	r3, [r7, #20]
 8002f2c:	e009      	b.n	8002f42 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	1c5a      	adds	r2, r3, #1
 8002f32:	60ba      	str	r2, [r7, #8]
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	3301      	adds	r3, #1
 8002f40:	617b      	str	r3, [r7, #20]
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	dbf1      	blt.n	8002f2e <_write+0x12>
  }
  return len;
 8002f4a:	687b      	ldr	r3, [r7, #4]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3718      	adds	r7, #24
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <_close>:

int _close(int file)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002f5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002f7c:	605a      	str	r2, [r3, #4]
  return 0;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <_isatty>:

int _isatty(int file)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f94:	2301      	movs	r3, #1
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr

08002fa2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b085      	sub	sp, #20
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	60f8      	str	r0, [r7, #12]
 8002faa:	60b9      	str	r1, [r7, #8]
 8002fac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3714      	adds	r7, #20
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fc4:	4a14      	ldr	r2, [pc, #80]	@ (8003018 <_sbrk+0x5c>)
 8002fc6:	4b15      	ldr	r3, [pc, #84]	@ (800301c <_sbrk+0x60>)
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fd0:	4b13      	ldr	r3, [pc, #76]	@ (8003020 <_sbrk+0x64>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d102      	bne.n	8002fde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fd8:	4b11      	ldr	r3, [pc, #68]	@ (8003020 <_sbrk+0x64>)
 8002fda:	4a12      	ldr	r2, [pc, #72]	@ (8003024 <_sbrk+0x68>)
 8002fdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fde:	4b10      	ldr	r3, [pc, #64]	@ (8003020 <_sbrk+0x64>)
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d207      	bcs.n	8002ffc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fec:	f007 fa28 	bl	800a440 <__errno>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	220c      	movs	r2, #12
 8002ff4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8002ffa:	e009      	b.n	8003010 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ffc:	4b08      	ldr	r3, [pc, #32]	@ (8003020 <_sbrk+0x64>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003002:	4b07      	ldr	r3, [pc, #28]	@ (8003020 <_sbrk+0x64>)
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4413      	add	r3, r2
 800300a:	4a05      	ldr	r2, [pc, #20]	@ (8003020 <_sbrk+0x64>)
 800300c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800300e:	68fb      	ldr	r3, [r7, #12]
}
 8003010:	4618      	mov	r0, r3
 8003012:	3718      	adds	r7, #24
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	20020000 	.word	0x20020000
 800301c:	00000400 	.word	0x00000400
 8003020:	20000828 	.word	0x20000828
 8003024:	200046d0 	.word	0x200046d0

08003028 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800302c:	4b06      	ldr	r3, [pc, #24]	@ (8003048 <SystemInit+0x20>)
 800302e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003032:	4a05      	ldr	r2, [pc, #20]	@ (8003048 <SystemInit+0x20>)
 8003034:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003038:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800303c:	bf00      	nop
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	e000ed00 	.word	0xe000ed00

0800304c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800304c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003084 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003050:	f7ff ffea 	bl	8003028 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003054:	480c      	ldr	r0, [pc, #48]	@ (8003088 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003056:	490d      	ldr	r1, [pc, #52]	@ (800308c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003058:	4a0d      	ldr	r2, [pc, #52]	@ (8003090 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800305a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800305c:	e002      	b.n	8003064 <LoopCopyDataInit>

0800305e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800305e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003060:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003062:	3304      	adds	r3, #4

08003064 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003064:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003066:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003068:	d3f9      	bcc.n	800305e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800306a:	4a0a      	ldr	r2, [pc, #40]	@ (8003094 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800306c:	4c0a      	ldr	r4, [pc, #40]	@ (8003098 <LoopFillZerobss+0x22>)
  movs r3, #0
 800306e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003070:	e001      	b.n	8003076 <LoopFillZerobss>

08003072 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003072:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003074:	3204      	adds	r2, #4

08003076 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003076:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003078:	d3fb      	bcc.n	8003072 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800307a:	f007 f9e7 	bl	800a44c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800307e:	f7ff f95d 	bl	800233c <main>
  bx  lr    
 8003082:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003084:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003088:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800308c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8003090:	0800c8e0 	.word	0x0800c8e0
  ldr r2, =_sbss
 8003094:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8003098:	200046d0 	.word	0x200046d0

0800309c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800309c:	e7fe      	b.n	800309c <ADC_IRQHandler>
	...

080030a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030a4:	4b0e      	ldr	r3, [pc, #56]	@ (80030e0 <HAL_Init+0x40>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a0d      	ldr	r2, [pc, #52]	@ (80030e0 <HAL_Init+0x40>)
 80030aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80030ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030b0:	4b0b      	ldr	r3, [pc, #44]	@ (80030e0 <HAL_Init+0x40>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a0a      	ldr	r2, [pc, #40]	@ (80030e0 <HAL_Init+0x40>)
 80030b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80030ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030bc:	4b08      	ldr	r3, [pc, #32]	@ (80030e0 <HAL_Init+0x40>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a07      	ldr	r2, [pc, #28]	@ (80030e0 <HAL_Init+0x40>)
 80030c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030c8:	2003      	movs	r0, #3
 80030ca:	f000 f8d8 	bl	800327e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030ce:	200f      	movs	r0, #15
 80030d0:	f7ff fd9c 	bl	8002c0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030d4:	f7ff fc72 	bl	80029bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	40023c00 	.word	0x40023c00

080030e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030e8:	4b06      	ldr	r3, [pc, #24]	@ (8003104 <HAL_IncTick+0x20>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	461a      	mov	r2, r3
 80030ee:	4b06      	ldr	r3, [pc, #24]	@ (8003108 <HAL_IncTick+0x24>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4413      	add	r3, r2
 80030f4:	4a04      	ldr	r2, [pc, #16]	@ (8003108 <HAL_IncTick+0x24>)
 80030f6:	6013      	str	r3, [r2, #0]
}
 80030f8:	bf00      	nop
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	20000014 	.word	0x20000014
 8003108:	2000082c 	.word	0x2000082c

0800310c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  return uwTick;
 8003110:	4b03      	ldr	r3, [pc, #12]	@ (8003120 <HAL_GetTick+0x14>)
 8003112:	681b      	ldr	r3, [r3, #0]
}
 8003114:	4618      	mov	r0, r3
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	2000082c 	.word	0x2000082c

08003124 <__NVIC_SetPriorityGrouping>:
{
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f003 0307 	and.w	r3, r3, #7
 8003132:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003134:	4b0c      	ldr	r3, [pc, #48]	@ (8003168 <__NVIC_SetPriorityGrouping+0x44>)
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800313a:	68ba      	ldr	r2, [r7, #8]
 800313c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003140:	4013      	ands	r3, r2
 8003142:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800314c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003150:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003156:	4a04      	ldr	r2, [pc, #16]	@ (8003168 <__NVIC_SetPriorityGrouping+0x44>)
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	60d3      	str	r3, [r2, #12]
}
 800315c:	bf00      	nop
 800315e:	3714      	adds	r7, #20
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr
 8003168:	e000ed00 	.word	0xe000ed00

0800316c <__NVIC_GetPriorityGrouping>:
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003170:	4b04      	ldr	r3, [pc, #16]	@ (8003184 <__NVIC_GetPriorityGrouping+0x18>)
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	0a1b      	lsrs	r3, r3, #8
 8003176:	f003 0307 	and.w	r3, r3, #7
}
 800317a:	4618      	mov	r0, r3
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr
 8003184:	e000ed00 	.word	0xe000ed00

08003188 <__NVIC_EnableIRQ>:
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	4603      	mov	r3, r0
 8003190:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003196:	2b00      	cmp	r3, #0
 8003198:	db0b      	blt.n	80031b2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800319a:	79fb      	ldrb	r3, [r7, #7]
 800319c:	f003 021f 	and.w	r2, r3, #31
 80031a0:	4907      	ldr	r1, [pc, #28]	@ (80031c0 <__NVIC_EnableIRQ+0x38>)
 80031a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a6:	095b      	lsrs	r3, r3, #5
 80031a8:	2001      	movs	r0, #1
 80031aa:	fa00 f202 	lsl.w	r2, r0, r2
 80031ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80031b2:	bf00      	nop
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	e000e100 	.word	0xe000e100

080031c4 <__NVIC_SetPriority>:
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	4603      	mov	r3, r0
 80031cc:	6039      	str	r1, [r7, #0]
 80031ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	db0a      	blt.n	80031ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	b2da      	uxtb	r2, r3
 80031dc:	490c      	ldr	r1, [pc, #48]	@ (8003210 <__NVIC_SetPriority+0x4c>)
 80031de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e2:	0112      	lsls	r2, r2, #4
 80031e4:	b2d2      	uxtb	r2, r2
 80031e6:	440b      	add	r3, r1
 80031e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80031ec:	e00a      	b.n	8003204 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	b2da      	uxtb	r2, r3
 80031f2:	4908      	ldr	r1, [pc, #32]	@ (8003214 <__NVIC_SetPriority+0x50>)
 80031f4:	79fb      	ldrb	r3, [r7, #7]
 80031f6:	f003 030f 	and.w	r3, r3, #15
 80031fa:	3b04      	subs	r3, #4
 80031fc:	0112      	lsls	r2, r2, #4
 80031fe:	b2d2      	uxtb	r2, r2
 8003200:	440b      	add	r3, r1
 8003202:	761a      	strb	r2, [r3, #24]
}
 8003204:	bf00      	nop
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr
 8003210:	e000e100 	.word	0xe000e100
 8003214:	e000ed00 	.word	0xe000ed00

08003218 <NVIC_EncodePriority>:
{
 8003218:	b480      	push	{r7}
 800321a:	b089      	sub	sp, #36	@ 0x24
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f003 0307 	and.w	r3, r3, #7
 800322a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	f1c3 0307 	rsb	r3, r3, #7
 8003232:	2b04      	cmp	r3, #4
 8003234:	bf28      	it	cs
 8003236:	2304      	movcs	r3, #4
 8003238:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	3304      	adds	r3, #4
 800323e:	2b06      	cmp	r3, #6
 8003240:	d902      	bls.n	8003248 <NVIC_EncodePriority+0x30>
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	3b03      	subs	r3, #3
 8003246:	e000      	b.n	800324a <NVIC_EncodePriority+0x32>
 8003248:	2300      	movs	r3, #0
 800324a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800324c:	f04f 32ff 	mov.w	r2, #4294967295
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	fa02 f303 	lsl.w	r3, r2, r3
 8003256:	43da      	mvns	r2, r3
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	401a      	ands	r2, r3
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003260:	f04f 31ff 	mov.w	r1, #4294967295
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	fa01 f303 	lsl.w	r3, r1, r3
 800326a:	43d9      	mvns	r1, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003270:	4313      	orrs	r3, r2
}
 8003272:	4618      	mov	r0, r3
 8003274:	3724      	adds	r7, #36	@ 0x24
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr

0800327e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b082      	sub	sp, #8
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f7ff ff4c 	bl	8003124 <__NVIC_SetPriorityGrouping>
}
 800328c:	bf00      	nop
 800328e:	3708      	adds	r7, #8
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af00      	add	r7, sp, #0
 800329a:	4603      	mov	r3, r0
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
 80032a0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032a2:	2300      	movs	r3, #0
 80032a4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032a6:	f7ff ff61 	bl	800316c <__NVIC_GetPriorityGrouping>
 80032aa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	68b9      	ldr	r1, [r7, #8]
 80032b0:	6978      	ldr	r0, [r7, #20]
 80032b2:	f7ff ffb1 	bl	8003218 <NVIC_EncodePriority>
 80032b6:	4602      	mov	r2, r0
 80032b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032bc:	4611      	mov	r1, r2
 80032be:	4618      	mov	r0, r3
 80032c0:	f7ff ff80 	bl	80031c4 <__NVIC_SetPriority>
}
 80032c4:	bf00      	nop
 80032c6:	3718      	adds	r7, #24
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	4603      	mov	r3, r0
 80032d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032da:	4618      	mov	r0, r3
 80032dc:	f7ff ff54 	bl	8003188 <__NVIC_EnableIRQ>
}
 80032e0:	bf00      	nop
 80032e2:	3708      	adds	r7, #8
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80032f0:	2300      	movs	r3, #0
 80032f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80032f4:	f7ff ff0a 	bl	800310c <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d101      	bne.n	8003304 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e099      	b.n	8003438 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2202      	movs	r2, #2
 8003308:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f022 0201 	bic.w	r2, r2, #1
 8003322:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003324:	e00f      	b.n	8003346 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003326:	f7ff fef1 	bl	800310c <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	2b05      	cmp	r3, #5
 8003332:	d908      	bls.n	8003346 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2220      	movs	r2, #32
 8003338:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2203      	movs	r2, #3
 800333e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e078      	b.n	8003438 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	2b00      	cmp	r3, #0
 8003352:	d1e8      	bne.n	8003326 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	4b38      	ldr	r3, [pc, #224]	@ (8003440 <HAL_DMA_Init+0x158>)
 8003360:	4013      	ands	r3, r2
 8003362:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685a      	ldr	r2, [r3, #4]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003372:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800337e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800338a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	4313      	orrs	r3, r2
 8003396:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339c:	2b04      	cmp	r3, #4
 800339e:	d107      	bne.n	80033b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a8:	4313      	orrs	r3, r2
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	697a      	ldr	r2, [r7, #20]
 80033b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	f023 0307 	bic.w	r3, r3, #7
 80033c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033cc:	697a      	ldr	r2, [r7, #20]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d6:	2b04      	cmp	r3, #4
 80033d8:	d117      	bne.n	800340a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00e      	beq.n	800340a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 fb01 	bl	80039f4 <DMA_CheckFifoParam>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d008      	beq.n	800340a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2240      	movs	r2, #64	@ 0x40
 80033fc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003406:	2301      	movs	r3, #1
 8003408:	e016      	b.n	8003438 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 fab8 	bl	8003988 <DMA_CalcBaseAndBitshift>
 8003418:	4603      	mov	r3, r0
 800341a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003420:	223f      	movs	r2, #63	@ 0x3f
 8003422:	409a      	lsls	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3718      	adds	r7, #24
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	f010803f 	.word	0xf010803f

08003444 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b086      	sub	sp, #24
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
 8003450:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003452:	2300      	movs	r3, #0
 8003454:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800345a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003462:	2b01      	cmp	r3, #1
 8003464:	d101      	bne.n	800346a <HAL_DMA_Start_IT+0x26>
 8003466:	2302      	movs	r3, #2
 8003468:	e040      	b.n	80034ec <HAL_DMA_Start_IT+0xa8>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b01      	cmp	r3, #1
 800347c:	d12f      	bne.n	80034de <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2202      	movs	r2, #2
 8003482:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	68b9      	ldr	r1, [r7, #8]
 8003492:	68f8      	ldr	r0, [r7, #12]
 8003494:	f000 fa4a 	bl	800392c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800349c:	223f      	movs	r2, #63	@ 0x3f
 800349e:	409a      	lsls	r2, r3
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f042 0216 	orr.w	r2, r2, #22
 80034b2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d007      	beq.n	80034cc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f042 0208 	orr.w	r2, r2, #8
 80034ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f042 0201 	orr.w	r2, r2, #1
 80034da:	601a      	str	r2, [r3, #0]
 80034dc:	e005      	b.n	80034ea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80034e6:	2302      	movs	r3, #2
 80034e8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80034ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3718      	adds	r7, #24
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003500:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003502:	f7ff fe03 	bl	800310c <HAL_GetTick>
 8003506:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d008      	beq.n	8003526 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2280      	movs	r2, #128	@ 0x80
 8003518:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e052      	b.n	80035cc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f022 0216 	bic.w	r2, r2, #22
 8003534:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	695a      	ldr	r2, [r3, #20]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003544:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800354a:	2b00      	cmp	r3, #0
 800354c:	d103      	bne.n	8003556 <HAL_DMA_Abort+0x62>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003552:	2b00      	cmp	r3, #0
 8003554:	d007      	beq.n	8003566 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f022 0208 	bic.w	r2, r2, #8
 8003564:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f022 0201 	bic.w	r2, r2, #1
 8003574:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003576:	e013      	b.n	80035a0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003578:	f7ff fdc8 	bl	800310c <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b05      	cmp	r3, #5
 8003584:	d90c      	bls.n	80035a0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2220      	movs	r2, #32
 800358a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2203      	movs	r2, #3
 8003590:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e015      	b.n	80035cc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1e4      	bne.n	8003578 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035b2:	223f      	movs	r2, #63	@ 0x3f
 80035b4:	409a      	lsls	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d004      	beq.n	80035f2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2280      	movs	r2, #128	@ 0x80
 80035ec:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e00c      	b.n	800360c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2205      	movs	r2, #5
 80035f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f022 0201 	bic.w	r2, r2, #1
 8003608:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b086      	sub	sp, #24
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003620:	2300      	movs	r3, #0
 8003622:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003624:	4b8e      	ldr	r3, [pc, #568]	@ (8003860 <HAL_DMA_IRQHandler+0x248>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a8e      	ldr	r2, [pc, #568]	@ (8003864 <HAL_DMA_IRQHandler+0x24c>)
 800362a:	fba2 2303 	umull	r2, r3, r2, r3
 800362e:	0a9b      	lsrs	r3, r3, #10
 8003630:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003636:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003642:	2208      	movs	r2, #8
 8003644:	409a      	lsls	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	4013      	ands	r3, r2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d01a      	beq.n	8003684 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0304 	and.w	r3, r3, #4
 8003658:	2b00      	cmp	r3, #0
 800365a:	d013      	beq.n	8003684 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f022 0204 	bic.w	r2, r2, #4
 800366a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003670:	2208      	movs	r2, #8
 8003672:	409a      	lsls	r2, r3
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800367c:	f043 0201 	orr.w	r2, r3, #1
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003688:	2201      	movs	r2, #1
 800368a:	409a      	lsls	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	4013      	ands	r3, r2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d012      	beq.n	80036ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00b      	beq.n	80036ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036a6:	2201      	movs	r2, #1
 80036a8:	409a      	lsls	r2, r3
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036b2:	f043 0202 	orr.w	r2, r3, #2
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036be:	2204      	movs	r2, #4
 80036c0:	409a      	lsls	r2, r3
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	4013      	ands	r3, r2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d012      	beq.n	80036f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00b      	beq.n	80036f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036dc:	2204      	movs	r2, #4
 80036de:	409a      	lsls	r2, r3
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036e8:	f043 0204 	orr.w	r2, r3, #4
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036f4:	2210      	movs	r2, #16
 80036f6:	409a      	lsls	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	4013      	ands	r3, r2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d043      	beq.n	8003788 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0308 	and.w	r3, r3, #8
 800370a:	2b00      	cmp	r3, #0
 800370c:	d03c      	beq.n	8003788 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003712:	2210      	movs	r2, #16
 8003714:	409a      	lsls	r2, r3
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d018      	beq.n	800375a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d108      	bne.n	8003748 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373a:	2b00      	cmp	r3, #0
 800373c:	d024      	beq.n	8003788 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	4798      	blx	r3
 8003746:	e01f      	b.n	8003788 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800374c:	2b00      	cmp	r3, #0
 800374e:	d01b      	beq.n	8003788 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	4798      	blx	r3
 8003758:	e016      	b.n	8003788 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003764:	2b00      	cmp	r3, #0
 8003766:	d107      	bne.n	8003778 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 0208 	bic.w	r2, r2, #8
 8003776:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377c:	2b00      	cmp	r3, #0
 800377e:	d003      	beq.n	8003788 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800378c:	2220      	movs	r2, #32
 800378e:	409a      	lsls	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	4013      	ands	r3, r2
 8003794:	2b00      	cmp	r3, #0
 8003796:	f000 808f 	beq.w	80038b8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0310 	and.w	r3, r3, #16
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f000 8087 	beq.w	80038b8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ae:	2220      	movs	r2, #32
 80037b0:	409a      	lsls	r2, r3
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b05      	cmp	r3, #5
 80037c0:	d136      	bne.n	8003830 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 0216 	bic.w	r2, r2, #22
 80037d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	695a      	ldr	r2, [r3, #20]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d103      	bne.n	80037f2 <HAL_DMA_IRQHandler+0x1da>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d007      	beq.n	8003802 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f022 0208 	bic.w	r2, r2, #8
 8003800:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003806:	223f      	movs	r2, #63	@ 0x3f
 8003808:	409a      	lsls	r2, r3
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003822:	2b00      	cmp	r3, #0
 8003824:	d07e      	beq.n	8003924 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	4798      	blx	r3
        }
        return;
 800382e:	e079      	b.n	8003924 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d01d      	beq.n	800387a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d10d      	bne.n	8003868 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003850:	2b00      	cmp	r3, #0
 8003852:	d031      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	4798      	blx	r3
 800385c:	e02c      	b.n	80038b8 <HAL_DMA_IRQHandler+0x2a0>
 800385e:	bf00      	nop
 8003860:	2000000c 	.word	0x2000000c
 8003864:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800386c:	2b00      	cmp	r3, #0
 800386e:	d023      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	4798      	blx	r3
 8003878:	e01e      	b.n	80038b8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003884:	2b00      	cmp	r3, #0
 8003886:	d10f      	bne.n	80038a8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f022 0210 	bic.w	r2, r2, #16
 8003896:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d003      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d032      	beq.n	8003926 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038c4:	f003 0301 	and.w	r3, r3, #1
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d022      	beq.n	8003912 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2205      	movs	r2, #5
 80038d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f022 0201 	bic.w	r2, r2, #1
 80038e2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	3301      	adds	r3, #1
 80038e8:	60bb      	str	r3, [r7, #8]
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d307      	bcc.n	8003900 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1f2      	bne.n	80038e4 <HAL_DMA_IRQHandler+0x2cc>
 80038fe:	e000      	b.n	8003902 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003900:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2201      	movs	r2, #1
 8003906:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003916:	2b00      	cmp	r3, #0
 8003918:	d005      	beq.n	8003926 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	4798      	blx	r3
 8003922:	e000      	b.n	8003926 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003924:	bf00      	nop
    }
  }
}
 8003926:	3718      	adds	r7, #24
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800392c:	b480      	push	{r7}
 800392e:	b085      	sub	sp, #20
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	607a      	str	r2, [r7, #4]
 8003938:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003948:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	2b40      	cmp	r3, #64	@ 0x40
 8003958:	d108      	bne.n	800396c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68ba      	ldr	r2, [r7, #8]
 8003968:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800396a:	e007      	b.n	800397c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68ba      	ldr	r2, [r7, #8]
 8003972:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	60da      	str	r2, [r3, #12]
}
 800397c:	bf00      	nop
 800397e:	3714      	adds	r7, #20
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	b2db      	uxtb	r3, r3
 8003996:	3b10      	subs	r3, #16
 8003998:	4a14      	ldr	r2, [pc, #80]	@ (80039ec <DMA_CalcBaseAndBitshift+0x64>)
 800399a:	fba2 2303 	umull	r2, r3, r2, r3
 800399e:	091b      	lsrs	r3, r3, #4
 80039a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80039a2:	4a13      	ldr	r2, [pc, #76]	@ (80039f0 <DMA_CalcBaseAndBitshift+0x68>)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	4413      	add	r3, r2
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	461a      	mov	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2b03      	cmp	r3, #3
 80039b4:	d909      	bls.n	80039ca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80039be:	f023 0303 	bic.w	r3, r3, #3
 80039c2:	1d1a      	adds	r2, r3, #4
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	659a      	str	r2, [r3, #88]	@ 0x58
 80039c8:	e007      	b.n	80039da <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80039d2:	f023 0303 	bic.w	r3, r3, #3
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3714      	adds	r7, #20
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	aaaaaaab 	.word	0xaaaaaaab
 80039f0:	0800c510 	.word	0x0800c510

080039f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039fc:	2300      	movs	r3, #0
 80039fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a04:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d11f      	bne.n	8003a4e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	2b03      	cmp	r3, #3
 8003a12:	d856      	bhi.n	8003ac2 <DMA_CheckFifoParam+0xce>
 8003a14:	a201      	add	r2, pc, #4	@ (adr r2, 8003a1c <DMA_CheckFifoParam+0x28>)
 8003a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a1a:	bf00      	nop
 8003a1c:	08003a2d 	.word	0x08003a2d
 8003a20:	08003a3f 	.word	0x08003a3f
 8003a24:	08003a2d 	.word	0x08003a2d
 8003a28:	08003ac3 	.word	0x08003ac3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d046      	beq.n	8003ac6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a3c:	e043      	b.n	8003ac6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a42:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003a46:	d140      	bne.n	8003aca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a4c:	e03d      	b.n	8003aca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a56:	d121      	bne.n	8003a9c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	2b03      	cmp	r3, #3
 8003a5c:	d837      	bhi.n	8003ace <DMA_CheckFifoParam+0xda>
 8003a5e:	a201      	add	r2, pc, #4	@ (adr r2, 8003a64 <DMA_CheckFifoParam+0x70>)
 8003a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a64:	08003a75 	.word	0x08003a75
 8003a68:	08003a7b 	.word	0x08003a7b
 8003a6c:	08003a75 	.word	0x08003a75
 8003a70:	08003a8d 	.word	0x08003a8d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	73fb      	strb	r3, [r7, #15]
      break;
 8003a78:	e030      	b.n	8003adc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a7e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d025      	beq.n	8003ad2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a8a:	e022      	b.n	8003ad2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a90:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003a94:	d11f      	bne.n	8003ad6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a9a:	e01c      	b.n	8003ad6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d903      	bls.n	8003aaa <DMA_CheckFifoParam+0xb6>
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	2b03      	cmp	r3, #3
 8003aa6:	d003      	beq.n	8003ab0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003aa8:	e018      	b.n	8003adc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	73fb      	strb	r3, [r7, #15]
      break;
 8003aae:	e015      	b.n	8003adc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d00e      	beq.n	8003ada <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	73fb      	strb	r3, [r7, #15]
      break;
 8003ac0:	e00b      	b.n	8003ada <DMA_CheckFifoParam+0xe6>
      break;
 8003ac2:	bf00      	nop
 8003ac4:	e00a      	b.n	8003adc <DMA_CheckFifoParam+0xe8>
      break;
 8003ac6:	bf00      	nop
 8003ac8:	e008      	b.n	8003adc <DMA_CheckFifoParam+0xe8>
      break;
 8003aca:	bf00      	nop
 8003acc:	e006      	b.n	8003adc <DMA_CheckFifoParam+0xe8>
      break;
 8003ace:	bf00      	nop
 8003ad0:	e004      	b.n	8003adc <DMA_CheckFifoParam+0xe8>
      break;
 8003ad2:	bf00      	nop
 8003ad4:	e002      	b.n	8003adc <DMA_CheckFifoParam+0xe8>
      break;   
 8003ad6:	bf00      	nop
 8003ad8:	e000      	b.n	8003adc <DMA_CheckFifoParam+0xe8>
      break;
 8003ada:	bf00      	nop
    }
  } 
  
  return status; 
 8003adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3714      	adds	r7, #20
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop

08003aec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b089      	sub	sp, #36	@ 0x24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003af6:	2300      	movs	r3, #0
 8003af8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003afa:	2300      	movs	r3, #0
 8003afc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003afe:	2300      	movs	r3, #0
 8003b00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b02:	2300      	movs	r3, #0
 8003b04:	61fb      	str	r3, [r7, #28]
 8003b06:	e165      	b.n	8003dd4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b08:	2201      	movs	r2, #1
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	4013      	ands	r3, r2
 8003b1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	f040 8154 	bne.w	8003dce <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f003 0303 	and.w	r3, r3, #3
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d005      	beq.n	8003b3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d130      	bne.n	8003ba0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	2203      	movs	r2, #3
 8003b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4e:	43db      	mvns	r3, r3
 8003b50:	69ba      	ldr	r2, [r7, #24]
 8003b52:	4013      	ands	r3, r2
 8003b54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	68da      	ldr	r2, [r3, #12]
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	005b      	lsls	r3, r3, #1
 8003b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b74:	2201      	movs	r2, #1
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7c:	43db      	mvns	r3, r3
 8003b7e:	69ba      	ldr	r2, [r7, #24]
 8003b80:	4013      	ands	r3, r2
 8003b82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	091b      	lsrs	r3, r3, #4
 8003b8a:	f003 0201 	and.w	r2, r3, #1
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	fa02 f303 	lsl.w	r3, r2, r3
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f003 0303 	and.w	r3, r3, #3
 8003ba8:	2b03      	cmp	r3, #3
 8003baa:	d017      	beq.n	8003bdc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	005b      	lsls	r3, r3, #1
 8003bb6:	2203      	movs	r2, #3
 8003bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbc:	43db      	mvns	r3, r3
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	689a      	ldr	r2, [r3, #8]
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	005b      	lsls	r3, r3, #1
 8003bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f003 0303 	and.w	r3, r3, #3
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d123      	bne.n	8003c30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	08da      	lsrs	r2, r3, #3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	3208      	adds	r2, #8
 8003bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	f003 0307 	and.w	r3, r3, #7
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	220f      	movs	r2, #15
 8003c00:	fa02 f303 	lsl.w	r3, r2, r3
 8003c04:	43db      	mvns	r3, r3
 8003c06:	69ba      	ldr	r2, [r7, #24]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	691a      	ldr	r2, [r3, #16]
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	f003 0307 	and.w	r3, r3, #7
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	08da      	lsrs	r2, r3, #3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	3208      	adds	r2, #8
 8003c2a:	69b9      	ldr	r1, [r7, #24]
 8003c2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	2203      	movs	r2, #3
 8003c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c40:	43db      	mvns	r3, r3
 8003c42:	69ba      	ldr	r2, [r7, #24]
 8003c44:	4013      	ands	r3, r2
 8003c46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f003 0203 	and.w	r2, r3, #3
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	005b      	lsls	r3, r3, #1
 8003c54:	fa02 f303 	lsl.w	r3, r2, r3
 8003c58:	69ba      	ldr	r2, [r7, #24]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f000 80ae 	beq.w	8003dce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c72:	2300      	movs	r3, #0
 8003c74:	60fb      	str	r3, [r7, #12]
 8003c76:	4b5d      	ldr	r3, [pc, #372]	@ (8003dec <HAL_GPIO_Init+0x300>)
 8003c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c7a:	4a5c      	ldr	r2, [pc, #368]	@ (8003dec <HAL_GPIO_Init+0x300>)
 8003c7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c80:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c82:	4b5a      	ldr	r3, [pc, #360]	@ (8003dec <HAL_GPIO_Init+0x300>)
 8003c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c8a:	60fb      	str	r3, [r7, #12]
 8003c8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c8e:	4a58      	ldr	r2, [pc, #352]	@ (8003df0 <HAL_GPIO_Init+0x304>)
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	089b      	lsrs	r3, r3, #2
 8003c94:	3302      	adds	r3, #2
 8003c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	f003 0303 	and.w	r3, r3, #3
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	220f      	movs	r2, #15
 8003ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8003caa:	43db      	mvns	r3, r3
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	4013      	ands	r3, r2
 8003cb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a4f      	ldr	r2, [pc, #316]	@ (8003df4 <HAL_GPIO_Init+0x308>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d025      	beq.n	8003d06 <HAL_GPIO_Init+0x21a>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a4e      	ldr	r2, [pc, #312]	@ (8003df8 <HAL_GPIO_Init+0x30c>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d01f      	beq.n	8003d02 <HAL_GPIO_Init+0x216>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a4d      	ldr	r2, [pc, #308]	@ (8003dfc <HAL_GPIO_Init+0x310>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d019      	beq.n	8003cfe <HAL_GPIO_Init+0x212>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a4c      	ldr	r2, [pc, #304]	@ (8003e00 <HAL_GPIO_Init+0x314>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d013      	beq.n	8003cfa <HAL_GPIO_Init+0x20e>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a4b      	ldr	r2, [pc, #300]	@ (8003e04 <HAL_GPIO_Init+0x318>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d00d      	beq.n	8003cf6 <HAL_GPIO_Init+0x20a>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a4a      	ldr	r2, [pc, #296]	@ (8003e08 <HAL_GPIO_Init+0x31c>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d007      	beq.n	8003cf2 <HAL_GPIO_Init+0x206>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a49      	ldr	r2, [pc, #292]	@ (8003e0c <HAL_GPIO_Init+0x320>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d101      	bne.n	8003cee <HAL_GPIO_Init+0x202>
 8003cea:	2306      	movs	r3, #6
 8003cec:	e00c      	b.n	8003d08 <HAL_GPIO_Init+0x21c>
 8003cee:	2307      	movs	r3, #7
 8003cf0:	e00a      	b.n	8003d08 <HAL_GPIO_Init+0x21c>
 8003cf2:	2305      	movs	r3, #5
 8003cf4:	e008      	b.n	8003d08 <HAL_GPIO_Init+0x21c>
 8003cf6:	2304      	movs	r3, #4
 8003cf8:	e006      	b.n	8003d08 <HAL_GPIO_Init+0x21c>
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e004      	b.n	8003d08 <HAL_GPIO_Init+0x21c>
 8003cfe:	2302      	movs	r3, #2
 8003d00:	e002      	b.n	8003d08 <HAL_GPIO_Init+0x21c>
 8003d02:	2301      	movs	r3, #1
 8003d04:	e000      	b.n	8003d08 <HAL_GPIO_Init+0x21c>
 8003d06:	2300      	movs	r3, #0
 8003d08:	69fa      	ldr	r2, [r7, #28]
 8003d0a:	f002 0203 	and.w	r2, r2, #3
 8003d0e:	0092      	lsls	r2, r2, #2
 8003d10:	4093      	lsls	r3, r2
 8003d12:	69ba      	ldr	r2, [r7, #24]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d18:	4935      	ldr	r1, [pc, #212]	@ (8003df0 <HAL_GPIO_Init+0x304>)
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	089b      	lsrs	r3, r3, #2
 8003d1e:	3302      	adds	r3, #2
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d26:	4b3a      	ldr	r3, [pc, #232]	@ (8003e10 <HAL_GPIO_Init+0x324>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	43db      	mvns	r3, r3
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	4013      	ands	r3, r2
 8003d34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d003      	beq.n	8003d4a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d4a:	4a31      	ldr	r2, [pc, #196]	@ (8003e10 <HAL_GPIO_Init+0x324>)
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d50:	4b2f      	ldr	r3, [pc, #188]	@ (8003e10 <HAL_GPIO_Init+0x324>)
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	43db      	mvns	r3, r3
 8003d5a:	69ba      	ldr	r2, [r7, #24]
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d003      	beq.n	8003d74 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d74:	4a26      	ldr	r2, [pc, #152]	@ (8003e10 <HAL_GPIO_Init+0x324>)
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d7a:	4b25      	ldr	r3, [pc, #148]	@ (8003e10 <HAL_GPIO_Init+0x324>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	43db      	mvns	r3, r3
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	4013      	ands	r3, r2
 8003d88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d003      	beq.n	8003d9e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003d96:	69ba      	ldr	r2, [r7, #24]
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d9e:	4a1c      	ldr	r2, [pc, #112]	@ (8003e10 <HAL_GPIO_Init+0x324>)
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003da4:	4b1a      	ldr	r3, [pc, #104]	@ (8003e10 <HAL_GPIO_Init+0x324>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	43db      	mvns	r3, r3
 8003dae:	69ba      	ldr	r2, [r7, #24]
 8003db0:	4013      	ands	r3, r2
 8003db2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d003      	beq.n	8003dc8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003dc0:	69ba      	ldr	r2, [r7, #24]
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003dc8:	4a11      	ldr	r2, [pc, #68]	@ (8003e10 <HAL_GPIO_Init+0x324>)
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	61fb      	str	r3, [r7, #28]
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	2b0f      	cmp	r3, #15
 8003dd8:	f67f ae96 	bls.w	8003b08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ddc:	bf00      	nop
 8003dde:	bf00      	nop
 8003de0:	3724      	adds	r7, #36	@ 0x24
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	40023800 	.word	0x40023800
 8003df0:	40013800 	.word	0x40013800
 8003df4:	40020000 	.word	0x40020000
 8003df8:	40020400 	.word	0x40020400
 8003dfc:	40020800 	.word	0x40020800
 8003e00:	40020c00 	.word	0x40020c00
 8003e04:	40021000 	.word	0x40021000
 8003e08:	40021400 	.word	0x40021400
 8003e0c:	40021800 	.word	0x40021800
 8003e10:	40013c00 	.word	0x40013c00

08003e14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	807b      	strh	r3, [r7, #2]
 8003e20:	4613      	mov	r3, r2
 8003e22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e24:	787b      	ldrb	r3, [r7, #1]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d003      	beq.n	8003e32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e2a:	887a      	ldrh	r2, [r7, #2]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e30:	e003      	b.n	8003e3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e32:	887b      	ldrh	r3, [r7, #2]
 8003e34:	041a      	lsls	r2, r3, #16
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	619a      	str	r2, [r3, #24]
}
 8003e3a:	bf00      	nop
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
	...

08003e48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d101      	bne.n	8003e5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e0cc      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e5c:	4b68      	ldr	r3, [pc, #416]	@ (8004000 <HAL_RCC_ClockConfig+0x1b8>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 030f 	and.w	r3, r3, #15
 8003e64:	683a      	ldr	r2, [r7, #0]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d90c      	bls.n	8003e84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e6a:	4b65      	ldr	r3, [pc, #404]	@ (8004000 <HAL_RCC_ClockConfig+0x1b8>)
 8003e6c:	683a      	ldr	r2, [r7, #0]
 8003e6e:	b2d2      	uxtb	r2, r2
 8003e70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e72:	4b63      	ldr	r3, [pc, #396]	@ (8004000 <HAL_RCC_ClockConfig+0x1b8>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 030f 	and.w	r3, r3, #15
 8003e7a:	683a      	ldr	r2, [r7, #0]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d001      	beq.n	8003e84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e0b8      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0302 	and.w	r3, r3, #2
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d020      	beq.n	8003ed2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0304 	and.w	r3, r3, #4
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d005      	beq.n	8003ea8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e9c:	4b59      	ldr	r3, [pc, #356]	@ (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	4a58      	ldr	r2, [pc, #352]	@ (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003ea6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0308 	and.w	r3, r3, #8
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d005      	beq.n	8003ec0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003eb4:	4b53      	ldr	r3, [pc, #332]	@ (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	4a52      	ldr	r2, [pc, #328]	@ (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003eba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003ebe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ec0:	4b50      	ldr	r3, [pc, #320]	@ (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	494d      	ldr	r1, [pc, #308]	@ (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d044      	beq.n	8003f68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d107      	bne.n	8003ef6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ee6:	4b47      	ldr	r3, [pc, #284]	@ (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d119      	bne.n	8003f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e07f      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d003      	beq.n	8003f06 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f02:	2b03      	cmp	r3, #3
 8003f04:	d107      	bne.n	8003f16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f06:	4b3f      	ldr	r3, [pc, #252]	@ (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d109      	bne.n	8003f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e06f      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f16:	4b3b      	ldr	r3, [pc, #236]	@ (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e067      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f26:	4b37      	ldr	r3, [pc, #220]	@ (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f023 0203 	bic.w	r2, r3, #3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	4934      	ldr	r1, [pc, #208]	@ (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f38:	f7ff f8e8 	bl	800310c <HAL_GetTick>
 8003f3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f3e:	e00a      	b.n	8003f56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f40:	f7ff f8e4 	bl	800310c <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e04f      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f56:	4b2b      	ldr	r3, [pc, #172]	@ (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f003 020c 	and.w	r2, r3, #12
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d1eb      	bne.n	8003f40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f68:	4b25      	ldr	r3, [pc, #148]	@ (8004000 <HAL_RCC_ClockConfig+0x1b8>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 030f 	and.w	r3, r3, #15
 8003f70:	683a      	ldr	r2, [r7, #0]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d20c      	bcs.n	8003f90 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f76:	4b22      	ldr	r3, [pc, #136]	@ (8004000 <HAL_RCC_ClockConfig+0x1b8>)
 8003f78:	683a      	ldr	r2, [r7, #0]
 8003f7a:	b2d2      	uxtb	r2, r2
 8003f7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f7e:	4b20      	ldr	r3, [pc, #128]	@ (8004000 <HAL_RCC_ClockConfig+0x1b8>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 030f 	and.w	r3, r3, #15
 8003f86:	683a      	ldr	r2, [r7, #0]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d001      	beq.n	8003f90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e032      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0304 	and.w	r3, r3, #4
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d008      	beq.n	8003fae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f9c:	4b19      	ldr	r3, [pc, #100]	@ (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	4916      	ldr	r1, [pc, #88]	@ (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0308 	and.w	r3, r3, #8
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d009      	beq.n	8003fce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fba:	4b12      	ldr	r3, [pc, #72]	@ (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	00db      	lsls	r3, r3, #3
 8003fc8:	490e      	ldr	r1, [pc, #56]	@ (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003fce:	f000 f887 	bl	80040e0 <HAL_RCC_GetSysClockFreq>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	091b      	lsrs	r3, r3, #4
 8003fda:	f003 030f 	and.w	r3, r3, #15
 8003fde:	490a      	ldr	r1, [pc, #40]	@ (8004008 <HAL_RCC_ClockConfig+0x1c0>)
 8003fe0:	5ccb      	ldrb	r3, [r1, r3]
 8003fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8003fe6:	4a09      	ldr	r2, [pc, #36]	@ (800400c <HAL_RCC_ClockConfig+0x1c4>)
 8003fe8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003fea:	4b09      	ldr	r3, [pc, #36]	@ (8004010 <HAL_RCC_ClockConfig+0x1c8>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7fe fe0c 	bl	8002c0c <HAL_InitTick>

  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3710      	adds	r7, #16
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	40023c00 	.word	0x40023c00
 8004004:	40023800 	.word	0x40023800
 8004008:	0800c4f8 	.word	0x0800c4f8
 800400c:	2000000c 	.word	0x2000000c
 8004010:	20000010 	.word	0x20000010

08004014 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004014:	b480      	push	{r7}
 8004016:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004018:	4b03      	ldr	r3, [pc, #12]	@ (8004028 <HAL_RCC_GetHCLKFreq+0x14>)
 800401a:	681b      	ldr	r3, [r3, #0]
}
 800401c:	4618      	mov	r0, r3
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	2000000c 	.word	0x2000000c

0800402c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004030:	f7ff fff0 	bl	8004014 <HAL_RCC_GetHCLKFreq>
 8004034:	4602      	mov	r2, r0
 8004036:	4b05      	ldr	r3, [pc, #20]	@ (800404c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	0a9b      	lsrs	r3, r3, #10
 800403c:	f003 0307 	and.w	r3, r3, #7
 8004040:	4903      	ldr	r1, [pc, #12]	@ (8004050 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004042:	5ccb      	ldrb	r3, [r1, r3]
 8004044:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004048:	4618      	mov	r0, r3
 800404a:	bd80      	pop	{r7, pc}
 800404c:	40023800 	.word	0x40023800
 8004050:	0800c508 	.word	0x0800c508

08004054 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004058:	f7ff ffdc 	bl	8004014 <HAL_RCC_GetHCLKFreq>
 800405c:	4602      	mov	r2, r0
 800405e:	4b05      	ldr	r3, [pc, #20]	@ (8004074 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	0b5b      	lsrs	r3, r3, #13
 8004064:	f003 0307 	and.w	r3, r3, #7
 8004068:	4903      	ldr	r1, [pc, #12]	@ (8004078 <HAL_RCC_GetPCLK2Freq+0x24>)
 800406a:	5ccb      	ldrb	r3, [r1, r3]
 800406c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004070:	4618      	mov	r0, r3
 8004072:	bd80      	pop	{r7, pc}
 8004074:	40023800 	.word	0x40023800
 8004078:	0800c508 	.word	0x0800c508

0800407c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	220f      	movs	r2, #15
 800408a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800408c:	4b12      	ldr	r3, [pc, #72]	@ (80040d8 <HAL_RCC_GetClockConfig+0x5c>)
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f003 0203 	and.w	r2, r3, #3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004098:	4b0f      	ldr	r3, [pc, #60]	@ (80040d8 <HAL_RCC_GetClockConfig+0x5c>)
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80040a4:	4b0c      	ldr	r3, [pc, #48]	@ (80040d8 <HAL_RCC_GetClockConfig+0x5c>)
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80040b0:	4b09      	ldr	r3, [pc, #36]	@ (80040d8 <HAL_RCC_GetClockConfig+0x5c>)
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	08db      	lsrs	r3, r3, #3
 80040b6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80040be:	4b07      	ldr	r3, [pc, #28]	@ (80040dc <HAL_RCC_GetClockConfig+0x60>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 020f 	and.w	r2, r3, #15
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	601a      	str	r2, [r3, #0]
}
 80040ca:	bf00      	nop
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	40023800 	.word	0x40023800
 80040dc:	40023c00 	.word	0x40023c00

080040e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040e4:	b0ae      	sub	sp, #184	@ 0xb8
 80040e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80040e8:	2300      	movs	r3, #0
 80040ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80040ee:	2300      	movs	r3, #0
 80040f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80040f4:	2300      	movs	r3, #0
 80040f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80040fa:	2300      	movs	r3, #0
 80040fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004100:	2300      	movs	r3, #0
 8004102:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004106:	4bcb      	ldr	r3, [pc, #812]	@ (8004434 <HAL_RCC_GetSysClockFreq+0x354>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f003 030c 	and.w	r3, r3, #12
 800410e:	2b0c      	cmp	r3, #12
 8004110:	f200 8206 	bhi.w	8004520 <HAL_RCC_GetSysClockFreq+0x440>
 8004114:	a201      	add	r2, pc, #4	@ (adr r2, 800411c <HAL_RCC_GetSysClockFreq+0x3c>)
 8004116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800411a:	bf00      	nop
 800411c:	08004151 	.word	0x08004151
 8004120:	08004521 	.word	0x08004521
 8004124:	08004521 	.word	0x08004521
 8004128:	08004521 	.word	0x08004521
 800412c:	08004159 	.word	0x08004159
 8004130:	08004521 	.word	0x08004521
 8004134:	08004521 	.word	0x08004521
 8004138:	08004521 	.word	0x08004521
 800413c:	08004161 	.word	0x08004161
 8004140:	08004521 	.word	0x08004521
 8004144:	08004521 	.word	0x08004521
 8004148:	08004521 	.word	0x08004521
 800414c:	08004351 	.word	0x08004351
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004150:	4bb9      	ldr	r3, [pc, #740]	@ (8004438 <HAL_RCC_GetSysClockFreq+0x358>)
 8004152:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004156:	e1e7      	b.n	8004528 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004158:	4bb8      	ldr	r3, [pc, #736]	@ (800443c <HAL_RCC_GetSysClockFreq+0x35c>)
 800415a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800415e:	e1e3      	b.n	8004528 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004160:	4bb4      	ldr	r3, [pc, #720]	@ (8004434 <HAL_RCC_GetSysClockFreq+0x354>)
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004168:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800416c:	4bb1      	ldr	r3, [pc, #708]	@ (8004434 <HAL_RCC_GetSysClockFreq+0x354>)
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d071      	beq.n	800425c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004178:	4bae      	ldr	r3, [pc, #696]	@ (8004434 <HAL_RCC_GetSysClockFreq+0x354>)
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	099b      	lsrs	r3, r3, #6
 800417e:	2200      	movs	r2, #0
 8004180:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004184:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004188:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800418c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004190:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004194:	2300      	movs	r3, #0
 8004196:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800419a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800419e:	4622      	mov	r2, r4
 80041a0:	462b      	mov	r3, r5
 80041a2:	f04f 0000 	mov.w	r0, #0
 80041a6:	f04f 0100 	mov.w	r1, #0
 80041aa:	0159      	lsls	r1, r3, #5
 80041ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041b0:	0150      	lsls	r0, r2, #5
 80041b2:	4602      	mov	r2, r0
 80041b4:	460b      	mov	r3, r1
 80041b6:	4621      	mov	r1, r4
 80041b8:	1a51      	subs	r1, r2, r1
 80041ba:	6439      	str	r1, [r7, #64]	@ 0x40
 80041bc:	4629      	mov	r1, r5
 80041be:	eb63 0301 	sbc.w	r3, r3, r1
 80041c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80041c4:	f04f 0200 	mov.w	r2, #0
 80041c8:	f04f 0300 	mov.w	r3, #0
 80041cc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80041d0:	4649      	mov	r1, r9
 80041d2:	018b      	lsls	r3, r1, #6
 80041d4:	4641      	mov	r1, r8
 80041d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041da:	4641      	mov	r1, r8
 80041dc:	018a      	lsls	r2, r1, #6
 80041de:	4641      	mov	r1, r8
 80041e0:	1a51      	subs	r1, r2, r1
 80041e2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80041e4:	4649      	mov	r1, r9
 80041e6:	eb63 0301 	sbc.w	r3, r3, r1
 80041ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041ec:	f04f 0200 	mov.w	r2, #0
 80041f0:	f04f 0300 	mov.w	r3, #0
 80041f4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80041f8:	4649      	mov	r1, r9
 80041fa:	00cb      	lsls	r3, r1, #3
 80041fc:	4641      	mov	r1, r8
 80041fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004202:	4641      	mov	r1, r8
 8004204:	00ca      	lsls	r2, r1, #3
 8004206:	4610      	mov	r0, r2
 8004208:	4619      	mov	r1, r3
 800420a:	4603      	mov	r3, r0
 800420c:	4622      	mov	r2, r4
 800420e:	189b      	adds	r3, r3, r2
 8004210:	633b      	str	r3, [r7, #48]	@ 0x30
 8004212:	462b      	mov	r3, r5
 8004214:	460a      	mov	r2, r1
 8004216:	eb42 0303 	adc.w	r3, r2, r3
 800421a:	637b      	str	r3, [r7, #52]	@ 0x34
 800421c:	f04f 0200 	mov.w	r2, #0
 8004220:	f04f 0300 	mov.w	r3, #0
 8004224:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004228:	4629      	mov	r1, r5
 800422a:	024b      	lsls	r3, r1, #9
 800422c:	4621      	mov	r1, r4
 800422e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004232:	4621      	mov	r1, r4
 8004234:	024a      	lsls	r2, r1, #9
 8004236:	4610      	mov	r0, r2
 8004238:	4619      	mov	r1, r3
 800423a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800423e:	2200      	movs	r2, #0
 8004240:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004244:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004248:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800424c:	f7fc fd36 	bl	8000cbc <__aeabi_uldivmod>
 8004250:	4602      	mov	r2, r0
 8004252:	460b      	mov	r3, r1
 8004254:	4613      	mov	r3, r2
 8004256:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800425a:	e067      	b.n	800432c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800425c:	4b75      	ldr	r3, [pc, #468]	@ (8004434 <HAL_RCC_GetSysClockFreq+0x354>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	099b      	lsrs	r3, r3, #6
 8004262:	2200      	movs	r2, #0
 8004264:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004268:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800426c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004270:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004274:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004276:	2300      	movs	r3, #0
 8004278:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800427a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800427e:	4622      	mov	r2, r4
 8004280:	462b      	mov	r3, r5
 8004282:	f04f 0000 	mov.w	r0, #0
 8004286:	f04f 0100 	mov.w	r1, #0
 800428a:	0159      	lsls	r1, r3, #5
 800428c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004290:	0150      	lsls	r0, r2, #5
 8004292:	4602      	mov	r2, r0
 8004294:	460b      	mov	r3, r1
 8004296:	4621      	mov	r1, r4
 8004298:	1a51      	subs	r1, r2, r1
 800429a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800429c:	4629      	mov	r1, r5
 800429e:	eb63 0301 	sbc.w	r3, r3, r1
 80042a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042a4:	f04f 0200 	mov.w	r2, #0
 80042a8:	f04f 0300 	mov.w	r3, #0
 80042ac:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80042b0:	4649      	mov	r1, r9
 80042b2:	018b      	lsls	r3, r1, #6
 80042b4:	4641      	mov	r1, r8
 80042b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042ba:	4641      	mov	r1, r8
 80042bc:	018a      	lsls	r2, r1, #6
 80042be:	4641      	mov	r1, r8
 80042c0:	ebb2 0a01 	subs.w	sl, r2, r1
 80042c4:	4649      	mov	r1, r9
 80042c6:	eb63 0b01 	sbc.w	fp, r3, r1
 80042ca:	f04f 0200 	mov.w	r2, #0
 80042ce:	f04f 0300 	mov.w	r3, #0
 80042d2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80042d6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80042da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042de:	4692      	mov	sl, r2
 80042e0:	469b      	mov	fp, r3
 80042e2:	4623      	mov	r3, r4
 80042e4:	eb1a 0303 	adds.w	r3, sl, r3
 80042e8:	623b      	str	r3, [r7, #32]
 80042ea:	462b      	mov	r3, r5
 80042ec:	eb4b 0303 	adc.w	r3, fp, r3
 80042f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80042f2:	f04f 0200 	mov.w	r2, #0
 80042f6:	f04f 0300 	mov.w	r3, #0
 80042fa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80042fe:	4629      	mov	r1, r5
 8004300:	028b      	lsls	r3, r1, #10
 8004302:	4621      	mov	r1, r4
 8004304:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004308:	4621      	mov	r1, r4
 800430a:	028a      	lsls	r2, r1, #10
 800430c:	4610      	mov	r0, r2
 800430e:	4619      	mov	r1, r3
 8004310:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004314:	2200      	movs	r2, #0
 8004316:	673b      	str	r3, [r7, #112]	@ 0x70
 8004318:	677a      	str	r2, [r7, #116]	@ 0x74
 800431a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800431e:	f7fc fccd 	bl	8000cbc <__aeabi_uldivmod>
 8004322:	4602      	mov	r2, r0
 8004324:	460b      	mov	r3, r1
 8004326:	4613      	mov	r3, r2
 8004328:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800432c:	4b41      	ldr	r3, [pc, #260]	@ (8004434 <HAL_RCC_GetSysClockFreq+0x354>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	0c1b      	lsrs	r3, r3, #16
 8004332:	f003 0303 	and.w	r3, r3, #3
 8004336:	3301      	adds	r3, #1
 8004338:	005b      	lsls	r3, r3, #1
 800433a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800433e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004342:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004346:	fbb2 f3f3 	udiv	r3, r2, r3
 800434a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800434e:	e0eb      	b.n	8004528 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004350:	4b38      	ldr	r3, [pc, #224]	@ (8004434 <HAL_RCC_GetSysClockFreq+0x354>)
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004358:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800435c:	4b35      	ldr	r3, [pc, #212]	@ (8004434 <HAL_RCC_GetSysClockFreq+0x354>)
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d06b      	beq.n	8004440 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004368:	4b32      	ldr	r3, [pc, #200]	@ (8004434 <HAL_RCC_GetSysClockFreq+0x354>)
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	099b      	lsrs	r3, r3, #6
 800436e:	2200      	movs	r2, #0
 8004370:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004372:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004374:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800437a:	663b      	str	r3, [r7, #96]	@ 0x60
 800437c:	2300      	movs	r3, #0
 800437e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004380:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004384:	4622      	mov	r2, r4
 8004386:	462b      	mov	r3, r5
 8004388:	f04f 0000 	mov.w	r0, #0
 800438c:	f04f 0100 	mov.w	r1, #0
 8004390:	0159      	lsls	r1, r3, #5
 8004392:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004396:	0150      	lsls	r0, r2, #5
 8004398:	4602      	mov	r2, r0
 800439a:	460b      	mov	r3, r1
 800439c:	4621      	mov	r1, r4
 800439e:	1a51      	subs	r1, r2, r1
 80043a0:	61b9      	str	r1, [r7, #24]
 80043a2:	4629      	mov	r1, r5
 80043a4:	eb63 0301 	sbc.w	r3, r3, r1
 80043a8:	61fb      	str	r3, [r7, #28]
 80043aa:	f04f 0200 	mov.w	r2, #0
 80043ae:	f04f 0300 	mov.w	r3, #0
 80043b2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80043b6:	4659      	mov	r1, fp
 80043b8:	018b      	lsls	r3, r1, #6
 80043ba:	4651      	mov	r1, sl
 80043bc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043c0:	4651      	mov	r1, sl
 80043c2:	018a      	lsls	r2, r1, #6
 80043c4:	4651      	mov	r1, sl
 80043c6:	ebb2 0801 	subs.w	r8, r2, r1
 80043ca:	4659      	mov	r1, fp
 80043cc:	eb63 0901 	sbc.w	r9, r3, r1
 80043d0:	f04f 0200 	mov.w	r2, #0
 80043d4:	f04f 0300 	mov.w	r3, #0
 80043d8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043dc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043e0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043e4:	4690      	mov	r8, r2
 80043e6:	4699      	mov	r9, r3
 80043e8:	4623      	mov	r3, r4
 80043ea:	eb18 0303 	adds.w	r3, r8, r3
 80043ee:	613b      	str	r3, [r7, #16]
 80043f0:	462b      	mov	r3, r5
 80043f2:	eb49 0303 	adc.w	r3, r9, r3
 80043f6:	617b      	str	r3, [r7, #20]
 80043f8:	f04f 0200 	mov.w	r2, #0
 80043fc:	f04f 0300 	mov.w	r3, #0
 8004400:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004404:	4629      	mov	r1, r5
 8004406:	024b      	lsls	r3, r1, #9
 8004408:	4621      	mov	r1, r4
 800440a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800440e:	4621      	mov	r1, r4
 8004410:	024a      	lsls	r2, r1, #9
 8004412:	4610      	mov	r0, r2
 8004414:	4619      	mov	r1, r3
 8004416:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800441a:	2200      	movs	r2, #0
 800441c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800441e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004420:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004424:	f7fc fc4a 	bl	8000cbc <__aeabi_uldivmod>
 8004428:	4602      	mov	r2, r0
 800442a:	460b      	mov	r3, r1
 800442c:	4613      	mov	r3, r2
 800442e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004432:	e065      	b.n	8004500 <HAL_RCC_GetSysClockFreq+0x420>
 8004434:	40023800 	.word	0x40023800
 8004438:	00f42400 	.word	0x00f42400
 800443c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004440:	4b3d      	ldr	r3, [pc, #244]	@ (8004538 <HAL_RCC_GetSysClockFreq+0x458>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	099b      	lsrs	r3, r3, #6
 8004446:	2200      	movs	r2, #0
 8004448:	4618      	mov	r0, r3
 800444a:	4611      	mov	r1, r2
 800444c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004450:	653b      	str	r3, [r7, #80]	@ 0x50
 8004452:	2300      	movs	r3, #0
 8004454:	657b      	str	r3, [r7, #84]	@ 0x54
 8004456:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800445a:	4642      	mov	r2, r8
 800445c:	464b      	mov	r3, r9
 800445e:	f04f 0000 	mov.w	r0, #0
 8004462:	f04f 0100 	mov.w	r1, #0
 8004466:	0159      	lsls	r1, r3, #5
 8004468:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800446c:	0150      	lsls	r0, r2, #5
 800446e:	4602      	mov	r2, r0
 8004470:	460b      	mov	r3, r1
 8004472:	4641      	mov	r1, r8
 8004474:	1a51      	subs	r1, r2, r1
 8004476:	60b9      	str	r1, [r7, #8]
 8004478:	4649      	mov	r1, r9
 800447a:	eb63 0301 	sbc.w	r3, r3, r1
 800447e:	60fb      	str	r3, [r7, #12]
 8004480:	f04f 0200 	mov.w	r2, #0
 8004484:	f04f 0300 	mov.w	r3, #0
 8004488:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800448c:	4659      	mov	r1, fp
 800448e:	018b      	lsls	r3, r1, #6
 8004490:	4651      	mov	r1, sl
 8004492:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004496:	4651      	mov	r1, sl
 8004498:	018a      	lsls	r2, r1, #6
 800449a:	4651      	mov	r1, sl
 800449c:	1a54      	subs	r4, r2, r1
 800449e:	4659      	mov	r1, fp
 80044a0:	eb63 0501 	sbc.w	r5, r3, r1
 80044a4:	f04f 0200 	mov.w	r2, #0
 80044a8:	f04f 0300 	mov.w	r3, #0
 80044ac:	00eb      	lsls	r3, r5, #3
 80044ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044b2:	00e2      	lsls	r2, r4, #3
 80044b4:	4614      	mov	r4, r2
 80044b6:	461d      	mov	r5, r3
 80044b8:	4643      	mov	r3, r8
 80044ba:	18e3      	adds	r3, r4, r3
 80044bc:	603b      	str	r3, [r7, #0]
 80044be:	464b      	mov	r3, r9
 80044c0:	eb45 0303 	adc.w	r3, r5, r3
 80044c4:	607b      	str	r3, [r7, #4]
 80044c6:	f04f 0200 	mov.w	r2, #0
 80044ca:	f04f 0300 	mov.w	r3, #0
 80044ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044d2:	4629      	mov	r1, r5
 80044d4:	028b      	lsls	r3, r1, #10
 80044d6:	4621      	mov	r1, r4
 80044d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044dc:	4621      	mov	r1, r4
 80044de:	028a      	lsls	r2, r1, #10
 80044e0:	4610      	mov	r0, r2
 80044e2:	4619      	mov	r1, r3
 80044e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80044e8:	2200      	movs	r2, #0
 80044ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044ec:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80044ee:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80044f2:	f7fc fbe3 	bl	8000cbc <__aeabi_uldivmod>
 80044f6:	4602      	mov	r2, r0
 80044f8:	460b      	mov	r3, r1
 80044fa:	4613      	mov	r3, r2
 80044fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004500:	4b0d      	ldr	r3, [pc, #52]	@ (8004538 <HAL_RCC_GetSysClockFreq+0x458>)
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	0f1b      	lsrs	r3, r3, #28
 8004506:	f003 0307 	and.w	r3, r3, #7
 800450a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800450e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004512:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004516:	fbb2 f3f3 	udiv	r3, r2, r3
 800451a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800451e:	e003      	b.n	8004528 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004520:	4b06      	ldr	r3, [pc, #24]	@ (800453c <HAL_RCC_GetSysClockFreq+0x45c>)
 8004522:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004526:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004528:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800452c:	4618      	mov	r0, r3
 800452e:	37b8      	adds	r7, #184	@ 0xb8
 8004530:	46bd      	mov	sp, r7
 8004532:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004536:	bf00      	nop
 8004538:	40023800 	.word	0x40023800
 800453c:	00f42400 	.word	0x00f42400

08004540 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b086      	sub	sp, #24
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e28d      	b.n	8004a6e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	2b00      	cmp	r3, #0
 800455c:	f000 8083 	beq.w	8004666 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004560:	4b94      	ldr	r3, [pc, #592]	@ (80047b4 <HAL_RCC_OscConfig+0x274>)
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f003 030c 	and.w	r3, r3, #12
 8004568:	2b04      	cmp	r3, #4
 800456a:	d019      	beq.n	80045a0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800456c:	4b91      	ldr	r3, [pc, #580]	@ (80047b4 <HAL_RCC_OscConfig+0x274>)
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f003 030c 	and.w	r3, r3, #12
        || \
 8004574:	2b08      	cmp	r3, #8
 8004576:	d106      	bne.n	8004586 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004578:	4b8e      	ldr	r3, [pc, #568]	@ (80047b4 <HAL_RCC_OscConfig+0x274>)
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004580:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004584:	d00c      	beq.n	80045a0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004586:	4b8b      	ldr	r3, [pc, #556]	@ (80047b4 <HAL_RCC_OscConfig+0x274>)
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800458e:	2b0c      	cmp	r3, #12
 8004590:	d112      	bne.n	80045b8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004592:	4b88      	ldr	r3, [pc, #544]	@ (80047b4 <HAL_RCC_OscConfig+0x274>)
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800459a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800459e:	d10b      	bne.n	80045b8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045a0:	4b84      	ldr	r3, [pc, #528]	@ (80047b4 <HAL_RCC_OscConfig+0x274>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d05b      	beq.n	8004664 <HAL_RCC_OscConfig+0x124>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d157      	bne.n	8004664 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e25a      	b.n	8004a6e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045c0:	d106      	bne.n	80045d0 <HAL_RCC_OscConfig+0x90>
 80045c2:	4b7c      	ldr	r3, [pc, #496]	@ (80047b4 <HAL_RCC_OscConfig+0x274>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a7b      	ldr	r2, [pc, #492]	@ (80047b4 <HAL_RCC_OscConfig+0x274>)
 80045c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045cc:	6013      	str	r3, [r2, #0]
 80045ce:	e01d      	b.n	800460c <HAL_RCC_OscConfig+0xcc>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80045d8:	d10c      	bne.n	80045f4 <HAL_RCC_OscConfig+0xb4>
 80045da:	4b76      	ldr	r3, [pc, #472]	@ (80047b4 <HAL_RCC_OscConfig+0x274>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a75      	ldr	r2, [pc, #468]	@ (80047b4 <HAL_RCC_OscConfig+0x274>)
 80045e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045e4:	6013      	str	r3, [r2, #0]
 80045e6:	4b73      	ldr	r3, [pc, #460]	@ (80047b4 <HAL_RCC_OscConfig+0x274>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a72      	ldr	r2, [pc, #456]	@ (80047b4 <HAL_RCC_OscConfig+0x274>)
 80045ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045f0:	6013      	str	r3, [r2, #0]
 80045f2:	e00b      	b.n	800460c <HAL_RCC_OscConfig+0xcc>
 80045f4:	4b6f      	ldr	r3, [pc, #444]	@ (80047b4 <HAL_RCC_OscConfig+0x274>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a6e      	ldr	r2, [pc, #440]	@ (80047b4 <HAL_RCC_OscConfig+0x274>)
 80045fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045fe:	6013      	str	r3, [r2, #0]
 8004600:	4b6c      	ldr	r3, [pc, #432]	@ (80047b4 <HAL_RCC_OscConfig+0x274>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a6b      	ldr	r2, [pc, #428]	@ (80047b4 <HAL_RCC_OscConfig+0x274>)
 8004606:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800460a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d013      	beq.n	800463c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004614:	f7fe fd7a 	bl	800310c <HAL_GetTick>
 8004618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800461a:	e008      	b.n	800462e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800461c:	f7fe fd76 	bl	800310c <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b64      	cmp	r3, #100	@ 0x64
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e21f      	b.n	8004a6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800462e:	4b61      	ldr	r3, [pc, #388]	@ (80047b4 <HAL_RCC_OscConfig+0x274>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d0f0      	beq.n	800461c <HAL_RCC_OscConfig+0xdc>
 800463a:	e014      	b.n	8004666 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800463c:	f7fe fd66 	bl	800310c <HAL_GetTick>
 8004640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004642:	e008      	b.n	8004656 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004644:	f7fe fd62 	bl	800310c <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b64      	cmp	r3, #100	@ 0x64
 8004650:	d901      	bls.n	8004656 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e20b      	b.n	8004a6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004656:	4b57      	ldr	r3, [pc, #348]	@ (80047b4 <HAL_RCC_OscConfig+0x274>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1f0      	bne.n	8004644 <HAL_RCC_OscConfig+0x104>
 8004662:	e000      	b.n	8004666 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004664:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0302 	and.w	r3, r3, #2
 800466e:	2b00      	cmp	r3, #0
 8004670:	d06f      	beq.n	8004752 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004672:	4b50      	ldr	r3, [pc, #320]	@ (80047b4 <HAL_RCC_OscConfig+0x274>)
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f003 030c 	and.w	r3, r3, #12
 800467a:	2b00      	cmp	r3, #0
 800467c:	d017      	beq.n	80046ae <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800467e:	4b4d      	ldr	r3, [pc, #308]	@ (80047b4 <HAL_RCC_OscConfig+0x274>)
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f003 030c 	and.w	r3, r3, #12
        || \
 8004686:	2b08      	cmp	r3, #8
 8004688:	d105      	bne.n	8004696 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800468a:	4b4a      	ldr	r3, [pc, #296]	@ (80047b4 <HAL_RCC_OscConfig+0x274>)
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00b      	beq.n	80046ae <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004696:	4b47      	ldr	r3, [pc, #284]	@ (80047b4 <HAL_RCC_OscConfig+0x274>)
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800469e:	2b0c      	cmp	r3, #12
 80046a0:	d11c      	bne.n	80046dc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046a2:	4b44      	ldr	r3, [pc, #272]	@ (80047b4 <HAL_RCC_OscConfig+0x274>)
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d116      	bne.n	80046dc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046ae:	4b41      	ldr	r3, [pc, #260]	@ (80047b4 <HAL_RCC_OscConfig+0x274>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d005      	beq.n	80046c6 <HAL_RCC_OscConfig+0x186>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d001      	beq.n	80046c6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e1d3      	b.n	8004a6e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046c6:	4b3b      	ldr	r3, [pc, #236]	@ (80047b4 <HAL_RCC_OscConfig+0x274>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	00db      	lsls	r3, r3, #3
 80046d4:	4937      	ldr	r1, [pc, #220]	@ (80047b4 <HAL_RCC_OscConfig+0x274>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046da:	e03a      	b.n	8004752 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d020      	beq.n	8004726 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046e4:	4b34      	ldr	r3, [pc, #208]	@ (80047b8 <HAL_RCC_OscConfig+0x278>)
 80046e6:	2201      	movs	r2, #1
 80046e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ea:	f7fe fd0f 	bl	800310c <HAL_GetTick>
 80046ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046f0:	e008      	b.n	8004704 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046f2:	f7fe fd0b 	bl	800310c <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d901      	bls.n	8004704 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e1b4      	b.n	8004a6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004704:	4b2b      	ldr	r3, [pc, #172]	@ (80047b4 <HAL_RCC_OscConfig+0x274>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d0f0      	beq.n	80046f2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004710:	4b28      	ldr	r3, [pc, #160]	@ (80047b4 <HAL_RCC_OscConfig+0x274>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	00db      	lsls	r3, r3, #3
 800471e:	4925      	ldr	r1, [pc, #148]	@ (80047b4 <HAL_RCC_OscConfig+0x274>)
 8004720:	4313      	orrs	r3, r2
 8004722:	600b      	str	r3, [r1, #0]
 8004724:	e015      	b.n	8004752 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004726:	4b24      	ldr	r3, [pc, #144]	@ (80047b8 <HAL_RCC_OscConfig+0x278>)
 8004728:	2200      	movs	r2, #0
 800472a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800472c:	f7fe fcee 	bl	800310c <HAL_GetTick>
 8004730:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004732:	e008      	b.n	8004746 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004734:	f7fe fcea 	bl	800310c <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	2b02      	cmp	r3, #2
 8004740:	d901      	bls.n	8004746 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e193      	b.n	8004a6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004746:	4b1b      	ldr	r3, [pc, #108]	@ (80047b4 <HAL_RCC_OscConfig+0x274>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0302 	and.w	r3, r3, #2
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1f0      	bne.n	8004734 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0308 	and.w	r3, r3, #8
 800475a:	2b00      	cmp	r3, #0
 800475c:	d036      	beq.n	80047cc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	695b      	ldr	r3, [r3, #20]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d016      	beq.n	8004794 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004766:	4b15      	ldr	r3, [pc, #84]	@ (80047bc <HAL_RCC_OscConfig+0x27c>)
 8004768:	2201      	movs	r2, #1
 800476a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800476c:	f7fe fcce 	bl	800310c <HAL_GetTick>
 8004770:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004772:	e008      	b.n	8004786 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004774:	f7fe fcca 	bl	800310c <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	2b02      	cmp	r3, #2
 8004780:	d901      	bls.n	8004786 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e173      	b.n	8004a6e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004786:	4b0b      	ldr	r3, [pc, #44]	@ (80047b4 <HAL_RCC_OscConfig+0x274>)
 8004788:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d0f0      	beq.n	8004774 <HAL_RCC_OscConfig+0x234>
 8004792:	e01b      	b.n	80047cc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004794:	4b09      	ldr	r3, [pc, #36]	@ (80047bc <HAL_RCC_OscConfig+0x27c>)
 8004796:	2200      	movs	r2, #0
 8004798:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800479a:	f7fe fcb7 	bl	800310c <HAL_GetTick>
 800479e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047a0:	e00e      	b.n	80047c0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047a2:	f7fe fcb3 	bl	800310c <HAL_GetTick>
 80047a6:	4602      	mov	r2, r0
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d907      	bls.n	80047c0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e15c      	b.n	8004a6e <HAL_RCC_OscConfig+0x52e>
 80047b4:	40023800 	.word	0x40023800
 80047b8:	42470000 	.word	0x42470000
 80047bc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047c0:	4b8a      	ldr	r3, [pc, #552]	@ (80049ec <HAL_RCC_OscConfig+0x4ac>)
 80047c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047c4:	f003 0302 	and.w	r3, r3, #2
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1ea      	bne.n	80047a2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0304 	and.w	r3, r3, #4
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	f000 8097 	beq.w	8004908 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047da:	2300      	movs	r3, #0
 80047dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047de:	4b83      	ldr	r3, [pc, #524]	@ (80049ec <HAL_RCC_OscConfig+0x4ac>)
 80047e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10f      	bne.n	800480a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047ea:	2300      	movs	r3, #0
 80047ec:	60bb      	str	r3, [r7, #8]
 80047ee:	4b7f      	ldr	r3, [pc, #508]	@ (80049ec <HAL_RCC_OscConfig+0x4ac>)
 80047f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f2:	4a7e      	ldr	r2, [pc, #504]	@ (80049ec <HAL_RCC_OscConfig+0x4ac>)
 80047f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80047fa:	4b7c      	ldr	r3, [pc, #496]	@ (80049ec <HAL_RCC_OscConfig+0x4ac>)
 80047fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004802:	60bb      	str	r3, [r7, #8]
 8004804:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004806:	2301      	movs	r3, #1
 8004808:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800480a:	4b79      	ldr	r3, [pc, #484]	@ (80049f0 <HAL_RCC_OscConfig+0x4b0>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004812:	2b00      	cmp	r3, #0
 8004814:	d118      	bne.n	8004848 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004816:	4b76      	ldr	r3, [pc, #472]	@ (80049f0 <HAL_RCC_OscConfig+0x4b0>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a75      	ldr	r2, [pc, #468]	@ (80049f0 <HAL_RCC_OscConfig+0x4b0>)
 800481c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004820:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004822:	f7fe fc73 	bl	800310c <HAL_GetTick>
 8004826:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004828:	e008      	b.n	800483c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800482a:	f7fe fc6f 	bl	800310c <HAL_GetTick>
 800482e:	4602      	mov	r2, r0
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	2b02      	cmp	r3, #2
 8004836:	d901      	bls.n	800483c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e118      	b.n	8004a6e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800483c:	4b6c      	ldr	r3, [pc, #432]	@ (80049f0 <HAL_RCC_OscConfig+0x4b0>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004844:	2b00      	cmp	r3, #0
 8004846:	d0f0      	beq.n	800482a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d106      	bne.n	800485e <HAL_RCC_OscConfig+0x31e>
 8004850:	4b66      	ldr	r3, [pc, #408]	@ (80049ec <HAL_RCC_OscConfig+0x4ac>)
 8004852:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004854:	4a65      	ldr	r2, [pc, #404]	@ (80049ec <HAL_RCC_OscConfig+0x4ac>)
 8004856:	f043 0301 	orr.w	r3, r3, #1
 800485a:	6713      	str	r3, [r2, #112]	@ 0x70
 800485c:	e01c      	b.n	8004898 <HAL_RCC_OscConfig+0x358>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	2b05      	cmp	r3, #5
 8004864:	d10c      	bne.n	8004880 <HAL_RCC_OscConfig+0x340>
 8004866:	4b61      	ldr	r3, [pc, #388]	@ (80049ec <HAL_RCC_OscConfig+0x4ac>)
 8004868:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800486a:	4a60      	ldr	r2, [pc, #384]	@ (80049ec <HAL_RCC_OscConfig+0x4ac>)
 800486c:	f043 0304 	orr.w	r3, r3, #4
 8004870:	6713      	str	r3, [r2, #112]	@ 0x70
 8004872:	4b5e      	ldr	r3, [pc, #376]	@ (80049ec <HAL_RCC_OscConfig+0x4ac>)
 8004874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004876:	4a5d      	ldr	r2, [pc, #372]	@ (80049ec <HAL_RCC_OscConfig+0x4ac>)
 8004878:	f043 0301 	orr.w	r3, r3, #1
 800487c:	6713      	str	r3, [r2, #112]	@ 0x70
 800487e:	e00b      	b.n	8004898 <HAL_RCC_OscConfig+0x358>
 8004880:	4b5a      	ldr	r3, [pc, #360]	@ (80049ec <HAL_RCC_OscConfig+0x4ac>)
 8004882:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004884:	4a59      	ldr	r2, [pc, #356]	@ (80049ec <HAL_RCC_OscConfig+0x4ac>)
 8004886:	f023 0301 	bic.w	r3, r3, #1
 800488a:	6713      	str	r3, [r2, #112]	@ 0x70
 800488c:	4b57      	ldr	r3, [pc, #348]	@ (80049ec <HAL_RCC_OscConfig+0x4ac>)
 800488e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004890:	4a56      	ldr	r2, [pc, #344]	@ (80049ec <HAL_RCC_OscConfig+0x4ac>)
 8004892:	f023 0304 	bic.w	r3, r3, #4
 8004896:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d015      	beq.n	80048cc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048a0:	f7fe fc34 	bl	800310c <HAL_GetTick>
 80048a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048a6:	e00a      	b.n	80048be <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048a8:	f7fe fc30 	bl	800310c <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d901      	bls.n	80048be <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e0d7      	b.n	8004a6e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048be:	4b4b      	ldr	r3, [pc, #300]	@ (80049ec <HAL_RCC_OscConfig+0x4ac>)
 80048c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d0ee      	beq.n	80048a8 <HAL_RCC_OscConfig+0x368>
 80048ca:	e014      	b.n	80048f6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048cc:	f7fe fc1e 	bl	800310c <HAL_GetTick>
 80048d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048d2:	e00a      	b.n	80048ea <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048d4:	f7fe fc1a 	bl	800310c <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d901      	bls.n	80048ea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e0c1      	b.n	8004a6e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048ea:	4b40      	ldr	r3, [pc, #256]	@ (80049ec <HAL_RCC_OscConfig+0x4ac>)
 80048ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1ee      	bne.n	80048d4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80048f6:	7dfb      	ldrb	r3, [r7, #23]
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d105      	bne.n	8004908 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048fc:	4b3b      	ldr	r3, [pc, #236]	@ (80049ec <HAL_RCC_OscConfig+0x4ac>)
 80048fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004900:	4a3a      	ldr	r2, [pc, #232]	@ (80049ec <HAL_RCC_OscConfig+0x4ac>)
 8004902:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004906:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	699b      	ldr	r3, [r3, #24]
 800490c:	2b00      	cmp	r3, #0
 800490e:	f000 80ad 	beq.w	8004a6c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004912:	4b36      	ldr	r3, [pc, #216]	@ (80049ec <HAL_RCC_OscConfig+0x4ac>)
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f003 030c 	and.w	r3, r3, #12
 800491a:	2b08      	cmp	r3, #8
 800491c:	d060      	beq.n	80049e0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	2b02      	cmp	r3, #2
 8004924:	d145      	bne.n	80049b2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004926:	4b33      	ldr	r3, [pc, #204]	@ (80049f4 <HAL_RCC_OscConfig+0x4b4>)
 8004928:	2200      	movs	r2, #0
 800492a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800492c:	f7fe fbee 	bl	800310c <HAL_GetTick>
 8004930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004932:	e008      	b.n	8004946 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004934:	f7fe fbea 	bl	800310c <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b02      	cmp	r3, #2
 8004940:	d901      	bls.n	8004946 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e093      	b.n	8004a6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004946:	4b29      	ldr	r3, [pc, #164]	@ (80049ec <HAL_RCC_OscConfig+0x4ac>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1f0      	bne.n	8004934 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	69da      	ldr	r2, [r3, #28]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a1b      	ldr	r3, [r3, #32]
 800495a:	431a      	orrs	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004960:	019b      	lsls	r3, r3, #6
 8004962:	431a      	orrs	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004968:	085b      	lsrs	r3, r3, #1
 800496a:	3b01      	subs	r3, #1
 800496c:	041b      	lsls	r3, r3, #16
 800496e:	431a      	orrs	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004974:	061b      	lsls	r3, r3, #24
 8004976:	431a      	orrs	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800497c:	071b      	lsls	r3, r3, #28
 800497e:	491b      	ldr	r1, [pc, #108]	@ (80049ec <HAL_RCC_OscConfig+0x4ac>)
 8004980:	4313      	orrs	r3, r2
 8004982:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004984:	4b1b      	ldr	r3, [pc, #108]	@ (80049f4 <HAL_RCC_OscConfig+0x4b4>)
 8004986:	2201      	movs	r2, #1
 8004988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800498a:	f7fe fbbf 	bl	800310c <HAL_GetTick>
 800498e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004990:	e008      	b.n	80049a4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004992:	f7fe fbbb 	bl	800310c <HAL_GetTick>
 8004996:	4602      	mov	r2, r0
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	2b02      	cmp	r3, #2
 800499e:	d901      	bls.n	80049a4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e064      	b.n	8004a6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049a4:	4b11      	ldr	r3, [pc, #68]	@ (80049ec <HAL_RCC_OscConfig+0x4ac>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d0f0      	beq.n	8004992 <HAL_RCC_OscConfig+0x452>
 80049b0:	e05c      	b.n	8004a6c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049b2:	4b10      	ldr	r3, [pc, #64]	@ (80049f4 <HAL_RCC_OscConfig+0x4b4>)
 80049b4:	2200      	movs	r2, #0
 80049b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b8:	f7fe fba8 	bl	800310c <HAL_GetTick>
 80049bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049be:	e008      	b.n	80049d2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049c0:	f7fe fba4 	bl	800310c <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d901      	bls.n	80049d2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e04d      	b.n	8004a6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049d2:	4b06      	ldr	r3, [pc, #24]	@ (80049ec <HAL_RCC_OscConfig+0x4ac>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1f0      	bne.n	80049c0 <HAL_RCC_OscConfig+0x480>
 80049de:	e045      	b.n	8004a6c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	699b      	ldr	r3, [r3, #24]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d107      	bne.n	80049f8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e040      	b.n	8004a6e <HAL_RCC_OscConfig+0x52e>
 80049ec:	40023800 	.word	0x40023800
 80049f0:	40007000 	.word	0x40007000
 80049f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049f8:	4b1f      	ldr	r3, [pc, #124]	@ (8004a78 <HAL_RCC_OscConfig+0x538>)
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d030      	beq.n	8004a68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d129      	bne.n	8004a68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d122      	bne.n	8004a68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004a28:	4013      	ands	r3, r2
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004a2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d119      	bne.n	8004a68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a3e:	085b      	lsrs	r3, r3, #1
 8004a40:	3b01      	subs	r3, #1
 8004a42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d10f      	bne.n	8004a68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d107      	bne.n	8004a68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a62:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d001      	beq.n	8004a6c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e000      	b.n	8004a6e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3718      	adds	r7, #24
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	40023800 	.word	0x40023800

08004a7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e07b      	b.n	8004b86 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d108      	bne.n	8004aa8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a9e:	d009      	beq.n	8004ab4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	61da      	str	r2, [r3, #28]
 8004aa6:	e005      	b.n	8004ab4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d106      	bne.n	8004ad4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f7fd ffa0 	bl	8002a14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2202      	movs	r2, #2
 8004ad8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004aea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004afc:	431a      	orrs	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b06:	431a      	orrs	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	f003 0302 	and.w	r3, r3, #2
 8004b10:	431a      	orrs	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	695b      	ldr	r3, [r3, #20]
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	431a      	orrs	r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b24:	431a      	orrs	r2, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	69db      	ldr	r3, [r3, #28]
 8004b2a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b2e:	431a      	orrs	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a1b      	ldr	r3, [r3, #32]
 8004b34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b38:	ea42 0103 	orr.w	r1, r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b40:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	0c1b      	lsrs	r3, r3, #16
 8004b52:	f003 0104 	and.w	r1, r3, #4
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b5a:	f003 0210 	and.w	r2, r3, #16
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	430a      	orrs	r2, r1
 8004b64:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	69da      	ldr	r2, [r3, #28]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b74:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3708      	adds	r7, #8
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
	...

08004b90 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d001      	beq.n	8004bae <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8004baa:	2302      	movs	r3, #2
 8004bac:	e097      	b.n	8004cde <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d002      	beq.n	8004bba <HAL_SPI_Transmit_DMA+0x2a>
 8004bb4:	88fb      	ldrh	r3, [r7, #6]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d101      	bne.n	8004bbe <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e08f      	b.n	8004cde <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d101      	bne.n	8004bcc <HAL_SPI_Transmit_DMA+0x3c>
 8004bc8:	2302      	movs	r3, #2
 8004bca:	e088      	b.n	8004cde <HAL_SPI_Transmit_DMA+0x14e>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2203      	movs	r2, #3
 8004bd8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	68ba      	ldr	r2, [r7, #8]
 8004be6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	88fa      	ldrh	r2, [r7, #6]
 8004bec:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	88fa      	ldrh	r2, [r7, #6]
 8004bf2:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2200      	movs	r2, #0
 8004c04:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c1a:	d10f      	bne.n	8004c3c <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c2a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c3a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c40:	4a29      	ldr	r2, [pc, #164]	@ (8004ce8 <HAL_SPI_Transmit_DMA+0x158>)
 8004c42:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c48:	4a28      	ldr	r2, [pc, #160]	@ (8004cec <HAL_SPI_Transmit_DMA+0x15c>)
 8004c4a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c50:	4a27      	ldr	r2, [pc, #156]	@ (8004cf0 <HAL_SPI_Transmit_DMA+0x160>)
 8004c52:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c58:	2200      	movs	r2, #0
 8004c5a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c64:	4619      	mov	r1, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	330c      	adds	r3, #12
 8004c6c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c72:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004c74:	f7fe fbe6 	bl	8003444 <HAL_DMA_Start_IT>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00b      	beq.n	8004c96 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c82:	f043 0210 	orr.w	r2, r3, #16
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e023      	b.n	8004cde <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ca0:	2b40      	cmp	r3, #64	@ 0x40
 8004ca2:	d007      	beq.n	8004cb4 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004cb2:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	685a      	ldr	r2, [r3, #4]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f042 0220 	orr.w	r2, r2, #32
 8004cca:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	685a      	ldr	r2, [r3, #4]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f042 0202 	orr.w	r2, r2, #2
 8004cda:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	08004dd9 	.word	0x08004dd9
 8004cec:	08004d31 	.word	0x08004d31
 8004cf0:	08004df5 	.word	0x08004df5

08004cf4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8004cfc:	bf00      	nop
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004d24:	bf00      	nop
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b086      	sub	sp, #24
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d3c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d3e:	f7fe f9e5 	bl	800310c <HAL_GetTick>
 8004d42:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d52:	d03b      	beq.n	8004dcc <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	685a      	ldr	r2, [r3, #4]
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f022 0220 	bic.w	r2, r2, #32
 8004d62:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	685a      	ldr	r2, [r3, #4]
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f022 0202 	bic.w	r2, r2, #2
 8004d72:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	2164      	movs	r1, #100	@ 0x64
 8004d78:	6978      	ldr	r0, [r7, #20]
 8004d7a:	f000 f8e3 	bl	8004f44 <SPI_EndRxTxTransaction>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d005      	beq.n	8004d90 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d88:	f043 0220 	orr.w	r2, r3, #32
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d10a      	bne.n	8004dae <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d98:	2300      	movs	r3, #0
 8004d9a:	60fb      	str	r3, [r7, #12]
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	60fb      	str	r3, [r7, #12]
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	60fb      	str	r3, [r7, #12]
 8004dac:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	2200      	movs	r2, #0
 8004db2:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d003      	beq.n	8004dcc <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004dc4:	6978      	ldr	r0, [r7, #20]
 8004dc6:	f7ff ffa9 	bl	8004d1c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004dca:	e002      	b.n	8004dd2 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004dcc:	6978      	ldr	r0, [r7, #20]
 8004dce:	f7ff ff91 	bl	8004cf4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004dd2:	3718      	adds	r7, #24
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004de4:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004de6:	68f8      	ldr	r0, [r7, #12]
 8004de8:	f7ff ff8e 	bl	8004d08 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004dec:	bf00      	nop
 8004dee:	3710      	adds	r7, #16
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e00:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	685a      	ldr	r2, [r3, #4]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f022 0203 	bic.w	r2, r2, #3
 8004e10:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e16:	f043 0210 	orr.w	r2, r3, #16
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004e26:	68f8      	ldr	r0, [r7, #12]
 8004e28:	f7ff ff78 	bl	8004d1c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004e2c:	bf00      	nop
 8004e2e:	3710      	adds	r7, #16
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b088      	sub	sp, #32
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	603b      	str	r3, [r7, #0]
 8004e40:	4613      	mov	r3, r2
 8004e42:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e44:	f7fe f962 	bl	800310c <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e4c:	1a9b      	subs	r3, r3, r2
 8004e4e:	683a      	ldr	r2, [r7, #0]
 8004e50:	4413      	add	r3, r2
 8004e52:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e54:	f7fe f95a 	bl	800310c <HAL_GetTick>
 8004e58:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e5a:	4b39      	ldr	r3, [pc, #228]	@ (8004f40 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	015b      	lsls	r3, r3, #5
 8004e60:	0d1b      	lsrs	r3, r3, #20
 8004e62:	69fa      	ldr	r2, [r7, #28]
 8004e64:	fb02 f303 	mul.w	r3, r2, r3
 8004e68:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e6a:	e054      	b.n	8004f16 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e72:	d050      	beq.n	8004f16 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e74:	f7fe f94a 	bl	800310c <HAL_GetTick>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	69fa      	ldr	r2, [r7, #28]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d902      	bls.n	8004e8a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d13d      	bne.n	8004f06 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	685a      	ldr	r2, [r3, #4]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004e98:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ea2:	d111      	bne.n	8004ec8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004eac:	d004      	beq.n	8004eb8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004eb6:	d107      	bne.n	8004ec8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ec6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ecc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ed0:	d10f      	bne.n	8004ef2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ee0:	601a      	str	r2, [r3, #0]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ef0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e017      	b.n	8004f36 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d101      	bne.n	8004f10 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	3b01      	subs	r3, #1
 8004f14:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	689a      	ldr	r2, [r3, #8]
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	4013      	ands	r3, r2
 8004f20:	68ba      	ldr	r2, [r7, #8]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	bf0c      	ite	eq
 8004f26:	2301      	moveq	r3, #1
 8004f28:	2300      	movne	r3, #0
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	79fb      	ldrb	r3, [r7, #7]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d19b      	bne.n	8004e6c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3720      	adds	r7, #32
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	2000000c 	.word	0x2000000c

08004f44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b088      	sub	sp, #32
 8004f48:	af02      	add	r7, sp, #8
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	60b9      	str	r1, [r7, #8]
 8004f4e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	9300      	str	r3, [sp, #0]
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	2201      	movs	r2, #1
 8004f58:	2102      	movs	r1, #2
 8004f5a:	68f8      	ldr	r0, [r7, #12]
 8004f5c:	f7ff ff6a 	bl	8004e34 <SPI_WaitFlagStateUntilTimeout>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d007      	beq.n	8004f76 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f6a:	f043 0220 	orr.w	r2, r3, #32
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e032      	b.n	8004fdc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004f76:	4b1b      	ldr	r3, [pc, #108]	@ (8004fe4 <SPI_EndRxTxTransaction+0xa0>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a1b      	ldr	r2, [pc, #108]	@ (8004fe8 <SPI_EndRxTxTransaction+0xa4>)
 8004f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f80:	0d5b      	lsrs	r3, r3, #21
 8004f82:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004f86:	fb02 f303 	mul.w	r3, r2, r3
 8004f8a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f94:	d112      	bne.n	8004fbc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	9300      	str	r3, [sp, #0]
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	2180      	movs	r1, #128	@ 0x80
 8004fa0:	68f8      	ldr	r0, [r7, #12]
 8004fa2:	f7ff ff47 	bl	8004e34 <SPI_WaitFlagStateUntilTimeout>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d016      	beq.n	8004fda <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fb0:	f043 0220 	orr.w	r2, r3, #32
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e00f      	b.n	8004fdc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00a      	beq.n	8004fd8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fd2:	2b80      	cmp	r3, #128	@ 0x80
 8004fd4:	d0f2      	beq.n	8004fbc <SPI_EndRxTxTransaction+0x78>
 8004fd6:	e000      	b.n	8004fda <SPI_EndRxTxTransaction+0x96>
        break;
 8004fd8:	bf00      	nop
  }

  return HAL_OK;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3718      	adds	r7, #24
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	2000000c 	.word	0x2000000c
 8004fe8:	165e9f81 	.word	0x165e9f81

08004fec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d101      	bne.n	8004ffe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e041      	b.n	8005082 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005004:	b2db      	uxtb	r3, r3
 8005006:	2b00      	cmp	r3, #0
 8005008:	d106      	bne.n	8005018 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f839 	bl	800508a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2202      	movs	r2, #2
 800501c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	3304      	adds	r3, #4
 8005028:	4619      	mov	r1, r3
 800502a:	4610      	mov	r0, r2
 800502c:	f000 f9c0 	bl	80053b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3708      	adds	r7, #8
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}

0800508a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800508a:	b480      	push	{r7}
 800508c:	b083      	sub	sp, #12
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005092:	bf00      	nop
 8005094:	370c      	adds	r7, #12
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
	...

080050a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d001      	beq.n	80050b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e04e      	b.n	8005156 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2202      	movs	r2, #2
 80050bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68da      	ldr	r2, [r3, #12]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f042 0201 	orr.w	r2, r2, #1
 80050ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a23      	ldr	r2, [pc, #140]	@ (8005164 <HAL_TIM_Base_Start_IT+0xc4>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d022      	beq.n	8005120 <HAL_TIM_Base_Start_IT+0x80>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050e2:	d01d      	beq.n	8005120 <HAL_TIM_Base_Start_IT+0x80>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a1f      	ldr	r2, [pc, #124]	@ (8005168 <HAL_TIM_Base_Start_IT+0xc8>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d018      	beq.n	8005120 <HAL_TIM_Base_Start_IT+0x80>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a1e      	ldr	r2, [pc, #120]	@ (800516c <HAL_TIM_Base_Start_IT+0xcc>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d013      	beq.n	8005120 <HAL_TIM_Base_Start_IT+0x80>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a1c      	ldr	r2, [pc, #112]	@ (8005170 <HAL_TIM_Base_Start_IT+0xd0>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d00e      	beq.n	8005120 <HAL_TIM_Base_Start_IT+0x80>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a1b      	ldr	r2, [pc, #108]	@ (8005174 <HAL_TIM_Base_Start_IT+0xd4>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d009      	beq.n	8005120 <HAL_TIM_Base_Start_IT+0x80>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a19      	ldr	r2, [pc, #100]	@ (8005178 <HAL_TIM_Base_Start_IT+0xd8>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d004      	beq.n	8005120 <HAL_TIM_Base_Start_IT+0x80>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a18      	ldr	r2, [pc, #96]	@ (800517c <HAL_TIM_Base_Start_IT+0xdc>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d111      	bne.n	8005144 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f003 0307 	and.w	r3, r3, #7
 800512a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2b06      	cmp	r3, #6
 8005130:	d010      	beq.n	8005154 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f042 0201 	orr.w	r2, r2, #1
 8005140:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005142:	e007      	b.n	8005154 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f042 0201 	orr.w	r2, r2, #1
 8005152:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3714      	adds	r7, #20
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	40010000 	.word	0x40010000
 8005168:	40000400 	.word	0x40000400
 800516c:	40000800 	.word	0x40000800
 8005170:	40000c00 	.word	0x40000c00
 8005174:	40010400 	.word	0x40010400
 8005178:	40014000 	.word	0x40014000
 800517c:	40001800 	.word	0x40001800

08005180 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	f003 0302 	and.w	r3, r3, #2
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d020      	beq.n	80051e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f003 0302 	and.w	r3, r3, #2
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d01b      	beq.n	80051e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f06f 0202 	mvn.w	r2, #2
 80051b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2201      	movs	r2, #1
 80051ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	f003 0303 	and.w	r3, r3, #3
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d003      	beq.n	80051d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 f8d2 	bl	8005374 <HAL_TIM_IC_CaptureCallback>
 80051d0:	e005      	b.n	80051de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 f8c4 	bl	8005360 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 f8d5 	bl	8005388 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	f003 0304 	and.w	r3, r3, #4
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d020      	beq.n	8005230 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f003 0304 	and.w	r3, r3, #4
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d01b      	beq.n	8005230 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f06f 0204 	mvn.w	r2, #4
 8005200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2202      	movs	r2, #2
 8005206:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005212:	2b00      	cmp	r3, #0
 8005214:	d003      	beq.n	800521e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 f8ac 	bl	8005374 <HAL_TIM_IC_CaptureCallback>
 800521c:	e005      	b.n	800522a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 f89e 	bl	8005360 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 f8af 	bl	8005388 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	f003 0308 	and.w	r3, r3, #8
 8005236:	2b00      	cmp	r3, #0
 8005238:	d020      	beq.n	800527c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f003 0308 	and.w	r3, r3, #8
 8005240:	2b00      	cmp	r3, #0
 8005242:	d01b      	beq.n	800527c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f06f 0208 	mvn.w	r2, #8
 800524c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2204      	movs	r2, #4
 8005252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	69db      	ldr	r3, [r3, #28]
 800525a:	f003 0303 	and.w	r3, r3, #3
 800525e:	2b00      	cmp	r3, #0
 8005260:	d003      	beq.n	800526a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 f886 	bl	8005374 <HAL_TIM_IC_CaptureCallback>
 8005268:	e005      	b.n	8005276 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 f878 	bl	8005360 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 f889 	bl	8005388 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	f003 0310 	and.w	r3, r3, #16
 8005282:	2b00      	cmp	r3, #0
 8005284:	d020      	beq.n	80052c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f003 0310 	and.w	r3, r3, #16
 800528c:	2b00      	cmp	r3, #0
 800528e:	d01b      	beq.n	80052c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f06f 0210 	mvn.w	r2, #16
 8005298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2208      	movs	r2, #8
 800529e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	69db      	ldr	r3, [r3, #28]
 80052a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d003      	beq.n	80052b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 f860 	bl	8005374 <HAL_TIM_IC_CaptureCallback>
 80052b4:	e005      	b.n	80052c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 f852 	bl	8005360 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 f863 	bl	8005388 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00c      	beq.n	80052ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f003 0301 	and.w	r3, r3, #1
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d007      	beq.n	80052ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f06f 0201 	mvn.w	r2, #1
 80052e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f7fd fb50 	bl	800298c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00c      	beq.n	8005310 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d007      	beq.n	8005310 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 f906 	bl	800551c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005316:	2b00      	cmp	r3, #0
 8005318:	d00c      	beq.n	8005334 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005320:	2b00      	cmp	r3, #0
 8005322:	d007      	beq.n	8005334 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800532c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 f834 	bl	800539c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	f003 0320 	and.w	r3, r3, #32
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00c      	beq.n	8005358 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f003 0320 	and.w	r3, r3, #32
 8005344:	2b00      	cmp	r3, #0
 8005346:	d007      	beq.n	8005358 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f06f 0220 	mvn.w	r2, #32
 8005350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 f8d8 	bl	8005508 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005358:	bf00      	nop
 800535a:	3710      	adds	r7, #16
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005368:	bf00      	nop
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800537c:	bf00      	nop
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005390:	bf00      	nop
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053a4:	bf00      	nop
 80053a6:	370c      	adds	r7, #12
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a46      	ldr	r2, [pc, #280]	@ (80054dc <TIM_Base_SetConfig+0x12c>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d013      	beq.n	80053f0 <TIM_Base_SetConfig+0x40>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053ce:	d00f      	beq.n	80053f0 <TIM_Base_SetConfig+0x40>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4a43      	ldr	r2, [pc, #268]	@ (80054e0 <TIM_Base_SetConfig+0x130>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d00b      	beq.n	80053f0 <TIM_Base_SetConfig+0x40>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a42      	ldr	r2, [pc, #264]	@ (80054e4 <TIM_Base_SetConfig+0x134>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d007      	beq.n	80053f0 <TIM_Base_SetConfig+0x40>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a41      	ldr	r2, [pc, #260]	@ (80054e8 <TIM_Base_SetConfig+0x138>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d003      	beq.n	80053f0 <TIM_Base_SetConfig+0x40>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a40      	ldr	r2, [pc, #256]	@ (80054ec <TIM_Base_SetConfig+0x13c>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d108      	bne.n	8005402 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	4313      	orrs	r3, r2
 8005400:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a35      	ldr	r2, [pc, #212]	@ (80054dc <TIM_Base_SetConfig+0x12c>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d02b      	beq.n	8005462 <TIM_Base_SetConfig+0xb2>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005410:	d027      	beq.n	8005462 <TIM_Base_SetConfig+0xb2>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a32      	ldr	r2, [pc, #200]	@ (80054e0 <TIM_Base_SetConfig+0x130>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d023      	beq.n	8005462 <TIM_Base_SetConfig+0xb2>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a31      	ldr	r2, [pc, #196]	@ (80054e4 <TIM_Base_SetConfig+0x134>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d01f      	beq.n	8005462 <TIM_Base_SetConfig+0xb2>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a30      	ldr	r2, [pc, #192]	@ (80054e8 <TIM_Base_SetConfig+0x138>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d01b      	beq.n	8005462 <TIM_Base_SetConfig+0xb2>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a2f      	ldr	r2, [pc, #188]	@ (80054ec <TIM_Base_SetConfig+0x13c>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d017      	beq.n	8005462 <TIM_Base_SetConfig+0xb2>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a2e      	ldr	r2, [pc, #184]	@ (80054f0 <TIM_Base_SetConfig+0x140>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d013      	beq.n	8005462 <TIM_Base_SetConfig+0xb2>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a2d      	ldr	r2, [pc, #180]	@ (80054f4 <TIM_Base_SetConfig+0x144>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d00f      	beq.n	8005462 <TIM_Base_SetConfig+0xb2>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a2c      	ldr	r2, [pc, #176]	@ (80054f8 <TIM_Base_SetConfig+0x148>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d00b      	beq.n	8005462 <TIM_Base_SetConfig+0xb2>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a2b      	ldr	r2, [pc, #172]	@ (80054fc <TIM_Base_SetConfig+0x14c>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d007      	beq.n	8005462 <TIM_Base_SetConfig+0xb2>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a2a      	ldr	r2, [pc, #168]	@ (8005500 <TIM_Base_SetConfig+0x150>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d003      	beq.n	8005462 <TIM_Base_SetConfig+0xb2>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a29      	ldr	r2, [pc, #164]	@ (8005504 <TIM_Base_SetConfig+0x154>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d108      	bne.n	8005474 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005468:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	68fa      	ldr	r2, [r7, #12]
 8005470:	4313      	orrs	r3, r2
 8005472:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	695b      	ldr	r3, [r3, #20]
 800547e:	4313      	orrs	r3, r2
 8005480:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	689a      	ldr	r2, [r3, #8]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a10      	ldr	r2, [pc, #64]	@ (80054dc <TIM_Base_SetConfig+0x12c>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d003      	beq.n	80054a8 <TIM_Base_SetConfig+0xf8>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a12      	ldr	r2, [pc, #72]	@ (80054ec <TIM_Base_SetConfig+0x13c>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d103      	bne.n	80054b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	691a      	ldr	r2, [r3, #16]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	f003 0301 	and.w	r3, r3, #1
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d105      	bne.n	80054ce <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	f023 0201 	bic.w	r2, r3, #1
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	611a      	str	r2, [r3, #16]
  }
}
 80054ce:	bf00      	nop
 80054d0:	3714      	adds	r7, #20
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	40010000 	.word	0x40010000
 80054e0:	40000400 	.word	0x40000400
 80054e4:	40000800 	.word	0x40000800
 80054e8:	40000c00 	.word	0x40000c00
 80054ec:	40010400 	.word	0x40010400
 80054f0:	40014000 	.word	0x40014000
 80054f4:	40014400 	.word	0x40014400
 80054f8:	40014800 	.word	0x40014800
 80054fc:	40001800 	.word	0x40001800
 8005500:	40001c00 	.word	0x40001c00
 8005504:	40002000 	.word	0x40002000

08005508 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005510:	bf00      	nop
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005524:	bf00      	nop
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d101      	bne.n	8005542 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e042      	b.n	80055c8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d106      	bne.n	800555c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f7fd fb08 	bl	8002b6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2224      	movs	r2, #36	@ 0x24
 8005560:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68da      	ldr	r2, [r3, #12]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005572:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 fdbf 	bl	80060f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	691a      	ldr	r2, [r3, #16]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005588:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	695a      	ldr	r2, [r3, #20]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005598:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68da      	ldr	r2, [r3, #12]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80055a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2220      	movs	r2, #32
 80055b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2220      	movs	r2, #32
 80055bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80055c6:	2300      	movs	r3, #0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3708      	adds	r7, #8
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b08a      	sub	sp, #40	@ 0x28
 80055d4:	af02      	add	r7, sp, #8
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	603b      	str	r3, [r7, #0]
 80055dc:	4613      	mov	r3, r2
 80055de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80055e0:	2300      	movs	r3, #0
 80055e2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	2b20      	cmp	r3, #32
 80055ee:	d175      	bne.n	80056dc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d002      	beq.n	80055fc <HAL_UART_Transmit+0x2c>
 80055f6:	88fb      	ldrh	r3, [r7, #6]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d101      	bne.n	8005600 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	e06e      	b.n	80056de <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2200      	movs	r2, #0
 8005604:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2221      	movs	r2, #33	@ 0x21
 800560a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800560e:	f7fd fd7d 	bl	800310c <HAL_GetTick>
 8005612:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	88fa      	ldrh	r2, [r7, #6]
 8005618:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	88fa      	ldrh	r2, [r7, #6]
 800561e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005628:	d108      	bne.n	800563c <HAL_UART_Transmit+0x6c>
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d104      	bne.n	800563c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005632:	2300      	movs	r3, #0
 8005634:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	61bb      	str	r3, [r7, #24]
 800563a:	e003      	b.n	8005644 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005640:	2300      	movs	r3, #0
 8005642:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005644:	e02e      	b.n	80056a4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	9300      	str	r3, [sp, #0]
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	2200      	movs	r2, #0
 800564e:	2180      	movs	r1, #128	@ 0x80
 8005650:	68f8      	ldr	r0, [r7, #12]
 8005652:	f000 fb21 	bl	8005c98 <UART_WaitOnFlagUntilTimeout>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d005      	beq.n	8005668 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2220      	movs	r2, #32
 8005660:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005664:	2303      	movs	r3, #3
 8005666:	e03a      	b.n	80056de <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d10b      	bne.n	8005686 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	881b      	ldrh	r3, [r3, #0]
 8005672:	461a      	mov	r2, r3
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800567c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	3302      	adds	r3, #2
 8005682:	61bb      	str	r3, [r7, #24]
 8005684:	e007      	b.n	8005696 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	781a      	ldrb	r2, [r3, #0]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	3301      	adds	r3, #1
 8005694:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800569a:	b29b      	uxth	r3, r3
 800569c:	3b01      	subs	r3, #1
 800569e:	b29a      	uxth	r2, r3
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d1cb      	bne.n	8005646 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	9300      	str	r3, [sp, #0]
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	2200      	movs	r2, #0
 80056b6:	2140      	movs	r1, #64	@ 0x40
 80056b8:	68f8      	ldr	r0, [r7, #12]
 80056ba:	f000 faed 	bl	8005c98 <UART_WaitOnFlagUntilTimeout>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d005      	beq.n	80056d0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2220      	movs	r2, #32
 80056c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	e006      	b.n	80056de <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2220      	movs	r2, #32
 80056d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80056d8:	2300      	movs	r3, #0
 80056da:	e000      	b.n	80056de <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80056dc:	2302      	movs	r3, #2
  }
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3720      	adds	r7, #32
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}

080056e6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056e6:	b580      	push	{r7, lr}
 80056e8:	b084      	sub	sp, #16
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	60f8      	str	r0, [r7, #12]
 80056ee:	60b9      	str	r1, [r7, #8]
 80056f0:	4613      	mov	r3, r2
 80056f2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	2b20      	cmp	r3, #32
 80056fe:	d112      	bne.n	8005726 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d002      	beq.n	800570c <HAL_UART_Receive_IT+0x26>
 8005706:	88fb      	ldrh	r3, [r7, #6]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d101      	bne.n	8005710 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	e00b      	b.n	8005728 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2200      	movs	r2, #0
 8005714:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005716:	88fb      	ldrh	r3, [r7, #6]
 8005718:	461a      	mov	r2, r3
 800571a:	68b9      	ldr	r1, [r7, #8]
 800571c:	68f8      	ldr	r0, [r7, #12]
 800571e:	f000 fb14 	bl	8005d4a <UART_Start_Receive_IT>
 8005722:	4603      	mov	r3, r0
 8005724:	e000      	b.n	8005728 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005726:	2302      	movs	r3, #2
  }
}
 8005728:	4618      	mov	r0, r3
 800572a:	3710      	adds	r7, #16
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b0ba      	sub	sp, #232	@ 0xe8
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	695b      	ldr	r3, [r3, #20]
 8005752:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005756:	2300      	movs	r3, #0
 8005758:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800575c:	2300      	movs	r3, #0
 800575e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005762:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005766:	f003 030f 	and.w	r3, r3, #15
 800576a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800576e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005772:	2b00      	cmp	r3, #0
 8005774:	d10f      	bne.n	8005796 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800577a:	f003 0320 	and.w	r3, r3, #32
 800577e:	2b00      	cmp	r3, #0
 8005780:	d009      	beq.n	8005796 <HAL_UART_IRQHandler+0x66>
 8005782:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005786:	f003 0320 	and.w	r3, r3, #32
 800578a:	2b00      	cmp	r3, #0
 800578c:	d003      	beq.n	8005796 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 fbf4 	bl	8005f7c <UART_Receive_IT>
      return;
 8005794:	e25b      	b.n	8005c4e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005796:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800579a:	2b00      	cmp	r3, #0
 800579c:	f000 80de 	beq.w	800595c <HAL_UART_IRQHandler+0x22c>
 80057a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057a4:	f003 0301 	and.w	r3, r3, #1
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d106      	bne.n	80057ba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80057ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057b0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f000 80d1 	beq.w	800595c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80057ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057be:	f003 0301 	and.w	r3, r3, #1
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d00b      	beq.n	80057de <HAL_UART_IRQHandler+0xae>
 80057c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d005      	beq.n	80057de <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057d6:	f043 0201 	orr.w	r2, r3, #1
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057e2:	f003 0304 	and.w	r3, r3, #4
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d00b      	beq.n	8005802 <HAL_UART_IRQHandler+0xd2>
 80057ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057ee:	f003 0301 	and.w	r3, r3, #1
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d005      	beq.n	8005802 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057fa:	f043 0202 	orr.w	r2, r3, #2
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005806:	f003 0302 	and.w	r3, r3, #2
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00b      	beq.n	8005826 <HAL_UART_IRQHandler+0xf6>
 800580e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005812:	f003 0301 	and.w	r3, r3, #1
 8005816:	2b00      	cmp	r3, #0
 8005818:	d005      	beq.n	8005826 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800581e:	f043 0204 	orr.w	r2, r3, #4
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800582a:	f003 0308 	and.w	r3, r3, #8
 800582e:	2b00      	cmp	r3, #0
 8005830:	d011      	beq.n	8005856 <HAL_UART_IRQHandler+0x126>
 8005832:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005836:	f003 0320 	and.w	r3, r3, #32
 800583a:	2b00      	cmp	r3, #0
 800583c:	d105      	bne.n	800584a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800583e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005842:	f003 0301 	and.w	r3, r3, #1
 8005846:	2b00      	cmp	r3, #0
 8005848:	d005      	beq.n	8005856 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800584e:	f043 0208 	orr.w	r2, r3, #8
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800585a:	2b00      	cmp	r3, #0
 800585c:	f000 81f2 	beq.w	8005c44 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005860:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005864:	f003 0320 	and.w	r3, r3, #32
 8005868:	2b00      	cmp	r3, #0
 800586a:	d008      	beq.n	800587e <HAL_UART_IRQHandler+0x14e>
 800586c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005870:	f003 0320 	and.w	r3, r3, #32
 8005874:	2b00      	cmp	r3, #0
 8005876:	d002      	beq.n	800587e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f000 fb7f 	bl	8005f7c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005888:	2b40      	cmp	r3, #64	@ 0x40
 800588a:	bf0c      	ite	eq
 800588c:	2301      	moveq	r3, #1
 800588e:	2300      	movne	r3, #0
 8005890:	b2db      	uxtb	r3, r3
 8005892:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800589a:	f003 0308 	and.w	r3, r3, #8
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d103      	bne.n	80058aa <HAL_UART_IRQHandler+0x17a>
 80058a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d04f      	beq.n	800594a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 fa87 	bl	8005dbe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	695b      	ldr	r3, [r3, #20]
 80058b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058ba:	2b40      	cmp	r3, #64	@ 0x40
 80058bc:	d141      	bne.n	8005942 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	3314      	adds	r3, #20
 80058c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80058cc:	e853 3f00 	ldrex	r3, [r3]
 80058d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80058d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80058d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	3314      	adds	r3, #20
 80058e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80058ea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80058ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80058f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80058fa:	e841 2300 	strex	r3, r2, [r1]
 80058fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005902:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1d9      	bne.n	80058be <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800590e:	2b00      	cmp	r3, #0
 8005910:	d013      	beq.n	800593a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005916:	4a7e      	ldr	r2, [pc, #504]	@ (8005b10 <HAL_UART_IRQHandler+0x3e0>)
 8005918:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800591e:	4618      	mov	r0, r3
 8005920:	f7fd fe58 	bl	80035d4 <HAL_DMA_Abort_IT>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d016      	beq.n	8005958 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800592e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005934:	4610      	mov	r0, r2
 8005936:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005938:	e00e      	b.n	8005958 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f7fc ff32 	bl	80027a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005940:	e00a      	b.n	8005958 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f7fc ff2e 	bl	80027a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005948:	e006      	b.n	8005958 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f7fc ff2a 	bl	80027a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005956:	e175      	b.n	8005c44 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005958:	bf00      	nop
    return;
 800595a:	e173      	b.n	8005c44 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005960:	2b01      	cmp	r3, #1
 8005962:	f040 814f 	bne.w	8005c04 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800596a:	f003 0310 	and.w	r3, r3, #16
 800596e:	2b00      	cmp	r3, #0
 8005970:	f000 8148 	beq.w	8005c04 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005978:	f003 0310 	and.w	r3, r3, #16
 800597c:	2b00      	cmp	r3, #0
 800597e:	f000 8141 	beq.w	8005c04 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005982:	2300      	movs	r3, #0
 8005984:	60bb      	str	r3, [r7, #8]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	60bb      	str	r3, [r7, #8]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	60bb      	str	r3, [r7, #8]
 8005996:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	695b      	ldr	r3, [r3, #20]
 800599e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059a2:	2b40      	cmp	r3, #64	@ 0x40
 80059a4:	f040 80b6 	bne.w	8005b14 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80059b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	f000 8145 	beq.w	8005c48 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80059c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80059c6:	429a      	cmp	r2, r3
 80059c8:	f080 813e 	bcs.w	8005c48 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80059d2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059d8:	69db      	ldr	r3, [r3, #28]
 80059da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059de:	f000 8088 	beq.w	8005af2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	330c      	adds	r3, #12
 80059e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80059f0:	e853 3f00 	ldrex	r3, [r3]
 80059f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80059f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80059fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a00:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	330c      	adds	r3, #12
 8005a0a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005a0e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005a12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a16:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005a1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005a1e:	e841 2300 	strex	r3, r2, [r1]
 8005a22:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005a26:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d1d9      	bne.n	80059e2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	3314      	adds	r3, #20
 8005a34:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a36:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a38:	e853 3f00 	ldrex	r3, [r3]
 8005a3c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005a3e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a40:	f023 0301 	bic.w	r3, r3, #1
 8005a44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	3314      	adds	r3, #20
 8005a4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005a52:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005a56:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a58:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005a5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005a5e:	e841 2300 	strex	r3, r2, [r1]
 8005a62:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005a64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d1e1      	bne.n	8005a2e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	3314      	adds	r3, #20
 8005a70:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a72:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a74:	e853 3f00 	ldrex	r3, [r3]
 8005a78:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005a7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a80:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	3314      	adds	r3, #20
 8005a8a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005a8e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005a90:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a92:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005a94:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005a96:	e841 2300 	strex	r3, r2, [r1]
 8005a9a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005a9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d1e3      	bne.n	8005a6a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2220      	movs	r2, #32
 8005aa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	330c      	adds	r3, #12
 8005ab6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005aba:	e853 3f00 	ldrex	r3, [r3]
 8005abe:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005ac0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ac2:	f023 0310 	bic.w	r3, r3, #16
 8005ac6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	330c      	adds	r3, #12
 8005ad0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005ad4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005ad6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005ada:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005adc:	e841 2300 	strex	r3, r2, [r1]
 8005ae0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005ae2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d1e3      	bne.n	8005ab0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005aec:	4618      	mov	r0, r3
 8005aee:	f7fd fd01 	bl	80034f4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2202      	movs	r2, #2
 8005af6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	4619      	mov	r1, r3
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 f8ad 	bl	8005c68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b0e:	e09b      	b.n	8005c48 <HAL_UART_IRQHandler+0x518>
 8005b10:	08005e85 	.word	0x08005e85
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	f000 808e 	beq.w	8005c4c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005b30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	f000 8089 	beq.w	8005c4c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	330c      	adds	r3, #12
 8005b40:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b44:	e853 3f00 	ldrex	r3, [r3]
 8005b48:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b50:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	330c      	adds	r3, #12
 8005b5a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005b5e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005b60:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b62:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b64:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b66:	e841 2300 	strex	r3, r2, [r1]
 8005b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d1e3      	bne.n	8005b3a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	3314      	adds	r3, #20
 8005b78:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b7c:	e853 3f00 	ldrex	r3, [r3]
 8005b80:	623b      	str	r3, [r7, #32]
   return(result);
 8005b82:	6a3b      	ldr	r3, [r7, #32]
 8005b84:	f023 0301 	bic.w	r3, r3, #1
 8005b88:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	3314      	adds	r3, #20
 8005b92:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005b96:	633a      	str	r2, [r7, #48]	@ 0x30
 8005b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b9e:	e841 2300 	strex	r3, r2, [r1]
 8005ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d1e3      	bne.n	8005b72 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2220      	movs	r2, #32
 8005bae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	330c      	adds	r3, #12
 8005bbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	e853 3f00 	ldrex	r3, [r3]
 8005bc6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f023 0310 	bic.w	r3, r3, #16
 8005bce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	330c      	adds	r3, #12
 8005bd8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005bdc:	61fa      	str	r2, [r7, #28]
 8005bde:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be0:	69b9      	ldr	r1, [r7, #24]
 8005be2:	69fa      	ldr	r2, [r7, #28]
 8005be4:	e841 2300 	strex	r3, r2, [r1]
 8005be8:	617b      	str	r3, [r7, #20]
   return(result);
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d1e3      	bne.n	8005bb8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2202      	movs	r2, #2
 8005bf4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005bf6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f000 f833 	bl	8005c68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c02:	e023      	b.n	8005c4c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005c04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d009      	beq.n	8005c24 <HAL_UART_IRQHandler+0x4f4>
 8005c10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d003      	beq.n	8005c24 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 f945 	bl	8005eac <UART_Transmit_IT>
    return;
 8005c22:	e014      	b.n	8005c4e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005c24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d00e      	beq.n	8005c4e <HAL_UART_IRQHandler+0x51e>
 8005c30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d008      	beq.n	8005c4e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 f985 	bl	8005f4c <UART_EndTransmit_IT>
    return;
 8005c42:	e004      	b.n	8005c4e <HAL_UART_IRQHandler+0x51e>
    return;
 8005c44:	bf00      	nop
 8005c46:	e002      	b.n	8005c4e <HAL_UART_IRQHandler+0x51e>
      return;
 8005c48:	bf00      	nop
 8005c4a:	e000      	b.n	8005c4e <HAL_UART_IRQHandler+0x51e>
      return;
 8005c4c:	bf00      	nop
  }
}
 8005c4e:	37e8      	adds	r7, #232	@ 0xe8
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005c5c:	bf00      	nop
 8005c5e:	370c      	adds	r7, #12
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	460b      	mov	r3, r1
 8005c72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c74:	bf00      	nop
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b086      	sub	sp, #24
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	603b      	str	r3, [r7, #0]
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ca8:	e03b      	b.n	8005d22 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005caa:	6a3b      	ldr	r3, [r7, #32]
 8005cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb0:	d037      	beq.n	8005d22 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cb2:	f7fd fa2b 	bl	800310c <HAL_GetTick>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	6a3a      	ldr	r2, [r7, #32]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d302      	bcc.n	8005cc8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005cc2:	6a3b      	ldr	r3, [r7, #32]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d101      	bne.n	8005ccc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	e03a      	b.n	8005d42 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	f003 0304 	and.w	r3, r3, #4
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d023      	beq.n	8005d22 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	2b80      	cmp	r3, #128	@ 0x80
 8005cde:	d020      	beq.n	8005d22 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	2b40      	cmp	r3, #64	@ 0x40
 8005ce4:	d01d      	beq.n	8005d22 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 0308 	and.w	r3, r3, #8
 8005cf0:	2b08      	cmp	r3, #8
 8005cf2:	d116      	bne.n	8005d22 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	617b      	str	r3, [r7, #20]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	617b      	str	r3, [r7, #20]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	617b      	str	r3, [r7, #20]
 8005d08:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d0a:	68f8      	ldr	r0, [r7, #12]
 8005d0c:	f000 f857 	bl	8005dbe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2208      	movs	r2, #8
 8005d14:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e00f      	b.n	8005d42 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	68ba      	ldr	r2, [r7, #8]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	bf0c      	ite	eq
 8005d32:	2301      	moveq	r3, #1
 8005d34:	2300      	movne	r3, #0
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	461a      	mov	r2, r3
 8005d3a:	79fb      	ldrb	r3, [r7, #7]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d0b4      	beq.n	8005caa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d40:	2300      	movs	r3, #0
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3718      	adds	r7, #24
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}

08005d4a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d4a:	b480      	push	{r7}
 8005d4c:	b085      	sub	sp, #20
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	60f8      	str	r0, [r7, #12]
 8005d52:	60b9      	str	r1, [r7, #8]
 8005d54:	4613      	mov	r3, r2
 8005d56:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	68ba      	ldr	r2, [r7, #8]
 8005d5c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	88fa      	ldrh	r2, [r7, #6]
 8005d62:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	88fa      	ldrh	r2, [r7, #6]
 8005d68:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2222      	movs	r2, #34	@ 0x22
 8005d74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d007      	beq.n	8005d90 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	68da      	ldr	r2, [r3, #12]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d8e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	695a      	ldr	r2, [r3, #20]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f042 0201 	orr.w	r2, r2, #1
 8005d9e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68da      	ldr	r2, [r3, #12]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f042 0220 	orr.w	r2, r2, #32
 8005dae:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3714      	adds	r7, #20
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr

08005dbe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005dbe:	b480      	push	{r7}
 8005dc0:	b095      	sub	sp, #84	@ 0x54
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	330c      	adds	r3, #12
 8005dcc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dd0:	e853 3f00 	ldrex	r3, [r3]
 8005dd4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dd8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ddc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	330c      	adds	r3, #12
 8005de4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005de6:	643a      	str	r2, [r7, #64]	@ 0x40
 8005de8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005dec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005dee:	e841 2300 	strex	r3, r2, [r1]
 8005df2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d1e5      	bne.n	8005dc6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	3314      	adds	r3, #20
 8005e00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e02:	6a3b      	ldr	r3, [r7, #32]
 8005e04:	e853 3f00 	ldrex	r3, [r3]
 8005e08:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	f023 0301 	bic.w	r3, r3, #1
 8005e10:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	3314      	adds	r3, #20
 8005e18:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e1e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e22:	e841 2300 	strex	r3, r2, [r1]
 8005e26:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1e5      	bne.n	8005dfa <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d119      	bne.n	8005e6a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	330c      	adds	r3, #12
 8005e3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	e853 3f00 	ldrex	r3, [r3]
 8005e44:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	f023 0310 	bic.w	r3, r3, #16
 8005e4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	330c      	adds	r3, #12
 8005e54:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e56:	61ba      	str	r2, [r7, #24]
 8005e58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e5a:	6979      	ldr	r1, [r7, #20]
 8005e5c:	69ba      	ldr	r2, [r7, #24]
 8005e5e:	e841 2300 	strex	r3, r2, [r1]
 8005e62:	613b      	str	r3, [r7, #16]
   return(result);
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d1e5      	bne.n	8005e36 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2220      	movs	r2, #32
 8005e6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005e78:	bf00      	nop
 8005e7a:	3754      	adds	r7, #84	@ 0x54
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b084      	sub	sp, #16
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e90:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2200      	movs	r2, #0
 8005e96:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	f7fc fc80 	bl	80027a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ea4:	bf00      	nop
 8005ea6:	3710      	adds	r7, #16
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b085      	sub	sp, #20
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	2b21      	cmp	r3, #33	@ 0x21
 8005ebe:	d13e      	bne.n	8005f3e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ec8:	d114      	bne.n	8005ef4 <UART_Transmit_IT+0x48>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d110      	bne.n	8005ef4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a1b      	ldr	r3, [r3, #32]
 8005ed6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	881b      	ldrh	r3, [r3, #0]
 8005edc:	461a      	mov	r2, r3
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ee6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6a1b      	ldr	r3, [r3, #32]
 8005eec:	1c9a      	adds	r2, r3, #2
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	621a      	str	r2, [r3, #32]
 8005ef2:	e008      	b.n	8005f06 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6a1b      	ldr	r3, [r3, #32]
 8005ef8:	1c59      	adds	r1, r3, #1
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	6211      	str	r1, [r2, #32]
 8005efe:	781a      	ldrb	r2, [r3, #0]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	3b01      	subs	r3, #1
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	4619      	mov	r1, r3
 8005f14:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d10f      	bne.n	8005f3a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68da      	ldr	r2, [r3, #12]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005f28:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68da      	ldr	r2, [r3, #12]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f38:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	e000      	b.n	8005f40 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005f3e:	2302      	movs	r3, #2
  }
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3714      	adds	r7, #20
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b082      	sub	sp, #8
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	68da      	ldr	r2, [r3, #12]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f62:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2220      	movs	r2, #32
 8005f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f7ff fe71 	bl	8005c54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005f72:	2300      	movs	r3, #0
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3708      	adds	r7, #8
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b08c      	sub	sp, #48	@ 0x30
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	2b22      	cmp	r3, #34	@ 0x22
 8005f8e:	f040 80ae 	bne.w	80060ee <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f9a:	d117      	bne.n	8005fcc <UART_Receive_IT+0x50>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	691b      	ldr	r3, [r3, #16]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d113      	bne.n	8005fcc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fac:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fbe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fc4:	1c9a      	adds	r2, r3, #2
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	629a      	str	r2, [r3, #40]	@ 0x28
 8005fca:	e026      	b.n	800601a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fde:	d007      	beq.n	8005ff0 <UART_Receive_IT+0x74>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d10a      	bne.n	8005ffe <UART_Receive_IT+0x82>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d106      	bne.n	8005ffe <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	b2da      	uxtb	r2, r3
 8005ff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ffa:	701a      	strb	r2, [r3, #0]
 8005ffc:	e008      	b.n	8006010 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	b2db      	uxtb	r3, r3
 8006006:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800600a:	b2da      	uxtb	r2, r3
 800600c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800600e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006014:	1c5a      	adds	r2, r3, #1
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800601e:	b29b      	uxth	r3, r3
 8006020:	3b01      	subs	r3, #1
 8006022:	b29b      	uxth	r3, r3
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	4619      	mov	r1, r3
 8006028:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800602a:	2b00      	cmp	r3, #0
 800602c:	d15d      	bne.n	80060ea <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	68da      	ldr	r2, [r3, #12]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f022 0220 	bic.w	r2, r2, #32
 800603c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	68da      	ldr	r2, [r3, #12]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800604c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	695a      	ldr	r2, [r3, #20]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f022 0201 	bic.w	r2, r2, #1
 800605c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2220      	movs	r2, #32
 8006062:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006070:	2b01      	cmp	r3, #1
 8006072:	d135      	bne.n	80060e0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	330c      	adds	r3, #12
 8006080:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	e853 3f00 	ldrex	r3, [r3]
 8006088:	613b      	str	r3, [r7, #16]
   return(result);
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	f023 0310 	bic.w	r3, r3, #16
 8006090:	627b      	str	r3, [r7, #36]	@ 0x24
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	330c      	adds	r3, #12
 8006098:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800609a:	623a      	str	r2, [r7, #32]
 800609c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800609e:	69f9      	ldr	r1, [r7, #28]
 80060a0:	6a3a      	ldr	r2, [r7, #32]
 80060a2:	e841 2300 	strex	r3, r2, [r1]
 80060a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d1e5      	bne.n	800607a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 0310 	and.w	r3, r3, #16
 80060b8:	2b10      	cmp	r3, #16
 80060ba:	d10a      	bne.n	80060d2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060bc:	2300      	movs	r3, #0
 80060be:	60fb      	str	r3, [r7, #12]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	60fb      	str	r3, [r7, #12]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	60fb      	str	r3, [r7, #12]
 80060d0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80060d6:	4619      	mov	r1, r3
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f7ff fdc5 	bl	8005c68 <HAL_UARTEx_RxEventCallback>
 80060de:	e002      	b.n	80060e6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f7fc fb35 	bl	8002750 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80060e6:	2300      	movs	r3, #0
 80060e8:	e002      	b.n	80060f0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80060ea:	2300      	movs	r3, #0
 80060ec:	e000      	b.n	80060f0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80060ee:	2302      	movs	r3, #2
  }
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3730      	adds	r7, #48	@ 0x30
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060fc:	b0c0      	sub	sp, #256	@ 0x100
 80060fe:	af00      	add	r7, sp, #0
 8006100:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	691b      	ldr	r3, [r3, #16]
 800610c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006114:	68d9      	ldr	r1, [r3, #12]
 8006116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	ea40 0301 	orr.w	r3, r0, r1
 8006120:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006126:	689a      	ldr	r2, [r3, #8]
 8006128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	431a      	orrs	r2, r3
 8006130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006134:	695b      	ldr	r3, [r3, #20]
 8006136:	431a      	orrs	r2, r3
 8006138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800613c:	69db      	ldr	r3, [r3, #28]
 800613e:	4313      	orrs	r3, r2
 8006140:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006150:	f021 010c 	bic.w	r1, r1, #12
 8006154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800615e:	430b      	orrs	r3, r1
 8006160:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	695b      	ldr	r3, [r3, #20]
 800616a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800616e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006172:	6999      	ldr	r1, [r3, #24]
 8006174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	ea40 0301 	orr.w	r3, r0, r1
 800617e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	4b8f      	ldr	r3, [pc, #572]	@ (80063c4 <UART_SetConfig+0x2cc>)
 8006188:	429a      	cmp	r2, r3
 800618a:	d005      	beq.n	8006198 <UART_SetConfig+0xa0>
 800618c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	4b8d      	ldr	r3, [pc, #564]	@ (80063c8 <UART_SetConfig+0x2d0>)
 8006194:	429a      	cmp	r2, r3
 8006196:	d104      	bne.n	80061a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006198:	f7fd ff5c 	bl	8004054 <HAL_RCC_GetPCLK2Freq>
 800619c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80061a0:	e003      	b.n	80061aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80061a2:	f7fd ff43 	bl	800402c <HAL_RCC_GetPCLK1Freq>
 80061a6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061ae:	69db      	ldr	r3, [r3, #28]
 80061b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061b4:	f040 810c 	bne.w	80063d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80061b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061bc:	2200      	movs	r2, #0
 80061be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80061c2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80061c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80061ca:	4622      	mov	r2, r4
 80061cc:	462b      	mov	r3, r5
 80061ce:	1891      	adds	r1, r2, r2
 80061d0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80061d2:	415b      	adcs	r3, r3
 80061d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80061d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80061da:	4621      	mov	r1, r4
 80061dc:	eb12 0801 	adds.w	r8, r2, r1
 80061e0:	4629      	mov	r1, r5
 80061e2:	eb43 0901 	adc.w	r9, r3, r1
 80061e6:	f04f 0200 	mov.w	r2, #0
 80061ea:	f04f 0300 	mov.w	r3, #0
 80061ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80061f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80061f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80061fa:	4690      	mov	r8, r2
 80061fc:	4699      	mov	r9, r3
 80061fe:	4623      	mov	r3, r4
 8006200:	eb18 0303 	adds.w	r3, r8, r3
 8006204:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006208:	462b      	mov	r3, r5
 800620a:	eb49 0303 	adc.w	r3, r9, r3
 800620e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800621e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006222:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006226:	460b      	mov	r3, r1
 8006228:	18db      	adds	r3, r3, r3
 800622a:	653b      	str	r3, [r7, #80]	@ 0x50
 800622c:	4613      	mov	r3, r2
 800622e:	eb42 0303 	adc.w	r3, r2, r3
 8006232:	657b      	str	r3, [r7, #84]	@ 0x54
 8006234:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006238:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800623c:	f7fa fd3e 	bl	8000cbc <__aeabi_uldivmod>
 8006240:	4602      	mov	r2, r0
 8006242:	460b      	mov	r3, r1
 8006244:	4b61      	ldr	r3, [pc, #388]	@ (80063cc <UART_SetConfig+0x2d4>)
 8006246:	fba3 2302 	umull	r2, r3, r3, r2
 800624a:	095b      	lsrs	r3, r3, #5
 800624c:	011c      	lsls	r4, r3, #4
 800624e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006252:	2200      	movs	r2, #0
 8006254:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006258:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800625c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006260:	4642      	mov	r2, r8
 8006262:	464b      	mov	r3, r9
 8006264:	1891      	adds	r1, r2, r2
 8006266:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006268:	415b      	adcs	r3, r3
 800626a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800626c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006270:	4641      	mov	r1, r8
 8006272:	eb12 0a01 	adds.w	sl, r2, r1
 8006276:	4649      	mov	r1, r9
 8006278:	eb43 0b01 	adc.w	fp, r3, r1
 800627c:	f04f 0200 	mov.w	r2, #0
 8006280:	f04f 0300 	mov.w	r3, #0
 8006284:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006288:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800628c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006290:	4692      	mov	sl, r2
 8006292:	469b      	mov	fp, r3
 8006294:	4643      	mov	r3, r8
 8006296:	eb1a 0303 	adds.w	r3, sl, r3
 800629a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800629e:	464b      	mov	r3, r9
 80062a0:	eb4b 0303 	adc.w	r3, fp, r3
 80062a4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80062a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80062b4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80062b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80062bc:	460b      	mov	r3, r1
 80062be:	18db      	adds	r3, r3, r3
 80062c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80062c2:	4613      	mov	r3, r2
 80062c4:	eb42 0303 	adc.w	r3, r2, r3
 80062c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80062ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80062ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80062d2:	f7fa fcf3 	bl	8000cbc <__aeabi_uldivmod>
 80062d6:	4602      	mov	r2, r0
 80062d8:	460b      	mov	r3, r1
 80062da:	4611      	mov	r1, r2
 80062dc:	4b3b      	ldr	r3, [pc, #236]	@ (80063cc <UART_SetConfig+0x2d4>)
 80062de:	fba3 2301 	umull	r2, r3, r3, r1
 80062e2:	095b      	lsrs	r3, r3, #5
 80062e4:	2264      	movs	r2, #100	@ 0x64
 80062e6:	fb02 f303 	mul.w	r3, r2, r3
 80062ea:	1acb      	subs	r3, r1, r3
 80062ec:	00db      	lsls	r3, r3, #3
 80062ee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80062f2:	4b36      	ldr	r3, [pc, #216]	@ (80063cc <UART_SetConfig+0x2d4>)
 80062f4:	fba3 2302 	umull	r2, r3, r3, r2
 80062f8:	095b      	lsrs	r3, r3, #5
 80062fa:	005b      	lsls	r3, r3, #1
 80062fc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006300:	441c      	add	r4, r3
 8006302:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006306:	2200      	movs	r2, #0
 8006308:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800630c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006310:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006314:	4642      	mov	r2, r8
 8006316:	464b      	mov	r3, r9
 8006318:	1891      	adds	r1, r2, r2
 800631a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800631c:	415b      	adcs	r3, r3
 800631e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006320:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006324:	4641      	mov	r1, r8
 8006326:	1851      	adds	r1, r2, r1
 8006328:	6339      	str	r1, [r7, #48]	@ 0x30
 800632a:	4649      	mov	r1, r9
 800632c:	414b      	adcs	r3, r1
 800632e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006330:	f04f 0200 	mov.w	r2, #0
 8006334:	f04f 0300 	mov.w	r3, #0
 8006338:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800633c:	4659      	mov	r1, fp
 800633e:	00cb      	lsls	r3, r1, #3
 8006340:	4651      	mov	r1, sl
 8006342:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006346:	4651      	mov	r1, sl
 8006348:	00ca      	lsls	r2, r1, #3
 800634a:	4610      	mov	r0, r2
 800634c:	4619      	mov	r1, r3
 800634e:	4603      	mov	r3, r0
 8006350:	4642      	mov	r2, r8
 8006352:	189b      	adds	r3, r3, r2
 8006354:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006358:	464b      	mov	r3, r9
 800635a:	460a      	mov	r2, r1
 800635c:	eb42 0303 	adc.w	r3, r2, r3
 8006360:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006370:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006374:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006378:	460b      	mov	r3, r1
 800637a:	18db      	adds	r3, r3, r3
 800637c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800637e:	4613      	mov	r3, r2
 8006380:	eb42 0303 	adc.w	r3, r2, r3
 8006384:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006386:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800638a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800638e:	f7fa fc95 	bl	8000cbc <__aeabi_uldivmod>
 8006392:	4602      	mov	r2, r0
 8006394:	460b      	mov	r3, r1
 8006396:	4b0d      	ldr	r3, [pc, #52]	@ (80063cc <UART_SetConfig+0x2d4>)
 8006398:	fba3 1302 	umull	r1, r3, r3, r2
 800639c:	095b      	lsrs	r3, r3, #5
 800639e:	2164      	movs	r1, #100	@ 0x64
 80063a0:	fb01 f303 	mul.w	r3, r1, r3
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	00db      	lsls	r3, r3, #3
 80063a8:	3332      	adds	r3, #50	@ 0x32
 80063aa:	4a08      	ldr	r2, [pc, #32]	@ (80063cc <UART_SetConfig+0x2d4>)
 80063ac:	fba2 2303 	umull	r2, r3, r2, r3
 80063b0:	095b      	lsrs	r3, r3, #5
 80063b2:	f003 0207 	and.w	r2, r3, #7
 80063b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4422      	add	r2, r4
 80063be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80063c0:	e106      	b.n	80065d0 <UART_SetConfig+0x4d8>
 80063c2:	bf00      	nop
 80063c4:	40011000 	.word	0x40011000
 80063c8:	40011400 	.word	0x40011400
 80063cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80063d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063d4:	2200      	movs	r2, #0
 80063d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80063da:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80063de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80063e2:	4642      	mov	r2, r8
 80063e4:	464b      	mov	r3, r9
 80063e6:	1891      	adds	r1, r2, r2
 80063e8:	6239      	str	r1, [r7, #32]
 80063ea:	415b      	adcs	r3, r3
 80063ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80063ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80063f2:	4641      	mov	r1, r8
 80063f4:	1854      	adds	r4, r2, r1
 80063f6:	4649      	mov	r1, r9
 80063f8:	eb43 0501 	adc.w	r5, r3, r1
 80063fc:	f04f 0200 	mov.w	r2, #0
 8006400:	f04f 0300 	mov.w	r3, #0
 8006404:	00eb      	lsls	r3, r5, #3
 8006406:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800640a:	00e2      	lsls	r2, r4, #3
 800640c:	4614      	mov	r4, r2
 800640e:	461d      	mov	r5, r3
 8006410:	4643      	mov	r3, r8
 8006412:	18e3      	adds	r3, r4, r3
 8006414:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006418:	464b      	mov	r3, r9
 800641a:	eb45 0303 	adc.w	r3, r5, r3
 800641e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800642e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006432:	f04f 0200 	mov.w	r2, #0
 8006436:	f04f 0300 	mov.w	r3, #0
 800643a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800643e:	4629      	mov	r1, r5
 8006440:	008b      	lsls	r3, r1, #2
 8006442:	4621      	mov	r1, r4
 8006444:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006448:	4621      	mov	r1, r4
 800644a:	008a      	lsls	r2, r1, #2
 800644c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006450:	f7fa fc34 	bl	8000cbc <__aeabi_uldivmod>
 8006454:	4602      	mov	r2, r0
 8006456:	460b      	mov	r3, r1
 8006458:	4b60      	ldr	r3, [pc, #384]	@ (80065dc <UART_SetConfig+0x4e4>)
 800645a:	fba3 2302 	umull	r2, r3, r3, r2
 800645e:	095b      	lsrs	r3, r3, #5
 8006460:	011c      	lsls	r4, r3, #4
 8006462:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006466:	2200      	movs	r2, #0
 8006468:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800646c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006470:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006474:	4642      	mov	r2, r8
 8006476:	464b      	mov	r3, r9
 8006478:	1891      	adds	r1, r2, r2
 800647a:	61b9      	str	r1, [r7, #24]
 800647c:	415b      	adcs	r3, r3
 800647e:	61fb      	str	r3, [r7, #28]
 8006480:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006484:	4641      	mov	r1, r8
 8006486:	1851      	adds	r1, r2, r1
 8006488:	6139      	str	r1, [r7, #16]
 800648a:	4649      	mov	r1, r9
 800648c:	414b      	adcs	r3, r1
 800648e:	617b      	str	r3, [r7, #20]
 8006490:	f04f 0200 	mov.w	r2, #0
 8006494:	f04f 0300 	mov.w	r3, #0
 8006498:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800649c:	4659      	mov	r1, fp
 800649e:	00cb      	lsls	r3, r1, #3
 80064a0:	4651      	mov	r1, sl
 80064a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064a6:	4651      	mov	r1, sl
 80064a8:	00ca      	lsls	r2, r1, #3
 80064aa:	4610      	mov	r0, r2
 80064ac:	4619      	mov	r1, r3
 80064ae:	4603      	mov	r3, r0
 80064b0:	4642      	mov	r2, r8
 80064b2:	189b      	adds	r3, r3, r2
 80064b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80064b8:	464b      	mov	r3, r9
 80064ba:	460a      	mov	r2, r1
 80064bc:	eb42 0303 	adc.w	r3, r2, r3
 80064c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80064c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80064ce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80064d0:	f04f 0200 	mov.w	r2, #0
 80064d4:	f04f 0300 	mov.w	r3, #0
 80064d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80064dc:	4649      	mov	r1, r9
 80064de:	008b      	lsls	r3, r1, #2
 80064e0:	4641      	mov	r1, r8
 80064e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064e6:	4641      	mov	r1, r8
 80064e8:	008a      	lsls	r2, r1, #2
 80064ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80064ee:	f7fa fbe5 	bl	8000cbc <__aeabi_uldivmod>
 80064f2:	4602      	mov	r2, r0
 80064f4:	460b      	mov	r3, r1
 80064f6:	4611      	mov	r1, r2
 80064f8:	4b38      	ldr	r3, [pc, #224]	@ (80065dc <UART_SetConfig+0x4e4>)
 80064fa:	fba3 2301 	umull	r2, r3, r3, r1
 80064fe:	095b      	lsrs	r3, r3, #5
 8006500:	2264      	movs	r2, #100	@ 0x64
 8006502:	fb02 f303 	mul.w	r3, r2, r3
 8006506:	1acb      	subs	r3, r1, r3
 8006508:	011b      	lsls	r3, r3, #4
 800650a:	3332      	adds	r3, #50	@ 0x32
 800650c:	4a33      	ldr	r2, [pc, #204]	@ (80065dc <UART_SetConfig+0x4e4>)
 800650e:	fba2 2303 	umull	r2, r3, r2, r3
 8006512:	095b      	lsrs	r3, r3, #5
 8006514:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006518:	441c      	add	r4, r3
 800651a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800651e:	2200      	movs	r2, #0
 8006520:	673b      	str	r3, [r7, #112]	@ 0x70
 8006522:	677a      	str	r2, [r7, #116]	@ 0x74
 8006524:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006528:	4642      	mov	r2, r8
 800652a:	464b      	mov	r3, r9
 800652c:	1891      	adds	r1, r2, r2
 800652e:	60b9      	str	r1, [r7, #8]
 8006530:	415b      	adcs	r3, r3
 8006532:	60fb      	str	r3, [r7, #12]
 8006534:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006538:	4641      	mov	r1, r8
 800653a:	1851      	adds	r1, r2, r1
 800653c:	6039      	str	r1, [r7, #0]
 800653e:	4649      	mov	r1, r9
 8006540:	414b      	adcs	r3, r1
 8006542:	607b      	str	r3, [r7, #4]
 8006544:	f04f 0200 	mov.w	r2, #0
 8006548:	f04f 0300 	mov.w	r3, #0
 800654c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006550:	4659      	mov	r1, fp
 8006552:	00cb      	lsls	r3, r1, #3
 8006554:	4651      	mov	r1, sl
 8006556:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800655a:	4651      	mov	r1, sl
 800655c:	00ca      	lsls	r2, r1, #3
 800655e:	4610      	mov	r0, r2
 8006560:	4619      	mov	r1, r3
 8006562:	4603      	mov	r3, r0
 8006564:	4642      	mov	r2, r8
 8006566:	189b      	adds	r3, r3, r2
 8006568:	66bb      	str	r3, [r7, #104]	@ 0x68
 800656a:	464b      	mov	r3, r9
 800656c:	460a      	mov	r2, r1
 800656e:	eb42 0303 	adc.w	r3, r2, r3
 8006572:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	663b      	str	r3, [r7, #96]	@ 0x60
 800657e:	667a      	str	r2, [r7, #100]	@ 0x64
 8006580:	f04f 0200 	mov.w	r2, #0
 8006584:	f04f 0300 	mov.w	r3, #0
 8006588:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800658c:	4649      	mov	r1, r9
 800658e:	008b      	lsls	r3, r1, #2
 8006590:	4641      	mov	r1, r8
 8006592:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006596:	4641      	mov	r1, r8
 8006598:	008a      	lsls	r2, r1, #2
 800659a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800659e:	f7fa fb8d 	bl	8000cbc <__aeabi_uldivmod>
 80065a2:	4602      	mov	r2, r0
 80065a4:	460b      	mov	r3, r1
 80065a6:	4b0d      	ldr	r3, [pc, #52]	@ (80065dc <UART_SetConfig+0x4e4>)
 80065a8:	fba3 1302 	umull	r1, r3, r3, r2
 80065ac:	095b      	lsrs	r3, r3, #5
 80065ae:	2164      	movs	r1, #100	@ 0x64
 80065b0:	fb01 f303 	mul.w	r3, r1, r3
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	011b      	lsls	r3, r3, #4
 80065b8:	3332      	adds	r3, #50	@ 0x32
 80065ba:	4a08      	ldr	r2, [pc, #32]	@ (80065dc <UART_SetConfig+0x4e4>)
 80065bc:	fba2 2303 	umull	r2, r3, r2, r3
 80065c0:	095b      	lsrs	r3, r3, #5
 80065c2:	f003 020f 	and.w	r2, r3, #15
 80065c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4422      	add	r2, r4
 80065ce:	609a      	str	r2, [r3, #8]
}
 80065d0:	bf00      	nop
 80065d2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80065d6:	46bd      	mov	sp, r7
 80065d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065dc:	51eb851f 	.word	0x51eb851f

080065e0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b085      	sub	sp, #20
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	4603      	mov	r3, r0
 80065e8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80065ea:	2300      	movs	r3, #0
 80065ec:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80065ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80065f2:	2b84      	cmp	r3, #132	@ 0x84
 80065f4:	d005      	beq.n	8006602 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80065f6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	4413      	add	r3, r2
 80065fe:	3303      	adds	r3, #3
 8006600:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006602:	68fb      	ldr	r3, [r7, #12]
}
 8006604:	4618      	mov	r0, r3
 8006606:	3714      	adds	r7, #20
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006616:	f3ef 8305 	mrs	r3, IPSR
 800661a:	607b      	str	r3, [r7, #4]
  return(result);
 800661c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800661e:	2b00      	cmp	r3, #0
 8006620:	bf14      	ite	ne
 8006622:	2301      	movne	r3, #1
 8006624:	2300      	moveq	r3, #0
 8006626:	b2db      	uxtb	r3, r3
}
 8006628:	4618      	mov	r0, r3
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006638:	f001 f982 	bl	8007940 <vTaskStartScheduler>
  
  return osOK;
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	bd80      	pop	{r7, pc}

08006642 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006642:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006644:	b089      	sub	sp, #36	@ 0x24
 8006646:	af04      	add	r7, sp, #16
 8006648:	6078      	str	r0, [r7, #4]
 800664a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	695b      	ldr	r3, [r3, #20]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d020      	beq.n	8006696 <osThreadCreate+0x54>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	699b      	ldr	r3, [r3, #24]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d01c      	beq.n	8006696 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	685c      	ldr	r4, [r3, #4]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	691e      	ldr	r6, [r3, #16]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800666e:	4618      	mov	r0, r3
 8006670:	f7ff ffb6 	bl	80065e0 <makeFreeRtosPriority>
 8006674:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	695b      	ldr	r3, [r3, #20]
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800667e:	9202      	str	r2, [sp, #8]
 8006680:	9301      	str	r3, [sp, #4]
 8006682:	9100      	str	r1, [sp, #0]
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	4632      	mov	r2, r6
 8006688:	4629      	mov	r1, r5
 800668a:	4620      	mov	r0, r4
 800668c:	f000 ff72 	bl	8007574 <xTaskCreateStatic>
 8006690:	4603      	mov	r3, r0
 8006692:	60fb      	str	r3, [r7, #12]
 8006694:	e01c      	b.n	80066d0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	685c      	ldr	r4, [r3, #4]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80066a2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7ff ff98 	bl	80065e0 <makeFreeRtosPriority>
 80066b0:	4602      	mov	r2, r0
 80066b2:	f107 030c 	add.w	r3, r7, #12
 80066b6:	9301      	str	r3, [sp, #4]
 80066b8:	9200      	str	r2, [sp, #0]
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	4632      	mov	r2, r6
 80066be:	4629      	mov	r1, r5
 80066c0:	4620      	mov	r0, r4
 80066c2:	f000 ffb7 	bl	8007634 <xTaskCreate>
 80066c6:	4603      	mov	r3, r0
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d001      	beq.n	80066d0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80066cc:	2300      	movs	r3, #0
 80066ce:	e000      	b.n	80066d2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80066d0:	68fb      	ldr	r3, [r7, #12]
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3714      	adds	r7, #20
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080066da <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80066da:	b580      	push	{r7, lr}
 80066dc:	b084      	sub	sp, #16
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d001      	beq.n	80066f0 <osDelay+0x16>
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	e000      	b.n	80066f2 <osDelay+0x18>
 80066f0:	2301      	movs	r3, #1
 80066f2:	4618      	mov	r0, r3
 80066f4:	f001 f8ee 	bl	80078d4 <vTaskDelay>
  
  return osOK;
 80066f8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3710      	adds	r7, #16
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
	...

08006704 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b086      	sub	sp, #24
 8006708:	af02      	add	r7, sp, #8
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800670e:	2300      	movs	r3, #0
 8006710:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8006712:	2300      	movs	r3, #0
 8006714:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8006716:	f7ff ff7b 	bl	8006610 <inHandlerMode>
 800671a:	4603      	mov	r3, r0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d01c      	beq.n	800675a <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8006720:	6839      	ldr	r1, [r7, #0]
 8006722:	f107 0208 	add.w	r2, r7, #8
 8006726:	f107 030c 	add.w	r3, r7, #12
 800672a:	9300      	str	r3, [sp, #0]
 800672c:	4613      	mov	r3, r2
 800672e:	2201      	movs	r2, #1
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f001 fff3 	bl	800871c <xTaskGenericNotifyFromISR>
 8006736:	4603      	mov	r3, r0
 8006738:	2b01      	cmp	r3, #1
 800673a:	d002      	beq.n	8006742 <osSignalSet+0x3e>
      return 0x80000000;
 800673c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006740:	e019      	b.n	8006776 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d015      	beq.n	8006774 <osSignalSet+0x70>
 8006748:	4b0d      	ldr	r3, [pc, #52]	@ (8006780 <osSignalSet+0x7c>)
 800674a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800674e:	601a      	str	r2, [r3, #0]
 8006750:	f3bf 8f4f 	dsb	sy
 8006754:	f3bf 8f6f 	isb	sy
 8006758:	e00c      	b.n	8006774 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 800675a:	6839      	ldr	r1, [r7, #0]
 800675c:	f107 0308 	add.w	r3, r7, #8
 8006760:	2201      	movs	r2, #1
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f001 ff18 	bl	8008598 <xTaskGenericNotify>
 8006768:	4603      	mov	r3, r0
 800676a:	2b01      	cmp	r3, #1
 800676c:	d002      	beq.n	8006774 <osSignalSet+0x70>
    return 0x80000000;
 800676e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006772:	e000      	b.n	8006776 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8006774:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8006776:	4618      	mov	r0, r3
 8006778:	3710      	adds	r7, #16
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	e000ed04 	.word	0xe000ed04

08006784 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8006784:	b580      	push	{r7, lr}
 8006786:	b086      	sub	sp, #24
 8006788:	af02      	add	r7, sp, #8
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d00f      	beq.n	80067b6 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	2b01      	cmp	r3, #1
 800679a:	d10a      	bne.n	80067b2 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	2203      	movs	r2, #3
 80067a2:	9200      	str	r2, [sp, #0]
 80067a4:	2200      	movs	r2, #0
 80067a6:	2100      	movs	r1, #0
 80067a8:	2001      	movs	r0, #1
 80067aa:	f000 f9bf 	bl	8006b2c <xQueueGenericCreateStatic>
 80067ae:	4603      	mov	r3, r0
 80067b0:	e016      	b.n	80067e0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80067b2:	2300      	movs	r3, #0
 80067b4:	e014      	b.n	80067e0 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d110      	bne.n	80067de <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80067bc:	2203      	movs	r2, #3
 80067be:	2100      	movs	r1, #0
 80067c0:	2001      	movs	r0, #1
 80067c2:	f000 fa30 	bl	8006c26 <xQueueGenericCreate>
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d005      	beq.n	80067da <osSemaphoreCreate+0x56>
 80067ce:	2300      	movs	r3, #0
 80067d0:	2200      	movs	r2, #0
 80067d2:	2100      	movs	r1, #0
 80067d4:	68f8      	ldr	r0, [r7, #12]
 80067d6:	f000 fa81 	bl	8006cdc <xQueueGenericSend>
      return sema;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	e000      	b.n	80067e0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80067de:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3710      	adds	r7, #16
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80067f2:	2300      	movs	r3, #0
 80067f4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d101      	bne.n	8006800 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80067fc:	2380      	movs	r3, #128	@ 0x80
 80067fe:	e03a      	b.n	8006876 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8006800:	2300      	movs	r3, #0
 8006802:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800680a:	d103      	bne.n	8006814 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800680c:	f04f 33ff 	mov.w	r3, #4294967295
 8006810:	60fb      	str	r3, [r7, #12]
 8006812:	e009      	b.n	8006828 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d006      	beq.n	8006828 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d101      	bne.n	8006828 <osSemaphoreWait+0x40>
      ticks = 1;
 8006824:	2301      	movs	r3, #1
 8006826:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006828:	f7ff fef2 	bl	8006610 <inHandlerMode>
 800682c:	4603      	mov	r3, r0
 800682e:	2b00      	cmp	r3, #0
 8006830:	d017      	beq.n	8006862 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006832:	f107 0308 	add.w	r3, r7, #8
 8006836:	461a      	mov	r2, r3
 8006838:	2100      	movs	r1, #0
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 fcf0 	bl	8007220 <xQueueReceiveFromISR>
 8006840:	4603      	mov	r3, r0
 8006842:	2b01      	cmp	r3, #1
 8006844:	d001      	beq.n	800684a <osSemaphoreWait+0x62>
      return osErrorOS;
 8006846:	23ff      	movs	r3, #255	@ 0xff
 8006848:	e015      	b.n	8006876 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d011      	beq.n	8006874 <osSemaphoreWait+0x8c>
 8006850:	4b0b      	ldr	r3, [pc, #44]	@ (8006880 <osSemaphoreWait+0x98>)
 8006852:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006856:	601a      	str	r2, [r3, #0]
 8006858:	f3bf 8f4f 	dsb	sy
 800685c:	f3bf 8f6f 	isb	sy
 8006860:	e008      	b.n	8006874 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8006862:	68f9      	ldr	r1, [r7, #12]
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 fbcb 	bl	8007000 <xQueueSemaphoreTake>
 800686a:	4603      	mov	r3, r0
 800686c:	2b01      	cmp	r3, #1
 800686e:	d001      	beq.n	8006874 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8006870:	23ff      	movs	r3, #255	@ 0xff
 8006872:	e000      	b.n	8006876 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8006874:	2300      	movs	r3, #0
}
 8006876:	4618      	mov	r0, r3
 8006878:	3710      	adds	r7, #16
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	e000ed04 	.word	0xe000ed04

08006884 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800688c:	2300      	movs	r3, #0
 800688e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006890:	2300      	movs	r3, #0
 8006892:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8006894:	f7ff febc 	bl	8006610 <inHandlerMode>
 8006898:	4603      	mov	r3, r0
 800689a:	2b00      	cmp	r3, #0
 800689c:	d016      	beq.n	80068cc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800689e:	f107 0308 	add.w	r3, r7, #8
 80068a2:	4619      	mov	r1, r3
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 fb1b 	bl	8006ee0 <xQueueGiveFromISR>
 80068aa:	4603      	mov	r3, r0
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d001      	beq.n	80068b4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80068b0:	23ff      	movs	r3, #255	@ 0xff
 80068b2:	e017      	b.n	80068e4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d013      	beq.n	80068e2 <osSemaphoreRelease+0x5e>
 80068ba:	4b0c      	ldr	r3, [pc, #48]	@ (80068ec <osSemaphoreRelease+0x68>)
 80068bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068c0:	601a      	str	r2, [r3, #0]
 80068c2:	f3bf 8f4f 	dsb	sy
 80068c6:	f3bf 8f6f 	isb	sy
 80068ca:	e00a      	b.n	80068e2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80068cc:	2300      	movs	r3, #0
 80068ce:	2200      	movs	r2, #0
 80068d0:	2100      	movs	r1, #0
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 fa02 	bl	8006cdc <xQueueGenericSend>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d001      	beq.n	80068e2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80068de:	23ff      	movs	r3, #255	@ 0xff
 80068e0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80068e2:	68fb      	ldr	r3, [r7, #12]
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3710      	adds	r7, #16
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	e000ed04 	.word	0xe000ed04

080068f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f103 0208 	add.w	r2, r3, #8
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f04f 32ff 	mov.w	r2, #4294967295
 8006908:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f103 0208 	add.w	r2, r3, #8
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f103 0208 	add.w	r2, r3, #8
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006924:	bf00      	nop
 8006926:	370c      	adds	r7, #12
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006930:	b480      	push	{r7}
 8006932:	b083      	sub	sp, #12
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800693e:	bf00      	nop
 8006940:	370c      	adds	r7, #12
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr

0800694a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800694a:	b480      	push	{r7}
 800694c:	b085      	sub	sp, #20
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
 8006952:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	689a      	ldr	r2, [r3, #8]
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	683a      	ldr	r2, [r7, #0]
 800696e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	683a      	ldr	r2, [r7, #0]
 8006974:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	1c5a      	adds	r2, r3, #1
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	601a      	str	r2, [r3, #0]
}
 8006986:	bf00      	nop
 8006988:	3714      	adds	r7, #20
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr

08006992 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006992:	b480      	push	{r7}
 8006994:	b085      	sub	sp, #20
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
 800699a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069a8:	d103      	bne.n	80069b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	691b      	ldr	r3, [r3, #16]
 80069ae:	60fb      	str	r3, [r7, #12]
 80069b0:	e00c      	b.n	80069cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	3308      	adds	r3, #8
 80069b6:	60fb      	str	r3, [r7, #12]
 80069b8:	e002      	b.n	80069c0 <vListInsert+0x2e>
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	60fb      	str	r3, [r7, #12]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	68ba      	ldr	r2, [r7, #8]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d2f6      	bcs.n	80069ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	685a      	ldr	r2, [r3, #4]
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	683a      	ldr	r2, [r7, #0]
 80069da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	68fa      	ldr	r2, [r7, #12]
 80069e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	683a      	ldr	r2, [r7, #0]
 80069e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	1c5a      	adds	r2, r3, #1
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	601a      	str	r2, [r3, #0]
}
 80069f8:	bf00      	nop
 80069fa:	3714      	adds	r7, #20
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006a04:	b480      	push	{r7}
 8006a06:	b085      	sub	sp, #20
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	691b      	ldr	r3, [r3, #16]
 8006a10:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	6892      	ldr	r2, [r2, #8]
 8006a1a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	6852      	ldr	r2, [r2, #4]
 8006a24:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d103      	bne.n	8006a38 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	689a      	ldr	r2, [r3, #8]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	1e5a      	subs	r2, r3, #1
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3714      	adds	r7, #20
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d10b      	bne.n	8006a84 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a70:	f383 8811 	msr	BASEPRI, r3
 8006a74:	f3bf 8f6f 	isb	sy
 8006a78:	f3bf 8f4f 	dsb	sy
 8006a7c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006a7e:	bf00      	nop
 8006a80:	bf00      	nop
 8006a82:	e7fd      	b.n	8006a80 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006a84:	f002 f8c8 	bl	8008c18 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a90:	68f9      	ldr	r1, [r7, #12]
 8006a92:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006a94:	fb01 f303 	mul.w	r3, r1, r3
 8006a98:	441a      	add	r2, r3
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ab4:	3b01      	subs	r3, #1
 8006ab6:	68f9      	ldr	r1, [r7, #12]
 8006ab8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006aba:	fb01 f303 	mul.w	r3, r1, r3
 8006abe:	441a      	add	r2, r3
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	22ff      	movs	r2, #255	@ 0xff
 8006ac8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	22ff      	movs	r2, #255	@ 0xff
 8006ad0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d114      	bne.n	8006b04 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d01a      	beq.n	8006b18 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	3310      	adds	r3, #16
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f001 f984 	bl	8007df4 <xTaskRemoveFromEventList>
 8006aec:	4603      	mov	r3, r0
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d012      	beq.n	8006b18 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006af2:	4b0d      	ldr	r3, [pc, #52]	@ (8006b28 <xQueueGenericReset+0xd0>)
 8006af4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006af8:	601a      	str	r2, [r3, #0]
 8006afa:	f3bf 8f4f 	dsb	sy
 8006afe:	f3bf 8f6f 	isb	sy
 8006b02:	e009      	b.n	8006b18 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	3310      	adds	r3, #16
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f7ff fef1 	bl	80068f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	3324      	adds	r3, #36	@ 0x24
 8006b12:	4618      	mov	r0, r3
 8006b14:	f7ff feec 	bl	80068f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006b18:	f002 f8b0 	bl	8008c7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006b1c:	2301      	movs	r3, #1
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3710      	adds	r7, #16
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	bf00      	nop
 8006b28:	e000ed04 	.word	0xe000ed04

08006b2c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b08e      	sub	sp, #56	@ 0x38
 8006b30:	af02      	add	r7, sp, #8
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	607a      	str	r2, [r7, #4]
 8006b38:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d10b      	bne.n	8006b58 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006b40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b44:	f383 8811 	msr	BASEPRI, r3
 8006b48:	f3bf 8f6f 	isb	sy
 8006b4c:	f3bf 8f4f 	dsb	sy
 8006b50:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006b52:	bf00      	nop
 8006b54:	bf00      	nop
 8006b56:	e7fd      	b.n	8006b54 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d10b      	bne.n	8006b76 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b62:	f383 8811 	msr	BASEPRI, r3
 8006b66:	f3bf 8f6f 	isb	sy
 8006b6a:	f3bf 8f4f 	dsb	sy
 8006b6e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006b70:	bf00      	nop
 8006b72:	bf00      	nop
 8006b74:	e7fd      	b.n	8006b72 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d002      	beq.n	8006b82 <xQueueGenericCreateStatic+0x56>
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d001      	beq.n	8006b86 <xQueueGenericCreateStatic+0x5a>
 8006b82:	2301      	movs	r3, #1
 8006b84:	e000      	b.n	8006b88 <xQueueGenericCreateStatic+0x5c>
 8006b86:	2300      	movs	r3, #0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d10b      	bne.n	8006ba4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b90:	f383 8811 	msr	BASEPRI, r3
 8006b94:	f3bf 8f6f 	isb	sy
 8006b98:	f3bf 8f4f 	dsb	sy
 8006b9c:	623b      	str	r3, [r7, #32]
}
 8006b9e:	bf00      	nop
 8006ba0:	bf00      	nop
 8006ba2:	e7fd      	b.n	8006ba0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d102      	bne.n	8006bb0 <xQueueGenericCreateStatic+0x84>
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d101      	bne.n	8006bb4 <xQueueGenericCreateStatic+0x88>
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e000      	b.n	8006bb6 <xQueueGenericCreateStatic+0x8a>
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d10b      	bne.n	8006bd2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bbe:	f383 8811 	msr	BASEPRI, r3
 8006bc2:	f3bf 8f6f 	isb	sy
 8006bc6:	f3bf 8f4f 	dsb	sy
 8006bca:	61fb      	str	r3, [r7, #28]
}
 8006bcc:	bf00      	nop
 8006bce:	bf00      	nop
 8006bd0:	e7fd      	b.n	8006bce <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006bd2:	2348      	movs	r3, #72	@ 0x48
 8006bd4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	2b48      	cmp	r3, #72	@ 0x48
 8006bda:	d00b      	beq.n	8006bf4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006bdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006be0:	f383 8811 	msr	BASEPRI, r3
 8006be4:	f3bf 8f6f 	isb	sy
 8006be8:	f3bf 8f4f 	dsb	sy
 8006bec:	61bb      	str	r3, [r7, #24]
}
 8006bee:	bf00      	nop
 8006bf0:	bf00      	nop
 8006bf2:	e7fd      	b.n	8006bf0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006bf4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d00d      	beq.n	8006c1c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c02:	2201      	movs	r2, #1
 8006c04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006c08:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c0e:	9300      	str	r3, [sp, #0]
 8006c10:	4613      	mov	r3, r2
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	68b9      	ldr	r1, [r7, #8]
 8006c16:	68f8      	ldr	r0, [r7, #12]
 8006c18:	f000 f840 	bl	8006c9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3730      	adds	r7, #48	@ 0x30
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}

08006c26 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006c26:	b580      	push	{r7, lr}
 8006c28:	b08a      	sub	sp, #40	@ 0x28
 8006c2a:	af02      	add	r7, sp, #8
 8006c2c:	60f8      	str	r0, [r7, #12]
 8006c2e:	60b9      	str	r1, [r7, #8]
 8006c30:	4613      	mov	r3, r2
 8006c32:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d10b      	bne.n	8006c52 <xQueueGenericCreate+0x2c>
	__asm volatile
 8006c3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c3e:	f383 8811 	msr	BASEPRI, r3
 8006c42:	f3bf 8f6f 	isb	sy
 8006c46:	f3bf 8f4f 	dsb	sy
 8006c4a:	613b      	str	r3, [r7, #16]
}
 8006c4c:	bf00      	nop
 8006c4e:	bf00      	nop
 8006c50:	e7fd      	b.n	8006c4e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	68ba      	ldr	r2, [r7, #8]
 8006c56:	fb02 f303 	mul.w	r3, r2, r3
 8006c5a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	3348      	adds	r3, #72	@ 0x48
 8006c60:	4618      	mov	r0, r3
 8006c62:	f002 f8fb 	bl	8008e5c <pvPortMalloc>
 8006c66:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006c68:	69bb      	ldr	r3, [r7, #24]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d011      	beq.n	8006c92 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006c6e:	69bb      	ldr	r3, [r7, #24]
 8006c70:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	3348      	adds	r3, #72	@ 0x48
 8006c76:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006c78:	69bb      	ldr	r3, [r7, #24]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006c80:	79fa      	ldrb	r2, [r7, #7]
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	9300      	str	r3, [sp, #0]
 8006c86:	4613      	mov	r3, r2
 8006c88:	697a      	ldr	r2, [r7, #20]
 8006c8a:	68b9      	ldr	r1, [r7, #8]
 8006c8c:	68f8      	ldr	r0, [r7, #12]
 8006c8e:	f000 f805 	bl	8006c9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006c92:	69bb      	ldr	r3, [r7, #24]
	}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3720      	adds	r7, #32
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	607a      	str	r2, [r7, #4]
 8006ca8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d103      	bne.n	8006cb8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006cb0:	69bb      	ldr	r3, [r7, #24]
 8006cb2:	69ba      	ldr	r2, [r7, #24]
 8006cb4:	601a      	str	r2, [r3, #0]
 8006cb6:	e002      	b.n	8006cbe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	68fa      	ldr	r2, [r7, #12]
 8006cc2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006cc4:	69bb      	ldr	r3, [r7, #24]
 8006cc6:	68ba      	ldr	r2, [r7, #8]
 8006cc8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006cca:	2101      	movs	r1, #1
 8006ccc:	69b8      	ldr	r0, [r7, #24]
 8006cce:	f7ff fec3 	bl	8006a58 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006cd2:	bf00      	nop
 8006cd4:	3710      	adds	r7, #16
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
	...

08006cdc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b08e      	sub	sp, #56	@ 0x38
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	607a      	str	r2, [r7, #4]
 8006ce8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006cea:	2300      	movs	r3, #0
 8006cec:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d10b      	bne.n	8006d10 <xQueueGenericSend+0x34>
	__asm volatile
 8006cf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cfc:	f383 8811 	msr	BASEPRI, r3
 8006d00:	f3bf 8f6f 	isb	sy
 8006d04:	f3bf 8f4f 	dsb	sy
 8006d08:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006d0a:	bf00      	nop
 8006d0c:	bf00      	nop
 8006d0e:	e7fd      	b.n	8006d0c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d103      	bne.n	8006d1e <xQueueGenericSend+0x42>
 8006d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d101      	bne.n	8006d22 <xQueueGenericSend+0x46>
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e000      	b.n	8006d24 <xQueueGenericSend+0x48>
 8006d22:	2300      	movs	r3, #0
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d10b      	bne.n	8006d40 <xQueueGenericSend+0x64>
	__asm volatile
 8006d28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d2c:	f383 8811 	msr	BASEPRI, r3
 8006d30:	f3bf 8f6f 	isb	sy
 8006d34:	f3bf 8f4f 	dsb	sy
 8006d38:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006d3a:	bf00      	nop
 8006d3c:	bf00      	nop
 8006d3e:	e7fd      	b.n	8006d3c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	2b02      	cmp	r3, #2
 8006d44:	d103      	bne.n	8006d4e <xQueueGenericSend+0x72>
 8006d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d101      	bne.n	8006d52 <xQueueGenericSend+0x76>
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e000      	b.n	8006d54 <xQueueGenericSend+0x78>
 8006d52:	2300      	movs	r3, #0
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d10b      	bne.n	8006d70 <xQueueGenericSend+0x94>
	__asm volatile
 8006d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d5c:	f383 8811 	msr	BASEPRI, r3
 8006d60:	f3bf 8f6f 	isb	sy
 8006d64:	f3bf 8f4f 	dsb	sy
 8006d68:	623b      	str	r3, [r7, #32]
}
 8006d6a:	bf00      	nop
 8006d6c:	bf00      	nop
 8006d6e:	e7fd      	b.n	8006d6c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d70:	f001 fa06 	bl	8008180 <xTaskGetSchedulerState>
 8006d74:	4603      	mov	r3, r0
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d102      	bne.n	8006d80 <xQueueGenericSend+0xa4>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d101      	bne.n	8006d84 <xQueueGenericSend+0xa8>
 8006d80:	2301      	movs	r3, #1
 8006d82:	e000      	b.n	8006d86 <xQueueGenericSend+0xaa>
 8006d84:	2300      	movs	r3, #0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d10b      	bne.n	8006da2 <xQueueGenericSend+0xc6>
	__asm volatile
 8006d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d8e:	f383 8811 	msr	BASEPRI, r3
 8006d92:	f3bf 8f6f 	isb	sy
 8006d96:	f3bf 8f4f 	dsb	sy
 8006d9a:	61fb      	str	r3, [r7, #28]
}
 8006d9c:	bf00      	nop
 8006d9e:	bf00      	nop
 8006da0:	e7fd      	b.n	8006d9e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006da2:	f001 ff39 	bl	8008c18 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d302      	bcc.n	8006db8 <xQueueGenericSend+0xdc>
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	2b02      	cmp	r3, #2
 8006db6:	d129      	bne.n	8006e0c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006db8:	683a      	ldr	r2, [r7, #0]
 8006dba:	68b9      	ldr	r1, [r7, #8]
 8006dbc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006dbe:	f000 fac9 	bl	8007354 <prvCopyDataToQueue>
 8006dc2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d010      	beq.n	8006dee <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dce:	3324      	adds	r3, #36	@ 0x24
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f001 f80f 	bl	8007df4 <xTaskRemoveFromEventList>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d013      	beq.n	8006e04 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006ddc:	4b3f      	ldr	r3, [pc, #252]	@ (8006edc <xQueueGenericSend+0x200>)
 8006dde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006de2:	601a      	str	r2, [r3, #0]
 8006de4:	f3bf 8f4f 	dsb	sy
 8006de8:	f3bf 8f6f 	isb	sy
 8006dec:	e00a      	b.n	8006e04 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d007      	beq.n	8006e04 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006df4:	4b39      	ldr	r3, [pc, #228]	@ (8006edc <xQueueGenericSend+0x200>)
 8006df6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006dfa:	601a      	str	r2, [r3, #0]
 8006dfc:	f3bf 8f4f 	dsb	sy
 8006e00:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006e04:	f001 ff3a 	bl	8008c7c <vPortExitCritical>
				return pdPASS;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	e063      	b.n	8006ed4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d103      	bne.n	8006e1a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006e12:	f001 ff33 	bl	8008c7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006e16:	2300      	movs	r3, #0
 8006e18:	e05c      	b.n	8006ed4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d106      	bne.n	8006e2e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e20:	f107 0314 	add.w	r3, r7, #20
 8006e24:	4618      	mov	r0, r3
 8006e26:	f001 f849 	bl	8007ebc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e2e:	f001 ff25 	bl	8008c7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e32:	f000 fdef 	bl	8007a14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e36:	f001 feef 	bl	8008c18 <vPortEnterCritical>
 8006e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e3c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006e40:	b25b      	sxtb	r3, r3
 8006e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e46:	d103      	bne.n	8006e50 <xQueueGenericSend+0x174>
 8006e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e52:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006e56:	b25b      	sxtb	r3, r3
 8006e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e5c:	d103      	bne.n	8006e66 <xQueueGenericSend+0x18a>
 8006e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e60:	2200      	movs	r2, #0
 8006e62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006e66:	f001 ff09 	bl	8008c7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e6a:	1d3a      	adds	r2, r7, #4
 8006e6c:	f107 0314 	add.w	r3, r7, #20
 8006e70:	4611      	mov	r1, r2
 8006e72:	4618      	mov	r0, r3
 8006e74:	f001 f838 	bl	8007ee8 <xTaskCheckForTimeOut>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d124      	bne.n	8006ec8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006e7e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e80:	f000 fb60 	bl	8007544 <prvIsQueueFull>
 8006e84:	4603      	mov	r3, r0
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d018      	beq.n	8006ebc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e8c:	3310      	adds	r3, #16
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	4611      	mov	r1, r2
 8006e92:	4618      	mov	r0, r3
 8006e94:	f000 ff88 	bl	8007da8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006e98:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e9a:	f000 faeb 	bl	8007474 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006e9e:	f000 fdc7 	bl	8007a30 <xTaskResumeAll>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	f47f af7c 	bne.w	8006da2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006eaa:	4b0c      	ldr	r3, [pc, #48]	@ (8006edc <xQueueGenericSend+0x200>)
 8006eac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006eb0:	601a      	str	r2, [r3, #0]
 8006eb2:	f3bf 8f4f 	dsb	sy
 8006eb6:	f3bf 8f6f 	isb	sy
 8006eba:	e772      	b.n	8006da2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006ebc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006ebe:	f000 fad9 	bl	8007474 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ec2:	f000 fdb5 	bl	8007a30 <xTaskResumeAll>
 8006ec6:	e76c      	b.n	8006da2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006ec8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006eca:	f000 fad3 	bl	8007474 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ece:	f000 fdaf 	bl	8007a30 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006ed2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3738      	adds	r7, #56	@ 0x38
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}
 8006edc:	e000ed04 	.word	0xe000ed04

08006ee0 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b08e      	sub	sp, #56	@ 0x38
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d10b      	bne.n	8006f0c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8006ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ef8:	f383 8811 	msr	BASEPRI, r3
 8006efc:	f3bf 8f6f 	isb	sy
 8006f00:	f3bf 8f4f 	dsb	sy
 8006f04:	623b      	str	r3, [r7, #32]
}
 8006f06:	bf00      	nop
 8006f08:	bf00      	nop
 8006f0a:	e7fd      	b.n	8006f08 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d00b      	beq.n	8006f2c <xQueueGiveFromISR+0x4c>
	__asm volatile
 8006f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f18:	f383 8811 	msr	BASEPRI, r3
 8006f1c:	f3bf 8f6f 	isb	sy
 8006f20:	f3bf 8f4f 	dsb	sy
 8006f24:	61fb      	str	r3, [r7, #28]
}
 8006f26:	bf00      	nop
 8006f28:	bf00      	nop
 8006f2a:	e7fd      	b.n	8006f28 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d103      	bne.n	8006f3c <xQueueGiveFromISR+0x5c>
 8006f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d101      	bne.n	8006f40 <xQueueGiveFromISR+0x60>
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	e000      	b.n	8006f42 <xQueueGiveFromISR+0x62>
 8006f40:	2300      	movs	r3, #0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d10b      	bne.n	8006f5e <xQueueGiveFromISR+0x7e>
	__asm volatile
 8006f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f4a:	f383 8811 	msr	BASEPRI, r3
 8006f4e:	f3bf 8f6f 	isb	sy
 8006f52:	f3bf 8f4f 	dsb	sy
 8006f56:	61bb      	str	r3, [r7, #24]
}
 8006f58:	bf00      	nop
 8006f5a:	bf00      	nop
 8006f5c:	e7fd      	b.n	8006f5a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f5e:	f001 ff3b 	bl	8008dd8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006f62:	f3ef 8211 	mrs	r2, BASEPRI
 8006f66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f6a:	f383 8811 	msr	BASEPRI, r3
 8006f6e:	f3bf 8f6f 	isb	sy
 8006f72:	f3bf 8f4f 	dsb	sy
 8006f76:	617a      	str	r2, [r7, #20]
 8006f78:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006f7a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f82:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d22b      	bcs.n	8006fe6 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f90:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006f94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f9a:	1c5a      	adds	r2, r3, #1
 8006f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f9e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006fa0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fa8:	d112      	bne.n	8006fd0 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d016      	beq.n	8006fe0 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fb4:	3324      	adds	r3, #36	@ 0x24
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f000 ff1c 	bl	8007df4 <xTaskRemoveFromEventList>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d00e      	beq.n	8006fe0 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d00b      	beq.n	8006fe0 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	601a      	str	r2, [r3, #0]
 8006fce:	e007      	b.n	8006fe0 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006fd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	b25a      	sxtb	r2, r3
 8006fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fdc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fe4:	e001      	b.n	8006fea <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fec:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006ff4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006ff6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3738      	adds	r7, #56	@ 0x38
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b08e      	sub	sp, #56	@ 0x38
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800700a:	2300      	movs	r3, #0
 800700c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007012:	2300      	movs	r3, #0
 8007014:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007018:	2b00      	cmp	r3, #0
 800701a:	d10b      	bne.n	8007034 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800701c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007020:	f383 8811 	msr	BASEPRI, r3
 8007024:	f3bf 8f6f 	isb	sy
 8007028:	f3bf 8f4f 	dsb	sy
 800702c:	623b      	str	r3, [r7, #32]
}
 800702e:	bf00      	nop
 8007030:	bf00      	nop
 8007032:	e7fd      	b.n	8007030 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007038:	2b00      	cmp	r3, #0
 800703a:	d00b      	beq.n	8007054 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800703c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007040:	f383 8811 	msr	BASEPRI, r3
 8007044:	f3bf 8f6f 	isb	sy
 8007048:	f3bf 8f4f 	dsb	sy
 800704c:	61fb      	str	r3, [r7, #28]
}
 800704e:	bf00      	nop
 8007050:	bf00      	nop
 8007052:	e7fd      	b.n	8007050 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007054:	f001 f894 	bl	8008180 <xTaskGetSchedulerState>
 8007058:	4603      	mov	r3, r0
 800705a:	2b00      	cmp	r3, #0
 800705c:	d102      	bne.n	8007064 <xQueueSemaphoreTake+0x64>
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d101      	bne.n	8007068 <xQueueSemaphoreTake+0x68>
 8007064:	2301      	movs	r3, #1
 8007066:	e000      	b.n	800706a <xQueueSemaphoreTake+0x6a>
 8007068:	2300      	movs	r3, #0
 800706a:	2b00      	cmp	r3, #0
 800706c:	d10b      	bne.n	8007086 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800706e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007072:	f383 8811 	msr	BASEPRI, r3
 8007076:	f3bf 8f6f 	isb	sy
 800707a:	f3bf 8f4f 	dsb	sy
 800707e:	61bb      	str	r3, [r7, #24]
}
 8007080:	bf00      	nop
 8007082:	bf00      	nop
 8007084:	e7fd      	b.n	8007082 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007086:	f001 fdc7 	bl	8008c18 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800708a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800708c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800708e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007092:	2b00      	cmp	r3, #0
 8007094:	d024      	beq.n	80070e0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007098:	1e5a      	subs	r2, r3, #1
 800709a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800709c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800709e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d104      	bne.n	80070b0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80070a6:	f001 fa17 	bl	80084d8 <pvTaskIncrementMutexHeldCount>
 80070aa:	4602      	mov	r2, r0
 80070ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070ae:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070b2:	691b      	ldr	r3, [r3, #16]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d00f      	beq.n	80070d8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070ba:	3310      	adds	r3, #16
 80070bc:	4618      	mov	r0, r3
 80070be:	f000 fe99 	bl	8007df4 <xTaskRemoveFromEventList>
 80070c2:	4603      	mov	r3, r0
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d007      	beq.n	80070d8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80070c8:	4b54      	ldr	r3, [pc, #336]	@ (800721c <xQueueSemaphoreTake+0x21c>)
 80070ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070ce:	601a      	str	r2, [r3, #0]
 80070d0:	f3bf 8f4f 	dsb	sy
 80070d4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80070d8:	f001 fdd0 	bl	8008c7c <vPortExitCritical>
				return pdPASS;
 80070dc:	2301      	movs	r3, #1
 80070de:	e098      	b.n	8007212 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d112      	bne.n	800710c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80070e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d00b      	beq.n	8007104 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80070ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070f0:	f383 8811 	msr	BASEPRI, r3
 80070f4:	f3bf 8f6f 	isb	sy
 80070f8:	f3bf 8f4f 	dsb	sy
 80070fc:	617b      	str	r3, [r7, #20]
}
 80070fe:	bf00      	nop
 8007100:	bf00      	nop
 8007102:	e7fd      	b.n	8007100 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007104:	f001 fdba 	bl	8008c7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007108:	2300      	movs	r3, #0
 800710a:	e082      	b.n	8007212 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800710c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800710e:	2b00      	cmp	r3, #0
 8007110:	d106      	bne.n	8007120 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007112:	f107 030c 	add.w	r3, r7, #12
 8007116:	4618      	mov	r0, r3
 8007118:	f000 fed0 	bl	8007ebc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800711c:	2301      	movs	r3, #1
 800711e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007120:	f001 fdac 	bl	8008c7c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007124:	f000 fc76 	bl	8007a14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007128:	f001 fd76 	bl	8008c18 <vPortEnterCritical>
 800712c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800712e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007132:	b25b      	sxtb	r3, r3
 8007134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007138:	d103      	bne.n	8007142 <xQueueSemaphoreTake+0x142>
 800713a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800713c:	2200      	movs	r2, #0
 800713e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007144:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007148:	b25b      	sxtb	r3, r3
 800714a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800714e:	d103      	bne.n	8007158 <xQueueSemaphoreTake+0x158>
 8007150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007152:	2200      	movs	r2, #0
 8007154:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007158:	f001 fd90 	bl	8008c7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800715c:	463a      	mov	r2, r7
 800715e:	f107 030c 	add.w	r3, r7, #12
 8007162:	4611      	mov	r1, r2
 8007164:	4618      	mov	r0, r3
 8007166:	f000 febf 	bl	8007ee8 <xTaskCheckForTimeOut>
 800716a:	4603      	mov	r3, r0
 800716c:	2b00      	cmp	r3, #0
 800716e:	d132      	bne.n	80071d6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007170:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007172:	f000 f9d1 	bl	8007518 <prvIsQueueEmpty>
 8007176:	4603      	mov	r3, r0
 8007178:	2b00      	cmp	r3, #0
 800717a:	d026      	beq.n	80071ca <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800717c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d109      	bne.n	8007198 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8007184:	f001 fd48 	bl	8008c18 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	4618      	mov	r0, r3
 800718e:	f001 f815 	bl	80081bc <xTaskPriorityInherit>
 8007192:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007194:	f001 fd72 	bl	8008c7c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800719a:	3324      	adds	r3, #36	@ 0x24
 800719c:	683a      	ldr	r2, [r7, #0]
 800719e:	4611      	mov	r1, r2
 80071a0:	4618      	mov	r0, r3
 80071a2:	f000 fe01 	bl	8007da8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80071a6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80071a8:	f000 f964 	bl	8007474 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80071ac:	f000 fc40 	bl	8007a30 <xTaskResumeAll>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	f47f af67 	bne.w	8007086 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80071b8:	4b18      	ldr	r3, [pc, #96]	@ (800721c <xQueueSemaphoreTake+0x21c>)
 80071ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071be:	601a      	str	r2, [r3, #0]
 80071c0:	f3bf 8f4f 	dsb	sy
 80071c4:	f3bf 8f6f 	isb	sy
 80071c8:	e75d      	b.n	8007086 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80071ca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80071cc:	f000 f952 	bl	8007474 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80071d0:	f000 fc2e 	bl	8007a30 <xTaskResumeAll>
 80071d4:	e757      	b.n	8007086 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80071d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80071d8:	f000 f94c 	bl	8007474 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80071dc:	f000 fc28 	bl	8007a30 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80071e0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80071e2:	f000 f999 	bl	8007518 <prvIsQueueEmpty>
 80071e6:	4603      	mov	r3, r0
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	f43f af4c 	beq.w	8007086 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80071ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d00d      	beq.n	8007210 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80071f4:	f001 fd10 	bl	8008c18 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80071f8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80071fa:	f000 f893 	bl	8007324 <prvGetDisinheritPriorityAfterTimeout>
 80071fe:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007206:	4618      	mov	r0, r3
 8007208:	f001 f8d6 	bl	80083b8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800720c:	f001 fd36 	bl	8008c7c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007210:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007212:	4618      	mov	r0, r3
 8007214:	3738      	adds	r7, #56	@ 0x38
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop
 800721c:	e000ed04 	.word	0xe000ed04

08007220 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b08e      	sub	sp, #56	@ 0x38
 8007224:	af00      	add	r7, sp, #0
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	60b9      	str	r1, [r7, #8]
 800722a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007232:	2b00      	cmp	r3, #0
 8007234:	d10b      	bne.n	800724e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8007236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800723a:	f383 8811 	msr	BASEPRI, r3
 800723e:	f3bf 8f6f 	isb	sy
 8007242:	f3bf 8f4f 	dsb	sy
 8007246:	623b      	str	r3, [r7, #32]
}
 8007248:	bf00      	nop
 800724a:	bf00      	nop
 800724c:	e7fd      	b.n	800724a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d103      	bne.n	800725c <xQueueReceiveFromISR+0x3c>
 8007254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007258:	2b00      	cmp	r3, #0
 800725a:	d101      	bne.n	8007260 <xQueueReceiveFromISR+0x40>
 800725c:	2301      	movs	r3, #1
 800725e:	e000      	b.n	8007262 <xQueueReceiveFromISR+0x42>
 8007260:	2300      	movs	r3, #0
 8007262:	2b00      	cmp	r3, #0
 8007264:	d10b      	bne.n	800727e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8007266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800726a:	f383 8811 	msr	BASEPRI, r3
 800726e:	f3bf 8f6f 	isb	sy
 8007272:	f3bf 8f4f 	dsb	sy
 8007276:	61fb      	str	r3, [r7, #28]
}
 8007278:	bf00      	nop
 800727a:	bf00      	nop
 800727c:	e7fd      	b.n	800727a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800727e:	f001 fdab 	bl	8008dd8 <vPortValidateInterruptPriority>
	__asm volatile
 8007282:	f3ef 8211 	mrs	r2, BASEPRI
 8007286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800728a:	f383 8811 	msr	BASEPRI, r3
 800728e:	f3bf 8f6f 	isb	sy
 8007292:	f3bf 8f4f 	dsb	sy
 8007296:	61ba      	str	r2, [r7, #24]
 8007298:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800729a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800729c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800729e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072a2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80072a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d02f      	beq.n	800730a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80072aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80072b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80072b4:	68b9      	ldr	r1, [r7, #8]
 80072b6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80072b8:	f000 f8b6 	bl	8007428 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80072bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072be:	1e5a      	subs	r2, r3, #1
 80072c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80072c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80072c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072cc:	d112      	bne.n	80072f4 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d0:	691b      	ldr	r3, [r3, #16]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d016      	beq.n	8007304 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d8:	3310      	adds	r3, #16
 80072da:	4618      	mov	r0, r3
 80072dc:	f000 fd8a 	bl	8007df4 <xTaskRemoveFromEventList>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d00e      	beq.n	8007304 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d00b      	beq.n	8007304 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2201      	movs	r2, #1
 80072f0:	601a      	str	r2, [r3, #0]
 80072f2:	e007      	b.n	8007304 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80072f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80072f8:	3301      	adds	r3, #1
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	b25a      	sxtb	r2, r3
 80072fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007300:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8007304:	2301      	movs	r3, #1
 8007306:	637b      	str	r3, [r7, #52]	@ 0x34
 8007308:	e001      	b.n	800730e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800730a:	2300      	movs	r3, #0
 800730c:	637b      	str	r3, [r7, #52]	@ 0x34
 800730e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007310:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	f383 8811 	msr	BASEPRI, r3
}
 8007318:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800731a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800731c:	4618      	mov	r0, r3
 800731e:	3738      	adds	r7, #56	@ 0x38
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007324:	b480      	push	{r7}
 8007326:	b085      	sub	sp, #20
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007330:	2b00      	cmp	r3, #0
 8007332:	d006      	beq.n	8007342 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f1c3 0307 	rsb	r3, r3, #7
 800733e:	60fb      	str	r3, [r7, #12]
 8007340:	e001      	b.n	8007346 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007342:	2300      	movs	r3, #0
 8007344:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007346:	68fb      	ldr	r3, [r7, #12]
	}
 8007348:	4618      	mov	r0, r3
 800734a:	3714      	adds	r7, #20
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr

08007354 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b086      	sub	sp, #24
 8007358:	af00      	add	r7, sp, #0
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007360:	2300      	movs	r3, #0
 8007362:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007368:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800736e:	2b00      	cmp	r3, #0
 8007370:	d10d      	bne.n	800738e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d14d      	bne.n	8007416 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	4618      	mov	r0, r3
 8007380:	f000 ff92 	bl	80082a8 <xTaskPriorityDisinherit>
 8007384:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2200      	movs	r2, #0
 800738a:	609a      	str	r2, [r3, #8]
 800738c:	e043      	b.n	8007416 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d119      	bne.n	80073c8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	6858      	ldr	r0, [r3, #4]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800739c:	461a      	mov	r2, r3
 800739e:	68b9      	ldr	r1, [r7, #8]
 80073a0:	f003 f87b 	bl	800a49a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	685a      	ldr	r2, [r3, #4]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073ac:	441a      	add	r2, r3
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	685a      	ldr	r2, [r3, #4]
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d32b      	bcc.n	8007416 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	605a      	str	r2, [r3, #4]
 80073c6:	e026      	b.n	8007416 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	68d8      	ldr	r0, [r3, #12]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073d0:	461a      	mov	r2, r3
 80073d2:	68b9      	ldr	r1, [r7, #8]
 80073d4:	f003 f861 	bl	800a49a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	68da      	ldr	r2, [r3, #12]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073e0:	425b      	negs	r3, r3
 80073e2:	441a      	add	r2, r3
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	68da      	ldr	r2, [r3, #12]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d207      	bcs.n	8007404 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	689a      	ldr	r2, [r3, #8]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073fc:	425b      	negs	r3, r3
 80073fe:	441a      	add	r2, r3
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2b02      	cmp	r3, #2
 8007408:	d105      	bne.n	8007416 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d002      	beq.n	8007416 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	3b01      	subs	r3, #1
 8007414:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	1c5a      	adds	r2, r3, #1
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800741e:	697b      	ldr	r3, [r7, #20]
}
 8007420:	4618      	mov	r0, r3
 8007422:	3718      	adds	r7, #24
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007436:	2b00      	cmp	r3, #0
 8007438:	d018      	beq.n	800746c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	68da      	ldr	r2, [r3, #12]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007442:	441a      	add	r2, r3
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	68da      	ldr	r2, [r3, #12]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	429a      	cmp	r2, r3
 8007452:	d303      	bcc.n	800745c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	68d9      	ldr	r1, [r3, #12]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007464:	461a      	mov	r2, r3
 8007466:	6838      	ldr	r0, [r7, #0]
 8007468:	f003 f817 	bl	800a49a <memcpy>
	}
}
 800746c:	bf00      	nop
 800746e:	3708      	adds	r7, #8
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}

08007474 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800747c:	f001 fbcc 	bl	8008c18 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007486:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007488:	e011      	b.n	80074ae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800748e:	2b00      	cmp	r3, #0
 8007490:	d012      	beq.n	80074b8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	3324      	adds	r3, #36	@ 0x24
 8007496:	4618      	mov	r0, r3
 8007498:	f000 fcac 	bl	8007df4 <xTaskRemoveFromEventList>
 800749c:	4603      	mov	r3, r0
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d001      	beq.n	80074a6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80074a2:	f000 fd85 	bl	8007fb0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80074a6:	7bfb      	ldrb	r3, [r7, #15]
 80074a8:	3b01      	subs	r3, #1
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80074ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	dce9      	bgt.n	800748a <prvUnlockQueue+0x16>
 80074b6:	e000      	b.n	80074ba <prvUnlockQueue+0x46>
					break;
 80074b8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	22ff      	movs	r2, #255	@ 0xff
 80074be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80074c2:	f001 fbdb 	bl	8008c7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80074c6:	f001 fba7 	bl	8008c18 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80074d0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80074d2:	e011      	b.n	80074f8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	691b      	ldr	r3, [r3, #16]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d012      	beq.n	8007502 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	3310      	adds	r3, #16
 80074e0:	4618      	mov	r0, r3
 80074e2:	f000 fc87 	bl	8007df4 <xTaskRemoveFromEventList>
 80074e6:	4603      	mov	r3, r0
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d001      	beq.n	80074f0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80074ec:	f000 fd60 	bl	8007fb0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80074f0:	7bbb      	ldrb	r3, [r7, #14]
 80074f2:	3b01      	subs	r3, #1
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80074f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	dce9      	bgt.n	80074d4 <prvUnlockQueue+0x60>
 8007500:	e000      	b.n	8007504 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007502:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	22ff      	movs	r2, #255	@ 0xff
 8007508:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800750c:	f001 fbb6 	bl	8008c7c <vPortExitCritical>
}
 8007510:	bf00      	nop
 8007512:	3710      	adds	r7, #16
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007520:	f001 fb7a 	bl	8008c18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007528:	2b00      	cmp	r3, #0
 800752a:	d102      	bne.n	8007532 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800752c:	2301      	movs	r3, #1
 800752e:	60fb      	str	r3, [r7, #12]
 8007530:	e001      	b.n	8007536 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007532:	2300      	movs	r3, #0
 8007534:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007536:	f001 fba1 	bl	8008c7c <vPortExitCritical>

	return xReturn;
 800753a:	68fb      	ldr	r3, [r7, #12]
}
 800753c:	4618      	mov	r0, r3
 800753e:	3710      	adds	r7, #16
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}

08007544 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b084      	sub	sp, #16
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800754c:	f001 fb64 	bl	8008c18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007558:	429a      	cmp	r2, r3
 800755a:	d102      	bne.n	8007562 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800755c:	2301      	movs	r3, #1
 800755e:	60fb      	str	r3, [r7, #12]
 8007560:	e001      	b.n	8007566 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007562:	2300      	movs	r3, #0
 8007564:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007566:	f001 fb89 	bl	8008c7c <vPortExitCritical>

	return xReturn;
 800756a:	68fb      	ldr	r3, [r7, #12]
}
 800756c:	4618      	mov	r0, r3
 800756e:	3710      	adds	r7, #16
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007574:	b580      	push	{r7, lr}
 8007576:	b08e      	sub	sp, #56	@ 0x38
 8007578:	af04      	add	r7, sp, #16
 800757a:	60f8      	str	r0, [r7, #12]
 800757c:	60b9      	str	r1, [r7, #8]
 800757e:	607a      	str	r2, [r7, #4]
 8007580:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007582:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007584:	2b00      	cmp	r3, #0
 8007586:	d10b      	bne.n	80075a0 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800758c:	f383 8811 	msr	BASEPRI, r3
 8007590:	f3bf 8f6f 	isb	sy
 8007594:	f3bf 8f4f 	dsb	sy
 8007598:	623b      	str	r3, [r7, #32]
}
 800759a:	bf00      	nop
 800759c:	bf00      	nop
 800759e:	e7fd      	b.n	800759c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80075a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d10b      	bne.n	80075be <xTaskCreateStatic+0x4a>
	__asm volatile
 80075a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075aa:	f383 8811 	msr	BASEPRI, r3
 80075ae:	f3bf 8f6f 	isb	sy
 80075b2:	f3bf 8f4f 	dsb	sy
 80075b6:	61fb      	str	r3, [r7, #28]
}
 80075b8:	bf00      	nop
 80075ba:	bf00      	nop
 80075bc:	e7fd      	b.n	80075ba <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80075be:	23a0      	movs	r3, #160	@ 0xa0
 80075c0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	2ba0      	cmp	r3, #160	@ 0xa0
 80075c6:	d00b      	beq.n	80075e0 <xTaskCreateStatic+0x6c>
	__asm volatile
 80075c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075cc:	f383 8811 	msr	BASEPRI, r3
 80075d0:	f3bf 8f6f 	isb	sy
 80075d4:	f3bf 8f4f 	dsb	sy
 80075d8:	61bb      	str	r3, [r7, #24]
}
 80075da:	bf00      	nop
 80075dc:	bf00      	nop
 80075de:	e7fd      	b.n	80075dc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80075e0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80075e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d01e      	beq.n	8007626 <xTaskCreateStatic+0xb2>
 80075e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d01b      	beq.n	8007626 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80075ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075f0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80075f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80075f6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80075f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075fa:	2202      	movs	r2, #2
 80075fc:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007600:	2300      	movs	r3, #0
 8007602:	9303      	str	r3, [sp, #12]
 8007604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007606:	9302      	str	r3, [sp, #8]
 8007608:	f107 0314 	add.w	r3, r7, #20
 800760c:	9301      	str	r3, [sp, #4]
 800760e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007610:	9300      	str	r3, [sp, #0]
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	68b9      	ldr	r1, [r7, #8]
 8007618:	68f8      	ldr	r0, [r7, #12]
 800761a:	f000 f851 	bl	80076c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800761e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007620:	f000 f8ee 	bl	8007800 <prvAddNewTaskToReadyList>
 8007624:	e001      	b.n	800762a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007626:	2300      	movs	r3, #0
 8007628:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800762a:	697b      	ldr	r3, [r7, #20]
	}
 800762c:	4618      	mov	r0, r3
 800762e:	3728      	adds	r7, #40	@ 0x28
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007634:	b580      	push	{r7, lr}
 8007636:	b08c      	sub	sp, #48	@ 0x30
 8007638:	af04      	add	r7, sp, #16
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	60b9      	str	r1, [r7, #8]
 800763e:	603b      	str	r3, [r7, #0]
 8007640:	4613      	mov	r3, r2
 8007642:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007644:	88fb      	ldrh	r3, [r7, #6]
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	4618      	mov	r0, r3
 800764a:	f001 fc07 	bl	8008e5c <pvPortMalloc>
 800764e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d00e      	beq.n	8007674 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007656:	20a0      	movs	r0, #160	@ 0xa0
 8007658:	f001 fc00 	bl	8008e5c <pvPortMalloc>
 800765c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800765e:	69fb      	ldr	r3, [r7, #28]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d003      	beq.n	800766c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007664:	69fb      	ldr	r3, [r7, #28]
 8007666:	697a      	ldr	r2, [r7, #20]
 8007668:	631a      	str	r2, [r3, #48]	@ 0x30
 800766a:	e005      	b.n	8007678 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800766c:	6978      	ldr	r0, [r7, #20]
 800766e:	f001 fcc3 	bl	8008ff8 <vPortFree>
 8007672:	e001      	b.n	8007678 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007674:	2300      	movs	r3, #0
 8007676:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007678:	69fb      	ldr	r3, [r7, #28]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d017      	beq.n	80076ae <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	2200      	movs	r2, #0
 8007682:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007686:	88fa      	ldrh	r2, [r7, #6]
 8007688:	2300      	movs	r3, #0
 800768a:	9303      	str	r3, [sp, #12]
 800768c:	69fb      	ldr	r3, [r7, #28]
 800768e:	9302      	str	r3, [sp, #8]
 8007690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007692:	9301      	str	r3, [sp, #4]
 8007694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007696:	9300      	str	r3, [sp, #0]
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	68b9      	ldr	r1, [r7, #8]
 800769c:	68f8      	ldr	r0, [r7, #12]
 800769e:	f000 f80f 	bl	80076c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80076a2:	69f8      	ldr	r0, [r7, #28]
 80076a4:	f000 f8ac 	bl	8007800 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80076a8:	2301      	movs	r3, #1
 80076aa:	61bb      	str	r3, [r7, #24]
 80076ac:	e002      	b.n	80076b4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80076ae:	f04f 33ff 	mov.w	r3, #4294967295
 80076b2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80076b4:	69bb      	ldr	r3, [r7, #24]
	}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3720      	adds	r7, #32
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
	...

080076c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b088      	sub	sp, #32
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	607a      	str	r2, [r7, #4]
 80076cc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80076ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80076d8:	3b01      	subs	r3, #1
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	4413      	add	r3, r2
 80076de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80076e0:	69bb      	ldr	r3, [r7, #24]
 80076e2:	f023 0307 	bic.w	r3, r3, #7
 80076e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80076e8:	69bb      	ldr	r3, [r7, #24]
 80076ea:	f003 0307 	and.w	r3, r3, #7
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d00b      	beq.n	800770a <prvInitialiseNewTask+0x4a>
	__asm volatile
 80076f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076f6:	f383 8811 	msr	BASEPRI, r3
 80076fa:	f3bf 8f6f 	isb	sy
 80076fe:	f3bf 8f4f 	dsb	sy
 8007702:	617b      	str	r3, [r7, #20]
}
 8007704:	bf00      	nop
 8007706:	bf00      	nop
 8007708:	e7fd      	b.n	8007706 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d01f      	beq.n	8007750 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007710:	2300      	movs	r3, #0
 8007712:	61fb      	str	r3, [r7, #28]
 8007714:	e012      	b.n	800773c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007716:	68ba      	ldr	r2, [r7, #8]
 8007718:	69fb      	ldr	r3, [r7, #28]
 800771a:	4413      	add	r3, r2
 800771c:	7819      	ldrb	r1, [r3, #0]
 800771e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007720:	69fb      	ldr	r3, [r7, #28]
 8007722:	4413      	add	r3, r2
 8007724:	3334      	adds	r3, #52	@ 0x34
 8007726:	460a      	mov	r2, r1
 8007728:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800772a:	68ba      	ldr	r2, [r7, #8]
 800772c:	69fb      	ldr	r3, [r7, #28]
 800772e:	4413      	add	r3, r2
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d006      	beq.n	8007744 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007736:	69fb      	ldr	r3, [r7, #28]
 8007738:	3301      	adds	r3, #1
 800773a:	61fb      	str	r3, [r7, #28]
 800773c:	69fb      	ldr	r3, [r7, #28]
 800773e:	2b0f      	cmp	r3, #15
 8007740:	d9e9      	bls.n	8007716 <prvInitialiseNewTask+0x56>
 8007742:	e000      	b.n	8007746 <prvInitialiseNewTask+0x86>
			{
				break;
 8007744:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007748:	2200      	movs	r2, #0
 800774a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800774e:	e003      	b.n	8007758 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007752:	2200      	movs	r2, #0
 8007754:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800775a:	2b06      	cmp	r3, #6
 800775c:	d901      	bls.n	8007762 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800775e:	2306      	movs	r3, #6
 8007760:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007764:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007766:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800776a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800776c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800776e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007770:	2200      	movs	r2, #0
 8007772:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007776:	3304      	adds	r3, #4
 8007778:	4618      	mov	r0, r3
 800777a:	f7ff f8d9 	bl	8006930 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800777e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007780:	3318      	adds	r3, #24
 8007782:	4618      	mov	r0, r3
 8007784:	f7ff f8d4 	bl	8006930 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800778a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800778c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800778e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007790:	f1c3 0207 	rsb	r2, r3, #7
 8007794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007796:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800779a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800779c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800779e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077a0:	2200      	movs	r2, #0
 80077a2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80077a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077a8:	2200      	movs	r2, #0
 80077aa:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80077ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077b0:	334c      	adds	r3, #76	@ 0x4c
 80077b2:	224c      	movs	r2, #76	@ 0x4c
 80077b4:	2100      	movs	r1, #0
 80077b6:	4618      	mov	r0, r3
 80077b8:	f002 fd7b 	bl	800a2b2 <memset>
 80077bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077be:	4a0d      	ldr	r2, [pc, #52]	@ (80077f4 <prvInitialiseNewTask+0x134>)
 80077c0:	651a      	str	r2, [r3, #80]	@ 0x50
 80077c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077c4:	4a0c      	ldr	r2, [pc, #48]	@ (80077f8 <prvInitialiseNewTask+0x138>)
 80077c6:	655a      	str	r2, [r3, #84]	@ 0x54
 80077c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ca:	4a0c      	ldr	r2, [pc, #48]	@ (80077fc <prvInitialiseNewTask+0x13c>)
 80077cc:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80077ce:	683a      	ldr	r2, [r7, #0]
 80077d0:	68f9      	ldr	r1, [r7, #12]
 80077d2:	69b8      	ldr	r0, [r7, #24]
 80077d4:	f001 f8ee 	bl	80089b4 <pxPortInitialiseStack>
 80077d8:	4602      	mov	r2, r0
 80077da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077dc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80077de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d002      	beq.n	80077ea <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80077e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077ea:	bf00      	nop
 80077ec:	3720      	adds	r7, #32
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}
 80077f2:	bf00      	nop
 80077f4:	2000458c 	.word	0x2000458c
 80077f8:	200045f4 	.word	0x200045f4
 80077fc:	2000465c 	.word	0x2000465c

08007800 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b082      	sub	sp, #8
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007808:	f001 fa06 	bl	8008c18 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800780c:	4b2a      	ldr	r3, [pc, #168]	@ (80078b8 <prvAddNewTaskToReadyList+0xb8>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	3301      	adds	r3, #1
 8007812:	4a29      	ldr	r2, [pc, #164]	@ (80078b8 <prvAddNewTaskToReadyList+0xb8>)
 8007814:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007816:	4b29      	ldr	r3, [pc, #164]	@ (80078bc <prvAddNewTaskToReadyList+0xbc>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d109      	bne.n	8007832 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800781e:	4a27      	ldr	r2, [pc, #156]	@ (80078bc <prvAddNewTaskToReadyList+0xbc>)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007824:	4b24      	ldr	r3, [pc, #144]	@ (80078b8 <prvAddNewTaskToReadyList+0xb8>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	2b01      	cmp	r3, #1
 800782a:	d110      	bne.n	800784e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800782c:	f000 fbe4 	bl	8007ff8 <prvInitialiseTaskLists>
 8007830:	e00d      	b.n	800784e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007832:	4b23      	ldr	r3, [pc, #140]	@ (80078c0 <prvAddNewTaskToReadyList+0xc0>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d109      	bne.n	800784e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800783a:	4b20      	ldr	r3, [pc, #128]	@ (80078bc <prvAddNewTaskToReadyList+0xbc>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007844:	429a      	cmp	r2, r3
 8007846:	d802      	bhi.n	800784e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007848:	4a1c      	ldr	r2, [pc, #112]	@ (80078bc <prvAddNewTaskToReadyList+0xbc>)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800784e:	4b1d      	ldr	r3, [pc, #116]	@ (80078c4 <prvAddNewTaskToReadyList+0xc4>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	3301      	adds	r3, #1
 8007854:	4a1b      	ldr	r2, [pc, #108]	@ (80078c4 <prvAddNewTaskToReadyList+0xc4>)
 8007856:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800785c:	2201      	movs	r2, #1
 800785e:	409a      	lsls	r2, r3
 8007860:	4b19      	ldr	r3, [pc, #100]	@ (80078c8 <prvAddNewTaskToReadyList+0xc8>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4313      	orrs	r3, r2
 8007866:	4a18      	ldr	r2, [pc, #96]	@ (80078c8 <prvAddNewTaskToReadyList+0xc8>)
 8007868:	6013      	str	r3, [r2, #0]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800786e:	4613      	mov	r3, r2
 8007870:	009b      	lsls	r3, r3, #2
 8007872:	4413      	add	r3, r2
 8007874:	009b      	lsls	r3, r3, #2
 8007876:	4a15      	ldr	r2, [pc, #84]	@ (80078cc <prvAddNewTaskToReadyList+0xcc>)
 8007878:	441a      	add	r2, r3
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	3304      	adds	r3, #4
 800787e:	4619      	mov	r1, r3
 8007880:	4610      	mov	r0, r2
 8007882:	f7ff f862 	bl	800694a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007886:	f001 f9f9 	bl	8008c7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800788a:	4b0d      	ldr	r3, [pc, #52]	@ (80078c0 <prvAddNewTaskToReadyList+0xc0>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d00e      	beq.n	80078b0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007892:	4b0a      	ldr	r3, [pc, #40]	@ (80078bc <prvAddNewTaskToReadyList+0xbc>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800789c:	429a      	cmp	r2, r3
 800789e:	d207      	bcs.n	80078b0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80078a0:	4b0b      	ldr	r3, [pc, #44]	@ (80078d0 <prvAddNewTaskToReadyList+0xd0>)
 80078a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078a6:	601a      	str	r2, [r3, #0]
 80078a8:	f3bf 8f4f 	dsb	sy
 80078ac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80078b0:	bf00      	nop
 80078b2:	3708      	adds	r7, #8
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}
 80078b8:	20000930 	.word	0x20000930
 80078bc:	20000830 	.word	0x20000830
 80078c0:	2000093c 	.word	0x2000093c
 80078c4:	2000094c 	.word	0x2000094c
 80078c8:	20000938 	.word	0x20000938
 80078cc:	20000834 	.word	0x20000834
 80078d0:	e000ed04 	.word	0xe000ed04

080078d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b084      	sub	sp, #16
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80078dc:	2300      	movs	r3, #0
 80078de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d018      	beq.n	8007918 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80078e6:	4b14      	ldr	r3, [pc, #80]	@ (8007938 <vTaskDelay+0x64>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d00b      	beq.n	8007906 <vTaskDelay+0x32>
	__asm volatile
 80078ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078f2:	f383 8811 	msr	BASEPRI, r3
 80078f6:	f3bf 8f6f 	isb	sy
 80078fa:	f3bf 8f4f 	dsb	sy
 80078fe:	60bb      	str	r3, [r7, #8]
}
 8007900:	bf00      	nop
 8007902:	bf00      	nop
 8007904:	e7fd      	b.n	8007902 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007906:	f000 f885 	bl	8007a14 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800790a:	2100      	movs	r1, #0
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 ffeb 	bl	80088e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007912:	f000 f88d 	bl	8007a30 <xTaskResumeAll>
 8007916:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d107      	bne.n	800792e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800791e:	4b07      	ldr	r3, [pc, #28]	@ (800793c <vTaskDelay+0x68>)
 8007920:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007924:	601a      	str	r2, [r3, #0]
 8007926:	f3bf 8f4f 	dsb	sy
 800792a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800792e:	bf00      	nop
 8007930:	3710      	adds	r7, #16
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
 8007936:	bf00      	nop
 8007938:	20000958 	.word	0x20000958
 800793c:	e000ed04 	.word	0xe000ed04

08007940 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b08a      	sub	sp, #40	@ 0x28
 8007944:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007946:	2300      	movs	r3, #0
 8007948:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800794a:	2300      	movs	r3, #0
 800794c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800794e:	463a      	mov	r2, r7
 8007950:	1d39      	adds	r1, r7, #4
 8007952:	f107 0308 	add.w	r3, r7, #8
 8007956:	4618      	mov	r0, r3
 8007958:	f7fa fbfa 	bl	8002150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800795c:	6839      	ldr	r1, [r7, #0]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	68ba      	ldr	r2, [r7, #8]
 8007962:	9202      	str	r2, [sp, #8]
 8007964:	9301      	str	r3, [sp, #4]
 8007966:	2300      	movs	r3, #0
 8007968:	9300      	str	r3, [sp, #0]
 800796a:	2300      	movs	r3, #0
 800796c:	460a      	mov	r2, r1
 800796e:	4921      	ldr	r1, [pc, #132]	@ (80079f4 <vTaskStartScheduler+0xb4>)
 8007970:	4821      	ldr	r0, [pc, #132]	@ (80079f8 <vTaskStartScheduler+0xb8>)
 8007972:	f7ff fdff 	bl	8007574 <xTaskCreateStatic>
 8007976:	4603      	mov	r3, r0
 8007978:	4a20      	ldr	r2, [pc, #128]	@ (80079fc <vTaskStartScheduler+0xbc>)
 800797a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800797c:	4b1f      	ldr	r3, [pc, #124]	@ (80079fc <vTaskStartScheduler+0xbc>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d002      	beq.n	800798a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007984:	2301      	movs	r3, #1
 8007986:	617b      	str	r3, [r7, #20]
 8007988:	e001      	b.n	800798e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800798a:	2300      	movs	r3, #0
 800798c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	2b01      	cmp	r3, #1
 8007992:	d11b      	bne.n	80079cc <vTaskStartScheduler+0x8c>
	__asm volatile
 8007994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007998:	f383 8811 	msr	BASEPRI, r3
 800799c:	f3bf 8f6f 	isb	sy
 80079a0:	f3bf 8f4f 	dsb	sy
 80079a4:	613b      	str	r3, [r7, #16]
}
 80079a6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80079a8:	4b15      	ldr	r3, [pc, #84]	@ (8007a00 <vTaskStartScheduler+0xc0>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	334c      	adds	r3, #76	@ 0x4c
 80079ae:	4a15      	ldr	r2, [pc, #84]	@ (8007a04 <vTaskStartScheduler+0xc4>)
 80079b0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80079b2:	4b15      	ldr	r3, [pc, #84]	@ (8007a08 <vTaskStartScheduler+0xc8>)
 80079b4:	f04f 32ff 	mov.w	r2, #4294967295
 80079b8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80079ba:	4b14      	ldr	r3, [pc, #80]	@ (8007a0c <vTaskStartScheduler+0xcc>)
 80079bc:	2201      	movs	r2, #1
 80079be:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80079c0:	4b13      	ldr	r3, [pc, #76]	@ (8007a10 <vTaskStartScheduler+0xd0>)
 80079c2:	2200      	movs	r2, #0
 80079c4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80079c6:	f001 f883 	bl	8008ad0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80079ca:	e00f      	b.n	80079ec <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079d2:	d10b      	bne.n	80079ec <vTaskStartScheduler+0xac>
	__asm volatile
 80079d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079d8:	f383 8811 	msr	BASEPRI, r3
 80079dc:	f3bf 8f6f 	isb	sy
 80079e0:	f3bf 8f4f 	dsb	sy
 80079e4:	60fb      	str	r3, [r7, #12]
}
 80079e6:	bf00      	nop
 80079e8:	bf00      	nop
 80079ea:	e7fd      	b.n	80079e8 <vTaskStartScheduler+0xa8>
}
 80079ec:	bf00      	nop
 80079ee:	3718      	adds	r7, #24
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}
 80079f4:	0800c4f0 	.word	0x0800c4f0
 80079f8:	08007fc9 	.word	0x08007fc9
 80079fc:	20000954 	.word	0x20000954
 8007a00:	20000830 	.word	0x20000830
 8007a04:	20000194 	.word	0x20000194
 8007a08:	20000950 	.word	0x20000950
 8007a0c:	2000093c 	.word	0x2000093c
 8007a10:	20000934 	.word	0x20000934

08007a14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007a14:	b480      	push	{r7}
 8007a16:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007a18:	4b04      	ldr	r3, [pc, #16]	@ (8007a2c <vTaskSuspendAll+0x18>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	4a03      	ldr	r2, [pc, #12]	@ (8007a2c <vTaskSuspendAll+0x18>)
 8007a20:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007a22:	bf00      	nop
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr
 8007a2c:	20000958 	.word	0x20000958

08007a30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007a36:	2300      	movs	r3, #0
 8007a38:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007a3e:	4b42      	ldr	r3, [pc, #264]	@ (8007b48 <xTaskResumeAll+0x118>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d10b      	bne.n	8007a5e <xTaskResumeAll+0x2e>
	__asm volatile
 8007a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a4a:	f383 8811 	msr	BASEPRI, r3
 8007a4e:	f3bf 8f6f 	isb	sy
 8007a52:	f3bf 8f4f 	dsb	sy
 8007a56:	603b      	str	r3, [r7, #0]
}
 8007a58:	bf00      	nop
 8007a5a:	bf00      	nop
 8007a5c:	e7fd      	b.n	8007a5a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007a5e:	f001 f8db 	bl	8008c18 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007a62:	4b39      	ldr	r3, [pc, #228]	@ (8007b48 <xTaskResumeAll+0x118>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	3b01      	subs	r3, #1
 8007a68:	4a37      	ldr	r2, [pc, #220]	@ (8007b48 <xTaskResumeAll+0x118>)
 8007a6a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a6c:	4b36      	ldr	r3, [pc, #216]	@ (8007b48 <xTaskResumeAll+0x118>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d161      	bne.n	8007b38 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007a74:	4b35      	ldr	r3, [pc, #212]	@ (8007b4c <xTaskResumeAll+0x11c>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d05d      	beq.n	8007b38 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a7c:	e02e      	b.n	8007adc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a7e:	4b34      	ldr	r3, [pc, #208]	@ (8007b50 <xTaskResumeAll+0x120>)
 8007a80:	68db      	ldr	r3, [r3, #12]
 8007a82:	68db      	ldr	r3, [r3, #12]
 8007a84:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	3318      	adds	r3, #24
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f7fe ffba 	bl	8006a04 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	3304      	adds	r3, #4
 8007a94:	4618      	mov	r0, r3
 8007a96:	f7fe ffb5 	bl	8006a04 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	409a      	lsls	r2, r3
 8007aa2:	4b2c      	ldr	r3, [pc, #176]	@ (8007b54 <xTaskResumeAll+0x124>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	4a2a      	ldr	r2, [pc, #168]	@ (8007b54 <xTaskResumeAll+0x124>)
 8007aaa:	6013      	str	r3, [r2, #0]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ab0:	4613      	mov	r3, r2
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	4413      	add	r3, r2
 8007ab6:	009b      	lsls	r3, r3, #2
 8007ab8:	4a27      	ldr	r2, [pc, #156]	@ (8007b58 <xTaskResumeAll+0x128>)
 8007aba:	441a      	add	r2, r3
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	3304      	adds	r3, #4
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	4610      	mov	r0, r2
 8007ac4:	f7fe ff41 	bl	800694a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007acc:	4b23      	ldr	r3, [pc, #140]	@ (8007b5c <xTaskResumeAll+0x12c>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d302      	bcc.n	8007adc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007ad6:	4b22      	ldr	r3, [pc, #136]	@ (8007b60 <xTaskResumeAll+0x130>)
 8007ad8:	2201      	movs	r2, #1
 8007ada:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007adc:	4b1c      	ldr	r3, [pc, #112]	@ (8007b50 <xTaskResumeAll+0x120>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d1cc      	bne.n	8007a7e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d001      	beq.n	8007aee <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007aea:	f000 fb29 	bl	8008140 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007aee:	4b1d      	ldr	r3, [pc, #116]	@ (8007b64 <xTaskResumeAll+0x134>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d010      	beq.n	8007b1c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007afa:	f000 f837 	bl	8007b6c <xTaskIncrementTick>
 8007afe:	4603      	mov	r3, r0
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d002      	beq.n	8007b0a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007b04:	4b16      	ldr	r3, [pc, #88]	@ (8007b60 <xTaskResumeAll+0x130>)
 8007b06:	2201      	movs	r2, #1
 8007b08:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	3b01      	subs	r3, #1
 8007b0e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d1f1      	bne.n	8007afa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007b16:	4b13      	ldr	r3, [pc, #76]	@ (8007b64 <xTaskResumeAll+0x134>)
 8007b18:	2200      	movs	r2, #0
 8007b1a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007b1c:	4b10      	ldr	r3, [pc, #64]	@ (8007b60 <xTaskResumeAll+0x130>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d009      	beq.n	8007b38 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007b24:	2301      	movs	r3, #1
 8007b26:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007b28:	4b0f      	ldr	r3, [pc, #60]	@ (8007b68 <xTaskResumeAll+0x138>)
 8007b2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b2e:	601a      	str	r2, [r3, #0]
 8007b30:	f3bf 8f4f 	dsb	sy
 8007b34:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007b38:	f001 f8a0 	bl	8008c7c <vPortExitCritical>

	return xAlreadyYielded;
 8007b3c:	68bb      	ldr	r3, [r7, #8]
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3710      	adds	r7, #16
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop
 8007b48:	20000958 	.word	0x20000958
 8007b4c:	20000930 	.word	0x20000930
 8007b50:	200008f0 	.word	0x200008f0
 8007b54:	20000938 	.word	0x20000938
 8007b58:	20000834 	.word	0x20000834
 8007b5c:	20000830 	.word	0x20000830
 8007b60:	20000944 	.word	0x20000944
 8007b64:	20000940 	.word	0x20000940
 8007b68:	e000ed04 	.word	0xe000ed04

08007b6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b086      	sub	sp, #24
 8007b70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007b72:	2300      	movs	r3, #0
 8007b74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b76:	4b4f      	ldr	r3, [pc, #316]	@ (8007cb4 <xTaskIncrementTick+0x148>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	f040 808f 	bne.w	8007c9e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007b80:	4b4d      	ldr	r3, [pc, #308]	@ (8007cb8 <xTaskIncrementTick+0x14c>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	3301      	adds	r3, #1
 8007b86:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007b88:	4a4b      	ldr	r2, [pc, #300]	@ (8007cb8 <xTaskIncrementTick+0x14c>)
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d121      	bne.n	8007bd8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007b94:	4b49      	ldr	r3, [pc, #292]	@ (8007cbc <xTaskIncrementTick+0x150>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d00b      	beq.n	8007bb6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8007b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ba2:	f383 8811 	msr	BASEPRI, r3
 8007ba6:	f3bf 8f6f 	isb	sy
 8007baa:	f3bf 8f4f 	dsb	sy
 8007bae:	603b      	str	r3, [r7, #0]
}
 8007bb0:	bf00      	nop
 8007bb2:	bf00      	nop
 8007bb4:	e7fd      	b.n	8007bb2 <xTaskIncrementTick+0x46>
 8007bb6:	4b41      	ldr	r3, [pc, #260]	@ (8007cbc <xTaskIncrementTick+0x150>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	60fb      	str	r3, [r7, #12]
 8007bbc:	4b40      	ldr	r3, [pc, #256]	@ (8007cc0 <xTaskIncrementTick+0x154>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a3e      	ldr	r2, [pc, #248]	@ (8007cbc <xTaskIncrementTick+0x150>)
 8007bc2:	6013      	str	r3, [r2, #0]
 8007bc4:	4a3e      	ldr	r2, [pc, #248]	@ (8007cc0 <xTaskIncrementTick+0x154>)
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	6013      	str	r3, [r2, #0]
 8007bca:	4b3e      	ldr	r3, [pc, #248]	@ (8007cc4 <xTaskIncrementTick+0x158>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	3301      	adds	r3, #1
 8007bd0:	4a3c      	ldr	r2, [pc, #240]	@ (8007cc4 <xTaskIncrementTick+0x158>)
 8007bd2:	6013      	str	r3, [r2, #0]
 8007bd4:	f000 fab4 	bl	8008140 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007bd8:	4b3b      	ldr	r3, [pc, #236]	@ (8007cc8 <xTaskIncrementTick+0x15c>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	693a      	ldr	r2, [r7, #16]
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d348      	bcc.n	8007c74 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007be2:	4b36      	ldr	r3, [pc, #216]	@ (8007cbc <xTaskIncrementTick+0x150>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d104      	bne.n	8007bf6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bec:	4b36      	ldr	r3, [pc, #216]	@ (8007cc8 <xTaskIncrementTick+0x15c>)
 8007bee:	f04f 32ff 	mov.w	r2, #4294967295
 8007bf2:	601a      	str	r2, [r3, #0]
					break;
 8007bf4:	e03e      	b.n	8007c74 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bf6:	4b31      	ldr	r3, [pc, #196]	@ (8007cbc <xTaskIncrementTick+0x150>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	68db      	ldr	r3, [r3, #12]
 8007bfe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007c06:	693a      	ldr	r2, [r7, #16]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d203      	bcs.n	8007c16 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007c0e:	4a2e      	ldr	r2, [pc, #184]	@ (8007cc8 <xTaskIncrementTick+0x15c>)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007c14:	e02e      	b.n	8007c74 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	3304      	adds	r3, #4
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f7fe fef2 	bl	8006a04 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d004      	beq.n	8007c32 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	3318      	adds	r3, #24
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f7fe fee9 	bl	8006a04 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c36:	2201      	movs	r2, #1
 8007c38:	409a      	lsls	r2, r3
 8007c3a:	4b24      	ldr	r3, [pc, #144]	@ (8007ccc <xTaskIncrementTick+0x160>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	4a22      	ldr	r2, [pc, #136]	@ (8007ccc <xTaskIncrementTick+0x160>)
 8007c42:	6013      	str	r3, [r2, #0]
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c48:	4613      	mov	r3, r2
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	4413      	add	r3, r2
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	4a1f      	ldr	r2, [pc, #124]	@ (8007cd0 <xTaskIncrementTick+0x164>)
 8007c52:	441a      	add	r2, r3
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	3304      	adds	r3, #4
 8007c58:	4619      	mov	r1, r3
 8007c5a:	4610      	mov	r0, r2
 8007c5c:	f7fe fe75 	bl	800694a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c64:	4b1b      	ldr	r3, [pc, #108]	@ (8007cd4 <xTaskIncrementTick+0x168>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d3b9      	bcc.n	8007be2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c72:	e7b6      	b.n	8007be2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007c74:	4b17      	ldr	r3, [pc, #92]	@ (8007cd4 <xTaskIncrementTick+0x168>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c7a:	4915      	ldr	r1, [pc, #84]	@ (8007cd0 <xTaskIncrementTick+0x164>)
 8007c7c:	4613      	mov	r3, r2
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	4413      	add	r3, r2
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	440b      	add	r3, r1
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d901      	bls.n	8007c90 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007c90:	4b11      	ldr	r3, [pc, #68]	@ (8007cd8 <xTaskIncrementTick+0x16c>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d007      	beq.n	8007ca8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	617b      	str	r3, [r7, #20]
 8007c9c:	e004      	b.n	8007ca8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007c9e:	4b0f      	ldr	r3, [pc, #60]	@ (8007cdc <xTaskIncrementTick+0x170>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	4a0d      	ldr	r2, [pc, #52]	@ (8007cdc <xTaskIncrementTick+0x170>)
 8007ca6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007ca8:	697b      	ldr	r3, [r7, #20]
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3718      	adds	r7, #24
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
 8007cb2:	bf00      	nop
 8007cb4:	20000958 	.word	0x20000958
 8007cb8:	20000934 	.word	0x20000934
 8007cbc:	200008e8 	.word	0x200008e8
 8007cc0:	200008ec 	.word	0x200008ec
 8007cc4:	20000948 	.word	0x20000948
 8007cc8:	20000950 	.word	0x20000950
 8007ccc:	20000938 	.word	0x20000938
 8007cd0:	20000834 	.word	0x20000834
 8007cd4:	20000830 	.word	0x20000830
 8007cd8:	20000944 	.word	0x20000944
 8007cdc:	20000940 	.word	0x20000940

08007ce0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b087      	sub	sp, #28
 8007ce4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007ce6:	4b2a      	ldr	r3, [pc, #168]	@ (8007d90 <vTaskSwitchContext+0xb0>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d003      	beq.n	8007cf6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007cee:	4b29      	ldr	r3, [pc, #164]	@ (8007d94 <vTaskSwitchContext+0xb4>)
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007cf4:	e045      	b.n	8007d82 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8007cf6:	4b27      	ldr	r3, [pc, #156]	@ (8007d94 <vTaskSwitchContext+0xb4>)
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cfc:	4b26      	ldr	r3, [pc, #152]	@ (8007d98 <vTaskSwitchContext+0xb8>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	fab3 f383 	clz	r3, r3
 8007d08:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007d0a:	7afb      	ldrb	r3, [r7, #11]
 8007d0c:	f1c3 031f 	rsb	r3, r3, #31
 8007d10:	617b      	str	r3, [r7, #20]
 8007d12:	4922      	ldr	r1, [pc, #136]	@ (8007d9c <vTaskSwitchContext+0xbc>)
 8007d14:	697a      	ldr	r2, [r7, #20]
 8007d16:	4613      	mov	r3, r2
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	4413      	add	r3, r2
 8007d1c:	009b      	lsls	r3, r3, #2
 8007d1e:	440b      	add	r3, r1
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d10b      	bne.n	8007d3e <vTaskSwitchContext+0x5e>
	__asm volatile
 8007d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d2a:	f383 8811 	msr	BASEPRI, r3
 8007d2e:	f3bf 8f6f 	isb	sy
 8007d32:	f3bf 8f4f 	dsb	sy
 8007d36:	607b      	str	r3, [r7, #4]
}
 8007d38:	bf00      	nop
 8007d3a:	bf00      	nop
 8007d3c:	e7fd      	b.n	8007d3a <vTaskSwitchContext+0x5a>
 8007d3e:	697a      	ldr	r2, [r7, #20]
 8007d40:	4613      	mov	r3, r2
 8007d42:	009b      	lsls	r3, r3, #2
 8007d44:	4413      	add	r3, r2
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	4a14      	ldr	r2, [pc, #80]	@ (8007d9c <vTaskSwitchContext+0xbc>)
 8007d4a:	4413      	add	r3, r2
 8007d4c:	613b      	str	r3, [r7, #16]
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	685a      	ldr	r2, [r3, #4]
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	605a      	str	r2, [r3, #4]
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	685a      	ldr	r2, [r3, #4]
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	3308      	adds	r3, #8
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d104      	bne.n	8007d6e <vTaskSwitchContext+0x8e>
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	685a      	ldr	r2, [r3, #4]
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	605a      	str	r2, [r3, #4]
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	4a0a      	ldr	r2, [pc, #40]	@ (8007da0 <vTaskSwitchContext+0xc0>)
 8007d76:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007d78:	4b09      	ldr	r3, [pc, #36]	@ (8007da0 <vTaskSwitchContext+0xc0>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	334c      	adds	r3, #76	@ 0x4c
 8007d7e:	4a09      	ldr	r2, [pc, #36]	@ (8007da4 <vTaskSwitchContext+0xc4>)
 8007d80:	6013      	str	r3, [r2, #0]
}
 8007d82:	bf00      	nop
 8007d84:	371c      	adds	r7, #28
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr
 8007d8e:	bf00      	nop
 8007d90:	20000958 	.word	0x20000958
 8007d94:	20000944 	.word	0x20000944
 8007d98:	20000938 	.word	0x20000938
 8007d9c:	20000834 	.word	0x20000834
 8007da0:	20000830 	.word	0x20000830
 8007da4:	20000194 	.word	0x20000194

08007da8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d10b      	bne.n	8007dd0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dbc:	f383 8811 	msr	BASEPRI, r3
 8007dc0:	f3bf 8f6f 	isb	sy
 8007dc4:	f3bf 8f4f 	dsb	sy
 8007dc8:	60fb      	str	r3, [r7, #12]
}
 8007dca:	bf00      	nop
 8007dcc:	bf00      	nop
 8007dce:	e7fd      	b.n	8007dcc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007dd0:	4b07      	ldr	r3, [pc, #28]	@ (8007df0 <vTaskPlaceOnEventList+0x48>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	3318      	adds	r3, #24
 8007dd6:	4619      	mov	r1, r3
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f7fe fdda 	bl	8006992 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007dde:	2101      	movs	r1, #1
 8007de0:	6838      	ldr	r0, [r7, #0]
 8007de2:	f000 fd81 	bl	80088e8 <prvAddCurrentTaskToDelayedList>
}
 8007de6:	bf00      	nop
 8007de8:	3710      	adds	r7, #16
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	20000830 	.word	0x20000830

08007df4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b086      	sub	sp, #24
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	68db      	ldr	r3, [r3, #12]
 8007e02:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d10b      	bne.n	8007e22 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007e0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e0e:	f383 8811 	msr	BASEPRI, r3
 8007e12:	f3bf 8f6f 	isb	sy
 8007e16:	f3bf 8f4f 	dsb	sy
 8007e1a:	60fb      	str	r3, [r7, #12]
}
 8007e1c:	bf00      	nop
 8007e1e:	bf00      	nop
 8007e20:	e7fd      	b.n	8007e1e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	3318      	adds	r3, #24
 8007e26:	4618      	mov	r0, r3
 8007e28:	f7fe fdec 	bl	8006a04 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e2c:	4b1d      	ldr	r3, [pc, #116]	@ (8007ea4 <xTaskRemoveFromEventList+0xb0>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d11c      	bne.n	8007e6e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	3304      	adds	r3, #4
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f7fe fde3 	bl	8006a04 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e42:	2201      	movs	r2, #1
 8007e44:	409a      	lsls	r2, r3
 8007e46:	4b18      	ldr	r3, [pc, #96]	@ (8007ea8 <xTaskRemoveFromEventList+0xb4>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	4a16      	ldr	r2, [pc, #88]	@ (8007ea8 <xTaskRemoveFromEventList+0xb4>)
 8007e4e:	6013      	str	r3, [r2, #0]
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e54:	4613      	mov	r3, r2
 8007e56:	009b      	lsls	r3, r3, #2
 8007e58:	4413      	add	r3, r2
 8007e5a:	009b      	lsls	r3, r3, #2
 8007e5c:	4a13      	ldr	r2, [pc, #76]	@ (8007eac <xTaskRemoveFromEventList+0xb8>)
 8007e5e:	441a      	add	r2, r3
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	3304      	adds	r3, #4
 8007e64:	4619      	mov	r1, r3
 8007e66:	4610      	mov	r0, r2
 8007e68:	f7fe fd6f 	bl	800694a <vListInsertEnd>
 8007e6c:	e005      	b.n	8007e7a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	3318      	adds	r3, #24
 8007e72:	4619      	mov	r1, r3
 8007e74:	480e      	ldr	r0, [pc, #56]	@ (8007eb0 <xTaskRemoveFromEventList+0xbc>)
 8007e76:	f7fe fd68 	bl	800694a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8007eb4 <xTaskRemoveFromEventList+0xc0>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d905      	bls.n	8007e94 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8007eb8 <xTaskRemoveFromEventList+0xc4>)
 8007e8e:	2201      	movs	r2, #1
 8007e90:	601a      	str	r2, [r3, #0]
 8007e92:	e001      	b.n	8007e98 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007e94:	2300      	movs	r3, #0
 8007e96:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007e98:	697b      	ldr	r3, [r7, #20]
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3718      	adds	r7, #24
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}
 8007ea2:	bf00      	nop
 8007ea4:	20000958 	.word	0x20000958
 8007ea8:	20000938 	.word	0x20000938
 8007eac:	20000834 	.word	0x20000834
 8007eb0:	200008f0 	.word	0x200008f0
 8007eb4:	20000830 	.word	0x20000830
 8007eb8:	20000944 	.word	0x20000944

08007ebc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007ec4:	4b06      	ldr	r3, [pc, #24]	@ (8007ee0 <vTaskInternalSetTimeOutState+0x24>)
 8007ec6:	681a      	ldr	r2, [r3, #0]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007ecc:	4b05      	ldr	r3, [pc, #20]	@ (8007ee4 <vTaskInternalSetTimeOutState+0x28>)
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	605a      	str	r2, [r3, #4]
}
 8007ed4:	bf00      	nop
 8007ed6:	370c      	adds	r7, #12
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr
 8007ee0:	20000948 	.word	0x20000948
 8007ee4:	20000934 	.word	0x20000934

08007ee8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b088      	sub	sp, #32
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d10b      	bne.n	8007f10 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007ef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007efc:	f383 8811 	msr	BASEPRI, r3
 8007f00:	f3bf 8f6f 	isb	sy
 8007f04:	f3bf 8f4f 	dsb	sy
 8007f08:	613b      	str	r3, [r7, #16]
}
 8007f0a:	bf00      	nop
 8007f0c:	bf00      	nop
 8007f0e:	e7fd      	b.n	8007f0c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d10b      	bne.n	8007f2e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f1a:	f383 8811 	msr	BASEPRI, r3
 8007f1e:	f3bf 8f6f 	isb	sy
 8007f22:	f3bf 8f4f 	dsb	sy
 8007f26:	60fb      	str	r3, [r7, #12]
}
 8007f28:	bf00      	nop
 8007f2a:	bf00      	nop
 8007f2c:	e7fd      	b.n	8007f2a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007f2e:	f000 fe73 	bl	8008c18 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007f32:	4b1d      	ldr	r3, [pc, #116]	@ (8007fa8 <xTaskCheckForTimeOut+0xc0>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	69ba      	ldr	r2, [r7, #24]
 8007f3e:	1ad3      	subs	r3, r2, r3
 8007f40:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f4a:	d102      	bne.n	8007f52 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	61fb      	str	r3, [r7, #28]
 8007f50:	e023      	b.n	8007f9a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681a      	ldr	r2, [r3, #0]
 8007f56:	4b15      	ldr	r3, [pc, #84]	@ (8007fac <xTaskCheckForTimeOut+0xc4>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d007      	beq.n	8007f6e <xTaskCheckForTimeOut+0x86>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	69ba      	ldr	r2, [r7, #24]
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d302      	bcc.n	8007f6e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007f68:	2301      	movs	r3, #1
 8007f6a:	61fb      	str	r3, [r7, #28]
 8007f6c:	e015      	b.n	8007f9a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	697a      	ldr	r2, [r7, #20]
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d20b      	bcs.n	8007f90 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	681a      	ldr	r2, [r3, #0]
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	1ad2      	subs	r2, r2, r3
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f7ff ff99 	bl	8007ebc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	61fb      	str	r3, [r7, #28]
 8007f8e:	e004      	b.n	8007f9a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	2200      	movs	r2, #0
 8007f94:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007f96:	2301      	movs	r3, #1
 8007f98:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007f9a:	f000 fe6f 	bl	8008c7c <vPortExitCritical>

	return xReturn;
 8007f9e:	69fb      	ldr	r3, [r7, #28]
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3720      	adds	r7, #32
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}
 8007fa8:	20000934 	.word	0x20000934
 8007fac:	20000948 	.word	0x20000948

08007fb0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007fb4:	4b03      	ldr	r3, [pc, #12]	@ (8007fc4 <vTaskMissedYield+0x14>)
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	601a      	str	r2, [r3, #0]
}
 8007fba:	bf00      	nop
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr
 8007fc4:	20000944 	.word	0x20000944

08007fc8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007fd0:	f000 f852 	bl	8008078 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007fd4:	4b06      	ldr	r3, [pc, #24]	@ (8007ff0 <prvIdleTask+0x28>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d9f9      	bls.n	8007fd0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007fdc:	4b05      	ldr	r3, [pc, #20]	@ (8007ff4 <prvIdleTask+0x2c>)
 8007fde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fe2:	601a      	str	r2, [r3, #0]
 8007fe4:	f3bf 8f4f 	dsb	sy
 8007fe8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007fec:	e7f0      	b.n	8007fd0 <prvIdleTask+0x8>
 8007fee:	bf00      	nop
 8007ff0:	20000834 	.word	0x20000834
 8007ff4:	e000ed04 	.word	0xe000ed04

08007ff8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b082      	sub	sp, #8
 8007ffc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ffe:	2300      	movs	r3, #0
 8008000:	607b      	str	r3, [r7, #4]
 8008002:	e00c      	b.n	800801e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	4613      	mov	r3, r2
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	4413      	add	r3, r2
 800800c:	009b      	lsls	r3, r3, #2
 800800e:	4a12      	ldr	r2, [pc, #72]	@ (8008058 <prvInitialiseTaskLists+0x60>)
 8008010:	4413      	add	r3, r2
 8008012:	4618      	mov	r0, r3
 8008014:	f7fe fc6c 	bl	80068f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	3301      	adds	r3, #1
 800801c:	607b      	str	r3, [r7, #4]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2b06      	cmp	r3, #6
 8008022:	d9ef      	bls.n	8008004 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008024:	480d      	ldr	r0, [pc, #52]	@ (800805c <prvInitialiseTaskLists+0x64>)
 8008026:	f7fe fc63 	bl	80068f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800802a:	480d      	ldr	r0, [pc, #52]	@ (8008060 <prvInitialiseTaskLists+0x68>)
 800802c:	f7fe fc60 	bl	80068f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008030:	480c      	ldr	r0, [pc, #48]	@ (8008064 <prvInitialiseTaskLists+0x6c>)
 8008032:	f7fe fc5d 	bl	80068f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008036:	480c      	ldr	r0, [pc, #48]	@ (8008068 <prvInitialiseTaskLists+0x70>)
 8008038:	f7fe fc5a 	bl	80068f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800803c:	480b      	ldr	r0, [pc, #44]	@ (800806c <prvInitialiseTaskLists+0x74>)
 800803e:	f7fe fc57 	bl	80068f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008042:	4b0b      	ldr	r3, [pc, #44]	@ (8008070 <prvInitialiseTaskLists+0x78>)
 8008044:	4a05      	ldr	r2, [pc, #20]	@ (800805c <prvInitialiseTaskLists+0x64>)
 8008046:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008048:	4b0a      	ldr	r3, [pc, #40]	@ (8008074 <prvInitialiseTaskLists+0x7c>)
 800804a:	4a05      	ldr	r2, [pc, #20]	@ (8008060 <prvInitialiseTaskLists+0x68>)
 800804c:	601a      	str	r2, [r3, #0]
}
 800804e:	bf00      	nop
 8008050:	3708      	adds	r7, #8
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
 8008056:	bf00      	nop
 8008058:	20000834 	.word	0x20000834
 800805c:	200008c0 	.word	0x200008c0
 8008060:	200008d4 	.word	0x200008d4
 8008064:	200008f0 	.word	0x200008f0
 8008068:	20000904 	.word	0x20000904
 800806c:	2000091c 	.word	0x2000091c
 8008070:	200008e8 	.word	0x200008e8
 8008074:	200008ec 	.word	0x200008ec

08008078 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800807e:	e019      	b.n	80080b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008080:	f000 fdca 	bl	8008c18 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008084:	4b10      	ldr	r3, [pc, #64]	@ (80080c8 <prvCheckTasksWaitingTermination+0x50>)
 8008086:	68db      	ldr	r3, [r3, #12]
 8008088:	68db      	ldr	r3, [r3, #12]
 800808a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	3304      	adds	r3, #4
 8008090:	4618      	mov	r0, r3
 8008092:	f7fe fcb7 	bl	8006a04 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008096:	4b0d      	ldr	r3, [pc, #52]	@ (80080cc <prvCheckTasksWaitingTermination+0x54>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	3b01      	subs	r3, #1
 800809c:	4a0b      	ldr	r2, [pc, #44]	@ (80080cc <prvCheckTasksWaitingTermination+0x54>)
 800809e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80080a0:	4b0b      	ldr	r3, [pc, #44]	@ (80080d0 <prvCheckTasksWaitingTermination+0x58>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	3b01      	subs	r3, #1
 80080a6:	4a0a      	ldr	r2, [pc, #40]	@ (80080d0 <prvCheckTasksWaitingTermination+0x58>)
 80080a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80080aa:	f000 fde7 	bl	8008c7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 f810 	bl	80080d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80080b4:	4b06      	ldr	r3, [pc, #24]	@ (80080d0 <prvCheckTasksWaitingTermination+0x58>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d1e1      	bne.n	8008080 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80080bc:	bf00      	nop
 80080be:	bf00      	nop
 80080c0:	3708      	adds	r7, #8
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}
 80080c6:	bf00      	nop
 80080c8:	20000904 	.word	0x20000904
 80080cc:	20000930 	.word	0x20000930
 80080d0:	20000918 	.word	0x20000918

080080d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b084      	sub	sp, #16
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	334c      	adds	r3, #76	@ 0x4c
 80080e0:	4618      	mov	r0, r3
 80080e2:	f002 f911 	bl	800a308 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d108      	bne.n	8008102 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080f4:	4618      	mov	r0, r3
 80080f6:	f000 ff7f 	bl	8008ff8 <vPortFree>
				vPortFree( pxTCB );
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 ff7c 	bl	8008ff8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008100:	e019      	b.n	8008136 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8008108:	2b01      	cmp	r3, #1
 800810a:	d103      	bne.n	8008114 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f000 ff73 	bl	8008ff8 <vPortFree>
	}
 8008112:	e010      	b.n	8008136 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800811a:	2b02      	cmp	r3, #2
 800811c:	d00b      	beq.n	8008136 <prvDeleteTCB+0x62>
	__asm volatile
 800811e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008122:	f383 8811 	msr	BASEPRI, r3
 8008126:	f3bf 8f6f 	isb	sy
 800812a:	f3bf 8f4f 	dsb	sy
 800812e:	60fb      	str	r3, [r7, #12]
}
 8008130:	bf00      	nop
 8008132:	bf00      	nop
 8008134:	e7fd      	b.n	8008132 <prvDeleteTCB+0x5e>
	}
 8008136:	bf00      	nop
 8008138:	3710      	adds	r7, #16
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
	...

08008140 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008140:	b480      	push	{r7}
 8008142:	b083      	sub	sp, #12
 8008144:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008146:	4b0c      	ldr	r3, [pc, #48]	@ (8008178 <prvResetNextTaskUnblockTime+0x38>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d104      	bne.n	800815a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008150:	4b0a      	ldr	r3, [pc, #40]	@ (800817c <prvResetNextTaskUnblockTime+0x3c>)
 8008152:	f04f 32ff 	mov.w	r2, #4294967295
 8008156:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008158:	e008      	b.n	800816c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800815a:	4b07      	ldr	r3, [pc, #28]	@ (8008178 <prvResetNextTaskUnblockTime+0x38>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	68db      	ldr	r3, [r3, #12]
 8008160:	68db      	ldr	r3, [r3, #12]
 8008162:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	4a04      	ldr	r2, [pc, #16]	@ (800817c <prvResetNextTaskUnblockTime+0x3c>)
 800816a:	6013      	str	r3, [r2, #0]
}
 800816c:	bf00      	nop
 800816e:	370c      	adds	r7, #12
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr
 8008178:	200008e8 	.word	0x200008e8
 800817c:	20000950 	.word	0x20000950

08008180 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008180:	b480      	push	{r7}
 8008182:	b083      	sub	sp, #12
 8008184:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008186:	4b0b      	ldr	r3, [pc, #44]	@ (80081b4 <xTaskGetSchedulerState+0x34>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d102      	bne.n	8008194 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800818e:	2301      	movs	r3, #1
 8008190:	607b      	str	r3, [r7, #4]
 8008192:	e008      	b.n	80081a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008194:	4b08      	ldr	r3, [pc, #32]	@ (80081b8 <xTaskGetSchedulerState+0x38>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d102      	bne.n	80081a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800819c:	2302      	movs	r3, #2
 800819e:	607b      	str	r3, [r7, #4]
 80081a0:	e001      	b.n	80081a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80081a2:	2300      	movs	r3, #0
 80081a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80081a6:	687b      	ldr	r3, [r7, #4]
	}
 80081a8:	4618      	mov	r0, r3
 80081aa:	370c      	adds	r7, #12
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr
 80081b4:	2000093c 	.word	0x2000093c
 80081b8:	20000958 	.word	0x20000958

080081bc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b084      	sub	sp, #16
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80081c8:	2300      	movs	r3, #0
 80081ca:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d05e      	beq.n	8008290 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081d6:	4b31      	ldr	r3, [pc, #196]	@ (800829c <xTaskPriorityInherit+0xe0>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081dc:	429a      	cmp	r2, r3
 80081de:	d24e      	bcs.n	800827e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	699b      	ldr	r3, [r3, #24]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	db06      	blt.n	80081f6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081e8:	4b2c      	ldr	r3, [pc, #176]	@ (800829c <xTaskPriorityInherit+0xe0>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081ee:	f1c3 0207 	rsb	r2, r3, #7
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	6959      	ldr	r1, [r3, #20]
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081fe:	4613      	mov	r3, r2
 8008200:	009b      	lsls	r3, r3, #2
 8008202:	4413      	add	r3, r2
 8008204:	009b      	lsls	r3, r3, #2
 8008206:	4a26      	ldr	r2, [pc, #152]	@ (80082a0 <xTaskPriorityInherit+0xe4>)
 8008208:	4413      	add	r3, r2
 800820a:	4299      	cmp	r1, r3
 800820c:	d12f      	bne.n	800826e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	3304      	adds	r3, #4
 8008212:	4618      	mov	r0, r3
 8008214:	f7fe fbf6 	bl	8006a04 <uxListRemove>
 8008218:	4603      	mov	r3, r0
 800821a:	2b00      	cmp	r3, #0
 800821c:	d10a      	bne.n	8008234 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008222:	2201      	movs	r2, #1
 8008224:	fa02 f303 	lsl.w	r3, r2, r3
 8008228:	43da      	mvns	r2, r3
 800822a:	4b1e      	ldr	r3, [pc, #120]	@ (80082a4 <xTaskPriorityInherit+0xe8>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4013      	ands	r3, r2
 8008230:	4a1c      	ldr	r2, [pc, #112]	@ (80082a4 <xTaskPriorityInherit+0xe8>)
 8008232:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008234:	4b19      	ldr	r3, [pc, #100]	@ (800829c <xTaskPriorityInherit+0xe0>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008242:	2201      	movs	r2, #1
 8008244:	409a      	lsls	r2, r3
 8008246:	4b17      	ldr	r3, [pc, #92]	@ (80082a4 <xTaskPriorityInherit+0xe8>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4313      	orrs	r3, r2
 800824c:	4a15      	ldr	r2, [pc, #84]	@ (80082a4 <xTaskPriorityInherit+0xe8>)
 800824e:	6013      	str	r3, [r2, #0]
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008254:	4613      	mov	r3, r2
 8008256:	009b      	lsls	r3, r3, #2
 8008258:	4413      	add	r3, r2
 800825a:	009b      	lsls	r3, r3, #2
 800825c:	4a10      	ldr	r2, [pc, #64]	@ (80082a0 <xTaskPriorityInherit+0xe4>)
 800825e:	441a      	add	r2, r3
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	3304      	adds	r3, #4
 8008264:	4619      	mov	r1, r3
 8008266:	4610      	mov	r0, r2
 8008268:	f7fe fb6f 	bl	800694a <vListInsertEnd>
 800826c:	e004      	b.n	8008278 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800826e:	4b0b      	ldr	r3, [pc, #44]	@ (800829c <xTaskPriorityInherit+0xe0>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008278:	2301      	movs	r3, #1
 800827a:	60fb      	str	r3, [r7, #12]
 800827c:	e008      	b.n	8008290 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008282:	4b06      	ldr	r3, [pc, #24]	@ (800829c <xTaskPriorityInherit+0xe0>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008288:	429a      	cmp	r2, r3
 800828a:	d201      	bcs.n	8008290 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800828c:	2301      	movs	r3, #1
 800828e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008290:	68fb      	ldr	r3, [r7, #12]
	}
 8008292:	4618      	mov	r0, r3
 8008294:	3710      	adds	r7, #16
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}
 800829a:	bf00      	nop
 800829c:	20000830 	.word	0x20000830
 80082a0:	20000834 	.word	0x20000834
 80082a4:	20000938 	.word	0x20000938

080082a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b086      	sub	sp, #24
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80082b4:	2300      	movs	r3, #0
 80082b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d070      	beq.n	80083a0 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80082be:	4b3b      	ldr	r3, [pc, #236]	@ (80083ac <xTaskPriorityDisinherit+0x104>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	693a      	ldr	r2, [r7, #16]
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d00b      	beq.n	80082e0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80082c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082cc:	f383 8811 	msr	BASEPRI, r3
 80082d0:	f3bf 8f6f 	isb	sy
 80082d4:	f3bf 8f4f 	dsb	sy
 80082d8:	60fb      	str	r3, [r7, #12]
}
 80082da:	bf00      	nop
 80082dc:	bf00      	nop
 80082de:	e7fd      	b.n	80082dc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d10b      	bne.n	8008300 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80082e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082ec:	f383 8811 	msr	BASEPRI, r3
 80082f0:	f3bf 8f6f 	isb	sy
 80082f4:	f3bf 8f4f 	dsb	sy
 80082f8:	60bb      	str	r3, [r7, #8]
}
 80082fa:	bf00      	nop
 80082fc:	bf00      	nop
 80082fe:	e7fd      	b.n	80082fc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008304:	1e5a      	subs	r2, r3, #1
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008312:	429a      	cmp	r2, r3
 8008314:	d044      	beq.n	80083a0 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800831a:	2b00      	cmp	r3, #0
 800831c:	d140      	bne.n	80083a0 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	3304      	adds	r3, #4
 8008322:	4618      	mov	r0, r3
 8008324:	f7fe fb6e 	bl	8006a04 <uxListRemove>
 8008328:	4603      	mov	r3, r0
 800832a:	2b00      	cmp	r3, #0
 800832c:	d115      	bne.n	800835a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008332:	491f      	ldr	r1, [pc, #124]	@ (80083b0 <xTaskPriorityDisinherit+0x108>)
 8008334:	4613      	mov	r3, r2
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	4413      	add	r3, r2
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	440b      	add	r3, r1
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d10a      	bne.n	800835a <xTaskPriorityDisinherit+0xb2>
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008348:	2201      	movs	r2, #1
 800834a:	fa02 f303 	lsl.w	r3, r2, r3
 800834e:	43da      	mvns	r2, r3
 8008350:	4b18      	ldr	r3, [pc, #96]	@ (80083b4 <xTaskPriorityDisinherit+0x10c>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4013      	ands	r3, r2
 8008356:	4a17      	ldr	r2, [pc, #92]	@ (80083b4 <xTaskPriorityDisinherit+0x10c>)
 8008358:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008366:	f1c3 0207 	rsb	r2, r3, #7
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008372:	2201      	movs	r2, #1
 8008374:	409a      	lsls	r2, r3
 8008376:	4b0f      	ldr	r3, [pc, #60]	@ (80083b4 <xTaskPriorityDisinherit+0x10c>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4313      	orrs	r3, r2
 800837c:	4a0d      	ldr	r2, [pc, #52]	@ (80083b4 <xTaskPriorityDisinherit+0x10c>)
 800837e:	6013      	str	r3, [r2, #0]
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008384:	4613      	mov	r3, r2
 8008386:	009b      	lsls	r3, r3, #2
 8008388:	4413      	add	r3, r2
 800838a:	009b      	lsls	r3, r3, #2
 800838c:	4a08      	ldr	r2, [pc, #32]	@ (80083b0 <xTaskPriorityDisinherit+0x108>)
 800838e:	441a      	add	r2, r3
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	3304      	adds	r3, #4
 8008394:	4619      	mov	r1, r3
 8008396:	4610      	mov	r0, r2
 8008398:	f7fe fad7 	bl	800694a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800839c:	2301      	movs	r3, #1
 800839e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80083a0:	697b      	ldr	r3, [r7, #20]
	}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3718      	adds	r7, #24
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop
 80083ac:	20000830 	.word	0x20000830
 80083b0:	20000834 	.word	0x20000834
 80083b4:	20000938 	.word	0x20000938

080083b8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b088      	sub	sp, #32
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80083c6:	2301      	movs	r3, #1
 80083c8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d079      	beq.n	80084c4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80083d0:	69bb      	ldr	r3, [r7, #24]
 80083d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d10b      	bne.n	80083f0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80083d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083dc:	f383 8811 	msr	BASEPRI, r3
 80083e0:	f3bf 8f6f 	isb	sy
 80083e4:	f3bf 8f4f 	dsb	sy
 80083e8:	60fb      	str	r3, [r7, #12]
}
 80083ea:	bf00      	nop
 80083ec:	bf00      	nop
 80083ee:	e7fd      	b.n	80083ec <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80083f0:	69bb      	ldr	r3, [r7, #24]
 80083f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083f4:	683a      	ldr	r2, [r7, #0]
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d902      	bls.n	8008400 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	61fb      	str	r3, [r7, #28]
 80083fe:	e002      	b.n	8008406 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008400:	69bb      	ldr	r3, [r7, #24]
 8008402:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008404:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008406:	69bb      	ldr	r3, [r7, #24]
 8008408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800840a:	69fa      	ldr	r2, [r7, #28]
 800840c:	429a      	cmp	r2, r3
 800840e:	d059      	beq.n	80084c4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008410:	69bb      	ldr	r3, [r7, #24]
 8008412:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008414:	697a      	ldr	r2, [r7, #20]
 8008416:	429a      	cmp	r2, r3
 8008418:	d154      	bne.n	80084c4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800841a:	4b2c      	ldr	r3, [pc, #176]	@ (80084cc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	69ba      	ldr	r2, [r7, #24]
 8008420:	429a      	cmp	r2, r3
 8008422:	d10b      	bne.n	800843c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8008424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008428:	f383 8811 	msr	BASEPRI, r3
 800842c:	f3bf 8f6f 	isb	sy
 8008430:	f3bf 8f4f 	dsb	sy
 8008434:	60bb      	str	r3, [r7, #8]
}
 8008436:	bf00      	nop
 8008438:	bf00      	nop
 800843a:	e7fd      	b.n	8008438 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800843c:	69bb      	ldr	r3, [r7, #24]
 800843e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008440:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008442:	69bb      	ldr	r3, [r7, #24]
 8008444:	69fa      	ldr	r2, [r7, #28]
 8008446:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008448:	69bb      	ldr	r3, [r7, #24]
 800844a:	699b      	ldr	r3, [r3, #24]
 800844c:	2b00      	cmp	r3, #0
 800844e:	db04      	blt.n	800845a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008450:	69fb      	ldr	r3, [r7, #28]
 8008452:	f1c3 0207 	rsb	r2, r3, #7
 8008456:	69bb      	ldr	r3, [r7, #24]
 8008458:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800845a:	69bb      	ldr	r3, [r7, #24]
 800845c:	6959      	ldr	r1, [r3, #20]
 800845e:	693a      	ldr	r2, [r7, #16]
 8008460:	4613      	mov	r3, r2
 8008462:	009b      	lsls	r3, r3, #2
 8008464:	4413      	add	r3, r2
 8008466:	009b      	lsls	r3, r3, #2
 8008468:	4a19      	ldr	r2, [pc, #100]	@ (80084d0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800846a:	4413      	add	r3, r2
 800846c:	4299      	cmp	r1, r3
 800846e:	d129      	bne.n	80084c4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008470:	69bb      	ldr	r3, [r7, #24]
 8008472:	3304      	adds	r3, #4
 8008474:	4618      	mov	r0, r3
 8008476:	f7fe fac5 	bl	8006a04 <uxListRemove>
 800847a:	4603      	mov	r3, r0
 800847c:	2b00      	cmp	r3, #0
 800847e:	d10a      	bne.n	8008496 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8008480:	69bb      	ldr	r3, [r7, #24]
 8008482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008484:	2201      	movs	r2, #1
 8008486:	fa02 f303 	lsl.w	r3, r2, r3
 800848a:	43da      	mvns	r2, r3
 800848c:	4b11      	ldr	r3, [pc, #68]	@ (80084d4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4013      	ands	r3, r2
 8008492:	4a10      	ldr	r2, [pc, #64]	@ (80084d4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8008494:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008496:	69bb      	ldr	r3, [r7, #24]
 8008498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800849a:	2201      	movs	r2, #1
 800849c:	409a      	lsls	r2, r3
 800849e:	4b0d      	ldr	r3, [pc, #52]	@ (80084d4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4313      	orrs	r3, r2
 80084a4:	4a0b      	ldr	r2, [pc, #44]	@ (80084d4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80084a6:	6013      	str	r3, [r2, #0]
 80084a8:	69bb      	ldr	r3, [r7, #24]
 80084aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084ac:	4613      	mov	r3, r2
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	4413      	add	r3, r2
 80084b2:	009b      	lsls	r3, r3, #2
 80084b4:	4a06      	ldr	r2, [pc, #24]	@ (80084d0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80084b6:	441a      	add	r2, r3
 80084b8:	69bb      	ldr	r3, [r7, #24]
 80084ba:	3304      	adds	r3, #4
 80084bc:	4619      	mov	r1, r3
 80084be:	4610      	mov	r0, r2
 80084c0:	f7fe fa43 	bl	800694a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80084c4:	bf00      	nop
 80084c6:	3720      	adds	r7, #32
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}
 80084cc:	20000830 	.word	0x20000830
 80084d0:	20000834 	.word	0x20000834
 80084d4:	20000938 	.word	0x20000938

080084d8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80084d8:	b480      	push	{r7}
 80084da:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80084dc:	4b07      	ldr	r3, [pc, #28]	@ (80084fc <pvTaskIncrementMutexHeldCount+0x24>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d004      	beq.n	80084ee <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80084e4:	4b05      	ldr	r3, [pc, #20]	@ (80084fc <pvTaskIncrementMutexHeldCount+0x24>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80084ea:	3201      	adds	r2, #1
 80084ec:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80084ee:	4b03      	ldr	r3, [pc, #12]	@ (80084fc <pvTaskIncrementMutexHeldCount+0x24>)
 80084f0:	681b      	ldr	r3, [r3, #0]
	}
 80084f2:	4618      	mov	r0, r3
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr
 80084fc:	20000830 	.word	0x20000830

08008500 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800850a:	f000 fb85 	bl	8008c18 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800850e:	4b20      	ldr	r3, [pc, #128]	@ (8008590 <ulTaskNotifyTake+0x90>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008516:	2b00      	cmp	r3, #0
 8008518:	d113      	bne.n	8008542 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800851a:	4b1d      	ldr	r3, [pc, #116]	@ (8008590 <ulTaskNotifyTake+0x90>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	2201      	movs	r2, #1
 8008520:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d00b      	beq.n	8008542 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800852a:	2101      	movs	r1, #1
 800852c:	6838      	ldr	r0, [r7, #0]
 800852e:	f000 f9db 	bl	80088e8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8008532:	4b18      	ldr	r3, [pc, #96]	@ (8008594 <ulTaskNotifyTake+0x94>)
 8008534:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008538:	601a      	str	r2, [r3, #0]
 800853a:	f3bf 8f4f 	dsb	sy
 800853e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008542:	f000 fb9b 	bl	8008c7c <vPortExitCritical>

		taskENTER_CRITICAL();
 8008546:	f000 fb67 	bl	8008c18 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800854a:	4b11      	ldr	r3, [pc, #68]	@ (8008590 <ulTaskNotifyTake+0x90>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008552:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d00e      	beq.n	8008578 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d005      	beq.n	800856c <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8008560:	4b0b      	ldr	r3, [pc, #44]	@ (8008590 <ulTaskNotifyTake+0x90>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	2200      	movs	r2, #0
 8008566:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800856a:	e005      	b.n	8008578 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800856c:	4b08      	ldr	r3, [pc, #32]	@ (8008590 <ulTaskNotifyTake+0x90>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	68fa      	ldr	r2, [r7, #12]
 8008572:	3a01      	subs	r2, #1
 8008574:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008578:	4b05      	ldr	r3, [pc, #20]	@ (8008590 <ulTaskNotifyTake+0x90>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	2200      	movs	r2, #0
 800857e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
		}
		taskEXIT_CRITICAL();
 8008582:	f000 fb7b 	bl	8008c7c <vPortExitCritical>

		return ulReturn;
 8008586:	68fb      	ldr	r3, [r7, #12]
	}
 8008588:	4618      	mov	r0, r3
 800858a:	3710      	adds	r7, #16
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}
 8008590:	20000830 	.word	0x20000830
 8008594:	e000ed04 	.word	0xe000ed04

08008598 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8008598:	b580      	push	{r7, lr}
 800859a:	b08a      	sub	sp, #40	@ 0x28
 800859c:	af00      	add	r7, sp, #0
 800859e:	60f8      	str	r0, [r7, #12]
 80085a0:	60b9      	str	r1, [r7, #8]
 80085a2:	603b      	str	r3, [r7, #0]
 80085a4:	4613      	mov	r3, r2
 80085a6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80085a8:	2301      	movs	r3, #1
 80085aa:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d10b      	bne.n	80085ca <xTaskGenericNotify+0x32>
	__asm volatile
 80085b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085b6:	f383 8811 	msr	BASEPRI, r3
 80085ba:	f3bf 8f6f 	isb	sy
 80085be:	f3bf 8f4f 	dsb	sy
 80085c2:	61bb      	str	r3, [r7, #24]
}
 80085c4:	bf00      	nop
 80085c6:	bf00      	nop
 80085c8:	e7fd      	b.n	80085c6 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80085ce:	f000 fb23 	bl	8008c18 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d004      	beq.n	80085e2 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80085d8:	6a3b      	ldr	r3, [r7, #32]
 80085da:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80085e2:	6a3b      	ldr	r3, [r7, #32]
 80085e4:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 80085e8:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80085ea:	6a3b      	ldr	r3, [r7, #32]
 80085ec:	2202      	movs	r2, #2
 80085ee:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 80085f2:	79fb      	ldrb	r3, [r7, #7]
 80085f4:	2b04      	cmp	r3, #4
 80085f6:	d82e      	bhi.n	8008656 <xTaskGenericNotify+0xbe>
 80085f8:	a201      	add	r2, pc, #4	@ (adr r2, 8008600 <xTaskGenericNotify+0x68>)
 80085fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085fe:	bf00      	nop
 8008600:	0800867b 	.word	0x0800867b
 8008604:	08008615 	.word	0x08008615
 8008608:	08008627 	.word	0x08008627
 800860c:	08008637 	.word	0x08008637
 8008610:	08008641 	.word	0x08008641
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8008614:	6a3b      	ldr	r3, [r7, #32]
 8008616:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	431a      	orrs	r2, r3
 800861e:	6a3b      	ldr	r3, [r7, #32]
 8008620:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8008624:	e02c      	b.n	8008680 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8008626:	6a3b      	ldr	r3, [r7, #32]
 8008628:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800862c:	1c5a      	adds	r2, r3, #1
 800862e:	6a3b      	ldr	r3, [r7, #32]
 8008630:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8008634:	e024      	b.n	8008680 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8008636:	6a3b      	ldr	r3, [r7, #32]
 8008638:	68ba      	ldr	r2, [r7, #8]
 800863a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 800863e:	e01f      	b.n	8008680 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008640:	7ffb      	ldrb	r3, [r7, #31]
 8008642:	2b02      	cmp	r3, #2
 8008644:	d004      	beq.n	8008650 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8008646:	6a3b      	ldr	r3, [r7, #32]
 8008648:	68ba      	ldr	r2, [r7, #8]
 800864a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800864e:	e017      	b.n	8008680 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 8008650:	2300      	movs	r3, #0
 8008652:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8008654:	e014      	b.n	8008680 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8008656:	6a3b      	ldr	r3, [r7, #32]
 8008658:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800865c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008660:	d00d      	beq.n	800867e <xTaskGenericNotify+0xe6>
	__asm volatile
 8008662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008666:	f383 8811 	msr	BASEPRI, r3
 800866a:	f3bf 8f6f 	isb	sy
 800866e:	f3bf 8f4f 	dsb	sy
 8008672:	617b      	str	r3, [r7, #20]
}
 8008674:	bf00      	nop
 8008676:	bf00      	nop
 8008678:	e7fd      	b.n	8008676 <xTaskGenericNotify+0xde>
					break;
 800867a:	bf00      	nop
 800867c:	e000      	b.n	8008680 <xTaskGenericNotify+0xe8>

					break;
 800867e:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8008680:	7ffb      	ldrb	r3, [r7, #31]
 8008682:	2b01      	cmp	r3, #1
 8008684:	d13a      	bne.n	80086fc <xTaskGenericNotify+0x164>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008686:	6a3b      	ldr	r3, [r7, #32]
 8008688:	3304      	adds	r3, #4
 800868a:	4618      	mov	r0, r3
 800868c:	f7fe f9ba 	bl	8006a04 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8008690:	6a3b      	ldr	r3, [r7, #32]
 8008692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008694:	2201      	movs	r2, #1
 8008696:	409a      	lsls	r2, r3
 8008698:	4b1c      	ldr	r3, [pc, #112]	@ (800870c <xTaskGenericNotify+0x174>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4313      	orrs	r3, r2
 800869e:	4a1b      	ldr	r2, [pc, #108]	@ (800870c <xTaskGenericNotify+0x174>)
 80086a0:	6013      	str	r3, [r2, #0]
 80086a2:	6a3b      	ldr	r3, [r7, #32]
 80086a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086a6:	4613      	mov	r3, r2
 80086a8:	009b      	lsls	r3, r3, #2
 80086aa:	4413      	add	r3, r2
 80086ac:	009b      	lsls	r3, r3, #2
 80086ae:	4a18      	ldr	r2, [pc, #96]	@ (8008710 <xTaskGenericNotify+0x178>)
 80086b0:	441a      	add	r2, r3
 80086b2:	6a3b      	ldr	r3, [r7, #32]
 80086b4:	3304      	adds	r3, #4
 80086b6:	4619      	mov	r1, r3
 80086b8:	4610      	mov	r0, r2
 80086ba:	f7fe f946 	bl	800694a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80086be:	6a3b      	ldr	r3, [r7, #32]
 80086c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d00b      	beq.n	80086de <xTaskGenericNotify+0x146>
	__asm volatile
 80086c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086ca:	f383 8811 	msr	BASEPRI, r3
 80086ce:	f3bf 8f6f 	isb	sy
 80086d2:	f3bf 8f4f 	dsb	sy
 80086d6:	613b      	str	r3, [r7, #16]
}
 80086d8:	bf00      	nop
 80086da:	bf00      	nop
 80086dc:	e7fd      	b.n	80086da <xTaskGenericNotify+0x142>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80086de:	6a3b      	ldr	r3, [r7, #32]
 80086e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086e2:	4b0c      	ldr	r3, [pc, #48]	@ (8008714 <xTaskGenericNotify+0x17c>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d907      	bls.n	80086fc <xTaskGenericNotify+0x164>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80086ec:	4b0a      	ldr	r3, [pc, #40]	@ (8008718 <xTaskGenericNotify+0x180>)
 80086ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086f2:	601a      	str	r2, [r3, #0]
 80086f4:	f3bf 8f4f 	dsb	sy
 80086f8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80086fc:	f000 fabe 	bl	8008c7c <vPortExitCritical>

		return xReturn;
 8008700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8008702:	4618      	mov	r0, r3
 8008704:	3728      	adds	r7, #40	@ 0x28
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
 800870a:	bf00      	nop
 800870c:	20000938 	.word	0x20000938
 8008710:	20000834 	.word	0x20000834
 8008714:	20000830 	.word	0x20000830
 8008718:	e000ed04 	.word	0xe000ed04

0800871c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800871c:	b580      	push	{r7, lr}
 800871e:	b08e      	sub	sp, #56	@ 0x38
 8008720:	af00      	add	r7, sp, #0
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	60b9      	str	r1, [r7, #8]
 8008726:	603b      	str	r3, [r7, #0]
 8008728:	4613      	mov	r3, r2
 800872a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800872c:	2301      	movs	r3, #1
 800872e:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d10b      	bne.n	800874e <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8008736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800873a:	f383 8811 	msr	BASEPRI, r3
 800873e:	f3bf 8f6f 	isb	sy
 8008742:	f3bf 8f4f 	dsb	sy
 8008746:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008748:	bf00      	nop
 800874a:	bf00      	nop
 800874c:	e7fd      	b.n	800874a <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800874e:	f000 fb43 	bl	8008dd8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8008756:	f3ef 8211 	mrs	r2, BASEPRI
 800875a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800875e:	f383 8811 	msr	BASEPRI, r3
 8008762:	f3bf 8f6f 	isb	sy
 8008766:	f3bf 8f4f 	dsb	sy
 800876a:	623a      	str	r2, [r7, #32]
 800876c:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800876e:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008770:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d004      	beq.n	8008782 <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8008778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800877a:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008784:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8008788:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800878c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800878e:	2202      	movs	r2, #2
 8008790:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 8008794:	79fb      	ldrb	r3, [r7, #7]
 8008796:	2b04      	cmp	r3, #4
 8008798:	d82e      	bhi.n	80087f8 <xTaskGenericNotifyFromISR+0xdc>
 800879a:	a201      	add	r2, pc, #4	@ (adr r2, 80087a0 <xTaskGenericNotifyFromISR+0x84>)
 800879c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087a0:	0800881d 	.word	0x0800881d
 80087a4:	080087b5 	.word	0x080087b5
 80087a8:	080087c7 	.word	0x080087c7
 80087ac:	080087d7 	.word	0x080087d7
 80087b0:	080087e1 	.word	0x080087e1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80087b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087b6:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	431a      	orrs	r2, r3
 80087be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087c0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 80087c4:	e02d      	b.n	8008822 <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80087c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80087cc:	1c5a      	adds	r2, r3, #1
 80087ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087d0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 80087d4:	e025      	b.n	8008822 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80087d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087d8:	68ba      	ldr	r2, [r7, #8]
 80087da:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 80087de:	e020      	b.n	8008822 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80087e0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80087e4:	2b02      	cmp	r3, #2
 80087e6:	d004      	beq.n	80087f2 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80087e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ea:	68ba      	ldr	r2, [r7, #8]
 80087ec:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80087f0:	e017      	b.n	8008822 <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 80087f2:	2300      	movs	r3, #0
 80087f4:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 80087f6:	e014      	b.n	8008822 <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80087f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80087fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008802:	d00d      	beq.n	8008820 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 8008804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008808:	f383 8811 	msr	BASEPRI, r3
 800880c:	f3bf 8f6f 	isb	sy
 8008810:	f3bf 8f4f 	dsb	sy
 8008814:	61bb      	str	r3, [r7, #24]
}
 8008816:	bf00      	nop
 8008818:	bf00      	nop
 800881a:	e7fd      	b.n	8008818 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800881c:	bf00      	nop
 800881e:	e000      	b.n	8008822 <xTaskGenericNotifyFromISR+0x106>
					break;
 8008820:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8008822:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008826:	2b01      	cmp	r3, #1
 8008828:	d146      	bne.n	80088b8 <xTaskGenericNotifyFromISR+0x19c>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800882a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800882c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800882e:	2b00      	cmp	r3, #0
 8008830:	d00b      	beq.n	800884a <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 8008832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008836:	f383 8811 	msr	BASEPRI, r3
 800883a:	f3bf 8f6f 	isb	sy
 800883e:	f3bf 8f4f 	dsb	sy
 8008842:	617b      	str	r3, [r7, #20]
}
 8008844:	bf00      	nop
 8008846:	bf00      	nop
 8008848:	e7fd      	b.n	8008846 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800884a:	4b21      	ldr	r3, [pc, #132]	@ (80088d0 <xTaskGenericNotifyFromISR+0x1b4>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d11c      	bne.n	800888c <xTaskGenericNotifyFromISR+0x170>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008854:	3304      	adds	r3, #4
 8008856:	4618      	mov	r0, r3
 8008858:	f7fe f8d4 	bl	8006a04 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800885c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800885e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008860:	2201      	movs	r2, #1
 8008862:	409a      	lsls	r2, r3
 8008864:	4b1b      	ldr	r3, [pc, #108]	@ (80088d4 <xTaskGenericNotifyFromISR+0x1b8>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4313      	orrs	r3, r2
 800886a:	4a1a      	ldr	r2, [pc, #104]	@ (80088d4 <xTaskGenericNotifyFromISR+0x1b8>)
 800886c:	6013      	str	r3, [r2, #0]
 800886e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008870:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008872:	4613      	mov	r3, r2
 8008874:	009b      	lsls	r3, r3, #2
 8008876:	4413      	add	r3, r2
 8008878:	009b      	lsls	r3, r3, #2
 800887a:	4a17      	ldr	r2, [pc, #92]	@ (80088d8 <xTaskGenericNotifyFromISR+0x1bc>)
 800887c:	441a      	add	r2, r3
 800887e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008880:	3304      	adds	r3, #4
 8008882:	4619      	mov	r1, r3
 8008884:	4610      	mov	r0, r2
 8008886:	f7fe f860 	bl	800694a <vListInsertEnd>
 800888a:	e005      	b.n	8008898 <xTaskGenericNotifyFromISR+0x17c>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800888c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800888e:	3318      	adds	r3, #24
 8008890:	4619      	mov	r1, r3
 8008892:	4812      	ldr	r0, [pc, #72]	@ (80088dc <xTaskGenericNotifyFromISR+0x1c0>)
 8008894:	f7fe f859 	bl	800694a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800889a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800889c:	4b10      	ldr	r3, [pc, #64]	@ (80088e0 <xTaskGenericNotifyFromISR+0x1c4>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d908      	bls.n	80088b8 <xTaskGenericNotifyFromISR+0x19c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80088a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d002      	beq.n	80088b2 <xTaskGenericNotifyFromISR+0x196>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80088ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80088ae:	2201      	movs	r2, #1
 80088b0:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80088b2:	4b0c      	ldr	r3, [pc, #48]	@ (80088e4 <xTaskGenericNotifyFromISR+0x1c8>)
 80088b4:	2201      	movs	r2, #1
 80088b6:	601a      	str	r2, [r3, #0]
 80088b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088ba:	613b      	str	r3, [r7, #16]
	__asm volatile
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	f383 8811 	msr	BASEPRI, r3
}
 80088c2:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80088c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3738      	adds	r7, #56	@ 0x38
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
 80088ce:	bf00      	nop
 80088d0:	20000958 	.word	0x20000958
 80088d4:	20000938 	.word	0x20000938
 80088d8:	20000834 	.word	0x20000834
 80088dc:	200008f0 	.word	0x200008f0
 80088e0:	20000830 	.word	0x20000830
 80088e4:	20000944 	.word	0x20000944

080088e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b084      	sub	sp, #16
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80088f2:	4b29      	ldr	r3, [pc, #164]	@ (8008998 <prvAddCurrentTaskToDelayedList+0xb0>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80088f8:	4b28      	ldr	r3, [pc, #160]	@ (800899c <prvAddCurrentTaskToDelayedList+0xb4>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	3304      	adds	r3, #4
 80088fe:	4618      	mov	r0, r3
 8008900:	f7fe f880 	bl	8006a04 <uxListRemove>
 8008904:	4603      	mov	r3, r0
 8008906:	2b00      	cmp	r3, #0
 8008908:	d10b      	bne.n	8008922 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800890a:	4b24      	ldr	r3, [pc, #144]	@ (800899c <prvAddCurrentTaskToDelayedList+0xb4>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008910:	2201      	movs	r2, #1
 8008912:	fa02 f303 	lsl.w	r3, r2, r3
 8008916:	43da      	mvns	r2, r3
 8008918:	4b21      	ldr	r3, [pc, #132]	@ (80089a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4013      	ands	r3, r2
 800891e:	4a20      	ldr	r2, [pc, #128]	@ (80089a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008920:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008928:	d10a      	bne.n	8008940 <prvAddCurrentTaskToDelayedList+0x58>
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d007      	beq.n	8008940 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008930:	4b1a      	ldr	r3, [pc, #104]	@ (800899c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	3304      	adds	r3, #4
 8008936:	4619      	mov	r1, r3
 8008938:	481a      	ldr	r0, [pc, #104]	@ (80089a4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800893a:	f7fe f806 	bl	800694a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800893e:	e026      	b.n	800898e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008940:	68fa      	ldr	r2, [r7, #12]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	4413      	add	r3, r2
 8008946:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008948:	4b14      	ldr	r3, [pc, #80]	@ (800899c <prvAddCurrentTaskToDelayedList+0xb4>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	68ba      	ldr	r2, [r7, #8]
 800894e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008950:	68ba      	ldr	r2, [r7, #8]
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	429a      	cmp	r2, r3
 8008956:	d209      	bcs.n	800896c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008958:	4b13      	ldr	r3, [pc, #76]	@ (80089a8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800895a:	681a      	ldr	r2, [r3, #0]
 800895c:	4b0f      	ldr	r3, [pc, #60]	@ (800899c <prvAddCurrentTaskToDelayedList+0xb4>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	3304      	adds	r3, #4
 8008962:	4619      	mov	r1, r3
 8008964:	4610      	mov	r0, r2
 8008966:	f7fe f814 	bl	8006992 <vListInsert>
}
 800896a:	e010      	b.n	800898e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800896c:	4b0f      	ldr	r3, [pc, #60]	@ (80089ac <prvAddCurrentTaskToDelayedList+0xc4>)
 800896e:	681a      	ldr	r2, [r3, #0]
 8008970:	4b0a      	ldr	r3, [pc, #40]	@ (800899c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	3304      	adds	r3, #4
 8008976:	4619      	mov	r1, r3
 8008978:	4610      	mov	r0, r2
 800897a:	f7fe f80a 	bl	8006992 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800897e:	4b0c      	ldr	r3, [pc, #48]	@ (80089b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	68ba      	ldr	r2, [r7, #8]
 8008984:	429a      	cmp	r2, r3
 8008986:	d202      	bcs.n	800898e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008988:	4a09      	ldr	r2, [pc, #36]	@ (80089b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	6013      	str	r3, [r2, #0]
}
 800898e:	bf00      	nop
 8008990:	3710      	adds	r7, #16
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
 8008996:	bf00      	nop
 8008998:	20000934 	.word	0x20000934
 800899c:	20000830 	.word	0x20000830
 80089a0:	20000938 	.word	0x20000938
 80089a4:	2000091c 	.word	0x2000091c
 80089a8:	200008ec 	.word	0x200008ec
 80089ac:	200008e8 	.word	0x200008e8
 80089b0:	20000950 	.word	0x20000950

080089b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80089b4:	b480      	push	{r7}
 80089b6:	b085      	sub	sp, #20
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	60f8      	str	r0, [r7, #12]
 80089bc:	60b9      	str	r1, [r7, #8]
 80089be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	3b04      	subs	r3, #4
 80089c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80089cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	3b04      	subs	r3, #4
 80089d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	f023 0201 	bic.w	r2, r3, #1
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	3b04      	subs	r3, #4
 80089e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80089e4:	4a0c      	ldr	r2, [pc, #48]	@ (8008a18 <pxPortInitialiseStack+0x64>)
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	3b14      	subs	r3, #20
 80089ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	3b04      	subs	r3, #4
 80089fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f06f 0202 	mvn.w	r2, #2
 8008a02:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	3b20      	subs	r3, #32
 8008a08:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3714      	adds	r7, #20
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr
 8008a18:	08008a1d 	.word	0x08008a1d

08008a1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b085      	sub	sp, #20
 8008a20:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008a22:	2300      	movs	r3, #0
 8008a24:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008a26:	4b13      	ldr	r3, [pc, #76]	@ (8008a74 <prvTaskExitError+0x58>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a2e:	d00b      	beq.n	8008a48 <prvTaskExitError+0x2c>
	__asm volatile
 8008a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a34:	f383 8811 	msr	BASEPRI, r3
 8008a38:	f3bf 8f6f 	isb	sy
 8008a3c:	f3bf 8f4f 	dsb	sy
 8008a40:	60fb      	str	r3, [r7, #12]
}
 8008a42:	bf00      	nop
 8008a44:	bf00      	nop
 8008a46:	e7fd      	b.n	8008a44 <prvTaskExitError+0x28>
	__asm volatile
 8008a48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a4c:	f383 8811 	msr	BASEPRI, r3
 8008a50:	f3bf 8f6f 	isb	sy
 8008a54:	f3bf 8f4f 	dsb	sy
 8008a58:	60bb      	str	r3, [r7, #8]
}
 8008a5a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008a5c:	bf00      	nop
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d0fc      	beq.n	8008a5e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008a64:	bf00      	nop
 8008a66:	bf00      	nop
 8008a68:	3714      	adds	r7, #20
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a70:	4770      	bx	lr
 8008a72:	bf00      	nop
 8008a74:	20000018 	.word	0x20000018
	...

08008a80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008a80:	4b07      	ldr	r3, [pc, #28]	@ (8008aa0 <pxCurrentTCBConst2>)
 8008a82:	6819      	ldr	r1, [r3, #0]
 8008a84:	6808      	ldr	r0, [r1, #0]
 8008a86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a8a:	f380 8809 	msr	PSP, r0
 8008a8e:	f3bf 8f6f 	isb	sy
 8008a92:	f04f 0000 	mov.w	r0, #0
 8008a96:	f380 8811 	msr	BASEPRI, r0
 8008a9a:	4770      	bx	lr
 8008a9c:	f3af 8000 	nop.w

08008aa0 <pxCurrentTCBConst2>:
 8008aa0:	20000830 	.word	0x20000830
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008aa4:	bf00      	nop
 8008aa6:	bf00      	nop

08008aa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008aa8:	4808      	ldr	r0, [pc, #32]	@ (8008acc <prvPortStartFirstTask+0x24>)
 8008aaa:	6800      	ldr	r0, [r0, #0]
 8008aac:	6800      	ldr	r0, [r0, #0]
 8008aae:	f380 8808 	msr	MSP, r0
 8008ab2:	f04f 0000 	mov.w	r0, #0
 8008ab6:	f380 8814 	msr	CONTROL, r0
 8008aba:	b662      	cpsie	i
 8008abc:	b661      	cpsie	f
 8008abe:	f3bf 8f4f 	dsb	sy
 8008ac2:	f3bf 8f6f 	isb	sy
 8008ac6:	df00      	svc	0
 8008ac8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008aca:	bf00      	nop
 8008acc:	e000ed08 	.word	0xe000ed08

08008ad0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b086      	sub	sp, #24
 8008ad4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008ad6:	4b47      	ldr	r3, [pc, #284]	@ (8008bf4 <xPortStartScheduler+0x124>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4a47      	ldr	r2, [pc, #284]	@ (8008bf8 <xPortStartScheduler+0x128>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d10b      	bne.n	8008af8 <xPortStartScheduler+0x28>
	__asm volatile
 8008ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ae4:	f383 8811 	msr	BASEPRI, r3
 8008ae8:	f3bf 8f6f 	isb	sy
 8008aec:	f3bf 8f4f 	dsb	sy
 8008af0:	613b      	str	r3, [r7, #16]
}
 8008af2:	bf00      	nop
 8008af4:	bf00      	nop
 8008af6:	e7fd      	b.n	8008af4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008af8:	4b3e      	ldr	r3, [pc, #248]	@ (8008bf4 <xPortStartScheduler+0x124>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4a3f      	ldr	r2, [pc, #252]	@ (8008bfc <xPortStartScheduler+0x12c>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d10b      	bne.n	8008b1a <xPortStartScheduler+0x4a>
	__asm volatile
 8008b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b06:	f383 8811 	msr	BASEPRI, r3
 8008b0a:	f3bf 8f6f 	isb	sy
 8008b0e:	f3bf 8f4f 	dsb	sy
 8008b12:	60fb      	str	r3, [r7, #12]
}
 8008b14:	bf00      	nop
 8008b16:	bf00      	nop
 8008b18:	e7fd      	b.n	8008b16 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008b1a:	4b39      	ldr	r3, [pc, #228]	@ (8008c00 <xPortStartScheduler+0x130>)
 8008b1c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	781b      	ldrb	r3, [r3, #0]
 8008b22:	b2db      	uxtb	r3, r3
 8008b24:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	22ff      	movs	r2, #255	@ 0xff
 8008b2a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	781b      	ldrb	r3, [r3, #0]
 8008b30:	b2db      	uxtb	r3, r3
 8008b32:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008b34:	78fb      	ldrb	r3, [r7, #3]
 8008b36:	b2db      	uxtb	r3, r3
 8008b38:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008b3c:	b2da      	uxtb	r2, r3
 8008b3e:	4b31      	ldr	r3, [pc, #196]	@ (8008c04 <xPortStartScheduler+0x134>)
 8008b40:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008b42:	4b31      	ldr	r3, [pc, #196]	@ (8008c08 <xPortStartScheduler+0x138>)
 8008b44:	2207      	movs	r2, #7
 8008b46:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b48:	e009      	b.n	8008b5e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008b4a:	4b2f      	ldr	r3, [pc, #188]	@ (8008c08 <xPortStartScheduler+0x138>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	3b01      	subs	r3, #1
 8008b50:	4a2d      	ldr	r2, [pc, #180]	@ (8008c08 <xPortStartScheduler+0x138>)
 8008b52:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008b54:	78fb      	ldrb	r3, [r7, #3]
 8008b56:	b2db      	uxtb	r3, r3
 8008b58:	005b      	lsls	r3, r3, #1
 8008b5a:	b2db      	uxtb	r3, r3
 8008b5c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b5e:	78fb      	ldrb	r3, [r7, #3]
 8008b60:	b2db      	uxtb	r3, r3
 8008b62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b66:	2b80      	cmp	r3, #128	@ 0x80
 8008b68:	d0ef      	beq.n	8008b4a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008b6a:	4b27      	ldr	r3, [pc, #156]	@ (8008c08 <xPortStartScheduler+0x138>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f1c3 0307 	rsb	r3, r3, #7
 8008b72:	2b04      	cmp	r3, #4
 8008b74:	d00b      	beq.n	8008b8e <xPortStartScheduler+0xbe>
	__asm volatile
 8008b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b7a:	f383 8811 	msr	BASEPRI, r3
 8008b7e:	f3bf 8f6f 	isb	sy
 8008b82:	f3bf 8f4f 	dsb	sy
 8008b86:	60bb      	str	r3, [r7, #8]
}
 8008b88:	bf00      	nop
 8008b8a:	bf00      	nop
 8008b8c:	e7fd      	b.n	8008b8a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008b8e:	4b1e      	ldr	r3, [pc, #120]	@ (8008c08 <xPortStartScheduler+0x138>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	021b      	lsls	r3, r3, #8
 8008b94:	4a1c      	ldr	r2, [pc, #112]	@ (8008c08 <xPortStartScheduler+0x138>)
 8008b96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008b98:	4b1b      	ldr	r3, [pc, #108]	@ (8008c08 <xPortStartScheduler+0x138>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008ba0:	4a19      	ldr	r2, [pc, #100]	@ (8008c08 <xPortStartScheduler+0x138>)
 8008ba2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	b2da      	uxtb	r2, r3
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008bac:	4b17      	ldr	r3, [pc, #92]	@ (8008c0c <xPortStartScheduler+0x13c>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4a16      	ldr	r2, [pc, #88]	@ (8008c0c <xPortStartScheduler+0x13c>)
 8008bb2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008bb6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008bb8:	4b14      	ldr	r3, [pc, #80]	@ (8008c0c <xPortStartScheduler+0x13c>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a13      	ldr	r2, [pc, #76]	@ (8008c0c <xPortStartScheduler+0x13c>)
 8008bbe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008bc2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008bc4:	f000 f8da 	bl	8008d7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008bc8:	4b11      	ldr	r3, [pc, #68]	@ (8008c10 <xPortStartScheduler+0x140>)
 8008bca:	2200      	movs	r2, #0
 8008bcc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008bce:	f000 f8f9 	bl	8008dc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008bd2:	4b10      	ldr	r3, [pc, #64]	@ (8008c14 <xPortStartScheduler+0x144>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4a0f      	ldr	r2, [pc, #60]	@ (8008c14 <xPortStartScheduler+0x144>)
 8008bd8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008bdc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008bde:	f7ff ff63 	bl	8008aa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008be2:	f7ff f87d 	bl	8007ce0 <vTaskSwitchContext>
	prvTaskExitError();
 8008be6:	f7ff ff19 	bl	8008a1c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008bea:	2300      	movs	r3, #0
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3718      	adds	r7, #24
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}
 8008bf4:	e000ed00 	.word	0xe000ed00
 8008bf8:	410fc271 	.word	0x410fc271
 8008bfc:	410fc270 	.word	0x410fc270
 8008c00:	e000e400 	.word	0xe000e400
 8008c04:	2000095c 	.word	0x2000095c
 8008c08:	20000960 	.word	0x20000960
 8008c0c:	e000ed20 	.word	0xe000ed20
 8008c10:	20000018 	.word	0x20000018
 8008c14:	e000ef34 	.word	0xe000ef34

08008c18 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b083      	sub	sp, #12
 8008c1c:	af00      	add	r7, sp, #0
	__asm volatile
 8008c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c22:	f383 8811 	msr	BASEPRI, r3
 8008c26:	f3bf 8f6f 	isb	sy
 8008c2a:	f3bf 8f4f 	dsb	sy
 8008c2e:	607b      	str	r3, [r7, #4]
}
 8008c30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008c32:	4b10      	ldr	r3, [pc, #64]	@ (8008c74 <vPortEnterCritical+0x5c>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	3301      	adds	r3, #1
 8008c38:	4a0e      	ldr	r2, [pc, #56]	@ (8008c74 <vPortEnterCritical+0x5c>)
 8008c3a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008c3c:	4b0d      	ldr	r3, [pc, #52]	@ (8008c74 <vPortEnterCritical+0x5c>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	d110      	bne.n	8008c66 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008c44:	4b0c      	ldr	r3, [pc, #48]	@ (8008c78 <vPortEnterCritical+0x60>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	b2db      	uxtb	r3, r3
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d00b      	beq.n	8008c66 <vPortEnterCritical+0x4e>
	__asm volatile
 8008c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c52:	f383 8811 	msr	BASEPRI, r3
 8008c56:	f3bf 8f6f 	isb	sy
 8008c5a:	f3bf 8f4f 	dsb	sy
 8008c5e:	603b      	str	r3, [r7, #0]
}
 8008c60:	bf00      	nop
 8008c62:	bf00      	nop
 8008c64:	e7fd      	b.n	8008c62 <vPortEnterCritical+0x4a>
	}
}
 8008c66:	bf00      	nop
 8008c68:	370c      	adds	r7, #12
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr
 8008c72:	bf00      	nop
 8008c74:	20000018 	.word	0x20000018
 8008c78:	e000ed04 	.word	0xe000ed04

08008c7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b083      	sub	sp, #12
 8008c80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008c82:	4b12      	ldr	r3, [pc, #72]	@ (8008ccc <vPortExitCritical+0x50>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d10b      	bne.n	8008ca2 <vPortExitCritical+0x26>
	__asm volatile
 8008c8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c8e:	f383 8811 	msr	BASEPRI, r3
 8008c92:	f3bf 8f6f 	isb	sy
 8008c96:	f3bf 8f4f 	dsb	sy
 8008c9a:	607b      	str	r3, [r7, #4]
}
 8008c9c:	bf00      	nop
 8008c9e:	bf00      	nop
 8008ca0:	e7fd      	b.n	8008c9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8008ccc <vPortExitCritical+0x50>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	3b01      	subs	r3, #1
 8008ca8:	4a08      	ldr	r2, [pc, #32]	@ (8008ccc <vPortExitCritical+0x50>)
 8008caa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008cac:	4b07      	ldr	r3, [pc, #28]	@ (8008ccc <vPortExitCritical+0x50>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d105      	bne.n	8008cc0 <vPortExitCritical+0x44>
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	f383 8811 	msr	BASEPRI, r3
}
 8008cbe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008cc0:	bf00      	nop
 8008cc2:	370c      	adds	r7, #12
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr
 8008ccc:	20000018 	.word	0x20000018

08008cd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008cd0:	f3ef 8009 	mrs	r0, PSP
 8008cd4:	f3bf 8f6f 	isb	sy
 8008cd8:	4b15      	ldr	r3, [pc, #84]	@ (8008d30 <pxCurrentTCBConst>)
 8008cda:	681a      	ldr	r2, [r3, #0]
 8008cdc:	f01e 0f10 	tst.w	lr, #16
 8008ce0:	bf08      	it	eq
 8008ce2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008ce6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cea:	6010      	str	r0, [r2, #0]
 8008cec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008cf0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008cf4:	f380 8811 	msr	BASEPRI, r0
 8008cf8:	f3bf 8f4f 	dsb	sy
 8008cfc:	f3bf 8f6f 	isb	sy
 8008d00:	f7fe ffee 	bl	8007ce0 <vTaskSwitchContext>
 8008d04:	f04f 0000 	mov.w	r0, #0
 8008d08:	f380 8811 	msr	BASEPRI, r0
 8008d0c:	bc09      	pop	{r0, r3}
 8008d0e:	6819      	ldr	r1, [r3, #0]
 8008d10:	6808      	ldr	r0, [r1, #0]
 8008d12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d16:	f01e 0f10 	tst.w	lr, #16
 8008d1a:	bf08      	it	eq
 8008d1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008d20:	f380 8809 	msr	PSP, r0
 8008d24:	f3bf 8f6f 	isb	sy
 8008d28:	4770      	bx	lr
 8008d2a:	bf00      	nop
 8008d2c:	f3af 8000 	nop.w

08008d30 <pxCurrentTCBConst>:
 8008d30:	20000830 	.word	0x20000830
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008d34:	bf00      	nop
 8008d36:	bf00      	nop

08008d38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b082      	sub	sp, #8
 8008d3c:	af00      	add	r7, sp, #0
	__asm volatile
 8008d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d42:	f383 8811 	msr	BASEPRI, r3
 8008d46:	f3bf 8f6f 	isb	sy
 8008d4a:	f3bf 8f4f 	dsb	sy
 8008d4e:	607b      	str	r3, [r7, #4]
}
 8008d50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008d52:	f7fe ff0b 	bl	8007b6c <xTaskIncrementTick>
 8008d56:	4603      	mov	r3, r0
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d003      	beq.n	8008d64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008d5c:	4b06      	ldr	r3, [pc, #24]	@ (8008d78 <SysTick_Handler+0x40>)
 8008d5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d62:	601a      	str	r2, [r3, #0]
 8008d64:	2300      	movs	r3, #0
 8008d66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	f383 8811 	msr	BASEPRI, r3
}
 8008d6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008d70:	bf00      	nop
 8008d72:	3708      	adds	r7, #8
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}
 8008d78:	e000ed04 	.word	0xe000ed04

08008d7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008d80:	4b0b      	ldr	r3, [pc, #44]	@ (8008db0 <vPortSetupTimerInterrupt+0x34>)
 8008d82:	2200      	movs	r2, #0
 8008d84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008d86:	4b0b      	ldr	r3, [pc, #44]	@ (8008db4 <vPortSetupTimerInterrupt+0x38>)
 8008d88:	2200      	movs	r2, #0
 8008d8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008d8c:	4b0a      	ldr	r3, [pc, #40]	@ (8008db8 <vPortSetupTimerInterrupt+0x3c>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a0a      	ldr	r2, [pc, #40]	@ (8008dbc <vPortSetupTimerInterrupt+0x40>)
 8008d92:	fba2 2303 	umull	r2, r3, r2, r3
 8008d96:	099b      	lsrs	r3, r3, #6
 8008d98:	4a09      	ldr	r2, [pc, #36]	@ (8008dc0 <vPortSetupTimerInterrupt+0x44>)
 8008d9a:	3b01      	subs	r3, #1
 8008d9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008d9e:	4b04      	ldr	r3, [pc, #16]	@ (8008db0 <vPortSetupTimerInterrupt+0x34>)
 8008da0:	2207      	movs	r2, #7
 8008da2:	601a      	str	r2, [r3, #0]
}
 8008da4:	bf00      	nop
 8008da6:	46bd      	mov	sp, r7
 8008da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dac:	4770      	bx	lr
 8008dae:	bf00      	nop
 8008db0:	e000e010 	.word	0xe000e010
 8008db4:	e000e018 	.word	0xe000e018
 8008db8:	2000000c 	.word	0x2000000c
 8008dbc:	10624dd3 	.word	0x10624dd3
 8008dc0:	e000e014 	.word	0xe000e014

08008dc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008dc4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008dd4 <vPortEnableVFP+0x10>
 8008dc8:	6801      	ldr	r1, [r0, #0]
 8008dca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008dce:	6001      	str	r1, [r0, #0]
 8008dd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008dd2:	bf00      	nop
 8008dd4:	e000ed88 	.word	0xe000ed88

08008dd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008dd8:	b480      	push	{r7}
 8008dda:	b085      	sub	sp, #20
 8008ddc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008dde:	f3ef 8305 	mrs	r3, IPSR
 8008de2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2b0f      	cmp	r3, #15
 8008de8:	d915      	bls.n	8008e16 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008dea:	4a18      	ldr	r2, [pc, #96]	@ (8008e4c <vPortValidateInterruptPriority+0x74>)
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	4413      	add	r3, r2
 8008df0:	781b      	ldrb	r3, [r3, #0]
 8008df2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008df4:	4b16      	ldr	r3, [pc, #88]	@ (8008e50 <vPortValidateInterruptPriority+0x78>)
 8008df6:	781b      	ldrb	r3, [r3, #0]
 8008df8:	7afa      	ldrb	r2, [r7, #11]
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d20b      	bcs.n	8008e16 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e02:	f383 8811 	msr	BASEPRI, r3
 8008e06:	f3bf 8f6f 	isb	sy
 8008e0a:	f3bf 8f4f 	dsb	sy
 8008e0e:	607b      	str	r3, [r7, #4]
}
 8008e10:	bf00      	nop
 8008e12:	bf00      	nop
 8008e14:	e7fd      	b.n	8008e12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008e16:	4b0f      	ldr	r3, [pc, #60]	@ (8008e54 <vPortValidateInterruptPriority+0x7c>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8008e58 <vPortValidateInterruptPriority+0x80>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d90b      	bls.n	8008e3e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e2a:	f383 8811 	msr	BASEPRI, r3
 8008e2e:	f3bf 8f6f 	isb	sy
 8008e32:	f3bf 8f4f 	dsb	sy
 8008e36:	603b      	str	r3, [r7, #0]
}
 8008e38:	bf00      	nop
 8008e3a:	bf00      	nop
 8008e3c:	e7fd      	b.n	8008e3a <vPortValidateInterruptPriority+0x62>
	}
 8008e3e:	bf00      	nop
 8008e40:	3714      	adds	r7, #20
 8008e42:	46bd      	mov	sp, r7
 8008e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e48:	4770      	bx	lr
 8008e4a:	bf00      	nop
 8008e4c:	e000e3f0 	.word	0xe000e3f0
 8008e50:	2000095c 	.word	0x2000095c
 8008e54:	e000ed0c 	.word	0xe000ed0c
 8008e58:	20000960 	.word	0x20000960

08008e5c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b08a      	sub	sp, #40	@ 0x28
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008e64:	2300      	movs	r3, #0
 8008e66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008e68:	f7fe fdd4 	bl	8007a14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008e6c:	4b5c      	ldr	r3, [pc, #368]	@ (8008fe0 <pvPortMalloc+0x184>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d101      	bne.n	8008e78 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008e74:	f000 f924 	bl	80090c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008e78:	4b5a      	ldr	r3, [pc, #360]	@ (8008fe4 <pvPortMalloc+0x188>)
 8008e7a:	681a      	ldr	r2, [r3, #0]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	4013      	ands	r3, r2
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	f040 8095 	bne.w	8008fb0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d01e      	beq.n	8008eca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008e8c:	2208      	movs	r2, #8
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	4413      	add	r3, r2
 8008e92:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f003 0307 	and.w	r3, r3, #7
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d015      	beq.n	8008eca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f023 0307 	bic.w	r3, r3, #7
 8008ea4:	3308      	adds	r3, #8
 8008ea6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f003 0307 	and.w	r3, r3, #7
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d00b      	beq.n	8008eca <pvPortMalloc+0x6e>
	__asm volatile
 8008eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eb6:	f383 8811 	msr	BASEPRI, r3
 8008eba:	f3bf 8f6f 	isb	sy
 8008ebe:	f3bf 8f4f 	dsb	sy
 8008ec2:	617b      	str	r3, [r7, #20]
}
 8008ec4:	bf00      	nop
 8008ec6:	bf00      	nop
 8008ec8:	e7fd      	b.n	8008ec6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d06f      	beq.n	8008fb0 <pvPortMalloc+0x154>
 8008ed0:	4b45      	ldr	r3, [pc, #276]	@ (8008fe8 <pvPortMalloc+0x18c>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	687a      	ldr	r2, [r7, #4]
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	d86a      	bhi.n	8008fb0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008eda:	4b44      	ldr	r3, [pc, #272]	@ (8008fec <pvPortMalloc+0x190>)
 8008edc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008ede:	4b43      	ldr	r3, [pc, #268]	@ (8008fec <pvPortMalloc+0x190>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008ee4:	e004      	b.n	8008ef0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ee8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	687a      	ldr	r2, [r7, #4]
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	d903      	bls.n	8008f02 <pvPortMalloc+0xa6>
 8008efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d1f1      	bne.n	8008ee6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008f02:	4b37      	ldr	r3, [pc, #220]	@ (8008fe0 <pvPortMalloc+0x184>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f08:	429a      	cmp	r2, r3
 8008f0a:	d051      	beq.n	8008fb0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008f0c:	6a3b      	ldr	r3, [r7, #32]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	2208      	movs	r2, #8
 8008f12:	4413      	add	r3, r2
 8008f14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f18:	681a      	ldr	r2, [r3, #0]
 8008f1a:	6a3b      	ldr	r3, [r7, #32]
 8008f1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f20:	685a      	ldr	r2, [r3, #4]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	1ad2      	subs	r2, r2, r3
 8008f26:	2308      	movs	r3, #8
 8008f28:	005b      	lsls	r3, r3, #1
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	d920      	bls.n	8008f70 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008f2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	4413      	add	r3, r2
 8008f34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f36:	69bb      	ldr	r3, [r7, #24]
 8008f38:	f003 0307 	and.w	r3, r3, #7
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d00b      	beq.n	8008f58 <pvPortMalloc+0xfc>
	__asm volatile
 8008f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f44:	f383 8811 	msr	BASEPRI, r3
 8008f48:	f3bf 8f6f 	isb	sy
 8008f4c:	f3bf 8f4f 	dsb	sy
 8008f50:	613b      	str	r3, [r7, #16]
}
 8008f52:	bf00      	nop
 8008f54:	bf00      	nop
 8008f56:	e7fd      	b.n	8008f54 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f5a:	685a      	ldr	r2, [r3, #4]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	1ad2      	subs	r2, r2, r3
 8008f60:	69bb      	ldr	r3, [r7, #24]
 8008f62:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f66:	687a      	ldr	r2, [r7, #4]
 8008f68:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008f6a:	69b8      	ldr	r0, [r7, #24]
 8008f6c:	f000 f90a 	bl	8009184 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008f70:	4b1d      	ldr	r3, [pc, #116]	@ (8008fe8 <pvPortMalloc+0x18c>)
 8008f72:	681a      	ldr	r2, [r3, #0]
 8008f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	1ad3      	subs	r3, r2, r3
 8008f7a:	4a1b      	ldr	r2, [pc, #108]	@ (8008fe8 <pvPortMalloc+0x18c>)
 8008f7c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008f7e:	4b1a      	ldr	r3, [pc, #104]	@ (8008fe8 <pvPortMalloc+0x18c>)
 8008f80:	681a      	ldr	r2, [r3, #0]
 8008f82:	4b1b      	ldr	r3, [pc, #108]	@ (8008ff0 <pvPortMalloc+0x194>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	429a      	cmp	r2, r3
 8008f88:	d203      	bcs.n	8008f92 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008f8a:	4b17      	ldr	r3, [pc, #92]	@ (8008fe8 <pvPortMalloc+0x18c>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	4a18      	ldr	r2, [pc, #96]	@ (8008ff0 <pvPortMalloc+0x194>)
 8008f90:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f94:	685a      	ldr	r2, [r3, #4]
 8008f96:	4b13      	ldr	r3, [pc, #76]	@ (8008fe4 <pvPortMalloc+0x188>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	431a      	orrs	r2, r3
 8008f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f9e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008fa6:	4b13      	ldr	r3, [pc, #76]	@ (8008ff4 <pvPortMalloc+0x198>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	3301      	adds	r3, #1
 8008fac:	4a11      	ldr	r2, [pc, #68]	@ (8008ff4 <pvPortMalloc+0x198>)
 8008fae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008fb0:	f7fe fd3e 	bl	8007a30 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008fb4:	69fb      	ldr	r3, [r7, #28]
 8008fb6:	f003 0307 	and.w	r3, r3, #7
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d00b      	beq.n	8008fd6 <pvPortMalloc+0x17a>
	__asm volatile
 8008fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fc2:	f383 8811 	msr	BASEPRI, r3
 8008fc6:	f3bf 8f6f 	isb	sy
 8008fca:	f3bf 8f4f 	dsb	sy
 8008fce:	60fb      	str	r3, [r7, #12]
}
 8008fd0:	bf00      	nop
 8008fd2:	bf00      	nop
 8008fd4:	e7fd      	b.n	8008fd2 <pvPortMalloc+0x176>
	return pvReturn;
 8008fd6:	69fb      	ldr	r3, [r7, #28]
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3728      	adds	r7, #40	@ 0x28
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}
 8008fe0:	2000456c 	.word	0x2000456c
 8008fe4:	20004580 	.word	0x20004580
 8008fe8:	20004570 	.word	0x20004570
 8008fec:	20004564 	.word	0x20004564
 8008ff0:	20004574 	.word	0x20004574
 8008ff4:	20004578 	.word	0x20004578

08008ff8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b086      	sub	sp, #24
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d04f      	beq.n	80090aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800900a:	2308      	movs	r3, #8
 800900c:	425b      	negs	r3, r3
 800900e:	697a      	ldr	r2, [r7, #20]
 8009010:	4413      	add	r3, r2
 8009012:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009018:	693b      	ldr	r3, [r7, #16]
 800901a:	685a      	ldr	r2, [r3, #4]
 800901c:	4b25      	ldr	r3, [pc, #148]	@ (80090b4 <vPortFree+0xbc>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4013      	ands	r3, r2
 8009022:	2b00      	cmp	r3, #0
 8009024:	d10b      	bne.n	800903e <vPortFree+0x46>
	__asm volatile
 8009026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800902a:	f383 8811 	msr	BASEPRI, r3
 800902e:	f3bf 8f6f 	isb	sy
 8009032:	f3bf 8f4f 	dsb	sy
 8009036:	60fb      	str	r3, [r7, #12]
}
 8009038:	bf00      	nop
 800903a:	bf00      	nop
 800903c:	e7fd      	b.n	800903a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d00b      	beq.n	800905e <vPortFree+0x66>
	__asm volatile
 8009046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800904a:	f383 8811 	msr	BASEPRI, r3
 800904e:	f3bf 8f6f 	isb	sy
 8009052:	f3bf 8f4f 	dsb	sy
 8009056:	60bb      	str	r3, [r7, #8]
}
 8009058:	bf00      	nop
 800905a:	bf00      	nop
 800905c:	e7fd      	b.n	800905a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	685a      	ldr	r2, [r3, #4]
 8009062:	4b14      	ldr	r3, [pc, #80]	@ (80090b4 <vPortFree+0xbc>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	4013      	ands	r3, r2
 8009068:	2b00      	cmp	r3, #0
 800906a:	d01e      	beq.n	80090aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d11a      	bne.n	80090aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	685a      	ldr	r2, [r3, #4]
 8009078:	4b0e      	ldr	r3, [pc, #56]	@ (80090b4 <vPortFree+0xbc>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	43db      	mvns	r3, r3
 800907e:	401a      	ands	r2, r3
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009084:	f7fe fcc6 	bl	8007a14 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	685a      	ldr	r2, [r3, #4]
 800908c:	4b0a      	ldr	r3, [pc, #40]	@ (80090b8 <vPortFree+0xc0>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4413      	add	r3, r2
 8009092:	4a09      	ldr	r2, [pc, #36]	@ (80090b8 <vPortFree+0xc0>)
 8009094:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009096:	6938      	ldr	r0, [r7, #16]
 8009098:	f000 f874 	bl	8009184 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800909c:	4b07      	ldr	r3, [pc, #28]	@ (80090bc <vPortFree+0xc4>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	3301      	adds	r3, #1
 80090a2:	4a06      	ldr	r2, [pc, #24]	@ (80090bc <vPortFree+0xc4>)
 80090a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80090a6:	f7fe fcc3 	bl	8007a30 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80090aa:	bf00      	nop
 80090ac:	3718      	adds	r7, #24
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}
 80090b2:	bf00      	nop
 80090b4:	20004580 	.word	0x20004580
 80090b8:	20004570 	.word	0x20004570
 80090bc:	2000457c 	.word	0x2000457c

080090c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80090c0:	b480      	push	{r7}
 80090c2:	b085      	sub	sp, #20
 80090c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80090c6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80090ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80090cc:	4b27      	ldr	r3, [pc, #156]	@ (800916c <prvHeapInit+0xac>)
 80090ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	f003 0307 	and.w	r3, r3, #7
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d00c      	beq.n	80090f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	3307      	adds	r3, #7
 80090de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	f023 0307 	bic.w	r3, r3, #7
 80090e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80090e8:	68ba      	ldr	r2, [r7, #8]
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	1ad3      	subs	r3, r2, r3
 80090ee:	4a1f      	ldr	r2, [pc, #124]	@ (800916c <prvHeapInit+0xac>)
 80090f0:	4413      	add	r3, r2
 80090f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80090f8:	4a1d      	ldr	r2, [pc, #116]	@ (8009170 <prvHeapInit+0xb0>)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80090fe:	4b1c      	ldr	r3, [pc, #112]	@ (8009170 <prvHeapInit+0xb0>)
 8009100:	2200      	movs	r2, #0
 8009102:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	68ba      	ldr	r2, [r7, #8]
 8009108:	4413      	add	r3, r2
 800910a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800910c:	2208      	movs	r2, #8
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	1a9b      	subs	r3, r3, r2
 8009112:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	f023 0307 	bic.w	r3, r3, #7
 800911a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	4a15      	ldr	r2, [pc, #84]	@ (8009174 <prvHeapInit+0xb4>)
 8009120:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009122:	4b14      	ldr	r3, [pc, #80]	@ (8009174 <prvHeapInit+0xb4>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	2200      	movs	r2, #0
 8009128:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800912a:	4b12      	ldr	r3, [pc, #72]	@ (8009174 <prvHeapInit+0xb4>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	2200      	movs	r2, #0
 8009130:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	68fa      	ldr	r2, [r7, #12]
 800913a:	1ad2      	subs	r2, r2, r3
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009140:	4b0c      	ldr	r3, [pc, #48]	@ (8009174 <prvHeapInit+0xb4>)
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	4a0a      	ldr	r2, [pc, #40]	@ (8009178 <prvHeapInit+0xb8>)
 800914e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	4a09      	ldr	r2, [pc, #36]	@ (800917c <prvHeapInit+0xbc>)
 8009156:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009158:	4b09      	ldr	r3, [pc, #36]	@ (8009180 <prvHeapInit+0xc0>)
 800915a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800915e:	601a      	str	r2, [r3, #0]
}
 8009160:	bf00      	nop
 8009162:	3714      	adds	r7, #20
 8009164:	46bd      	mov	sp, r7
 8009166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916a:	4770      	bx	lr
 800916c:	20000964 	.word	0x20000964
 8009170:	20004564 	.word	0x20004564
 8009174:	2000456c 	.word	0x2000456c
 8009178:	20004574 	.word	0x20004574
 800917c:	20004570 	.word	0x20004570
 8009180:	20004580 	.word	0x20004580

08009184 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009184:	b480      	push	{r7}
 8009186:	b085      	sub	sp, #20
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800918c:	4b28      	ldr	r3, [pc, #160]	@ (8009230 <prvInsertBlockIntoFreeList+0xac>)
 800918e:	60fb      	str	r3, [r7, #12]
 8009190:	e002      	b.n	8009198 <prvInsertBlockIntoFreeList+0x14>
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	60fb      	str	r3, [r7, #12]
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	687a      	ldr	r2, [r7, #4]
 800919e:	429a      	cmp	r2, r3
 80091a0:	d8f7      	bhi.n	8009192 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	68ba      	ldr	r2, [r7, #8]
 80091ac:	4413      	add	r3, r2
 80091ae:	687a      	ldr	r2, [r7, #4]
 80091b0:	429a      	cmp	r2, r3
 80091b2:	d108      	bne.n	80091c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	685a      	ldr	r2, [r3, #4]
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	685b      	ldr	r3, [r3, #4]
 80091bc:	441a      	add	r2, r3
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	685b      	ldr	r3, [r3, #4]
 80091ce:	68ba      	ldr	r2, [r7, #8]
 80091d0:	441a      	add	r2, r3
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	429a      	cmp	r2, r3
 80091d8:	d118      	bne.n	800920c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681a      	ldr	r2, [r3, #0]
 80091de:	4b15      	ldr	r3, [pc, #84]	@ (8009234 <prvInsertBlockIntoFreeList+0xb0>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	429a      	cmp	r2, r3
 80091e4:	d00d      	beq.n	8009202 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	685a      	ldr	r2, [r3, #4]
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	685b      	ldr	r3, [r3, #4]
 80091f0:	441a      	add	r2, r3
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	681a      	ldr	r2, [r3, #0]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	601a      	str	r2, [r3, #0]
 8009200:	e008      	b.n	8009214 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009202:	4b0c      	ldr	r3, [pc, #48]	@ (8009234 <prvInsertBlockIntoFreeList+0xb0>)
 8009204:	681a      	ldr	r2, [r3, #0]
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	601a      	str	r2, [r3, #0]
 800920a:	e003      	b.n	8009214 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681a      	ldr	r2, [r3, #0]
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009214:	68fa      	ldr	r2, [r7, #12]
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	429a      	cmp	r2, r3
 800921a:	d002      	beq.n	8009222 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	687a      	ldr	r2, [r7, #4]
 8009220:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009222:	bf00      	nop
 8009224:	3714      	adds	r7, #20
 8009226:	46bd      	mov	sp, r7
 8009228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922c:	4770      	bx	lr
 800922e:	bf00      	nop
 8009230:	20004564 	.word	0x20004564
 8009234:	2000456c 	.word	0x2000456c

08009238 <malloc>:
 8009238:	4b02      	ldr	r3, [pc, #8]	@ (8009244 <malloc+0xc>)
 800923a:	4601      	mov	r1, r0
 800923c:	6818      	ldr	r0, [r3, #0]
 800923e:	f000 b82d 	b.w	800929c <_malloc_r>
 8009242:	bf00      	nop
 8009244:	20000194 	.word	0x20000194

08009248 <free>:
 8009248:	4b02      	ldr	r3, [pc, #8]	@ (8009254 <free+0xc>)
 800924a:	4601      	mov	r1, r0
 800924c:	6818      	ldr	r0, [r3, #0]
 800924e:	f001 b93b 	b.w	800a4c8 <_free_r>
 8009252:	bf00      	nop
 8009254:	20000194 	.word	0x20000194

08009258 <sbrk_aligned>:
 8009258:	b570      	push	{r4, r5, r6, lr}
 800925a:	4e0f      	ldr	r6, [pc, #60]	@ (8009298 <sbrk_aligned+0x40>)
 800925c:	460c      	mov	r4, r1
 800925e:	6831      	ldr	r1, [r6, #0]
 8009260:	4605      	mov	r5, r0
 8009262:	b911      	cbnz	r1, 800926a <sbrk_aligned+0x12>
 8009264:	f001 f8ca 	bl	800a3fc <_sbrk_r>
 8009268:	6030      	str	r0, [r6, #0]
 800926a:	4621      	mov	r1, r4
 800926c:	4628      	mov	r0, r5
 800926e:	f001 f8c5 	bl	800a3fc <_sbrk_r>
 8009272:	1c43      	adds	r3, r0, #1
 8009274:	d103      	bne.n	800927e <sbrk_aligned+0x26>
 8009276:	f04f 34ff 	mov.w	r4, #4294967295
 800927a:	4620      	mov	r0, r4
 800927c:	bd70      	pop	{r4, r5, r6, pc}
 800927e:	1cc4      	adds	r4, r0, #3
 8009280:	f024 0403 	bic.w	r4, r4, #3
 8009284:	42a0      	cmp	r0, r4
 8009286:	d0f8      	beq.n	800927a <sbrk_aligned+0x22>
 8009288:	1a21      	subs	r1, r4, r0
 800928a:	4628      	mov	r0, r5
 800928c:	f001 f8b6 	bl	800a3fc <_sbrk_r>
 8009290:	3001      	adds	r0, #1
 8009292:	d1f2      	bne.n	800927a <sbrk_aligned+0x22>
 8009294:	e7ef      	b.n	8009276 <sbrk_aligned+0x1e>
 8009296:	bf00      	nop
 8009298:	20004584 	.word	0x20004584

0800929c <_malloc_r>:
 800929c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092a0:	1ccd      	adds	r5, r1, #3
 80092a2:	f025 0503 	bic.w	r5, r5, #3
 80092a6:	3508      	adds	r5, #8
 80092a8:	2d0c      	cmp	r5, #12
 80092aa:	bf38      	it	cc
 80092ac:	250c      	movcc	r5, #12
 80092ae:	2d00      	cmp	r5, #0
 80092b0:	4606      	mov	r6, r0
 80092b2:	db01      	blt.n	80092b8 <_malloc_r+0x1c>
 80092b4:	42a9      	cmp	r1, r5
 80092b6:	d904      	bls.n	80092c2 <_malloc_r+0x26>
 80092b8:	230c      	movs	r3, #12
 80092ba:	6033      	str	r3, [r6, #0]
 80092bc:	2000      	movs	r0, #0
 80092be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009398 <_malloc_r+0xfc>
 80092c6:	f000 f869 	bl	800939c <__malloc_lock>
 80092ca:	f8d8 3000 	ldr.w	r3, [r8]
 80092ce:	461c      	mov	r4, r3
 80092d0:	bb44      	cbnz	r4, 8009324 <_malloc_r+0x88>
 80092d2:	4629      	mov	r1, r5
 80092d4:	4630      	mov	r0, r6
 80092d6:	f7ff ffbf 	bl	8009258 <sbrk_aligned>
 80092da:	1c43      	adds	r3, r0, #1
 80092dc:	4604      	mov	r4, r0
 80092de:	d158      	bne.n	8009392 <_malloc_r+0xf6>
 80092e0:	f8d8 4000 	ldr.w	r4, [r8]
 80092e4:	4627      	mov	r7, r4
 80092e6:	2f00      	cmp	r7, #0
 80092e8:	d143      	bne.n	8009372 <_malloc_r+0xd6>
 80092ea:	2c00      	cmp	r4, #0
 80092ec:	d04b      	beq.n	8009386 <_malloc_r+0xea>
 80092ee:	6823      	ldr	r3, [r4, #0]
 80092f0:	4639      	mov	r1, r7
 80092f2:	4630      	mov	r0, r6
 80092f4:	eb04 0903 	add.w	r9, r4, r3
 80092f8:	f001 f880 	bl	800a3fc <_sbrk_r>
 80092fc:	4581      	cmp	r9, r0
 80092fe:	d142      	bne.n	8009386 <_malloc_r+0xea>
 8009300:	6821      	ldr	r1, [r4, #0]
 8009302:	1a6d      	subs	r5, r5, r1
 8009304:	4629      	mov	r1, r5
 8009306:	4630      	mov	r0, r6
 8009308:	f7ff ffa6 	bl	8009258 <sbrk_aligned>
 800930c:	3001      	adds	r0, #1
 800930e:	d03a      	beq.n	8009386 <_malloc_r+0xea>
 8009310:	6823      	ldr	r3, [r4, #0]
 8009312:	442b      	add	r3, r5
 8009314:	6023      	str	r3, [r4, #0]
 8009316:	f8d8 3000 	ldr.w	r3, [r8]
 800931a:	685a      	ldr	r2, [r3, #4]
 800931c:	bb62      	cbnz	r2, 8009378 <_malloc_r+0xdc>
 800931e:	f8c8 7000 	str.w	r7, [r8]
 8009322:	e00f      	b.n	8009344 <_malloc_r+0xa8>
 8009324:	6822      	ldr	r2, [r4, #0]
 8009326:	1b52      	subs	r2, r2, r5
 8009328:	d420      	bmi.n	800936c <_malloc_r+0xd0>
 800932a:	2a0b      	cmp	r2, #11
 800932c:	d917      	bls.n	800935e <_malloc_r+0xc2>
 800932e:	1961      	adds	r1, r4, r5
 8009330:	42a3      	cmp	r3, r4
 8009332:	6025      	str	r5, [r4, #0]
 8009334:	bf18      	it	ne
 8009336:	6059      	strne	r1, [r3, #4]
 8009338:	6863      	ldr	r3, [r4, #4]
 800933a:	bf08      	it	eq
 800933c:	f8c8 1000 	streq.w	r1, [r8]
 8009340:	5162      	str	r2, [r4, r5]
 8009342:	604b      	str	r3, [r1, #4]
 8009344:	4630      	mov	r0, r6
 8009346:	f000 f82f 	bl	80093a8 <__malloc_unlock>
 800934a:	f104 000b 	add.w	r0, r4, #11
 800934e:	1d23      	adds	r3, r4, #4
 8009350:	f020 0007 	bic.w	r0, r0, #7
 8009354:	1ac2      	subs	r2, r0, r3
 8009356:	bf1c      	itt	ne
 8009358:	1a1b      	subne	r3, r3, r0
 800935a:	50a3      	strne	r3, [r4, r2]
 800935c:	e7af      	b.n	80092be <_malloc_r+0x22>
 800935e:	6862      	ldr	r2, [r4, #4]
 8009360:	42a3      	cmp	r3, r4
 8009362:	bf0c      	ite	eq
 8009364:	f8c8 2000 	streq.w	r2, [r8]
 8009368:	605a      	strne	r2, [r3, #4]
 800936a:	e7eb      	b.n	8009344 <_malloc_r+0xa8>
 800936c:	4623      	mov	r3, r4
 800936e:	6864      	ldr	r4, [r4, #4]
 8009370:	e7ae      	b.n	80092d0 <_malloc_r+0x34>
 8009372:	463c      	mov	r4, r7
 8009374:	687f      	ldr	r7, [r7, #4]
 8009376:	e7b6      	b.n	80092e6 <_malloc_r+0x4a>
 8009378:	461a      	mov	r2, r3
 800937a:	685b      	ldr	r3, [r3, #4]
 800937c:	42a3      	cmp	r3, r4
 800937e:	d1fb      	bne.n	8009378 <_malloc_r+0xdc>
 8009380:	2300      	movs	r3, #0
 8009382:	6053      	str	r3, [r2, #4]
 8009384:	e7de      	b.n	8009344 <_malloc_r+0xa8>
 8009386:	230c      	movs	r3, #12
 8009388:	6033      	str	r3, [r6, #0]
 800938a:	4630      	mov	r0, r6
 800938c:	f000 f80c 	bl	80093a8 <__malloc_unlock>
 8009390:	e794      	b.n	80092bc <_malloc_r+0x20>
 8009392:	6005      	str	r5, [r0, #0]
 8009394:	e7d6      	b.n	8009344 <_malloc_r+0xa8>
 8009396:	bf00      	nop
 8009398:	20004588 	.word	0x20004588

0800939c <__malloc_lock>:
 800939c:	4801      	ldr	r0, [pc, #4]	@ (80093a4 <__malloc_lock+0x8>)
 800939e:	f001 b87a 	b.w	800a496 <__retarget_lock_acquire_recursive>
 80093a2:	bf00      	nop
 80093a4:	200046cc 	.word	0x200046cc

080093a8 <__malloc_unlock>:
 80093a8:	4801      	ldr	r0, [pc, #4]	@ (80093b0 <__malloc_unlock+0x8>)
 80093aa:	f001 b875 	b.w	800a498 <__retarget_lock_release_recursive>
 80093ae:	bf00      	nop
 80093b0:	200046cc 	.word	0x200046cc

080093b4 <realloc>:
 80093b4:	4b02      	ldr	r3, [pc, #8]	@ (80093c0 <realloc+0xc>)
 80093b6:	460a      	mov	r2, r1
 80093b8:	4601      	mov	r1, r0
 80093ba:	6818      	ldr	r0, [r3, #0]
 80093bc:	f000 b802 	b.w	80093c4 <_realloc_r>
 80093c0:	20000194 	.word	0x20000194

080093c4 <_realloc_r>:
 80093c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093c8:	4680      	mov	r8, r0
 80093ca:	4615      	mov	r5, r2
 80093cc:	460c      	mov	r4, r1
 80093ce:	b921      	cbnz	r1, 80093da <_realloc_r+0x16>
 80093d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093d4:	4611      	mov	r1, r2
 80093d6:	f7ff bf61 	b.w	800929c <_malloc_r>
 80093da:	b92a      	cbnz	r2, 80093e8 <_realloc_r+0x24>
 80093dc:	f001 f874 	bl	800a4c8 <_free_r>
 80093e0:	2400      	movs	r4, #0
 80093e2:	4620      	mov	r0, r4
 80093e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093e8:	f002 f8b6 	bl	800b558 <_malloc_usable_size_r>
 80093ec:	4285      	cmp	r5, r0
 80093ee:	4606      	mov	r6, r0
 80093f0:	d802      	bhi.n	80093f8 <_realloc_r+0x34>
 80093f2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80093f6:	d8f4      	bhi.n	80093e2 <_realloc_r+0x1e>
 80093f8:	4629      	mov	r1, r5
 80093fa:	4640      	mov	r0, r8
 80093fc:	f7ff ff4e 	bl	800929c <_malloc_r>
 8009400:	4607      	mov	r7, r0
 8009402:	2800      	cmp	r0, #0
 8009404:	d0ec      	beq.n	80093e0 <_realloc_r+0x1c>
 8009406:	42b5      	cmp	r5, r6
 8009408:	462a      	mov	r2, r5
 800940a:	4621      	mov	r1, r4
 800940c:	bf28      	it	cs
 800940e:	4632      	movcs	r2, r6
 8009410:	f001 f843 	bl	800a49a <memcpy>
 8009414:	4621      	mov	r1, r4
 8009416:	4640      	mov	r0, r8
 8009418:	f001 f856 	bl	800a4c8 <_free_r>
 800941c:	463c      	mov	r4, r7
 800941e:	e7e0      	b.n	80093e2 <_realloc_r+0x1e>

08009420 <sulp>:
 8009420:	b570      	push	{r4, r5, r6, lr}
 8009422:	4604      	mov	r4, r0
 8009424:	460d      	mov	r5, r1
 8009426:	ec45 4b10 	vmov	d0, r4, r5
 800942a:	4616      	mov	r6, r2
 800942c:	f001 ff56 	bl	800b2dc <__ulp>
 8009430:	ec51 0b10 	vmov	r0, r1, d0
 8009434:	b17e      	cbz	r6, 8009456 <sulp+0x36>
 8009436:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800943a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800943e:	2b00      	cmp	r3, #0
 8009440:	dd09      	ble.n	8009456 <sulp+0x36>
 8009442:	051b      	lsls	r3, r3, #20
 8009444:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009448:	2400      	movs	r4, #0
 800944a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800944e:	4622      	mov	r2, r4
 8009450:	462b      	mov	r3, r5
 8009452:	f7f7 f901 	bl	8000658 <__aeabi_dmul>
 8009456:	ec41 0b10 	vmov	d0, r0, r1
 800945a:	bd70      	pop	{r4, r5, r6, pc}
 800945c:	0000      	movs	r0, r0
	...

08009460 <_strtod_l>:
 8009460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009464:	b09f      	sub	sp, #124	@ 0x7c
 8009466:	460c      	mov	r4, r1
 8009468:	9217      	str	r2, [sp, #92]	@ 0x5c
 800946a:	2200      	movs	r2, #0
 800946c:	921a      	str	r2, [sp, #104]	@ 0x68
 800946e:	9005      	str	r0, [sp, #20]
 8009470:	f04f 0a00 	mov.w	sl, #0
 8009474:	f04f 0b00 	mov.w	fp, #0
 8009478:	460a      	mov	r2, r1
 800947a:	9219      	str	r2, [sp, #100]	@ 0x64
 800947c:	7811      	ldrb	r1, [r2, #0]
 800947e:	292b      	cmp	r1, #43	@ 0x2b
 8009480:	d04a      	beq.n	8009518 <_strtod_l+0xb8>
 8009482:	d838      	bhi.n	80094f6 <_strtod_l+0x96>
 8009484:	290d      	cmp	r1, #13
 8009486:	d832      	bhi.n	80094ee <_strtod_l+0x8e>
 8009488:	2908      	cmp	r1, #8
 800948a:	d832      	bhi.n	80094f2 <_strtod_l+0x92>
 800948c:	2900      	cmp	r1, #0
 800948e:	d03b      	beq.n	8009508 <_strtod_l+0xa8>
 8009490:	2200      	movs	r2, #0
 8009492:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009494:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009496:	782a      	ldrb	r2, [r5, #0]
 8009498:	2a30      	cmp	r2, #48	@ 0x30
 800949a:	f040 80b3 	bne.w	8009604 <_strtod_l+0x1a4>
 800949e:	786a      	ldrb	r2, [r5, #1]
 80094a0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80094a4:	2a58      	cmp	r2, #88	@ 0x58
 80094a6:	d16e      	bne.n	8009586 <_strtod_l+0x126>
 80094a8:	9302      	str	r3, [sp, #8]
 80094aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80094ac:	9301      	str	r3, [sp, #4]
 80094ae:	ab1a      	add	r3, sp, #104	@ 0x68
 80094b0:	9300      	str	r3, [sp, #0]
 80094b2:	4a8e      	ldr	r2, [pc, #568]	@ (80096ec <_strtod_l+0x28c>)
 80094b4:	9805      	ldr	r0, [sp, #20]
 80094b6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80094b8:	a919      	add	r1, sp, #100	@ 0x64
 80094ba:	f001 f8b7 	bl	800a62c <__gethex>
 80094be:	f010 060f 	ands.w	r6, r0, #15
 80094c2:	4604      	mov	r4, r0
 80094c4:	d005      	beq.n	80094d2 <_strtod_l+0x72>
 80094c6:	2e06      	cmp	r6, #6
 80094c8:	d128      	bne.n	800951c <_strtod_l+0xbc>
 80094ca:	3501      	adds	r5, #1
 80094cc:	2300      	movs	r3, #0
 80094ce:	9519      	str	r5, [sp, #100]	@ 0x64
 80094d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80094d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	f040 858e 	bne.w	8009ff6 <_strtod_l+0xb96>
 80094da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80094dc:	b1cb      	cbz	r3, 8009512 <_strtod_l+0xb2>
 80094de:	4652      	mov	r2, sl
 80094e0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80094e4:	ec43 2b10 	vmov	d0, r2, r3
 80094e8:	b01f      	add	sp, #124	@ 0x7c
 80094ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094ee:	2920      	cmp	r1, #32
 80094f0:	d1ce      	bne.n	8009490 <_strtod_l+0x30>
 80094f2:	3201      	adds	r2, #1
 80094f4:	e7c1      	b.n	800947a <_strtod_l+0x1a>
 80094f6:	292d      	cmp	r1, #45	@ 0x2d
 80094f8:	d1ca      	bne.n	8009490 <_strtod_l+0x30>
 80094fa:	2101      	movs	r1, #1
 80094fc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80094fe:	1c51      	adds	r1, r2, #1
 8009500:	9119      	str	r1, [sp, #100]	@ 0x64
 8009502:	7852      	ldrb	r2, [r2, #1]
 8009504:	2a00      	cmp	r2, #0
 8009506:	d1c5      	bne.n	8009494 <_strtod_l+0x34>
 8009508:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800950a:	9419      	str	r4, [sp, #100]	@ 0x64
 800950c:	2b00      	cmp	r3, #0
 800950e:	f040 8570 	bne.w	8009ff2 <_strtod_l+0xb92>
 8009512:	4652      	mov	r2, sl
 8009514:	465b      	mov	r3, fp
 8009516:	e7e5      	b.n	80094e4 <_strtod_l+0x84>
 8009518:	2100      	movs	r1, #0
 800951a:	e7ef      	b.n	80094fc <_strtod_l+0x9c>
 800951c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800951e:	b13a      	cbz	r2, 8009530 <_strtod_l+0xd0>
 8009520:	2135      	movs	r1, #53	@ 0x35
 8009522:	a81c      	add	r0, sp, #112	@ 0x70
 8009524:	f001 ffd4 	bl	800b4d0 <__copybits>
 8009528:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800952a:	9805      	ldr	r0, [sp, #20]
 800952c:	f001 fba2 	bl	800ac74 <_Bfree>
 8009530:	3e01      	subs	r6, #1
 8009532:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009534:	2e04      	cmp	r6, #4
 8009536:	d806      	bhi.n	8009546 <_strtod_l+0xe6>
 8009538:	e8df f006 	tbb	[pc, r6]
 800953c:	201d0314 	.word	0x201d0314
 8009540:	14          	.byte	0x14
 8009541:	00          	.byte	0x00
 8009542:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009546:	05e1      	lsls	r1, r4, #23
 8009548:	bf48      	it	mi
 800954a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800954e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009552:	0d1b      	lsrs	r3, r3, #20
 8009554:	051b      	lsls	r3, r3, #20
 8009556:	2b00      	cmp	r3, #0
 8009558:	d1bb      	bne.n	80094d2 <_strtod_l+0x72>
 800955a:	f000 ff71 	bl	800a440 <__errno>
 800955e:	2322      	movs	r3, #34	@ 0x22
 8009560:	6003      	str	r3, [r0, #0]
 8009562:	e7b6      	b.n	80094d2 <_strtod_l+0x72>
 8009564:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009568:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800956c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009570:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009574:	e7e7      	b.n	8009546 <_strtod_l+0xe6>
 8009576:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80096f4 <_strtod_l+0x294>
 800957a:	e7e4      	b.n	8009546 <_strtod_l+0xe6>
 800957c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009580:	f04f 3aff 	mov.w	sl, #4294967295
 8009584:	e7df      	b.n	8009546 <_strtod_l+0xe6>
 8009586:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009588:	1c5a      	adds	r2, r3, #1
 800958a:	9219      	str	r2, [sp, #100]	@ 0x64
 800958c:	785b      	ldrb	r3, [r3, #1]
 800958e:	2b30      	cmp	r3, #48	@ 0x30
 8009590:	d0f9      	beq.n	8009586 <_strtod_l+0x126>
 8009592:	2b00      	cmp	r3, #0
 8009594:	d09d      	beq.n	80094d2 <_strtod_l+0x72>
 8009596:	2301      	movs	r3, #1
 8009598:	9309      	str	r3, [sp, #36]	@ 0x24
 800959a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800959c:	930c      	str	r3, [sp, #48]	@ 0x30
 800959e:	2300      	movs	r3, #0
 80095a0:	9308      	str	r3, [sp, #32]
 80095a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80095a4:	461f      	mov	r7, r3
 80095a6:	220a      	movs	r2, #10
 80095a8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80095aa:	7805      	ldrb	r5, [r0, #0]
 80095ac:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80095b0:	b2d9      	uxtb	r1, r3
 80095b2:	2909      	cmp	r1, #9
 80095b4:	d928      	bls.n	8009608 <_strtod_l+0x1a8>
 80095b6:	494e      	ldr	r1, [pc, #312]	@ (80096f0 <_strtod_l+0x290>)
 80095b8:	2201      	movs	r2, #1
 80095ba:	f000 fe82 	bl	800a2c2 <strncmp>
 80095be:	2800      	cmp	r0, #0
 80095c0:	d032      	beq.n	8009628 <_strtod_l+0x1c8>
 80095c2:	2000      	movs	r0, #0
 80095c4:	462a      	mov	r2, r5
 80095c6:	4681      	mov	r9, r0
 80095c8:	463d      	mov	r5, r7
 80095ca:	4603      	mov	r3, r0
 80095cc:	2a65      	cmp	r2, #101	@ 0x65
 80095ce:	d001      	beq.n	80095d4 <_strtod_l+0x174>
 80095d0:	2a45      	cmp	r2, #69	@ 0x45
 80095d2:	d114      	bne.n	80095fe <_strtod_l+0x19e>
 80095d4:	b91d      	cbnz	r5, 80095de <_strtod_l+0x17e>
 80095d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80095d8:	4302      	orrs	r2, r0
 80095da:	d095      	beq.n	8009508 <_strtod_l+0xa8>
 80095dc:	2500      	movs	r5, #0
 80095de:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80095e0:	1c62      	adds	r2, r4, #1
 80095e2:	9219      	str	r2, [sp, #100]	@ 0x64
 80095e4:	7862      	ldrb	r2, [r4, #1]
 80095e6:	2a2b      	cmp	r2, #43	@ 0x2b
 80095e8:	d077      	beq.n	80096da <_strtod_l+0x27a>
 80095ea:	2a2d      	cmp	r2, #45	@ 0x2d
 80095ec:	d07b      	beq.n	80096e6 <_strtod_l+0x286>
 80095ee:	f04f 0c00 	mov.w	ip, #0
 80095f2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80095f6:	2909      	cmp	r1, #9
 80095f8:	f240 8082 	bls.w	8009700 <_strtod_l+0x2a0>
 80095fc:	9419      	str	r4, [sp, #100]	@ 0x64
 80095fe:	f04f 0800 	mov.w	r8, #0
 8009602:	e0a2      	b.n	800974a <_strtod_l+0x2ea>
 8009604:	2300      	movs	r3, #0
 8009606:	e7c7      	b.n	8009598 <_strtod_l+0x138>
 8009608:	2f08      	cmp	r7, #8
 800960a:	bfd5      	itete	le
 800960c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800960e:	9908      	ldrgt	r1, [sp, #32]
 8009610:	fb02 3301 	mlale	r3, r2, r1, r3
 8009614:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009618:	f100 0001 	add.w	r0, r0, #1
 800961c:	bfd4      	ite	le
 800961e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009620:	9308      	strgt	r3, [sp, #32]
 8009622:	3701      	adds	r7, #1
 8009624:	9019      	str	r0, [sp, #100]	@ 0x64
 8009626:	e7bf      	b.n	80095a8 <_strtod_l+0x148>
 8009628:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800962a:	1c5a      	adds	r2, r3, #1
 800962c:	9219      	str	r2, [sp, #100]	@ 0x64
 800962e:	785a      	ldrb	r2, [r3, #1]
 8009630:	b37f      	cbz	r7, 8009692 <_strtod_l+0x232>
 8009632:	4681      	mov	r9, r0
 8009634:	463d      	mov	r5, r7
 8009636:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800963a:	2b09      	cmp	r3, #9
 800963c:	d912      	bls.n	8009664 <_strtod_l+0x204>
 800963e:	2301      	movs	r3, #1
 8009640:	e7c4      	b.n	80095cc <_strtod_l+0x16c>
 8009642:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009644:	1c5a      	adds	r2, r3, #1
 8009646:	9219      	str	r2, [sp, #100]	@ 0x64
 8009648:	785a      	ldrb	r2, [r3, #1]
 800964a:	3001      	adds	r0, #1
 800964c:	2a30      	cmp	r2, #48	@ 0x30
 800964e:	d0f8      	beq.n	8009642 <_strtod_l+0x1e2>
 8009650:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009654:	2b08      	cmp	r3, #8
 8009656:	f200 84d3 	bhi.w	800a000 <_strtod_l+0xba0>
 800965a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800965c:	930c      	str	r3, [sp, #48]	@ 0x30
 800965e:	4681      	mov	r9, r0
 8009660:	2000      	movs	r0, #0
 8009662:	4605      	mov	r5, r0
 8009664:	3a30      	subs	r2, #48	@ 0x30
 8009666:	f100 0301 	add.w	r3, r0, #1
 800966a:	d02a      	beq.n	80096c2 <_strtod_l+0x262>
 800966c:	4499      	add	r9, r3
 800966e:	eb00 0c05 	add.w	ip, r0, r5
 8009672:	462b      	mov	r3, r5
 8009674:	210a      	movs	r1, #10
 8009676:	4563      	cmp	r3, ip
 8009678:	d10d      	bne.n	8009696 <_strtod_l+0x236>
 800967a:	1c69      	adds	r1, r5, #1
 800967c:	4401      	add	r1, r0
 800967e:	4428      	add	r0, r5
 8009680:	2808      	cmp	r0, #8
 8009682:	dc16      	bgt.n	80096b2 <_strtod_l+0x252>
 8009684:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009686:	230a      	movs	r3, #10
 8009688:	fb03 2300 	mla	r3, r3, r0, r2
 800968c:	930a      	str	r3, [sp, #40]	@ 0x28
 800968e:	2300      	movs	r3, #0
 8009690:	e018      	b.n	80096c4 <_strtod_l+0x264>
 8009692:	4638      	mov	r0, r7
 8009694:	e7da      	b.n	800964c <_strtod_l+0x1ec>
 8009696:	2b08      	cmp	r3, #8
 8009698:	f103 0301 	add.w	r3, r3, #1
 800969c:	dc03      	bgt.n	80096a6 <_strtod_l+0x246>
 800969e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80096a0:	434e      	muls	r6, r1
 80096a2:	960a      	str	r6, [sp, #40]	@ 0x28
 80096a4:	e7e7      	b.n	8009676 <_strtod_l+0x216>
 80096a6:	2b10      	cmp	r3, #16
 80096a8:	bfde      	ittt	le
 80096aa:	9e08      	ldrle	r6, [sp, #32]
 80096ac:	434e      	mulle	r6, r1
 80096ae:	9608      	strle	r6, [sp, #32]
 80096b0:	e7e1      	b.n	8009676 <_strtod_l+0x216>
 80096b2:	280f      	cmp	r0, #15
 80096b4:	dceb      	bgt.n	800968e <_strtod_l+0x22e>
 80096b6:	9808      	ldr	r0, [sp, #32]
 80096b8:	230a      	movs	r3, #10
 80096ba:	fb03 2300 	mla	r3, r3, r0, r2
 80096be:	9308      	str	r3, [sp, #32]
 80096c0:	e7e5      	b.n	800968e <_strtod_l+0x22e>
 80096c2:	4629      	mov	r1, r5
 80096c4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80096c6:	1c50      	adds	r0, r2, #1
 80096c8:	9019      	str	r0, [sp, #100]	@ 0x64
 80096ca:	7852      	ldrb	r2, [r2, #1]
 80096cc:	4618      	mov	r0, r3
 80096ce:	460d      	mov	r5, r1
 80096d0:	e7b1      	b.n	8009636 <_strtod_l+0x1d6>
 80096d2:	f04f 0900 	mov.w	r9, #0
 80096d6:	2301      	movs	r3, #1
 80096d8:	e77d      	b.n	80095d6 <_strtod_l+0x176>
 80096da:	f04f 0c00 	mov.w	ip, #0
 80096de:	1ca2      	adds	r2, r4, #2
 80096e0:	9219      	str	r2, [sp, #100]	@ 0x64
 80096e2:	78a2      	ldrb	r2, [r4, #2]
 80096e4:	e785      	b.n	80095f2 <_strtod_l+0x192>
 80096e6:	f04f 0c01 	mov.w	ip, #1
 80096ea:	e7f8      	b.n	80096de <_strtod_l+0x27e>
 80096ec:	0800c53c 	.word	0x0800c53c
 80096f0:	0800c518 	.word	0x0800c518
 80096f4:	7ff00000 	.word	0x7ff00000
 80096f8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80096fa:	1c51      	adds	r1, r2, #1
 80096fc:	9119      	str	r1, [sp, #100]	@ 0x64
 80096fe:	7852      	ldrb	r2, [r2, #1]
 8009700:	2a30      	cmp	r2, #48	@ 0x30
 8009702:	d0f9      	beq.n	80096f8 <_strtod_l+0x298>
 8009704:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009708:	2908      	cmp	r1, #8
 800970a:	f63f af78 	bhi.w	80095fe <_strtod_l+0x19e>
 800970e:	3a30      	subs	r2, #48	@ 0x30
 8009710:	920e      	str	r2, [sp, #56]	@ 0x38
 8009712:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009714:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009716:	f04f 080a 	mov.w	r8, #10
 800971a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800971c:	1c56      	adds	r6, r2, #1
 800971e:	9619      	str	r6, [sp, #100]	@ 0x64
 8009720:	7852      	ldrb	r2, [r2, #1]
 8009722:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009726:	f1be 0f09 	cmp.w	lr, #9
 800972a:	d939      	bls.n	80097a0 <_strtod_l+0x340>
 800972c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800972e:	1a76      	subs	r6, r6, r1
 8009730:	2e08      	cmp	r6, #8
 8009732:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009736:	dc03      	bgt.n	8009740 <_strtod_l+0x2e0>
 8009738:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800973a:	4588      	cmp	r8, r1
 800973c:	bfa8      	it	ge
 800973e:	4688      	movge	r8, r1
 8009740:	f1bc 0f00 	cmp.w	ip, #0
 8009744:	d001      	beq.n	800974a <_strtod_l+0x2ea>
 8009746:	f1c8 0800 	rsb	r8, r8, #0
 800974a:	2d00      	cmp	r5, #0
 800974c:	d14e      	bne.n	80097ec <_strtod_l+0x38c>
 800974e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009750:	4308      	orrs	r0, r1
 8009752:	f47f aebe 	bne.w	80094d2 <_strtod_l+0x72>
 8009756:	2b00      	cmp	r3, #0
 8009758:	f47f aed6 	bne.w	8009508 <_strtod_l+0xa8>
 800975c:	2a69      	cmp	r2, #105	@ 0x69
 800975e:	d028      	beq.n	80097b2 <_strtod_l+0x352>
 8009760:	dc25      	bgt.n	80097ae <_strtod_l+0x34e>
 8009762:	2a49      	cmp	r2, #73	@ 0x49
 8009764:	d025      	beq.n	80097b2 <_strtod_l+0x352>
 8009766:	2a4e      	cmp	r2, #78	@ 0x4e
 8009768:	f47f aece 	bne.w	8009508 <_strtod_l+0xa8>
 800976c:	499b      	ldr	r1, [pc, #620]	@ (80099dc <_strtod_l+0x57c>)
 800976e:	a819      	add	r0, sp, #100	@ 0x64
 8009770:	f001 f97e 	bl	800aa70 <__match>
 8009774:	2800      	cmp	r0, #0
 8009776:	f43f aec7 	beq.w	8009508 <_strtod_l+0xa8>
 800977a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800977c:	781b      	ldrb	r3, [r3, #0]
 800977e:	2b28      	cmp	r3, #40	@ 0x28
 8009780:	d12e      	bne.n	80097e0 <_strtod_l+0x380>
 8009782:	4997      	ldr	r1, [pc, #604]	@ (80099e0 <_strtod_l+0x580>)
 8009784:	aa1c      	add	r2, sp, #112	@ 0x70
 8009786:	a819      	add	r0, sp, #100	@ 0x64
 8009788:	f001 f986 	bl	800aa98 <__hexnan>
 800978c:	2805      	cmp	r0, #5
 800978e:	d127      	bne.n	80097e0 <_strtod_l+0x380>
 8009790:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009792:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009796:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800979a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800979e:	e698      	b.n	80094d2 <_strtod_l+0x72>
 80097a0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80097a2:	fb08 2101 	mla	r1, r8, r1, r2
 80097a6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80097aa:	920e      	str	r2, [sp, #56]	@ 0x38
 80097ac:	e7b5      	b.n	800971a <_strtod_l+0x2ba>
 80097ae:	2a6e      	cmp	r2, #110	@ 0x6e
 80097b0:	e7da      	b.n	8009768 <_strtod_l+0x308>
 80097b2:	498c      	ldr	r1, [pc, #560]	@ (80099e4 <_strtod_l+0x584>)
 80097b4:	a819      	add	r0, sp, #100	@ 0x64
 80097b6:	f001 f95b 	bl	800aa70 <__match>
 80097ba:	2800      	cmp	r0, #0
 80097bc:	f43f aea4 	beq.w	8009508 <_strtod_l+0xa8>
 80097c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80097c2:	4989      	ldr	r1, [pc, #548]	@ (80099e8 <_strtod_l+0x588>)
 80097c4:	3b01      	subs	r3, #1
 80097c6:	a819      	add	r0, sp, #100	@ 0x64
 80097c8:	9319      	str	r3, [sp, #100]	@ 0x64
 80097ca:	f001 f951 	bl	800aa70 <__match>
 80097ce:	b910      	cbnz	r0, 80097d6 <_strtod_l+0x376>
 80097d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80097d2:	3301      	adds	r3, #1
 80097d4:	9319      	str	r3, [sp, #100]	@ 0x64
 80097d6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80099f8 <_strtod_l+0x598>
 80097da:	f04f 0a00 	mov.w	sl, #0
 80097de:	e678      	b.n	80094d2 <_strtod_l+0x72>
 80097e0:	4882      	ldr	r0, [pc, #520]	@ (80099ec <_strtod_l+0x58c>)
 80097e2:	f000 fe69 	bl	800a4b8 <nan>
 80097e6:	ec5b ab10 	vmov	sl, fp, d0
 80097ea:	e672      	b.n	80094d2 <_strtod_l+0x72>
 80097ec:	eba8 0309 	sub.w	r3, r8, r9
 80097f0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80097f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80097f4:	2f00      	cmp	r7, #0
 80097f6:	bf08      	it	eq
 80097f8:	462f      	moveq	r7, r5
 80097fa:	2d10      	cmp	r5, #16
 80097fc:	462c      	mov	r4, r5
 80097fe:	bfa8      	it	ge
 8009800:	2410      	movge	r4, #16
 8009802:	f7f6 feaf 	bl	8000564 <__aeabi_ui2d>
 8009806:	2d09      	cmp	r5, #9
 8009808:	4682      	mov	sl, r0
 800980a:	468b      	mov	fp, r1
 800980c:	dc13      	bgt.n	8009836 <_strtod_l+0x3d6>
 800980e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009810:	2b00      	cmp	r3, #0
 8009812:	f43f ae5e 	beq.w	80094d2 <_strtod_l+0x72>
 8009816:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009818:	dd78      	ble.n	800990c <_strtod_l+0x4ac>
 800981a:	2b16      	cmp	r3, #22
 800981c:	dc5f      	bgt.n	80098de <_strtod_l+0x47e>
 800981e:	4974      	ldr	r1, [pc, #464]	@ (80099f0 <_strtod_l+0x590>)
 8009820:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009824:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009828:	4652      	mov	r2, sl
 800982a:	465b      	mov	r3, fp
 800982c:	f7f6 ff14 	bl	8000658 <__aeabi_dmul>
 8009830:	4682      	mov	sl, r0
 8009832:	468b      	mov	fp, r1
 8009834:	e64d      	b.n	80094d2 <_strtod_l+0x72>
 8009836:	4b6e      	ldr	r3, [pc, #440]	@ (80099f0 <_strtod_l+0x590>)
 8009838:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800983c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009840:	f7f6 ff0a 	bl	8000658 <__aeabi_dmul>
 8009844:	4682      	mov	sl, r0
 8009846:	9808      	ldr	r0, [sp, #32]
 8009848:	468b      	mov	fp, r1
 800984a:	f7f6 fe8b 	bl	8000564 <__aeabi_ui2d>
 800984e:	4602      	mov	r2, r0
 8009850:	460b      	mov	r3, r1
 8009852:	4650      	mov	r0, sl
 8009854:	4659      	mov	r1, fp
 8009856:	f7f6 fd49 	bl	80002ec <__adddf3>
 800985a:	2d0f      	cmp	r5, #15
 800985c:	4682      	mov	sl, r0
 800985e:	468b      	mov	fp, r1
 8009860:	ddd5      	ble.n	800980e <_strtod_l+0x3ae>
 8009862:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009864:	1b2c      	subs	r4, r5, r4
 8009866:	441c      	add	r4, r3
 8009868:	2c00      	cmp	r4, #0
 800986a:	f340 8096 	ble.w	800999a <_strtod_l+0x53a>
 800986e:	f014 030f 	ands.w	r3, r4, #15
 8009872:	d00a      	beq.n	800988a <_strtod_l+0x42a>
 8009874:	495e      	ldr	r1, [pc, #376]	@ (80099f0 <_strtod_l+0x590>)
 8009876:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800987a:	4652      	mov	r2, sl
 800987c:	465b      	mov	r3, fp
 800987e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009882:	f7f6 fee9 	bl	8000658 <__aeabi_dmul>
 8009886:	4682      	mov	sl, r0
 8009888:	468b      	mov	fp, r1
 800988a:	f034 040f 	bics.w	r4, r4, #15
 800988e:	d073      	beq.n	8009978 <_strtod_l+0x518>
 8009890:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009894:	dd48      	ble.n	8009928 <_strtod_l+0x4c8>
 8009896:	2400      	movs	r4, #0
 8009898:	46a0      	mov	r8, r4
 800989a:	940a      	str	r4, [sp, #40]	@ 0x28
 800989c:	46a1      	mov	r9, r4
 800989e:	9a05      	ldr	r2, [sp, #20]
 80098a0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80099f8 <_strtod_l+0x598>
 80098a4:	2322      	movs	r3, #34	@ 0x22
 80098a6:	6013      	str	r3, [r2, #0]
 80098a8:	f04f 0a00 	mov.w	sl, #0
 80098ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	f43f ae0f 	beq.w	80094d2 <_strtod_l+0x72>
 80098b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80098b6:	9805      	ldr	r0, [sp, #20]
 80098b8:	f001 f9dc 	bl	800ac74 <_Bfree>
 80098bc:	9805      	ldr	r0, [sp, #20]
 80098be:	4649      	mov	r1, r9
 80098c0:	f001 f9d8 	bl	800ac74 <_Bfree>
 80098c4:	9805      	ldr	r0, [sp, #20]
 80098c6:	4641      	mov	r1, r8
 80098c8:	f001 f9d4 	bl	800ac74 <_Bfree>
 80098cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80098ce:	9805      	ldr	r0, [sp, #20]
 80098d0:	f001 f9d0 	bl	800ac74 <_Bfree>
 80098d4:	9805      	ldr	r0, [sp, #20]
 80098d6:	4621      	mov	r1, r4
 80098d8:	f001 f9cc 	bl	800ac74 <_Bfree>
 80098dc:	e5f9      	b.n	80094d2 <_strtod_l+0x72>
 80098de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80098e0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80098e4:	4293      	cmp	r3, r2
 80098e6:	dbbc      	blt.n	8009862 <_strtod_l+0x402>
 80098e8:	4c41      	ldr	r4, [pc, #260]	@ (80099f0 <_strtod_l+0x590>)
 80098ea:	f1c5 050f 	rsb	r5, r5, #15
 80098ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80098f2:	4652      	mov	r2, sl
 80098f4:	465b      	mov	r3, fp
 80098f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098fa:	f7f6 fead 	bl	8000658 <__aeabi_dmul>
 80098fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009900:	1b5d      	subs	r5, r3, r5
 8009902:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009906:	e9d4 2300 	ldrd	r2, r3, [r4]
 800990a:	e78f      	b.n	800982c <_strtod_l+0x3cc>
 800990c:	3316      	adds	r3, #22
 800990e:	dba8      	blt.n	8009862 <_strtod_l+0x402>
 8009910:	4b37      	ldr	r3, [pc, #220]	@ (80099f0 <_strtod_l+0x590>)
 8009912:	eba9 0808 	sub.w	r8, r9, r8
 8009916:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800991a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800991e:	4650      	mov	r0, sl
 8009920:	4659      	mov	r1, fp
 8009922:	f7f6 ffc3 	bl	80008ac <__aeabi_ddiv>
 8009926:	e783      	b.n	8009830 <_strtod_l+0x3d0>
 8009928:	4b32      	ldr	r3, [pc, #200]	@ (80099f4 <_strtod_l+0x594>)
 800992a:	9308      	str	r3, [sp, #32]
 800992c:	2300      	movs	r3, #0
 800992e:	1124      	asrs	r4, r4, #4
 8009930:	4650      	mov	r0, sl
 8009932:	4659      	mov	r1, fp
 8009934:	461e      	mov	r6, r3
 8009936:	2c01      	cmp	r4, #1
 8009938:	dc21      	bgt.n	800997e <_strtod_l+0x51e>
 800993a:	b10b      	cbz	r3, 8009940 <_strtod_l+0x4e0>
 800993c:	4682      	mov	sl, r0
 800993e:	468b      	mov	fp, r1
 8009940:	492c      	ldr	r1, [pc, #176]	@ (80099f4 <_strtod_l+0x594>)
 8009942:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009946:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800994a:	4652      	mov	r2, sl
 800994c:	465b      	mov	r3, fp
 800994e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009952:	f7f6 fe81 	bl	8000658 <__aeabi_dmul>
 8009956:	4b28      	ldr	r3, [pc, #160]	@ (80099f8 <_strtod_l+0x598>)
 8009958:	460a      	mov	r2, r1
 800995a:	400b      	ands	r3, r1
 800995c:	4927      	ldr	r1, [pc, #156]	@ (80099fc <_strtod_l+0x59c>)
 800995e:	428b      	cmp	r3, r1
 8009960:	4682      	mov	sl, r0
 8009962:	d898      	bhi.n	8009896 <_strtod_l+0x436>
 8009964:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009968:	428b      	cmp	r3, r1
 800996a:	bf86      	itte	hi
 800996c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009a00 <_strtod_l+0x5a0>
 8009970:	f04f 3aff 	movhi.w	sl, #4294967295
 8009974:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009978:	2300      	movs	r3, #0
 800997a:	9308      	str	r3, [sp, #32]
 800997c:	e07a      	b.n	8009a74 <_strtod_l+0x614>
 800997e:	07e2      	lsls	r2, r4, #31
 8009980:	d505      	bpl.n	800998e <_strtod_l+0x52e>
 8009982:	9b08      	ldr	r3, [sp, #32]
 8009984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009988:	f7f6 fe66 	bl	8000658 <__aeabi_dmul>
 800998c:	2301      	movs	r3, #1
 800998e:	9a08      	ldr	r2, [sp, #32]
 8009990:	3208      	adds	r2, #8
 8009992:	3601      	adds	r6, #1
 8009994:	1064      	asrs	r4, r4, #1
 8009996:	9208      	str	r2, [sp, #32]
 8009998:	e7cd      	b.n	8009936 <_strtod_l+0x4d6>
 800999a:	d0ed      	beq.n	8009978 <_strtod_l+0x518>
 800999c:	4264      	negs	r4, r4
 800999e:	f014 020f 	ands.w	r2, r4, #15
 80099a2:	d00a      	beq.n	80099ba <_strtod_l+0x55a>
 80099a4:	4b12      	ldr	r3, [pc, #72]	@ (80099f0 <_strtod_l+0x590>)
 80099a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80099aa:	4650      	mov	r0, sl
 80099ac:	4659      	mov	r1, fp
 80099ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b2:	f7f6 ff7b 	bl	80008ac <__aeabi_ddiv>
 80099b6:	4682      	mov	sl, r0
 80099b8:	468b      	mov	fp, r1
 80099ba:	1124      	asrs	r4, r4, #4
 80099bc:	d0dc      	beq.n	8009978 <_strtod_l+0x518>
 80099be:	2c1f      	cmp	r4, #31
 80099c0:	dd20      	ble.n	8009a04 <_strtod_l+0x5a4>
 80099c2:	2400      	movs	r4, #0
 80099c4:	46a0      	mov	r8, r4
 80099c6:	940a      	str	r4, [sp, #40]	@ 0x28
 80099c8:	46a1      	mov	r9, r4
 80099ca:	9a05      	ldr	r2, [sp, #20]
 80099cc:	2322      	movs	r3, #34	@ 0x22
 80099ce:	f04f 0a00 	mov.w	sl, #0
 80099d2:	f04f 0b00 	mov.w	fp, #0
 80099d6:	6013      	str	r3, [r2, #0]
 80099d8:	e768      	b.n	80098ac <_strtod_l+0x44c>
 80099da:	bf00      	nop
 80099dc:	0800c523 	.word	0x0800c523
 80099e0:	0800c528 	.word	0x0800c528
 80099e4:	0800c51a 	.word	0x0800c51a
 80099e8:	0800c51d 	.word	0x0800c51d
 80099ec:	0800c8ce 	.word	0x0800c8ce
 80099f0:	0800c798 	.word	0x0800c798
 80099f4:	0800c770 	.word	0x0800c770
 80099f8:	7ff00000 	.word	0x7ff00000
 80099fc:	7ca00000 	.word	0x7ca00000
 8009a00:	7fefffff 	.word	0x7fefffff
 8009a04:	f014 0310 	ands.w	r3, r4, #16
 8009a08:	bf18      	it	ne
 8009a0a:	236a      	movne	r3, #106	@ 0x6a
 8009a0c:	4ea9      	ldr	r6, [pc, #676]	@ (8009cb4 <_strtod_l+0x854>)
 8009a0e:	9308      	str	r3, [sp, #32]
 8009a10:	4650      	mov	r0, sl
 8009a12:	4659      	mov	r1, fp
 8009a14:	2300      	movs	r3, #0
 8009a16:	07e2      	lsls	r2, r4, #31
 8009a18:	d504      	bpl.n	8009a24 <_strtod_l+0x5c4>
 8009a1a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009a1e:	f7f6 fe1b 	bl	8000658 <__aeabi_dmul>
 8009a22:	2301      	movs	r3, #1
 8009a24:	1064      	asrs	r4, r4, #1
 8009a26:	f106 0608 	add.w	r6, r6, #8
 8009a2a:	d1f4      	bne.n	8009a16 <_strtod_l+0x5b6>
 8009a2c:	b10b      	cbz	r3, 8009a32 <_strtod_l+0x5d2>
 8009a2e:	4682      	mov	sl, r0
 8009a30:	468b      	mov	fp, r1
 8009a32:	9b08      	ldr	r3, [sp, #32]
 8009a34:	b1b3      	cbz	r3, 8009a64 <_strtod_l+0x604>
 8009a36:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009a3a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	4659      	mov	r1, fp
 8009a42:	dd0f      	ble.n	8009a64 <_strtod_l+0x604>
 8009a44:	2b1f      	cmp	r3, #31
 8009a46:	dd55      	ble.n	8009af4 <_strtod_l+0x694>
 8009a48:	2b34      	cmp	r3, #52	@ 0x34
 8009a4a:	bfde      	ittt	le
 8009a4c:	f04f 33ff 	movle.w	r3, #4294967295
 8009a50:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009a54:	4093      	lslle	r3, r2
 8009a56:	f04f 0a00 	mov.w	sl, #0
 8009a5a:	bfcc      	ite	gt
 8009a5c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009a60:	ea03 0b01 	andle.w	fp, r3, r1
 8009a64:	2200      	movs	r2, #0
 8009a66:	2300      	movs	r3, #0
 8009a68:	4650      	mov	r0, sl
 8009a6a:	4659      	mov	r1, fp
 8009a6c:	f7f7 f85c 	bl	8000b28 <__aeabi_dcmpeq>
 8009a70:	2800      	cmp	r0, #0
 8009a72:	d1a6      	bne.n	80099c2 <_strtod_l+0x562>
 8009a74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a76:	9300      	str	r3, [sp, #0]
 8009a78:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009a7a:	9805      	ldr	r0, [sp, #20]
 8009a7c:	462b      	mov	r3, r5
 8009a7e:	463a      	mov	r2, r7
 8009a80:	f001 f960 	bl	800ad44 <__s2b>
 8009a84:	900a      	str	r0, [sp, #40]	@ 0x28
 8009a86:	2800      	cmp	r0, #0
 8009a88:	f43f af05 	beq.w	8009896 <_strtod_l+0x436>
 8009a8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a8e:	2a00      	cmp	r2, #0
 8009a90:	eba9 0308 	sub.w	r3, r9, r8
 8009a94:	bfa8      	it	ge
 8009a96:	2300      	movge	r3, #0
 8009a98:	9312      	str	r3, [sp, #72]	@ 0x48
 8009a9a:	2400      	movs	r4, #0
 8009a9c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009aa0:	9316      	str	r3, [sp, #88]	@ 0x58
 8009aa2:	46a0      	mov	r8, r4
 8009aa4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009aa6:	9805      	ldr	r0, [sp, #20]
 8009aa8:	6859      	ldr	r1, [r3, #4]
 8009aaa:	f001 f8a3 	bl	800abf4 <_Balloc>
 8009aae:	4681      	mov	r9, r0
 8009ab0:	2800      	cmp	r0, #0
 8009ab2:	f43f aef4 	beq.w	800989e <_strtod_l+0x43e>
 8009ab6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ab8:	691a      	ldr	r2, [r3, #16]
 8009aba:	3202      	adds	r2, #2
 8009abc:	f103 010c 	add.w	r1, r3, #12
 8009ac0:	0092      	lsls	r2, r2, #2
 8009ac2:	300c      	adds	r0, #12
 8009ac4:	f000 fce9 	bl	800a49a <memcpy>
 8009ac8:	ec4b ab10 	vmov	d0, sl, fp
 8009acc:	9805      	ldr	r0, [sp, #20]
 8009ace:	aa1c      	add	r2, sp, #112	@ 0x70
 8009ad0:	a91b      	add	r1, sp, #108	@ 0x6c
 8009ad2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009ad6:	f001 fc71 	bl	800b3bc <__d2b>
 8009ada:	901a      	str	r0, [sp, #104]	@ 0x68
 8009adc:	2800      	cmp	r0, #0
 8009ade:	f43f aede 	beq.w	800989e <_strtod_l+0x43e>
 8009ae2:	9805      	ldr	r0, [sp, #20]
 8009ae4:	2101      	movs	r1, #1
 8009ae6:	f001 f9c3 	bl	800ae70 <__i2b>
 8009aea:	4680      	mov	r8, r0
 8009aec:	b948      	cbnz	r0, 8009b02 <_strtod_l+0x6a2>
 8009aee:	f04f 0800 	mov.w	r8, #0
 8009af2:	e6d4      	b.n	800989e <_strtod_l+0x43e>
 8009af4:	f04f 32ff 	mov.w	r2, #4294967295
 8009af8:	fa02 f303 	lsl.w	r3, r2, r3
 8009afc:	ea03 0a0a 	and.w	sl, r3, sl
 8009b00:	e7b0      	b.n	8009a64 <_strtod_l+0x604>
 8009b02:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009b04:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009b06:	2d00      	cmp	r5, #0
 8009b08:	bfab      	itete	ge
 8009b0a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009b0c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009b0e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009b10:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009b12:	bfac      	ite	ge
 8009b14:	18ef      	addge	r7, r5, r3
 8009b16:	1b5e      	sublt	r6, r3, r5
 8009b18:	9b08      	ldr	r3, [sp, #32]
 8009b1a:	1aed      	subs	r5, r5, r3
 8009b1c:	4415      	add	r5, r2
 8009b1e:	4b66      	ldr	r3, [pc, #408]	@ (8009cb8 <_strtod_l+0x858>)
 8009b20:	3d01      	subs	r5, #1
 8009b22:	429d      	cmp	r5, r3
 8009b24:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009b28:	da50      	bge.n	8009bcc <_strtod_l+0x76c>
 8009b2a:	1b5b      	subs	r3, r3, r5
 8009b2c:	2b1f      	cmp	r3, #31
 8009b2e:	eba2 0203 	sub.w	r2, r2, r3
 8009b32:	f04f 0101 	mov.w	r1, #1
 8009b36:	dc3d      	bgt.n	8009bb4 <_strtod_l+0x754>
 8009b38:	fa01 f303 	lsl.w	r3, r1, r3
 8009b3c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009b3e:	2300      	movs	r3, #0
 8009b40:	9310      	str	r3, [sp, #64]	@ 0x40
 8009b42:	18bd      	adds	r5, r7, r2
 8009b44:	9b08      	ldr	r3, [sp, #32]
 8009b46:	42af      	cmp	r7, r5
 8009b48:	4416      	add	r6, r2
 8009b4a:	441e      	add	r6, r3
 8009b4c:	463b      	mov	r3, r7
 8009b4e:	bfa8      	it	ge
 8009b50:	462b      	movge	r3, r5
 8009b52:	42b3      	cmp	r3, r6
 8009b54:	bfa8      	it	ge
 8009b56:	4633      	movge	r3, r6
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	bfc2      	ittt	gt
 8009b5c:	1aed      	subgt	r5, r5, r3
 8009b5e:	1af6      	subgt	r6, r6, r3
 8009b60:	1aff      	subgt	r7, r7, r3
 8009b62:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	dd16      	ble.n	8009b96 <_strtod_l+0x736>
 8009b68:	4641      	mov	r1, r8
 8009b6a:	9805      	ldr	r0, [sp, #20]
 8009b6c:	461a      	mov	r2, r3
 8009b6e:	f001 fa3f 	bl	800aff0 <__pow5mult>
 8009b72:	4680      	mov	r8, r0
 8009b74:	2800      	cmp	r0, #0
 8009b76:	d0ba      	beq.n	8009aee <_strtod_l+0x68e>
 8009b78:	4601      	mov	r1, r0
 8009b7a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009b7c:	9805      	ldr	r0, [sp, #20]
 8009b7e:	f001 f98d 	bl	800ae9c <__multiply>
 8009b82:	900e      	str	r0, [sp, #56]	@ 0x38
 8009b84:	2800      	cmp	r0, #0
 8009b86:	f43f ae8a 	beq.w	800989e <_strtod_l+0x43e>
 8009b8a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009b8c:	9805      	ldr	r0, [sp, #20]
 8009b8e:	f001 f871 	bl	800ac74 <_Bfree>
 8009b92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b94:	931a      	str	r3, [sp, #104]	@ 0x68
 8009b96:	2d00      	cmp	r5, #0
 8009b98:	dc1d      	bgt.n	8009bd6 <_strtod_l+0x776>
 8009b9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	dd23      	ble.n	8009be8 <_strtod_l+0x788>
 8009ba0:	4649      	mov	r1, r9
 8009ba2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009ba4:	9805      	ldr	r0, [sp, #20]
 8009ba6:	f001 fa23 	bl	800aff0 <__pow5mult>
 8009baa:	4681      	mov	r9, r0
 8009bac:	b9e0      	cbnz	r0, 8009be8 <_strtod_l+0x788>
 8009bae:	f04f 0900 	mov.w	r9, #0
 8009bb2:	e674      	b.n	800989e <_strtod_l+0x43e>
 8009bb4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009bb8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009bbc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009bc0:	35e2      	adds	r5, #226	@ 0xe2
 8009bc2:	fa01 f305 	lsl.w	r3, r1, r5
 8009bc6:	9310      	str	r3, [sp, #64]	@ 0x40
 8009bc8:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009bca:	e7ba      	b.n	8009b42 <_strtod_l+0x6e2>
 8009bcc:	2300      	movs	r3, #0
 8009bce:	9310      	str	r3, [sp, #64]	@ 0x40
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009bd4:	e7b5      	b.n	8009b42 <_strtod_l+0x6e2>
 8009bd6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009bd8:	9805      	ldr	r0, [sp, #20]
 8009bda:	462a      	mov	r2, r5
 8009bdc:	f001 fa62 	bl	800b0a4 <__lshift>
 8009be0:	901a      	str	r0, [sp, #104]	@ 0x68
 8009be2:	2800      	cmp	r0, #0
 8009be4:	d1d9      	bne.n	8009b9a <_strtod_l+0x73a>
 8009be6:	e65a      	b.n	800989e <_strtod_l+0x43e>
 8009be8:	2e00      	cmp	r6, #0
 8009bea:	dd07      	ble.n	8009bfc <_strtod_l+0x79c>
 8009bec:	4649      	mov	r1, r9
 8009bee:	9805      	ldr	r0, [sp, #20]
 8009bf0:	4632      	mov	r2, r6
 8009bf2:	f001 fa57 	bl	800b0a4 <__lshift>
 8009bf6:	4681      	mov	r9, r0
 8009bf8:	2800      	cmp	r0, #0
 8009bfa:	d0d8      	beq.n	8009bae <_strtod_l+0x74e>
 8009bfc:	2f00      	cmp	r7, #0
 8009bfe:	dd08      	ble.n	8009c12 <_strtod_l+0x7b2>
 8009c00:	4641      	mov	r1, r8
 8009c02:	9805      	ldr	r0, [sp, #20]
 8009c04:	463a      	mov	r2, r7
 8009c06:	f001 fa4d 	bl	800b0a4 <__lshift>
 8009c0a:	4680      	mov	r8, r0
 8009c0c:	2800      	cmp	r0, #0
 8009c0e:	f43f ae46 	beq.w	800989e <_strtod_l+0x43e>
 8009c12:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009c14:	9805      	ldr	r0, [sp, #20]
 8009c16:	464a      	mov	r2, r9
 8009c18:	f001 facc 	bl	800b1b4 <__mdiff>
 8009c1c:	4604      	mov	r4, r0
 8009c1e:	2800      	cmp	r0, #0
 8009c20:	f43f ae3d 	beq.w	800989e <_strtod_l+0x43e>
 8009c24:	68c3      	ldr	r3, [r0, #12]
 8009c26:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009c28:	2300      	movs	r3, #0
 8009c2a:	60c3      	str	r3, [r0, #12]
 8009c2c:	4641      	mov	r1, r8
 8009c2e:	f001 faa5 	bl	800b17c <__mcmp>
 8009c32:	2800      	cmp	r0, #0
 8009c34:	da46      	bge.n	8009cc4 <_strtod_l+0x864>
 8009c36:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c38:	ea53 030a 	orrs.w	r3, r3, sl
 8009c3c:	d16c      	bne.n	8009d18 <_strtod_l+0x8b8>
 8009c3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d168      	bne.n	8009d18 <_strtod_l+0x8b8>
 8009c46:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009c4a:	0d1b      	lsrs	r3, r3, #20
 8009c4c:	051b      	lsls	r3, r3, #20
 8009c4e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009c52:	d961      	bls.n	8009d18 <_strtod_l+0x8b8>
 8009c54:	6963      	ldr	r3, [r4, #20]
 8009c56:	b913      	cbnz	r3, 8009c5e <_strtod_l+0x7fe>
 8009c58:	6923      	ldr	r3, [r4, #16]
 8009c5a:	2b01      	cmp	r3, #1
 8009c5c:	dd5c      	ble.n	8009d18 <_strtod_l+0x8b8>
 8009c5e:	4621      	mov	r1, r4
 8009c60:	2201      	movs	r2, #1
 8009c62:	9805      	ldr	r0, [sp, #20]
 8009c64:	f001 fa1e 	bl	800b0a4 <__lshift>
 8009c68:	4641      	mov	r1, r8
 8009c6a:	4604      	mov	r4, r0
 8009c6c:	f001 fa86 	bl	800b17c <__mcmp>
 8009c70:	2800      	cmp	r0, #0
 8009c72:	dd51      	ble.n	8009d18 <_strtod_l+0x8b8>
 8009c74:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009c78:	9a08      	ldr	r2, [sp, #32]
 8009c7a:	0d1b      	lsrs	r3, r3, #20
 8009c7c:	051b      	lsls	r3, r3, #20
 8009c7e:	2a00      	cmp	r2, #0
 8009c80:	d06b      	beq.n	8009d5a <_strtod_l+0x8fa>
 8009c82:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009c86:	d868      	bhi.n	8009d5a <_strtod_l+0x8fa>
 8009c88:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009c8c:	f67f ae9d 	bls.w	80099ca <_strtod_l+0x56a>
 8009c90:	4b0a      	ldr	r3, [pc, #40]	@ (8009cbc <_strtod_l+0x85c>)
 8009c92:	4650      	mov	r0, sl
 8009c94:	4659      	mov	r1, fp
 8009c96:	2200      	movs	r2, #0
 8009c98:	f7f6 fcde 	bl	8000658 <__aeabi_dmul>
 8009c9c:	4b08      	ldr	r3, [pc, #32]	@ (8009cc0 <_strtod_l+0x860>)
 8009c9e:	400b      	ands	r3, r1
 8009ca0:	4682      	mov	sl, r0
 8009ca2:	468b      	mov	fp, r1
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	f47f ae05 	bne.w	80098b4 <_strtod_l+0x454>
 8009caa:	9a05      	ldr	r2, [sp, #20]
 8009cac:	2322      	movs	r3, #34	@ 0x22
 8009cae:	6013      	str	r3, [r2, #0]
 8009cb0:	e600      	b.n	80098b4 <_strtod_l+0x454>
 8009cb2:	bf00      	nop
 8009cb4:	0800c550 	.word	0x0800c550
 8009cb8:	fffffc02 	.word	0xfffffc02
 8009cbc:	39500000 	.word	0x39500000
 8009cc0:	7ff00000 	.word	0x7ff00000
 8009cc4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009cc8:	d165      	bne.n	8009d96 <_strtod_l+0x936>
 8009cca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009ccc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009cd0:	b35a      	cbz	r2, 8009d2a <_strtod_l+0x8ca>
 8009cd2:	4a9f      	ldr	r2, [pc, #636]	@ (8009f50 <_strtod_l+0xaf0>)
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d12b      	bne.n	8009d30 <_strtod_l+0x8d0>
 8009cd8:	9b08      	ldr	r3, [sp, #32]
 8009cda:	4651      	mov	r1, sl
 8009cdc:	b303      	cbz	r3, 8009d20 <_strtod_l+0x8c0>
 8009cde:	4b9d      	ldr	r3, [pc, #628]	@ (8009f54 <_strtod_l+0xaf4>)
 8009ce0:	465a      	mov	r2, fp
 8009ce2:	4013      	ands	r3, r2
 8009ce4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8009cec:	d81b      	bhi.n	8009d26 <_strtod_l+0x8c6>
 8009cee:	0d1b      	lsrs	r3, r3, #20
 8009cf0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8009cf8:	4299      	cmp	r1, r3
 8009cfa:	d119      	bne.n	8009d30 <_strtod_l+0x8d0>
 8009cfc:	4b96      	ldr	r3, [pc, #600]	@ (8009f58 <_strtod_l+0xaf8>)
 8009cfe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d102      	bne.n	8009d0a <_strtod_l+0x8aa>
 8009d04:	3101      	adds	r1, #1
 8009d06:	f43f adca 	beq.w	800989e <_strtod_l+0x43e>
 8009d0a:	4b92      	ldr	r3, [pc, #584]	@ (8009f54 <_strtod_l+0xaf4>)
 8009d0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009d0e:	401a      	ands	r2, r3
 8009d10:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009d14:	f04f 0a00 	mov.w	sl, #0
 8009d18:	9b08      	ldr	r3, [sp, #32]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d1b8      	bne.n	8009c90 <_strtod_l+0x830>
 8009d1e:	e5c9      	b.n	80098b4 <_strtod_l+0x454>
 8009d20:	f04f 33ff 	mov.w	r3, #4294967295
 8009d24:	e7e8      	b.n	8009cf8 <_strtod_l+0x898>
 8009d26:	4613      	mov	r3, r2
 8009d28:	e7e6      	b.n	8009cf8 <_strtod_l+0x898>
 8009d2a:	ea53 030a 	orrs.w	r3, r3, sl
 8009d2e:	d0a1      	beq.n	8009c74 <_strtod_l+0x814>
 8009d30:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009d32:	b1db      	cbz	r3, 8009d6c <_strtod_l+0x90c>
 8009d34:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009d36:	4213      	tst	r3, r2
 8009d38:	d0ee      	beq.n	8009d18 <_strtod_l+0x8b8>
 8009d3a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d3c:	9a08      	ldr	r2, [sp, #32]
 8009d3e:	4650      	mov	r0, sl
 8009d40:	4659      	mov	r1, fp
 8009d42:	b1bb      	cbz	r3, 8009d74 <_strtod_l+0x914>
 8009d44:	f7ff fb6c 	bl	8009420 <sulp>
 8009d48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d4c:	ec53 2b10 	vmov	r2, r3, d0
 8009d50:	f7f6 facc 	bl	80002ec <__adddf3>
 8009d54:	4682      	mov	sl, r0
 8009d56:	468b      	mov	fp, r1
 8009d58:	e7de      	b.n	8009d18 <_strtod_l+0x8b8>
 8009d5a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009d5e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009d62:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009d66:	f04f 3aff 	mov.w	sl, #4294967295
 8009d6a:	e7d5      	b.n	8009d18 <_strtod_l+0x8b8>
 8009d6c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009d6e:	ea13 0f0a 	tst.w	r3, sl
 8009d72:	e7e1      	b.n	8009d38 <_strtod_l+0x8d8>
 8009d74:	f7ff fb54 	bl	8009420 <sulp>
 8009d78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d7c:	ec53 2b10 	vmov	r2, r3, d0
 8009d80:	f7f6 fab2 	bl	80002e8 <__aeabi_dsub>
 8009d84:	2200      	movs	r2, #0
 8009d86:	2300      	movs	r3, #0
 8009d88:	4682      	mov	sl, r0
 8009d8a:	468b      	mov	fp, r1
 8009d8c:	f7f6 fecc 	bl	8000b28 <__aeabi_dcmpeq>
 8009d90:	2800      	cmp	r0, #0
 8009d92:	d0c1      	beq.n	8009d18 <_strtod_l+0x8b8>
 8009d94:	e619      	b.n	80099ca <_strtod_l+0x56a>
 8009d96:	4641      	mov	r1, r8
 8009d98:	4620      	mov	r0, r4
 8009d9a:	f001 fb67 	bl	800b46c <__ratio>
 8009d9e:	ec57 6b10 	vmov	r6, r7, d0
 8009da2:	2200      	movs	r2, #0
 8009da4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009da8:	4630      	mov	r0, r6
 8009daa:	4639      	mov	r1, r7
 8009dac:	f7f6 fed0 	bl	8000b50 <__aeabi_dcmple>
 8009db0:	2800      	cmp	r0, #0
 8009db2:	d06f      	beq.n	8009e94 <_strtod_l+0xa34>
 8009db4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d17a      	bne.n	8009eb0 <_strtod_l+0xa50>
 8009dba:	f1ba 0f00 	cmp.w	sl, #0
 8009dbe:	d158      	bne.n	8009e72 <_strtod_l+0xa12>
 8009dc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009dc2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d15a      	bne.n	8009e80 <_strtod_l+0xa20>
 8009dca:	4b64      	ldr	r3, [pc, #400]	@ (8009f5c <_strtod_l+0xafc>)
 8009dcc:	2200      	movs	r2, #0
 8009dce:	4630      	mov	r0, r6
 8009dd0:	4639      	mov	r1, r7
 8009dd2:	f7f6 feb3 	bl	8000b3c <__aeabi_dcmplt>
 8009dd6:	2800      	cmp	r0, #0
 8009dd8:	d159      	bne.n	8009e8e <_strtod_l+0xa2e>
 8009dda:	4630      	mov	r0, r6
 8009ddc:	4639      	mov	r1, r7
 8009dde:	4b60      	ldr	r3, [pc, #384]	@ (8009f60 <_strtod_l+0xb00>)
 8009de0:	2200      	movs	r2, #0
 8009de2:	f7f6 fc39 	bl	8000658 <__aeabi_dmul>
 8009de6:	4606      	mov	r6, r0
 8009de8:	460f      	mov	r7, r1
 8009dea:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009dee:	9606      	str	r6, [sp, #24]
 8009df0:	9307      	str	r3, [sp, #28]
 8009df2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009df6:	4d57      	ldr	r5, [pc, #348]	@ (8009f54 <_strtod_l+0xaf4>)
 8009df8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009dfc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009dfe:	401d      	ands	r5, r3
 8009e00:	4b58      	ldr	r3, [pc, #352]	@ (8009f64 <_strtod_l+0xb04>)
 8009e02:	429d      	cmp	r5, r3
 8009e04:	f040 80b2 	bne.w	8009f6c <_strtod_l+0xb0c>
 8009e08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e0a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009e0e:	ec4b ab10 	vmov	d0, sl, fp
 8009e12:	f001 fa63 	bl	800b2dc <__ulp>
 8009e16:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e1a:	ec51 0b10 	vmov	r0, r1, d0
 8009e1e:	f7f6 fc1b 	bl	8000658 <__aeabi_dmul>
 8009e22:	4652      	mov	r2, sl
 8009e24:	465b      	mov	r3, fp
 8009e26:	f7f6 fa61 	bl	80002ec <__adddf3>
 8009e2a:	460b      	mov	r3, r1
 8009e2c:	4949      	ldr	r1, [pc, #292]	@ (8009f54 <_strtod_l+0xaf4>)
 8009e2e:	4a4e      	ldr	r2, [pc, #312]	@ (8009f68 <_strtod_l+0xb08>)
 8009e30:	4019      	ands	r1, r3
 8009e32:	4291      	cmp	r1, r2
 8009e34:	4682      	mov	sl, r0
 8009e36:	d942      	bls.n	8009ebe <_strtod_l+0xa5e>
 8009e38:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009e3a:	4b47      	ldr	r3, [pc, #284]	@ (8009f58 <_strtod_l+0xaf8>)
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d103      	bne.n	8009e48 <_strtod_l+0x9e8>
 8009e40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009e42:	3301      	adds	r3, #1
 8009e44:	f43f ad2b 	beq.w	800989e <_strtod_l+0x43e>
 8009e48:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009f58 <_strtod_l+0xaf8>
 8009e4c:	f04f 3aff 	mov.w	sl, #4294967295
 8009e50:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009e52:	9805      	ldr	r0, [sp, #20]
 8009e54:	f000 ff0e 	bl	800ac74 <_Bfree>
 8009e58:	9805      	ldr	r0, [sp, #20]
 8009e5a:	4649      	mov	r1, r9
 8009e5c:	f000 ff0a 	bl	800ac74 <_Bfree>
 8009e60:	9805      	ldr	r0, [sp, #20]
 8009e62:	4641      	mov	r1, r8
 8009e64:	f000 ff06 	bl	800ac74 <_Bfree>
 8009e68:	9805      	ldr	r0, [sp, #20]
 8009e6a:	4621      	mov	r1, r4
 8009e6c:	f000 ff02 	bl	800ac74 <_Bfree>
 8009e70:	e618      	b.n	8009aa4 <_strtod_l+0x644>
 8009e72:	f1ba 0f01 	cmp.w	sl, #1
 8009e76:	d103      	bne.n	8009e80 <_strtod_l+0xa20>
 8009e78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	f43f ada5 	beq.w	80099ca <_strtod_l+0x56a>
 8009e80:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009f30 <_strtod_l+0xad0>
 8009e84:	4f35      	ldr	r7, [pc, #212]	@ (8009f5c <_strtod_l+0xafc>)
 8009e86:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009e8a:	2600      	movs	r6, #0
 8009e8c:	e7b1      	b.n	8009df2 <_strtod_l+0x992>
 8009e8e:	4f34      	ldr	r7, [pc, #208]	@ (8009f60 <_strtod_l+0xb00>)
 8009e90:	2600      	movs	r6, #0
 8009e92:	e7aa      	b.n	8009dea <_strtod_l+0x98a>
 8009e94:	4b32      	ldr	r3, [pc, #200]	@ (8009f60 <_strtod_l+0xb00>)
 8009e96:	4630      	mov	r0, r6
 8009e98:	4639      	mov	r1, r7
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	f7f6 fbdc 	bl	8000658 <__aeabi_dmul>
 8009ea0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ea2:	4606      	mov	r6, r0
 8009ea4:	460f      	mov	r7, r1
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d09f      	beq.n	8009dea <_strtod_l+0x98a>
 8009eaa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009eae:	e7a0      	b.n	8009df2 <_strtod_l+0x992>
 8009eb0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009f38 <_strtod_l+0xad8>
 8009eb4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009eb8:	ec57 6b17 	vmov	r6, r7, d7
 8009ebc:	e799      	b.n	8009df2 <_strtod_l+0x992>
 8009ebe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009ec2:	9b08      	ldr	r3, [sp, #32]
 8009ec4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d1c1      	bne.n	8009e50 <_strtod_l+0x9f0>
 8009ecc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009ed0:	0d1b      	lsrs	r3, r3, #20
 8009ed2:	051b      	lsls	r3, r3, #20
 8009ed4:	429d      	cmp	r5, r3
 8009ed6:	d1bb      	bne.n	8009e50 <_strtod_l+0x9f0>
 8009ed8:	4630      	mov	r0, r6
 8009eda:	4639      	mov	r1, r7
 8009edc:	f7f6 ff06 	bl	8000cec <__aeabi_d2lz>
 8009ee0:	f7f6 fb8c 	bl	80005fc <__aeabi_l2d>
 8009ee4:	4602      	mov	r2, r0
 8009ee6:	460b      	mov	r3, r1
 8009ee8:	4630      	mov	r0, r6
 8009eea:	4639      	mov	r1, r7
 8009eec:	f7f6 f9fc 	bl	80002e8 <__aeabi_dsub>
 8009ef0:	460b      	mov	r3, r1
 8009ef2:	4602      	mov	r2, r0
 8009ef4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009ef8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009efc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009efe:	ea46 060a 	orr.w	r6, r6, sl
 8009f02:	431e      	orrs	r6, r3
 8009f04:	d06f      	beq.n	8009fe6 <_strtod_l+0xb86>
 8009f06:	a30e      	add	r3, pc, #56	@ (adr r3, 8009f40 <_strtod_l+0xae0>)
 8009f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f0c:	f7f6 fe16 	bl	8000b3c <__aeabi_dcmplt>
 8009f10:	2800      	cmp	r0, #0
 8009f12:	f47f accf 	bne.w	80098b4 <_strtod_l+0x454>
 8009f16:	a30c      	add	r3, pc, #48	@ (adr r3, 8009f48 <_strtod_l+0xae8>)
 8009f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009f20:	f7f6 fe2a 	bl	8000b78 <__aeabi_dcmpgt>
 8009f24:	2800      	cmp	r0, #0
 8009f26:	d093      	beq.n	8009e50 <_strtod_l+0x9f0>
 8009f28:	e4c4      	b.n	80098b4 <_strtod_l+0x454>
 8009f2a:	bf00      	nop
 8009f2c:	f3af 8000 	nop.w
 8009f30:	00000000 	.word	0x00000000
 8009f34:	bff00000 	.word	0xbff00000
 8009f38:	00000000 	.word	0x00000000
 8009f3c:	3ff00000 	.word	0x3ff00000
 8009f40:	94a03595 	.word	0x94a03595
 8009f44:	3fdfffff 	.word	0x3fdfffff
 8009f48:	35afe535 	.word	0x35afe535
 8009f4c:	3fe00000 	.word	0x3fe00000
 8009f50:	000fffff 	.word	0x000fffff
 8009f54:	7ff00000 	.word	0x7ff00000
 8009f58:	7fefffff 	.word	0x7fefffff
 8009f5c:	3ff00000 	.word	0x3ff00000
 8009f60:	3fe00000 	.word	0x3fe00000
 8009f64:	7fe00000 	.word	0x7fe00000
 8009f68:	7c9fffff 	.word	0x7c9fffff
 8009f6c:	9b08      	ldr	r3, [sp, #32]
 8009f6e:	b323      	cbz	r3, 8009fba <_strtod_l+0xb5a>
 8009f70:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009f74:	d821      	bhi.n	8009fba <_strtod_l+0xb5a>
 8009f76:	a328      	add	r3, pc, #160	@ (adr r3, 800a018 <_strtod_l+0xbb8>)
 8009f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f7c:	4630      	mov	r0, r6
 8009f7e:	4639      	mov	r1, r7
 8009f80:	f7f6 fde6 	bl	8000b50 <__aeabi_dcmple>
 8009f84:	b1a0      	cbz	r0, 8009fb0 <_strtod_l+0xb50>
 8009f86:	4639      	mov	r1, r7
 8009f88:	4630      	mov	r0, r6
 8009f8a:	f7f6 fe27 	bl	8000bdc <__aeabi_d2uiz>
 8009f8e:	2801      	cmp	r0, #1
 8009f90:	bf38      	it	cc
 8009f92:	2001      	movcc	r0, #1
 8009f94:	f7f6 fae6 	bl	8000564 <__aeabi_ui2d>
 8009f98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f9a:	4606      	mov	r6, r0
 8009f9c:	460f      	mov	r7, r1
 8009f9e:	b9fb      	cbnz	r3, 8009fe0 <_strtod_l+0xb80>
 8009fa0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009fa4:	9014      	str	r0, [sp, #80]	@ 0x50
 8009fa6:	9315      	str	r3, [sp, #84]	@ 0x54
 8009fa8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009fac:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009fb0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009fb2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009fb6:	1b5b      	subs	r3, r3, r5
 8009fb8:	9311      	str	r3, [sp, #68]	@ 0x44
 8009fba:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009fbe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009fc2:	f001 f98b 	bl	800b2dc <__ulp>
 8009fc6:	4650      	mov	r0, sl
 8009fc8:	ec53 2b10 	vmov	r2, r3, d0
 8009fcc:	4659      	mov	r1, fp
 8009fce:	f7f6 fb43 	bl	8000658 <__aeabi_dmul>
 8009fd2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009fd6:	f7f6 f989 	bl	80002ec <__adddf3>
 8009fda:	4682      	mov	sl, r0
 8009fdc:	468b      	mov	fp, r1
 8009fde:	e770      	b.n	8009ec2 <_strtod_l+0xa62>
 8009fe0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009fe4:	e7e0      	b.n	8009fa8 <_strtod_l+0xb48>
 8009fe6:	a30e      	add	r3, pc, #56	@ (adr r3, 800a020 <_strtod_l+0xbc0>)
 8009fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fec:	f7f6 fda6 	bl	8000b3c <__aeabi_dcmplt>
 8009ff0:	e798      	b.n	8009f24 <_strtod_l+0xac4>
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009ff6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009ff8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009ffa:	6013      	str	r3, [r2, #0]
 8009ffc:	f7ff ba6d 	b.w	80094da <_strtod_l+0x7a>
 800a000:	2a65      	cmp	r2, #101	@ 0x65
 800a002:	f43f ab66 	beq.w	80096d2 <_strtod_l+0x272>
 800a006:	2a45      	cmp	r2, #69	@ 0x45
 800a008:	f43f ab63 	beq.w	80096d2 <_strtod_l+0x272>
 800a00c:	2301      	movs	r3, #1
 800a00e:	f7ff bb9e 	b.w	800974e <_strtod_l+0x2ee>
 800a012:	bf00      	nop
 800a014:	f3af 8000 	nop.w
 800a018:	ffc00000 	.word	0xffc00000
 800a01c:	41dfffff 	.word	0x41dfffff
 800a020:	94a03595 	.word	0x94a03595
 800a024:	3fcfffff 	.word	0x3fcfffff

0800a028 <strtod>:
 800a028:	460a      	mov	r2, r1
 800a02a:	4601      	mov	r1, r0
 800a02c:	4802      	ldr	r0, [pc, #8]	@ (800a038 <strtod+0x10>)
 800a02e:	4b03      	ldr	r3, [pc, #12]	@ (800a03c <strtod+0x14>)
 800a030:	6800      	ldr	r0, [r0, #0]
 800a032:	f7ff ba15 	b.w	8009460 <_strtod_l>
 800a036:	bf00      	nop
 800a038:	20000194 	.word	0x20000194
 800a03c:	20000028 	.word	0x20000028

0800a040 <std>:
 800a040:	2300      	movs	r3, #0
 800a042:	b510      	push	{r4, lr}
 800a044:	4604      	mov	r4, r0
 800a046:	e9c0 3300 	strd	r3, r3, [r0]
 800a04a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a04e:	6083      	str	r3, [r0, #8]
 800a050:	8181      	strh	r1, [r0, #12]
 800a052:	6643      	str	r3, [r0, #100]	@ 0x64
 800a054:	81c2      	strh	r2, [r0, #14]
 800a056:	6183      	str	r3, [r0, #24]
 800a058:	4619      	mov	r1, r3
 800a05a:	2208      	movs	r2, #8
 800a05c:	305c      	adds	r0, #92	@ 0x5c
 800a05e:	f000 f928 	bl	800a2b2 <memset>
 800a062:	4b0d      	ldr	r3, [pc, #52]	@ (800a098 <std+0x58>)
 800a064:	6263      	str	r3, [r4, #36]	@ 0x24
 800a066:	4b0d      	ldr	r3, [pc, #52]	@ (800a09c <std+0x5c>)
 800a068:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a06a:	4b0d      	ldr	r3, [pc, #52]	@ (800a0a0 <std+0x60>)
 800a06c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a06e:	4b0d      	ldr	r3, [pc, #52]	@ (800a0a4 <std+0x64>)
 800a070:	6323      	str	r3, [r4, #48]	@ 0x30
 800a072:	4b0d      	ldr	r3, [pc, #52]	@ (800a0a8 <std+0x68>)
 800a074:	6224      	str	r4, [r4, #32]
 800a076:	429c      	cmp	r4, r3
 800a078:	d006      	beq.n	800a088 <std+0x48>
 800a07a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a07e:	4294      	cmp	r4, r2
 800a080:	d002      	beq.n	800a088 <std+0x48>
 800a082:	33d0      	adds	r3, #208	@ 0xd0
 800a084:	429c      	cmp	r4, r3
 800a086:	d105      	bne.n	800a094 <std+0x54>
 800a088:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a08c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a090:	f000 ba00 	b.w	800a494 <__retarget_lock_init_recursive>
 800a094:	bd10      	pop	{r4, pc}
 800a096:	bf00      	nop
 800a098:	0800a22d 	.word	0x0800a22d
 800a09c:	0800a24f 	.word	0x0800a24f
 800a0a0:	0800a287 	.word	0x0800a287
 800a0a4:	0800a2ab 	.word	0x0800a2ab
 800a0a8:	2000458c 	.word	0x2000458c

0800a0ac <stdio_exit_handler>:
 800a0ac:	4a02      	ldr	r2, [pc, #8]	@ (800a0b8 <stdio_exit_handler+0xc>)
 800a0ae:	4903      	ldr	r1, [pc, #12]	@ (800a0bc <stdio_exit_handler+0x10>)
 800a0b0:	4803      	ldr	r0, [pc, #12]	@ (800a0c0 <stdio_exit_handler+0x14>)
 800a0b2:	f000 b869 	b.w	800a188 <_fwalk_sglue>
 800a0b6:	bf00      	nop
 800a0b8:	2000001c 	.word	0x2000001c
 800a0bc:	0800bc55 	.word	0x0800bc55
 800a0c0:	20000198 	.word	0x20000198

0800a0c4 <cleanup_stdio>:
 800a0c4:	6841      	ldr	r1, [r0, #4]
 800a0c6:	4b0c      	ldr	r3, [pc, #48]	@ (800a0f8 <cleanup_stdio+0x34>)
 800a0c8:	4299      	cmp	r1, r3
 800a0ca:	b510      	push	{r4, lr}
 800a0cc:	4604      	mov	r4, r0
 800a0ce:	d001      	beq.n	800a0d4 <cleanup_stdio+0x10>
 800a0d0:	f001 fdc0 	bl	800bc54 <_fflush_r>
 800a0d4:	68a1      	ldr	r1, [r4, #8]
 800a0d6:	4b09      	ldr	r3, [pc, #36]	@ (800a0fc <cleanup_stdio+0x38>)
 800a0d8:	4299      	cmp	r1, r3
 800a0da:	d002      	beq.n	800a0e2 <cleanup_stdio+0x1e>
 800a0dc:	4620      	mov	r0, r4
 800a0de:	f001 fdb9 	bl	800bc54 <_fflush_r>
 800a0e2:	68e1      	ldr	r1, [r4, #12]
 800a0e4:	4b06      	ldr	r3, [pc, #24]	@ (800a100 <cleanup_stdio+0x3c>)
 800a0e6:	4299      	cmp	r1, r3
 800a0e8:	d004      	beq.n	800a0f4 <cleanup_stdio+0x30>
 800a0ea:	4620      	mov	r0, r4
 800a0ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0f0:	f001 bdb0 	b.w	800bc54 <_fflush_r>
 800a0f4:	bd10      	pop	{r4, pc}
 800a0f6:	bf00      	nop
 800a0f8:	2000458c 	.word	0x2000458c
 800a0fc:	200045f4 	.word	0x200045f4
 800a100:	2000465c 	.word	0x2000465c

0800a104 <global_stdio_init.part.0>:
 800a104:	b510      	push	{r4, lr}
 800a106:	4b0b      	ldr	r3, [pc, #44]	@ (800a134 <global_stdio_init.part.0+0x30>)
 800a108:	4c0b      	ldr	r4, [pc, #44]	@ (800a138 <global_stdio_init.part.0+0x34>)
 800a10a:	4a0c      	ldr	r2, [pc, #48]	@ (800a13c <global_stdio_init.part.0+0x38>)
 800a10c:	601a      	str	r2, [r3, #0]
 800a10e:	4620      	mov	r0, r4
 800a110:	2200      	movs	r2, #0
 800a112:	2104      	movs	r1, #4
 800a114:	f7ff ff94 	bl	800a040 <std>
 800a118:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a11c:	2201      	movs	r2, #1
 800a11e:	2109      	movs	r1, #9
 800a120:	f7ff ff8e 	bl	800a040 <std>
 800a124:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a128:	2202      	movs	r2, #2
 800a12a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a12e:	2112      	movs	r1, #18
 800a130:	f7ff bf86 	b.w	800a040 <std>
 800a134:	200046c4 	.word	0x200046c4
 800a138:	2000458c 	.word	0x2000458c
 800a13c:	0800a0ad 	.word	0x0800a0ad

0800a140 <__sfp_lock_acquire>:
 800a140:	4801      	ldr	r0, [pc, #4]	@ (800a148 <__sfp_lock_acquire+0x8>)
 800a142:	f000 b9a8 	b.w	800a496 <__retarget_lock_acquire_recursive>
 800a146:	bf00      	nop
 800a148:	200046cd 	.word	0x200046cd

0800a14c <__sfp_lock_release>:
 800a14c:	4801      	ldr	r0, [pc, #4]	@ (800a154 <__sfp_lock_release+0x8>)
 800a14e:	f000 b9a3 	b.w	800a498 <__retarget_lock_release_recursive>
 800a152:	bf00      	nop
 800a154:	200046cd 	.word	0x200046cd

0800a158 <__sinit>:
 800a158:	b510      	push	{r4, lr}
 800a15a:	4604      	mov	r4, r0
 800a15c:	f7ff fff0 	bl	800a140 <__sfp_lock_acquire>
 800a160:	6a23      	ldr	r3, [r4, #32]
 800a162:	b11b      	cbz	r3, 800a16c <__sinit+0x14>
 800a164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a168:	f7ff bff0 	b.w	800a14c <__sfp_lock_release>
 800a16c:	4b04      	ldr	r3, [pc, #16]	@ (800a180 <__sinit+0x28>)
 800a16e:	6223      	str	r3, [r4, #32]
 800a170:	4b04      	ldr	r3, [pc, #16]	@ (800a184 <__sinit+0x2c>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d1f5      	bne.n	800a164 <__sinit+0xc>
 800a178:	f7ff ffc4 	bl	800a104 <global_stdio_init.part.0>
 800a17c:	e7f2      	b.n	800a164 <__sinit+0xc>
 800a17e:	bf00      	nop
 800a180:	0800a0c5 	.word	0x0800a0c5
 800a184:	200046c4 	.word	0x200046c4

0800a188 <_fwalk_sglue>:
 800a188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a18c:	4607      	mov	r7, r0
 800a18e:	4688      	mov	r8, r1
 800a190:	4614      	mov	r4, r2
 800a192:	2600      	movs	r6, #0
 800a194:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a198:	f1b9 0901 	subs.w	r9, r9, #1
 800a19c:	d505      	bpl.n	800a1aa <_fwalk_sglue+0x22>
 800a19e:	6824      	ldr	r4, [r4, #0]
 800a1a0:	2c00      	cmp	r4, #0
 800a1a2:	d1f7      	bne.n	800a194 <_fwalk_sglue+0xc>
 800a1a4:	4630      	mov	r0, r6
 800a1a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1aa:	89ab      	ldrh	r3, [r5, #12]
 800a1ac:	2b01      	cmp	r3, #1
 800a1ae:	d907      	bls.n	800a1c0 <_fwalk_sglue+0x38>
 800a1b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a1b4:	3301      	adds	r3, #1
 800a1b6:	d003      	beq.n	800a1c0 <_fwalk_sglue+0x38>
 800a1b8:	4629      	mov	r1, r5
 800a1ba:	4638      	mov	r0, r7
 800a1bc:	47c0      	blx	r8
 800a1be:	4306      	orrs	r6, r0
 800a1c0:	3568      	adds	r5, #104	@ 0x68
 800a1c2:	e7e9      	b.n	800a198 <_fwalk_sglue+0x10>

0800a1c4 <sniprintf>:
 800a1c4:	b40c      	push	{r2, r3}
 800a1c6:	b530      	push	{r4, r5, lr}
 800a1c8:	4b17      	ldr	r3, [pc, #92]	@ (800a228 <sniprintf+0x64>)
 800a1ca:	1e0c      	subs	r4, r1, #0
 800a1cc:	681d      	ldr	r5, [r3, #0]
 800a1ce:	b09d      	sub	sp, #116	@ 0x74
 800a1d0:	da08      	bge.n	800a1e4 <sniprintf+0x20>
 800a1d2:	238b      	movs	r3, #139	@ 0x8b
 800a1d4:	602b      	str	r3, [r5, #0]
 800a1d6:	f04f 30ff 	mov.w	r0, #4294967295
 800a1da:	b01d      	add	sp, #116	@ 0x74
 800a1dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a1e0:	b002      	add	sp, #8
 800a1e2:	4770      	bx	lr
 800a1e4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a1e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a1ec:	bf14      	ite	ne
 800a1ee:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a1f2:	4623      	moveq	r3, r4
 800a1f4:	9304      	str	r3, [sp, #16]
 800a1f6:	9307      	str	r3, [sp, #28]
 800a1f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a1fc:	9002      	str	r0, [sp, #8]
 800a1fe:	9006      	str	r0, [sp, #24]
 800a200:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a204:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a206:	ab21      	add	r3, sp, #132	@ 0x84
 800a208:	a902      	add	r1, sp, #8
 800a20a:	4628      	mov	r0, r5
 800a20c:	9301      	str	r3, [sp, #4]
 800a20e:	f001 fa13 	bl	800b638 <_svfiprintf_r>
 800a212:	1c43      	adds	r3, r0, #1
 800a214:	bfbc      	itt	lt
 800a216:	238b      	movlt	r3, #139	@ 0x8b
 800a218:	602b      	strlt	r3, [r5, #0]
 800a21a:	2c00      	cmp	r4, #0
 800a21c:	d0dd      	beq.n	800a1da <sniprintf+0x16>
 800a21e:	9b02      	ldr	r3, [sp, #8]
 800a220:	2200      	movs	r2, #0
 800a222:	701a      	strb	r2, [r3, #0]
 800a224:	e7d9      	b.n	800a1da <sniprintf+0x16>
 800a226:	bf00      	nop
 800a228:	20000194 	.word	0x20000194

0800a22c <__sread>:
 800a22c:	b510      	push	{r4, lr}
 800a22e:	460c      	mov	r4, r1
 800a230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a234:	f000 f8d0 	bl	800a3d8 <_read_r>
 800a238:	2800      	cmp	r0, #0
 800a23a:	bfab      	itete	ge
 800a23c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a23e:	89a3      	ldrhlt	r3, [r4, #12]
 800a240:	181b      	addge	r3, r3, r0
 800a242:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a246:	bfac      	ite	ge
 800a248:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a24a:	81a3      	strhlt	r3, [r4, #12]
 800a24c:	bd10      	pop	{r4, pc}

0800a24e <__swrite>:
 800a24e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a252:	461f      	mov	r7, r3
 800a254:	898b      	ldrh	r3, [r1, #12]
 800a256:	05db      	lsls	r3, r3, #23
 800a258:	4605      	mov	r5, r0
 800a25a:	460c      	mov	r4, r1
 800a25c:	4616      	mov	r6, r2
 800a25e:	d505      	bpl.n	800a26c <__swrite+0x1e>
 800a260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a264:	2302      	movs	r3, #2
 800a266:	2200      	movs	r2, #0
 800a268:	f000 f8a4 	bl	800a3b4 <_lseek_r>
 800a26c:	89a3      	ldrh	r3, [r4, #12]
 800a26e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a272:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a276:	81a3      	strh	r3, [r4, #12]
 800a278:	4632      	mov	r2, r6
 800a27a:	463b      	mov	r3, r7
 800a27c:	4628      	mov	r0, r5
 800a27e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a282:	f000 b8cb 	b.w	800a41c <_write_r>

0800a286 <__sseek>:
 800a286:	b510      	push	{r4, lr}
 800a288:	460c      	mov	r4, r1
 800a28a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a28e:	f000 f891 	bl	800a3b4 <_lseek_r>
 800a292:	1c43      	adds	r3, r0, #1
 800a294:	89a3      	ldrh	r3, [r4, #12]
 800a296:	bf15      	itete	ne
 800a298:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a29a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a29e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a2a2:	81a3      	strheq	r3, [r4, #12]
 800a2a4:	bf18      	it	ne
 800a2a6:	81a3      	strhne	r3, [r4, #12]
 800a2a8:	bd10      	pop	{r4, pc}

0800a2aa <__sclose>:
 800a2aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2ae:	f000 b81b 	b.w	800a2e8 <_close_r>

0800a2b2 <memset>:
 800a2b2:	4402      	add	r2, r0
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	4293      	cmp	r3, r2
 800a2b8:	d100      	bne.n	800a2bc <memset+0xa>
 800a2ba:	4770      	bx	lr
 800a2bc:	f803 1b01 	strb.w	r1, [r3], #1
 800a2c0:	e7f9      	b.n	800a2b6 <memset+0x4>

0800a2c2 <strncmp>:
 800a2c2:	b510      	push	{r4, lr}
 800a2c4:	b16a      	cbz	r2, 800a2e2 <strncmp+0x20>
 800a2c6:	3901      	subs	r1, #1
 800a2c8:	1884      	adds	r4, r0, r2
 800a2ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2ce:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a2d2:	429a      	cmp	r2, r3
 800a2d4:	d103      	bne.n	800a2de <strncmp+0x1c>
 800a2d6:	42a0      	cmp	r0, r4
 800a2d8:	d001      	beq.n	800a2de <strncmp+0x1c>
 800a2da:	2a00      	cmp	r2, #0
 800a2dc:	d1f5      	bne.n	800a2ca <strncmp+0x8>
 800a2de:	1ad0      	subs	r0, r2, r3
 800a2e0:	bd10      	pop	{r4, pc}
 800a2e2:	4610      	mov	r0, r2
 800a2e4:	e7fc      	b.n	800a2e0 <strncmp+0x1e>
	...

0800a2e8 <_close_r>:
 800a2e8:	b538      	push	{r3, r4, r5, lr}
 800a2ea:	4d06      	ldr	r5, [pc, #24]	@ (800a304 <_close_r+0x1c>)
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	4604      	mov	r4, r0
 800a2f0:	4608      	mov	r0, r1
 800a2f2:	602b      	str	r3, [r5, #0]
 800a2f4:	f7f8 fe2e 	bl	8002f54 <_close>
 800a2f8:	1c43      	adds	r3, r0, #1
 800a2fa:	d102      	bne.n	800a302 <_close_r+0x1a>
 800a2fc:	682b      	ldr	r3, [r5, #0]
 800a2fe:	b103      	cbz	r3, 800a302 <_close_r+0x1a>
 800a300:	6023      	str	r3, [r4, #0]
 800a302:	bd38      	pop	{r3, r4, r5, pc}
 800a304:	200046c8 	.word	0x200046c8

0800a308 <_reclaim_reent>:
 800a308:	4b29      	ldr	r3, [pc, #164]	@ (800a3b0 <_reclaim_reent+0xa8>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	4283      	cmp	r3, r0
 800a30e:	b570      	push	{r4, r5, r6, lr}
 800a310:	4604      	mov	r4, r0
 800a312:	d04b      	beq.n	800a3ac <_reclaim_reent+0xa4>
 800a314:	69c3      	ldr	r3, [r0, #28]
 800a316:	b1ab      	cbz	r3, 800a344 <_reclaim_reent+0x3c>
 800a318:	68db      	ldr	r3, [r3, #12]
 800a31a:	b16b      	cbz	r3, 800a338 <_reclaim_reent+0x30>
 800a31c:	2500      	movs	r5, #0
 800a31e:	69e3      	ldr	r3, [r4, #28]
 800a320:	68db      	ldr	r3, [r3, #12]
 800a322:	5959      	ldr	r1, [r3, r5]
 800a324:	2900      	cmp	r1, #0
 800a326:	d13b      	bne.n	800a3a0 <_reclaim_reent+0x98>
 800a328:	3504      	adds	r5, #4
 800a32a:	2d80      	cmp	r5, #128	@ 0x80
 800a32c:	d1f7      	bne.n	800a31e <_reclaim_reent+0x16>
 800a32e:	69e3      	ldr	r3, [r4, #28]
 800a330:	4620      	mov	r0, r4
 800a332:	68d9      	ldr	r1, [r3, #12]
 800a334:	f000 f8c8 	bl	800a4c8 <_free_r>
 800a338:	69e3      	ldr	r3, [r4, #28]
 800a33a:	6819      	ldr	r1, [r3, #0]
 800a33c:	b111      	cbz	r1, 800a344 <_reclaim_reent+0x3c>
 800a33e:	4620      	mov	r0, r4
 800a340:	f000 f8c2 	bl	800a4c8 <_free_r>
 800a344:	6961      	ldr	r1, [r4, #20]
 800a346:	b111      	cbz	r1, 800a34e <_reclaim_reent+0x46>
 800a348:	4620      	mov	r0, r4
 800a34a:	f000 f8bd 	bl	800a4c8 <_free_r>
 800a34e:	69e1      	ldr	r1, [r4, #28]
 800a350:	b111      	cbz	r1, 800a358 <_reclaim_reent+0x50>
 800a352:	4620      	mov	r0, r4
 800a354:	f000 f8b8 	bl	800a4c8 <_free_r>
 800a358:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a35a:	b111      	cbz	r1, 800a362 <_reclaim_reent+0x5a>
 800a35c:	4620      	mov	r0, r4
 800a35e:	f000 f8b3 	bl	800a4c8 <_free_r>
 800a362:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a364:	b111      	cbz	r1, 800a36c <_reclaim_reent+0x64>
 800a366:	4620      	mov	r0, r4
 800a368:	f000 f8ae 	bl	800a4c8 <_free_r>
 800a36c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800a36e:	b111      	cbz	r1, 800a376 <_reclaim_reent+0x6e>
 800a370:	4620      	mov	r0, r4
 800a372:	f000 f8a9 	bl	800a4c8 <_free_r>
 800a376:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a378:	b111      	cbz	r1, 800a380 <_reclaim_reent+0x78>
 800a37a:	4620      	mov	r0, r4
 800a37c:	f000 f8a4 	bl	800a4c8 <_free_r>
 800a380:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a382:	b111      	cbz	r1, 800a38a <_reclaim_reent+0x82>
 800a384:	4620      	mov	r0, r4
 800a386:	f000 f89f 	bl	800a4c8 <_free_r>
 800a38a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a38c:	b111      	cbz	r1, 800a394 <_reclaim_reent+0x8c>
 800a38e:	4620      	mov	r0, r4
 800a390:	f000 f89a 	bl	800a4c8 <_free_r>
 800a394:	6a23      	ldr	r3, [r4, #32]
 800a396:	b14b      	cbz	r3, 800a3ac <_reclaim_reent+0xa4>
 800a398:	4620      	mov	r0, r4
 800a39a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a39e:	4718      	bx	r3
 800a3a0:	680e      	ldr	r6, [r1, #0]
 800a3a2:	4620      	mov	r0, r4
 800a3a4:	f000 f890 	bl	800a4c8 <_free_r>
 800a3a8:	4631      	mov	r1, r6
 800a3aa:	e7bb      	b.n	800a324 <_reclaim_reent+0x1c>
 800a3ac:	bd70      	pop	{r4, r5, r6, pc}
 800a3ae:	bf00      	nop
 800a3b0:	20000194 	.word	0x20000194

0800a3b4 <_lseek_r>:
 800a3b4:	b538      	push	{r3, r4, r5, lr}
 800a3b6:	4d07      	ldr	r5, [pc, #28]	@ (800a3d4 <_lseek_r+0x20>)
 800a3b8:	4604      	mov	r4, r0
 800a3ba:	4608      	mov	r0, r1
 800a3bc:	4611      	mov	r1, r2
 800a3be:	2200      	movs	r2, #0
 800a3c0:	602a      	str	r2, [r5, #0]
 800a3c2:	461a      	mov	r2, r3
 800a3c4:	f7f8 fded 	bl	8002fa2 <_lseek>
 800a3c8:	1c43      	adds	r3, r0, #1
 800a3ca:	d102      	bne.n	800a3d2 <_lseek_r+0x1e>
 800a3cc:	682b      	ldr	r3, [r5, #0]
 800a3ce:	b103      	cbz	r3, 800a3d2 <_lseek_r+0x1e>
 800a3d0:	6023      	str	r3, [r4, #0]
 800a3d2:	bd38      	pop	{r3, r4, r5, pc}
 800a3d4:	200046c8 	.word	0x200046c8

0800a3d8 <_read_r>:
 800a3d8:	b538      	push	{r3, r4, r5, lr}
 800a3da:	4d07      	ldr	r5, [pc, #28]	@ (800a3f8 <_read_r+0x20>)
 800a3dc:	4604      	mov	r4, r0
 800a3de:	4608      	mov	r0, r1
 800a3e0:	4611      	mov	r1, r2
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	602a      	str	r2, [r5, #0]
 800a3e6:	461a      	mov	r2, r3
 800a3e8:	f7f8 fd7b 	bl	8002ee2 <_read>
 800a3ec:	1c43      	adds	r3, r0, #1
 800a3ee:	d102      	bne.n	800a3f6 <_read_r+0x1e>
 800a3f0:	682b      	ldr	r3, [r5, #0]
 800a3f2:	b103      	cbz	r3, 800a3f6 <_read_r+0x1e>
 800a3f4:	6023      	str	r3, [r4, #0]
 800a3f6:	bd38      	pop	{r3, r4, r5, pc}
 800a3f8:	200046c8 	.word	0x200046c8

0800a3fc <_sbrk_r>:
 800a3fc:	b538      	push	{r3, r4, r5, lr}
 800a3fe:	4d06      	ldr	r5, [pc, #24]	@ (800a418 <_sbrk_r+0x1c>)
 800a400:	2300      	movs	r3, #0
 800a402:	4604      	mov	r4, r0
 800a404:	4608      	mov	r0, r1
 800a406:	602b      	str	r3, [r5, #0]
 800a408:	f7f8 fdd8 	bl	8002fbc <_sbrk>
 800a40c:	1c43      	adds	r3, r0, #1
 800a40e:	d102      	bne.n	800a416 <_sbrk_r+0x1a>
 800a410:	682b      	ldr	r3, [r5, #0]
 800a412:	b103      	cbz	r3, 800a416 <_sbrk_r+0x1a>
 800a414:	6023      	str	r3, [r4, #0]
 800a416:	bd38      	pop	{r3, r4, r5, pc}
 800a418:	200046c8 	.word	0x200046c8

0800a41c <_write_r>:
 800a41c:	b538      	push	{r3, r4, r5, lr}
 800a41e:	4d07      	ldr	r5, [pc, #28]	@ (800a43c <_write_r+0x20>)
 800a420:	4604      	mov	r4, r0
 800a422:	4608      	mov	r0, r1
 800a424:	4611      	mov	r1, r2
 800a426:	2200      	movs	r2, #0
 800a428:	602a      	str	r2, [r5, #0]
 800a42a:	461a      	mov	r2, r3
 800a42c:	f7f8 fd76 	bl	8002f1c <_write>
 800a430:	1c43      	adds	r3, r0, #1
 800a432:	d102      	bne.n	800a43a <_write_r+0x1e>
 800a434:	682b      	ldr	r3, [r5, #0]
 800a436:	b103      	cbz	r3, 800a43a <_write_r+0x1e>
 800a438:	6023      	str	r3, [r4, #0]
 800a43a:	bd38      	pop	{r3, r4, r5, pc}
 800a43c:	200046c8 	.word	0x200046c8

0800a440 <__errno>:
 800a440:	4b01      	ldr	r3, [pc, #4]	@ (800a448 <__errno+0x8>)
 800a442:	6818      	ldr	r0, [r3, #0]
 800a444:	4770      	bx	lr
 800a446:	bf00      	nop
 800a448:	20000194 	.word	0x20000194

0800a44c <__libc_init_array>:
 800a44c:	b570      	push	{r4, r5, r6, lr}
 800a44e:	4d0d      	ldr	r5, [pc, #52]	@ (800a484 <__libc_init_array+0x38>)
 800a450:	4c0d      	ldr	r4, [pc, #52]	@ (800a488 <__libc_init_array+0x3c>)
 800a452:	1b64      	subs	r4, r4, r5
 800a454:	10a4      	asrs	r4, r4, #2
 800a456:	2600      	movs	r6, #0
 800a458:	42a6      	cmp	r6, r4
 800a45a:	d109      	bne.n	800a470 <__libc_init_array+0x24>
 800a45c:	4d0b      	ldr	r5, [pc, #44]	@ (800a48c <__libc_init_array+0x40>)
 800a45e:	4c0c      	ldr	r4, [pc, #48]	@ (800a490 <__libc_init_array+0x44>)
 800a460:	f001 ff22 	bl	800c2a8 <_init>
 800a464:	1b64      	subs	r4, r4, r5
 800a466:	10a4      	asrs	r4, r4, #2
 800a468:	2600      	movs	r6, #0
 800a46a:	42a6      	cmp	r6, r4
 800a46c:	d105      	bne.n	800a47a <__libc_init_array+0x2e>
 800a46e:	bd70      	pop	{r4, r5, r6, pc}
 800a470:	f855 3b04 	ldr.w	r3, [r5], #4
 800a474:	4798      	blx	r3
 800a476:	3601      	adds	r6, #1
 800a478:	e7ee      	b.n	800a458 <__libc_init_array+0xc>
 800a47a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a47e:	4798      	blx	r3
 800a480:	3601      	adds	r6, #1
 800a482:	e7f2      	b.n	800a46a <__libc_init_array+0x1e>
 800a484:	0800c8d8 	.word	0x0800c8d8
 800a488:	0800c8d8 	.word	0x0800c8d8
 800a48c:	0800c8d8 	.word	0x0800c8d8
 800a490:	0800c8dc 	.word	0x0800c8dc

0800a494 <__retarget_lock_init_recursive>:
 800a494:	4770      	bx	lr

0800a496 <__retarget_lock_acquire_recursive>:
 800a496:	4770      	bx	lr

0800a498 <__retarget_lock_release_recursive>:
 800a498:	4770      	bx	lr

0800a49a <memcpy>:
 800a49a:	440a      	add	r2, r1
 800a49c:	4291      	cmp	r1, r2
 800a49e:	f100 33ff 	add.w	r3, r0, #4294967295
 800a4a2:	d100      	bne.n	800a4a6 <memcpy+0xc>
 800a4a4:	4770      	bx	lr
 800a4a6:	b510      	push	{r4, lr}
 800a4a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a4b0:	4291      	cmp	r1, r2
 800a4b2:	d1f9      	bne.n	800a4a8 <memcpy+0xe>
 800a4b4:	bd10      	pop	{r4, pc}
	...

0800a4b8 <nan>:
 800a4b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a4c0 <nan+0x8>
 800a4bc:	4770      	bx	lr
 800a4be:	bf00      	nop
 800a4c0:	00000000 	.word	0x00000000
 800a4c4:	7ff80000 	.word	0x7ff80000

0800a4c8 <_free_r>:
 800a4c8:	b538      	push	{r3, r4, r5, lr}
 800a4ca:	4605      	mov	r5, r0
 800a4cc:	2900      	cmp	r1, #0
 800a4ce:	d041      	beq.n	800a554 <_free_r+0x8c>
 800a4d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4d4:	1f0c      	subs	r4, r1, #4
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	bfb8      	it	lt
 800a4da:	18e4      	addlt	r4, r4, r3
 800a4dc:	f7fe ff5e 	bl	800939c <__malloc_lock>
 800a4e0:	4a1d      	ldr	r2, [pc, #116]	@ (800a558 <_free_r+0x90>)
 800a4e2:	6813      	ldr	r3, [r2, #0]
 800a4e4:	b933      	cbnz	r3, 800a4f4 <_free_r+0x2c>
 800a4e6:	6063      	str	r3, [r4, #4]
 800a4e8:	6014      	str	r4, [r2, #0]
 800a4ea:	4628      	mov	r0, r5
 800a4ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4f0:	f7fe bf5a 	b.w	80093a8 <__malloc_unlock>
 800a4f4:	42a3      	cmp	r3, r4
 800a4f6:	d908      	bls.n	800a50a <_free_r+0x42>
 800a4f8:	6820      	ldr	r0, [r4, #0]
 800a4fa:	1821      	adds	r1, r4, r0
 800a4fc:	428b      	cmp	r3, r1
 800a4fe:	bf01      	itttt	eq
 800a500:	6819      	ldreq	r1, [r3, #0]
 800a502:	685b      	ldreq	r3, [r3, #4]
 800a504:	1809      	addeq	r1, r1, r0
 800a506:	6021      	streq	r1, [r4, #0]
 800a508:	e7ed      	b.n	800a4e6 <_free_r+0x1e>
 800a50a:	461a      	mov	r2, r3
 800a50c:	685b      	ldr	r3, [r3, #4]
 800a50e:	b10b      	cbz	r3, 800a514 <_free_r+0x4c>
 800a510:	42a3      	cmp	r3, r4
 800a512:	d9fa      	bls.n	800a50a <_free_r+0x42>
 800a514:	6811      	ldr	r1, [r2, #0]
 800a516:	1850      	adds	r0, r2, r1
 800a518:	42a0      	cmp	r0, r4
 800a51a:	d10b      	bne.n	800a534 <_free_r+0x6c>
 800a51c:	6820      	ldr	r0, [r4, #0]
 800a51e:	4401      	add	r1, r0
 800a520:	1850      	adds	r0, r2, r1
 800a522:	4283      	cmp	r3, r0
 800a524:	6011      	str	r1, [r2, #0]
 800a526:	d1e0      	bne.n	800a4ea <_free_r+0x22>
 800a528:	6818      	ldr	r0, [r3, #0]
 800a52a:	685b      	ldr	r3, [r3, #4]
 800a52c:	6053      	str	r3, [r2, #4]
 800a52e:	4408      	add	r0, r1
 800a530:	6010      	str	r0, [r2, #0]
 800a532:	e7da      	b.n	800a4ea <_free_r+0x22>
 800a534:	d902      	bls.n	800a53c <_free_r+0x74>
 800a536:	230c      	movs	r3, #12
 800a538:	602b      	str	r3, [r5, #0]
 800a53a:	e7d6      	b.n	800a4ea <_free_r+0x22>
 800a53c:	6820      	ldr	r0, [r4, #0]
 800a53e:	1821      	adds	r1, r4, r0
 800a540:	428b      	cmp	r3, r1
 800a542:	bf04      	itt	eq
 800a544:	6819      	ldreq	r1, [r3, #0]
 800a546:	685b      	ldreq	r3, [r3, #4]
 800a548:	6063      	str	r3, [r4, #4]
 800a54a:	bf04      	itt	eq
 800a54c:	1809      	addeq	r1, r1, r0
 800a54e:	6021      	streq	r1, [r4, #0]
 800a550:	6054      	str	r4, [r2, #4]
 800a552:	e7ca      	b.n	800a4ea <_free_r+0x22>
 800a554:	bd38      	pop	{r3, r4, r5, pc}
 800a556:	bf00      	nop
 800a558:	20004588 	.word	0x20004588

0800a55c <rshift>:
 800a55c:	6903      	ldr	r3, [r0, #16]
 800a55e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a562:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a566:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a56a:	f100 0414 	add.w	r4, r0, #20
 800a56e:	dd45      	ble.n	800a5fc <rshift+0xa0>
 800a570:	f011 011f 	ands.w	r1, r1, #31
 800a574:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a578:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a57c:	d10c      	bne.n	800a598 <rshift+0x3c>
 800a57e:	f100 0710 	add.w	r7, r0, #16
 800a582:	4629      	mov	r1, r5
 800a584:	42b1      	cmp	r1, r6
 800a586:	d334      	bcc.n	800a5f2 <rshift+0x96>
 800a588:	1a9b      	subs	r3, r3, r2
 800a58a:	009b      	lsls	r3, r3, #2
 800a58c:	1eea      	subs	r2, r5, #3
 800a58e:	4296      	cmp	r6, r2
 800a590:	bf38      	it	cc
 800a592:	2300      	movcc	r3, #0
 800a594:	4423      	add	r3, r4
 800a596:	e015      	b.n	800a5c4 <rshift+0x68>
 800a598:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a59c:	f1c1 0820 	rsb	r8, r1, #32
 800a5a0:	40cf      	lsrs	r7, r1
 800a5a2:	f105 0e04 	add.w	lr, r5, #4
 800a5a6:	46a1      	mov	r9, r4
 800a5a8:	4576      	cmp	r6, lr
 800a5aa:	46f4      	mov	ip, lr
 800a5ac:	d815      	bhi.n	800a5da <rshift+0x7e>
 800a5ae:	1a9a      	subs	r2, r3, r2
 800a5b0:	0092      	lsls	r2, r2, #2
 800a5b2:	3a04      	subs	r2, #4
 800a5b4:	3501      	adds	r5, #1
 800a5b6:	42ae      	cmp	r6, r5
 800a5b8:	bf38      	it	cc
 800a5ba:	2200      	movcc	r2, #0
 800a5bc:	18a3      	adds	r3, r4, r2
 800a5be:	50a7      	str	r7, [r4, r2]
 800a5c0:	b107      	cbz	r7, 800a5c4 <rshift+0x68>
 800a5c2:	3304      	adds	r3, #4
 800a5c4:	1b1a      	subs	r2, r3, r4
 800a5c6:	42a3      	cmp	r3, r4
 800a5c8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a5cc:	bf08      	it	eq
 800a5ce:	2300      	moveq	r3, #0
 800a5d0:	6102      	str	r2, [r0, #16]
 800a5d2:	bf08      	it	eq
 800a5d4:	6143      	streq	r3, [r0, #20]
 800a5d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a5da:	f8dc c000 	ldr.w	ip, [ip]
 800a5de:	fa0c fc08 	lsl.w	ip, ip, r8
 800a5e2:	ea4c 0707 	orr.w	r7, ip, r7
 800a5e6:	f849 7b04 	str.w	r7, [r9], #4
 800a5ea:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a5ee:	40cf      	lsrs	r7, r1
 800a5f0:	e7da      	b.n	800a5a8 <rshift+0x4c>
 800a5f2:	f851 cb04 	ldr.w	ip, [r1], #4
 800a5f6:	f847 cf04 	str.w	ip, [r7, #4]!
 800a5fa:	e7c3      	b.n	800a584 <rshift+0x28>
 800a5fc:	4623      	mov	r3, r4
 800a5fe:	e7e1      	b.n	800a5c4 <rshift+0x68>

0800a600 <__hexdig_fun>:
 800a600:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a604:	2b09      	cmp	r3, #9
 800a606:	d802      	bhi.n	800a60e <__hexdig_fun+0xe>
 800a608:	3820      	subs	r0, #32
 800a60a:	b2c0      	uxtb	r0, r0
 800a60c:	4770      	bx	lr
 800a60e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a612:	2b05      	cmp	r3, #5
 800a614:	d801      	bhi.n	800a61a <__hexdig_fun+0x1a>
 800a616:	3847      	subs	r0, #71	@ 0x47
 800a618:	e7f7      	b.n	800a60a <__hexdig_fun+0xa>
 800a61a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a61e:	2b05      	cmp	r3, #5
 800a620:	d801      	bhi.n	800a626 <__hexdig_fun+0x26>
 800a622:	3827      	subs	r0, #39	@ 0x27
 800a624:	e7f1      	b.n	800a60a <__hexdig_fun+0xa>
 800a626:	2000      	movs	r0, #0
 800a628:	4770      	bx	lr
	...

0800a62c <__gethex>:
 800a62c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a630:	b085      	sub	sp, #20
 800a632:	468a      	mov	sl, r1
 800a634:	9302      	str	r3, [sp, #8]
 800a636:	680b      	ldr	r3, [r1, #0]
 800a638:	9001      	str	r0, [sp, #4]
 800a63a:	4690      	mov	r8, r2
 800a63c:	1c9c      	adds	r4, r3, #2
 800a63e:	46a1      	mov	r9, r4
 800a640:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a644:	2830      	cmp	r0, #48	@ 0x30
 800a646:	d0fa      	beq.n	800a63e <__gethex+0x12>
 800a648:	eba9 0303 	sub.w	r3, r9, r3
 800a64c:	f1a3 0b02 	sub.w	fp, r3, #2
 800a650:	f7ff ffd6 	bl	800a600 <__hexdig_fun>
 800a654:	4605      	mov	r5, r0
 800a656:	2800      	cmp	r0, #0
 800a658:	d168      	bne.n	800a72c <__gethex+0x100>
 800a65a:	49a0      	ldr	r1, [pc, #640]	@ (800a8dc <__gethex+0x2b0>)
 800a65c:	2201      	movs	r2, #1
 800a65e:	4648      	mov	r0, r9
 800a660:	f7ff fe2f 	bl	800a2c2 <strncmp>
 800a664:	4607      	mov	r7, r0
 800a666:	2800      	cmp	r0, #0
 800a668:	d167      	bne.n	800a73a <__gethex+0x10e>
 800a66a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a66e:	4626      	mov	r6, r4
 800a670:	f7ff ffc6 	bl	800a600 <__hexdig_fun>
 800a674:	2800      	cmp	r0, #0
 800a676:	d062      	beq.n	800a73e <__gethex+0x112>
 800a678:	4623      	mov	r3, r4
 800a67a:	7818      	ldrb	r0, [r3, #0]
 800a67c:	2830      	cmp	r0, #48	@ 0x30
 800a67e:	4699      	mov	r9, r3
 800a680:	f103 0301 	add.w	r3, r3, #1
 800a684:	d0f9      	beq.n	800a67a <__gethex+0x4e>
 800a686:	f7ff ffbb 	bl	800a600 <__hexdig_fun>
 800a68a:	fab0 f580 	clz	r5, r0
 800a68e:	096d      	lsrs	r5, r5, #5
 800a690:	f04f 0b01 	mov.w	fp, #1
 800a694:	464a      	mov	r2, r9
 800a696:	4616      	mov	r6, r2
 800a698:	3201      	adds	r2, #1
 800a69a:	7830      	ldrb	r0, [r6, #0]
 800a69c:	f7ff ffb0 	bl	800a600 <__hexdig_fun>
 800a6a0:	2800      	cmp	r0, #0
 800a6a2:	d1f8      	bne.n	800a696 <__gethex+0x6a>
 800a6a4:	498d      	ldr	r1, [pc, #564]	@ (800a8dc <__gethex+0x2b0>)
 800a6a6:	2201      	movs	r2, #1
 800a6a8:	4630      	mov	r0, r6
 800a6aa:	f7ff fe0a 	bl	800a2c2 <strncmp>
 800a6ae:	2800      	cmp	r0, #0
 800a6b0:	d13f      	bne.n	800a732 <__gethex+0x106>
 800a6b2:	b944      	cbnz	r4, 800a6c6 <__gethex+0x9a>
 800a6b4:	1c74      	adds	r4, r6, #1
 800a6b6:	4622      	mov	r2, r4
 800a6b8:	4616      	mov	r6, r2
 800a6ba:	3201      	adds	r2, #1
 800a6bc:	7830      	ldrb	r0, [r6, #0]
 800a6be:	f7ff ff9f 	bl	800a600 <__hexdig_fun>
 800a6c2:	2800      	cmp	r0, #0
 800a6c4:	d1f8      	bne.n	800a6b8 <__gethex+0x8c>
 800a6c6:	1ba4      	subs	r4, r4, r6
 800a6c8:	00a7      	lsls	r7, r4, #2
 800a6ca:	7833      	ldrb	r3, [r6, #0]
 800a6cc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a6d0:	2b50      	cmp	r3, #80	@ 0x50
 800a6d2:	d13e      	bne.n	800a752 <__gethex+0x126>
 800a6d4:	7873      	ldrb	r3, [r6, #1]
 800a6d6:	2b2b      	cmp	r3, #43	@ 0x2b
 800a6d8:	d033      	beq.n	800a742 <__gethex+0x116>
 800a6da:	2b2d      	cmp	r3, #45	@ 0x2d
 800a6dc:	d034      	beq.n	800a748 <__gethex+0x11c>
 800a6de:	1c71      	adds	r1, r6, #1
 800a6e0:	2400      	movs	r4, #0
 800a6e2:	7808      	ldrb	r0, [r1, #0]
 800a6e4:	f7ff ff8c 	bl	800a600 <__hexdig_fun>
 800a6e8:	1e43      	subs	r3, r0, #1
 800a6ea:	b2db      	uxtb	r3, r3
 800a6ec:	2b18      	cmp	r3, #24
 800a6ee:	d830      	bhi.n	800a752 <__gethex+0x126>
 800a6f0:	f1a0 0210 	sub.w	r2, r0, #16
 800a6f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a6f8:	f7ff ff82 	bl	800a600 <__hexdig_fun>
 800a6fc:	f100 3cff 	add.w	ip, r0, #4294967295
 800a700:	fa5f fc8c 	uxtb.w	ip, ip
 800a704:	f1bc 0f18 	cmp.w	ip, #24
 800a708:	f04f 030a 	mov.w	r3, #10
 800a70c:	d91e      	bls.n	800a74c <__gethex+0x120>
 800a70e:	b104      	cbz	r4, 800a712 <__gethex+0xe6>
 800a710:	4252      	negs	r2, r2
 800a712:	4417      	add	r7, r2
 800a714:	f8ca 1000 	str.w	r1, [sl]
 800a718:	b1ed      	cbz	r5, 800a756 <__gethex+0x12a>
 800a71a:	f1bb 0f00 	cmp.w	fp, #0
 800a71e:	bf0c      	ite	eq
 800a720:	2506      	moveq	r5, #6
 800a722:	2500      	movne	r5, #0
 800a724:	4628      	mov	r0, r5
 800a726:	b005      	add	sp, #20
 800a728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a72c:	2500      	movs	r5, #0
 800a72e:	462c      	mov	r4, r5
 800a730:	e7b0      	b.n	800a694 <__gethex+0x68>
 800a732:	2c00      	cmp	r4, #0
 800a734:	d1c7      	bne.n	800a6c6 <__gethex+0x9a>
 800a736:	4627      	mov	r7, r4
 800a738:	e7c7      	b.n	800a6ca <__gethex+0x9e>
 800a73a:	464e      	mov	r6, r9
 800a73c:	462f      	mov	r7, r5
 800a73e:	2501      	movs	r5, #1
 800a740:	e7c3      	b.n	800a6ca <__gethex+0x9e>
 800a742:	2400      	movs	r4, #0
 800a744:	1cb1      	adds	r1, r6, #2
 800a746:	e7cc      	b.n	800a6e2 <__gethex+0xb6>
 800a748:	2401      	movs	r4, #1
 800a74a:	e7fb      	b.n	800a744 <__gethex+0x118>
 800a74c:	fb03 0002 	mla	r0, r3, r2, r0
 800a750:	e7ce      	b.n	800a6f0 <__gethex+0xc4>
 800a752:	4631      	mov	r1, r6
 800a754:	e7de      	b.n	800a714 <__gethex+0xe8>
 800a756:	eba6 0309 	sub.w	r3, r6, r9
 800a75a:	3b01      	subs	r3, #1
 800a75c:	4629      	mov	r1, r5
 800a75e:	2b07      	cmp	r3, #7
 800a760:	dc0a      	bgt.n	800a778 <__gethex+0x14c>
 800a762:	9801      	ldr	r0, [sp, #4]
 800a764:	f000 fa46 	bl	800abf4 <_Balloc>
 800a768:	4604      	mov	r4, r0
 800a76a:	b940      	cbnz	r0, 800a77e <__gethex+0x152>
 800a76c:	4b5c      	ldr	r3, [pc, #368]	@ (800a8e0 <__gethex+0x2b4>)
 800a76e:	4602      	mov	r2, r0
 800a770:	21e4      	movs	r1, #228	@ 0xe4
 800a772:	485c      	ldr	r0, [pc, #368]	@ (800a8e4 <__gethex+0x2b8>)
 800a774:	f001 fab0 	bl	800bcd8 <__assert_func>
 800a778:	3101      	adds	r1, #1
 800a77a:	105b      	asrs	r3, r3, #1
 800a77c:	e7ef      	b.n	800a75e <__gethex+0x132>
 800a77e:	f100 0a14 	add.w	sl, r0, #20
 800a782:	2300      	movs	r3, #0
 800a784:	4655      	mov	r5, sl
 800a786:	469b      	mov	fp, r3
 800a788:	45b1      	cmp	r9, r6
 800a78a:	d337      	bcc.n	800a7fc <__gethex+0x1d0>
 800a78c:	f845 bb04 	str.w	fp, [r5], #4
 800a790:	eba5 050a 	sub.w	r5, r5, sl
 800a794:	10ad      	asrs	r5, r5, #2
 800a796:	6125      	str	r5, [r4, #16]
 800a798:	4658      	mov	r0, fp
 800a79a:	f000 fb1d 	bl	800add8 <__hi0bits>
 800a79e:	016d      	lsls	r5, r5, #5
 800a7a0:	f8d8 6000 	ldr.w	r6, [r8]
 800a7a4:	1a2d      	subs	r5, r5, r0
 800a7a6:	42b5      	cmp	r5, r6
 800a7a8:	dd54      	ble.n	800a854 <__gethex+0x228>
 800a7aa:	1bad      	subs	r5, r5, r6
 800a7ac:	4629      	mov	r1, r5
 800a7ae:	4620      	mov	r0, r4
 800a7b0:	f000 feb1 	bl	800b516 <__any_on>
 800a7b4:	4681      	mov	r9, r0
 800a7b6:	b178      	cbz	r0, 800a7d8 <__gethex+0x1ac>
 800a7b8:	1e6b      	subs	r3, r5, #1
 800a7ba:	1159      	asrs	r1, r3, #5
 800a7bc:	f003 021f 	and.w	r2, r3, #31
 800a7c0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a7c4:	f04f 0901 	mov.w	r9, #1
 800a7c8:	fa09 f202 	lsl.w	r2, r9, r2
 800a7cc:	420a      	tst	r2, r1
 800a7ce:	d003      	beq.n	800a7d8 <__gethex+0x1ac>
 800a7d0:	454b      	cmp	r3, r9
 800a7d2:	dc36      	bgt.n	800a842 <__gethex+0x216>
 800a7d4:	f04f 0902 	mov.w	r9, #2
 800a7d8:	4629      	mov	r1, r5
 800a7da:	4620      	mov	r0, r4
 800a7dc:	f7ff febe 	bl	800a55c <rshift>
 800a7e0:	442f      	add	r7, r5
 800a7e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a7e6:	42bb      	cmp	r3, r7
 800a7e8:	da42      	bge.n	800a870 <__gethex+0x244>
 800a7ea:	9801      	ldr	r0, [sp, #4]
 800a7ec:	4621      	mov	r1, r4
 800a7ee:	f000 fa41 	bl	800ac74 <_Bfree>
 800a7f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	6013      	str	r3, [r2, #0]
 800a7f8:	25a3      	movs	r5, #163	@ 0xa3
 800a7fa:	e793      	b.n	800a724 <__gethex+0xf8>
 800a7fc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a800:	2a2e      	cmp	r2, #46	@ 0x2e
 800a802:	d012      	beq.n	800a82a <__gethex+0x1fe>
 800a804:	2b20      	cmp	r3, #32
 800a806:	d104      	bne.n	800a812 <__gethex+0x1e6>
 800a808:	f845 bb04 	str.w	fp, [r5], #4
 800a80c:	f04f 0b00 	mov.w	fp, #0
 800a810:	465b      	mov	r3, fp
 800a812:	7830      	ldrb	r0, [r6, #0]
 800a814:	9303      	str	r3, [sp, #12]
 800a816:	f7ff fef3 	bl	800a600 <__hexdig_fun>
 800a81a:	9b03      	ldr	r3, [sp, #12]
 800a81c:	f000 000f 	and.w	r0, r0, #15
 800a820:	4098      	lsls	r0, r3
 800a822:	ea4b 0b00 	orr.w	fp, fp, r0
 800a826:	3304      	adds	r3, #4
 800a828:	e7ae      	b.n	800a788 <__gethex+0x15c>
 800a82a:	45b1      	cmp	r9, r6
 800a82c:	d8ea      	bhi.n	800a804 <__gethex+0x1d8>
 800a82e:	492b      	ldr	r1, [pc, #172]	@ (800a8dc <__gethex+0x2b0>)
 800a830:	9303      	str	r3, [sp, #12]
 800a832:	2201      	movs	r2, #1
 800a834:	4630      	mov	r0, r6
 800a836:	f7ff fd44 	bl	800a2c2 <strncmp>
 800a83a:	9b03      	ldr	r3, [sp, #12]
 800a83c:	2800      	cmp	r0, #0
 800a83e:	d1e1      	bne.n	800a804 <__gethex+0x1d8>
 800a840:	e7a2      	b.n	800a788 <__gethex+0x15c>
 800a842:	1ea9      	subs	r1, r5, #2
 800a844:	4620      	mov	r0, r4
 800a846:	f000 fe66 	bl	800b516 <__any_on>
 800a84a:	2800      	cmp	r0, #0
 800a84c:	d0c2      	beq.n	800a7d4 <__gethex+0x1a8>
 800a84e:	f04f 0903 	mov.w	r9, #3
 800a852:	e7c1      	b.n	800a7d8 <__gethex+0x1ac>
 800a854:	da09      	bge.n	800a86a <__gethex+0x23e>
 800a856:	1b75      	subs	r5, r6, r5
 800a858:	4621      	mov	r1, r4
 800a85a:	9801      	ldr	r0, [sp, #4]
 800a85c:	462a      	mov	r2, r5
 800a85e:	f000 fc21 	bl	800b0a4 <__lshift>
 800a862:	1b7f      	subs	r7, r7, r5
 800a864:	4604      	mov	r4, r0
 800a866:	f100 0a14 	add.w	sl, r0, #20
 800a86a:	f04f 0900 	mov.w	r9, #0
 800a86e:	e7b8      	b.n	800a7e2 <__gethex+0x1b6>
 800a870:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a874:	42bd      	cmp	r5, r7
 800a876:	dd6f      	ble.n	800a958 <__gethex+0x32c>
 800a878:	1bed      	subs	r5, r5, r7
 800a87a:	42ae      	cmp	r6, r5
 800a87c:	dc34      	bgt.n	800a8e8 <__gethex+0x2bc>
 800a87e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a882:	2b02      	cmp	r3, #2
 800a884:	d022      	beq.n	800a8cc <__gethex+0x2a0>
 800a886:	2b03      	cmp	r3, #3
 800a888:	d024      	beq.n	800a8d4 <__gethex+0x2a8>
 800a88a:	2b01      	cmp	r3, #1
 800a88c:	d115      	bne.n	800a8ba <__gethex+0x28e>
 800a88e:	42ae      	cmp	r6, r5
 800a890:	d113      	bne.n	800a8ba <__gethex+0x28e>
 800a892:	2e01      	cmp	r6, #1
 800a894:	d10b      	bne.n	800a8ae <__gethex+0x282>
 800a896:	9a02      	ldr	r2, [sp, #8]
 800a898:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a89c:	6013      	str	r3, [r2, #0]
 800a89e:	2301      	movs	r3, #1
 800a8a0:	6123      	str	r3, [r4, #16]
 800a8a2:	f8ca 3000 	str.w	r3, [sl]
 800a8a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a8a8:	2562      	movs	r5, #98	@ 0x62
 800a8aa:	601c      	str	r4, [r3, #0]
 800a8ac:	e73a      	b.n	800a724 <__gethex+0xf8>
 800a8ae:	1e71      	subs	r1, r6, #1
 800a8b0:	4620      	mov	r0, r4
 800a8b2:	f000 fe30 	bl	800b516 <__any_on>
 800a8b6:	2800      	cmp	r0, #0
 800a8b8:	d1ed      	bne.n	800a896 <__gethex+0x26a>
 800a8ba:	9801      	ldr	r0, [sp, #4]
 800a8bc:	4621      	mov	r1, r4
 800a8be:	f000 f9d9 	bl	800ac74 <_Bfree>
 800a8c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	6013      	str	r3, [r2, #0]
 800a8c8:	2550      	movs	r5, #80	@ 0x50
 800a8ca:	e72b      	b.n	800a724 <__gethex+0xf8>
 800a8cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d1f3      	bne.n	800a8ba <__gethex+0x28e>
 800a8d2:	e7e0      	b.n	800a896 <__gethex+0x26a>
 800a8d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d1dd      	bne.n	800a896 <__gethex+0x26a>
 800a8da:	e7ee      	b.n	800a8ba <__gethex+0x28e>
 800a8dc:	0800c518 	.word	0x0800c518
 800a8e0:	0800c681 	.word	0x0800c681
 800a8e4:	0800c692 	.word	0x0800c692
 800a8e8:	1e6f      	subs	r7, r5, #1
 800a8ea:	f1b9 0f00 	cmp.w	r9, #0
 800a8ee:	d130      	bne.n	800a952 <__gethex+0x326>
 800a8f0:	b127      	cbz	r7, 800a8fc <__gethex+0x2d0>
 800a8f2:	4639      	mov	r1, r7
 800a8f4:	4620      	mov	r0, r4
 800a8f6:	f000 fe0e 	bl	800b516 <__any_on>
 800a8fa:	4681      	mov	r9, r0
 800a8fc:	117a      	asrs	r2, r7, #5
 800a8fe:	2301      	movs	r3, #1
 800a900:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a904:	f007 071f 	and.w	r7, r7, #31
 800a908:	40bb      	lsls	r3, r7
 800a90a:	4213      	tst	r3, r2
 800a90c:	4629      	mov	r1, r5
 800a90e:	4620      	mov	r0, r4
 800a910:	bf18      	it	ne
 800a912:	f049 0902 	orrne.w	r9, r9, #2
 800a916:	f7ff fe21 	bl	800a55c <rshift>
 800a91a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a91e:	1b76      	subs	r6, r6, r5
 800a920:	2502      	movs	r5, #2
 800a922:	f1b9 0f00 	cmp.w	r9, #0
 800a926:	d047      	beq.n	800a9b8 <__gethex+0x38c>
 800a928:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a92c:	2b02      	cmp	r3, #2
 800a92e:	d015      	beq.n	800a95c <__gethex+0x330>
 800a930:	2b03      	cmp	r3, #3
 800a932:	d017      	beq.n	800a964 <__gethex+0x338>
 800a934:	2b01      	cmp	r3, #1
 800a936:	d109      	bne.n	800a94c <__gethex+0x320>
 800a938:	f019 0f02 	tst.w	r9, #2
 800a93c:	d006      	beq.n	800a94c <__gethex+0x320>
 800a93e:	f8da 3000 	ldr.w	r3, [sl]
 800a942:	ea49 0903 	orr.w	r9, r9, r3
 800a946:	f019 0f01 	tst.w	r9, #1
 800a94a:	d10e      	bne.n	800a96a <__gethex+0x33e>
 800a94c:	f045 0510 	orr.w	r5, r5, #16
 800a950:	e032      	b.n	800a9b8 <__gethex+0x38c>
 800a952:	f04f 0901 	mov.w	r9, #1
 800a956:	e7d1      	b.n	800a8fc <__gethex+0x2d0>
 800a958:	2501      	movs	r5, #1
 800a95a:	e7e2      	b.n	800a922 <__gethex+0x2f6>
 800a95c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a95e:	f1c3 0301 	rsb	r3, r3, #1
 800a962:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a964:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a966:	2b00      	cmp	r3, #0
 800a968:	d0f0      	beq.n	800a94c <__gethex+0x320>
 800a96a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a96e:	f104 0314 	add.w	r3, r4, #20
 800a972:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a976:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a97a:	f04f 0c00 	mov.w	ip, #0
 800a97e:	4618      	mov	r0, r3
 800a980:	f853 2b04 	ldr.w	r2, [r3], #4
 800a984:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a988:	d01b      	beq.n	800a9c2 <__gethex+0x396>
 800a98a:	3201      	adds	r2, #1
 800a98c:	6002      	str	r2, [r0, #0]
 800a98e:	2d02      	cmp	r5, #2
 800a990:	f104 0314 	add.w	r3, r4, #20
 800a994:	d13c      	bne.n	800aa10 <__gethex+0x3e4>
 800a996:	f8d8 2000 	ldr.w	r2, [r8]
 800a99a:	3a01      	subs	r2, #1
 800a99c:	42b2      	cmp	r2, r6
 800a99e:	d109      	bne.n	800a9b4 <__gethex+0x388>
 800a9a0:	1171      	asrs	r1, r6, #5
 800a9a2:	2201      	movs	r2, #1
 800a9a4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a9a8:	f006 061f 	and.w	r6, r6, #31
 800a9ac:	fa02 f606 	lsl.w	r6, r2, r6
 800a9b0:	421e      	tst	r6, r3
 800a9b2:	d13a      	bne.n	800aa2a <__gethex+0x3fe>
 800a9b4:	f045 0520 	orr.w	r5, r5, #32
 800a9b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a9ba:	601c      	str	r4, [r3, #0]
 800a9bc:	9b02      	ldr	r3, [sp, #8]
 800a9be:	601f      	str	r7, [r3, #0]
 800a9c0:	e6b0      	b.n	800a724 <__gethex+0xf8>
 800a9c2:	4299      	cmp	r1, r3
 800a9c4:	f843 cc04 	str.w	ip, [r3, #-4]
 800a9c8:	d8d9      	bhi.n	800a97e <__gethex+0x352>
 800a9ca:	68a3      	ldr	r3, [r4, #8]
 800a9cc:	459b      	cmp	fp, r3
 800a9ce:	db17      	blt.n	800aa00 <__gethex+0x3d4>
 800a9d0:	6861      	ldr	r1, [r4, #4]
 800a9d2:	9801      	ldr	r0, [sp, #4]
 800a9d4:	3101      	adds	r1, #1
 800a9d6:	f000 f90d 	bl	800abf4 <_Balloc>
 800a9da:	4681      	mov	r9, r0
 800a9dc:	b918      	cbnz	r0, 800a9e6 <__gethex+0x3ba>
 800a9de:	4b1a      	ldr	r3, [pc, #104]	@ (800aa48 <__gethex+0x41c>)
 800a9e0:	4602      	mov	r2, r0
 800a9e2:	2184      	movs	r1, #132	@ 0x84
 800a9e4:	e6c5      	b.n	800a772 <__gethex+0x146>
 800a9e6:	6922      	ldr	r2, [r4, #16]
 800a9e8:	3202      	adds	r2, #2
 800a9ea:	f104 010c 	add.w	r1, r4, #12
 800a9ee:	0092      	lsls	r2, r2, #2
 800a9f0:	300c      	adds	r0, #12
 800a9f2:	f7ff fd52 	bl	800a49a <memcpy>
 800a9f6:	4621      	mov	r1, r4
 800a9f8:	9801      	ldr	r0, [sp, #4]
 800a9fa:	f000 f93b 	bl	800ac74 <_Bfree>
 800a9fe:	464c      	mov	r4, r9
 800aa00:	6923      	ldr	r3, [r4, #16]
 800aa02:	1c5a      	adds	r2, r3, #1
 800aa04:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aa08:	6122      	str	r2, [r4, #16]
 800aa0a:	2201      	movs	r2, #1
 800aa0c:	615a      	str	r2, [r3, #20]
 800aa0e:	e7be      	b.n	800a98e <__gethex+0x362>
 800aa10:	6922      	ldr	r2, [r4, #16]
 800aa12:	455a      	cmp	r2, fp
 800aa14:	dd0b      	ble.n	800aa2e <__gethex+0x402>
 800aa16:	2101      	movs	r1, #1
 800aa18:	4620      	mov	r0, r4
 800aa1a:	f7ff fd9f 	bl	800a55c <rshift>
 800aa1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aa22:	3701      	adds	r7, #1
 800aa24:	42bb      	cmp	r3, r7
 800aa26:	f6ff aee0 	blt.w	800a7ea <__gethex+0x1be>
 800aa2a:	2501      	movs	r5, #1
 800aa2c:	e7c2      	b.n	800a9b4 <__gethex+0x388>
 800aa2e:	f016 061f 	ands.w	r6, r6, #31
 800aa32:	d0fa      	beq.n	800aa2a <__gethex+0x3fe>
 800aa34:	4453      	add	r3, sl
 800aa36:	f1c6 0620 	rsb	r6, r6, #32
 800aa3a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800aa3e:	f000 f9cb 	bl	800add8 <__hi0bits>
 800aa42:	42b0      	cmp	r0, r6
 800aa44:	dbe7      	blt.n	800aa16 <__gethex+0x3ea>
 800aa46:	e7f0      	b.n	800aa2a <__gethex+0x3fe>
 800aa48:	0800c681 	.word	0x0800c681

0800aa4c <L_shift>:
 800aa4c:	f1c2 0208 	rsb	r2, r2, #8
 800aa50:	0092      	lsls	r2, r2, #2
 800aa52:	b570      	push	{r4, r5, r6, lr}
 800aa54:	f1c2 0620 	rsb	r6, r2, #32
 800aa58:	6843      	ldr	r3, [r0, #4]
 800aa5a:	6804      	ldr	r4, [r0, #0]
 800aa5c:	fa03 f506 	lsl.w	r5, r3, r6
 800aa60:	432c      	orrs	r4, r5
 800aa62:	40d3      	lsrs	r3, r2
 800aa64:	6004      	str	r4, [r0, #0]
 800aa66:	f840 3f04 	str.w	r3, [r0, #4]!
 800aa6a:	4288      	cmp	r0, r1
 800aa6c:	d3f4      	bcc.n	800aa58 <L_shift+0xc>
 800aa6e:	bd70      	pop	{r4, r5, r6, pc}

0800aa70 <__match>:
 800aa70:	b530      	push	{r4, r5, lr}
 800aa72:	6803      	ldr	r3, [r0, #0]
 800aa74:	3301      	adds	r3, #1
 800aa76:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa7a:	b914      	cbnz	r4, 800aa82 <__match+0x12>
 800aa7c:	6003      	str	r3, [r0, #0]
 800aa7e:	2001      	movs	r0, #1
 800aa80:	bd30      	pop	{r4, r5, pc}
 800aa82:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa86:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800aa8a:	2d19      	cmp	r5, #25
 800aa8c:	bf98      	it	ls
 800aa8e:	3220      	addls	r2, #32
 800aa90:	42a2      	cmp	r2, r4
 800aa92:	d0f0      	beq.n	800aa76 <__match+0x6>
 800aa94:	2000      	movs	r0, #0
 800aa96:	e7f3      	b.n	800aa80 <__match+0x10>

0800aa98 <__hexnan>:
 800aa98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa9c:	680b      	ldr	r3, [r1, #0]
 800aa9e:	6801      	ldr	r1, [r0, #0]
 800aaa0:	115e      	asrs	r6, r3, #5
 800aaa2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800aaa6:	f013 031f 	ands.w	r3, r3, #31
 800aaaa:	b087      	sub	sp, #28
 800aaac:	bf18      	it	ne
 800aaae:	3604      	addne	r6, #4
 800aab0:	2500      	movs	r5, #0
 800aab2:	1f37      	subs	r7, r6, #4
 800aab4:	4682      	mov	sl, r0
 800aab6:	4690      	mov	r8, r2
 800aab8:	9301      	str	r3, [sp, #4]
 800aaba:	f846 5c04 	str.w	r5, [r6, #-4]
 800aabe:	46b9      	mov	r9, r7
 800aac0:	463c      	mov	r4, r7
 800aac2:	9502      	str	r5, [sp, #8]
 800aac4:	46ab      	mov	fp, r5
 800aac6:	784a      	ldrb	r2, [r1, #1]
 800aac8:	1c4b      	adds	r3, r1, #1
 800aaca:	9303      	str	r3, [sp, #12]
 800aacc:	b342      	cbz	r2, 800ab20 <__hexnan+0x88>
 800aace:	4610      	mov	r0, r2
 800aad0:	9105      	str	r1, [sp, #20]
 800aad2:	9204      	str	r2, [sp, #16]
 800aad4:	f7ff fd94 	bl	800a600 <__hexdig_fun>
 800aad8:	2800      	cmp	r0, #0
 800aada:	d151      	bne.n	800ab80 <__hexnan+0xe8>
 800aadc:	9a04      	ldr	r2, [sp, #16]
 800aade:	9905      	ldr	r1, [sp, #20]
 800aae0:	2a20      	cmp	r2, #32
 800aae2:	d818      	bhi.n	800ab16 <__hexnan+0x7e>
 800aae4:	9b02      	ldr	r3, [sp, #8]
 800aae6:	459b      	cmp	fp, r3
 800aae8:	dd13      	ble.n	800ab12 <__hexnan+0x7a>
 800aaea:	454c      	cmp	r4, r9
 800aaec:	d206      	bcs.n	800aafc <__hexnan+0x64>
 800aaee:	2d07      	cmp	r5, #7
 800aaf0:	dc04      	bgt.n	800aafc <__hexnan+0x64>
 800aaf2:	462a      	mov	r2, r5
 800aaf4:	4649      	mov	r1, r9
 800aaf6:	4620      	mov	r0, r4
 800aaf8:	f7ff ffa8 	bl	800aa4c <L_shift>
 800aafc:	4544      	cmp	r4, r8
 800aafe:	d952      	bls.n	800aba6 <__hexnan+0x10e>
 800ab00:	2300      	movs	r3, #0
 800ab02:	f1a4 0904 	sub.w	r9, r4, #4
 800ab06:	f844 3c04 	str.w	r3, [r4, #-4]
 800ab0a:	f8cd b008 	str.w	fp, [sp, #8]
 800ab0e:	464c      	mov	r4, r9
 800ab10:	461d      	mov	r5, r3
 800ab12:	9903      	ldr	r1, [sp, #12]
 800ab14:	e7d7      	b.n	800aac6 <__hexnan+0x2e>
 800ab16:	2a29      	cmp	r2, #41	@ 0x29
 800ab18:	d157      	bne.n	800abca <__hexnan+0x132>
 800ab1a:	3102      	adds	r1, #2
 800ab1c:	f8ca 1000 	str.w	r1, [sl]
 800ab20:	f1bb 0f00 	cmp.w	fp, #0
 800ab24:	d051      	beq.n	800abca <__hexnan+0x132>
 800ab26:	454c      	cmp	r4, r9
 800ab28:	d206      	bcs.n	800ab38 <__hexnan+0xa0>
 800ab2a:	2d07      	cmp	r5, #7
 800ab2c:	dc04      	bgt.n	800ab38 <__hexnan+0xa0>
 800ab2e:	462a      	mov	r2, r5
 800ab30:	4649      	mov	r1, r9
 800ab32:	4620      	mov	r0, r4
 800ab34:	f7ff ff8a 	bl	800aa4c <L_shift>
 800ab38:	4544      	cmp	r4, r8
 800ab3a:	d936      	bls.n	800abaa <__hexnan+0x112>
 800ab3c:	f1a8 0204 	sub.w	r2, r8, #4
 800ab40:	4623      	mov	r3, r4
 800ab42:	f853 1b04 	ldr.w	r1, [r3], #4
 800ab46:	f842 1f04 	str.w	r1, [r2, #4]!
 800ab4a:	429f      	cmp	r7, r3
 800ab4c:	d2f9      	bcs.n	800ab42 <__hexnan+0xaa>
 800ab4e:	1b3b      	subs	r3, r7, r4
 800ab50:	f023 0303 	bic.w	r3, r3, #3
 800ab54:	3304      	adds	r3, #4
 800ab56:	3401      	adds	r4, #1
 800ab58:	3e03      	subs	r6, #3
 800ab5a:	42b4      	cmp	r4, r6
 800ab5c:	bf88      	it	hi
 800ab5e:	2304      	movhi	r3, #4
 800ab60:	4443      	add	r3, r8
 800ab62:	2200      	movs	r2, #0
 800ab64:	f843 2b04 	str.w	r2, [r3], #4
 800ab68:	429f      	cmp	r7, r3
 800ab6a:	d2fb      	bcs.n	800ab64 <__hexnan+0xcc>
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	b91b      	cbnz	r3, 800ab78 <__hexnan+0xe0>
 800ab70:	4547      	cmp	r7, r8
 800ab72:	d128      	bne.n	800abc6 <__hexnan+0x12e>
 800ab74:	2301      	movs	r3, #1
 800ab76:	603b      	str	r3, [r7, #0]
 800ab78:	2005      	movs	r0, #5
 800ab7a:	b007      	add	sp, #28
 800ab7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab80:	3501      	adds	r5, #1
 800ab82:	2d08      	cmp	r5, #8
 800ab84:	f10b 0b01 	add.w	fp, fp, #1
 800ab88:	dd06      	ble.n	800ab98 <__hexnan+0x100>
 800ab8a:	4544      	cmp	r4, r8
 800ab8c:	d9c1      	bls.n	800ab12 <__hexnan+0x7a>
 800ab8e:	2300      	movs	r3, #0
 800ab90:	f844 3c04 	str.w	r3, [r4, #-4]
 800ab94:	2501      	movs	r5, #1
 800ab96:	3c04      	subs	r4, #4
 800ab98:	6822      	ldr	r2, [r4, #0]
 800ab9a:	f000 000f 	and.w	r0, r0, #15
 800ab9e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800aba2:	6020      	str	r0, [r4, #0]
 800aba4:	e7b5      	b.n	800ab12 <__hexnan+0x7a>
 800aba6:	2508      	movs	r5, #8
 800aba8:	e7b3      	b.n	800ab12 <__hexnan+0x7a>
 800abaa:	9b01      	ldr	r3, [sp, #4]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d0dd      	beq.n	800ab6c <__hexnan+0xd4>
 800abb0:	f1c3 0320 	rsb	r3, r3, #32
 800abb4:	f04f 32ff 	mov.w	r2, #4294967295
 800abb8:	40da      	lsrs	r2, r3
 800abba:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800abbe:	4013      	ands	r3, r2
 800abc0:	f846 3c04 	str.w	r3, [r6, #-4]
 800abc4:	e7d2      	b.n	800ab6c <__hexnan+0xd4>
 800abc6:	3f04      	subs	r7, #4
 800abc8:	e7d0      	b.n	800ab6c <__hexnan+0xd4>
 800abca:	2004      	movs	r0, #4
 800abcc:	e7d5      	b.n	800ab7a <__hexnan+0xe2>

0800abce <__ascii_mbtowc>:
 800abce:	b082      	sub	sp, #8
 800abd0:	b901      	cbnz	r1, 800abd4 <__ascii_mbtowc+0x6>
 800abd2:	a901      	add	r1, sp, #4
 800abd4:	b142      	cbz	r2, 800abe8 <__ascii_mbtowc+0x1a>
 800abd6:	b14b      	cbz	r3, 800abec <__ascii_mbtowc+0x1e>
 800abd8:	7813      	ldrb	r3, [r2, #0]
 800abda:	600b      	str	r3, [r1, #0]
 800abdc:	7812      	ldrb	r2, [r2, #0]
 800abde:	1e10      	subs	r0, r2, #0
 800abe0:	bf18      	it	ne
 800abe2:	2001      	movne	r0, #1
 800abe4:	b002      	add	sp, #8
 800abe6:	4770      	bx	lr
 800abe8:	4610      	mov	r0, r2
 800abea:	e7fb      	b.n	800abe4 <__ascii_mbtowc+0x16>
 800abec:	f06f 0001 	mvn.w	r0, #1
 800abf0:	e7f8      	b.n	800abe4 <__ascii_mbtowc+0x16>
	...

0800abf4 <_Balloc>:
 800abf4:	b570      	push	{r4, r5, r6, lr}
 800abf6:	69c6      	ldr	r6, [r0, #28]
 800abf8:	4604      	mov	r4, r0
 800abfa:	460d      	mov	r5, r1
 800abfc:	b976      	cbnz	r6, 800ac1c <_Balloc+0x28>
 800abfe:	2010      	movs	r0, #16
 800ac00:	f7fe fb1a 	bl	8009238 <malloc>
 800ac04:	4602      	mov	r2, r0
 800ac06:	61e0      	str	r0, [r4, #28]
 800ac08:	b920      	cbnz	r0, 800ac14 <_Balloc+0x20>
 800ac0a:	4b18      	ldr	r3, [pc, #96]	@ (800ac6c <_Balloc+0x78>)
 800ac0c:	4818      	ldr	r0, [pc, #96]	@ (800ac70 <_Balloc+0x7c>)
 800ac0e:	216b      	movs	r1, #107	@ 0x6b
 800ac10:	f001 f862 	bl	800bcd8 <__assert_func>
 800ac14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac18:	6006      	str	r6, [r0, #0]
 800ac1a:	60c6      	str	r6, [r0, #12]
 800ac1c:	69e6      	ldr	r6, [r4, #28]
 800ac1e:	68f3      	ldr	r3, [r6, #12]
 800ac20:	b183      	cbz	r3, 800ac44 <_Balloc+0x50>
 800ac22:	69e3      	ldr	r3, [r4, #28]
 800ac24:	68db      	ldr	r3, [r3, #12]
 800ac26:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ac2a:	b9b8      	cbnz	r0, 800ac5c <_Balloc+0x68>
 800ac2c:	2101      	movs	r1, #1
 800ac2e:	fa01 f605 	lsl.w	r6, r1, r5
 800ac32:	1d72      	adds	r2, r6, #5
 800ac34:	0092      	lsls	r2, r2, #2
 800ac36:	4620      	mov	r0, r4
 800ac38:	f001 f86c 	bl	800bd14 <_calloc_r>
 800ac3c:	b160      	cbz	r0, 800ac58 <_Balloc+0x64>
 800ac3e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ac42:	e00e      	b.n	800ac62 <_Balloc+0x6e>
 800ac44:	2221      	movs	r2, #33	@ 0x21
 800ac46:	2104      	movs	r1, #4
 800ac48:	4620      	mov	r0, r4
 800ac4a:	f001 f863 	bl	800bd14 <_calloc_r>
 800ac4e:	69e3      	ldr	r3, [r4, #28]
 800ac50:	60f0      	str	r0, [r6, #12]
 800ac52:	68db      	ldr	r3, [r3, #12]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d1e4      	bne.n	800ac22 <_Balloc+0x2e>
 800ac58:	2000      	movs	r0, #0
 800ac5a:	bd70      	pop	{r4, r5, r6, pc}
 800ac5c:	6802      	ldr	r2, [r0, #0]
 800ac5e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ac62:	2300      	movs	r3, #0
 800ac64:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ac68:	e7f7      	b.n	800ac5a <_Balloc+0x66>
 800ac6a:	bf00      	nop
 800ac6c:	0800c6f2 	.word	0x0800c6f2
 800ac70:	0800c709 	.word	0x0800c709

0800ac74 <_Bfree>:
 800ac74:	b570      	push	{r4, r5, r6, lr}
 800ac76:	69c6      	ldr	r6, [r0, #28]
 800ac78:	4605      	mov	r5, r0
 800ac7a:	460c      	mov	r4, r1
 800ac7c:	b976      	cbnz	r6, 800ac9c <_Bfree+0x28>
 800ac7e:	2010      	movs	r0, #16
 800ac80:	f7fe fada 	bl	8009238 <malloc>
 800ac84:	4602      	mov	r2, r0
 800ac86:	61e8      	str	r0, [r5, #28]
 800ac88:	b920      	cbnz	r0, 800ac94 <_Bfree+0x20>
 800ac8a:	4b09      	ldr	r3, [pc, #36]	@ (800acb0 <_Bfree+0x3c>)
 800ac8c:	4809      	ldr	r0, [pc, #36]	@ (800acb4 <_Bfree+0x40>)
 800ac8e:	218f      	movs	r1, #143	@ 0x8f
 800ac90:	f001 f822 	bl	800bcd8 <__assert_func>
 800ac94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac98:	6006      	str	r6, [r0, #0]
 800ac9a:	60c6      	str	r6, [r0, #12]
 800ac9c:	b13c      	cbz	r4, 800acae <_Bfree+0x3a>
 800ac9e:	69eb      	ldr	r3, [r5, #28]
 800aca0:	6862      	ldr	r2, [r4, #4]
 800aca2:	68db      	ldr	r3, [r3, #12]
 800aca4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aca8:	6021      	str	r1, [r4, #0]
 800acaa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800acae:	bd70      	pop	{r4, r5, r6, pc}
 800acb0:	0800c6f2 	.word	0x0800c6f2
 800acb4:	0800c709 	.word	0x0800c709

0800acb8 <__multadd>:
 800acb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acbc:	690d      	ldr	r5, [r1, #16]
 800acbe:	4607      	mov	r7, r0
 800acc0:	460c      	mov	r4, r1
 800acc2:	461e      	mov	r6, r3
 800acc4:	f101 0c14 	add.w	ip, r1, #20
 800acc8:	2000      	movs	r0, #0
 800acca:	f8dc 3000 	ldr.w	r3, [ip]
 800acce:	b299      	uxth	r1, r3
 800acd0:	fb02 6101 	mla	r1, r2, r1, r6
 800acd4:	0c1e      	lsrs	r6, r3, #16
 800acd6:	0c0b      	lsrs	r3, r1, #16
 800acd8:	fb02 3306 	mla	r3, r2, r6, r3
 800acdc:	b289      	uxth	r1, r1
 800acde:	3001      	adds	r0, #1
 800ace0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ace4:	4285      	cmp	r5, r0
 800ace6:	f84c 1b04 	str.w	r1, [ip], #4
 800acea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800acee:	dcec      	bgt.n	800acca <__multadd+0x12>
 800acf0:	b30e      	cbz	r6, 800ad36 <__multadd+0x7e>
 800acf2:	68a3      	ldr	r3, [r4, #8]
 800acf4:	42ab      	cmp	r3, r5
 800acf6:	dc19      	bgt.n	800ad2c <__multadd+0x74>
 800acf8:	6861      	ldr	r1, [r4, #4]
 800acfa:	4638      	mov	r0, r7
 800acfc:	3101      	adds	r1, #1
 800acfe:	f7ff ff79 	bl	800abf4 <_Balloc>
 800ad02:	4680      	mov	r8, r0
 800ad04:	b928      	cbnz	r0, 800ad12 <__multadd+0x5a>
 800ad06:	4602      	mov	r2, r0
 800ad08:	4b0c      	ldr	r3, [pc, #48]	@ (800ad3c <__multadd+0x84>)
 800ad0a:	480d      	ldr	r0, [pc, #52]	@ (800ad40 <__multadd+0x88>)
 800ad0c:	21ba      	movs	r1, #186	@ 0xba
 800ad0e:	f000 ffe3 	bl	800bcd8 <__assert_func>
 800ad12:	6922      	ldr	r2, [r4, #16]
 800ad14:	3202      	adds	r2, #2
 800ad16:	f104 010c 	add.w	r1, r4, #12
 800ad1a:	0092      	lsls	r2, r2, #2
 800ad1c:	300c      	adds	r0, #12
 800ad1e:	f7ff fbbc 	bl	800a49a <memcpy>
 800ad22:	4621      	mov	r1, r4
 800ad24:	4638      	mov	r0, r7
 800ad26:	f7ff ffa5 	bl	800ac74 <_Bfree>
 800ad2a:	4644      	mov	r4, r8
 800ad2c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ad30:	3501      	adds	r5, #1
 800ad32:	615e      	str	r6, [r3, #20]
 800ad34:	6125      	str	r5, [r4, #16]
 800ad36:	4620      	mov	r0, r4
 800ad38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad3c:	0800c681 	.word	0x0800c681
 800ad40:	0800c709 	.word	0x0800c709

0800ad44 <__s2b>:
 800ad44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad48:	460c      	mov	r4, r1
 800ad4a:	4615      	mov	r5, r2
 800ad4c:	461f      	mov	r7, r3
 800ad4e:	2209      	movs	r2, #9
 800ad50:	3308      	adds	r3, #8
 800ad52:	4606      	mov	r6, r0
 800ad54:	fb93 f3f2 	sdiv	r3, r3, r2
 800ad58:	2100      	movs	r1, #0
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	429a      	cmp	r2, r3
 800ad5e:	db09      	blt.n	800ad74 <__s2b+0x30>
 800ad60:	4630      	mov	r0, r6
 800ad62:	f7ff ff47 	bl	800abf4 <_Balloc>
 800ad66:	b940      	cbnz	r0, 800ad7a <__s2b+0x36>
 800ad68:	4602      	mov	r2, r0
 800ad6a:	4b19      	ldr	r3, [pc, #100]	@ (800add0 <__s2b+0x8c>)
 800ad6c:	4819      	ldr	r0, [pc, #100]	@ (800add4 <__s2b+0x90>)
 800ad6e:	21d3      	movs	r1, #211	@ 0xd3
 800ad70:	f000 ffb2 	bl	800bcd8 <__assert_func>
 800ad74:	0052      	lsls	r2, r2, #1
 800ad76:	3101      	adds	r1, #1
 800ad78:	e7f0      	b.n	800ad5c <__s2b+0x18>
 800ad7a:	9b08      	ldr	r3, [sp, #32]
 800ad7c:	6143      	str	r3, [r0, #20]
 800ad7e:	2d09      	cmp	r5, #9
 800ad80:	f04f 0301 	mov.w	r3, #1
 800ad84:	6103      	str	r3, [r0, #16]
 800ad86:	dd16      	ble.n	800adb6 <__s2b+0x72>
 800ad88:	f104 0909 	add.w	r9, r4, #9
 800ad8c:	46c8      	mov	r8, r9
 800ad8e:	442c      	add	r4, r5
 800ad90:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ad94:	4601      	mov	r1, r0
 800ad96:	3b30      	subs	r3, #48	@ 0x30
 800ad98:	220a      	movs	r2, #10
 800ad9a:	4630      	mov	r0, r6
 800ad9c:	f7ff ff8c 	bl	800acb8 <__multadd>
 800ada0:	45a0      	cmp	r8, r4
 800ada2:	d1f5      	bne.n	800ad90 <__s2b+0x4c>
 800ada4:	f1a5 0408 	sub.w	r4, r5, #8
 800ada8:	444c      	add	r4, r9
 800adaa:	1b2d      	subs	r5, r5, r4
 800adac:	1963      	adds	r3, r4, r5
 800adae:	42bb      	cmp	r3, r7
 800adb0:	db04      	blt.n	800adbc <__s2b+0x78>
 800adb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adb6:	340a      	adds	r4, #10
 800adb8:	2509      	movs	r5, #9
 800adba:	e7f6      	b.n	800adaa <__s2b+0x66>
 800adbc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800adc0:	4601      	mov	r1, r0
 800adc2:	3b30      	subs	r3, #48	@ 0x30
 800adc4:	220a      	movs	r2, #10
 800adc6:	4630      	mov	r0, r6
 800adc8:	f7ff ff76 	bl	800acb8 <__multadd>
 800adcc:	e7ee      	b.n	800adac <__s2b+0x68>
 800adce:	bf00      	nop
 800add0:	0800c681 	.word	0x0800c681
 800add4:	0800c709 	.word	0x0800c709

0800add8 <__hi0bits>:
 800add8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800addc:	4603      	mov	r3, r0
 800adde:	bf36      	itet	cc
 800ade0:	0403      	lslcc	r3, r0, #16
 800ade2:	2000      	movcs	r0, #0
 800ade4:	2010      	movcc	r0, #16
 800ade6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800adea:	bf3c      	itt	cc
 800adec:	021b      	lslcc	r3, r3, #8
 800adee:	3008      	addcc	r0, #8
 800adf0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800adf4:	bf3c      	itt	cc
 800adf6:	011b      	lslcc	r3, r3, #4
 800adf8:	3004      	addcc	r0, #4
 800adfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800adfe:	bf3c      	itt	cc
 800ae00:	009b      	lslcc	r3, r3, #2
 800ae02:	3002      	addcc	r0, #2
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	db05      	blt.n	800ae14 <__hi0bits+0x3c>
 800ae08:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ae0c:	f100 0001 	add.w	r0, r0, #1
 800ae10:	bf08      	it	eq
 800ae12:	2020      	moveq	r0, #32
 800ae14:	4770      	bx	lr

0800ae16 <__lo0bits>:
 800ae16:	6803      	ldr	r3, [r0, #0]
 800ae18:	4602      	mov	r2, r0
 800ae1a:	f013 0007 	ands.w	r0, r3, #7
 800ae1e:	d00b      	beq.n	800ae38 <__lo0bits+0x22>
 800ae20:	07d9      	lsls	r1, r3, #31
 800ae22:	d421      	bmi.n	800ae68 <__lo0bits+0x52>
 800ae24:	0798      	lsls	r0, r3, #30
 800ae26:	bf49      	itett	mi
 800ae28:	085b      	lsrmi	r3, r3, #1
 800ae2a:	089b      	lsrpl	r3, r3, #2
 800ae2c:	2001      	movmi	r0, #1
 800ae2e:	6013      	strmi	r3, [r2, #0]
 800ae30:	bf5c      	itt	pl
 800ae32:	6013      	strpl	r3, [r2, #0]
 800ae34:	2002      	movpl	r0, #2
 800ae36:	4770      	bx	lr
 800ae38:	b299      	uxth	r1, r3
 800ae3a:	b909      	cbnz	r1, 800ae40 <__lo0bits+0x2a>
 800ae3c:	0c1b      	lsrs	r3, r3, #16
 800ae3e:	2010      	movs	r0, #16
 800ae40:	b2d9      	uxtb	r1, r3
 800ae42:	b909      	cbnz	r1, 800ae48 <__lo0bits+0x32>
 800ae44:	3008      	adds	r0, #8
 800ae46:	0a1b      	lsrs	r3, r3, #8
 800ae48:	0719      	lsls	r1, r3, #28
 800ae4a:	bf04      	itt	eq
 800ae4c:	091b      	lsreq	r3, r3, #4
 800ae4e:	3004      	addeq	r0, #4
 800ae50:	0799      	lsls	r1, r3, #30
 800ae52:	bf04      	itt	eq
 800ae54:	089b      	lsreq	r3, r3, #2
 800ae56:	3002      	addeq	r0, #2
 800ae58:	07d9      	lsls	r1, r3, #31
 800ae5a:	d403      	bmi.n	800ae64 <__lo0bits+0x4e>
 800ae5c:	085b      	lsrs	r3, r3, #1
 800ae5e:	f100 0001 	add.w	r0, r0, #1
 800ae62:	d003      	beq.n	800ae6c <__lo0bits+0x56>
 800ae64:	6013      	str	r3, [r2, #0]
 800ae66:	4770      	bx	lr
 800ae68:	2000      	movs	r0, #0
 800ae6a:	4770      	bx	lr
 800ae6c:	2020      	movs	r0, #32
 800ae6e:	4770      	bx	lr

0800ae70 <__i2b>:
 800ae70:	b510      	push	{r4, lr}
 800ae72:	460c      	mov	r4, r1
 800ae74:	2101      	movs	r1, #1
 800ae76:	f7ff febd 	bl	800abf4 <_Balloc>
 800ae7a:	4602      	mov	r2, r0
 800ae7c:	b928      	cbnz	r0, 800ae8a <__i2b+0x1a>
 800ae7e:	4b05      	ldr	r3, [pc, #20]	@ (800ae94 <__i2b+0x24>)
 800ae80:	4805      	ldr	r0, [pc, #20]	@ (800ae98 <__i2b+0x28>)
 800ae82:	f240 1145 	movw	r1, #325	@ 0x145
 800ae86:	f000 ff27 	bl	800bcd8 <__assert_func>
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	6144      	str	r4, [r0, #20]
 800ae8e:	6103      	str	r3, [r0, #16]
 800ae90:	bd10      	pop	{r4, pc}
 800ae92:	bf00      	nop
 800ae94:	0800c681 	.word	0x0800c681
 800ae98:	0800c709 	.word	0x0800c709

0800ae9c <__multiply>:
 800ae9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aea0:	4614      	mov	r4, r2
 800aea2:	690a      	ldr	r2, [r1, #16]
 800aea4:	6923      	ldr	r3, [r4, #16]
 800aea6:	429a      	cmp	r2, r3
 800aea8:	bfa8      	it	ge
 800aeaa:	4623      	movge	r3, r4
 800aeac:	460f      	mov	r7, r1
 800aeae:	bfa4      	itt	ge
 800aeb0:	460c      	movge	r4, r1
 800aeb2:	461f      	movge	r7, r3
 800aeb4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800aeb8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800aebc:	68a3      	ldr	r3, [r4, #8]
 800aebe:	6861      	ldr	r1, [r4, #4]
 800aec0:	eb0a 0609 	add.w	r6, sl, r9
 800aec4:	42b3      	cmp	r3, r6
 800aec6:	b085      	sub	sp, #20
 800aec8:	bfb8      	it	lt
 800aeca:	3101      	addlt	r1, #1
 800aecc:	f7ff fe92 	bl	800abf4 <_Balloc>
 800aed0:	b930      	cbnz	r0, 800aee0 <__multiply+0x44>
 800aed2:	4602      	mov	r2, r0
 800aed4:	4b44      	ldr	r3, [pc, #272]	@ (800afe8 <__multiply+0x14c>)
 800aed6:	4845      	ldr	r0, [pc, #276]	@ (800afec <__multiply+0x150>)
 800aed8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800aedc:	f000 fefc 	bl	800bcd8 <__assert_func>
 800aee0:	f100 0514 	add.w	r5, r0, #20
 800aee4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aee8:	462b      	mov	r3, r5
 800aeea:	2200      	movs	r2, #0
 800aeec:	4543      	cmp	r3, r8
 800aeee:	d321      	bcc.n	800af34 <__multiply+0x98>
 800aef0:	f107 0114 	add.w	r1, r7, #20
 800aef4:	f104 0214 	add.w	r2, r4, #20
 800aef8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800aefc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800af00:	9302      	str	r3, [sp, #8]
 800af02:	1b13      	subs	r3, r2, r4
 800af04:	3b15      	subs	r3, #21
 800af06:	f023 0303 	bic.w	r3, r3, #3
 800af0a:	3304      	adds	r3, #4
 800af0c:	f104 0715 	add.w	r7, r4, #21
 800af10:	42ba      	cmp	r2, r7
 800af12:	bf38      	it	cc
 800af14:	2304      	movcc	r3, #4
 800af16:	9301      	str	r3, [sp, #4]
 800af18:	9b02      	ldr	r3, [sp, #8]
 800af1a:	9103      	str	r1, [sp, #12]
 800af1c:	428b      	cmp	r3, r1
 800af1e:	d80c      	bhi.n	800af3a <__multiply+0x9e>
 800af20:	2e00      	cmp	r6, #0
 800af22:	dd03      	ble.n	800af2c <__multiply+0x90>
 800af24:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d05b      	beq.n	800afe4 <__multiply+0x148>
 800af2c:	6106      	str	r6, [r0, #16]
 800af2e:	b005      	add	sp, #20
 800af30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af34:	f843 2b04 	str.w	r2, [r3], #4
 800af38:	e7d8      	b.n	800aeec <__multiply+0x50>
 800af3a:	f8b1 a000 	ldrh.w	sl, [r1]
 800af3e:	f1ba 0f00 	cmp.w	sl, #0
 800af42:	d024      	beq.n	800af8e <__multiply+0xf2>
 800af44:	f104 0e14 	add.w	lr, r4, #20
 800af48:	46a9      	mov	r9, r5
 800af4a:	f04f 0c00 	mov.w	ip, #0
 800af4e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800af52:	f8d9 3000 	ldr.w	r3, [r9]
 800af56:	fa1f fb87 	uxth.w	fp, r7
 800af5a:	b29b      	uxth	r3, r3
 800af5c:	fb0a 330b 	mla	r3, sl, fp, r3
 800af60:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800af64:	f8d9 7000 	ldr.w	r7, [r9]
 800af68:	4463      	add	r3, ip
 800af6a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800af6e:	fb0a c70b 	mla	r7, sl, fp, ip
 800af72:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800af76:	b29b      	uxth	r3, r3
 800af78:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800af7c:	4572      	cmp	r2, lr
 800af7e:	f849 3b04 	str.w	r3, [r9], #4
 800af82:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800af86:	d8e2      	bhi.n	800af4e <__multiply+0xb2>
 800af88:	9b01      	ldr	r3, [sp, #4]
 800af8a:	f845 c003 	str.w	ip, [r5, r3]
 800af8e:	9b03      	ldr	r3, [sp, #12]
 800af90:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800af94:	3104      	adds	r1, #4
 800af96:	f1b9 0f00 	cmp.w	r9, #0
 800af9a:	d021      	beq.n	800afe0 <__multiply+0x144>
 800af9c:	682b      	ldr	r3, [r5, #0]
 800af9e:	f104 0c14 	add.w	ip, r4, #20
 800afa2:	46ae      	mov	lr, r5
 800afa4:	f04f 0a00 	mov.w	sl, #0
 800afa8:	f8bc b000 	ldrh.w	fp, [ip]
 800afac:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800afb0:	fb09 770b 	mla	r7, r9, fp, r7
 800afb4:	4457      	add	r7, sl
 800afb6:	b29b      	uxth	r3, r3
 800afb8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800afbc:	f84e 3b04 	str.w	r3, [lr], #4
 800afc0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800afc4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800afc8:	f8be 3000 	ldrh.w	r3, [lr]
 800afcc:	fb09 330a 	mla	r3, r9, sl, r3
 800afd0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800afd4:	4562      	cmp	r2, ip
 800afd6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800afda:	d8e5      	bhi.n	800afa8 <__multiply+0x10c>
 800afdc:	9f01      	ldr	r7, [sp, #4]
 800afde:	51eb      	str	r3, [r5, r7]
 800afe0:	3504      	adds	r5, #4
 800afe2:	e799      	b.n	800af18 <__multiply+0x7c>
 800afe4:	3e01      	subs	r6, #1
 800afe6:	e79b      	b.n	800af20 <__multiply+0x84>
 800afe8:	0800c681 	.word	0x0800c681
 800afec:	0800c709 	.word	0x0800c709

0800aff0 <__pow5mult>:
 800aff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aff4:	4615      	mov	r5, r2
 800aff6:	f012 0203 	ands.w	r2, r2, #3
 800affa:	4607      	mov	r7, r0
 800affc:	460e      	mov	r6, r1
 800affe:	d007      	beq.n	800b010 <__pow5mult+0x20>
 800b000:	4c25      	ldr	r4, [pc, #148]	@ (800b098 <__pow5mult+0xa8>)
 800b002:	3a01      	subs	r2, #1
 800b004:	2300      	movs	r3, #0
 800b006:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b00a:	f7ff fe55 	bl	800acb8 <__multadd>
 800b00e:	4606      	mov	r6, r0
 800b010:	10ad      	asrs	r5, r5, #2
 800b012:	d03d      	beq.n	800b090 <__pow5mult+0xa0>
 800b014:	69fc      	ldr	r4, [r7, #28]
 800b016:	b97c      	cbnz	r4, 800b038 <__pow5mult+0x48>
 800b018:	2010      	movs	r0, #16
 800b01a:	f7fe f90d 	bl	8009238 <malloc>
 800b01e:	4602      	mov	r2, r0
 800b020:	61f8      	str	r0, [r7, #28]
 800b022:	b928      	cbnz	r0, 800b030 <__pow5mult+0x40>
 800b024:	4b1d      	ldr	r3, [pc, #116]	@ (800b09c <__pow5mult+0xac>)
 800b026:	481e      	ldr	r0, [pc, #120]	@ (800b0a0 <__pow5mult+0xb0>)
 800b028:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b02c:	f000 fe54 	bl	800bcd8 <__assert_func>
 800b030:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b034:	6004      	str	r4, [r0, #0]
 800b036:	60c4      	str	r4, [r0, #12]
 800b038:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b03c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b040:	b94c      	cbnz	r4, 800b056 <__pow5mult+0x66>
 800b042:	f240 2171 	movw	r1, #625	@ 0x271
 800b046:	4638      	mov	r0, r7
 800b048:	f7ff ff12 	bl	800ae70 <__i2b>
 800b04c:	2300      	movs	r3, #0
 800b04e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b052:	4604      	mov	r4, r0
 800b054:	6003      	str	r3, [r0, #0]
 800b056:	f04f 0900 	mov.w	r9, #0
 800b05a:	07eb      	lsls	r3, r5, #31
 800b05c:	d50a      	bpl.n	800b074 <__pow5mult+0x84>
 800b05e:	4631      	mov	r1, r6
 800b060:	4622      	mov	r2, r4
 800b062:	4638      	mov	r0, r7
 800b064:	f7ff ff1a 	bl	800ae9c <__multiply>
 800b068:	4631      	mov	r1, r6
 800b06a:	4680      	mov	r8, r0
 800b06c:	4638      	mov	r0, r7
 800b06e:	f7ff fe01 	bl	800ac74 <_Bfree>
 800b072:	4646      	mov	r6, r8
 800b074:	106d      	asrs	r5, r5, #1
 800b076:	d00b      	beq.n	800b090 <__pow5mult+0xa0>
 800b078:	6820      	ldr	r0, [r4, #0]
 800b07a:	b938      	cbnz	r0, 800b08c <__pow5mult+0x9c>
 800b07c:	4622      	mov	r2, r4
 800b07e:	4621      	mov	r1, r4
 800b080:	4638      	mov	r0, r7
 800b082:	f7ff ff0b 	bl	800ae9c <__multiply>
 800b086:	6020      	str	r0, [r4, #0]
 800b088:	f8c0 9000 	str.w	r9, [r0]
 800b08c:	4604      	mov	r4, r0
 800b08e:	e7e4      	b.n	800b05a <__pow5mult+0x6a>
 800b090:	4630      	mov	r0, r6
 800b092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b096:	bf00      	nop
 800b098:	0800c764 	.word	0x0800c764
 800b09c:	0800c6f2 	.word	0x0800c6f2
 800b0a0:	0800c709 	.word	0x0800c709

0800b0a4 <__lshift>:
 800b0a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0a8:	460c      	mov	r4, r1
 800b0aa:	6849      	ldr	r1, [r1, #4]
 800b0ac:	6923      	ldr	r3, [r4, #16]
 800b0ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b0b2:	68a3      	ldr	r3, [r4, #8]
 800b0b4:	4607      	mov	r7, r0
 800b0b6:	4691      	mov	r9, r2
 800b0b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b0bc:	f108 0601 	add.w	r6, r8, #1
 800b0c0:	42b3      	cmp	r3, r6
 800b0c2:	db0b      	blt.n	800b0dc <__lshift+0x38>
 800b0c4:	4638      	mov	r0, r7
 800b0c6:	f7ff fd95 	bl	800abf4 <_Balloc>
 800b0ca:	4605      	mov	r5, r0
 800b0cc:	b948      	cbnz	r0, 800b0e2 <__lshift+0x3e>
 800b0ce:	4602      	mov	r2, r0
 800b0d0:	4b28      	ldr	r3, [pc, #160]	@ (800b174 <__lshift+0xd0>)
 800b0d2:	4829      	ldr	r0, [pc, #164]	@ (800b178 <__lshift+0xd4>)
 800b0d4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b0d8:	f000 fdfe 	bl	800bcd8 <__assert_func>
 800b0dc:	3101      	adds	r1, #1
 800b0de:	005b      	lsls	r3, r3, #1
 800b0e0:	e7ee      	b.n	800b0c0 <__lshift+0x1c>
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	f100 0114 	add.w	r1, r0, #20
 800b0e8:	f100 0210 	add.w	r2, r0, #16
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	4553      	cmp	r3, sl
 800b0f0:	db33      	blt.n	800b15a <__lshift+0xb6>
 800b0f2:	6920      	ldr	r0, [r4, #16]
 800b0f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b0f8:	f104 0314 	add.w	r3, r4, #20
 800b0fc:	f019 091f 	ands.w	r9, r9, #31
 800b100:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b104:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b108:	d02b      	beq.n	800b162 <__lshift+0xbe>
 800b10a:	f1c9 0e20 	rsb	lr, r9, #32
 800b10e:	468a      	mov	sl, r1
 800b110:	2200      	movs	r2, #0
 800b112:	6818      	ldr	r0, [r3, #0]
 800b114:	fa00 f009 	lsl.w	r0, r0, r9
 800b118:	4310      	orrs	r0, r2
 800b11a:	f84a 0b04 	str.w	r0, [sl], #4
 800b11e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b122:	459c      	cmp	ip, r3
 800b124:	fa22 f20e 	lsr.w	r2, r2, lr
 800b128:	d8f3      	bhi.n	800b112 <__lshift+0x6e>
 800b12a:	ebac 0304 	sub.w	r3, ip, r4
 800b12e:	3b15      	subs	r3, #21
 800b130:	f023 0303 	bic.w	r3, r3, #3
 800b134:	3304      	adds	r3, #4
 800b136:	f104 0015 	add.w	r0, r4, #21
 800b13a:	4584      	cmp	ip, r0
 800b13c:	bf38      	it	cc
 800b13e:	2304      	movcc	r3, #4
 800b140:	50ca      	str	r2, [r1, r3]
 800b142:	b10a      	cbz	r2, 800b148 <__lshift+0xa4>
 800b144:	f108 0602 	add.w	r6, r8, #2
 800b148:	3e01      	subs	r6, #1
 800b14a:	4638      	mov	r0, r7
 800b14c:	612e      	str	r6, [r5, #16]
 800b14e:	4621      	mov	r1, r4
 800b150:	f7ff fd90 	bl	800ac74 <_Bfree>
 800b154:	4628      	mov	r0, r5
 800b156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b15a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b15e:	3301      	adds	r3, #1
 800b160:	e7c5      	b.n	800b0ee <__lshift+0x4a>
 800b162:	3904      	subs	r1, #4
 800b164:	f853 2b04 	ldr.w	r2, [r3], #4
 800b168:	f841 2f04 	str.w	r2, [r1, #4]!
 800b16c:	459c      	cmp	ip, r3
 800b16e:	d8f9      	bhi.n	800b164 <__lshift+0xc0>
 800b170:	e7ea      	b.n	800b148 <__lshift+0xa4>
 800b172:	bf00      	nop
 800b174:	0800c681 	.word	0x0800c681
 800b178:	0800c709 	.word	0x0800c709

0800b17c <__mcmp>:
 800b17c:	690a      	ldr	r2, [r1, #16]
 800b17e:	4603      	mov	r3, r0
 800b180:	6900      	ldr	r0, [r0, #16]
 800b182:	1a80      	subs	r0, r0, r2
 800b184:	b530      	push	{r4, r5, lr}
 800b186:	d10e      	bne.n	800b1a6 <__mcmp+0x2a>
 800b188:	3314      	adds	r3, #20
 800b18a:	3114      	adds	r1, #20
 800b18c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b190:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b194:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b198:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b19c:	4295      	cmp	r5, r2
 800b19e:	d003      	beq.n	800b1a8 <__mcmp+0x2c>
 800b1a0:	d205      	bcs.n	800b1ae <__mcmp+0x32>
 800b1a2:	f04f 30ff 	mov.w	r0, #4294967295
 800b1a6:	bd30      	pop	{r4, r5, pc}
 800b1a8:	42a3      	cmp	r3, r4
 800b1aa:	d3f3      	bcc.n	800b194 <__mcmp+0x18>
 800b1ac:	e7fb      	b.n	800b1a6 <__mcmp+0x2a>
 800b1ae:	2001      	movs	r0, #1
 800b1b0:	e7f9      	b.n	800b1a6 <__mcmp+0x2a>
	...

0800b1b4 <__mdiff>:
 800b1b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1b8:	4689      	mov	r9, r1
 800b1ba:	4606      	mov	r6, r0
 800b1bc:	4611      	mov	r1, r2
 800b1be:	4648      	mov	r0, r9
 800b1c0:	4614      	mov	r4, r2
 800b1c2:	f7ff ffdb 	bl	800b17c <__mcmp>
 800b1c6:	1e05      	subs	r5, r0, #0
 800b1c8:	d112      	bne.n	800b1f0 <__mdiff+0x3c>
 800b1ca:	4629      	mov	r1, r5
 800b1cc:	4630      	mov	r0, r6
 800b1ce:	f7ff fd11 	bl	800abf4 <_Balloc>
 800b1d2:	4602      	mov	r2, r0
 800b1d4:	b928      	cbnz	r0, 800b1e2 <__mdiff+0x2e>
 800b1d6:	4b3f      	ldr	r3, [pc, #252]	@ (800b2d4 <__mdiff+0x120>)
 800b1d8:	f240 2137 	movw	r1, #567	@ 0x237
 800b1dc:	483e      	ldr	r0, [pc, #248]	@ (800b2d8 <__mdiff+0x124>)
 800b1de:	f000 fd7b 	bl	800bcd8 <__assert_func>
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b1e8:	4610      	mov	r0, r2
 800b1ea:	b003      	add	sp, #12
 800b1ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1f0:	bfbc      	itt	lt
 800b1f2:	464b      	movlt	r3, r9
 800b1f4:	46a1      	movlt	r9, r4
 800b1f6:	4630      	mov	r0, r6
 800b1f8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b1fc:	bfba      	itte	lt
 800b1fe:	461c      	movlt	r4, r3
 800b200:	2501      	movlt	r5, #1
 800b202:	2500      	movge	r5, #0
 800b204:	f7ff fcf6 	bl	800abf4 <_Balloc>
 800b208:	4602      	mov	r2, r0
 800b20a:	b918      	cbnz	r0, 800b214 <__mdiff+0x60>
 800b20c:	4b31      	ldr	r3, [pc, #196]	@ (800b2d4 <__mdiff+0x120>)
 800b20e:	f240 2145 	movw	r1, #581	@ 0x245
 800b212:	e7e3      	b.n	800b1dc <__mdiff+0x28>
 800b214:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b218:	6926      	ldr	r6, [r4, #16]
 800b21a:	60c5      	str	r5, [r0, #12]
 800b21c:	f109 0310 	add.w	r3, r9, #16
 800b220:	f109 0514 	add.w	r5, r9, #20
 800b224:	f104 0e14 	add.w	lr, r4, #20
 800b228:	f100 0b14 	add.w	fp, r0, #20
 800b22c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b230:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b234:	9301      	str	r3, [sp, #4]
 800b236:	46d9      	mov	r9, fp
 800b238:	f04f 0c00 	mov.w	ip, #0
 800b23c:	9b01      	ldr	r3, [sp, #4]
 800b23e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b242:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b246:	9301      	str	r3, [sp, #4]
 800b248:	fa1f f38a 	uxth.w	r3, sl
 800b24c:	4619      	mov	r1, r3
 800b24e:	b283      	uxth	r3, r0
 800b250:	1acb      	subs	r3, r1, r3
 800b252:	0c00      	lsrs	r0, r0, #16
 800b254:	4463      	add	r3, ip
 800b256:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b25a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b25e:	b29b      	uxth	r3, r3
 800b260:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b264:	4576      	cmp	r6, lr
 800b266:	f849 3b04 	str.w	r3, [r9], #4
 800b26a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b26e:	d8e5      	bhi.n	800b23c <__mdiff+0x88>
 800b270:	1b33      	subs	r3, r6, r4
 800b272:	3b15      	subs	r3, #21
 800b274:	f023 0303 	bic.w	r3, r3, #3
 800b278:	3415      	adds	r4, #21
 800b27a:	3304      	adds	r3, #4
 800b27c:	42a6      	cmp	r6, r4
 800b27e:	bf38      	it	cc
 800b280:	2304      	movcc	r3, #4
 800b282:	441d      	add	r5, r3
 800b284:	445b      	add	r3, fp
 800b286:	461e      	mov	r6, r3
 800b288:	462c      	mov	r4, r5
 800b28a:	4544      	cmp	r4, r8
 800b28c:	d30e      	bcc.n	800b2ac <__mdiff+0xf8>
 800b28e:	f108 0103 	add.w	r1, r8, #3
 800b292:	1b49      	subs	r1, r1, r5
 800b294:	f021 0103 	bic.w	r1, r1, #3
 800b298:	3d03      	subs	r5, #3
 800b29a:	45a8      	cmp	r8, r5
 800b29c:	bf38      	it	cc
 800b29e:	2100      	movcc	r1, #0
 800b2a0:	440b      	add	r3, r1
 800b2a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b2a6:	b191      	cbz	r1, 800b2ce <__mdiff+0x11a>
 800b2a8:	6117      	str	r7, [r2, #16]
 800b2aa:	e79d      	b.n	800b1e8 <__mdiff+0x34>
 800b2ac:	f854 1b04 	ldr.w	r1, [r4], #4
 800b2b0:	46e6      	mov	lr, ip
 800b2b2:	0c08      	lsrs	r0, r1, #16
 800b2b4:	fa1c fc81 	uxtah	ip, ip, r1
 800b2b8:	4471      	add	r1, lr
 800b2ba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b2be:	b289      	uxth	r1, r1
 800b2c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b2c4:	f846 1b04 	str.w	r1, [r6], #4
 800b2c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b2cc:	e7dd      	b.n	800b28a <__mdiff+0xd6>
 800b2ce:	3f01      	subs	r7, #1
 800b2d0:	e7e7      	b.n	800b2a2 <__mdiff+0xee>
 800b2d2:	bf00      	nop
 800b2d4:	0800c681 	.word	0x0800c681
 800b2d8:	0800c709 	.word	0x0800c709

0800b2dc <__ulp>:
 800b2dc:	b082      	sub	sp, #8
 800b2de:	ed8d 0b00 	vstr	d0, [sp]
 800b2e2:	9a01      	ldr	r2, [sp, #4]
 800b2e4:	4b0f      	ldr	r3, [pc, #60]	@ (800b324 <__ulp+0x48>)
 800b2e6:	4013      	ands	r3, r2
 800b2e8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	dc08      	bgt.n	800b302 <__ulp+0x26>
 800b2f0:	425b      	negs	r3, r3
 800b2f2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b2f6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b2fa:	da04      	bge.n	800b306 <__ulp+0x2a>
 800b2fc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b300:	4113      	asrs	r3, r2
 800b302:	2200      	movs	r2, #0
 800b304:	e008      	b.n	800b318 <__ulp+0x3c>
 800b306:	f1a2 0314 	sub.w	r3, r2, #20
 800b30a:	2b1e      	cmp	r3, #30
 800b30c:	bfda      	itte	le
 800b30e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b312:	40da      	lsrle	r2, r3
 800b314:	2201      	movgt	r2, #1
 800b316:	2300      	movs	r3, #0
 800b318:	4619      	mov	r1, r3
 800b31a:	4610      	mov	r0, r2
 800b31c:	ec41 0b10 	vmov	d0, r0, r1
 800b320:	b002      	add	sp, #8
 800b322:	4770      	bx	lr
 800b324:	7ff00000 	.word	0x7ff00000

0800b328 <__b2d>:
 800b328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b32c:	6906      	ldr	r6, [r0, #16]
 800b32e:	f100 0814 	add.w	r8, r0, #20
 800b332:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b336:	1f37      	subs	r7, r6, #4
 800b338:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b33c:	4610      	mov	r0, r2
 800b33e:	f7ff fd4b 	bl	800add8 <__hi0bits>
 800b342:	f1c0 0320 	rsb	r3, r0, #32
 800b346:	280a      	cmp	r0, #10
 800b348:	600b      	str	r3, [r1, #0]
 800b34a:	491b      	ldr	r1, [pc, #108]	@ (800b3b8 <__b2d+0x90>)
 800b34c:	dc15      	bgt.n	800b37a <__b2d+0x52>
 800b34e:	f1c0 0c0b 	rsb	ip, r0, #11
 800b352:	fa22 f30c 	lsr.w	r3, r2, ip
 800b356:	45b8      	cmp	r8, r7
 800b358:	ea43 0501 	orr.w	r5, r3, r1
 800b35c:	bf34      	ite	cc
 800b35e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b362:	2300      	movcs	r3, #0
 800b364:	3015      	adds	r0, #21
 800b366:	fa02 f000 	lsl.w	r0, r2, r0
 800b36a:	fa23 f30c 	lsr.w	r3, r3, ip
 800b36e:	4303      	orrs	r3, r0
 800b370:	461c      	mov	r4, r3
 800b372:	ec45 4b10 	vmov	d0, r4, r5
 800b376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b37a:	45b8      	cmp	r8, r7
 800b37c:	bf3a      	itte	cc
 800b37e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b382:	f1a6 0708 	subcc.w	r7, r6, #8
 800b386:	2300      	movcs	r3, #0
 800b388:	380b      	subs	r0, #11
 800b38a:	d012      	beq.n	800b3b2 <__b2d+0x8a>
 800b38c:	f1c0 0120 	rsb	r1, r0, #32
 800b390:	fa23 f401 	lsr.w	r4, r3, r1
 800b394:	4082      	lsls	r2, r0
 800b396:	4322      	orrs	r2, r4
 800b398:	4547      	cmp	r7, r8
 800b39a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b39e:	bf8c      	ite	hi
 800b3a0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b3a4:	2200      	movls	r2, #0
 800b3a6:	4083      	lsls	r3, r0
 800b3a8:	40ca      	lsrs	r2, r1
 800b3aa:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b3ae:	4313      	orrs	r3, r2
 800b3b0:	e7de      	b.n	800b370 <__b2d+0x48>
 800b3b2:	ea42 0501 	orr.w	r5, r2, r1
 800b3b6:	e7db      	b.n	800b370 <__b2d+0x48>
 800b3b8:	3ff00000 	.word	0x3ff00000

0800b3bc <__d2b>:
 800b3bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b3c0:	460f      	mov	r7, r1
 800b3c2:	2101      	movs	r1, #1
 800b3c4:	ec59 8b10 	vmov	r8, r9, d0
 800b3c8:	4616      	mov	r6, r2
 800b3ca:	f7ff fc13 	bl	800abf4 <_Balloc>
 800b3ce:	4604      	mov	r4, r0
 800b3d0:	b930      	cbnz	r0, 800b3e0 <__d2b+0x24>
 800b3d2:	4602      	mov	r2, r0
 800b3d4:	4b23      	ldr	r3, [pc, #140]	@ (800b464 <__d2b+0xa8>)
 800b3d6:	4824      	ldr	r0, [pc, #144]	@ (800b468 <__d2b+0xac>)
 800b3d8:	f240 310f 	movw	r1, #783	@ 0x30f
 800b3dc:	f000 fc7c 	bl	800bcd8 <__assert_func>
 800b3e0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b3e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b3e8:	b10d      	cbz	r5, 800b3ee <__d2b+0x32>
 800b3ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b3ee:	9301      	str	r3, [sp, #4]
 800b3f0:	f1b8 0300 	subs.w	r3, r8, #0
 800b3f4:	d023      	beq.n	800b43e <__d2b+0x82>
 800b3f6:	4668      	mov	r0, sp
 800b3f8:	9300      	str	r3, [sp, #0]
 800b3fa:	f7ff fd0c 	bl	800ae16 <__lo0bits>
 800b3fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b402:	b1d0      	cbz	r0, 800b43a <__d2b+0x7e>
 800b404:	f1c0 0320 	rsb	r3, r0, #32
 800b408:	fa02 f303 	lsl.w	r3, r2, r3
 800b40c:	430b      	orrs	r3, r1
 800b40e:	40c2      	lsrs	r2, r0
 800b410:	6163      	str	r3, [r4, #20]
 800b412:	9201      	str	r2, [sp, #4]
 800b414:	9b01      	ldr	r3, [sp, #4]
 800b416:	61a3      	str	r3, [r4, #24]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	bf0c      	ite	eq
 800b41c:	2201      	moveq	r2, #1
 800b41e:	2202      	movne	r2, #2
 800b420:	6122      	str	r2, [r4, #16]
 800b422:	b1a5      	cbz	r5, 800b44e <__d2b+0x92>
 800b424:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b428:	4405      	add	r5, r0
 800b42a:	603d      	str	r5, [r7, #0]
 800b42c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b430:	6030      	str	r0, [r6, #0]
 800b432:	4620      	mov	r0, r4
 800b434:	b003      	add	sp, #12
 800b436:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b43a:	6161      	str	r1, [r4, #20]
 800b43c:	e7ea      	b.n	800b414 <__d2b+0x58>
 800b43e:	a801      	add	r0, sp, #4
 800b440:	f7ff fce9 	bl	800ae16 <__lo0bits>
 800b444:	9b01      	ldr	r3, [sp, #4]
 800b446:	6163      	str	r3, [r4, #20]
 800b448:	3020      	adds	r0, #32
 800b44a:	2201      	movs	r2, #1
 800b44c:	e7e8      	b.n	800b420 <__d2b+0x64>
 800b44e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b452:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b456:	6038      	str	r0, [r7, #0]
 800b458:	6918      	ldr	r0, [r3, #16]
 800b45a:	f7ff fcbd 	bl	800add8 <__hi0bits>
 800b45e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b462:	e7e5      	b.n	800b430 <__d2b+0x74>
 800b464:	0800c681 	.word	0x0800c681
 800b468:	0800c709 	.word	0x0800c709

0800b46c <__ratio>:
 800b46c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b470:	b085      	sub	sp, #20
 800b472:	e9cd 1000 	strd	r1, r0, [sp]
 800b476:	a902      	add	r1, sp, #8
 800b478:	f7ff ff56 	bl	800b328 <__b2d>
 800b47c:	9800      	ldr	r0, [sp, #0]
 800b47e:	a903      	add	r1, sp, #12
 800b480:	ec55 4b10 	vmov	r4, r5, d0
 800b484:	f7ff ff50 	bl	800b328 <__b2d>
 800b488:	9b01      	ldr	r3, [sp, #4]
 800b48a:	6919      	ldr	r1, [r3, #16]
 800b48c:	9b00      	ldr	r3, [sp, #0]
 800b48e:	691b      	ldr	r3, [r3, #16]
 800b490:	1ac9      	subs	r1, r1, r3
 800b492:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b496:	1a9b      	subs	r3, r3, r2
 800b498:	ec5b ab10 	vmov	sl, fp, d0
 800b49c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	bfce      	itee	gt
 800b4a4:	462a      	movgt	r2, r5
 800b4a6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b4aa:	465a      	movle	r2, fp
 800b4ac:	462f      	mov	r7, r5
 800b4ae:	46d9      	mov	r9, fp
 800b4b0:	bfcc      	ite	gt
 800b4b2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b4b6:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b4ba:	464b      	mov	r3, r9
 800b4bc:	4652      	mov	r2, sl
 800b4be:	4620      	mov	r0, r4
 800b4c0:	4639      	mov	r1, r7
 800b4c2:	f7f5 f9f3 	bl	80008ac <__aeabi_ddiv>
 800b4c6:	ec41 0b10 	vmov	d0, r0, r1
 800b4ca:	b005      	add	sp, #20
 800b4cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b4d0 <__copybits>:
 800b4d0:	3901      	subs	r1, #1
 800b4d2:	b570      	push	{r4, r5, r6, lr}
 800b4d4:	1149      	asrs	r1, r1, #5
 800b4d6:	6914      	ldr	r4, [r2, #16]
 800b4d8:	3101      	adds	r1, #1
 800b4da:	f102 0314 	add.w	r3, r2, #20
 800b4de:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b4e2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b4e6:	1f05      	subs	r5, r0, #4
 800b4e8:	42a3      	cmp	r3, r4
 800b4ea:	d30c      	bcc.n	800b506 <__copybits+0x36>
 800b4ec:	1aa3      	subs	r3, r4, r2
 800b4ee:	3b11      	subs	r3, #17
 800b4f0:	f023 0303 	bic.w	r3, r3, #3
 800b4f4:	3211      	adds	r2, #17
 800b4f6:	42a2      	cmp	r2, r4
 800b4f8:	bf88      	it	hi
 800b4fa:	2300      	movhi	r3, #0
 800b4fc:	4418      	add	r0, r3
 800b4fe:	2300      	movs	r3, #0
 800b500:	4288      	cmp	r0, r1
 800b502:	d305      	bcc.n	800b510 <__copybits+0x40>
 800b504:	bd70      	pop	{r4, r5, r6, pc}
 800b506:	f853 6b04 	ldr.w	r6, [r3], #4
 800b50a:	f845 6f04 	str.w	r6, [r5, #4]!
 800b50e:	e7eb      	b.n	800b4e8 <__copybits+0x18>
 800b510:	f840 3b04 	str.w	r3, [r0], #4
 800b514:	e7f4      	b.n	800b500 <__copybits+0x30>

0800b516 <__any_on>:
 800b516:	f100 0214 	add.w	r2, r0, #20
 800b51a:	6900      	ldr	r0, [r0, #16]
 800b51c:	114b      	asrs	r3, r1, #5
 800b51e:	4298      	cmp	r0, r3
 800b520:	b510      	push	{r4, lr}
 800b522:	db11      	blt.n	800b548 <__any_on+0x32>
 800b524:	dd0a      	ble.n	800b53c <__any_on+0x26>
 800b526:	f011 011f 	ands.w	r1, r1, #31
 800b52a:	d007      	beq.n	800b53c <__any_on+0x26>
 800b52c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b530:	fa24 f001 	lsr.w	r0, r4, r1
 800b534:	fa00 f101 	lsl.w	r1, r0, r1
 800b538:	428c      	cmp	r4, r1
 800b53a:	d10b      	bne.n	800b554 <__any_on+0x3e>
 800b53c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b540:	4293      	cmp	r3, r2
 800b542:	d803      	bhi.n	800b54c <__any_on+0x36>
 800b544:	2000      	movs	r0, #0
 800b546:	bd10      	pop	{r4, pc}
 800b548:	4603      	mov	r3, r0
 800b54a:	e7f7      	b.n	800b53c <__any_on+0x26>
 800b54c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b550:	2900      	cmp	r1, #0
 800b552:	d0f5      	beq.n	800b540 <__any_on+0x2a>
 800b554:	2001      	movs	r0, #1
 800b556:	e7f6      	b.n	800b546 <__any_on+0x30>

0800b558 <_malloc_usable_size_r>:
 800b558:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b55c:	1f18      	subs	r0, r3, #4
 800b55e:	2b00      	cmp	r3, #0
 800b560:	bfbc      	itt	lt
 800b562:	580b      	ldrlt	r3, [r1, r0]
 800b564:	18c0      	addlt	r0, r0, r3
 800b566:	4770      	bx	lr

0800b568 <__ascii_wctomb>:
 800b568:	4603      	mov	r3, r0
 800b56a:	4608      	mov	r0, r1
 800b56c:	b141      	cbz	r1, 800b580 <__ascii_wctomb+0x18>
 800b56e:	2aff      	cmp	r2, #255	@ 0xff
 800b570:	d904      	bls.n	800b57c <__ascii_wctomb+0x14>
 800b572:	228a      	movs	r2, #138	@ 0x8a
 800b574:	601a      	str	r2, [r3, #0]
 800b576:	f04f 30ff 	mov.w	r0, #4294967295
 800b57a:	4770      	bx	lr
 800b57c:	700a      	strb	r2, [r1, #0]
 800b57e:	2001      	movs	r0, #1
 800b580:	4770      	bx	lr

0800b582 <__ssputs_r>:
 800b582:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b586:	688e      	ldr	r6, [r1, #8]
 800b588:	461f      	mov	r7, r3
 800b58a:	42be      	cmp	r6, r7
 800b58c:	680b      	ldr	r3, [r1, #0]
 800b58e:	4682      	mov	sl, r0
 800b590:	460c      	mov	r4, r1
 800b592:	4690      	mov	r8, r2
 800b594:	d82d      	bhi.n	800b5f2 <__ssputs_r+0x70>
 800b596:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b59a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b59e:	d026      	beq.n	800b5ee <__ssputs_r+0x6c>
 800b5a0:	6965      	ldr	r5, [r4, #20]
 800b5a2:	6909      	ldr	r1, [r1, #16]
 800b5a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b5a8:	eba3 0901 	sub.w	r9, r3, r1
 800b5ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b5b0:	1c7b      	adds	r3, r7, #1
 800b5b2:	444b      	add	r3, r9
 800b5b4:	106d      	asrs	r5, r5, #1
 800b5b6:	429d      	cmp	r5, r3
 800b5b8:	bf38      	it	cc
 800b5ba:	461d      	movcc	r5, r3
 800b5bc:	0553      	lsls	r3, r2, #21
 800b5be:	d527      	bpl.n	800b610 <__ssputs_r+0x8e>
 800b5c0:	4629      	mov	r1, r5
 800b5c2:	f7fd fe6b 	bl	800929c <_malloc_r>
 800b5c6:	4606      	mov	r6, r0
 800b5c8:	b360      	cbz	r0, 800b624 <__ssputs_r+0xa2>
 800b5ca:	6921      	ldr	r1, [r4, #16]
 800b5cc:	464a      	mov	r2, r9
 800b5ce:	f7fe ff64 	bl	800a49a <memcpy>
 800b5d2:	89a3      	ldrh	r3, [r4, #12]
 800b5d4:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b5d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b5dc:	81a3      	strh	r3, [r4, #12]
 800b5de:	6126      	str	r6, [r4, #16]
 800b5e0:	6165      	str	r5, [r4, #20]
 800b5e2:	444e      	add	r6, r9
 800b5e4:	eba5 0509 	sub.w	r5, r5, r9
 800b5e8:	6026      	str	r6, [r4, #0]
 800b5ea:	60a5      	str	r5, [r4, #8]
 800b5ec:	463e      	mov	r6, r7
 800b5ee:	42be      	cmp	r6, r7
 800b5f0:	d900      	bls.n	800b5f4 <__ssputs_r+0x72>
 800b5f2:	463e      	mov	r6, r7
 800b5f4:	6820      	ldr	r0, [r4, #0]
 800b5f6:	4632      	mov	r2, r6
 800b5f8:	4641      	mov	r1, r8
 800b5fa:	f000 fb53 	bl	800bca4 <memmove>
 800b5fe:	68a3      	ldr	r3, [r4, #8]
 800b600:	1b9b      	subs	r3, r3, r6
 800b602:	60a3      	str	r3, [r4, #8]
 800b604:	6823      	ldr	r3, [r4, #0]
 800b606:	4433      	add	r3, r6
 800b608:	6023      	str	r3, [r4, #0]
 800b60a:	2000      	movs	r0, #0
 800b60c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b610:	462a      	mov	r2, r5
 800b612:	f7fd fed7 	bl	80093c4 <_realloc_r>
 800b616:	4606      	mov	r6, r0
 800b618:	2800      	cmp	r0, #0
 800b61a:	d1e0      	bne.n	800b5de <__ssputs_r+0x5c>
 800b61c:	6921      	ldr	r1, [r4, #16]
 800b61e:	4650      	mov	r0, sl
 800b620:	f7fe ff52 	bl	800a4c8 <_free_r>
 800b624:	230c      	movs	r3, #12
 800b626:	f8ca 3000 	str.w	r3, [sl]
 800b62a:	89a3      	ldrh	r3, [r4, #12]
 800b62c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b630:	81a3      	strh	r3, [r4, #12]
 800b632:	f04f 30ff 	mov.w	r0, #4294967295
 800b636:	e7e9      	b.n	800b60c <__ssputs_r+0x8a>

0800b638 <_svfiprintf_r>:
 800b638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b63c:	4698      	mov	r8, r3
 800b63e:	898b      	ldrh	r3, [r1, #12]
 800b640:	061b      	lsls	r3, r3, #24
 800b642:	b09d      	sub	sp, #116	@ 0x74
 800b644:	4607      	mov	r7, r0
 800b646:	460d      	mov	r5, r1
 800b648:	4614      	mov	r4, r2
 800b64a:	d510      	bpl.n	800b66e <_svfiprintf_r+0x36>
 800b64c:	690b      	ldr	r3, [r1, #16]
 800b64e:	b973      	cbnz	r3, 800b66e <_svfiprintf_r+0x36>
 800b650:	2140      	movs	r1, #64	@ 0x40
 800b652:	f7fd fe23 	bl	800929c <_malloc_r>
 800b656:	6028      	str	r0, [r5, #0]
 800b658:	6128      	str	r0, [r5, #16]
 800b65a:	b930      	cbnz	r0, 800b66a <_svfiprintf_r+0x32>
 800b65c:	230c      	movs	r3, #12
 800b65e:	603b      	str	r3, [r7, #0]
 800b660:	f04f 30ff 	mov.w	r0, #4294967295
 800b664:	b01d      	add	sp, #116	@ 0x74
 800b666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b66a:	2340      	movs	r3, #64	@ 0x40
 800b66c:	616b      	str	r3, [r5, #20]
 800b66e:	2300      	movs	r3, #0
 800b670:	9309      	str	r3, [sp, #36]	@ 0x24
 800b672:	2320      	movs	r3, #32
 800b674:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b678:	f8cd 800c 	str.w	r8, [sp, #12]
 800b67c:	2330      	movs	r3, #48	@ 0x30
 800b67e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b81c <_svfiprintf_r+0x1e4>
 800b682:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b686:	f04f 0901 	mov.w	r9, #1
 800b68a:	4623      	mov	r3, r4
 800b68c:	469a      	mov	sl, r3
 800b68e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b692:	b10a      	cbz	r2, 800b698 <_svfiprintf_r+0x60>
 800b694:	2a25      	cmp	r2, #37	@ 0x25
 800b696:	d1f9      	bne.n	800b68c <_svfiprintf_r+0x54>
 800b698:	ebba 0b04 	subs.w	fp, sl, r4
 800b69c:	d00b      	beq.n	800b6b6 <_svfiprintf_r+0x7e>
 800b69e:	465b      	mov	r3, fp
 800b6a0:	4622      	mov	r2, r4
 800b6a2:	4629      	mov	r1, r5
 800b6a4:	4638      	mov	r0, r7
 800b6a6:	f7ff ff6c 	bl	800b582 <__ssputs_r>
 800b6aa:	3001      	adds	r0, #1
 800b6ac:	f000 80a7 	beq.w	800b7fe <_svfiprintf_r+0x1c6>
 800b6b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b6b2:	445a      	add	r2, fp
 800b6b4:	9209      	str	r2, [sp, #36]	@ 0x24
 800b6b6:	f89a 3000 	ldrb.w	r3, [sl]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	f000 809f 	beq.w	800b7fe <_svfiprintf_r+0x1c6>
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	f04f 32ff 	mov.w	r2, #4294967295
 800b6c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6ca:	f10a 0a01 	add.w	sl, sl, #1
 800b6ce:	9304      	str	r3, [sp, #16]
 800b6d0:	9307      	str	r3, [sp, #28]
 800b6d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b6d6:	931a      	str	r3, [sp, #104]	@ 0x68
 800b6d8:	4654      	mov	r4, sl
 800b6da:	2205      	movs	r2, #5
 800b6dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6e0:	484e      	ldr	r0, [pc, #312]	@ (800b81c <_svfiprintf_r+0x1e4>)
 800b6e2:	f7f4 fdad 	bl	8000240 <memchr>
 800b6e6:	9a04      	ldr	r2, [sp, #16]
 800b6e8:	b9d8      	cbnz	r0, 800b722 <_svfiprintf_r+0xea>
 800b6ea:	06d0      	lsls	r0, r2, #27
 800b6ec:	bf44      	itt	mi
 800b6ee:	2320      	movmi	r3, #32
 800b6f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b6f4:	0711      	lsls	r1, r2, #28
 800b6f6:	bf44      	itt	mi
 800b6f8:	232b      	movmi	r3, #43	@ 0x2b
 800b6fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b6fe:	f89a 3000 	ldrb.w	r3, [sl]
 800b702:	2b2a      	cmp	r3, #42	@ 0x2a
 800b704:	d015      	beq.n	800b732 <_svfiprintf_r+0xfa>
 800b706:	9a07      	ldr	r2, [sp, #28]
 800b708:	4654      	mov	r4, sl
 800b70a:	2000      	movs	r0, #0
 800b70c:	f04f 0c0a 	mov.w	ip, #10
 800b710:	4621      	mov	r1, r4
 800b712:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b716:	3b30      	subs	r3, #48	@ 0x30
 800b718:	2b09      	cmp	r3, #9
 800b71a:	d94b      	bls.n	800b7b4 <_svfiprintf_r+0x17c>
 800b71c:	b1b0      	cbz	r0, 800b74c <_svfiprintf_r+0x114>
 800b71e:	9207      	str	r2, [sp, #28]
 800b720:	e014      	b.n	800b74c <_svfiprintf_r+0x114>
 800b722:	eba0 0308 	sub.w	r3, r0, r8
 800b726:	fa09 f303 	lsl.w	r3, r9, r3
 800b72a:	4313      	orrs	r3, r2
 800b72c:	9304      	str	r3, [sp, #16]
 800b72e:	46a2      	mov	sl, r4
 800b730:	e7d2      	b.n	800b6d8 <_svfiprintf_r+0xa0>
 800b732:	9b03      	ldr	r3, [sp, #12]
 800b734:	1d19      	adds	r1, r3, #4
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	9103      	str	r1, [sp, #12]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	bfbb      	ittet	lt
 800b73e:	425b      	neglt	r3, r3
 800b740:	f042 0202 	orrlt.w	r2, r2, #2
 800b744:	9307      	strge	r3, [sp, #28]
 800b746:	9307      	strlt	r3, [sp, #28]
 800b748:	bfb8      	it	lt
 800b74a:	9204      	strlt	r2, [sp, #16]
 800b74c:	7823      	ldrb	r3, [r4, #0]
 800b74e:	2b2e      	cmp	r3, #46	@ 0x2e
 800b750:	d10a      	bne.n	800b768 <_svfiprintf_r+0x130>
 800b752:	7863      	ldrb	r3, [r4, #1]
 800b754:	2b2a      	cmp	r3, #42	@ 0x2a
 800b756:	d132      	bne.n	800b7be <_svfiprintf_r+0x186>
 800b758:	9b03      	ldr	r3, [sp, #12]
 800b75a:	1d1a      	adds	r2, r3, #4
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	9203      	str	r2, [sp, #12]
 800b760:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b764:	3402      	adds	r4, #2
 800b766:	9305      	str	r3, [sp, #20]
 800b768:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b82c <_svfiprintf_r+0x1f4>
 800b76c:	7821      	ldrb	r1, [r4, #0]
 800b76e:	2203      	movs	r2, #3
 800b770:	4650      	mov	r0, sl
 800b772:	f7f4 fd65 	bl	8000240 <memchr>
 800b776:	b138      	cbz	r0, 800b788 <_svfiprintf_r+0x150>
 800b778:	9b04      	ldr	r3, [sp, #16]
 800b77a:	eba0 000a 	sub.w	r0, r0, sl
 800b77e:	2240      	movs	r2, #64	@ 0x40
 800b780:	4082      	lsls	r2, r0
 800b782:	4313      	orrs	r3, r2
 800b784:	3401      	adds	r4, #1
 800b786:	9304      	str	r3, [sp, #16]
 800b788:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b78c:	4824      	ldr	r0, [pc, #144]	@ (800b820 <_svfiprintf_r+0x1e8>)
 800b78e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b792:	2206      	movs	r2, #6
 800b794:	f7f4 fd54 	bl	8000240 <memchr>
 800b798:	2800      	cmp	r0, #0
 800b79a:	d036      	beq.n	800b80a <_svfiprintf_r+0x1d2>
 800b79c:	4b21      	ldr	r3, [pc, #132]	@ (800b824 <_svfiprintf_r+0x1ec>)
 800b79e:	bb1b      	cbnz	r3, 800b7e8 <_svfiprintf_r+0x1b0>
 800b7a0:	9b03      	ldr	r3, [sp, #12]
 800b7a2:	3307      	adds	r3, #7
 800b7a4:	f023 0307 	bic.w	r3, r3, #7
 800b7a8:	3308      	adds	r3, #8
 800b7aa:	9303      	str	r3, [sp, #12]
 800b7ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7ae:	4433      	add	r3, r6
 800b7b0:	9309      	str	r3, [sp, #36]	@ 0x24
 800b7b2:	e76a      	b.n	800b68a <_svfiprintf_r+0x52>
 800b7b4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b7b8:	460c      	mov	r4, r1
 800b7ba:	2001      	movs	r0, #1
 800b7bc:	e7a8      	b.n	800b710 <_svfiprintf_r+0xd8>
 800b7be:	2300      	movs	r3, #0
 800b7c0:	3401      	adds	r4, #1
 800b7c2:	9305      	str	r3, [sp, #20]
 800b7c4:	4619      	mov	r1, r3
 800b7c6:	f04f 0c0a 	mov.w	ip, #10
 800b7ca:	4620      	mov	r0, r4
 800b7cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7d0:	3a30      	subs	r2, #48	@ 0x30
 800b7d2:	2a09      	cmp	r2, #9
 800b7d4:	d903      	bls.n	800b7de <_svfiprintf_r+0x1a6>
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d0c6      	beq.n	800b768 <_svfiprintf_r+0x130>
 800b7da:	9105      	str	r1, [sp, #20]
 800b7dc:	e7c4      	b.n	800b768 <_svfiprintf_r+0x130>
 800b7de:	fb0c 2101 	mla	r1, ip, r1, r2
 800b7e2:	4604      	mov	r4, r0
 800b7e4:	2301      	movs	r3, #1
 800b7e6:	e7f0      	b.n	800b7ca <_svfiprintf_r+0x192>
 800b7e8:	ab03      	add	r3, sp, #12
 800b7ea:	9300      	str	r3, [sp, #0]
 800b7ec:	462a      	mov	r2, r5
 800b7ee:	4b0e      	ldr	r3, [pc, #56]	@ (800b828 <_svfiprintf_r+0x1f0>)
 800b7f0:	a904      	add	r1, sp, #16
 800b7f2:	4638      	mov	r0, r7
 800b7f4:	f3af 8000 	nop.w
 800b7f8:	1c42      	adds	r2, r0, #1
 800b7fa:	4606      	mov	r6, r0
 800b7fc:	d1d6      	bne.n	800b7ac <_svfiprintf_r+0x174>
 800b7fe:	89ab      	ldrh	r3, [r5, #12]
 800b800:	065b      	lsls	r3, r3, #25
 800b802:	f53f af2d 	bmi.w	800b660 <_svfiprintf_r+0x28>
 800b806:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b808:	e72c      	b.n	800b664 <_svfiprintf_r+0x2c>
 800b80a:	ab03      	add	r3, sp, #12
 800b80c:	9300      	str	r3, [sp, #0]
 800b80e:	462a      	mov	r2, r5
 800b810:	4b05      	ldr	r3, [pc, #20]	@ (800b828 <_svfiprintf_r+0x1f0>)
 800b812:	a904      	add	r1, sp, #16
 800b814:	4638      	mov	r0, r7
 800b816:	f000 f879 	bl	800b90c <_printf_i>
 800b81a:	e7ed      	b.n	800b7f8 <_svfiprintf_r+0x1c0>
 800b81c:	0800c860 	.word	0x0800c860
 800b820:	0800c86a 	.word	0x0800c86a
 800b824:	00000000 	.word	0x00000000
 800b828:	0800b583 	.word	0x0800b583
 800b82c:	0800c866 	.word	0x0800c866

0800b830 <_printf_common>:
 800b830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b834:	4616      	mov	r6, r2
 800b836:	4698      	mov	r8, r3
 800b838:	688a      	ldr	r2, [r1, #8]
 800b83a:	690b      	ldr	r3, [r1, #16]
 800b83c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b840:	4293      	cmp	r3, r2
 800b842:	bfb8      	it	lt
 800b844:	4613      	movlt	r3, r2
 800b846:	6033      	str	r3, [r6, #0]
 800b848:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b84c:	4607      	mov	r7, r0
 800b84e:	460c      	mov	r4, r1
 800b850:	b10a      	cbz	r2, 800b856 <_printf_common+0x26>
 800b852:	3301      	adds	r3, #1
 800b854:	6033      	str	r3, [r6, #0]
 800b856:	6823      	ldr	r3, [r4, #0]
 800b858:	0699      	lsls	r1, r3, #26
 800b85a:	bf42      	ittt	mi
 800b85c:	6833      	ldrmi	r3, [r6, #0]
 800b85e:	3302      	addmi	r3, #2
 800b860:	6033      	strmi	r3, [r6, #0]
 800b862:	6825      	ldr	r5, [r4, #0]
 800b864:	f015 0506 	ands.w	r5, r5, #6
 800b868:	d106      	bne.n	800b878 <_printf_common+0x48>
 800b86a:	f104 0a19 	add.w	sl, r4, #25
 800b86e:	68e3      	ldr	r3, [r4, #12]
 800b870:	6832      	ldr	r2, [r6, #0]
 800b872:	1a9b      	subs	r3, r3, r2
 800b874:	42ab      	cmp	r3, r5
 800b876:	dc26      	bgt.n	800b8c6 <_printf_common+0x96>
 800b878:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b87c:	6822      	ldr	r2, [r4, #0]
 800b87e:	3b00      	subs	r3, #0
 800b880:	bf18      	it	ne
 800b882:	2301      	movne	r3, #1
 800b884:	0692      	lsls	r2, r2, #26
 800b886:	d42b      	bmi.n	800b8e0 <_printf_common+0xb0>
 800b888:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b88c:	4641      	mov	r1, r8
 800b88e:	4638      	mov	r0, r7
 800b890:	47c8      	blx	r9
 800b892:	3001      	adds	r0, #1
 800b894:	d01e      	beq.n	800b8d4 <_printf_common+0xa4>
 800b896:	6823      	ldr	r3, [r4, #0]
 800b898:	6922      	ldr	r2, [r4, #16]
 800b89a:	f003 0306 	and.w	r3, r3, #6
 800b89e:	2b04      	cmp	r3, #4
 800b8a0:	bf02      	ittt	eq
 800b8a2:	68e5      	ldreq	r5, [r4, #12]
 800b8a4:	6833      	ldreq	r3, [r6, #0]
 800b8a6:	1aed      	subeq	r5, r5, r3
 800b8a8:	68a3      	ldr	r3, [r4, #8]
 800b8aa:	bf0c      	ite	eq
 800b8ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b8b0:	2500      	movne	r5, #0
 800b8b2:	4293      	cmp	r3, r2
 800b8b4:	bfc4      	itt	gt
 800b8b6:	1a9b      	subgt	r3, r3, r2
 800b8b8:	18ed      	addgt	r5, r5, r3
 800b8ba:	2600      	movs	r6, #0
 800b8bc:	341a      	adds	r4, #26
 800b8be:	42b5      	cmp	r5, r6
 800b8c0:	d11a      	bne.n	800b8f8 <_printf_common+0xc8>
 800b8c2:	2000      	movs	r0, #0
 800b8c4:	e008      	b.n	800b8d8 <_printf_common+0xa8>
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	4652      	mov	r2, sl
 800b8ca:	4641      	mov	r1, r8
 800b8cc:	4638      	mov	r0, r7
 800b8ce:	47c8      	blx	r9
 800b8d0:	3001      	adds	r0, #1
 800b8d2:	d103      	bne.n	800b8dc <_printf_common+0xac>
 800b8d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b8d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8dc:	3501      	adds	r5, #1
 800b8de:	e7c6      	b.n	800b86e <_printf_common+0x3e>
 800b8e0:	18e1      	adds	r1, r4, r3
 800b8e2:	1c5a      	adds	r2, r3, #1
 800b8e4:	2030      	movs	r0, #48	@ 0x30
 800b8e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b8ea:	4422      	add	r2, r4
 800b8ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b8f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b8f4:	3302      	adds	r3, #2
 800b8f6:	e7c7      	b.n	800b888 <_printf_common+0x58>
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	4622      	mov	r2, r4
 800b8fc:	4641      	mov	r1, r8
 800b8fe:	4638      	mov	r0, r7
 800b900:	47c8      	blx	r9
 800b902:	3001      	adds	r0, #1
 800b904:	d0e6      	beq.n	800b8d4 <_printf_common+0xa4>
 800b906:	3601      	adds	r6, #1
 800b908:	e7d9      	b.n	800b8be <_printf_common+0x8e>
	...

0800b90c <_printf_i>:
 800b90c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b910:	7e0f      	ldrb	r7, [r1, #24]
 800b912:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b914:	2f78      	cmp	r7, #120	@ 0x78
 800b916:	4691      	mov	r9, r2
 800b918:	4680      	mov	r8, r0
 800b91a:	460c      	mov	r4, r1
 800b91c:	469a      	mov	sl, r3
 800b91e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b922:	d807      	bhi.n	800b934 <_printf_i+0x28>
 800b924:	2f62      	cmp	r7, #98	@ 0x62
 800b926:	d80a      	bhi.n	800b93e <_printf_i+0x32>
 800b928:	2f00      	cmp	r7, #0
 800b92a:	f000 80d2 	beq.w	800bad2 <_printf_i+0x1c6>
 800b92e:	2f58      	cmp	r7, #88	@ 0x58
 800b930:	f000 80b9 	beq.w	800baa6 <_printf_i+0x19a>
 800b934:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b938:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b93c:	e03a      	b.n	800b9b4 <_printf_i+0xa8>
 800b93e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b942:	2b15      	cmp	r3, #21
 800b944:	d8f6      	bhi.n	800b934 <_printf_i+0x28>
 800b946:	a101      	add	r1, pc, #4	@ (adr r1, 800b94c <_printf_i+0x40>)
 800b948:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b94c:	0800b9a5 	.word	0x0800b9a5
 800b950:	0800b9b9 	.word	0x0800b9b9
 800b954:	0800b935 	.word	0x0800b935
 800b958:	0800b935 	.word	0x0800b935
 800b95c:	0800b935 	.word	0x0800b935
 800b960:	0800b935 	.word	0x0800b935
 800b964:	0800b9b9 	.word	0x0800b9b9
 800b968:	0800b935 	.word	0x0800b935
 800b96c:	0800b935 	.word	0x0800b935
 800b970:	0800b935 	.word	0x0800b935
 800b974:	0800b935 	.word	0x0800b935
 800b978:	0800bab9 	.word	0x0800bab9
 800b97c:	0800b9e3 	.word	0x0800b9e3
 800b980:	0800ba73 	.word	0x0800ba73
 800b984:	0800b935 	.word	0x0800b935
 800b988:	0800b935 	.word	0x0800b935
 800b98c:	0800badb 	.word	0x0800badb
 800b990:	0800b935 	.word	0x0800b935
 800b994:	0800b9e3 	.word	0x0800b9e3
 800b998:	0800b935 	.word	0x0800b935
 800b99c:	0800b935 	.word	0x0800b935
 800b9a0:	0800ba7b 	.word	0x0800ba7b
 800b9a4:	6833      	ldr	r3, [r6, #0]
 800b9a6:	1d1a      	adds	r2, r3, #4
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	6032      	str	r2, [r6, #0]
 800b9ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b9b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	e09d      	b.n	800baf4 <_printf_i+0x1e8>
 800b9b8:	6833      	ldr	r3, [r6, #0]
 800b9ba:	6820      	ldr	r0, [r4, #0]
 800b9bc:	1d19      	adds	r1, r3, #4
 800b9be:	6031      	str	r1, [r6, #0]
 800b9c0:	0606      	lsls	r6, r0, #24
 800b9c2:	d501      	bpl.n	800b9c8 <_printf_i+0xbc>
 800b9c4:	681d      	ldr	r5, [r3, #0]
 800b9c6:	e003      	b.n	800b9d0 <_printf_i+0xc4>
 800b9c8:	0645      	lsls	r5, r0, #25
 800b9ca:	d5fb      	bpl.n	800b9c4 <_printf_i+0xb8>
 800b9cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b9d0:	2d00      	cmp	r5, #0
 800b9d2:	da03      	bge.n	800b9dc <_printf_i+0xd0>
 800b9d4:	232d      	movs	r3, #45	@ 0x2d
 800b9d6:	426d      	negs	r5, r5
 800b9d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b9dc:	4859      	ldr	r0, [pc, #356]	@ (800bb44 <_printf_i+0x238>)
 800b9de:	230a      	movs	r3, #10
 800b9e0:	e011      	b.n	800ba06 <_printf_i+0xfa>
 800b9e2:	6821      	ldr	r1, [r4, #0]
 800b9e4:	6833      	ldr	r3, [r6, #0]
 800b9e6:	0608      	lsls	r0, r1, #24
 800b9e8:	f853 5b04 	ldr.w	r5, [r3], #4
 800b9ec:	d402      	bmi.n	800b9f4 <_printf_i+0xe8>
 800b9ee:	0649      	lsls	r1, r1, #25
 800b9f0:	bf48      	it	mi
 800b9f2:	b2ad      	uxthmi	r5, r5
 800b9f4:	2f6f      	cmp	r7, #111	@ 0x6f
 800b9f6:	4853      	ldr	r0, [pc, #332]	@ (800bb44 <_printf_i+0x238>)
 800b9f8:	6033      	str	r3, [r6, #0]
 800b9fa:	bf14      	ite	ne
 800b9fc:	230a      	movne	r3, #10
 800b9fe:	2308      	moveq	r3, #8
 800ba00:	2100      	movs	r1, #0
 800ba02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ba06:	6866      	ldr	r6, [r4, #4]
 800ba08:	60a6      	str	r6, [r4, #8]
 800ba0a:	2e00      	cmp	r6, #0
 800ba0c:	bfa2      	ittt	ge
 800ba0e:	6821      	ldrge	r1, [r4, #0]
 800ba10:	f021 0104 	bicge.w	r1, r1, #4
 800ba14:	6021      	strge	r1, [r4, #0]
 800ba16:	b90d      	cbnz	r5, 800ba1c <_printf_i+0x110>
 800ba18:	2e00      	cmp	r6, #0
 800ba1a:	d04b      	beq.n	800bab4 <_printf_i+0x1a8>
 800ba1c:	4616      	mov	r6, r2
 800ba1e:	fbb5 f1f3 	udiv	r1, r5, r3
 800ba22:	fb03 5711 	mls	r7, r3, r1, r5
 800ba26:	5dc7      	ldrb	r7, [r0, r7]
 800ba28:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ba2c:	462f      	mov	r7, r5
 800ba2e:	42bb      	cmp	r3, r7
 800ba30:	460d      	mov	r5, r1
 800ba32:	d9f4      	bls.n	800ba1e <_printf_i+0x112>
 800ba34:	2b08      	cmp	r3, #8
 800ba36:	d10b      	bne.n	800ba50 <_printf_i+0x144>
 800ba38:	6823      	ldr	r3, [r4, #0]
 800ba3a:	07df      	lsls	r7, r3, #31
 800ba3c:	d508      	bpl.n	800ba50 <_printf_i+0x144>
 800ba3e:	6923      	ldr	r3, [r4, #16]
 800ba40:	6861      	ldr	r1, [r4, #4]
 800ba42:	4299      	cmp	r1, r3
 800ba44:	bfde      	ittt	le
 800ba46:	2330      	movle	r3, #48	@ 0x30
 800ba48:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ba4c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ba50:	1b92      	subs	r2, r2, r6
 800ba52:	6122      	str	r2, [r4, #16]
 800ba54:	f8cd a000 	str.w	sl, [sp]
 800ba58:	464b      	mov	r3, r9
 800ba5a:	aa03      	add	r2, sp, #12
 800ba5c:	4621      	mov	r1, r4
 800ba5e:	4640      	mov	r0, r8
 800ba60:	f7ff fee6 	bl	800b830 <_printf_common>
 800ba64:	3001      	adds	r0, #1
 800ba66:	d14a      	bne.n	800bafe <_printf_i+0x1f2>
 800ba68:	f04f 30ff 	mov.w	r0, #4294967295
 800ba6c:	b004      	add	sp, #16
 800ba6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba72:	6823      	ldr	r3, [r4, #0]
 800ba74:	f043 0320 	orr.w	r3, r3, #32
 800ba78:	6023      	str	r3, [r4, #0]
 800ba7a:	4833      	ldr	r0, [pc, #204]	@ (800bb48 <_printf_i+0x23c>)
 800ba7c:	2778      	movs	r7, #120	@ 0x78
 800ba7e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ba82:	6823      	ldr	r3, [r4, #0]
 800ba84:	6831      	ldr	r1, [r6, #0]
 800ba86:	061f      	lsls	r7, r3, #24
 800ba88:	f851 5b04 	ldr.w	r5, [r1], #4
 800ba8c:	d402      	bmi.n	800ba94 <_printf_i+0x188>
 800ba8e:	065f      	lsls	r7, r3, #25
 800ba90:	bf48      	it	mi
 800ba92:	b2ad      	uxthmi	r5, r5
 800ba94:	6031      	str	r1, [r6, #0]
 800ba96:	07d9      	lsls	r1, r3, #31
 800ba98:	bf44      	itt	mi
 800ba9a:	f043 0320 	orrmi.w	r3, r3, #32
 800ba9e:	6023      	strmi	r3, [r4, #0]
 800baa0:	b11d      	cbz	r5, 800baaa <_printf_i+0x19e>
 800baa2:	2310      	movs	r3, #16
 800baa4:	e7ac      	b.n	800ba00 <_printf_i+0xf4>
 800baa6:	4827      	ldr	r0, [pc, #156]	@ (800bb44 <_printf_i+0x238>)
 800baa8:	e7e9      	b.n	800ba7e <_printf_i+0x172>
 800baaa:	6823      	ldr	r3, [r4, #0]
 800baac:	f023 0320 	bic.w	r3, r3, #32
 800bab0:	6023      	str	r3, [r4, #0]
 800bab2:	e7f6      	b.n	800baa2 <_printf_i+0x196>
 800bab4:	4616      	mov	r6, r2
 800bab6:	e7bd      	b.n	800ba34 <_printf_i+0x128>
 800bab8:	6833      	ldr	r3, [r6, #0]
 800baba:	6825      	ldr	r5, [r4, #0]
 800babc:	6961      	ldr	r1, [r4, #20]
 800babe:	1d18      	adds	r0, r3, #4
 800bac0:	6030      	str	r0, [r6, #0]
 800bac2:	062e      	lsls	r6, r5, #24
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	d501      	bpl.n	800bacc <_printf_i+0x1c0>
 800bac8:	6019      	str	r1, [r3, #0]
 800baca:	e002      	b.n	800bad2 <_printf_i+0x1c6>
 800bacc:	0668      	lsls	r0, r5, #25
 800bace:	d5fb      	bpl.n	800bac8 <_printf_i+0x1bc>
 800bad0:	8019      	strh	r1, [r3, #0]
 800bad2:	2300      	movs	r3, #0
 800bad4:	6123      	str	r3, [r4, #16]
 800bad6:	4616      	mov	r6, r2
 800bad8:	e7bc      	b.n	800ba54 <_printf_i+0x148>
 800bada:	6833      	ldr	r3, [r6, #0]
 800badc:	1d1a      	adds	r2, r3, #4
 800bade:	6032      	str	r2, [r6, #0]
 800bae0:	681e      	ldr	r6, [r3, #0]
 800bae2:	6862      	ldr	r2, [r4, #4]
 800bae4:	2100      	movs	r1, #0
 800bae6:	4630      	mov	r0, r6
 800bae8:	f7f4 fbaa 	bl	8000240 <memchr>
 800baec:	b108      	cbz	r0, 800baf2 <_printf_i+0x1e6>
 800baee:	1b80      	subs	r0, r0, r6
 800baf0:	6060      	str	r0, [r4, #4]
 800baf2:	6863      	ldr	r3, [r4, #4]
 800baf4:	6123      	str	r3, [r4, #16]
 800baf6:	2300      	movs	r3, #0
 800baf8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bafc:	e7aa      	b.n	800ba54 <_printf_i+0x148>
 800bafe:	6923      	ldr	r3, [r4, #16]
 800bb00:	4632      	mov	r2, r6
 800bb02:	4649      	mov	r1, r9
 800bb04:	4640      	mov	r0, r8
 800bb06:	47d0      	blx	sl
 800bb08:	3001      	adds	r0, #1
 800bb0a:	d0ad      	beq.n	800ba68 <_printf_i+0x15c>
 800bb0c:	6823      	ldr	r3, [r4, #0]
 800bb0e:	079b      	lsls	r3, r3, #30
 800bb10:	d413      	bmi.n	800bb3a <_printf_i+0x22e>
 800bb12:	68e0      	ldr	r0, [r4, #12]
 800bb14:	9b03      	ldr	r3, [sp, #12]
 800bb16:	4298      	cmp	r0, r3
 800bb18:	bfb8      	it	lt
 800bb1a:	4618      	movlt	r0, r3
 800bb1c:	e7a6      	b.n	800ba6c <_printf_i+0x160>
 800bb1e:	2301      	movs	r3, #1
 800bb20:	4632      	mov	r2, r6
 800bb22:	4649      	mov	r1, r9
 800bb24:	4640      	mov	r0, r8
 800bb26:	47d0      	blx	sl
 800bb28:	3001      	adds	r0, #1
 800bb2a:	d09d      	beq.n	800ba68 <_printf_i+0x15c>
 800bb2c:	3501      	adds	r5, #1
 800bb2e:	68e3      	ldr	r3, [r4, #12]
 800bb30:	9903      	ldr	r1, [sp, #12]
 800bb32:	1a5b      	subs	r3, r3, r1
 800bb34:	42ab      	cmp	r3, r5
 800bb36:	dcf2      	bgt.n	800bb1e <_printf_i+0x212>
 800bb38:	e7eb      	b.n	800bb12 <_printf_i+0x206>
 800bb3a:	2500      	movs	r5, #0
 800bb3c:	f104 0619 	add.w	r6, r4, #25
 800bb40:	e7f5      	b.n	800bb2e <_printf_i+0x222>
 800bb42:	bf00      	nop
 800bb44:	0800c871 	.word	0x0800c871
 800bb48:	0800c882 	.word	0x0800c882

0800bb4c <__sflush_r>:
 800bb4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bb50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb54:	0716      	lsls	r6, r2, #28
 800bb56:	4605      	mov	r5, r0
 800bb58:	460c      	mov	r4, r1
 800bb5a:	d454      	bmi.n	800bc06 <__sflush_r+0xba>
 800bb5c:	684b      	ldr	r3, [r1, #4]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	dc02      	bgt.n	800bb68 <__sflush_r+0x1c>
 800bb62:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	dd48      	ble.n	800bbfa <__sflush_r+0xae>
 800bb68:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bb6a:	2e00      	cmp	r6, #0
 800bb6c:	d045      	beq.n	800bbfa <__sflush_r+0xae>
 800bb6e:	2300      	movs	r3, #0
 800bb70:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bb74:	682f      	ldr	r7, [r5, #0]
 800bb76:	6a21      	ldr	r1, [r4, #32]
 800bb78:	602b      	str	r3, [r5, #0]
 800bb7a:	d030      	beq.n	800bbde <__sflush_r+0x92>
 800bb7c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bb7e:	89a3      	ldrh	r3, [r4, #12]
 800bb80:	0759      	lsls	r1, r3, #29
 800bb82:	d505      	bpl.n	800bb90 <__sflush_r+0x44>
 800bb84:	6863      	ldr	r3, [r4, #4]
 800bb86:	1ad2      	subs	r2, r2, r3
 800bb88:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bb8a:	b10b      	cbz	r3, 800bb90 <__sflush_r+0x44>
 800bb8c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bb8e:	1ad2      	subs	r2, r2, r3
 800bb90:	2300      	movs	r3, #0
 800bb92:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bb94:	6a21      	ldr	r1, [r4, #32]
 800bb96:	4628      	mov	r0, r5
 800bb98:	47b0      	blx	r6
 800bb9a:	1c43      	adds	r3, r0, #1
 800bb9c:	89a3      	ldrh	r3, [r4, #12]
 800bb9e:	d106      	bne.n	800bbae <__sflush_r+0x62>
 800bba0:	6829      	ldr	r1, [r5, #0]
 800bba2:	291d      	cmp	r1, #29
 800bba4:	d82b      	bhi.n	800bbfe <__sflush_r+0xb2>
 800bba6:	4a2a      	ldr	r2, [pc, #168]	@ (800bc50 <__sflush_r+0x104>)
 800bba8:	410a      	asrs	r2, r1
 800bbaa:	07d6      	lsls	r6, r2, #31
 800bbac:	d427      	bmi.n	800bbfe <__sflush_r+0xb2>
 800bbae:	2200      	movs	r2, #0
 800bbb0:	6062      	str	r2, [r4, #4]
 800bbb2:	04d9      	lsls	r1, r3, #19
 800bbb4:	6922      	ldr	r2, [r4, #16]
 800bbb6:	6022      	str	r2, [r4, #0]
 800bbb8:	d504      	bpl.n	800bbc4 <__sflush_r+0x78>
 800bbba:	1c42      	adds	r2, r0, #1
 800bbbc:	d101      	bne.n	800bbc2 <__sflush_r+0x76>
 800bbbe:	682b      	ldr	r3, [r5, #0]
 800bbc0:	b903      	cbnz	r3, 800bbc4 <__sflush_r+0x78>
 800bbc2:	6560      	str	r0, [r4, #84]	@ 0x54
 800bbc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bbc6:	602f      	str	r7, [r5, #0]
 800bbc8:	b1b9      	cbz	r1, 800bbfa <__sflush_r+0xae>
 800bbca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bbce:	4299      	cmp	r1, r3
 800bbd0:	d002      	beq.n	800bbd8 <__sflush_r+0x8c>
 800bbd2:	4628      	mov	r0, r5
 800bbd4:	f7fe fc78 	bl	800a4c8 <_free_r>
 800bbd8:	2300      	movs	r3, #0
 800bbda:	6363      	str	r3, [r4, #52]	@ 0x34
 800bbdc:	e00d      	b.n	800bbfa <__sflush_r+0xae>
 800bbde:	2301      	movs	r3, #1
 800bbe0:	4628      	mov	r0, r5
 800bbe2:	47b0      	blx	r6
 800bbe4:	4602      	mov	r2, r0
 800bbe6:	1c50      	adds	r0, r2, #1
 800bbe8:	d1c9      	bne.n	800bb7e <__sflush_r+0x32>
 800bbea:	682b      	ldr	r3, [r5, #0]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d0c6      	beq.n	800bb7e <__sflush_r+0x32>
 800bbf0:	2b1d      	cmp	r3, #29
 800bbf2:	d001      	beq.n	800bbf8 <__sflush_r+0xac>
 800bbf4:	2b16      	cmp	r3, #22
 800bbf6:	d11e      	bne.n	800bc36 <__sflush_r+0xea>
 800bbf8:	602f      	str	r7, [r5, #0]
 800bbfa:	2000      	movs	r0, #0
 800bbfc:	e022      	b.n	800bc44 <__sflush_r+0xf8>
 800bbfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc02:	b21b      	sxth	r3, r3
 800bc04:	e01b      	b.n	800bc3e <__sflush_r+0xf2>
 800bc06:	690f      	ldr	r7, [r1, #16]
 800bc08:	2f00      	cmp	r7, #0
 800bc0a:	d0f6      	beq.n	800bbfa <__sflush_r+0xae>
 800bc0c:	0793      	lsls	r3, r2, #30
 800bc0e:	680e      	ldr	r6, [r1, #0]
 800bc10:	bf08      	it	eq
 800bc12:	694b      	ldreq	r3, [r1, #20]
 800bc14:	600f      	str	r7, [r1, #0]
 800bc16:	bf18      	it	ne
 800bc18:	2300      	movne	r3, #0
 800bc1a:	eba6 0807 	sub.w	r8, r6, r7
 800bc1e:	608b      	str	r3, [r1, #8]
 800bc20:	f1b8 0f00 	cmp.w	r8, #0
 800bc24:	dde9      	ble.n	800bbfa <__sflush_r+0xae>
 800bc26:	6a21      	ldr	r1, [r4, #32]
 800bc28:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bc2a:	4643      	mov	r3, r8
 800bc2c:	463a      	mov	r2, r7
 800bc2e:	4628      	mov	r0, r5
 800bc30:	47b0      	blx	r6
 800bc32:	2800      	cmp	r0, #0
 800bc34:	dc08      	bgt.n	800bc48 <__sflush_r+0xfc>
 800bc36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc3e:	81a3      	strh	r3, [r4, #12]
 800bc40:	f04f 30ff 	mov.w	r0, #4294967295
 800bc44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc48:	4407      	add	r7, r0
 800bc4a:	eba8 0800 	sub.w	r8, r8, r0
 800bc4e:	e7e7      	b.n	800bc20 <__sflush_r+0xd4>
 800bc50:	dfbffffe 	.word	0xdfbffffe

0800bc54 <_fflush_r>:
 800bc54:	b538      	push	{r3, r4, r5, lr}
 800bc56:	690b      	ldr	r3, [r1, #16]
 800bc58:	4605      	mov	r5, r0
 800bc5a:	460c      	mov	r4, r1
 800bc5c:	b913      	cbnz	r3, 800bc64 <_fflush_r+0x10>
 800bc5e:	2500      	movs	r5, #0
 800bc60:	4628      	mov	r0, r5
 800bc62:	bd38      	pop	{r3, r4, r5, pc}
 800bc64:	b118      	cbz	r0, 800bc6e <_fflush_r+0x1a>
 800bc66:	6a03      	ldr	r3, [r0, #32]
 800bc68:	b90b      	cbnz	r3, 800bc6e <_fflush_r+0x1a>
 800bc6a:	f7fe fa75 	bl	800a158 <__sinit>
 800bc6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d0f3      	beq.n	800bc5e <_fflush_r+0xa>
 800bc76:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bc78:	07d0      	lsls	r0, r2, #31
 800bc7a:	d404      	bmi.n	800bc86 <_fflush_r+0x32>
 800bc7c:	0599      	lsls	r1, r3, #22
 800bc7e:	d402      	bmi.n	800bc86 <_fflush_r+0x32>
 800bc80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bc82:	f7fe fc08 	bl	800a496 <__retarget_lock_acquire_recursive>
 800bc86:	4628      	mov	r0, r5
 800bc88:	4621      	mov	r1, r4
 800bc8a:	f7ff ff5f 	bl	800bb4c <__sflush_r>
 800bc8e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bc90:	07da      	lsls	r2, r3, #31
 800bc92:	4605      	mov	r5, r0
 800bc94:	d4e4      	bmi.n	800bc60 <_fflush_r+0xc>
 800bc96:	89a3      	ldrh	r3, [r4, #12]
 800bc98:	059b      	lsls	r3, r3, #22
 800bc9a:	d4e1      	bmi.n	800bc60 <_fflush_r+0xc>
 800bc9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bc9e:	f7fe fbfb 	bl	800a498 <__retarget_lock_release_recursive>
 800bca2:	e7dd      	b.n	800bc60 <_fflush_r+0xc>

0800bca4 <memmove>:
 800bca4:	4288      	cmp	r0, r1
 800bca6:	b510      	push	{r4, lr}
 800bca8:	eb01 0402 	add.w	r4, r1, r2
 800bcac:	d902      	bls.n	800bcb4 <memmove+0x10>
 800bcae:	4284      	cmp	r4, r0
 800bcb0:	4623      	mov	r3, r4
 800bcb2:	d807      	bhi.n	800bcc4 <memmove+0x20>
 800bcb4:	1e43      	subs	r3, r0, #1
 800bcb6:	42a1      	cmp	r1, r4
 800bcb8:	d008      	beq.n	800bccc <memmove+0x28>
 800bcba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bcbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bcc2:	e7f8      	b.n	800bcb6 <memmove+0x12>
 800bcc4:	4402      	add	r2, r0
 800bcc6:	4601      	mov	r1, r0
 800bcc8:	428a      	cmp	r2, r1
 800bcca:	d100      	bne.n	800bcce <memmove+0x2a>
 800bccc:	bd10      	pop	{r4, pc}
 800bcce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bcd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bcd6:	e7f7      	b.n	800bcc8 <memmove+0x24>

0800bcd8 <__assert_func>:
 800bcd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bcda:	4614      	mov	r4, r2
 800bcdc:	461a      	mov	r2, r3
 800bcde:	4b09      	ldr	r3, [pc, #36]	@ (800bd04 <__assert_func+0x2c>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	4605      	mov	r5, r0
 800bce4:	68d8      	ldr	r0, [r3, #12]
 800bce6:	b954      	cbnz	r4, 800bcfe <__assert_func+0x26>
 800bce8:	4b07      	ldr	r3, [pc, #28]	@ (800bd08 <__assert_func+0x30>)
 800bcea:	461c      	mov	r4, r3
 800bcec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bcf0:	9100      	str	r1, [sp, #0]
 800bcf2:	462b      	mov	r3, r5
 800bcf4:	4905      	ldr	r1, [pc, #20]	@ (800bd0c <__assert_func+0x34>)
 800bcf6:	f000 f821 	bl	800bd3c <fiprintf>
 800bcfa:	f000 f831 	bl	800bd60 <abort>
 800bcfe:	4b04      	ldr	r3, [pc, #16]	@ (800bd10 <__assert_func+0x38>)
 800bd00:	e7f4      	b.n	800bcec <__assert_func+0x14>
 800bd02:	bf00      	nop
 800bd04:	20000194 	.word	0x20000194
 800bd08:	0800c8ce 	.word	0x0800c8ce
 800bd0c:	0800c8a0 	.word	0x0800c8a0
 800bd10:	0800c893 	.word	0x0800c893

0800bd14 <_calloc_r>:
 800bd14:	b570      	push	{r4, r5, r6, lr}
 800bd16:	fba1 5402 	umull	r5, r4, r1, r2
 800bd1a:	b93c      	cbnz	r4, 800bd2c <_calloc_r+0x18>
 800bd1c:	4629      	mov	r1, r5
 800bd1e:	f7fd fabd 	bl	800929c <_malloc_r>
 800bd22:	4606      	mov	r6, r0
 800bd24:	b928      	cbnz	r0, 800bd32 <_calloc_r+0x1e>
 800bd26:	2600      	movs	r6, #0
 800bd28:	4630      	mov	r0, r6
 800bd2a:	bd70      	pop	{r4, r5, r6, pc}
 800bd2c:	220c      	movs	r2, #12
 800bd2e:	6002      	str	r2, [r0, #0]
 800bd30:	e7f9      	b.n	800bd26 <_calloc_r+0x12>
 800bd32:	462a      	mov	r2, r5
 800bd34:	4621      	mov	r1, r4
 800bd36:	f7fe fabc 	bl	800a2b2 <memset>
 800bd3a:	e7f5      	b.n	800bd28 <_calloc_r+0x14>

0800bd3c <fiprintf>:
 800bd3c:	b40e      	push	{r1, r2, r3}
 800bd3e:	b503      	push	{r0, r1, lr}
 800bd40:	4601      	mov	r1, r0
 800bd42:	ab03      	add	r3, sp, #12
 800bd44:	4805      	ldr	r0, [pc, #20]	@ (800bd5c <fiprintf+0x20>)
 800bd46:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd4a:	6800      	ldr	r0, [r0, #0]
 800bd4c:	9301      	str	r3, [sp, #4]
 800bd4e:	f000 f837 	bl	800bdc0 <_vfiprintf_r>
 800bd52:	b002      	add	sp, #8
 800bd54:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd58:	b003      	add	sp, #12
 800bd5a:	4770      	bx	lr
 800bd5c:	20000194 	.word	0x20000194

0800bd60 <abort>:
 800bd60:	b508      	push	{r3, lr}
 800bd62:	2006      	movs	r0, #6
 800bd64:	f000 fa00 	bl	800c168 <raise>
 800bd68:	2001      	movs	r0, #1
 800bd6a:	f7f7 f8af 	bl	8002ecc <_exit>

0800bd6e <__sfputc_r>:
 800bd6e:	6893      	ldr	r3, [r2, #8]
 800bd70:	3b01      	subs	r3, #1
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	b410      	push	{r4}
 800bd76:	6093      	str	r3, [r2, #8]
 800bd78:	da08      	bge.n	800bd8c <__sfputc_r+0x1e>
 800bd7a:	6994      	ldr	r4, [r2, #24]
 800bd7c:	42a3      	cmp	r3, r4
 800bd7e:	db01      	blt.n	800bd84 <__sfputc_r+0x16>
 800bd80:	290a      	cmp	r1, #10
 800bd82:	d103      	bne.n	800bd8c <__sfputc_r+0x1e>
 800bd84:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd88:	f000 b932 	b.w	800bff0 <__swbuf_r>
 800bd8c:	6813      	ldr	r3, [r2, #0]
 800bd8e:	1c58      	adds	r0, r3, #1
 800bd90:	6010      	str	r0, [r2, #0]
 800bd92:	7019      	strb	r1, [r3, #0]
 800bd94:	4608      	mov	r0, r1
 800bd96:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd9a:	4770      	bx	lr

0800bd9c <__sfputs_r>:
 800bd9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd9e:	4606      	mov	r6, r0
 800bda0:	460f      	mov	r7, r1
 800bda2:	4614      	mov	r4, r2
 800bda4:	18d5      	adds	r5, r2, r3
 800bda6:	42ac      	cmp	r4, r5
 800bda8:	d101      	bne.n	800bdae <__sfputs_r+0x12>
 800bdaa:	2000      	movs	r0, #0
 800bdac:	e007      	b.n	800bdbe <__sfputs_r+0x22>
 800bdae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdb2:	463a      	mov	r2, r7
 800bdb4:	4630      	mov	r0, r6
 800bdb6:	f7ff ffda 	bl	800bd6e <__sfputc_r>
 800bdba:	1c43      	adds	r3, r0, #1
 800bdbc:	d1f3      	bne.n	800bda6 <__sfputs_r+0xa>
 800bdbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bdc0 <_vfiprintf_r>:
 800bdc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdc4:	460d      	mov	r5, r1
 800bdc6:	b09d      	sub	sp, #116	@ 0x74
 800bdc8:	4614      	mov	r4, r2
 800bdca:	4698      	mov	r8, r3
 800bdcc:	4606      	mov	r6, r0
 800bdce:	b118      	cbz	r0, 800bdd8 <_vfiprintf_r+0x18>
 800bdd0:	6a03      	ldr	r3, [r0, #32]
 800bdd2:	b90b      	cbnz	r3, 800bdd8 <_vfiprintf_r+0x18>
 800bdd4:	f7fe f9c0 	bl	800a158 <__sinit>
 800bdd8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bdda:	07d9      	lsls	r1, r3, #31
 800bddc:	d405      	bmi.n	800bdea <_vfiprintf_r+0x2a>
 800bdde:	89ab      	ldrh	r3, [r5, #12]
 800bde0:	059a      	lsls	r2, r3, #22
 800bde2:	d402      	bmi.n	800bdea <_vfiprintf_r+0x2a>
 800bde4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bde6:	f7fe fb56 	bl	800a496 <__retarget_lock_acquire_recursive>
 800bdea:	89ab      	ldrh	r3, [r5, #12]
 800bdec:	071b      	lsls	r3, r3, #28
 800bdee:	d501      	bpl.n	800bdf4 <_vfiprintf_r+0x34>
 800bdf0:	692b      	ldr	r3, [r5, #16]
 800bdf2:	b99b      	cbnz	r3, 800be1c <_vfiprintf_r+0x5c>
 800bdf4:	4629      	mov	r1, r5
 800bdf6:	4630      	mov	r0, r6
 800bdf8:	f000 f938 	bl	800c06c <__swsetup_r>
 800bdfc:	b170      	cbz	r0, 800be1c <_vfiprintf_r+0x5c>
 800bdfe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800be00:	07dc      	lsls	r4, r3, #31
 800be02:	d504      	bpl.n	800be0e <_vfiprintf_r+0x4e>
 800be04:	f04f 30ff 	mov.w	r0, #4294967295
 800be08:	b01d      	add	sp, #116	@ 0x74
 800be0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be0e:	89ab      	ldrh	r3, [r5, #12]
 800be10:	0598      	lsls	r0, r3, #22
 800be12:	d4f7      	bmi.n	800be04 <_vfiprintf_r+0x44>
 800be14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800be16:	f7fe fb3f 	bl	800a498 <__retarget_lock_release_recursive>
 800be1a:	e7f3      	b.n	800be04 <_vfiprintf_r+0x44>
 800be1c:	2300      	movs	r3, #0
 800be1e:	9309      	str	r3, [sp, #36]	@ 0x24
 800be20:	2320      	movs	r3, #32
 800be22:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800be26:	f8cd 800c 	str.w	r8, [sp, #12]
 800be2a:	2330      	movs	r3, #48	@ 0x30
 800be2c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bfdc <_vfiprintf_r+0x21c>
 800be30:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800be34:	f04f 0901 	mov.w	r9, #1
 800be38:	4623      	mov	r3, r4
 800be3a:	469a      	mov	sl, r3
 800be3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be40:	b10a      	cbz	r2, 800be46 <_vfiprintf_r+0x86>
 800be42:	2a25      	cmp	r2, #37	@ 0x25
 800be44:	d1f9      	bne.n	800be3a <_vfiprintf_r+0x7a>
 800be46:	ebba 0b04 	subs.w	fp, sl, r4
 800be4a:	d00b      	beq.n	800be64 <_vfiprintf_r+0xa4>
 800be4c:	465b      	mov	r3, fp
 800be4e:	4622      	mov	r2, r4
 800be50:	4629      	mov	r1, r5
 800be52:	4630      	mov	r0, r6
 800be54:	f7ff ffa2 	bl	800bd9c <__sfputs_r>
 800be58:	3001      	adds	r0, #1
 800be5a:	f000 80a7 	beq.w	800bfac <_vfiprintf_r+0x1ec>
 800be5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800be60:	445a      	add	r2, fp
 800be62:	9209      	str	r2, [sp, #36]	@ 0x24
 800be64:	f89a 3000 	ldrb.w	r3, [sl]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	f000 809f 	beq.w	800bfac <_vfiprintf_r+0x1ec>
 800be6e:	2300      	movs	r3, #0
 800be70:	f04f 32ff 	mov.w	r2, #4294967295
 800be74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be78:	f10a 0a01 	add.w	sl, sl, #1
 800be7c:	9304      	str	r3, [sp, #16]
 800be7e:	9307      	str	r3, [sp, #28]
 800be80:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800be84:	931a      	str	r3, [sp, #104]	@ 0x68
 800be86:	4654      	mov	r4, sl
 800be88:	2205      	movs	r2, #5
 800be8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be8e:	4853      	ldr	r0, [pc, #332]	@ (800bfdc <_vfiprintf_r+0x21c>)
 800be90:	f7f4 f9d6 	bl	8000240 <memchr>
 800be94:	9a04      	ldr	r2, [sp, #16]
 800be96:	b9d8      	cbnz	r0, 800bed0 <_vfiprintf_r+0x110>
 800be98:	06d1      	lsls	r1, r2, #27
 800be9a:	bf44      	itt	mi
 800be9c:	2320      	movmi	r3, #32
 800be9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bea2:	0713      	lsls	r3, r2, #28
 800bea4:	bf44      	itt	mi
 800bea6:	232b      	movmi	r3, #43	@ 0x2b
 800bea8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800beac:	f89a 3000 	ldrb.w	r3, [sl]
 800beb0:	2b2a      	cmp	r3, #42	@ 0x2a
 800beb2:	d015      	beq.n	800bee0 <_vfiprintf_r+0x120>
 800beb4:	9a07      	ldr	r2, [sp, #28]
 800beb6:	4654      	mov	r4, sl
 800beb8:	2000      	movs	r0, #0
 800beba:	f04f 0c0a 	mov.w	ip, #10
 800bebe:	4621      	mov	r1, r4
 800bec0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bec4:	3b30      	subs	r3, #48	@ 0x30
 800bec6:	2b09      	cmp	r3, #9
 800bec8:	d94b      	bls.n	800bf62 <_vfiprintf_r+0x1a2>
 800beca:	b1b0      	cbz	r0, 800befa <_vfiprintf_r+0x13a>
 800becc:	9207      	str	r2, [sp, #28]
 800bece:	e014      	b.n	800befa <_vfiprintf_r+0x13a>
 800bed0:	eba0 0308 	sub.w	r3, r0, r8
 800bed4:	fa09 f303 	lsl.w	r3, r9, r3
 800bed8:	4313      	orrs	r3, r2
 800beda:	9304      	str	r3, [sp, #16]
 800bedc:	46a2      	mov	sl, r4
 800bede:	e7d2      	b.n	800be86 <_vfiprintf_r+0xc6>
 800bee0:	9b03      	ldr	r3, [sp, #12]
 800bee2:	1d19      	adds	r1, r3, #4
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	9103      	str	r1, [sp, #12]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	bfbb      	ittet	lt
 800beec:	425b      	neglt	r3, r3
 800beee:	f042 0202 	orrlt.w	r2, r2, #2
 800bef2:	9307      	strge	r3, [sp, #28]
 800bef4:	9307      	strlt	r3, [sp, #28]
 800bef6:	bfb8      	it	lt
 800bef8:	9204      	strlt	r2, [sp, #16]
 800befa:	7823      	ldrb	r3, [r4, #0]
 800befc:	2b2e      	cmp	r3, #46	@ 0x2e
 800befe:	d10a      	bne.n	800bf16 <_vfiprintf_r+0x156>
 800bf00:	7863      	ldrb	r3, [r4, #1]
 800bf02:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf04:	d132      	bne.n	800bf6c <_vfiprintf_r+0x1ac>
 800bf06:	9b03      	ldr	r3, [sp, #12]
 800bf08:	1d1a      	adds	r2, r3, #4
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	9203      	str	r2, [sp, #12]
 800bf0e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bf12:	3402      	adds	r4, #2
 800bf14:	9305      	str	r3, [sp, #20]
 800bf16:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bfec <_vfiprintf_r+0x22c>
 800bf1a:	7821      	ldrb	r1, [r4, #0]
 800bf1c:	2203      	movs	r2, #3
 800bf1e:	4650      	mov	r0, sl
 800bf20:	f7f4 f98e 	bl	8000240 <memchr>
 800bf24:	b138      	cbz	r0, 800bf36 <_vfiprintf_r+0x176>
 800bf26:	9b04      	ldr	r3, [sp, #16]
 800bf28:	eba0 000a 	sub.w	r0, r0, sl
 800bf2c:	2240      	movs	r2, #64	@ 0x40
 800bf2e:	4082      	lsls	r2, r0
 800bf30:	4313      	orrs	r3, r2
 800bf32:	3401      	adds	r4, #1
 800bf34:	9304      	str	r3, [sp, #16]
 800bf36:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf3a:	4829      	ldr	r0, [pc, #164]	@ (800bfe0 <_vfiprintf_r+0x220>)
 800bf3c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bf40:	2206      	movs	r2, #6
 800bf42:	f7f4 f97d 	bl	8000240 <memchr>
 800bf46:	2800      	cmp	r0, #0
 800bf48:	d03f      	beq.n	800bfca <_vfiprintf_r+0x20a>
 800bf4a:	4b26      	ldr	r3, [pc, #152]	@ (800bfe4 <_vfiprintf_r+0x224>)
 800bf4c:	bb1b      	cbnz	r3, 800bf96 <_vfiprintf_r+0x1d6>
 800bf4e:	9b03      	ldr	r3, [sp, #12]
 800bf50:	3307      	adds	r3, #7
 800bf52:	f023 0307 	bic.w	r3, r3, #7
 800bf56:	3308      	adds	r3, #8
 800bf58:	9303      	str	r3, [sp, #12]
 800bf5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf5c:	443b      	add	r3, r7
 800bf5e:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf60:	e76a      	b.n	800be38 <_vfiprintf_r+0x78>
 800bf62:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf66:	460c      	mov	r4, r1
 800bf68:	2001      	movs	r0, #1
 800bf6a:	e7a8      	b.n	800bebe <_vfiprintf_r+0xfe>
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	3401      	adds	r4, #1
 800bf70:	9305      	str	r3, [sp, #20]
 800bf72:	4619      	mov	r1, r3
 800bf74:	f04f 0c0a 	mov.w	ip, #10
 800bf78:	4620      	mov	r0, r4
 800bf7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf7e:	3a30      	subs	r2, #48	@ 0x30
 800bf80:	2a09      	cmp	r2, #9
 800bf82:	d903      	bls.n	800bf8c <_vfiprintf_r+0x1cc>
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d0c6      	beq.n	800bf16 <_vfiprintf_r+0x156>
 800bf88:	9105      	str	r1, [sp, #20]
 800bf8a:	e7c4      	b.n	800bf16 <_vfiprintf_r+0x156>
 800bf8c:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf90:	4604      	mov	r4, r0
 800bf92:	2301      	movs	r3, #1
 800bf94:	e7f0      	b.n	800bf78 <_vfiprintf_r+0x1b8>
 800bf96:	ab03      	add	r3, sp, #12
 800bf98:	9300      	str	r3, [sp, #0]
 800bf9a:	462a      	mov	r2, r5
 800bf9c:	4b12      	ldr	r3, [pc, #72]	@ (800bfe8 <_vfiprintf_r+0x228>)
 800bf9e:	a904      	add	r1, sp, #16
 800bfa0:	4630      	mov	r0, r6
 800bfa2:	f3af 8000 	nop.w
 800bfa6:	4607      	mov	r7, r0
 800bfa8:	1c78      	adds	r0, r7, #1
 800bfaa:	d1d6      	bne.n	800bf5a <_vfiprintf_r+0x19a>
 800bfac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bfae:	07d9      	lsls	r1, r3, #31
 800bfb0:	d405      	bmi.n	800bfbe <_vfiprintf_r+0x1fe>
 800bfb2:	89ab      	ldrh	r3, [r5, #12]
 800bfb4:	059a      	lsls	r2, r3, #22
 800bfb6:	d402      	bmi.n	800bfbe <_vfiprintf_r+0x1fe>
 800bfb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bfba:	f7fe fa6d 	bl	800a498 <__retarget_lock_release_recursive>
 800bfbe:	89ab      	ldrh	r3, [r5, #12]
 800bfc0:	065b      	lsls	r3, r3, #25
 800bfc2:	f53f af1f 	bmi.w	800be04 <_vfiprintf_r+0x44>
 800bfc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bfc8:	e71e      	b.n	800be08 <_vfiprintf_r+0x48>
 800bfca:	ab03      	add	r3, sp, #12
 800bfcc:	9300      	str	r3, [sp, #0]
 800bfce:	462a      	mov	r2, r5
 800bfd0:	4b05      	ldr	r3, [pc, #20]	@ (800bfe8 <_vfiprintf_r+0x228>)
 800bfd2:	a904      	add	r1, sp, #16
 800bfd4:	4630      	mov	r0, r6
 800bfd6:	f7ff fc99 	bl	800b90c <_printf_i>
 800bfda:	e7e4      	b.n	800bfa6 <_vfiprintf_r+0x1e6>
 800bfdc:	0800c860 	.word	0x0800c860
 800bfe0:	0800c86a 	.word	0x0800c86a
 800bfe4:	00000000 	.word	0x00000000
 800bfe8:	0800bd9d 	.word	0x0800bd9d
 800bfec:	0800c866 	.word	0x0800c866

0800bff0 <__swbuf_r>:
 800bff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bff2:	460e      	mov	r6, r1
 800bff4:	4614      	mov	r4, r2
 800bff6:	4605      	mov	r5, r0
 800bff8:	b118      	cbz	r0, 800c002 <__swbuf_r+0x12>
 800bffa:	6a03      	ldr	r3, [r0, #32]
 800bffc:	b90b      	cbnz	r3, 800c002 <__swbuf_r+0x12>
 800bffe:	f7fe f8ab 	bl	800a158 <__sinit>
 800c002:	69a3      	ldr	r3, [r4, #24]
 800c004:	60a3      	str	r3, [r4, #8]
 800c006:	89a3      	ldrh	r3, [r4, #12]
 800c008:	071a      	lsls	r2, r3, #28
 800c00a:	d501      	bpl.n	800c010 <__swbuf_r+0x20>
 800c00c:	6923      	ldr	r3, [r4, #16]
 800c00e:	b943      	cbnz	r3, 800c022 <__swbuf_r+0x32>
 800c010:	4621      	mov	r1, r4
 800c012:	4628      	mov	r0, r5
 800c014:	f000 f82a 	bl	800c06c <__swsetup_r>
 800c018:	b118      	cbz	r0, 800c022 <__swbuf_r+0x32>
 800c01a:	f04f 37ff 	mov.w	r7, #4294967295
 800c01e:	4638      	mov	r0, r7
 800c020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c022:	6823      	ldr	r3, [r4, #0]
 800c024:	6922      	ldr	r2, [r4, #16]
 800c026:	1a98      	subs	r0, r3, r2
 800c028:	6963      	ldr	r3, [r4, #20]
 800c02a:	b2f6      	uxtb	r6, r6
 800c02c:	4283      	cmp	r3, r0
 800c02e:	4637      	mov	r7, r6
 800c030:	dc05      	bgt.n	800c03e <__swbuf_r+0x4e>
 800c032:	4621      	mov	r1, r4
 800c034:	4628      	mov	r0, r5
 800c036:	f7ff fe0d 	bl	800bc54 <_fflush_r>
 800c03a:	2800      	cmp	r0, #0
 800c03c:	d1ed      	bne.n	800c01a <__swbuf_r+0x2a>
 800c03e:	68a3      	ldr	r3, [r4, #8]
 800c040:	3b01      	subs	r3, #1
 800c042:	60a3      	str	r3, [r4, #8]
 800c044:	6823      	ldr	r3, [r4, #0]
 800c046:	1c5a      	adds	r2, r3, #1
 800c048:	6022      	str	r2, [r4, #0]
 800c04a:	701e      	strb	r6, [r3, #0]
 800c04c:	6962      	ldr	r2, [r4, #20]
 800c04e:	1c43      	adds	r3, r0, #1
 800c050:	429a      	cmp	r2, r3
 800c052:	d004      	beq.n	800c05e <__swbuf_r+0x6e>
 800c054:	89a3      	ldrh	r3, [r4, #12]
 800c056:	07db      	lsls	r3, r3, #31
 800c058:	d5e1      	bpl.n	800c01e <__swbuf_r+0x2e>
 800c05a:	2e0a      	cmp	r6, #10
 800c05c:	d1df      	bne.n	800c01e <__swbuf_r+0x2e>
 800c05e:	4621      	mov	r1, r4
 800c060:	4628      	mov	r0, r5
 800c062:	f7ff fdf7 	bl	800bc54 <_fflush_r>
 800c066:	2800      	cmp	r0, #0
 800c068:	d0d9      	beq.n	800c01e <__swbuf_r+0x2e>
 800c06a:	e7d6      	b.n	800c01a <__swbuf_r+0x2a>

0800c06c <__swsetup_r>:
 800c06c:	b538      	push	{r3, r4, r5, lr}
 800c06e:	4b29      	ldr	r3, [pc, #164]	@ (800c114 <__swsetup_r+0xa8>)
 800c070:	4605      	mov	r5, r0
 800c072:	6818      	ldr	r0, [r3, #0]
 800c074:	460c      	mov	r4, r1
 800c076:	b118      	cbz	r0, 800c080 <__swsetup_r+0x14>
 800c078:	6a03      	ldr	r3, [r0, #32]
 800c07a:	b90b      	cbnz	r3, 800c080 <__swsetup_r+0x14>
 800c07c:	f7fe f86c 	bl	800a158 <__sinit>
 800c080:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c084:	0719      	lsls	r1, r3, #28
 800c086:	d422      	bmi.n	800c0ce <__swsetup_r+0x62>
 800c088:	06da      	lsls	r2, r3, #27
 800c08a:	d407      	bmi.n	800c09c <__swsetup_r+0x30>
 800c08c:	2209      	movs	r2, #9
 800c08e:	602a      	str	r2, [r5, #0]
 800c090:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c094:	81a3      	strh	r3, [r4, #12]
 800c096:	f04f 30ff 	mov.w	r0, #4294967295
 800c09a:	e033      	b.n	800c104 <__swsetup_r+0x98>
 800c09c:	0758      	lsls	r0, r3, #29
 800c09e:	d512      	bpl.n	800c0c6 <__swsetup_r+0x5a>
 800c0a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c0a2:	b141      	cbz	r1, 800c0b6 <__swsetup_r+0x4a>
 800c0a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c0a8:	4299      	cmp	r1, r3
 800c0aa:	d002      	beq.n	800c0b2 <__swsetup_r+0x46>
 800c0ac:	4628      	mov	r0, r5
 800c0ae:	f7fe fa0b 	bl	800a4c8 <_free_r>
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	6363      	str	r3, [r4, #52]	@ 0x34
 800c0b6:	89a3      	ldrh	r3, [r4, #12]
 800c0b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c0bc:	81a3      	strh	r3, [r4, #12]
 800c0be:	2300      	movs	r3, #0
 800c0c0:	6063      	str	r3, [r4, #4]
 800c0c2:	6923      	ldr	r3, [r4, #16]
 800c0c4:	6023      	str	r3, [r4, #0]
 800c0c6:	89a3      	ldrh	r3, [r4, #12]
 800c0c8:	f043 0308 	orr.w	r3, r3, #8
 800c0cc:	81a3      	strh	r3, [r4, #12]
 800c0ce:	6923      	ldr	r3, [r4, #16]
 800c0d0:	b94b      	cbnz	r3, 800c0e6 <__swsetup_r+0x7a>
 800c0d2:	89a3      	ldrh	r3, [r4, #12]
 800c0d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c0d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c0dc:	d003      	beq.n	800c0e6 <__swsetup_r+0x7a>
 800c0de:	4621      	mov	r1, r4
 800c0e0:	4628      	mov	r0, r5
 800c0e2:	f000 f883 	bl	800c1ec <__smakebuf_r>
 800c0e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0ea:	f013 0201 	ands.w	r2, r3, #1
 800c0ee:	d00a      	beq.n	800c106 <__swsetup_r+0x9a>
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	60a2      	str	r2, [r4, #8]
 800c0f4:	6962      	ldr	r2, [r4, #20]
 800c0f6:	4252      	negs	r2, r2
 800c0f8:	61a2      	str	r2, [r4, #24]
 800c0fa:	6922      	ldr	r2, [r4, #16]
 800c0fc:	b942      	cbnz	r2, 800c110 <__swsetup_r+0xa4>
 800c0fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c102:	d1c5      	bne.n	800c090 <__swsetup_r+0x24>
 800c104:	bd38      	pop	{r3, r4, r5, pc}
 800c106:	0799      	lsls	r1, r3, #30
 800c108:	bf58      	it	pl
 800c10a:	6962      	ldrpl	r2, [r4, #20]
 800c10c:	60a2      	str	r2, [r4, #8]
 800c10e:	e7f4      	b.n	800c0fa <__swsetup_r+0x8e>
 800c110:	2000      	movs	r0, #0
 800c112:	e7f7      	b.n	800c104 <__swsetup_r+0x98>
 800c114:	20000194 	.word	0x20000194

0800c118 <_raise_r>:
 800c118:	291f      	cmp	r1, #31
 800c11a:	b538      	push	{r3, r4, r5, lr}
 800c11c:	4605      	mov	r5, r0
 800c11e:	460c      	mov	r4, r1
 800c120:	d904      	bls.n	800c12c <_raise_r+0x14>
 800c122:	2316      	movs	r3, #22
 800c124:	6003      	str	r3, [r0, #0]
 800c126:	f04f 30ff 	mov.w	r0, #4294967295
 800c12a:	bd38      	pop	{r3, r4, r5, pc}
 800c12c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c12e:	b112      	cbz	r2, 800c136 <_raise_r+0x1e>
 800c130:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c134:	b94b      	cbnz	r3, 800c14a <_raise_r+0x32>
 800c136:	4628      	mov	r0, r5
 800c138:	f000 f830 	bl	800c19c <_getpid_r>
 800c13c:	4622      	mov	r2, r4
 800c13e:	4601      	mov	r1, r0
 800c140:	4628      	mov	r0, r5
 800c142:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c146:	f000 b817 	b.w	800c178 <_kill_r>
 800c14a:	2b01      	cmp	r3, #1
 800c14c:	d00a      	beq.n	800c164 <_raise_r+0x4c>
 800c14e:	1c59      	adds	r1, r3, #1
 800c150:	d103      	bne.n	800c15a <_raise_r+0x42>
 800c152:	2316      	movs	r3, #22
 800c154:	6003      	str	r3, [r0, #0]
 800c156:	2001      	movs	r0, #1
 800c158:	e7e7      	b.n	800c12a <_raise_r+0x12>
 800c15a:	2100      	movs	r1, #0
 800c15c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c160:	4620      	mov	r0, r4
 800c162:	4798      	blx	r3
 800c164:	2000      	movs	r0, #0
 800c166:	e7e0      	b.n	800c12a <_raise_r+0x12>

0800c168 <raise>:
 800c168:	4b02      	ldr	r3, [pc, #8]	@ (800c174 <raise+0xc>)
 800c16a:	4601      	mov	r1, r0
 800c16c:	6818      	ldr	r0, [r3, #0]
 800c16e:	f7ff bfd3 	b.w	800c118 <_raise_r>
 800c172:	bf00      	nop
 800c174:	20000194 	.word	0x20000194

0800c178 <_kill_r>:
 800c178:	b538      	push	{r3, r4, r5, lr}
 800c17a:	4d07      	ldr	r5, [pc, #28]	@ (800c198 <_kill_r+0x20>)
 800c17c:	2300      	movs	r3, #0
 800c17e:	4604      	mov	r4, r0
 800c180:	4608      	mov	r0, r1
 800c182:	4611      	mov	r1, r2
 800c184:	602b      	str	r3, [r5, #0]
 800c186:	f7f6 fe91 	bl	8002eac <_kill>
 800c18a:	1c43      	adds	r3, r0, #1
 800c18c:	d102      	bne.n	800c194 <_kill_r+0x1c>
 800c18e:	682b      	ldr	r3, [r5, #0]
 800c190:	b103      	cbz	r3, 800c194 <_kill_r+0x1c>
 800c192:	6023      	str	r3, [r4, #0]
 800c194:	bd38      	pop	{r3, r4, r5, pc}
 800c196:	bf00      	nop
 800c198:	200046c8 	.word	0x200046c8

0800c19c <_getpid_r>:
 800c19c:	f7f6 be7e 	b.w	8002e9c <_getpid>

0800c1a0 <__swhatbuf_r>:
 800c1a0:	b570      	push	{r4, r5, r6, lr}
 800c1a2:	460c      	mov	r4, r1
 800c1a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1a8:	2900      	cmp	r1, #0
 800c1aa:	b096      	sub	sp, #88	@ 0x58
 800c1ac:	4615      	mov	r5, r2
 800c1ae:	461e      	mov	r6, r3
 800c1b0:	da0d      	bge.n	800c1ce <__swhatbuf_r+0x2e>
 800c1b2:	89a3      	ldrh	r3, [r4, #12]
 800c1b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c1b8:	f04f 0100 	mov.w	r1, #0
 800c1bc:	bf14      	ite	ne
 800c1be:	2340      	movne	r3, #64	@ 0x40
 800c1c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c1c4:	2000      	movs	r0, #0
 800c1c6:	6031      	str	r1, [r6, #0]
 800c1c8:	602b      	str	r3, [r5, #0]
 800c1ca:	b016      	add	sp, #88	@ 0x58
 800c1cc:	bd70      	pop	{r4, r5, r6, pc}
 800c1ce:	466a      	mov	r2, sp
 800c1d0:	f000 f848 	bl	800c264 <_fstat_r>
 800c1d4:	2800      	cmp	r0, #0
 800c1d6:	dbec      	blt.n	800c1b2 <__swhatbuf_r+0x12>
 800c1d8:	9901      	ldr	r1, [sp, #4]
 800c1da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c1de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c1e2:	4259      	negs	r1, r3
 800c1e4:	4159      	adcs	r1, r3
 800c1e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c1ea:	e7eb      	b.n	800c1c4 <__swhatbuf_r+0x24>

0800c1ec <__smakebuf_r>:
 800c1ec:	898b      	ldrh	r3, [r1, #12]
 800c1ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c1f0:	079d      	lsls	r5, r3, #30
 800c1f2:	4606      	mov	r6, r0
 800c1f4:	460c      	mov	r4, r1
 800c1f6:	d507      	bpl.n	800c208 <__smakebuf_r+0x1c>
 800c1f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c1fc:	6023      	str	r3, [r4, #0]
 800c1fe:	6123      	str	r3, [r4, #16]
 800c200:	2301      	movs	r3, #1
 800c202:	6163      	str	r3, [r4, #20]
 800c204:	b003      	add	sp, #12
 800c206:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c208:	ab01      	add	r3, sp, #4
 800c20a:	466a      	mov	r2, sp
 800c20c:	f7ff ffc8 	bl	800c1a0 <__swhatbuf_r>
 800c210:	9f00      	ldr	r7, [sp, #0]
 800c212:	4605      	mov	r5, r0
 800c214:	4639      	mov	r1, r7
 800c216:	4630      	mov	r0, r6
 800c218:	f7fd f840 	bl	800929c <_malloc_r>
 800c21c:	b948      	cbnz	r0, 800c232 <__smakebuf_r+0x46>
 800c21e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c222:	059a      	lsls	r2, r3, #22
 800c224:	d4ee      	bmi.n	800c204 <__smakebuf_r+0x18>
 800c226:	f023 0303 	bic.w	r3, r3, #3
 800c22a:	f043 0302 	orr.w	r3, r3, #2
 800c22e:	81a3      	strh	r3, [r4, #12]
 800c230:	e7e2      	b.n	800c1f8 <__smakebuf_r+0xc>
 800c232:	89a3      	ldrh	r3, [r4, #12]
 800c234:	6020      	str	r0, [r4, #0]
 800c236:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c23a:	81a3      	strh	r3, [r4, #12]
 800c23c:	9b01      	ldr	r3, [sp, #4]
 800c23e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c242:	b15b      	cbz	r3, 800c25c <__smakebuf_r+0x70>
 800c244:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c248:	4630      	mov	r0, r6
 800c24a:	f000 f81d 	bl	800c288 <_isatty_r>
 800c24e:	b128      	cbz	r0, 800c25c <__smakebuf_r+0x70>
 800c250:	89a3      	ldrh	r3, [r4, #12]
 800c252:	f023 0303 	bic.w	r3, r3, #3
 800c256:	f043 0301 	orr.w	r3, r3, #1
 800c25a:	81a3      	strh	r3, [r4, #12]
 800c25c:	89a3      	ldrh	r3, [r4, #12]
 800c25e:	431d      	orrs	r5, r3
 800c260:	81a5      	strh	r5, [r4, #12]
 800c262:	e7cf      	b.n	800c204 <__smakebuf_r+0x18>

0800c264 <_fstat_r>:
 800c264:	b538      	push	{r3, r4, r5, lr}
 800c266:	4d07      	ldr	r5, [pc, #28]	@ (800c284 <_fstat_r+0x20>)
 800c268:	2300      	movs	r3, #0
 800c26a:	4604      	mov	r4, r0
 800c26c:	4608      	mov	r0, r1
 800c26e:	4611      	mov	r1, r2
 800c270:	602b      	str	r3, [r5, #0]
 800c272:	f7f6 fe7b 	bl	8002f6c <_fstat>
 800c276:	1c43      	adds	r3, r0, #1
 800c278:	d102      	bne.n	800c280 <_fstat_r+0x1c>
 800c27a:	682b      	ldr	r3, [r5, #0]
 800c27c:	b103      	cbz	r3, 800c280 <_fstat_r+0x1c>
 800c27e:	6023      	str	r3, [r4, #0]
 800c280:	bd38      	pop	{r3, r4, r5, pc}
 800c282:	bf00      	nop
 800c284:	200046c8 	.word	0x200046c8

0800c288 <_isatty_r>:
 800c288:	b538      	push	{r3, r4, r5, lr}
 800c28a:	4d06      	ldr	r5, [pc, #24]	@ (800c2a4 <_isatty_r+0x1c>)
 800c28c:	2300      	movs	r3, #0
 800c28e:	4604      	mov	r4, r0
 800c290:	4608      	mov	r0, r1
 800c292:	602b      	str	r3, [r5, #0]
 800c294:	f7f6 fe7a 	bl	8002f8c <_isatty>
 800c298:	1c43      	adds	r3, r0, #1
 800c29a:	d102      	bne.n	800c2a2 <_isatty_r+0x1a>
 800c29c:	682b      	ldr	r3, [r5, #0]
 800c29e:	b103      	cbz	r3, 800c2a2 <_isatty_r+0x1a>
 800c2a0:	6023      	str	r3, [r4, #0]
 800c2a2:	bd38      	pop	{r3, r4, r5, pc}
 800c2a4:	200046c8 	.word	0x200046c8

0800c2a8 <_init>:
 800c2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2aa:	bf00      	nop
 800c2ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2ae:	bc08      	pop	{r3}
 800c2b0:	469e      	mov	lr, r3
 800c2b2:	4770      	bx	lr

0800c2b4 <_fini>:
 800c2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2b6:	bf00      	nop
 800c2b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2ba:	bc08      	pop	{r3}
 800c2bc:	469e      	mov	lr, r3
 800c2be:	4770      	bx	lr
