
stm-freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001007c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c0  0801024c  0801024c  0001124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801050c  0801050c  00012330  2**0
                  CONTENTS
  4 .ARM          00000008  0801050c  0801050c  0001150c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010514  08010514  00012330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010514  08010514  00011514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010518  08010518  00011518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000330  20000000  0801051c  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000051dc  20000330  0801084c  00012330  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000550c  0801084c  0001250c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00012330  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002565d  00000000  00000000  00012360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000631b  00000000  00000000  000379bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d38  00000000  00000000  0003dcd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001626  00000000  00000000  0003fa10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002996b  00000000  00000000  00041036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027301  00000000  00000000  0006a9a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef030  00000000  00000000  00091ca2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00180cd2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000082b8  00000000  00000000  00180d18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  00188fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000330 	.word	0x20000330
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08010234 	.word	0x08010234

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000334 	.word	0x20000334
 800020c:	08010234 	.word	0x08010234

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_uldivmod>:
 8000b3c:	b953      	cbnz	r3, 8000b54 <__aeabi_uldivmod+0x18>
 8000b3e:	b94a      	cbnz	r2, 8000b54 <__aeabi_uldivmod+0x18>
 8000b40:	2900      	cmp	r1, #0
 8000b42:	bf08      	it	eq
 8000b44:	2800      	cmpeq	r0, #0
 8000b46:	bf1c      	itt	ne
 8000b48:	f04f 31ff 	movne.w	r1, #4294967295
 8000b4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b50:	f000 b96a 	b.w	8000e28 <__aeabi_idiv0>
 8000b54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b5c:	f000 f806 	bl	8000b6c <__udivmoddi4>
 8000b60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b68:	b004      	add	sp, #16
 8000b6a:	4770      	bx	lr

08000b6c <__udivmoddi4>:
 8000b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b70:	9d08      	ldr	r5, [sp, #32]
 8000b72:	460c      	mov	r4, r1
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d14e      	bne.n	8000c16 <__udivmoddi4+0xaa>
 8000b78:	4694      	mov	ip, r2
 8000b7a:	458c      	cmp	ip, r1
 8000b7c:	4686      	mov	lr, r0
 8000b7e:	fab2 f282 	clz	r2, r2
 8000b82:	d962      	bls.n	8000c4a <__udivmoddi4+0xde>
 8000b84:	b14a      	cbz	r2, 8000b9a <__udivmoddi4+0x2e>
 8000b86:	f1c2 0320 	rsb	r3, r2, #32
 8000b8a:	4091      	lsls	r1, r2
 8000b8c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b94:	4319      	orrs	r1, r3
 8000b96:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b9a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b9e:	fa1f f68c 	uxth.w	r6, ip
 8000ba2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ba6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000baa:	fb07 1114 	mls	r1, r7, r4, r1
 8000bae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb2:	fb04 f106 	mul.w	r1, r4, r6
 8000bb6:	4299      	cmp	r1, r3
 8000bb8:	d90a      	bls.n	8000bd0 <__udivmoddi4+0x64>
 8000bba:	eb1c 0303 	adds.w	r3, ip, r3
 8000bbe:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bc2:	f080 8112 	bcs.w	8000dea <__udivmoddi4+0x27e>
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	f240 810f 	bls.w	8000dea <__udivmoddi4+0x27e>
 8000bcc:	3c02      	subs	r4, #2
 8000bce:	4463      	add	r3, ip
 8000bd0:	1a59      	subs	r1, r3, r1
 8000bd2:	fa1f f38e 	uxth.w	r3, lr
 8000bd6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bda:	fb07 1110 	mls	r1, r7, r0, r1
 8000bde:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be2:	fb00 f606 	mul.w	r6, r0, r6
 8000be6:	429e      	cmp	r6, r3
 8000be8:	d90a      	bls.n	8000c00 <__udivmoddi4+0x94>
 8000bea:	eb1c 0303 	adds.w	r3, ip, r3
 8000bee:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bf2:	f080 80fc 	bcs.w	8000dee <__udivmoddi4+0x282>
 8000bf6:	429e      	cmp	r6, r3
 8000bf8:	f240 80f9 	bls.w	8000dee <__udivmoddi4+0x282>
 8000bfc:	4463      	add	r3, ip
 8000bfe:	3802      	subs	r0, #2
 8000c00:	1b9b      	subs	r3, r3, r6
 8000c02:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c06:	2100      	movs	r1, #0
 8000c08:	b11d      	cbz	r5, 8000c12 <__udivmoddi4+0xa6>
 8000c0a:	40d3      	lsrs	r3, r2
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	428b      	cmp	r3, r1
 8000c18:	d905      	bls.n	8000c26 <__udivmoddi4+0xba>
 8000c1a:	b10d      	cbz	r5, 8000c20 <__udivmoddi4+0xb4>
 8000c1c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c20:	2100      	movs	r1, #0
 8000c22:	4608      	mov	r0, r1
 8000c24:	e7f5      	b.n	8000c12 <__udivmoddi4+0xa6>
 8000c26:	fab3 f183 	clz	r1, r3
 8000c2a:	2900      	cmp	r1, #0
 8000c2c:	d146      	bne.n	8000cbc <__udivmoddi4+0x150>
 8000c2e:	42a3      	cmp	r3, r4
 8000c30:	d302      	bcc.n	8000c38 <__udivmoddi4+0xcc>
 8000c32:	4290      	cmp	r0, r2
 8000c34:	f0c0 80f0 	bcc.w	8000e18 <__udivmoddi4+0x2ac>
 8000c38:	1a86      	subs	r6, r0, r2
 8000c3a:	eb64 0303 	sbc.w	r3, r4, r3
 8000c3e:	2001      	movs	r0, #1
 8000c40:	2d00      	cmp	r5, #0
 8000c42:	d0e6      	beq.n	8000c12 <__udivmoddi4+0xa6>
 8000c44:	e9c5 6300 	strd	r6, r3, [r5]
 8000c48:	e7e3      	b.n	8000c12 <__udivmoddi4+0xa6>
 8000c4a:	2a00      	cmp	r2, #0
 8000c4c:	f040 8090 	bne.w	8000d70 <__udivmoddi4+0x204>
 8000c50:	eba1 040c 	sub.w	r4, r1, ip
 8000c54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c58:	fa1f f78c 	uxth.w	r7, ip
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c66:	fb08 4416 	mls	r4, r8, r6, r4
 8000c6a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c6e:	fb07 f006 	mul.w	r0, r7, r6
 8000c72:	4298      	cmp	r0, r3
 8000c74:	d908      	bls.n	8000c88 <__udivmoddi4+0x11c>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c7e:	d202      	bcs.n	8000c86 <__udivmoddi4+0x11a>
 8000c80:	4298      	cmp	r0, r3
 8000c82:	f200 80cd 	bhi.w	8000e20 <__udivmoddi4+0x2b4>
 8000c86:	4626      	mov	r6, r4
 8000c88:	1a1c      	subs	r4, r3, r0
 8000c8a:	fa1f f38e 	uxth.w	r3, lr
 8000c8e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c92:	fb08 4410 	mls	r4, r8, r0, r4
 8000c96:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c9a:	fb00 f707 	mul.w	r7, r0, r7
 8000c9e:	429f      	cmp	r7, r3
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0x148>
 8000ca2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000caa:	d202      	bcs.n	8000cb2 <__udivmoddi4+0x146>
 8000cac:	429f      	cmp	r7, r3
 8000cae:	f200 80b0 	bhi.w	8000e12 <__udivmoddi4+0x2a6>
 8000cb2:	4620      	mov	r0, r4
 8000cb4:	1bdb      	subs	r3, r3, r7
 8000cb6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cba:	e7a5      	b.n	8000c08 <__udivmoddi4+0x9c>
 8000cbc:	f1c1 0620 	rsb	r6, r1, #32
 8000cc0:	408b      	lsls	r3, r1
 8000cc2:	fa22 f706 	lsr.w	r7, r2, r6
 8000cc6:	431f      	orrs	r7, r3
 8000cc8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ccc:	fa04 f301 	lsl.w	r3, r4, r1
 8000cd0:	ea43 030c 	orr.w	r3, r3, ip
 8000cd4:	40f4      	lsrs	r4, r6
 8000cd6:	fa00 f801 	lsl.w	r8, r0, r1
 8000cda:	0c38      	lsrs	r0, r7, #16
 8000cdc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ce0:	fbb4 fef0 	udiv	lr, r4, r0
 8000ce4:	fa1f fc87 	uxth.w	ip, r7
 8000ce8:	fb00 441e 	mls	r4, r0, lr, r4
 8000cec:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cf0:	fb0e f90c 	mul.w	r9, lr, ip
 8000cf4:	45a1      	cmp	r9, r4
 8000cf6:	fa02 f201 	lsl.w	r2, r2, r1
 8000cfa:	d90a      	bls.n	8000d12 <__udivmoddi4+0x1a6>
 8000cfc:	193c      	adds	r4, r7, r4
 8000cfe:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d02:	f080 8084 	bcs.w	8000e0e <__udivmoddi4+0x2a2>
 8000d06:	45a1      	cmp	r9, r4
 8000d08:	f240 8081 	bls.w	8000e0e <__udivmoddi4+0x2a2>
 8000d0c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d10:	443c      	add	r4, r7
 8000d12:	eba4 0409 	sub.w	r4, r4, r9
 8000d16:	fa1f f983 	uxth.w	r9, r3
 8000d1a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d1e:	fb00 4413 	mls	r4, r0, r3, r4
 8000d22:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d26:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d2a:	45a4      	cmp	ip, r4
 8000d2c:	d907      	bls.n	8000d3e <__udivmoddi4+0x1d2>
 8000d2e:	193c      	adds	r4, r7, r4
 8000d30:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d34:	d267      	bcs.n	8000e06 <__udivmoddi4+0x29a>
 8000d36:	45a4      	cmp	ip, r4
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0x29a>
 8000d3a:	3b02      	subs	r3, #2
 8000d3c:	443c      	add	r4, r7
 8000d3e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d42:	fba0 9302 	umull	r9, r3, r0, r2
 8000d46:	eba4 040c 	sub.w	r4, r4, ip
 8000d4a:	429c      	cmp	r4, r3
 8000d4c:	46ce      	mov	lr, r9
 8000d4e:	469c      	mov	ip, r3
 8000d50:	d351      	bcc.n	8000df6 <__udivmoddi4+0x28a>
 8000d52:	d04e      	beq.n	8000df2 <__udivmoddi4+0x286>
 8000d54:	b155      	cbz	r5, 8000d6c <__udivmoddi4+0x200>
 8000d56:	ebb8 030e 	subs.w	r3, r8, lr
 8000d5a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d5e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d62:	40cb      	lsrs	r3, r1
 8000d64:	431e      	orrs	r6, r3
 8000d66:	40cc      	lsrs	r4, r1
 8000d68:	e9c5 6400 	strd	r6, r4, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	e750      	b.n	8000c12 <__udivmoddi4+0xa6>
 8000d70:	f1c2 0320 	rsb	r3, r2, #32
 8000d74:	fa20 f103 	lsr.w	r1, r0, r3
 8000d78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d80:	4094      	lsls	r4, r2
 8000d82:	430c      	orrs	r4, r1
 8000d84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d88:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d8c:	fa1f f78c 	uxth.w	r7, ip
 8000d90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d94:	fb08 3110 	mls	r1, r8, r0, r3
 8000d98:	0c23      	lsrs	r3, r4, #16
 8000d9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9e:	fb00 f107 	mul.w	r1, r0, r7
 8000da2:	4299      	cmp	r1, r3
 8000da4:	d908      	bls.n	8000db8 <__udivmoddi4+0x24c>
 8000da6:	eb1c 0303 	adds.w	r3, ip, r3
 8000daa:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dae:	d22c      	bcs.n	8000e0a <__udivmoddi4+0x29e>
 8000db0:	4299      	cmp	r1, r3
 8000db2:	d92a      	bls.n	8000e0a <__udivmoddi4+0x29e>
 8000db4:	3802      	subs	r0, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000dc0:	fb08 3311 	mls	r3, r8, r1, r3
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb01 f307 	mul.w	r3, r1, r7
 8000dcc:	42a3      	cmp	r3, r4
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x276>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000dd8:	d213      	bcs.n	8000e02 <__udivmoddi4+0x296>
 8000dda:	42a3      	cmp	r3, r4
 8000ddc:	d911      	bls.n	8000e02 <__udivmoddi4+0x296>
 8000dde:	3902      	subs	r1, #2
 8000de0:	4464      	add	r4, ip
 8000de2:	1ae4      	subs	r4, r4, r3
 8000de4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000de8:	e739      	b.n	8000c5e <__udivmoddi4+0xf2>
 8000dea:	4604      	mov	r4, r0
 8000dec:	e6f0      	b.n	8000bd0 <__udivmoddi4+0x64>
 8000dee:	4608      	mov	r0, r1
 8000df0:	e706      	b.n	8000c00 <__udivmoddi4+0x94>
 8000df2:	45c8      	cmp	r8, r9
 8000df4:	d2ae      	bcs.n	8000d54 <__udivmoddi4+0x1e8>
 8000df6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dfa:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dfe:	3801      	subs	r0, #1
 8000e00:	e7a8      	b.n	8000d54 <__udivmoddi4+0x1e8>
 8000e02:	4631      	mov	r1, r6
 8000e04:	e7ed      	b.n	8000de2 <__udivmoddi4+0x276>
 8000e06:	4603      	mov	r3, r0
 8000e08:	e799      	b.n	8000d3e <__udivmoddi4+0x1d2>
 8000e0a:	4630      	mov	r0, r6
 8000e0c:	e7d4      	b.n	8000db8 <__udivmoddi4+0x24c>
 8000e0e:	46d6      	mov	lr, sl
 8000e10:	e77f      	b.n	8000d12 <__udivmoddi4+0x1a6>
 8000e12:	4463      	add	r3, ip
 8000e14:	3802      	subs	r0, #2
 8000e16:	e74d      	b.n	8000cb4 <__udivmoddi4+0x148>
 8000e18:	4606      	mov	r6, r0
 8000e1a:	4623      	mov	r3, r4
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	e70f      	b.n	8000c40 <__udivmoddi4+0xd4>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	e730      	b.n	8000c88 <__udivmoddi4+0x11c>
 8000e26:	bf00      	nop

08000e28 <__aeabi_idiv0>:
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop

08000e2c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e32:	463b      	mov	r3, r7
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e3e:	4b21      	ldr	r3, [pc, #132]	@ (8000ec4 <MX_ADC1_Init+0x98>)
 8000e40:	4a21      	ldr	r2, [pc, #132]	@ (8000ec8 <MX_ADC1_Init+0x9c>)
 8000e42:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e44:	4b1f      	ldr	r3, [pc, #124]	@ (8000ec4 <MX_ADC1_Init+0x98>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e4a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ec4 <MX_ADC1_Init+0x98>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000e50:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec4 <MX_ADC1_Init+0x98>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e56:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec4 <MX_ADC1_Init+0x98>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e5c:	4b19      	ldr	r3, [pc, #100]	@ (8000ec4 <MX_ADC1_Init+0x98>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e64:	4b17      	ldr	r3, [pc, #92]	@ (8000ec4 <MX_ADC1_Init+0x98>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e6a:	4b16      	ldr	r3, [pc, #88]	@ (8000ec4 <MX_ADC1_Init+0x98>)
 8000e6c:	4a17      	ldr	r2, [pc, #92]	@ (8000ecc <MX_ADC1_Init+0xa0>)
 8000e6e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e70:	4b14      	ldr	r3, [pc, #80]	@ (8000ec4 <MX_ADC1_Init+0x98>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e76:	4b13      	ldr	r3, [pc, #76]	@ (8000ec4 <MX_ADC1_Init+0x98>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e7c:	4b11      	ldr	r3, [pc, #68]	@ (8000ec4 <MX_ADC1_Init+0x98>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e84:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec4 <MX_ADC1_Init+0x98>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e8a:	480e      	ldr	r0, [pc, #56]	@ (8000ec4 <MX_ADC1_Init+0x98>)
 8000e8c:	f001 fda2 	bl	80029d4 <HAL_ADC_Init>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000e96:	f001 f905 	bl	80020a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000e9a:	2307      	movs	r3, #7
 8000e9c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ea6:	463b      	mov	r3, r7
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4806      	ldr	r0, [pc, #24]	@ (8000ec4 <MX_ADC1_Init+0x98>)
 8000eac:	f001 ff74 	bl	8002d98 <HAL_ADC_ConfigChannel>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000eb6:	f001 f8f5 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000eba:	bf00      	nop
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	2000034c 	.word	0x2000034c
 8000ec8:	40012000 	.word	0x40012000
 8000ecc:	0f000001 	.word	0x0f000001

08000ed0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08a      	sub	sp, #40	@ 0x28
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a17      	ldr	r2, [pc, #92]	@ (8000f4c <HAL_ADC_MspInit+0x7c>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d127      	bne.n	8000f42 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	4b16      	ldr	r3, [pc, #88]	@ (8000f50 <HAL_ADC_MspInit+0x80>)
 8000ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000efa:	4a15      	ldr	r2, [pc, #84]	@ (8000f50 <HAL_ADC_MspInit+0x80>)
 8000efc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f00:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f02:	4b13      	ldr	r3, [pc, #76]	@ (8000f50 <HAL_ADC_MspInit+0x80>)
 8000f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	4b0f      	ldr	r3, [pc, #60]	@ (8000f50 <HAL_ADC_MspInit+0x80>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f16:	4a0e      	ldr	r2, [pc, #56]	@ (8000f50 <HAL_ADC_MspInit+0x80>)
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f50 <HAL_ADC_MspInit+0x80>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f2a:	2380      	movs	r3, #128	@ 0x80
 8000f2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f36:	f107 0314 	add.w	r3, r7, #20
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4805      	ldr	r0, [pc, #20]	@ (8000f54 <HAL_ADC_MspInit+0x84>)
 8000f3e:	f003 f8cd 	bl	80040dc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f42:	bf00      	nop
 8000f44:	3728      	adds	r7, #40	@ 0x28
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40012000 	.word	0x40012000
 8000f50:	40023800 	.word	0x40023800
 8000f54:	40020000 	.word	0x40020000

08000f58 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08a      	sub	sp, #40	@ 0x28
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000f5e:	4b25      	ldr	r3, [pc, #148]	@ (8000ff4 <MX_CAN1_Init+0x9c>)
 8000f60:	4a25      	ldr	r2, [pc, #148]	@ (8000ff8 <MX_CAN1_Init+0xa0>)
 8000f62:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8000f64:	4b23      	ldr	r3, [pc, #140]	@ (8000ff4 <MX_CAN1_Init+0x9c>)
 8000f66:	2203      	movs	r2, #3
 8000f68:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000f6a:	4b22      	ldr	r3, [pc, #136]	@ (8000ff4 <MX_CAN1_Init+0x9c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f70:	4b20      	ldr	r3, [pc, #128]	@ (8000ff4 <MX_CAN1_Init+0x9c>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000f76:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff4 <MX_CAN1_Init+0x9c>)
 8000f78:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000f7c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000f7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ff4 <MX_CAN1_Init+0x9c>)
 8000f80:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000f84:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000f86:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff4 <MX_CAN1_Init+0x9c>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000f8c:	4b19      	ldr	r3, [pc, #100]	@ (8000ff4 <MX_CAN1_Init+0x9c>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000f92:	4b18      	ldr	r3, [pc, #96]	@ (8000ff4 <MX_CAN1_Init+0x9c>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000f98:	4b16      	ldr	r3, [pc, #88]	@ (8000ff4 <MX_CAN1_Init+0x9c>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000f9e:	4b15      	ldr	r3, [pc, #84]	@ (8000ff4 <MX_CAN1_Init+0x9c>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000fa4:	4b13      	ldr	r3, [pc, #76]	@ (8000ff4 <MX_CAN1_Init+0x9c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000faa:	4812      	ldr	r0, [pc, #72]	@ (8000ff4 <MX_CAN1_Init+0x9c>)
 8000fac:	f002 f922 	bl	80031f4 <HAL_CAN_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000fb6:	f001 f875 	bl	80020a4 <Error_Handler>
//  filterConfig.FilterMaskIdLow = 0x0000;            // Not used in standard ID
//  filterConfig.FilterFIFOAssignment = CAN_RX_FIFO0; // Assign to FIFO0
//  filterConfig.FilterActivation = ENABLE;           // Enable the filter


  filterConfig.FilterBank = 0;                      // Use Filter Bank 0
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
  filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;  // Mask mode
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61bb      	str	r3, [r7, #24]
  filterConfig.FilterScale = CAN_FILTERSCALE_32BIT; // 32-bit scale
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	61fb      	str	r3, [r7, #28]
  filterConfig.FilterIdHigh = 0x100 << 5;           // Base ID to match (0x100 << 5)
 8000fc6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fca:	603b      	str	r3, [r7, #0]
  filterConfig.FilterIdLow = 0x0000;                // Not used in standard ID
 8000fcc:	2300      	movs	r3, #0
 8000fce:	607b      	str	r3, [r7, #4]
  filterConfig.FilterMaskIdHigh = 0x7FC << 5;       // Mask to allow 0x101 and 0x102
 8000fd0:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8000fd4:	60bb      	str	r3, [r7, #8]
  filterConfig.FilterMaskIdLow = 0x0000;            // Not used in standard ID
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60fb      	str	r3, [r7, #12]
  filterConfig.FilterFIFOAssignment = CAN_RX_FIFO1; // Assign to FIFO0
 8000fda:	2301      	movs	r3, #1
 8000fdc:	613b      	str	r3, [r7, #16]
  filterConfig.FilterActivation = ENABLE;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	623b      	str	r3, [r7, #32]

  HAL_CAN_ConfigFilter(&hcan1, &filterConfig);
 8000fe2:	463b      	mov	r3, r7
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4803      	ldr	r0, [pc, #12]	@ (8000ff4 <MX_CAN1_Init+0x9c>)
 8000fe8:	f002 fa00 	bl	80033ec <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_Init 2 */

}
 8000fec:	bf00      	nop
 8000fee:	3728      	adds	r7, #40	@ 0x28
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20000394 	.word	0x20000394
 8000ff8:	40006400 	.word	0x40006400

08000ffc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08a      	sub	sp, #40	@ 0x28
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a2a      	ldr	r2, [pc, #168]	@ (80010c4 <HAL_CAN_MspInit+0xc8>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d14d      	bne.n	80010ba <HAL_CAN_MspInit+0xbe>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	613b      	str	r3, [r7, #16]
 8001022:	4b29      	ldr	r3, [pc, #164]	@ (80010c8 <HAL_CAN_MspInit+0xcc>)
 8001024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001026:	4a28      	ldr	r2, [pc, #160]	@ (80010c8 <HAL_CAN_MspInit+0xcc>)
 8001028:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800102c:	6413      	str	r3, [r2, #64]	@ 0x40
 800102e:	4b26      	ldr	r3, [pc, #152]	@ (80010c8 <HAL_CAN_MspInit+0xcc>)
 8001030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001032:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001036:	613b      	str	r3, [r7, #16]
 8001038:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	4b22      	ldr	r3, [pc, #136]	@ (80010c8 <HAL_CAN_MspInit+0xcc>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001042:	4a21      	ldr	r2, [pc, #132]	@ (80010c8 <HAL_CAN_MspInit+0xcc>)
 8001044:	f043 0302 	orr.w	r3, r3, #2
 8001048:	6313      	str	r3, [r2, #48]	@ 0x30
 800104a:	4b1f      	ldr	r3, [pc, #124]	@ (80010c8 <HAL_CAN_MspInit+0xcc>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001056:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800105a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105c:	2302      	movs	r3, #2
 800105e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001060:	2301      	movs	r3, #1
 8001062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001064:	2303      	movs	r3, #3
 8001066:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001068:	2309      	movs	r3, #9
 800106a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	4619      	mov	r1, r3
 8001072:	4816      	ldr	r0, [pc, #88]	@ (80010cc <HAL_CAN_MspInit+0xd0>)
 8001074:	f003 f832 	bl	80040dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001078:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800107c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107e:	2302      	movs	r3, #2
 8001080:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001086:	2303      	movs	r3, #3
 8001088:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800108a:	2309      	movs	r3, #9
 800108c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	4619      	mov	r1, r3
 8001094:	480d      	ldr	r0, [pc, #52]	@ (80010cc <HAL_CAN_MspInit+0xd0>)
 8001096:	f003 f821 	bl	80040dc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800109a:	2200      	movs	r2, #0
 800109c:	2105      	movs	r1, #5
 800109e:	2014      	movs	r0, #20
 80010a0:	f002 fff2 	bl	8004088 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80010a4:	2014      	movs	r0, #20
 80010a6:	f003 f80b 	bl	80040c0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2105      	movs	r1, #5
 80010ae:	2015      	movs	r0, #21
 80010b0:	f002 ffea 	bl	8004088 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80010b4:	2015      	movs	r0, #21
 80010b6:	f003 f803 	bl	80040c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80010ba:	bf00      	nop
 80010bc:	3728      	adds	r7, #40	@ 0x28
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40006400 	.word	0x40006400
 80010c8:	40023800 	.word	0x40023800
 80010cc:	40020400 	.word	0x40020400

080010d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	4a07      	ldr	r2, [pc, #28]	@ (80010fc <vApplicationGetIdleTaskMemory+0x2c>)
 80010e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	4a06      	ldr	r2, [pc, #24]	@ (8001100 <vApplicationGetIdleTaskMemory+0x30>)
 80010e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2280      	movs	r2, #128	@ 0x80
 80010ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80010ee:	bf00      	nop
 80010f0:	3714      	adds	r7, #20
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	20000458 	.word	0x20000458
 8001100:	200004f8 	.word	0x200004f8

08001104 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001104:	b5b0      	push	{r4, r5, r7, lr}
 8001106:	b09a      	sub	sp, #104	@ 0x68
 8001108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	telemetry_data.tRpm = 0;
 800110a:	4b45      	ldr	r3, [pc, #276]	@ (8001220 <MX_FREERTOS_Init+0x11c>)
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
	telemetry_data.tRpm = 0;
 8001110:	4b43      	ldr	r3, [pc, #268]	@ (8001220 <MX_FREERTOS_Init+0x11c>)
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
	telemetry_data.tSpeedKmh = 0;
 8001116:	4b42      	ldr	r3, [pc, #264]	@ (8001220 <MX_FREERTOS_Init+0x11c>)
 8001118:	2200      	movs	r2, #0
 800111a:	609a      	str	r2, [r3, #8]
	telemetry_data.tHasDRS = 0;
 800111c:	4b40      	ldr	r3, [pc, #256]	@ (8001220 <MX_FREERTOS_Init+0x11c>)
 800111e:	2200      	movs	r2, #0
 8001120:	60da      	str	r2, [r3, #12]
	telemetry_data.tDrs = 0;
 8001122:	4b3f      	ldr	r3, [pc, #252]	@ (8001220 <MX_FREERTOS_Init+0x11c>)
 8001124:	2200      	movs	r2, #0
 8001126:	611a      	str	r2, [r3, #16]
	telemetry_data.tPitLim = 0;
 8001128:	4b3d      	ldr	r3, [pc, #244]	@ (8001220 <MX_FREERTOS_Init+0x11c>)
 800112a:	2200      	movs	r2, #0
 800112c:	615a      	str	r2, [r3, #20]
	telemetry_data.tFuel = 0;
 800112e:	4b3c      	ldr	r3, [pc, #240]	@ (8001220 <MX_FREERTOS_Init+0x11c>)
 8001130:	2200      	movs	r2, #0
 8001132:	619a      	str	r2, [r3, #24]
	telemetry_data.tBrakeBias = 0;
 8001134:	4b3a      	ldr	r3, [pc, #232]	@ (8001220 <MX_FREERTOS_Init+0x11c>)
 8001136:	2200      	movs	r2, #0
 8001138:	61da      	str	r2, [r3, #28]
	gFfbSignal = 0;
 800113a:	4b3a      	ldr	r3, [pc, #232]	@ (8001224 <MX_FREERTOS_Init+0x120>)
 800113c:	f04f 0200 	mov.w	r2, #0
 8001140:	601a      	str	r2, [r3, #0]

	HIDReport.steering = 0;        // Steering data (0-255)
 8001142:	4b39      	ldr	r3, [pc, #228]	@ (8001228 <MX_FREERTOS_Init+0x124>)
 8001144:	2200      	movs	r2, #0
 8001146:	701a      	strb	r2, [r3, #0]
	HIDReport.throttle = 0;        // Throttle data (0-255)
 8001148:	4b37      	ldr	r3, [pc, #220]	@ (8001228 <MX_FREERTOS_Init+0x124>)
 800114a:	2200      	movs	r2, #0
 800114c:	705a      	strb	r2, [r3, #1]
	HIDReport.brake = 0;           // Brake data (0-255)
 800114e:	4b36      	ldr	r3, [pc, #216]	@ (8001228 <MX_FREERTOS_Init+0x124>)
 8001150:	2200      	movs	r2, #0
 8001152:	709a      	strb	r2, [r3, #2]
	HIDReport.clutch = 0;         // Clutch data (0-255)
 8001154:	4b34      	ldr	r3, [pc, #208]	@ (8001228 <MX_FREERTOS_Init+0x124>)
 8001156:	2200      	movs	r2, #0
 8001158:	70da      	strb	r2, [r3, #3]
	HIDReport.buttons = 0;   // Each bit represents a button'
 800115a:	4b33      	ldr	r3, [pc, #204]	@ (8001228 <MX_FREERTOS_Init+0x124>)
 800115c:	2200      	movs	r2, #0
 800115e:	605a      	str	r2, [r3, #4]
	HIDReport.rz = 0;
 8001160:	4b31      	ldr	r3, [pc, #196]	@ (8001228 <MX_FREERTOS_Init+0x124>)
 8001162:	2200      	movs	r2, #0
 8001164:	721a      	strb	r2, [r3, #8]
	HIDReport.slider = 0;
 8001166:	4b30      	ldr	r3, [pc, #192]	@ (8001228 <MX_FREERTOS_Init+0x124>)
 8001168:	2200      	movs	r2, #0
 800116a:	725a      	strb	r2, [r3, #9]
	memset(&telemetry_data, 0, sizeof(telemetry_packet)); // Zero-initialize
 800116c:	2228      	movs	r2, #40	@ 0x28
 800116e:	2100      	movs	r1, #0
 8001170:	482b      	ldr	r0, [pc, #172]	@ (8001220 <MX_FREERTOS_Init+0x11c>)
 8001172:	f00e f9ab 	bl	800f4cc <memset>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of spiSendMutex */
  osSemaphoreDef(spiSendMutex);
 8001176:	2300      	movs	r3, #0
 8001178:	663b      	str	r3, [r7, #96]	@ 0x60
 800117a:	2300      	movs	r3, #0
 800117c:	667b      	str	r3, [r7, #100]	@ 0x64
  spiSendMutexHandle = osSemaphoreCreate(osSemaphore(spiSendMutex), 1);
 800117e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001182:	2101      	movs	r1, #1
 8001184:	4618      	mov	r0, r3
 8001186:	f00b fb20 	bl	800c7ca <osSemaphoreCreate>
 800118a:	4603      	mov	r3, r0
 800118c:	4a27      	ldr	r2, [pc, #156]	@ (800122c <MX_FREERTOS_Init+0x128>)
 800118e:	6013      	str	r3, [r2, #0]

  /* definition and creation of uartMutex */
  osSemaphoreDef(uartMutex);
 8001190:	2300      	movs	r3, #0
 8001192:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001194:	2300      	movs	r3, #0
 8001196:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uartMutexHandle = osSemaphoreCreate(osSemaphore(uartMutex), 1);
 8001198:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800119c:	2101      	movs	r1, #1
 800119e:	4618      	mov	r0, r3
 80011a0:	f00b fb13 	bl	800c7ca <osSemaphoreCreate>
 80011a4:	4603      	mov	r3, r0
 80011a6:	4a22      	ldr	r2, [pc, #136]	@ (8001230 <MX_FREERTOS_Init+0x12c>)
 80011a8:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80011aa:	4b22      	ldr	r3, [pc, #136]	@ (8001234 <MX_FREERTOS_Init+0x130>)
 80011ac:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80011b0:	461d      	mov	r5, r3
 80011b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80011be:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80011c2:	2100      	movs	r1, #0
 80011c4:	4618      	mov	r0, r3
 80011c6:	f00b faa0 	bl	800c70a <osThreadCreate>
 80011ca:	4603      	mov	r3, r0
 80011cc:	4a1a      	ldr	r2, [pc, #104]	@ (8001238 <MX_FREERTOS_Init+0x134>)
 80011ce:	6013      	str	r3, [r2, #0]

  /* definition and creation of ControlLoopTask */
  osThreadDef(ControlLoopTask, StartControlLoop, osPriorityHigh, 0, 512);
 80011d0:	4b1a      	ldr	r3, [pc, #104]	@ (800123c <MX_FREERTOS_Init+0x138>)
 80011d2:	f107 0420 	add.w	r4, r7, #32
 80011d6:	461d      	mov	r5, r3
 80011d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ControlLoopTaskHandle = osThreadCreate(osThread(ControlLoopTask), NULL);
 80011e4:	f107 0320 	add.w	r3, r7, #32
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f00b fa8d 	bl	800c70a <osThreadCreate>
 80011f0:	4603      	mov	r3, r0
 80011f2:	4a13      	ldr	r2, [pc, #76]	@ (8001240 <MX_FREERTOS_Init+0x13c>)
 80011f4:	6013      	str	r3, [r2, #0]

  /* definition and creation of CommLoopTask */
  osThreadDef(CommLoopTask, StartCommLoopTask, osPriorityNormal, 0, 512);
 80011f6:	4b13      	ldr	r3, [pc, #76]	@ (8001244 <MX_FREERTOS_Init+0x140>)
 80011f8:	1d3c      	adds	r4, r7, #4
 80011fa:	461d      	mov	r5, r3
 80011fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001200:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001204:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CommLoopTaskHandle = osThreadCreate(osThread(CommLoopTask), NULL);
 8001208:	1d3b      	adds	r3, r7, #4
 800120a:	2100      	movs	r1, #0
 800120c:	4618      	mov	r0, r3
 800120e:	f00b fa7c 	bl	800c70a <osThreadCreate>
 8001212:	4603      	mov	r3, r0
 8001214:	4a0c      	ldr	r2, [pc, #48]	@ (8001248 <MX_FREERTOS_Init+0x144>)
 8001216:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001218:	bf00      	nop
 800121a:	3768      	adds	r7, #104	@ 0x68
 800121c:	46bd      	mov	sp, r7
 800121e:	bdb0      	pop	{r4, r5, r7, pc}
 8001220:	200003bc 	.word	0x200003bc
 8001224:	20000438 	.word	0x20000438
 8001228:	200003e4 	.word	0x200003e4
 800122c:	20000450 	.word	0x20000450
 8001230:	20000454 	.word	0x20000454
 8001234:	08010258 	.word	0x08010258
 8001238:	20000444 	.word	0x20000444
 800123c:	08010284 	.word	0x08010284
 8001240:	20000448 	.word	0x20000448
 8001244:	080102b0 	.word	0x080102b0
 8001248:	2000044c 	.word	0x2000044c

0800124c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
 8001254:	bf00      	nop
 8001256:	e7fd      	b.n	8001254 <StartDefaultTask+0x8>

08001258 <StartControlLoop>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartControlLoop */
void StartControlLoop(void const * argument)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08e      	sub	sp, #56	@ 0x38
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartControlLoop */
  /* Infinite loop */
  for(;;)
  {
	  float total_force = 0.0;
 8001260:	f04f 0300 	mov.w	r3, #0
 8001264:	637b      	str	r3, [r7, #52]	@ 0x34
	  const float Kp = 1.0f;
 8001266:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800126a:	633b      	str	r3, [r7, #48]	@ 0x30

	  for (;;) {
		  // Step 1: Retrieve current force feedback signal (e.g., from game data).
		  float force_feedback_signal = gFfbSignal;
 800126c:	4b57      	ldr	r3, [pc, #348]	@ (80013cc <StartControlLoop+0x174>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	62fb      	str	r3, [r7, #44]	@ 0x2c

		  // Step 2: Calculate individual forces based on physics:
		  float inertia_force = calculate_inertia(force_feedback_signal, angular_velocity);
 8001272:	4b57      	ldr	r3, [pc, #348]	@ (80013d0 <StartControlLoop+0x178>)
 8001274:	edd3 7a00 	vldr	s15, [r3]
 8001278:	eef0 0a67 	vmov.f32	s1, s15
 800127c:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8001280:	f000 f9de 	bl	8001640 <calculate_inertia>
 8001284:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
		  float damping_force = calculate_damping(angular_velocity);
 8001288:	4b51      	ldr	r3, [pc, #324]	@ (80013d0 <StartControlLoop+0x178>)
 800128a:	edd3 7a00 	vldr	s15, [r3]
 800128e:	eeb0 0a67 	vmov.f32	s0, s15
 8001292:	f000 fa05 	bl	80016a0 <calculate_damping>
 8001296:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
		  float friction_force = calculate_friction(angular_velocity);
 800129a:	4b4d      	ldr	r3, [pc, #308]	@ (80013d0 <StartControlLoop+0x178>)
 800129c:	edd3 7a00 	vldr	s15, [r3]
 80012a0:	eeb0 0a67 	vmov.f32	s0, s15
 80012a4:	f000 fa14 	bl	80016d0 <calculate_friction>
 80012a8:	ed87 0a08 	vstr	s0, [r7, #32]
		  float lock_force = calculate_lock(wheel_angle);
 80012ac:	4b49      	ldr	r3, [pc, #292]	@ (80013d4 <StartControlLoop+0x17c>)
 80012ae:	edd3 7a00 	vldr	s15, [r3]
 80012b2:	eeb0 0a67 	vmov.f32	s0, s15
 80012b6:	f000 fa35 	bl	8001724 <calculate_lock>
 80012ba:	ed87 0a07 	vstr	s0, [r7, #28]

		  // Step 3: Sum all forces and scale to PWM range:
		  total_force = force_feedback_signal + inertia_force + damping_force + friction_force + lock_force;
 80012be:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80012c2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80012c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012ca:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80012ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012d2:	edd7 7a08 	vldr	s15, [r7, #32]
 80012d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012da:	ed97 7a07 	vldr	s14, [r7, #28]
 80012de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012e2:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

		  // Strength gain
		  total_force *= gStrength;
 80012e6:	4b3c      	ldr	r3, [pc, #240]	@ (80013d8 <StartControlLoop+0x180>)
 80012e8:	edd3 7a00 	vldr	s15, [r3]
 80012ec:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80012f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012f4:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

		  total_force = constrain(total_force, -1.0, 1.0);
 80012f8:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 80012fc:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 8001300:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 8001304:	f000 f972 	bl	80015ec <constrain>
 8001308:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34

		  // Deadband
		  const float FORCE_DEADBAND_THRESHOLD = 0.05f; // Adjust as needed
 800130c:	4b33      	ldr	r3, [pc, #204]	@ (80013dc <StartControlLoop+0x184>)
 800130e:	61bb      	str	r3, [r7, #24]
		  const float ANGLE_DEADBAND_THRESHOLD = 50.0f; // Adjust as needed
 8001310:	4b33      	ldr	r3, [pc, #204]	@ (80013e0 <StartControlLoop+0x188>)
 8001312:	617b      	str	r3, [r7, #20]
		  float error = wheel_angle;
 8001314:	4b2f      	ldr	r3, [pc, #188]	@ (80013d4 <StartControlLoop+0x17c>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	613b      	str	r3, [r7, #16]
		  if (fabsf(error) < ANGLE_DEADBAND_THRESHOLD)  {
 800131a:	edd7 7a04 	vldr	s15, [r7, #16]
 800131e:	eef0 7ae7 	vabs.f32	s15, s15
 8001322:	ed97 7a05 	vldr	s14, [r7, #20]
 8001326:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800132a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800132e:	dd03      	ble.n	8001338 <StartControlLoop+0xe0>
			  total_force = 0.0f;
 8001330:	f04f 0300 	mov.w	r3, #0
 8001334:	637b      	str	r3, [r7, #52]	@ 0x34
 8001336:	e017      	b.n	8001368 <StartControlLoop+0x110>
		  } else { // TEST CODE: gives increasing feedback farther away from center
			  total_force = -Kp * (error / WHEEL_MAX_ANGLE);
 8001338:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800133c:	eeb1 7a67 	vneg.f32	s14, s15
 8001340:	edd7 6a04 	vldr	s13, [r7, #16]
 8001344:	ed9f 6a27 	vldr	s12, [pc, #156]	@ 80013e4 <StartControlLoop+0x18c>
 8001348:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800134c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001350:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
			  total_force = constrain(total_force, -1.0f, 1.0f);
 8001354:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8001358:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 800135c:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 8001360:	f000 f944 	bl	80015ec <constrain>
 8001364:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
		  }

		  // Step 4: Map total_force to PWM and determine direction
		  float pwm_output = scale_to_pwm(total_force);
 8001368:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 800136c:	f000 fa20 	bl	80017b0 <scale_to_pwm>
 8001370:	ed87 0a03 	vstr	s0, [r7, #12]
		  // 0 is negative direction; 1 is positive direction
		  uint8_t motor_direction = (total_force >= 0) ? 1 : 0;
 8001374:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001378:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800137c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001380:	bfac      	ite	ge
 8001382:	2301      	movge	r3, #1
 8001384:	2300      	movlt	r3, #0
 8001386:	b2db      	uxtb	r3, r3
 8001388:	72fb      	strb	r3, [r7, #11]

		  // Debug
		  gDir = motor_direction;
 800138a:	4a17      	ldr	r2, [pc, #92]	@ (80013e8 <StartControlLoop+0x190>)
 800138c:	7afb      	ldrb	r3, [r7, #11]
 800138e:	7013      	strb	r3, [r2, #0]
		  gTotalforce = total_force;
 8001390:	4a16      	ldr	r2, [pc, #88]	@ (80013ec <StartControlLoop+0x194>)
 8001392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001394:	6013      	str	r3, [r2, #0]
		  gPWMConst = pwm_output;
 8001396:	4a16      	ldr	r2, [pc, #88]	@ (80013f0 <StartControlLoop+0x198>)
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	6013      	str	r3, [r2, #0]

		  // Step 5: Send PWM signal to H-bridge for motor control:
		  set_motor_direction(motor_direction);
 800139c:	7afb      	ldrb	r3, [r7, #11]
 800139e:	4618      	mov	r0, r3
 80013a0:	f000 fbcc 	bl	8001b3c <set_motor_direction>
		  set_motor_pwm(pwm_output);
 80013a4:	ed97 0a03 	vldr	s0, [r7, #12]
 80013a8:	f000 fb96 	bl	8001ad8 <set_motor_pwm>

		  // Step 6: Update wheel position and velocity for next loop:
		  update_wheel_position_and_velocity(&wheel_angle, &angular_velocity);
 80013ac:	4908      	ldr	r1, [pc, #32]	@ (80013d0 <StartControlLoop+0x178>)
 80013ae:	4809      	ldr	r0, [pc, #36]	@ (80013d4 <StartControlLoop+0x17c>)
 80013b0:	f000 faec 	bl	800198c <update_wheel_position_and_velocity>



		  gHall = read_hall_sensor();
 80013b4:	f000 fc20 	bl	8001bf8 <read_hall_sensor>
 80013b8:	eef0 7a40 	vmov.f32	s15, s0
 80013bc:	4b0d      	ldr	r3, [pc, #52]	@ (80013f4 <StartControlLoop+0x19c>)
 80013be:	edc3 7a00 	vstr	s15, [r3]
		  // Run this task periodically (every 10ms):
		  osDelay(5);
 80013c2:	2005      	movs	r0, #5
 80013c4:	f00b f9ed 	bl	800c7a2 <osDelay>
	  for (;;) {
 80013c8:	e750      	b.n	800126c <StartControlLoop+0x14>
 80013ca:	bf00      	nop
 80013cc:	20000438 	.word	0x20000438
 80013d0:	20000404 	.word	0x20000404
 80013d4:	20000400 	.word	0x20000400
 80013d8:	20000000 	.word	0x20000000
 80013dc:	3d4ccccd 	.word	0x3d4ccccd
 80013e0:	42480000 	.word	0x42480000
 80013e4:	43e10000 	.word	0x43e10000
 80013e8:	200003fe 	.word	0x200003fe
 80013ec:	200003f8 	.word	0x200003f8
 80013f0:	200003f4 	.word	0x200003f4
 80013f4:	20000418 	.word	0x20000418

080013f8 <StartCommLoopTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCommLoopTask */
void StartCommLoopTask(void const * argument)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCommLoopTask */
  /* Infinite loop */
  for(;;)
  {
	  if (osSemaphoreWait(spiSendMutexHandle, 10) == osOK) {
 8001400:	4b08      	ldr	r3, [pc, #32]	@ (8001424 <StartCommLoopTask+0x2c>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	210a      	movs	r1, #10
 8001406:	4618      	mov	r0, r3
 8001408:	f00b fa12 	bl	800c830 <osSemaphoreWait>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d101      	bne.n	8001416 <StartCommLoopTask+0x1e>
		  runCAN();
 8001412:	f000 f869 	bl	80014e8 <runCAN>
	  }

	  runReport();
 8001416:	f000 f827 	bl	8001468 <runReport>
    osDelay(10);
 800141a:	200a      	movs	r0, #10
 800141c:	f00b f9c1 	bl	800c7a2 <osDelay>
	  if (osSemaphoreWait(spiSendMutexHandle, 10) == osOK) {
 8001420:	e7ee      	b.n	8001400 <StartCommLoopTask+0x8>
 8001422:	bf00      	nop
 8001424:	20000450 	.word	0x20000450

08001428 <DWT_Init>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
// Initialize DWT for cycle counting
void DWT_Init(void) {
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 800142c:	4b0c      	ldr	r3, [pc, #48]	@ (8001460 <DWT_Init+0x38>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d105      	bne.n	8001444 <DWT_Init+0x1c>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001438:	4b09      	ldr	r3, [pc, #36]	@ (8001460 <DWT_Init+0x38>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	4a08      	ldr	r2, [pc, #32]	@ (8001460 <DWT_Init+0x38>)
 800143e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001442:	60d3      	str	r3, [r2, #12]
    }
    DWT->CYCCNT = 0; // Reset the cycle counter
 8001444:	4b07      	ldr	r3, [pc, #28]	@ (8001464 <DWT_Init+0x3c>)
 8001446:	2200      	movs	r2, #0
 8001448:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; // Enable the cycle counter
 800144a:	4b06      	ldr	r3, [pc, #24]	@ (8001464 <DWT_Init+0x3c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a05      	ldr	r2, [pc, #20]	@ (8001464 <DWT_Init+0x3c>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	6013      	str	r3, [r2, #0]
}
 8001456:	bf00      	nop
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	e000edf0 	.word	0xe000edf0
 8001464:	e0001000 	.word	0xe0001000

08001468 <runReport>:
    while ((DWT->CYCCNT - startTick) < delayTicks) {
        // Wait until the required delay has passed
    }
}

void runReport() {
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
	HIDReport.steering = gSteering;        // Steering data (0-255)
 800146e:	4b1a      	ldr	r3, [pc, #104]	@ (80014d8 <runReport+0x70>)
 8001470:	edd3 7a00 	vldr	s15, [r3]
 8001474:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001478:	edc7 7a01 	vstr	s15, [r7, #4]
 800147c:	793b      	ldrb	r3, [r7, #4]
 800147e:	b2da      	uxtb	r2, r3
 8001480:	4b16      	ldr	r3, [pc, #88]	@ (80014dc <runReport+0x74>)
 8001482:	701a      	strb	r2, [r3, #0]
	HIDReport.throttle = gAccel;        // Throttle data (0-255)
 8001484:	4b16      	ldr	r3, [pc, #88]	@ (80014e0 <runReport+0x78>)
 8001486:	edd3 7a00 	vldr	s15, [r3]
 800148a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800148e:	edc7 7a01 	vstr	s15, [r7, #4]
 8001492:	793b      	ldrb	r3, [r7, #4]
 8001494:	b2da      	uxtb	r2, r3
 8001496:	4b11      	ldr	r3, [pc, #68]	@ (80014dc <runReport+0x74>)
 8001498:	705a      	strb	r2, [r3, #1]
	HIDReport.brake = gBrake;           // Brake data (0-255)
 800149a:	4b12      	ldr	r3, [pc, #72]	@ (80014e4 <runReport+0x7c>)
 800149c:	edd3 7a00 	vldr	s15, [r3]
 80014a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014a4:	edc7 7a01 	vstr	s15, [r7, #4]
 80014a8:	793b      	ldrb	r3, [r7, #4]
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	4b0b      	ldr	r3, [pc, #44]	@ (80014dc <runReport+0x74>)
 80014ae:	709a      	strb	r2, [r3, #2]
	HIDReport.clutch = 0;         // Clutch data (0-255)
 80014b0:	4b0a      	ldr	r3, [pc, #40]	@ (80014dc <runReport+0x74>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	70da      	strb	r2, [r3, #3]
	HIDReport.buttons = 0;   // Each bit represents a button'
 80014b6:	4b09      	ldr	r3, [pc, #36]	@ (80014dc <runReport+0x74>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	605a      	str	r2, [r3, #4]
	HIDReport.rz = 0;
 80014bc:	4b07      	ldr	r3, [pc, #28]	@ (80014dc <runReport+0x74>)
 80014be:	2200      	movs	r2, #0
 80014c0:	721a      	strb	r2, [r3, #8]
	HIDReport.slider = 0;
 80014c2:	4b06      	ldr	r3, [pc, #24]	@ (80014dc <runReport+0x74>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	725a      	strb	r2, [r3, #9]
	USBD_CUSTOM_HID_SendCustomReport((uint8_t *)&HIDReport, sizeof(HIDReport));
 80014c8:	210a      	movs	r1, #10
 80014ca:	4804      	ldr	r0, [pc, #16]	@ (80014dc <runReport+0x74>)
 80014cc:	f008 f99e 	bl	800980c <USBD_CUSTOM_HID_SendCustomReport>
}
 80014d0:	bf00      	nop
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000414 	.word	0x20000414
 80014dc:	200003e4 	.word	0x200003e4
 80014e0:	20000410 	.word	0x20000410
 80014e4:	2000040c 	.word	0x2000040c

080014e8 <runCAN>:

void runCAN() {
 80014e8:	b5b0      	push	{r4, r5, r7, lr}
 80014ea:	b09a      	sub	sp, #104	@ 0x68
 80014ec:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef TxHeader;
	uint32_t TxMailbox;

	// Create a telemetry_packet instance and initialize its fields
//	telemetry_packet dataToSend = {3600, 1, 120, 0, 0, 0, 45, 0}; DEBUG CODE
	telemetry_packet dataToSend = telemetry_data;
 80014ee:	4b38      	ldr	r3, [pc, #224]	@ (80015d0 <runCAN+0xe8>)
 80014f0:	f107 040c 	add.w	r4, r7, #12
 80014f4:	461d      	mov	r5, r3
 80014f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014fe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001502:	e884 0003 	stmia.w	r4, {r0, r1}
	uint8_t* rawData = (uint8_t*)&dataToSend;
 8001506:	f107 030c 	add.w	r3, r7, #12
 800150a:	663b      	str	r3, [r7, #96]	@ 0x60

	// Initialize CAN Header
	TxHeader.StdId = 0x100;           // CAN ID for the message
 800150c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001510:	63bb      	str	r3, [r7, #56]	@ 0x38
	TxHeader.ExtId = 0;
 8001512:	2300      	movs	r3, #0
 8001514:	63fb      	str	r3, [r7, #60]	@ 0x3c
	TxHeader.IDE = CAN_ID_STD;        // Use Standard ID
 8001516:	2300      	movs	r3, #0
 8001518:	643b      	str	r3, [r7, #64]	@ 0x40
	TxHeader.RTR = CAN_RTR_DATA;      // Data frame
 800151a:	2300      	movs	r3, #0
 800151c:	647b      	str	r3, [r7, #68]	@ 0x44
	TxHeader.DLC = 8;                 // Maximum data length for each CAN frame
 800151e:	2308      	movs	r3, #8
 8001520:	64bb      	str	r3, [r7, #72]	@ 0x48

	uint8_t frameData[8];             // Temporary buffer for each CAN frame

	// Calculate the size of the telemetry_packet struct
	int totalSize = sizeof(telemetry_packet);
 8001522:	2328      	movs	r3, #40	@ 0x28
 8001524:	65fb      	str	r3, [r7, #92]	@ 0x5c

	// Split the telemetry_packet into CAN frames
	for (int i = 0; i < totalSize; i += 8) {
 8001526:	2300      	movs	r3, #0
 8001528:	667b      	str	r3, [r7, #100]	@ 0x64
 800152a:	e044      	b.n	80015b6 <runCAN+0xce>
	    // Calculate the size of the current chunk (for the last frame)
	    int chunkSize = (totalSize - i >= 8) ? 8 : (totalSize - i);
 800152c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800152e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b08      	cmp	r3, #8
 8001534:	bfa8      	it	ge
 8001536:	2308      	movge	r3, #8
 8001538:	65bb      	str	r3, [r7, #88]	@ 0x58

	    // Copy the next chunk of data into the frame buffer
	    memcpy(frameData, &rawData[i], chunkSize);
 800153a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800153c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800153e:	18d1      	adds	r1, r2, r3
 8001540:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001542:	1d3b      	adds	r3, r7, #4
 8001544:	4618      	mov	r0, r3
 8001546:	f00e f8a2 	bl	800f68e <memcpy>

	    // Adjust DLC for the last frame
	    TxHeader.DLC = chunkSize;
 800154a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800154c:	64bb      	str	r3, [r7, #72]	@ 0x48

	    HAL_StatusTypeDef status = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, frameData, &TxMailbox);
 800154e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001552:	1d3a      	adds	r2, r7, #4
 8001554:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8001558:	481e      	ldr	r0, [pc, #120]	@ (80015d4 <runCAN+0xec>)
 800155a:	f002 f86b 	bl	8003634 <HAL_CAN_AddTxMessage>
 800155e:	4603      	mov	r3, r0
 8001560:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	    if (status != HAL_OK) {
 8001564:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001568:	2b00      	cmp	r3, #0
 800156a:	d01e      	beq.n	80015aa <runCAN+0xc2>
	        // Inspect the error
	        if (status == HAL_ERROR) {
 800156c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001570:	2b01      	cmp	r3, #1
 8001572:	d103      	bne.n	800157c <runCAN+0x94>
	            printf("HAL_CAN_AddTxMessage failed: HAL_ERROR\n");
 8001574:	4818      	ldr	r0, [pc, #96]	@ (80015d8 <runCAN+0xf0>)
 8001576:	f00d fe95 	bl	800f2a4 <puts>
 800157a:	e00e      	b.n	800159a <runCAN+0xb2>
	        } else if (status == HAL_BUSY) {
 800157c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001580:	2b02      	cmp	r3, #2
 8001582:	d103      	bne.n	800158c <runCAN+0xa4>
	            printf("HAL_CAN_AddTxMessage failed: HAL_BUSY\n");
 8001584:	4815      	ldr	r0, [pc, #84]	@ (80015dc <runCAN+0xf4>)
 8001586:	f00d fe8d 	bl	800f2a4 <puts>
 800158a:	e006      	b.n	800159a <runCAN+0xb2>
	        } else if (status == HAL_TIMEOUT) {
 800158c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001590:	2b03      	cmp	r3, #3
 8001592:	d102      	bne.n	800159a <runCAN+0xb2>
	            printf("HAL_CAN_AddTxMessage failed: HAL_TIMEOUT\n");
 8001594:	4812      	ldr	r0, [pc, #72]	@ (80015e0 <runCAN+0xf8>)
 8001596:	f00d fe85 	bl	800f2a4 <puts>
	        }

	        // Optionally log the state of CAN error counters
	        uint32_t error = HAL_CAN_GetError(&hcan1);
 800159a:	480e      	ldr	r0, [pc, #56]	@ (80015d4 <runCAN+0xec>)
 800159c:	f002 fcaf 	bl	8003efe <HAL_CAN_GetError>
 80015a0:	6538      	str	r0, [r7, #80]	@ 0x50
	        printf("CAN Error Code: 0x%08lx\n", error); // Only if you decide to stop execution
 80015a2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80015a4:	480f      	ldr	r0, [pc, #60]	@ (80015e4 <runCAN+0xfc>)
 80015a6:	f00d fe15 	bl	800f1d4 <iprintf>
	    }
	    HAL_Delay(1);
 80015aa:	2001      	movs	r0, #1
 80015ac:	f001 f9ee 	bl	800298c <HAL_Delay>
	for (int i = 0; i < totalSize; i += 8) {
 80015b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80015b2:	3308      	adds	r3, #8
 80015b4:	667b      	str	r3, [r7, #100]	@ 0x64
 80015b6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80015b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80015ba:	429a      	cmp	r2, r3
 80015bc:	dbb6      	blt.n	800152c <runCAN+0x44>
	}

	osSemaphoreRelease(spiSendMutexHandle);
 80015be:	4b0a      	ldr	r3, [pc, #40]	@ (80015e8 <runCAN+0x100>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f00b f982 	bl	800c8cc <osSemaphoreRelease>
}
 80015c8:	bf00      	nop
 80015ca:	3768      	adds	r7, #104	@ 0x68
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bdb0      	pop	{r4, r5, r7, pc}
 80015d0:	200003bc 	.word	0x200003bc
 80015d4:	20000394 	.word	0x20000394
 80015d8:	080102cc 	.word	0x080102cc
 80015dc:	080102f4 	.word	0x080102f4
 80015e0:	0801031c 	.word	0x0801031c
 80015e4:	08010348 	.word	0x08010348
 80015e8:	20000450 	.word	0x20000450

080015ec <constrain>:

    // Calculate the oscillation value using a sine wave
    return sin((2 * M_PI * elapsed_time) / period);
}

float constrain(float x, float lower, float upper) {
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	ed87 0a03 	vstr	s0, [r7, #12]
 80015f6:	edc7 0a02 	vstr	s1, [r7, #8]
 80015fa:	ed87 1a01 	vstr	s2, [r7, #4]
    if (x < lower) return lower;
 80015fe:	ed97 7a03 	vldr	s14, [r7, #12]
 8001602:	edd7 7a02 	vldr	s15, [r7, #8]
 8001606:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800160a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800160e:	d501      	bpl.n	8001614 <constrain+0x28>
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	e00b      	b.n	800162c <constrain+0x40>
    if (x > upper) return upper;
 8001614:	ed97 7a03 	vldr	s14, [r7, #12]
 8001618:	edd7 7a01 	vldr	s15, [r7, #4]
 800161c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001624:	dd01      	ble.n	800162a <constrain+0x3e>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	e000      	b.n	800162c <constrain+0x40>
    return x;
 800162a:	68fb      	ldr	r3, [r7, #12]
}
 800162c:	ee07 3a90 	vmov	s15, r3
 8001630:	eeb0 0a67 	vmov.f32	s0, s15
 8001634:	3714      	adds	r7, #20
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
	...

08001640 <calculate_inertia>:

float calculate_inertia(float force_feedback, float angular_velocity) {
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	ed87 0a01 	vstr	s0, [r7, #4]
 800164a:	edc7 0a00 	vstr	s1, [r7]
    static float previous_output = 0;
    float inertia_coefficient = 0.1; // Fine-tune for feel
 800164e:	4b12      	ldr	r3, [pc, #72]	@ (8001698 <calculate_inertia+0x58>)
 8001650:	60fb      	str	r3, [r7, #12]
    float inertia_force = inertia_coefficient * previous_output + (1 - inertia_coefficient) * force_feedback;
 8001652:	4b12      	ldr	r3, [pc, #72]	@ (800169c <calculate_inertia+0x5c>)
 8001654:	ed93 7a00 	vldr	s14, [r3]
 8001658:	edd7 7a03 	vldr	s15, [r7, #12]
 800165c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001660:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001664:	edd7 7a03 	vldr	s15, [r7, #12]
 8001668:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800166c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001670:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001674:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001678:	edc7 7a02 	vstr	s15, [r7, #8]
    previous_output = inertia_force;
 800167c:	4a07      	ldr	r2, [pc, #28]	@ (800169c <calculate_inertia+0x5c>)
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	6013      	str	r3, [r2, #0]
    return inertia_force;
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	ee07 3a90 	vmov	s15, r3
}
 8001688:	eeb0 0a67 	vmov.f32	s0, s15
 800168c:	3714      	adds	r7, #20
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	3dcccccd 	.word	0x3dcccccd
 800169c:	200006f8 	.word	0x200006f8

080016a0 <calculate_damping>:

float calculate_damping(float angular_velocity) {
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	ed87 0a01 	vstr	s0, [r7, #4]
    float damping_coefficient = 0.05;
 80016aa:	4b08      	ldr	r3, [pc, #32]	@ (80016cc <calculate_damping+0x2c>)
 80016ac:	60fb      	str	r3, [r7, #12]
    return -damping_coefficient * angular_velocity;
 80016ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80016b2:	eeb1 7a67 	vneg.f32	s14, s15
 80016b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80016ba:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 80016be:	eeb0 0a67 	vmov.f32	s0, s15
 80016c2:	3714      	adds	r7, #20
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	3d4ccccd 	.word	0x3d4ccccd

080016d0 <calculate_friction>:

float calculate_friction(float angular_velocity) {
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	ed87 0a01 	vstr	s0, [r7, #4]
    float friction_coefficient = 0.02;
 80016da:	4b10      	ldr	r3, [pc, #64]	@ (800171c <calculate_friction+0x4c>)
 80016dc:	60fb      	str	r3, [r7, #12]
    if (angular_velocity > 0) {
 80016de:	edd7 7a01 	vldr	s15, [r7, #4]
 80016e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ea:	dd04      	ble.n	80016f6 <calculate_friction+0x26>
        return -friction_coefficient;
 80016ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80016f0:	eef1 7a67 	vneg.f32	s15, s15
 80016f4:	e00b      	b.n	800170e <calculate_friction+0x3e>
    } else if (angular_velocity < 0) {
 80016f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80016fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001702:	d502      	bpl.n	800170a <calculate_friction+0x3a>
        return friction_coefficient;
 8001704:	edd7 7a03 	vldr	s15, [r7, #12]
 8001708:	e001      	b.n	800170e <calculate_friction+0x3e>
    } else {
        return 0;
 800170a:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8001720 <calculate_friction+0x50>
    }
}
 800170e:	eeb0 0a67 	vmov.f32	s0, s15
 8001712:	3714      	adds	r7, #20
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	3ca3d70a 	.word	0x3ca3d70a
 8001720:	00000000 	.word	0x00000000

08001724 <calculate_lock>:

float calculate_lock(float angle) {
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	ed87 0a01 	vstr	s0, [r7, #4]
    float lock_coefficient = 1.0;
 800172e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001732:	60fb      	str	r3, [r7, #12]
    float max_angle = 450.0;
 8001734:	4b1c      	ldr	r3, [pc, #112]	@ (80017a8 <calculate_lock+0x84>)
 8001736:	60bb      	str	r3, [r7, #8]
    if (angle > max_angle) {
 8001738:	ed97 7a01 	vldr	s14, [r7, #4]
 800173c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001740:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001748:	dd0c      	ble.n	8001764 <calculate_lock+0x40>
        return -lock_coefficient * (angle - max_angle);
 800174a:	edd7 7a03 	vldr	s15, [r7, #12]
 800174e:	eeb1 7a67 	vneg.f32	s14, s15
 8001752:	edd7 6a01 	vldr	s13, [r7, #4]
 8001756:	edd7 7a02 	vldr	s15, [r7, #8]
 800175a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800175e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001762:	e019      	b.n	8001798 <calculate_lock+0x74>
    } else if (angle < -max_angle) {
 8001764:	edd7 7a02 	vldr	s15, [r7, #8]
 8001768:	eef1 7a67 	vneg.f32	s15, s15
 800176c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001770:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001778:	d50c      	bpl.n	8001794 <calculate_lock+0x70>
        return -lock_coefficient * (angle + max_angle);
 800177a:	edd7 7a03 	vldr	s15, [r7, #12]
 800177e:	eeb1 7a67 	vneg.f32	s14, s15
 8001782:	edd7 6a01 	vldr	s13, [r7, #4]
 8001786:	edd7 7a02 	vldr	s15, [r7, #8]
 800178a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800178e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001792:	e001      	b.n	8001798 <calculate_lock+0x74>
    }
    return 0;
 8001794:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80017ac <calculate_lock+0x88>
}
 8001798:	eeb0 0a67 	vmov.f32	s0, s15
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	43e10000 	.word	0x43e10000
 80017ac:	00000000 	.word	0x00000000

080017b0 <scale_to_pwm>:

float scale_to_pwm(float total_force) {
 80017b0:	b5b0      	push	{r4, r5, r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	ed87 0a01 	vstr	s0, [r7, #4]
    const float MIN_PWM = 50.0f;    // Minimum PWM value for the motor to start moving
 80017ba:	4b2b      	ldr	r3, [pc, #172]	@ (8001868 <scale_to_pwm+0xb8>)
 80017bc:	617b      	str	r3, [r7, #20]
    const float MAX_PWM = 255.0f;   // Maximum PWM value
 80017be:	4b2b      	ldr	r3, [pc, #172]	@ (800186c <scale_to_pwm+0xbc>)
 80017c0:	613b      	str	r3, [r7, #16]

    // If total_force is zero, return zero PWM output
    if (total_force == 0.0f) {
 80017c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80017c6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80017ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ce:	d106      	bne.n	80017de <scale_to_pwm+0x2e>
        gPWM = 0.0f;
 80017d0:	4b27      	ldr	r3, [pc, #156]	@ (8001870 <scale_to_pwm+0xc0>)
 80017d2:	f04f 0200 	mov.w	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
        return 0.0f;
 80017d8:	f04f 0300 	mov.w	r3, #0
 80017dc:	e03c      	b.n	8001858 <scale_to_pwm+0xa8>
    }

    // Calculate PWM output
    float pwm_output = fabs(total_force) * (MAX_PWM - MIN_PWM) + MIN_PWM;
 80017de:	edd7 7a01 	vldr	s15, [r7, #4]
 80017e2:	eef0 7ae7 	vabs.f32	s15, s15
 80017e6:	ee17 0a90 	vmov	r0, s15
 80017ea:	f7fe fecd 	bl	8000588 <__aeabi_f2d>
 80017ee:	4604      	mov	r4, r0
 80017f0:	460d      	mov	r5, r1
 80017f2:	ed97 7a04 	vldr	s14, [r7, #16]
 80017f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80017fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017fe:	ee17 0a90 	vmov	r0, s15
 8001802:	f7fe fec1 	bl	8000588 <__aeabi_f2d>
 8001806:	4602      	mov	r2, r0
 8001808:	460b      	mov	r3, r1
 800180a:	4620      	mov	r0, r4
 800180c:	4629      	mov	r1, r5
 800180e:	f7fe ff13 	bl	8000638 <__aeabi_dmul>
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
 8001816:	4614      	mov	r4, r2
 8001818:	461d      	mov	r5, r3
 800181a:	6978      	ldr	r0, [r7, #20]
 800181c:	f7fe feb4 	bl	8000588 <__aeabi_f2d>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4620      	mov	r0, r4
 8001826:	4629      	mov	r1, r5
 8001828:	f7fe fd50 	bl	80002cc <__adddf3>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4610      	mov	r0, r2
 8001832:	4619      	mov	r1, r3
 8001834:	f7ff f932 	bl	8000a9c <__aeabi_d2f>
 8001838:	4603      	mov	r3, r0
 800183a:	60fb      	str	r3, [r7, #12]

    // Constrain PWM output to valid range
    pwm_output = constrain(pwm_output, MIN_PWM, MAX_PWM);
 800183c:	ed97 1a04 	vldr	s2, [r7, #16]
 8001840:	edd7 0a05 	vldr	s1, [r7, #20]
 8001844:	ed97 0a03 	vldr	s0, [r7, #12]
 8001848:	f7ff fed0 	bl	80015ec <constrain>
 800184c:	ed87 0a03 	vstr	s0, [r7, #12]

    // Update debug variable
    gPWM = pwm_output;
 8001850:	4a07      	ldr	r2, [pc, #28]	@ (8001870 <scale_to_pwm+0xc0>)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	6013      	str	r3, [r2, #0]

    return pwm_output;
 8001856:	68fb      	ldr	r3, [r7, #12]
}
 8001858:	ee07 3a90 	vmov	s15, r3
 800185c:	eeb0 0a67 	vmov.f32	s0, s15
 8001860:	3718      	adds	r7, #24
 8001862:	46bd      	mov	sp, r7
 8001864:	bdb0      	pop	{r4, r5, r7, pc}
 8001866:	bf00      	nop
 8001868:	42480000 	.word	0x42480000
 800186c:	437f0000 	.word	0x437f0000
 8001870:	200003f0 	.word	0x200003f0

08001874 <map_wheel_position_to_axis>:

uint8_t map_wheel_position_to_axis(int32_t position) {
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
    int32_t min_position = -450;
 800187c:	4b15      	ldr	r3, [pc, #84]	@ (80018d4 <map_wheel_position_to_axis+0x60>)
 800187e:	60fb      	str	r3, [r7, #12]
    int32_t max_position = 450;
 8001880:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 8001884:	60bb      	str	r3, [r7, #8]

    // Clamp the position to the valid range
	if (position < min_position) {
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	429a      	cmp	r2, r3
 800188c:	da02      	bge.n	8001894 <map_wheel_position_to_axis+0x20>
		position = min_position;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	607b      	str	r3, [r7, #4]
 8001892:	e005      	b.n	80018a0 <map_wheel_position_to_axis+0x2c>
	} else if (position > max_position) {
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	429a      	cmp	r2, r3
 800189a:	dd01      	ble.n	80018a0 <map_wheel_position_to_axis+0x2c>
		position = max_position;
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	607b      	str	r3, [r7, #4]
	}

	// Reverse the mapping
	return (uint8_t)((((max_position - position) * 255) + (max_position - min_position) / 2) / (max_position - min_position));
 80018a0:	68ba      	ldr	r2, [r7, #8]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	1ad2      	subs	r2, r2, r3
 80018a6:	4613      	mov	r3, r2
 80018a8:	021b      	lsls	r3, r3, #8
 80018aa:	1a9a      	subs	r2, r3, r2
 80018ac:	68b9      	ldr	r1, [r7, #8]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	1acb      	subs	r3, r1, r3
 80018b2:	0fd9      	lsrs	r1, r3, #31
 80018b4:	440b      	add	r3, r1
 80018b6:	105b      	asrs	r3, r3, #1
 80018b8:	441a      	add	r2, r3
 80018ba:	68b9      	ldr	r1, [r7, #8]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	1acb      	subs	r3, r1, r3
 80018c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80018c4:	b2db      	uxtb	r3, r3
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3714      	adds	r7, #20
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	fffffe3e 	.word	0xfffffe3e

080018d8 <init_encoder>:

extern void init_encoder() {
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
    // Start the encoder mode timer
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80018dc:	213c      	movs	r1, #60	@ 0x3c
 80018de:	4803      	ldr	r0, [pc, #12]	@ (80018ec <init_encoder+0x14>)
 80018e0:	f005 fc0c 	bl	80070fc <HAL_TIM_Encoder_Start>
    reset_encoder_position();
 80018e4:	f000 f812 	bl	800190c <reset_encoder_position>
}
 80018e8:	bf00      	nop
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	20000760 	.word	0x20000760

080018f0 <read_encoder_position>:

int16_t read_encoder_position() {
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
    return __HAL_TIM_GET_COUNTER(&htim2);  // Get the current encoder count
 80018f4:	4b04      	ldr	r3, [pc, #16]	@ (8001908 <read_encoder_position+0x18>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018fa:	b21b      	sxth	r3, r3
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	20000760 	.word	0x20000760

0800190c <reset_encoder_position>:

void reset_encoder_position() {
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
    __HAL_TIM_SET_COUNTER(&htim2, 0);  // Reset the encoder count to zero
 8001910:	4b04      	ldr	r3, [pc, #16]	@ (8001924 <reset_encoder_position+0x18>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2200      	movs	r2, #0
 8001916:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001918:	bf00      	nop
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	20000760 	.word	0x20000760

08001928 <get_angle_degrees>:

float get_angle_degrees() {
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
    int16_t position = read_encoder_position();
 800192e:	f7ff ffdf 	bl	80018f0 <read_encoder_position>
 8001932:	4603      	mov	r3, r0
 8001934:	80fb      	strh	r3, [r7, #6]
    gPosition = position;
 8001936:	4a12      	ldr	r2, [pc, #72]	@ (8001980 <get_angle_degrees+0x58>)
 8001938:	88fb      	ldrh	r3, [r7, #6]
 800193a:	8013      	strh	r3, [r2, #0]
    return (position * 360.0) / ENCODER_RESOLUTION;
 800193c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001940:	4618      	mov	r0, r3
 8001942:	f7fe fe0f 	bl	8000564 <__aeabi_i2d>
 8001946:	f04f 0200 	mov.w	r2, #0
 800194a:	4b0e      	ldr	r3, [pc, #56]	@ (8001984 <get_angle_degrees+0x5c>)
 800194c:	f7fe fe74 	bl	8000638 <__aeabi_dmul>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4610      	mov	r0, r2
 8001956:	4619      	mov	r1, r3
 8001958:	f04f 0200 	mov.w	r2, #0
 800195c:	4b0a      	ldr	r3, [pc, #40]	@ (8001988 <get_angle_degrees+0x60>)
 800195e:	f7fe ff95 	bl	800088c <__aeabi_ddiv>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4610      	mov	r0, r2
 8001968:	4619      	mov	r1, r3
 800196a:	f7ff f897 	bl	8000a9c <__aeabi_d2f>
 800196e:	4603      	mov	r3, r0
 8001970:	ee07 3a90 	vmov	s15, r3
}
 8001974:	eeb0 0a67 	vmov.f32	s0, s15
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	200003fc 	.word	0x200003fc
 8001984:	40768000 	.word	0x40768000
 8001988:	40a2c000 	.word	0x40a2c000

0800198c <update_wheel_position_and_velocity>:

void update_wheel_position_and_velocity(float *wheel_angle, float *angular_velocity) {
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
    // Get the current encoder count
    float current_angle = get_angle_degrees();
 8001996:	f7ff ffc7 	bl	8001928 <get_angle_degrees>
 800199a:	ed87 0a04 	vstr	s0, [r7, #16]

    // Calculate time difference (in seconds) since the last update
    uint32_t current_time = HAL_GetTick();  // In milliseconds
 800199e:	f000 ffe9 	bl	8002974 <HAL_GetTick>
 80019a2:	60f8      	str	r0, [r7, #12]
    float dt = (current_time - last_update_time) / 1000.0f;  // Convert ms to seconds
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	ee07 3a90 	vmov	s15, r3
 80019aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019ae:	4b40      	ldr	r3, [pc, #256]	@ (8001ab0 <update_wheel_position_and_velocity+0x124>)
 80019b0:	edd3 7a00 	vldr	s15, [r3]
 80019b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019b8:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8001ab4 <update_wheel_position_and_velocity+0x128>
 80019bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019c0:	edc7 7a02 	vstr	s15, [r7, #8]

    // Calculate the change in angle
    float delta_angle = current_angle - last_encoder_count;
 80019c4:	4b3c      	ldr	r3, [pc, #240]	@ (8001ab8 <update_wheel_position_and_velocity+0x12c>)
 80019c6:	edd3 7a00 	vldr	s15, [r3]
 80019ca:	ed97 7a04 	vldr	s14, [r7, #16]
 80019ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019d2:	edc7 7a05 	vstr	s15, [r7, #20]

    // Implement a threshold to ignore small changes
    if (fabs(delta_angle) < 0.25f) {  // Adjust the threshold as needed
 80019d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80019da:	eef0 7ae7 	vabs.f32	s15, s15
 80019de:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 80019e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ea:	d502      	bpl.n	80019f2 <update_wheel_position_and_velocity+0x66>
        delta_angle = 0.0f;
 80019ec:	f04f 0300 	mov.w	r3, #0
 80019f0:	617b      	str	r3, [r7, #20]
    }

    // Update the wheel angle, keeping within the lock limit
    *wheel_angle += delta_angle;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	ed93 7a00 	vldr	s14, [r3]
 80019f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80019fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	edc3 7a00 	vstr	s15, [r3]
    if (*wheel_angle > WHEEL_MAX_ANGLE) *wheel_angle = WHEEL_MAX_ANGLE;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	edd3 7a00 	vldr	s15, [r3]
 8001a0c:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8001abc <update_wheel_position_and_velocity+0x130>
 8001a10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a18:	dd02      	ble.n	8001a20 <update_wheel_position_and_velocity+0x94>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a28      	ldr	r2, [pc, #160]	@ (8001ac0 <update_wheel_position_and_velocity+0x134>)
 8001a1e:	601a      	str	r2, [r3, #0]
    if (*wheel_angle < -WHEEL_MAX_ANGLE) *wheel_angle = -WHEEL_MAX_ANGLE;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	edd3 7a00 	vldr	s15, [r3]
 8001a26:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8001ac4 <update_wheel_position_and_velocity+0x138>
 8001a2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a32:	d502      	bpl.n	8001a3a <update_wheel_position_and_velocity+0xae>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4a24      	ldr	r2, [pc, #144]	@ (8001ac8 <update_wheel_position_and_velocity+0x13c>)
 8001a38:	601a      	str	r2, [r3, #0]

    gDelta = delta_angle;
 8001a3a:	4a24      	ldr	r2, [pc, #144]	@ (8001acc <update_wheel_position_and_velocity+0x140>)
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	6013      	str	r3, [r2, #0]
    // Calculate angular velocity (degrees per second)
    if (dt > 0.0001f) {  // Avoid division by zero
 8001a40:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a44:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001ad0 <update_wheel_position_and_velocity+0x144>
 8001a48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a50:	dd09      	ble.n	8001a66 <update_wheel_position_and_velocity+0xda>
        *angular_velocity = delta_angle / dt;
 8001a52:	edd7 6a05 	vldr	s13, [r7, #20]
 8001a56:	ed97 7a02 	vldr	s14, [r7, #8]
 8001a5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	edc3 7a00 	vstr	s15, [r3]
 8001a64:	e003      	b.n	8001a6e <update_wheel_position_and_velocity+0xe2>
    } else {
        *angular_velocity = 0.0f;
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
    }

    // Store the current values for the next update
    last_encoder_count = current_angle;
 8001a6e:	4a12      	ldr	r2, [pc, #72]	@ (8001ab8 <update_wheel_position_and_velocity+0x12c>)
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	6013      	str	r3, [r2, #0]
    last_update_time = current_time;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	ee07 3a90 	vmov	s15, r3
 8001a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a7e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab0 <update_wheel_position_and_velocity+0x124>)
 8001a80:	edc3 7a00 	vstr	s15, [r3]

    gSteering = map_wheel_position_to_axis(*wheel_angle);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	edd3 7a00 	vldr	s15, [r3]
 8001a8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a8e:	ee17 0a90 	vmov	r0, s15
 8001a92:	f7ff feef 	bl	8001874 <map_wheel_position_to_axis>
 8001a96:	4603      	mov	r3, r0
 8001a98:	ee07 3a90 	vmov	s15, r3
 8001a9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad4 <update_wheel_position_and_velocity+0x148>)
 8001aa2:	edc3 7a00 	vstr	s15, [r3]
}
 8001aa6:	bf00      	nop
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000440 	.word	0x20000440
 8001ab4:	447a0000 	.word	0x447a0000
 8001ab8:	2000043c 	.word	0x2000043c
 8001abc:	43e10000 	.word	0x43e10000
 8001ac0:	43e10000 	.word	0x43e10000
 8001ac4:	c3e10000 	.word	0xc3e10000
 8001ac8:	c3e10000 	.word	0xc3e10000
 8001acc:	20000408 	.word	0x20000408
 8001ad0:	38d1b717 	.word	0x38d1b717
 8001ad4:	20000414 	.word	0x20000414

08001ad8 <set_motor_pwm>:


void set_motor_pwm(float pwm_value) {
 8001ad8:	b5b0      	push	{r4, r5, r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	ed87 0a01 	vstr	s0, [r7, #4]
    // Assuming pwm_value ranges from 0 to 255
    uint32_t pulse = (uint32_t)((pwm_value / 255.0) * htim3.Init.Period);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f7fe fd50 	bl	8000588 <__aeabi_f2d>
 8001ae8:	a312      	add	r3, pc, #72	@ (adr r3, 8001b34 <set_motor_pwm+0x5c>)
 8001aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aee:	f7fe fecd 	bl	800088c <__aeabi_ddiv>
 8001af2:	4602      	mov	r2, r0
 8001af4:	460b      	mov	r3, r1
 8001af6:	4614      	mov	r4, r2
 8001af8:	461d      	mov	r5, r3
 8001afa:	4b0d      	ldr	r3, [pc, #52]	@ (8001b30 <set_motor_pwm+0x58>)
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7fe fd20 	bl	8000544 <__aeabi_ui2d>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	4620      	mov	r0, r4
 8001b0a:	4629      	mov	r1, r5
 8001b0c:	f7fe fd94 	bl	8000638 <__aeabi_dmul>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	4610      	mov	r0, r2
 8001b16:	4619      	mov	r1, r3
 8001b18:	f7fe ffa0 	bl	8000a5c <__aeabi_d2uiz>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	60fb      	str	r3, [r7, #12]

    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulse);
 8001b20:	4b03      	ldr	r3, [pc, #12]	@ (8001b30 <set_motor_pwm+0x58>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	68fa      	ldr	r2, [r7, #12]
 8001b26:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001b28:	bf00      	nop
 8001b2a:	3710      	adds	r7, #16
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bdb0      	pop	{r4, r5, r7, pc}
 8001b30:	200007a8 	.word	0x200007a8
 8001b34:	00000000 	.word	0x00000000
 8001b38:	406fe000 	.word	0x406fe000

08001b3c <set_motor_direction>:

void set_motor_direction(uint8_t direction) {
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	71fb      	strb	r3, [r7, #7]
    if (direction == 1) { // Forward
 8001b46:	79fb      	ldrb	r3, [r7, #7]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d10a      	bne.n	8001b62 <set_motor_direction+0x26>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);   // IN1 = HIGH
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	2102      	movs	r1, #2
 8001b50:	4812      	ldr	r0, [pc, #72]	@ (8001b9c <set_motor_direction+0x60>)
 8001b52:	f002 fc57 	bl	8004404 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); // IN2 = LOW
 8001b56:	2200      	movs	r2, #0
 8001b58:	2104      	movs	r1, #4
 8001b5a:	4810      	ldr	r0, [pc, #64]	@ (8001b9c <set_motor_direction+0x60>)
 8001b5c:	f002 fc52 	bl	8004404 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);   // IN2 = HIGH
    } else { // Stop
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);   // IN1 = LOW
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);   // IN2 = LOW
    }
}
 8001b60:	e017      	b.n	8001b92 <set_motor_direction+0x56>
    } else if (direction == 0) { // Reverse
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d10a      	bne.n	8001b7e <set_motor_direction+0x42>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // IN1 = LOW
 8001b68:	2200      	movs	r2, #0
 8001b6a:	2102      	movs	r1, #2
 8001b6c:	480b      	ldr	r0, [pc, #44]	@ (8001b9c <set_motor_direction+0x60>)
 8001b6e:	f002 fc49 	bl	8004404 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);   // IN2 = HIGH
 8001b72:	2201      	movs	r2, #1
 8001b74:	2104      	movs	r1, #4
 8001b76:	4809      	ldr	r0, [pc, #36]	@ (8001b9c <set_motor_direction+0x60>)
 8001b78:	f002 fc44 	bl	8004404 <HAL_GPIO_WritePin>
}
 8001b7c:	e009      	b.n	8001b92 <set_motor_direction+0x56>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);   // IN1 = LOW
 8001b7e:	2200      	movs	r2, #0
 8001b80:	2102      	movs	r1, #2
 8001b82:	4806      	ldr	r0, [pc, #24]	@ (8001b9c <set_motor_direction+0x60>)
 8001b84:	f002 fc3e 	bl	8004404 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);   // IN2 = LOW
 8001b88:	2200      	movs	r2, #0
 8001b8a:	2104      	movs	r1, #4
 8001b8c:	4803      	ldr	r0, [pc, #12]	@ (8001b9c <set_motor_direction+0x60>)
 8001b8e:	f002 fc39 	bl	8004404 <HAL_GPIO_WritePin>
}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40020400 	.word	0x40020400

08001ba0 <signalTelemetryTask>:

extern void signalTelemetryTask(uint8_t *Buf, uint32_t Len) {
 8001ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
	if (Len == sizeof(telemetry_packet))  // Verify the data size matches the struct size
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	2b28      	cmp	r3, #40	@ 0x28
 8001bae:	d11a      	bne.n	8001be6 <signalTelemetryTask+0x46>
	{
		// Process the received data (rx_buffer)
		memcpy(&telemetry_data, Buf, sizeof(telemetry_data));
 8001bb0:	4a0f      	ldr	r2, [pc, #60]	@ (8001bf0 <signalTelemetryTask+0x50>)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	461c      	mov	r4, r3
 8001bb6:	4616      	mov	r6, r2
 8001bb8:	f104 0c20 	add.w	ip, r4, #32
 8001bbc:	4635      	mov	r5, r6
 8001bbe:	4623      	mov	r3, r4
 8001bc0:	6818      	ldr	r0, [r3, #0]
 8001bc2:	6859      	ldr	r1, [r3, #4]
 8001bc4:	689a      	ldr	r2, [r3, #8]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bca:	3410      	adds	r4, #16
 8001bcc:	3610      	adds	r6, #16
 8001bce:	4564      	cmp	r4, ip
 8001bd0:	d1f4      	bne.n	8001bbc <signalTelemetryTask+0x1c>
 8001bd2:	4633      	mov	r3, r6
 8001bd4:	4622      	mov	r2, r4
 8001bd6:	6810      	ldr	r0, [r2, #0]
 8001bd8:	6851      	ldr	r1, [r2, #4]
 8001bda:	c303      	stmia	r3!, {r0, r1}
		osSemaphoreRelease(uartMutexHandle);
 8001bdc:	4b05      	ldr	r3, [pc, #20]	@ (8001bf4 <signalTelemetryTask+0x54>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f00a fe73 	bl	800c8cc <osSemaphoreRelease>
	}
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	200003bc 	.word	0x200003bc
 8001bf4:	20000454 	.word	0x20000454

08001bf8 <read_hall_sensor>:

    // Stop Motor
    set_motor_pwm(0);
}

float read_hall_sensor() {
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
    uint32_t adc_value = 0;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	607b      	str	r3, [r7, #4]
    HAL_ADC_Start(&hadc1);
 8001c02:	481b      	ldr	r0, [pc, #108]	@ (8001c70 <read_hall_sensor+0x78>)
 8001c04:	f000 ff2a 	bl	8002a5c <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 8001c08:	f04f 31ff 	mov.w	r1, #4294967295
 8001c0c:	4818      	ldr	r0, [pc, #96]	@ (8001c70 <read_hall_sensor+0x78>)
 8001c0e:	f001 f82a 	bl	8002c66 <HAL_ADC_PollForConversion>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d103      	bne.n	8001c20 <read_hall_sensor+0x28>
        adc_value = HAL_ADC_GetValue(&hadc1);
 8001c18:	4815      	ldr	r0, [pc, #84]	@ (8001c70 <read_hall_sensor+0x78>)
 8001c1a:	f001 f8af 	bl	8002d7c <HAL_ADC_GetValue>
 8001c1e:	6078      	str	r0, [r7, #4]
    }
    HAL_ADC_Stop(&hadc1);
 8001c20:	4813      	ldr	r0, [pc, #76]	@ (8001c70 <read_hall_sensor+0x78>)
 8001c22:	f000 ffed 	bl	8002c00 <HAL_ADC_Stop>
    return (adc_value * ADC_MAX_VOLTAGE) / ADC_RESOLUTION;
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f7fe fc8c 	bl	8000544 <__aeabi_ui2d>
 8001c2c:	a30e      	add	r3, pc, #56	@ (adr r3, 8001c68 <read_hall_sensor+0x70>)
 8001c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c32:	f7fe fd01 	bl	8000638 <__aeabi_dmul>
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	4610      	mov	r0, r2
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f04f 0200 	mov.w	r2, #0
 8001c42:	4b0c      	ldr	r3, [pc, #48]	@ (8001c74 <read_hall_sensor+0x7c>)
 8001c44:	f7fe fe22 	bl	800088c <__aeabi_ddiv>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	4610      	mov	r0, r2
 8001c4e:	4619      	mov	r1, r3
 8001c50:	f7fe ff24 	bl	8000a9c <__aeabi_d2f>
 8001c54:	4603      	mov	r3, r0
 8001c56:	ee07 3a90 	vmov	s15, r3
}
 8001c5a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	f3af 8000 	nop.w
 8001c68:	9999999a 	.word	0x9999999a
 8001c6c:	40139999 	.word	0x40139999
 8001c70:	2000034c 	.word	0x2000034c
 8001c74:	40b00000 	.word	0x40b00000

08001c78 <processCAN>:
//	} else {
//		printf("Failed to receive CAN message\n");
//	}
//}

void processCAN() {
 8001c78:	b590      	push	{r4, r7, lr}
 8001c7a:	b08d      	sub	sp, #52	@ 0x34
 8001c7c:	af02      	add	r7, sp, #8
    CAN_RxHeaderTypeDef rxHeader;
    uint8_t rxData[8];  // Buffer to store the received data

    // Optional: Check FIFO1 if used
    while (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO1) > 0) {
 8001c7e:	e083      	b.n	8001d88 <processCAN+0x110>
        if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO1, &rxHeader, rxData) == HAL_OK) {
 8001c80:	463b      	mov	r3, r7
 8001c82:	f107 0208 	add.w	r2, r7, #8
 8001c86:	2101      	movs	r1, #1
 8001c88:	4846      	ldr	r0, [pc, #280]	@ (8001da4 <processCAN+0x12c>)
 8001c8a:	f001 fda3 	bl	80037d4 <HAL_CAN_GetRxMessage>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d176      	bne.n	8001d82 <processCAN+0x10a>
            // Process the received message
            printf("Message Received from ID: 0x%03X, Data: %02X %02X %02X %02X\n",
 8001c94:	68b9      	ldr	r1, [r7, #8]
                   rxHeader.StdId, rxData[0], rxData[1], rxData[2], rxData[3]);
 8001c96:	783b      	ldrb	r3, [r7, #0]
            printf("Message Received from ID: 0x%03X, Data: %02X %02X %02X %02X\n",
 8001c98:	4618      	mov	r0, r3
                   rxHeader.StdId, rxData[0], rxData[1], rxData[2], rxData[3]);
 8001c9a:	787b      	ldrb	r3, [r7, #1]
            printf("Message Received from ID: 0x%03X, Data: %02X %02X %02X %02X\n",
 8001c9c:	461c      	mov	r4, r3
                   rxHeader.StdId, rxData[0], rxData[1], rxData[2], rxData[3]);
 8001c9e:	78bb      	ldrb	r3, [r7, #2]
 8001ca0:	78fa      	ldrb	r2, [r7, #3]
            printf("Message Received from ID: 0x%03X, Data: %02X %02X %02X %02X\n",
 8001ca2:	9201      	str	r2, [sp, #4]
 8001ca4:	9300      	str	r3, [sp, #0]
 8001ca6:	4623      	mov	r3, r4
 8001ca8:	4602      	mov	r2, r0
 8001caa:	483f      	ldr	r0, [pc, #252]	@ (8001da8 <processCAN+0x130>)
 8001cac:	f00d fa92 	bl	800f1d4 <iprintf>
            if (rxHeader.StdId == 0x101) {
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	f240 1201 	movw	r2, #257	@ 0x101
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d12e      	bne.n	8001d18 <processCAN+0xa0>
				static uint8_t buffer[sizeof(user_input_data_t)];
				static uint8_t offset = 0;

				// Copy received data into buffer
				uint8_t bytesToCopy = (rxHeader.DLC < sizeof(user_input_data_t) - offset) ? rxHeader.DLC : sizeof(user_input_data_t) - offset;
 8001cba:	4b3c      	ldr	r3, [pc, #240]	@ (8001dac <processCAN+0x134>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	f1c3 020a 	rsb	r2, r3, #10
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	bf28      	it	cs
 8001cc8:	4613      	movcs	r3, r2
 8001cca:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				memcpy(&buffer[offset], rxData, bytesToCopy);
 8001cce:	4b37      	ldr	r3, [pc, #220]	@ (8001dac <processCAN+0x134>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	4b36      	ldr	r3, [pc, #216]	@ (8001db0 <processCAN+0x138>)
 8001cd6:	4413      	add	r3, r2
 8001cd8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001cdc:	4639      	mov	r1, r7
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f00d fcd5 	bl	800f68e <memcpy>
				offset += bytesToCopy;
 8001ce4:	4b31      	ldr	r3, [pc, #196]	@ (8001dac <processCAN+0x134>)
 8001ce6:	781a      	ldrb	r2, [r3, #0]
 8001ce8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001cec:	4413      	add	r3, r2
 8001cee:	b2da      	uxtb	r2, r3
 8001cf0:	4b2e      	ldr	r3, [pc, #184]	@ (8001dac <processCAN+0x134>)
 8001cf2:	701a      	strb	r2, [r3, #0]

				// Check if the entire packet has been received
				if (offset >= sizeof(user_input_data_t)) {
 8001cf4:	4b2d      	ldr	r3, [pc, #180]	@ (8001dac <processCAN+0x134>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	2b09      	cmp	r3, #9
 8001cfa:	d945      	bls.n	8001d88 <processCAN+0x110>
					// Copy buffer into the telemetry_packet struct
					memcpy(&gUserInputData, buffer, sizeof(user_input_data_t));
 8001cfc:	4b2d      	ldr	r3, [pc, #180]	@ (8001db4 <processCAN+0x13c>)
 8001cfe:	4a2c      	ldr	r2, [pc, #176]	@ (8001db0 <processCAN+0x138>)
 8001d00:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d02:	c303      	stmia	r3!, {r0, r1}
 8001d04:	801a      	strh	r2, [r3, #0]
					offset = 0; // Reset offset for the next packet
 8001d06:	4b29      	ldr	r3, [pc, #164]	@ (8001dac <processCAN+0x134>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	701a      	strb	r2, [r3, #0]
					gDebugCounter1++;
 8001d0c:	4b2a      	ldr	r3, [pc, #168]	@ (8001db8 <processCAN+0x140>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	3301      	adds	r3, #1
 8001d12:	4a29      	ldr	r2, [pc, #164]	@ (8001db8 <processCAN+0x140>)
 8001d14:	6013      	str	r3, [r2, #0]
 8001d16:	e037      	b.n	8001d88 <processCAN+0x110>
					// Process the received telemetry data
//					ProcessTelemetryData(&gReceivedTelemetry);
				}
			}
            else if (rxHeader.StdId == 0x102) {
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001d1e:	d133      	bne.n	8001d88 <processCAN+0x110>
				static uint8_t buffer[sizeof(pedal_data_t)];
				static uint8_t offset = 0;

				// Copy received data into buffer
				uint8_t bytesToCopy = (rxHeader.DLC < sizeof(pedal_data_t) - offset) ? rxHeader.DLC : sizeof(pedal_data_t) - offset;
 8001d20:	4b26      	ldr	r3, [pc, #152]	@ (8001dbc <processCAN+0x144>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	f1c3 0206 	rsb	r2, r3, #6
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	bf28      	it	cs
 8001d2e:	4613      	movcs	r3, r2
 8001d30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				memcpy(&buffer[offset], rxData, bytesToCopy);
 8001d34:	4b21      	ldr	r3, [pc, #132]	@ (8001dbc <processCAN+0x144>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	461a      	mov	r2, r3
 8001d3a:	4b21      	ldr	r3, [pc, #132]	@ (8001dc0 <processCAN+0x148>)
 8001d3c:	4413      	add	r3, r2
 8001d3e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001d42:	4639      	mov	r1, r7
 8001d44:	4618      	mov	r0, r3
 8001d46:	f00d fca2 	bl	800f68e <memcpy>
				offset += bytesToCopy;
 8001d4a:	4b1c      	ldr	r3, [pc, #112]	@ (8001dbc <processCAN+0x144>)
 8001d4c:	781a      	ldrb	r2, [r3, #0]
 8001d4e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d52:	4413      	add	r3, r2
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	4b19      	ldr	r3, [pc, #100]	@ (8001dbc <processCAN+0x144>)
 8001d58:	701a      	strb	r2, [r3, #0]

				// Check if the entire packet has been received
				if (offset >= sizeof(pedal_data_t)) {
 8001d5a:	4b18      	ldr	r3, [pc, #96]	@ (8001dbc <processCAN+0x144>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	2b05      	cmp	r3, #5
 8001d60:	d912      	bls.n	8001d88 <processCAN+0x110>
					// Copy buffer into the telemetry_packet struct
					memcpy(&gPedalData, buffer, sizeof(pedal_data_t));
 8001d62:	4b18      	ldr	r3, [pc, #96]	@ (8001dc4 <processCAN+0x14c>)
 8001d64:	4a16      	ldr	r2, [pc, #88]	@ (8001dc0 <processCAN+0x148>)
 8001d66:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d6a:	6018      	str	r0, [r3, #0]
 8001d6c:	3304      	adds	r3, #4
 8001d6e:	8019      	strh	r1, [r3, #0]
					offset = 0; // Reset offset for the next packet
 8001d70:	4b12      	ldr	r3, [pc, #72]	@ (8001dbc <processCAN+0x144>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	701a      	strb	r2, [r3, #0]
					gDebugCounter2++;
 8001d76:	4b14      	ldr	r3, [pc, #80]	@ (8001dc8 <processCAN+0x150>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	4a12      	ldr	r2, [pc, #72]	@ (8001dc8 <processCAN+0x150>)
 8001d7e:	6013      	str	r3, [r2, #0]
 8001d80:	e002      	b.n	8001d88 <processCAN+0x110>
//					ProcessTelemetryData(&gReceivedTelemetry);
				}
			}

        } else {
            printf("Failed to retrieve CAN message\n");
 8001d82:	4812      	ldr	r0, [pc, #72]	@ (8001dcc <processCAN+0x154>)
 8001d84:	f00d fa8e 	bl	800f2a4 <puts>
    while (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO1) > 0) {
 8001d88:	2101      	movs	r1, #1
 8001d8a:	4806      	ldr	r0, [pc, #24]	@ (8001da4 <processCAN+0x12c>)
 8001d8c:	f001 fe44 	bl	8003a18 <HAL_CAN_GetRxFifoFillLevel>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	f47f af74 	bne.w	8001c80 <processCAN+0x8>
        }
    }
}
 8001d98:	bf00      	nop
 8001d9a:	bf00      	nop
 8001d9c:	372c      	adds	r7, #44	@ 0x2c
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd90      	pop	{r4, r7, pc}
 8001da2:	bf00      	nop
 8001da4:	20000394 	.word	0x20000394
 8001da8:	08010364 	.word	0x08010364
 8001dac:	200006fc 	.word	0x200006fc
 8001db0:	20000700 	.word	0x20000700
 8001db4:	2000041c 	.word	0x2000041c
 8001db8:	20000430 	.word	0x20000430
 8001dbc:	2000070a 	.word	0x2000070a
 8001dc0:	2000070c 	.word	0x2000070c
 8001dc4:	20000428 	.word	0x20000428
 8001dc8:	20000434 	.word	0x20000434
 8001dcc:	080103a4 	.word	0x080103a4

08001dd0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b08a      	sub	sp, #40	@ 0x28
 8001dd4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd6:	f107 0314 	add.w	r3, r7, #20
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	605a      	str	r2, [r3, #4]
 8001de0:	609a      	str	r2, [r3, #8]
 8001de2:	60da      	str	r2, [r3, #12]
 8001de4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	613b      	str	r3, [r7, #16]
 8001dea:	4b37      	ldr	r3, [pc, #220]	@ (8001ec8 <MX_GPIO_Init+0xf8>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dee:	4a36      	ldr	r2, [pc, #216]	@ (8001ec8 <MX_GPIO_Init+0xf8>)
 8001df0:	f043 0304 	orr.w	r3, r3, #4
 8001df4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001df6:	4b34      	ldr	r3, [pc, #208]	@ (8001ec8 <MX_GPIO_Init+0xf8>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfa:	f003 0304 	and.w	r3, r3, #4
 8001dfe:	613b      	str	r3, [r7, #16]
 8001e00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	4b30      	ldr	r3, [pc, #192]	@ (8001ec8 <MX_GPIO_Init+0xf8>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0a:	4a2f      	ldr	r2, [pc, #188]	@ (8001ec8 <MX_GPIO_Init+0xf8>)
 8001e0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e12:	4b2d      	ldr	r3, [pc, #180]	@ (8001ec8 <MX_GPIO_Init+0xf8>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60bb      	str	r3, [r7, #8]
 8001e22:	4b29      	ldr	r3, [pc, #164]	@ (8001ec8 <MX_GPIO_Init+0xf8>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e26:	4a28      	ldr	r2, [pc, #160]	@ (8001ec8 <MX_GPIO_Init+0xf8>)
 8001e28:	f043 0301 	orr.w	r3, r3, #1
 8001e2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e2e:	4b26      	ldr	r3, [pc, #152]	@ (8001ec8 <MX_GPIO_Init+0xf8>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	60bb      	str	r3, [r7, #8]
 8001e38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	607b      	str	r3, [r7, #4]
 8001e3e:	4b22      	ldr	r3, [pc, #136]	@ (8001ec8 <MX_GPIO_Init+0xf8>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e42:	4a21      	ldr	r2, [pc, #132]	@ (8001ec8 <MX_GPIO_Init+0xf8>)
 8001e44:	f043 0302 	orr.w	r3, r3, #2
 8001e48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e4a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ec8 <MX_GPIO_Init+0xf8>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	607b      	str	r3, [r7, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8001e56:	2200      	movs	r2, #0
 8001e58:	2130      	movs	r1, #48	@ 0x30
 8001e5a:	481c      	ldr	r0, [pc, #112]	@ (8001ecc <MX_GPIO_Init+0xfc>)
 8001e5c:	f002 fad2 	bl	8004404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8001e60:	2200      	movs	r2, #0
 8001e62:	2106      	movs	r1, #6
 8001e64:	481a      	ldr	r0, [pc, #104]	@ (8001ed0 <MX_GPIO_Init+0x100>)
 8001e66:	f002 facd 	bl	8004404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e6a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e70:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001e74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e76:	2300      	movs	r3, #0
 8001e78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e7a:	f107 0314 	add.w	r3, r7, #20
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4814      	ldr	r0, [pc, #80]	@ (8001ed4 <MX_GPIO_Init+0x104>)
 8001e82:	f002 f92b 	bl	80040dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 8001e86:	2330      	movs	r3, #48	@ 0x30
 8001e88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e92:	2300      	movs	r3, #0
 8001e94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e96:	f107 0314 	add.w	r3, r7, #20
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	480b      	ldr	r0, [pc, #44]	@ (8001ecc <MX_GPIO_Init+0xfc>)
 8001e9e:	f002 f91d 	bl	80040dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001ea2:	2306      	movs	r3, #6
 8001ea4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb2:	f107 0314 	add.w	r3, r7, #20
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4805      	ldr	r0, [pc, #20]	@ (8001ed0 <MX_GPIO_Init+0x100>)
 8001eba:	f002 f90f 	bl	80040dc <HAL_GPIO_Init>

}
 8001ebe:	bf00      	nop
 8001ec0:	3728      	adds	r7, #40	@ 0x28
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	40020000 	.word	0x40020000
 8001ed0:	40020400 	.word	0x40020400
 8001ed4:	40020800 	.word	0x40020800

08001ed8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ed8:	b5b0      	push	{r4, r5, r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ede:	f000 fd13 	bl	8002908 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ee2:	f000 f83d 	bl	8001f60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ee6:	f7ff ff73 	bl	8001dd0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001eea:	f000 fafb 	bl	80024e4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001eee:	f000 fb4d 	bl	800258c <MX_TIM3_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001ef2:	f000 fc47 	bl	8002784 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8001ef6:	f7fe ff99 	bl	8000e2c <MX_ADC1_Init>
  MX_CAN1_Init();
 8001efa:	f7ff f82d 	bl	8000f58 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */



  init_encoder();
 8001efe:	f7ff fceb 	bl	80018d8 <init_encoder>
  DWT_Init();
 8001f02:	f7ff fa91 	bl	8001428 <DWT_Init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001f06:	2100      	movs	r1, #0
 8001f08:	4812      	ldr	r0, [pc, #72]	@ (8001f54 <main+0x7c>)
 8001f0a:	f004 ff89 	bl	8006e20 <HAL_TIM_PWM_Start>

  MX_USB_DEVICE_Init();
 8001f0e:	f007 f9b1 	bl	8009274 <MX_USB_DEVICE_Init>

  HAL_CAN_Start(&hcan1);
 8001f12:	4811      	ldr	r0, [pc, #68]	@ (8001f58 <main+0x80>)
 8001f14:	f001 fb4a 	bl	80035ac <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING);
 8001f18:	2110      	movs	r1, #16
 8001f1a:	480f      	ldr	r0, [pc, #60]	@ (8001f58 <main+0x80>)
 8001f1c:	f001 fda4 	bl	8003a68 <HAL_CAN_ActivateNotification>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001f20:	f7ff f8f0 	bl	8001104 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001f24:	f00a fbea 	bl	800c6fc <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // Task creation
  // Start scheduler
  vTaskStartScheduler();
 8001f28:	f00b fd2e 	bl	800d988 <vTaskStartScheduler>

  while (1)
  {
	  char message[] = "Hello from STM32!\r\n";
 8001f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f5c <main+0x84>)
 8001f2e:	1d3c      	adds	r4, r7, #4
 8001f30:	461d      	mov	r5, r3
 8001f32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f36:	682b      	ldr	r3, [r5, #0]
 8001f38:	6023      	str	r3, [r4, #0]
	  CDC_Transmit((uint8_t*)message, strlen(message));
 8001f3a:	1d3b      	adds	r3, r7, #4
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7fe f967 	bl	8000210 <strlen>
 8001f42:	4602      	mov	r2, r0
 8001f44:	1d3b      	adds	r3, r7, #4
 8001f46:	4611      	mov	r1, r2
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f007 faff 	bl	800954c <CDC_Transmit>
  {
 8001f4e:	bf00      	nop
 8001f50:	e7ec      	b.n	8001f2c <main+0x54>
 8001f52:	bf00      	nop
 8001f54:	200007a8 	.word	0x200007a8
 8001f58:	20000394 	.word	0x20000394
 8001f5c:	080103c4 	.word	0x080103c4

08001f60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b094      	sub	sp, #80	@ 0x50
 8001f64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f66:	f107 031c 	add.w	r3, r7, #28
 8001f6a:	2234      	movs	r2, #52	@ 0x34
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f00d faac 	bl	800f4cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f74:	f107 0308 	add.w	r3, r7, #8
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	605a      	str	r2, [r3, #4]
 8001f7e:	609a      	str	r2, [r3, #8]
 8001f80:	60da      	str	r2, [r3, #12]
 8001f82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f84:	2300      	movs	r3, #0
 8001f86:	607b      	str	r3, [r7, #4]
 8001f88:	4b29      	ldr	r3, [pc, #164]	@ (8002030 <SystemClock_Config+0xd0>)
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8c:	4a28      	ldr	r2, [pc, #160]	@ (8002030 <SystemClock_Config+0xd0>)
 8001f8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f92:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f94:	4b26      	ldr	r3, [pc, #152]	@ (8002030 <SystemClock_Config+0xd0>)
 8001f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f9c:	607b      	str	r3, [r7, #4]
 8001f9e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	603b      	str	r3, [r7, #0]
 8001fa4:	4b23      	ldr	r3, [pc, #140]	@ (8002034 <SystemClock_Config+0xd4>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001fac:	4a21      	ldr	r2, [pc, #132]	@ (8002034 <SystemClock_Config+0xd4>)
 8001fae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fb2:	6013      	str	r3, [r2, #0]
 8001fb4:	4b1f      	ldr	r3, [pc, #124]	@ (8002034 <SystemClock_Config+0xd4>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001fbc:	603b      	str	r3, [r7, #0]
 8001fbe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001fc4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001fc8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001fd2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001fd4:	2304      	movs	r3, #4
 8001fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001fd8:	2348      	movs	r3, #72	@ 0x48
 8001fda:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001fdc:	2302      	movs	r3, #2
 8001fde:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fe8:	f107 031c 	add.w	r3, r7, #28
 8001fec:	4618      	mov	r0, r3
 8001fee:	f004 fb5f 	bl	80066b0 <HAL_RCC_OscConfig>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001ff8:	f000 f854 	bl	80020a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ffc:	230f      	movs	r3, #15
 8001ffe:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002000:	2302      	movs	r3, #2
 8002002:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002004:	2300      	movs	r3, #0
 8002006:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002008:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800200c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800200e:	2300      	movs	r3, #0
 8002010:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002012:	f107 0308 	add.w	r3, r7, #8
 8002016:	2102      	movs	r1, #2
 8002018:	4618      	mov	r0, r3
 800201a:	f003 fcb7 	bl	800598c <HAL_RCC_ClockConfig>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8002024:	f000 f83e 	bl	80020a4 <Error_Handler>
  }
}
 8002028:	bf00      	nop
 800202a:	3750      	adds	r7, #80	@ 0x50
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	40023800 	.word	0x40023800
 8002034:	40007000 	.word	0x40007000

08002038 <HAL_CAN_RxFifo1MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a04      	ldr	r2, [pc, #16]	@ (8002058 <HAL_CAN_RxFifo1MsgPendingCallback+0x20>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d101      	bne.n	800204e <HAL_CAN_RxFifo1MsgPendingCallback+0x16>
	{
		processCAN();
 800204a:	f7ff fe15 	bl	8001c78 <processCAN>
	}
}
 800204e:	bf00      	nop
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40006400 	.word	0x40006400

0800205c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a04      	ldr	r2, [pc, #16]	@ (800207c <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d101      	bne.n	8002072 <HAL_CAN_RxFifo0MsgPendingCallback+0x16>
	{
		processCAN();
 800206e:	f7ff fe03 	bl	8001c78 <processCAN>
	}
}
 8002072:	bf00      	nop
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40006400 	.word	0x40006400

08002080 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a04      	ldr	r2, [pc, #16]	@ (80020a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d101      	bne.n	8002096 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002092:	f000 fc5b 	bl	800294c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002096:	bf00      	nop
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40001000 	.word	0x40001000

080020a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020a8:	b672      	cpsid	i
}
 80020aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020ac:	bf00      	nop
 80020ae:	e7fd      	b.n	80020ac <Error_Handler+0x8>

080020b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	607b      	str	r3, [r7, #4]
 80020ba:	4b12      	ldr	r3, [pc, #72]	@ (8002104 <HAL_MspInit+0x54>)
 80020bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020be:	4a11      	ldr	r2, [pc, #68]	@ (8002104 <HAL_MspInit+0x54>)
 80020c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80020c6:	4b0f      	ldr	r3, [pc, #60]	@ (8002104 <HAL_MspInit+0x54>)
 80020c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020ce:	607b      	str	r3, [r7, #4]
 80020d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	603b      	str	r3, [r7, #0]
 80020d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002104 <HAL_MspInit+0x54>)
 80020d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020da:	4a0a      	ldr	r2, [pc, #40]	@ (8002104 <HAL_MspInit+0x54>)
 80020dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80020e2:	4b08      	ldr	r3, [pc, #32]	@ (8002104 <HAL_MspInit+0x54>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ea:	603b      	str	r3, [r7, #0]
 80020ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80020ee:	2200      	movs	r2, #0
 80020f0:	210f      	movs	r1, #15
 80020f2:	f06f 0001 	mvn.w	r0, #1
 80020f6:	f001 ffc7 	bl	8004088 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020fa:	bf00      	nop
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40023800 	.word	0x40023800

08002108 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b08e      	sub	sp, #56	@ 0x38
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002110:	2300      	movs	r3, #0
 8002112:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002114:	2300      	movs	r3, #0
 8002116:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002118:	2300      	movs	r3, #0
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	4b33      	ldr	r3, [pc, #204]	@ (80021ec <HAL_InitTick+0xe4>)
 800211e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002120:	4a32      	ldr	r2, [pc, #200]	@ (80021ec <HAL_InitTick+0xe4>)
 8002122:	f043 0310 	orr.w	r3, r3, #16
 8002126:	6413      	str	r3, [r2, #64]	@ 0x40
 8002128:	4b30      	ldr	r3, [pc, #192]	@ (80021ec <HAL_InitTick+0xe4>)
 800212a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212c:	f003 0310 	and.w	r3, r3, #16
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002134:	f107 0210 	add.w	r2, r7, #16
 8002138:	f107 0314 	add.w	r3, r7, #20
 800213c:	4611      	mov	r1, r2
 800213e:	4618      	mov	r0, r3
 8002140:	f003 fd2a 	bl	8005b98 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002144:	6a3b      	ldr	r3, [r7, #32]
 8002146:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800214a:	2b00      	cmp	r3, #0
 800214c:	d103      	bne.n	8002156 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800214e:	f003 fd0f 	bl	8005b70 <HAL_RCC_GetPCLK1Freq>
 8002152:	6378      	str	r0, [r7, #52]	@ 0x34
 8002154:	e004      	b.n	8002160 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002156:	f003 fd0b 	bl	8005b70 <HAL_RCC_GetPCLK1Freq>
 800215a:	4603      	mov	r3, r0
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002160:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002162:	4a23      	ldr	r2, [pc, #140]	@ (80021f0 <HAL_InitTick+0xe8>)
 8002164:	fba2 2303 	umull	r2, r3, r2, r3
 8002168:	0c9b      	lsrs	r3, r3, #18
 800216a:	3b01      	subs	r3, #1
 800216c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800216e:	4b21      	ldr	r3, [pc, #132]	@ (80021f4 <HAL_InitTick+0xec>)
 8002170:	4a21      	ldr	r2, [pc, #132]	@ (80021f8 <HAL_InitTick+0xf0>)
 8002172:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002174:	4b1f      	ldr	r3, [pc, #124]	@ (80021f4 <HAL_InitTick+0xec>)
 8002176:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800217a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800217c:	4a1d      	ldr	r2, [pc, #116]	@ (80021f4 <HAL_InitTick+0xec>)
 800217e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002180:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002182:	4b1c      	ldr	r3, [pc, #112]	@ (80021f4 <HAL_InitTick+0xec>)
 8002184:	2200      	movs	r2, #0
 8002186:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002188:	4b1a      	ldr	r3, [pc, #104]	@ (80021f4 <HAL_InitTick+0xec>)
 800218a:	2200      	movs	r2, #0
 800218c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800218e:	4b19      	ldr	r3, [pc, #100]	@ (80021f4 <HAL_InitTick+0xec>)
 8002190:	2200      	movs	r2, #0
 8002192:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002194:	4817      	ldr	r0, [pc, #92]	@ (80021f4 <HAL_InitTick+0xec>)
 8002196:	f004 fd29 	bl	8006bec <HAL_TIM_Base_Init>
 800219a:	4603      	mov	r3, r0
 800219c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80021a0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d11b      	bne.n	80021e0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80021a8:	4812      	ldr	r0, [pc, #72]	@ (80021f4 <HAL_InitTick+0xec>)
 80021aa:	f004 fd79 	bl	8006ca0 <HAL_TIM_Base_Start_IT>
 80021ae:	4603      	mov	r3, r0
 80021b0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80021b4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d111      	bne.n	80021e0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80021bc:	2036      	movs	r0, #54	@ 0x36
 80021be:	f001 ff7f 	bl	80040c0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2b0f      	cmp	r3, #15
 80021c6:	d808      	bhi.n	80021da <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80021c8:	2200      	movs	r2, #0
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	2036      	movs	r0, #54	@ 0x36
 80021ce:	f001 ff5b 	bl	8004088 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021d2:	4a0a      	ldr	r2, [pc, #40]	@ (80021fc <HAL_InitTick+0xf4>)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6013      	str	r3, [r2, #0]
 80021d8:	e002      	b.n	80021e0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80021e0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3738      	adds	r7, #56	@ 0x38
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40023800 	.word	0x40023800
 80021f0:	431bde83 	.word	0x431bde83
 80021f4:	20000714 	.word	0x20000714
 80021f8:	40001000 	.word	0x40001000
 80021fc:	20000008 	.word	0x20000008

08002200 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8002204:	f3bf 8f4f 	dsb	sy
}
 8002208:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800220a:	4b06      	ldr	r3, [pc, #24]	@ (8002224 <__NVIC_SystemReset+0x24>)
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002212:	4904      	ldr	r1, [pc, #16]	@ (8002224 <__NVIC_SystemReset+0x24>)
 8002214:	4b04      	ldr	r3, [pc, #16]	@ (8002228 <__NVIC_SystemReset+0x28>)
 8002216:	4313      	orrs	r3, r2
 8002218:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800221a:	f3bf 8f4f 	dsb	sy
}
 800221e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002220:	bf00      	nop
 8002222:	e7fd      	b.n	8002220 <__NVIC_SystemReset+0x20>
 8002224:	e000ed00 	.word	0xe000ed00
 8002228:	05fa0004 	.word	0x05fa0004

0800222c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002230:	bf00      	nop
 8002232:	e7fd      	b.n	8002230 <NMI_Handler+0x4>

08002234 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b0d6      	sub	sp, #344	@ 0x158
 8002238:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE BEGIN HardFault_IRQn 0 */
	// Store stack pointer
	uint32_t *stack_pointer;
	__asm volatile (
 800223a:	f01e 0f04 	tst.w	lr, #4
 800223e:	bf0c      	ite	eq
 8002240:	f3ef 8308 	mrseq	r3, MSP
 8002244:	f3ef 8309 	mrsne	r3, PSP
 8002248:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
		"MRSNE %0, PSP \n"   // If PSP, move PSP to stack_pointer
		: "=r" (stack_pointer)
	);

	// Log or store the stack pointer contents for analysis
	uint32_t r0 = stack_pointer[0];  // R0
 800224c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	uint32_t r1 = stack_pointer[1];  // R1
 8002256:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	uint32_t r2 = stack_pointer[2];  // R2
 8002260:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	uint32_t r3 = stack_pointer[3];  // R3
 800226a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	uint32_t r12 = stack_pointer[4]; // R12
 8002274:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	uint32_t lr = stack_pointer[5];  // LR
 800227e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002282:	695b      	ldr	r3, [r3, #20]
 8002284:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	uint32_t pc = stack_pointer[6];  // PC
 8002288:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	uint32_t psr = stack_pointer[7]; // PSR
 8002292:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002296:	69db      	ldr	r3, [r3, #28]
 8002298:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	// Read the HFSR and CFSR registers for diagnostics
	uint32_t hfsr = SCB->HFSR;
 800229c:	4b16      	ldr	r3, [pc, #88]	@ (80022f8 <HardFault_Handler+0xc4>)
 800229e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
	uint32_t cfsr = SCB->CFSR;
 80022a4:	4b14      	ldr	r3, [pc, #80]	@ (80022f8 <HardFault_Handler+0xc4>)
 80022a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022a8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

	// Create a log message
	char log_buffer[256];
	snprintf(log_buffer, sizeof(log_buffer),
 80022ac:	1d38      	adds	r0, r7, #4
 80022ae:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80022b2:	9308      	str	r3, [sp, #32]
 80022b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80022b8:	9307      	str	r3, [sp, #28]
 80022ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80022be:	9306      	str	r3, [sp, #24]
 80022c0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80022c4:	9305      	str	r3, [sp, #20]
 80022c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80022ca:	9304      	str	r3, [sp, #16]
 80022cc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80022d0:	9303      	str	r3, [sp, #12]
 80022d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80022d6:	9302      	str	r3, [sp, #8]
 80022d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80022dc:	9301      	str	r3, [sp, #4]
 80022de:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80022e8:	4a04      	ldr	r2, [pc, #16]	@ (80022fc <HardFault_Handler+0xc8>)
 80022ea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80022ee:	f00c ffe1 	bl	800f2b4 <sniprintf>
	);

	// Log the message
//	log_message(log_buffer);

	NVIC_SystemReset();
 80022f2:	f7ff ff85 	bl	8002200 <__NVIC_SystemReset>
 80022f6:	bf00      	nop
 80022f8:	e000ed00 	.word	0xe000ed00
 80022fc:	080103d8 	.word	0x080103d8

08002300 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002304:	bf00      	nop
 8002306:	e7fd      	b.n	8002304 <MemManage_Handler+0x4>

08002308 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800230c:	bf00      	nop
 800230e:	e7fd      	b.n	800230c <BusFault_Handler+0x4>

08002310 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002314:	bf00      	nop
 8002316:	e7fd      	b.n	8002314 <UsageFault_Handler+0x4>

08002318 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800231c:	bf00      	nop
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
	...

08002328 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800232c:	4802      	ldr	r0, [pc, #8]	@ (8002338 <CAN1_RX0_IRQHandler+0x10>)
 800232e:	f001 fbc1 	bl	8003ab4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002332:	bf00      	nop
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	20000394 	.word	0x20000394

0800233c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002340:	4802      	ldr	r0, [pc, #8]	@ (800234c <CAN1_RX1_IRQHandler+0x10>)
 8002342:	f001 fbb7 	bl	8003ab4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	20000394 	.word	0x20000394

08002350 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002354:	4802      	ldr	r0, [pc, #8]	@ (8002360 <TIM6_DAC_IRQHandler+0x10>)
 8002356:	f004 ff5f 	bl	8007218 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	20000714 	.word	0x20000714

08002364 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002368:	4802      	ldr	r0, [pc, #8]	@ (8002374 <OTG_FS_IRQHandler+0x10>)
 800236a:	f002 f9af 	bl	80046cc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	200007f0 	.word	0x200007f0

08002378 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]
 8002388:	e00a      	b.n	80023a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800238a:	f3af 8000 	nop.w
 800238e:	4601      	mov	r1, r0
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	1c5a      	adds	r2, r3, #1
 8002394:	60ba      	str	r2, [r7, #8]
 8002396:	b2ca      	uxtb	r2, r1
 8002398:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	3301      	adds	r3, #1
 800239e:	617b      	str	r3, [r7, #20]
 80023a0:	697a      	ldr	r2, [r7, #20]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	dbf0      	blt.n	800238a <_read+0x12>
  }

  return len;
 80023a8:	687b      	ldr	r3, [r7, #4]
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3718      	adds	r7, #24
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b086      	sub	sp, #24
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	60f8      	str	r0, [r7, #12]
 80023ba:	60b9      	str	r1, [r7, #8]
 80023bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023be:	2300      	movs	r3, #0
 80023c0:	617b      	str	r3, [r7, #20]
 80023c2:	e009      	b.n	80023d8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	1c5a      	adds	r2, r3, #1
 80023c8:	60ba      	str	r2, [r7, #8]
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	3301      	adds	r3, #1
 80023d6:	617b      	str	r3, [r7, #20]
 80023d8:	697a      	ldr	r2, [r7, #20]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	429a      	cmp	r2, r3
 80023de:	dbf1      	blt.n	80023c4 <_write+0x12>
  }
  return len;
 80023e0:	687b      	ldr	r3, [r7, #4]
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3718      	adds	r7, #24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <_close>:

int _close(int file)
{
 80023ea:	b480      	push	{r7}
 80023ec:	b083      	sub	sp, #12
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002402:	b480      	push	{r7}
 8002404:	b083      	sub	sp, #12
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
 800240a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002412:	605a      	str	r2, [r3, #4]
  return 0;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <_isatty>:

int _isatty(int file)
{
 8002422:	b480      	push	{r7}
 8002424:	b083      	sub	sp, #12
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800242a:	2301      	movs	r3, #1
}
 800242c:	4618      	mov	r0, r3
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3714      	adds	r7, #20
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
	...

08002454 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800245c:	4a14      	ldr	r2, [pc, #80]	@ (80024b0 <_sbrk+0x5c>)
 800245e:	4b15      	ldr	r3, [pc, #84]	@ (80024b4 <_sbrk+0x60>)
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002468:	4b13      	ldr	r3, [pc, #76]	@ (80024b8 <_sbrk+0x64>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d102      	bne.n	8002476 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002470:	4b11      	ldr	r3, [pc, #68]	@ (80024b8 <_sbrk+0x64>)
 8002472:	4a12      	ldr	r2, [pc, #72]	@ (80024bc <_sbrk+0x68>)
 8002474:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002476:	4b10      	ldr	r3, [pc, #64]	@ (80024b8 <_sbrk+0x64>)
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4413      	add	r3, r2
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	429a      	cmp	r2, r3
 8002482:	d207      	bcs.n	8002494 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002484:	f00d f8d6 	bl	800f634 <__errno>
 8002488:	4603      	mov	r3, r0
 800248a:	220c      	movs	r2, #12
 800248c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800248e:	f04f 33ff 	mov.w	r3, #4294967295
 8002492:	e009      	b.n	80024a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002494:	4b08      	ldr	r3, [pc, #32]	@ (80024b8 <_sbrk+0x64>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800249a:	4b07      	ldr	r3, [pc, #28]	@ (80024b8 <_sbrk+0x64>)
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4413      	add	r3, r2
 80024a2:	4a05      	ldr	r2, [pc, #20]	@ (80024b8 <_sbrk+0x64>)
 80024a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024a6:	68fb      	ldr	r3, [r7, #12]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3718      	adds	r7, #24
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	20020000 	.word	0x20020000
 80024b4:	00000400 	.word	0x00000400
 80024b8:	2000075c 	.word	0x2000075c
 80024bc:	20005510 	.word	0x20005510

080024c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024c4:	4b06      	ldr	r3, [pc, #24]	@ (80024e0 <SystemInit+0x20>)
 80024c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ca:	4a05      	ldr	r2, [pc, #20]	@ (80024e0 <SystemInit+0x20>)
 80024cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024d4:	bf00      	nop
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	e000ed00 	.word	0xe000ed00

080024e4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b08c      	sub	sp, #48	@ 0x30
 80024e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80024ea:	f107 030c 	add.w	r3, r7, #12
 80024ee:	2224      	movs	r2, #36	@ 0x24
 80024f0:	2100      	movs	r1, #0
 80024f2:	4618      	mov	r0, r3
 80024f4:	f00c ffea 	bl	800f4cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024f8:	1d3b      	adds	r3, r7, #4
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002500:	4b21      	ldr	r3, [pc, #132]	@ (8002588 <MX_TIM2_Init+0xa4>)
 8002502:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002506:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002508:	4b1f      	ldr	r3, [pc, #124]	@ (8002588 <MX_TIM2_Init+0xa4>)
 800250a:	2200      	movs	r2, #0
 800250c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800250e:	4b1e      	ldr	r3, [pc, #120]	@ (8002588 <MX_TIM2_Init+0xa4>)
 8002510:	2200      	movs	r2, #0
 8002512:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002514:	4b1c      	ldr	r3, [pc, #112]	@ (8002588 <MX_TIM2_Init+0xa4>)
 8002516:	f04f 32ff 	mov.w	r2, #4294967295
 800251a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800251c:	4b1a      	ldr	r3, [pc, #104]	@ (8002588 <MX_TIM2_Init+0xa4>)
 800251e:	2200      	movs	r2, #0
 8002520:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002522:	4b19      	ldr	r3, [pc, #100]	@ (8002588 <MX_TIM2_Init+0xa4>)
 8002524:	2200      	movs	r2, #0
 8002526:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002528:	2303      	movs	r3, #3
 800252a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800252c:	2300      	movs	r3, #0
 800252e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002530:	2301      	movs	r3, #1
 8002532:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002534:	2300      	movs	r3, #0
 8002536:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002538:	2300      	movs	r3, #0
 800253a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800253c:	2300      	movs	r3, #0
 800253e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002540:	2301      	movs	r3, #1
 8002542:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002544:	2300      	movs	r3, #0
 8002546:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002548:	2300      	movs	r3, #0
 800254a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800254c:	f107 030c 	add.w	r3, r7, #12
 8002550:	4619      	mov	r1, r3
 8002552:	480d      	ldr	r0, [pc, #52]	@ (8002588 <MX_TIM2_Init+0xa4>)
 8002554:	f004 fd2c 	bl	8006fb0 <HAL_TIM_Encoder_Init>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800255e:	f7ff fda1 	bl	80020a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002562:	2300      	movs	r3, #0
 8002564:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002566:	2300      	movs	r3, #0
 8002568:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800256a:	1d3b      	adds	r3, r7, #4
 800256c:	4619      	mov	r1, r3
 800256e:	4806      	ldr	r0, [pc, #24]	@ (8002588 <MX_TIM2_Init+0xa4>)
 8002570:	f005 faae 	bl	8007ad0 <HAL_TIMEx_MasterConfigSynchronization>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800257a:	f7ff fd93 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800257e:	bf00      	nop
 8002580:	3730      	adds	r7, #48	@ 0x30
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	20000760 	.word	0x20000760

0800258c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b08a      	sub	sp, #40	@ 0x28
 8002590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002592:	f107 0320 	add.w	r3, r7, #32
 8002596:	2200      	movs	r2, #0
 8002598:	601a      	str	r2, [r3, #0]
 800259a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800259c:	1d3b      	adds	r3, r7, #4
 800259e:	2200      	movs	r2, #0
 80025a0:	601a      	str	r2, [r3, #0]
 80025a2:	605a      	str	r2, [r3, #4]
 80025a4:	609a      	str	r2, [r3, #8]
 80025a6:	60da      	str	r2, [r3, #12]
 80025a8:	611a      	str	r2, [r3, #16]
 80025aa:	615a      	str	r2, [r3, #20]
 80025ac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80025ae:	4b22      	ldr	r3, [pc, #136]	@ (8002638 <MX_TIM3_Init+0xac>)
 80025b0:	4a22      	ldr	r2, [pc, #136]	@ (800263c <MX_TIM3_Init+0xb0>)
 80025b2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84 -1;
 80025b4:	4b20      	ldr	r3, [pc, #128]	@ (8002638 <MX_TIM3_Init+0xac>)
 80025b6:	2253      	movs	r2, #83	@ 0x53
 80025b8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ba:	4b1f      	ldr	r3, [pc, #124]	@ (8002638 <MX_TIM3_Init+0xac>)
 80025bc:	2200      	movs	r2, #0
 80025be:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000 - 1;
 80025c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002638 <MX_TIM3_Init+0xac>)
 80025c2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80025c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002638 <MX_TIM3_Init+0xac>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002638 <MX_TIM3_Init+0xac>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80025d4:	4818      	ldr	r0, [pc, #96]	@ (8002638 <MX_TIM3_Init+0xac>)
 80025d6:	f004 fbd3 	bl	8006d80 <HAL_TIM_PWM_Init>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80025e0:	f7ff fd60 	bl	80020a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025e4:	2300      	movs	r3, #0
 80025e6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025e8:	2300      	movs	r3, #0
 80025ea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025ec:	f107 0320 	add.w	r3, r7, #32
 80025f0:	4619      	mov	r1, r3
 80025f2:	4811      	ldr	r0, [pc, #68]	@ (8002638 <MX_TIM3_Init+0xac>)
 80025f4:	f005 fa6c 	bl	8007ad0 <HAL_TIMEx_MasterConfigSynchronization>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80025fe:	f7ff fd51 	bl	80020a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002602:	2360      	movs	r3, #96	@ 0x60
 8002604:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8002606:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800260a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800260c:	2300      	movs	r3, #0
 800260e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002610:	2300      	movs	r3, #0
 8002612:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002614:	1d3b      	adds	r3, r7, #4
 8002616:	2200      	movs	r2, #0
 8002618:	4619      	mov	r1, r3
 800261a:	4807      	ldr	r0, [pc, #28]	@ (8002638 <MX_TIM3_Init+0xac>)
 800261c:	f004 feec 	bl	80073f8 <HAL_TIM_PWM_ConfigChannel>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8002626:	f7ff fd3d 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800262a:	4803      	ldr	r0, [pc, #12]	@ (8002638 <MX_TIM3_Init+0xac>)
 800262c:	f000 f870 	bl	8002710 <HAL_TIM_MspPostInit>

}
 8002630:	bf00      	nop
 8002632:	3728      	adds	r7, #40	@ 0x28
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	200007a8 	.word	0x200007a8
 800263c:	40000400 	.word	0x40000400

08002640 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b08a      	sub	sp, #40	@ 0x28
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002648:	f107 0314 	add.w	r3, r7, #20
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	605a      	str	r2, [r3, #4]
 8002652:	609a      	str	r2, [r3, #8]
 8002654:	60da      	str	r2, [r3, #12]
 8002656:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002660:	d12b      	bne.n	80026ba <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	613b      	str	r3, [r7, #16]
 8002666:	4b17      	ldr	r3, [pc, #92]	@ (80026c4 <HAL_TIM_Encoder_MspInit+0x84>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266a:	4a16      	ldr	r2, [pc, #88]	@ (80026c4 <HAL_TIM_Encoder_MspInit+0x84>)
 800266c:	f043 0301 	orr.w	r3, r3, #1
 8002670:	6413      	str	r3, [r2, #64]	@ 0x40
 8002672:	4b14      	ldr	r3, [pc, #80]	@ (80026c4 <HAL_TIM_Encoder_MspInit+0x84>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	613b      	str	r3, [r7, #16]
 800267c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800267e:	2300      	movs	r3, #0
 8002680:	60fb      	str	r3, [r7, #12]
 8002682:	4b10      	ldr	r3, [pc, #64]	@ (80026c4 <HAL_TIM_Encoder_MspInit+0x84>)
 8002684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002686:	4a0f      	ldr	r2, [pc, #60]	@ (80026c4 <HAL_TIM_Encoder_MspInit+0x84>)
 8002688:	f043 0301 	orr.w	r3, r3, #1
 800268c:	6313      	str	r3, [r2, #48]	@ 0x30
 800268e:	4b0d      	ldr	r3, [pc, #52]	@ (80026c4 <HAL_TIM_Encoder_MspInit+0x84>)
 8002690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	60fb      	str	r3, [r7, #12]
 8002698:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800269a:	2303      	movs	r3, #3
 800269c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269e:	2302      	movs	r3, #2
 80026a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a2:	2300      	movs	r3, #0
 80026a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a6:	2300      	movs	r3, #0
 80026a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026aa:	2301      	movs	r3, #1
 80026ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ae:	f107 0314 	add.w	r3, r7, #20
 80026b2:	4619      	mov	r1, r3
 80026b4:	4804      	ldr	r0, [pc, #16]	@ (80026c8 <HAL_TIM_Encoder_MspInit+0x88>)
 80026b6:	f001 fd11 	bl	80040dc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80026ba:	bf00      	nop
 80026bc:	3728      	adds	r7, #40	@ 0x28
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	40023800 	.word	0x40023800
 80026c8:	40020000 	.word	0x40020000

080026cc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a0b      	ldr	r2, [pc, #44]	@ (8002708 <HAL_TIM_PWM_MspInit+0x3c>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d10d      	bne.n	80026fa <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026de:	2300      	movs	r3, #0
 80026e0:	60fb      	str	r3, [r7, #12]
 80026e2:	4b0a      	ldr	r3, [pc, #40]	@ (800270c <HAL_TIM_PWM_MspInit+0x40>)
 80026e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e6:	4a09      	ldr	r2, [pc, #36]	@ (800270c <HAL_TIM_PWM_MspInit+0x40>)
 80026e8:	f043 0302 	orr.w	r3, r3, #2
 80026ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80026ee:	4b07      	ldr	r3, [pc, #28]	@ (800270c <HAL_TIM_PWM_MspInit+0x40>)
 80026f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80026fa:	bf00      	nop
 80026fc:	3714      	adds	r7, #20
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	40000400 	.word	0x40000400
 800270c:	40023800 	.word	0x40023800

08002710 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b088      	sub	sp, #32
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002718:	f107 030c 	add.w	r3, r7, #12
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	605a      	str	r2, [r3, #4]
 8002722:	609a      	str	r2, [r3, #8]
 8002724:	60da      	str	r2, [r3, #12]
 8002726:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a12      	ldr	r2, [pc, #72]	@ (8002778 <HAL_TIM_MspPostInit+0x68>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d11d      	bne.n	800276e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002732:	2300      	movs	r3, #0
 8002734:	60bb      	str	r3, [r7, #8]
 8002736:	4b11      	ldr	r3, [pc, #68]	@ (800277c <HAL_TIM_MspPostInit+0x6c>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273a:	4a10      	ldr	r2, [pc, #64]	@ (800277c <HAL_TIM_MspPostInit+0x6c>)
 800273c:	f043 0301 	orr.w	r3, r3, #1
 8002740:	6313      	str	r3, [r2, #48]	@ 0x30
 8002742:	4b0e      	ldr	r3, [pc, #56]	@ (800277c <HAL_TIM_MspPostInit+0x6c>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	60bb      	str	r3, [r7, #8]
 800274c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800274e:	2340      	movs	r3, #64	@ 0x40
 8002750:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002752:	2302      	movs	r3, #2
 8002754:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002756:	2300      	movs	r3, #0
 8002758:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800275a:	2300      	movs	r3, #0
 800275c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800275e:	2302      	movs	r3, #2
 8002760:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002762:	f107 030c 	add.w	r3, r7, #12
 8002766:	4619      	mov	r1, r3
 8002768:	4805      	ldr	r0, [pc, #20]	@ (8002780 <HAL_TIM_MspPostInit+0x70>)
 800276a:	f001 fcb7 	bl	80040dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800276e:	bf00      	nop
 8002770:	3720      	adds	r7, #32
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	40000400 	.word	0x40000400
 800277c:	40023800 	.word	0x40023800
 8002780:	40020000 	.word	0x40020000

08002784 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002788:	4b14      	ldr	r3, [pc, #80]	@ (80027dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800278a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800278e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002790:	4b12      	ldr	r3, [pc, #72]	@ (80027dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002792:	2206      	movs	r2, #6
 8002794:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002796:	4b11      	ldr	r3, [pc, #68]	@ (80027dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002798:	2202      	movs	r2, #2
 800279a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800279c:	4b0f      	ldr	r3, [pc, #60]	@ (80027dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800279e:	2200      	movs	r2, #0
 80027a0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80027a2:	4b0e      	ldr	r3, [pc, #56]	@ (80027dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80027a4:	2202      	movs	r2, #2
 80027a6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80027a8:	4b0c      	ldr	r3, [pc, #48]	@ (80027dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80027ae:	4b0b      	ldr	r3, [pc, #44]	@ (80027dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80027b4:	4b09      	ldr	r3, [pc, #36]	@ (80027dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80027ba:	4b08      	ldr	r3, [pc, #32]	@ (80027dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80027bc:	2200      	movs	r2, #0
 80027be:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80027c0:	4b06      	ldr	r3, [pc, #24]	@ (80027dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80027c6:	4805      	ldr	r0, [pc, #20]	@ (80027dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80027c8:	f001 fe35 	bl	8004436 <HAL_PCD_Init>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80027d2:	f7ff fc67 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80027d6:	bf00      	nop
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	200007f0 	.word	0x200007f0

080027e0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b0a0      	sub	sp, #128	@ 0x80
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	605a      	str	r2, [r3, #4]
 80027f2:	609a      	str	r2, [r3, #8]
 80027f4:	60da      	str	r2, [r3, #12]
 80027f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027f8:	f107 0310 	add.w	r3, r7, #16
 80027fc:	225c      	movs	r2, #92	@ 0x5c
 80027fe:	2100      	movs	r1, #0
 8002800:	4618      	mov	r0, r3
 8002802:	f00c fe63 	bl	800f4cc <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800280e:	d149      	bne.n	80028a4 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002810:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002814:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8002816:	2300      	movs	r3, #0
 8002818:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800281a:	f107 0310 	add.w	r3, r7, #16
 800281e:	4618      	mov	r0, r3
 8002820:	f003 f9ec 	bl	8005bfc <HAL_RCCEx_PeriphCLKConfig>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800282a:	f7ff fc3b 	bl	80020a4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800282e:	2300      	movs	r3, #0
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	4b1e      	ldr	r3, [pc, #120]	@ (80028ac <HAL_PCD_MspInit+0xcc>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002836:	4a1d      	ldr	r2, [pc, #116]	@ (80028ac <HAL_PCD_MspInit+0xcc>)
 8002838:	f043 0301 	orr.w	r3, r3, #1
 800283c:	6313      	str	r3, [r2, #48]	@ 0x30
 800283e:	4b1b      	ldr	r3, [pc, #108]	@ (80028ac <HAL_PCD_MspInit+0xcc>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800284a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800284e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002850:	2302      	movs	r3, #2
 8002852:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002854:	2300      	movs	r3, #0
 8002856:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002858:	2303      	movs	r3, #3
 800285a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800285c:	230a      	movs	r3, #10
 800285e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002860:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002864:	4619      	mov	r1, r3
 8002866:	4812      	ldr	r0, [pc, #72]	@ (80028b0 <HAL_PCD_MspInit+0xd0>)
 8002868:	f001 fc38 	bl	80040dc <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800286c:	4b0f      	ldr	r3, [pc, #60]	@ (80028ac <HAL_PCD_MspInit+0xcc>)
 800286e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002870:	4a0e      	ldr	r2, [pc, #56]	@ (80028ac <HAL_PCD_MspInit+0xcc>)
 8002872:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002876:	6353      	str	r3, [r2, #52]	@ 0x34
 8002878:	2300      	movs	r3, #0
 800287a:	60bb      	str	r3, [r7, #8]
 800287c:	4b0b      	ldr	r3, [pc, #44]	@ (80028ac <HAL_PCD_MspInit+0xcc>)
 800287e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002880:	4a0a      	ldr	r2, [pc, #40]	@ (80028ac <HAL_PCD_MspInit+0xcc>)
 8002882:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002886:	6453      	str	r3, [r2, #68]	@ 0x44
 8002888:	4b08      	ldr	r3, [pc, #32]	@ (80028ac <HAL_PCD_MspInit+0xcc>)
 800288a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800288c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002890:	60bb      	str	r3, [r7, #8]
 8002892:	68bb      	ldr	r3, [r7, #8]

    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8002894:	2200      	movs	r2, #0
 8002896:	2106      	movs	r1, #6
 8002898:	2043      	movs	r0, #67	@ 0x43
 800289a:	f001 fbf5 	bl	8004088 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800289e:	2043      	movs	r0, #67	@ 0x43
 80028a0:	f001 fc0e 	bl	80040c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80028a4:	bf00      	nop
 80028a6:	3780      	adds	r7, #128	@ 0x80
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40023800 	.word	0x40023800
 80028b0:	40020000 	.word	0x40020000

080028b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80028b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80028ec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80028b8:	f7ff fe02 	bl	80024c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028bc:	480c      	ldr	r0, [pc, #48]	@ (80028f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80028be:	490d      	ldr	r1, [pc, #52]	@ (80028f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80028c0:	4a0d      	ldr	r2, [pc, #52]	@ (80028f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80028c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028c4:	e002      	b.n	80028cc <LoopCopyDataInit>

080028c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028ca:	3304      	adds	r3, #4

080028cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028d0:	d3f9      	bcc.n	80028c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028d2:	4a0a      	ldr	r2, [pc, #40]	@ (80028fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80028d4:	4c0a      	ldr	r4, [pc, #40]	@ (8002900 <LoopFillZerobss+0x22>)
  movs r3, #0
 80028d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028d8:	e001      	b.n	80028de <LoopFillZerobss>

080028da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028dc:	3204      	adds	r2, #4

080028de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028e0:	d3fb      	bcc.n	80028da <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80028e2:	f00c fead 	bl	800f640 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028e6:	f7ff faf7 	bl	8001ed8 <main>
  bx  lr    
 80028ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80028ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80028f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028f4:	20000330 	.word	0x20000330
  ldr r2, =_sidata
 80028f8:	0801051c 	.word	0x0801051c
  ldr r2, =_sbss
 80028fc:	20000330 	.word	0x20000330
  ldr r4, =_ebss
 8002900:	2000550c 	.word	0x2000550c

08002904 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002904:	e7fe      	b.n	8002904 <ADC_IRQHandler>
	...

08002908 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800290c:	4b0e      	ldr	r3, [pc, #56]	@ (8002948 <HAL_Init+0x40>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a0d      	ldr	r2, [pc, #52]	@ (8002948 <HAL_Init+0x40>)
 8002912:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002916:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002918:	4b0b      	ldr	r3, [pc, #44]	@ (8002948 <HAL_Init+0x40>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a0a      	ldr	r2, [pc, #40]	@ (8002948 <HAL_Init+0x40>)
 800291e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002922:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002924:	4b08      	ldr	r3, [pc, #32]	@ (8002948 <HAL_Init+0x40>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a07      	ldr	r2, [pc, #28]	@ (8002948 <HAL_Init+0x40>)
 800292a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800292e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002930:	2003      	movs	r0, #3
 8002932:	f001 fb9e 	bl	8004072 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002936:	200f      	movs	r0, #15
 8002938:	f7ff fbe6 	bl	8002108 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800293c:	f7ff fbb8 	bl	80020b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40023c00 	.word	0x40023c00

0800294c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002950:	4b06      	ldr	r3, [pc, #24]	@ (800296c <HAL_IncTick+0x20>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	461a      	mov	r2, r3
 8002956:	4b06      	ldr	r3, [pc, #24]	@ (8002970 <HAL_IncTick+0x24>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4413      	add	r3, r2
 800295c:	4a04      	ldr	r2, [pc, #16]	@ (8002970 <HAL_IncTick+0x24>)
 800295e:	6013      	str	r3, [r2, #0]
}
 8002960:	bf00      	nop
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	2000000c 	.word	0x2000000c
 8002970:	20000cd4 	.word	0x20000cd4

08002974 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  return uwTick;
 8002978:	4b03      	ldr	r3, [pc, #12]	@ (8002988 <HAL_GetTick+0x14>)
 800297a:	681b      	ldr	r3, [r3, #0]
}
 800297c:	4618      	mov	r0, r3
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	20000cd4 	.word	0x20000cd4

0800298c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002994:	f7ff ffee 	bl	8002974 <HAL_GetTick>
 8002998:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a4:	d005      	beq.n	80029b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029a6:	4b0a      	ldr	r3, [pc, #40]	@ (80029d0 <HAL_Delay+0x44>)
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	461a      	mov	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	4413      	add	r3, r2
 80029b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029b2:	bf00      	nop
 80029b4:	f7ff ffde 	bl	8002974 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d8f7      	bhi.n	80029b4 <HAL_Delay+0x28>
  {
  }
}
 80029c4:	bf00      	nop
 80029c6:	bf00      	nop
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	2000000c 	.word	0x2000000c

080029d4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029dc:	2300      	movs	r3, #0
 80029de:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e033      	b.n	8002a52 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d109      	bne.n	8002a06 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f7fe fa6c 	bl	8000ed0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0a:	f003 0310 	and.w	r3, r3, #16
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d118      	bne.n	8002a44 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a16:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002a1a:	f023 0302 	bic.w	r3, r3, #2
 8002a1e:	f043 0202 	orr.w	r2, r3, #2
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 fae8 	bl	8002ffc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a36:	f023 0303 	bic.w	r3, r3, #3
 8002a3a:	f043 0201 	orr.w	r2, r3, #1
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	641a      	str	r2, [r3, #64]	@ 0x40
 8002a42:	e001      	b.n	8002a48 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
	...

08002a5c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002a64:	2300      	movs	r3, #0
 8002a66:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d101      	bne.n	8002a76 <HAL_ADC_Start+0x1a>
 8002a72:	2302      	movs	r3, #2
 8002a74:	e0b2      	b.n	8002bdc <HAL_ADC_Start+0x180>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f003 0301 	and.w	r3, r3, #1
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d018      	beq.n	8002abe <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	689a      	ldr	r2, [r3, #8]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f042 0201 	orr.w	r2, r2, #1
 8002a9a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002a9c:	4b52      	ldr	r3, [pc, #328]	@ (8002be8 <HAL_ADC_Start+0x18c>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a52      	ldr	r2, [pc, #328]	@ (8002bec <HAL_ADC_Start+0x190>)
 8002aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa6:	0c9a      	lsrs	r2, r3, #18
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	4413      	add	r3, r2
 8002aae:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002ab0:	e002      	b.n	8002ab8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1f9      	bne.n	8002ab2 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d17a      	bne.n	8002bc2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002ad4:	f023 0301 	bic.w	r3, r3, #1
 8002ad8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d007      	beq.n	8002afe <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002af6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b0a:	d106      	bne.n	8002b1a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b10:	f023 0206 	bic.w	r2, r3, #6
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	645a      	str	r2, [r3, #68]	@ 0x44
 8002b18:	e002      	b.n	8002b20 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b28:	4b31      	ldr	r3, [pc, #196]	@ (8002bf0 <HAL_ADC_Start+0x194>)
 8002b2a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002b34:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f003 031f 	and.w	r3, r3, #31
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d12a      	bne.n	8002b98 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a2b      	ldr	r2, [pc, #172]	@ (8002bf4 <HAL_ADC_Start+0x198>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d015      	beq.n	8002b78 <HAL_ADC_Start+0x11c>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a29      	ldr	r2, [pc, #164]	@ (8002bf8 <HAL_ADC_Start+0x19c>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d105      	bne.n	8002b62 <HAL_ADC_Start+0x106>
 8002b56:	4b26      	ldr	r3, [pc, #152]	@ (8002bf0 <HAL_ADC_Start+0x194>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f003 031f 	and.w	r3, r3, #31
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00a      	beq.n	8002b78 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a25      	ldr	r2, [pc, #148]	@ (8002bfc <HAL_ADC_Start+0x1a0>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d136      	bne.n	8002bda <HAL_ADC_Start+0x17e>
 8002b6c:	4b20      	ldr	r3, [pc, #128]	@ (8002bf0 <HAL_ADC_Start+0x194>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f003 0310 	and.w	r3, r3, #16
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d130      	bne.n	8002bda <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d129      	bne.n	8002bda <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002b94:	609a      	str	r2, [r3, #8]
 8002b96:	e020      	b.n	8002bda <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a15      	ldr	r2, [pc, #84]	@ (8002bf4 <HAL_ADC_Start+0x198>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d11b      	bne.n	8002bda <HAL_ADC_Start+0x17e>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d114      	bne.n	8002bda <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689a      	ldr	r2, [r3, #8]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002bbe:	609a      	str	r2, [r3, #8]
 8002bc0:	e00b      	b.n	8002bda <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc6:	f043 0210 	orr.w	r2, r3, #16
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd2:	f043 0201 	orr.w	r2, r3, #1
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3714      	adds	r7, #20
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr
 8002be8:	20000004 	.word	0x20000004
 8002bec:	431bde83 	.word	0x431bde83
 8002bf0:	40012300 	.word	0x40012300
 8002bf4:	40012000 	.word	0x40012000
 8002bf8:	40012100 	.word	0x40012100
 8002bfc:	40012200 	.word	0x40012200

08002c00 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d101      	bne.n	8002c16 <HAL_ADC_Stop+0x16>
 8002c12:	2302      	movs	r3, #2
 8002c14:	e021      	b.n	8002c5a <HAL_ADC_Stop+0x5a>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f022 0201 	bic.w	r2, r2, #1
 8002c2c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d109      	bne.n	8002c50 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c40:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002c44:	f023 0301 	bic.w	r3, r3, #1
 8002c48:	f043 0201 	orr.w	r2, r3, #1
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr

08002c66 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b084      	sub	sp, #16
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
 8002c6e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002c70:	2300      	movs	r3, #0
 8002c72:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c82:	d113      	bne.n	8002cac <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002c8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c92:	d10b      	bne.n	8002cac <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c98:	f043 0220 	orr.w	r2, r3, #32
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e063      	b.n	8002d74 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cac:	f7ff fe62 	bl	8002974 <HAL_GetTick>
 8002cb0:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002cb2:	e021      	b.n	8002cf8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cba:	d01d      	beq.n	8002cf8 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d007      	beq.n	8002cd2 <HAL_ADC_PollForConversion+0x6c>
 8002cc2:	f7ff fe57 	bl	8002974 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d212      	bcs.n	8002cf8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d00b      	beq.n	8002cf8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce4:	f043 0204 	orr.w	r2, r3, #4
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e03d      	b.n	8002d74 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d1d6      	bne.n	8002cb4 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f06f 0212 	mvn.w	r2, #18
 8002d0e:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d14:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d123      	bne.n	8002d72 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d11f      	bne.n	8002d72 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d38:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d006      	beq.n	8002d4e <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d111      	bne.n	8002d72 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d52:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d105      	bne.n	8002d72 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6a:	f043 0201 	orr.w	r2, r3, #1
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
	...

08002d98 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002da2:	2300      	movs	r3, #0
 8002da4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d101      	bne.n	8002db4 <HAL_ADC_ConfigChannel+0x1c>
 8002db0:	2302      	movs	r3, #2
 8002db2:	e113      	b.n	8002fdc <HAL_ADC_ConfigChannel+0x244>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2b09      	cmp	r3, #9
 8002dc2:	d925      	bls.n	8002e10 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68d9      	ldr	r1, [r3, #12]
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	4413      	add	r3, r2
 8002dd8:	3b1e      	subs	r3, #30
 8002dda:	2207      	movs	r2, #7
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	43da      	mvns	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	400a      	ands	r2, r1
 8002de8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68d9      	ldr	r1, [r3, #12]
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	4403      	add	r3, r0
 8002e02:	3b1e      	subs	r3, #30
 8002e04:	409a      	lsls	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	60da      	str	r2, [r3, #12]
 8002e0e:	e022      	b.n	8002e56 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6919      	ldr	r1, [r3, #16]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	4613      	mov	r3, r2
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	4413      	add	r3, r2
 8002e24:	2207      	movs	r2, #7
 8002e26:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2a:	43da      	mvns	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	400a      	ands	r2, r1
 8002e32:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6919      	ldr	r1, [r3, #16]
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	689a      	ldr	r2, [r3, #8]
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	4618      	mov	r0, r3
 8002e46:	4603      	mov	r3, r0
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	4403      	add	r3, r0
 8002e4c:	409a      	lsls	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	2b06      	cmp	r3, #6
 8002e5c:	d824      	bhi.n	8002ea8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685a      	ldr	r2, [r3, #4]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	4413      	add	r3, r2
 8002e6e:	3b05      	subs	r3, #5
 8002e70:	221f      	movs	r2, #31
 8002e72:	fa02 f303 	lsl.w	r3, r2, r3
 8002e76:	43da      	mvns	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	400a      	ands	r2, r1
 8002e7e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685a      	ldr	r2, [r3, #4]
 8002e92:	4613      	mov	r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	4413      	add	r3, r2
 8002e98:	3b05      	subs	r3, #5
 8002e9a:	fa00 f203 	lsl.w	r2, r0, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	635a      	str	r2, [r3, #52]	@ 0x34
 8002ea6:	e04c      	b.n	8002f42 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	2b0c      	cmp	r3, #12
 8002eae:	d824      	bhi.n	8002efa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	4413      	add	r3, r2
 8002ec0:	3b23      	subs	r3, #35	@ 0x23
 8002ec2:	221f      	movs	r2, #31
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	43da      	mvns	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	400a      	ands	r2, r1
 8002ed0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	4618      	mov	r0, r3
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685a      	ldr	r2, [r3, #4]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	4413      	add	r3, r2
 8002eea:	3b23      	subs	r3, #35	@ 0x23
 8002eec:	fa00 f203 	lsl.w	r2, r0, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ef8:	e023      	b.n	8002f42 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	4613      	mov	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	4413      	add	r3, r2
 8002f0a:	3b41      	subs	r3, #65	@ 0x41
 8002f0c:	221f      	movs	r2, #31
 8002f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f12:	43da      	mvns	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	400a      	ands	r2, r1
 8002f1a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	4618      	mov	r0, r3
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685a      	ldr	r2, [r3, #4]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4413      	add	r3, r2
 8002f34:	3b41      	subs	r3, #65	@ 0x41
 8002f36:	fa00 f203 	lsl.w	r2, r0, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f42:	4b29      	ldr	r3, [pc, #164]	@ (8002fe8 <HAL_ADC_ConfigChannel+0x250>)
 8002f44:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a28      	ldr	r2, [pc, #160]	@ (8002fec <HAL_ADC_ConfigChannel+0x254>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d10f      	bne.n	8002f70 <HAL_ADC_ConfigChannel+0x1d8>
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2b12      	cmp	r3, #18
 8002f56:	d10b      	bne.n	8002f70 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a1d      	ldr	r2, [pc, #116]	@ (8002fec <HAL_ADC_ConfigChannel+0x254>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d12b      	bne.n	8002fd2 <HAL_ADC_ConfigChannel+0x23a>
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a1c      	ldr	r2, [pc, #112]	@ (8002ff0 <HAL_ADC_ConfigChannel+0x258>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d003      	beq.n	8002f8c <HAL_ADC_ConfigChannel+0x1f4>
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2b11      	cmp	r3, #17
 8002f8a:	d122      	bne.n	8002fd2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a11      	ldr	r2, [pc, #68]	@ (8002ff0 <HAL_ADC_ConfigChannel+0x258>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d111      	bne.n	8002fd2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002fae:	4b11      	ldr	r3, [pc, #68]	@ (8002ff4 <HAL_ADC_ConfigChannel+0x25c>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a11      	ldr	r2, [pc, #68]	@ (8002ff8 <HAL_ADC_ConfigChannel+0x260>)
 8002fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb8:	0c9a      	lsrs	r2, r3, #18
 8002fba:	4613      	mov	r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	4413      	add	r3, r2
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002fc4:	e002      	b.n	8002fcc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f9      	bne.n	8002fc6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3714      	adds	r7, #20
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr
 8002fe8:	40012300 	.word	0x40012300
 8002fec:	40012000 	.word	0x40012000
 8002ff0:	10000012 	.word	0x10000012
 8002ff4:	20000004 	.word	0x20000004
 8002ff8:	431bde83 	.word	0x431bde83

08002ffc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003004:	4b79      	ldr	r3, [pc, #484]	@ (80031ec <ADC_Init+0x1f0>)
 8003006:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	685a      	ldr	r2, [r3, #4]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	431a      	orrs	r2, r3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	685a      	ldr	r2, [r3, #4]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003030:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	6859      	ldr	r1, [r3, #4]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	021a      	lsls	r2, r3, #8
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	430a      	orrs	r2, r1
 8003044:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	685a      	ldr	r2, [r3, #4]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003054:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	6859      	ldr	r1, [r3, #4]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	430a      	orrs	r2, r1
 8003066:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	689a      	ldr	r2, [r3, #8]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003076:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6899      	ldr	r1, [r3, #8]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	68da      	ldr	r2, [r3, #12]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	430a      	orrs	r2, r1
 8003088:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800308e:	4a58      	ldr	r2, [pc, #352]	@ (80031f0 <ADC_Init+0x1f4>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d022      	beq.n	80030da <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689a      	ldr	r2, [r3, #8]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80030a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6899      	ldr	r1, [r3, #8]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80030c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6899      	ldr	r1, [r3, #8]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	430a      	orrs	r2, r1
 80030d6:	609a      	str	r2, [r3, #8]
 80030d8:	e00f      	b.n	80030fa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	689a      	ldr	r2, [r3, #8]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80030e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80030f8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f022 0202 	bic.w	r2, r2, #2
 8003108:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	6899      	ldr	r1, [r3, #8]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	7e1b      	ldrb	r3, [r3, #24]
 8003114:	005a      	lsls	r2, r3, #1
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	430a      	orrs	r2, r1
 800311c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d01b      	beq.n	8003160 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	685a      	ldr	r2, [r3, #4]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003136:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685a      	ldr	r2, [r3, #4]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003146:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6859      	ldr	r1, [r3, #4]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003152:	3b01      	subs	r3, #1
 8003154:	035a      	lsls	r2, r3, #13
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	430a      	orrs	r2, r1
 800315c:	605a      	str	r2, [r3, #4]
 800315e:	e007      	b.n	8003170 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800316e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800317e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	69db      	ldr	r3, [r3, #28]
 800318a:	3b01      	subs	r3, #1
 800318c:	051a      	lsls	r2, r3, #20
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	689a      	ldr	r2, [r3, #8]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80031a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6899      	ldr	r1, [r3, #8]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80031b2:	025a      	lsls	r2, r3, #9
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	430a      	orrs	r2, r1
 80031ba:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	689a      	ldr	r2, [r3, #8]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6899      	ldr	r1, [r3, #8]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	029a      	lsls	r2, r3, #10
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	430a      	orrs	r2, r1
 80031de:	609a      	str	r2, [r3, #8]
}
 80031e0:	bf00      	nop
 80031e2:	3714      	adds	r7, #20
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr
 80031ec:	40012300 	.word	0x40012300
 80031f0:	0f000001 	.word	0x0f000001

080031f4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e0ed      	b.n	80033e2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f893 3020 	ldrb.w	r3, [r3, #32]
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d102      	bne.n	8003218 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f7fd fef2 	bl	8000ffc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f042 0201 	orr.w	r2, r2, #1
 8003226:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003228:	f7ff fba4 	bl	8002974 <HAL_GetTick>
 800322c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800322e:	e012      	b.n	8003256 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003230:	f7ff fba0 	bl	8002974 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b0a      	cmp	r3, #10
 800323c:	d90b      	bls.n	8003256 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003242:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2205      	movs	r2, #5
 800324e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e0c5      	b.n	80033e2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	2b00      	cmp	r3, #0
 8003262:	d0e5      	beq.n	8003230 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f022 0202 	bic.w	r2, r2, #2
 8003272:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003274:	f7ff fb7e 	bl	8002974 <HAL_GetTick>
 8003278:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800327a:	e012      	b.n	80032a2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800327c:	f7ff fb7a 	bl	8002974 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b0a      	cmp	r3, #10
 8003288:	d90b      	bls.n	80032a2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800328e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2205      	movs	r2, #5
 800329a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e09f      	b.n	80033e2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1e5      	bne.n	800327c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	7e1b      	ldrb	r3, [r3, #24]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d108      	bne.n	80032ca <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	e007      	b.n	80032da <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80032d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	7e5b      	ldrb	r3, [r3, #25]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d108      	bne.n	80032f4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032f0:	601a      	str	r2, [r3, #0]
 80032f2:	e007      	b.n	8003304 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003302:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	7e9b      	ldrb	r3, [r3, #26]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d108      	bne.n	800331e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f042 0220 	orr.w	r2, r2, #32
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	e007      	b.n	800332e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 0220 	bic.w	r2, r2, #32
 800332c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	7edb      	ldrb	r3, [r3, #27]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d108      	bne.n	8003348 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f022 0210 	bic.w	r2, r2, #16
 8003344:	601a      	str	r2, [r3, #0]
 8003346:	e007      	b.n	8003358 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f042 0210 	orr.w	r2, r2, #16
 8003356:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	7f1b      	ldrb	r3, [r3, #28]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d108      	bne.n	8003372 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f042 0208 	orr.w	r2, r2, #8
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	e007      	b.n	8003382 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 0208 	bic.w	r2, r2, #8
 8003380:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	7f5b      	ldrb	r3, [r3, #29]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d108      	bne.n	800339c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f042 0204 	orr.w	r2, r2, #4
 8003398:	601a      	str	r2, [r3, #0]
 800339a:	e007      	b.n	80033ac <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f022 0204 	bic.w	r2, r2, #4
 80033aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689a      	ldr	r2, [r3, #8]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	431a      	orrs	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	431a      	orrs	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	ea42 0103 	orr.w	r1, r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	1e5a      	subs	r2, r3, #1
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	430a      	orrs	r2, r1
 80033d0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3710      	adds	r7, #16
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
	...

080033ec <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b087      	sub	sp, #28
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003402:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003404:	7cfb      	ldrb	r3, [r7, #19]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d003      	beq.n	8003412 <HAL_CAN_ConfigFilter+0x26>
 800340a:	7cfb      	ldrb	r3, [r7, #19]
 800340c:	2b02      	cmp	r3, #2
 800340e:	f040 80be 	bne.w	800358e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003412:	4b65      	ldr	r3, [pc, #404]	@ (80035a8 <HAL_CAN_ConfigFilter+0x1bc>)
 8003414:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800341c:	f043 0201 	orr.w	r2, r3, #1
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800342c:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003440:	021b      	lsls	r3, r3, #8
 8003442:	431a      	orrs	r2, r3
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	f003 031f 	and.w	r3, r3, #31
 8003452:	2201      	movs	r2, #1
 8003454:	fa02 f303 	lsl.w	r3, r2, r3
 8003458:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	43db      	mvns	r3, r3
 8003464:	401a      	ands	r2, r3
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	69db      	ldr	r3, [r3, #28]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d123      	bne.n	80034bc <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	43db      	mvns	r3, r3
 800347e:	401a      	ands	r2, r3
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003496:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	3248      	adds	r2, #72	@ 0x48
 800349c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80034b0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80034b2:	6979      	ldr	r1, [r7, #20]
 80034b4:	3348      	adds	r3, #72	@ 0x48
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	440b      	add	r3, r1
 80034ba:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	69db      	ldr	r3, [r3, #28]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d122      	bne.n	800350a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	431a      	orrs	r2, r3
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80034e0:	683a      	ldr	r2, [r7, #0]
 80034e2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80034e4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	3248      	adds	r2, #72	@ 0x48
 80034ea:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80034fe:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003500:	6979      	ldr	r1, [r7, #20]
 8003502:	3348      	adds	r3, #72	@ 0x48
 8003504:	00db      	lsls	r3, r3, #3
 8003506:	440b      	add	r3, r1
 8003508:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d109      	bne.n	8003526 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	43db      	mvns	r3, r3
 800351c:	401a      	ands	r2, r3
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8003524:	e007      	b.n	8003536 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	431a      	orrs	r2, r3
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d109      	bne.n	8003552 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	43db      	mvns	r3, r3
 8003548:	401a      	ands	r2, r3
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8003550:	e007      	b.n	8003562 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	431a      	orrs	r2, r3
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	6a1b      	ldr	r3, [r3, #32]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d107      	bne.n	800357a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	431a      	orrs	r2, r3
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003580:	f023 0201 	bic.w	r2, r3, #1
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800358a:	2300      	movs	r3, #0
 800358c:	e006      	b.n	800359c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003592:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
  }
}
 800359c:	4618      	mov	r0, r3
 800359e:	371c      	adds	r7, #28
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr
 80035a8:	40006400 	.word	0x40006400

080035ac <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d12e      	bne.n	800361e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2202      	movs	r2, #2
 80035c4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f022 0201 	bic.w	r2, r2, #1
 80035d6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80035d8:	f7ff f9cc 	bl	8002974 <HAL_GetTick>
 80035dc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80035de:	e012      	b.n	8003606 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80035e0:	f7ff f9c8 	bl	8002974 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b0a      	cmp	r3, #10
 80035ec:	d90b      	bls.n	8003606 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2205      	movs	r2, #5
 80035fe:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e012      	b.n	800362c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f003 0301 	and.w	r3, r3, #1
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1e5      	bne.n	80035e0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800361a:	2300      	movs	r3, #0
 800361c:	e006      	b.n	800362c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003622:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
  }
}
 800362c:	4618      	mov	r0, r3
 800362e:	3710      	adds	r7, #16
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003634:	b480      	push	{r7}
 8003636:	b089      	sub	sp, #36	@ 0x24
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
 8003640:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003648:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003652:	7ffb      	ldrb	r3, [r7, #31]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d003      	beq.n	8003660 <HAL_CAN_AddTxMessage+0x2c>
 8003658:	7ffb      	ldrb	r3, [r7, #31]
 800365a:	2b02      	cmp	r3, #2
 800365c:	f040 80ad 	bne.w	80037ba <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10a      	bne.n	8003680 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003670:	2b00      	cmp	r3, #0
 8003672:	d105      	bne.n	8003680 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800367a:	2b00      	cmp	r3, #0
 800367c:	f000 8095 	beq.w	80037aa <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	0e1b      	lsrs	r3, r3, #24
 8003684:	f003 0303 	and.w	r3, r3, #3
 8003688:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800368a:	2201      	movs	r2, #1
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	409a      	lsls	r2, r3
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d10d      	bne.n	80036b8 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80036a6:	68f9      	ldr	r1, [r7, #12]
 80036a8:	6809      	ldr	r1, [r1, #0]
 80036aa:	431a      	orrs	r2, r3
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	3318      	adds	r3, #24
 80036b0:	011b      	lsls	r3, r3, #4
 80036b2:	440b      	add	r3, r1
 80036b4:	601a      	str	r2, [r3, #0]
 80036b6:	e00f      	b.n	80036d8 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80036c2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80036c8:	68f9      	ldr	r1, [r7, #12]
 80036ca:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80036cc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	3318      	adds	r3, #24
 80036d2:	011b      	lsls	r3, r3, #4
 80036d4:	440b      	add	r3, r1
 80036d6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6819      	ldr	r1, [r3, #0]
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	691a      	ldr	r2, [r3, #16]
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	3318      	adds	r3, #24
 80036e4:	011b      	lsls	r3, r3, #4
 80036e6:	440b      	add	r3, r1
 80036e8:	3304      	adds	r3, #4
 80036ea:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	7d1b      	ldrb	r3, [r3, #20]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d111      	bne.n	8003718 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	3318      	adds	r3, #24
 80036fc:	011b      	lsls	r3, r3, #4
 80036fe:	4413      	add	r3, r2
 8003700:	3304      	adds	r3, #4
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	6811      	ldr	r1, [r2, #0]
 8003708:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	3318      	adds	r3, #24
 8003710:	011b      	lsls	r3, r3, #4
 8003712:	440b      	add	r3, r1
 8003714:	3304      	adds	r3, #4
 8003716:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	3307      	adds	r3, #7
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	061a      	lsls	r2, r3, #24
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	3306      	adds	r3, #6
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	041b      	lsls	r3, r3, #16
 8003728:	431a      	orrs	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	3305      	adds	r3, #5
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	021b      	lsls	r3, r3, #8
 8003732:	4313      	orrs	r3, r2
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	3204      	adds	r2, #4
 8003738:	7812      	ldrb	r2, [r2, #0]
 800373a:	4610      	mov	r0, r2
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	6811      	ldr	r1, [r2, #0]
 8003740:	ea43 0200 	orr.w	r2, r3, r0
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	011b      	lsls	r3, r3, #4
 8003748:	440b      	add	r3, r1
 800374a:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800374e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	3303      	adds	r3, #3
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	061a      	lsls	r2, r3, #24
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	3302      	adds	r3, #2
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	041b      	lsls	r3, r3, #16
 8003760:	431a      	orrs	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	3301      	adds	r3, #1
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	021b      	lsls	r3, r3, #8
 800376a:	4313      	orrs	r3, r2
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	7812      	ldrb	r2, [r2, #0]
 8003770:	4610      	mov	r0, r2
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	6811      	ldr	r1, [r2, #0]
 8003776:	ea43 0200 	orr.w	r2, r3, r0
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	011b      	lsls	r3, r3, #4
 800377e:	440b      	add	r3, r1
 8003780:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8003784:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	3318      	adds	r3, #24
 800378e:	011b      	lsls	r3, r3, #4
 8003790:	4413      	add	r3, r2
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	6811      	ldr	r1, [r2, #0]
 8003798:	f043 0201 	orr.w	r2, r3, #1
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	3318      	adds	r3, #24
 80037a0:	011b      	lsls	r3, r3, #4
 80037a2:	440b      	add	r3, r1
 80037a4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80037a6:	2300      	movs	r3, #0
 80037a8:	e00e      	b.n	80037c8 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ae:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e006      	b.n	80037c8 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037be:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
  }
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3724      	adds	r7, #36	@ 0x24
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80037d4:	b480      	push	{r7}
 80037d6:	b087      	sub	sp, #28
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
 80037e0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037e8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80037ea:	7dfb      	ldrb	r3, [r7, #23]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d003      	beq.n	80037f8 <HAL_CAN_GetRxMessage+0x24>
 80037f0:	7dfb      	ldrb	r3, [r7, #23]
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	f040 8103 	bne.w	80039fe <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10e      	bne.n	800381c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	f003 0303 	and.w	r3, r3, #3
 8003808:	2b00      	cmp	r3, #0
 800380a:	d116      	bne.n	800383a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003810:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e0f7      	b.n	8003a0c <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	f003 0303 	and.w	r3, r3, #3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d107      	bne.n	800383a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800382e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e0e8      	b.n	8003a0c <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	331b      	adds	r3, #27
 8003842:	011b      	lsls	r3, r3, #4
 8003844:	4413      	add	r3, r2
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0204 	and.w	r2, r3, #4
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d10c      	bne.n	8003872 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	331b      	adds	r3, #27
 8003860:	011b      	lsls	r3, r3, #4
 8003862:	4413      	add	r3, r2
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	0d5b      	lsrs	r3, r3, #21
 8003868:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	601a      	str	r2, [r3, #0]
 8003870:	e00b      	b.n	800388a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	331b      	adds	r3, #27
 800387a:	011b      	lsls	r3, r3, #4
 800387c:	4413      	add	r3, r2
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	08db      	lsrs	r3, r3, #3
 8003882:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	331b      	adds	r3, #27
 8003892:	011b      	lsls	r3, r3, #4
 8003894:	4413      	add	r3, r2
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0202 	and.w	r2, r3, #2
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	331b      	adds	r3, #27
 80038a8:	011b      	lsls	r3, r3, #4
 80038aa:	4413      	add	r3, r2
 80038ac:	3304      	adds	r3, #4
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0308 	and.w	r3, r3, #8
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d003      	beq.n	80038c0 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2208      	movs	r2, #8
 80038bc:	611a      	str	r2, [r3, #16]
 80038be:	e00b      	b.n	80038d8 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	331b      	adds	r3, #27
 80038c8:	011b      	lsls	r3, r3, #4
 80038ca:	4413      	add	r3, r2
 80038cc:	3304      	adds	r3, #4
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 020f 	and.w	r2, r3, #15
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	331b      	adds	r3, #27
 80038e0:	011b      	lsls	r3, r3, #4
 80038e2:	4413      	add	r3, r2
 80038e4:	3304      	adds	r3, #4
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	0a1b      	lsrs	r3, r3, #8
 80038ea:	b2da      	uxtb	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	331b      	adds	r3, #27
 80038f8:	011b      	lsls	r3, r3, #4
 80038fa:	4413      	add	r3, r2
 80038fc:	3304      	adds	r3, #4
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	0c1b      	lsrs	r3, r3, #16
 8003902:	b29a      	uxth	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	011b      	lsls	r3, r3, #4
 8003910:	4413      	add	r3, r2
 8003912:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	b2da      	uxtb	r2, r3
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	011b      	lsls	r3, r3, #4
 8003926:	4413      	add	r3, r2
 8003928:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	0a1a      	lsrs	r2, r3, #8
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	3301      	adds	r3, #1
 8003934:	b2d2      	uxtb	r2, r2
 8003936:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	011b      	lsls	r3, r3, #4
 8003940:	4413      	add	r3, r2
 8003942:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	0c1a      	lsrs	r2, r3, #16
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	3302      	adds	r3, #2
 800394e:	b2d2      	uxtb	r2, r2
 8003950:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	011b      	lsls	r3, r3, #4
 800395a:	4413      	add	r3, r2
 800395c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	0e1a      	lsrs	r2, r3, #24
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	3303      	adds	r3, #3
 8003968:	b2d2      	uxtb	r2, r2
 800396a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	011b      	lsls	r3, r3, #4
 8003974:	4413      	add	r3, r2
 8003976:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	3304      	adds	r3, #4
 8003980:	b2d2      	uxtb	r2, r2
 8003982:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	011b      	lsls	r3, r3, #4
 800398c:	4413      	add	r3, r2
 800398e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	0a1a      	lsrs	r2, r3, #8
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	3305      	adds	r3, #5
 800399a:	b2d2      	uxtb	r2, r2
 800399c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	011b      	lsls	r3, r3, #4
 80039a6:	4413      	add	r3, r2
 80039a8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	0c1a      	lsrs	r2, r3, #16
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	3306      	adds	r3, #6
 80039b4:	b2d2      	uxtb	r2, r2
 80039b6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	011b      	lsls	r3, r3, #4
 80039c0:	4413      	add	r3, r2
 80039c2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	0e1a      	lsrs	r2, r3, #24
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	3307      	adds	r3, #7
 80039ce:	b2d2      	uxtb	r2, r2
 80039d0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d108      	bne.n	80039ea <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68da      	ldr	r2, [r3, #12]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f042 0220 	orr.w	r2, r2, #32
 80039e6:	60da      	str	r2, [r3, #12]
 80039e8:	e007      	b.n	80039fa <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	691a      	ldr	r2, [r3, #16]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f042 0220 	orr.w	r2, r2, #32
 80039f8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80039fa:	2300      	movs	r3, #0
 80039fc:	e006      	b.n	8003a0c <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a02:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
  }
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	371c      	adds	r7, #28
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8003a22:	2300      	movs	r3, #0
 8003a24:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a2c:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003a2e:	7afb      	ldrb	r3, [r7, #11]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d002      	beq.n	8003a3a <HAL_CAN_GetRxFifoFillLevel+0x22>
 8003a34:	7afb      	ldrb	r3, [r7, #11]
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d10f      	bne.n	8003a5a <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d106      	bne.n	8003a4e <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	f003 0303 	and.w	r3, r3, #3
 8003a4a:	60fb      	str	r3, [r7, #12]
 8003a4c:	e005      	b.n	8003a5a <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	f003 0303 	and.w	r3, r3, #3
 8003a58:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3714      	adds	r7, #20
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a78:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003a7a:	7bfb      	ldrb	r3, [r7, #15]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d002      	beq.n	8003a86 <HAL_CAN_ActivateNotification+0x1e>
 8003a80:	7bfb      	ldrb	r3, [r7, #15]
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d109      	bne.n	8003a9a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	6959      	ldr	r1, [r3, #20]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	683a      	ldr	r2, [r7, #0]
 8003a92:	430a      	orrs	r2, r1
 8003a94:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003a96:	2300      	movs	r3, #0
 8003a98:	e006      	b.n	8003aa8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a9e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
  }
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3714      	adds	r7, #20
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b08a      	sub	sp, #40	@ 0x28
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003abc:	2300      	movs	r3, #0
 8003abe:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003af0:	6a3b      	ldr	r3, [r7, #32]
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d07c      	beq.n	8003bf4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d023      	beq.n	8003b4c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d003      	beq.n	8003b1e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f983 	bl	8003e22 <HAL_CAN_TxMailbox0CompleteCallback>
 8003b1c:	e016      	b.n	8003b4c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	f003 0304 	and.w	r3, r3, #4
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d004      	beq.n	8003b32 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b2a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003b2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b30:	e00c      	b.n	8003b4c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	f003 0308 	and.w	r3, r3, #8
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d004      	beq.n	8003b46 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b3e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003b42:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b44:	e002      	b.n	8003b4c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 f989 	bl	8003e5e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d024      	beq.n	8003ba0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b5e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 f963 	bl	8003e36 <HAL_CAN_TxMailbox1CompleteCallback>
 8003b70:	e016      	b.n	8003ba0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d004      	beq.n	8003b86 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b7e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003b82:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b84:	e00c      	b.n	8003ba0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d004      	beq.n	8003b9a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b92:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b96:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b98:	e002      	b.n	8003ba0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 f969 	bl	8003e72 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d024      	beq.n	8003bf4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003bb2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d003      	beq.n	8003bc6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 f943 	bl	8003e4a <HAL_CAN_TxMailbox2CompleteCallback>
 8003bc4:	e016      	b.n	8003bf4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d004      	beq.n	8003bda <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bd8:	e00c      	b.n	8003bf4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d004      	beq.n	8003bee <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bea:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bec:	e002      	b.n	8003bf4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 f949 	bl	8003e86 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003bf4:	6a3b      	ldr	r3, [r7, #32]
 8003bf6:	f003 0308 	and.w	r3, r3, #8
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00c      	beq.n	8003c18 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	f003 0310 	and.w	r3, r3, #16
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d007      	beq.n	8003c18 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c0e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2210      	movs	r2, #16
 8003c16:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003c18:	6a3b      	ldr	r3, [r7, #32]
 8003c1a:	f003 0304 	and.w	r3, r3, #4
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00b      	beq.n	8003c3a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	f003 0308 	and.w	r3, r3, #8
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d006      	beq.n	8003c3a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2208      	movs	r2, #8
 8003c32:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 f930 	bl	8003e9a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003c3a:	6a3b      	ldr	r3, [r7, #32]
 8003c3c:	f003 0302 	and.w	r3, r3, #2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d009      	beq.n	8003c58 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	f003 0303 	and.w	r3, r3, #3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d002      	beq.n	8003c58 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f7fe fa02 	bl	800205c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003c58:	6a3b      	ldr	r3, [r7, #32]
 8003c5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00c      	beq.n	8003c7c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	f003 0310 	and.w	r3, r3, #16
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d007      	beq.n	8003c7c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c6e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003c72:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2210      	movs	r2, #16
 8003c7a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003c7c:	6a3b      	ldr	r3, [r7, #32]
 8003c7e:	f003 0320 	and.w	r3, r3, #32
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00b      	beq.n	8003c9e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	f003 0308 	and.w	r3, r3, #8
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d006      	beq.n	8003c9e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2208      	movs	r2, #8
 8003c96:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 f908 	bl	8003eae <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003c9e:	6a3b      	ldr	r3, [r7, #32]
 8003ca0:	f003 0310 	and.w	r3, r3, #16
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d009      	beq.n	8003cbc <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	f003 0303 	and.w	r3, r3, #3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d002      	beq.n	8003cbc <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f7fe f9be 	bl	8002038 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003cbc:	6a3b      	ldr	r3, [r7, #32]
 8003cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00b      	beq.n	8003cde <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	f003 0310 	and.w	r3, r3, #16
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d006      	beq.n	8003cde <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2210      	movs	r2, #16
 8003cd6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 f8f2 	bl	8003ec2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003cde:	6a3b      	ldr	r3, [r7, #32]
 8003ce0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00b      	beq.n	8003d00 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	f003 0308 	and.w	r3, r3, #8
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d006      	beq.n	8003d00 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2208      	movs	r2, #8
 8003cf8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f8eb 	bl	8003ed6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003d00:	6a3b      	ldr	r3, [r7, #32]
 8003d02:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d07b      	beq.n	8003e02 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	f003 0304 	and.w	r3, r3, #4
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d072      	beq.n	8003dfa <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003d14:	6a3b      	ldr	r3, [r7, #32]
 8003d16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d008      	beq.n	8003d30 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d003      	beq.n	8003d30 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d2a:	f043 0301 	orr.w	r3, r3, #1
 8003d2e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003d30:	6a3b      	ldr	r3, [r7, #32]
 8003d32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d008      	beq.n	8003d4c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d003      	beq.n	8003d4c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d46:	f043 0302 	orr.w	r3, r3, #2
 8003d4a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003d4c:	6a3b      	ldr	r3, [r7, #32]
 8003d4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d008      	beq.n	8003d68 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d003      	beq.n	8003d68 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d62:	f043 0304 	orr.w	r3, r3, #4
 8003d66:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003d68:	6a3b      	ldr	r3, [r7, #32]
 8003d6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d043      	beq.n	8003dfa <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d03e      	beq.n	8003dfa <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003d82:	2b60      	cmp	r3, #96	@ 0x60
 8003d84:	d02b      	beq.n	8003dde <HAL_CAN_IRQHandler+0x32a>
 8003d86:	2b60      	cmp	r3, #96	@ 0x60
 8003d88:	d82e      	bhi.n	8003de8 <HAL_CAN_IRQHandler+0x334>
 8003d8a:	2b50      	cmp	r3, #80	@ 0x50
 8003d8c:	d022      	beq.n	8003dd4 <HAL_CAN_IRQHandler+0x320>
 8003d8e:	2b50      	cmp	r3, #80	@ 0x50
 8003d90:	d82a      	bhi.n	8003de8 <HAL_CAN_IRQHandler+0x334>
 8003d92:	2b40      	cmp	r3, #64	@ 0x40
 8003d94:	d019      	beq.n	8003dca <HAL_CAN_IRQHandler+0x316>
 8003d96:	2b40      	cmp	r3, #64	@ 0x40
 8003d98:	d826      	bhi.n	8003de8 <HAL_CAN_IRQHandler+0x334>
 8003d9a:	2b30      	cmp	r3, #48	@ 0x30
 8003d9c:	d010      	beq.n	8003dc0 <HAL_CAN_IRQHandler+0x30c>
 8003d9e:	2b30      	cmp	r3, #48	@ 0x30
 8003da0:	d822      	bhi.n	8003de8 <HAL_CAN_IRQHandler+0x334>
 8003da2:	2b10      	cmp	r3, #16
 8003da4:	d002      	beq.n	8003dac <HAL_CAN_IRQHandler+0x2f8>
 8003da6:	2b20      	cmp	r3, #32
 8003da8:	d005      	beq.n	8003db6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003daa:	e01d      	b.n	8003de8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dae:	f043 0308 	orr.w	r3, r3, #8
 8003db2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003db4:	e019      	b.n	8003dea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db8:	f043 0310 	orr.w	r3, r3, #16
 8003dbc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003dbe:	e014      	b.n	8003dea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc2:	f043 0320 	orr.w	r3, r3, #32
 8003dc6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003dc8:	e00f      	b.n	8003dea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dcc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003dd0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003dd2:	e00a      	b.n	8003dea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dda:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003ddc:	e005      	b.n	8003dea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003de4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003de6:	e000      	b.n	8003dea <HAL_CAN_IRQHandler+0x336>
            break;
 8003de8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	699a      	ldr	r2, [r3, #24]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003df8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2204      	movs	r2, #4
 8003e00:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d008      	beq.n	8003e1a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0e:	431a      	orrs	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 f868 	bl	8003eea <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003e1a:	bf00      	nop
 8003e1c:	3728      	adds	r7, #40	@ 0x28
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003e22:	b480      	push	{r7}
 8003e24:	b083      	sub	sp, #12
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003e2a:	bf00      	nop
 8003e2c:	370c      	adds	r7, #12
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr

08003e36 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003e36:	b480      	push	{r7}
 8003e38:	b083      	sub	sp, #12
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003e3e:	bf00      	nop
 8003e40:	370c      	adds	r7, #12
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr

08003e4a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	b083      	sub	sp, #12
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003e52:	bf00      	nop
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr

08003e5e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b083      	sub	sp, #12
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003e66:	bf00      	nop
 8003e68:	370c      	adds	r7, #12
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr

08003e72 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003e72:	b480      	push	{r7}
 8003e74:	b083      	sub	sp, #12
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003e7a:	bf00      	nop
 8003e7c:	370c      	adds	r7, #12
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr

08003e86 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003e86:	b480      	push	{r7}
 8003e88:	b083      	sub	sp, #12
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003e8e:	bf00      	nop
 8003e90:	370c      	adds	r7, #12
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr

08003e9a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b083      	sub	sp, #12
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003ea2:	bf00      	nop
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b083      	sub	sp, #12
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003eb6:	bf00      	nop
 8003eb8:	370c      	adds	r7, #12
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr

08003ec2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	b083      	sub	sp, #12
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003eca:	bf00      	nop
 8003ecc:	370c      	adds	r7, #12
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr

08003ed6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003ed6:	b480      	push	{r7}
 8003ed8:	b083      	sub	sp, #12
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003ede:	bf00      	nop
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003eea:	b480      	push	{r7}
 8003eec:	b083      	sub	sp, #12
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003ef2:	bf00      	nop
 8003ef4:	370c      	adds	r7, #12
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr

08003efe <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
 8003efe:	b480      	push	{r7}
 8003f00:	b083      	sub	sp, #12
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
	...

08003f18 <__NVIC_SetPriorityGrouping>:
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f003 0307 	and.w	r3, r3, #7
 8003f26:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f28:	4b0c      	ldr	r3, [pc, #48]	@ (8003f5c <__NVIC_SetPriorityGrouping+0x44>)
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f2e:	68ba      	ldr	r2, [r7, #8]
 8003f30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003f34:	4013      	ands	r3, r2
 8003f36:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003f44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f4a:	4a04      	ldr	r2, [pc, #16]	@ (8003f5c <__NVIC_SetPriorityGrouping+0x44>)
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	60d3      	str	r3, [r2, #12]
}
 8003f50:	bf00      	nop
 8003f52:	3714      	adds	r7, #20
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr
 8003f5c:	e000ed00 	.word	0xe000ed00

08003f60 <__NVIC_GetPriorityGrouping>:
{
 8003f60:	b480      	push	{r7}
 8003f62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f64:	4b04      	ldr	r3, [pc, #16]	@ (8003f78 <__NVIC_GetPriorityGrouping+0x18>)
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	0a1b      	lsrs	r3, r3, #8
 8003f6a:	f003 0307 	and.w	r3, r3, #7
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr
 8003f78:	e000ed00 	.word	0xe000ed00

08003f7c <__NVIC_EnableIRQ>:
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	4603      	mov	r3, r0
 8003f84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	db0b      	blt.n	8003fa6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f8e:	79fb      	ldrb	r3, [r7, #7]
 8003f90:	f003 021f 	and.w	r2, r3, #31
 8003f94:	4907      	ldr	r1, [pc, #28]	@ (8003fb4 <__NVIC_EnableIRQ+0x38>)
 8003f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f9a:	095b      	lsrs	r3, r3, #5
 8003f9c:	2001      	movs	r0, #1
 8003f9e:	fa00 f202 	lsl.w	r2, r0, r2
 8003fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003fa6:	bf00      	nop
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	e000e100 	.word	0xe000e100

08003fb8 <__NVIC_SetPriority>:
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	6039      	str	r1, [r7, #0]
 8003fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	db0a      	blt.n	8003fe2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	b2da      	uxtb	r2, r3
 8003fd0:	490c      	ldr	r1, [pc, #48]	@ (8004004 <__NVIC_SetPriority+0x4c>)
 8003fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fd6:	0112      	lsls	r2, r2, #4
 8003fd8:	b2d2      	uxtb	r2, r2
 8003fda:	440b      	add	r3, r1
 8003fdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003fe0:	e00a      	b.n	8003ff8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	b2da      	uxtb	r2, r3
 8003fe6:	4908      	ldr	r1, [pc, #32]	@ (8004008 <__NVIC_SetPriority+0x50>)
 8003fe8:	79fb      	ldrb	r3, [r7, #7]
 8003fea:	f003 030f 	and.w	r3, r3, #15
 8003fee:	3b04      	subs	r3, #4
 8003ff0:	0112      	lsls	r2, r2, #4
 8003ff2:	b2d2      	uxtb	r2, r2
 8003ff4:	440b      	add	r3, r1
 8003ff6:	761a      	strb	r2, [r3, #24]
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr
 8004004:	e000e100 	.word	0xe000e100
 8004008:	e000ed00 	.word	0xe000ed00

0800400c <NVIC_EncodePriority>:
{
 800400c:	b480      	push	{r7}
 800400e:	b089      	sub	sp, #36	@ 0x24
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f003 0307 	and.w	r3, r3, #7
 800401e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	f1c3 0307 	rsb	r3, r3, #7
 8004026:	2b04      	cmp	r3, #4
 8004028:	bf28      	it	cs
 800402a:	2304      	movcs	r3, #4
 800402c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	3304      	adds	r3, #4
 8004032:	2b06      	cmp	r3, #6
 8004034:	d902      	bls.n	800403c <NVIC_EncodePriority+0x30>
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	3b03      	subs	r3, #3
 800403a:	e000      	b.n	800403e <NVIC_EncodePriority+0x32>
 800403c:	2300      	movs	r3, #0
 800403e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004040:	f04f 32ff 	mov.w	r2, #4294967295
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	fa02 f303 	lsl.w	r3, r2, r3
 800404a:	43da      	mvns	r2, r3
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	401a      	ands	r2, r3
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004054:	f04f 31ff 	mov.w	r1, #4294967295
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	fa01 f303 	lsl.w	r3, r1, r3
 800405e:	43d9      	mvns	r1, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004064:	4313      	orrs	r3, r2
}
 8004066:	4618      	mov	r0, r3
 8004068:	3724      	adds	r7, #36	@ 0x24
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr

08004072 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004072:	b580      	push	{r7, lr}
 8004074:	b082      	sub	sp, #8
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f7ff ff4c 	bl	8003f18 <__NVIC_SetPriorityGrouping>
}
 8004080:	bf00      	nop
 8004082:	3708      	adds	r7, #8
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004088:	b580      	push	{r7, lr}
 800408a:	b086      	sub	sp, #24
 800408c:	af00      	add	r7, sp, #0
 800408e:	4603      	mov	r3, r0
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
 8004094:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004096:	2300      	movs	r3, #0
 8004098:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800409a:	f7ff ff61 	bl	8003f60 <__NVIC_GetPriorityGrouping>
 800409e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	68b9      	ldr	r1, [r7, #8]
 80040a4:	6978      	ldr	r0, [r7, #20]
 80040a6:	f7ff ffb1 	bl	800400c <NVIC_EncodePriority>
 80040aa:	4602      	mov	r2, r0
 80040ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040b0:	4611      	mov	r1, r2
 80040b2:	4618      	mov	r0, r3
 80040b4:	f7ff ff80 	bl	8003fb8 <__NVIC_SetPriority>
}
 80040b8:	bf00      	nop
 80040ba:	3718      	adds	r7, #24
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	4603      	mov	r3, r0
 80040c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7ff ff54 	bl	8003f7c <__NVIC_EnableIRQ>
}
 80040d4:	bf00      	nop
 80040d6:	3708      	adds	r7, #8
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040dc:	b480      	push	{r7}
 80040de:	b089      	sub	sp, #36	@ 0x24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80040e6:	2300      	movs	r3, #0
 80040e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80040ea:	2300      	movs	r3, #0
 80040ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80040ee:	2300      	movs	r3, #0
 80040f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040f2:	2300      	movs	r3, #0
 80040f4:	61fb      	str	r3, [r7, #28]
 80040f6:	e165      	b.n	80043c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80040f8:	2201      	movs	r2, #1
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004100:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	4013      	ands	r3, r2
 800410a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	429a      	cmp	r2, r3
 8004112:	f040 8154 	bne.w	80043be <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f003 0303 	and.w	r3, r3, #3
 800411e:	2b01      	cmp	r3, #1
 8004120:	d005      	beq.n	800412e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800412a:	2b02      	cmp	r3, #2
 800412c:	d130      	bne.n	8004190 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	005b      	lsls	r3, r3, #1
 8004138:	2203      	movs	r2, #3
 800413a:	fa02 f303 	lsl.w	r3, r2, r3
 800413e:	43db      	mvns	r3, r3
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	4013      	ands	r3, r2
 8004144:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	68da      	ldr	r2, [r3, #12]
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	005b      	lsls	r3, r3, #1
 800414e:	fa02 f303 	lsl.w	r3, r2, r3
 8004152:	69ba      	ldr	r2, [r7, #24]
 8004154:	4313      	orrs	r3, r2
 8004156:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	69ba      	ldr	r2, [r7, #24]
 800415c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004164:	2201      	movs	r2, #1
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	fa02 f303 	lsl.w	r3, r2, r3
 800416c:	43db      	mvns	r3, r3
 800416e:	69ba      	ldr	r2, [r7, #24]
 8004170:	4013      	ands	r3, r2
 8004172:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	091b      	lsrs	r3, r3, #4
 800417a:	f003 0201 	and.w	r2, r3, #1
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	fa02 f303 	lsl.w	r3, r2, r3
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	4313      	orrs	r3, r2
 8004188:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	69ba      	ldr	r2, [r7, #24]
 800418e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f003 0303 	and.w	r3, r3, #3
 8004198:	2b03      	cmp	r3, #3
 800419a:	d017      	beq.n	80041cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	005b      	lsls	r3, r3, #1
 80041a6:	2203      	movs	r2, #3
 80041a8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ac:	43db      	mvns	r3, r3
 80041ae:	69ba      	ldr	r2, [r7, #24]
 80041b0:	4013      	ands	r3, r2
 80041b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	689a      	ldr	r2, [r3, #8]
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	005b      	lsls	r3, r3, #1
 80041bc:	fa02 f303 	lsl.w	r3, r2, r3
 80041c0:	69ba      	ldr	r2, [r7, #24]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	69ba      	ldr	r2, [r7, #24]
 80041ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f003 0303 	and.w	r3, r3, #3
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d123      	bne.n	8004220 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	08da      	lsrs	r2, r3, #3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	3208      	adds	r2, #8
 80041e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	f003 0307 	and.w	r3, r3, #7
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	220f      	movs	r2, #15
 80041f0:	fa02 f303 	lsl.w	r3, r2, r3
 80041f4:	43db      	mvns	r3, r3
 80041f6:	69ba      	ldr	r2, [r7, #24]
 80041f8:	4013      	ands	r3, r2
 80041fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	691a      	ldr	r2, [r3, #16]
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	f003 0307 	and.w	r3, r3, #7
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	fa02 f303 	lsl.w	r3, r2, r3
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	4313      	orrs	r3, r2
 8004210:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	08da      	lsrs	r2, r3, #3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	3208      	adds	r2, #8
 800421a:	69b9      	ldr	r1, [r7, #24]
 800421c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	005b      	lsls	r3, r3, #1
 800422a:	2203      	movs	r2, #3
 800422c:	fa02 f303 	lsl.w	r3, r2, r3
 8004230:	43db      	mvns	r3, r3
 8004232:	69ba      	ldr	r2, [r7, #24]
 8004234:	4013      	ands	r3, r2
 8004236:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f003 0203 	and.w	r2, r3, #3
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	005b      	lsls	r3, r3, #1
 8004244:	fa02 f303 	lsl.w	r3, r2, r3
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	4313      	orrs	r3, r2
 800424c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	69ba      	ldr	r2, [r7, #24]
 8004252:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800425c:	2b00      	cmp	r3, #0
 800425e:	f000 80ae 	beq.w	80043be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004262:	2300      	movs	r3, #0
 8004264:	60fb      	str	r3, [r7, #12]
 8004266:	4b5d      	ldr	r3, [pc, #372]	@ (80043dc <HAL_GPIO_Init+0x300>)
 8004268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800426a:	4a5c      	ldr	r2, [pc, #368]	@ (80043dc <HAL_GPIO_Init+0x300>)
 800426c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004270:	6453      	str	r3, [r2, #68]	@ 0x44
 8004272:	4b5a      	ldr	r3, [pc, #360]	@ (80043dc <HAL_GPIO_Init+0x300>)
 8004274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004276:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800427a:	60fb      	str	r3, [r7, #12]
 800427c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800427e:	4a58      	ldr	r2, [pc, #352]	@ (80043e0 <HAL_GPIO_Init+0x304>)
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	089b      	lsrs	r3, r3, #2
 8004284:	3302      	adds	r3, #2
 8004286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800428a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	f003 0303 	and.w	r3, r3, #3
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	220f      	movs	r2, #15
 8004296:	fa02 f303 	lsl.w	r3, r2, r3
 800429a:	43db      	mvns	r3, r3
 800429c:	69ba      	ldr	r2, [r7, #24]
 800429e:	4013      	ands	r3, r2
 80042a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a4f      	ldr	r2, [pc, #316]	@ (80043e4 <HAL_GPIO_Init+0x308>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d025      	beq.n	80042f6 <HAL_GPIO_Init+0x21a>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a4e      	ldr	r2, [pc, #312]	@ (80043e8 <HAL_GPIO_Init+0x30c>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d01f      	beq.n	80042f2 <HAL_GPIO_Init+0x216>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a4d      	ldr	r2, [pc, #308]	@ (80043ec <HAL_GPIO_Init+0x310>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d019      	beq.n	80042ee <HAL_GPIO_Init+0x212>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a4c      	ldr	r2, [pc, #304]	@ (80043f0 <HAL_GPIO_Init+0x314>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d013      	beq.n	80042ea <HAL_GPIO_Init+0x20e>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a4b      	ldr	r2, [pc, #300]	@ (80043f4 <HAL_GPIO_Init+0x318>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d00d      	beq.n	80042e6 <HAL_GPIO_Init+0x20a>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a4a      	ldr	r2, [pc, #296]	@ (80043f8 <HAL_GPIO_Init+0x31c>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d007      	beq.n	80042e2 <HAL_GPIO_Init+0x206>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a49      	ldr	r2, [pc, #292]	@ (80043fc <HAL_GPIO_Init+0x320>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d101      	bne.n	80042de <HAL_GPIO_Init+0x202>
 80042da:	2306      	movs	r3, #6
 80042dc:	e00c      	b.n	80042f8 <HAL_GPIO_Init+0x21c>
 80042de:	2307      	movs	r3, #7
 80042e0:	e00a      	b.n	80042f8 <HAL_GPIO_Init+0x21c>
 80042e2:	2305      	movs	r3, #5
 80042e4:	e008      	b.n	80042f8 <HAL_GPIO_Init+0x21c>
 80042e6:	2304      	movs	r3, #4
 80042e8:	e006      	b.n	80042f8 <HAL_GPIO_Init+0x21c>
 80042ea:	2303      	movs	r3, #3
 80042ec:	e004      	b.n	80042f8 <HAL_GPIO_Init+0x21c>
 80042ee:	2302      	movs	r3, #2
 80042f0:	e002      	b.n	80042f8 <HAL_GPIO_Init+0x21c>
 80042f2:	2301      	movs	r3, #1
 80042f4:	e000      	b.n	80042f8 <HAL_GPIO_Init+0x21c>
 80042f6:	2300      	movs	r3, #0
 80042f8:	69fa      	ldr	r2, [r7, #28]
 80042fa:	f002 0203 	and.w	r2, r2, #3
 80042fe:	0092      	lsls	r2, r2, #2
 8004300:	4093      	lsls	r3, r2
 8004302:	69ba      	ldr	r2, [r7, #24]
 8004304:	4313      	orrs	r3, r2
 8004306:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004308:	4935      	ldr	r1, [pc, #212]	@ (80043e0 <HAL_GPIO_Init+0x304>)
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	089b      	lsrs	r3, r3, #2
 800430e:	3302      	adds	r3, #2
 8004310:	69ba      	ldr	r2, [r7, #24]
 8004312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004316:	4b3a      	ldr	r3, [pc, #232]	@ (8004400 <HAL_GPIO_Init+0x324>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	43db      	mvns	r3, r3
 8004320:	69ba      	ldr	r2, [r7, #24]
 8004322:	4013      	ands	r3, r2
 8004324:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d003      	beq.n	800433a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004332:	69ba      	ldr	r2, [r7, #24]
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	4313      	orrs	r3, r2
 8004338:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800433a:	4a31      	ldr	r2, [pc, #196]	@ (8004400 <HAL_GPIO_Init+0x324>)
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004340:	4b2f      	ldr	r3, [pc, #188]	@ (8004400 <HAL_GPIO_Init+0x324>)
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	43db      	mvns	r3, r3
 800434a:	69ba      	ldr	r2, [r7, #24]
 800434c:	4013      	ands	r3, r2
 800434e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d003      	beq.n	8004364 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	4313      	orrs	r3, r2
 8004362:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004364:	4a26      	ldr	r2, [pc, #152]	@ (8004400 <HAL_GPIO_Init+0x324>)
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800436a:	4b25      	ldr	r3, [pc, #148]	@ (8004400 <HAL_GPIO_Init+0x324>)
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	43db      	mvns	r3, r3
 8004374:	69ba      	ldr	r2, [r7, #24]
 8004376:	4013      	ands	r3, r2
 8004378:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d003      	beq.n	800438e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004386:	69ba      	ldr	r2, [r7, #24]
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	4313      	orrs	r3, r2
 800438c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800438e:	4a1c      	ldr	r2, [pc, #112]	@ (8004400 <HAL_GPIO_Init+0x324>)
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004394:	4b1a      	ldr	r3, [pc, #104]	@ (8004400 <HAL_GPIO_Init+0x324>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	43db      	mvns	r3, r3
 800439e:	69ba      	ldr	r2, [r7, #24]
 80043a0:	4013      	ands	r3, r2
 80043a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d003      	beq.n	80043b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80043b0:	69ba      	ldr	r2, [r7, #24]
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80043b8:	4a11      	ldr	r2, [pc, #68]	@ (8004400 <HAL_GPIO_Init+0x324>)
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	3301      	adds	r3, #1
 80043c2:	61fb      	str	r3, [r7, #28]
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	2b0f      	cmp	r3, #15
 80043c8:	f67f ae96 	bls.w	80040f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80043cc:	bf00      	nop
 80043ce:	bf00      	nop
 80043d0:	3724      	adds	r7, #36	@ 0x24
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	40023800 	.word	0x40023800
 80043e0:	40013800 	.word	0x40013800
 80043e4:	40020000 	.word	0x40020000
 80043e8:	40020400 	.word	0x40020400
 80043ec:	40020800 	.word	0x40020800
 80043f0:	40020c00 	.word	0x40020c00
 80043f4:	40021000 	.word	0x40021000
 80043f8:	40021400 	.word	0x40021400
 80043fc:	40021800 	.word	0x40021800
 8004400:	40013c00 	.word	0x40013c00

08004404 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	460b      	mov	r3, r1
 800440e:	807b      	strh	r3, [r7, #2]
 8004410:	4613      	mov	r3, r2
 8004412:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004414:	787b      	ldrb	r3, [r7, #1]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d003      	beq.n	8004422 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800441a:	887a      	ldrh	r2, [r7, #2]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004420:	e003      	b.n	800442a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004422:	887b      	ldrh	r3, [r7, #2]
 8004424:	041a      	lsls	r2, r3, #16
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	619a      	str	r2, [r3, #24]
}
 800442a:	bf00      	nop
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr

08004436 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004436:	b580      	push	{r7, lr}
 8004438:	b086      	sub	sp, #24
 800443a:	af02      	add	r7, sp, #8
 800443c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d101      	bne.n	8004448 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e108      	b.n	800465a <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d106      	bne.n	8004468 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f7fe f9bc 	bl	80027e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2203      	movs	r2, #3
 800446c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004476:	d102      	bne.n	800447e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4618      	mov	r0, r3
 8004484:	f003 fccb 	bl	8007e1e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6818      	ldr	r0, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	7c1a      	ldrb	r2, [r3, #16]
 8004490:	f88d 2000 	strb.w	r2, [sp]
 8004494:	3304      	adds	r3, #4
 8004496:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004498:	f003 fbaa 	bl	8007bf0 <USB_CoreInit>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d005      	beq.n	80044ae <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2202      	movs	r2, #2
 80044a6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e0d5      	b.n	800465a <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2100      	movs	r1, #0
 80044b4:	4618      	mov	r0, r3
 80044b6:	f003 fcc3 	bl	8007e40 <USB_SetCurrentMode>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d005      	beq.n	80044cc <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2202      	movs	r2, #2
 80044c4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e0c6      	b.n	800465a <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044cc:	2300      	movs	r3, #0
 80044ce:	73fb      	strb	r3, [r7, #15]
 80044d0:	e04a      	b.n	8004568 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80044d2:	7bfa      	ldrb	r2, [r7, #15]
 80044d4:	6879      	ldr	r1, [r7, #4]
 80044d6:	4613      	mov	r3, r2
 80044d8:	00db      	lsls	r3, r3, #3
 80044da:	4413      	add	r3, r2
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	440b      	add	r3, r1
 80044e0:	3315      	adds	r3, #21
 80044e2:	2201      	movs	r2, #1
 80044e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80044e6:	7bfa      	ldrb	r2, [r7, #15]
 80044e8:	6879      	ldr	r1, [r7, #4]
 80044ea:	4613      	mov	r3, r2
 80044ec:	00db      	lsls	r3, r3, #3
 80044ee:	4413      	add	r3, r2
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	440b      	add	r3, r1
 80044f4:	3314      	adds	r3, #20
 80044f6:	7bfa      	ldrb	r2, [r7, #15]
 80044f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80044fa:	7bfa      	ldrb	r2, [r7, #15]
 80044fc:	7bfb      	ldrb	r3, [r7, #15]
 80044fe:	b298      	uxth	r0, r3
 8004500:	6879      	ldr	r1, [r7, #4]
 8004502:	4613      	mov	r3, r2
 8004504:	00db      	lsls	r3, r3, #3
 8004506:	4413      	add	r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	440b      	add	r3, r1
 800450c:	332e      	adds	r3, #46	@ 0x2e
 800450e:	4602      	mov	r2, r0
 8004510:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004512:	7bfa      	ldrb	r2, [r7, #15]
 8004514:	6879      	ldr	r1, [r7, #4]
 8004516:	4613      	mov	r3, r2
 8004518:	00db      	lsls	r3, r3, #3
 800451a:	4413      	add	r3, r2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	440b      	add	r3, r1
 8004520:	3318      	adds	r3, #24
 8004522:	2200      	movs	r2, #0
 8004524:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004526:	7bfa      	ldrb	r2, [r7, #15]
 8004528:	6879      	ldr	r1, [r7, #4]
 800452a:	4613      	mov	r3, r2
 800452c:	00db      	lsls	r3, r3, #3
 800452e:	4413      	add	r3, r2
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	440b      	add	r3, r1
 8004534:	331c      	adds	r3, #28
 8004536:	2200      	movs	r2, #0
 8004538:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800453a:	7bfa      	ldrb	r2, [r7, #15]
 800453c:	6879      	ldr	r1, [r7, #4]
 800453e:	4613      	mov	r3, r2
 8004540:	00db      	lsls	r3, r3, #3
 8004542:	4413      	add	r3, r2
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	440b      	add	r3, r1
 8004548:	3320      	adds	r3, #32
 800454a:	2200      	movs	r2, #0
 800454c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800454e:	7bfa      	ldrb	r2, [r7, #15]
 8004550:	6879      	ldr	r1, [r7, #4]
 8004552:	4613      	mov	r3, r2
 8004554:	00db      	lsls	r3, r3, #3
 8004556:	4413      	add	r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	440b      	add	r3, r1
 800455c:	3324      	adds	r3, #36	@ 0x24
 800455e:	2200      	movs	r2, #0
 8004560:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004562:	7bfb      	ldrb	r3, [r7, #15]
 8004564:	3301      	adds	r3, #1
 8004566:	73fb      	strb	r3, [r7, #15]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	791b      	ldrb	r3, [r3, #4]
 800456c:	7bfa      	ldrb	r2, [r7, #15]
 800456e:	429a      	cmp	r2, r3
 8004570:	d3af      	bcc.n	80044d2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004572:	2300      	movs	r3, #0
 8004574:	73fb      	strb	r3, [r7, #15]
 8004576:	e044      	b.n	8004602 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004578:	7bfa      	ldrb	r2, [r7, #15]
 800457a:	6879      	ldr	r1, [r7, #4]
 800457c:	4613      	mov	r3, r2
 800457e:	00db      	lsls	r3, r3, #3
 8004580:	4413      	add	r3, r2
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	440b      	add	r3, r1
 8004586:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800458a:	2200      	movs	r2, #0
 800458c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800458e:	7bfa      	ldrb	r2, [r7, #15]
 8004590:	6879      	ldr	r1, [r7, #4]
 8004592:	4613      	mov	r3, r2
 8004594:	00db      	lsls	r3, r3, #3
 8004596:	4413      	add	r3, r2
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	440b      	add	r3, r1
 800459c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80045a0:	7bfa      	ldrb	r2, [r7, #15]
 80045a2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80045a4:	7bfa      	ldrb	r2, [r7, #15]
 80045a6:	6879      	ldr	r1, [r7, #4]
 80045a8:	4613      	mov	r3, r2
 80045aa:	00db      	lsls	r3, r3, #3
 80045ac:	4413      	add	r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	440b      	add	r3, r1
 80045b2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80045b6:	2200      	movs	r2, #0
 80045b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80045ba:	7bfa      	ldrb	r2, [r7, #15]
 80045bc:	6879      	ldr	r1, [r7, #4]
 80045be:	4613      	mov	r3, r2
 80045c0:	00db      	lsls	r3, r3, #3
 80045c2:	4413      	add	r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	440b      	add	r3, r1
 80045c8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80045cc:	2200      	movs	r2, #0
 80045ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80045d0:	7bfa      	ldrb	r2, [r7, #15]
 80045d2:	6879      	ldr	r1, [r7, #4]
 80045d4:	4613      	mov	r3, r2
 80045d6:	00db      	lsls	r3, r3, #3
 80045d8:	4413      	add	r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	440b      	add	r3, r1
 80045de:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80045e2:	2200      	movs	r2, #0
 80045e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80045e6:	7bfa      	ldrb	r2, [r7, #15]
 80045e8:	6879      	ldr	r1, [r7, #4]
 80045ea:	4613      	mov	r3, r2
 80045ec:	00db      	lsls	r3, r3, #3
 80045ee:	4413      	add	r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	440b      	add	r3, r1
 80045f4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80045f8:	2200      	movs	r2, #0
 80045fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045fc:	7bfb      	ldrb	r3, [r7, #15]
 80045fe:	3301      	adds	r3, #1
 8004600:	73fb      	strb	r3, [r7, #15]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	791b      	ldrb	r3, [r3, #4]
 8004606:	7bfa      	ldrb	r2, [r7, #15]
 8004608:	429a      	cmp	r2, r3
 800460a:	d3b5      	bcc.n	8004578 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6818      	ldr	r0, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	7c1a      	ldrb	r2, [r3, #16]
 8004614:	f88d 2000 	strb.w	r2, [sp]
 8004618:	3304      	adds	r3, #4
 800461a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800461c:	f003 fc5c 	bl	8007ed8 <USB_DevInit>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d005      	beq.n	8004632 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2202      	movs	r2, #2
 800462a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e013      	b.n	800465a <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	7b1b      	ldrb	r3, [r3, #12]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d102      	bne.n	800464e <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f001 f96f 	bl	800592c <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4618      	mov	r0, r3
 8004654:	f004 fc99 	bl	8008f8a <USB_DevDisconnect>

  return HAL_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3710      	adds	r7, #16
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}

08004662 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004662:	b580      	push	{r7, lr}
 8004664:	b084      	sub	sp, #16
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004676:	2b01      	cmp	r3, #1
 8004678:	d101      	bne.n	800467e <HAL_PCD_Start+0x1c>
 800467a:	2302      	movs	r3, #2
 800467c:	e022      	b.n	80046c4 <HAL_PCD_Start+0x62>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2201      	movs	r2, #1
 8004682:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800468e:	2b00      	cmp	r3, #0
 8004690:	d009      	beq.n	80046a6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004696:	2b01      	cmp	r3, #1
 8004698:	d105      	bne.n	80046a6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800469e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4618      	mov	r0, r3
 80046ac:	f003 fba6 	bl	8007dfc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4618      	mov	r0, r3
 80046b6:	f004 fc47 	bl	8008f48 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3710      	adds	r7, #16
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80046cc:	b590      	push	{r4, r7, lr}
 80046ce:	b08d      	sub	sp, #52	@ 0x34
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046da:	6a3b      	ldr	r3, [r7, #32]
 80046dc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4618      	mov	r0, r3
 80046e4:	f004 fd05 	bl	80090f2 <USB_GetMode>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f040 84b9 	bne.w	8005062 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4618      	mov	r0, r3
 80046f6:	f004 fc69 	bl	8008fcc <USB_ReadInterrupts>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f000 84af 	beq.w	8005060 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	0a1b      	lsrs	r3, r3, #8
 800470c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4618      	mov	r0, r3
 800471c:	f004 fc56 	bl	8008fcc <USB_ReadInterrupts>
 8004720:	4603      	mov	r3, r0
 8004722:	f003 0302 	and.w	r3, r3, #2
 8004726:	2b02      	cmp	r3, #2
 8004728:	d107      	bne.n	800473a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	695a      	ldr	r2, [r3, #20]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f002 0202 	and.w	r2, r2, #2
 8004738:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4618      	mov	r0, r3
 8004740:	f004 fc44 	bl	8008fcc <USB_ReadInterrupts>
 8004744:	4603      	mov	r3, r0
 8004746:	f003 0310 	and.w	r3, r3, #16
 800474a:	2b10      	cmp	r3, #16
 800474c:	d161      	bne.n	8004812 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	699a      	ldr	r2, [r3, #24]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f022 0210 	bic.w	r2, r2, #16
 800475c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800475e:	6a3b      	ldr	r3, [r7, #32]
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	f003 020f 	and.w	r2, r3, #15
 800476a:	4613      	mov	r3, r2
 800476c:	00db      	lsls	r3, r3, #3
 800476e:	4413      	add	r3, r2
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	4413      	add	r3, r2
 800477a:	3304      	adds	r3, #4
 800477c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	0c5b      	lsrs	r3, r3, #17
 8004782:	f003 030f 	and.w	r3, r3, #15
 8004786:	2b02      	cmp	r3, #2
 8004788:	d124      	bne.n	80047d4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800478a:	69ba      	ldr	r2, [r7, #24]
 800478c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004790:	4013      	ands	r3, r2
 8004792:	2b00      	cmp	r3, #0
 8004794:	d035      	beq.n	8004802 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	091b      	lsrs	r3, r3, #4
 800479e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80047a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	461a      	mov	r2, r3
 80047a8:	6a38      	ldr	r0, [r7, #32]
 80047aa:	f004 fa7b 	bl	8008ca4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	68da      	ldr	r2, [r3, #12]
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	091b      	lsrs	r3, r3, #4
 80047b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047ba:	441a      	add	r2, r3
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	695a      	ldr	r2, [r3, #20]
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	091b      	lsrs	r3, r3, #4
 80047c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047cc:	441a      	add	r2, r3
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	615a      	str	r2, [r3, #20]
 80047d2:	e016      	b.n	8004802 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	0c5b      	lsrs	r3, r3, #17
 80047d8:	f003 030f 	and.w	r3, r3, #15
 80047dc:	2b06      	cmp	r3, #6
 80047de:	d110      	bne.n	8004802 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80047e6:	2208      	movs	r2, #8
 80047e8:	4619      	mov	r1, r3
 80047ea:	6a38      	ldr	r0, [r7, #32]
 80047ec:	f004 fa5a 	bl	8008ca4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	695a      	ldr	r2, [r3, #20]
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	091b      	lsrs	r3, r3, #4
 80047f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047fc:	441a      	add	r2, r3
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	699a      	ldr	r2, [r3, #24]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f042 0210 	orr.w	r2, r2, #16
 8004810:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4618      	mov	r0, r3
 8004818:	f004 fbd8 	bl	8008fcc <USB_ReadInterrupts>
 800481c:	4603      	mov	r3, r0
 800481e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004822:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004826:	f040 80a7 	bne.w	8004978 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800482a:	2300      	movs	r3, #0
 800482c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4618      	mov	r0, r3
 8004834:	f004 fbdd 	bl	8008ff2 <USB_ReadDevAllOutEpInterrupt>
 8004838:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800483a:	e099      	b.n	8004970 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800483c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800483e:	f003 0301 	and.w	r3, r3, #1
 8004842:	2b00      	cmp	r3, #0
 8004844:	f000 808e 	beq.w	8004964 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800484e:	b2d2      	uxtb	r2, r2
 8004850:	4611      	mov	r1, r2
 8004852:	4618      	mov	r0, r3
 8004854:	f004 fc01 	bl	800905a <USB_ReadDevOutEPInterrupt>
 8004858:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	f003 0301 	and.w	r3, r3, #1
 8004860:	2b00      	cmp	r3, #0
 8004862:	d00c      	beq.n	800487e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004866:	015a      	lsls	r2, r3, #5
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	4413      	add	r3, r2
 800486c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004870:	461a      	mov	r2, r3
 8004872:	2301      	movs	r3, #1
 8004874:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004876:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f000 fed1 	bl	8005620 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	f003 0308 	and.w	r3, r3, #8
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00c      	beq.n	80048a2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800488a:	015a      	lsls	r2, r3, #5
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	4413      	add	r3, r2
 8004890:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004894:	461a      	mov	r2, r3
 8004896:	2308      	movs	r3, #8
 8004898:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800489a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 ffa7 	bl	80057f0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	f003 0310 	and.w	r3, r3, #16
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d008      	beq.n	80048be <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80048ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ae:	015a      	lsls	r2, r3, #5
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	4413      	add	r3, r2
 80048b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048b8:	461a      	mov	r2, r3
 80048ba:	2310      	movs	r3, #16
 80048bc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	f003 0302 	and.w	r3, r3, #2
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d030      	beq.n	800492a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80048c8:	6a3b      	ldr	r3, [r7, #32]
 80048ca:	695b      	ldr	r3, [r3, #20]
 80048cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048d0:	2b80      	cmp	r3, #128	@ 0x80
 80048d2:	d109      	bne.n	80048e8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	69fa      	ldr	r2, [r7, #28]
 80048de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80048e6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80048e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048ea:	4613      	mov	r3, r2
 80048ec:	00db      	lsls	r3, r3, #3
 80048ee:	4413      	add	r3, r2
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	4413      	add	r3, r2
 80048fa:	3304      	adds	r3, #4
 80048fc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	78db      	ldrb	r3, [r3, #3]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d108      	bne.n	8004918 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	2200      	movs	r2, #0
 800490a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800490c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800490e:	b2db      	uxtb	r3, r3
 8004910:	4619      	mov	r1, r3
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f007 fcc0 	bl	800c298 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800491a:	015a      	lsls	r2, r3, #5
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	4413      	add	r3, r2
 8004920:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004924:	461a      	mov	r2, r3
 8004926:	2302      	movs	r3, #2
 8004928:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	f003 0320 	and.w	r3, r3, #32
 8004930:	2b00      	cmp	r3, #0
 8004932:	d008      	beq.n	8004946 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004936:	015a      	lsls	r2, r3, #5
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	4413      	add	r3, r2
 800493c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004940:	461a      	mov	r2, r3
 8004942:	2320      	movs	r3, #32
 8004944:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d009      	beq.n	8004964 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004952:	015a      	lsls	r2, r3, #5
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	4413      	add	r3, r2
 8004958:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800495c:	461a      	mov	r2, r3
 800495e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004962:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004966:	3301      	adds	r3, #1
 8004968:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800496a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800496c:	085b      	lsrs	r3, r3, #1
 800496e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004972:	2b00      	cmp	r3, #0
 8004974:	f47f af62 	bne.w	800483c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4618      	mov	r0, r3
 800497e:	f004 fb25 	bl	8008fcc <USB_ReadInterrupts>
 8004982:	4603      	mov	r3, r0
 8004984:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004988:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800498c:	f040 80db 	bne.w	8004b46 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4618      	mov	r0, r3
 8004996:	f004 fb46 	bl	8009026 <USB_ReadDevAllInEpInterrupt>
 800499a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800499c:	2300      	movs	r3, #0
 800499e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80049a0:	e0cd      	b.n	8004b3e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80049a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049a4:	f003 0301 	and.w	r3, r3, #1
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	f000 80c2 	beq.w	8004b32 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049b4:	b2d2      	uxtb	r2, r2
 80049b6:	4611      	mov	r1, r2
 80049b8:	4618      	mov	r0, r3
 80049ba:	f004 fb6c 	bl	8009096 <USB_ReadDevInEPInterrupt>
 80049be:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d057      	beq.n	8004a7a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80049ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049cc:	f003 030f 	and.w	r3, r3, #15
 80049d0:	2201      	movs	r2, #1
 80049d2:	fa02 f303 	lsl.w	r3, r2, r3
 80049d6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	43db      	mvns	r3, r3
 80049e4:	69f9      	ldr	r1, [r7, #28]
 80049e6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80049ea:	4013      	ands	r3, r2
 80049ec:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80049ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f0:	015a      	lsls	r2, r3, #5
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	4413      	add	r3, r2
 80049f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049fa:	461a      	mov	r2, r3
 80049fc:	2301      	movs	r3, #1
 80049fe:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	799b      	ldrb	r3, [r3, #6]
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d132      	bne.n	8004a6e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004a08:	6879      	ldr	r1, [r7, #4]
 8004a0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	00db      	lsls	r3, r3, #3
 8004a10:	4413      	add	r3, r2
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	440b      	add	r3, r1
 8004a16:	3320      	adds	r3, #32
 8004a18:	6819      	ldr	r1, [r3, #0]
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a1e:	4613      	mov	r3, r2
 8004a20:	00db      	lsls	r3, r3, #3
 8004a22:	4413      	add	r3, r2
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	4403      	add	r3, r0
 8004a28:	331c      	adds	r3, #28
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4419      	add	r1, r3
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a32:	4613      	mov	r3, r2
 8004a34:	00db      	lsls	r3, r3, #3
 8004a36:	4413      	add	r3, r2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	4403      	add	r3, r0
 8004a3c:	3320      	adds	r3, #32
 8004a3e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d113      	bne.n	8004a6e <HAL_PCD_IRQHandler+0x3a2>
 8004a46:	6879      	ldr	r1, [r7, #4]
 8004a48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	00db      	lsls	r3, r3, #3
 8004a4e:	4413      	add	r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	440b      	add	r3, r1
 8004a54:	3324      	adds	r3, #36	@ 0x24
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d108      	bne.n	8004a6e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6818      	ldr	r0, [r3, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004a66:	461a      	mov	r2, r3
 8004a68:	2101      	movs	r1, #1
 8004a6a:	f004 fb73 	bl	8009154 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	4619      	mov	r1, r3
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f007 fb8a 	bl	800c18e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	f003 0308 	and.w	r3, r3, #8
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d008      	beq.n	8004a96 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a86:	015a      	lsls	r2, r3, #5
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a90:	461a      	mov	r2, r3
 8004a92:	2308      	movs	r3, #8
 8004a94:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	f003 0310 	and.w	r3, r3, #16
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d008      	beq.n	8004ab2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa2:	015a      	lsls	r2, r3, #5
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004aac:	461a      	mov	r2, r3
 8004aae:	2310      	movs	r3, #16
 8004ab0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d008      	beq.n	8004ace <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004abe:	015a      	lsls	r2, r3, #5
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ac8:	461a      	mov	r2, r3
 8004aca:	2340      	movs	r3, #64	@ 0x40
 8004acc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	f003 0302 	and.w	r3, r3, #2
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d023      	beq.n	8004b20 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004ad8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004ada:	6a38      	ldr	r0, [r7, #32]
 8004adc:	f003 fb5a 	bl	8008194 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004ae0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	00db      	lsls	r3, r3, #3
 8004ae6:	4413      	add	r3, r2
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	3310      	adds	r3, #16
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	4413      	add	r3, r2
 8004af0:	3304      	adds	r3, #4
 8004af2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	78db      	ldrb	r3, [r3, #3]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d108      	bne.n	8004b0e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	2200      	movs	r2, #0
 8004b00:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	4619      	mov	r1, r3
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f007 fbd7 	bl	800c2bc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b10:	015a      	lsls	r2, r3, #5
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	4413      	add	r3, r2
 8004b16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d003      	beq.n	8004b32 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004b2a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f000 fcea 	bl	8005506 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b34:	3301      	adds	r3, #1
 8004b36:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b3a:	085b      	lsrs	r3, r3, #1
 8004b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f47f af2e 	bne.w	80049a2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f004 fa3e 	bl	8008fcc <USB_ReadInterrupts>
 8004b50:	4603      	mov	r3, r0
 8004b52:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b56:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b5a:	d122      	bne.n	8004ba2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	69fa      	ldr	r2, [r7, #28]
 8004b66:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b6a:	f023 0301 	bic.w	r3, r3, #1
 8004b6e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d108      	bne.n	8004b8c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004b82:	2100      	movs	r1, #0
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 fef5 	bl	8005974 <HAL_PCDEx_LPM_Callback>
 8004b8a:	e002      	b.n	8004b92 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f007 fb75 	bl	800c27c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	695a      	ldr	r2, [r3, #20]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004ba0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f004 fa10 	bl	8008fcc <USB_ReadInterrupts>
 8004bac:	4603      	mov	r3, r0
 8004bae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bb2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bb6:	d112      	bne.n	8004bde <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f003 0301 	and.w	r3, r3, #1
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d102      	bne.n	8004bce <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f007 fb31 	bl	800c230 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	695a      	ldr	r2, [r3, #20]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004bdc:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4618      	mov	r0, r3
 8004be4:	f004 f9f2 	bl	8008fcc <USB_ReadInterrupts>
 8004be8:	4603      	mov	r3, r0
 8004bea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004bf2:	d121      	bne.n	8004c38 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	695a      	ldr	r2, [r3, #20]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8004c02:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d111      	bne.n	8004c32 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2201      	movs	r2, #1
 8004c12:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c1c:	089b      	lsrs	r3, r3, #2
 8004c1e:	f003 020f 	and.w	r2, r3, #15
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004c28:	2101      	movs	r1, #1
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 fea2 	bl	8005974 <HAL_PCDEx_LPM_Callback>
 8004c30:	e002      	b.n	8004c38 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f007 fafc 	bl	800c230 <HAL_PCD_SuspendCallback>
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f004 f9c5 	bl	8008fcc <USB_ReadInterrupts>
 8004c42:	4603      	mov	r3, r0
 8004c44:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c4c:	f040 80b7 	bne.w	8004dbe <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	69fa      	ldr	r2, [r7, #28]
 8004c5a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c5e:	f023 0301 	bic.w	r3, r3, #1
 8004c62:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2110      	movs	r1, #16
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f003 fa92 	bl	8008194 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c70:	2300      	movs	r3, #0
 8004c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c74:	e046      	b.n	8004d04 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004c76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c78:	015a      	lsls	r2, r3, #5
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c82:	461a      	mov	r2, r3
 8004c84:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004c88:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c8c:	015a      	lsls	r2, r3, #5
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	4413      	add	r3, r2
 8004c92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c9a:	0151      	lsls	r1, r2, #5
 8004c9c:	69fa      	ldr	r2, [r7, #28]
 8004c9e:	440a      	add	r2, r1
 8004ca0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ca4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004ca8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cac:	015a      	lsls	r2, r3, #5
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004cbc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cc0:	015a      	lsls	r2, r3, #5
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004cce:	0151      	lsls	r1, r2, #5
 8004cd0:	69fa      	ldr	r2, [r7, #28]
 8004cd2:	440a      	add	r2, r1
 8004cd4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004cd8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004cdc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ce0:	015a      	lsls	r2, r3, #5
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004cee:	0151      	lsls	r1, r2, #5
 8004cf0:	69fa      	ldr	r2, [r7, #28]
 8004cf2:	440a      	add	r2, r1
 8004cf4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004cf8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004cfc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d00:	3301      	adds	r3, #1
 8004d02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	791b      	ldrb	r3, [r3, #4]
 8004d08:	461a      	mov	r2, r3
 8004d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d3b2      	bcc.n	8004c76 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d16:	69db      	ldr	r3, [r3, #28]
 8004d18:	69fa      	ldr	r2, [r7, #28]
 8004d1a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d1e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004d22:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	7bdb      	ldrb	r3, [r3, #15]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d016      	beq.n	8004d5a <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d36:	69fa      	ldr	r2, [r7, #28]
 8004d38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d3c:	f043 030b 	orr.w	r3, r3, #11
 8004d40:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d4c:	69fa      	ldr	r2, [r7, #28]
 8004d4e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d52:	f043 030b 	orr.w	r3, r3, #11
 8004d56:	6453      	str	r3, [r2, #68]	@ 0x44
 8004d58:	e015      	b.n	8004d86 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	69fa      	ldr	r2, [r7, #28]
 8004d64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d68:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004d6c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004d70:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	69fa      	ldr	r2, [r7, #28]
 8004d7c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d80:	f043 030b 	orr.w	r3, r3, #11
 8004d84:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	69fa      	ldr	r2, [r7, #28]
 8004d90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d94:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004d98:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6818      	ldr	r0, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004da8:	461a      	mov	r2, r3
 8004daa:	f004 f9d3 	bl	8009154 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	695a      	ldr	r2, [r3, #20]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004dbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f004 f902 	bl	8008fcc <USB_ReadInterrupts>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004dce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dd2:	d123      	bne.n	8004e1c <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f004 f998 	bl	800910e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4618      	mov	r0, r3
 8004de4:	f003 fa4f 	bl	8008286 <USB_GetDevSpeed>
 8004de8:	4603      	mov	r3, r0
 8004dea:	461a      	mov	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681c      	ldr	r4, [r3, #0]
 8004df4:	f000 feb0 	bl	8005b58 <HAL_RCC_GetHCLKFreq>
 8004df8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004dfe:	461a      	mov	r2, r3
 8004e00:	4620      	mov	r0, r4
 8004e02:	f002 ff59 	bl	8007cb8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f007 f9e9 	bl	800c1de <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	695a      	ldr	r2, [r3, #20]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004e1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4618      	mov	r0, r3
 8004e22:	f004 f8d3 	bl	8008fcc <USB_ReadInterrupts>
 8004e26:	4603      	mov	r3, r0
 8004e28:	f003 0308 	and.w	r3, r3, #8
 8004e2c:	2b08      	cmp	r3, #8
 8004e2e:	d10a      	bne.n	8004e46 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f007 f9c6 	bl	800c1c2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	695a      	ldr	r2, [r3, #20]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f002 0208 	and.w	r2, r2, #8
 8004e44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f004 f8be 	bl	8008fcc <USB_ReadInterrupts>
 8004e50:	4603      	mov	r3, r0
 8004e52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e56:	2b80      	cmp	r3, #128	@ 0x80
 8004e58:	d123      	bne.n	8004ea2 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004e5a:	6a3b      	ldr	r3, [r7, #32]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e62:	6a3b      	ldr	r3, [r7, #32]
 8004e64:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004e66:	2301      	movs	r3, #1
 8004e68:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e6a:	e014      	b.n	8004e96 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004e6c:	6879      	ldr	r1, [r7, #4]
 8004e6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e70:	4613      	mov	r3, r2
 8004e72:	00db      	lsls	r3, r3, #3
 8004e74:	4413      	add	r3, r2
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	440b      	add	r3, r1
 8004e7a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d105      	bne.n	8004e90 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	4619      	mov	r1, r3
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 fb0a 	bl	80054a4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e92:	3301      	adds	r3, #1
 8004e94:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	791b      	ldrb	r3, [r3, #4]
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d3e4      	bcc.n	8004e6c <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f004 f890 	bl	8008fcc <USB_ReadInterrupts>
 8004eac:	4603      	mov	r3, r0
 8004eae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004eb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004eb6:	d13c      	bne.n	8004f32 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004eb8:	2301      	movs	r3, #1
 8004eba:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ebc:	e02b      	b.n	8004f16 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec0:	015a      	lsls	r2, r3, #5
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004ece:	6879      	ldr	r1, [r7, #4]
 8004ed0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	00db      	lsls	r3, r3, #3
 8004ed6:	4413      	add	r3, r2
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	440b      	add	r3, r1
 8004edc:	3318      	adds	r3, #24
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d115      	bne.n	8004f10 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004ee4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	da12      	bge.n	8004f10 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004eea:	6879      	ldr	r1, [r7, #4]
 8004eec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eee:	4613      	mov	r3, r2
 8004ef0:	00db      	lsls	r3, r3, #3
 8004ef2:	4413      	add	r3, r2
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	440b      	add	r3, r1
 8004ef8:	3317      	adds	r3, #23
 8004efa:	2201      	movs	r2, #1
 8004efc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	4619      	mov	r1, r3
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 faca 	bl	80054a4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f12:	3301      	adds	r3, #1
 8004f14:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	791b      	ldrb	r3, [r3, #4]
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d3cd      	bcc.n	8004ebe <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	695a      	ldr	r2, [r3, #20]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004f30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f004 f848 	bl	8008fcc <USB_ReadInterrupts>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f42:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f46:	d156      	bne.n	8004ff6 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f48:	2301      	movs	r3, #1
 8004f4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f4c:	e045      	b.n	8004fda <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f50:	015a      	lsls	r2, r3, #5
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	4413      	add	r3, r2
 8004f56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004f5e:	6879      	ldr	r1, [r7, #4]
 8004f60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f62:	4613      	mov	r3, r2
 8004f64:	00db      	lsls	r3, r3, #3
 8004f66:	4413      	add	r3, r2
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	440b      	add	r3, r1
 8004f6c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d12e      	bne.n	8004fd4 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004f76:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	da2b      	bge.n	8004fd4 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004f88:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d121      	bne.n	8004fd4 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004f90:	6879      	ldr	r1, [r7, #4]
 8004f92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f94:	4613      	mov	r3, r2
 8004f96:	00db      	lsls	r3, r3, #3
 8004f98:	4413      	add	r3, r2
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	440b      	add	r3, r1
 8004f9e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004fa6:	6a3b      	ldr	r3, [r7, #32]
 8004fa8:	699b      	ldr	r3, [r3, #24]
 8004faa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004fae:	6a3b      	ldr	r3, [r7, #32]
 8004fb0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004fb2:	6a3b      	ldr	r3, [r7, #32]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d10a      	bne.n	8004fd4 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	69fa      	ldr	r2, [r7, #28]
 8004fc8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004fcc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004fd0:	6053      	str	r3, [r2, #4]
            break;
 8004fd2:	e008      	b.n	8004fe6 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	791b      	ldrb	r3, [r3, #4]
 8004fde:	461a      	mov	r2, r3
 8004fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d3b3      	bcc.n	8004f4e <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	695a      	ldr	r2, [r3, #20]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004ff4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f003 ffe6 	bl	8008fcc <USB_ReadInterrupts>
 8005000:	4603      	mov	r3, r0
 8005002:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005006:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800500a:	d10a      	bne.n	8005022 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f007 f967 	bl	800c2e0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	695a      	ldr	r2, [r3, #20]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005020:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4618      	mov	r0, r3
 8005028:	f003 ffd0 	bl	8008fcc <USB_ReadInterrupts>
 800502c:	4603      	mov	r3, r0
 800502e:	f003 0304 	and.w	r3, r3, #4
 8005032:	2b04      	cmp	r3, #4
 8005034:	d115      	bne.n	8005062 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	f003 0304 	and.w	r3, r3, #4
 8005044:	2b00      	cmp	r3, #0
 8005046:	d002      	beq.n	800504e <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f007 f957 	bl	800c2fc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	6859      	ldr	r1, [r3, #4]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	69ba      	ldr	r2, [r7, #24]
 800505a:	430a      	orrs	r2, r1
 800505c:	605a      	str	r2, [r3, #4]
 800505e:	e000      	b.n	8005062 <HAL_PCD_IRQHandler+0x996>
      return;
 8005060:	bf00      	nop
    }
  }
}
 8005062:	3734      	adds	r7, #52	@ 0x34
 8005064:	46bd      	mov	sp, r7
 8005066:	bd90      	pop	{r4, r7, pc}

08005068 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	460b      	mov	r3, r1
 8005072:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800507a:	2b01      	cmp	r3, #1
 800507c:	d101      	bne.n	8005082 <HAL_PCD_SetAddress+0x1a>
 800507e:	2302      	movs	r3, #2
 8005080:	e012      	b.n	80050a8 <HAL_PCD_SetAddress+0x40>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2201      	movs	r2, #1
 8005086:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	78fa      	ldrb	r2, [r7, #3]
 800508e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	78fa      	ldrb	r2, [r7, #3]
 8005096:	4611      	mov	r1, r2
 8005098:	4618      	mov	r0, r3
 800509a:	f003 ff2f 	bl	8008efc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3708      	adds	r7, #8
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	4608      	mov	r0, r1
 80050ba:	4611      	mov	r1, r2
 80050bc:	461a      	mov	r2, r3
 80050be:	4603      	mov	r3, r0
 80050c0:	70fb      	strb	r3, [r7, #3]
 80050c2:	460b      	mov	r3, r1
 80050c4:	803b      	strh	r3, [r7, #0]
 80050c6:	4613      	mov	r3, r2
 80050c8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80050ca:	2300      	movs	r3, #0
 80050cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80050ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	da0f      	bge.n	80050f6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050d6:	78fb      	ldrb	r3, [r7, #3]
 80050d8:	f003 020f 	and.w	r2, r3, #15
 80050dc:	4613      	mov	r3, r2
 80050de:	00db      	lsls	r3, r3, #3
 80050e0:	4413      	add	r3, r2
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	3310      	adds	r3, #16
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	4413      	add	r3, r2
 80050ea:	3304      	adds	r3, #4
 80050ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2201      	movs	r2, #1
 80050f2:	705a      	strb	r2, [r3, #1]
 80050f4:	e00f      	b.n	8005116 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80050f6:	78fb      	ldrb	r3, [r7, #3]
 80050f8:	f003 020f 	and.w	r2, r3, #15
 80050fc:	4613      	mov	r3, r2
 80050fe:	00db      	lsls	r3, r3, #3
 8005100:	4413      	add	r3, r2
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	4413      	add	r3, r2
 800510c:	3304      	adds	r3, #4
 800510e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2200      	movs	r2, #0
 8005114:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005116:	78fb      	ldrb	r3, [r7, #3]
 8005118:	f003 030f 	and.w	r3, r3, #15
 800511c:	b2da      	uxtb	r2, r3
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8005122:	883b      	ldrh	r3, [r7, #0]
 8005124:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	78ba      	ldrb	r2, [r7, #2]
 8005130:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	785b      	ldrb	r3, [r3, #1]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d004      	beq.n	8005144 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	461a      	mov	r2, r3
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005144:	78bb      	ldrb	r3, [r7, #2]
 8005146:	2b02      	cmp	r3, #2
 8005148:	d102      	bne.n	8005150 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005156:	2b01      	cmp	r3, #1
 8005158:	d101      	bne.n	800515e <HAL_PCD_EP_Open+0xae>
 800515a:	2302      	movs	r3, #2
 800515c:	e00e      	b.n	800517c <HAL_PCD_EP_Open+0xcc>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2201      	movs	r2, #1
 8005162:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68f9      	ldr	r1, [r7, #12]
 800516c:	4618      	mov	r0, r3
 800516e:	f003 f8af 	bl	80082d0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800517a:	7afb      	ldrb	r3, [r7, #11]
}
 800517c:	4618      	mov	r0, r3
 800517e:	3710      	adds	r7, #16
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	460b      	mov	r3, r1
 800518e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005190:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005194:	2b00      	cmp	r3, #0
 8005196:	da0f      	bge.n	80051b8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005198:	78fb      	ldrb	r3, [r7, #3]
 800519a:	f003 020f 	and.w	r2, r3, #15
 800519e:	4613      	mov	r3, r2
 80051a0:	00db      	lsls	r3, r3, #3
 80051a2:	4413      	add	r3, r2
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	3310      	adds	r3, #16
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	4413      	add	r3, r2
 80051ac:	3304      	adds	r3, #4
 80051ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2201      	movs	r2, #1
 80051b4:	705a      	strb	r2, [r3, #1]
 80051b6:	e00f      	b.n	80051d8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051b8:	78fb      	ldrb	r3, [r7, #3]
 80051ba:	f003 020f 	and.w	r2, r3, #15
 80051be:	4613      	mov	r3, r2
 80051c0:	00db      	lsls	r3, r3, #3
 80051c2:	4413      	add	r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	4413      	add	r3, r2
 80051ce:	3304      	adds	r3, #4
 80051d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2200      	movs	r2, #0
 80051d6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80051d8:	78fb      	ldrb	r3, [r7, #3]
 80051da:	f003 030f 	and.w	r3, r3, #15
 80051de:	b2da      	uxtb	r2, r3
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d101      	bne.n	80051f2 <HAL_PCD_EP_Close+0x6e>
 80051ee:	2302      	movs	r3, #2
 80051f0:	e00e      	b.n	8005210 <HAL_PCD_EP_Close+0x8c>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68f9      	ldr	r1, [r7, #12]
 8005200:	4618      	mov	r0, r3
 8005202:	f003 f8ed 	bl	80083e0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800520e:	2300      	movs	r3, #0
}
 8005210:	4618      	mov	r0, r3
 8005212:	3710      	adds	r7, #16
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b086      	sub	sp, #24
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	607a      	str	r2, [r7, #4]
 8005222:	603b      	str	r3, [r7, #0]
 8005224:	460b      	mov	r3, r1
 8005226:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005228:	7afb      	ldrb	r3, [r7, #11]
 800522a:	f003 020f 	and.w	r2, r3, #15
 800522e:	4613      	mov	r3, r2
 8005230:	00db      	lsls	r3, r3, #3
 8005232:	4413      	add	r3, r2
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	4413      	add	r3, r2
 800523e:	3304      	adds	r3, #4
 8005240:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	683a      	ldr	r2, [r7, #0]
 800524c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	2200      	movs	r2, #0
 8005252:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	2200      	movs	r2, #0
 8005258:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800525a:	7afb      	ldrb	r3, [r7, #11]
 800525c:	f003 030f 	and.w	r3, r3, #15
 8005260:	b2da      	uxtb	r2, r3
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	799b      	ldrb	r3, [r3, #6]
 800526a:	2b01      	cmp	r3, #1
 800526c:	d102      	bne.n	8005274 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6818      	ldr	r0, [r3, #0]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	799b      	ldrb	r3, [r3, #6]
 800527c:	461a      	mov	r2, r3
 800527e:	6979      	ldr	r1, [r7, #20]
 8005280:	f003 f98a 	bl	8008598 <USB_EPStartXfer>

  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3718      	adds	r7, #24
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}

0800528e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800528e:	b480      	push	{r7}
 8005290:	b083      	sub	sp, #12
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
 8005296:	460b      	mov	r3, r1
 8005298:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800529a:	78fb      	ldrb	r3, [r7, #3]
 800529c:	f003 020f 	and.w	r2, r3, #15
 80052a0:	6879      	ldr	r1, [r7, #4]
 80052a2:	4613      	mov	r3, r2
 80052a4:	00db      	lsls	r3, r3, #3
 80052a6:	4413      	add	r3, r2
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	440b      	add	r3, r1
 80052ac:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80052b0:	681b      	ldr	r3, [r3, #0]
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	370c      	adds	r7, #12
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr

080052be <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80052be:	b580      	push	{r7, lr}
 80052c0:	b086      	sub	sp, #24
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	60f8      	str	r0, [r7, #12]
 80052c6:	607a      	str	r2, [r7, #4]
 80052c8:	603b      	str	r3, [r7, #0]
 80052ca:	460b      	mov	r3, r1
 80052cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052ce:	7afb      	ldrb	r3, [r7, #11]
 80052d0:	f003 020f 	and.w	r2, r3, #15
 80052d4:	4613      	mov	r3, r2
 80052d6:	00db      	lsls	r3, r3, #3
 80052d8:	4413      	add	r3, r2
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	3310      	adds	r3, #16
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	4413      	add	r3, r2
 80052e2:	3304      	adds	r3, #4
 80052e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	683a      	ldr	r2, [r7, #0]
 80052f0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	2200      	movs	r2, #0
 80052f6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	2201      	movs	r2, #1
 80052fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80052fe:	7afb      	ldrb	r3, [r7, #11]
 8005300:	f003 030f 	and.w	r3, r3, #15
 8005304:	b2da      	uxtb	r2, r3
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	799b      	ldrb	r3, [r3, #6]
 800530e:	2b01      	cmp	r3, #1
 8005310:	d102      	bne.n	8005318 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6818      	ldr	r0, [r3, #0]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	799b      	ldrb	r3, [r3, #6]
 8005320:	461a      	mov	r2, r3
 8005322:	6979      	ldr	r1, [r7, #20]
 8005324:	f003 f938 	bl	8008598 <USB_EPStartXfer>

  return HAL_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	3718      	adds	r7, #24
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}

08005332 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005332:	b580      	push	{r7, lr}
 8005334:	b084      	sub	sp, #16
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
 800533a:	460b      	mov	r3, r1
 800533c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800533e:	78fb      	ldrb	r3, [r7, #3]
 8005340:	f003 030f 	and.w	r3, r3, #15
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	7912      	ldrb	r2, [r2, #4]
 8005348:	4293      	cmp	r3, r2
 800534a:	d901      	bls.n	8005350 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e04f      	b.n	80053f0 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005350:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005354:	2b00      	cmp	r3, #0
 8005356:	da0f      	bge.n	8005378 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005358:	78fb      	ldrb	r3, [r7, #3]
 800535a:	f003 020f 	and.w	r2, r3, #15
 800535e:	4613      	mov	r3, r2
 8005360:	00db      	lsls	r3, r3, #3
 8005362:	4413      	add	r3, r2
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	3310      	adds	r3, #16
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	4413      	add	r3, r2
 800536c:	3304      	adds	r3, #4
 800536e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2201      	movs	r2, #1
 8005374:	705a      	strb	r2, [r3, #1]
 8005376:	e00d      	b.n	8005394 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005378:	78fa      	ldrb	r2, [r7, #3]
 800537a:	4613      	mov	r3, r2
 800537c:	00db      	lsls	r3, r3, #3
 800537e:	4413      	add	r3, r2
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	4413      	add	r3, r2
 800538a:	3304      	adds	r3, #4
 800538c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2200      	movs	r2, #0
 8005392:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2201      	movs	r2, #1
 8005398:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800539a:	78fb      	ldrb	r3, [r7, #3]
 800539c:	f003 030f 	and.w	r3, r3, #15
 80053a0:	b2da      	uxtb	r2, r3
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d101      	bne.n	80053b4 <HAL_PCD_EP_SetStall+0x82>
 80053b0:	2302      	movs	r3, #2
 80053b2:	e01d      	b.n	80053f0 <HAL_PCD_EP_SetStall+0xbe>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68f9      	ldr	r1, [r7, #12]
 80053c2:	4618      	mov	r0, r3
 80053c4:	f003 fcc6 	bl	8008d54 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80053c8:	78fb      	ldrb	r3, [r7, #3]
 80053ca:	f003 030f 	and.w	r3, r3, #15
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d109      	bne.n	80053e6 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6818      	ldr	r0, [r3, #0]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	7999      	ldrb	r1, [r3, #6]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80053e0:	461a      	mov	r2, r3
 80053e2:	f003 feb7 	bl	8009154 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80053ee:	2300      	movs	r3, #0
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3710      	adds	r7, #16
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	460b      	mov	r3, r1
 8005402:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005404:	78fb      	ldrb	r3, [r7, #3]
 8005406:	f003 030f 	and.w	r3, r3, #15
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	7912      	ldrb	r2, [r2, #4]
 800540e:	4293      	cmp	r3, r2
 8005410:	d901      	bls.n	8005416 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e042      	b.n	800549c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005416:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800541a:	2b00      	cmp	r3, #0
 800541c:	da0f      	bge.n	800543e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800541e:	78fb      	ldrb	r3, [r7, #3]
 8005420:	f003 020f 	and.w	r2, r3, #15
 8005424:	4613      	mov	r3, r2
 8005426:	00db      	lsls	r3, r3, #3
 8005428:	4413      	add	r3, r2
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	3310      	adds	r3, #16
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	4413      	add	r3, r2
 8005432:	3304      	adds	r3, #4
 8005434:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2201      	movs	r2, #1
 800543a:	705a      	strb	r2, [r3, #1]
 800543c:	e00f      	b.n	800545e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800543e:	78fb      	ldrb	r3, [r7, #3]
 8005440:	f003 020f 	and.w	r2, r3, #15
 8005444:	4613      	mov	r3, r2
 8005446:	00db      	lsls	r3, r3, #3
 8005448:	4413      	add	r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	4413      	add	r3, r2
 8005454:	3304      	adds	r3, #4
 8005456:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2200      	movs	r2, #0
 800545c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005464:	78fb      	ldrb	r3, [r7, #3]
 8005466:	f003 030f 	and.w	r3, r3, #15
 800546a:	b2da      	uxtb	r2, r3
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005476:	2b01      	cmp	r3, #1
 8005478:	d101      	bne.n	800547e <HAL_PCD_EP_ClrStall+0x86>
 800547a:	2302      	movs	r3, #2
 800547c:	e00e      	b.n	800549c <HAL_PCD_EP_ClrStall+0xa4>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2201      	movs	r2, #1
 8005482:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68f9      	ldr	r1, [r7, #12]
 800548c:	4618      	mov	r0, r3
 800548e:	f003 fccf 	bl	8008e30 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800549a:	2300      	movs	r3, #0
}
 800549c:	4618      	mov	r0, r3
 800549e:	3710      	adds	r7, #16
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	460b      	mov	r3, r1
 80054ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80054b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	da0c      	bge.n	80054d2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054b8:	78fb      	ldrb	r3, [r7, #3]
 80054ba:	f003 020f 	and.w	r2, r3, #15
 80054be:	4613      	mov	r3, r2
 80054c0:	00db      	lsls	r3, r3, #3
 80054c2:	4413      	add	r3, r2
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	3310      	adds	r3, #16
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	4413      	add	r3, r2
 80054cc:	3304      	adds	r3, #4
 80054ce:	60fb      	str	r3, [r7, #12]
 80054d0:	e00c      	b.n	80054ec <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80054d2:	78fb      	ldrb	r3, [r7, #3]
 80054d4:	f003 020f 	and.w	r2, r3, #15
 80054d8:	4613      	mov	r3, r2
 80054da:	00db      	lsls	r3, r3, #3
 80054dc:	4413      	add	r3, r2
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	4413      	add	r3, r2
 80054e8:	3304      	adds	r3, #4
 80054ea:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68f9      	ldr	r1, [r7, #12]
 80054f2:	4618      	mov	r0, r3
 80054f4:	f003 faee 	bl	8008ad4 <USB_EPStopXfer>
 80054f8:	4603      	mov	r3, r0
 80054fa:	72fb      	strb	r3, [r7, #11]

  return ret;
 80054fc:	7afb      	ldrb	r3, [r7, #11]
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3710      	adds	r7, #16
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}

08005506 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005506:	b580      	push	{r7, lr}
 8005508:	b08a      	sub	sp, #40	@ 0x28
 800550a:	af02      	add	r7, sp, #8
 800550c:	6078      	str	r0, [r7, #4]
 800550e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800551a:	683a      	ldr	r2, [r7, #0]
 800551c:	4613      	mov	r3, r2
 800551e:	00db      	lsls	r3, r3, #3
 8005520:	4413      	add	r3, r2
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	3310      	adds	r3, #16
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	4413      	add	r3, r2
 800552a:	3304      	adds	r3, #4
 800552c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	695a      	ldr	r2, [r3, #20]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	429a      	cmp	r2, r3
 8005538:	d901      	bls.n	800553e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e06b      	b.n	8005616 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	691a      	ldr	r2, [r3, #16]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	695b      	ldr	r3, [r3, #20]
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	69fa      	ldr	r2, [r7, #28]
 8005550:	429a      	cmp	r2, r3
 8005552:	d902      	bls.n	800555a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	3303      	adds	r3, #3
 800555e:	089b      	lsrs	r3, r3, #2
 8005560:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005562:	e02a      	b.n	80055ba <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	691a      	ldr	r2, [r3, #16]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	695b      	ldr	r3, [r3, #20]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	69fa      	ldr	r2, [r7, #28]
 8005576:	429a      	cmp	r2, r3
 8005578:	d902      	bls.n	8005580 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	3303      	adds	r3, #3
 8005584:	089b      	lsrs	r3, r3, #2
 8005586:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	68d9      	ldr	r1, [r3, #12]
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	b2da      	uxtb	r2, r3
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005598:	9300      	str	r3, [sp, #0]
 800559a:	4603      	mov	r3, r0
 800559c:	6978      	ldr	r0, [r7, #20]
 800559e:	f003 fb43 	bl	8008c28 <USB_WritePacket>

    ep->xfer_buff  += len;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	68da      	ldr	r2, [r3, #12]
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	441a      	add	r2, r3
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	695a      	ldr	r2, [r3, #20]
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	441a      	add	r2, r3
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	015a      	lsls	r2, r3, #5
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	4413      	add	r3, r2
 80055c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055c6:	699b      	ldr	r3, [r3, #24]
 80055c8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80055ca:	69ba      	ldr	r2, [r7, #24]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d809      	bhi.n	80055e4 <PCD_WriteEmptyTxFifo+0xde>
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	695a      	ldr	r2, [r3, #20]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80055d8:	429a      	cmp	r2, r3
 80055da:	d203      	bcs.n	80055e4 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d1bf      	bne.n	8005564 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	691a      	ldr	r2, [r3, #16]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	695b      	ldr	r3, [r3, #20]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d811      	bhi.n	8005614 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	f003 030f 	and.w	r3, r3, #15
 80055f6:	2201      	movs	r2, #1
 80055f8:	fa02 f303 	lsl.w	r3, r2, r3
 80055fc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005604:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	43db      	mvns	r3, r3
 800560a:	6939      	ldr	r1, [r7, #16]
 800560c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005610:	4013      	ands	r3, r2
 8005612:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3720      	adds	r7, #32
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
	...

08005620 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b088      	sub	sp, #32
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	333c      	adds	r3, #60	@ 0x3c
 8005638:	3304      	adds	r3, #4
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	015a      	lsls	r2, r3, #5
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	4413      	add	r3, r2
 8005646:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	799b      	ldrb	r3, [r3, #6]
 8005652:	2b01      	cmp	r3, #1
 8005654:	d17b      	bne.n	800574e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	f003 0308 	and.w	r3, r3, #8
 800565c:	2b00      	cmp	r3, #0
 800565e:	d015      	beq.n	800568c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	4a61      	ldr	r2, [pc, #388]	@ (80057e8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005664:	4293      	cmp	r3, r2
 8005666:	f240 80b9 	bls.w	80057dc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005670:	2b00      	cmp	r3, #0
 8005672:	f000 80b3 	beq.w	80057dc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	015a      	lsls	r2, r3, #5
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	4413      	add	r3, r2
 800567e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005682:	461a      	mov	r2, r3
 8005684:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005688:	6093      	str	r3, [r2, #8]
 800568a:	e0a7      	b.n	80057dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	f003 0320 	and.w	r3, r3, #32
 8005692:	2b00      	cmp	r3, #0
 8005694:	d009      	beq.n	80056aa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	015a      	lsls	r2, r3, #5
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	4413      	add	r3, r2
 800569e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056a2:	461a      	mov	r2, r3
 80056a4:	2320      	movs	r3, #32
 80056a6:	6093      	str	r3, [r2, #8]
 80056a8:	e098      	b.n	80057dc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	f040 8093 	bne.w	80057dc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	4a4b      	ldr	r2, [pc, #300]	@ (80057e8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d90f      	bls.n	80056de <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d00a      	beq.n	80056de <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	015a      	lsls	r2, r3, #5
 80056cc:	69bb      	ldr	r3, [r7, #24]
 80056ce:	4413      	add	r3, r2
 80056d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056d4:	461a      	mov	r2, r3
 80056d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056da:	6093      	str	r3, [r2, #8]
 80056dc:	e07e      	b.n	80057dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80056de:	683a      	ldr	r2, [r7, #0]
 80056e0:	4613      	mov	r3, r2
 80056e2:	00db      	lsls	r3, r3, #3
 80056e4:	4413      	add	r3, r2
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	4413      	add	r3, r2
 80056f0:	3304      	adds	r3, #4
 80056f2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6a1a      	ldr	r2, [r3, #32]
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	0159      	lsls	r1, r3, #5
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	440b      	add	r3, r1
 8005700:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800570a:	1ad2      	subs	r2, r2, r3
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d114      	bne.n	8005740 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d109      	bne.n	8005732 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6818      	ldr	r0, [r3, #0]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005728:	461a      	mov	r2, r3
 800572a:	2101      	movs	r1, #1
 800572c:	f003 fd12 	bl	8009154 <USB_EP0_OutStart>
 8005730:	e006      	b.n	8005740 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	68da      	ldr	r2, [r3, #12]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	695b      	ldr	r3, [r3, #20]
 800573a:	441a      	add	r2, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	b2db      	uxtb	r3, r3
 8005744:	4619      	mov	r1, r3
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f006 fd06 	bl	800c158 <HAL_PCD_DataOutStageCallback>
 800574c:	e046      	b.n	80057dc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	4a26      	ldr	r2, [pc, #152]	@ (80057ec <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d124      	bne.n	80057a0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800575c:	2b00      	cmp	r3, #0
 800575e:	d00a      	beq.n	8005776 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	015a      	lsls	r2, r3, #5
 8005764:	69bb      	ldr	r3, [r7, #24]
 8005766:	4413      	add	r3, r2
 8005768:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800576c:	461a      	mov	r2, r3
 800576e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005772:	6093      	str	r3, [r2, #8]
 8005774:	e032      	b.n	80057dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	f003 0320 	and.w	r3, r3, #32
 800577c:	2b00      	cmp	r3, #0
 800577e:	d008      	beq.n	8005792 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	015a      	lsls	r2, r3, #5
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	4413      	add	r3, r2
 8005788:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800578c:	461a      	mov	r2, r3
 800578e:	2320      	movs	r3, #32
 8005790:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	b2db      	uxtb	r3, r3
 8005796:	4619      	mov	r1, r3
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f006 fcdd 	bl	800c158 <HAL_PCD_DataOutStageCallback>
 800579e:	e01d      	b.n	80057dc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d114      	bne.n	80057d0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80057a6:	6879      	ldr	r1, [r7, #4]
 80057a8:	683a      	ldr	r2, [r7, #0]
 80057aa:	4613      	mov	r3, r2
 80057ac:	00db      	lsls	r3, r3, #3
 80057ae:	4413      	add	r3, r2
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	440b      	add	r3, r1
 80057b4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d108      	bne.n	80057d0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6818      	ldr	r0, [r3, #0]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80057c8:	461a      	mov	r2, r3
 80057ca:	2100      	movs	r1, #0
 80057cc:	f003 fcc2 	bl	8009154 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	4619      	mov	r1, r3
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f006 fcbe 	bl	800c158 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3720      	adds	r7, #32
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	4f54300a 	.word	0x4f54300a
 80057ec:	4f54310a 	.word	0x4f54310a

080057f0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b086      	sub	sp, #24
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	333c      	adds	r3, #60	@ 0x3c
 8005808:	3304      	adds	r3, #4
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	015a      	lsls	r2, r3, #5
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	4413      	add	r3, r2
 8005816:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	4a15      	ldr	r2, [pc, #84]	@ (8005878 <PCD_EP_OutSetupPacket_int+0x88>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d90e      	bls.n	8005844 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800582c:	2b00      	cmp	r3, #0
 800582e:	d009      	beq.n	8005844 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	015a      	lsls	r2, r3, #5
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	4413      	add	r3, r2
 8005838:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800583c:	461a      	mov	r2, r3
 800583e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005842:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f006 fc75 	bl	800c134 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	4a0a      	ldr	r2, [pc, #40]	@ (8005878 <PCD_EP_OutSetupPacket_int+0x88>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d90c      	bls.n	800586c <PCD_EP_OutSetupPacket_int+0x7c>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	799b      	ldrb	r3, [r3, #6]
 8005856:	2b01      	cmp	r3, #1
 8005858:	d108      	bne.n	800586c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6818      	ldr	r0, [r3, #0]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005864:	461a      	mov	r2, r3
 8005866:	2101      	movs	r1, #1
 8005868:	f003 fc74 	bl	8009154 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3718      	adds	r7, #24
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	4f54300a 	.word	0x4f54300a

0800587c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	460b      	mov	r3, r1
 8005886:	70fb      	strb	r3, [r7, #3]
 8005888:	4613      	mov	r3, r2
 800588a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005892:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005894:	78fb      	ldrb	r3, [r7, #3]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d107      	bne.n	80058aa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800589a:	883b      	ldrh	r3, [r7, #0]
 800589c:	0419      	lsls	r1, r3, #16
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68ba      	ldr	r2, [r7, #8]
 80058a4:	430a      	orrs	r2, r1
 80058a6:	629a      	str	r2, [r3, #40]	@ 0x28
 80058a8:	e028      	b.n	80058fc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058b0:	0c1b      	lsrs	r3, r3, #16
 80058b2:	68ba      	ldr	r2, [r7, #8]
 80058b4:	4413      	add	r3, r2
 80058b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80058b8:	2300      	movs	r3, #0
 80058ba:	73fb      	strb	r3, [r7, #15]
 80058bc:	e00d      	b.n	80058da <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	7bfb      	ldrb	r3, [r7, #15]
 80058c4:	3340      	adds	r3, #64	@ 0x40
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	4413      	add	r3, r2
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	0c1b      	lsrs	r3, r3, #16
 80058ce:	68ba      	ldr	r2, [r7, #8]
 80058d0:	4413      	add	r3, r2
 80058d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80058d4:	7bfb      	ldrb	r3, [r7, #15]
 80058d6:	3301      	adds	r3, #1
 80058d8:	73fb      	strb	r3, [r7, #15]
 80058da:	7bfa      	ldrb	r2, [r7, #15]
 80058dc:	78fb      	ldrb	r3, [r7, #3]
 80058de:	3b01      	subs	r3, #1
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d3ec      	bcc.n	80058be <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80058e4:	883b      	ldrh	r3, [r7, #0]
 80058e6:	0418      	lsls	r0, r3, #16
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6819      	ldr	r1, [r3, #0]
 80058ec:	78fb      	ldrb	r3, [r7, #3]
 80058ee:	3b01      	subs	r3, #1
 80058f0:	68ba      	ldr	r2, [r7, #8]
 80058f2:	4302      	orrs	r2, r0
 80058f4:	3340      	adds	r3, #64	@ 0x40
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	440b      	add	r3, r1
 80058fa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3714      	adds	r7, #20
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr

0800590a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800590a:	b480      	push	{r7}
 800590c:	b083      	sub	sp, #12
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
 8005912:	460b      	mov	r3, r1
 8005914:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	887a      	ldrh	r2, [r7, #2]
 800591c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800592c:	b480      	push	{r7}
 800592e:	b085      	sub	sp, #20
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2201      	movs	r2, #1
 800593e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	699b      	ldr	r3, [r3, #24]
 800594e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800595a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800595e:	f043 0303 	orr.w	r3, r3, #3
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8005966:	2300      	movs	r3, #0
}
 8005968:	4618      	mov	r0, r3
 800596a:	3714      	adds	r7, #20
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	460b      	mov	r3, r1
 800597e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005980:	bf00      	nop
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d101      	bne.n	80059a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e0cc      	b.n	8005b3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80059a0:	4b68      	ldr	r3, [pc, #416]	@ (8005b44 <HAL_RCC_ClockConfig+0x1b8>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 030f 	and.w	r3, r3, #15
 80059a8:	683a      	ldr	r2, [r7, #0]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d90c      	bls.n	80059c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059ae:	4b65      	ldr	r3, [pc, #404]	@ (8005b44 <HAL_RCC_ClockConfig+0x1b8>)
 80059b0:	683a      	ldr	r2, [r7, #0]
 80059b2:	b2d2      	uxtb	r2, r2
 80059b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059b6:	4b63      	ldr	r3, [pc, #396]	@ (8005b44 <HAL_RCC_ClockConfig+0x1b8>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 030f 	and.w	r3, r3, #15
 80059be:	683a      	ldr	r2, [r7, #0]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d001      	beq.n	80059c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e0b8      	b.n	8005b3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 0302 	and.w	r3, r3, #2
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d020      	beq.n	8005a16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 0304 	and.w	r3, r3, #4
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d005      	beq.n	80059ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059e0:	4b59      	ldr	r3, [pc, #356]	@ (8005b48 <HAL_RCC_ClockConfig+0x1bc>)
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	4a58      	ldr	r2, [pc, #352]	@ (8005b48 <HAL_RCC_ClockConfig+0x1bc>)
 80059e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80059ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0308 	and.w	r3, r3, #8
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d005      	beq.n	8005a04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059f8:	4b53      	ldr	r3, [pc, #332]	@ (8005b48 <HAL_RCC_ClockConfig+0x1bc>)
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	4a52      	ldr	r2, [pc, #328]	@ (8005b48 <HAL_RCC_ClockConfig+0x1bc>)
 80059fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005a02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a04:	4b50      	ldr	r3, [pc, #320]	@ (8005b48 <HAL_RCC_ClockConfig+0x1bc>)
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	494d      	ldr	r1, [pc, #308]	@ (8005b48 <HAL_RCC_ClockConfig+0x1bc>)
 8005a12:	4313      	orrs	r3, r2
 8005a14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0301 	and.w	r3, r3, #1
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d044      	beq.n	8005aac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d107      	bne.n	8005a3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a2a:	4b47      	ldr	r3, [pc, #284]	@ (8005b48 <HAL_RCC_ClockConfig+0x1bc>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d119      	bne.n	8005a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e07f      	b.n	8005b3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	2b02      	cmp	r3, #2
 8005a40:	d003      	beq.n	8005a4a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a46:	2b03      	cmp	r3, #3
 8005a48:	d107      	bne.n	8005a5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a4a:	4b3f      	ldr	r3, [pc, #252]	@ (8005b48 <HAL_RCC_ClockConfig+0x1bc>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d109      	bne.n	8005a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e06f      	b.n	8005b3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a5a:	4b3b      	ldr	r3, [pc, #236]	@ (8005b48 <HAL_RCC_ClockConfig+0x1bc>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 0302 	and.w	r3, r3, #2
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d101      	bne.n	8005a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e067      	b.n	8005b3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a6a:	4b37      	ldr	r3, [pc, #220]	@ (8005b48 <HAL_RCC_ClockConfig+0x1bc>)
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	f023 0203 	bic.w	r2, r3, #3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	4934      	ldr	r1, [pc, #208]	@ (8005b48 <HAL_RCC_ClockConfig+0x1bc>)
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a7c:	f7fc ff7a 	bl	8002974 <HAL_GetTick>
 8005a80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a82:	e00a      	b.n	8005a9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a84:	f7fc ff76 	bl	8002974 <HAL_GetTick>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d901      	bls.n	8005a9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	e04f      	b.n	8005b3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a9a:	4b2b      	ldr	r3, [pc, #172]	@ (8005b48 <HAL_RCC_ClockConfig+0x1bc>)
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f003 020c 	and.w	r2, r3, #12
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d1eb      	bne.n	8005a84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005aac:	4b25      	ldr	r3, [pc, #148]	@ (8005b44 <HAL_RCC_ClockConfig+0x1b8>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 030f 	and.w	r3, r3, #15
 8005ab4:	683a      	ldr	r2, [r7, #0]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d20c      	bcs.n	8005ad4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aba:	4b22      	ldr	r3, [pc, #136]	@ (8005b44 <HAL_RCC_ClockConfig+0x1b8>)
 8005abc:	683a      	ldr	r2, [r7, #0]
 8005abe:	b2d2      	uxtb	r2, r2
 8005ac0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ac2:	4b20      	ldr	r3, [pc, #128]	@ (8005b44 <HAL_RCC_ClockConfig+0x1b8>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 030f 	and.w	r3, r3, #15
 8005aca:	683a      	ldr	r2, [r7, #0]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d001      	beq.n	8005ad4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e032      	b.n	8005b3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 0304 	and.w	r3, r3, #4
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d008      	beq.n	8005af2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ae0:	4b19      	ldr	r3, [pc, #100]	@ (8005b48 <HAL_RCC_ClockConfig+0x1bc>)
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	4916      	ldr	r1, [pc, #88]	@ (8005b48 <HAL_RCC_ClockConfig+0x1bc>)
 8005aee:	4313      	orrs	r3, r2
 8005af0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 0308 	and.w	r3, r3, #8
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d009      	beq.n	8005b12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005afe:	4b12      	ldr	r3, [pc, #72]	@ (8005b48 <HAL_RCC_ClockConfig+0x1bc>)
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	00db      	lsls	r3, r3, #3
 8005b0c:	490e      	ldr	r1, [pc, #56]	@ (8005b48 <HAL_RCC_ClockConfig+0x1bc>)
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005b12:	f000 fb9d 	bl	8006250 <HAL_RCC_GetSysClockFreq>
 8005b16:	4602      	mov	r2, r0
 8005b18:	4b0b      	ldr	r3, [pc, #44]	@ (8005b48 <HAL_RCC_ClockConfig+0x1bc>)
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	091b      	lsrs	r3, r3, #4
 8005b1e:	f003 030f 	and.w	r3, r3, #15
 8005b22:	490a      	ldr	r1, [pc, #40]	@ (8005b4c <HAL_RCC_ClockConfig+0x1c0>)
 8005b24:	5ccb      	ldrb	r3, [r1, r3]
 8005b26:	fa22 f303 	lsr.w	r3, r2, r3
 8005b2a:	4a09      	ldr	r2, [pc, #36]	@ (8005b50 <HAL_RCC_ClockConfig+0x1c4>)
 8005b2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005b2e:	4b09      	ldr	r3, [pc, #36]	@ (8005b54 <HAL_RCC_ClockConfig+0x1c8>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4618      	mov	r0, r3
 8005b34:	f7fc fae8 	bl	8002108 <HAL_InitTick>

  return HAL_OK;
 8005b38:	2300      	movs	r3, #0
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3710      	adds	r7, #16
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	40023c00 	.word	0x40023c00
 8005b48:	40023800 	.word	0x40023800
 8005b4c:	080104c0 	.word	0x080104c0
 8005b50:	20000004 	.word	0x20000004
 8005b54:	20000008 	.word	0x20000008

08005b58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b5c:	4b03      	ldr	r3, [pc, #12]	@ (8005b6c <HAL_RCC_GetHCLKFreq+0x14>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr
 8005b6a:	bf00      	nop
 8005b6c:	20000004 	.word	0x20000004

08005b70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005b74:	f7ff fff0 	bl	8005b58 <HAL_RCC_GetHCLKFreq>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	4b05      	ldr	r3, [pc, #20]	@ (8005b90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	0a9b      	lsrs	r3, r3, #10
 8005b80:	f003 0307 	and.w	r3, r3, #7
 8005b84:	4903      	ldr	r1, [pc, #12]	@ (8005b94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b86:	5ccb      	ldrb	r3, [r1, r3]
 8005b88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	40023800 	.word	0x40023800
 8005b94:	080104d0 	.word	0x080104d0

08005b98 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	220f      	movs	r2, #15
 8005ba6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005ba8:	4b12      	ldr	r3, [pc, #72]	@ (8005bf4 <HAL_RCC_GetClockConfig+0x5c>)
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f003 0203 	and.w	r2, r3, #3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005bb4:	4b0f      	ldr	r3, [pc, #60]	@ (8005bf4 <HAL_RCC_GetClockConfig+0x5c>)
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8005bf4 <HAL_RCC_GetClockConfig+0x5c>)
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005bcc:	4b09      	ldr	r3, [pc, #36]	@ (8005bf4 <HAL_RCC_GetClockConfig+0x5c>)
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	08db      	lsrs	r3, r3, #3
 8005bd2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005bda:	4b07      	ldr	r3, [pc, #28]	@ (8005bf8 <HAL_RCC_GetClockConfig+0x60>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 020f 	and.w	r2, r3, #15
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	601a      	str	r2, [r3, #0]
}
 8005be6:	bf00      	nop
 8005be8:	370c      	adds	r7, #12
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
 8005bf2:	bf00      	nop
 8005bf4:	40023800 	.word	0x40023800
 8005bf8:	40023c00 	.word	0x40023c00

08005bfc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b08c      	sub	sp, #48	@ 0x30
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c04:	2300      	movs	r3, #0
 8005c06:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8005c10:	2300      	movs	r3, #0
 8005c12:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8005c14:	2300      	movs	r3, #0
 8005c16:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8005c20:	2300      	movs	r3, #0
 8005c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8005c24:	2300      	movs	r3, #0
 8005c26:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0301 	and.w	r3, r3, #1
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d010      	beq.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8005c34:	4b6f      	ldr	r3, [pc, #444]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005c36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c3a:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c42:	496c      	ldr	r1, [pc, #432]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005c44:	4313      	orrs	r3, r2
 8005c46:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d101      	bne.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8005c52:	2301      	movs	r3, #1
 8005c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 0302 	and.w	r3, r3, #2
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d010      	beq.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8005c62:	4b64      	ldr	r3, [pc, #400]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005c64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c68:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c70:	4960      	ldr	r1, [pc, #384]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005c72:	4313      	orrs	r3, r2
 8005c74:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d101      	bne.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8005c80:	2301      	movs	r3, #1
 8005c82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0304 	and.w	r3, r3, #4
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d017      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c90:	4b58      	ldr	r3, [pc, #352]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005c92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c96:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c9e:	4955      	ldr	r1, [pc, #340]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005caa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005cae:	d101      	bne.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d101      	bne.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0308 	and.w	r3, r3, #8
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d017      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005ccc:	4b49      	ldr	r3, [pc, #292]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005cce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005cd2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cda:	4946      	ldr	r1, [pc, #280]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ce6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005cea:	d101      	bne.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8005cec:	2301      	movs	r3, #1
 8005cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d101      	bne.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 0320 	and.w	r3, r3, #32
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	f000 808a 	beq.w	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	60bb      	str	r3, [r7, #8]
 8005d0e:	4b39      	ldr	r3, [pc, #228]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d12:	4a38      	ldr	r2, [pc, #224]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005d14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d18:	6413      	str	r3, [r2, #64]	@ 0x40
 8005d1a:	4b36      	ldr	r3, [pc, #216]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d22:	60bb      	str	r3, [r7, #8]
 8005d24:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005d26:	4b34      	ldr	r3, [pc, #208]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a33      	ldr	r2, [pc, #204]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005d2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d30:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d32:	f7fc fe1f 	bl	8002974 <HAL_GetTick>
 8005d36:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005d38:	e008      	b.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d3a:	f7fc fe1b 	bl	8002974 <HAL_GetTick>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	d901      	bls.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	e278      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005d4c:	4b2a      	ldr	r3, [pc, #168]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d0f0      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d58:	4b26      	ldr	r3, [pc, #152]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005d5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d60:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d62:	6a3b      	ldr	r3, [r7, #32]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d02f      	beq.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d70:	6a3a      	ldr	r2, [r7, #32]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d028      	beq.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d76:	4b1f      	ldr	r3, [pc, #124]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d7e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d80:	4b1e      	ldr	r3, [pc, #120]	@ (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8005d82:	2201      	movs	r2, #1
 8005d84:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d86:	4b1d      	ldr	r3, [pc, #116]	@ (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8005d88:	2200      	movs	r2, #0
 8005d8a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005d8c:	4a19      	ldr	r2, [pc, #100]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005d8e:	6a3b      	ldr	r3, [r7, #32]
 8005d90:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005d92:	4b18      	ldr	r3, [pc, #96]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005d94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d96:	f003 0301 	and.w	r3, r3, #1
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d114      	bne.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005d9e:	f7fc fde9 	bl	8002974 <HAL_GetTick>
 8005da2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005da4:	e00a      	b.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005da6:	f7fc fde5 	bl	8002974 <HAL_GetTick>
 8005daa:	4602      	mov	r2, r0
 8005dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d901      	bls.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8005db8:	2303      	movs	r3, #3
 8005dba:	e240      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dbc:	4b0d      	ldr	r3, [pc, #52]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005dbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dc0:	f003 0302 	and.w	r3, r3, #2
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d0ee      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dcc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dd0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005dd4:	d114      	bne.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8005dd6:	4b07      	ldr	r3, [pc, #28]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005de2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005de6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005dea:	4902      	ldr	r1, [pc, #8]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005dec:	4313      	orrs	r3, r2
 8005dee:	608b      	str	r3, [r1, #8]
 8005df0:	e00c      	b.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8005df2:	bf00      	nop
 8005df4:	40023800 	.word	0x40023800
 8005df8:	40007000 	.word	0x40007000
 8005dfc:	42470e40 	.word	0x42470e40
 8005e00:	4b4a      	ldr	r3, [pc, #296]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	4a49      	ldr	r2, [pc, #292]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005e06:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005e0a:	6093      	str	r3, [r2, #8]
 8005e0c:	4b47      	ldr	r3, [pc, #284]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005e0e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e18:	4944      	ldr	r1, [pc, #272]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 0310 	and.w	r3, r3, #16
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d004      	beq.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8005e30:	4b3f      	ldr	r3, [pc, #252]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8005e32:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d00a      	beq.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8005e40:	4b3a      	ldr	r3, [pc, #232]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005e42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e46:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e4e:	4937      	ldr	r1, [pc, #220]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005e50:	4313      	orrs	r3, r2
 8005e52:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00a      	beq.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005e62:	4b32      	ldr	r3, [pc, #200]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005e64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e68:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e70:	492e      	ldr	r1, [pc, #184]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005e72:	4313      	orrs	r3, r2
 8005e74:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d011      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005e84:	4b29      	ldr	r3, [pc, #164]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005e86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e8a:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e92:	4926      	ldr	r1, [pc, #152]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005e94:	4313      	orrs	r3, r2
 8005e96:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e9e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ea2:	d101      	bne.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d00a      	beq.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8005eb4:	4b1d      	ldr	r3, [pc, #116]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005eb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005eba:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ec2:	491a      	ldr	r1, [pc, #104]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d011      	beq.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8005ed6:	4b15      	ldr	r3, [pc, #84]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005ed8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005edc:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ee4:	4911      	ldr	r1, [pc, #68]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ef0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ef4:	d101      	bne.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d005      	beq.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f08:	f040 80ff 	bne.w	800610a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005f0c:	4b09      	ldr	r3, [pc, #36]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f0e:	2200      	movs	r2, #0
 8005f10:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005f12:	f7fc fd2f 	bl	8002974 <HAL_GetTick>
 8005f16:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005f18:	e00e      	b.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005f1a:	f7fc fd2b 	bl	8002974 <HAL_GetTick>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f22:	1ad3      	subs	r3, r2, r3
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d907      	bls.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f28:	2303      	movs	r3, #3
 8005f2a:	e188      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005f2c:	40023800 	.word	0x40023800
 8005f30:	424711e0 	.word	0x424711e0
 8005f34:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005f38:	4b7e      	ldr	r3, [pc, #504]	@ (8006134 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d1ea      	bne.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f003 0301 	and.w	r3, r3, #1
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d003      	beq.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d009      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d028      	beq.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d124      	bne.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005f6c:	4b71      	ldr	r3, [pc, #452]	@ (8006134 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005f6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f72:	0c1b      	lsrs	r3, r3, #16
 8005f74:	f003 0303 	and.w	r3, r3, #3
 8005f78:	3301      	adds	r3, #1
 8005f7a:	005b      	lsls	r3, r3, #1
 8005f7c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005f7e:	4b6d      	ldr	r3, [pc, #436]	@ (8006134 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005f80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f84:	0e1b      	lsrs	r3, r3, #24
 8005f86:	f003 030f 	and.w	r3, r3, #15
 8005f8a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	685a      	ldr	r2, [r3, #4]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	019b      	lsls	r3, r3, #6
 8005f96:	431a      	orrs	r2, r3
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	085b      	lsrs	r3, r3, #1
 8005f9c:	3b01      	subs	r3, #1
 8005f9e:	041b      	lsls	r3, r3, #16
 8005fa0:	431a      	orrs	r2, r3
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	061b      	lsls	r3, r3, #24
 8005fa6:	431a      	orrs	r2, r3
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	695b      	ldr	r3, [r3, #20]
 8005fac:	071b      	lsls	r3, r3, #28
 8005fae:	4961      	ldr	r1, [pc, #388]	@ (8006134 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 0304 	and.w	r3, r3, #4
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d004      	beq.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005fca:	d00a      	beq.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d035      	beq.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fdc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005fe0:	d130      	bne.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005fe2:	4b54      	ldr	r3, [pc, #336]	@ (8006134 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005fe4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005fe8:	0c1b      	lsrs	r3, r3, #16
 8005fea:	f003 0303 	and.w	r3, r3, #3
 8005fee:	3301      	adds	r3, #1
 8005ff0:	005b      	lsls	r3, r3, #1
 8005ff2:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005ff4:	4b4f      	ldr	r3, [pc, #316]	@ (8006134 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005ff6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ffa:	0f1b      	lsrs	r3, r3, #28
 8005ffc:	f003 0307 	and.w	r3, r3, #7
 8006000:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	685a      	ldr	r2, [r3, #4]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	019b      	lsls	r3, r3, #6
 800600c:	431a      	orrs	r2, r3
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	085b      	lsrs	r3, r3, #1
 8006012:	3b01      	subs	r3, #1
 8006014:	041b      	lsls	r3, r3, #16
 8006016:	431a      	orrs	r2, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	061b      	lsls	r3, r3, #24
 800601e:	431a      	orrs	r2, r3
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	071b      	lsls	r3, r3, #28
 8006024:	4943      	ldr	r1, [pc, #268]	@ (8006134 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006026:	4313      	orrs	r3, r2
 8006028:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800602c:	4b41      	ldr	r3, [pc, #260]	@ (8006134 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800602e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006032:	f023 021f 	bic.w	r2, r3, #31
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800603a:	3b01      	subs	r3, #1
 800603c:	493d      	ldr	r1, [pc, #244]	@ (8006134 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800603e:	4313      	orrs	r3, r2
 8006040:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800604c:	2b00      	cmp	r3, #0
 800604e:	d029      	beq.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006054:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006058:	d124      	bne.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800605a:	4b36      	ldr	r3, [pc, #216]	@ (8006134 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800605c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006060:	0c1b      	lsrs	r3, r3, #16
 8006062:	f003 0303 	and.w	r3, r3, #3
 8006066:	3301      	adds	r3, #1
 8006068:	005b      	lsls	r3, r3, #1
 800606a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800606c:	4b31      	ldr	r3, [pc, #196]	@ (8006134 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800606e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006072:	0f1b      	lsrs	r3, r3, #28
 8006074:	f003 0307 	and.w	r3, r3, #7
 8006078:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	685a      	ldr	r2, [r3, #4]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	019b      	lsls	r3, r3, #6
 8006084:	431a      	orrs	r2, r3
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	085b      	lsrs	r3, r3, #1
 800608c:	3b01      	subs	r3, #1
 800608e:	041b      	lsls	r3, r3, #16
 8006090:	431a      	orrs	r2, r3
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	061b      	lsls	r3, r3, #24
 8006096:	431a      	orrs	r2, r3
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	071b      	lsls	r3, r3, #28
 800609c:	4925      	ldr	r1, [pc, #148]	@ (8006134 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800609e:	4313      	orrs	r3, r2
 80060a0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d016      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	685a      	ldr	r2, [r3, #4]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	019b      	lsls	r3, r3, #6
 80060ba:	431a      	orrs	r2, r3
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	085b      	lsrs	r3, r3, #1
 80060c2:	3b01      	subs	r3, #1
 80060c4:	041b      	lsls	r3, r3, #16
 80060c6:	431a      	orrs	r2, r3
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	061b      	lsls	r3, r3, #24
 80060ce:	431a      	orrs	r2, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	695b      	ldr	r3, [r3, #20]
 80060d4:	071b      	lsls	r3, r3, #28
 80060d6:	4917      	ldr	r1, [pc, #92]	@ (8006134 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80060d8:	4313      	orrs	r3, r2
 80060da:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80060de:	4b16      	ldr	r3, [pc, #88]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80060e0:	2201      	movs	r2, #1
 80060e2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80060e4:	f7fc fc46 	bl	8002974 <HAL_GetTick>
 80060e8:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80060ea:	e008      	b.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80060ec:	f7fc fc42 	bl	8002974 <HAL_GetTick>
 80060f0:	4602      	mov	r2, r0
 80060f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	2b02      	cmp	r3, #2
 80060f8:	d901      	bls.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80060fa:	2303      	movs	r3, #3
 80060fc:	e09f      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80060fe:	4b0d      	ldr	r3, [pc, #52]	@ (8006134 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006106:	2b00      	cmp	r3, #0
 8006108:	d0f0      	beq.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 800610a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800610c:	2b01      	cmp	r3, #1
 800610e:	f040 8095 	bne.w	800623c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006112:	4b0a      	ldr	r3, [pc, #40]	@ (800613c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8006114:	2200      	movs	r2, #0
 8006116:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006118:	f7fc fc2c 	bl	8002974 <HAL_GetTick>
 800611c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800611e:	e00f      	b.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006120:	f7fc fc28 	bl	8002974 <HAL_GetTick>
 8006124:	4602      	mov	r2, r0
 8006126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006128:	1ad3      	subs	r3, r2, r3
 800612a:	2b02      	cmp	r3, #2
 800612c:	d908      	bls.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800612e:	2303      	movs	r3, #3
 8006130:	e085      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8006132:	bf00      	nop
 8006134:	40023800 	.word	0x40023800
 8006138:	42470068 	.word	0x42470068
 800613c:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006140:	4b41      	ldr	r3, [pc, #260]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006148:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800614c:	d0e8      	beq.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 0304 	and.w	r3, r3, #4
 8006156:	2b00      	cmp	r3, #0
 8006158:	d003      	beq.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800615e:	2b00      	cmp	r3, #0
 8006160:	d009      	beq.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800616a:	2b00      	cmp	r3, #0
 800616c:	d02b      	beq.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006172:	2b00      	cmp	r3, #0
 8006174:	d127      	bne.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8006176:	4b34      	ldr	r3, [pc, #208]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006178:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800617c:	0c1b      	lsrs	r3, r3, #16
 800617e:	f003 0303 	and.w	r3, r3, #3
 8006182:	3301      	adds	r3, #1
 8006184:	005b      	lsls	r3, r3, #1
 8006186:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	699a      	ldr	r2, [r3, #24]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	69db      	ldr	r3, [r3, #28]
 8006190:	019b      	lsls	r3, r3, #6
 8006192:	431a      	orrs	r2, r3
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	085b      	lsrs	r3, r3, #1
 8006198:	3b01      	subs	r3, #1
 800619a:	041b      	lsls	r3, r3, #16
 800619c:	431a      	orrs	r2, r3
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061a2:	061b      	lsls	r3, r3, #24
 80061a4:	4928      	ldr	r1, [pc, #160]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80061a6:	4313      	orrs	r3, r2
 80061a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80061ac:	4b26      	ldr	r3, [pc, #152]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80061ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80061b2:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ba:	3b01      	subs	r3, #1
 80061bc:	021b      	lsls	r3, r3, #8
 80061be:	4922      	ldr	r1, [pc, #136]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80061c0:	4313      	orrs	r3, r2
 80061c2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d01d      	beq.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80061da:	d118      	bne.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80061dc:	4b1a      	ldr	r3, [pc, #104]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80061de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061e2:	0e1b      	lsrs	r3, r3, #24
 80061e4:	f003 030f 	and.w	r3, r3, #15
 80061e8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	699a      	ldr	r2, [r3, #24]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	69db      	ldr	r3, [r3, #28]
 80061f2:	019b      	lsls	r3, r3, #6
 80061f4:	431a      	orrs	r2, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6a1b      	ldr	r3, [r3, #32]
 80061fa:	085b      	lsrs	r3, r3, #1
 80061fc:	3b01      	subs	r3, #1
 80061fe:	041b      	lsls	r3, r3, #16
 8006200:	431a      	orrs	r2, r3
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	061b      	lsls	r3, r3, #24
 8006206:	4910      	ldr	r1, [pc, #64]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006208:	4313      	orrs	r3, r2
 800620a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800620e:	4b0f      	ldr	r3, [pc, #60]	@ (800624c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8006210:	2201      	movs	r2, #1
 8006212:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006214:	f7fc fbae 	bl	8002974 <HAL_GetTick>
 8006218:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800621a:	e008      	b.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800621c:	f7fc fbaa 	bl	8002974 <HAL_GetTick>
 8006220:	4602      	mov	r2, r0
 8006222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006224:	1ad3      	subs	r3, r2, r3
 8006226:	2b02      	cmp	r3, #2
 8006228:	d901      	bls.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e007      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800622e:	4b06      	ldr	r3, [pc, #24]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006236:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800623a:	d1ef      	bne.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	3730      	adds	r7, #48	@ 0x30
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	40023800 	.word	0x40023800
 800624c:	42470070 	.word	0x42470070

08006250 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006250:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006254:	b0ae      	sub	sp, #184	@ 0xb8
 8006256:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006258:	2300      	movs	r3, #0
 800625a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800625e:	2300      	movs	r3, #0
 8006260:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8006264:	2300      	movs	r3, #0
 8006266:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800626a:	2300      	movs	r3, #0
 800626c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8006270:	2300      	movs	r3, #0
 8006272:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006276:	4bcb      	ldr	r3, [pc, #812]	@ (80065a4 <HAL_RCC_GetSysClockFreq+0x354>)
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	f003 030c 	and.w	r3, r3, #12
 800627e:	2b0c      	cmp	r3, #12
 8006280:	f200 8206 	bhi.w	8006690 <HAL_RCC_GetSysClockFreq+0x440>
 8006284:	a201      	add	r2, pc, #4	@ (adr r2, 800628c <HAL_RCC_GetSysClockFreq+0x3c>)
 8006286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800628a:	bf00      	nop
 800628c:	080062c1 	.word	0x080062c1
 8006290:	08006691 	.word	0x08006691
 8006294:	08006691 	.word	0x08006691
 8006298:	08006691 	.word	0x08006691
 800629c:	080062c9 	.word	0x080062c9
 80062a0:	08006691 	.word	0x08006691
 80062a4:	08006691 	.word	0x08006691
 80062a8:	08006691 	.word	0x08006691
 80062ac:	080062d1 	.word	0x080062d1
 80062b0:	08006691 	.word	0x08006691
 80062b4:	08006691 	.word	0x08006691
 80062b8:	08006691 	.word	0x08006691
 80062bc:	080064c1 	.word	0x080064c1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80062c0:	4bb9      	ldr	r3, [pc, #740]	@ (80065a8 <HAL_RCC_GetSysClockFreq+0x358>)
 80062c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80062c6:	e1e7      	b.n	8006698 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80062c8:	4bb8      	ldr	r3, [pc, #736]	@ (80065ac <HAL_RCC_GetSysClockFreq+0x35c>)
 80062ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80062ce:	e1e3      	b.n	8006698 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80062d0:	4bb4      	ldr	r3, [pc, #720]	@ (80065a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80062d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80062dc:	4bb1      	ldr	r3, [pc, #708]	@ (80065a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d071      	beq.n	80063cc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062e8:	4bae      	ldr	r3, [pc, #696]	@ (80065a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	099b      	lsrs	r3, r3, #6
 80062ee:	2200      	movs	r2, #0
 80062f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80062f4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80062f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80062fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006300:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006304:	2300      	movs	r3, #0
 8006306:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800630a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800630e:	4622      	mov	r2, r4
 8006310:	462b      	mov	r3, r5
 8006312:	f04f 0000 	mov.w	r0, #0
 8006316:	f04f 0100 	mov.w	r1, #0
 800631a:	0159      	lsls	r1, r3, #5
 800631c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006320:	0150      	lsls	r0, r2, #5
 8006322:	4602      	mov	r2, r0
 8006324:	460b      	mov	r3, r1
 8006326:	4621      	mov	r1, r4
 8006328:	1a51      	subs	r1, r2, r1
 800632a:	6439      	str	r1, [r7, #64]	@ 0x40
 800632c:	4629      	mov	r1, r5
 800632e:	eb63 0301 	sbc.w	r3, r3, r1
 8006332:	647b      	str	r3, [r7, #68]	@ 0x44
 8006334:	f04f 0200 	mov.w	r2, #0
 8006338:	f04f 0300 	mov.w	r3, #0
 800633c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8006340:	4649      	mov	r1, r9
 8006342:	018b      	lsls	r3, r1, #6
 8006344:	4641      	mov	r1, r8
 8006346:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800634a:	4641      	mov	r1, r8
 800634c:	018a      	lsls	r2, r1, #6
 800634e:	4641      	mov	r1, r8
 8006350:	1a51      	subs	r1, r2, r1
 8006352:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006354:	4649      	mov	r1, r9
 8006356:	eb63 0301 	sbc.w	r3, r3, r1
 800635a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800635c:	f04f 0200 	mov.w	r2, #0
 8006360:	f04f 0300 	mov.w	r3, #0
 8006364:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8006368:	4649      	mov	r1, r9
 800636a:	00cb      	lsls	r3, r1, #3
 800636c:	4641      	mov	r1, r8
 800636e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006372:	4641      	mov	r1, r8
 8006374:	00ca      	lsls	r2, r1, #3
 8006376:	4610      	mov	r0, r2
 8006378:	4619      	mov	r1, r3
 800637a:	4603      	mov	r3, r0
 800637c:	4622      	mov	r2, r4
 800637e:	189b      	adds	r3, r3, r2
 8006380:	633b      	str	r3, [r7, #48]	@ 0x30
 8006382:	462b      	mov	r3, r5
 8006384:	460a      	mov	r2, r1
 8006386:	eb42 0303 	adc.w	r3, r2, r3
 800638a:	637b      	str	r3, [r7, #52]	@ 0x34
 800638c:	f04f 0200 	mov.w	r2, #0
 8006390:	f04f 0300 	mov.w	r3, #0
 8006394:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006398:	4629      	mov	r1, r5
 800639a:	024b      	lsls	r3, r1, #9
 800639c:	4621      	mov	r1, r4
 800639e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80063a2:	4621      	mov	r1, r4
 80063a4:	024a      	lsls	r2, r1, #9
 80063a6:	4610      	mov	r0, r2
 80063a8:	4619      	mov	r1, r3
 80063aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80063ae:	2200      	movs	r2, #0
 80063b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80063b4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80063b8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80063bc:	f7fa fbbe 	bl	8000b3c <__aeabi_uldivmod>
 80063c0:	4602      	mov	r2, r0
 80063c2:	460b      	mov	r3, r1
 80063c4:	4613      	mov	r3, r2
 80063c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80063ca:	e067      	b.n	800649c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063cc:	4b75      	ldr	r3, [pc, #468]	@ (80065a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	099b      	lsrs	r3, r3, #6
 80063d2:	2200      	movs	r2, #0
 80063d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80063d8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80063dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80063e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80063e6:	2300      	movs	r3, #0
 80063e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80063ea:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80063ee:	4622      	mov	r2, r4
 80063f0:	462b      	mov	r3, r5
 80063f2:	f04f 0000 	mov.w	r0, #0
 80063f6:	f04f 0100 	mov.w	r1, #0
 80063fa:	0159      	lsls	r1, r3, #5
 80063fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006400:	0150      	lsls	r0, r2, #5
 8006402:	4602      	mov	r2, r0
 8006404:	460b      	mov	r3, r1
 8006406:	4621      	mov	r1, r4
 8006408:	1a51      	subs	r1, r2, r1
 800640a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800640c:	4629      	mov	r1, r5
 800640e:	eb63 0301 	sbc.w	r3, r3, r1
 8006412:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006414:	f04f 0200 	mov.w	r2, #0
 8006418:	f04f 0300 	mov.w	r3, #0
 800641c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8006420:	4649      	mov	r1, r9
 8006422:	018b      	lsls	r3, r1, #6
 8006424:	4641      	mov	r1, r8
 8006426:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800642a:	4641      	mov	r1, r8
 800642c:	018a      	lsls	r2, r1, #6
 800642e:	4641      	mov	r1, r8
 8006430:	ebb2 0a01 	subs.w	sl, r2, r1
 8006434:	4649      	mov	r1, r9
 8006436:	eb63 0b01 	sbc.w	fp, r3, r1
 800643a:	f04f 0200 	mov.w	r2, #0
 800643e:	f04f 0300 	mov.w	r3, #0
 8006442:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006446:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800644a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800644e:	4692      	mov	sl, r2
 8006450:	469b      	mov	fp, r3
 8006452:	4623      	mov	r3, r4
 8006454:	eb1a 0303 	adds.w	r3, sl, r3
 8006458:	623b      	str	r3, [r7, #32]
 800645a:	462b      	mov	r3, r5
 800645c:	eb4b 0303 	adc.w	r3, fp, r3
 8006460:	627b      	str	r3, [r7, #36]	@ 0x24
 8006462:	f04f 0200 	mov.w	r2, #0
 8006466:	f04f 0300 	mov.w	r3, #0
 800646a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800646e:	4629      	mov	r1, r5
 8006470:	028b      	lsls	r3, r1, #10
 8006472:	4621      	mov	r1, r4
 8006474:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006478:	4621      	mov	r1, r4
 800647a:	028a      	lsls	r2, r1, #10
 800647c:	4610      	mov	r0, r2
 800647e:	4619      	mov	r1, r3
 8006480:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006484:	2200      	movs	r2, #0
 8006486:	673b      	str	r3, [r7, #112]	@ 0x70
 8006488:	677a      	str	r2, [r7, #116]	@ 0x74
 800648a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800648e:	f7fa fb55 	bl	8000b3c <__aeabi_uldivmod>
 8006492:	4602      	mov	r2, r0
 8006494:	460b      	mov	r3, r1
 8006496:	4613      	mov	r3, r2
 8006498:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800649c:	4b41      	ldr	r3, [pc, #260]	@ (80065a4 <HAL_RCC_GetSysClockFreq+0x354>)
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	0c1b      	lsrs	r3, r3, #16
 80064a2:	f003 0303 	and.w	r3, r3, #3
 80064a6:	3301      	adds	r3, #1
 80064a8:	005b      	lsls	r3, r3, #1
 80064aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80064ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80064b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80064b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80064be:	e0eb      	b.n	8006698 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80064c0:	4b38      	ldr	r3, [pc, #224]	@ (80065a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80064c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80064cc:	4b35      	ldr	r3, [pc, #212]	@ (80065a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d06b      	beq.n	80065b0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064d8:	4b32      	ldr	r3, [pc, #200]	@ (80065a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	099b      	lsrs	r3, r3, #6
 80064de:	2200      	movs	r2, #0
 80064e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80064e2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80064e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80064e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064ea:	663b      	str	r3, [r7, #96]	@ 0x60
 80064ec:	2300      	movs	r3, #0
 80064ee:	667b      	str	r3, [r7, #100]	@ 0x64
 80064f0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80064f4:	4622      	mov	r2, r4
 80064f6:	462b      	mov	r3, r5
 80064f8:	f04f 0000 	mov.w	r0, #0
 80064fc:	f04f 0100 	mov.w	r1, #0
 8006500:	0159      	lsls	r1, r3, #5
 8006502:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006506:	0150      	lsls	r0, r2, #5
 8006508:	4602      	mov	r2, r0
 800650a:	460b      	mov	r3, r1
 800650c:	4621      	mov	r1, r4
 800650e:	1a51      	subs	r1, r2, r1
 8006510:	61b9      	str	r1, [r7, #24]
 8006512:	4629      	mov	r1, r5
 8006514:	eb63 0301 	sbc.w	r3, r3, r1
 8006518:	61fb      	str	r3, [r7, #28]
 800651a:	f04f 0200 	mov.w	r2, #0
 800651e:	f04f 0300 	mov.w	r3, #0
 8006522:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8006526:	4659      	mov	r1, fp
 8006528:	018b      	lsls	r3, r1, #6
 800652a:	4651      	mov	r1, sl
 800652c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006530:	4651      	mov	r1, sl
 8006532:	018a      	lsls	r2, r1, #6
 8006534:	4651      	mov	r1, sl
 8006536:	ebb2 0801 	subs.w	r8, r2, r1
 800653a:	4659      	mov	r1, fp
 800653c:	eb63 0901 	sbc.w	r9, r3, r1
 8006540:	f04f 0200 	mov.w	r2, #0
 8006544:	f04f 0300 	mov.w	r3, #0
 8006548:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800654c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006550:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006554:	4690      	mov	r8, r2
 8006556:	4699      	mov	r9, r3
 8006558:	4623      	mov	r3, r4
 800655a:	eb18 0303 	adds.w	r3, r8, r3
 800655e:	613b      	str	r3, [r7, #16]
 8006560:	462b      	mov	r3, r5
 8006562:	eb49 0303 	adc.w	r3, r9, r3
 8006566:	617b      	str	r3, [r7, #20]
 8006568:	f04f 0200 	mov.w	r2, #0
 800656c:	f04f 0300 	mov.w	r3, #0
 8006570:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006574:	4629      	mov	r1, r5
 8006576:	024b      	lsls	r3, r1, #9
 8006578:	4621      	mov	r1, r4
 800657a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800657e:	4621      	mov	r1, r4
 8006580:	024a      	lsls	r2, r1, #9
 8006582:	4610      	mov	r0, r2
 8006584:	4619      	mov	r1, r3
 8006586:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800658a:	2200      	movs	r2, #0
 800658c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800658e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8006590:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006594:	f7fa fad2 	bl	8000b3c <__aeabi_uldivmod>
 8006598:	4602      	mov	r2, r0
 800659a:	460b      	mov	r3, r1
 800659c:	4613      	mov	r3, r2
 800659e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80065a2:	e065      	b.n	8006670 <HAL_RCC_GetSysClockFreq+0x420>
 80065a4:	40023800 	.word	0x40023800
 80065a8:	00f42400 	.word	0x00f42400
 80065ac:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065b0:	4b3d      	ldr	r3, [pc, #244]	@ (80066a8 <HAL_RCC_GetSysClockFreq+0x458>)
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	099b      	lsrs	r3, r3, #6
 80065b6:	2200      	movs	r2, #0
 80065b8:	4618      	mov	r0, r3
 80065ba:	4611      	mov	r1, r2
 80065bc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80065c0:	653b      	str	r3, [r7, #80]	@ 0x50
 80065c2:	2300      	movs	r3, #0
 80065c4:	657b      	str	r3, [r7, #84]	@ 0x54
 80065c6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80065ca:	4642      	mov	r2, r8
 80065cc:	464b      	mov	r3, r9
 80065ce:	f04f 0000 	mov.w	r0, #0
 80065d2:	f04f 0100 	mov.w	r1, #0
 80065d6:	0159      	lsls	r1, r3, #5
 80065d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80065dc:	0150      	lsls	r0, r2, #5
 80065de:	4602      	mov	r2, r0
 80065e0:	460b      	mov	r3, r1
 80065e2:	4641      	mov	r1, r8
 80065e4:	1a51      	subs	r1, r2, r1
 80065e6:	60b9      	str	r1, [r7, #8]
 80065e8:	4649      	mov	r1, r9
 80065ea:	eb63 0301 	sbc.w	r3, r3, r1
 80065ee:	60fb      	str	r3, [r7, #12]
 80065f0:	f04f 0200 	mov.w	r2, #0
 80065f4:	f04f 0300 	mov.w	r3, #0
 80065f8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80065fc:	4659      	mov	r1, fp
 80065fe:	018b      	lsls	r3, r1, #6
 8006600:	4651      	mov	r1, sl
 8006602:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006606:	4651      	mov	r1, sl
 8006608:	018a      	lsls	r2, r1, #6
 800660a:	4651      	mov	r1, sl
 800660c:	1a54      	subs	r4, r2, r1
 800660e:	4659      	mov	r1, fp
 8006610:	eb63 0501 	sbc.w	r5, r3, r1
 8006614:	f04f 0200 	mov.w	r2, #0
 8006618:	f04f 0300 	mov.w	r3, #0
 800661c:	00eb      	lsls	r3, r5, #3
 800661e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006622:	00e2      	lsls	r2, r4, #3
 8006624:	4614      	mov	r4, r2
 8006626:	461d      	mov	r5, r3
 8006628:	4643      	mov	r3, r8
 800662a:	18e3      	adds	r3, r4, r3
 800662c:	603b      	str	r3, [r7, #0]
 800662e:	464b      	mov	r3, r9
 8006630:	eb45 0303 	adc.w	r3, r5, r3
 8006634:	607b      	str	r3, [r7, #4]
 8006636:	f04f 0200 	mov.w	r2, #0
 800663a:	f04f 0300 	mov.w	r3, #0
 800663e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006642:	4629      	mov	r1, r5
 8006644:	028b      	lsls	r3, r1, #10
 8006646:	4621      	mov	r1, r4
 8006648:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800664c:	4621      	mov	r1, r4
 800664e:	028a      	lsls	r2, r1, #10
 8006650:	4610      	mov	r0, r2
 8006652:	4619      	mov	r1, r3
 8006654:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006658:	2200      	movs	r2, #0
 800665a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800665c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800665e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006662:	f7fa fa6b 	bl	8000b3c <__aeabi_uldivmod>
 8006666:	4602      	mov	r2, r0
 8006668:	460b      	mov	r3, r1
 800666a:	4613      	mov	r3, r2
 800666c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006670:	4b0d      	ldr	r3, [pc, #52]	@ (80066a8 <HAL_RCC_GetSysClockFreq+0x458>)
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	0f1b      	lsrs	r3, r3, #28
 8006676:	f003 0307 	and.w	r3, r3, #7
 800667a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800667e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006682:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006686:	fbb2 f3f3 	udiv	r3, r2, r3
 800668a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800668e:	e003      	b.n	8006698 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006690:	4b06      	ldr	r3, [pc, #24]	@ (80066ac <HAL_RCC_GetSysClockFreq+0x45c>)
 8006692:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006696:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006698:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800669c:	4618      	mov	r0, r3
 800669e:	37b8      	adds	r7, #184	@ 0xb8
 80066a0:	46bd      	mov	sp, r7
 80066a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066a6:	bf00      	nop
 80066a8:	40023800 	.word	0x40023800
 80066ac:	00f42400 	.word	0x00f42400

080066b0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b086      	sub	sp, #24
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d101      	bne.n	80066c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e28d      	b.n	8006bde <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 0301 	and.w	r3, r3, #1
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	f000 8083 	beq.w	80067d6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80066d0:	4b94      	ldr	r3, [pc, #592]	@ (8006924 <HAL_RCC_OscConfig+0x274>)
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	f003 030c 	and.w	r3, r3, #12
 80066d8:	2b04      	cmp	r3, #4
 80066da:	d019      	beq.n	8006710 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80066dc:	4b91      	ldr	r3, [pc, #580]	@ (8006924 <HAL_RCC_OscConfig+0x274>)
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	f003 030c 	and.w	r3, r3, #12
        || \
 80066e4:	2b08      	cmp	r3, #8
 80066e6:	d106      	bne.n	80066f6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80066e8:	4b8e      	ldr	r3, [pc, #568]	@ (8006924 <HAL_RCC_OscConfig+0x274>)
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80066f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80066f4:	d00c      	beq.n	8006710 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066f6:	4b8b      	ldr	r3, [pc, #556]	@ (8006924 <HAL_RCC_OscConfig+0x274>)
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80066fe:	2b0c      	cmp	r3, #12
 8006700:	d112      	bne.n	8006728 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006702:	4b88      	ldr	r3, [pc, #544]	@ (8006924 <HAL_RCC_OscConfig+0x274>)
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800670a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800670e:	d10b      	bne.n	8006728 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006710:	4b84      	ldr	r3, [pc, #528]	@ (8006924 <HAL_RCC_OscConfig+0x274>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006718:	2b00      	cmp	r3, #0
 800671a:	d05b      	beq.n	80067d4 <HAL_RCC_OscConfig+0x124>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d157      	bne.n	80067d4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	e25a      	b.n	8006bde <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006730:	d106      	bne.n	8006740 <HAL_RCC_OscConfig+0x90>
 8006732:	4b7c      	ldr	r3, [pc, #496]	@ (8006924 <HAL_RCC_OscConfig+0x274>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a7b      	ldr	r2, [pc, #492]	@ (8006924 <HAL_RCC_OscConfig+0x274>)
 8006738:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800673c:	6013      	str	r3, [r2, #0]
 800673e:	e01d      	b.n	800677c <HAL_RCC_OscConfig+0xcc>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006748:	d10c      	bne.n	8006764 <HAL_RCC_OscConfig+0xb4>
 800674a:	4b76      	ldr	r3, [pc, #472]	@ (8006924 <HAL_RCC_OscConfig+0x274>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a75      	ldr	r2, [pc, #468]	@ (8006924 <HAL_RCC_OscConfig+0x274>)
 8006750:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006754:	6013      	str	r3, [r2, #0]
 8006756:	4b73      	ldr	r3, [pc, #460]	@ (8006924 <HAL_RCC_OscConfig+0x274>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a72      	ldr	r2, [pc, #456]	@ (8006924 <HAL_RCC_OscConfig+0x274>)
 800675c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006760:	6013      	str	r3, [r2, #0]
 8006762:	e00b      	b.n	800677c <HAL_RCC_OscConfig+0xcc>
 8006764:	4b6f      	ldr	r3, [pc, #444]	@ (8006924 <HAL_RCC_OscConfig+0x274>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a6e      	ldr	r2, [pc, #440]	@ (8006924 <HAL_RCC_OscConfig+0x274>)
 800676a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800676e:	6013      	str	r3, [r2, #0]
 8006770:	4b6c      	ldr	r3, [pc, #432]	@ (8006924 <HAL_RCC_OscConfig+0x274>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a6b      	ldr	r2, [pc, #428]	@ (8006924 <HAL_RCC_OscConfig+0x274>)
 8006776:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800677a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d013      	beq.n	80067ac <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006784:	f7fc f8f6 	bl	8002974 <HAL_GetTick>
 8006788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800678a:	e008      	b.n	800679e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800678c:	f7fc f8f2 	bl	8002974 <HAL_GetTick>
 8006790:	4602      	mov	r2, r0
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	1ad3      	subs	r3, r2, r3
 8006796:	2b64      	cmp	r3, #100	@ 0x64
 8006798:	d901      	bls.n	800679e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800679a:	2303      	movs	r3, #3
 800679c:	e21f      	b.n	8006bde <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800679e:	4b61      	ldr	r3, [pc, #388]	@ (8006924 <HAL_RCC_OscConfig+0x274>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d0f0      	beq.n	800678c <HAL_RCC_OscConfig+0xdc>
 80067aa:	e014      	b.n	80067d6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067ac:	f7fc f8e2 	bl	8002974 <HAL_GetTick>
 80067b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067b2:	e008      	b.n	80067c6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067b4:	f7fc f8de 	bl	8002974 <HAL_GetTick>
 80067b8:	4602      	mov	r2, r0
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	2b64      	cmp	r3, #100	@ 0x64
 80067c0:	d901      	bls.n	80067c6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80067c2:	2303      	movs	r3, #3
 80067c4:	e20b      	b.n	8006bde <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067c6:	4b57      	ldr	r3, [pc, #348]	@ (8006924 <HAL_RCC_OscConfig+0x274>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d1f0      	bne.n	80067b4 <HAL_RCC_OscConfig+0x104>
 80067d2:	e000      	b.n	80067d6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f003 0302 	and.w	r3, r3, #2
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d06f      	beq.n	80068c2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80067e2:	4b50      	ldr	r3, [pc, #320]	@ (8006924 <HAL_RCC_OscConfig+0x274>)
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	f003 030c 	and.w	r3, r3, #12
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d017      	beq.n	800681e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80067ee:	4b4d      	ldr	r3, [pc, #308]	@ (8006924 <HAL_RCC_OscConfig+0x274>)
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	f003 030c 	and.w	r3, r3, #12
        || \
 80067f6:	2b08      	cmp	r3, #8
 80067f8:	d105      	bne.n	8006806 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80067fa:	4b4a      	ldr	r3, [pc, #296]	@ (8006924 <HAL_RCC_OscConfig+0x274>)
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00b      	beq.n	800681e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006806:	4b47      	ldr	r3, [pc, #284]	@ (8006924 <HAL_RCC_OscConfig+0x274>)
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800680e:	2b0c      	cmp	r3, #12
 8006810:	d11c      	bne.n	800684c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006812:	4b44      	ldr	r3, [pc, #272]	@ (8006924 <HAL_RCC_OscConfig+0x274>)
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800681a:	2b00      	cmp	r3, #0
 800681c:	d116      	bne.n	800684c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800681e:	4b41      	ldr	r3, [pc, #260]	@ (8006924 <HAL_RCC_OscConfig+0x274>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 0302 	and.w	r3, r3, #2
 8006826:	2b00      	cmp	r3, #0
 8006828:	d005      	beq.n	8006836 <HAL_RCC_OscConfig+0x186>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	2b01      	cmp	r3, #1
 8006830:	d001      	beq.n	8006836 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	e1d3      	b.n	8006bde <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006836:	4b3b      	ldr	r3, [pc, #236]	@ (8006924 <HAL_RCC_OscConfig+0x274>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	691b      	ldr	r3, [r3, #16]
 8006842:	00db      	lsls	r3, r3, #3
 8006844:	4937      	ldr	r1, [pc, #220]	@ (8006924 <HAL_RCC_OscConfig+0x274>)
 8006846:	4313      	orrs	r3, r2
 8006848:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800684a:	e03a      	b.n	80068c2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d020      	beq.n	8006896 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006854:	4b34      	ldr	r3, [pc, #208]	@ (8006928 <HAL_RCC_OscConfig+0x278>)
 8006856:	2201      	movs	r2, #1
 8006858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800685a:	f7fc f88b 	bl	8002974 <HAL_GetTick>
 800685e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006860:	e008      	b.n	8006874 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006862:	f7fc f887 	bl	8002974 <HAL_GetTick>
 8006866:	4602      	mov	r2, r0
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	1ad3      	subs	r3, r2, r3
 800686c:	2b02      	cmp	r3, #2
 800686e:	d901      	bls.n	8006874 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006870:	2303      	movs	r3, #3
 8006872:	e1b4      	b.n	8006bde <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006874:	4b2b      	ldr	r3, [pc, #172]	@ (8006924 <HAL_RCC_OscConfig+0x274>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 0302 	and.w	r3, r3, #2
 800687c:	2b00      	cmp	r3, #0
 800687e:	d0f0      	beq.n	8006862 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006880:	4b28      	ldr	r3, [pc, #160]	@ (8006924 <HAL_RCC_OscConfig+0x274>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	691b      	ldr	r3, [r3, #16]
 800688c:	00db      	lsls	r3, r3, #3
 800688e:	4925      	ldr	r1, [pc, #148]	@ (8006924 <HAL_RCC_OscConfig+0x274>)
 8006890:	4313      	orrs	r3, r2
 8006892:	600b      	str	r3, [r1, #0]
 8006894:	e015      	b.n	80068c2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006896:	4b24      	ldr	r3, [pc, #144]	@ (8006928 <HAL_RCC_OscConfig+0x278>)
 8006898:	2200      	movs	r2, #0
 800689a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800689c:	f7fc f86a 	bl	8002974 <HAL_GetTick>
 80068a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068a2:	e008      	b.n	80068b6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068a4:	f7fc f866 	bl	8002974 <HAL_GetTick>
 80068a8:	4602      	mov	r2, r0
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	1ad3      	subs	r3, r2, r3
 80068ae:	2b02      	cmp	r3, #2
 80068b0:	d901      	bls.n	80068b6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	e193      	b.n	8006bde <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068b6:	4b1b      	ldr	r3, [pc, #108]	@ (8006924 <HAL_RCC_OscConfig+0x274>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f003 0302 	and.w	r3, r3, #2
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d1f0      	bne.n	80068a4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f003 0308 	and.w	r3, r3, #8
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d036      	beq.n	800693c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	695b      	ldr	r3, [r3, #20]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d016      	beq.n	8006904 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80068d6:	4b15      	ldr	r3, [pc, #84]	@ (800692c <HAL_RCC_OscConfig+0x27c>)
 80068d8:	2201      	movs	r2, #1
 80068da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068dc:	f7fc f84a 	bl	8002974 <HAL_GetTick>
 80068e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068e2:	e008      	b.n	80068f6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068e4:	f7fc f846 	bl	8002974 <HAL_GetTick>
 80068e8:	4602      	mov	r2, r0
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	2b02      	cmp	r3, #2
 80068f0:	d901      	bls.n	80068f6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80068f2:	2303      	movs	r3, #3
 80068f4:	e173      	b.n	8006bde <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006924 <HAL_RCC_OscConfig+0x274>)
 80068f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068fa:	f003 0302 	and.w	r3, r3, #2
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d0f0      	beq.n	80068e4 <HAL_RCC_OscConfig+0x234>
 8006902:	e01b      	b.n	800693c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006904:	4b09      	ldr	r3, [pc, #36]	@ (800692c <HAL_RCC_OscConfig+0x27c>)
 8006906:	2200      	movs	r2, #0
 8006908:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800690a:	f7fc f833 	bl	8002974 <HAL_GetTick>
 800690e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006910:	e00e      	b.n	8006930 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006912:	f7fc f82f 	bl	8002974 <HAL_GetTick>
 8006916:	4602      	mov	r2, r0
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	1ad3      	subs	r3, r2, r3
 800691c:	2b02      	cmp	r3, #2
 800691e:	d907      	bls.n	8006930 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006920:	2303      	movs	r3, #3
 8006922:	e15c      	b.n	8006bde <HAL_RCC_OscConfig+0x52e>
 8006924:	40023800 	.word	0x40023800
 8006928:	42470000 	.word	0x42470000
 800692c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006930:	4b8a      	ldr	r3, [pc, #552]	@ (8006b5c <HAL_RCC_OscConfig+0x4ac>)
 8006932:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006934:	f003 0302 	and.w	r3, r3, #2
 8006938:	2b00      	cmp	r3, #0
 800693a:	d1ea      	bne.n	8006912 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f003 0304 	and.w	r3, r3, #4
 8006944:	2b00      	cmp	r3, #0
 8006946:	f000 8097 	beq.w	8006a78 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800694a:	2300      	movs	r3, #0
 800694c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800694e:	4b83      	ldr	r3, [pc, #524]	@ (8006b5c <HAL_RCC_OscConfig+0x4ac>)
 8006950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006952:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006956:	2b00      	cmp	r3, #0
 8006958:	d10f      	bne.n	800697a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800695a:	2300      	movs	r3, #0
 800695c:	60bb      	str	r3, [r7, #8]
 800695e:	4b7f      	ldr	r3, [pc, #508]	@ (8006b5c <HAL_RCC_OscConfig+0x4ac>)
 8006960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006962:	4a7e      	ldr	r2, [pc, #504]	@ (8006b5c <HAL_RCC_OscConfig+0x4ac>)
 8006964:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006968:	6413      	str	r3, [r2, #64]	@ 0x40
 800696a:	4b7c      	ldr	r3, [pc, #496]	@ (8006b5c <HAL_RCC_OscConfig+0x4ac>)
 800696c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800696e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006972:	60bb      	str	r3, [r7, #8]
 8006974:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006976:	2301      	movs	r3, #1
 8006978:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800697a:	4b79      	ldr	r3, [pc, #484]	@ (8006b60 <HAL_RCC_OscConfig+0x4b0>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006982:	2b00      	cmp	r3, #0
 8006984:	d118      	bne.n	80069b8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006986:	4b76      	ldr	r3, [pc, #472]	@ (8006b60 <HAL_RCC_OscConfig+0x4b0>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a75      	ldr	r2, [pc, #468]	@ (8006b60 <HAL_RCC_OscConfig+0x4b0>)
 800698c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006990:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006992:	f7fb ffef 	bl	8002974 <HAL_GetTick>
 8006996:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006998:	e008      	b.n	80069ac <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800699a:	f7fb ffeb 	bl	8002974 <HAL_GetTick>
 800699e:	4602      	mov	r2, r0
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	1ad3      	subs	r3, r2, r3
 80069a4:	2b02      	cmp	r3, #2
 80069a6:	d901      	bls.n	80069ac <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80069a8:	2303      	movs	r3, #3
 80069aa:	e118      	b.n	8006bde <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069ac:	4b6c      	ldr	r3, [pc, #432]	@ (8006b60 <HAL_RCC_OscConfig+0x4b0>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d0f0      	beq.n	800699a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d106      	bne.n	80069ce <HAL_RCC_OscConfig+0x31e>
 80069c0:	4b66      	ldr	r3, [pc, #408]	@ (8006b5c <HAL_RCC_OscConfig+0x4ac>)
 80069c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069c4:	4a65      	ldr	r2, [pc, #404]	@ (8006b5c <HAL_RCC_OscConfig+0x4ac>)
 80069c6:	f043 0301 	orr.w	r3, r3, #1
 80069ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80069cc:	e01c      	b.n	8006a08 <HAL_RCC_OscConfig+0x358>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	2b05      	cmp	r3, #5
 80069d4:	d10c      	bne.n	80069f0 <HAL_RCC_OscConfig+0x340>
 80069d6:	4b61      	ldr	r3, [pc, #388]	@ (8006b5c <HAL_RCC_OscConfig+0x4ac>)
 80069d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069da:	4a60      	ldr	r2, [pc, #384]	@ (8006b5c <HAL_RCC_OscConfig+0x4ac>)
 80069dc:	f043 0304 	orr.w	r3, r3, #4
 80069e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80069e2:	4b5e      	ldr	r3, [pc, #376]	@ (8006b5c <HAL_RCC_OscConfig+0x4ac>)
 80069e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069e6:	4a5d      	ldr	r2, [pc, #372]	@ (8006b5c <HAL_RCC_OscConfig+0x4ac>)
 80069e8:	f043 0301 	orr.w	r3, r3, #1
 80069ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80069ee:	e00b      	b.n	8006a08 <HAL_RCC_OscConfig+0x358>
 80069f0:	4b5a      	ldr	r3, [pc, #360]	@ (8006b5c <HAL_RCC_OscConfig+0x4ac>)
 80069f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069f4:	4a59      	ldr	r2, [pc, #356]	@ (8006b5c <HAL_RCC_OscConfig+0x4ac>)
 80069f6:	f023 0301 	bic.w	r3, r3, #1
 80069fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80069fc:	4b57      	ldr	r3, [pc, #348]	@ (8006b5c <HAL_RCC_OscConfig+0x4ac>)
 80069fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a00:	4a56      	ldr	r2, [pc, #344]	@ (8006b5c <HAL_RCC_OscConfig+0x4ac>)
 8006a02:	f023 0304 	bic.w	r3, r3, #4
 8006a06:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d015      	beq.n	8006a3c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a10:	f7fb ffb0 	bl	8002974 <HAL_GetTick>
 8006a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a16:	e00a      	b.n	8006a2e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a18:	f7fb ffac 	bl	8002974 <HAL_GetTick>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d901      	bls.n	8006a2e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	e0d7      	b.n	8006bde <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a2e:	4b4b      	ldr	r3, [pc, #300]	@ (8006b5c <HAL_RCC_OscConfig+0x4ac>)
 8006a30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a32:	f003 0302 	and.w	r3, r3, #2
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d0ee      	beq.n	8006a18 <HAL_RCC_OscConfig+0x368>
 8006a3a:	e014      	b.n	8006a66 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a3c:	f7fb ff9a 	bl	8002974 <HAL_GetTick>
 8006a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a42:	e00a      	b.n	8006a5a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a44:	f7fb ff96 	bl	8002974 <HAL_GetTick>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	1ad3      	subs	r3, r2, r3
 8006a4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d901      	bls.n	8006a5a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006a56:	2303      	movs	r3, #3
 8006a58:	e0c1      	b.n	8006bde <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a5a:	4b40      	ldr	r3, [pc, #256]	@ (8006b5c <HAL_RCC_OscConfig+0x4ac>)
 8006a5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a5e:	f003 0302 	and.w	r3, r3, #2
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d1ee      	bne.n	8006a44 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006a66:	7dfb      	ldrb	r3, [r7, #23]
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d105      	bne.n	8006a78 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a6c:	4b3b      	ldr	r3, [pc, #236]	@ (8006b5c <HAL_RCC_OscConfig+0x4ac>)
 8006a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a70:	4a3a      	ldr	r2, [pc, #232]	@ (8006b5c <HAL_RCC_OscConfig+0x4ac>)
 8006a72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a76:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	699b      	ldr	r3, [r3, #24]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	f000 80ad 	beq.w	8006bdc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006a82:	4b36      	ldr	r3, [pc, #216]	@ (8006b5c <HAL_RCC_OscConfig+0x4ac>)
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	f003 030c 	and.w	r3, r3, #12
 8006a8a:	2b08      	cmp	r3, #8
 8006a8c:	d060      	beq.n	8006b50 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	699b      	ldr	r3, [r3, #24]
 8006a92:	2b02      	cmp	r3, #2
 8006a94:	d145      	bne.n	8006b22 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a96:	4b33      	ldr	r3, [pc, #204]	@ (8006b64 <HAL_RCC_OscConfig+0x4b4>)
 8006a98:	2200      	movs	r2, #0
 8006a9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a9c:	f7fb ff6a 	bl	8002974 <HAL_GetTick>
 8006aa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006aa2:	e008      	b.n	8006ab6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006aa4:	f7fb ff66 	bl	8002974 <HAL_GetTick>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	1ad3      	subs	r3, r2, r3
 8006aae:	2b02      	cmp	r3, #2
 8006ab0:	d901      	bls.n	8006ab6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006ab2:	2303      	movs	r3, #3
 8006ab4:	e093      	b.n	8006bde <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ab6:	4b29      	ldr	r3, [pc, #164]	@ (8006b5c <HAL_RCC_OscConfig+0x4ac>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d1f0      	bne.n	8006aa4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	69da      	ldr	r2, [r3, #28]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a1b      	ldr	r3, [r3, #32]
 8006aca:	431a      	orrs	r2, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ad0:	019b      	lsls	r3, r3, #6
 8006ad2:	431a      	orrs	r2, r3
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ad8:	085b      	lsrs	r3, r3, #1
 8006ada:	3b01      	subs	r3, #1
 8006adc:	041b      	lsls	r3, r3, #16
 8006ade:	431a      	orrs	r2, r3
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ae4:	061b      	lsls	r3, r3, #24
 8006ae6:	431a      	orrs	r2, r3
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aec:	071b      	lsls	r3, r3, #28
 8006aee:	491b      	ldr	r1, [pc, #108]	@ (8006b5c <HAL_RCC_OscConfig+0x4ac>)
 8006af0:	4313      	orrs	r3, r2
 8006af2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006af4:	4b1b      	ldr	r3, [pc, #108]	@ (8006b64 <HAL_RCC_OscConfig+0x4b4>)
 8006af6:	2201      	movs	r2, #1
 8006af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006afa:	f7fb ff3b 	bl	8002974 <HAL_GetTick>
 8006afe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b00:	e008      	b.n	8006b14 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b02:	f7fb ff37 	bl	8002974 <HAL_GetTick>
 8006b06:	4602      	mov	r2, r0
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	d901      	bls.n	8006b14 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006b10:	2303      	movs	r3, #3
 8006b12:	e064      	b.n	8006bde <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b14:	4b11      	ldr	r3, [pc, #68]	@ (8006b5c <HAL_RCC_OscConfig+0x4ac>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d0f0      	beq.n	8006b02 <HAL_RCC_OscConfig+0x452>
 8006b20:	e05c      	b.n	8006bdc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b22:	4b10      	ldr	r3, [pc, #64]	@ (8006b64 <HAL_RCC_OscConfig+0x4b4>)
 8006b24:	2200      	movs	r2, #0
 8006b26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b28:	f7fb ff24 	bl	8002974 <HAL_GetTick>
 8006b2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b2e:	e008      	b.n	8006b42 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b30:	f7fb ff20 	bl	8002974 <HAL_GetTick>
 8006b34:	4602      	mov	r2, r0
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	1ad3      	subs	r3, r2, r3
 8006b3a:	2b02      	cmp	r3, #2
 8006b3c:	d901      	bls.n	8006b42 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006b3e:	2303      	movs	r3, #3
 8006b40:	e04d      	b.n	8006bde <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b42:	4b06      	ldr	r3, [pc, #24]	@ (8006b5c <HAL_RCC_OscConfig+0x4ac>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d1f0      	bne.n	8006b30 <HAL_RCC_OscConfig+0x480>
 8006b4e:	e045      	b.n	8006bdc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	699b      	ldr	r3, [r3, #24]
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d107      	bne.n	8006b68 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e040      	b.n	8006bde <HAL_RCC_OscConfig+0x52e>
 8006b5c:	40023800 	.word	0x40023800
 8006b60:	40007000 	.word	0x40007000
 8006b64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006b68:	4b1f      	ldr	r3, [pc, #124]	@ (8006be8 <HAL_RCC_OscConfig+0x538>)
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	699b      	ldr	r3, [r3, #24]
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d030      	beq.n	8006bd8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d129      	bne.n	8006bd8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d122      	bne.n	8006bd8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006b98:	4013      	ands	r3, r2
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006b9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d119      	bne.n	8006bd8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bae:	085b      	lsrs	r3, r3, #1
 8006bb0:	3b01      	subs	r3, #1
 8006bb2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d10f      	bne.n	8006bd8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bc2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d107      	bne.n	8006bd8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bd2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d001      	beq.n	8006bdc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e000      	b.n	8006bde <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006bdc:	2300      	movs	r3, #0
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3718      	adds	r7, #24
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	bf00      	nop
 8006be8:	40023800 	.word	0x40023800

08006bec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d101      	bne.n	8006bfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e041      	b.n	8006c82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d106      	bne.n	8006c18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 f839 	bl	8006c8a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2202      	movs	r2, #2
 8006c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	3304      	adds	r3, #4
 8006c28:	4619      	mov	r1, r3
 8006c2a:	4610      	mov	r0, r2
 8006c2c:	f000 fcce 	bl	80075cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006c80:	2300      	movs	r3, #0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3708      	adds	r7, #8
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}

08006c8a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006c8a:	b480      	push	{r7}
 8006c8c:	b083      	sub	sp, #12
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006c92:	bf00      	nop
 8006c94:	370c      	adds	r7, #12
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr
	...

08006ca0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b085      	sub	sp, #20
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d001      	beq.n	8006cb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	e04e      	b.n	8006d56 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2202      	movs	r2, #2
 8006cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	68da      	ldr	r2, [r3, #12]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f042 0201 	orr.w	r2, r2, #1
 8006cce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a23      	ldr	r2, [pc, #140]	@ (8006d64 <HAL_TIM_Base_Start_IT+0xc4>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d022      	beq.n	8006d20 <HAL_TIM_Base_Start_IT+0x80>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ce2:	d01d      	beq.n	8006d20 <HAL_TIM_Base_Start_IT+0x80>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a1f      	ldr	r2, [pc, #124]	@ (8006d68 <HAL_TIM_Base_Start_IT+0xc8>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d018      	beq.n	8006d20 <HAL_TIM_Base_Start_IT+0x80>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a1e      	ldr	r2, [pc, #120]	@ (8006d6c <HAL_TIM_Base_Start_IT+0xcc>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d013      	beq.n	8006d20 <HAL_TIM_Base_Start_IT+0x80>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a1c      	ldr	r2, [pc, #112]	@ (8006d70 <HAL_TIM_Base_Start_IT+0xd0>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d00e      	beq.n	8006d20 <HAL_TIM_Base_Start_IT+0x80>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a1b      	ldr	r2, [pc, #108]	@ (8006d74 <HAL_TIM_Base_Start_IT+0xd4>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d009      	beq.n	8006d20 <HAL_TIM_Base_Start_IT+0x80>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a19      	ldr	r2, [pc, #100]	@ (8006d78 <HAL_TIM_Base_Start_IT+0xd8>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d004      	beq.n	8006d20 <HAL_TIM_Base_Start_IT+0x80>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a18      	ldr	r2, [pc, #96]	@ (8006d7c <HAL_TIM_Base_Start_IT+0xdc>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d111      	bne.n	8006d44 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	f003 0307 	and.w	r3, r3, #7
 8006d2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2b06      	cmp	r3, #6
 8006d30:	d010      	beq.n	8006d54 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f042 0201 	orr.w	r2, r2, #1
 8006d40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d42:	e007      	b.n	8006d54 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f042 0201 	orr.w	r2, r2, #1
 8006d52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3714      	adds	r7, #20
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr
 8006d62:	bf00      	nop
 8006d64:	40010000 	.word	0x40010000
 8006d68:	40000400 	.word	0x40000400
 8006d6c:	40000800 	.word	0x40000800
 8006d70:	40000c00 	.word	0x40000c00
 8006d74:	40010400 	.word	0x40010400
 8006d78:	40014000 	.word	0x40014000
 8006d7c:	40001800 	.word	0x40001800

08006d80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b082      	sub	sp, #8
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d101      	bne.n	8006d92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e041      	b.n	8006e16 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d106      	bne.n	8006dac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f7fb fc90 	bl	80026cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2202      	movs	r2, #2
 8006db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	3304      	adds	r3, #4
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	4610      	mov	r0, r2
 8006dc0:	f000 fc04 	bl	80075cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2201      	movs	r2, #1
 8006de0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006e14:	2300      	movs	r3, #0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3708      	adds	r7, #8
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
	...

08006e20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d109      	bne.n	8006e44 <HAL_TIM_PWM_Start+0x24>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	bf14      	ite	ne
 8006e3c:	2301      	movne	r3, #1
 8006e3e:	2300      	moveq	r3, #0
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	e022      	b.n	8006e8a <HAL_TIM_PWM_Start+0x6a>
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	2b04      	cmp	r3, #4
 8006e48:	d109      	bne.n	8006e5e <HAL_TIM_PWM_Start+0x3e>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	bf14      	ite	ne
 8006e56:	2301      	movne	r3, #1
 8006e58:	2300      	moveq	r3, #0
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	e015      	b.n	8006e8a <HAL_TIM_PWM_Start+0x6a>
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	2b08      	cmp	r3, #8
 8006e62:	d109      	bne.n	8006e78 <HAL_TIM_PWM_Start+0x58>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	bf14      	ite	ne
 8006e70:	2301      	movne	r3, #1
 8006e72:	2300      	moveq	r3, #0
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	e008      	b.n	8006e8a <HAL_TIM_PWM_Start+0x6a>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	bf14      	ite	ne
 8006e84:	2301      	movne	r3, #1
 8006e86:	2300      	moveq	r3, #0
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d001      	beq.n	8006e92 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e07c      	b.n	8006f8c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d104      	bne.n	8006ea2 <HAL_TIM_PWM_Start+0x82>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2202      	movs	r2, #2
 8006e9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ea0:	e013      	b.n	8006eca <HAL_TIM_PWM_Start+0xaa>
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	2b04      	cmp	r3, #4
 8006ea6:	d104      	bne.n	8006eb2 <HAL_TIM_PWM_Start+0x92>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2202      	movs	r2, #2
 8006eac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006eb0:	e00b      	b.n	8006eca <HAL_TIM_PWM_Start+0xaa>
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	2b08      	cmp	r3, #8
 8006eb6:	d104      	bne.n	8006ec2 <HAL_TIM_PWM_Start+0xa2>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2202      	movs	r2, #2
 8006ebc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ec0:	e003      	b.n	8006eca <HAL_TIM_PWM_Start+0xaa>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2202      	movs	r2, #2
 8006ec6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	6839      	ldr	r1, [r7, #0]
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f000 fdd6 	bl	8007a84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a2d      	ldr	r2, [pc, #180]	@ (8006f94 <HAL_TIM_PWM_Start+0x174>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d004      	beq.n	8006eec <HAL_TIM_PWM_Start+0xcc>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a2c      	ldr	r2, [pc, #176]	@ (8006f98 <HAL_TIM_PWM_Start+0x178>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d101      	bne.n	8006ef0 <HAL_TIM_PWM_Start+0xd0>
 8006eec:	2301      	movs	r3, #1
 8006eee:	e000      	b.n	8006ef2 <HAL_TIM_PWM_Start+0xd2>
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d007      	beq.n	8006f06 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006f04:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a22      	ldr	r2, [pc, #136]	@ (8006f94 <HAL_TIM_PWM_Start+0x174>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d022      	beq.n	8006f56 <HAL_TIM_PWM_Start+0x136>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f18:	d01d      	beq.n	8006f56 <HAL_TIM_PWM_Start+0x136>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a1f      	ldr	r2, [pc, #124]	@ (8006f9c <HAL_TIM_PWM_Start+0x17c>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d018      	beq.n	8006f56 <HAL_TIM_PWM_Start+0x136>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a1d      	ldr	r2, [pc, #116]	@ (8006fa0 <HAL_TIM_PWM_Start+0x180>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d013      	beq.n	8006f56 <HAL_TIM_PWM_Start+0x136>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a1c      	ldr	r2, [pc, #112]	@ (8006fa4 <HAL_TIM_PWM_Start+0x184>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d00e      	beq.n	8006f56 <HAL_TIM_PWM_Start+0x136>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a16      	ldr	r2, [pc, #88]	@ (8006f98 <HAL_TIM_PWM_Start+0x178>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d009      	beq.n	8006f56 <HAL_TIM_PWM_Start+0x136>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a18      	ldr	r2, [pc, #96]	@ (8006fa8 <HAL_TIM_PWM_Start+0x188>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d004      	beq.n	8006f56 <HAL_TIM_PWM_Start+0x136>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a16      	ldr	r2, [pc, #88]	@ (8006fac <HAL_TIM_PWM_Start+0x18c>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d111      	bne.n	8006f7a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	f003 0307 	and.w	r3, r3, #7
 8006f60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2b06      	cmp	r3, #6
 8006f66:	d010      	beq.n	8006f8a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f042 0201 	orr.w	r2, r2, #1
 8006f76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f78:	e007      	b.n	8006f8a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f042 0201 	orr.w	r2, r2, #1
 8006f88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3710      	adds	r7, #16
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}
 8006f94:	40010000 	.word	0x40010000
 8006f98:	40010400 	.word	0x40010400
 8006f9c:	40000400 	.word	0x40000400
 8006fa0:	40000800 	.word	0x40000800
 8006fa4:	40000c00 	.word	0x40000c00
 8006fa8:	40014000 	.word	0x40014000
 8006fac:	40001800 	.word	0x40001800

08006fb0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b086      	sub	sp, #24
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d101      	bne.n	8006fc4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e097      	b.n	80070f4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d106      	bne.n	8006fde <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f7fb fb31 	bl	8002640 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2202      	movs	r2, #2
 8006fe2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	6812      	ldr	r2, [r2, #0]
 8006ff0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ff4:	f023 0307 	bic.w	r3, r3, #7
 8006ff8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	3304      	adds	r3, #4
 8007002:	4619      	mov	r1, r3
 8007004:	4610      	mov	r0, r2
 8007006:	f000 fae1 	bl	80075cc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	699b      	ldr	r3, [r3, #24]
 8007018:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	6a1b      	ldr	r3, [r3, #32]
 8007020:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	697a      	ldr	r2, [r7, #20]
 8007028:	4313      	orrs	r3, r2
 800702a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007032:	f023 0303 	bic.w	r3, r3, #3
 8007036:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	689a      	ldr	r2, [r3, #8]
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	699b      	ldr	r3, [r3, #24]
 8007040:	021b      	lsls	r3, r3, #8
 8007042:	4313      	orrs	r3, r2
 8007044:	693a      	ldr	r2, [r7, #16]
 8007046:	4313      	orrs	r3, r2
 8007048:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007050:	f023 030c 	bic.w	r3, r3, #12
 8007054:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800705c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007060:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	68da      	ldr	r2, [r3, #12]
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	69db      	ldr	r3, [r3, #28]
 800706a:	021b      	lsls	r3, r3, #8
 800706c:	4313      	orrs	r3, r2
 800706e:	693a      	ldr	r2, [r7, #16]
 8007070:	4313      	orrs	r3, r2
 8007072:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	691b      	ldr	r3, [r3, #16]
 8007078:	011a      	lsls	r2, r3, #4
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	6a1b      	ldr	r3, [r3, #32]
 800707e:	031b      	lsls	r3, r3, #12
 8007080:	4313      	orrs	r3, r2
 8007082:	693a      	ldr	r2, [r7, #16]
 8007084:	4313      	orrs	r3, r2
 8007086:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800708e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007096:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	685a      	ldr	r2, [r3, #4]
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	695b      	ldr	r3, [r3, #20]
 80070a0:	011b      	lsls	r3, r3, #4
 80070a2:	4313      	orrs	r3, r2
 80070a4:	68fa      	ldr	r2, [r7, #12]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	697a      	ldr	r2, [r7, #20]
 80070b0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	693a      	ldr	r2, [r7, #16]
 80070b8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	68fa      	ldr	r2, [r7, #12]
 80070c0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2201      	movs	r2, #1
 80070c6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2201      	movs	r2, #1
 80070ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2201      	movs	r2, #1
 80070d6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2201      	movs	r2, #1
 80070de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2201      	movs	r2, #1
 80070e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2201      	movs	r2, #1
 80070ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80070f2:	2300      	movs	r3, #0
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3718      	adds	r7, #24
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800710c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007114:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800711c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007124:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d110      	bne.n	800714e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800712c:	7bfb      	ldrb	r3, [r7, #15]
 800712e:	2b01      	cmp	r3, #1
 8007130:	d102      	bne.n	8007138 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007132:	7b7b      	ldrb	r3, [r7, #13]
 8007134:	2b01      	cmp	r3, #1
 8007136:	d001      	beq.n	800713c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	e069      	b.n	8007210 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2202      	movs	r2, #2
 8007140:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2202      	movs	r2, #2
 8007148:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800714c:	e031      	b.n	80071b2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	2b04      	cmp	r3, #4
 8007152:	d110      	bne.n	8007176 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007154:	7bbb      	ldrb	r3, [r7, #14]
 8007156:	2b01      	cmp	r3, #1
 8007158:	d102      	bne.n	8007160 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800715a:	7b3b      	ldrb	r3, [r7, #12]
 800715c:	2b01      	cmp	r3, #1
 800715e:	d001      	beq.n	8007164 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	e055      	b.n	8007210 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2202      	movs	r2, #2
 8007168:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2202      	movs	r2, #2
 8007170:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007174:	e01d      	b.n	80071b2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007176:	7bfb      	ldrb	r3, [r7, #15]
 8007178:	2b01      	cmp	r3, #1
 800717a:	d108      	bne.n	800718e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800717c:	7bbb      	ldrb	r3, [r7, #14]
 800717e:	2b01      	cmp	r3, #1
 8007180:	d105      	bne.n	800718e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007182:	7b7b      	ldrb	r3, [r7, #13]
 8007184:	2b01      	cmp	r3, #1
 8007186:	d102      	bne.n	800718e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007188:	7b3b      	ldrb	r3, [r7, #12]
 800718a:	2b01      	cmp	r3, #1
 800718c:	d001      	beq.n	8007192 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	e03e      	b.n	8007210 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2202      	movs	r2, #2
 8007196:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2202      	movs	r2, #2
 800719e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2202      	movs	r2, #2
 80071a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2202      	movs	r2, #2
 80071ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d003      	beq.n	80071c0 <HAL_TIM_Encoder_Start+0xc4>
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	2b04      	cmp	r3, #4
 80071bc:	d008      	beq.n	80071d0 <HAL_TIM_Encoder_Start+0xd4>
 80071be:	e00f      	b.n	80071e0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	2201      	movs	r2, #1
 80071c6:	2100      	movs	r1, #0
 80071c8:	4618      	mov	r0, r3
 80071ca:	f000 fc5b 	bl	8007a84 <TIM_CCxChannelCmd>
      break;
 80071ce:	e016      	b.n	80071fe <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	2201      	movs	r2, #1
 80071d6:	2104      	movs	r1, #4
 80071d8:	4618      	mov	r0, r3
 80071da:	f000 fc53 	bl	8007a84 <TIM_CCxChannelCmd>
      break;
 80071de:	e00e      	b.n	80071fe <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	2201      	movs	r2, #1
 80071e6:	2100      	movs	r1, #0
 80071e8:	4618      	mov	r0, r3
 80071ea:	f000 fc4b 	bl	8007a84 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	2201      	movs	r2, #1
 80071f4:	2104      	movs	r1, #4
 80071f6:	4618      	mov	r0, r3
 80071f8:	f000 fc44 	bl	8007a84 <TIM_CCxChannelCmd>
      break;
 80071fc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f042 0201 	orr.w	r2, r2, #1
 800720c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800720e:	2300      	movs	r3, #0
}
 8007210:	4618      	mov	r0, r3
 8007212:	3710      	adds	r7, #16
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	691b      	ldr	r3, [r3, #16]
 800722e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	f003 0302 	and.w	r3, r3, #2
 8007236:	2b00      	cmp	r3, #0
 8007238:	d020      	beq.n	800727c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	f003 0302 	and.w	r3, r3, #2
 8007240:	2b00      	cmp	r3, #0
 8007242:	d01b      	beq.n	800727c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f06f 0202 	mvn.w	r2, #2
 800724c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2201      	movs	r2, #1
 8007252:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	699b      	ldr	r3, [r3, #24]
 800725a:	f003 0303 	and.w	r3, r3, #3
 800725e:	2b00      	cmp	r3, #0
 8007260:	d003      	beq.n	800726a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 f994 	bl	8007590 <HAL_TIM_IC_CaptureCallback>
 8007268:	e005      	b.n	8007276 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 f986 	bl	800757c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 f997 	bl	80075a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	f003 0304 	and.w	r3, r3, #4
 8007282:	2b00      	cmp	r3, #0
 8007284:	d020      	beq.n	80072c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f003 0304 	and.w	r3, r3, #4
 800728c:	2b00      	cmp	r3, #0
 800728e:	d01b      	beq.n	80072c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f06f 0204 	mvn.w	r2, #4
 8007298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2202      	movs	r2, #2
 800729e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	699b      	ldr	r3, [r3, #24]
 80072a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d003      	beq.n	80072b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f000 f96e 	bl	8007590 <HAL_TIM_IC_CaptureCallback>
 80072b4:	e005      	b.n	80072c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 f960 	bl	800757c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 f971 	bl	80075a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2200      	movs	r2, #0
 80072c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	f003 0308 	and.w	r3, r3, #8
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d020      	beq.n	8007314 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f003 0308 	and.w	r3, r3, #8
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d01b      	beq.n	8007314 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f06f 0208 	mvn.w	r2, #8
 80072e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2204      	movs	r2, #4
 80072ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	69db      	ldr	r3, [r3, #28]
 80072f2:	f003 0303 	and.w	r3, r3, #3
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d003      	beq.n	8007302 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 f948 	bl	8007590 <HAL_TIM_IC_CaptureCallback>
 8007300:	e005      	b.n	800730e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f000 f93a 	bl	800757c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 f94b 	bl	80075a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	f003 0310 	and.w	r3, r3, #16
 800731a:	2b00      	cmp	r3, #0
 800731c:	d020      	beq.n	8007360 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f003 0310 	and.w	r3, r3, #16
 8007324:	2b00      	cmp	r3, #0
 8007326:	d01b      	beq.n	8007360 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f06f 0210 	mvn.w	r2, #16
 8007330:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2208      	movs	r2, #8
 8007336:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	69db      	ldr	r3, [r3, #28]
 800733e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007342:	2b00      	cmp	r3, #0
 8007344:	d003      	beq.n	800734e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 f922 	bl	8007590 <HAL_TIM_IC_CaptureCallback>
 800734c:	e005      	b.n	800735a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 f914 	bl	800757c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 f925 	bl	80075a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2200      	movs	r2, #0
 800735e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	f003 0301 	and.w	r3, r3, #1
 8007366:	2b00      	cmp	r3, #0
 8007368:	d00c      	beq.n	8007384 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	f003 0301 	and.w	r3, r3, #1
 8007370:	2b00      	cmp	r3, #0
 8007372:	d007      	beq.n	8007384 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f06f 0201 	mvn.w	r2, #1
 800737c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f7fa fe7e 	bl	8002080 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800738a:	2b00      	cmp	r3, #0
 800738c:	d00c      	beq.n	80073a8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007394:	2b00      	cmp	r3, #0
 8007396:	d007      	beq.n	80073a8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80073a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 fc1a 	bl	8007bdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d00c      	beq.n	80073cc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d007      	beq.n	80073cc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80073c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 f8f6 	bl	80075b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	f003 0320 	and.w	r3, r3, #32
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d00c      	beq.n	80073f0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f003 0320 	and.w	r3, r3, #32
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d007      	beq.n	80073f0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f06f 0220 	mvn.w	r2, #32
 80073e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 fbec 	bl	8007bc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80073f0:	bf00      	nop
 80073f2:	3710      	adds	r7, #16
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b086      	sub	sp, #24
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	60f8      	str	r0, [r7, #12]
 8007400:	60b9      	str	r1, [r7, #8]
 8007402:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007404:	2300      	movs	r3, #0
 8007406:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800740e:	2b01      	cmp	r3, #1
 8007410:	d101      	bne.n	8007416 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007412:	2302      	movs	r3, #2
 8007414:	e0ae      	b.n	8007574 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2201      	movs	r2, #1
 800741a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2b0c      	cmp	r3, #12
 8007422:	f200 809f 	bhi.w	8007564 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007426:	a201      	add	r2, pc, #4	@ (adr r2, 800742c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800742c:	08007461 	.word	0x08007461
 8007430:	08007565 	.word	0x08007565
 8007434:	08007565 	.word	0x08007565
 8007438:	08007565 	.word	0x08007565
 800743c:	080074a1 	.word	0x080074a1
 8007440:	08007565 	.word	0x08007565
 8007444:	08007565 	.word	0x08007565
 8007448:	08007565 	.word	0x08007565
 800744c:	080074e3 	.word	0x080074e3
 8007450:	08007565 	.word	0x08007565
 8007454:	08007565 	.word	0x08007565
 8007458:	08007565 	.word	0x08007565
 800745c:	08007523 	.word	0x08007523
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	68b9      	ldr	r1, [r7, #8]
 8007466:	4618      	mov	r0, r3
 8007468:	f000 f95c 	bl	8007724 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	699a      	ldr	r2, [r3, #24]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f042 0208 	orr.w	r2, r2, #8
 800747a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	699a      	ldr	r2, [r3, #24]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f022 0204 	bic.w	r2, r2, #4
 800748a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	6999      	ldr	r1, [r3, #24]
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	691a      	ldr	r2, [r3, #16]
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	430a      	orrs	r2, r1
 800749c:	619a      	str	r2, [r3, #24]
      break;
 800749e:	e064      	b.n	800756a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	68b9      	ldr	r1, [r7, #8]
 80074a6:	4618      	mov	r0, r3
 80074a8:	f000 f9ac 	bl	8007804 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	699a      	ldr	r2, [r3, #24]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80074ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	699a      	ldr	r2, [r3, #24]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80074ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	6999      	ldr	r1, [r3, #24]
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	021a      	lsls	r2, r3, #8
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	430a      	orrs	r2, r1
 80074de:	619a      	str	r2, [r3, #24]
      break;
 80074e0:	e043      	b.n	800756a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	68b9      	ldr	r1, [r7, #8]
 80074e8:	4618      	mov	r0, r3
 80074ea:	f000 fa01 	bl	80078f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	69da      	ldr	r2, [r3, #28]
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f042 0208 	orr.w	r2, r2, #8
 80074fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	69da      	ldr	r2, [r3, #28]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f022 0204 	bic.w	r2, r2, #4
 800750c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	69d9      	ldr	r1, [r3, #28]
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	691a      	ldr	r2, [r3, #16]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	430a      	orrs	r2, r1
 800751e:	61da      	str	r2, [r3, #28]
      break;
 8007520:	e023      	b.n	800756a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	68b9      	ldr	r1, [r7, #8]
 8007528:	4618      	mov	r0, r3
 800752a:	f000 fa55 	bl	80079d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	69da      	ldr	r2, [r3, #28]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800753c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	69da      	ldr	r2, [r3, #28]
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800754c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	69d9      	ldr	r1, [r3, #28]
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	691b      	ldr	r3, [r3, #16]
 8007558:	021a      	lsls	r2, r3, #8
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	430a      	orrs	r2, r1
 8007560:	61da      	str	r2, [r3, #28]
      break;
 8007562:	e002      	b.n	800756a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	75fb      	strb	r3, [r7, #23]
      break;
 8007568:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2200      	movs	r2, #0
 800756e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007572:	7dfb      	ldrb	r3, [r7, #23]
}
 8007574:	4618      	mov	r0, r3
 8007576:	3718      	adds	r7, #24
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800757c:	b480      	push	{r7}
 800757e:	b083      	sub	sp, #12
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007584:	bf00      	nop
 8007586:	370c      	adds	r7, #12
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007590:	b480      	push	{r7}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007598:	bf00      	nop
 800759a:	370c      	adds	r7, #12
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80075ac:	bf00      	nop
 80075ae:	370c      	adds	r7, #12
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80075c0:	bf00      	nop
 80075c2:	370c      	adds	r7, #12
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr

080075cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b085      	sub	sp, #20
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	4a46      	ldr	r2, [pc, #280]	@ (80076f8 <TIM_Base_SetConfig+0x12c>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d013      	beq.n	800760c <TIM_Base_SetConfig+0x40>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075ea:	d00f      	beq.n	800760c <TIM_Base_SetConfig+0x40>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	4a43      	ldr	r2, [pc, #268]	@ (80076fc <TIM_Base_SetConfig+0x130>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d00b      	beq.n	800760c <TIM_Base_SetConfig+0x40>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	4a42      	ldr	r2, [pc, #264]	@ (8007700 <TIM_Base_SetConfig+0x134>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d007      	beq.n	800760c <TIM_Base_SetConfig+0x40>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	4a41      	ldr	r2, [pc, #260]	@ (8007704 <TIM_Base_SetConfig+0x138>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d003      	beq.n	800760c <TIM_Base_SetConfig+0x40>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	4a40      	ldr	r2, [pc, #256]	@ (8007708 <TIM_Base_SetConfig+0x13c>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d108      	bne.n	800761e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007612:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	4313      	orrs	r3, r2
 800761c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	4a35      	ldr	r2, [pc, #212]	@ (80076f8 <TIM_Base_SetConfig+0x12c>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d02b      	beq.n	800767e <TIM_Base_SetConfig+0xb2>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800762c:	d027      	beq.n	800767e <TIM_Base_SetConfig+0xb2>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	4a32      	ldr	r2, [pc, #200]	@ (80076fc <TIM_Base_SetConfig+0x130>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d023      	beq.n	800767e <TIM_Base_SetConfig+0xb2>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	4a31      	ldr	r2, [pc, #196]	@ (8007700 <TIM_Base_SetConfig+0x134>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d01f      	beq.n	800767e <TIM_Base_SetConfig+0xb2>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	4a30      	ldr	r2, [pc, #192]	@ (8007704 <TIM_Base_SetConfig+0x138>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d01b      	beq.n	800767e <TIM_Base_SetConfig+0xb2>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	4a2f      	ldr	r2, [pc, #188]	@ (8007708 <TIM_Base_SetConfig+0x13c>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d017      	beq.n	800767e <TIM_Base_SetConfig+0xb2>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	4a2e      	ldr	r2, [pc, #184]	@ (800770c <TIM_Base_SetConfig+0x140>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d013      	beq.n	800767e <TIM_Base_SetConfig+0xb2>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	4a2d      	ldr	r2, [pc, #180]	@ (8007710 <TIM_Base_SetConfig+0x144>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d00f      	beq.n	800767e <TIM_Base_SetConfig+0xb2>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	4a2c      	ldr	r2, [pc, #176]	@ (8007714 <TIM_Base_SetConfig+0x148>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d00b      	beq.n	800767e <TIM_Base_SetConfig+0xb2>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	4a2b      	ldr	r2, [pc, #172]	@ (8007718 <TIM_Base_SetConfig+0x14c>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d007      	beq.n	800767e <TIM_Base_SetConfig+0xb2>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	4a2a      	ldr	r2, [pc, #168]	@ (800771c <TIM_Base_SetConfig+0x150>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d003      	beq.n	800767e <TIM_Base_SetConfig+0xb2>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	4a29      	ldr	r2, [pc, #164]	@ (8007720 <TIM_Base_SetConfig+0x154>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d108      	bne.n	8007690 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007684:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	68fa      	ldr	r2, [r7, #12]
 800768c:	4313      	orrs	r3, r2
 800768e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	695b      	ldr	r3, [r3, #20]
 800769a:	4313      	orrs	r3, r2
 800769c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	68fa      	ldr	r2, [r7, #12]
 80076a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	689a      	ldr	r2, [r3, #8]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	4a10      	ldr	r2, [pc, #64]	@ (80076f8 <TIM_Base_SetConfig+0x12c>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d003      	beq.n	80076c4 <TIM_Base_SetConfig+0xf8>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	4a12      	ldr	r2, [pc, #72]	@ (8007708 <TIM_Base_SetConfig+0x13c>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d103      	bne.n	80076cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	691a      	ldr	r2, [r3, #16]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	f003 0301 	and.w	r3, r3, #1
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d105      	bne.n	80076ea <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	691b      	ldr	r3, [r3, #16]
 80076e2:	f023 0201 	bic.w	r2, r3, #1
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	611a      	str	r2, [r3, #16]
  }
}
 80076ea:	bf00      	nop
 80076ec:	3714      	adds	r7, #20
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr
 80076f6:	bf00      	nop
 80076f8:	40010000 	.word	0x40010000
 80076fc:	40000400 	.word	0x40000400
 8007700:	40000800 	.word	0x40000800
 8007704:	40000c00 	.word	0x40000c00
 8007708:	40010400 	.word	0x40010400
 800770c:	40014000 	.word	0x40014000
 8007710:	40014400 	.word	0x40014400
 8007714:	40014800 	.word	0x40014800
 8007718:	40001800 	.word	0x40001800
 800771c:	40001c00 	.word	0x40001c00
 8007720:	40002000 	.word	0x40002000

08007724 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007724:	b480      	push	{r7}
 8007726:	b087      	sub	sp, #28
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6a1b      	ldr	r3, [r3, #32]
 8007732:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6a1b      	ldr	r3, [r3, #32]
 8007738:	f023 0201 	bic.w	r2, r3, #1
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	699b      	ldr	r3, [r3, #24]
 800774a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f023 0303 	bic.w	r3, r3, #3
 800775a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	68fa      	ldr	r2, [r7, #12]
 8007762:	4313      	orrs	r3, r2
 8007764:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	f023 0302 	bic.w	r3, r3, #2
 800776c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	697a      	ldr	r2, [r7, #20]
 8007774:	4313      	orrs	r3, r2
 8007776:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	4a20      	ldr	r2, [pc, #128]	@ (80077fc <TIM_OC1_SetConfig+0xd8>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d003      	beq.n	8007788 <TIM_OC1_SetConfig+0x64>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	4a1f      	ldr	r2, [pc, #124]	@ (8007800 <TIM_OC1_SetConfig+0xdc>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d10c      	bne.n	80077a2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	f023 0308 	bic.w	r3, r3, #8
 800778e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	697a      	ldr	r2, [r7, #20]
 8007796:	4313      	orrs	r3, r2
 8007798:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	f023 0304 	bic.w	r3, r3, #4
 80077a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	4a15      	ldr	r2, [pc, #84]	@ (80077fc <TIM_OC1_SetConfig+0xd8>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d003      	beq.n	80077b2 <TIM_OC1_SetConfig+0x8e>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	4a14      	ldr	r2, [pc, #80]	@ (8007800 <TIM_OC1_SetConfig+0xdc>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d111      	bne.n	80077d6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80077b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80077c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	695b      	ldr	r3, [r3, #20]
 80077c6:	693a      	ldr	r2, [r7, #16]
 80077c8:	4313      	orrs	r3, r2
 80077ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	699b      	ldr	r3, [r3, #24]
 80077d0:	693a      	ldr	r2, [r7, #16]
 80077d2:	4313      	orrs	r3, r2
 80077d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	693a      	ldr	r2, [r7, #16]
 80077da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	68fa      	ldr	r2, [r7, #12]
 80077e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	685a      	ldr	r2, [r3, #4]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	697a      	ldr	r2, [r7, #20]
 80077ee:	621a      	str	r2, [r3, #32]
}
 80077f0:	bf00      	nop
 80077f2:	371c      	adds	r7, #28
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr
 80077fc:	40010000 	.word	0x40010000
 8007800:	40010400 	.word	0x40010400

08007804 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007804:	b480      	push	{r7}
 8007806:	b087      	sub	sp, #28
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6a1b      	ldr	r3, [r3, #32]
 8007812:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6a1b      	ldr	r3, [r3, #32]
 8007818:	f023 0210 	bic.w	r2, r3, #16
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	699b      	ldr	r3, [r3, #24]
 800782a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800783a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	021b      	lsls	r3, r3, #8
 8007842:	68fa      	ldr	r2, [r7, #12]
 8007844:	4313      	orrs	r3, r2
 8007846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	f023 0320 	bic.w	r3, r3, #32
 800784e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	011b      	lsls	r3, r3, #4
 8007856:	697a      	ldr	r2, [r7, #20]
 8007858:	4313      	orrs	r3, r2
 800785a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	4a22      	ldr	r2, [pc, #136]	@ (80078e8 <TIM_OC2_SetConfig+0xe4>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d003      	beq.n	800786c <TIM_OC2_SetConfig+0x68>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	4a21      	ldr	r2, [pc, #132]	@ (80078ec <TIM_OC2_SetConfig+0xe8>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d10d      	bne.n	8007888 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007872:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	68db      	ldr	r3, [r3, #12]
 8007878:	011b      	lsls	r3, r3, #4
 800787a:	697a      	ldr	r2, [r7, #20]
 800787c:	4313      	orrs	r3, r2
 800787e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007886:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	4a17      	ldr	r2, [pc, #92]	@ (80078e8 <TIM_OC2_SetConfig+0xe4>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d003      	beq.n	8007898 <TIM_OC2_SetConfig+0x94>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	4a16      	ldr	r2, [pc, #88]	@ (80078ec <TIM_OC2_SetConfig+0xe8>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d113      	bne.n	80078c0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800789e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80078a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	695b      	ldr	r3, [r3, #20]
 80078ac:	009b      	lsls	r3, r3, #2
 80078ae:	693a      	ldr	r2, [r7, #16]
 80078b0:	4313      	orrs	r3, r2
 80078b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	699b      	ldr	r3, [r3, #24]
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	693a      	ldr	r2, [r7, #16]
 80078bc:	4313      	orrs	r3, r2
 80078be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	693a      	ldr	r2, [r7, #16]
 80078c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	68fa      	ldr	r2, [r7, #12]
 80078ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	685a      	ldr	r2, [r3, #4]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	697a      	ldr	r2, [r7, #20]
 80078d8:	621a      	str	r2, [r3, #32]
}
 80078da:	bf00      	nop
 80078dc:	371c      	adds	r7, #28
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr
 80078e6:	bf00      	nop
 80078e8:	40010000 	.word	0x40010000
 80078ec:	40010400 	.word	0x40010400

080078f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b087      	sub	sp, #28
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6a1b      	ldr	r3, [r3, #32]
 80078fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6a1b      	ldr	r3, [r3, #32]
 8007904:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	69db      	ldr	r3, [r3, #28]
 8007916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800791e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f023 0303 	bic.w	r3, r3, #3
 8007926:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	68fa      	ldr	r2, [r7, #12]
 800792e:	4313      	orrs	r3, r2
 8007930:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007938:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	021b      	lsls	r3, r3, #8
 8007940:	697a      	ldr	r2, [r7, #20]
 8007942:	4313      	orrs	r3, r2
 8007944:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	4a21      	ldr	r2, [pc, #132]	@ (80079d0 <TIM_OC3_SetConfig+0xe0>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d003      	beq.n	8007956 <TIM_OC3_SetConfig+0x66>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	4a20      	ldr	r2, [pc, #128]	@ (80079d4 <TIM_OC3_SetConfig+0xe4>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d10d      	bne.n	8007972 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800795c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	021b      	lsls	r3, r3, #8
 8007964:	697a      	ldr	r2, [r7, #20]
 8007966:	4313      	orrs	r3, r2
 8007968:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007970:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	4a16      	ldr	r2, [pc, #88]	@ (80079d0 <TIM_OC3_SetConfig+0xe0>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d003      	beq.n	8007982 <TIM_OC3_SetConfig+0x92>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	4a15      	ldr	r2, [pc, #84]	@ (80079d4 <TIM_OC3_SetConfig+0xe4>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d113      	bne.n	80079aa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007988:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007990:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	695b      	ldr	r3, [r3, #20]
 8007996:	011b      	lsls	r3, r3, #4
 8007998:	693a      	ldr	r2, [r7, #16]
 800799a:	4313      	orrs	r3, r2
 800799c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	699b      	ldr	r3, [r3, #24]
 80079a2:	011b      	lsls	r3, r3, #4
 80079a4:	693a      	ldr	r2, [r7, #16]
 80079a6:	4313      	orrs	r3, r2
 80079a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	693a      	ldr	r2, [r7, #16]
 80079ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	68fa      	ldr	r2, [r7, #12]
 80079b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	685a      	ldr	r2, [r3, #4]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	697a      	ldr	r2, [r7, #20]
 80079c2:	621a      	str	r2, [r3, #32]
}
 80079c4:	bf00      	nop
 80079c6:	371c      	adds	r7, #28
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr
 80079d0:	40010000 	.word	0x40010000
 80079d4:	40010400 	.word	0x40010400

080079d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80079d8:	b480      	push	{r7}
 80079da:	b087      	sub	sp, #28
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6a1b      	ldr	r3, [r3, #32]
 80079e6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6a1b      	ldr	r3, [r3, #32]
 80079ec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	69db      	ldr	r3, [r3, #28]
 80079fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	021b      	lsls	r3, r3, #8
 8007a16:	68fa      	ldr	r2, [r7, #12]
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007a22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	031b      	lsls	r3, r3, #12
 8007a2a:	693a      	ldr	r2, [r7, #16]
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	4a12      	ldr	r2, [pc, #72]	@ (8007a7c <TIM_OC4_SetConfig+0xa4>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d003      	beq.n	8007a40 <TIM_OC4_SetConfig+0x68>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	4a11      	ldr	r2, [pc, #68]	@ (8007a80 <TIM_OC4_SetConfig+0xa8>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d109      	bne.n	8007a54 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007a46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	695b      	ldr	r3, [r3, #20]
 8007a4c:	019b      	lsls	r3, r3, #6
 8007a4e:	697a      	ldr	r2, [r7, #20]
 8007a50:	4313      	orrs	r3, r2
 8007a52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	697a      	ldr	r2, [r7, #20]
 8007a58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	68fa      	ldr	r2, [r7, #12]
 8007a5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	685a      	ldr	r2, [r3, #4]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	693a      	ldr	r2, [r7, #16]
 8007a6c:	621a      	str	r2, [r3, #32]
}
 8007a6e:	bf00      	nop
 8007a70:	371c      	adds	r7, #28
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr
 8007a7a:	bf00      	nop
 8007a7c:	40010000 	.word	0x40010000
 8007a80:	40010400 	.word	0x40010400

08007a84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b087      	sub	sp, #28
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	60f8      	str	r0, [r7, #12]
 8007a8c:	60b9      	str	r1, [r7, #8]
 8007a8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	f003 031f 	and.w	r3, r3, #31
 8007a96:	2201      	movs	r2, #1
 8007a98:	fa02 f303 	lsl.w	r3, r2, r3
 8007a9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	6a1a      	ldr	r2, [r3, #32]
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	43db      	mvns	r3, r3
 8007aa6:	401a      	ands	r2, r3
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	6a1a      	ldr	r2, [r3, #32]
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	f003 031f 	and.w	r3, r3, #31
 8007ab6:	6879      	ldr	r1, [r7, #4]
 8007ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8007abc:	431a      	orrs	r2, r3
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	621a      	str	r2, [r3, #32]
}
 8007ac2:	bf00      	nop
 8007ac4:	371c      	adds	r7, #28
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr
	...

08007ad0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b085      	sub	sp, #20
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d101      	bne.n	8007ae8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ae4:	2302      	movs	r3, #2
 8007ae6:	e05a      	b.n	8007b9e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2201      	movs	r2, #1
 8007aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2202      	movs	r2, #2
 8007af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	68fa      	ldr	r2, [r7, #12]
 8007b16:	4313      	orrs	r3, r2
 8007b18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	68fa      	ldr	r2, [r7, #12]
 8007b20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a21      	ldr	r2, [pc, #132]	@ (8007bac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d022      	beq.n	8007b72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b34:	d01d      	beq.n	8007b72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a1d      	ldr	r2, [pc, #116]	@ (8007bb0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d018      	beq.n	8007b72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a1b      	ldr	r2, [pc, #108]	@ (8007bb4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d013      	beq.n	8007b72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a1a      	ldr	r2, [pc, #104]	@ (8007bb8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d00e      	beq.n	8007b72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a18      	ldr	r2, [pc, #96]	@ (8007bbc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d009      	beq.n	8007b72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a17      	ldr	r2, [pc, #92]	@ (8007bc0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d004      	beq.n	8007b72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a15      	ldr	r2, [pc, #84]	@ (8007bc4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d10c      	bne.n	8007b8c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	68ba      	ldr	r2, [r7, #8]
 8007b80:	4313      	orrs	r3, r2
 8007b82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	68ba      	ldr	r2, [r7, #8]
 8007b8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2200      	movs	r2, #0
 8007b98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007b9c:	2300      	movs	r3, #0
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3714      	adds	r7, #20
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr
 8007baa:	bf00      	nop
 8007bac:	40010000 	.word	0x40010000
 8007bb0:	40000400 	.word	0x40000400
 8007bb4:	40000800 	.word	0x40000800
 8007bb8:	40000c00 	.word	0x40000c00
 8007bbc:	40010400 	.word	0x40010400
 8007bc0:	40014000 	.word	0x40014000
 8007bc4:	40001800 	.word	0x40001800

08007bc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b083      	sub	sp, #12
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007bd0:	bf00      	nop
 8007bd2:	370c      	adds	r7, #12
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr

08007bdc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007be4:	bf00      	nop
 8007be6:	370c      	adds	r7, #12
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr

08007bf0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007bf0:	b084      	sub	sp, #16
 8007bf2:	b580      	push	{r7, lr}
 8007bf4:	b084      	sub	sp, #16
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
 8007bfa:	f107 001c 	add.w	r0, r7, #28
 8007bfe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007c02:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d123      	bne.n	8007c52 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c0e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	68db      	ldr	r3, [r3, #12]
 8007c1a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007c1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c22:	687a      	ldr	r2, [r7, #4]
 8007c24:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	68db      	ldr	r3, [r3, #12]
 8007c2a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007c32:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007c36:	2b01      	cmp	r3, #1
 8007c38:	d105      	bne.n	8007c46 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	68db      	ldr	r3, [r3, #12]
 8007c3e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f001 fae2 	bl	8009210 <USB_CoreReset>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	73fb      	strb	r3, [r7, #15]
 8007c50:	e01b      	b.n	8007c8a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f001 fad6 	bl	8009210 <USB_CoreReset>
 8007c64:	4603      	mov	r3, r0
 8007c66:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007c68:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d106      	bne.n	8007c7e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c74:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	639a      	str	r2, [r3, #56]	@ 0x38
 8007c7c:	e005      	b.n	8007c8a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c82:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007c8a:	7fbb      	ldrb	r3, [r7, #30]
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d10b      	bne.n	8007ca8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	f043 0206 	orr.w	r2, r3, #6
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	689b      	ldr	r3, [r3, #8]
 8007ca0:	f043 0220 	orr.w	r2, r3, #32
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3710      	adds	r7, #16
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007cb4:	b004      	add	sp, #16
 8007cb6:	4770      	bx	lr

08007cb8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b087      	sub	sp, #28
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	60b9      	str	r1, [r7, #8]
 8007cc2:	4613      	mov	r3, r2
 8007cc4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007cc6:	79fb      	ldrb	r3, [r7, #7]
 8007cc8:	2b02      	cmp	r3, #2
 8007cca:	d165      	bne.n	8007d98 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	4a41      	ldr	r2, [pc, #260]	@ (8007dd4 <USB_SetTurnaroundTime+0x11c>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d906      	bls.n	8007ce2 <USB_SetTurnaroundTime+0x2a>
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	4a40      	ldr	r2, [pc, #256]	@ (8007dd8 <USB_SetTurnaroundTime+0x120>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d202      	bcs.n	8007ce2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007cdc:	230f      	movs	r3, #15
 8007cde:	617b      	str	r3, [r7, #20]
 8007ce0:	e062      	b.n	8007da8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	4a3c      	ldr	r2, [pc, #240]	@ (8007dd8 <USB_SetTurnaroundTime+0x120>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d306      	bcc.n	8007cf8 <USB_SetTurnaroundTime+0x40>
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	4a3b      	ldr	r2, [pc, #236]	@ (8007ddc <USB_SetTurnaroundTime+0x124>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d202      	bcs.n	8007cf8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007cf2:	230e      	movs	r3, #14
 8007cf4:	617b      	str	r3, [r7, #20]
 8007cf6:	e057      	b.n	8007da8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	4a38      	ldr	r2, [pc, #224]	@ (8007ddc <USB_SetTurnaroundTime+0x124>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d306      	bcc.n	8007d0e <USB_SetTurnaroundTime+0x56>
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	4a37      	ldr	r2, [pc, #220]	@ (8007de0 <USB_SetTurnaroundTime+0x128>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d202      	bcs.n	8007d0e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007d08:	230d      	movs	r3, #13
 8007d0a:	617b      	str	r3, [r7, #20]
 8007d0c:	e04c      	b.n	8007da8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	4a33      	ldr	r2, [pc, #204]	@ (8007de0 <USB_SetTurnaroundTime+0x128>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d306      	bcc.n	8007d24 <USB_SetTurnaroundTime+0x6c>
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	4a32      	ldr	r2, [pc, #200]	@ (8007de4 <USB_SetTurnaroundTime+0x12c>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d802      	bhi.n	8007d24 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007d1e:	230c      	movs	r3, #12
 8007d20:	617b      	str	r3, [r7, #20]
 8007d22:	e041      	b.n	8007da8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	4a2f      	ldr	r2, [pc, #188]	@ (8007de4 <USB_SetTurnaroundTime+0x12c>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d906      	bls.n	8007d3a <USB_SetTurnaroundTime+0x82>
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	4a2e      	ldr	r2, [pc, #184]	@ (8007de8 <USB_SetTurnaroundTime+0x130>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d802      	bhi.n	8007d3a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007d34:	230b      	movs	r3, #11
 8007d36:	617b      	str	r3, [r7, #20]
 8007d38:	e036      	b.n	8007da8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	4a2a      	ldr	r2, [pc, #168]	@ (8007de8 <USB_SetTurnaroundTime+0x130>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d906      	bls.n	8007d50 <USB_SetTurnaroundTime+0x98>
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	4a29      	ldr	r2, [pc, #164]	@ (8007dec <USB_SetTurnaroundTime+0x134>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d802      	bhi.n	8007d50 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007d4a:	230a      	movs	r3, #10
 8007d4c:	617b      	str	r3, [r7, #20]
 8007d4e:	e02b      	b.n	8007da8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	4a26      	ldr	r2, [pc, #152]	@ (8007dec <USB_SetTurnaroundTime+0x134>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d906      	bls.n	8007d66 <USB_SetTurnaroundTime+0xae>
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	4a25      	ldr	r2, [pc, #148]	@ (8007df0 <USB_SetTurnaroundTime+0x138>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d202      	bcs.n	8007d66 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007d60:	2309      	movs	r3, #9
 8007d62:	617b      	str	r3, [r7, #20]
 8007d64:	e020      	b.n	8007da8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	4a21      	ldr	r2, [pc, #132]	@ (8007df0 <USB_SetTurnaroundTime+0x138>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d306      	bcc.n	8007d7c <USB_SetTurnaroundTime+0xc4>
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	4a20      	ldr	r2, [pc, #128]	@ (8007df4 <USB_SetTurnaroundTime+0x13c>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d802      	bhi.n	8007d7c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007d76:	2308      	movs	r3, #8
 8007d78:	617b      	str	r3, [r7, #20]
 8007d7a:	e015      	b.n	8007da8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	4a1d      	ldr	r2, [pc, #116]	@ (8007df4 <USB_SetTurnaroundTime+0x13c>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d906      	bls.n	8007d92 <USB_SetTurnaroundTime+0xda>
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	4a1c      	ldr	r2, [pc, #112]	@ (8007df8 <USB_SetTurnaroundTime+0x140>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d202      	bcs.n	8007d92 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007d8c:	2307      	movs	r3, #7
 8007d8e:	617b      	str	r3, [r7, #20]
 8007d90:	e00a      	b.n	8007da8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007d92:	2306      	movs	r3, #6
 8007d94:	617b      	str	r3, [r7, #20]
 8007d96:	e007      	b.n	8007da8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007d98:	79fb      	ldrb	r3, [r7, #7]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d102      	bne.n	8007da4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007d9e:	2309      	movs	r3, #9
 8007da0:	617b      	str	r3, [r7, #20]
 8007da2:	e001      	b.n	8007da8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007da4:	2309      	movs	r3, #9
 8007da6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	68db      	ldr	r3, [r3, #12]
 8007dac:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	68da      	ldr	r2, [r3, #12]
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	029b      	lsls	r3, r3, #10
 8007dbc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007dc0:	431a      	orrs	r2, r3
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007dc6:	2300      	movs	r3, #0
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	371c      	adds	r7, #28
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr
 8007dd4:	00d8acbf 	.word	0x00d8acbf
 8007dd8:	00e4e1c0 	.word	0x00e4e1c0
 8007ddc:	00f42400 	.word	0x00f42400
 8007de0:	01067380 	.word	0x01067380
 8007de4:	011a499f 	.word	0x011a499f
 8007de8:	01312cff 	.word	0x01312cff
 8007dec:	014ca43f 	.word	0x014ca43f
 8007df0:	016e3600 	.word	0x016e3600
 8007df4:	01a6ab1f 	.word	0x01a6ab1f
 8007df8:	01e84800 	.word	0x01e84800

08007dfc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	f043 0201 	orr.w	r2, r3, #1
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007e10:	2300      	movs	r3, #0
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	370c      	adds	r7, #12
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr

08007e1e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e1e:	b480      	push	{r7}
 8007e20:	b083      	sub	sp, #12
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	689b      	ldr	r3, [r3, #8]
 8007e2a:	f023 0201 	bic.w	r2, r3, #1
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007e32:	2300      	movs	r3, #0
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	370c      	adds	r7, #12
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr

08007e40 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b084      	sub	sp, #16
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	460b      	mov	r3, r1
 8007e4a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	68db      	ldr	r3, [r3, #12]
 8007e54:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007e5c:	78fb      	ldrb	r3, [r7, #3]
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	d115      	bne.n	8007e8e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007e6e:	200a      	movs	r0, #10
 8007e70:	f7fa fd8c 	bl	800298c <HAL_Delay>
      ms += 10U;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	330a      	adds	r3, #10
 8007e78:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f001 f939 	bl	80090f2 <USB_GetMode>
 8007e80:	4603      	mov	r3, r0
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	d01e      	beq.n	8007ec4 <USB_SetCurrentMode+0x84>
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2bc7      	cmp	r3, #199	@ 0xc7
 8007e8a:	d9f0      	bls.n	8007e6e <USB_SetCurrentMode+0x2e>
 8007e8c:	e01a      	b.n	8007ec4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007e8e:	78fb      	ldrb	r3, [r7, #3]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d115      	bne.n	8007ec0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	68db      	ldr	r3, [r3, #12]
 8007e98:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007ea0:	200a      	movs	r0, #10
 8007ea2:	f7fa fd73 	bl	800298c <HAL_Delay>
      ms += 10U;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	330a      	adds	r3, #10
 8007eaa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f001 f920 	bl	80090f2 <USB_GetMode>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d005      	beq.n	8007ec4 <USB_SetCurrentMode+0x84>
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2bc7      	cmp	r3, #199	@ 0xc7
 8007ebc:	d9f0      	bls.n	8007ea0 <USB_SetCurrentMode+0x60>
 8007ebe:	e001      	b.n	8007ec4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	e005      	b.n	8007ed0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2bc8      	cmp	r3, #200	@ 0xc8
 8007ec8:	d101      	bne.n	8007ece <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	e000      	b.n	8007ed0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007ece:	2300      	movs	r3, #0
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3710      	adds	r7, #16
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ed8:	b084      	sub	sp, #16
 8007eda:	b580      	push	{r7, lr}
 8007edc:	b086      	sub	sp, #24
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	6078      	str	r0, [r7, #4]
 8007ee2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007ee6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007eea:	2300      	movs	r3, #0
 8007eec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	613b      	str	r3, [r7, #16]
 8007ef6:	e009      	b.n	8007f0c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007ef8:	687a      	ldr	r2, [r7, #4]
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	3340      	adds	r3, #64	@ 0x40
 8007efe:	009b      	lsls	r3, r3, #2
 8007f00:	4413      	add	r3, r2
 8007f02:	2200      	movs	r2, #0
 8007f04:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	3301      	adds	r3, #1
 8007f0a:	613b      	str	r3, [r7, #16]
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	2b0e      	cmp	r3, #14
 8007f10:	d9f2      	bls.n	8007ef8 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007f12:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d11c      	bne.n	8007f54 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	68fa      	ldr	r2, [r7, #12]
 8007f24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007f28:	f043 0302 	orr.w	r3, r3, #2
 8007f2c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f32:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	601a      	str	r2, [r3, #0]
 8007f52:	e005      	b.n	8007f60 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f58:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007f66:	461a      	mov	r2, r3
 8007f68:	2300      	movs	r3, #0
 8007f6a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007f6c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d10d      	bne.n	8007f90 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007f74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d104      	bne.n	8007f86 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007f7c:	2100      	movs	r1, #0
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 f968 	bl	8008254 <USB_SetDevSpeed>
 8007f84:	e008      	b.n	8007f98 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007f86:	2101      	movs	r1, #1
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 f963 	bl	8008254 <USB_SetDevSpeed>
 8007f8e:	e003      	b.n	8007f98 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007f90:	2103      	movs	r1, #3
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 f95e 	bl	8008254 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007f98:	2110      	movs	r1, #16
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 f8fa 	bl	8008194 <USB_FlushTxFifo>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d001      	beq.n	8007faa <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 f924 	bl	80081f8 <USB_FlushRxFifo>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d001      	beq.n	8007fba <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fcc:	461a      	mov	r2, r3
 8007fce:	2300      	movs	r3, #0
 8007fd0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fd8:	461a      	mov	r2, r3
 8007fda:	2300      	movs	r3, #0
 8007fdc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007fde:	2300      	movs	r3, #0
 8007fe0:	613b      	str	r3, [r7, #16]
 8007fe2:	e043      	b.n	800806c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	015a      	lsls	r2, r3, #5
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	4413      	add	r3, r2
 8007fec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007ff6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ffa:	d118      	bne.n	800802e <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d10a      	bne.n	8008018 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	015a      	lsls	r2, r3, #5
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	4413      	add	r3, r2
 800800a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800800e:	461a      	mov	r2, r3
 8008010:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008014:	6013      	str	r3, [r2, #0]
 8008016:	e013      	b.n	8008040 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	015a      	lsls	r2, r3, #5
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	4413      	add	r3, r2
 8008020:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008024:	461a      	mov	r2, r3
 8008026:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800802a:	6013      	str	r3, [r2, #0]
 800802c:	e008      	b.n	8008040 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	015a      	lsls	r2, r3, #5
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	4413      	add	r3, r2
 8008036:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800803a:	461a      	mov	r2, r3
 800803c:	2300      	movs	r3, #0
 800803e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	015a      	lsls	r2, r3, #5
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	4413      	add	r3, r2
 8008048:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800804c:	461a      	mov	r2, r3
 800804e:	2300      	movs	r3, #0
 8008050:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	015a      	lsls	r2, r3, #5
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	4413      	add	r3, r2
 800805a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800805e:	461a      	mov	r2, r3
 8008060:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008064:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	3301      	adds	r3, #1
 800806a:	613b      	str	r3, [r7, #16]
 800806c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008070:	461a      	mov	r2, r3
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	4293      	cmp	r3, r2
 8008076:	d3b5      	bcc.n	8007fe4 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008078:	2300      	movs	r3, #0
 800807a:	613b      	str	r3, [r7, #16]
 800807c:	e043      	b.n	8008106 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	015a      	lsls	r2, r3, #5
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	4413      	add	r3, r2
 8008086:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008090:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008094:	d118      	bne.n	80080c8 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d10a      	bne.n	80080b2 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	015a      	lsls	r2, r3, #5
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	4413      	add	r3, r2
 80080a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080a8:	461a      	mov	r2, r3
 80080aa:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80080ae:	6013      	str	r3, [r2, #0]
 80080b0:	e013      	b.n	80080da <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	015a      	lsls	r2, r3, #5
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	4413      	add	r3, r2
 80080ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080be:	461a      	mov	r2, r3
 80080c0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80080c4:	6013      	str	r3, [r2, #0]
 80080c6:	e008      	b.n	80080da <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	015a      	lsls	r2, r3, #5
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	4413      	add	r3, r2
 80080d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080d4:	461a      	mov	r2, r3
 80080d6:	2300      	movs	r3, #0
 80080d8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	015a      	lsls	r2, r3, #5
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	4413      	add	r3, r2
 80080e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080e6:	461a      	mov	r2, r3
 80080e8:	2300      	movs	r3, #0
 80080ea:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	015a      	lsls	r2, r3, #5
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	4413      	add	r3, r2
 80080f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080f8:	461a      	mov	r2, r3
 80080fa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80080fe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	3301      	adds	r3, #1
 8008104:	613b      	str	r3, [r7, #16]
 8008106:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800810a:	461a      	mov	r2, r3
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	4293      	cmp	r3, r2
 8008110:	d3b5      	bcc.n	800807e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008118:	691b      	ldr	r3, [r3, #16]
 800811a:	68fa      	ldr	r2, [r7, #12]
 800811c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008120:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008124:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2200      	movs	r2, #0
 800812a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008132:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008134:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008138:	2b00      	cmp	r3, #0
 800813a:	d105      	bne.n	8008148 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	699b      	ldr	r3, [r3, #24]
 8008140:	f043 0210 	orr.w	r2, r3, #16
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	699a      	ldr	r2, [r3, #24]
 800814c:	4b10      	ldr	r3, [pc, #64]	@ (8008190 <USB_DevInit+0x2b8>)
 800814e:	4313      	orrs	r3, r2
 8008150:	687a      	ldr	r2, [r7, #4]
 8008152:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008154:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008158:	2b00      	cmp	r3, #0
 800815a:	d005      	beq.n	8008168 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	699b      	ldr	r3, [r3, #24]
 8008160:	f043 0208 	orr.w	r2, r3, #8
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008168:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800816c:	2b01      	cmp	r3, #1
 800816e:	d107      	bne.n	8008180 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	699b      	ldr	r3, [r3, #24]
 8008174:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008178:	f043 0304 	orr.w	r3, r3, #4
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008180:	7dfb      	ldrb	r3, [r7, #23]
}
 8008182:	4618      	mov	r0, r3
 8008184:	3718      	adds	r7, #24
 8008186:	46bd      	mov	sp, r7
 8008188:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800818c:	b004      	add	sp, #16
 800818e:	4770      	bx	lr
 8008190:	803c3800 	.word	0x803c3800

08008194 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008194:	b480      	push	{r7}
 8008196:	b085      	sub	sp, #20
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800819e:	2300      	movs	r3, #0
 80081a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	3301      	adds	r3, #1
 80081a6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80081ae:	d901      	bls.n	80081b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80081b0:	2303      	movs	r3, #3
 80081b2:	e01b      	b.n	80081ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	691b      	ldr	r3, [r3, #16]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	daf2      	bge.n	80081a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80081bc:	2300      	movs	r3, #0
 80081be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	019b      	lsls	r3, r3, #6
 80081c4:	f043 0220 	orr.w	r2, r3, #32
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	3301      	adds	r3, #1
 80081d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80081d8:	d901      	bls.n	80081de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80081da:	2303      	movs	r3, #3
 80081dc:	e006      	b.n	80081ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	691b      	ldr	r3, [r3, #16]
 80081e2:	f003 0320 	and.w	r3, r3, #32
 80081e6:	2b20      	cmp	r3, #32
 80081e8:	d0f0      	beq.n	80081cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80081ea:	2300      	movs	r3, #0
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3714      	adds	r7, #20
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr

080081f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b085      	sub	sp, #20
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008200:	2300      	movs	r3, #0
 8008202:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	3301      	adds	r3, #1
 8008208:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008210:	d901      	bls.n	8008216 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008212:	2303      	movs	r3, #3
 8008214:	e018      	b.n	8008248 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	691b      	ldr	r3, [r3, #16]
 800821a:	2b00      	cmp	r3, #0
 800821c:	daf2      	bge.n	8008204 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800821e:	2300      	movs	r3, #0
 8008220:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2210      	movs	r2, #16
 8008226:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	3301      	adds	r3, #1
 800822c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008234:	d901      	bls.n	800823a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008236:	2303      	movs	r3, #3
 8008238:	e006      	b.n	8008248 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	691b      	ldr	r3, [r3, #16]
 800823e:	f003 0310 	and.w	r3, r3, #16
 8008242:	2b10      	cmp	r3, #16
 8008244:	d0f0      	beq.n	8008228 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008246:	2300      	movs	r3, #0
}
 8008248:	4618      	mov	r0, r3
 800824a:	3714      	adds	r7, #20
 800824c:	46bd      	mov	sp, r7
 800824e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008252:	4770      	bx	lr

08008254 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008254:	b480      	push	{r7}
 8008256:	b085      	sub	sp, #20
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	460b      	mov	r3, r1
 800825e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	78fb      	ldrb	r3, [r7, #3]
 800826e:	68f9      	ldr	r1, [r7, #12]
 8008270:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008274:	4313      	orrs	r3, r2
 8008276:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008278:	2300      	movs	r3, #0
}
 800827a:	4618      	mov	r0, r3
 800827c:	3714      	adds	r7, #20
 800827e:	46bd      	mov	sp, r7
 8008280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008284:	4770      	bx	lr

08008286 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8008286:	b480      	push	{r7}
 8008288:	b087      	sub	sp, #28
 800828a:	af00      	add	r7, sp, #0
 800828c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008298:	689b      	ldr	r3, [r3, #8]
 800829a:	f003 0306 	and.w	r3, r3, #6
 800829e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d102      	bne.n	80082ac <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80082a6:	2300      	movs	r3, #0
 80082a8:	75fb      	strb	r3, [r7, #23]
 80082aa:	e00a      	b.n	80082c2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2b02      	cmp	r3, #2
 80082b0:	d002      	beq.n	80082b8 <USB_GetDevSpeed+0x32>
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2b06      	cmp	r3, #6
 80082b6:	d102      	bne.n	80082be <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80082b8:	2302      	movs	r3, #2
 80082ba:	75fb      	strb	r3, [r7, #23]
 80082bc:	e001      	b.n	80082c2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80082be:	230f      	movs	r3, #15
 80082c0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80082c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	371c      	adds	r7, #28
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr

080082d0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b085      	sub	sp, #20
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	785b      	ldrb	r3, [r3, #1]
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	d13a      	bne.n	8008362 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082f2:	69da      	ldr	r2, [r3, #28]
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	781b      	ldrb	r3, [r3, #0]
 80082f8:	f003 030f 	and.w	r3, r3, #15
 80082fc:	2101      	movs	r1, #1
 80082fe:	fa01 f303 	lsl.w	r3, r1, r3
 8008302:	b29b      	uxth	r3, r3
 8008304:	68f9      	ldr	r1, [r7, #12]
 8008306:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800830a:	4313      	orrs	r3, r2
 800830c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	015a      	lsls	r2, r3, #5
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	4413      	add	r3, r2
 8008316:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008320:	2b00      	cmp	r3, #0
 8008322:	d155      	bne.n	80083d0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	015a      	lsls	r2, r3, #5
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	4413      	add	r3, r2
 800832c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	689b      	ldr	r3, [r3, #8]
 8008336:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	791b      	ldrb	r3, [r3, #4]
 800833e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008340:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	059b      	lsls	r3, r3, #22
 8008346:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008348:	4313      	orrs	r3, r2
 800834a:	68ba      	ldr	r2, [r7, #8]
 800834c:	0151      	lsls	r1, r2, #5
 800834e:	68fa      	ldr	r2, [r7, #12]
 8008350:	440a      	add	r2, r1
 8008352:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008356:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800835a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800835e:	6013      	str	r3, [r2, #0]
 8008360:	e036      	b.n	80083d0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008368:	69da      	ldr	r2, [r3, #28]
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	f003 030f 	and.w	r3, r3, #15
 8008372:	2101      	movs	r1, #1
 8008374:	fa01 f303 	lsl.w	r3, r1, r3
 8008378:	041b      	lsls	r3, r3, #16
 800837a:	68f9      	ldr	r1, [r7, #12]
 800837c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008380:	4313      	orrs	r3, r2
 8008382:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	015a      	lsls	r2, r3, #5
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	4413      	add	r3, r2
 800838c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008396:	2b00      	cmp	r3, #0
 8008398:	d11a      	bne.n	80083d0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	015a      	lsls	r2, r3, #5
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	4413      	add	r3, r2
 80083a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083a6:	681a      	ldr	r2, [r3, #0]
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	791b      	ldrb	r3, [r3, #4]
 80083b4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80083b6:	430b      	orrs	r3, r1
 80083b8:	4313      	orrs	r3, r2
 80083ba:	68ba      	ldr	r2, [r7, #8]
 80083bc:	0151      	lsls	r1, r2, #5
 80083be:	68fa      	ldr	r2, [r7, #12]
 80083c0:	440a      	add	r2, r1
 80083c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80083c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80083ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80083ce:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80083d0:	2300      	movs	r3, #0
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3714      	adds	r7, #20
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr
	...

080083e0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b085      	sub	sp, #20
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	785b      	ldrb	r3, [r3, #1]
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d161      	bne.n	80084c0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	015a      	lsls	r2, r3, #5
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	4413      	add	r3, r2
 8008404:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800840e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008412:	d11f      	bne.n	8008454 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	015a      	lsls	r2, r3, #5
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	4413      	add	r3, r2
 800841c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	68ba      	ldr	r2, [r7, #8]
 8008424:	0151      	lsls	r1, r2, #5
 8008426:	68fa      	ldr	r2, [r7, #12]
 8008428:	440a      	add	r2, r1
 800842a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800842e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008432:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	015a      	lsls	r2, r3, #5
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	4413      	add	r3, r2
 800843c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	68ba      	ldr	r2, [r7, #8]
 8008444:	0151      	lsls	r1, r2, #5
 8008446:	68fa      	ldr	r2, [r7, #12]
 8008448:	440a      	add	r2, r1
 800844a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800844e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008452:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800845a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	f003 030f 	and.w	r3, r3, #15
 8008464:	2101      	movs	r1, #1
 8008466:	fa01 f303 	lsl.w	r3, r1, r3
 800846a:	b29b      	uxth	r3, r3
 800846c:	43db      	mvns	r3, r3
 800846e:	68f9      	ldr	r1, [r7, #12]
 8008470:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008474:	4013      	ands	r3, r2
 8008476:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800847e:	69da      	ldr	r2, [r3, #28]
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	f003 030f 	and.w	r3, r3, #15
 8008488:	2101      	movs	r1, #1
 800848a:	fa01 f303 	lsl.w	r3, r1, r3
 800848e:	b29b      	uxth	r3, r3
 8008490:	43db      	mvns	r3, r3
 8008492:	68f9      	ldr	r1, [r7, #12]
 8008494:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008498:	4013      	ands	r3, r2
 800849a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	015a      	lsls	r2, r3, #5
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	4413      	add	r3, r2
 80084a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084a8:	681a      	ldr	r2, [r3, #0]
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	0159      	lsls	r1, r3, #5
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	440b      	add	r3, r1
 80084b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084b6:	4619      	mov	r1, r3
 80084b8:	4b35      	ldr	r3, [pc, #212]	@ (8008590 <USB_DeactivateEndpoint+0x1b0>)
 80084ba:	4013      	ands	r3, r2
 80084bc:	600b      	str	r3, [r1, #0]
 80084be:	e060      	b.n	8008582 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	015a      	lsls	r2, r3, #5
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	4413      	add	r3, r2
 80084c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80084d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80084d6:	d11f      	bne.n	8008518 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	015a      	lsls	r2, r3, #5
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	4413      	add	r3, r2
 80084e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	68ba      	ldr	r2, [r7, #8]
 80084e8:	0151      	lsls	r1, r2, #5
 80084ea:	68fa      	ldr	r2, [r7, #12]
 80084ec:	440a      	add	r2, r1
 80084ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80084f2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80084f6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	015a      	lsls	r2, r3, #5
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	4413      	add	r3, r2
 8008500:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	68ba      	ldr	r2, [r7, #8]
 8008508:	0151      	lsls	r1, r2, #5
 800850a:	68fa      	ldr	r2, [r7, #12]
 800850c:	440a      	add	r2, r1
 800850e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008512:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008516:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800851e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	f003 030f 	and.w	r3, r3, #15
 8008528:	2101      	movs	r1, #1
 800852a:	fa01 f303 	lsl.w	r3, r1, r3
 800852e:	041b      	lsls	r3, r3, #16
 8008530:	43db      	mvns	r3, r3
 8008532:	68f9      	ldr	r1, [r7, #12]
 8008534:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008538:	4013      	ands	r3, r2
 800853a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008542:	69da      	ldr	r2, [r3, #28]
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	781b      	ldrb	r3, [r3, #0]
 8008548:	f003 030f 	and.w	r3, r3, #15
 800854c:	2101      	movs	r1, #1
 800854e:	fa01 f303 	lsl.w	r3, r1, r3
 8008552:	041b      	lsls	r3, r3, #16
 8008554:	43db      	mvns	r3, r3
 8008556:	68f9      	ldr	r1, [r7, #12]
 8008558:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800855c:	4013      	ands	r3, r2
 800855e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	015a      	lsls	r2, r3, #5
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	4413      	add	r3, r2
 8008568:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800856c:	681a      	ldr	r2, [r3, #0]
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	0159      	lsls	r1, r3, #5
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	440b      	add	r3, r1
 8008576:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800857a:	4619      	mov	r1, r3
 800857c:	4b05      	ldr	r3, [pc, #20]	@ (8008594 <USB_DeactivateEndpoint+0x1b4>)
 800857e:	4013      	ands	r3, r2
 8008580:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008582:	2300      	movs	r3, #0
}
 8008584:	4618      	mov	r0, r3
 8008586:	3714      	adds	r7, #20
 8008588:	46bd      	mov	sp, r7
 800858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858e:	4770      	bx	lr
 8008590:	ec337800 	.word	0xec337800
 8008594:	eff37800 	.word	0xeff37800

08008598 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b08a      	sub	sp, #40	@ 0x28
 800859c:	af02      	add	r7, sp, #8
 800859e:	60f8      	str	r0, [r7, #12]
 80085a0:	60b9      	str	r1, [r7, #8]
 80085a2:	4613      	mov	r3, r2
 80085a4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	781b      	ldrb	r3, [r3, #0]
 80085ae:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	785b      	ldrb	r3, [r3, #1]
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	f040 817f 	bne.w	80088b8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	691b      	ldr	r3, [r3, #16]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d132      	bne.n	8008628 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80085c2:	69bb      	ldr	r3, [r7, #24]
 80085c4:	015a      	lsls	r2, r3, #5
 80085c6:	69fb      	ldr	r3, [r7, #28]
 80085c8:	4413      	add	r3, r2
 80085ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085ce:	691b      	ldr	r3, [r3, #16]
 80085d0:	69ba      	ldr	r2, [r7, #24]
 80085d2:	0151      	lsls	r1, r2, #5
 80085d4:	69fa      	ldr	r2, [r7, #28]
 80085d6:	440a      	add	r2, r1
 80085d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80085dc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80085e0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80085e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80085e6:	69bb      	ldr	r3, [r7, #24]
 80085e8:	015a      	lsls	r2, r3, #5
 80085ea:	69fb      	ldr	r3, [r7, #28]
 80085ec:	4413      	add	r3, r2
 80085ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085f2:	691b      	ldr	r3, [r3, #16]
 80085f4:	69ba      	ldr	r2, [r7, #24]
 80085f6:	0151      	lsls	r1, r2, #5
 80085f8:	69fa      	ldr	r2, [r7, #28]
 80085fa:	440a      	add	r2, r1
 80085fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008600:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008604:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008606:	69bb      	ldr	r3, [r7, #24]
 8008608:	015a      	lsls	r2, r3, #5
 800860a:	69fb      	ldr	r3, [r7, #28]
 800860c:	4413      	add	r3, r2
 800860e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008612:	691b      	ldr	r3, [r3, #16]
 8008614:	69ba      	ldr	r2, [r7, #24]
 8008616:	0151      	lsls	r1, r2, #5
 8008618:	69fa      	ldr	r2, [r7, #28]
 800861a:	440a      	add	r2, r1
 800861c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008620:	0cdb      	lsrs	r3, r3, #19
 8008622:	04db      	lsls	r3, r3, #19
 8008624:	6113      	str	r3, [r2, #16]
 8008626:	e097      	b.n	8008758 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008628:	69bb      	ldr	r3, [r7, #24]
 800862a:	015a      	lsls	r2, r3, #5
 800862c:	69fb      	ldr	r3, [r7, #28]
 800862e:	4413      	add	r3, r2
 8008630:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008634:	691b      	ldr	r3, [r3, #16]
 8008636:	69ba      	ldr	r2, [r7, #24]
 8008638:	0151      	lsls	r1, r2, #5
 800863a:	69fa      	ldr	r2, [r7, #28]
 800863c:	440a      	add	r2, r1
 800863e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008642:	0cdb      	lsrs	r3, r3, #19
 8008644:	04db      	lsls	r3, r3, #19
 8008646:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008648:	69bb      	ldr	r3, [r7, #24]
 800864a:	015a      	lsls	r2, r3, #5
 800864c:	69fb      	ldr	r3, [r7, #28]
 800864e:	4413      	add	r3, r2
 8008650:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008654:	691b      	ldr	r3, [r3, #16]
 8008656:	69ba      	ldr	r2, [r7, #24]
 8008658:	0151      	lsls	r1, r2, #5
 800865a:	69fa      	ldr	r2, [r7, #28]
 800865c:	440a      	add	r2, r1
 800865e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008662:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008666:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800866a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800866c:	69bb      	ldr	r3, [r7, #24]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d11a      	bne.n	80086a8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	691a      	ldr	r2, [r3, #16]
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	689b      	ldr	r3, [r3, #8]
 800867a:	429a      	cmp	r2, r3
 800867c:	d903      	bls.n	8008686 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	689a      	ldr	r2, [r3, #8]
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008686:	69bb      	ldr	r3, [r7, #24]
 8008688:	015a      	lsls	r2, r3, #5
 800868a:	69fb      	ldr	r3, [r7, #28]
 800868c:	4413      	add	r3, r2
 800868e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008692:	691b      	ldr	r3, [r3, #16]
 8008694:	69ba      	ldr	r2, [r7, #24]
 8008696:	0151      	lsls	r1, r2, #5
 8008698:	69fa      	ldr	r2, [r7, #28]
 800869a:	440a      	add	r2, r1
 800869c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80086a0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80086a4:	6113      	str	r3, [r2, #16]
 80086a6:	e044      	b.n	8008732 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	691a      	ldr	r2, [r3, #16]
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	689b      	ldr	r3, [r3, #8]
 80086b0:	4413      	add	r3, r2
 80086b2:	1e5a      	subs	r2, r3, #1
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	689b      	ldr	r3, [r3, #8]
 80086b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80086bc:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80086be:	69bb      	ldr	r3, [r7, #24]
 80086c0:	015a      	lsls	r2, r3, #5
 80086c2:	69fb      	ldr	r3, [r7, #28]
 80086c4:	4413      	add	r3, r2
 80086c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086ca:	691a      	ldr	r2, [r3, #16]
 80086cc:	8afb      	ldrh	r3, [r7, #22]
 80086ce:	04d9      	lsls	r1, r3, #19
 80086d0:	4ba4      	ldr	r3, [pc, #656]	@ (8008964 <USB_EPStartXfer+0x3cc>)
 80086d2:	400b      	ands	r3, r1
 80086d4:	69b9      	ldr	r1, [r7, #24]
 80086d6:	0148      	lsls	r0, r1, #5
 80086d8:	69f9      	ldr	r1, [r7, #28]
 80086da:	4401      	add	r1, r0
 80086dc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80086e0:	4313      	orrs	r3, r2
 80086e2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	791b      	ldrb	r3, [r3, #4]
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d122      	bne.n	8008732 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80086ec:	69bb      	ldr	r3, [r7, #24]
 80086ee:	015a      	lsls	r2, r3, #5
 80086f0:	69fb      	ldr	r3, [r7, #28]
 80086f2:	4413      	add	r3, r2
 80086f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086f8:	691b      	ldr	r3, [r3, #16]
 80086fa:	69ba      	ldr	r2, [r7, #24]
 80086fc:	0151      	lsls	r1, r2, #5
 80086fe:	69fa      	ldr	r2, [r7, #28]
 8008700:	440a      	add	r2, r1
 8008702:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008706:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800870a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800870c:	69bb      	ldr	r3, [r7, #24]
 800870e:	015a      	lsls	r2, r3, #5
 8008710:	69fb      	ldr	r3, [r7, #28]
 8008712:	4413      	add	r3, r2
 8008714:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008718:	691a      	ldr	r2, [r3, #16]
 800871a:	8afb      	ldrh	r3, [r7, #22]
 800871c:	075b      	lsls	r3, r3, #29
 800871e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8008722:	69b9      	ldr	r1, [r7, #24]
 8008724:	0148      	lsls	r0, r1, #5
 8008726:	69f9      	ldr	r1, [r7, #28]
 8008728:	4401      	add	r1, r0
 800872a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800872e:	4313      	orrs	r3, r2
 8008730:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008732:	69bb      	ldr	r3, [r7, #24]
 8008734:	015a      	lsls	r2, r3, #5
 8008736:	69fb      	ldr	r3, [r7, #28]
 8008738:	4413      	add	r3, r2
 800873a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800873e:	691a      	ldr	r2, [r3, #16]
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	691b      	ldr	r3, [r3, #16]
 8008744:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008748:	69b9      	ldr	r1, [r7, #24]
 800874a:	0148      	lsls	r0, r1, #5
 800874c:	69f9      	ldr	r1, [r7, #28]
 800874e:	4401      	add	r1, r0
 8008750:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008754:	4313      	orrs	r3, r2
 8008756:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008758:	79fb      	ldrb	r3, [r7, #7]
 800875a:	2b01      	cmp	r3, #1
 800875c:	d14b      	bne.n	80087f6 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	69db      	ldr	r3, [r3, #28]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d009      	beq.n	800877a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008766:	69bb      	ldr	r3, [r7, #24]
 8008768:	015a      	lsls	r2, r3, #5
 800876a:	69fb      	ldr	r3, [r7, #28]
 800876c:	4413      	add	r3, r2
 800876e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008772:	461a      	mov	r2, r3
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	69db      	ldr	r3, [r3, #28]
 8008778:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	791b      	ldrb	r3, [r3, #4]
 800877e:	2b01      	cmp	r3, #1
 8008780:	d128      	bne.n	80087d4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008782:	69fb      	ldr	r3, [r7, #28]
 8008784:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008788:	689b      	ldr	r3, [r3, #8]
 800878a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800878e:	2b00      	cmp	r3, #0
 8008790:	d110      	bne.n	80087b4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008792:	69bb      	ldr	r3, [r7, #24]
 8008794:	015a      	lsls	r2, r3, #5
 8008796:	69fb      	ldr	r3, [r7, #28]
 8008798:	4413      	add	r3, r2
 800879a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	69ba      	ldr	r2, [r7, #24]
 80087a2:	0151      	lsls	r1, r2, #5
 80087a4:	69fa      	ldr	r2, [r7, #28]
 80087a6:	440a      	add	r2, r1
 80087a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087ac:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80087b0:	6013      	str	r3, [r2, #0]
 80087b2:	e00f      	b.n	80087d4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80087b4:	69bb      	ldr	r3, [r7, #24]
 80087b6:	015a      	lsls	r2, r3, #5
 80087b8:	69fb      	ldr	r3, [r7, #28]
 80087ba:	4413      	add	r3, r2
 80087bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	69ba      	ldr	r2, [r7, #24]
 80087c4:	0151      	lsls	r1, r2, #5
 80087c6:	69fa      	ldr	r2, [r7, #28]
 80087c8:	440a      	add	r2, r1
 80087ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80087d2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80087d4:	69bb      	ldr	r3, [r7, #24]
 80087d6:	015a      	lsls	r2, r3, #5
 80087d8:	69fb      	ldr	r3, [r7, #28]
 80087da:	4413      	add	r3, r2
 80087dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	69ba      	ldr	r2, [r7, #24]
 80087e4:	0151      	lsls	r1, r2, #5
 80087e6:	69fa      	ldr	r2, [r7, #28]
 80087e8:	440a      	add	r2, r1
 80087ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087ee:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80087f2:	6013      	str	r3, [r2, #0]
 80087f4:	e166      	b.n	8008ac4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80087f6:	69bb      	ldr	r3, [r7, #24]
 80087f8:	015a      	lsls	r2, r3, #5
 80087fa:	69fb      	ldr	r3, [r7, #28]
 80087fc:	4413      	add	r3, r2
 80087fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	69ba      	ldr	r2, [r7, #24]
 8008806:	0151      	lsls	r1, r2, #5
 8008808:	69fa      	ldr	r2, [r7, #28]
 800880a:	440a      	add	r2, r1
 800880c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008810:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008814:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	791b      	ldrb	r3, [r3, #4]
 800881a:	2b01      	cmp	r3, #1
 800881c:	d015      	beq.n	800884a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	691b      	ldr	r3, [r3, #16]
 8008822:	2b00      	cmp	r3, #0
 8008824:	f000 814e 	beq.w	8008ac4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008828:	69fb      	ldr	r3, [r7, #28]
 800882a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800882e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	781b      	ldrb	r3, [r3, #0]
 8008834:	f003 030f 	and.w	r3, r3, #15
 8008838:	2101      	movs	r1, #1
 800883a:	fa01 f303 	lsl.w	r3, r1, r3
 800883e:	69f9      	ldr	r1, [r7, #28]
 8008840:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008844:	4313      	orrs	r3, r2
 8008846:	634b      	str	r3, [r1, #52]	@ 0x34
 8008848:	e13c      	b.n	8008ac4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800884a:	69fb      	ldr	r3, [r7, #28]
 800884c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008850:	689b      	ldr	r3, [r3, #8]
 8008852:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008856:	2b00      	cmp	r3, #0
 8008858:	d110      	bne.n	800887c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800885a:	69bb      	ldr	r3, [r7, #24]
 800885c:	015a      	lsls	r2, r3, #5
 800885e:	69fb      	ldr	r3, [r7, #28]
 8008860:	4413      	add	r3, r2
 8008862:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	69ba      	ldr	r2, [r7, #24]
 800886a:	0151      	lsls	r1, r2, #5
 800886c:	69fa      	ldr	r2, [r7, #28]
 800886e:	440a      	add	r2, r1
 8008870:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008874:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008878:	6013      	str	r3, [r2, #0]
 800887a:	e00f      	b.n	800889c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800887c:	69bb      	ldr	r3, [r7, #24]
 800887e:	015a      	lsls	r2, r3, #5
 8008880:	69fb      	ldr	r3, [r7, #28]
 8008882:	4413      	add	r3, r2
 8008884:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	69ba      	ldr	r2, [r7, #24]
 800888c:	0151      	lsls	r1, r2, #5
 800888e:	69fa      	ldr	r2, [r7, #28]
 8008890:	440a      	add	r2, r1
 8008892:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008896:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800889a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	68d9      	ldr	r1, [r3, #12]
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	781a      	ldrb	r2, [r3, #0]
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	691b      	ldr	r3, [r3, #16]
 80088a8:	b298      	uxth	r0, r3
 80088aa:	79fb      	ldrb	r3, [r7, #7]
 80088ac:	9300      	str	r3, [sp, #0]
 80088ae:	4603      	mov	r3, r0
 80088b0:	68f8      	ldr	r0, [r7, #12]
 80088b2:	f000 f9b9 	bl	8008c28 <USB_WritePacket>
 80088b6:	e105      	b.n	8008ac4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80088b8:	69bb      	ldr	r3, [r7, #24]
 80088ba:	015a      	lsls	r2, r3, #5
 80088bc:	69fb      	ldr	r3, [r7, #28]
 80088be:	4413      	add	r3, r2
 80088c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088c4:	691b      	ldr	r3, [r3, #16]
 80088c6:	69ba      	ldr	r2, [r7, #24]
 80088c8:	0151      	lsls	r1, r2, #5
 80088ca:	69fa      	ldr	r2, [r7, #28]
 80088cc:	440a      	add	r2, r1
 80088ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80088d2:	0cdb      	lsrs	r3, r3, #19
 80088d4:	04db      	lsls	r3, r3, #19
 80088d6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80088d8:	69bb      	ldr	r3, [r7, #24]
 80088da:	015a      	lsls	r2, r3, #5
 80088dc:	69fb      	ldr	r3, [r7, #28]
 80088de:	4413      	add	r3, r2
 80088e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088e4:	691b      	ldr	r3, [r3, #16]
 80088e6:	69ba      	ldr	r2, [r7, #24]
 80088e8:	0151      	lsls	r1, r2, #5
 80088ea:	69fa      	ldr	r2, [r7, #28]
 80088ec:	440a      	add	r2, r1
 80088ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80088f2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80088f6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80088fa:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80088fc:	69bb      	ldr	r3, [r7, #24]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d132      	bne.n	8008968 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	691b      	ldr	r3, [r3, #16]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d003      	beq.n	8008912 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	689a      	ldr	r2, [r3, #8]
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	689a      	ldr	r2, [r3, #8]
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800891a:	69bb      	ldr	r3, [r7, #24]
 800891c:	015a      	lsls	r2, r3, #5
 800891e:	69fb      	ldr	r3, [r7, #28]
 8008920:	4413      	add	r3, r2
 8008922:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008926:	691a      	ldr	r2, [r3, #16]
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	6a1b      	ldr	r3, [r3, #32]
 800892c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008930:	69b9      	ldr	r1, [r7, #24]
 8008932:	0148      	lsls	r0, r1, #5
 8008934:	69f9      	ldr	r1, [r7, #28]
 8008936:	4401      	add	r1, r0
 8008938:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800893c:	4313      	orrs	r3, r2
 800893e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008940:	69bb      	ldr	r3, [r7, #24]
 8008942:	015a      	lsls	r2, r3, #5
 8008944:	69fb      	ldr	r3, [r7, #28]
 8008946:	4413      	add	r3, r2
 8008948:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800894c:	691b      	ldr	r3, [r3, #16]
 800894e:	69ba      	ldr	r2, [r7, #24]
 8008950:	0151      	lsls	r1, r2, #5
 8008952:	69fa      	ldr	r2, [r7, #28]
 8008954:	440a      	add	r2, r1
 8008956:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800895a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800895e:	6113      	str	r3, [r2, #16]
 8008960:	e062      	b.n	8008a28 <USB_EPStartXfer+0x490>
 8008962:	bf00      	nop
 8008964:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	691b      	ldr	r3, [r3, #16]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d123      	bne.n	80089b8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008970:	69bb      	ldr	r3, [r7, #24]
 8008972:	015a      	lsls	r2, r3, #5
 8008974:	69fb      	ldr	r3, [r7, #28]
 8008976:	4413      	add	r3, r2
 8008978:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800897c:	691a      	ldr	r2, [r3, #16]
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	689b      	ldr	r3, [r3, #8]
 8008982:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008986:	69b9      	ldr	r1, [r7, #24]
 8008988:	0148      	lsls	r0, r1, #5
 800898a:	69f9      	ldr	r1, [r7, #28]
 800898c:	4401      	add	r1, r0
 800898e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008992:	4313      	orrs	r3, r2
 8008994:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008996:	69bb      	ldr	r3, [r7, #24]
 8008998:	015a      	lsls	r2, r3, #5
 800899a:	69fb      	ldr	r3, [r7, #28]
 800899c:	4413      	add	r3, r2
 800899e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089a2:	691b      	ldr	r3, [r3, #16]
 80089a4:	69ba      	ldr	r2, [r7, #24]
 80089a6:	0151      	lsls	r1, r2, #5
 80089a8:	69fa      	ldr	r2, [r7, #28]
 80089aa:	440a      	add	r2, r1
 80089ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80089b0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80089b4:	6113      	str	r3, [r2, #16]
 80089b6:	e037      	b.n	8008a28 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	691a      	ldr	r2, [r3, #16]
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	689b      	ldr	r3, [r3, #8]
 80089c0:	4413      	add	r3, r2
 80089c2:	1e5a      	subs	r2, r3, #1
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	689b      	ldr	r3, [r3, #8]
 80089c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80089cc:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	689b      	ldr	r3, [r3, #8]
 80089d2:	8afa      	ldrh	r2, [r7, #22]
 80089d4:	fb03 f202 	mul.w	r2, r3, r2
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80089dc:	69bb      	ldr	r3, [r7, #24]
 80089de:	015a      	lsls	r2, r3, #5
 80089e0:	69fb      	ldr	r3, [r7, #28]
 80089e2:	4413      	add	r3, r2
 80089e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089e8:	691a      	ldr	r2, [r3, #16]
 80089ea:	8afb      	ldrh	r3, [r7, #22]
 80089ec:	04d9      	lsls	r1, r3, #19
 80089ee:	4b38      	ldr	r3, [pc, #224]	@ (8008ad0 <USB_EPStartXfer+0x538>)
 80089f0:	400b      	ands	r3, r1
 80089f2:	69b9      	ldr	r1, [r7, #24]
 80089f4:	0148      	lsls	r0, r1, #5
 80089f6:	69f9      	ldr	r1, [r7, #28]
 80089f8:	4401      	add	r1, r0
 80089fa:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80089fe:	4313      	orrs	r3, r2
 8008a00:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008a02:	69bb      	ldr	r3, [r7, #24]
 8008a04:	015a      	lsls	r2, r3, #5
 8008a06:	69fb      	ldr	r3, [r7, #28]
 8008a08:	4413      	add	r3, r2
 8008a0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a0e:	691a      	ldr	r2, [r3, #16]
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	6a1b      	ldr	r3, [r3, #32]
 8008a14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a18:	69b9      	ldr	r1, [r7, #24]
 8008a1a:	0148      	lsls	r0, r1, #5
 8008a1c:	69f9      	ldr	r1, [r7, #28]
 8008a1e:	4401      	add	r1, r0
 8008a20:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008a24:	4313      	orrs	r3, r2
 8008a26:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008a28:	79fb      	ldrb	r3, [r7, #7]
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	d10d      	bne.n	8008a4a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	68db      	ldr	r3, [r3, #12]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d009      	beq.n	8008a4a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	68d9      	ldr	r1, [r3, #12]
 8008a3a:	69bb      	ldr	r3, [r7, #24]
 8008a3c:	015a      	lsls	r2, r3, #5
 8008a3e:	69fb      	ldr	r3, [r7, #28]
 8008a40:	4413      	add	r3, r2
 8008a42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a46:	460a      	mov	r2, r1
 8008a48:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	791b      	ldrb	r3, [r3, #4]
 8008a4e:	2b01      	cmp	r3, #1
 8008a50:	d128      	bne.n	8008aa4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008a52:	69fb      	ldr	r3, [r7, #28]
 8008a54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a58:	689b      	ldr	r3, [r3, #8]
 8008a5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d110      	bne.n	8008a84 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008a62:	69bb      	ldr	r3, [r7, #24]
 8008a64:	015a      	lsls	r2, r3, #5
 8008a66:	69fb      	ldr	r3, [r7, #28]
 8008a68:	4413      	add	r3, r2
 8008a6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	69ba      	ldr	r2, [r7, #24]
 8008a72:	0151      	lsls	r1, r2, #5
 8008a74:	69fa      	ldr	r2, [r7, #28]
 8008a76:	440a      	add	r2, r1
 8008a78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a7c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008a80:	6013      	str	r3, [r2, #0]
 8008a82:	e00f      	b.n	8008aa4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008a84:	69bb      	ldr	r3, [r7, #24]
 8008a86:	015a      	lsls	r2, r3, #5
 8008a88:	69fb      	ldr	r3, [r7, #28]
 8008a8a:	4413      	add	r3, r2
 8008a8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	69ba      	ldr	r2, [r7, #24]
 8008a94:	0151      	lsls	r1, r2, #5
 8008a96:	69fa      	ldr	r2, [r7, #28]
 8008a98:	440a      	add	r2, r1
 8008a9a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008aa2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008aa4:	69bb      	ldr	r3, [r7, #24]
 8008aa6:	015a      	lsls	r2, r3, #5
 8008aa8:	69fb      	ldr	r3, [r7, #28]
 8008aaa:	4413      	add	r3, r2
 8008aac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	69ba      	ldr	r2, [r7, #24]
 8008ab4:	0151      	lsls	r1, r2, #5
 8008ab6:	69fa      	ldr	r2, [r7, #28]
 8008ab8:	440a      	add	r2, r1
 8008aba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008abe:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008ac2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008ac4:	2300      	movs	r3, #0
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3720      	adds	r7, #32
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
 8008ace:	bf00      	nop
 8008ad0:	1ff80000 	.word	0x1ff80000

08008ad4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b087      	sub	sp, #28
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	785b      	ldrb	r3, [r3, #1]
 8008aee:	2b01      	cmp	r3, #1
 8008af0:	d14a      	bne.n	8008b88 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	781b      	ldrb	r3, [r3, #0]
 8008af6:	015a      	lsls	r2, r3, #5
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	4413      	add	r3, r2
 8008afc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008b06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008b0a:	f040 8086 	bne.w	8008c1a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	781b      	ldrb	r3, [r3, #0]
 8008b12:	015a      	lsls	r2, r3, #5
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	4413      	add	r3, r2
 8008b18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	683a      	ldr	r2, [r7, #0]
 8008b20:	7812      	ldrb	r2, [r2, #0]
 8008b22:	0151      	lsls	r1, r2, #5
 8008b24:	693a      	ldr	r2, [r7, #16]
 8008b26:	440a      	add	r2, r1
 8008b28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b2c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008b30:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	015a      	lsls	r2, r3, #5
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	4413      	add	r3, r2
 8008b3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	683a      	ldr	r2, [r7, #0]
 8008b44:	7812      	ldrb	r2, [r2, #0]
 8008b46:	0151      	lsls	r1, r2, #5
 8008b48:	693a      	ldr	r2, [r7, #16]
 8008b4a:	440a      	add	r2, r1
 8008b4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b50:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008b54:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	3301      	adds	r3, #1
 8008b5a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d902      	bls.n	8008b6c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008b66:	2301      	movs	r3, #1
 8008b68:	75fb      	strb	r3, [r7, #23]
          break;
 8008b6a:	e056      	b.n	8008c1a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	781b      	ldrb	r3, [r3, #0]
 8008b70:	015a      	lsls	r2, r3, #5
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	4413      	add	r3, r2
 8008b76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008b80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008b84:	d0e7      	beq.n	8008b56 <USB_EPStopXfer+0x82>
 8008b86:	e048      	b.n	8008c1a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	781b      	ldrb	r3, [r3, #0]
 8008b8c:	015a      	lsls	r2, r3, #5
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	4413      	add	r3, r2
 8008b92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008b9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008ba0:	d13b      	bne.n	8008c1a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	781b      	ldrb	r3, [r3, #0]
 8008ba6:	015a      	lsls	r2, r3, #5
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	4413      	add	r3, r2
 8008bac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	683a      	ldr	r2, [r7, #0]
 8008bb4:	7812      	ldrb	r2, [r2, #0]
 8008bb6:	0151      	lsls	r1, r2, #5
 8008bb8:	693a      	ldr	r2, [r7, #16]
 8008bba:	440a      	add	r2, r1
 8008bbc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008bc0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008bc4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	781b      	ldrb	r3, [r3, #0]
 8008bca:	015a      	lsls	r2, r3, #5
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	4413      	add	r3, r2
 8008bd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	683a      	ldr	r2, [r7, #0]
 8008bd8:	7812      	ldrb	r2, [r2, #0]
 8008bda:	0151      	lsls	r1, r2, #5
 8008bdc:	693a      	ldr	r2, [r7, #16]
 8008bde:	440a      	add	r2, r1
 8008be0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008be4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008be8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	3301      	adds	r3, #1
 8008bee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d902      	bls.n	8008c00 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	75fb      	strb	r3, [r7, #23]
          break;
 8008bfe:	e00c      	b.n	8008c1a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	015a      	lsls	r2, r3, #5
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	4413      	add	r3, r2
 8008c0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008c14:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c18:	d0e7      	beq.n	8008bea <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008c1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	371c      	adds	r7, #28
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr

08008c28 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b089      	sub	sp, #36	@ 0x24
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	60f8      	str	r0, [r7, #12]
 8008c30:	60b9      	str	r1, [r7, #8]
 8008c32:	4611      	mov	r1, r2
 8008c34:	461a      	mov	r2, r3
 8008c36:	460b      	mov	r3, r1
 8008c38:	71fb      	strb	r3, [r7, #7]
 8008c3a:	4613      	mov	r3, r2
 8008c3c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008c46:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d123      	bne.n	8008c96 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008c4e:	88bb      	ldrh	r3, [r7, #4]
 8008c50:	3303      	adds	r3, #3
 8008c52:	089b      	lsrs	r3, r3, #2
 8008c54:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008c56:	2300      	movs	r3, #0
 8008c58:	61bb      	str	r3, [r7, #24]
 8008c5a:	e018      	b.n	8008c8e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008c5c:	79fb      	ldrb	r3, [r7, #7]
 8008c5e:	031a      	lsls	r2, r3, #12
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	4413      	add	r3, r2
 8008c64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008c68:	461a      	mov	r2, r3
 8008c6a:	69fb      	ldr	r3, [r7, #28]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008c70:	69fb      	ldr	r3, [r7, #28]
 8008c72:	3301      	adds	r3, #1
 8008c74:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008c76:	69fb      	ldr	r3, [r7, #28]
 8008c78:	3301      	adds	r3, #1
 8008c7a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008c7c:	69fb      	ldr	r3, [r7, #28]
 8008c7e:	3301      	adds	r3, #1
 8008c80:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008c82:	69fb      	ldr	r3, [r7, #28]
 8008c84:	3301      	adds	r3, #1
 8008c86:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008c88:	69bb      	ldr	r3, [r7, #24]
 8008c8a:	3301      	adds	r3, #1
 8008c8c:	61bb      	str	r3, [r7, #24]
 8008c8e:	69ba      	ldr	r2, [r7, #24]
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d3e2      	bcc.n	8008c5c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008c96:	2300      	movs	r3, #0
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3724      	adds	r7, #36	@ 0x24
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr

08008ca4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b08b      	sub	sp, #44	@ 0x2c
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	60f8      	str	r0, [r7, #12]
 8008cac:	60b9      	str	r1, [r7, #8]
 8008cae:	4613      	mov	r3, r2
 8008cb0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008cba:	88fb      	ldrh	r3, [r7, #6]
 8008cbc:	089b      	lsrs	r3, r3, #2
 8008cbe:	b29b      	uxth	r3, r3
 8008cc0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008cc2:	88fb      	ldrh	r3, [r7, #6]
 8008cc4:	f003 0303 	and.w	r3, r3, #3
 8008cc8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008cca:	2300      	movs	r3, #0
 8008ccc:	623b      	str	r3, [r7, #32]
 8008cce:	e014      	b.n	8008cfa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008cd0:	69bb      	ldr	r3, [r7, #24]
 8008cd2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008cd6:	681a      	ldr	r2, [r3, #0]
 8008cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cda:	601a      	str	r2, [r3, #0]
    pDest++;
 8008cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cde:	3301      	adds	r3, #1
 8008ce0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ce4:	3301      	adds	r3, #1
 8008ce6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cea:	3301      	adds	r3, #1
 8008cec:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008cf4:	6a3b      	ldr	r3, [r7, #32]
 8008cf6:	3301      	adds	r3, #1
 8008cf8:	623b      	str	r3, [r7, #32]
 8008cfa:	6a3a      	ldr	r2, [r7, #32]
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d3e6      	bcc.n	8008cd0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008d02:	8bfb      	ldrh	r3, [r7, #30]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d01e      	beq.n	8008d46 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008d08:	2300      	movs	r3, #0
 8008d0a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008d0c:	69bb      	ldr	r3, [r7, #24]
 8008d0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d12:	461a      	mov	r2, r3
 8008d14:	f107 0310 	add.w	r3, r7, #16
 8008d18:	6812      	ldr	r2, [r2, #0]
 8008d1a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008d1c:	693a      	ldr	r2, [r7, #16]
 8008d1e:	6a3b      	ldr	r3, [r7, #32]
 8008d20:	b2db      	uxtb	r3, r3
 8008d22:	00db      	lsls	r3, r3, #3
 8008d24:	fa22 f303 	lsr.w	r3, r2, r3
 8008d28:	b2da      	uxtb	r2, r3
 8008d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d2c:	701a      	strb	r2, [r3, #0]
      i++;
 8008d2e:	6a3b      	ldr	r3, [r7, #32]
 8008d30:	3301      	adds	r3, #1
 8008d32:	623b      	str	r3, [r7, #32]
      pDest++;
 8008d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d36:	3301      	adds	r3, #1
 8008d38:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008d3a:	8bfb      	ldrh	r3, [r7, #30]
 8008d3c:	3b01      	subs	r3, #1
 8008d3e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008d40:	8bfb      	ldrh	r3, [r7, #30]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d1ea      	bne.n	8008d1c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	372c      	adds	r7, #44	@ 0x2c
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d52:	4770      	bx	lr

08008d54 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b085      	sub	sp, #20
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	781b      	ldrb	r3, [r3, #0]
 8008d66:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	785b      	ldrb	r3, [r3, #1]
 8008d6c:	2b01      	cmp	r3, #1
 8008d6e:	d12c      	bne.n	8008dca <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	015a      	lsls	r2, r3, #5
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	4413      	add	r3, r2
 8008d78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	db12      	blt.n	8008da8 <USB_EPSetStall+0x54>
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d00f      	beq.n	8008da8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	015a      	lsls	r2, r3, #5
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	4413      	add	r3, r2
 8008d90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	68ba      	ldr	r2, [r7, #8]
 8008d98:	0151      	lsls	r1, r2, #5
 8008d9a:	68fa      	ldr	r2, [r7, #12]
 8008d9c:	440a      	add	r2, r1
 8008d9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008da2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008da6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	015a      	lsls	r2, r3, #5
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	4413      	add	r3, r2
 8008db0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	68ba      	ldr	r2, [r7, #8]
 8008db8:	0151      	lsls	r1, r2, #5
 8008dba:	68fa      	ldr	r2, [r7, #12]
 8008dbc:	440a      	add	r2, r1
 8008dbe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008dc2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008dc6:	6013      	str	r3, [r2, #0]
 8008dc8:	e02b      	b.n	8008e22 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	015a      	lsls	r2, r3, #5
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	4413      	add	r3, r2
 8008dd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	db12      	blt.n	8008e02 <USB_EPSetStall+0xae>
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d00f      	beq.n	8008e02 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	015a      	lsls	r2, r3, #5
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	4413      	add	r3, r2
 8008dea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	68ba      	ldr	r2, [r7, #8]
 8008df2:	0151      	lsls	r1, r2, #5
 8008df4:	68fa      	ldr	r2, [r7, #12]
 8008df6:	440a      	add	r2, r1
 8008df8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008dfc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008e00:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	015a      	lsls	r2, r3, #5
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	4413      	add	r3, r2
 8008e0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	68ba      	ldr	r2, [r7, #8]
 8008e12:	0151      	lsls	r1, r2, #5
 8008e14:	68fa      	ldr	r2, [r7, #12]
 8008e16:	440a      	add	r2, r1
 8008e18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e1c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008e20:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008e22:	2300      	movs	r3, #0
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3714      	adds	r7, #20
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr

08008e30 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b085      	sub	sp, #20
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	781b      	ldrb	r3, [r3, #0]
 8008e42:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	785b      	ldrb	r3, [r3, #1]
 8008e48:	2b01      	cmp	r3, #1
 8008e4a:	d128      	bne.n	8008e9e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	015a      	lsls	r2, r3, #5
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	4413      	add	r3, r2
 8008e54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	68ba      	ldr	r2, [r7, #8]
 8008e5c:	0151      	lsls	r1, r2, #5
 8008e5e:	68fa      	ldr	r2, [r7, #12]
 8008e60:	440a      	add	r2, r1
 8008e62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e66:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008e6a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	791b      	ldrb	r3, [r3, #4]
 8008e70:	2b03      	cmp	r3, #3
 8008e72:	d003      	beq.n	8008e7c <USB_EPClearStall+0x4c>
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	791b      	ldrb	r3, [r3, #4]
 8008e78:	2b02      	cmp	r3, #2
 8008e7a:	d138      	bne.n	8008eee <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	015a      	lsls	r2, r3, #5
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	4413      	add	r3, r2
 8008e84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	68ba      	ldr	r2, [r7, #8]
 8008e8c:	0151      	lsls	r1, r2, #5
 8008e8e:	68fa      	ldr	r2, [r7, #12]
 8008e90:	440a      	add	r2, r1
 8008e92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e9a:	6013      	str	r3, [r2, #0]
 8008e9c:	e027      	b.n	8008eee <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	015a      	lsls	r2, r3, #5
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	4413      	add	r3, r2
 8008ea6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	68ba      	ldr	r2, [r7, #8]
 8008eae:	0151      	lsls	r1, r2, #5
 8008eb0:	68fa      	ldr	r2, [r7, #12]
 8008eb2:	440a      	add	r2, r1
 8008eb4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008eb8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008ebc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	791b      	ldrb	r3, [r3, #4]
 8008ec2:	2b03      	cmp	r3, #3
 8008ec4:	d003      	beq.n	8008ece <USB_EPClearStall+0x9e>
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	791b      	ldrb	r3, [r3, #4]
 8008eca:	2b02      	cmp	r3, #2
 8008ecc:	d10f      	bne.n	8008eee <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	015a      	lsls	r2, r3, #5
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	4413      	add	r3, r2
 8008ed6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	68ba      	ldr	r2, [r7, #8]
 8008ede:	0151      	lsls	r1, r2, #5
 8008ee0:	68fa      	ldr	r2, [r7, #12]
 8008ee2:	440a      	add	r2, r1
 8008ee4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ee8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008eec:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008eee:	2300      	movs	r3, #0
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3714      	adds	r7, #20
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr

08008efc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b085      	sub	sp, #20
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	460b      	mov	r3, r1
 8008f06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	68fa      	ldr	r2, [r7, #12]
 8008f16:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008f1a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008f1e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f26:	681a      	ldr	r2, [r3, #0]
 8008f28:	78fb      	ldrb	r3, [r7, #3]
 8008f2a:	011b      	lsls	r3, r3, #4
 8008f2c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008f30:	68f9      	ldr	r1, [r7, #12]
 8008f32:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008f36:	4313      	orrs	r3, r2
 8008f38:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008f3a:	2300      	movs	r3, #0
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3714      	adds	r7, #20
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr

08008f48 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b085      	sub	sp, #20
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	68fa      	ldr	r2, [r7, #12]
 8008f5e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008f62:	f023 0303 	bic.w	r3, r3, #3
 8008f66:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	68fa      	ldr	r2, [r7, #12]
 8008f72:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008f76:	f023 0302 	bic.w	r3, r3, #2
 8008f7a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008f7c:	2300      	movs	r3, #0
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3714      	adds	r7, #20
 8008f82:	46bd      	mov	sp, r7
 8008f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f88:	4770      	bx	lr

08008f8a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008f8a:	b480      	push	{r7}
 8008f8c:	b085      	sub	sp, #20
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	68fa      	ldr	r2, [r7, #12]
 8008fa0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008fa4:	f023 0303 	bic.w	r3, r3, #3
 8008fa8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008fb0:	685b      	ldr	r3, [r3, #4]
 8008fb2:	68fa      	ldr	r2, [r7, #12]
 8008fb4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008fb8:	f043 0302 	orr.w	r3, r3, #2
 8008fbc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008fbe:	2300      	movs	r3, #0
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3714      	adds	r7, #20
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fca:	4770      	bx	lr

08008fcc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b085      	sub	sp, #20
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	695b      	ldr	r3, [r3, #20]
 8008fd8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	699b      	ldr	r3, [r3, #24]
 8008fde:	68fa      	ldr	r2, [r7, #12]
 8008fe0:	4013      	ands	r3, r2
 8008fe2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3714      	adds	r7, #20
 8008fea:	46bd      	mov	sp, r7
 8008fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff0:	4770      	bx	lr

08008ff2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008ff2:	b480      	push	{r7}
 8008ff4:	b085      	sub	sp, #20
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009004:	699b      	ldr	r3, [r3, #24]
 8009006:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800900e:	69db      	ldr	r3, [r3, #28]
 8009010:	68ba      	ldr	r2, [r7, #8]
 8009012:	4013      	ands	r3, r2
 8009014:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	0c1b      	lsrs	r3, r3, #16
}
 800901a:	4618      	mov	r0, r3
 800901c:	3714      	adds	r7, #20
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr

08009026 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009026:	b480      	push	{r7}
 8009028:	b085      	sub	sp, #20
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009038:	699b      	ldr	r3, [r3, #24]
 800903a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009042:	69db      	ldr	r3, [r3, #28]
 8009044:	68ba      	ldr	r2, [r7, #8]
 8009046:	4013      	ands	r3, r2
 8009048:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	b29b      	uxth	r3, r3
}
 800904e:	4618      	mov	r0, r3
 8009050:	3714      	adds	r7, #20
 8009052:	46bd      	mov	sp, r7
 8009054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009058:	4770      	bx	lr

0800905a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800905a:	b480      	push	{r7}
 800905c:	b085      	sub	sp, #20
 800905e:	af00      	add	r7, sp, #0
 8009060:	6078      	str	r0, [r7, #4]
 8009062:	460b      	mov	r3, r1
 8009064:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800906a:	78fb      	ldrb	r3, [r7, #3]
 800906c:	015a      	lsls	r2, r3, #5
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	4413      	add	r3, r2
 8009072:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009076:	689b      	ldr	r3, [r3, #8]
 8009078:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009080:	695b      	ldr	r3, [r3, #20]
 8009082:	68ba      	ldr	r2, [r7, #8]
 8009084:	4013      	ands	r3, r2
 8009086:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009088:	68bb      	ldr	r3, [r7, #8]
}
 800908a:	4618      	mov	r0, r3
 800908c:	3714      	adds	r7, #20
 800908e:	46bd      	mov	sp, r7
 8009090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009094:	4770      	bx	lr

08009096 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009096:	b480      	push	{r7}
 8009098:	b087      	sub	sp, #28
 800909a:	af00      	add	r7, sp, #0
 800909c:	6078      	str	r0, [r7, #4]
 800909e:	460b      	mov	r3, r1
 80090a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090ac:	691b      	ldr	r3, [r3, #16]
 80090ae:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090b8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80090ba:	78fb      	ldrb	r3, [r7, #3]
 80090bc:	f003 030f 	and.w	r3, r3, #15
 80090c0:	68fa      	ldr	r2, [r7, #12]
 80090c2:	fa22 f303 	lsr.w	r3, r2, r3
 80090c6:	01db      	lsls	r3, r3, #7
 80090c8:	b2db      	uxtb	r3, r3
 80090ca:	693a      	ldr	r2, [r7, #16]
 80090cc:	4313      	orrs	r3, r2
 80090ce:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80090d0:	78fb      	ldrb	r3, [r7, #3]
 80090d2:	015a      	lsls	r2, r3, #5
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	4413      	add	r3, r2
 80090d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090dc:	689b      	ldr	r3, [r3, #8]
 80090de:	693a      	ldr	r2, [r7, #16]
 80090e0:	4013      	ands	r3, r2
 80090e2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80090e4:	68bb      	ldr	r3, [r7, #8]
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	371c      	adds	r7, #28
 80090ea:	46bd      	mov	sp, r7
 80090ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f0:	4770      	bx	lr

080090f2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80090f2:	b480      	push	{r7}
 80090f4:	b083      	sub	sp, #12
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	695b      	ldr	r3, [r3, #20]
 80090fe:	f003 0301 	and.w	r3, r3, #1
}
 8009102:	4618      	mov	r0, r3
 8009104:	370c      	adds	r7, #12
 8009106:	46bd      	mov	sp, r7
 8009108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910c:	4770      	bx	lr

0800910e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800910e:	b480      	push	{r7}
 8009110:	b085      	sub	sp, #20
 8009112:	af00      	add	r7, sp, #0
 8009114:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	68fa      	ldr	r2, [r7, #12]
 8009124:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009128:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800912c:	f023 0307 	bic.w	r3, r3, #7
 8009130:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009138:	685b      	ldr	r3, [r3, #4]
 800913a:	68fa      	ldr	r2, [r7, #12]
 800913c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009140:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009144:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009146:	2300      	movs	r3, #0
}
 8009148:	4618      	mov	r0, r3
 800914a:	3714      	adds	r7, #20
 800914c:	46bd      	mov	sp, r7
 800914e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009152:	4770      	bx	lr

08009154 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8009154:	b480      	push	{r7}
 8009156:	b087      	sub	sp, #28
 8009158:	af00      	add	r7, sp, #0
 800915a:	60f8      	str	r0, [r7, #12]
 800915c:	460b      	mov	r3, r1
 800915e:	607a      	str	r2, [r7, #4]
 8009160:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	333c      	adds	r3, #60	@ 0x3c
 800916a:	3304      	adds	r3, #4
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	4a26      	ldr	r2, [pc, #152]	@ (800920c <USB_EP0_OutStart+0xb8>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d90a      	bls.n	800918e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009184:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009188:	d101      	bne.n	800918e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800918a:	2300      	movs	r3, #0
 800918c:	e037      	b.n	80091fe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009194:	461a      	mov	r2, r3
 8009196:	2300      	movs	r3, #0
 8009198:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091a0:	691b      	ldr	r3, [r3, #16]
 80091a2:	697a      	ldr	r2, [r7, #20]
 80091a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80091a8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80091ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091b4:	691b      	ldr	r3, [r3, #16]
 80091b6:	697a      	ldr	r2, [r7, #20]
 80091b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80091bc:	f043 0318 	orr.w	r3, r3, #24
 80091c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091c8:	691b      	ldr	r3, [r3, #16]
 80091ca:	697a      	ldr	r2, [r7, #20]
 80091cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80091d0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80091d4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80091d6:	7afb      	ldrb	r3, [r7, #11]
 80091d8:	2b01      	cmp	r3, #1
 80091da:	d10f      	bne.n	80091fc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091e2:	461a      	mov	r2, r3
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	697a      	ldr	r2, [r7, #20]
 80091f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80091f6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80091fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80091fc:	2300      	movs	r3, #0
}
 80091fe:	4618      	mov	r0, r3
 8009200:	371c      	adds	r7, #28
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr
 800920a:	bf00      	nop
 800920c:	4f54300a 	.word	0x4f54300a

08009210 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009210:	b480      	push	{r7}
 8009212:	b085      	sub	sp, #20
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009218:	2300      	movs	r3, #0
 800921a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	3301      	adds	r3, #1
 8009220:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009228:	d901      	bls.n	800922e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800922a:	2303      	movs	r3, #3
 800922c:	e01b      	b.n	8009266 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	691b      	ldr	r3, [r3, #16]
 8009232:	2b00      	cmp	r3, #0
 8009234:	daf2      	bge.n	800921c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009236:	2300      	movs	r3, #0
 8009238:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	691b      	ldr	r3, [r3, #16]
 800923e:	f043 0201 	orr.w	r2, r3, #1
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	3301      	adds	r3, #1
 800924a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009252:	d901      	bls.n	8009258 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009254:	2303      	movs	r3, #3
 8009256:	e006      	b.n	8009266 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	691b      	ldr	r3, [r3, #16]
 800925c:	f003 0301 	and.w	r3, r3, #1
 8009260:	2b01      	cmp	r3, #1
 8009262:	d0f0      	beq.n	8009246 <USB_CoreReset+0x36>

  return HAL_OK;
 8009264:	2300      	movs	r3, #0
}
 8009266:	4618      	mov	r0, r3
 8009268:	3714      	adds	r7, #20
 800926a:	46bd      	mov	sp, r7
 800926c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009270:	4770      	bx	lr
	...

08009274 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  USBD_COMPOSITE_Mount_Class();
 8009278:	f001 f992 	bl	800a5a0 <USBD_COMPOSITE_Mount_Class>
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_HS) != USBD_OK)
  {
    Error_Handler();
  }
#else
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_FS) != USBD_OK)
 800927c:	2200      	movs	r2, #0
 800927e:	4917      	ldr	r1, [pc, #92]	@ (80092dc <MX_USB_DEVICE_Init+0x68>)
 8009280:	4817      	ldr	r0, [pc, #92]	@ (80092e0 <MX_USB_DEVICE_Init+0x6c>)
 8009282:	f001 fda7 	bl	800add4 <USBD_Init>
 8009286:	4603      	mov	r3, r0
 8009288:	2b00      	cmp	r3, #0
 800928a:	d001      	beq.n	8009290 <MX_USB_DEVICE_Init+0x1c>
  {
    Error_Handler();
 800928c:	f7f8 ff0a 	bl	80020a4 <Error_Handler>
  }
#endif
  if (USBD_RegisterClass(&hUsbDevice, &USBD_COMPOSITE) != USBD_OK)
 8009290:	4914      	ldr	r1, [pc, #80]	@ (80092e4 <MX_USB_DEVICE_Init+0x70>)
 8009292:	4813      	ldr	r0, [pc, #76]	@ (80092e0 <MX_USB_DEVICE_Init+0x6c>)
 8009294:	f001 fdca 	bl	800ae2c <USBD_RegisterClass>
 8009298:	4603      	mov	r3, r0
 800929a:	2b00      	cmp	r3, #0
 800929c:	d001      	beq.n	80092a2 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 800929e:	f7f8 ff01 	bl	80020a4 <Error_Handler>
  }
#if (USBD_USE_CDC_ACM == 1)
  if (USBD_CDC_ACM_RegisterInterface(&hUsbDevice, &USBD_CDC_ACM_fops) != USBD_OK)
 80092a2:	4911      	ldr	r1, [pc, #68]	@ (80092e8 <MX_USB_DEVICE_Init+0x74>)
 80092a4:	480e      	ldr	r0, [pc, #56]	@ (80092e0 <MX_USB_DEVICE_Init+0x6c>)
 80092a6:	f000 fe55 	bl	8009f54 <USBD_CDC_ACM_RegisterInterface>
 80092aa:	4603      	mov	r3, r0
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d001      	beq.n	80092b4 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 80092b0:	f7f8 fef8 	bl	80020a4 <Error_Handler>
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDevice, &USBD_CustomHID_fops) != USBD_OK)
 80092b4:	490d      	ldr	r1, [pc, #52]	@ (80092ec <MX_USB_DEVICE_Init+0x78>)
 80092b6:	480a      	ldr	r0, [pc, #40]	@ (80092e0 <MX_USB_DEVICE_Init+0x6c>)
 80092b8:	f001 fd3e 	bl	800ad38 <USBD_CUSTOM_HID_RegisterInterface>
 80092bc:	4603      	mov	r3, r0
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d001      	beq.n	80092c6 <MX_USB_DEVICE_Init+0x52>
  {
    Error_Handler();
 80092c2:	f7f8 feef 	bl	80020a4 <Error_Handler>
  if (USBD_PRNT_RegisterInterface(&hUsbDevice, &USBD_PRNT_fops) != USBD_OK)
  {
    Error_Handler();
  }
#endif
  if (USBD_Start(&hUsbDevice) != USBD_OK)
 80092c6:	4806      	ldr	r0, [pc, #24]	@ (80092e0 <MX_USB_DEVICE_Init+0x6c>)
 80092c8:	f001 fdee 	bl	800aea8 <USBD_Start>
 80092cc:	4603      	mov	r3, r0
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d001      	beq.n	80092d6 <MX_USB_DEVICE_Init+0x62>
  {
    Error_Handler();
 80092d2:	f7f8 fee7 	bl	80020a4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80092d6:	bf00      	nop
 80092d8:	bd80      	pop	{r7, pc}
 80092da:	bf00      	nop
 80092dc:	20000024 	.word	0x20000024
 80092e0:	20000cd8 	.word	0x20000cd8
 80092e4:	200001ac 	.word	0x200001ac
 80092e8:	20000010 	.word	0x20000010
 80092ec:	200000bc 	.word	0x200000bc

080092f0 <CDC_Init>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init(uint8_t cdc_ch)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b082      	sub	sp, #8
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	4603      	mov	r3, r0
 80092f8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */

  /* ##-1- Set Application Buffers */
  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, RX_Buffer[cdc_ch]);
 80092fa:	79fb      	ldrb	r3, [r7, #7]
 80092fc:	021b      	lsls	r3, r3, #8
 80092fe:	4a06      	ldr	r2, [pc, #24]	@ (8009318 <CDC_Init+0x28>)
 8009300:	441a      	add	r2, r3
 8009302:	79fb      	ldrb	r3, [r7, #7]
 8009304:	4905      	ldr	r1, [pc, #20]	@ (800931c <CDC_Init+0x2c>)
 8009306:	4618      	mov	r0, r3
 8009308:	f000 fe5e 	bl	8009fc8 <USBD_CDC_SetRxBuffer>
  //  {
  //    /* Starting Error */
  //    Error_Handler();
  //  }

  return (USBD_OK);
 800930c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800930e:	4618      	mov	r0, r3
 8009310:	3708      	adds	r7, #8
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
 8009316:	bf00      	nop
 8009318:	20000ff4 	.word	0x20000ff4
 800931c:	20000cd8 	.word	0x20000cd8

08009320 <CDC_DeInit>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit(uint8_t cdc_ch)
{
 8009320:	b480      	push	{r7}
 8009322:	b083      	sub	sp, #12
 8009324:	af00      	add	r7, sp, #0
 8009326:	4603      	mov	r3, r0
 8009328:	71fb      	strb	r3, [r7, #7]
  //  if (HAL_UART_DeInit(CDC_CH_To_UART_Handle(cdc_ch)) != HAL_OK)
  //  {
  //    /* Initialization Error */
  //    Error_Handler();
  //  }
  return (USBD_OK);
 800932a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800932c:	4618      	mov	r0, r3
 800932e:	370c      	adds	r7, #12
 8009330:	46bd      	mov	sp, r7
 8009332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009336:	4770      	bx	lr

08009338 <CDC_Control>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control(uint8_t cdc_ch, uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 8009338:	b480      	push	{r7}
 800933a:	b083      	sub	sp, #12
 800933c:	af00      	add	r7, sp, #0
 800933e:	603a      	str	r2, [r7, #0]
 8009340:	461a      	mov	r2, r3
 8009342:	4603      	mov	r3, r0
 8009344:	71fb      	strb	r3, [r7, #7]
 8009346:	460b      	mov	r3, r1
 8009348:	71bb      	strb	r3, [r7, #6]
 800934a:	4613      	mov	r3, r2
 800934c:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd)
 800934e:	79bb      	ldrb	r3, [r7, #6]
 8009350:	2b23      	cmp	r3, #35	@ 0x23
 8009352:	f200 80b6 	bhi.w	80094c2 <CDC_Control+0x18a>
 8009356:	a201      	add	r2, pc, #4	@ (adr r2, 800935c <CDC_Control+0x24>)
 8009358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800935c:	080094c3 	.word	0x080094c3
 8009360:	080094c3 	.word	0x080094c3
 8009364:	080094c3 	.word	0x080094c3
 8009368:	080094c3 	.word	0x080094c3
 800936c:	080094c3 	.word	0x080094c3
 8009370:	080094c3 	.word	0x080094c3
 8009374:	080094c3 	.word	0x080094c3
 8009378:	080094c3 	.word	0x080094c3
 800937c:	080094c3 	.word	0x080094c3
 8009380:	080094c3 	.word	0x080094c3
 8009384:	080094c3 	.word	0x080094c3
 8009388:	080094c3 	.word	0x080094c3
 800938c:	080094c3 	.word	0x080094c3
 8009390:	080094c3 	.word	0x080094c3
 8009394:	080094c3 	.word	0x080094c3
 8009398:	080094c3 	.word	0x080094c3
 800939c:	080094c3 	.word	0x080094c3
 80093a0:	080094c3 	.word	0x080094c3
 80093a4:	080094c3 	.word	0x080094c3
 80093a8:	080094c3 	.word	0x080094c3
 80093ac:	080094c3 	.word	0x080094c3
 80093b0:	080094c3 	.word	0x080094c3
 80093b4:	080094c3 	.word	0x080094c3
 80093b8:	080094c3 	.word	0x080094c3
 80093bc:	080094c3 	.word	0x080094c3
 80093c0:	080094c3 	.word	0x080094c3
 80093c4:	080094c3 	.word	0x080094c3
 80093c8:	080094c3 	.word	0x080094c3
 80093cc:	080094c3 	.word	0x080094c3
 80093d0:	080094c3 	.word	0x080094c3
 80093d4:	080094c3 	.word	0x080094c3
 80093d8:	080094c3 	.word	0x080094c3
 80093dc:	080093ed 	.word	0x080093ed
 80093e0:	0800944d 	.word	0x0800944d
 80093e4:	080094c3 	.word	0x080094c3
 80093e8:	080094c3 	.word	0x080094c3
    /*                                        3 - Mark                             */
    /*                                        4 - Space                            */
    /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
    /*******************************************************************************/
  case CDC_SET_LINE_CODING:
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	781b      	ldrb	r3, [r3, #0]
 80093f0:	461a      	mov	r2, r3
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	3301      	adds	r3, #1
 80093f6:	781b      	ldrb	r3, [r3, #0]
 80093f8:	021b      	lsls	r3, r3, #8
 80093fa:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	3302      	adds	r3, #2
 8009400:	781b      	ldrb	r3, [r3, #0]
 8009402:	041b      	lsls	r3, r3, #16
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8009404:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	3303      	adds	r3, #3
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	061b      	lsls	r3, r3, #24
 800940e:	431a      	orrs	r2, r3
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8009410:	79fb      	ldrb	r3, [r7, #7]
 8009412:	4611      	mov	r1, r2
 8009414:	4a2f      	ldr	r2, [pc, #188]	@ (80094d4 <CDC_Control+0x19c>)
 8009416:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    Line_Coding[cdc_ch].format = pbuf[4];
 800941a:	79fb      	ldrb	r3, [r7, #7]
 800941c:	683a      	ldr	r2, [r7, #0]
 800941e:	7911      	ldrb	r1, [r2, #4]
 8009420:	4a2c      	ldr	r2, [pc, #176]	@ (80094d4 <CDC_Control+0x19c>)
 8009422:	00db      	lsls	r3, r3, #3
 8009424:	4413      	add	r3, r2
 8009426:	460a      	mov	r2, r1
 8009428:	711a      	strb	r2, [r3, #4]
    Line_Coding[cdc_ch].paritytype = pbuf[5];
 800942a:	79fb      	ldrb	r3, [r7, #7]
 800942c:	683a      	ldr	r2, [r7, #0]
 800942e:	7951      	ldrb	r1, [r2, #5]
 8009430:	4a28      	ldr	r2, [pc, #160]	@ (80094d4 <CDC_Control+0x19c>)
 8009432:	00db      	lsls	r3, r3, #3
 8009434:	4413      	add	r3, r2
 8009436:	460a      	mov	r2, r1
 8009438:	715a      	strb	r2, [r3, #5]
    Line_Coding[cdc_ch].datatype = pbuf[6];
 800943a:	79fb      	ldrb	r3, [r7, #7]
 800943c:	683a      	ldr	r2, [r7, #0]
 800943e:	7991      	ldrb	r1, [r2, #6]
 8009440:	4a24      	ldr	r2, [pc, #144]	@ (80094d4 <CDC_Control+0x19c>)
 8009442:	00db      	lsls	r3, r3, #3
 8009444:	4413      	add	r3, r2
 8009446:	460a      	mov	r2, r1
 8009448:	719a      	strb	r2, [r3, #6]

    //Change_UART_Setting(cdc_ch);
    break;
 800944a:	e03b      	b.n	80094c4 <CDC_Control+0x18c>

  case CDC_GET_LINE_CODING:
    pbuf[0] = (uint8_t)(Line_Coding[cdc_ch].bitrate);
 800944c:	79fb      	ldrb	r3, [r7, #7]
 800944e:	4a21      	ldr	r2, [pc, #132]	@ (80094d4 <CDC_Control+0x19c>)
 8009450:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009454:	b2da      	uxtb	r2, r3
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	701a      	strb	r2, [r3, #0]
    pbuf[1] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 8);
 800945a:	79fb      	ldrb	r3, [r7, #7]
 800945c:	4a1d      	ldr	r2, [pc, #116]	@ (80094d4 <CDC_Control+0x19c>)
 800945e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009462:	0a1a      	lsrs	r2, r3, #8
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	3301      	adds	r3, #1
 8009468:	b2d2      	uxtb	r2, r2
 800946a:	701a      	strb	r2, [r3, #0]
    pbuf[2] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 16);
 800946c:	79fb      	ldrb	r3, [r7, #7]
 800946e:	4a19      	ldr	r2, [pc, #100]	@ (80094d4 <CDC_Control+0x19c>)
 8009470:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009474:	0c1a      	lsrs	r2, r3, #16
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	3302      	adds	r3, #2
 800947a:	b2d2      	uxtb	r2, r2
 800947c:	701a      	strb	r2, [r3, #0]
    pbuf[3] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 24);
 800947e:	79fb      	ldrb	r3, [r7, #7]
 8009480:	4a14      	ldr	r2, [pc, #80]	@ (80094d4 <CDC_Control+0x19c>)
 8009482:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009486:	0e1a      	lsrs	r2, r3, #24
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	3303      	adds	r3, #3
 800948c:	b2d2      	uxtb	r2, r2
 800948e:	701a      	strb	r2, [r3, #0]
    pbuf[4] = Line_Coding[cdc_ch].format;
 8009490:	79fb      	ldrb	r3, [r7, #7]
 8009492:	683a      	ldr	r2, [r7, #0]
 8009494:	3204      	adds	r2, #4
 8009496:	490f      	ldr	r1, [pc, #60]	@ (80094d4 <CDC_Control+0x19c>)
 8009498:	00db      	lsls	r3, r3, #3
 800949a:	440b      	add	r3, r1
 800949c:	791b      	ldrb	r3, [r3, #4]
 800949e:	7013      	strb	r3, [r2, #0]
    pbuf[5] = Line_Coding[cdc_ch].paritytype;
 80094a0:	79fb      	ldrb	r3, [r7, #7]
 80094a2:	683a      	ldr	r2, [r7, #0]
 80094a4:	3205      	adds	r2, #5
 80094a6:	490b      	ldr	r1, [pc, #44]	@ (80094d4 <CDC_Control+0x19c>)
 80094a8:	00db      	lsls	r3, r3, #3
 80094aa:	440b      	add	r3, r1
 80094ac:	795b      	ldrb	r3, [r3, #5]
 80094ae:	7013      	strb	r3, [r2, #0]
    pbuf[6] = Line_Coding[cdc_ch].datatype;
 80094b0:	79fb      	ldrb	r3, [r7, #7]
 80094b2:	683a      	ldr	r2, [r7, #0]
 80094b4:	3206      	adds	r2, #6
 80094b6:	4907      	ldr	r1, [pc, #28]	@ (80094d4 <CDC_Control+0x19c>)
 80094b8:	00db      	lsls	r3, r3, #3
 80094ba:	440b      	add	r3, r1
 80094bc:	799b      	ldrb	r3, [r3, #6]
 80094be:	7013      	strb	r3, [r2, #0]
    break;
 80094c0:	e000      	b.n	80094c4 <CDC_Control+0x18c>
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 80094c2:	bf00      	nop
  }

  return (USBD_OK);
 80094c4:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	370c      	adds	r7, #12
 80094ca:	46bd      	mov	sp, r7
 80094cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d0:	4770      	bx	lr
 80094d2:	bf00      	nop
 80094d4:	200010f4 	.word	0x200010f4

080094d8 <CDC_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b084      	sub	sp, #16
 80094dc:	af00      	add	r7, sp, #0
 80094de:	4603      	mov	r3, r0
 80094e0:	60b9      	str	r1, [r7, #8]
 80094e2:	607a      	str	r2, [r7, #4]
 80094e4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 6 */
  //HAL_UART_Transmit_DMA(CDC_CH_To_UART_Handle(cdc_ch), Buf, *Len);
  signalTelemetryTask(Buf, *Len);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4619      	mov	r1, r3
 80094ec:	68b8      	ldr	r0, [r7, #8]
 80094ee:	f7f8 fb57 	bl	8001ba0 <signalTelemetryTask>
  CDC_Transmit(cdc_ch, Buf, *Len); // echo back on same channel
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	b29a      	uxth	r2, r3
 80094f8:	7bfb      	ldrb	r3, [r7, #15]
 80094fa:	68b9      	ldr	r1, [r7, #8]
 80094fc:	4618      	mov	r0, r3
 80094fe:	f000 f825 	bl	800954c <CDC_Transmit>

  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, &Buf[0]);
 8009502:	7bfb      	ldrb	r3, [r7, #15]
 8009504:	68ba      	ldr	r2, [r7, #8]
 8009506:	4907      	ldr	r1, [pc, #28]	@ (8009524 <CDC_Receive+0x4c>)
 8009508:	4618      	mov	r0, r3
 800950a:	f000 fd5d 	bl	8009fc8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(cdc_ch, &hUsbDevice);
 800950e:	7bfb      	ldrb	r3, [r7, #15]
 8009510:	4904      	ldr	r1, [pc, #16]	@ (8009524 <CDC_Receive+0x4c>)
 8009512:	4618      	mov	r0, r3
 8009514:	f000 fdb8 	bl	800a088 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009518:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800951a:	4618      	mov	r0, r3
 800951c:	3710      	adds	r7, #16
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}
 8009522:	bf00      	nop
 8009524:	20000cd8 	.word	0x20000cd8

08009528 <CDC_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009528:	b480      	push	{r7}
 800952a:	b085      	sub	sp, #20
 800952c:	af00      	add	r7, sp, #0
 800952e:	60b9      	str	r1, [r7, #8]
 8009530:	607a      	str	r2, [r7, #4]
 8009532:	461a      	mov	r2, r3
 8009534:	4603      	mov	r3, r0
 8009536:	73fb      	strb	r3, [r7, #15]
 8009538:	4613      	mov	r3, r2
 800953a:	73bb      	strb	r3, [r7, #14]
  return (USBD_OK);
 800953c:	2300      	movs	r3, #0
}
 800953e:	4618      	mov	r0, r3
 8009540:	3714      	adds	r7, #20
 8009542:	46bd      	mov	sp, r7
 8009544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009548:	4770      	bx	lr
	...

0800954c <CDC_Transmit>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit(uint8_t ch, uint8_t *Buf, uint16_t Len)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b084      	sub	sp, #16
 8009550:	af00      	add	r7, sp, #0
 8009552:	4603      	mov	r3, r0
 8009554:	6039      	str	r1, [r7, #0]
 8009556:	71fb      	strb	r3, [r7, #7]
 8009558:	4613      	mov	r3, r2
 800955a:	80bb      	strh	r3, [r7, #4]
  uint8_t result = USBD_OK;
 800955c:	2300      	movs	r3, #0
 800955e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  extern USBD_CDC_ACM_HandleTypeDef CDC_ACM_Class_Data[];
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8009560:	2300      	movs	r3, #0
 8009562:	60bb      	str	r3, [r7, #8]
  hcdc = &CDC_ACM_Class_Data[ch];
 8009564:	79fb      	ldrb	r3, [r7, #7]
 8009566:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800956a:	fb02 f303 	mul.w	r3, r2, r3
 800956e:	4a0e      	ldr	r2, [pc, #56]	@ (80095a8 <CDC_Transmit+0x5c>)
 8009570:	4413      	add	r3, r2
 8009572:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0)
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800957a:	2b00      	cmp	r3, #0
 800957c:	d001      	beq.n	8009582 <CDC_Transmit+0x36>
  {
    return USBD_BUSY;
 800957e:	2301      	movs	r3, #1
 8009580:	e00d      	b.n	800959e <CDC_Transmit+0x52>
  }
  USBD_CDC_SetTxBuffer(ch, &hUsbDevice, Buf, Len);
 8009582:	88bb      	ldrh	r3, [r7, #4]
 8009584:	79f8      	ldrb	r0, [r7, #7]
 8009586:	683a      	ldr	r2, [r7, #0]
 8009588:	4908      	ldr	r1, [pc, #32]	@ (80095ac <CDC_Transmit+0x60>)
 800958a:	f000 fcf9 	bl	8009f80 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(ch, &hUsbDevice);
 800958e:	79fb      	ldrb	r3, [r7, #7]
 8009590:	4906      	ldr	r1, [pc, #24]	@ (80095ac <CDC_Transmit+0x60>)
 8009592:	4618      	mov	r0, r3
 8009594:	f000 fd36 	bl	800a004 <USBD_CDC_TransmitPacket>
 8009598:	4603      	mov	r3, r0
 800959a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800959c:	7bfb      	ldrb	r3, [r7, #15]
}
 800959e:	4618      	mov	r0, r3
 80095a0:	3710      	adds	r7, #16
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}
 80095a6:	bf00      	nop
 80095a8:	20001314 	.word	0x20001314
 80095ac:	20000cd8 	.word	0x20000cd8

080095b0 <USBD_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095b0:	b480      	push	{r7}
 80095b2:	b083      	sub	sp, #12
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	4603      	mov	r3, r0
 80095b8:	6039      	str	r1, [r7, #0]
 80095ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_DeviceDesc);
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	2212      	movs	r2, #18
 80095c0:	801a      	strh	r2, [r3, #0]
  return USBD_DeviceDesc;
 80095c2:	4b03      	ldr	r3, [pc, #12]	@ (80095d0 <USBD_DeviceDescriptor+0x20>)
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	370c      	adds	r7, #12
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr
 80095d0:	20000040 	.word	0x20000040

080095d4 <USBD_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b083      	sub	sp, #12
 80095d8:	af00      	add	r7, sp, #0
 80095da:	4603      	mov	r3, r0
 80095dc:	6039      	str	r1, [r7, #0]
 80095de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	2204      	movs	r2, #4
 80095e4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80095e6:	4b03      	ldr	r3, [pc, #12]	@ (80095f4 <USBD_LangIDStrDescriptor+0x20>)
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	370c      	adds	r7, #12
 80095ec:	46bd      	mov	sp, r7
 80095ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f2:	4770      	bx	lr
 80095f4:	20000054 	.word	0x20000054

080095f8 <USBD_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b082      	sub	sp, #8
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	4603      	mov	r3, r0
 8009600:	6039      	str	r1, [r7, #0]
 8009602:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009604:	79fb      	ldrb	r3, [r7, #7]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d105      	bne.n	8009616 <USBD_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800960a:	683a      	ldr	r2, [r7, #0]
 800960c:	4907      	ldr	r1, [pc, #28]	@ (800962c <USBD_ProductStrDescriptor+0x34>)
 800960e:	4808      	ldr	r0, [pc, #32]	@ (8009630 <USBD_ProductStrDescriptor+0x38>)
 8009610:	f002 fc89 	bl	800bf26 <USBD_GetString>
 8009614:	e004      	b.n	8009620 <USBD_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009616:	683a      	ldr	r2, [r7, #0]
 8009618:	4904      	ldr	r1, [pc, #16]	@ (800962c <USBD_ProductStrDescriptor+0x34>)
 800961a:	4805      	ldr	r0, [pc, #20]	@ (8009630 <USBD_ProductStrDescriptor+0x38>)
 800961c:	f002 fc83 	bl	800bf26 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009620:	4b02      	ldr	r3, [pc, #8]	@ (800962c <USBD_ProductStrDescriptor+0x34>)
}
 8009622:	4618      	mov	r0, r3
 8009624:	3708      	adds	r7, #8
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}
 800962a:	bf00      	nop
 800962c:	200010fc 	.word	0x200010fc
 8009630:	08010444 	.word	0x08010444

08009634 <USBD_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b082      	sub	sp, #8
 8009638:	af00      	add	r7, sp, #0
 800963a:	4603      	mov	r3, r0
 800963c:	6039      	str	r1, [r7, #0]
 800963e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009640:	683a      	ldr	r2, [r7, #0]
 8009642:	4904      	ldr	r1, [pc, #16]	@ (8009654 <USBD_ManufacturerStrDescriptor+0x20>)
 8009644:	4804      	ldr	r0, [pc, #16]	@ (8009658 <USBD_ManufacturerStrDescriptor+0x24>)
 8009646:	f002 fc6e 	bl	800bf26 <USBD_GetString>
  return USBD_StrDesc;
 800964a:	4b02      	ldr	r3, [pc, #8]	@ (8009654 <USBD_ManufacturerStrDescriptor+0x20>)
}
 800964c:	4618      	mov	r0, r3
 800964e:	3708      	adds	r7, #8
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}
 8009654:	200010fc 	.word	0x200010fc
 8009658:	0801045c 	.word	0x0801045c

0800965c <USBD_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b082      	sub	sp, #8
 8009660:	af00      	add	r7, sp, #0
 8009662:	4603      	mov	r3, r0
 8009664:	6039      	str	r1, [r7, #0]
 8009666:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	221a      	movs	r2, #26
 800966c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800966e:	f000 f843 	bl	80096f8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_SerialStrDescriptor */

  /* USER CODE END USBD_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009672:	4b02      	ldr	r3, [pc, #8]	@ (800967c <USBD_SerialStrDescriptor+0x20>)
}
 8009674:	4618      	mov	r0, r3
 8009676:	3708      	adds	r7, #8
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}
 800967c:	20000058 	.word	0x20000058

08009680 <USBD_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b082      	sub	sp, #8
 8009684:	af00      	add	r7, sp, #0
 8009686:	4603      	mov	r3, r0
 8009688:	6039      	str	r1, [r7, #0]
 800968a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800968c:	79fb      	ldrb	r3, [r7, #7]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d105      	bne.n	800969e <USBD_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009692:	683a      	ldr	r2, [r7, #0]
 8009694:	4907      	ldr	r1, [pc, #28]	@ (80096b4 <USBD_ConfigStrDescriptor+0x34>)
 8009696:	4808      	ldr	r0, [pc, #32]	@ (80096b8 <USBD_ConfigStrDescriptor+0x38>)
 8009698:	f002 fc45 	bl	800bf26 <USBD_GetString>
 800969c:	e004      	b.n	80096a8 <USBD_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800969e:	683a      	ldr	r2, [r7, #0]
 80096a0:	4904      	ldr	r1, [pc, #16]	@ (80096b4 <USBD_ConfigStrDescriptor+0x34>)
 80096a2:	4805      	ldr	r0, [pc, #20]	@ (80096b8 <USBD_ConfigStrDescriptor+0x38>)
 80096a4:	f002 fc3f 	bl	800bf26 <USBD_GetString>
  }
  return USBD_StrDesc;
 80096a8:	4b02      	ldr	r3, [pc, #8]	@ (80096b4 <USBD_ConfigStrDescriptor+0x34>)
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3708      	adds	r7, #8
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}
 80096b2:	bf00      	nop
 80096b4:	200010fc 	.word	0x200010fc
 80096b8:	08010470 	.word	0x08010470

080096bc <USBD_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b082      	sub	sp, #8
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	4603      	mov	r3, r0
 80096c4:	6039      	str	r1, [r7, #0]
 80096c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80096c8:	79fb      	ldrb	r3, [r7, #7]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d105      	bne.n	80096da <USBD_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80096ce:	683a      	ldr	r2, [r7, #0]
 80096d0:	4907      	ldr	r1, [pc, #28]	@ (80096f0 <USBD_InterfaceStrDescriptor+0x34>)
 80096d2:	4808      	ldr	r0, [pc, #32]	@ (80096f4 <USBD_InterfaceStrDescriptor+0x38>)
 80096d4:	f002 fc27 	bl	800bf26 <USBD_GetString>
 80096d8:	e004      	b.n	80096e4 <USBD_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80096da:	683a      	ldr	r2, [r7, #0]
 80096dc:	4904      	ldr	r1, [pc, #16]	@ (80096f0 <USBD_InterfaceStrDescriptor+0x34>)
 80096de:	4805      	ldr	r0, [pc, #20]	@ (80096f4 <USBD_InterfaceStrDescriptor+0x38>)
 80096e0:	f002 fc21 	bl	800bf26 <USBD_GetString>
  }
  return USBD_StrDesc;
 80096e4:	4b02      	ldr	r3, [pc, #8]	@ (80096f0 <USBD_InterfaceStrDescriptor+0x34>)
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3708      	adds	r7, #8
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}
 80096ee:	bf00      	nop
 80096f0:	200010fc 	.word	0x200010fc
 80096f4:	08010480 	.word	0x08010480

080096f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b084      	sub	sp, #16
 80096fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80096fe:	4b0f      	ldr	r3, [pc, #60]	@ (800973c <Get_SerialNum+0x44>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009704:	4b0e      	ldr	r3, [pc, #56]	@ (8009740 <Get_SerialNum+0x48>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800970a:	4b0e      	ldr	r3, [pc, #56]	@ (8009744 <Get_SerialNum+0x4c>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009710:	68fa      	ldr	r2, [r7, #12]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	4413      	add	r3, r2
 8009716:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d009      	beq.n	8009732 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800971e:	2208      	movs	r2, #8
 8009720:	4909      	ldr	r1, [pc, #36]	@ (8009748 <Get_SerialNum+0x50>)
 8009722:	68f8      	ldr	r0, [r7, #12]
 8009724:	f000 f814 	bl	8009750 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009728:	2204      	movs	r2, #4
 800972a:	4908      	ldr	r1, [pc, #32]	@ (800974c <Get_SerialNum+0x54>)
 800972c:	68b8      	ldr	r0, [r7, #8]
 800972e:	f000 f80f 	bl	8009750 <IntToUnicode>
  }
}
 8009732:	bf00      	nop
 8009734:	3710      	adds	r7, #16
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}
 800973a:	bf00      	nop
 800973c:	1fff7a10 	.word	0x1fff7a10
 8009740:	1fff7a14 	.word	0x1fff7a14
 8009744:	1fff7a18 	.word	0x1fff7a18
 8009748:	2000005a 	.word	0x2000005a
 800974c:	2000006a 	.word	0x2000006a

08009750 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009750:	b480      	push	{r7}
 8009752:	b087      	sub	sp, #28
 8009754:	af00      	add	r7, sp, #0
 8009756:	60f8      	str	r0, [r7, #12]
 8009758:	60b9      	str	r1, [r7, #8]
 800975a:	4613      	mov	r3, r2
 800975c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800975e:	2300      	movs	r3, #0
 8009760:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009762:	2300      	movs	r3, #0
 8009764:	75fb      	strb	r3, [r7, #23]
 8009766:	e027      	b.n	80097b8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	0f1b      	lsrs	r3, r3, #28
 800976c:	2b09      	cmp	r3, #9
 800976e:	d80b      	bhi.n	8009788 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	0f1b      	lsrs	r3, r3, #28
 8009774:	b2da      	uxtb	r2, r3
 8009776:	7dfb      	ldrb	r3, [r7, #23]
 8009778:	005b      	lsls	r3, r3, #1
 800977a:	4619      	mov	r1, r3
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	440b      	add	r3, r1
 8009780:	3230      	adds	r2, #48	@ 0x30
 8009782:	b2d2      	uxtb	r2, r2
 8009784:	701a      	strb	r2, [r3, #0]
 8009786:	e00a      	b.n	800979e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	0f1b      	lsrs	r3, r3, #28
 800978c:	b2da      	uxtb	r2, r3
 800978e:	7dfb      	ldrb	r3, [r7, #23]
 8009790:	005b      	lsls	r3, r3, #1
 8009792:	4619      	mov	r1, r3
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	440b      	add	r3, r1
 8009798:	3237      	adds	r2, #55	@ 0x37
 800979a:	b2d2      	uxtb	r2, r2
 800979c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	011b      	lsls	r3, r3, #4
 80097a2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80097a4:	7dfb      	ldrb	r3, [r7, #23]
 80097a6:	005b      	lsls	r3, r3, #1
 80097a8:	3301      	adds	r3, #1
 80097aa:	68ba      	ldr	r2, [r7, #8]
 80097ac:	4413      	add	r3, r2
 80097ae:	2200      	movs	r2, #0
 80097b0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80097b2:	7dfb      	ldrb	r3, [r7, #23]
 80097b4:	3301      	adds	r3, #1
 80097b6:	75fb      	strb	r3, [r7, #23]
 80097b8:	7dfa      	ldrb	r2, [r7, #23]
 80097ba:	79fb      	ldrb	r3, [r7, #7]
 80097bc:	429a      	cmp	r2, r3
 80097be:	d3d3      	bcc.n	8009768 <IntToUnicode+0x18>
  }
}
 80097c0:	bf00      	nop
 80097c2:	bf00      	nop
 80097c4:	371c      	adds	r7, #28
 80097c6:	46bd      	mov	sp, r7
 80097c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097cc:	4770      	bx	lr

080097ce <CUSTOM_HID_Init>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init(void)
{
 80097ce:	b480      	push	{r7}
 80097d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80097d2:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	46bd      	mov	sp, r7
 80097d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097dc:	4770      	bx	lr

080097de <CUSTOM_HID_DeInit>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit(void)
{
 80097de:	b480      	push	{r7}
 80097e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80097e2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr

080097ee <CUSTOM_HID_OutEvent>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent(uint8_t event_idx, uint8_t state)
{
 80097ee:	b480      	push	{r7}
 80097f0:	b083      	sub	sp, #12
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	4603      	mov	r3, r0
 80097f6:	460a      	mov	r2, r1
 80097f8:	71fb      	strb	r3, [r7, #7]
 80097fa:	4613      	mov	r3, r2
 80097fc:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  //memcpy(buffer, state, 0x40);
  //USBD_CUSTOM_HID_SendReport(&hUsbDevice, (uint8_t *)buffer, 0x40);
  return (USBD_OK);
 80097fe:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009800:	4618      	mov	r0, r3
 8009802:	370c      	adds	r7, #12
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr

0800980c <USBD_CUSTOM_HID_SendCustomReport>:
  * @param  len: The report length
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */

int8_t USBD_CUSTOM_HID_SendCustomReport(uint8_t *report, uint16_t len)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b082      	sub	sp, #8
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	460b      	mov	r3, r1
 8009816:	807b      	strh	r3, [r7, #2]
  return USBD_CUSTOM_HID_SendReport(&hUsbDevice, report, len);
 8009818:	887b      	ldrh	r3, [r7, #2]
 800981a:	461a      	mov	r2, r3
 800981c:	6879      	ldr	r1, [r7, #4]
 800981e:	4804      	ldr	r0, [pc, #16]	@ (8009830 <USBD_CUSTOM_HID_SendCustomReport+0x24>)
 8009820:	f001 f9c4 	bl	800abac <USBD_CUSTOM_HID_SendReport>
 8009824:	4603      	mov	r3, r0
 8009826:	b25b      	sxtb	r3, r3
}
 8009828:	4618      	mov	r0, r3
 800982a:	3708      	adds	r7, #8
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}
 8009830:	20000cd8 	.word	0x20000cd8

08009834 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b084      	sub	sp, #16
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	460b      	mov	r3, r1
 800983e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8009840:	2300      	movs	r3, #0
 8009842:	60bb      	str	r3, [r7, #8]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009844:	2300      	movs	r3, #0
 8009846:	73fb      	strb	r3, [r7, #15]
 8009848:	e0c6      	b.n	80099d8 <USBD_CDC_Init+0x1a4>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 800984a:	7bfb      	ldrb	r3, [r7, #15]
 800984c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009850:	fb02 f303 	mul.w	r3, r2, r3
 8009854:	4a65      	ldr	r2, [pc, #404]	@ (80099ec <USBD_CDC_Init+0x1b8>)
 8009856:	4413      	add	r3, r2
 8009858:	60bb      	str	r3, [r7, #8]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	7c1b      	ldrb	r3, [r3, #16]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d13d      	bne.n	80098de <USBD_CDC_Init+0xaa>
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 8009862:	7bfb      	ldrb	r3, [r7, #15]
 8009864:	4a62      	ldr	r2, [pc, #392]	@ (80099f0 <USBD_CDC_Init+0x1bc>)
 8009866:	5cd1      	ldrb	r1, [r2, r3]
 8009868:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800986c:	2202      	movs	r2, #2
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f002 fdcb 	bl	800c40a <USBD_LL_OpenEP>
                           CDC_DATA_HS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 8009874:	7bfb      	ldrb	r3, [r7, #15]
 8009876:	4a5e      	ldr	r2, [pc, #376]	@ (80099f0 <USBD_CDC_Init+0x1bc>)
 8009878:	5cd3      	ldrb	r3, [r2, r3]
 800987a:	f003 020f 	and.w	r2, r3, #15
 800987e:	6879      	ldr	r1, [r7, #4]
 8009880:	4613      	mov	r3, r2
 8009882:	009b      	lsls	r3, r3, #2
 8009884:	4413      	add	r3, r2
 8009886:	009b      	lsls	r3, r3, #2
 8009888:	440b      	add	r3, r1
 800988a:	3324      	adds	r3, #36	@ 0x24
 800988c:	2201      	movs	r2, #1
 800988e:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 8009890:	7bfb      	ldrb	r3, [r7, #15]
 8009892:	4a58      	ldr	r2, [pc, #352]	@ (80099f4 <USBD_CDC_Init+0x1c0>)
 8009894:	5cd1      	ldrb	r1, [r2, r3]
 8009896:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800989a:	2202      	movs	r2, #2
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f002 fdb4 	bl	800c40a <USBD_LL_OpenEP>
                           CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 80098a2:	7bfb      	ldrb	r3, [r7, #15]
 80098a4:	4a53      	ldr	r2, [pc, #332]	@ (80099f4 <USBD_CDC_Init+0x1c0>)
 80098a6:	5cd3      	ldrb	r3, [r2, r3]
 80098a8:	f003 020f 	and.w	r2, r3, #15
 80098ac:	6879      	ldr	r1, [r7, #4]
 80098ae:	4613      	mov	r3, r2
 80098b0:	009b      	lsls	r3, r3, #2
 80098b2:	4413      	add	r3, r2
 80098b4:	009b      	lsls	r3, r3, #2
 80098b6:	440b      	add	r3, r1
 80098b8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80098bc:	2201      	movs	r2, #1
 80098be:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80098c0:	7bfb      	ldrb	r3, [r7, #15]
 80098c2:	4a4d      	ldr	r2, [pc, #308]	@ (80099f8 <USBD_CDC_Init+0x1c4>)
 80098c4:	5cd3      	ldrb	r3, [r2, r3]
 80098c6:	f003 020f 	and.w	r2, r3, #15
 80098ca:	6879      	ldr	r1, [r7, #4]
 80098cc:	4613      	mov	r3, r2
 80098ce:	009b      	lsls	r3, r3, #2
 80098d0:	4413      	add	r3, r2
 80098d2:	009b      	lsls	r3, r3, #2
 80098d4:	440b      	add	r3, r1
 80098d6:	3326      	adds	r3, #38	@ 0x26
 80098d8:	2210      	movs	r2, #16
 80098da:	801a      	strh	r2, [r3, #0]
 80098dc:	e03a      	b.n	8009954 <USBD_CDC_Init+0x120>
    }
    else
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 80098de:	7bfb      	ldrb	r3, [r7, #15]
 80098e0:	4a43      	ldr	r2, [pc, #268]	@ (80099f0 <USBD_CDC_Init+0x1bc>)
 80098e2:	5cd1      	ldrb	r1, [r2, r3]
 80098e4:	2340      	movs	r3, #64	@ 0x40
 80098e6:	2202      	movs	r2, #2
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f002 fd8e 	bl	800c40a <USBD_LL_OpenEP>
                           CDC_DATA_FS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 80098ee:	7bfb      	ldrb	r3, [r7, #15]
 80098f0:	4a3f      	ldr	r2, [pc, #252]	@ (80099f0 <USBD_CDC_Init+0x1bc>)
 80098f2:	5cd3      	ldrb	r3, [r2, r3]
 80098f4:	f003 020f 	and.w	r2, r3, #15
 80098f8:	6879      	ldr	r1, [r7, #4]
 80098fa:	4613      	mov	r3, r2
 80098fc:	009b      	lsls	r3, r3, #2
 80098fe:	4413      	add	r3, r2
 8009900:	009b      	lsls	r3, r3, #2
 8009902:	440b      	add	r3, r1
 8009904:	3324      	adds	r3, #36	@ 0x24
 8009906:	2201      	movs	r2, #1
 8009908:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 800990a:	7bfb      	ldrb	r3, [r7, #15]
 800990c:	4a39      	ldr	r2, [pc, #228]	@ (80099f4 <USBD_CDC_Init+0x1c0>)
 800990e:	5cd1      	ldrb	r1, [r2, r3]
 8009910:	2340      	movs	r3, #64	@ 0x40
 8009912:	2202      	movs	r2, #2
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f002 fd78 	bl	800c40a <USBD_LL_OpenEP>
                           CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 800991a:	7bfb      	ldrb	r3, [r7, #15]
 800991c:	4a35      	ldr	r2, [pc, #212]	@ (80099f4 <USBD_CDC_Init+0x1c0>)
 800991e:	5cd3      	ldrb	r3, [r2, r3]
 8009920:	f003 020f 	and.w	r2, r3, #15
 8009924:	6879      	ldr	r1, [r7, #4]
 8009926:	4613      	mov	r3, r2
 8009928:	009b      	lsls	r3, r3, #2
 800992a:	4413      	add	r3, r2
 800992c:	009b      	lsls	r3, r3, #2
 800992e:	440b      	add	r3, r1
 8009930:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009934:	2201      	movs	r2, #1
 8009936:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009938:	7bfb      	ldrb	r3, [r7, #15]
 800993a:	4a2f      	ldr	r2, [pc, #188]	@ (80099f8 <USBD_CDC_Init+0x1c4>)
 800993c:	5cd3      	ldrb	r3, [r2, r3]
 800993e:	f003 020f 	and.w	r2, r3, #15
 8009942:	6879      	ldr	r1, [r7, #4]
 8009944:	4613      	mov	r3, r2
 8009946:	009b      	lsls	r3, r3, #2
 8009948:	4413      	add	r3, r2
 800994a:	009b      	lsls	r3, r3, #2
 800994c:	440b      	add	r3, r1
 800994e:	3326      	adds	r3, #38	@ 0x26
 8009950:	2210      	movs	r2, #16
 8009952:	801a      	strh	r2, [r3, #0]
    }

    /* Open Command IN EP */
    (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP[i], USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009954:	7bfb      	ldrb	r3, [r7, #15]
 8009956:	4a28      	ldr	r2, [pc, #160]	@ (80099f8 <USBD_CDC_Init+0x1c4>)
 8009958:	5cd1      	ldrb	r1, [r2, r3]
 800995a:	2308      	movs	r3, #8
 800995c:	2203      	movs	r2, #3
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f002 fd53 	bl	800c40a <USBD_LL_OpenEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 1U;
 8009964:	7bfb      	ldrb	r3, [r7, #15]
 8009966:	4a24      	ldr	r2, [pc, #144]	@ (80099f8 <USBD_CDC_Init+0x1c4>)
 8009968:	5cd3      	ldrb	r3, [r2, r3]
 800996a:	f003 020f 	and.w	r2, r3, #15
 800996e:	6879      	ldr	r1, [r7, #4]
 8009970:	4613      	mov	r3, r2
 8009972:	009b      	lsls	r3, r3, #2
 8009974:	4413      	add	r3, r2
 8009976:	009b      	lsls	r3, r3, #2
 8009978:	440b      	add	r3, r1
 800997a:	3324      	adds	r3, #36	@ 0x24
 800997c:	2201      	movs	r2, #1
 800997e:	801a      	strh	r2, [r3, #0]

    /* Init  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Init(i);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	7bfa      	ldrb	r2, [r7, #15]
 800998a:	4610      	mov	r0, r2
 800998c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	2200      	movs	r2, #0
 8009992:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	2200      	movs	r2, #0
 800999a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	7c1b      	ldrb	r3, [r3, #16]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d10b      	bne.n	80099be <USBD_CDC_Init+0x18a>
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 80099a6:	7bfb      	ldrb	r3, [r7, #15]
 80099a8:	4a12      	ldr	r2, [pc, #72]	@ (80099f4 <USBD_CDC_Init+0x1c0>)
 80099aa:	5cd1      	ldrb	r1, [r2, r3]
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80099b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f002 fe16 	bl	800c5e8 <USBD_LL_PrepareReceive>
 80099bc:	e009      	b.n	80099d2 <USBD_CDC_Init+0x19e>
                                   CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 80099be:	7bfb      	ldrb	r3, [r7, #15]
 80099c0:	4a0c      	ldr	r2, [pc, #48]	@ (80099f4 <USBD_CDC_Init+0x1c0>)
 80099c2:	5cd1      	ldrb	r1, [r2, r3]
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80099ca:	2340      	movs	r3, #64	@ 0x40
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f002 fe0b 	bl	800c5e8 <USBD_LL_PrepareReceive>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80099d2:	7bfb      	ldrb	r3, [r7, #15]
 80099d4:	3301      	adds	r3, #1
 80099d6:	73fb      	strb	r3, [r7, #15]
 80099d8:	7bfb      	ldrb	r3, [r7, #15]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	f43f af35 	beq.w	800984a <USBD_CDC_Init+0x16>
                                   CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return (uint8_t)USBD_OK;
 80099e0:	2300      	movs	r3, #0
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3710      	adds	r7, #16
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}
 80099ea:	bf00      	nop
 80099ec:	20001314 	.word	0x20001314
 80099f0:	200012fc 	.word	0x200012fc
 80099f4:	20001300 	.word	0x20001300
 80099f8:	20001304 	.word	0x20001304

080099fc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b084      	sub	sp, #16
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	460b      	mov	r3, r1
 8009a06:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009a08:	2300      	movs	r3, #0
 8009a0a:	73fb      	strb	r3, [r7, #15]
 8009a0c:	e057      	b.n	8009abe <USBD_CDC_DeInit+0xc2>
  {
    /* Close EP IN */
    (void)USBD_LL_CloseEP(pdev, CDC_IN_EP[i]);
 8009a0e:	7bfb      	ldrb	r3, [r7, #15]
 8009a10:	4a2f      	ldr	r2, [pc, #188]	@ (8009ad0 <USBD_CDC_DeInit+0xd4>)
 8009a12:	5cd3      	ldrb	r3, [r2, r3]
 8009a14:	4619      	mov	r1, r3
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f002 fd1d 	bl	800c456 <USBD_LL_CloseEP>
    pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 0U;
 8009a1c:	7bfb      	ldrb	r3, [r7, #15]
 8009a1e:	4a2c      	ldr	r2, [pc, #176]	@ (8009ad0 <USBD_CDC_DeInit+0xd4>)
 8009a20:	5cd3      	ldrb	r3, [r2, r3]
 8009a22:	f003 020f 	and.w	r2, r3, #15
 8009a26:	6879      	ldr	r1, [r7, #4]
 8009a28:	4613      	mov	r3, r2
 8009a2a:	009b      	lsls	r3, r3, #2
 8009a2c:	4413      	add	r3, r2
 8009a2e:	009b      	lsls	r3, r3, #2
 8009a30:	440b      	add	r3, r1
 8009a32:	3324      	adds	r3, #36	@ 0x24
 8009a34:	2200      	movs	r2, #0
 8009a36:	801a      	strh	r2, [r3, #0]

    /* Close EP OUT */
    (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP[i]);
 8009a38:	7bfb      	ldrb	r3, [r7, #15]
 8009a3a:	4a26      	ldr	r2, [pc, #152]	@ (8009ad4 <USBD_CDC_DeInit+0xd8>)
 8009a3c:	5cd3      	ldrb	r3, [r2, r3]
 8009a3e:	4619      	mov	r1, r3
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f002 fd08 	bl	800c456 <USBD_LL_CloseEP>
    pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 0U;
 8009a46:	7bfb      	ldrb	r3, [r7, #15]
 8009a48:	4a22      	ldr	r2, [pc, #136]	@ (8009ad4 <USBD_CDC_DeInit+0xd8>)
 8009a4a:	5cd3      	ldrb	r3, [r2, r3]
 8009a4c:	f003 020f 	and.w	r2, r3, #15
 8009a50:	6879      	ldr	r1, [r7, #4]
 8009a52:	4613      	mov	r3, r2
 8009a54:	009b      	lsls	r3, r3, #2
 8009a56:	4413      	add	r3, r2
 8009a58:	009b      	lsls	r3, r3, #2
 8009a5a:	440b      	add	r3, r1
 8009a5c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009a60:	2200      	movs	r2, #0
 8009a62:	801a      	strh	r2, [r3, #0]

    /* Close Command IN EP */
    (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP[i]);
 8009a64:	7bfb      	ldrb	r3, [r7, #15]
 8009a66:	4a1c      	ldr	r2, [pc, #112]	@ (8009ad8 <USBD_CDC_DeInit+0xdc>)
 8009a68:	5cd3      	ldrb	r3, [r2, r3]
 8009a6a:	4619      	mov	r1, r3
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f002 fcf2 	bl	800c456 <USBD_LL_CloseEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 0U;
 8009a72:	7bfb      	ldrb	r3, [r7, #15]
 8009a74:	4a18      	ldr	r2, [pc, #96]	@ (8009ad8 <USBD_CDC_DeInit+0xdc>)
 8009a76:	5cd3      	ldrb	r3, [r2, r3]
 8009a78:	f003 020f 	and.w	r2, r3, #15
 8009a7c:	6879      	ldr	r1, [r7, #4]
 8009a7e:	4613      	mov	r3, r2
 8009a80:	009b      	lsls	r3, r3, #2
 8009a82:	4413      	add	r3, r2
 8009a84:	009b      	lsls	r3, r3, #2
 8009a86:	440b      	add	r3, r1
 8009a88:	3324      	adds	r3, #36	@ 0x24
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	801a      	strh	r2, [r3, #0]
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = 0U;
 8009a8e:	7bfb      	ldrb	r3, [r7, #15]
 8009a90:	4a11      	ldr	r2, [pc, #68]	@ (8009ad8 <USBD_CDC_DeInit+0xdc>)
 8009a92:	5cd3      	ldrb	r3, [r2, r3]
 8009a94:	f003 020f 	and.w	r2, r3, #15
 8009a98:	6879      	ldr	r1, [r7, #4]
 8009a9a:	4613      	mov	r3, r2
 8009a9c:	009b      	lsls	r3, r3, #2
 8009a9e:	4413      	add	r3, r2
 8009aa0:	009b      	lsls	r3, r3, #2
 8009aa2:	440b      	add	r3, r1
 8009aa4:	3326      	adds	r3, #38	@ 0x26
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	801a      	strh	r2, [r3, #0]

    /* DeInit  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->DeInit(i);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009ab0:	685b      	ldr	r3, [r3, #4]
 8009ab2:	7bfa      	ldrb	r2, [r7, #15]
 8009ab4:	4610      	mov	r0, r2
 8009ab6:	4798      	blx	r3
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009ab8:	7bfb      	ldrb	r3, [r7, #15]
 8009aba:	3301      	adds	r3, #1
 8009abc:	73fb      	strb	r3, [r7, #15]
 8009abe:	7bfb      	ldrb	r3, [r7, #15]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d0a4      	beq.n	8009a0e <USBD_CDC_DeInit+0x12>
  }
  return (uint8_t)USBD_OK;
 8009ac4:	2300      	movs	r3, #0
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3710      	adds	r7, #16
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}
 8009ace:	bf00      	nop
 8009ad0:	200012fc 	.word	0x200012fc
 8009ad4:	20001300 	.word	0x20001300
 8009ad8:	20001304 	.word	0x20001304

08009adc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009adc:	b590      	push	{r4, r7, lr}
 8009ade:	b087      	sub	sp, #28
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
 8009ae4:	6039      	str	r1, [r7, #0]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009aea:	2300      	movs	r3, #0
 8009aec:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009aee:	2300      	movs	r3, #0
 8009af0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009af2:	2300      	movs	r3, #0
 8009af4:	75fb      	strb	r3, [r7, #23]

  uint8_t windex_to_ch = 0;
 8009af6:	2300      	movs	r3, #0
 8009af8:	75bb      	strb	r3, [r7, #22]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009afa:	2300      	movs	r3, #0
 8009afc:	757b      	strb	r3, [r7, #21]
 8009afe:	e015      	b.n	8009b2c <USBD_CDC_Setup+0x50>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	889b      	ldrh	r3, [r3, #4]
 8009b04:	b2da      	uxtb	r2, r3
 8009b06:	7d7b      	ldrb	r3, [r7, #21]
 8009b08:	496d      	ldr	r1, [pc, #436]	@ (8009cc0 <USBD_CDC_Setup+0x1e4>)
 8009b0a:	5ccb      	ldrb	r3, [r1, r3]
 8009b0c:	429a      	cmp	r2, r3
 8009b0e:	d007      	beq.n	8009b20 <USBD_CDC_Setup+0x44>
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	889b      	ldrh	r3, [r3, #4]
 8009b14:	b2da      	uxtb	r2, r3
 8009b16:	7d7b      	ldrb	r3, [r7, #21]
 8009b18:	496a      	ldr	r1, [pc, #424]	@ (8009cc4 <USBD_CDC_Setup+0x1e8>)
 8009b1a:	5ccb      	ldrb	r3, [r1, r3]
 8009b1c:	429a      	cmp	r2, r3
 8009b1e:	d102      	bne.n	8009b26 <USBD_CDC_Setup+0x4a>
    {
      windex_to_ch = i;
 8009b20:	7d7b      	ldrb	r3, [r7, #21]
 8009b22:	75bb      	strb	r3, [r7, #22]
      break;
 8009b24:	e005      	b.n	8009b32 <USBD_CDC_Setup+0x56>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009b26:	7d7b      	ldrb	r3, [r7, #21]
 8009b28:	3301      	adds	r3, #1
 8009b2a:	757b      	strb	r3, [r7, #21]
 8009b2c:	7d7b      	ldrb	r3, [r7, #21]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d0e6      	beq.n	8009b00 <USBD_CDC_Setup+0x24>
    }
  }

  hcdc = &CDC_ACM_Class_Data[windex_to_ch];
 8009b32:	7dbb      	ldrb	r3, [r7, #22]
 8009b34:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009b38:	fb02 f303 	mul.w	r3, r2, r3
 8009b3c:	4a62      	ldr	r2, [pc, #392]	@ (8009cc8 <USBD_CDC_Setup+0x1ec>)
 8009b3e:	4413      	add	r3, r2
 8009b40:	613b      	str	r3, [r7, #16]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	781b      	ldrb	r3, [r3, #0]
 8009b46:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d04a      	beq.n	8009be4 <USBD_CDC_Setup+0x108>
 8009b4e:	2b20      	cmp	r3, #32
 8009b50:	f040 80aa 	bne.w	8009ca8 <USBD_CDC_Setup+0x1cc>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	88db      	ldrh	r3, [r3, #6]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d038      	beq.n	8009bce <USBD_CDC_Setup+0xf2>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	781b      	ldrb	r3, [r3, #0]
 8009b60:	b25b      	sxtb	r3, r3
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	da1d      	bge.n	8009ba2 <USBD_CDC_Setup+0xc6>
      {
        ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009b6c:	689c      	ldr	r4, [r3, #8]
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	7859      	ldrb	r1, [r3, #1]
 8009b72:	7dbb      	ldrb	r3, [r7, #22]
 8009b74:	025b      	lsls	r3, r3, #9
 8009b76:	693a      	ldr	r2, [r7, #16]
 8009b78:	441a      	add	r2, r3
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	88db      	ldrh	r3, [r3, #6]
 8009b7e:	7db8      	ldrb	r0, [r7, #22]
 8009b80:	47a0      	blx	r4

        len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	88db      	ldrh	r3, [r3, #6]
 8009b86:	2b07      	cmp	r3, #7
 8009b88:	bf28      	it	cs
 8009b8a:	2307      	movcs	r3, #7
 8009b8c:	81fb      	strh	r3, [r7, #14]
        (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data[windex_to_ch], len);
 8009b8e:	7dbb      	ldrb	r3, [r7, #22]
 8009b90:	025b      	lsls	r3, r3, #9
 8009b92:	693a      	ldr	r2, [r7, #16]
 8009b94:	4413      	add	r3, r2
 8009b96:	89fa      	ldrh	r2, [r7, #14]
 8009b98:	4619      	mov	r1, r3
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f002 fa23 	bl	800bfe6 <USBD_CtlSendData>
    }
    else
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
    }
    break;
 8009ba0:	e089      	b.n	8009cb6 <USBD_CDC_Setup+0x1da>
        hcdc->CmdOpCode = req->bRequest;
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	785a      	ldrb	r2, [r3, #1]
 8009ba6:	693b      	ldr	r3, [r7, #16]
 8009ba8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	88db      	ldrh	r3, [r3, #6]
 8009bb0:	b2da      	uxtb	r2, r3
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 8009bb8:	7dbb      	ldrb	r3, [r7, #22]
 8009bba:	025b      	lsls	r3, r3, #9
 8009bbc:	693a      	ldr	r2, [r7, #16]
 8009bbe:	18d1      	adds	r1, r2, r3
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	88db      	ldrh	r3, [r3, #6]
 8009bc4:	461a      	mov	r2, r3
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f002 fa39 	bl	800c03e <USBD_CtlPrepareRx>
    break;
 8009bcc:	e073      	b.n	8009cb6 <USBD_CDC_Setup+0x1da>
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009bd4:	689c      	ldr	r4, [r3, #8]
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	7859      	ldrb	r1, [r3, #1]
 8009bda:	7db8      	ldrb	r0, [r7, #22]
 8009bdc:	2300      	movs	r3, #0
 8009bde:	683a      	ldr	r2, [r7, #0]
 8009be0:	47a0      	blx	r4
    break;
 8009be2:	e068      	b.n	8009cb6 <USBD_CDC_Setup+0x1da>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	785b      	ldrb	r3, [r3, #1]
 8009be8:	2b0b      	cmp	r3, #11
 8009bea:	d852      	bhi.n	8009c92 <USBD_CDC_Setup+0x1b6>
 8009bec:	a201      	add	r2, pc, #4	@ (adr r2, 8009bf4 <USBD_CDC_Setup+0x118>)
 8009bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bf2:	bf00      	nop
 8009bf4:	08009c25 	.word	0x08009c25
 8009bf8:	08009ca1 	.word	0x08009ca1
 8009bfc:	08009c93 	.word	0x08009c93
 8009c00:	08009c93 	.word	0x08009c93
 8009c04:	08009c93 	.word	0x08009c93
 8009c08:	08009c93 	.word	0x08009c93
 8009c0c:	08009c93 	.word	0x08009c93
 8009c10:	08009c93 	.word	0x08009c93
 8009c14:	08009c93 	.word	0x08009c93
 8009c18:	08009c93 	.word	0x08009c93
 8009c1c:	08009c4f 	.word	0x08009c4f
 8009c20:	08009c79 	.word	0x08009c79
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c2a:	b2db      	uxtb	r3, r3
 8009c2c:	2b03      	cmp	r3, #3
 8009c2e:	d107      	bne.n	8009c40 <USBD_CDC_Setup+0x164>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009c30:	f107 030a 	add.w	r3, r7, #10
 8009c34:	2202      	movs	r2, #2
 8009c36:	4619      	mov	r1, r3
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f002 f9d4 	bl	800bfe6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8009c3e:	e032      	b.n	8009ca6 <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 8009c40:	6839      	ldr	r1, [r7, #0]
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f002 f95e 	bl	800bf04 <USBD_CtlError>
        ret = USBD_FAIL;
 8009c48:	2303      	movs	r3, #3
 8009c4a:	75fb      	strb	r3, [r7, #23]
      break;
 8009c4c:	e02b      	b.n	8009ca6 <USBD_CDC_Setup+0x1ca>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c54:	b2db      	uxtb	r3, r3
 8009c56:	2b03      	cmp	r3, #3
 8009c58:	d107      	bne.n	8009c6a <USBD_CDC_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009c5a:	f107 030d 	add.w	r3, r7, #13
 8009c5e:	2201      	movs	r2, #1
 8009c60:	4619      	mov	r1, r3
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f002 f9bf 	bl	800bfe6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8009c68:	e01d      	b.n	8009ca6 <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 8009c6a:	6839      	ldr	r1, [r7, #0]
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f002 f949 	bl	800bf04 <USBD_CtlError>
        ret = USBD_FAIL;
 8009c72:	2303      	movs	r3, #3
 8009c74:	75fb      	strb	r3, [r7, #23]
      break;
 8009c76:	e016      	b.n	8009ca6 <USBD_CDC_Setup+0x1ca>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c7e:	b2db      	uxtb	r3, r3
 8009c80:	2b03      	cmp	r3, #3
 8009c82:	d00f      	beq.n	8009ca4 <USBD_CDC_Setup+0x1c8>
      {
        USBD_CtlError(pdev, req);
 8009c84:	6839      	ldr	r1, [r7, #0]
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f002 f93c 	bl	800bf04 <USBD_CtlError>
        ret = USBD_FAIL;
 8009c8c:	2303      	movs	r3, #3
 8009c8e:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8009c90:	e008      	b.n	8009ca4 <USBD_CDC_Setup+0x1c8>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8009c92:	6839      	ldr	r1, [r7, #0]
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f002 f935 	bl	800bf04 <USBD_CtlError>
      ret = USBD_FAIL;
 8009c9a:	2303      	movs	r3, #3
 8009c9c:	75fb      	strb	r3, [r7, #23]
      break;
 8009c9e:	e002      	b.n	8009ca6 <USBD_CDC_Setup+0x1ca>
      break;
 8009ca0:	bf00      	nop
 8009ca2:	e008      	b.n	8009cb6 <USBD_CDC_Setup+0x1da>
      break;
 8009ca4:	bf00      	nop
    }
    break;
 8009ca6:	e006      	b.n	8009cb6 <USBD_CDC_Setup+0x1da>

  default:
    USBD_CtlError(pdev, req);
 8009ca8:	6839      	ldr	r1, [r7, #0]
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f002 f92a 	bl	800bf04 <USBD_CtlError>
    ret = USBD_FAIL;
 8009cb0:	2303      	movs	r3, #3
 8009cb2:	75fb      	strb	r3, [r7, #23]
    break;
 8009cb4:	bf00      	nop
  }

  return (uint8_t)ret;
 8009cb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	371c      	adds	r7, #28
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd90      	pop	{r4, r7, pc}
 8009cc0:	20001308 	.word	0x20001308
 8009cc4:	2000130c 	.word	0x2000130c
 8009cc8:	20001314 	.word	0x20001314

08009ccc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009ccc:	b590      	push	{r4, r7, lr}
 8009cce:	b087      	sub	sp, #28
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
 8009cd4:	460b      	mov	r3, r1
 8009cd6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	613b      	str	r3, [r7, #16]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 8009ce2:	60fb      	str	r3, [r7, #12]
  uint8_t ep_to_ch = 0;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	75fb      	strb	r3, [r7, #23]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009ce8:	2300      	movs	r3, #0
 8009cea:	75bb      	strb	r3, [r7, #22]
 8009cec:	e00d      	b.n	8009d0a <USBD_CDC_DataIn+0x3e>
  {
    if (epnum == (CDC_IN_EP[i] & 0x0F))
 8009cee:	78fa      	ldrb	r2, [r7, #3]
 8009cf0:	7dbb      	ldrb	r3, [r7, #22]
 8009cf2:	4934      	ldr	r1, [pc, #208]	@ (8009dc4 <USBD_CDC_DataIn+0xf8>)
 8009cf4:	5ccb      	ldrb	r3, [r1, r3]
 8009cf6:	f003 030f 	and.w	r3, r3, #15
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	d102      	bne.n	8009d04 <USBD_CDC_DataIn+0x38>
    {
      ep_to_ch = i;
 8009cfe:	7dbb      	ldrb	r3, [r7, #22]
 8009d00:	75fb      	strb	r3, [r7, #23]
      break;
 8009d02:	e005      	b.n	8009d10 <USBD_CDC_DataIn+0x44>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009d04:	7dbb      	ldrb	r3, [r7, #22]
 8009d06:	3301      	adds	r3, #1
 8009d08:	75bb      	strb	r3, [r7, #22]
 8009d0a:	7dbb      	ldrb	r3, [r7, #22]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d0ee      	beq.n	8009cee <USBD_CDC_DataIn+0x22>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 8009d10:	7dfb      	ldrb	r3, [r7, #23]
 8009d12:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009d16:	fb02 f303 	mul.w	r3, r2, r3
 8009d1a:	4a2b      	ldr	r2, [pc, #172]	@ (8009dc8 <USBD_CDC_DataIn+0xfc>)
 8009d1c:	4413      	add	r3, r2
 8009d1e:	613b      	str	r3, [r7, #16]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009d20:	78fa      	ldrb	r2, [r7, #3]
 8009d22:	6879      	ldr	r1, [r7, #4]
 8009d24:	4613      	mov	r3, r2
 8009d26:	009b      	lsls	r3, r3, #2
 8009d28:	4413      	add	r3, r2
 8009d2a:	009b      	lsls	r3, r3, #2
 8009d2c:	440b      	add	r3, r1
 8009d2e:	3318      	adds	r3, #24
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d029      	beq.n	8009d8a <USBD_CDC_DataIn+0xbe>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009d36:	78fa      	ldrb	r2, [r7, #3]
 8009d38:	6879      	ldr	r1, [r7, #4]
 8009d3a:	4613      	mov	r3, r2
 8009d3c:	009b      	lsls	r3, r3, #2
 8009d3e:	4413      	add	r3, r2
 8009d40:	009b      	lsls	r3, r3, #2
 8009d42:	440b      	add	r3, r1
 8009d44:	3318      	adds	r3, #24
 8009d46:	681a      	ldr	r2, [r3, #0]
 8009d48:	78f9      	ldrb	r1, [r7, #3]
 8009d4a:	68f8      	ldr	r0, [r7, #12]
 8009d4c:	460b      	mov	r3, r1
 8009d4e:	00db      	lsls	r3, r3, #3
 8009d50:	440b      	add	r3, r1
 8009d52:	009b      	lsls	r3, r3, #2
 8009d54:	4403      	add	r3, r0
 8009d56:	331c      	adds	r3, #28
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	fbb2 f1f3 	udiv	r1, r2, r3
 8009d5e:	fb01 f303 	mul.w	r3, r1, r3
 8009d62:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d110      	bne.n	8009d8a <USBD_CDC_DataIn+0xbe>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8009d68:	78fa      	ldrb	r2, [r7, #3]
 8009d6a:	6879      	ldr	r1, [r7, #4]
 8009d6c:	4613      	mov	r3, r2
 8009d6e:	009b      	lsls	r3, r3, #2
 8009d70:	4413      	add	r3, r2
 8009d72:	009b      	lsls	r3, r3, #2
 8009d74:	440b      	add	r3, r1
 8009d76:	3318      	adds	r3, #24
 8009d78:	2200      	movs	r2, #0
 8009d7a:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009d7c:	78f9      	ldrb	r1, [r7, #3]
 8009d7e:	2300      	movs	r3, #0
 8009d80:	2200      	movs	r2, #0
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f002 fc0f 	bl	800c5a6 <USBD_LL_Transmit>
 8009d88:	e016      	b.n	8009db8 <USBD_CDC_DataIn+0xec>
  }
  else
  {
    hcdc->TxState = 0U;
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt != NULL)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009d98:	691b      	ldr	r3, [r3, #16]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d00c      	beq.n	8009db8 <USBD_CDC_DataIn+0xec>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt(ep_to_ch, hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009da4:	691c      	ldr	r4, [r3, #16]
 8009da6:	693b      	ldr	r3, [r7, #16]
 8009da8:	f8d3 1208 	ldr.w	r1, [r3, #520]	@ 0x208
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8009db2:	78fb      	ldrb	r3, [r7, #3]
 8009db4:	7df8      	ldrb	r0, [r7, #23]
 8009db6:	47a0      	blx	r4
    }
  }

  return (uint8_t)USBD_OK;
 8009db8:	2300      	movs	r3, #0
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	371c      	adds	r7, #28
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd90      	pop	{r4, r7, pc}
 8009dc2:	bf00      	nop
 8009dc4:	200012fc 	.word	0x200012fc
 8009dc8:	20001314 	.word	0x20001314

08009dcc <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b084      	sub	sp, #16
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
 8009dd4:	460b      	mov	r3, r1
 8009dd6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	60bb      	str	r3, [r7, #8]
  uint8_t ep_to_ch = 0;
 8009ddc:	2300      	movs	r3, #0
 8009dde:	73fb      	strb	r3, [r7, #15]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009de0:	2300      	movs	r3, #0
 8009de2:	73bb      	strb	r3, [r7, #14]
 8009de4:	e00b      	b.n	8009dfe <USBD_CDC_DataOut+0x32>
  {
    if (epnum == CDC_OUT_EP[i])
 8009de6:	7bbb      	ldrb	r3, [r7, #14]
 8009de8:	4a17      	ldr	r2, [pc, #92]	@ (8009e48 <USBD_CDC_DataOut+0x7c>)
 8009dea:	5cd3      	ldrb	r3, [r2, r3]
 8009dec:	78fa      	ldrb	r2, [r7, #3]
 8009dee:	429a      	cmp	r2, r3
 8009df0:	d102      	bne.n	8009df8 <USBD_CDC_DataOut+0x2c>
    {
      ep_to_ch = i;
 8009df2:	7bbb      	ldrb	r3, [r7, #14]
 8009df4:	73fb      	strb	r3, [r7, #15]
      break;
 8009df6:	e005      	b.n	8009e04 <USBD_CDC_DataOut+0x38>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009df8:	7bbb      	ldrb	r3, [r7, #14]
 8009dfa:	3301      	adds	r3, #1
 8009dfc:	73bb      	strb	r3, [r7, #14]
 8009dfe:	7bbb      	ldrb	r3, [r7, #14]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d0f0      	beq.n	8009de6 <USBD_CDC_DataOut+0x1a>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 8009e04:	7bfb      	ldrb	r3, [r7, #15]
 8009e06:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009e0a:	fb02 f303 	mul.w	r3, r2, r3
 8009e0e:	4a0f      	ldr	r2, [pc, #60]	@ (8009e4c <USBD_CDC_DataOut+0x80>)
 8009e10:	4413      	add	r3, r2
 8009e12:	60bb      	str	r3, [r7, #8]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009e14:	78fb      	ldrb	r3, [r7, #3]
 8009e16:	4619      	mov	r1, r3
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f002 fc06 	bl	800c62a <USBD_LL_GetRxDataSize>
 8009e1e:	4602      	mov	r2, r0
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Receive(ep_to_ch, hcdc->RxBuffer, &hcdc->RxLength);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009e2c:	68db      	ldr	r3, [r3, #12]
 8009e2e:	68ba      	ldr	r2, [r7, #8]
 8009e30:	f8d2 1204 	ldr.w	r1, [r2, #516]	@ 0x204
 8009e34:	68ba      	ldr	r2, [r7, #8]
 8009e36:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009e3a:	7bf8      	ldrb	r0, [r7, #15]
 8009e3c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009e3e:	2300      	movs	r3, #0
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3710      	adds	r7, #16
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}
 8009e48:	20001300 	.word	0x20001300
 8009e4c:	20001314 	.word	0x20001314

08009e50 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009e50:	b590      	push	{r4, r7, lr}
 8009e52:	b085      	sub	sp, #20
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8009e58:	2300      	movs	r3, #0
 8009e5a:	60bb      	str	r3, [r7, #8]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	73fb      	strb	r3, [r7, #15]
 8009e60:	e02d      	b.n	8009ebe <USBD_CDC_EP0_RxReady+0x6e>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 8009e62:	7bfb      	ldrb	r3, [r7, #15]
 8009e64:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009e68:	fb02 f303 	mul.w	r3, r2, r3
 8009e6c:	4a18      	ldr	r2, [pc, #96]	@ (8009ed0 <USBD_CDC_EP0_RxReady+0x80>)
 8009e6e:	4413      	add	r3, r2
 8009e70:	60bb      	str	r3, [r7, #8]

    if (hcdc == NULL)
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d101      	bne.n	8009e7c <USBD_CDC_EP0_RxReady+0x2c>
    {
      return (uint8_t)USBD_FAIL;
 8009e78:	2303      	movs	r3, #3
 8009e7a:	e024      	b.n	8009ec6 <USBD_CDC_EP0_RxReady+0x76>
    }

    if ((pdev->pUserData_CDC_ACM != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d018      	beq.n	8009eb8 <USBD_CDC_EP0_RxReady+0x68>
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009e8c:	2bff      	cmp	r3, #255	@ 0xff
 8009e8e:	d013      	beq.n	8009eb8 <USBD_CDC_EP0_RxReady+0x68>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(i, hcdc->CmdOpCode, (uint8_t *)hcdc->data[i], (uint16_t)hcdc->CmdLength);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009e96:	689c      	ldr	r4, [r3, #8]
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	f893 1200 	ldrb.w	r1, [r3, #512]	@ 0x200
 8009e9e:	7bfb      	ldrb	r3, [r7, #15]
 8009ea0:	025b      	lsls	r3, r3, #9
 8009ea2:	68ba      	ldr	r2, [r7, #8]
 8009ea4:	441a      	add	r2, r3
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8009eac:	7bf8      	ldrb	r0, [r7, #15]
 8009eae:	47a0      	blx	r4
      hcdc->CmdOpCode = 0xFFU;
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	22ff      	movs	r2, #255	@ 0xff
 8009eb4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009eb8:	7bfb      	ldrb	r3, [r7, #15]
 8009eba:	3301      	adds	r3, #1
 8009ebc:	73fb      	strb	r3, [r7, #15]
 8009ebe:	7bfb      	ldrb	r3, [r7, #15]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d0ce      	beq.n	8009e62 <USBD_CDC_EP0_RxReady+0x12>
    }
  }

  return (uint8_t)USBD_OK;
 8009ec4:	2300      	movs	r3, #0
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3714      	adds	r7, #20
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd90      	pop	{r4, r7, pc}
 8009ece:	bf00      	nop
 8009ed0:	20001314 	.word	0x20001314

08009ed4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b083      	sub	sp, #12
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	224b      	movs	r2, #75	@ 0x4b
 8009ee0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8009ee2:	4b03      	ldr	r3, [pc, #12]	@ (8009ef0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	370c      	adds	r7, #12
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eee:	4770      	bx	lr
 8009ef0:	20000160 	.word	0x20000160

08009ef4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b083      	sub	sp, #12
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	224b      	movs	r2, #75	@ 0x4b
 8009f00:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8009f02:	4b03      	ldr	r3, [pc, #12]	@ (8009f10 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009f04:	4618      	mov	r0, r3
 8009f06:	370c      	adds	r7, #12
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0e:	4770      	bx	lr
 8009f10:	20000114 	.word	0x20000114

08009f14 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009f14:	b480      	push	{r7}
 8009f16:	b083      	sub	sp, #12
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	224b      	movs	r2, #75	@ 0x4b
 8009f20:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8009f22:	4b03      	ldr	r3, [pc, #12]	@ (8009f30 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009f24:	4618      	mov	r0, r3
 8009f26:	370c      	adds	r7, #12
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2e:	4770      	bx	lr
 8009f30:	20000160 	.word	0x20000160

08009f34 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b083      	sub	sp, #12
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	220a      	movs	r2, #10
 8009f40:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009f42:	4b03      	ldr	r3, [pc, #12]	@ (8009f50 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	370c      	adds	r7, #12
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4e:	4770      	bx	lr
 8009f50:	200000cc 	.word	0x200000cc

08009f54 <USBD_CDC_ACM_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_ACM_RegisterInterface(USBD_HandleTypeDef *pdev,
                                       USBD_CDC_ACM_ItfTypeDef *fops)
{
 8009f54:	b480      	push	{r7}
 8009f56:	b083      	sub	sp, #12
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
 8009f5c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d101      	bne.n	8009f68 <USBD_CDC_ACM_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009f64:	2303      	movs	r3, #3
 8009f66:	e004      	b.n	8009f72 <USBD_CDC_ACM_RegisterInterface+0x1e>
  }

  pdev->pUserData_CDC_ACM = fops;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	683a      	ldr	r2, [r7, #0]
 8009f6c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  return (uint8_t)USBD_OK;
 8009f70:	2300      	movs	r3, #0
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	370c      	adds	r7, #12
 8009f76:	46bd      	mov	sp, r7
 8009f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7c:	4770      	bx	lr
	...

08009f80 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b087      	sub	sp, #28
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	60b9      	str	r1, [r7, #8]
 8009f88:	607a      	str	r2, [r7, #4]
 8009f8a:	603b      	str	r3, [r7, #0]
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8009f90:	2300      	movs	r3, #0
 8009f92:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 8009f94:	7bfb      	ldrb	r3, [r7, #15]
 8009f96:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009f9a:	fb02 f303 	mul.w	r3, r2, r3
 8009f9e:	4a09      	ldr	r2, [pc, #36]	@ (8009fc4 <USBD_CDC_SetTxBuffer+0x44>)
 8009fa0:	4413      	add	r3, r2
 8009fa2:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	687a      	ldr	r2, [r7, #4]
 8009fa8:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	683a      	ldr	r2, [r7, #0]
 8009fb0:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009fb4:	2300      	movs	r3, #0
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	371c      	adds	r7, #28
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc0:	4770      	bx	lr
 8009fc2:	bf00      	nop
 8009fc4:	20001314 	.word	0x20001314

08009fc8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009fc8:	b480      	push	{r7}
 8009fca:	b087      	sub	sp, #28
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	4603      	mov	r3, r0
 8009fd0:	60b9      	str	r1, [r7, #8]
 8009fd2:	607a      	str	r2, [r7, #4]
 8009fd4:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 8009fda:	7bfb      	ldrb	r3, [r7, #15]
 8009fdc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009fe0:	fb02 f303 	mul.w	r3, r2, r3
 8009fe4:	4a06      	ldr	r2, [pc, #24]	@ (800a000 <USBD_CDC_SetRxBuffer+0x38>)
 8009fe6:	4413      	add	r3, r2
 8009fe8:	617b      	str	r3, [r7, #20]

  hcdc->RxBuffer = pbuff;
 8009fea:	697b      	ldr	r3, [r7, #20]
 8009fec:	687a      	ldr	r2, [r7, #4]
 8009fee:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009ff2:	2300      	movs	r3, #0
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	371c      	adds	r7, #28
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffe:	4770      	bx	lr
 800a000:	20001314 	.word	0x20001314

0800a004 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b084      	sub	sp, #16
 800a008:	af00      	add	r7, sp, #0
 800a00a:	4603      	mov	r3, r0
 800a00c:	6039      	str	r1, [r7, #0]
 800a00e:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800a010:	2300      	movs	r3, #0
 800a012:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a014:	2301      	movs	r3, #1
 800a016:	73fb      	strb	r3, [r7, #15]

  hcdc = &CDC_ACM_Class_Data[ch];
 800a018:	79fb      	ldrb	r3, [r7, #7]
 800a01a:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a01e:	fb02 f303 	mul.w	r3, r2, r3
 800a022:	4a17      	ldr	r2, [pc, #92]	@ (800a080 <USBD_CDC_TransmitPacket+0x7c>)
 800a024:	4413      	add	r3, r2
 800a026:	60bb      	str	r3, [r7, #8]

  if (hcdc->TxState == 0U)
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d121      	bne.n	800a076 <USBD_CDC_TransmitPacket+0x72>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	2201      	movs	r2, #1
 800a036:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP[ch] & 0xFU].total_length = hcdc->TxLength;
 800a03a:	79fb      	ldrb	r3, [r7, #7]
 800a03c:	4a11      	ldr	r2, [pc, #68]	@ (800a084 <USBD_CDC_TransmitPacket+0x80>)
 800a03e:	5cd3      	ldrb	r3, [r2, r3]
 800a040:	f003 020f 	and.w	r2, r3, #15
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800a04a:	6838      	ldr	r0, [r7, #0]
 800a04c:	4613      	mov	r3, r2
 800a04e:	009b      	lsls	r3, r3, #2
 800a050:	4413      	add	r3, r2
 800a052:	009b      	lsls	r3, r3, #2
 800a054:	4403      	add	r3, r0
 800a056:	3318      	adds	r3, #24
 800a058:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP[ch], hcdc->TxBuffer, hcdc->TxLength);
 800a05a:	79fb      	ldrb	r3, [r7, #7]
 800a05c:	4a09      	ldr	r2, [pc, #36]	@ (800a084 <USBD_CDC_TransmitPacket+0x80>)
 800a05e:	5cd1      	ldrb	r1, [r2, r3]
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800a06c:	6838      	ldr	r0, [r7, #0]
 800a06e:	f002 fa9a 	bl	800c5a6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a072:	2300      	movs	r3, #0
 800a074:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a076:	7bfb      	ldrb	r3, [r7, #15]
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3710      	adds	r7, #16
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}
 800a080:	20001314 	.word	0x20001314
 800a084:	200012fc 	.word	0x200012fc

0800a088 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b084      	sub	sp, #16
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	4603      	mov	r3, r0
 800a090:	6039      	str	r1, [r7, #0]
 800a092:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800a094:	2300      	movs	r3, #0
 800a096:	60fb      	str	r3, [r7, #12]

  hcdc = &CDC_ACM_Class_Data[ch];
 800a098:	79fb      	ldrb	r3, [r7, #7]
 800a09a:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a09e:	fb02 f303 	mul.w	r3, r2, r3
 800a0a2:	4a11      	ldr	r2, [pc, #68]	@ (800a0e8 <USBD_CDC_ReceivePacket+0x60>)
 800a0a4:	4413      	add	r3, r2
 800a0a6:	60fb      	str	r3, [r7, #12]

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	7c1b      	ldrb	r3, [r3, #16]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d10b      	bne.n	800a0c8 <USBD_CDC_ReceivePacket+0x40>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 800a0b0:	79fb      	ldrb	r3, [r7, #7]
 800a0b2:	4a0e      	ldr	r2, [pc, #56]	@ (800a0ec <USBD_CDC_ReceivePacket+0x64>)
 800a0b4:	5cd1      	ldrb	r1, [r2, r3]
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a0bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a0c0:	6838      	ldr	r0, [r7, #0]
 800a0c2:	f002 fa91 	bl	800c5e8 <USBD_LL_PrepareReceive>
 800a0c6:	e009      	b.n	800a0dc <USBD_CDC_ReceivePacket+0x54>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 800a0c8:	79fb      	ldrb	r3, [r7, #7]
 800a0ca:	4a08      	ldr	r2, [pc, #32]	@ (800a0ec <USBD_CDC_ReceivePacket+0x64>)
 800a0cc:	5cd1      	ldrb	r1, [r2, r3]
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a0d4:	2340      	movs	r3, #64	@ 0x40
 800a0d6:	6838      	ldr	r0, [r7, #0]
 800a0d8:	f002 fa86 	bl	800c5e8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a0dc:	2300      	movs	r3, #0
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3710      	adds	r7, #16
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}
 800a0e6:	bf00      	nop
 800a0e8:	20001314 	.word	0x20001314
 800a0ec:	20001300 	.word	0x20001300

0800a0f0 <USBD_Update_CDC_ACM_DESC>:
                              uint8_t com_itf,
                              uint8_t in_ep,
                              uint8_t cmd_ep,
                              uint8_t out_ep,
                              uint8_t str_idx)
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b085      	sub	sp, #20
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	4608      	mov	r0, r1
 800a0fa:	4611      	mov	r1, r2
 800a0fc:	461a      	mov	r2, r3
 800a0fe:	4603      	mov	r3, r0
 800a100:	70fb      	strb	r3, [r7, #3]
 800a102:	460b      	mov	r3, r1
 800a104:	70bb      	strb	r3, [r7, #2]
 800a106:	4613      	mov	r3, r2
 800a108:	707b      	strb	r3, [r7, #1]
  desc += 9;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	3309      	adds	r3, #9
 800a10e:	607b      	str	r3, [r7, #4]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800a110:	2300      	movs	r3, #0
 800a112:	73fb      	strb	r3, [r7, #15]
 800a114:	e05b      	b.n	800a1ce <USBD_Update_CDC_ACM_DESC+0xde>
  {
    desc[2] = cmd_itf;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	3302      	adds	r3, #2
 800a11a:	78fa      	ldrb	r2, [r7, #3]
 800a11c:	701a      	strb	r2, [r3, #0]
    desc[16] = str_idx;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	3310      	adds	r3, #16
 800a122:	f897 2020 	ldrb.w	r2, [r7, #32]
 800a126:	701a      	strb	r2, [r3, #0]
    desc[10] = cmd_itf;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	330a      	adds	r3, #10
 800a12c:	78fa      	ldrb	r2, [r7, #3]
 800a12e:	701a      	strb	r2, [r3, #0]
    desc[26] = com_itf;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	331a      	adds	r3, #26
 800a134:	78ba      	ldrb	r2, [r7, #2]
 800a136:	701a      	strb	r2, [r3, #0]
    desc[34] = cmd_itf;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	3322      	adds	r3, #34	@ 0x22
 800a13c:	78fa      	ldrb	r2, [r7, #3]
 800a13e:	701a      	strb	r2, [r3, #0]
    desc[35] = com_itf;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	3323      	adds	r3, #35	@ 0x23
 800a144:	78ba      	ldrb	r2, [r7, #2]
 800a146:	701a      	strb	r2, [r3, #0]
    desc[38] = cmd_ep;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	3326      	adds	r3, #38	@ 0x26
 800a14c:	7e3a      	ldrb	r2, [r7, #24]
 800a14e:	701a      	strb	r2, [r3, #0]
    desc[45] = com_itf;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	332d      	adds	r3, #45	@ 0x2d
 800a154:	78ba      	ldrb	r2, [r7, #2]
 800a156:	701a      	strb	r2, [r3, #0]
    desc[54] = out_ep;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	3336      	adds	r3, #54	@ 0x36
 800a15c:	7f3a      	ldrb	r2, [r7, #28]
 800a15e:	701a      	strb	r2, [r3, #0]
    desc[61] = in_ep;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	333d      	adds	r3, #61	@ 0x3d
 800a164:	787a      	ldrb	r2, [r7, #1]
 800a166:	701a      	strb	r2, [r3, #0]

    desc += 66;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	3342      	adds	r3, #66	@ 0x42
 800a16c:	607b      	str	r3, [r7, #4]
    CDC_IN_EP[i] = in_ep;
 800a16e:	7bfb      	ldrb	r3, [r7, #15]
 800a170:	491c      	ldr	r1, [pc, #112]	@ (800a1e4 <USBD_Update_CDC_ACM_DESC+0xf4>)
 800a172:	787a      	ldrb	r2, [r7, #1]
 800a174:	54ca      	strb	r2, [r1, r3]
    CDC_OUT_EP[i] = out_ep;
 800a176:	7bfb      	ldrb	r3, [r7, #15]
 800a178:	491b      	ldr	r1, [pc, #108]	@ (800a1e8 <USBD_Update_CDC_ACM_DESC+0xf8>)
 800a17a:	7f3a      	ldrb	r2, [r7, #28]
 800a17c:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_EP[i] = cmd_ep;
 800a17e:	7bfb      	ldrb	r3, [r7, #15]
 800a180:	491a      	ldr	r1, [pc, #104]	@ (800a1ec <USBD_Update_CDC_ACM_DESC+0xfc>)
 800a182:	7e3a      	ldrb	r2, [r7, #24]
 800a184:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_ITF_NBR[i] = cmd_itf;
 800a186:	7bfb      	ldrb	r3, [r7, #15]
 800a188:	4919      	ldr	r1, [pc, #100]	@ (800a1f0 <USBD_Update_CDC_ACM_DESC+0x100>)
 800a18a:	78fa      	ldrb	r2, [r7, #3]
 800a18c:	54ca      	strb	r2, [r1, r3]
    CDC_COM_ITF_NBR[i] = com_itf;
 800a18e:	7bfb      	ldrb	r3, [r7, #15]
 800a190:	4918      	ldr	r1, [pc, #96]	@ (800a1f4 <USBD_Update_CDC_ACM_DESC+0x104>)
 800a192:	78ba      	ldrb	r2, [r7, #2]
 800a194:	54ca      	strb	r2, [r1, r3]
    CDC_STR_DESC_IDX[i] = str_idx;
 800a196:	7bfb      	ldrb	r3, [r7, #15]
 800a198:	4917      	ldr	r1, [pc, #92]	@ (800a1f8 <USBD_Update_CDC_ACM_DESC+0x108>)
 800a19a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800a19e:	54ca      	strb	r2, [r1, r3]

    in_ep += 2;
 800a1a0:	787b      	ldrb	r3, [r7, #1]
 800a1a2:	3302      	adds	r3, #2
 800a1a4:	707b      	strb	r3, [r7, #1]
    cmd_ep = in_ep + 1;
 800a1a6:	787b      	ldrb	r3, [r7, #1]
 800a1a8:	3301      	adds	r3, #1
 800a1aa:	763b      	strb	r3, [r7, #24]
    out_ep++;
 800a1ac:	7f3b      	ldrb	r3, [r7, #28]
 800a1ae:	3301      	adds	r3, #1
 800a1b0:	773b      	strb	r3, [r7, #28]
    str_idx++;
 800a1b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a1b6:	3301      	adds	r3, #1
 800a1b8:	f887 3020 	strb.w	r3, [r7, #32]

    cmd_itf += 2;
 800a1bc:	78fb      	ldrb	r3, [r7, #3]
 800a1be:	3302      	adds	r3, #2
 800a1c0:	70fb      	strb	r3, [r7, #3]
    com_itf = cmd_itf + 1;
 800a1c2:	78fb      	ldrb	r3, [r7, #3]
 800a1c4:	3301      	adds	r3, #1
 800a1c6:	70bb      	strb	r3, [r7, #2]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800a1c8:	7bfb      	ldrb	r3, [r7, #15]
 800a1ca:	3301      	adds	r3, #1
 800a1cc:	73fb      	strb	r3, [r7, #15]
 800a1ce:	7bfb      	ldrb	r3, [r7, #15]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d0a0      	beq.n	800a116 <USBD_Update_CDC_ACM_DESC+0x26>
  }
}
 800a1d4:	bf00      	nop
 800a1d6:	bf00      	nop
 800a1d8:	3714      	adds	r7, #20
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e0:	4770      	bx	lr
 800a1e2:	bf00      	nop
 800a1e4:	200012fc 	.word	0x200012fc
 800a1e8:	20001300 	.word	0x20001300
 800a1ec:	20001304 	.word	0x20001304
 800a1f0:	20001308 	.word	0x20001308
 800a1f4:	2000130c 	.word	0x2000130c
 800a1f8:	20001310 	.word	0x20001310

0800a1fc <USBD_COMPOSITE_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b082      	sub	sp, #8
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
 800a204:	460b      	mov	r3, r1
 800a206:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.Init(pdev, cfgidx);
 800a208:	4b08      	ldr	r3, [pc, #32]	@ (800a22c <USBD_COMPOSITE_Init+0x30>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	78fa      	ldrb	r2, [r7, #3]
 800a20e:	4611      	mov	r1, r2
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	4798      	blx	r3
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.Init(pdev, cfgidx);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.Init(pdev, cfgidx);
 800a214:	4b06      	ldr	r3, [pc, #24]	@ (800a230 <USBD_COMPOSITE_Init+0x34>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	78fa      	ldrb	r2, [r7, #3]
 800a21a:	4611      	mov	r1, r2
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.Init(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 800a220:	2300      	movs	r3, #0
}
 800a222:	4618      	mov	r0, r3
 800a224:	3708      	adds	r7, #8
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}
 800a22a:	bf00      	nop
 800a22c:	200000d8 	.word	0x200000d8
 800a230:	200001f8 	.word	0x200001f8

0800a234 <USBD_COMPOSITE_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b082      	sub	sp, #8
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
 800a23c:	460b      	mov	r3, r1
 800a23e:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.DeInit(pdev, cfgidx);
 800a240:	4b08      	ldr	r3, [pc, #32]	@ (800a264 <USBD_COMPOSITE_DeInit+0x30>)
 800a242:	685b      	ldr	r3, [r3, #4]
 800a244:	78fa      	ldrb	r2, [r7, #3]
 800a246:	4611      	mov	r1, r2
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	4798      	blx	r3
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.DeInit(pdev, cfgidx);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.DeInit(pdev, cfgidx);
 800a24c:	4b06      	ldr	r3, [pc, #24]	@ (800a268 <USBD_COMPOSITE_DeInit+0x34>)
 800a24e:	685b      	ldr	r3, [r3, #4]
 800a250:	78fa      	ldrb	r2, [r7, #3]
 800a252:	4611      	mov	r1, r2
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.DeInit(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 800a258:	2300      	movs	r3, #0
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3708      	adds	r7, #8
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}
 800a262:	bf00      	nop
 800a264:	200000d8 	.word	0x200000d8
 800a268:	200001f8 	.word	0x200001f8

0800a26c <USBD_COMPOSITE_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Setup(USBD_HandleTypeDef *pdev,
                                    USBD_SetupReqTypedef *req)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b084      	sub	sp, #16
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
 800a274:	6039      	str	r1, [r7, #0]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800a276:	2300      	movs	r3, #0
 800a278:	73fb      	strb	r3, [r7, #15]
 800a27a:	e019      	b.n	800a2b0 <USBD_COMPOSITE_Setup+0x44>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	889b      	ldrh	r3, [r3, #4]
 800a280:	b2da      	uxtb	r2, r3
 800a282:	7bfb      	ldrb	r3, [r7, #15]
 800a284:	4915      	ldr	r1, [pc, #84]	@ (800a2dc <USBD_COMPOSITE_Setup+0x70>)
 800a286:	5ccb      	ldrb	r3, [r1, r3]
 800a288:	429a      	cmp	r2, r3
 800a28a:	d007      	beq.n	800a29c <USBD_COMPOSITE_Setup+0x30>
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	889b      	ldrh	r3, [r3, #4]
 800a290:	b2da      	uxtb	r2, r3
 800a292:	7bfb      	ldrb	r3, [r7, #15]
 800a294:	4912      	ldr	r1, [pc, #72]	@ (800a2e0 <USBD_COMPOSITE_Setup+0x74>)
 800a296:	5ccb      	ldrb	r3, [r1, r3]
 800a298:	429a      	cmp	r2, r3
 800a29a:	d106      	bne.n	800a2aa <USBD_COMPOSITE_Setup+0x3e>
    {
      return USBD_CDC_ACM.Setup(pdev, req);
 800a29c:	4b11      	ldr	r3, [pc, #68]	@ (800a2e4 <USBD_COMPOSITE_Setup+0x78>)
 800a29e:	689b      	ldr	r3, [r3, #8]
 800a2a0:	6839      	ldr	r1, [r7, #0]
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	4798      	blx	r3
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	e014      	b.n	800a2d4 <USBD_COMPOSITE_Setup+0x68>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800a2aa:	7bfb      	ldrb	r3, [r7, #15]
 800a2ac:	3301      	adds	r3, #1
 800a2ae:	73fb      	strb	r3, [r7, #15]
 800a2b0:	7bfb      	ldrb	r3, [r7, #15]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d0e2      	beq.n	800a27c <USBD_COMPOSITE_Setup+0x10>
  {
    return USBD_HID_KEYBOARD.Setup(pdev, req);
  }
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (LOBYTE(req->wIndex) == CUSTOM_HID_ITF_NBR)
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	889b      	ldrh	r3, [r3, #4]
 800a2ba:	b2da      	uxtb	r2, r3
 800a2bc:	4b0a      	ldr	r3, [pc, #40]	@ (800a2e8 <USBD_COMPOSITE_Setup+0x7c>)
 800a2be:	781b      	ldrb	r3, [r3, #0]
 800a2c0:	429a      	cmp	r2, r3
 800a2c2:	d106      	bne.n	800a2d2 <USBD_COMPOSITE_Setup+0x66>
  {
    return USBD_HID_CUSTOM.Setup(pdev, req);
 800a2c4:	4b09      	ldr	r3, [pc, #36]	@ (800a2ec <USBD_COMPOSITE_Setup+0x80>)
 800a2c6:	689b      	ldr	r3, [r3, #8]
 800a2c8:	6839      	ldr	r1, [r7, #0]
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	4798      	blx	r3
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	e000      	b.n	800a2d4 <USBD_COMPOSITE_Setup+0x68>
  {
    USBD_PRNT.Setup(pdev, req);
  }
#endif

  return USBD_FAIL;
 800a2d2:	2303      	movs	r3, #3
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3710      	adds	r7, #16
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}
 800a2dc:	20001308 	.word	0x20001308
 800a2e0:	2000130c 	.word	0x2000130c
 800a2e4:	200000d8 	.word	0x200000d8
 800a2e8:	20001648 	.word	0x20001648
 800a2ec:	200001f8 	.word	0x200001f8

0800a2f0 <USBD_COMPOSITE_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b084      	sub	sp, #16
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	460b      	mov	r3, r1
 800a2fa:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	73fb      	strb	r3, [r7, #15]
 800a300:	e01a      	b.n	800a338 <USBD_COMPOSITE_DataIn+0x48>
  {
    if (epnum == (CDC_IN_EP[i] & 0x7F) || epnum == (CDC_CMD_EP[i] & 0x7F))
 800a302:	78fa      	ldrb	r2, [r7, #3]
 800a304:	7bfb      	ldrb	r3, [r7, #15]
 800a306:	4918      	ldr	r1, [pc, #96]	@ (800a368 <USBD_COMPOSITE_DataIn+0x78>)
 800a308:	5ccb      	ldrb	r3, [r1, r3]
 800a30a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a30e:	429a      	cmp	r2, r3
 800a310:	d007      	beq.n	800a322 <USBD_COMPOSITE_DataIn+0x32>
 800a312:	78fa      	ldrb	r2, [r7, #3]
 800a314:	7bfb      	ldrb	r3, [r7, #15]
 800a316:	4915      	ldr	r1, [pc, #84]	@ (800a36c <USBD_COMPOSITE_DataIn+0x7c>)
 800a318:	5ccb      	ldrb	r3, [r1, r3]
 800a31a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a31e:	429a      	cmp	r2, r3
 800a320:	d107      	bne.n	800a332 <USBD_COMPOSITE_DataIn+0x42>
    {
      return USBD_CDC_ACM.DataIn(pdev, epnum);
 800a322:	4b13      	ldr	r3, [pc, #76]	@ (800a370 <USBD_COMPOSITE_DataIn+0x80>)
 800a324:	695b      	ldr	r3, [r3, #20]
 800a326:	78fa      	ldrb	r2, [r7, #3]
 800a328:	4611      	mov	r1, r2
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	4798      	blx	r3
 800a32e:	4603      	mov	r3, r0
 800a330:	e015      	b.n	800a35e <USBD_COMPOSITE_DataIn+0x6e>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800a332:	7bfb      	ldrb	r3, [r7, #15]
 800a334:	3301      	adds	r3, #1
 800a336:	73fb      	strb	r3, [r7, #15]
 800a338:	7bfb      	ldrb	r3, [r7, #15]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d0e1      	beq.n	800a302 <USBD_COMPOSITE_DataIn+0x12>
  {
    return USBD_HID_KEYBOARD.DataIn(pdev, epnum);
  }
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (epnum == (CUSTOM_HID_IN_EP & 0x7F))
 800a33e:	78fa      	ldrb	r2, [r7, #3]
 800a340:	4b0c      	ldr	r3, [pc, #48]	@ (800a374 <USBD_COMPOSITE_DataIn+0x84>)
 800a342:	781b      	ldrb	r3, [r3, #0]
 800a344:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a348:	429a      	cmp	r2, r3
 800a34a:	d107      	bne.n	800a35c <USBD_COMPOSITE_DataIn+0x6c>
  {
    return USBD_HID_CUSTOM.DataIn(pdev, epnum);
 800a34c:	4b0a      	ldr	r3, [pc, #40]	@ (800a378 <USBD_COMPOSITE_DataIn+0x88>)
 800a34e:	695b      	ldr	r3, [r3, #20]
 800a350:	78fa      	ldrb	r2, [r7, #3]
 800a352:	4611      	mov	r1, r2
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	4798      	blx	r3
 800a358:	4603      	mov	r3, r0
 800a35a:	e000      	b.n	800a35e <USBD_COMPOSITE_DataIn+0x6e>
  {
    USBD_PRNT.DataIn(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 800a35c:	2303      	movs	r3, #3
}
 800a35e:	4618      	mov	r0, r3
 800a360:	3710      	adds	r7, #16
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}
 800a366:	bf00      	nop
 800a368:	200012fc 	.word	0x200012fc
 800a36c:	20001304 	.word	0x20001304
 800a370:	200000d8 	.word	0x200000d8
 800a374:	200001f6 	.word	0x200001f6
 800a378:	200001f8 	.word	0x200001f8

0800a37c <USBD_COMPOSITE_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b082      	sub	sp, #8
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.EP0_RxReady(pdev);
 800a384:	4b06      	ldr	r3, [pc, #24]	@ (800a3a0 <USBD_COMPOSITE_EP0_RxReady+0x24>)
 800a386:	691b      	ldr	r3, [r3, #16]
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	4798      	blx	r3
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.EP0_RxReady(pdev);
 800a38c:	4b05      	ldr	r3, [pc, #20]	@ (800a3a4 <USBD_COMPOSITE_EP0_RxReady+0x28>)
 800a38e:	691b      	ldr	r3, [r3, #16]
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	4798      	blx	r3
  USBD_DFU.EP0_RxReady(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800a394:	2300      	movs	r3, #0
}
 800a396:	4618      	mov	r0, r3
 800a398:	3708      	adds	r7, #8
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}
 800a39e:	bf00      	nop
 800a3a0:	200000d8 	.word	0x200000d8
 800a3a4:	200001f8 	.word	0x200001f8

0800a3a8 <USBD_COMPOSITE_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b083      	sub	sp, #12
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
  USBD_DFU.EP0_TxSent(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800a3b0:	2300      	movs	r3, #0
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	370c      	adds	r7, #12
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3bc:	4770      	bx	lr

0800a3be <USBD_COMPOSITE_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_SOF(USBD_HandleTypeDef *pdev)
{
 800a3be:	b480      	push	{r7}
 800a3c0:	b083      	sub	sp, #12
 800a3c2:	af00      	add	r7, sp, #0
 800a3c4:	6078      	str	r0, [r7, #4]
  USBD_DFU.SOF(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800a3c6:	2300      	movs	r3, #0
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	370c      	adds	r7, #12
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d2:	4770      	bx	lr

0800a3d4 <USBD_COMPOSITE_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b083      	sub	sp, #12
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	460b      	mov	r3, r1
 800a3de:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800a3e0:	2300      	movs	r3, #0
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	370c      	adds	r7, #12
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ec:	4770      	bx	lr

0800a3ee <USBD_COMPOSITE_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a3ee:	b480      	push	{r7}
 800a3f0:	b083      	sub	sp, #12
 800a3f2:	af00      	add	r7, sp, #0
 800a3f4:	6078      	str	r0, [r7, #4]
 800a3f6:	460b      	mov	r3, r1
 800a3f8:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800a3fa:	2300      	movs	r3, #0
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	370c      	adds	r7, #12
 800a400:	46bd      	mov	sp, r7
 800a402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a406:	4770      	bx	lr

0800a408 <USBD_COMPOSITE_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b084      	sub	sp, #16
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	460b      	mov	r3, r1
 800a412:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800a414:	2300      	movs	r3, #0
 800a416:	73fb      	strb	r3, [r7, #15]
 800a418:	e010      	b.n	800a43c <USBD_COMPOSITE_DataOut+0x34>
  {
    if (epnum == CDC_OUT_EP[i])
 800a41a:	7bfb      	ldrb	r3, [r7, #15]
 800a41c:	4a12      	ldr	r2, [pc, #72]	@ (800a468 <USBD_COMPOSITE_DataOut+0x60>)
 800a41e:	5cd3      	ldrb	r3, [r2, r3]
 800a420:	78fa      	ldrb	r2, [r7, #3]
 800a422:	429a      	cmp	r2, r3
 800a424:	d107      	bne.n	800a436 <USBD_COMPOSITE_DataOut+0x2e>
    {
      return USBD_CDC_ACM.DataOut(pdev, epnum);
 800a426:	4b11      	ldr	r3, [pc, #68]	@ (800a46c <USBD_COMPOSITE_DataOut+0x64>)
 800a428:	699b      	ldr	r3, [r3, #24]
 800a42a:	78fa      	ldrb	r2, [r7, #3]
 800a42c:	4611      	mov	r1, r2
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	4798      	blx	r3
 800a432:	4603      	mov	r3, r0
 800a434:	e013      	b.n	800a45e <USBD_COMPOSITE_DataOut+0x56>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800a436:	7bfb      	ldrb	r3, [r7, #15]
 800a438:	3301      	adds	r3, #1
 800a43a:	73fb      	strb	r3, [r7, #15]
 800a43c:	7bfb      	ldrb	r3, [r7, #15]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d0eb      	beq.n	800a41a <USBD_COMPOSITE_DataOut+0x12>
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (epnum == CUSTOM_HID_OUT_EP)
 800a442:	4b0b      	ldr	r3, [pc, #44]	@ (800a470 <USBD_COMPOSITE_DataOut+0x68>)
 800a444:	781b      	ldrb	r3, [r3, #0]
 800a446:	78fa      	ldrb	r2, [r7, #3]
 800a448:	429a      	cmp	r2, r3
 800a44a:	d107      	bne.n	800a45c <USBD_COMPOSITE_DataOut+0x54>
  {
    return USBD_HID_CUSTOM.DataOut(pdev, epnum);
 800a44c:	4b09      	ldr	r3, [pc, #36]	@ (800a474 <USBD_COMPOSITE_DataOut+0x6c>)
 800a44e:	699b      	ldr	r3, [r3, #24]
 800a450:	78fa      	ldrb	r2, [r7, #3]
 800a452:	4611      	mov	r1, r2
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	4798      	blx	r3
 800a458:	4603      	mov	r3, r0
 800a45a:	e000      	b.n	800a45e <USBD_COMPOSITE_DataOut+0x56>
  {
    USBD_PRNT.DataOut(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 800a45c:	2303      	movs	r3, #3
}
 800a45e:	4618      	mov	r0, r3
 800a460:	3710      	adds	r7, #16
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}
 800a466:	bf00      	nop
 800a468:	20001300 	.word	0x20001300
 800a46c:	200000d8 	.word	0x200000d8
 800a470:	200001f7 	.word	0x200001f7
 800a474:	200001f8 	.word	0x200001f8

0800a478 <USBD_COMPOSITE_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetHSCfgDesc(uint16_t *length)
{
 800a478:	b480      	push	{r7}
 800a47a:	b083      	sub	sp, #12
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	226b      	movs	r2, #107	@ 0x6b
 800a484:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 800a486:	4b03      	ldr	r3, [pc, #12]	@ (800a494 <USBD_COMPOSITE_GetHSCfgDesc+0x1c>)
}
 800a488:	4618      	mov	r0, r3
 800a48a:	370c      	adds	r7, #12
 800a48c:	46bd      	mov	sp, r7
 800a48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a492:	4770      	bx	lr
 800a494:	2000159c 	.word	0x2000159c

0800a498 <USBD_COMPOSITE_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetFSCfgDesc(uint16_t *length)
{
 800a498:	b480      	push	{r7}
 800a49a:	b083      	sub	sp, #12
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	226b      	movs	r2, #107	@ 0x6b
 800a4a4:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
 800a4a6:	4b03      	ldr	r3, [pc, #12]	@ (800a4b4 <USBD_COMPOSITE_GetFSCfgDesc+0x1c>)
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	370c      	adds	r7, #12
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b2:	4770      	bx	lr
 800a4b4:	20001530 	.word	0x20001530

0800a4b8 <USBD_COMPOSITE_GetOtherSpeedCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b083      	sub	sp, #12
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
#if (USBD_USE_HS == 1)
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
#else
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	226b      	movs	r2, #107	@ 0x6b
 800a4c4:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 800a4c6:	4b03      	ldr	r3, [pc, #12]	@ (800a4d4 <USBD_COMPOSITE_GetOtherSpeedCfgDesc+0x1c>)
#endif
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	370c      	adds	r7, #12
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d2:	4770      	bx	lr
 800a4d4:	2000159c 	.word	0x2000159c

0800a4d8 <USBD_COMPOSITE_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_COMPOSITE_GetDeviceQualifierDesc(uint16_t *length)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b083      	sub	sp, #12
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_DeviceQualifierDesc);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	220a      	movs	r2, #10
 800a4e4:	801a      	strh	r2, [r3, #0]
  return USBD_COMPOSITE_DeviceQualifierDesc;
 800a4e6:	4b03      	ldr	r3, [pc, #12]	@ (800a4f4 <USBD_COMPOSITE_GetDeviceQualifierDesc+0x1c>)
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	370c      	adds	r7, #12
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f2:	4770      	bx	lr
 800a4f4:	200001ec 	.word	0x200001ec

0800a4f8 <USBD_COMPOSITE_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_COMPOSITE_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b08a      	sub	sp, #40	@ 0x28
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	60f8      	str	r0, [r7, #12]
 800a500:	460b      	mov	r3, r1
 800a502:	607a      	str	r2, [r7, #4]
 800a504:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[64];

  /* Check if the requested string interface is supported */
  if (index <= USBD_Track_String_Index)
 800a506:	4b20      	ldr	r3, [pc, #128]	@ (800a588 <USBD_COMPOSITE_GetUsrStringDesc+0x90>)
 800a508:	781b      	ldrb	r3, [r3, #0]
 800a50a:	7afa      	ldrb	r2, [r7, #11]
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d836      	bhi.n	800a57e <USBD_COMPOSITE_GetUsrStringDesc+0x86>
  {
#if (USBD_USE_CDC_ACM == 1)
    char str_buffer[16] = "";
 800a510:	2300      	movs	r3, #0
 800a512:	617b      	str	r3, [r7, #20]
 800a514:	f107 0318 	add.w	r3, r7, #24
 800a518:	2200      	movs	r2, #0
 800a51a:	601a      	str	r2, [r3, #0]
 800a51c:	605a      	str	r2, [r3, #4]
 800a51e:	609a      	str	r2, [r3, #8]
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800a520:	2300      	movs	r3, #0
 800a522:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a526:	e01a      	b.n	800a55e <USBD_COMPOSITE_GetUsrStringDesc+0x66>
    {
      if (index == CDC_STR_DESC_IDX[i])
 800a528:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a52c:	4a17      	ldr	r2, [pc, #92]	@ (800a58c <USBD_COMPOSITE_GetUsrStringDesc+0x94>)
 800a52e:	5cd3      	ldrb	r3, [r2, r3]
 800a530:	7afa      	ldrb	r2, [r7, #11]
 800a532:	429a      	cmp	r2, r3
 800a534:	d10e      	bne.n	800a554 <USBD_COMPOSITE_GetUsrStringDesc+0x5c>
      {
        snprintf(str_buffer, sizeof(str_buffer), CDC_ACM_STR_DESC, i);
 800a536:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a53a:	f107 0014 	add.w	r0, r7, #20
 800a53e:	4a14      	ldr	r2, [pc, #80]	@ (800a590 <USBD_COMPOSITE_GetUsrStringDesc+0x98>)
 800a540:	2110      	movs	r1, #16
 800a542:	f004 feb7 	bl	800f2b4 <sniprintf>
        USBD_GetString((uint8_t *)str_buffer, USBD_StrDesc, length);
 800a546:	f107 0314 	add.w	r3, r7, #20
 800a54a:	687a      	ldr	r2, [r7, #4]
 800a54c:	4911      	ldr	r1, [pc, #68]	@ (800a594 <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 800a54e:	4618      	mov	r0, r3
 800a550:	f001 fce9 	bl	800bf26 <USBD_GetString>
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800a554:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a558:	3301      	adds	r3, #1
 800a55a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a55e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a562:	2b00      	cmp	r3, #0
 800a564:	d0e0      	beq.n	800a528 <USBD_COMPOSITE_GetUsrStringDesc+0x30>
    {
      USBD_GetString((uint8_t *)HID_KEYBOARD_STR_DESC, USBD_StrDesc, length);
    }
#endif
#if (USBD_USE_HID_CUSTOM == 1)
    if (index == CUSTOM_HID_STR_DESC_IDX)
 800a566:	4b0c      	ldr	r3, [pc, #48]	@ (800a598 <USBD_COMPOSITE_GetUsrStringDesc+0xa0>)
 800a568:	781b      	ldrb	r3, [r3, #0]
 800a56a:	7afa      	ldrb	r2, [r7, #11]
 800a56c:	429a      	cmp	r2, r3
 800a56e:	d104      	bne.n	800a57a <USBD_COMPOSITE_GetUsrStringDesc+0x82>
    {
      USBD_GetString((uint8_t *)CUSTOM_HID_STR_DESC, USBD_StrDesc, length);
 800a570:	687a      	ldr	r2, [r7, #4]
 800a572:	4908      	ldr	r1, [pc, #32]	@ (800a594 <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 800a574:	4809      	ldr	r0, [pc, #36]	@ (800a59c <USBD_COMPOSITE_GetUsrStringDesc+0xa4>)
 800a576:	f001 fcd6 	bl	800bf26 <USBD_GetString>
    if (index == PRINTER_STR_DESC_IDX)
    {
      USBD_GetString((uint8_t *)PRNT_STR_DESC, USBD_StrDesc, length);
    }
#endif
    return USBD_StrDesc;
 800a57a:	4b06      	ldr	r3, [pc, #24]	@ (800a594 <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 800a57c:	e000      	b.n	800a580 <USBD_COMPOSITE_GetUsrStringDesc+0x88>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 800a57e:	2300      	movs	r3, #0
  }
}
 800a580:	4618      	mov	r0, r3
 800a582:	3728      	adds	r7, #40	@ 0x28
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}
 800a588:	200001e8 	.word	0x200001e8
 800a58c:	20001310 	.word	0x20001310
 800a590:	08010494 	.word	0x08010494
 800a594:	20001608 	.word	0x20001608
 800a598:	20001649 	.word	0x20001649
 800a59c:	080104a4 	.word	0x080104a4

0800a5a0 <USBD_COMPOSITE_Mount_Class>:
#endif

void USBD_COMPOSITE_Mount_Class(void)
{
 800a5a0:	b590      	push	{r4, r7, lr}
 800a5a2:	b089      	sub	sp, #36	@ 0x24
 800a5a4:	af04      	add	r7, sp, #16
  uint16_t len = 0;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	80bb      	strh	r3, [r7, #4]
  uint8_t *ptr = NULL;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	60fb      	str	r3, [r7, #12]

  uint8_t in_ep_track = 0x81;
 800a5ae:	2381      	movs	r3, #129	@ 0x81
 800a5b0:	72fb      	strb	r3, [r7, #11]
  uint8_t out_ep_track = 0x01;
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	72bb      	strb	r3, [r7, #10]
  uint8_t interface_no_track = 0x00;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	727b      	strb	r3, [r7, #9]
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_HID_CUSTOM == 1)
  ptr = USBD_HID_CUSTOM.GetFSConfigDescriptor(&len);
 800a5ba:	4b74      	ldr	r3, [pc, #464]	@ (800a78c <USBD_COMPOSITE_Mount_Class+0x1ec>)
 800a5bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5be:	1d3a      	adds	r2, r7, #4
 800a5c0:	4610      	mov	r0, r2
 800a5c2:	4798      	blx	r3
 800a5c4:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID_Custom_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 800a5c6:	4b72      	ldr	r3, [pc, #456]	@ (800a790 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800a5c8:	781b      	ldrb	r3, [r3, #0]
 800a5ca:	7ab8      	ldrb	r0, [r7, #10]
 800a5cc:	7afa      	ldrb	r2, [r7, #11]
 800a5ce:	7a79      	ldrb	r1, [r7, #9]
 800a5d0:	9300      	str	r3, [sp, #0]
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	68f8      	ldr	r0, [r7, #12]
 800a5d6:	f000 fbc5 	bl	800ad64 <USBD_Update_HID_Custom_DESC>
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_HID_CUSTOM_DESC, ptr + 0x09, len - 0x09);
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	3309      	adds	r3, #9
 800a5de:	88ba      	ldrh	r2, [r7, #4]
 800a5e0:	3a09      	subs	r2, #9
 800a5e2:	4619      	mov	r1, r3
 800a5e4:	486b      	ldr	r0, [pc, #428]	@ (800a794 <USBD_COMPOSITE_Mount_Class+0x1f4>)
 800a5e6:	f005 f852 	bl	800f68e <memcpy>

  ptr = USBD_HID_CUSTOM.GetHSConfigDescriptor(&len);
 800a5ea:	4b68      	ldr	r3, [pc, #416]	@ (800a78c <USBD_COMPOSITE_Mount_Class+0x1ec>)
 800a5ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5ee:	1d3a      	adds	r2, r7, #4
 800a5f0:	4610      	mov	r0, r2
 800a5f2:	4798      	blx	r3
 800a5f4:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID_Custom_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 800a5f6:	4b66      	ldr	r3, [pc, #408]	@ (800a790 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800a5f8:	781b      	ldrb	r3, [r3, #0]
 800a5fa:	7ab8      	ldrb	r0, [r7, #10]
 800a5fc:	7afa      	ldrb	r2, [r7, #11]
 800a5fe:	7a79      	ldrb	r1, [r7, #9]
 800a600:	9300      	str	r3, [sp, #0]
 800a602:	4603      	mov	r3, r0
 800a604:	68f8      	ldr	r0, [r7, #12]
 800a606:	f000 fbad 	bl	800ad64 <USBD_Update_HID_Custom_DESC>
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_HID_CUSTOM_DESC, ptr + 0x09, len - 0x09);
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	3309      	adds	r3, #9
 800a60e:	88ba      	ldrh	r2, [r7, #4]
 800a610:	3a09      	subs	r2, #9
 800a612:	4619      	mov	r1, r3
 800a614:	4860      	ldr	r0, [pc, #384]	@ (800a798 <USBD_COMPOSITE_Mount_Class+0x1f8>)
 800a616:	f005 f83a 	bl	800f68e <memcpy>

  in_ep_track += 1;
 800a61a:	7afb      	ldrb	r3, [r7, #11]
 800a61c:	3301      	adds	r3, #1
 800a61e:	72fb      	strb	r3, [r7, #11]
  out_ep_track += 1;
 800a620:	7abb      	ldrb	r3, [r7, #10]
 800a622:	3301      	adds	r3, #1
 800a624:	72bb      	strb	r3, [r7, #10]
  interface_no_track += 1;
 800a626:	7a7b      	ldrb	r3, [r7, #9]
 800a628:	3301      	adds	r3, #1
 800a62a:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += 1;
 800a62c:	4b58      	ldr	r3, [pc, #352]	@ (800a790 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800a62e:	781b      	ldrb	r3, [r3, #0]
 800a630:	3301      	adds	r3, #1
 800a632:	b2da      	uxtb	r2, r3
 800a634:	4b56      	ldr	r3, [pc, #344]	@ (800a790 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800a636:	701a      	strb	r2, [r3, #0]
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_CDC_ACM == 1)
  ptr = USBD_CDC_ACM.GetFSConfigDescriptor(&len);
 800a638:	4b58      	ldr	r3, [pc, #352]	@ (800a79c <USBD_COMPOSITE_Mount_Class+0x1fc>)
 800a63a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a63c:	1d3a      	adds	r2, r7, #4
 800a63e:	4610      	mov	r0, r2
 800a640:	4798      	blx	r3
 800a642:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 800a644:	7a7b      	ldrb	r3, [r7, #9]
 800a646:	3301      	adds	r3, #1
 800a648:	b2d8      	uxtb	r0, r3
 800a64a:	7afb      	ldrb	r3, [r7, #11]
 800a64c:	3301      	adds	r3, #1
 800a64e:	b2db      	uxtb	r3, r3
 800a650:	4a4f      	ldr	r2, [pc, #316]	@ (800a790 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800a652:	7812      	ldrb	r2, [r2, #0]
 800a654:	7afc      	ldrb	r4, [r7, #11]
 800a656:	7a79      	ldrb	r1, [r7, #9]
 800a658:	9202      	str	r2, [sp, #8]
 800a65a:	7aba      	ldrb	r2, [r7, #10]
 800a65c:	9201      	str	r2, [sp, #4]
 800a65e:	9300      	str	r3, [sp, #0]
 800a660:	4623      	mov	r3, r4
 800a662:	4602      	mov	r2, r0
 800a664:	68f8      	ldr	r0, [r7, #12]
 800a666:	f7ff fd43 	bl	800a0f0 <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	3309      	adds	r3, #9
 800a66e:	88ba      	ldrh	r2, [r7, #4]
 800a670:	3a09      	subs	r2, #9
 800a672:	4619      	mov	r1, r3
 800a674:	484a      	ldr	r0, [pc, #296]	@ (800a7a0 <USBD_COMPOSITE_Mount_Class+0x200>)
 800a676:	f005 f80a 	bl	800f68e <memcpy>

  ptr = USBD_CDC_ACM.GetHSConfigDescriptor(&len);
 800a67a:	4b48      	ldr	r3, [pc, #288]	@ (800a79c <USBD_COMPOSITE_Mount_Class+0x1fc>)
 800a67c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a67e:	1d3a      	adds	r2, r7, #4
 800a680:	4610      	mov	r0, r2
 800a682:	4798      	blx	r3
 800a684:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 800a686:	7a7b      	ldrb	r3, [r7, #9]
 800a688:	3301      	adds	r3, #1
 800a68a:	b2d8      	uxtb	r0, r3
 800a68c:	7afb      	ldrb	r3, [r7, #11]
 800a68e:	3301      	adds	r3, #1
 800a690:	b2db      	uxtb	r3, r3
 800a692:	4a3f      	ldr	r2, [pc, #252]	@ (800a790 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800a694:	7812      	ldrb	r2, [r2, #0]
 800a696:	7afc      	ldrb	r4, [r7, #11]
 800a698:	7a79      	ldrb	r1, [r7, #9]
 800a69a:	9202      	str	r2, [sp, #8]
 800a69c:	7aba      	ldrb	r2, [r7, #10]
 800a69e:	9201      	str	r2, [sp, #4]
 800a6a0:	9300      	str	r3, [sp, #0]
 800a6a2:	4623      	mov	r3, r4
 800a6a4:	4602      	mov	r2, r0
 800a6a6:	68f8      	ldr	r0, [r7, #12]
 800a6a8:	f7ff fd22 	bl	800a0f0 <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	3309      	adds	r3, #9
 800a6b0:	88ba      	ldrh	r2, [r7, #4]
 800a6b2:	3a09      	subs	r2, #9
 800a6b4:	4619      	mov	r1, r3
 800a6b6:	483b      	ldr	r0, [pc, #236]	@ (800a7a4 <USBD_COMPOSITE_Mount_Class+0x204>)
 800a6b8:	f004 ffe9 	bl	800f68e <memcpy>

  in_ep_track += 2 * USBD_CDC_ACM_COUNT;
 800a6bc:	7afb      	ldrb	r3, [r7, #11]
 800a6be:	3302      	adds	r3, #2
 800a6c0:	72fb      	strb	r3, [r7, #11]
  out_ep_track += 1 * USBD_CDC_ACM_COUNT;
 800a6c2:	7abb      	ldrb	r3, [r7, #10]
 800a6c4:	3301      	adds	r3, #1
 800a6c6:	72bb      	strb	r3, [r7, #10]
  interface_no_track += 2 * USBD_CDC_ACM_COUNT;
 800a6c8:	7a7b      	ldrb	r3, [r7, #9]
 800a6ca:	3302      	adds	r3, #2
 800a6cc:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += USBD_CDC_ACM_COUNT;
 800a6ce:	4b30      	ldr	r3, [pc, #192]	@ (800a790 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800a6d0:	781b      	ldrb	r3, [r3, #0]
 800a6d2:	3301      	adds	r3, #1
 800a6d4:	b2da      	uxtb	r2, r3
 800a6d6:	4b2e      	ldr	r3, [pc, #184]	@ (800a790 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800a6d8:	701a      	strb	r2, [r3, #0]
#endif

  uint16_t CFG_SIZE = sizeof(USBD_COMPOSITE_CFG_DESC_t);
 800a6da:	236b      	movs	r3, #107	@ 0x6b
 800a6dc:	80fb      	strh	r3, [r7, #6]
  ptr = USBD_COMPOSITE_HSCfgDesc.CONFIG_DESC;
 800a6de:	4b32      	ldr	r3, [pc, #200]	@ (800a7a8 <USBD_COMPOSITE_Mount_Class+0x208>)
 800a6e0:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	2209      	movs	r2, #9
 800a6e6:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	3301      	adds	r3, #1
 800a6ec:	2202      	movs	r2, #2
 800a6ee:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	3302      	adds	r3, #2
 800a6f4:	88fa      	ldrh	r2, [r7, #6]
 800a6f6:	b2d2      	uxtb	r2, r2
 800a6f8:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 800a6fa:	88fb      	ldrh	r3, [r7, #6]
 800a6fc:	0a1b      	lsrs	r3, r3, #8
 800a6fe:	b29a      	uxth	r2, r3
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	3303      	adds	r3, #3
 800a704:	b2d2      	uxtb	r2, r2
 800a706:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	3304      	adds	r3, #4
 800a70c:	7a7a      	ldrb	r2, [r7, #9]
 800a70e:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	3305      	adds	r3, #5
 800a714:	2201      	movs	r2, #1
 800a716:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	3306      	adds	r3, #6
 800a71c:	2200      	movs	r2, #0
 800a71e:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	3307      	adds	r3, #7
 800a724:	22c0      	movs	r2, #192	@ 0xc0
 800a726:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	3308      	adds	r3, #8
 800a72c:	2232      	movs	r2, #50	@ 0x32
 800a72e:	701a      	strb	r2, [r3, #0]

  ptr = USBD_COMPOSITE_FSCfgDesc.CONFIG_DESC;
 800a730:	4b1e      	ldr	r3, [pc, #120]	@ (800a7ac <USBD_COMPOSITE_Mount_Class+0x20c>)
 800a732:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	2209      	movs	r2, #9
 800a738:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	3301      	adds	r3, #1
 800a73e:	2202      	movs	r2, #2
 800a740:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	3302      	adds	r3, #2
 800a746:	88fa      	ldrh	r2, [r7, #6]
 800a748:	b2d2      	uxtb	r2, r2
 800a74a:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 800a74c:	88fb      	ldrh	r3, [r7, #6]
 800a74e:	0a1b      	lsrs	r3, r3, #8
 800a750:	b29a      	uxth	r2, r3
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	3303      	adds	r3, #3
 800a756:	b2d2      	uxtb	r2, r2
 800a758:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	3304      	adds	r3, #4
 800a75e:	7a7a      	ldrb	r2, [r7, #9]
 800a760:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	3305      	adds	r3, #5
 800a766:	2201      	movs	r2, #1
 800a768:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	3306      	adds	r3, #6
 800a76e:	2200      	movs	r2, #0
 800a770:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	3307      	adds	r3, #7
 800a776:	22c0      	movs	r2, #192	@ 0xc0
 800a778:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	3308      	adds	r3, #8
 800a77e:	2232      	movs	r2, #50	@ 0x32
 800a780:	701a      	strb	r2, [r3, #0]

  (void)out_ep_track;
  (void)in_ep_track;
}
 800a782:	bf00      	nop
 800a784:	3714      	adds	r7, #20
 800a786:	46bd      	mov	sp, r7
 800a788:	bd90      	pop	{r4, r7, pc}
 800a78a:	bf00      	nop
 800a78c:	200001f8 	.word	0x200001f8
 800a790:	200001e8 	.word	0x200001e8
 800a794:	20001539 	.word	0x20001539
 800a798:	200015a5 	.word	0x200015a5
 800a79c:	200000d8 	.word	0x200000d8
 800a7a0:	20001559 	.word	0x20001559
 800a7a4:	200015c5 	.word	0x200015c5
 800a7a8:	2000159c 	.word	0x2000159c
 800a7ac:	20001530 	.word	0x20001530

0800a7b0 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b084      	sub	sp, #16
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
 800a7b8:	460b      	mov	r3, r1
 800a7ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = &CUSTOM_HID_Instance;
 800a7bc:	4b43      	ldr	r3, [pc, #268]	@ (800a8cc <USBD_CUSTOM_HID_Init+0x11c>)
 800a7be:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d105      	bne.n	800a7d2 <USBD_CUSTOM_HID_Init+0x22>
  {
    pdev->pClassData_HID_Custom = NULL;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
    return (uint8_t)USBD_EMEM;
 800a7ce:	2302      	movs	r3, #2
 800a7d0:	e077      	b.n	800a8c2 <USBD_CUSTOM_HID_Init+0x112>
  }

  pdev->pClassData_HID_Custom = (void *)hhid;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	68fa      	ldr	r2, [r7, #12]
 800a7d6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	7c1b      	ldrb	r3, [r3, #16]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d11b      	bne.n	800a81a <USBD_CUSTOM_HID_Init+0x6a>
  {
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800a7e2:	4b3b      	ldr	r3, [pc, #236]	@ (800a8d0 <USBD_CUSTOM_HID_Init+0x120>)
 800a7e4:	781b      	ldrb	r3, [r3, #0]
 800a7e6:	f003 020f 	and.w	r2, r3, #15
 800a7ea:	6879      	ldr	r1, [r7, #4]
 800a7ec:	4613      	mov	r3, r2
 800a7ee:	009b      	lsls	r3, r3, #2
 800a7f0:	4413      	add	r3, r2
 800a7f2:	009b      	lsls	r3, r3, #2
 800a7f4:	440b      	add	r3, r1
 800a7f6:	3326      	adds	r3, #38	@ 0x26
 800a7f8:	2205      	movs	r2, #5
 800a7fa:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800a7fc:	4b35      	ldr	r3, [pc, #212]	@ (800a8d4 <USBD_CUSTOM_HID_Init+0x124>)
 800a7fe:	781b      	ldrb	r3, [r3, #0]
 800a800:	f003 020f 	and.w	r2, r3, #15
 800a804:	6879      	ldr	r1, [r7, #4]
 800a806:	4613      	mov	r3, r2
 800a808:	009b      	lsls	r3, r3, #2
 800a80a:	4413      	add	r3, r2
 800a80c:	009b      	lsls	r3, r3, #2
 800a80e:	440b      	add	r3, r1
 800a810:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800a814:	2205      	movs	r2, #5
 800a816:	801a      	strh	r2, [r3, #0]
 800a818:	e01a      	b.n	800a850 <USBD_CUSTOM_HID_Init+0xa0>
  }
  else /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800a81a:	4b2d      	ldr	r3, [pc, #180]	@ (800a8d0 <USBD_CUSTOM_HID_Init+0x120>)
 800a81c:	781b      	ldrb	r3, [r3, #0]
 800a81e:	f003 020f 	and.w	r2, r3, #15
 800a822:	6879      	ldr	r1, [r7, #4]
 800a824:	4613      	mov	r3, r2
 800a826:	009b      	lsls	r3, r3, #2
 800a828:	4413      	add	r3, r2
 800a82a:	009b      	lsls	r3, r3, #2
 800a82c:	440b      	add	r3, r1
 800a82e:	3326      	adds	r3, #38	@ 0x26
 800a830:	2205      	movs	r2, #5
 800a832:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800a834:	4b27      	ldr	r3, [pc, #156]	@ (800a8d4 <USBD_CUSTOM_HID_Init+0x124>)
 800a836:	781b      	ldrb	r3, [r3, #0]
 800a838:	f003 020f 	and.w	r2, r3, #15
 800a83c:	6879      	ldr	r1, [r7, #4]
 800a83e:	4613      	mov	r3, r2
 800a840:	009b      	lsls	r3, r3, #2
 800a842:	4413      	add	r3, r2
 800a844:	009b      	lsls	r3, r3, #2
 800a846:	440b      	add	r3, r1
 800a848:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800a84c:	2205      	movs	r2, #5
 800a84e:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_IN_EP, USBD_EP_TYPE_INTR,
 800a850:	4b1f      	ldr	r3, [pc, #124]	@ (800a8d0 <USBD_CUSTOM_HID_Init+0x120>)
 800a852:	7819      	ldrb	r1, [r3, #0]
 800a854:	2302      	movs	r3, #2
 800a856:	2203      	movs	r2, #3
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f001 fdd6 	bl	800c40a <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].is_used = 1U;
 800a85e:	4b1c      	ldr	r3, [pc, #112]	@ (800a8d0 <USBD_CUSTOM_HID_Init+0x120>)
 800a860:	781b      	ldrb	r3, [r3, #0]
 800a862:	f003 020f 	and.w	r2, r3, #15
 800a866:	6879      	ldr	r1, [r7, #4]
 800a868:	4613      	mov	r3, r2
 800a86a:	009b      	lsls	r3, r3, #2
 800a86c:	4413      	add	r3, r2
 800a86e:	009b      	lsls	r3, r3, #2
 800a870:	440b      	add	r3, r1
 800a872:	3324      	adds	r3, #36	@ 0x24
 800a874:	2201      	movs	r2, #1
 800a876:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_OUT_EP, USBD_EP_TYPE_INTR,
 800a878:	4b16      	ldr	r3, [pc, #88]	@ (800a8d4 <USBD_CUSTOM_HID_Init+0x124>)
 800a87a:	7819      	ldrb	r1, [r3, #0]
 800a87c:	2302      	movs	r3, #2
 800a87e:	2203      	movs	r2, #3
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f001 fdc2 	bl	800c40a <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].is_used = 1U;
 800a886:	4b13      	ldr	r3, [pc, #76]	@ (800a8d4 <USBD_CUSTOM_HID_Init+0x124>)
 800a888:	781b      	ldrb	r3, [r3, #0]
 800a88a:	f003 020f 	and.w	r2, r3, #15
 800a88e:	6879      	ldr	r1, [r7, #4]
 800a890:	4613      	mov	r3, r2
 800a892:	009b      	lsls	r3, r3, #2
 800a894:	4413      	add	r3, r2
 800a896:	009b      	lsls	r3, r3, #2
 800a898:	440b      	add	r3, r1
 800a89a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a89e:	2201      	movs	r2, #1
 800a8a0:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	751a      	strb	r2, [r3, #20]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->Init();
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800a8ae:	685b      	ldr	r3, [r3, #4]
 800a8b0:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_OUT_EP, hhid->Report_buf,
 800a8b2:	4b08      	ldr	r3, [pc, #32]	@ (800a8d4 <USBD_CUSTOM_HID_Init+0x124>)
 800a8b4:	7819      	ldrb	r1, [r3, #0]
 800a8b6:	68fa      	ldr	r2, [r7, #12]
 800a8b8:	2302      	movs	r3, #2
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f001 fe94 	bl	800c5e8 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 800a8c0:	2300      	movs	r3, #0
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3710      	adds	r7, #16
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}
 800a8ca:	bf00      	nop
 800a8cc:	2000164c 	.word	0x2000164c
 800a8d0:	200001f6 	.word	0x200001f6
 800a8d4:	200001f7 	.word	0x200001f7

0800a8d8 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b082      	sub	sp, #8
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	460b      	mov	r3, r1
 800a8e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_IN_EP);
 800a8e4:	4b2a      	ldr	r3, [pc, #168]	@ (800a990 <USBD_CUSTOM_HID_DeInit+0xb8>)
 800a8e6:	781b      	ldrb	r3, [r3, #0]
 800a8e8:	4619      	mov	r1, r3
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f001 fdb3 	bl	800c456 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].is_used = 0U;
 800a8f0:	4b27      	ldr	r3, [pc, #156]	@ (800a990 <USBD_CUSTOM_HID_DeInit+0xb8>)
 800a8f2:	781b      	ldrb	r3, [r3, #0]
 800a8f4:	f003 020f 	and.w	r2, r3, #15
 800a8f8:	6879      	ldr	r1, [r7, #4]
 800a8fa:	4613      	mov	r3, r2
 800a8fc:	009b      	lsls	r3, r3, #2
 800a8fe:	4413      	add	r3, r2
 800a900:	009b      	lsls	r3, r3, #2
 800a902:	440b      	add	r3, r1
 800a904:	3324      	adds	r3, #36	@ 0x24
 800a906:	2200      	movs	r2, #0
 800a908:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = 0U;
 800a90a:	4b21      	ldr	r3, [pc, #132]	@ (800a990 <USBD_CUSTOM_HID_DeInit+0xb8>)
 800a90c:	781b      	ldrb	r3, [r3, #0]
 800a90e:	f003 020f 	and.w	r2, r3, #15
 800a912:	6879      	ldr	r1, [r7, #4]
 800a914:	4613      	mov	r3, r2
 800a916:	009b      	lsls	r3, r3, #2
 800a918:	4413      	add	r3, r2
 800a91a:	009b      	lsls	r3, r3, #2
 800a91c:	440b      	add	r3, r1
 800a91e:	3326      	adds	r3, #38	@ 0x26
 800a920:	2200      	movs	r2, #0
 800a922:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_OUT_EP);
 800a924:	4b1b      	ldr	r3, [pc, #108]	@ (800a994 <USBD_CUSTOM_HID_DeInit+0xbc>)
 800a926:	781b      	ldrb	r3, [r3, #0]
 800a928:	4619      	mov	r1, r3
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f001 fd93 	bl	800c456 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].is_used = 0U;
 800a930:	4b18      	ldr	r3, [pc, #96]	@ (800a994 <USBD_CUSTOM_HID_DeInit+0xbc>)
 800a932:	781b      	ldrb	r3, [r3, #0]
 800a934:	f003 020f 	and.w	r2, r3, #15
 800a938:	6879      	ldr	r1, [r7, #4]
 800a93a:	4613      	mov	r3, r2
 800a93c:	009b      	lsls	r3, r3, #2
 800a93e:	4413      	add	r3, r2
 800a940:	009b      	lsls	r3, r3, #2
 800a942:	440b      	add	r3, r1
 800a944:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a948:	2200      	movs	r2, #0
 800a94a:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = 0U;
 800a94c:	4b11      	ldr	r3, [pc, #68]	@ (800a994 <USBD_CUSTOM_HID_DeInit+0xbc>)
 800a94e:	781b      	ldrb	r3, [r3, #0]
 800a950:	f003 020f 	and.w	r2, r3, #15
 800a954:	6879      	ldr	r1, [r7, #4]
 800a956:	4613      	mov	r3, r2
 800a958:	009b      	lsls	r3, r3, #2
 800a95a:	4413      	add	r3, r2
 800a95c:	009b      	lsls	r3, r3, #2
 800a95e:	440b      	add	r3, r1
 800a960:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800a964:	2200      	movs	r2, #0
 800a966:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassData_HID_Custom != NULL)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d008      	beq.n	800a984 <USBD_CUSTOM_HID_DeInit+0xac>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->DeInit();
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800a978:	689b      	ldr	r3, [r3, #8]
 800a97a:	4798      	blx	r3
#if (0)
    USBD_free(pdev->pClassData_HID_Custom);
#endif
    pdev->pClassData_HID_Custom = NULL;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2200      	movs	r2, #0
 800a980:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
  }

  return (uint8_t)USBD_OK;
 800a984:	2300      	movs	r3, #0
}
 800a986:	4618      	mov	r0, r3
 800a988:	3708      	adds	r7, #8
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}
 800a98e:	bf00      	nop
 800a990:	200001f6 	.word	0x200001f6
 800a994:	200001f7 	.word	0x200001f7

0800a998 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b088      	sub	sp, #32
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
 800a9a0:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a9a8:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d101      	bne.n	800a9c4 <USBD_CUSTOM_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800a9c0:	2303      	movs	r3, #3
 800a9c2:	e0ed      	b.n	800aba0 <USBD_CUSTOM_HID_Setup+0x208>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	781b      	ldrb	r3, [r3, #0]
 800a9c8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d052      	beq.n	800aa76 <USBD_CUSTOM_HID_Setup+0xde>
 800a9d0:	2b20      	cmp	r3, #32
 800a9d2:	f040 80dd 	bne.w	800ab90 <USBD_CUSTOM_HID_Setup+0x1f8>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	785b      	ldrb	r3, [r3, #1]
 800a9da:	3b02      	subs	r3, #2
 800a9dc:	2b09      	cmp	r3, #9
 800a9de:	d842      	bhi.n	800aa66 <USBD_CUSTOM_HID_Setup+0xce>
 800a9e0:	a201      	add	r2, pc, #4	@ (adr r2, 800a9e8 <USBD_CUSTOM_HID_Setup+0x50>)
 800a9e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9e6:	bf00      	nop
 800a9e8:	0800aa41 	.word	0x0800aa41
 800a9ec:	0800aa1f 	.word	0x0800aa1f
 800a9f0:	0800aa67 	.word	0x0800aa67
 800a9f4:	0800aa67 	.word	0x0800aa67
 800a9f8:	0800aa67 	.word	0x0800aa67
 800a9fc:	0800aa67 	.word	0x0800aa67
 800aa00:	0800aa67 	.word	0x0800aa67
 800aa04:	0800aa51 	.word	0x0800aa51
 800aa08:	0800aa2f 	.word	0x0800aa2f
 800aa0c:	0800aa11 	.word	0x0800aa11
    {
    case CUSTOM_HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	885b      	ldrh	r3, [r3, #2]
 800aa14:	b2db      	uxtb	r3, r3
 800aa16:	461a      	mov	r2, r3
 800aa18:	693b      	ldr	r3, [r7, #16]
 800aa1a:	605a      	str	r2, [r3, #4]
      break;
 800aa1c:	e02a      	b.n	800aa74 <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	3304      	adds	r3, #4
 800aa22:	2201      	movs	r2, #1
 800aa24:	4619      	mov	r1, r3
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f001 fadd 	bl	800bfe6 <USBD_CtlSendData>
      break;
 800aa2c:	e022      	b.n	800aa74 <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	885b      	ldrh	r3, [r3, #2]
 800aa32:	0a1b      	lsrs	r3, r3, #8
 800aa34:	b29b      	uxth	r3, r3
 800aa36:	b2db      	uxtb	r3, r3
 800aa38:	461a      	mov	r2, r3
 800aa3a:	693b      	ldr	r3, [r7, #16]
 800aa3c:	609a      	str	r2, [r3, #8]
      break;
 800aa3e:	e019      	b.n	800aa74 <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800aa40:	693b      	ldr	r3, [r7, #16]
 800aa42:	3308      	adds	r3, #8
 800aa44:	2201      	movs	r2, #1
 800aa46:	4619      	mov	r1, r3
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f001 facc 	bl	800bfe6 <USBD_CtlSendData>
      break;
 800aa4e:	e011      	b.n	800aa74 <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_SET_REPORT:
      hhid->IsReportAvailable = 1U;
 800aa50:	693b      	ldr	r3, [r7, #16]
 800aa52:	2201      	movs	r2, #1
 800aa54:	611a      	str	r2, [r3, #16]
      (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 800aa56:	6939      	ldr	r1, [r7, #16]
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	88db      	ldrh	r3, [r3, #6]
 800aa5c:	461a      	mov	r2, r3
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f001 faed 	bl	800c03e <USBD_CtlPrepareRx>
      break;
 800aa64:	e006      	b.n	800aa74 <USBD_CUSTOM_HID_Setup+0xdc>

    default:
      USBD_CtlError(pdev, req);
 800aa66:	6839      	ldr	r1, [r7, #0]
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	f001 fa4b 	bl	800bf04 <USBD_CtlError>
      ret = USBD_FAIL;
 800aa6e:	2303      	movs	r3, #3
 800aa70:	75fb      	strb	r3, [r7, #23]
      break;
 800aa72:	bf00      	nop
    }
    break;
 800aa74:	e093      	b.n	800ab9e <USBD_CUSTOM_HID_Setup+0x206>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	785b      	ldrb	r3, [r3, #1]
 800aa7a:	2b0b      	cmp	r3, #11
 800aa7c:	d87f      	bhi.n	800ab7e <USBD_CUSTOM_HID_Setup+0x1e6>
 800aa7e:	a201      	add	r2, pc, #4	@ (adr r2, 800aa84 <USBD_CUSTOM_HID_Setup+0xec>)
 800aa80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa84:	0800aab5 	.word	0x0800aab5
 800aa88:	0800ab8d 	.word	0x0800ab8d
 800aa8c:	0800ab7f 	.word	0x0800ab7f
 800aa90:	0800ab7f 	.word	0x0800ab7f
 800aa94:	0800ab7f 	.word	0x0800ab7f
 800aa98:	0800ab7f 	.word	0x0800ab7f
 800aa9c:	0800aadf 	.word	0x0800aadf
 800aaa0:	0800ab7f 	.word	0x0800ab7f
 800aaa4:	0800ab7f 	.word	0x0800ab7f
 800aaa8:	0800ab7f 	.word	0x0800ab7f
 800aaac:	0800ab2d 	.word	0x0800ab2d
 800aab0:	0800ab57 	.word	0x0800ab57
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aaba:	b2db      	uxtb	r3, r3
 800aabc:	2b03      	cmp	r3, #3
 800aabe:	d107      	bne.n	800aad0 <USBD_CUSTOM_HID_Setup+0x138>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800aac0:	f107 030e 	add.w	r3, r7, #14
 800aac4:	2202      	movs	r2, #2
 800aac6:	4619      	mov	r1, r3
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f001 fa8c 	bl	800bfe6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800aace:	e05e      	b.n	800ab8e <USBD_CUSTOM_HID_Setup+0x1f6>
        USBD_CtlError(pdev, req);
 800aad0:	6839      	ldr	r1, [r7, #0]
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	f001 fa16 	bl	800bf04 <USBD_CtlError>
        ret = USBD_FAIL;
 800aad8:	2303      	movs	r3, #3
 800aada:	75fb      	strb	r3, [r7, #23]
      break;
 800aadc:	e057      	b.n	800ab8e <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	885b      	ldrh	r3, [r3, #2]
 800aae2:	0a1b      	lsrs	r3, r3, #8
 800aae4:	b29b      	uxth	r3, r3
 800aae6:	2b22      	cmp	r3, #34	@ 0x22
 800aae8:	d10b      	bne.n	800ab02 <USBD_CUSTOM_HID_Setup+0x16a>
      {
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	88db      	ldrh	r3, [r3, #6]
 800aaee:	2b46      	cmp	r3, #70	@ 0x46
 800aaf0:	bf28      	it	cs
 800aaf2:	2346      	movcs	r3, #70	@ 0x46
 800aaf4:	83fb      	strh	r3, [r7, #30]
        pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->pReport;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	61bb      	str	r3, [r7, #24]
 800ab00:	e00d      	b.n	800ab1e <USBD_CUSTOM_HID_Setup+0x186>
      }
      else
      {
        if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	885b      	ldrh	r3, [r3, #2]
 800ab06:	0a1b      	lsrs	r3, r3, #8
 800ab08:	b29b      	uxth	r3, r3
 800ab0a:	2b21      	cmp	r3, #33	@ 0x21
 800ab0c:	d107      	bne.n	800ab1e <USBD_CUSTOM_HID_Setup+0x186>
        {
          pbuf = USBD_CUSTOM_HID_Desc;
 800ab0e:	4b26      	ldr	r3, [pc, #152]	@ (800aba8 <USBD_CUSTOM_HID_Setup+0x210>)
 800ab10:	61bb      	str	r3, [r7, #24]
          len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	88db      	ldrh	r3, [r3, #6]
 800ab16:	2b09      	cmp	r3, #9
 800ab18:	bf28      	it	cs
 800ab1a:	2309      	movcs	r3, #9
 800ab1c:	83fb      	strh	r3, [r7, #30]
        }
      }

      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ab1e:	8bfb      	ldrh	r3, [r7, #30]
 800ab20:	461a      	mov	r2, r3
 800ab22:	69b9      	ldr	r1, [r7, #24]
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f001 fa5e 	bl	800bfe6 <USBD_CtlSendData>
      break;
 800ab2a:	e030      	b.n	800ab8e <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab32:	b2db      	uxtb	r3, r3
 800ab34:	2b03      	cmp	r3, #3
 800ab36:	d107      	bne.n	800ab48 <USBD_CUSTOM_HID_Setup+0x1b0>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800ab38:	693b      	ldr	r3, [r7, #16]
 800ab3a:	330c      	adds	r3, #12
 800ab3c:	2201      	movs	r2, #1
 800ab3e:	4619      	mov	r1, r3
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f001 fa50 	bl	800bfe6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800ab46:	e022      	b.n	800ab8e <USBD_CUSTOM_HID_Setup+0x1f6>
        USBD_CtlError(pdev, req);
 800ab48:	6839      	ldr	r1, [r7, #0]
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f001 f9da 	bl	800bf04 <USBD_CtlError>
        ret = USBD_FAIL;
 800ab50:	2303      	movs	r3, #3
 800ab52:	75fb      	strb	r3, [r7, #23]
      break;
 800ab54:	e01b      	b.n	800ab8e <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab5c:	b2db      	uxtb	r3, r3
 800ab5e:	2b03      	cmp	r3, #3
 800ab60:	d106      	bne.n	800ab70 <USBD_CUSTOM_HID_Setup+0x1d8>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	885b      	ldrh	r3, [r3, #2]
 800ab66:	b2db      	uxtb	r3, r3
 800ab68:	461a      	mov	r2, r3
 800ab6a:	693b      	ldr	r3, [r7, #16]
 800ab6c:	60da      	str	r2, [r3, #12]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800ab6e:	e00e      	b.n	800ab8e <USBD_CUSTOM_HID_Setup+0x1f6>
        USBD_CtlError(pdev, req);
 800ab70:	6839      	ldr	r1, [r7, #0]
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f001 f9c6 	bl	800bf04 <USBD_CtlError>
        ret = USBD_FAIL;
 800ab78:	2303      	movs	r3, #3
 800ab7a:	75fb      	strb	r3, [r7, #23]
      break;
 800ab7c:	e007      	b.n	800ab8e <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800ab7e:	6839      	ldr	r1, [r7, #0]
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	f001 f9bf 	bl	800bf04 <USBD_CtlError>
      ret = USBD_FAIL;
 800ab86:	2303      	movs	r3, #3
 800ab88:	75fb      	strb	r3, [r7, #23]
      break;
 800ab8a:	e000      	b.n	800ab8e <USBD_CUSTOM_HID_Setup+0x1f6>
      break;
 800ab8c:	bf00      	nop
    }
    break;
 800ab8e:	e006      	b.n	800ab9e <USBD_CUSTOM_HID_Setup+0x206>

  default:
    USBD_CtlError(pdev, req);
 800ab90:	6839      	ldr	r1, [r7, #0]
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f001 f9b6 	bl	800bf04 <USBD_CtlError>
    ret = USBD_FAIL;
 800ab98:	2303      	movs	r3, #3
 800ab9a:	75fb      	strb	r3, [r7, #23]
    break;
 800ab9c:	bf00      	nop
  }
  return (uint8_t)ret;
 800ab9e:	7dfb      	ldrb	r3, [r7, #23]
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	3720      	adds	r7, #32
 800aba4:	46bd      	mov	sp, r7
 800aba6:	bd80      	pop	{r7, pc}
 800aba8:	200002b8 	.word	0x200002b8

0800abac <USBD_CUSTOM_HID_SendReport>:
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b086      	sub	sp, #24
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	60f8      	str	r0, [r7, #12]
 800abb4:	60b9      	str	r1, [r7, #8]
 800abb6:	4613      	mov	r3, r2
 800abb8:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData_HID_Custom == NULL)
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d101      	bne.n	800abc8 <USBD_CUSTOM_HID_SendReport+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800abc4:	2303      	movs	r3, #3
 800abc6:	e01b      	b.n	800ac00 <USBD_CUSTOM_HID_SendReport+0x54>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800abce:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800abd6:	b2db      	uxtb	r3, r3
 800abd8:	2b03      	cmp	r3, #3
 800abda:	d110      	bne.n	800abfe <USBD_CUSTOM_HID_SendReport+0x52>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	7d1b      	ldrb	r3, [r3, #20]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d10a      	bne.n	800abfa <USBD_CUSTOM_HID_SendReport+0x4e>
    {
      hhid->state = CUSTOM_HID_BUSY;
 800abe4:	697b      	ldr	r3, [r7, #20]
 800abe6:	2201      	movs	r2, #1
 800abe8:	751a      	strb	r2, [r3, #20]
      (void)USBD_LL_Transmit(pdev, CUSTOM_HID_IN_EP, report, len);
 800abea:	4b07      	ldr	r3, [pc, #28]	@ (800ac08 <USBD_CUSTOM_HID_SendReport+0x5c>)
 800abec:	7819      	ldrb	r1, [r3, #0]
 800abee:	88fb      	ldrh	r3, [r7, #6]
 800abf0:	68ba      	ldr	r2, [r7, #8]
 800abf2:	68f8      	ldr	r0, [r7, #12]
 800abf4:	f001 fcd7 	bl	800c5a6 <USBD_LL_Transmit>
 800abf8:	e001      	b.n	800abfe <USBD_CUSTOM_HID_SendReport+0x52>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 800abfa:	2301      	movs	r3, #1
 800abfc:	e000      	b.n	800ac00 <USBD_CUSTOM_HID_SendReport+0x54>
    }
  }
  return (uint8_t)USBD_OK;
 800abfe:	2300      	movs	r3, #0
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	3718      	adds	r7, #24
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}
 800ac08:	200001f6 	.word	0x200001f6

0800ac0c <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b083      	sub	sp, #12
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2229      	movs	r2, #41	@ 0x29
 800ac18:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgFSDesc;
 800ac1a:	4b03      	ldr	r3, [pc, #12]	@ (800ac28 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	370c      	adds	r7, #12
 800ac20:	46bd      	mov	sp, r7
 800ac22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac26:	4770      	bx	lr
 800ac28:	20000234 	.word	0x20000234

0800ac2c <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	b083      	sub	sp, #12
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2229      	movs	r2, #41	@ 0x29
 800ac38:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgHSDesc;
 800ac3a:	4b03      	ldr	r3, [pc, #12]	@ (800ac48 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	370c      	adds	r7, #12
 800ac40:	46bd      	mov	sp, r7
 800ac42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac46:	4770      	bx	lr
 800ac48:	20000260 	.word	0x20000260

0800ac4c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ac4c:	b480      	push	{r7}
 800ac4e:	b083      	sub	sp, #12
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2229      	movs	r2, #41	@ 0x29
 800ac58:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 800ac5a:	4b03      	ldr	r3, [pc, #12]	@ (800ac68 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	370c      	adds	r7, #12
 800ac60:	46bd      	mov	sp, r7
 800ac62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac66:	4770      	bx	lr
 800ac68:	2000028c 	.word	0x2000028c

0800ac6c <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	b083      	sub	sp, #12
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
 800ac74:	460b      	mov	r3, r1
 800ac76:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom)->state = CUSTOM_HID_IDLE;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ac7e:	2200      	movs	r2, #0
 800ac80:	751a      	strb	r2, [r3, #20]

  return (uint8_t)USBD_OK;
 800ac82:	2300      	movs	r3, #0
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	370c      	adds	r7, #12
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8e:	4770      	bx	lr

0800ac90 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b084      	sub	sp, #16
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
 800ac98:	460b      	mov	r3, r1
 800ac9a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData_HID_Custom == NULL)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d101      	bne.n	800acaa <USBD_CUSTOM_HID_DataOut+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800aca6:	2303      	movs	r3, #3
 800aca8:	e00e      	b.n	800acc8 <USBD_CUSTOM_HID_DataOut+0x38>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800acb0:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->OutEvent(hhid->Report_buf[0], hhid->Report_buf[1]);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800acb8:	68db      	ldr	r3, [r3, #12]
 800acba:	68fa      	ldr	r2, [r7, #12]
 800acbc:	7810      	ldrb	r0, [r2, #0]
 800acbe:	68fa      	ldr	r2, [r7, #12]
 800acc0:	7852      	ldrb	r2, [r2, #1]
 800acc2:	4611      	mov	r1, r2
 800acc4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800acc6:	2300      	movs	r3, #0
}
 800acc8:	4618      	mov	r0, r3
 800acca:	3710      	adds	r7, #16
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}

0800acd0 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b084      	sub	sp, #16
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800acde:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d101      	bne.n	800acea <USBD_CUSTOM_HID_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800ace6:	2303      	movs	r3, #3
 800ace8:	e011      	b.n	800ad0e <USBD_CUSTOM_HID_EP0_RxReady+0x3e>
  }

  if (hhid->IsReportAvailable == 1U)
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	691b      	ldr	r3, [r3, #16]
 800acee:	2b01      	cmp	r3, #1
 800acf0:	d10c      	bne.n	800ad0c <USBD_CUSTOM_HID_EP0_RxReady+0x3c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->OutEvent(hhid->Report_buf[0], hhid->Report_buf[1]);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800acf8:	68db      	ldr	r3, [r3, #12]
 800acfa:	68fa      	ldr	r2, [r7, #12]
 800acfc:	7810      	ldrb	r0, [r2, #0]
 800acfe:	68fa      	ldr	r2, [r7, #12]
 800ad00:	7852      	ldrb	r2, [r2, #1]
 800ad02:	4611      	mov	r1, r2
 800ad04:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	2200      	movs	r2, #0
 800ad0a:	611a      	str	r2, [r3, #16]
  }

  return (uint8_t)USBD_OK;
 800ad0c:	2300      	movs	r3, #0
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	3710      	adds	r7, #16
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}
	...

0800ad18 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b083      	sub	sp, #12
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	220a      	movs	r2, #10
 800ad24:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800ad26:	4b03      	ldr	r3, [pc, #12]	@ (800ad34 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	370c      	adds	r7, #12
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad32:	4770      	bx	lr
 800ad34:	200002c4 	.word	0x200002c4

0800ad38 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b083      	sub	sp, #12
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
 800ad40:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d101      	bne.n	800ad4c <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ad48:	2303      	movs	r3, #3
 800ad4a:	e004      	b.n	800ad56 <USBD_CUSTOM_HID_RegisterInterface+0x1e>
  }

  pdev->pUserData_HID_Custom = fops;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	683a      	ldr	r2, [r7, #0]
 800ad50:	f8c3 22dc 	str.w	r2, [r3, #732]	@ 0x2dc

  return (uint8_t)USBD_OK;
 800ad54:	2300      	movs	r3, #0
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	370c      	adds	r7, #12
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad60:	4770      	bx	lr
	...

0800ad64 <USBD_Update_HID_Custom_DESC>:

void USBD_Update_HID_Custom_DESC(uint8_t *desc, uint8_t itf_no, uint8_t in_ep, uint8_t out_ep, uint8_t str_idx)
{
 800ad64:	b480      	push	{r7}
 800ad66:	b083      	sub	sp, #12
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
 800ad6c:	4608      	mov	r0, r1
 800ad6e:	4611      	mov	r1, r2
 800ad70:	461a      	mov	r2, r3
 800ad72:	4603      	mov	r3, r0
 800ad74:	70fb      	strb	r3, [r7, #3]
 800ad76:	460b      	mov	r3, r1
 800ad78:	70bb      	strb	r3, [r7, #2]
 800ad7a:	4613      	mov	r3, r2
 800ad7c:	707b      	strb	r3, [r7, #1]
  desc[11] = itf_no;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	330b      	adds	r3, #11
 800ad82:	78fa      	ldrb	r2, [r7, #3]
 800ad84:	701a      	strb	r2, [r3, #0]
  desc[17] = str_idx;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	3311      	adds	r3, #17
 800ad8a:	7c3a      	ldrb	r2, [r7, #16]
 800ad8c:	701a      	strb	r2, [r3, #0]
  desc[29] = in_ep;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	331d      	adds	r3, #29
 800ad92:	78ba      	ldrb	r2, [r7, #2]
 800ad94:	701a      	strb	r2, [r3, #0]
  desc[36] = out_ep;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	3324      	adds	r3, #36	@ 0x24
 800ad9a:	787a      	ldrb	r2, [r7, #1]
 800ad9c:	701a      	strb	r2, [r3, #0]

  CUSTOM_HID_IN_EP = in_ep;
 800ad9e:	4a09      	ldr	r2, [pc, #36]	@ (800adc4 <USBD_Update_HID_Custom_DESC+0x60>)
 800ada0:	78bb      	ldrb	r3, [r7, #2]
 800ada2:	7013      	strb	r3, [r2, #0]
  CUSTOM_HID_OUT_EP = out_ep;
 800ada4:	4a08      	ldr	r2, [pc, #32]	@ (800adc8 <USBD_Update_HID_Custom_DESC+0x64>)
 800ada6:	787b      	ldrb	r3, [r7, #1]
 800ada8:	7013      	strb	r3, [r2, #0]
  CUSTOM_HID_ITF_NBR = itf_no;
 800adaa:	4a08      	ldr	r2, [pc, #32]	@ (800adcc <USBD_Update_HID_Custom_DESC+0x68>)
 800adac:	78fb      	ldrb	r3, [r7, #3]
 800adae:	7013      	strb	r3, [r2, #0]
  CUSTOM_HID_STR_DESC_IDX = str_idx;
 800adb0:	4a07      	ldr	r2, [pc, #28]	@ (800add0 <USBD_Update_HID_Custom_DESC+0x6c>)
 800adb2:	7c3b      	ldrb	r3, [r7, #16]
 800adb4:	7013      	strb	r3, [r2, #0]
}
 800adb6:	bf00      	nop
 800adb8:	370c      	adds	r7, #12
 800adba:	46bd      	mov	sp, r7
 800adbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc0:	4770      	bx	lr
 800adc2:	bf00      	nop
 800adc4:	200001f6 	.word	0x200001f6
 800adc8:	200001f7 	.word	0x200001f7
 800adcc:	20001648 	.word	0x20001648
 800add0:	20001649 	.word	0x20001649

0800add4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b086      	sub	sp, #24
 800add8:	af00      	add	r7, sp, #0
 800adda:	60f8      	str	r0, [r7, #12]
 800addc:	60b9      	str	r1, [r7, #8]
 800adde:	4613      	mov	r3, r2
 800ade0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d101      	bne.n	800adec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ade8:	2303      	movs	r3, #3
 800adea:	e01b      	b.n	800ae24 <USBD_Init+0x50>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	2200      	movs	r2, #0
 800adf0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pConfDesc = NULL;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	2200      	movs	r2, #0
 800adf8:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d003      	beq.n	800ae0a <USBD_Init+0x36>
  {
    pdev->pDesc = pdesc;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	68ba      	ldr	r2, [r7, #8]
 800ae06:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	2201      	movs	r2, #1
 800ae0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	79fa      	ldrb	r2, [r7, #7]
 800ae16:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ae18:	68f8      	ldr	r0, [r7, #12]
 800ae1a:	f001 fa7d 	bl	800c318 <USBD_LL_Init>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ae22:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae24:	4618      	mov	r0, r3
 800ae26:	3718      	adds	r7, #24
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}

0800ae2c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b084      	sub	sp, #16
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
 800ae34:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ae36:	2300      	movs	r3, #0
 800ae38:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d101      	bne.n	800ae44 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800ae40:	2303      	movs	r3, #3
 800ae42:	e02d      	b.n	800aea0 <USBD_RegisterClass+0x74>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	683a      	ldr	r2, [r7, #0]
 800ae48:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  /* Get Device Configuration Descriptor */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	7c1b      	ldrb	r3, [r3, #16]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d112      	bne.n	800ae7a <USBD_RegisterClass+0x4e>
  {
	  if (pdev->pClass->GetHSConfigDescriptor != NULL)
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d01e      	beq.n	800ae9e <USBD_RegisterClass+0x72>
	  {
		  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae68:	f107 020e 	add.w	r2, r7, #14
 800ae6c:	4610      	mov	r0, r2
 800ae6e:	4798      	blx	r3
 800ae70:	4602      	mov	r2, r0
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318
 800ae78:	e011      	b.n	800ae9e <USBD_RegisterClass+0x72>
	  }
  }
  else if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d00b      	beq.n	800ae9e <USBD_RegisterClass+0x72>
  {
	  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae8e:	f107 020e 	add.w	r2, r7, #14
 800ae92:	4610      	mov	r0, r2
 800ae94:	4798      	blx	r3
 800ae96:	4602      	mov	r2, r0
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318
  }

  return USBD_OK;
 800ae9e:	2300      	movs	r3, #0
}
 800aea0:	4618      	mov	r0, r3
 800aea2:	3710      	adds	r7, #16
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd80      	pop	{r7, pc}

0800aea8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b082      	sub	sp, #8
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	f001 fa8f 	bl	800c3d4 <USBD_LL_Start>
 800aeb6:	4603      	mov	r3, r0
}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	3708      	adds	r7, #8
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}

0800aec0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800aec0:	b480      	push	{r7}
 800aec2:	b083      	sub	sp, #12
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800aec8:	2300      	movs	r3, #0
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	370c      	adds	r7, #12
 800aece:	46bd      	mov	sp, r7
 800aed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed4:	4770      	bx	lr

0800aed6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aed6:	b580      	push	{r7, lr}
 800aed8:	b084      	sub	sp, #16
 800aeda:	af00      	add	r7, sp, #0
 800aedc:	6078      	str	r0, [r7, #4]
 800aede:	460b      	mov	r3, r1
 800aee0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800aee2:	2303      	movs	r3, #3
 800aee4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d009      	beq.n	800af04 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	78fa      	ldrb	r2, [r7, #3]
 800aefa:	4611      	mov	r1, r2
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	4798      	blx	r3
 800af00:	4603      	mov	r3, r0
 800af02:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800af04:	7bfb      	ldrb	r3, [r7, #15]
}
 800af06:	4618      	mov	r0, r3
 800af08:	3710      	adds	r7, #16
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}

0800af0e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800af0e:	b580      	push	{r7, lr}
 800af10:	b082      	sub	sp, #8
 800af12:	af00      	add	r7, sp, #0
 800af14:	6078      	str	r0, [r7, #4]
 800af16:	460b      	mov	r3, r1
 800af18:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af20:	2b00      	cmp	r3, #0
 800af22:	d007      	beq.n	800af34 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af2a:	685b      	ldr	r3, [r3, #4]
 800af2c:	78fa      	ldrb	r2, [r7, #3]
 800af2e:	4611      	mov	r1, r2
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	4798      	blx	r3
  }

  return USBD_OK;
 800af34:	2300      	movs	r3, #0
}
 800af36:	4618      	mov	r0, r3
 800af38:	3708      	adds	r7, #8
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd80      	pop	{r7, pc}

0800af3e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800af3e:	b580      	push	{r7, lr}
 800af40:	b084      	sub	sp, #16
 800af42:	af00      	add	r7, sp, #0
 800af44:	6078      	str	r0, [r7, #4]
 800af46:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800af4e:	6839      	ldr	r1, [r7, #0]
 800af50:	4618      	mov	r0, r3
 800af52:	f000 ff9d 	bl	800be90 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2201      	movs	r2, #1
 800af5a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800af64:	461a      	mov	r2, r3
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800af72:	f003 031f 	and.w	r3, r3, #31
 800af76:	2b02      	cmp	r3, #2
 800af78:	d01a      	beq.n	800afb0 <USBD_LL_SetupStage+0x72>
 800af7a:	2b02      	cmp	r3, #2
 800af7c:	d822      	bhi.n	800afc4 <USBD_LL_SetupStage+0x86>
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d002      	beq.n	800af88 <USBD_LL_SetupStage+0x4a>
 800af82:	2b01      	cmp	r3, #1
 800af84:	d00a      	beq.n	800af9c <USBD_LL_SetupStage+0x5e>
 800af86:	e01d      	b.n	800afc4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800af8e:	4619      	mov	r1, r3
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f000 fa5d 	bl	800b450 <USBD_StdDevReq>
 800af96:	4603      	mov	r3, r0
 800af98:	73fb      	strb	r3, [r7, #15]
      break;
 800af9a:	e020      	b.n	800afde <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800afa2:	4619      	mov	r1, r3
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f000 fac1 	bl	800b52c <USBD_StdItfReq>
 800afaa:	4603      	mov	r3, r0
 800afac:	73fb      	strb	r3, [r7, #15]
      break;
 800afae:	e016      	b.n	800afde <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800afb6:	4619      	mov	r1, r3
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f000 fb00 	bl	800b5be <USBD_StdEPReq>
 800afbe:	4603      	mov	r3, r0
 800afc0:	73fb      	strb	r3, [r7, #15]
      break;
 800afc2:	e00c      	b.n	800afde <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800afca:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800afce:	b2db      	uxtb	r3, r3
 800afd0:	4619      	mov	r1, r3
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	f001 fa5e 	bl	800c494 <USBD_LL_StallEP>
 800afd8:	4603      	mov	r3, r0
 800afda:	73fb      	strb	r3, [r7, #15]
      break;
 800afdc:	bf00      	nop
  }

  return ret;
 800afde:	7bfb      	ldrb	r3, [r7, #15]
}
 800afe0:	4618      	mov	r0, r3
 800afe2:	3710      	adds	r7, #16
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd80      	pop	{r7, pc}

0800afe8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b086      	sub	sp, #24
 800afec:	af00      	add	r7, sp, #0
 800afee:	60f8      	str	r0, [r7, #12]
 800aff0:	460b      	mov	r3, r1
 800aff2:	607a      	str	r2, [r7, #4]
 800aff4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800aff6:	7afb      	ldrb	r3, [r7, #11]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d138      	bne.n	800b06e <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b002:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b00a:	2b03      	cmp	r3, #3
 800b00c:	d14a      	bne.n	800b0a4 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	689a      	ldr	r2, [r3, #8]
 800b012:	693b      	ldr	r3, [r7, #16]
 800b014:	68db      	ldr	r3, [r3, #12]
 800b016:	429a      	cmp	r2, r3
 800b018:	d913      	bls.n	800b042 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b01a:	693b      	ldr	r3, [r7, #16]
 800b01c:	689a      	ldr	r2, [r3, #8]
 800b01e:	693b      	ldr	r3, [r7, #16]
 800b020:	68db      	ldr	r3, [r3, #12]
 800b022:	1ad2      	subs	r2, r2, r3
 800b024:	693b      	ldr	r3, [r7, #16]
 800b026:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b028:	693b      	ldr	r3, [r7, #16]
 800b02a:	68da      	ldr	r2, [r3, #12]
 800b02c:	693b      	ldr	r3, [r7, #16]
 800b02e:	689b      	ldr	r3, [r3, #8]
 800b030:	4293      	cmp	r3, r2
 800b032:	bf28      	it	cs
 800b034:	4613      	movcs	r3, r2
 800b036:	461a      	mov	r2, r3
 800b038:	6879      	ldr	r1, [r7, #4]
 800b03a:	68f8      	ldr	r0, [r7, #12]
 800b03c:	f001 f81c 	bl	800c078 <USBD_CtlContinueRx>
 800b040:	e030      	b.n	800b0a4 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b048:	b2db      	uxtb	r3, r3
 800b04a:	2b03      	cmp	r3, #3
 800b04c:	d10b      	bne.n	800b066 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b054:	691b      	ldr	r3, [r3, #16]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d005      	beq.n	800b066 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b060:	691b      	ldr	r3, [r3, #16]
 800b062:	68f8      	ldr	r0, [r7, #12]
 800b064:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b066:	68f8      	ldr	r0, [r7, #12]
 800b068:	f001 f817 	bl	800c09a <USBD_CtlSendStatus>
 800b06c:	e01a      	b.n	800b0a4 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b074:	b2db      	uxtb	r3, r3
 800b076:	2b03      	cmp	r3, #3
 800b078:	d114      	bne.n	800b0a4 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b080:	699b      	ldr	r3, [r3, #24]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d00e      	beq.n	800b0a4 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b08c:	699b      	ldr	r3, [r3, #24]
 800b08e:	7afa      	ldrb	r2, [r7, #11]
 800b090:	4611      	mov	r1, r2
 800b092:	68f8      	ldr	r0, [r7, #12]
 800b094:	4798      	blx	r3
 800b096:	4603      	mov	r3, r0
 800b098:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b09a:	7dfb      	ldrb	r3, [r7, #23]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d001      	beq.n	800b0a4 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800b0a0:	7dfb      	ldrb	r3, [r7, #23]
 800b0a2:	e000      	b.n	800b0a6 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800b0a4:	2300      	movs	r3, #0
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	3718      	adds	r7, #24
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}

0800b0ae <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b0ae:	b580      	push	{r7, lr}
 800b0b0:	b086      	sub	sp, #24
 800b0b2:	af00      	add	r7, sp, #0
 800b0b4:	60f8      	str	r0, [r7, #12]
 800b0b6:	460b      	mov	r3, r1
 800b0b8:	607a      	str	r2, [r7, #4]
 800b0ba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b0bc:	7afb      	ldrb	r3, [r7, #11]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d16b      	bne.n	800b19a <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	3314      	adds	r3, #20
 800b0c6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b0ce:	2b02      	cmp	r3, #2
 800b0d0:	d156      	bne.n	800b180 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	689a      	ldr	r2, [r3, #8]
 800b0d6:	693b      	ldr	r3, [r7, #16]
 800b0d8:	68db      	ldr	r3, [r3, #12]
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	d914      	bls.n	800b108 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b0de:	693b      	ldr	r3, [r7, #16]
 800b0e0:	689a      	ldr	r2, [r3, #8]
 800b0e2:	693b      	ldr	r3, [r7, #16]
 800b0e4:	68db      	ldr	r3, [r3, #12]
 800b0e6:	1ad2      	subs	r2, r2, r3
 800b0e8:	693b      	ldr	r3, [r7, #16]
 800b0ea:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b0ec:	693b      	ldr	r3, [r7, #16]
 800b0ee:	689b      	ldr	r3, [r3, #8]
 800b0f0:	461a      	mov	r2, r3
 800b0f2:	6879      	ldr	r1, [r7, #4]
 800b0f4:	68f8      	ldr	r0, [r7, #12]
 800b0f6:	f000 ff91 	bl	800c01c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	2100      	movs	r1, #0
 800b100:	68f8      	ldr	r0, [r7, #12]
 800b102:	f001 fa71 	bl	800c5e8 <USBD_LL_PrepareReceive>
 800b106:	e03b      	b.n	800b180 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b108:	693b      	ldr	r3, [r7, #16]
 800b10a:	68da      	ldr	r2, [r3, #12]
 800b10c:	693b      	ldr	r3, [r7, #16]
 800b10e:	689b      	ldr	r3, [r3, #8]
 800b110:	429a      	cmp	r2, r3
 800b112:	d11c      	bne.n	800b14e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b114:	693b      	ldr	r3, [r7, #16]
 800b116:	685a      	ldr	r2, [r3, #4]
 800b118:	693b      	ldr	r3, [r7, #16]
 800b11a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b11c:	429a      	cmp	r2, r3
 800b11e:	d316      	bcc.n	800b14e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b120:	693b      	ldr	r3, [r7, #16]
 800b122:	685a      	ldr	r2, [r3, #4]
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b12a:	429a      	cmp	r2, r3
 800b12c:	d20f      	bcs.n	800b14e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b12e:	2200      	movs	r2, #0
 800b130:	2100      	movs	r1, #0
 800b132:	68f8      	ldr	r0, [r7, #12]
 800b134:	f000 ff72 	bl	800c01c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	2200      	movs	r2, #0
 800b13c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b140:	2300      	movs	r3, #0
 800b142:	2200      	movs	r2, #0
 800b144:	2100      	movs	r1, #0
 800b146:	68f8      	ldr	r0, [r7, #12]
 800b148:	f001 fa4e 	bl	800c5e8 <USBD_LL_PrepareReceive>
 800b14c:	e018      	b.n	800b180 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b154:	b2db      	uxtb	r3, r3
 800b156:	2b03      	cmp	r3, #3
 800b158:	d10b      	bne.n	800b172 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b160:	68db      	ldr	r3, [r3, #12]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d005      	beq.n	800b172 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b16c:	68db      	ldr	r3, [r3, #12]
 800b16e:	68f8      	ldr	r0, [r7, #12]
 800b170:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b172:	2180      	movs	r1, #128	@ 0x80
 800b174:	68f8      	ldr	r0, [r7, #12]
 800b176:	f001 f98d 	bl	800c494 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b17a:	68f8      	ldr	r0, [r7, #12]
 800b17c:	f000 ffa0 	bl	800c0c0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b186:	2b01      	cmp	r3, #1
 800b188:	d122      	bne.n	800b1d0 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800b18a:	68f8      	ldr	r0, [r7, #12]
 800b18c:	f7ff fe98 	bl	800aec0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	2200      	movs	r2, #0
 800b194:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b198:	e01a      	b.n	800b1d0 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b1a0:	b2db      	uxtb	r3, r3
 800b1a2:	2b03      	cmp	r3, #3
 800b1a4:	d114      	bne.n	800b1d0 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b1ac:	695b      	ldr	r3, [r3, #20]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d00e      	beq.n	800b1d0 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b1b8:	695b      	ldr	r3, [r3, #20]
 800b1ba:	7afa      	ldrb	r2, [r7, #11]
 800b1bc:	4611      	mov	r1, r2
 800b1be:	68f8      	ldr	r0, [r7, #12]
 800b1c0:	4798      	blx	r3
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b1c6:	7dfb      	ldrb	r3, [r7, #23]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d001      	beq.n	800b1d0 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800b1cc:	7dfb      	ldrb	r3, [r7, #23]
 800b1ce:	e000      	b.n	800b1d2 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800b1d0:	2300      	movs	r3, #0
}
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	3718      	adds	r7, #24
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	bd80      	pop	{r7, pc}

0800b1da <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b1da:	b580      	push	{r7, lr}
 800b1dc:	b082      	sub	sp, #8
 800b1de:	af00      	add	r7, sp, #0
 800b1e0:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2201      	movs	r2, #1
 800b1e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b206:	2b00      	cmp	r3, #0
 800b208:	d101      	bne.n	800b20e <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800b20a:	2303      	movs	r3, #3
 800b20c:	e02a      	b.n	800b264 <USBD_LL_Reset+0x8a>
  }

	if (pdev->pClass->DeInit != NULL)
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b214:	685b      	ldr	r3, [r3, #4]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d009      	beq.n	800b22e <USBD_LL_Reset+0x54>
	{
	  (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b220:	685b      	ldr	r3, [r3, #4]
 800b222:	687a      	ldr	r2, [r7, #4]
 800b224:	6852      	ldr	r2, [r2, #4]
 800b226:	b2d2      	uxtb	r2, r2
 800b228:	4611      	mov	r1, r2
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	4798      	blx	r3
	}

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b22e:	2340      	movs	r3, #64	@ 0x40
 800b230:	2200      	movs	r2, #0
 800b232:	2100      	movs	r1, #0
 800b234:	6878      	ldr	r0, [r7, #4]
 800b236:	f001 f8e8 	bl	800c40a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2201      	movs	r2, #1
 800b23e:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	2240      	movs	r2, #64	@ 0x40
 800b246:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b24a:	2340      	movs	r3, #64	@ 0x40
 800b24c:	2200      	movs	r2, #0
 800b24e:	2180      	movs	r1, #128	@ 0x80
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	f001 f8da 	bl	800c40a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	2201      	movs	r2, #1
 800b25a:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2240      	movs	r2, #64	@ 0x40
 800b260:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800b262:	2300      	movs	r3, #0
}
 800b264:	4618      	mov	r0, r3
 800b266:	3708      	adds	r7, #8
 800b268:	46bd      	mov	sp, r7
 800b26a:	bd80      	pop	{r7, pc}

0800b26c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b26c:	b480      	push	{r7}
 800b26e:	b083      	sub	sp, #12
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
 800b274:	460b      	mov	r3, r1
 800b276:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	78fa      	ldrb	r2, [r7, #3]
 800b27c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b27e:	2300      	movs	r3, #0
}
 800b280:	4618      	mov	r0, r3
 800b282:	370c      	adds	r7, #12
 800b284:	46bd      	mov	sp, r7
 800b286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28a:	4770      	bx	lr

0800b28c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b28c:	b480      	push	{r7}
 800b28e:	b083      	sub	sp, #12
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b29a:	b2da      	uxtb	r2, r3
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2204      	movs	r2, #4
 800b2a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b2aa:	2300      	movs	r3, #0
}
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	370c      	adds	r7, #12
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b6:	4770      	bx	lr

0800b2b8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b2b8:	b480      	push	{r7}
 800b2ba:	b083      	sub	sp, #12
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b2c6:	b2db      	uxtb	r3, r3
 800b2c8:	2b04      	cmp	r3, #4
 800b2ca:	d106      	bne.n	800b2da <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b2d2:	b2da      	uxtb	r2, r3
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b2da:	2300      	movs	r3, #0
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	370c      	adds	r7, #12
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e6:	4770      	bx	lr

0800b2e8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b082      	sub	sp, #8
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d101      	bne.n	800b2fe <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800b2fa:	2303      	movs	r3, #3
 800b2fc:	e012      	b.n	800b324 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b304:	b2db      	uxtb	r3, r3
 800b306:	2b03      	cmp	r3, #3
 800b308:	d10b      	bne.n	800b322 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b310:	69db      	ldr	r3, [r3, #28]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d005      	beq.n	800b322 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b31c:	69db      	ldr	r3, [r3, #28]
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b322:	2300      	movs	r3, #0
}
 800b324:	4618      	mov	r0, r3
 800b326:	3708      	adds	r7, #8
 800b328:	46bd      	mov	sp, r7
 800b32a:	bd80      	pop	{r7, pc}

0800b32c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b082      	sub	sp, #8
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
 800b334:	460b      	mov	r3, r1
 800b336:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d101      	bne.n	800b346 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800b342:	2303      	movs	r3, #3
 800b344:	e014      	b.n	800b370 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b34c:	b2db      	uxtb	r3, r3
 800b34e:	2b03      	cmp	r3, #3
 800b350:	d10d      	bne.n	800b36e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b358:	6a1b      	ldr	r3, [r3, #32]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d007      	beq.n	800b36e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b364:	6a1b      	ldr	r3, [r3, #32]
 800b366:	78fa      	ldrb	r2, [r7, #3]
 800b368:	4611      	mov	r1, r2
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b36e:	2300      	movs	r3, #0
}
 800b370:	4618      	mov	r0, r3
 800b372:	3708      	adds	r7, #8
 800b374:	46bd      	mov	sp, r7
 800b376:	bd80      	pop	{r7, pc}

0800b378 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b082      	sub	sp, #8
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
 800b380:	460b      	mov	r3, r1
 800b382:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d101      	bne.n	800b392 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800b38e:	2303      	movs	r3, #3
 800b390:	e014      	b.n	800b3bc <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b398:	b2db      	uxtb	r3, r3
 800b39a:	2b03      	cmp	r3, #3
 800b39c:	d10d      	bne.n	800b3ba <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d007      	beq.n	800b3ba <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3b2:	78fa      	ldrb	r2, [r7, #3]
 800b3b4:	4611      	mov	r1, r2
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b3ba:	2300      	movs	r3, #0
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	3708      	adds	r7, #8
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}

0800b3c4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	b083      	sub	sp, #12
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b3cc:	2300      	movs	r3, #0
}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	370c      	adds	r7, #12
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d8:	4770      	bx	lr

0800b3da <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b3da:	b580      	push	{r7, lr}
 800b3dc:	b082      	sub	sp, #8
 800b3de:	af00      	add	r7, sp, #0
 800b3e0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2201      	movs	r2, #1
 800b3e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  if (pdev->pClass != NULL)
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d009      	beq.n	800b408 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3fa:	685b      	ldr	r3, [r3, #4]
 800b3fc:	687a      	ldr	r2, [r7, #4]
 800b3fe:	6852      	ldr	r2, [r2, #4]
 800b400:	b2d2      	uxtb	r2, r2
 800b402:	4611      	mov	r1, r2
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	4798      	blx	r3
  }

  return USBD_OK;
 800b408:	2300      	movs	r3, #0
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	3708      	adds	r7, #8
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}

0800b412 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b412:	b480      	push	{r7}
 800b414:	b087      	sub	sp, #28
 800b416:	af00      	add	r7, sp, #0
 800b418:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b41e:	697b      	ldr	r3, [r7, #20]
 800b420:	781b      	ldrb	r3, [r3, #0]
 800b422:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b424:	697b      	ldr	r3, [r7, #20]
 800b426:	3301      	adds	r3, #1
 800b428:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b42a:	697b      	ldr	r3, [r7, #20]
 800b42c:	781b      	ldrb	r3, [r3, #0]
 800b42e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b430:	8a3b      	ldrh	r3, [r7, #16]
 800b432:	021b      	lsls	r3, r3, #8
 800b434:	b21a      	sxth	r2, r3
 800b436:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b43a:	4313      	orrs	r3, r2
 800b43c:	b21b      	sxth	r3, r3
 800b43e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b440:	89fb      	ldrh	r3, [r7, #14]
}
 800b442:	4618      	mov	r0, r3
 800b444:	371c      	adds	r7, #28
 800b446:	46bd      	mov	sp, r7
 800b448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44c:	4770      	bx	lr
	...

0800b450 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b084      	sub	sp, #16
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
 800b458:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b45a:	2300      	movs	r3, #0
 800b45c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	781b      	ldrb	r3, [r3, #0]
 800b462:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b466:	2b40      	cmp	r3, #64	@ 0x40
 800b468:	d005      	beq.n	800b476 <USBD_StdDevReq+0x26>
 800b46a:	2b40      	cmp	r3, #64	@ 0x40
 800b46c:	d853      	bhi.n	800b516 <USBD_StdDevReq+0xc6>
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d00b      	beq.n	800b48a <USBD_StdDevReq+0x3a>
 800b472:	2b20      	cmp	r3, #32
 800b474:	d14f      	bne.n	800b516 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b47c:	689b      	ldr	r3, [r3, #8]
 800b47e:	6839      	ldr	r1, [r7, #0]
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	4798      	blx	r3
 800b484:	4603      	mov	r3, r0
 800b486:	73fb      	strb	r3, [r7, #15]
      break;
 800b488:	e04a      	b.n	800b520 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	785b      	ldrb	r3, [r3, #1]
 800b48e:	2b09      	cmp	r3, #9
 800b490:	d83b      	bhi.n	800b50a <USBD_StdDevReq+0xba>
 800b492:	a201      	add	r2, pc, #4	@ (adr r2, 800b498 <USBD_StdDevReq+0x48>)
 800b494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b498:	0800b4ed 	.word	0x0800b4ed
 800b49c:	0800b501 	.word	0x0800b501
 800b4a0:	0800b50b 	.word	0x0800b50b
 800b4a4:	0800b4f7 	.word	0x0800b4f7
 800b4a8:	0800b50b 	.word	0x0800b50b
 800b4ac:	0800b4cb 	.word	0x0800b4cb
 800b4b0:	0800b4c1 	.word	0x0800b4c1
 800b4b4:	0800b50b 	.word	0x0800b50b
 800b4b8:	0800b4e3 	.word	0x0800b4e3
 800b4bc:	0800b4d5 	.word	0x0800b4d5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b4c0:	6839      	ldr	r1, [r7, #0]
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f000 f9de 	bl	800b884 <USBD_GetDescriptor>
          break;
 800b4c8:	e024      	b.n	800b514 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b4ca:	6839      	ldr	r1, [r7, #0]
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	f000 fb55 	bl	800bb7c <USBD_SetAddress>
          break;
 800b4d2:	e01f      	b.n	800b514 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b4d4:	6839      	ldr	r1, [r7, #0]
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f000 fb94 	bl	800bc04 <USBD_SetConfig>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	73fb      	strb	r3, [r7, #15]
          break;
 800b4e0:	e018      	b.n	800b514 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b4e2:	6839      	ldr	r1, [r7, #0]
 800b4e4:	6878      	ldr	r0, [r7, #4]
 800b4e6:	f000 fc33 	bl	800bd50 <USBD_GetConfig>
          break;
 800b4ea:	e013      	b.n	800b514 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b4ec:	6839      	ldr	r1, [r7, #0]
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f000 fc64 	bl	800bdbc <USBD_GetStatus>
          break;
 800b4f4:	e00e      	b.n	800b514 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b4f6:	6839      	ldr	r1, [r7, #0]
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	f000 fc93 	bl	800be24 <USBD_SetFeature>
          break;
 800b4fe:	e009      	b.n	800b514 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b500:	6839      	ldr	r1, [r7, #0]
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	f000 fca2 	bl	800be4c <USBD_ClrFeature>
          break;
 800b508:	e004      	b.n	800b514 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800b50a:	6839      	ldr	r1, [r7, #0]
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f000 fcf9 	bl	800bf04 <USBD_CtlError>
          break;
 800b512:	bf00      	nop
      }
      break;
 800b514:	e004      	b.n	800b520 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800b516:	6839      	ldr	r1, [r7, #0]
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	f000 fcf3 	bl	800bf04 <USBD_CtlError>
      break;
 800b51e:	bf00      	nop
  }

  return ret;
 800b520:	7bfb      	ldrb	r3, [r7, #15]
}
 800b522:	4618      	mov	r0, r3
 800b524:	3710      	adds	r7, #16
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}
 800b52a:	bf00      	nop

0800b52c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b084      	sub	sp, #16
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
 800b534:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b536:	2300      	movs	r3, #0
 800b538:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	781b      	ldrb	r3, [r3, #0]
 800b53e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b542:	2b40      	cmp	r3, #64	@ 0x40
 800b544:	d005      	beq.n	800b552 <USBD_StdItfReq+0x26>
 800b546:	2b40      	cmp	r3, #64	@ 0x40
 800b548:	d82f      	bhi.n	800b5aa <USBD_StdItfReq+0x7e>
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d001      	beq.n	800b552 <USBD_StdItfReq+0x26>
 800b54e:	2b20      	cmp	r3, #32
 800b550:	d12b      	bne.n	800b5aa <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b558:	b2db      	uxtb	r3, r3
 800b55a:	3b01      	subs	r3, #1
 800b55c:	2b02      	cmp	r3, #2
 800b55e:	d81d      	bhi.n	800b59c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	889b      	ldrh	r3, [r3, #4]
 800b564:	b2db      	uxtb	r3, r3
 800b566:	2b0f      	cmp	r3, #15
 800b568:	d813      	bhi.n	800b592 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b570:	689b      	ldr	r3, [r3, #8]
 800b572:	6839      	ldr	r1, [r7, #0]
 800b574:	6878      	ldr	r0, [r7, #4]
 800b576:	4798      	blx	r3
 800b578:	4603      	mov	r3, r0
 800b57a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	88db      	ldrh	r3, [r3, #6]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d110      	bne.n	800b5a6 <USBD_StdItfReq+0x7a>
 800b584:	7bfb      	ldrb	r3, [r7, #15]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d10d      	bne.n	800b5a6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f000 fd85 	bl	800c09a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b590:	e009      	b.n	800b5a6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800b592:	6839      	ldr	r1, [r7, #0]
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	f000 fcb5 	bl	800bf04 <USBD_CtlError>
          break;
 800b59a:	e004      	b.n	800b5a6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800b59c:	6839      	ldr	r1, [r7, #0]
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f000 fcb0 	bl	800bf04 <USBD_CtlError>
          break;
 800b5a4:	e000      	b.n	800b5a8 <USBD_StdItfReq+0x7c>
          break;
 800b5a6:	bf00      	nop
      }
      break;
 800b5a8:	e004      	b.n	800b5b4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800b5aa:	6839      	ldr	r1, [r7, #0]
 800b5ac:	6878      	ldr	r0, [r7, #4]
 800b5ae:	f000 fca9 	bl	800bf04 <USBD_CtlError>
      break;
 800b5b2:	bf00      	nop
  }

  return ret;
 800b5b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	3710      	adds	r7, #16
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}

0800b5be <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5be:	b580      	push	{r7, lr}
 800b5c0:	b084      	sub	sp, #16
 800b5c2:	af00      	add	r7, sp, #0
 800b5c4:	6078      	str	r0, [r7, #4]
 800b5c6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	889b      	ldrh	r3, [r3, #4]
 800b5d0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	781b      	ldrb	r3, [r3, #0]
 800b5d6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b5da:	2b40      	cmp	r3, #64	@ 0x40
 800b5dc:	d007      	beq.n	800b5ee <USBD_StdEPReq+0x30>
 800b5de:	2b40      	cmp	r3, #64	@ 0x40
 800b5e0:	f200 8145 	bhi.w	800b86e <USBD_StdEPReq+0x2b0>
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d00c      	beq.n	800b602 <USBD_StdEPReq+0x44>
 800b5e8:	2b20      	cmp	r3, #32
 800b5ea:	f040 8140 	bne.w	800b86e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5f4:	689b      	ldr	r3, [r3, #8]
 800b5f6:	6839      	ldr	r1, [r7, #0]
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	4798      	blx	r3
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	73fb      	strb	r3, [r7, #15]
      break;
 800b600:	e13a      	b.n	800b878 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	785b      	ldrb	r3, [r3, #1]
 800b606:	2b03      	cmp	r3, #3
 800b608:	d007      	beq.n	800b61a <USBD_StdEPReq+0x5c>
 800b60a:	2b03      	cmp	r3, #3
 800b60c:	f300 8129 	bgt.w	800b862 <USBD_StdEPReq+0x2a4>
 800b610:	2b00      	cmp	r3, #0
 800b612:	d07f      	beq.n	800b714 <USBD_StdEPReq+0x156>
 800b614:	2b01      	cmp	r3, #1
 800b616:	d03c      	beq.n	800b692 <USBD_StdEPReq+0xd4>
 800b618:	e123      	b.n	800b862 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b620:	b2db      	uxtb	r3, r3
 800b622:	2b02      	cmp	r3, #2
 800b624:	d002      	beq.n	800b62c <USBD_StdEPReq+0x6e>
 800b626:	2b03      	cmp	r3, #3
 800b628:	d016      	beq.n	800b658 <USBD_StdEPReq+0x9a>
 800b62a:	e02c      	b.n	800b686 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b62c:	7bbb      	ldrb	r3, [r7, #14]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d00d      	beq.n	800b64e <USBD_StdEPReq+0x90>
 800b632:	7bbb      	ldrb	r3, [r7, #14]
 800b634:	2b80      	cmp	r3, #128	@ 0x80
 800b636:	d00a      	beq.n	800b64e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b638:	7bbb      	ldrb	r3, [r7, #14]
 800b63a:	4619      	mov	r1, r3
 800b63c:	6878      	ldr	r0, [r7, #4]
 800b63e:	f000 ff29 	bl	800c494 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b642:	2180      	movs	r1, #128	@ 0x80
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f000 ff25 	bl	800c494 <USBD_LL_StallEP>
 800b64a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b64c:	e020      	b.n	800b690 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800b64e:	6839      	ldr	r1, [r7, #0]
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	f000 fc57 	bl	800bf04 <USBD_CtlError>
              break;
 800b656:	e01b      	b.n	800b690 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	885b      	ldrh	r3, [r3, #2]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d10e      	bne.n	800b67e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b660:	7bbb      	ldrb	r3, [r7, #14]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d00b      	beq.n	800b67e <USBD_StdEPReq+0xc0>
 800b666:	7bbb      	ldrb	r3, [r7, #14]
 800b668:	2b80      	cmp	r3, #128	@ 0x80
 800b66a:	d008      	beq.n	800b67e <USBD_StdEPReq+0xc0>
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	88db      	ldrh	r3, [r3, #6]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d104      	bne.n	800b67e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b674:	7bbb      	ldrb	r3, [r7, #14]
 800b676:	4619      	mov	r1, r3
 800b678:	6878      	ldr	r0, [r7, #4]
 800b67a:	f000 ff0b 	bl	800c494 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f000 fd0b 	bl	800c09a <USBD_CtlSendStatus>

              break;
 800b684:	e004      	b.n	800b690 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800b686:	6839      	ldr	r1, [r7, #0]
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f000 fc3b 	bl	800bf04 <USBD_CtlError>
              break;
 800b68e:	bf00      	nop
          }
          break;
 800b690:	e0ec      	b.n	800b86c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b698:	b2db      	uxtb	r3, r3
 800b69a:	2b02      	cmp	r3, #2
 800b69c:	d002      	beq.n	800b6a4 <USBD_StdEPReq+0xe6>
 800b69e:	2b03      	cmp	r3, #3
 800b6a0:	d016      	beq.n	800b6d0 <USBD_StdEPReq+0x112>
 800b6a2:	e030      	b.n	800b706 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b6a4:	7bbb      	ldrb	r3, [r7, #14]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d00d      	beq.n	800b6c6 <USBD_StdEPReq+0x108>
 800b6aa:	7bbb      	ldrb	r3, [r7, #14]
 800b6ac:	2b80      	cmp	r3, #128	@ 0x80
 800b6ae:	d00a      	beq.n	800b6c6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b6b0:	7bbb      	ldrb	r3, [r7, #14]
 800b6b2:	4619      	mov	r1, r3
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f000 feed 	bl	800c494 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b6ba:	2180      	movs	r1, #128	@ 0x80
 800b6bc:	6878      	ldr	r0, [r7, #4]
 800b6be:	f000 fee9 	bl	800c494 <USBD_LL_StallEP>
 800b6c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b6c4:	e025      	b.n	800b712 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800b6c6:	6839      	ldr	r1, [r7, #0]
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f000 fc1b 	bl	800bf04 <USBD_CtlError>
              break;
 800b6ce:	e020      	b.n	800b712 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	885b      	ldrh	r3, [r3, #2]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d11b      	bne.n	800b710 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b6d8:	7bbb      	ldrb	r3, [r7, #14]
 800b6da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d004      	beq.n	800b6ec <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b6e2:	7bbb      	ldrb	r3, [r7, #14]
 800b6e4:	4619      	mov	r1, r3
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f000 fef3 	bl	800c4d2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	f000 fcd4 	bl	800c09a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6f8:	689b      	ldr	r3, [r3, #8]
 800b6fa:	6839      	ldr	r1, [r7, #0]
 800b6fc:	6878      	ldr	r0, [r7, #4]
 800b6fe:	4798      	blx	r3
 800b700:	4603      	mov	r3, r0
 800b702:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800b704:	e004      	b.n	800b710 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800b706:	6839      	ldr	r1, [r7, #0]
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f000 fbfb 	bl	800bf04 <USBD_CtlError>
              break;
 800b70e:	e000      	b.n	800b712 <USBD_StdEPReq+0x154>
              break;
 800b710:	bf00      	nop
          }
          break;
 800b712:	e0ab      	b.n	800b86c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b71a:	b2db      	uxtb	r3, r3
 800b71c:	2b02      	cmp	r3, #2
 800b71e:	d002      	beq.n	800b726 <USBD_StdEPReq+0x168>
 800b720:	2b03      	cmp	r3, #3
 800b722:	d032      	beq.n	800b78a <USBD_StdEPReq+0x1cc>
 800b724:	e097      	b.n	800b856 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b726:	7bbb      	ldrb	r3, [r7, #14]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d007      	beq.n	800b73c <USBD_StdEPReq+0x17e>
 800b72c:	7bbb      	ldrb	r3, [r7, #14]
 800b72e:	2b80      	cmp	r3, #128	@ 0x80
 800b730:	d004      	beq.n	800b73c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800b732:	6839      	ldr	r1, [r7, #0]
 800b734:	6878      	ldr	r0, [r7, #4]
 800b736:	f000 fbe5 	bl	800bf04 <USBD_CtlError>
                break;
 800b73a:	e091      	b.n	800b860 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b73c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b740:	2b00      	cmp	r3, #0
 800b742:	da0b      	bge.n	800b75c <USBD_StdEPReq+0x19e>
 800b744:	7bbb      	ldrb	r3, [r7, #14]
 800b746:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b74a:	4613      	mov	r3, r2
 800b74c:	009b      	lsls	r3, r3, #2
 800b74e:	4413      	add	r3, r2
 800b750:	009b      	lsls	r3, r3, #2
 800b752:	3310      	adds	r3, #16
 800b754:	687a      	ldr	r2, [r7, #4]
 800b756:	4413      	add	r3, r2
 800b758:	3304      	adds	r3, #4
 800b75a:	e00b      	b.n	800b774 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b75c:	7bbb      	ldrb	r3, [r7, #14]
 800b75e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b762:	4613      	mov	r3, r2
 800b764:	009b      	lsls	r3, r3, #2
 800b766:	4413      	add	r3, r2
 800b768:	009b      	lsls	r3, r3, #2
 800b76a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b76e:	687a      	ldr	r2, [r7, #4]
 800b770:	4413      	add	r3, r2
 800b772:	3304      	adds	r3, #4
 800b774:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b776:	68bb      	ldr	r3, [r7, #8]
 800b778:	2200      	movs	r2, #0
 800b77a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	2202      	movs	r2, #2
 800b780:	4619      	mov	r1, r3
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f000 fc2f 	bl	800bfe6 <USBD_CtlSendData>
              break;
 800b788:	e06a      	b.n	800b860 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b78a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	da11      	bge.n	800b7b6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b792:	7bbb      	ldrb	r3, [r7, #14]
 800b794:	f003 020f 	and.w	r2, r3, #15
 800b798:	6879      	ldr	r1, [r7, #4]
 800b79a:	4613      	mov	r3, r2
 800b79c:	009b      	lsls	r3, r3, #2
 800b79e:	4413      	add	r3, r2
 800b7a0:	009b      	lsls	r3, r3, #2
 800b7a2:	440b      	add	r3, r1
 800b7a4:	3324      	adds	r3, #36	@ 0x24
 800b7a6:	881b      	ldrh	r3, [r3, #0]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d117      	bne.n	800b7dc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b7ac:	6839      	ldr	r1, [r7, #0]
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f000 fba8 	bl	800bf04 <USBD_CtlError>
                  break;
 800b7b4:	e054      	b.n	800b860 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b7b6:	7bbb      	ldrb	r3, [r7, #14]
 800b7b8:	f003 020f 	and.w	r2, r3, #15
 800b7bc:	6879      	ldr	r1, [r7, #4]
 800b7be:	4613      	mov	r3, r2
 800b7c0:	009b      	lsls	r3, r3, #2
 800b7c2:	4413      	add	r3, r2
 800b7c4:	009b      	lsls	r3, r3, #2
 800b7c6:	440b      	add	r3, r1
 800b7c8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b7cc:	881b      	ldrh	r3, [r3, #0]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d104      	bne.n	800b7dc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b7d2:	6839      	ldr	r1, [r7, #0]
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	f000 fb95 	bl	800bf04 <USBD_CtlError>
                  break;
 800b7da:	e041      	b.n	800b860 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b7dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	da0b      	bge.n	800b7fc <USBD_StdEPReq+0x23e>
 800b7e4:	7bbb      	ldrb	r3, [r7, #14]
 800b7e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b7ea:	4613      	mov	r3, r2
 800b7ec:	009b      	lsls	r3, r3, #2
 800b7ee:	4413      	add	r3, r2
 800b7f0:	009b      	lsls	r3, r3, #2
 800b7f2:	3310      	adds	r3, #16
 800b7f4:	687a      	ldr	r2, [r7, #4]
 800b7f6:	4413      	add	r3, r2
 800b7f8:	3304      	adds	r3, #4
 800b7fa:	e00b      	b.n	800b814 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b7fc:	7bbb      	ldrb	r3, [r7, #14]
 800b7fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b802:	4613      	mov	r3, r2
 800b804:	009b      	lsls	r3, r3, #2
 800b806:	4413      	add	r3, r2
 800b808:	009b      	lsls	r3, r3, #2
 800b80a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b80e:	687a      	ldr	r2, [r7, #4]
 800b810:	4413      	add	r3, r2
 800b812:	3304      	adds	r3, #4
 800b814:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b816:	7bbb      	ldrb	r3, [r7, #14]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d002      	beq.n	800b822 <USBD_StdEPReq+0x264>
 800b81c:	7bbb      	ldrb	r3, [r7, #14]
 800b81e:	2b80      	cmp	r3, #128	@ 0x80
 800b820:	d103      	bne.n	800b82a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800b822:	68bb      	ldr	r3, [r7, #8]
 800b824:	2200      	movs	r2, #0
 800b826:	601a      	str	r2, [r3, #0]
 800b828:	e00e      	b.n	800b848 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b82a:	7bbb      	ldrb	r3, [r7, #14]
 800b82c:	4619      	mov	r1, r3
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f000 fe6e 	bl	800c510 <USBD_LL_IsStallEP>
 800b834:	4603      	mov	r3, r0
 800b836:	2b00      	cmp	r3, #0
 800b838:	d003      	beq.n	800b842 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800b83a:	68bb      	ldr	r3, [r7, #8]
 800b83c:	2201      	movs	r2, #1
 800b83e:	601a      	str	r2, [r3, #0]
 800b840:	e002      	b.n	800b848 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	2200      	movs	r2, #0
 800b846:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b848:	68bb      	ldr	r3, [r7, #8]
 800b84a:	2202      	movs	r2, #2
 800b84c:	4619      	mov	r1, r3
 800b84e:	6878      	ldr	r0, [r7, #4]
 800b850:	f000 fbc9 	bl	800bfe6 <USBD_CtlSendData>
              break;
 800b854:	e004      	b.n	800b860 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800b856:	6839      	ldr	r1, [r7, #0]
 800b858:	6878      	ldr	r0, [r7, #4]
 800b85a:	f000 fb53 	bl	800bf04 <USBD_CtlError>
              break;
 800b85e:	bf00      	nop
          }
          break;
 800b860:	e004      	b.n	800b86c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800b862:	6839      	ldr	r1, [r7, #0]
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	f000 fb4d 	bl	800bf04 <USBD_CtlError>
          break;
 800b86a:	bf00      	nop
      }
      break;
 800b86c:	e004      	b.n	800b878 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800b86e:	6839      	ldr	r1, [r7, #0]
 800b870:	6878      	ldr	r0, [r7, #4]
 800b872:	f000 fb47 	bl	800bf04 <USBD_CtlError>
      break;
 800b876:	bf00      	nop
  }

  return ret;
 800b878:	7bfb      	ldrb	r3, [r7, #15]
}
 800b87a:	4618      	mov	r0, r3
 800b87c:	3710      	adds	r7, #16
 800b87e:	46bd      	mov	sp, r7
 800b880:	bd80      	pop	{r7, pc}
	...

0800b884 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b084      	sub	sp, #16
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
 800b88c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b88e:	2300      	movs	r3, #0
 800b890:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b892:	2300      	movs	r3, #0
 800b894:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b896:	2300      	movs	r3, #0
 800b898:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	885b      	ldrh	r3, [r3, #2]
 800b89e:	0a1b      	lsrs	r3, r3, #8
 800b8a0:	b29b      	uxth	r3, r3
 800b8a2:	3b01      	subs	r3, #1
 800b8a4:	2b06      	cmp	r3, #6
 800b8a6:	f200 813b 	bhi.w	800bb20 <USBD_GetDescriptor+0x29c>
 800b8aa:	a201      	add	r2, pc, #4	@ (adr r2, 800b8b0 <USBD_GetDescriptor+0x2c>)
 800b8ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8b0:	0800b8cd 	.word	0x0800b8cd
 800b8b4:	0800b8e5 	.word	0x0800b8e5
 800b8b8:	0800b925 	.word	0x0800b925
 800b8bc:	0800bb21 	.word	0x0800bb21
 800b8c0:	0800bb21 	.word	0x0800bb21
 800b8c4:	0800bac1 	.word	0x0800bac1
 800b8c8:	0800baed 	.word	0x0800baed
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	687a      	ldr	r2, [r7, #4]
 800b8d6:	7c12      	ldrb	r2, [r2, #16]
 800b8d8:	f107 0108 	add.w	r1, r7, #8
 800b8dc:	4610      	mov	r0, r2
 800b8de:	4798      	blx	r3
 800b8e0:	60f8      	str	r0, [r7, #12]
      break;
 800b8e2:	e125      	b.n	800bb30 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	7c1b      	ldrb	r3, [r3, #16]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d10d      	bne.n	800b908 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8f4:	f107 0208 	add.w	r2, r7, #8
 800b8f8:	4610      	mov	r0, r2
 800b8fa:	4798      	blx	r3
 800b8fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	3301      	adds	r3, #1
 800b902:	2202      	movs	r2, #2
 800b904:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b906:	e113      	b.n	800bb30 <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b90e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b910:	f107 0208 	add.w	r2, r7, #8
 800b914:	4610      	mov	r0, r2
 800b916:	4798      	blx	r3
 800b918:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	3301      	adds	r3, #1
 800b91e:	2202      	movs	r2, #2
 800b920:	701a      	strb	r2, [r3, #0]
      break;
 800b922:	e105      	b.n	800bb30 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	885b      	ldrh	r3, [r3, #2]
 800b928:	b2db      	uxtb	r3, r3
 800b92a:	2b05      	cmp	r3, #5
 800b92c:	f200 80ac 	bhi.w	800ba88 <USBD_GetDescriptor+0x204>
 800b930:	a201      	add	r2, pc, #4	@ (adr r2, 800b938 <USBD_GetDescriptor+0xb4>)
 800b932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b936:	bf00      	nop
 800b938:	0800b951 	.word	0x0800b951
 800b93c:	0800b985 	.word	0x0800b985
 800b940:	0800b9b9 	.word	0x0800b9b9
 800b944:	0800b9ed 	.word	0x0800b9ed
 800b948:	0800ba21 	.word	0x0800ba21
 800b94c:	0800ba55 	.word	0x0800ba55
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b956:	685b      	ldr	r3, [r3, #4]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d00b      	beq.n	800b974 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b962:	685b      	ldr	r3, [r3, #4]
 800b964:	687a      	ldr	r2, [r7, #4]
 800b966:	7c12      	ldrb	r2, [r2, #16]
 800b968:	f107 0108 	add.w	r1, r7, #8
 800b96c:	4610      	mov	r0, r2
 800b96e:	4798      	blx	r3
 800b970:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b972:	e0a4      	b.n	800babe <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800b974:	6839      	ldr	r1, [r7, #0]
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	f000 fac4 	bl	800bf04 <USBD_CtlError>
            err++;
 800b97c:	7afb      	ldrb	r3, [r7, #11]
 800b97e:	3301      	adds	r3, #1
 800b980:	72fb      	strb	r3, [r7, #11]
          break;
 800b982:	e09c      	b.n	800babe <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b98a:	689b      	ldr	r3, [r3, #8]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d00b      	beq.n	800b9a8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b996:	689b      	ldr	r3, [r3, #8]
 800b998:	687a      	ldr	r2, [r7, #4]
 800b99a:	7c12      	ldrb	r2, [r2, #16]
 800b99c:	f107 0108 	add.w	r1, r7, #8
 800b9a0:	4610      	mov	r0, r2
 800b9a2:	4798      	blx	r3
 800b9a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b9a6:	e08a      	b.n	800babe <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800b9a8:	6839      	ldr	r1, [r7, #0]
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	f000 faaa 	bl	800bf04 <USBD_CtlError>
            err++;
 800b9b0:	7afb      	ldrb	r3, [r7, #11]
 800b9b2:	3301      	adds	r3, #1
 800b9b4:	72fb      	strb	r3, [r7, #11]
          break;
 800b9b6:	e082      	b.n	800babe <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b9be:	68db      	ldr	r3, [r3, #12]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d00b      	beq.n	800b9dc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b9ca:	68db      	ldr	r3, [r3, #12]
 800b9cc:	687a      	ldr	r2, [r7, #4]
 800b9ce:	7c12      	ldrb	r2, [r2, #16]
 800b9d0:	f107 0108 	add.w	r1, r7, #8
 800b9d4:	4610      	mov	r0, r2
 800b9d6:	4798      	blx	r3
 800b9d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b9da:	e070      	b.n	800babe <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800b9dc:	6839      	ldr	r1, [r7, #0]
 800b9de:	6878      	ldr	r0, [r7, #4]
 800b9e0:	f000 fa90 	bl	800bf04 <USBD_CtlError>
            err++;
 800b9e4:	7afb      	ldrb	r3, [r7, #11]
 800b9e6:	3301      	adds	r3, #1
 800b9e8:	72fb      	strb	r3, [r7, #11]
          break;
 800b9ea:	e068      	b.n	800babe <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b9f2:	691b      	ldr	r3, [r3, #16]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d00b      	beq.n	800ba10 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b9fe:	691b      	ldr	r3, [r3, #16]
 800ba00:	687a      	ldr	r2, [r7, #4]
 800ba02:	7c12      	ldrb	r2, [r2, #16]
 800ba04:	f107 0108 	add.w	r1, r7, #8
 800ba08:	4610      	mov	r0, r2
 800ba0a:	4798      	blx	r3
 800ba0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ba0e:	e056      	b.n	800babe <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800ba10:	6839      	ldr	r1, [r7, #0]
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	f000 fa76 	bl	800bf04 <USBD_CtlError>
            err++;
 800ba18:	7afb      	ldrb	r3, [r7, #11]
 800ba1a:	3301      	adds	r3, #1
 800ba1c:	72fb      	strb	r3, [r7, #11]
          break;
 800ba1e:	e04e      	b.n	800babe <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba26:	695b      	ldr	r3, [r3, #20]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d00b      	beq.n	800ba44 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba32:	695b      	ldr	r3, [r3, #20]
 800ba34:	687a      	ldr	r2, [r7, #4]
 800ba36:	7c12      	ldrb	r2, [r2, #16]
 800ba38:	f107 0108 	add.w	r1, r7, #8
 800ba3c:	4610      	mov	r0, r2
 800ba3e:	4798      	blx	r3
 800ba40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ba42:	e03c      	b.n	800babe <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800ba44:	6839      	ldr	r1, [r7, #0]
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	f000 fa5c 	bl	800bf04 <USBD_CtlError>
            err++;
 800ba4c:	7afb      	ldrb	r3, [r7, #11]
 800ba4e:	3301      	adds	r3, #1
 800ba50:	72fb      	strb	r3, [r7, #11]
          break;
 800ba52:	e034      	b.n	800babe <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba5a:	699b      	ldr	r3, [r3, #24]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d00b      	beq.n	800ba78 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba66:	699b      	ldr	r3, [r3, #24]
 800ba68:	687a      	ldr	r2, [r7, #4]
 800ba6a:	7c12      	ldrb	r2, [r2, #16]
 800ba6c:	f107 0108 	add.w	r1, r7, #8
 800ba70:	4610      	mov	r0, r2
 800ba72:	4798      	blx	r3
 800ba74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ba76:	e022      	b.n	800babe <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800ba78:	6839      	ldr	r1, [r7, #0]
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f000 fa42 	bl	800bf04 <USBD_CtlError>
            err++;
 800ba80:	7afb      	ldrb	r3, [r7, #11]
 800ba82:	3301      	adds	r3, #1
 800ba84:	72fb      	strb	r3, [r7, #11]
          break;
 800ba86:	e01a      	b.n	800babe <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d00c      	beq.n	800baae <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba9c:	683a      	ldr	r2, [r7, #0]
 800ba9e:	8852      	ldrh	r2, [r2, #2]
 800baa0:	b2d1      	uxtb	r1, r2
 800baa2:	f107 0208 	add.w	r2, r7, #8
 800baa6:	6878      	ldr	r0, [r7, #4]
 800baa8:	4798      	blx	r3
 800baaa:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 800baac:	e006      	b.n	800babc <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 800baae:	6839      	ldr	r1, [r7, #0]
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f000 fa27 	bl	800bf04 <USBD_CtlError>
            err++;
 800bab6:	7afb      	ldrb	r3, [r7, #11]
 800bab8:	3301      	adds	r3, #1
 800baba:	72fb      	strb	r3, [r7, #11]
          break;
 800babc:	bf00      	nop
      }
      break;
 800babe:	e037      	b.n	800bb30 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	7c1b      	ldrb	r3, [r3, #16]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d109      	bne.n	800badc <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bace:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bad0:	f107 0208 	add.w	r2, r7, #8
 800bad4:	4610      	mov	r0, r2
 800bad6:	4798      	blx	r3
 800bad8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bada:	e029      	b.n	800bb30 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 800badc:	6839      	ldr	r1, [r7, #0]
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	f000 fa10 	bl	800bf04 <USBD_CtlError>
        err++;
 800bae4:	7afb      	ldrb	r3, [r7, #11]
 800bae6:	3301      	adds	r3, #1
 800bae8:	72fb      	strb	r3, [r7, #11]
      break;
 800baea:	e021      	b.n	800bb30 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	7c1b      	ldrb	r3, [r3, #16]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d10d      	bne.n	800bb10 <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bafa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bafc:	f107 0208 	add.w	r2, r7, #8
 800bb00:	4610      	mov	r0, r2
 800bb02:	4798      	blx	r3
 800bb04:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	3301      	adds	r3, #1
 800bb0a:	2207      	movs	r2, #7
 800bb0c:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bb0e:	e00f      	b.n	800bb30 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 800bb10:	6839      	ldr	r1, [r7, #0]
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f000 f9f6 	bl	800bf04 <USBD_CtlError>
        err++;
 800bb18:	7afb      	ldrb	r3, [r7, #11]
 800bb1a:	3301      	adds	r3, #1
 800bb1c:	72fb      	strb	r3, [r7, #11]
      break;
 800bb1e:	e007      	b.n	800bb30 <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 800bb20:	6839      	ldr	r1, [r7, #0]
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f000 f9ee 	bl	800bf04 <USBD_CtlError>
      err++;
 800bb28:	7afb      	ldrb	r3, [r7, #11]
 800bb2a:	3301      	adds	r3, #1
 800bb2c:	72fb      	strb	r3, [r7, #11]
      break;
 800bb2e:	bf00      	nop
  }

  if (err != 0U)
 800bb30:	7afb      	ldrb	r3, [r7, #11]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d11e      	bne.n	800bb74 <USBD_GetDescriptor+0x2f0>
  {
    return;
  }

  if (req->wLength != 0U)
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	88db      	ldrh	r3, [r3, #6]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d016      	beq.n	800bb6c <USBD_GetDescriptor+0x2e8>
  {
    if (len != 0U)
 800bb3e:	893b      	ldrh	r3, [r7, #8]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d00e      	beq.n	800bb62 <USBD_GetDescriptor+0x2de>
    {
      len = MIN(len, req->wLength);
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	88da      	ldrh	r2, [r3, #6]
 800bb48:	893b      	ldrh	r3, [r7, #8]
 800bb4a:	4293      	cmp	r3, r2
 800bb4c:	bf28      	it	cs
 800bb4e:	4613      	movcs	r3, r2
 800bb50:	b29b      	uxth	r3, r3
 800bb52:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bb54:	893b      	ldrh	r3, [r7, #8]
 800bb56:	461a      	mov	r2, r3
 800bb58:	68f9      	ldr	r1, [r7, #12]
 800bb5a:	6878      	ldr	r0, [r7, #4]
 800bb5c:	f000 fa43 	bl	800bfe6 <USBD_CtlSendData>
 800bb60:	e009      	b.n	800bb76 <USBD_GetDescriptor+0x2f2>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bb62:	6839      	ldr	r1, [r7, #0]
 800bb64:	6878      	ldr	r0, [r7, #4]
 800bb66:	f000 f9cd 	bl	800bf04 <USBD_CtlError>
 800bb6a:	e004      	b.n	800bb76 <USBD_GetDescriptor+0x2f2>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	f000 fa94 	bl	800c09a <USBD_CtlSendStatus>
 800bb72:	e000      	b.n	800bb76 <USBD_GetDescriptor+0x2f2>
    return;
 800bb74:	bf00      	nop
  }
}
 800bb76:	3710      	adds	r7, #16
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}

0800bb7c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b084      	sub	sp, #16
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
 800bb84:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	889b      	ldrh	r3, [r3, #4]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d131      	bne.n	800bbf2 <USBD_SetAddress+0x76>
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	88db      	ldrh	r3, [r3, #6]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d12d      	bne.n	800bbf2 <USBD_SetAddress+0x76>
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	885b      	ldrh	r3, [r3, #2]
 800bb9a:	2b7f      	cmp	r3, #127	@ 0x7f
 800bb9c:	d829      	bhi.n	800bbf2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bb9e:	683b      	ldr	r3, [r7, #0]
 800bba0:	885b      	ldrh	r3, [r3, #2]
 800bba2:	b2db      	uxtb	r3, r3
 800bba4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bba8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbb0:	b2db      	uxtb	r3, r3
 800bbb2:	2b03      	cmp	r3, #3
 800bbb4:	d104      	bne.n	800bbc0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bbb6:	6839      	ldr	r1, [r7, #0]
 800bbb8:	6878      	ldr	r0, [r7, #4]
 800bbba:	f000 f9a3 	bl	800bf04 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbbe:	e01d      	b.n	800bbfc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	7bfa      	ldrb	r2, [r7, #15]
 800bbc4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bbc8:	7bfb      	ldrb	r3, [r7, #15]
 800bbca:	4619      	mov	r1, r3
 800bbcc:	6878      	ldr	r0, [r7, #4]
 800bbce:	f000 fccb 	bl	800c568 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f000 fa61 	bl	800c09a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bbd8:	7bfb      	ldrb	r3, [r7, #15]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d004      	beq.n	800bbe8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2202      	movs	r2, #2
 800bbe2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbe6:	e009      	b.n	800bbfc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2201      	movs	r2, #1
 800bbec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbf0:	e004      	b.n	800bbfc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bbf2:	6839      	ldr	r1, [r7, #0]
 800bbf4:	6878      	ldr	r0, [r7, #4]
 800bbf6:	f000 f985 	bl	800bf04 <USBD_CtlError>
  }
}
 800bbfa:	bf00      	nop
 800bbfc:	bf00      	nop
 800bbfe:	3710      	adds	r7, #16
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}

0800bc04 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b084      	sub	sp, #16
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
 800bc0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bc0e:	2300      	movs	r3, #0
 800bc10:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	885b      	ldrh	r3, [r3, #2]
 800bc16:	b2da      	uxtb	r2, r3
 800bc18:	4b4c      	ldr	r3, [pc, #304]	@ (800bd4c <USBD_SetConfig+0x148>)
 800bc1a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bc1c:	4b4b      	ldr	r3, [pc, #300]	@ (800bd4c <USBD_SetConfig+0x148>)
 800bc1e:	781b      	ldrb	r3, [r3, #0]
 800bc20:	2b01      	cmp	r3, #1
 800bc22:	d905      	bls.n	800bc30 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bc24:	6839      	ldr	r1, [r7, #0]
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	f000 f96c 	bl	800bf04 <USBD_CtlError>
    return USBD_FAIL;
 800bc2c:	2303      	movs	r3, #3
 800bc2e:	e088      	b.n	800bd42 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc36:	b2db      	uxtb	r3, r3
 800bc38:	2b02      	cmp	r3, #2
 800bc3a:	d002      	beq.n	800bc42 <USBD_SetConfig+0x3e>
 800bc3c:	2b03      	cmp	r3, #3
 800bc3e:	d025      	beq.n	800bc8c <USBD_SetConfig+0x88>
 800bc40:	e071      	b.n	800bd26 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bc42:	4b42      	ldr	r3, [pc, #264]	@ (800bd4c <USBD_SetConfig+0x148>)
 800bc44:	781b      	ldrb	r3, [r3, #0]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d01c      	beq.n	800bc84 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800bc4a:	4b40      	ldr	r3, [pc, #256]	@ (800bd4c <USBD_SetConfig+0x148>)
 800bc4c:	781b      	ldrb	r3, [r3, #0]
 800bc4e:	461a      	mov	r2, r3
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bc54:	4b3d      	ldr	r3, [pc, #244]	@ (800bd4c <USBD_SetConfig+0x148>)
 800bc56:	781b      	ldrb	r3, [r3, #0]
 800bc58:	4619      	mov	r1, r3
 800bc5a:	6878      	ldr	r0, [r7, #4]
 800bc5c:	f7ff f93b 	bl	800aed6 <USBD_SetClassConfig>
 800bc60:	4603      	mov	r3, r0
 800bc62:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bc64:	7bfb      	ldrb	r3, [r7, #15]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d004      	beq.n	800bc74 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800bc6a:	6839      	ldr	r1, [r7, #0]
 800bc6c:	6878      	ldr	r0, [r7, #4]
 800bc6e:	f000 f949 	bl	800bf04 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bc72:	e065      	b.n	800bd40 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f000 fa10 	bl	800c09a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2203      	movs	r2, #3
 800bc7e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800bc82:	e05d      	b.n	800bd40 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800bc84:	6878      	ldr	r0, [r7, #4]
 800bc86:	f000 fa08 	bl	800c09a <USBD_CtlSendStatus>
      break;
 800bc8a:	e059      	b.n	800bd40 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bc8c:	4b2f      	ldr	r3, [pc, #188]	@ (800bd4c <USBD_SetConfig+0x148>)
 800bc8e:	781b      	ldrb	r3, [r3, #0]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d112      	bne.n	800bcba <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2202      	movs	r2, #2
 800bc98:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800bc9c:	4b2b      	ldr	r3, [pc, #172]	@ (800bd4c <USBD_SetConfig+0x148>)
 800bc9e:	781b      	ldrb	r3, [r3, #0]
 800bca0:	461a      	mov	r2, r3
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bca6:	4b29      	ldr	r3, [pc, #164]	@ (800bd4c <USBD_SetConfig+0x148>)
 800bca8:	781b      	ldrb	r3, [r3, #0]
 800bcaa:	4619      	mov	r1, r3
 800bcac:	6878      	ldr	r0, [r7, #4]
 800bcae:	f7ff f92e 	bl	800af0e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f000 f9f1 	bl	800c09a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bcb8:	e042      	b.n	800bd40 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800bcba:	4b24      	ldr	r3, [pc, #144]	@ (800bd4c <USBD_SetConfig+0x148>)
 800bcbc:	781b      	ldrb	r3, [r3, #0]
 800bcbe:	461a      	mov	r2, r3
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	685b      	ldr	r3, [r3, #4]
 800bcc4:	429a      	cmp	r2, r3
 800bcc6:	d02a      	beq.n	800bd1e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	685b      	ldr	r3, [r3, #4]
 800bccc:	b2db      	uxtb	r3, r3
 800bcce:	4619      	mov	r1, r3
 800bcd0:	6878      	ldr	r0, [r7, #4]
 800bcd2:	f7ff f91c 	bl	800af0e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bcd6:	4b1d      	ldr	r3, [pc, #116]	@ (800bd4c <USBD_SetConfig+0x148>)
 800bcd8:	781b      	ldrb	r3, [r3, #0]
 800bcda:	461a      	mov	r2, r3
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bce0:	4b1a      	ldr	r3, [pc, #104]	@ (800bd4c <USBD_SetConfig+0x148>)
 800bce2:	781b      	ldrb	r3, [r3, #0]
 800bce4:	4619      	mov	r1, r3
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	f7ff f8f5 	bl	800aed6 <USBD_SetClassConfig>
 800bcec:	4603      	mov	r3, r0
 800bcee:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bcf0:	7bfb      	ldrb	r3, [r7, #15]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d00f      	beq.n	800bd16 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800bcf6:	6839      	ldr	r1, [r7, #0]
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f000 f903 	bl	800bf04 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	685b      	ldr	r3, [r3, #4]
 800bd02:	b2db      	uxtb	r3, r3
 800bd04:	4619      	mov	r1, r3
 800bd06:	6878      	ldr	r0, [r7, #4]
 800bd08:	f7ff f901 	bl	800af0e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2202      	movs	r2, #2
 800bd10:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800bd14:	e014      	b.n	800bd40 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800bd16:	6878      	ldr	r0, [r7, #4]
 800bd18:	f000 f9bf 	bl	800c09a <USBD_CtlSendStatus>
      break;
 800bd1c:	e010      	b.n	800bd40 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800bd1e:	6878      	ldr	r0, [r7, #4]
 800bd20:	f000 f9bb 	bl	800c09a <USBD_CtlSendStatus>
      break;
 800bd24:	e00c      	b.n	800bd40 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800bd26:	6839      	ldr	r1, [r7, #0]
 800bd28:	6878      	ldr	r0, [r7, #4]
 800bd2a:	f000 f8eb 	bl	800bf04 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bd2e:	4b07      	ldr	r3, [pc, #28]	@ (800bd4c <USBD_SetConfig+0x148>)
 800bd30:	781b      	ldrb	r3, [r3, #0]
 800bd32:	4619      	mov	r1, r3
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	f7ff f8ea 	bl	800af0e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bd3a:	2303      	movs	r3, #3
 800bd3c:	73fb      	strb	r3, [r7, #15]
      break;
 800bd3e:	bf00      	nop
  }

  return ret;
 800bd40:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd42:	4618      	mov	r0, r3
 800bd44:	3710      	adds	r7, #16
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bd80      	pop	{r7, pc}
 800bd4a:	bf00      	nop
 800bd4c:	20001664 	.word	0x20001664

0800bd50 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b082      	sub	sp, #8
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
 800bd58:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	88db      	ldrh	r3, [r3, #6]
 800bd5e:	2b01      	cmp	r3, #1
 800bd60:	d004      	beq.n	800bd6c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bd62:	6839      	ldr	r1, [r7, #0]
 800bd64:	6878      	ldr	r0, [r7, #4]
 800bd66:	f000 f8cd 	bl	800bf04 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bd6a:	e023      	b.n	800bdb4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd72:	b2db      	uxtb	r3, r3
 800bd74:	2b02      	cmp	r3, #2
 800bd76:	dc02      	bgt.n	800bd7e <USBD_GetConfig+0x2e>
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	dc03      	bgt.n	800bd84 <USBD_GetConfig+0x34>
 800bd7c:	e015      	b.n	800bdaa <USBD_GetConfig+0x5a>
 800bd7e:	2b03      	cmp	r3, #3
 800bd80:	d00b      	beq.n	800bd9a <USBD_GetConfig+0x4a>
 800bd82:	e012      	b.n	800bdaa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2200      	movs	r2, #0
 800bd88:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	3308      	adds	r3, #8
 800bd8e:	2201      	movs	r2, #1
 800bd90:	4619      	mov	r1, r3
 800bd92:	6878      	ldr	r0, [r7, #4]
 800bd94:	f000 f927 	bl	800bfe6 <USBD_CtlSendData>
        break;
 800bd98:	e00c      	b.n	800bdb4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	3304      	adds	r3, #4
 800bd9e:	2201      	movs	r2, #1
 800bda0:	4619      	mov	r1, r3
 800bda2:	6878      	ldr	r0, [r7, #4]
 800bda4:	f000 f91f 	bl	800bfe6 <USBD_CtlSendData>
        break;
 800bda8:	e004      	b.n	800bdb4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bdaa:	6839      	ldr	r1, [r7, #0]
 800bdac:	6878      	ldr	r0, [r7, #4]
 800bdae:	f000 f8a9 	bl	800bf04 <USBD_CtlError>
        break;
 800bdb2:	bf00      	nop
}
 800bdb4:	bf00      	nop
 800bdb6:	3708      	adds	r7, #8
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	bd80      	pop	{r7, pc}

0800bdbc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b082      	sub	sp, #8
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
 800bdc4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bdcc:	b2db      	uxtb	r3, r3
 800bdce:	3b01      	subs	r3, #1
 800bdd0:	2b02      	cmp	r3, #2
 800bdd2:	d81e      	bhi.n	800be12 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	88db      	ldrh	r3, [r3, #6]
 800bdd8:	2b02      	cmp	r3, #2
 800bdda:	d004      	beq.n	800bde6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800bddc:	6839      	ldr	r1, [r7, #0]
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	f000 f890 	bl	800bf04 <USBD_CtlError>
        break;
 800bde4:	e01a      	b.n	800be1c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	2201      	movs	r2, #1
 800bdea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d005      	beq.n	800be02 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	68db      	ldr	r3, [r3, #12]
 800bdfa:	f043 0202 	orr.w	r2, r3, #2
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	330c      	adds	r3, #12
 800be06:	2202      	movs	r2, #2
 800be08:	4619      	mov	r1, r3
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	f000 f8eb 	bl	800bfe6 <USBD_CtlSendData>
      break;
 800be10:	e004      	b.n	800be1c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800be12:	6839      	ldr	r1, [r7, #0]
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	f000 f875 	bl	800bf04 <USBD_CtlError>
      break;
 800be1a:	bf00      	nop
  }
}
 800be1c:	bf00      	nop
 800be1e:	3708      	adds	r7, #8
 800be20:	46bd      	mov	sp, r7
 800be22:	bd80      	pop	{r7, pc}

0800be24 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b082      	sub	sp, #8
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
 800be2c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	885b      	ldrh	r3, [r3, #2]
 800be32:	2b01      	cmp	r3, #1
 800be34:	d106      	bne.n	800be44 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2201      	movs	r2, #1
 800be3a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f000 f92b 	bl	800c09a <USBD_CtlSendStatus>
  }
}
 800be44:	bf00      	nop
 800be46:	3708      	adds	r7, #8
 800be48:	46bd      	mov	sp, r7
 800be4a:	bd80      	pop	{r7, pc}

0800be4c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b082      	sub	sp, #8
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
 800be54:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be5c:	b2db      	uxtb	r3, r3
 800be5e:	3b01      	subs	r3, #1
 800be60:	2b02      	cmp	r3, #2
 800be62:	d80b      	bhi.n	800be7c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	885b      	ldrh	r3, [r3, #2]
 800be68:	2b01      	cmp	r3, #1
 800be6a:	d10c      	bne.n	800be86 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2200      	movs	r2, #0
 800be70:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800be74:	6878      	ldr	r0, [r7, #4]
 800be76:	f000 f910 	bl	800c09a <USBD_CtlSendStatus>
      }
      break;
 800be7a:	e004      	b.n	800be86 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800be7c:	6839      	ldr	r1, [r7, #0]
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f000 f840 	bl	800bf04 <USBD_CtlError>
      break;
 800be84:	e000      	b.n	800be88 <USBD_ClrFeature+0x3c>
      break;
 800be86:	bf00      	nop
  }
}
 800be88:	bf00      	nop
 800be8a:	3708      	adds	r7, #8
 800be8c:	46bd      	mov	sp, r7
 800be8e:	bd80      	pop	{r7, pc}

0800be90 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b084      	sub	sp, #16
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
 800be98:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	781a      	ldrb	r2, [r3, #0]
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	3301      	adds	r3, #1
 800beaa:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	781a      	ldrb	r2, [r3, #0]
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	3301      	adds	r3, #1
 800beb8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800beba:	68f8      	ldr	r0, [r7, #12]
 800bebc:	f7ff faa9 	bl	800b412 <SWAPBYTE>
 800bec0:	4603      	mov	r3, r0
 800bec2:	461a      	mov	r2, r3
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	3301      	adds	r3, #1
 800becc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	3301      	adds	r3, #1
 800bed2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bed4:	68f8      	ldr	r0, [r7, #12]
 800bed6:	f7ff fa9c 	bl	800b412 <SWAPBYTE>
 800beda:	4603      	mov	r3, r0
 800bedc:	461a      	mov	r2, r3
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	3301      	adds	r3, #1
 800bee6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	3301      	adds	r3, #1
 800beec:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800beee:	68f8      	ldr	r0, [r7, #12]
 800bef0:	f7ff fa8f 	bl	800b412 <SWAPBYTE>
 800bef4:	4603      	mov	r3, r0
 800bef6:	461a      	mov	r2, r3
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	80da      	strh	r2, [r3, #6]
}
 800befc:	bf00      	nop
 800befe:	3710      	adds	r7, #16
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}

0800bf04 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b082      	sub	sp, #8
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
 800bf0c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bf0e:	2180      	movs	r1, #128	@ 0x80
 800bf10:	6878      	ldr	r0, [r7, #4]
 800bf12:	f000 fabf 	bl	800c494 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bf16:	2100      	movs	r1, #0
 800bf18:	6878      	ldr	r0, [r7, #4]
 800bf1a:	f000 fabb 	bl	800c494 <USBD_LL_StallEP>
}
 800bf1e:	bf00      	nop
 800bf20:	3708      	adds	r7, #8
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}

0800bf26 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bf26:	b580      	push	{r7, lr}
 800bf28:	b086      	sub	sp, #24
 800bf2a:	af00      	add	r7, sp, #0
 800bf2c:	60f8      	str	r0, [r7, #12]
 800bf2e:	60b9      	str	r1, [r7, #8]
 800bf30:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bf32:	2300      	movs	r3, #0
 800bf34:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d036      	beq.n	800bfaa <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800bf40:	6938      	ldr	r0, [r7, #16]
 800bf42:	f000 f836 	bl	800bfb2 <USBD_GetLen>
 800bf46:	4603      	mov	r3, r0
 800bf48:	3301      	adds	r3, #1
 800bf4a:	b29b      	uxth	r3, r3
 800bf4c:	005b      	lsls	r3, r3, #1
 800bf4e:	b29a      	uxth	r2, r3
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bf54:	7dfb      	ldrb	r3, [r7, #23]
 800bf56:	68ba      	ldr	r2, [r7, #8]
 800bf58:	4413      	add	r3, r2
 800bf5a:	687a      	ldr	r2, [r7, #4]
 800bf5c:	7812      	ldrb	r2, [r2, #0]
 800bf5e:	701a      	strb	r2, [r3, #0]
  idx++;
 800bf60:	7dfb      	ldrb	r3, [r7, #23]
 800bf62:	3301      	adds	r3, #1
 800bf64:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bf66:	7dfb      	ldrb	r3, [r7, #23]
 800bf68:	68ba      	ldr	r2, [r7, #8]
 800bf6a:	4413      	add	r3, r2
 800bf6c:	2203      	movs	r2, #3
 800bf6e:	701a      	strb	r2, [r3, #0]
  idx++;
 800bf70:	7dfb      	ldrb	r3, [r7, #23]
 800bf72:	3301      	adds	r3, #1
 800bf74:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bf76:	e013      	b.n	800bfa0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800bf78:	7dfb      	ldrb	r3, [r7, #23]
 800bf7a:	68ba      	ldr	r2, [r7, #8]
 800bf7c:	4413      	add	r3, r2
 800bf7e:	693a      	ldr	r2, [r7, #16]
 800bf80:	7812      	ldrb	r2, [r2, #0]
 800bf82:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bf84:	693b      	ldr	r3, [r7, #16]
 800bf86:	3301      	adds	r3, #1
 800bf88:	613b      	str	r3, [r7, #16]
    idx++;
 800bf8a:	7dfb      	ldrb	r3, [r7, #23]
 800bf8c:	3301      	adds	r3, #1
 800bf8e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bf90:	7dfb      	ldrb	r3, [r7, #23]
 800bf92:	68ba      	ldr	r2, [r7, #8]
 800bf94:	4413      	add	r3, r2
 800bf96:	2200      	movs	r2, #0
 800bf98:	701a      	strb	r2, [r3, #0]
    idx++;
 800bf9a:	7dfb      	ldrb	r3, [r7, #23]
 800bf9c:	3301      	adds	r3, #1
 800bf9e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bfa0:	693b      	ldr	r3, [r7, #16]
 800bfa2:	781b      	ldrb	r3, [r3, #0]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d1e7      	bne.n	800bf78 <USBD_GetString+0x52>
 800bfa8:	e000      	b.n	800bfac <USBD_GetString+0x86>
    return;
 800bfaa:	bf00      	nop
  }
}
 800bfac:	3718      	adds	r7, #24
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	bd80      	pop	{r7, pc}

0800bfb2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bfb2:	b480      	push	{r7}
 800bfb4:	b085      	sub	sp, #20
 800bfb6:	af00      	add	r7, sp, #0
 800bfb8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bfba:	2300      	movs	r3, #0
 800bfbc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bfc2:	e005      	b.n	800bfd0 <USBD_GetLen+0x1e>
  {
    len++;
 800bfc4:	7bfb      	ldrb	r3, [r7, #15]
 800bfc6:	3301      	adds	r3, #1
 800bfc8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bfca:	68bb      	ldr	r3, [r7, #8]
 800bfcc:	3301      	adds	r3, #1
 800bfce:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bfd0:	68bb      	ldr	r3, [r7, #8]
 800bfd2:	781b      	ldrb	r3, [r3, #0]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d1f5      	bne.n	800bfc4 <USBD_GetLen+0x12>
  }

  return len;
 800bfd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfda:	4618      	mov	r0, r3
 800bfdc:	3714      	adds	r7, #20
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe4:	4770      	bx	lr

0800bfe6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bfe6:	b580      	push	{r7, lr}
 800bfe8:	b084      	sub	sp, #16
 800bfea:	af00      	add	r7, sp, #0
 800bfec:	60f8      	str	r0, [r7, #12]
 800bfee:	60b9      	str	r1, [r7, #8]
 800bff0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	2202      	movs	r2, #2
 800bff6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	687a      	ldr	r2, [r7, #4]
 800bffe:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	687a      	ldr	r2, [r7, #4]
 800c004:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	68ba      	ldr	r2, [r7, #8]
 800c00a:	2100      	movs	r1, #0
 800c00c:	68f8      	ldr	r0, [r7, #12]
 800c00e:	f000 faca 	bl	800c5a6 <USBD_LL_Transmit>

  return USBD_OK;
 800c012:	2300      	movs	r3, #0
}
 800c014:	4618      	mov	r0, r3
 800c016:	3710      	adds	r7, #16
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}

0800c01c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b084      	sub	sp, #16
 800c020:	af00      	add	r7, sp, #0
 800c022:	60f8      	str	r0, [r7, #12]
 800c024:	60b9      	str	r1, [r7, #8]
 800c026:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	68ba      	ldr	r2, [r7, #8]
 800c02c:	2100      	movs	r1, #0
 800c02e:	68f8      	ldr	r0, [r7, #12]
 800c030:	f000 fab9 	bl	800c5a6 <USBD_LL_Transmit>

  return USBD_OK;
 800c034:	2300      	movs	r3, #0
}
 800c036:	4618      	mov	r0, r3
 800c038:	3710      	adds	r7, #16
 800c03a:	46bd      	mov	sp, r7
 800c03c:	bd80      	pop	{r7, pc}

0800c03e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c03e:	b580      	push	{r7, lr}
 800c040:	b084      	sub	sp, #16
 800c042:	af00      	add	r7, sp, #0
 800c044:	60f8      	str	r0, [r7, #12]
 800c046:	60b9      	str	r1, [r7, #8]
 800c048:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	2203      	movs	r2, #3
 800c04e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	687a      	ldr	r2, [r7, #4]
 800c056:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	687a      	ldr	r2, [r7, #4]
 800c05e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	68ba      	ldr	r2, [r7, #8]
 800c066:	2100      	movs	r1, #0
 800c068:	68f8      	ldr	r0, [r7, #12]
 800c06a:	f000 fabd 	bl	800c5e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c06e:	2300      	movs	r3, #0
}
 800c070:	4618      	mov	r0, r3
 800c072:	3710      	adds	r7, #16
 800c074:	46bd      	mov	sp, r7
 800c076:	bd80      	pop	{r7, pc}

0800c078 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b084      	sub	sp, #16
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	60f8      	str	r0, [r7, #12]
 800c080:	60b9      	str	r1, [r7, #8]
 800c082:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	68ba      	ldr	r2, [r7, #8]
 800c088:	2100      	movs	r1, #0
 800c08a:	68f8      	ldr	r0, [r7, #12]
 800c08c:	f000 faac 	bl	800c5e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c090:	2300      	movs	r3, #0
}
 800c092:	4618      	mov	r0, r3
 800c094:	3710      	adds	r7, #16
 800c096:	46bd      	mov	sp, r7
 800c098:	bd80      	pop	{r7, pc}

0800c09a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c09a:	b580      	push	{r7, lr}
 800c09c:	b082      	sub	sp, #8
 800c09e:	af00      	add	r7, sp, #0
 800c0a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2204      	movs	r2, #4
 800c0a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	2100      	movs	r1, #0
 800c0b0:	6878      	ldr	r0, [r7, #4]
 800c0b2:	f000 fa78 	bl	800c5a6 <USBD_LL_Transmit>

  return USBD_OK;
 800c0b6:	2300      	movs	r3, #0
}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	3708      	adds	r7, #8
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	bd80      	pop	{r7, pc}

0800c0c0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b082      	sub	sp, #8
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	2205      	movs	r2, #5
 800c0cc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	2100      	movs	r1, #0
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f000 fa86 	bl	800c5e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c0dc:	2300      	movs	r3, #0
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	3708      	adds	r7, #8
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}

0800c0e6 <HAL_PCDEx_SetTxFiFoInBytes>:
/* Private functions ---------------------------------------------------------*/

/* USER CODE BEGIN 1 */
#if(!STM32F1_DEVICE)
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFoInBytes(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800c0e6:	b580      	push	{r7, lr}
 800c0e8:	b082      	sub	sp, #8
 800c0ea:	af00      	add	r7, sp, #0
 800c0ec:	6078      	str	r0, [r7, #4]
 800c0ee:	460b      	mov	r3, r1
 800c0f0:	70fb      	strb	r3, [r7, #3]
 800c0f2:	4613      	mov	r3, r2
 800c0f4:	803b      	strh	r3, [r7, #0]
	return HAL_PCDEx_SetTxFiFo(hpcd, fifo, (size/4));
 800c0f6:	883b      	ldrh	r3, [r7, #0]
 800c0f8:	089b      	lsrs	r3, r3, #2
 800c0fa:	b29a      	uxth	r2, r3
 800c0fc:	78fb      	ldrb	r3, [r7, #3]
 800c0fe:	4619      	mov	r1, r3
 800c100:	6878      	ldr	r0, [r7, #4]
 800c102:	f7f9 fbbb 	bl	800587c <HAL_PCDEx_SetTxFiFo>
 800c106:	4603      	mov	r3, r0
}
 800c108:	4618      	mov	r0, r3
 800c10a:	3708      	adds	r7, #8
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}

0800c110 <HAL_PCDEx_SetRxFiFoInBytes>:

HAL_StatusTypeDef HAL_PCDEx_SetRxFiFoInBytes(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b082      	sub	sp, #8
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
 800c118:	460b      	mov	r3, r1
 800c11a:	807b      	strh	r3, [r7, #2]
	return HAL_PCDEx_SetRxFiFo(hpcd, (size/4));
 800c11c:	887b      	ldrh	r3, [r7, #2]
 800c11e:	089b      	lsrs	r3, r3, #2
 800c120:	b29b      	uxth	r3, r3
 800c122:	4619      	mov	r1, r3
 800c124:	6878      	ldr	r0, [r7, #4]
 800c126:	f7f9 fbf0 	bl	800590a <HAL_PCDEx_SetRxFiFo>
 800c12a:	4603      	mov	r3, r0
}
 800c12c:	4618      	mov	r0, r3
 800c12e:	3708      	adds	r7, #8
 800c130:	46bd      	mov	sp, r7
 800c132:	bd80      	pop	{r7, pc}

0800c134 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b082      	sub	sp, #8
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef *)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c148:	4619      	mov	r1, r3
 800c14a:	4610      	mov	r0, r2
 800c14c:	f7fe fef7 	bl	800af3e <USBD_LL_SetupStage>
}
 800c150:	bf00      	nop
 800c152:	3708      	adds	r7, #8
 800c154:	46bd      	mov	sp, r7
 800c156:	bd80      	pop	{r7, pc}

0800c158 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b082      	sub	sp, #8
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
 800c160:	460b      	mov	r3, r1
 800c162:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c16a:	78fa      	ldrb	r2, [r7, #3]
 800c16c:	6879      	ldr	r1, [r7, #4]
 800c16e:	4613      	mov	r3, r2
 800c170:	00db      	lsls	r3, r3, #3
 800c172:	4413      	add	r3, r2
 800c174:	009b      	lsls	r3, r3, #2
 800c176:	440b      	add	r3, r1
 800c178:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c17c:	681a      	ldr	r2, [r3, #0]
 800c17e:	78fb      	ldrb	r3, [r7, #3]
 800c180:	4619      	mov	r1, r3
 800c182:	f7fe ff31 	bl	800afe8 <USBD_LL_DataOutStage>
}
 800c186:	bf00      	nop
 800c188:	3708      	adds	r7, #8
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}

0800c18e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c18e:	b580      	push	{r7, lr}
 800c190:	b082      	sub	sp, #8
 800c192:	af00      	add	r7, sp, #0
 800c194:	6078      	str	r0, [r7, #4]
 800c196:	460b      	mov	r3, r1
 800c198:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c1a0:	78fa      	ldrb	r2, [r7, #3]
 800c1a2:	6879      	ldr	r1, [r7, #4]
 800c1a4:	4613      	mov	r3, r2
 800c1a6:	00db      	lsls	r3, r3, #3
 800c1a8:	4413      	add	r3, r2
 800c1aa:	009b      	lsls	r3, r3, #2
 800c1ac:	440b      	add	r3, r1
 800c1ae:	3320      	adds	r3, #32
 800c1b0:	681a      	ldr	r2, [r3, #0]
 800c1b2:	78fb      	ldrb	r3, [r7, #3]
 800c1b4:	4619      	mov	r1, r3
 800c1b6:	f7fe ff7a 	bl	800b0ae <USBD_LL_DataInStage>
}
 800c1ba:	bf00      	nop
 800c1bc:	3708      	adds	r7, #8
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}

0800c1c2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1c2:	b580      	push	{r7, lr}
 800c1c4:	b082      	sub	sp, #8
 800c1c6:	af00      	add	r7, sp, #0
 800c1c8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef *)hpcd->pData);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	f7ff f889 	bl	800b2e8 <USBD_LL_SOF>
}
 800c1d6:	bf00      	nop
 800c1d8:	3708      	adds	r7, #8
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bd80      	pop	{r7, pc}

0800c1de <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1de:	b580      	push	{r7, lr}
 800c1e0:	b084      	sub	sp, #16
 800c1e2:	af00      	add	r7, sp, #0
 800c1e4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c1e6:	2301      	movs	r3, #1
 800c1e8:	73fb      	strb	r3, [r7, #15]

  if (hpcd->Init.speed == PCD_SPEED_FULL)
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	79db      	ldrb	r3, [r3, #7]
 800c1ee:	2b02      	cmp	r3, #2
 800c1f0:	d102      	bne.n	800c1f8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_FULL; 
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	73fb      	strb	r3, [r7, #15]
 800c1f6:	e008      	b.n	800c20a <HAL_PCD_ResetCallback+0x2c>
  }
  #if(!STM32F1_DEVICE)
  else if (hpcd->Init.speed == PCD_SPEED_HIGH)
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	79db      	ldrb	r3, [r3, #7]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d102      	bne.n	800c206 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_HIGH;
 800c200:	2300      	movs	r3, #0
 800c202:	73fb      	strb	r3, [r7, #15]
 800c204:	e001      	b.n	800c20a <HAL_PCD_ResetCallback+0x2c>
  }
  #endif
  else
  {
    Error_Handler();
 800c206:	f7f5 ff4d 	bl	80020a4 <Error_Handler>
  }
  /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef *)hpcd->pData, speed);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c210:	7bfa      	ldrb	r2, [r7, #15]
 800c212:	4611      	mov	r1, r2
 800c214:	4618      	mov	r0, r3
 800c216:	f7ff f829 	bl	800b26c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef *)hpcd->pData);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c220:	4618      	mov	r0, r3
 800c222:	f7fe ffda 	bl	800b1da <USBD_LL_Reset>
}
 800c226:	bf00      	nop
 800c228:	3710      	adds	r7, #16
 800c22a:	46bd      	mov	sp, r7
 800c22c:	bd80      	pop	{r7, pc}
	...

0800c230 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b082      	sub	sp, #8
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef *)hpcd->pData);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c23e:	4618      	mov	r0, r3
 800c240:	f7ff f824 	bl	800b28c <USBD_LL_Suspend>
#if (!STM32F1_DEVICE)
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	687a      	ldr	r2, [r7, #4]
 800c250:	6812      	ldr	r2, [r2, #0]
 800c252:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c256:	f043 0301 	orr.w	r3, r3, #1
 800c25a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	7adb      	ldrb	r3, [r3, #11]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d005      	beq.n	800c270 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c264:	4b04      	ldr	r3, [pc, #16]	@ (800c278 <HAL_PCD_SuspendCallback+0x48>)
 800c266:	691b      	ldr	r3, [r3, #16]
 800c268:	4a03      	ldr	r2, [pc, #12]	@ (800c278 <HAL_PCD_SuspendCallback+0x48>)
 800c26a:	f043 0306 	orr.w	r3, r3, #6
 800c26e:	6113      	str	r3, [r2, #16]
  }
#endif
  /* USER CODE END 2 */
}
 800c270:	bf00      	nop
 800c272:	3708      	adds	r7, #8
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}
 800c278:	e000ed00 	.word	0xe000ed00

0800c27c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b082      	sub	sp, #8
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef *)hpcd->pData);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c28a:	4618      	mov	r0, r3
 800c28c:	f7ff f814 	bl	800b2b8 <USBD_LL_Resume>
}
 800c290:	bf00      	nop
 800c292:	3708      	adds	r7, #8
 800c294:	46bd      	mov	sp, r7
 800c296:	bd80      	pop	{r7, pc}

0800c298 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b082      	sub	sp, #8
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
 800c2a0:	460b      	mov	r3, r1
 800c2a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c2aa:	78fa      	ldrb	r2, [r7, #3]
 800c2ac:	4611      	mov	r1, r2
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	f7ff f862 	bl	800b378 <USBD_LL_IsoOUTIncomplete>
}
 800c2b4:	bf00      	nop
 800c2b6:	3708      	adds	r7, #8
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	bd80      	pop	{r7, pc}

0800c2bc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b082      	sub	sp, #8
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
 800c2c4:	460b      	mov	r3, r1
 800c2c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c2ce:	78fa      	ldrb	r2, [r7, #3]
 800c2d0:	4611      	mov	r1, r2
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f7ff f82a 	bl	800b32c <USBD_LL_IsoINIncomplete>
}
 800c2d8:	bf00      	nop
 800c2da:	3708      	adds	r7, #8
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	bd80      	pop	{r7, pc}

0800c2e0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b082      	sub	sp, #8
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef *)hpcd->pData);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f7ff f868 	bl	800b3c4 <USBD_LL_DevConnected>
}
 800c2f4:	bf00      	nop
 800c2f6:	3708      	adds	r7, #8
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bd80      	pop	{r7, pc}

0800c2fc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b082      	sub	sp, #8
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef *)hpcd->pData);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c30a:	4618      	mov	r0, r3
 800c30c:	f7ff f865 	bl	800b3da <USBD_LL_DevDisconnected>
}
 800c310:	bf00      	nop
 800c312:	3708      	adds	r7, #8
 800c314:	46bd      	mov	sp, r7
 800c316:	bd80      	pop	{r7, pc}

0800c318 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b084      	sub	sp, #16
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
#else
  /**FULL SPEED USB */
#if (STM32F1_DEVICE) /** for STM32F1 or similar */
  hpcd_USB_OTG_PTR = &hpcd_USB_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
#else
  hpcd_USB_OTG_PTR = &hpcd_USB_OTG_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
 800c320:	4b27      	ldr	r3, [pc, #156]	@ (800c3c0 <USBD_LL_Init+0xa8>)
 800c322:	4a28      	ldr	r2, [pc, #160]	@ (800c3c4 <USBD_LL_Init+0xac>)
 800c324:	601a      	str	r2, [r3, #0]
#endif

  if (pdev->id == DEVICE_FS)
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	781b      	ldrb	r3, [r3, #0]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d143      	bne.n	800c3b6 <USBD_LL_Init+0x9e>
  {
    /* Link the driver to the stack. */
    hpcd_USB_OTG_PTR->pData = pdev;
 800c32e:	4b24      	ldr	r3, [pc, #144]	@ (800c3c0 <USBD_LL_Init+0xa8>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	687a      	ldr	r2, [r7, #4]
 800c334:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
    pdev->pData = hpcd_USB_OTG_PTR;
 800c338:	4b21      	ldr	r3, [pc, #132]	@ (800c3c0 <USBD_LL_Init+0xa8>)
 800c33a:	681a      	ldr	r2, [r3, #0]
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f8c3 2310 	str.w	r2, [r3, #784]	@ 0x310
      pma_track += 8;
    }
#endif
#else /** if HAL_PCDEx_SetRxFiFo() is used by HAL driver */

    HAL_PCDEx_SetRxFiFoInBytes(hpcd_USB_OTG_PTR, 512); // ALL OUT EP Buffer
 800c342:	4b1f      	ldr	r3, [pc, #124]	@ (800c3c0 <USBD_LL_Init+0xa8>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c34a:	4618      	mov	r0, r3
 800c34c:	f7ff fee0 	bl	800c110 <HAL_PCDEx_SetRxFiFoInBytes>

    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, 0, 64); // EP0 IN
 800c350:	4b1b      	ldr	r3, [pc, #108]	@ (800c3c0 <USBD_LL_Init+0xa8>)
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	2240      	movs	r2, #64	@ 0x40
 800c356:	2100      	movs	r1, #0
 800c358:	4618      	mov	r0, r3
 800c35a:	f7ff fec4 	bl	800c0e6 <HAL_PCDEx_SetTxFiFoInBytes>
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (HID_KEYBOARD_IN_EP & 0x7F), 64);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CUSTOM_HID_IN_EP & 0x7F), 64);
 800c35e:	4b18      	ldr	r3, [pc, #96]	@ (800c3c0 <USBD_LL_Init+0xa8>)
 800c360:	6818      	ldr	r0, [r3, #0]
 800c362:	4b19      	ldr	r3, [pc, #100]	@ (800c3c8 <USBD_LL_Init+0xb0>)
 800c364:	781b      	ldrb	r3, [r3, #0]
 800c366:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c36a:	b2db      	uxtb	r3, r3
 800c36c:	2240      	movs	r2, #64	@ 0x40
 800c36e:	4619      	mov	r1, r3
 800c370:	f7ff feb9 	bl	800c0e6 <HAL_PCDEx_SetTxFiFoInBytes>
#endif
#if (USBD_USE_PRNTR == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (PRNT_IN_EP & 0x7F), 128);
#endif
#if (USBD_USE_CDC_ACM == 1)
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800c374:	2300      	movs	r3, #0
 800c376:	73fb      	strb	r3, [r7, #15]
 800c378:	e01a      	b.n	800c3b0 <USBD_LL_Init+0x98>
    {
      HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CDC_IN_EP[i] & 0x7F), 128);
 800c37a:	4b11      	ldr	r3, [pc, #68]	@ (800c3c0 <USBD_LL_Init+0xa8>)
 800c37c:	6818      	ldr	r0, [r3, #0]
 800c37e:	7bfb      	ldrb	r3, [r7, #15]
 800c380:	4a12      	ldr	r2, [pc, #72]	@ (800c3cc <USBD_LL_Init+0xb4>)
 800c382:	5cd3      	ldrb	r3, [r2, r3]
 800c384:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c388:	b2db      	uxtb	r3, r3
 800c38a:	2280      	movs	r2, #128	@ 0x80
 800c38c:	4619      	mov	r1, r3
 800c38e:	f7ff feaa 	bl	800c0e6 <HAL_PCDEx_SetTxFiFoInBytes>
      HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CDC_CMD_EP[i] & 0x7F), 64);
 800c392:	4b0b      	ldr	r3, [pc, #44]	@ (800c3c0 <USBD_LL_Init+0xa8>)
 800c394:	6818      	ldr	r0, [r3, #0]
 800c396:	7bfb      	ldrb	r3, [r7, #15]
 800c398:	4a0d      	ldr	r2, [pc, #52]	@ (800c3d0 <USBD_LL_Init+0xb8>)
 800c39a:	5cd3      	ldrb	r3, [r2, r3]
 800c39c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c3a0:	b2db      	uxtb	r3, r3
 800c3a2:	2240      	movs	r2, #64	@ 0x40
 800c3a4:	4619      	mov	r1, r3
 800c3a6:	f7ff fe9e 	bl	800c0e6 <HAL_PCDEx_SetTxFiFoInBytes>
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800c3aa:	7bfb      	ldrb	r3, [r7, #15]
 800c3ac:	3301      	adds	r3, #1
 800c3ae:	73fb      	strb	r3, [r7, #15]
 800c3b0:	7bfb      	ldrb	r3, [r7, #15]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d0e1      	beq.n	800c37a <USBD_LL_Init+0x62>
  HAL_PCD_RegisterDataOutStageCallback(hpcd_USB_OTG_PTR, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(hpcd_USB_OTG_PTR, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  return USBD_OK;
 800c3b6:	2300      	movs	r3, #0
}
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	3710      	adds	r7, #16
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	bd80      	pop	{r7, pc}
 800c3c0:	20001668 	.word	0x20001668
 800c3c4:	200007f0 	.word	0x200007f0
 800c3c8:	200001f6 	.word	0x200001f6
 800c3cc:	200012fc 	.word	0x200012fc
 800c3d0:	20001304 	.word	0x20001304

0800c3d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b084      	sub	sp, #16
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3dc:	2300      	movs	r3, #0
 800c3de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f7f8 f939 	bl	8004662 <HAL_PCD_Start>
 800c3f0:	4603      	mov	r3, r0
 800c3f2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800c3f4:	7bfb      	ldrb	r3, [r7, #15]
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	f000 f92a 	bl	800c650 <USBD_Get_USB_Status>
 800c3fc:	4603      	mov	r3, r0
 800c3fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c400:	7bbb      	ldrb	r3, [r7, #14]
}
 800c402:	4618      	mov	r0, r3
 800c404:	3710      	adds	r7, #16
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}

0800c40a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c40a:	b580      	push	{r7, lr}
 800c40c:	b084      	sub	sp, #16
 800c40e:	af00      	add	r7, sp, #0
 800c410:	6078      	str	r0, [r7, #4]
 800c412:	4608      	mov	r0, r1
 800c414:	4611      	mov	r1, r2
 800c416:	461a      	mov	r2, r3
 800c418:	4603      	mov	r3, r0
 800c41a:	70fb      	strb	r3, [r7, #3]
 800c41c:	460b      	mov	r3, r1
 800c41e:	70bb      	strb	r3, [r7, #2]
 800c420:	4613      	mov	r3, r2
 800c422:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c424:	2300      	movs	r3, #0
 800c426:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c428:	2300      	movs	r3, #0
 800c42a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 800c432:	78bb      	ldrb	r3, [r7, #2]
 800c434:	883a      	ldrh	r2, [r7, #0]
 800c436:	78f9      	ldrb	r1, [r7, #3]
 800c438:	f7f8 fe3a 	bl	80050b0 <HAL_PCD_EP_Open>
 800c43c:	4603      	mov	r3, r0
 800c43e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800c440:	7bfb      	ldrb	r3, [r7, #15]
 800c442:	4618      	mov	r0, r3
 800c444:	f000 f904 	bl	800c650 <USBD_Get_USB_Status>
 800c448:	4603      	mov	r3, r0
 800c44a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c44c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c44e:	4618      	mov	r0, r3
 800c450:	3710      	adds	r7, #16
 800c452:	46bd      	mov	sp, r7
 800c454:	bd80      	pop	{r7, pc}

0800c456 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c456:	b580      	push	{r7, lr}
 800c458:	b084      	sub	sp, #16
 800c45a:	af00      	add	r7, sp, #0
 800c45c:	6078      	str	r0, [r7, #4]
 800c45e:	460b      	mov	r3, r1
 800c460:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c462:	2300      	movs	r3, #0
 800c464:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c466:	2300      	movs	r3, #0
 800c468:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800c470:	78fa      	ldrb	r2, [r7, #3]
 800c472:	4611      	mov	r1, r2
 800c474:	4618      	mov	r0, r3
 800c476:	f7f8 fe85 	bl	8005184 <HAL_PCD_EP_Close>
 800c47a:	4603      	mov	r3, r0
 800c47c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800c47e:	7bfb      	ldrb	r3, [r7, #15]
 800c480:	4618      	mov	r0, r3
 800c482:	f000 f8e5 	bl	800c650 <USBD_Get_USB_Status>
 800c486:	4603      	mov	r3, r0
 800c488:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c48a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c48c:	4618      	mov	r0, r3
 800c48e:	3710      	adds	r7, #16
 800c490:	46bd      	mov	sp, r7
 800c492:	bd80      	pop	{r7, pc}

0800c494 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b084      	sub	sp, #16
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
 800c49c:	460b      	mov	r3, r1
 800c49e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800c4ae:	78fa      	ldrb	r2, [r7, #3]
 800c4b0:	4611      	mov	r1, r2
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	f7f8 ff3d 	bl	8005332 <HAL_PCD_EP_SetStall>
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800c4bc:	7bfb      	ldrb	r3, [r7, #15]
 800c4be:	4618      	mov	r0, r3
 800c4c0:	f000 f8c6 	bl	800c650 <USBD_Get_USB_Status>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c4c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	3710      	adds	r7, #16
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}

0800c4d2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c4d2:	b580      	push	{r7, lr}
 800c4d4:	b084      	sub	sp, #16
 800c4d6:	af00      	add	r7, sp, #0
 800c4d8:	6078      	str	r0, [r7, #4]
 800c4da:	460b      	mov	r3, r1
 800c4dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4de:	2300      	movs	r3, #0
 800c4e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800c4ec:	78fa      	ldrb	r2, [r7, #3]
 800c4ee:	4611      	mov	r1, r2
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	f7f8 ff81 	bl	80053f8 <HAL_PCD_EP_ClrStall>
 800c4f6:	4603      	mov	r3, r0
 800c4f8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800c4fa:	7bfb      	ldrb	r3, [r7, #15]
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	f000 f8a7 	bl	800c650 <USBD_Get_USB_Status>
 800c502:	4603      	mov	r3, r0
 800c504:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c506:	7bbb      	ldrb	r3, [r7, #14]
}
 800c508:	4618      	mov	r0, r3
 800c50a:	3710      	adds	r7, #16
 800c50c:	46bd      	mov	sp, r7
 800c50e:	bd80      	pop	{r7, pc}

0800c510 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c510:	b480      	push	{r7}
 800c512:	b085      	sub	sp, #20
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
 800c518:	460b      	mov	r3, r1
 800c51a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800c522:	60fb      	str	r3, [r7, #12]

  if ((ep_addr & 0x80) == 0x80)
 800c524:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	da0b      	bge.n	800c544 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c52c:	78fb      	ldrb	r3, [r7, #3]
 800c52e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c532:	68f9      	ldr	r1, [r7, #12]
 800c534:	4613      	mov	r3, r2
 800c536:	00db      	lsls	r3, r3, #3
 800c538:	4413      	add	r3, r2
 800c53a:	009b      	lsls	r3, r3, #2
 800c53c:	440b      	add	r3, r1
 800c53e:	3316      	adds	r3, #22
 800c540:	781b      	ldrb	r3, [r3, #0]
 800c542:	e00b      	b.n	800c55c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c544:	78fb      	ldrb	r3, [r7, #3]
 800c546:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c54a:	68f9      	ldr	r1, [r7, #12]
 800c54c:	4613      	mov	r3, r2
 800c54e:	00db      	lsls	r3, r3, #3
 800c550:	4413      	add	r3, r2
 800c552:	009b      	lsls	r3, r3, #2
 800c554:	440b      	add	r3, r1
 800c556:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800c55a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c55c:	4618      	mov	r0, r3
 800c55e:	3714      	adds	r7, #20
 800c560:	46bd      	mov	sp, r7
 800c562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c566:	4770      	bx	lr

0800c568 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b084      	sub	sp, #16
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
 800c570:	460b      	mov	r3, r1
 800c572:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c574:	2300      	movs	r3, #0
 800c576:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c578:	2300      	movs	r3, #0
 800c57a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800c582:	78fa      	ldrb	r2, [r7, #3]
 800c584:	4611      	mov	r1, r2
 800c586:	4618      	mov	r0, r3
 800c588:	f7f8 fd6e 	bl	8005068 <HAL_PCD_SetAddress>
 800c58c:	4603      	mov	r3, r0
 800c58e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800c590:	7bfb      	ldrb	r3, [r7, #15]
 800c592:	4618      	mov	r0, r3
 800c594:	f000 f85c 	bl	800c650 <USBD_Get_USB_Status>
 800c598:	4603      	mov	r3, r0
 800c59a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c59c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	3710      	adds	r7, #16
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}

0800c5a6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c5a6:	b580      	push	{r7, lr}
 800c5a8:	b086      	sub	sp, #24
 800c5aa:	af00      	add	r7, sp, #0
 800c5ac:	60f8      	str	r0, [r7, #12]
 800c5ae:	607a      	str	r2, [r7, #4]
 800c5b0:	603b      	str	r3, [r7, #0]
 800c5b2:	460b      	mov	r3, r1
 800c5b4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 800c5c4:	7af9      	ldrb	r1, [r7, #11]
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	687a      	ldr	r2, [r7, #4]
 800c5ca:	f7f8 fe78 	bl	80052be <HAL_PCD_EP_Transmit>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 800c5d2:	7dfb      	ldrb	r3, [r7, #23]
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	f000 f83b 	bl	800c650 <USBD_Get_USB_Status>
 800c5da:	4603      	mov	r3, r0
 800c5dc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c5de:	7dbb      	ldrb	r3, [r7, #22]
}
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	3718      	adds	r7, #24
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	bd80      	pop	{r7, pc}

0800c5e8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b086      	sub	sp, #24
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	60f8      	str	r0, [r7, #12]
 800c5f0:	607a      	str	r2, [r7, #4]
 800c5f2:	603b      	str	r3, [r7, #0]
 800c5f4:	460b      	mov	r3, r1
 800c5f6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 800c606:	7af9      	ldrb	r1, [r7, #11]
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	687a      	ldr	r2, [r7, #4]
 800c60c:	f7f8 fe04 	bl	8005218 <HAL_PCD_EP_Receive>
 800c610:	4603      	mov	r3, r0
 800c612:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 800c614:	7dfb      	ldrb	r3, [r7, #23]
 800c616:	4618      	mov	r0, r3
 800c618:	f000 f81a 	bl	800c650 <USBD_Get_USB_Status>
 800c61c:	4603      	mov	r3, r0
 800c61e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c620:	7dbb      	ldrb	r3, [r7, #22]
}
 800c622:	4618      	mov	r0, r3
 800c624:	3718      	adds	r7, #24
 800c626:	46bd      	mov	sp, r7
 800c628:	bd80      	pop	{r7, pc}

0800c62a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c62a:	b580      	push	{r7, lr}
 800c62c:	b082      	sub	sp, #8
 800c62e:	af00      	add	r7, sp, #0
 800c630:	6078      	str	r0, [r7, #4]
 800c632:	460b      	mov	r3, r1
 800c634:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef *)pdev->pData, ep_addr);
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800c63c:	78fa      	ldrb	r2, [r7, #3]
 800c63e:	4611      	mov	r1, r2
 800c640:	4618      	mov	r0, r3
 800c642:	f7f8 fe24 	bl	800528e <HAL_PCD_EP_GetRxCount>
 800c646:	4603      	mov	r3, r0
}
 800c648:	4618      	mov	r0, r3
 800c64a:	3708      	adds	r7, #8
 800c64c:	46bd      	mov	sp, r7
 800c64e:	bd80      	pop	{r7, pc}

0800c650 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c650:	b480      	push	{r7}
 800c652:	b085      	sub	sp, #20
 800c654:	af00      	add	r7, sp, #0
 800c656:	4603      	mov	r3, r0
 800c658:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c65a:	2300      	movs	r3, #0
 800c65c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c65e:	79fb      	ldrb	r3, [r7, #7]
 800c660:	2b03      	cmp	r3, #3
 800c662:	d817      	bhi.n	800c694 <USBD_Get_USB_Status+0x44>
 800c664:	a201      	add	r2, pc, #4	@ (adr r2, 800c66c <USBD_Get_USB_Status+0x1c>)
 800c666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c66a:	bf00      	nop
 800c66c:	0800c67d 	.word	0x0800c67d
 800c670:	0800c683 	.word	0x0800c683
 800c674:	0800c689 	.word	0x0800c689
 800c678:	0800c68f 	.word	0x0800c68f
  {
  case HAL_OK:
    usb_status = USBD_OK;
 800c67c:	2300      	movs	r3, #0
 800c67e:	73fb      	strb	r3, [r7, #15]
    break;
 800c680:	e00b      	b.n	800c69a <USBD_Get_USB_Status+0x4a>
  case HAL_ERROR:
    usb_status = USBD_FAIL;
 800c682:	2303      	movs	r3, #3
 800c684:	73fb      	strb	r3, [r7, #15]
    break;
 800c686:	e008      	b.n	800c69a <USBD_Get_USB_Status+0x4a>
  case HAL_BUSY:
    usb_status = USBD_BUSY;
 800c688:	2301      	movs	r3, #1
 800c68a:	73fb      	strb	r3, [r7, #15]
    break;
 800c68c:	e005      	b.n	800c69a <USBD_Get_USB_Status+0x4a>
  case HAL_TIMEOUT:
    usb_status = USBD_FAIL;
 800c68e:	2303      	movs	r3, #3
 800c690:	73fb      	strb	r3, [r7, #15]
    break;
 800c692:	e002      	b.n	800c69a <USBD_Get_USB_Status+0x4a>
  default:
    usb_status = USBD_FAIL;
 800c694:	2303      	movs	r3, #3
 800c696:	73fb      	strb	r3, [r7, #15]
    break;
 800c698:	bf00      	nop
  }
  return usb_status;
 800c69a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c69c:	4618      	mov	r0, r3
 800c69e:	3714      	adds	r7, #20
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a6:	4770      	bx	lr

0800c6a8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c6a8:	b480      	push	{r7}
 800c6aa:	b085      	sub	sp, #20
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	4603      	mov	r3, r0
 800c6b0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c6b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c6ba:	2b84      	cmp	r3, #132	@ 0x84
 800c6bc:	d005      	beq.n	800c6ca <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c6be:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	4413      	add	r3, r2
 800c6c6:	3303      	adds	r3, #3
 800c6c8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c6ca:	68fb      	ldr	r3, [r7, #12]
}
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	3714      	adds	r7, #20
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d6:	4770      	bx	lr

0800c6d8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800c6d8:	b480      	push	{r7}
 800c6da:	b083      	sub	sp, #12
 800c6dc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c6de:	f3ef 8305 	mrs	r3, IPSR
 800c6e2:	607b      	str	r3, [r7, #4]
  return(result);
 800c6e4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	bf14      	ite	ne
 800c6ea:	2301      	movne	r3, #1
 800c6ec:	2300      	moveq	r3, #0
 800c6ee:	b2db      	uxtb	r3, r3
}
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	370c      	adds	r7, #12
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fa:	4770      	bx	lr

0800c6fc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c700:	f001 f942 	bl	800d988 <vTaskStartScheduler>
  
  return osOK;
 800c704:	2300      	movs	r3, #0
}
 800c706:	4618      	mov	r0, r3
 800c708:	bd80      	pop	{r7, pc}

0800c70a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c70a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c70c:	b089      	sub	sp, #36	@ 0x24
 800c70e:	af04      	add	r7, sp, #16
 800c710:	6078      	str	r0, [r7, #4]
 800c712:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	695b      	ldr	r3, [r3, #20]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d020      	beq.n	800c75e <osThreadCreate+0x54>
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	699b      	ldr	r3, [r3, #24]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d01c      	beq.n	800c75e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	685c      	ldr	r4, [r3, #4]
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	691e      	ldr	r6, [r3, #16]
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c736:	4618      	mov	r0, r3
 800c738:	f7ff ffb6 	bl	800c6a8 <makeFreeRtosPriority>
 800c73c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	695b      	ldr	r3, [r3, #20]
 800c742:	687a      	ldr	r2, [r7, #4]
 800c744:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c746:	9202      	str	r2, [sp, #8]
 800c748:	9301      	str	r3, [sp, #4]
 800c74a:	9100      	str	r1, [sp, #0]
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	4632      	mov	r2, r6
 800c750:	4629      	mov	r1, r5
 800c752:	4620      	mov	r0, r4
 800c754:	f000 ff32 	bl	800d5bc <xTaskCreateStatic>
 800c758:	4603      	mov	r3, r0
 800c75a:	60fb      	str	r3, [r7, #12]
 800c75c:	e01c      	b.n	800c798 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	685c      	ldr	r4, [r3, #4]
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c76a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c772:	4618      	mov	r0, r3
 800c774:	f7ff ff98 	bl	800c6a8 <makeFreeRtosPriority>
 800c778:	4602      	mov	r2, r0
 800c77a:	f107 030c 	add.w	r3, r7, #12
 800c77e:	9301      	str	r3, [sp, #4]
 800c780:	9200      	str	r2, [sp, #0]
 800c782:	683b      	ldr	r3, [r7, #0]
 800c784:	4632      	mov	r2, r6
 800c786:	4629      	mov	r1, r5
 800c788:	4620      	mov	r0, r4
 800c78a:	f000 ff77 	bl	800d67c <xTaskCreate>
 800c78e:	4603      	mov	r3, r0
 800c790:	2b01      	cmp	r3, #1
 800c792:	d001      	beq.n	800c798 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c794:	2300      	movs	r3, #0
 800c796:	e000      	b.n	800c79a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c798:	68fb      	ldr	r3, [r7, #12]
}
 800c79a:	4618      	mov	r0, r3
 800c79c:	3714      	adds	r7, #20
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c7a2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c7a2:	b580      	push	{r7, lr}
 800c7a4:	b084      	sub	sp, #16
 800c7a6:	af00      	add	r7, sp, #0
 800c7a8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d001      	beq.n	800c7b8 <osDelay+0x16>
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	e000      	b.n	800c7ba <osDelay+0x18>
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	f001 f8ae 	bl	800d91c <vTaskDelay>
  
  return osOK;
 800c7c0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	3710      	adds	r7, #16
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	bd80      	pop	{r7, pc}

0800c7ca <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800c7ca:	b580      	push	{r7, lr}
 800c7cc:	b086      	sub	sp, #24
 800c7ce:	af02      	add	r7, sp, #8
 800c7d0:	6078      	str	r0, [r7, #4]
 800c7d2:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	685b      	ldr	r3, [r3, #4]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d00f      	beq.n	800c7fc <osSemaphoreCreate+0x32>
    if (count == 1) {
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	2b01      	cmp	r3, #1
 800c7e0:	d10a      	bne.n	800c7f8 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	685b      	ldr	r3, [r3, #4]
 800c7e6:	2203      	movs	r2, #3
 800c7e8:	9200      	str	r2, [sp, #0]
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	2100      	movs	r1, #0
 800c7ee:	2001      	movs	r0, #1
 800c7f0:	f000 f9c0 	bl	800cb74 <xQueueGenericCreateStatic>
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	e016      	b.n	800c826 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	e014      	b.n	800c826 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	2b01      	cmp	r3, #1
 800c800:	d110      	bne.n	800c824 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800c802:	2203      	movs	r2, #3
 800c804:	2100      	movs	r1, #0
 800c806:	2001      	movs	r0, #1
 800c808:	f000 fa31 	bl	800cc6e <xQueueGenericCreate>
 800c80c:	60f8      	str	r0, [r7, #12]
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d005      	beq.n	800c820 <osSemaphoreCreate+0x56>
 800c814:	2300      	movs	r3, #0
 800c816:	2200      	movs	r2, #0
 800c818:	2100      	movs	r1, #0
 800c81a:	68f8      	ldr	r0, [r7, #12]
 800c81c:	f000 fa82 	bl	800cd24 <xQueueGenericSend>
      return sema;
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	e000      	b.n	800c826 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800c824:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800c826:	4618      	mov	r0, r3
 800c828:	3710      	adds	r7, #16
 800c82a:	46bd      	mov	sp, r7
 800c82c:	bd80      	pop	{r7, pc}
	...

0800c830 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b084      	sub	sp, #16
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
 800c838:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800c83a:	2300      	movs	r3, #0
 800c83c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d101      	bne.n	800c848 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800c844:	2380      	movs	r3, #128	@ 0x80
 800c846:	e03a      	b.n	800c8be <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800c848:	2300      	movs	r3, #0
 800c84a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c852:	d103      	bne.n	800c85c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800c854:	f04f 33ff 	mov.w	r3, #4294967295
 800c858:	60fb      	str	r3, [r7, #12]
 800c85a:	e009      	b.n	800c870 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d006      	beq.n	800c870 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d101      	bne.n	800c870 <osSemaphoreWait+0x40>
      ticks = 1;
 800c86c:	2301      	movs	r3, #1
 800c86e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800c870:	f7ff ff32 	bl	800c6d8 <inHandlerMode>
 800c874:	4603      	mov	r3, r0
 800c876:	2b00      	cmp	r3, #0
 800c878:	d017      	beq.n	800c8aa <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c87a:	f107 0308 	add.w	r3, r7, #8
 800c87e:	461a      	mov	r2, r3
 800c880:	2100      	movs	r1, #0
 800c882:	6878      	ldr	r0, [r7, #4]
 800c884:	f000 fcf0 	bl	800d268 <xQueueReceiveFromISR>
 800c888:	4603      	mov	r3, r0
 800c88a:	2b01      	cmp	r3, #1
 800c88c:	d001      	beq.n	800c892 <osSemaphoreWait+0x62>
      return osErrorOS;
 800c88e:	23ff      	movs	r3, #255	@ 0xff
 800c890:	e015      	b.n	800c8be <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800c892:	68bb      	ldr	r3, [r7, #8]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d011      	beq.n	800c8bc <osSemaphoreWait+0x8c>
 800c898:	4b0b      	ldr	r3, [pc, #44]	@ (800c8c8 <osSemaphoreWait+0x98>)
 800c89a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c89e:	601a      	str	r2, [r3, #0]
 800c8a0:	f3bf 8f4f 	dsb	sy
 800c8a4:	f3bf 8f6f 	isb	sy
 800c8a8:	e008      	b.n	800c8bc <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800c8aa:	68f9      	ldr	r1, [r7, #12]
 800c8ac:	6878      	ldr	r0, [r7, #4]
 800c8ae:	f000 fbcb 	bl	800d048 <xQueueSemaphoreTake>
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	2b01      	cmp	r3, #1
 800c8b6:	d001      	beq.n	800c8bc <osSemaphoreWait+0x8c>
    return osErrorOS;
 800c8b8:	23ff      	movs	r3, #255	@ 0xff
 800c8ba:	e000      	b.n	800c8be <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800c8bc:	2300      	movs	r3, #0
}
 800c8be:	4618      	mov	r0, r3
 800c8c0:	3710      	adds	r7, #16
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}
 800c8c6:	bf00      	nop
 800c8c8:	e000ed04 	.word	0xe000ed04

0800c8cc <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b084      	sub	sp, #16
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800c8d8:	2300      	movs	r3, #0
 800c8da:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800c8dc:	f7ff fefc 	bl	800c6d8 <inHandlerMode>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d016      	beq.n	800c914 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c8e6:	f107 0308 	add.w	r3, r7, #8
 800c8ea:	4619      	mov	r1, r3
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	f000 fb1b 	bl	800cf28 <xQueueGiveFromISR>
 800c8f2:	4603      	mov	r3, r0
 800c8f4:	2b01      	cmp	r3, #1
 800c8f6:	d001      	beq.n	800c8fc <osSemaphoreRelease+0x30>
      return osErrorOS;
 800c8f8:	23ff      	movs	r3, #255	@ 0xff
 800c8fa:	e017      	b.n	800c92c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c8fc:	68bb      	ldr	r3, [r7, #8]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d013      	beq.n	800c92a <osSemaphoreRelease+0x5e>
 800c902:	4b0c      	ldr	r3, [pc, #48]	@ (800c934 <osSemaphoreRelease+0x68>)
 800c904:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c908:	601a      	str	r2, [r3, #0]
 800c90a:	f3bf 8f4f 	dsb	sy
 800c90e:	f3bf 8f6f 	isb	sy
 800c912:	e00a      	b.n	800c92a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800c914:	2300      	movs	r3, #0
 800c916:	2200      	movs	r2, #0
 800c918:	2100      	movs	r1, #0
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	f000 fa02 	bl	800cd24 <xQueueGenericSend>
 800c920:	4603      	mov	r3, r0
 800c922:	2b01      	cmp	r3, #1
 800c924:	d001      	beq.n	800c92a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800c926:	23ff      	movs	r3, #255	@ 0xff
 800c928:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800c92a:	68fb      	ldr	r3, [r7, #12]
}
 800c92c:	4618      	mov	r0, r3
 800c92e:	3710      	adds	r7, #16
 800c930:	46bd      	mov	sp, r7
 800c932:	bd80      	pop	{r7, pc}
 800c934:	e000ed04 	.word	0xe000ed04

0800c938 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c938:	b480      	push	{r7}
 800c93a:	b083      	sub	sp, #12
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	f103 0208 	add.w	r2, r3, #8
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	f04f 32ff 	mov.w	r2, #4294967295
 800c950:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	f103 0208 	add.w	r2, r3, #8
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	f103 0208 	add.w	r2, r3, #8
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	2200      	movs	r2, #0
 800c96a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c96c:	bf00      	nop
 800c96e:	370c      	adds	r7, #12
 800c970:	46bd      	mov	sp, r7
 800c972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c976:	4770      	bx	lr

0800c978 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c978:	b480      	push	{r7}
 800c97a:	b083      	sub	sp, #12
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2200      	movs	r2, #0
 800c984:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c986:	bf00      	nop
 800c988:	370c      	adds	r7, #12
 800c98a:	46bd      	mov	sp, r7
 800c98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c990:	4770      	bx	lr

0800c992 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c992:	b480      	push	{r7}
 800c994:	b085      	sub	sp, #20
 800c996:	af00      	add	r7, sp, #0
 800c998:	6078      	str	r0, [r7, #4]
 800c99a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	685b      	ldr	r3, [r3, #4]
 800c9a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	68fa      	ldr	r2, [r7, #12]
 800c9a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	689a      	ldr	r2, [r3, #8]
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	689b      	ldr	r3, [r3, #8]
 800c9b4:	683a      	ldr	r2, [r7, #0]
 800c9b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	683a      	ldr	r2, [r7, #0]
 800c9bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c9be:	683b      	ldr	r3, [r7, #0]
 800c9c0:	687a      	ldr	r2, [r7, #4]
 800c9c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	1c5a      	adds	r2, r3, #1
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	601a      	str	r2, [r3, #0]
}
 800c9ce:	bf00      	nop
 800c9d0:	3714      	adds	r7, #20
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d8:	4770      	bx	lr

0800c9da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c9da:	b480      	push	{r7}
 800c9dc:	b085      	sub	sp, #20
 800c9de:	af00      	add	r7, sp, #0
 800c9e0:	6078      	str	r0, [r7, #4]
 800c9e2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c9e4:	683b      	ldr	r3, [r7, #0]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c9ea:	68bb      	ldr	r3, [r7, #8]
 800c9ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9f0:	d103      	bne.n	800c9fa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	691b      	ldr	r3, [r3, #16]
 800c9f6:	60fb      	str	r3, [r7, #12]
 800c9f8:	e00c      	b.n	800ca14 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	3308      	adds	r3, #8
 800c9fe:	60fb      	str	r3, [r7, #12]
 800ca00:	e002      	b.n	800ca08 <vListInsert+0x2e>
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	685b      	ldr	r3, [r3, #4]
 800ca06:	60fb      	str	r3, [r7, #12]
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	685b      	ldr	r3, [r3, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	68ba      	ldr	r2, [r7, #8]
 800ca10:	429a      	cmp	r2, r3
 800ca12:	d2f6      	bcs.n	800ca02 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	685a      	ldr	r2, [r3, #4]
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ca1c:	683b      	ldr	r3, [r7, #0]
 800ca1e:	685b      	ldr	r3, [r3, #4]
 800ca20:	683a      	ldr	r2, [r7, #0]
 800ca22:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	68fa      	ldr	r2, [r7, #12]
 800ca28:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	683a      	ldr	r2, [r7, #0]
 800ca2e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	687a      	ldr	r2, [r7, #4]
 800ca34:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	1c5a      	adds	r2, r3, #1
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	601a      	str	r2, [r3, #0]
}
 800ca40:	bf00      	nop
 800ca42:	3714      	adds	r7, #20
 800ca44:	46bd      	mov	sp, r7
 800ca46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4a:	4770      	bx	lr

0800ca4c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ca4c:	b480      	push	{r7}
 800ca4e:	b085      	sub	sp, #20
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	691b      	ldr	r3, [r3, #16]
 800ca58:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	685b      	ldr	r3, [r3, #4]
 800ca5e:	687a      	ldr	r2, [r7, #4]
 800ca60:	6892      	ldr	r2, [r2, #8]
 800ca62:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	689b      	ldr	r3, [r3, #8]
 800ca68:	687a      	ldr	r2, [r7, #4]
 800ca6a:	6852      	ldr	r2, [r2, #4]
 800ca6c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	685b      	ldr	r3, [r3, #4]
 800ca72:	687a      	ldr	r2, [r7, #4]
 800ca74:	429a      	cmp	r2, r3
 800ca76:	d103      	bne.n	800ca80 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	689a      	ldr	r2, [r3, #8]
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	2200      	movs	r2, #0
 800ca84:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	1e5a      	subs	r2, r3, #1
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	681b      	ldr	r3, [r3, #0]
}
 800ca94:	4618      	mov	r0, r3
 800ca96:	3714      	adds	r7, #20
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9e:	4770      	bx	lr

0800caa0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b084      	sub	sp, #16
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
 800caa8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d10b      	bne.n	800cacc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cab8:	f383 8811 	msr	BASEPRI, r3
 800cabc:	f3bf 8f6f 	isb	sy
 800cac0:	f3bf 8f4f 	dsb	sy
 800cac4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800cac6:	bf00      	nop
 800cac8:	bf00      	nop
 800caca:	e7fd      	b.n	800cac8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cacc:	f001 fed4 	bl	800e878 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	681a      	ldr	r2, [r3, #0]
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cad8:	68f9      	ldr	r1, [r7, #12]
 800cada:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800cadc:	fb01 f303 	mul.w	r3, r1, r3
 800cae0:	441a      	add	r2, r3
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	2200      	movs	r2, #0
 800caea:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	681a      	ldr	r2, [r3, #0]
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	681a      	ldr	r2, [r3, #0]
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cafc:	3b01      	subs	r3, #1
 800cafe:	68f9      	ldr	r1, [r7, #12]
 800cb00:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800cb02:	fb01 f303 	mul.w	r3, r1, r3
 800cb06:	441a      	add	r2, r3
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	22ff      	movs	r2, #255	@ 0xff
 800cb10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	22ff      	movs	r2, #255	@ 0xff
 800cb18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d114      	bne.n	800cb4c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	691b      	ldr	r3, [r3, #16]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d01a      	beq.n	800cb60 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	3310      	adds	r3, #16
 800cb2e:	4618      	mov	r0, r3
 800cb30:	f001 f984 	bl	800de3c <xTaskRemoveFromEventList>
 800cb34:	4603      	mov	r3, r0
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d012      	beq.n	800cb60 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cb3a:	4b0d      	ldr	r3, [pc, #52]	@ (800cb70 <xQueueGenericReset+0xd0>)
 800cb3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cb40:	601a      	str	r2, [r3, #0]
 800cb42:	f3bf 8f4f 	dsb	sy
 800cb46:	f3bf 8f6f 	isb	sy
 800cb4a:	e009      	b.n	800cb60 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	3310      	adds	r3, #16
 800cb50:	4618      	mov	r0, r3
 800cb52:	f7ff fef1 	bl	800c938 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	3324      	adds	r3, #36	@ 0x24
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	f7ff feec 	bl	800c938 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cb60:	f001 febc 	bl	800e8dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cb64:	2301      	movs	r3, #1
}
 800cb66:	4618      	mov	r0, r3
 800cb68:	3710      	adds	r7, #16
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	bd80      	pop	{r7, pc}
 800cb6e:	bf00      	nop
 800cb70:	e000ed04 	.word	0xe000ed04

0800cb74 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b08e      	sub	sp, #56	@ 0x38
 800cb78:	af02      	add	r7, sp, #8
 800cb7a:	60f8      	str	r0, [r7, #12]
 800cb7c:	60b9      	str	r1, [r7, #8]
 800cb7e:	607a      	str	r2, [r7, #4]
 800cb80:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d10b      	bne.n	800cba0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800cb88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb8c:	f383 8811 	msr	BASEPRI, r3
 800cb90:	f3bf 8f6f 	isb	sy
 800cb94:	f3bf 8f4f 	dsb	sy
 800cb98:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cb9a:	bf00      	nop
 800cb9c:	bf00      	nop
 800cb9e:	e7fd      	b.n	800cb9c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d10b      	bne.n	800cbbe <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800cba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbaa:	f383 8811 	msr	BASEPRI, r3
 800cbae:	f3bf 8f6f 	isb	sy
 800cbb2:	f3bf 8f4f 	dsb	sy
 800cbb6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cbb8:	bf00      	nop
 800cbba:	bf00      	nop
 800cbbc:	e7fd      	b.n	800cbba <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d002      	beq.n	800cbca <xQueueGenericCreateStatic+0x56>
 800cbc4:	68bb      	ldr	r3, [r7, #8]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d001      	beq.n	800cbce <xQueueGenericCreateStatic+0x5a>
 800cbca:	2301      	movs	r3, #1
 800cbcc:	e000      	b.n	800cbd0 <xQueueGenericCreateStatic+0x5c>
 800cbce:	2300      	movs	r3, #0
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d10b      	bne.n	800cbec <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800cbd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbd8:	f383 8811 	msr	BASEPRI, r3
 800cbdc:	f3bf 8f6f 	isb	sy
 800cbe0:	f3bf 8f4f 	dsb	sy
 800cbe4:	623b      	str	r3, [r7, #32]
}
 800cbe6:	bf00      	nop
 800cbe8:	bf00      	nop
 800cbea:	e7fd      	b.n	800cbe8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d102      	bne.n	800cbf8 <xQueueGenericCreateStatic+0x84>
 800cbf2:	68bb      	ldr	r3, [r7, #8]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d101      	bne.n	800cbfc <xQueueGenericCreateStatic+0x88>
 800cbf8:	2301      	movs	r3, #1
 800cbfa:	e000      	b.n	800cbfe <xQueueGenericCreateStatic+0x8a>
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d10b      	bne.n	800cc1a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800cc02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc06:	f383 8811 	msr	BASEPRI, r3
 800cc0a:	f3bf 8f6f 	isb	sy
 800cc0e:	f3bf 8f4f 	dsb	sy
 800cc12:	61fb      	str	r3, [r7, #28]
}
 800cc14:	bf00      	nop
 800cc16:	bf00      	nop
 800cc18:	e7fd      	b.n	800cc16 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cc1a:	2348      	movs	r3, #72	@ 0x48
 800cc1c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cc1e:	697b      	ldr	r3, [r7, #20]
 800cc20:	2b48      	cmp	r3, #72	@ 0x48
 800cc22:	d00b      	beq.n	800cc3c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800cc24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc28:	f383 8811 	msr	BASEPRI, r3
 800cc2c:	f3bf 8f6f 	isb	sy
 800cc30:	f3bf 8f4f 	dsb	sy
 800cc34:	61bb      	str	r3, [r7, #24]
}
 800cc36:	bf00      	nop
 800cc38:	bf00      	nop
 800cc3a:	e7fd      	b.n	800cc38 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cc3c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800cc42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d00d      	beq.n	800cc64 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cc48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc4a:	2201      	movs	r2, #1
 800cc4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cc50:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800cc54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc56:	9300      	str	r3, [sp, #0]
 800cc58:	4613      	mov	r3, r2
 800cc5a:	687a      	ldr	r2, [r7, #4]
 800cc5c:	68b9      	ldr	r1, [r7, #8]
 800cc5e:	68f8      	ldr	r0, [r7, #12]
 800cc60:	f000 f840 	bl	800cce4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cc64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800cc66:	4618      	mov	r0, r3
 800cc68:	3730      	adds	r7, #48	@ 0x30
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd80      	pop	{r7, pc}

0800cc6e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cc6e:	b580      	push	{r7, lr}
 800cc70:	b08a      	sub	sp, #40	@ 0x28
 800cc72:	af02      	add	r7, sp, #8
 800cc74:	60f8      	str	r0, [r7, #12]
 800cc76:	60b9      	str	r1, [r7, #8]
 800cc78:	4613      	mov	r3, r2
 800cc7a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d10b      	bne.n	800cc9a <xQueueGenericCreate+0x2c>
	__asm volatile
 800cc82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc86:	f383 8811 	msr	BASEPRI, r3
 800cc8a:	f3bf 8f6f 	isb	sy
 800cc8e:	f3bf 8f4f 	dsb	sy
 800cc92:	613b      	str	r3, [r7, #16]
}
 800cc94:	bf00      	nop
 800cc96:	bf00      	nop
 800cc98:	e7fd      	b.n	800cc96 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	68ba      	ldr	r2, [r7, #8]
 800cc9e:	fb02 f303 	mul.w	r3, r2, r3
 800cca2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cca4:	69fb      	ldr	r3, [r7, #28]
 800cca6:	3348      	adds	r3, #72	@ 0x48
 800cca8:	4618      	mov	r0, r3
 800ccaa:	f001 ff07 	bl	800eabc <pvPortMalloc>
 800ccae:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ccb0:	69bb      	ldr	r3, [r7, #24]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d011      	beq.n	800ccda <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ccb6:	69bb      	ldr	r3, [r7, #24]
 800ccb8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ccba:	697b      	ldr	r3, [r7, #20]
 800ccbc:	3348      	adds	r3, #72	@ 0x48
 800ccbe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ccc0:	69bb      	ldr	r3, [r7, #24]
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ccc8:	79fa      	ldrb	r2, [r7, #7]
 800ccca:	69bb      	ldr	r3, [r7, #24]
 800cccc:	9300      	str	r3, [sp, #0]
 800ccce:	4613      	mov	r3, r2
 800ccd0:	697a      	ldr	r2, [r7, #20]
 800ccd2:	68b9      	ldr	r1, [r7, #8]
 800ccd4:	68f8      	ldr	r0, [r7, #12]
 800ccd6:	f000 f805 	bl	800cce4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ccda:	69bb      	ldr	r3, [r7, #24]
	}
 800ccdc:	4618      	mov	r0, r3
 800ccde:	3720      	adds	r7, #32
 800cce0:	46bd      	mov	sp, r7
 800cce2:	bd80      	pop	{r7, pc}

0800cce4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b084      	sub	sp, #16
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	60f8      	str	r0, [r7, #12]
 800ccec:	60b9      	str	r1, [r7, #8]
 800ccee:	607a      	str	r2, [r7, #4]
 800ccf0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ccf2:	68bb      	ldr	r3, [r7, #8]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d103      	bne.n	800cd00 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ccf8:	69bb      	ldr	r3, [r7, #24]
 800ccfa:	69ba      	ldr	r2, [r7, #24]
 800ccfc:	601a      	str	r2, [r3, #0]
 800ccfe:	e002      	b.n	800cd06 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cd00:	69bb      	ldr	r3, [r7, #24]
 800cd02:	687a      	ldr	r2, [r7, #4]
 800cd04:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cd06:	69bb      	ldr	r3, [r7, #24]
 800cd08:	68fa      	ldr	r2, [r7, #12]
 800cd0a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cd0c:	69bb      	ldr	r3, [r7, #24]
 800cd0e:	68ba      	ldr	r2, [r7, #8]
 800cd10:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cd12:	2101      	movs	r1, #1
 800cd14:	69b8      	ldr	r0, [r7, #24]
 800cd16:	f7ff fec3 	bl	800caa0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cd1a:	bf00      	nop
 800cd1c:	3710      	adds	r7, #16
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	bd80      	pop	{r7, pc}
	...

0800cd24 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b08e      	sub	sp, #56	@ 0x38
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	60f8      	str	r0, [r7, #12]
 800cd2c:	60b9      	str	r1, [r7, #8]
 800cd2e:	607a      	str	r2, [r7, #4]
 800cd30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cd32:	2300      	movs	r3, #0
 800cd34:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800cd3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d10b      	bne.n	800cd58 <xQueueGenericSend+0x34>
	__asm volatile
 800cd40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd44:	f383 8811 	msr	BASEPRI, r3
 800cd48:	f3bf 8f6f 	isb	sy
 800cd4c:	f3bf 8f4f 	dsb	sy
 800cd50:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cd52:	bf00      	nop
 800cd54:	bf00      	nop
 800cd56:	e7fd      	b.n	800cd54 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd58:	68bb      	ldr	r3, [r7, #8]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d103      	bne.n	800cd66 <xQueueGenericSend+0x42>
 800cd5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d101      	bne.n	800cd6a <xQueueGenericSend+0x46>
 800cd66:	2301      	movs	r3, #1
 800cd68:	e000      	b.n	800cd6c <xQueueGenericSend+0x48>
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d10b      	bne.n	800cd88 <xQueueGenericSend+0x64>
	__asm volatile
 800cd70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd74:	f383 8811 	msr	BASEPRI, r3
 800cd78:	f3bf 8f6f 	isb	sy
 800cd7c:	f3bf 8f4f 	dsb	sy
 800cd80:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cd82:	bf00      	nop
 800cd84:	bf00      	nop
 800cd86:	e7fd      	b.n	800cd84 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cd88:	683b      	ldr	r3, [r7, #0]
 800cd8a:	2b02      	cmp	r3, #2
 800cd8c:	d103      	bne.n	800cd96 <xQueueGenericSend+0x72>
 800cd8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd92:	2b01      	cmp	r3, #1
 800cd94:	d101      	bne.n	800cd9a <xQueueGenericSend+0x76>
 800cd96:	2301      	movs	r3, #1
 800cd98:	e000      	b.n	800cd9c <xQueueGenericSend+0x78>
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d10b      	bne.n	800cdb8 <xQueueGenericSend+0x94>
	__asm volatile
 800cda0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cda4:	f383 8811 	msr	BASEPRI, r3
 800cda8:	f3bf 8f6f 	isb	sy
 800cdac:	f3bf 8f4f 	dsb	sy
 800cdb0:	623b      	str	r3, [r7, #32]
}
 800cdb2:	bf00      	nop
 800cdb4:	bf00      	nop
 800cdb6:	e7fd      	b.n	800cdb4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cdb8:	f001 fa06 	bl	800e1c8 <xTaskGetSchedulerState>
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d102      	bne.n	800cdc8 <xQueueGenericSend+0xa4>
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d101      	bne.n	800cdcc <xQueueGenericSend+0xa8>
 800cdc8:	2301      	movs	r3, #1
 800cdca:	e000      	b.n	800cdce <xQueueGenericSend+0xaa>
 800cdcc:	2300      	movs	r3, #0
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d10b      	bne.n	800cdea <xQueueGenericSend+0xc6>
	__asm volatile
 800cdd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdd6:	f383 8811 	msr	BASEPRI, r3
 800cdda:	f3bf 8f6f 	isb	sy
 800cdde:	f3bf 8f4f 	dsb	sy
 800cde2:	61fb      	str	r3, [r7, #28]
}
 800cde4:	bf00      	nop
 800cde6:	bf00      	nop
 800cde8:	e7fd      	b.n	800cde6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cdea:	f001 fd45 	bl	800e878 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cdee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdf0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cdf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cdf6:	429a      	cmp	r2, r3
 800cdf8:	d302      	bcc.n	800ce00 <xQueueGenericSend+0xdc>
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	2b02      	cmp	r3, #2
 800cdfe:	d129      	bne.n	800ce54 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ce00:	683a      	ldr	r2, [r7, #0]
 800ce02:	68b9      	ldr	r1, [r7, #8]
 800ce04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ce06:	f000 fac9 	bl	800d39c <prvCopyDataToQueue>
 800ce0a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ce0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d010      	beq.n	800ce36 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ce14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce16:	3324      	adds	r3, #36	@ 0x24
 800ce18:	4618      	mov	r0, r3
 800ce1a:	f001 f80f 	bl	800de3c <xTaskRemoveFromEventList>
 800ce1e:	4603      	mov	r3, r0
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d013      	beq.n	800ce4c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ce24:	4b3f      	ldr	r3, [pc, #252]	@ (800cf24 <xQueueGenericSend+0x200>)
 800ce26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ce2a:	601a      	str	r2, [r3, #0]
 800ce2c:	f3bf 8f4f 	dsb	sy
 800ce30:	f3bf 8f6f 	isb	sy
 800ce34:	e00a      	b.n	800ce4c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ce36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d007      	beq.n	800ce4c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ce3c:	4b39      	ldr	r3, [pc, #228]	@ (800cf24 <xQueueGenericSend+0x200>)
 800ce3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ce42:	601a      	str	r2, [r3, #0]
 800ce44:	f3bf 8f4f 	dsb	sy
 800ce48:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ce4c:	f001 fd46 	bl	800e8dc <vPortExitCritical>
				return pdPASS;
 800ce50:	2301      	movs	r3, #1
 800ce52:	e063      	b.n	800cf1c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d103      	bne.n	800ce62 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ce5a:	f001 fd3f 	bl	800e8dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ce5e:	2300      	movs	r3, #0
 800ce60:	e05c      	b.n	800cf1c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ce62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d106      	bne.n	800ce76 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ce68:	f107 0314 	add.w	r3, r7, #20
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	f001 f849 	bl	800df04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ce72:	2301      	movs	r3, #1
 800ce74:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ce76:	f001 fd31 	bl	800e8dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ce7a:	f000 fdef 	bl	800da5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ce7e:	f001 fcfb 	bl	800e878 <vPortEnterCritical>
 800ce82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ce88:	b25b      	sxtb	r3, r3
 800ce8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce8e:	d103      	bne.n	800ce98 <xQueueGenericSend+0x174>
 800ce90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce92:	2200      	movs	r2, #0
 800ce94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ce98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce9a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ce9e:	b25b      	sxtb	r3, r3
 800cea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cea4:	d103      	bne.n	800ceae <xQueueGenericSend+0x18a>
 800cea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cea8:	2200      	movs	r2, #0
 800ceaa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ceae:	f001 fd15 	bl	800e8dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ceb2:	1d3a      	adds	r2, r7, #4
 800ceb4:	f107 0314 	add.w	r3, r7, #20
 800ceb8:	4611      	mov	r1, r2
 800ceba:	4618      	mov	r0, r3
 800cebc:	f001 f838 	bl	800df30 <xTaskCheckForTimeOut>
 800cec0:	4603      	mov	r3, r0
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d124      	bne.n	800cf10 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cec6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cec8:	f000 fb60 	bl	800d58c <prvIsQueueFull>
 800cecc:	4603      	mov	r3, r0
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d018      	beq.n	800cf04 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ced2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ced4:	3310      	adds	r3, #16
 800ced6:	687a      	ldr	r2, [r7, #4]
 800ced8:	4611      	mov	r1, r2
 800ceda:	4618      	mov	r0, r3
 800cedc:	f000 ff88 	bl	800ddf0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cee0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cee2:	f000 faeb 	bl	800d4bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cee6:	f000 fdc7 	bl	800da78 <xTaskResumeAll>
 800ceea:	4603      	mov	r3, r0
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	f47f af7c 	bne.w	800cdea <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800cef2:	4b0c      	ldr	r3, [pc, #48]	@ (800cf24 <xQueueGenericSend+0x200>)
 800cef4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cef8:	601a      	str	r2, [r3, #0]
 800cefa:	f3bf 8f4f 	dsb	sy
 800cefe:	f3bf 8f6f 	isb	sy
 800cf02:	e772      	b.n	800cdea <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cf04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cf06:	f000 fad9 	bl	800d4bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cf0a:	f000 fdb5 	bl	800da78 <xTaskResumeAll>
 800cf0e:	e76c      	b.n	800cdea <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cf10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cf12:	f000 fad3 	bl	800d4bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cf16:	f000 fdaf 	bl	800da78 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cf1a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	3738      	adds	r7, #56	@ 0x38
 800cf20:	46bd      	mov	sp, r7
 800cf22:	bd80      	pop	{r7, pc}
 800cf24:	e000ed04 	.word	0xe000ed04

0800cf28 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b08e      	sub	sp, #56	@ 0x38
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
 800cf30:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800cf36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d10b      	bne.n	800cf54 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800cf3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf40:	f383 8811 	msr	BASEPRI, r3
 800cf44:	f3bf 8f6f 	isb	sy
 800cf48:	f3bf 8f4f 	dsb	sy
 800cf4c:	623b      	str	r3, [r7, #32]
}
 800cf4e:	bf00      	nop
 800cf50:	bf00      	nop
 800cf52:	e7fd      	b.n	800cf50 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cf54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d00b      	beq.n	800cf74 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800cf5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf60:	f383 8811 	msr	BASEPRI, r3
 800cf64:	f3bf 8f6f 	isb	sy
 800cf68:	f3bf 8f4f 	dsb	sy
 800cf6c:	61fb      	str	r3, [r7, #28]
}
 800cf6e:	bf00      	nop
 800cf70:	bf00      	nop
 800cf72:	e7fd      	b.n	800cf70 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800cf74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d103      	bne.n	800cf84 <xQueueGiveFromISR+0x5c>
 800cf7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf7e:	689b      	ldr	r3, [r3, #8]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d101      	bne.n	800cf88 <xQueueGiveFromISR+0x60>
 800cf84:	2301      	movs	r3, #1
 800cf86:	e000      	b.n	800cf8a <xQueueGiveFromISR+0x62>
 800cf88:	2300      	movs	r3, #0
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d10b      	bne.n	800cfa6 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800cf8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf92:	f383 8811 	msr	BASEPRI, r3
 800cf96:	f3bf 8f6f 	isb	sy
 800cf9a:	f3bf 8f4f 	dsb	sy
 800cf9e:	61bb      	str	r3, [r7, #24]
}
 800cfa0:	bf00      	nop
 800cfa2:	bf00      	nop
 800cfa4:	e7fd      	b.n	800cfa2 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cfa6:	f001 fd47 	bl	800ea38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cfaa:	f3ef 8211 	mrs	r2, BASEPRI
 800cfae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfb2:	f383 8811 	msr	BASEPRI, r3
 800cfb6:	f3bf 8f6f 	isb	sy
 800cfba:	f3bf 8f4f 	dsb	sy
 800cfbe:	617a      	str	r2, [r7, #20]
 800cfc0:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cfc2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cfc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cfc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfca:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800cfcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfd0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cfd2:	429a      	cmp	r2, r3
 800cfd4:	d22b      	bcs.n	800d02e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cfd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfd8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cfdc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cfe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfe2:	1c5a      	adds	r2, r3, #1
 800cfe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfe6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cfe8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800cfec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cff0:	d112      	bne.n	800d018 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d016      	beq.n	800d028 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cffc:	3324      	adds	r3, #36	@ 0x24
 800cffe:	4618      	mov	r0, r3
 800d000:	f000 ff1c 	bl	800de3c <xTaskRemoveFromEventList>
 800d004:	4603      	mov	r3, r0
 800d006:	2b00      	cmp	r3, #0
 800d008:	d00e      	beq.n	800d028 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d00b      	beq.n	800d028 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d010:	683b      	ldr	r3, [r7, #0]
 800d012:	2201      	movs	r2, #1
 800d014:	601a      	str	r2, [r3, #0]
 800d016:	e007      	b.n	800d028 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d018:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d01c:	3301      	adds	r3, #1
 800d01e:	b2db      	uxtb	r3, r3
 800d020:	b25a      	sxtb	r2, r3
 800d022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d024:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d028:	2301      	movs	r3, #1
 800d02a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d02c:	e001      	b.n	800d032 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d02e:	2300      	movs	r3, #0
 800d030:	637b      	str	r3, [r7, #52]	@ 0x34
 800d032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d034:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d03c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d03e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800d040:	4618      	mov	r0, r3
 800d042:	3738      	adds	r7, #56	@ 0x38
 800d044:	46bd      	mov	sp, r7
 800d046:	bd80      	pop	{r7, pc}

0800d048 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b08e      	sub	sp, #56	@ 0x38
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
 800d050:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d052:	2300      	movs	r3, #0
 800d054:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d05a:	2300      	movs	r3, #0
 800d05c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d05e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d060:	2b00      	cmp	r3, #0
 800d062:	d10b      	bne.n	800d07c <xQueueSemaphoreTake+0x34>
	__asm volatile
 800d064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d068:	f383 8811 	msr	BASEPRI, r3
 800d06c:	f3bf 8f6f 	isb	sy
 800d070:	f3bf 8f4f 	dsb	sy
 800d074:	623b      	str	r3, [r7, #32]
}
 800d076:	bf00      	nop
 800d078:	bf00      	nop
 800d07a:	e7fd      	b.n	800d078 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d07c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d07e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d080:	2b00      	cmp	r3, #0
 800d082:	d00b      	beq.n	800d09c <xQueueSemaphoreTake+0x54>
	__asm volatile
 800d084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d088:	f383 8811 	msr	BASEPRI, r3
 800d08c:	f3bf 8f6f 	isb	sy
 800d090:	f3bf 8f4f 	dsb	sy
 800d094:	61fb      	str	r3, [r7, #28]
}
 800d096:	bf00      	nop
 800d098:	bf00      	nop
 800d09a:	e7fd      	b.n	800d098 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d09c:	f001 f894 	bl	800e1c8 <xTaskGetSchedulerState>
 800d0a0:	4603      	mov	r3, r0
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d102      	bne.n	800d0ac <xQueueSemaphoreTake+0x64>
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d101      	bne.n	800d0b0 <xQueueSemaphoreTake+0x68>
 800d0ac:	2301      	movs	r3, #1
 800d0ae:	e000      	b.n	800d0b2 <xQueueSemaphoreTake+0x6a>
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d10b      	bne.n	800d0ce <xQueueSemaphoreTake+0x86>
	__asm volatile
 800d0b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0ba:	f383 8811 	msr	BASEPRI, r3
 800d0be:	f3bf 8f6f 	isb	sy
 800d0c2:	f3bf 8f4f 	dsb	sy
 800d0c6:	61bb      	str	r3, [r7, #24]
}
 800d0c8:	bf00      	nop
 800d0ca:	bf00      	nop
 800d0cc:	e7fd      	b.n	800d0ca <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d0ce:	f001 fbd3 	bl	800e878 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d0d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d0d6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d0d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d024      	beq.n	800d128 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d0de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0e0:	1e5a      	subs	r2, r3, #1
 800d0e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0e4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d0e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d104      	bne.n	800d0f8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d0ee:	f001 fa17 	bl	800e520 <pvTaskIncrementMutexHeldCount>
 800d0f2:	4602      	mov	r2, r0
 800d0f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0f6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d0f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0fa:	691b      	ldr	r3, [r3, #16]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d00f      	beq.n	800d120 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d102:	3310      	adds	r3, #16
 800d104:	4618      	mov	r0, r3
 800d106:	f000 fe99 	bl	800de3c <xTaskRemoveFromEventList>
 800d10a:	4603      	mov	r3, r0
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d007      	beq.n	800d120 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d110:	4b54      	ldr	r3, [pc, #336]	@ (800d264 <xQueueSemaphoreTake+0x21c>)
 800d112:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d116:	601a      	str	r2, [r3, #0]
 800d118:	f3bf 8f4f 	dsb	sy
 800d11c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d120:	f001 fbdc 	bl	800e8dc <vPortExitCritical>
				return pdPASS;
 800d124:	2301      	movs	r3, #1
 800d126:	e098      	b.n	800d25a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d128:	683b      	ldr	r3, [r7, #0]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d112      	bne.n	800d154 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d12e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d130:	2b00      	cmp	r3, #0
 800d132:	d00b      	beq.n	800d14c <xQueueSemaphoreTake+0x104>
	__asm volatile
 800d134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d138:	f383 8811 	msr	BASEPRI, r3
 800d13c:	f3bf 8f6f 	isb	sy
 800d140:	f3bf 8f4f 	dsb	sy
 800d144:	617b      	str	r3, [r7, #20]
}
 800d146:	bf00      	nop
 800d148:	bf00      	nop
 800d14a:	e7fd      	b.n	800d148 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d14c:	f001 fbc6 	bl	800e8dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d150:	2300      	movs	r3, #0
 800d152:	e082      	b.n	800d25a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d156:	2b00      	cmp	r3, #0
 800d158:	d106      	bne.n	800d168 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d15a:	f107 030c 	add.w	r3, r7, #12
 800d15e:	4618      	mov	r0, r3
 800d160:	f000 fed0 	bl	800df04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d164:	2301      	movs	r3, #1
 800d166:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d168:	f001 fbb8 	bl	800e8dc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d16c:	f000 fc76 	bl	800da5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d170:	f001 fb82 	bl	800e878 <vPortEnterCritical>
 800d174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d176:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d17a:	b25b      	sxtb	r3, r3
 800d17c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d180:	d103      	bne.n	800d18a <xQueueSemaphoreTake+0x142>
 800d182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d184:	2200      	movs	r2, #0
 800d186:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d18a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d18c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d190:	b25b      	sxtb	r3, r3
 800d192:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d196:	d103      	bne.n	800d1a0 <xQueueSemaphoreTake+0x158>
 800d198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d19a:	2200      	movs	r2, #0
 800d19c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d1a0:	f001 fb9c 	bl	800e8dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d1a4:	463a      	mov	r2, r7
 800d1a6:	f107 030c 	add.w	r3, r7, #12
 800d1aa:	4611      	mov	r1, r2
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	f000 febf 	bl	800df30 <xTaskCheckForTimeOut>
 800d1b2:	4603      	mov	r3, r0
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d132      	bne.n	800d21e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d1b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d1ba:	f000 f9d1 	bl	800d560 <prvIsQueueEmpty>
 800d1be:	4603      	mov	r3, r0
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d026      	beq.n	800d212 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d1c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d109      	bne.n	800d1e0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800d1cc:	f001 fb54 	bl	800e878 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d1d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1d2:	689b      	ldr	r3, [r3, #8]
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	f001 f815 	bl	800e204 <xTaskPriorityInherit>
 800d1da:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800d1dc:	f001 fb7e 	bl	800e8dc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d1e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1e2:	3324      	adds	r3, #36	@ 0x24
 800d1e4:	683a      	ldr	r2, [r7, #0]
 800d1e6:	4611      	mov	r1, r2
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	f000 fe01 	bl	800ddf0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d1ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d1f0:	f000 f964 	bl	800d4bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d1f4:	f000 fc40 	bl	800da78 <xTaskResumeAll>
 800d1f8:	4603      	mov	r3, r0
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	f47f af67 	bne.w	800d0ce <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800d200:	4b18      	ldr	r3, [pc, #96]	@ (800d264 <xQueueSemaphoreTake+0x21c>)
 800d202:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d206:	601a      	str	r2, [r3, #0]
 800d208:	f3bf 8f4f 	dsb	sy
 800d20c:	f3bf 8f6f 	isb	sy
 800d210:	e75d      	b.n	800d0ce <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d212:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d214:	f000 f952 	bl	800d4bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d218:	f000 fc2e 	bl	800da78 <xTaskResumeAll>
 800d21c:	e757      	b.n	800d0ce <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d21e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d220:	f000 f94c 	bl	800d4bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d224:	f000 fc28 	bl	800da78 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d228:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d22a:	f000 f999 	bl	800d560 <prvIsQueueEmpty>
 800d22e:	4603      	mov	r3, r0
 800d230:	2b00      	cmp	r3, #0
 800d232:	f43f af4c 	beq.w	800d0ce <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d00d      	beq.n	800d258 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800d23c:	f001 fb1c 	bl	800e878 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d240:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d242:	f000 f893 	bl	800d36c <prvGetDisinheritPriorityAfterTimeout>
 800d246:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d24a:	689b      	ldr	r3, [r3, #8]
 800d24c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d24e:	4618      	mov	r0, r3
 800d250:	f001 f8d6 	bl	800e400 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d254:	f001 fb42 	bl	800e8dc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d258:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d25a:	4618      	mov	r0, r3
 800d25c:	3738      	adds	r7, #56	@ 0x38
 800d25e:	46bd      	mov	sp, r7
 800d260:	bd80      	pop	{r7, pc}
 800d262:	bf00      	nop
 800d264:	e000ed04 	.word	0xe000ed04

0800d268 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b08e      	sub	sp, #56	@ 0x38
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	60f8      	str	r0, [r7, #12]
 800d270:	60b9      	str	r1, [r7, #8]
 800d272:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d10b      	bne.n	800d296 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800d27e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d282:	f383 8811 	msr	BASEPRI, r3
 800d286:	f3bf 8f6f 	isb	sy
 800d28a:	f3bf 8f4f 	dsb	sy
 800d28e:	623b      	str	r3, [r7, #32]
}
 800d290:	bf00      	nop
 800d292:	bf00      	nop
 800d294:	e7fd      	b.n	800d292 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d296:	68bb      	ldr	r3, [r7, #8]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d103      	bne.n	800d2a4 <xQueueReceiveFromISR+0x3c>
 800d29c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d29e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d101      	bne.n	800d2a8 <xQueueReceiveFromISR+0x40>
 800d2a4:	2301      	movs	r3, #1
 800d2a6:	e000      	b.n	800d2aa <xQueueReceiveFromISR+0x42>
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d10b      	bne.n	800d2c6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800d2ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2b2:	f383 8811 	msr	BASEPRI, r3
 800d2b6:	f3bf 8f6f 	isb	sy
 800d2ba:	f3bf 8f4f 	dsb	sy
 800d2be:	61fb      	str	r3, [r7, #28]
}
 800d2c0:	bf00      	nop
 800d2c2:	bf00      	nop
 800d2c4:	e7fd      	b.n	800d2c2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d2c6:	f001 fbb7 	bl	800ea38 <vPortValidateInterruptPriority>
	__asm volatile
 800d2ca:	f3ef 8211 	mrs	r2, BASEPRI
 800d2ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2d2:	f383 8811 	msr	BASEPRI, r3
 800d2d6:	f3bf 8f6f 	isb	sy
 800d2da:	f3bf 8f4f 	dsb	sy
 800d2de:	61ba      	str	r2, [r7, #24]
 800d2e0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d2e2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d2e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d2e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2ea:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d2ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d02f      	beq.n	800d352 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d2f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d2f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d2fc:	68b9      	ldr	r1, [r7, #8]
 800d2fe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d300:	f000 f8b6 	bl	800d470 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d306:	1e5a      	subs	r2, r3, #1
 800d308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d30a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d30c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d310:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d314:	d112      	bne.n	800d33c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d318:	691b      	ldr	r3, [r3, #16]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d016      	beq.n	800d34c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d31e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d320:	3310      	adds	r3, #16
 800d322:	4618      	mov	r0, r3
 800d324:	f000 fd8a 	bl	800de3c <xTaskRemoveFromEventList>
 800d328:	4603      	mov	r3, r0
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d00e      	beq.n	800d34c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d00b      	beq.n	800d34c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	2201      	movs	r2, #1
 800d338:	601a      	str	r2, [r3, #0]
 800d33a:	e007      	b.n	800d34c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d33c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d340:	3301      	adds	r3, #1
 800d342:	b2db      	uxtb	r3, r3
 800d344:	b25a      	sxtb	r2, r3
 800d346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d348:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800d34c:	2301      	movs	r3, #1
 800d34e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d350:	e001      	b.n	800d356 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800d352:	2300      	movs	r3, #0
 800d354:	637b      	str	r3, [r7, #52]	@ 0x34
 800d356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d358:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d35a:	693b      	ldr	r3, [r7, #16]
 800d35c:	f383 8811 	msr	BASEPRI, r3
}
 800d360:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800d364:	4618      	mov	r0, r3
 800d366:	3738      	adds	r7, #56	@ 0x38
 800d368:	46bd      	mov	sp, r7
 800d36a:	bd80      	pop	{r7, pc}

0800d36c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d36c:	b480      	push	{r7}
 800d36e:	b085      	sub	sp, #20
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d006      	beq.n	800d38a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	f1c3 0307 	rsb	r3, r3, #7
 800d386:	60fb      	str	r3, [r7, #12]
 800d388:	e001      	b.n	800d38e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d38a:	2300      	movs	r3, #0
 800d38c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d38e:	68fb      	ldr	r3, [r7, #12]
	}
 800d390:	4618      	mov	r0, r3
 800d392:	3714      	adds	r7, #20
 800d394:	46bd      	mov	sp, r7
 800d396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39a:	4770      	bx	lr

0800d39c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b086      	sub	sp, #24
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	60f8      	str	r0, [r7, #12]
 800d3a4:	60b9      	str	r1, [r7, #8]
 800d3a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3b0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d10d      	bne.n	800d3d6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d14d      	bne.n	800d45e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	689b      	ldr	r3, [r3, #8]
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	f000 ff92 	bl	800e2f0 <xTaskPriorityDisinherit>
 800d3cc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	2200      	movs	r2, #0
 800d3d2:	609a      	str	r2, [r3, #8]
 800d3d4:	e043      	b.n	800d45e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d119      	bne.n	800d410 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	6858      	ldr	r0, [r3, #4]
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3e4:	461a      	mov	r2, r3
 800d3e6:	68b9      	ldr	r1, [r7, #8]
 800d3e8:	f002 f951 	bl	800f68e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	685a      	ldr	r2, [r3, #4]
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3f4:	441a      	add	r2, r3
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	685a      	ldr	r2, [r3, #4]
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	689b      	ldr	r3, [r3, #8]
 800d402:	429a      	cmp	r2, r3
 800d404:	d32b      	bcc.n	800d45e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	681a      	ldr	r2, [r3, #0]
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	605a      	str	r2, [r3, #4]
 800d40e:	e026      	b.n	800d45e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	68d8      	ldr	r0, [r3, #12]
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d418:	461a      	mov	r2, r3
 800d41a:	68b9      	ldr	r1, [r7, #8]
 800d41c:	f002 f937 	bl	800f68e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	68da      	ldr	r2, [r3, #12]
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d428:	425b      	negs	r3, r3
 800d42a:	441a      	add	r2, r3
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	68da      	ldr	r2, [r3, #12]
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	429a      	cmp	r2, r3
 800d43a:	d207      	bcs.n	800d44c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	689a      	ldr	r2, [r3, #8]
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d444:	425b      	negs	r3, r3
 800d446:	441a      	add	r2, r3
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2b02      	cmp	r3, #2
 800d450:	d105      	bne.n	800d45e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d452:	693b      	ldr	r3, [r7, #16]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d002      	beq.n	800d45e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d458:	693b      	ldr	r3, [r7, #16]
 800d45a:	3b01      	subs	r3, #1
 800d45c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d45e:	693b      	ldr	r3, [r7, #16]
 800d460:	1c5a      	adds	r2, r3, #1
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800d466:	697b      	ldr	r3, [r7, #20]
}
 800d468:	4618      	mov	r0, r3
 800d46a:	3718      	adds	r7, #24
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd80      	pop	{r7, pc}

0800d470 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b082      	sub	sp, #8
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
 800d478:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d018      	beq.n	800d4b4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	68da      	ldr	r2, [r3, #12]
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d48a:	441a      	add	r2, r3
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	68da      	ldr	r2, [r3, #12]
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	689b      	ldr	r3, [r3, #8]
 800d498:	429a      	cmp	r2, r3
 800d49a:	d303      	bcc.n	800d4a4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	681a      	ldr	r2, [r3, #0]
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	68d9      	ldr	r1, [r3, #12]
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4ac:	461a      	mov	r2, r3
 800d4ae:	6838      	ldr	r0, [r7, #0]
 800d4b0:	f002 f8ed 	bl	800f68e <memcpy>
	}
}
 800d4b4:	bf00      	nop
 800d4b6:	3708      	adds	r7, #8
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	bd80      	pop	{r7, pc}

0800d4bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b084      	sub	sp, #16
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d4c4:	f001 f9d8 	bl	800e878 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d4ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d4d0:	e011      	b.n	800d4f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d012      	beq.n	800d500 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	3324      	adds	r3, #36	@ 0x24
 800d4de:	4618      	mov	r0, r3
 800d4e0:	f000 fcac 	bl	800de3c <xTaskRemoveFromEventList>
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d001      	beq.n	800d4ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d4ea:	f000 fd85 	bl	800dff8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d4ee:	7bfb      	ldrb	r3, [r7, #15]
 800d4f0:	3b01      	subs	r3, #1
 800d4f2:	b2db      	uxtb	r3, r3
 800d4f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d4f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	dce9      	bgt.n	800d4d2 <prvUnlockQueue+0x16>
 800d4fe:	e000      	b.n	800d502 <prvUnlockQueue+0x46>
					break;
 800d500:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	22ff      	movs	r2, #255	@ 0xff
 800d506:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800d50a:	f001 f9e7 	bl	800e8dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d50e:	f001 f9b3 	bl	800e878 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d518:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d51a:	e011      	b.n	800d540 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	691b      	ldr	r3, [r3, #16]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d012      	beq.n	800d54a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	3310      	adds	r3, #16
 800d528:	4618      	mov	r0, r3
 800d52a:	f000 fc87 	bl	800de3c <xTaskRemoveFromEventList>
 800d52e:	4603      	mov	r3, r0
 800d530:	2b00      	cmp	r3, #0
 800d532:	d001      	beq.n	800d538 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d534:	f000 fd60 	bl	800dff8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d538:	7bbb      	ldrb	r3, [r7, #14]
 800d53a:	3b01      	subs	r3, #1
 800d53c:	b2db      	uxtb	r3, r3
 800d53e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d540:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d544:	2b00      	cmp	r3, #0
 800d546:	dce9      	bgt.n	800d51c <prvUnlockQueue+0x60>
 800d548:	e000      	b.n	800d54c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d54a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	22ff      	movs	r2, #255	@ 0xff
 800d550:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800d554:	f001 f9c2 	bl	800e8dc <vPortExitCritical>
}
 800d558:	bf00      	nop
 800d55a:	3710      	adds	r7, #16
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}

0800d560 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b084      	sub	sp, #16
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d568:	f001 f986 	bl	800e878 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d570:	2b00      	cmp	r3, #0
 800d572:	d102      	bne.n	800d57a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d574:	2301      	movs	r3, #1
 800d576:	60fb      	str	r3, [r7, #12]
 800d578:	e001      	b.n	800d57e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d57a:	2300      	movs	r3, #0
 800d57c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d57e:	f001 f9ad 	bl	800e8dc <vPortExitCritical>

	return xReturn;
 800d582:	68fb      	ldr	r3, [r7, #12]
}
 800d584:	4618      	mov	r0, r3
 800d586:	3710      	adds	r7, #16
 800d588:	46bd      	mov	sp, r7
 800d58a:	bd80      	pop	{r7, pc}

0800d58c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b084      	sub	sp, #16
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d594:	f001 f970 	bl	800e878 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d5a0:	429a      	cmp	r2, r3
 800d5a2:	d102      	bne.n	800d5aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d5a4:	2301      	movs	r3, #1
 800d5a6:	60fb      	str	r3, [r7, #12]
 800d5a8:	e001      	b.n	800d5ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d5ae:	f001 f995 	bl	800e8dc <vPortExitCritical>

	return xReturn;
 800d5b2:	68fb      	ldr	r3, [r7, #12]
}
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	3710      	adds	r7, #16
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	bd80      	pop	{r7, pc}

0800d5bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b08e      	sub	sp, #56	@ 0x38
 800d5c0:	af04      	add	r7, sp, #16
 800d5c2:	60f8      	str	r0, [r7, #12]
 800d5c4:	60b9      	str	r1, [r7, #8]
 800d5c6:	607a      	str	r2, [r7, #4]
 800d5c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d5ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d10b      	bne.n	800d5e8 <xTaskCreateStatic+0x2c>
	__asm volatile
 800d5d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5d4:	f383 8811 	msr	BASEPRI, r3
 800d5d8:	f3bf 8f6f 	isb	sy
 800d5dc:	f3bf 8f4f 	dsb	sy
 800d5e0:	623b      	str	r3, [r7, #32]
}
 800d5e2:	bf00      	nop
 800d5e4:	bf00      	nop
 800d5e6:	e7fd      	b.n	800d5e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d5e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d10b      	bne.n	800d606 <xTaskCreateStatic+0x4a>
	__asm volatile
 800d5ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5f2:	f383 8811 	msr	BASEPRI, r3
 800d5f6:	f3bf 8f6f 	isb	sy
 800d5fa:	f3bf 8f4f 	dsb	sy
 800d5fe:	61fb      	str	r3, [r7, #28]
}
 800d600:	bf00      	nop
 800d602:	bf00      	nop
 800d604:	e7fd      	b.n	800d602 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d606:	23a0      	movs	r3, #160	@ 0xa0
 800d608:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d60a:	693b      	ldr	r3, [r7, #16]
 800d60c:	2ba0      	cmp	r3, #160	@ 0xa0
 800d60e:	d00b      	beq.n	800d628 <xTaskCreateStatic+0x6c>
	__asm volatile
 800d610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d614:	f383 8811 	msr	BASEPRI, r3
 800d618:	f3bf 8f6f 	isb	sy
 800d61c:	f3bf 8f4f 	dsb	sy
 800d620:	61bb      	str	r3, [r7, #24]
}
 800d622:	bf00      	nop
 800d624:	bf00      	nop
 800d626:	e7fd      	b.n	800d624 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d628:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d62a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d01e      	beq.n	800d66e <xTaskCreateStatic+0xb2>
 800d630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d632:	2b00      	cmp	r3, #0
 800d634:	d01b      	beq.n	800d66e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d638:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d63a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d63c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d63e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d642:	2202      	movs	r2, #2
 800d644:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d648:	2300      	movs	r3, #0
 800d64a:	9303      	str	r3, [sp, #12]
 800d64c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d64e:	9302      	str	r3, [sp, #8]
 800d650:	f107 0314 	add.w	r3, r7, #20
 800d654:	9301      	str	r3, [sp, #4]
 800d656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d658:	9300      	str	r3, [sp, #0]
 800d65a:	683b      	ldr	r3, [r7, #0]
 800d65c:	687a      	ldr	r2, [r7, #4]
 800d65e:	68b9      	ldr	r1, [r7, #8]
 800d660:	68f8      	ldr	r0, [r7, #12]
 800d662:	f000 f851 	bl	800d708 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d666:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d668:	f000 f8ee 	bl	800d848 <prvAddNewTaskToReadyList>
 800d66c:	e001      	b.n	800d672 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d66e:	2300      	movs	r3, #0
 800d670:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d672:	697b      	ldr	r3, [r7, #20]
	}
 800d674:	4618      	mov	r0, r3
 800d676:	3728      	adds	r7, #40	@ 0x28
 800d678:	46bd      	mov	sp, r7
 800d67a:	bd80      	pop	{r7, pc}

0800d67c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b08c      	sub	sp, #48	@ 0x30
 800d680:	af04      	add	r7, sp, #16
 800d682:	60f8      	str	r0, [r7, #12]
 800d684:	60b9      	str	r1, [r7, #8]
 800d686:	603b      	str	r3, [r7, #0]
 800d688:	4613      	mov	r3, r2
 800d68a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d68c:	88fb      	ldrh	r3, [r7, #6]
 800d68e:	009b      	lsls	r3, r3, #2
 800d690:	4618      	mov	r0, r3
 800d692:	f001 fa13 	bl	800eabc <pvPortMalloc>
 800d696:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d698:	697b      	ldr	r3, [r7, #20]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d00e      	beq.n	800d6bc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d69e:	20a0      	movs	r0, #160	@ 0xa0
 800d6a0:	f001 fa0c 	bl	800eabc <pvPortMalloc>
 800d6a4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d6a6:	69fb      	ldr	r3, [r7, #28]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d003      	beq.n	800d6b4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d6ac:	69fb      	ldr	r3, [r7, #28]
 800d6ae:	697a      	ldr	r2, [r7, #20]
 800d6b0:	631a      	str	r2, [r3, #48]	@ 0x30
 800d6b2:	e005      	b.n	800d6c0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d6b4:	6978      	ldr	r0, [r7, #20]
 800d6b6:	f001 facf 	bl	800ec58 <vPortFree>
 800d6ba:	e001      	b.n	800d6c0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d6bc:	2300      	movs	r3, #0
 800d6be:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d6c0:	69fb      	ldr	r3, [r7, #28]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d017      	beq.n	800d6f6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d6c6:	69fb      	ldr	r3, [r7, #28]
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d6ce:	88fa      	ldrh	r2, [r7, #6]
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	9303      	str	r3, [sp, #12]
 800d6d4:	69fb      	ldr	r3, [r7, #28]
 800d6d6:	9302      	str	r3, [sp, #8]
 800d6d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6da:	9301      	str	r3, [sp, #4]
 800d6dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6de:	9300      	str	r3, [sp, #0]
 800d6e0:	683b      	ldr	r3, [r7, #0]
 800d6e2:	68b9      	ldr	r1, [r7, #8]
 800d6e4:	68f8      	ldr	r0, [r7, #12]
 800d6e6:	f000 f80f 	bl	800d708 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d6ea:	69f8      	ldr	r0, [r7, #28]
 800d6ec:	f000 f8ac 	bl	800d848 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d6f0:	2301      	movs	r3, #1
 800d6f2:	61bb      	str	r3, [r7, #24]
 800d6f4:	e002      	b.n	800d6fc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d6f6:	f04f 33ff 	mov.w	r3, #4294967295
 800d6fa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d6fc:	69bb      	ldr	r3, [r7, #24]
	}
 800d6fe:	4618      	mov	r0, r3
 800d700:	3720      	adds	r7, #32
 800d702:	46bd      	mov	sp, r7
 800d704:	bd80      	pop	{r7, pc}
	...

0800d708 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b088      	sub	sp, #32
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	60f8      	str	r0, [r7, #12]
 800d710:	60b9      	str	r1, [r7, #8]
 800d712:	607a      	str	r2, [r7, #4]
 800d714:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d718:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d720:	3b01      	subs	r3, #1
 800d722:	009b      	lsls	r3, r3, #2
 800d724:	4413      	add	r3, r2
 800d726:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d728:	69bb      	ldr	r3, [r7, #24]
 800d72a:	f023 0307 	bic.w	r3, r3, #7
 800d72e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d730:	69bb      	ldr	r3, [r7, #24]
 800d732:	f003 0307 	and.w	r3, r3, #7
 800d736:	2b00      	cmp	r3, #0
 800d738:	d00b      	beq.n	800d752 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800d73a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d73e:	f383 8811 	msr	BASEPRI, r3
 800d742:	f3bf 8f6f 	isb	sy
 800d746:	f3bf 8f4f 	dsb	sy
 800d74a:	617b      	str	r3, [r7, #20]
}
 800d74c:	bf00      	nop
 800d74e:	bf00      	nop
 800d750:	e7fd      	b.n	800d74e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d752:	68bb      	ldr	r3, [r7, #8]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d01f      	beq.n	800d798 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d758:	2300      	movs	r3, #0
 800d75a:	61fb      	str	r3, [r7, #28]
 800d75c:	e012      	b.n	800d784 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d75e:	68ba      	ldr	r2, [r7, #8]
 800d760:	69fb      	ldr	r3, [r7, #28]
 800d762:	4413      	add	r3, r2
 800d764:	7819      	ldrb	r1, [r3, #0]
 800d766:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d768:	69fb      	ldr	r3, [r7, #28]
 800d76a:	4413      	add	r3, r2
 800d76c:	3334      	adds	r3, #52	@ 0x34
 800d76e:	460a      	mov	r2, r1
 800d770:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d772:	68ba      	ldr	r2, [r7, #8]
 800d774:	69fb      	ldr	r3, [r7, #28]
 800d776:	4413      	add	r3, r2
 800d778:	781b      	ldrb	r3, [r3, #0]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d006      	beq.n	800d78c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d77e:	69fb      	ldr	r3, [r7, #28]
 800d780:	3301      	adds	r3, #1
 800d782:	61fb      	str	r3, [r7, #28]
 800d784:	69fb      	ldr	r3, [r7, #28]
 800d786:	2b0f      	cmp	r3, #15
 800d788:	d9e9      	bls.n	800d75e <prvInitialiseNewTask+0x56>
 800d78a:	e000      	b.n	800d78e <prvInitialiseNewTask+0x86>
			{
				break;
 800d78c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d78e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d790:	2200      	movs	r2, #0
 800d792:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d796:	e003      	b.n	800d7a0 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d79a:	2200      	movs	r2, #0
 800d79c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d7a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7a2:	2b06      	cmp	r3, #6
 800d7a4:	d901      	bls.n	800d7aa <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d7a6:	2306      	movs	r3, #6
 800d7a8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d7aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d7ae:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d7b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d7b4:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d7b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d7bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7be:	3304      	adds	r3, #4
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	f7ff f8d9 	bl	800c978 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d7c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7c8:	3318      	adds	r3, #24
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	f7ff f8d4 	bl	800c978 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d7d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d7d4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d7d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7d8:	f1c3 0207 	rsb	r2, r3, #7
 800d7dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7de:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d7e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d7e4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d7e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d7ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d7f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7f8:	334c      	adds	r3, #76	@ 0x4c
 800d7fa:	224c      	movs	r2, #76	@ 0x4c
 800d7fc:	2100      	movs	r1, #0
 800d7fe:	4618      	mov	r0, r3
 800d800:	f001 fe64 	bl	800f4cc <memset>
 800d804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d806:	4a0d      	ldr	r2, [pc, #52]	@ (800d83c <prvInitialiseNewTask+0x134>)
 800d808:	651a      	str	r2, [r3, #80]	@ 0x50
 800d80a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d80c:	4a0c      	ldr	r2, [pc, #48]	@ (800d840 <prvInitialiseNewTask+0x138>)
 800d80e:	655a      	str	r2, [r3, #84]	@ 0x54
 800d810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d812:	4a0c      	ldr	r2, [pc, #48]	@ (800d844 <prvInitialiseNewTask+0x13c>)
 800d814:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d816:	683a      	ldr	r2, [r7, #0]
 800d818:	68f9      	ldr	r1, [r7, #12]
 800d81a:	69b8      	ldr	r0, [r7, #24]
 800d81c:	f000 fefa 	bl	800e614 <pxPortInitialiseStack>
 800d820:	4602      	mov	r2, r0
 800d822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d824:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d002      	beq.n	800d832 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d82c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d82e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d830:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d832:	bf00      	nop
 800d834:	3720      	adds	r7, #32
 800d836:	46bd      	mov	sp, r7
 800d838:	bd80      	pop	{r7, pc}
 800d83a:	bf00      	nop
 800d83c:	200053c8 	.word	0x200053c8
 800d840:	20005430 	.word	0x20005430
 800d844:	20005498 	.word	0x20005498

0800d848 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b082      	sub	sp, #8
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d850:	f001 f812 	bl	800e878 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d854:	4b2a      	ldr	r3, [pc, #168]	@ (800d900 <prvAddNewTaskToReadyList+0xb8>)
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	3301      	adds	r3, #1
 800d85a:	4a29      	ldr	r2, [pc, #164]	@ (800d900 <prvAddNewTaskToReadyList+0xb8>)
 800d85c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d85e:	4b29      	ldr	r3, [pc, #164]	@ (800d904 <prvAddNewTaskToReadyList+0xbc>)
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d109      	bne.n	800d87a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d866:	4a27      	ldr	r2, [pc, #156]	@ (800d904 <prvAddNewTaskToReadyList+0xbc>)
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d86c:	4b24      	ldr	r3, [pc, #144]	@ (800d900 <prvAddNewTaskToReadyList+0xb8>)
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	2b01      	cmp	r3, #1
 800d872:	d110      	bne.n	800d896 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d874:	f000 fbe4 	bl	800e040 <prvInitialiseTaskLists>
 800d878:	e00d      	b.n	800d896 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d87a:	4b23      	ldr	r3, [pc, #140]	@ (800d908 <prvAddNewTaskToReadyList+0xc0>)
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d109      	bne.n	800d896 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d882:	4b20      	ldr	r3, [pc, #128]	@ (800d904 <prvAddNewTaskToReadyList+0xbc>)
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d88c:	429a      	cmp	r2, r3
 800d88e:	d802      	bhi.n	800d896 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d890:	4a1c      	ldr	r2, [pc, #112]	@ (800d904 <prvAddNewTaskToReadyList+0xbc>)
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d896:	4b1d      	ldr	r3, [pc, #116]	@ (800d90c <prvAddNewTaskToReadyList+0xc4>)
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	3301      	adds	r3, #1
 800d89c:	4a1b      	ldr	r2, [pc, #108]	@ (800d90c <prvAddNewTaskToReadyList+0xc4>)
 800d89e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8a4:	2201      	movs	r2, #1
 800d8a6:	409a      	lsls	r2, r3
 800d8a8:	4b19      	ldr	r3, [pc, #100]	@ (800d910 <prvAddNewTaskToReadyList+0xc8>)
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	4313      	orrs	r3, r2
 800d8ae:	4a18      	ldr	r2, [pc, #96]	@ (800d910 <prvAddNewTaskToReadyList+0xc8>)
 800d8b0:	6013      	str	r3, [r2, #0]
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8b6:	4613      	mov	r3, r2
 800d8b8:	009b      	lsls	r3, r3, #2
 800d8ba:	4413      	add	r3, r2
 800d8bc:	009b      	lsls	r3, r3, #2
 800d8be:	4a15      	ldr	r2, [pc, #84]	@ (800d914 <prvAddNewTaskToReadyList+0xcc>)
 800d8c0:	441a      	add	r2, r3
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	3304      	adds	r3, #4
 800d8c6:	4619      	mov	r1, r3
 800d8c8:	4610      	mov	r0, r2
 800d8ca:	f7ff f862 	bl	800c992 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d8ce:	f001 f805 	bl	800e8dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d8d2:	4b0d      	ldr	r3, [pc, #52]	@ (800d908 <prvAddNewTaskToReadyList+0xc0>)
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d00e      	beq.n	800d8f8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d8da:	4b0a      	ldr	r3, [pc, #40]	@ (800d904 <prvAddNewTaskToReadyList+0xbc>)
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8e4:	429a      	cmp	r2, r3
 800d8e6:	d207      	bcs.n	800d8f8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d8e8:	4b0b      	ldr	r3, [pc, #44]	@ (800d918 <prvAddNewTaskToReadyList+0xd0>)
 800d8ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d8ee:	601a      	str	r2, [r3, #0]
 800d8f0:	f3bf 8f4f 	dsb	sy
 800d8f4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d8f8:	bf00      	nop
 800d8fa:	3708      	adds	r7, #8
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	bd80      	pop	{r7, pc}
 800d900:	2000176c 	.word	0x2000176c
 800d904:	2000166c 	.word	0x2000166c
 800d908:	20001778 	.word	0x20001778
 800d90c:	20001788 	.word	0x20001788
 800d910:	20001774 	.word	0x20001774
 800d914:	20001670 	.word	0x20001670
 800d918:	e000ed04 	.word	0xe000ed04

0800d91c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b084      	sub	sp, #16
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d924:	2300      	movs	r3, #0
 800d926:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d018      	beq.n	800d960 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d92e:	4b14      	ldr	r3, [pc, #80]	@ (800d980 <vTaskDelay+0x64>)
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d00b      	beq.n	800d94e <vTaskDelay+0x32>
	__asm volatile
 800d936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d93a:	f383 8811 	msr	BASEPRI, r3
 800d93e:	f3bf 8f6f 	isb	sy
 800d942:	f3bf 8f4f 	dsb	sy
 800d946:	60bb      	str	r3, [r7, #8]
}
 800d948:	bf00      	nop
 800d94a:	bf00      	nop
 800d94c:	e7fd      	b.n	800d94a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d94e:	f000 f885 	bl	800da5c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d952:	2100      	movs	r1, #0
 800d954:	6878      	ldr	r0, [r7, #4]
 800d956:	f000 fdf7 	bl	800e548 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d95a:	f000 f88d 	bl	800da78 <xTaskResumeAll>
 800d95e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d107      	bne.n	800d976 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d966:	4b07      	ldr	r3, [pc, #28]	@ (800d984 <vTaskDelay+0x68>)
 800d968:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d96c:	601a      	str	r2, [r3, #0]
 800d96e:	f3bf 8f4f 	dsb	sy
 800d972:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d976:	bf00      	nop
 800d978:	3710      	adds	r7, #16
 800d97a:	46bd      	mov	sp, r7
 800d97c:	bd80      	pop	{r7, pc}
 800d97e:	bf00      	nop
 800d980:	20001794 	.word	0x20001794
 800d984:	e000ed04 	.word	0xe000ed04

0800d988 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	b08a      	sub	sp, #40	@ 0x28
 800d98c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d98e:	2300      	movs	r3, #0
 800d990:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d992:	2300      	movs	r3, #0
 800d994:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d996:	463a      	mov	r2, r7
 800d998:	1d39      	adds	r1, r7, #4
 800d99a:	f107 0308 	add.w	r3, r7, #8
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f7f3 fb96 	bl	80010d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d9a4:	6839      	ldr	r1, [r7, #0]
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	68ba      	ldr	r2, [r7, #8]
 800d9aa:	9202      	str	r2, [sp, #8]
 800d9ac:	9301      	str	r3, [sp, #4]
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	9300      	str	r3, [sp, #0]
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	460a      	mov	r2, r1
 800d9b6:	4921      	ldr	r1, [pc, #132]	@ (800da3c <vTaskStartScheduler+0xb4>)
 800d9b8:	4821      	ldr	r0, [pc, #132]	@ (800da40 <vTaskStartScheduler+0xb8>)
 800d9ba:	f7ff fdff 	bl	800d5bc <xTaskCreateStatic>
 800d9be:	4603      	mov	r3, r0
 800d9c0:	4a20      	ldr	r2, [pc, #128]	@ (800da44 <vTaskStartScheduler+0xbc>)
 800d9c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d9c4:	4b1f      	ldr	r3, [pc, #124]	@ (800da44 <vTaskStartScheduler+0xbc>)
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d002      	beq.n	800d9d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d9cc:	2301      	movs	r3, #1
 800d9ce:	617b      	str	r3, [r7, #20]
 800d9d0:	e001      	b.n	800d9d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d9d6:	697b      	ldr	r3, [r7, #20]
 800d9d8:	2b01      	cmp	r3, #1
 800d9da:	d11b      	bne.n	800da14 <vTaskStartScheduler+0x8c>
	__asm volatile
 800d9dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9e0:	f383 8811 	msr	BASEPRI, r3
 800d9e4:	f3bf 8f6f 	isb	sy
 800d9e8:	f3bf 8f4f 	dsb	sy
 800d9ec:	613b      	str	r3, [r7, #16]
}
 800d9ee:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d9f0:	4b15      	ldr	r3, [pc, #84]	@ (800da48 <vTaskStartScheduler+0xc0>)
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	334c      	adds	r3, #76	@ 0x4c
 800d9f6:	4a15      	ldr	r2, [pc, #84]	@ (800da4c <vTaskStartScheduler+0xc4>)
 800d9f8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d9fa:	4b15      	ldr	r3, [pc, #84]	@ (800da50 <vTaskStartScheduler+0xc8>)
 800d9fc:	f04f 32ff 	mov.w	r2, #4294967295
 800da00:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800da02:	4b14      	ldr	r3, [pc, #80]	@ (800da54 <vTaskStartScheduler+0xcc>)
 800da04:	2201      	movs	r2, #1
 800da06:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800da08:	4b13      	ldr	r3, [pc, #76]	@ (800da58 <vTaskStartScheduler+0xd0>)
 800da0a:	2200      	movs	r2, #0
 800da0c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800da0e:	f000 fe8f 	bl	800e730 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800da12:	e00f      	b.n	800da34 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800da14:	697b      	ldr	r3, [r7, #20]
 800da16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da1a:	d10b      	bne.n	800da34 <vTaskStartScheduler+0xac>
	__asm volatile
 800da1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da20:	f383 8811 	msr	BASEPRI, r3
 800da24:	f3bf 8f6f 	isb	sy
 800da28:	f3bf 8f4f 	dsb	sy
 800da2c:	60fb      	str	r3, [r7, #12]
}
 800da2e:	bf00      	nop
 800da30:	bf00      	nop
 800da32:	e7fd      	b.n	800da30 <vTaskStartScheduler+0xa8>
}
 800da34:	bf00      	nop
 800da36:	3718      	adds	r7, #24
 800da38:	46bd      	mov	sp, r7
 800da3a:	bd80      	pop	{r7, pc}
 800da3c:	080104b8 	.word	0x080104b8
 800da40:	0800e011 	.word	0x0800e011
 800da44:	20001790 	.word	0x20001790
 800da48:	2000166c 	.word	0x2000166c
 800da4c:	200002e0 	.word	0x200002e0
 800da50:	2000178c 	.word	0x2000178c
 800da54:	20001778 	.word	0x20001778
 800da58:	20001770 	.word	0x20001770

0800da5c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800da5c:	b480      	push	{r7}
 800da5e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800da60:	4b04      	ldr	r3, [pc, #16]	@ (800da74 <vTaskSuspendAll+0x18>)
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	3301      	adds	r3, #1
 800da66:	4a03      	ldr	r2, [pc, #12]	@ (800da74 <vTaskSuspendAll+0x18>)
 800da68:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800da6a:	bf00      	nop
 800da6c:	46bd      	mov	sp, r7
 800da6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da72:	4770      	bx	lr
 800da74:	20001794 	.word	0x20001794

0800da78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b084      	sub	sp, #16
 800da7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800da7e:	2300      	movs	r3, #0
 800da80:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800da82:	2300      	movs	r3, #0
 800da84:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800da86:	4b42      	ldr	r3, [pc, #264]	@ (800db90 <xTaskResumeAll+0x118>)
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d10b      	bne.n	800daa6 <xTaskResumeAll+0x2e>
	__asm volatile
 800da8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da92:	f383 8811 	msr	BASEPRI, r3
 800da96:	f3bf 8f6f 	isb	sy
 800da9a:	f3bf 8f4f 	dsb	sy
 800da9e:	603b      	str	r3, [r7, #0]
}
 800daa0:	bf00      	nop
 800daa2:	bf00      	nop
 800daa4:	e7fd      	b.n	800daa2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800daa6:	f000 fee7 	bl	800e878 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800daaa:	4b39      	ldr	r3, [pc, #228]	@ (800db90 <xTaskResumeAll+0x118>)
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	3b01      	subs	r3, #1
 800dab0:	4a37      	ldr	r2, [pc, #220]	@ (800db90 <xTaskResumeAll+0x118>)
 800dab2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dab4:	4b36      	ldr	r3, [pc, #216]	@ (800db90 <xTaskResumeAll+0x118>)
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d161      	bne.n	800db80 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dabc:	4b35      	ldr	r3, [pc, #212]	@ (800db94 <xTaskResumeAll+0x11c>)
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d05d      	beq.n	800db80 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dac4:	e02e      	b.n	800db24 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dac6:	4b34      	ldr	r3, [pc, #208]	@ (800db98 <xTaskResumeAll+0x120>)
 800dac8:	68db      	ldr	r3, [r3, #12]
 800daca:	68db      	ldr	r3, [r3, #12]
 800dacc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	3318      	adds	r3, #24
 800dad2:	4618      	mov	r0, r3
 800dad4:	f7fe ffba 	bl	800ca4c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	3304      	adds	r3, #4
 800dadc:	4618      	mov	r0, r3
 800dade:	f7fe ffb5 	bl	800ca4c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dae6:	2201      	movs	r2, #1
 800dae8:	409a      	lsls	r2, r3
 800daea:	4b2c      	ldr	r3, [pc, #176]	@ (800db9c <xTaskResumeAll+0x124>)
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	4313      	orrs	r3, r2
 800daf0:	4a2a      	ldr	r2, [pc, #168]	@ (800db9c <xTaskResumeAll+0x124>)
 800daf2:	6013      	str	r3, [r2, #0]
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800daf8:	4613      	mov	r3, r2
 800dafa:	009b      	lsls	r3, r3, #2
 800dafc:	4413      	add	r3, r2
 800dafe:	009b      	lsls	r3, r3, #2
 800db00:	4a27      	ldr	r2, [pc, #156]	@ (800dba0 <xTaskResumeAll+0x128>)
 800db02:	441a      	add	r2, r3
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	3304      	adds	r3, #4
 800db08:	4619      	mov	r1, r3
 800db0a:	4610      	mov	r0, r2
 800db0c:	f7fe ff41 	bl	800c992 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db14:	4b23      	ldr	r3, [pc, #140]	@ (800dba4 <xTaskResumeAll+0x12c>)
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db1a:	429a      	cmp	r2, r3
 800db1c:	d302      	bcc.n	800db24 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800db1e:	4b22      	ldr	r3, [pc, #136]	@ (800dba8 <xTaskResumeAll+0x130>)
 800db20:	2201      	movs	r2, #1
 800db22:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800db24:	4b1c      	ldr	r3, [pc, #112]	@ (800db98 <xTaskResumeAll+0x120>)
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d1cc      	bne.n	800dac6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d001      	beq.n	800db36 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800db32:	f000 fb29 	bl	800e188 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800db36:	4b1d      	ldr	r3, [pc, #116]	@ (800dbac <xTaskResumeAll+0x134>)
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d010      	beq.n	800db64 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800db42:	f000 f837 	bl	800dbb4 <xTaskIncrementTick>
 800db46:	4603      	mov	r3, r0
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d002      	beq.n	800db52 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800db4c:	4b16      	ldr	r3, [pc, #88]	@ (800dba8 <xTaskResumeAll+0x130>)
 800db4e:	2201      	movs	r2, #1
 800db50:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	3b01      	subs	r3, #1
 800db56:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d1f1      	bne.n	800db42 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800db5e:	4b13      	ldr	r3, [pc, #76]	@ (800dbac <xTaskResumeAll+0x134>)
 800db60:	2200      	movs	r2, #0
 800db62:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800db64:	4b10      	ldr	r3, [pc, #64]	@ (800dba8 <xTaskResumeAll+0x130>)
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d009      	beq.n	800db80 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800db6c:	2301      	movs	r3, #1
 800db6e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800db70:	4b0f      	ldr	r3, [pc, #60]	@ (800dbb0 <xTaskResumeAll+0x138>)
 800db72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db76:	601a      	str	r2, [r3, #0]
 800db78:	f3bf 8f4f 	dsb	sy
 800db7c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800db80:	f000 feac 	bl	800e8dc <vPortExitCritical>

	return xAlreadyYielded;
 800db84:	68bb      	ldr	r3, [r7, #8]
}
 800db86:	4618      	mov	r0, r3
 800db88:	3710      	adds	r7, #16
 800db8a:	46bd      	mov	sp, r7
 800db8c:	bd80      	pop	{r7, pc}
 800db8e:	bf00      	nop
 800db90:	20001794 	.word	0x20001794
 800db94:	2000176c 	.word	0x2000176c
 800db98:	2000172c 	.word	0x2000172c
 800db9c:	20001774 	.word	0x20001774
 800dba0:	20001670 	.word	0x20001670
 800dba4:	2000166c 	.word	0x2000166c
 800dba8:	20001780 	.word	0x20001780
 800dbac:	2000177c 	.word	0x2000177c
 800dbb0:	e000ed04 	.word	0xe000ed04

0800dbb4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b086      	sub	sp, #24
 800dbb8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dbba:	2300      	movs	r3, #0
 800dbbc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dbbe:	4b4f      	ldr	r3, [pc, #316]	@ (800dcfc <xTaskIncrementTick+0x148>)
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	f040 808f 	bne.w	800dce6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dbc8:	4b4d      	ldr	r3, [pc, #308]	@ (800dd00 <xTaskIncrementTick+0x14c>)
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	3301      	adds	r3, #1
 800dbce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800dbd0:	4a4b      	ldr	r2, [pc, #300]	@ (800dd00 <xTaskIncrementTick+0x14c>)
 800dbd2:	693b      	ldr	r3, [r7, #16]
 800dbd4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dbd6:	693b      	ldr	r3, [r7, #16]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d121      	bne.n	800dc20 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800dbdc:	4b49      	ldr	r3, [pc, #292]	@ (800dd04 <xTaskIncrementTick+0x150>)
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d00b      	beq.n	800dbfe <xTaskIncrementTick+0x4a>
	__asm volatile
 800dbe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbea:	f383 8811 	msr	BASEPRI, r3
 800dbee:	f3bf 8f6f 	isb	sy
 800dbf2:	f3bf 8f4f 	dsb	sy
 800dbf6:	603b      	str	r3, [r7, #0]
}
 800dbf8:	bf00      	nop
 800dbfa:	bf00      	nop
 800dbfc:	e7fd      	b.n	800dbfa <xTaskIncrementTick+0x46>
 800dbfe:	4b41      	ldr	r3, [pc, #260]	@ (800dd04 <xTaskIncrementTick+0x150>)
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	60fb      	str	r3, [r7, #12]
 800dc04:	4b40      	ldr	r3, [pc, #256]	@ (800dd08 <xTaskIncrementTick+0x154>)
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	4a3e      	ldr	r2, [pc, #248]	@ (800dd04 <xTaskIncrementTick+0x150>)
 800dc0a:	6013      	str	r3, [r2, #0]
 800dc0c:	4a3e      	ldr	r2, [pc, #248]	@ (800dd08 <xTaskIncrementTick+0x154>)
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	6013      	str	r3, [r2, #0]
 800dc12:	4b3e      	ldr	r3, [pc, #248]	@ (800dd0c <xTaskIncrementTick+0x158>)
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	3301      	adds	r3, #1
 800dc18:	4a3c      	ldr	r2, [pc, #240]	@ (800dd0c <xTaskIncrementTick+0x158>)
 800dc1a:	6013      	str	r3, [r2, #0]
 800dc1c:	f000 fab4 	bl	800e188 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dc20:	4b3b      	ldr	r3, [pc, #236]	@ (800dd10 <xTaskIncrementTick+0x15c>)
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	693a      	ldr	r2, [r7, #16]
 800dc26:	429a      	cmp	r2, r3
 800dc28:	d348      	bcc.n	800dcbc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dc2a:	4b36      	ldr	r3, [pc, #216]	@ (800dd04 <xTaskIncrementTick+0x150>)
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d104      	bne.n	800dc3e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc34:	4b36      	ldr	r3, [pc, #216]	@ (800dd10 <xTaskIncrementTick+0x15c>)
 800dc36:	f04f 32ff 	mov.w	r2, #4294967295
 800dc3a:	601a      	str	r2, [r3, #0]
					break;
 800dc3c:	e03e      	b.n	800dcbc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc3e:	4b31      	ldr	r3, [pc, #196]	@ (800dd04 <xTaskIncrementTick+0x150>)
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	68db      	ldr	r3, [r3, #12]
 800dc44:	68db      	ldr	r3, [r3, #12]
 800dc46:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dc48:	68bb      	ldr	r3, [r7, #8]
 800dc4a:	685b      	ldr	r3, [r3, #4]
 800dc4c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dc4e:	693a      	ldr	r2, [r7, #16]
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	429a      	cmp	r2, r3
 800dc54:	d203      	bcs.n	800dc5e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800dc56:	4a2e      	ldr	r2, [pc, #184]	@ (800dd10 <xTaskIncrementTick+0x15c>)
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dc5c:	e02e      	b.n	800dcbc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dc5e:	68bb      	ldr	r3, [r7, #8]
 800dc60:	3304      	adds	r3, #4
 800dc62:	4618      	mov	r0, r3
 800dc64:	f7fe fef2 	bl	800ca4c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dc68:	68bb      	ldr	r3, [r7, #8]
 800dc6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d004      	beq.n	800dc7a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dc70:	68bb      	ldr	r3, [r7, #8]
 800dc72:	3318      	adds	r3, #24
 800dc74:	4618      	mov	r0, r3
 800dc76:	f7fe fee9 	bl	800ca4c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dc7a:	68bb      	ldr	r3, [r7, #8]
 800dc7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc7e:	2201      	movs	r2, #1
 800dc80:	409a      	lsls	r2, r3
 800dc82:	4b24      	ldr	r3, [pc, #144]	@ (800dd14 <xTaskIncrementTick+0x160>)
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	4313      	orrs	r3, r2
 800dc88:	4a22      	ldr	r2, [pc, #136]	@ (800dd14 <xTaskIncrementTick+0x160>)
 800dc8a:	6013      	str	r3, [r2, #0]
 800dc8c:	68bb      	ldr	r3, [r7, #8]
 800dc8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc90:	4613      	mov	r3, r2
 800dc92:	009b      	lsls	r3, r3, #2
 800dc94:	4413      	add	r3, r2
 800dc96:	009b      	lsls	r3, r3, #2
 800dc98:	4a1f      	ldr	r2, [pc, #124]	@ (800dd18 <xTaskIncrementTick+0x164>)
 800dc9a:	441a      	add	r2, r3
 800dc9c:	68bb      	ldr	r3, [r7, #8]
 800dc9e:	3304      	adds	r3, #4
 800dca0:	4619      	mov	r1, r3
 800dca2:	4610      	mov	r0, r2
 800dca4:	f7fe fe75 	bl	800c992 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dca8:	68bb      	ldr	r3, [r7, #8]
 800dcaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dcac:	4b1b      	ldr	r3, [pc, #108]	@ (800dd1c <xTaskIncrementTick+0x168>)
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcb2:	429a      	cmp	r2, r3
 800dcb4:	d3b9      	bcc.n	800dc2a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800dcb6:	2301      	movs	r3, #1
 800dcb8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dcba:	e7b6      	b.n	800dc2a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dcbc:	4b17      	ldr	r3, [pc, #92]	@ (800dd1c <xTaskIncrementTick+0x168>)
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dcc2:	4915      	ldr	r1, [pc, #84]	@ (800dd18 <xTaskIncrementTick+0x164>)
 800dcc4:	4613      	mov	r3, r2
 800dcc6:	009b      	lsls	r3, r3, #2
 800dcc8:	4413      	add	r3, r2
 800dcca:	009b      	lsls	r3, r3, #2
 800dccc:	440b      	add	r3, r1
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	2b01      	cmp	r3, #1
 800dcd2:	d901      	bls.n	800dcd8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800dcd4:	2301      	movs	r3, #1
 800dcd6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800dcd8:	4b11      	ldr	r3, [pc, #68]	@ (800dd20 <xTaskIncrementTick+0x16c>)
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d007      	beq.n	800dcf0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800dce0:	2301      	movs	r3, #1
 800dce2:	617b      	str	r3, [r7, #20]
 800dce4:	e004      	b.n	800dcf0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800dce6:	4b0f      	ldr	r3, [pc, #60]	@ (800dd24 <xTaskIncrementTick+0x170>)
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	3301      	adds	r3, #1
 800dcec:	4a0d      	ldr	r2, [pc, #52]	@ (800dd24 <xTaskIncrementTick+0x170>)
 800dcee:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800dcf0:	697b      	ldr	r3, [r7, #20]
}
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	3718      	adds	r7, #24
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	bd80      	pop	{r7, pc}
 800dcfa:	bf00      	nop
 800dcfc:	20001794 	.word	0x20001794
 800dd00:	20001770 	.word	0x20001770
 800dd04:	20001724 	.word	0x20001724
 800dd08:	20001728 	.word	0x20001728
 800dd0c:	20001784 	.word	0x20001784
 800dd10:	2000178c 	.word	0x2000178c
 800dd14:	20001774 	.word	0x20001774
 800dd18:	20001670 	.word	0x20001670
 800dd1c:	2000166c 	.word	0x2000166c
 800dd20:	20001780 	.word	0x20001780
 800dd24:	2000177c 	.word	0x2000177c

0800dd28 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dd28:	b480      	push	{r7}
 800dd2a:	b087      	sub	sp, #28
 800dd2c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dd2e:	4b2a      	ldr	r3, [pc, #168]	@ (800ddd8 <vTaskSwitchContext+0xb0>)
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d003      	beq.n	800dd3e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800dd36:	4b29      	ldr	r3, [pc, #164]	@ (800dddc <vTaskSwitchContext+0xb4>)
 800dd38:	2201      	movs	r2, #1
 800dd3a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dd3c:	e045      	b.n	800ddca <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800dd3e:	4b27      	ldr	r3, [pc, #156]	@ (800dddc <vTaskSwitchContext+0xb4>)
 800dd40:	2200      	movs	r2, #0
 800dd42:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd44:	4b26      	ldr	r3, [pc, #152]	@ (800dde0 <vTaskSwitchContext+0xb8>)
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	fab3 f383 	clz	r3, r3
 800dd50:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800dd52:	7afb      	ldrb	r3, [r7, #11]
 800dd54:	f1c3 031f 	rsb	r3, r3, #31
 800dd58:	617b      	str	r3, [r7, #20]
 800dd5a:	4922      	ldr	r1, [pc, #136]	@ (800dde4 <vTaskSwitchContext+0xbc>)
 800dd5c:	697a      	ldr	r2, [r7, #20]
 800dd5e:	4613      	mov	r3, r2
 800dd60:	009b      	lsls	r3, r3, #2
 800dd62:	4413      	add	r3, r2
 800dd64:	009b      	lsls	r3, r3, #2
 800dd66:	440b      	add	r3, r1
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d10b      	bne.n	800dd86 <vTaskSwitchContext+0x5e>
	__asm volatile
 800dd6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd72:	f383 8811 	msr	BASEPRI, r3
 800dd76:	f3bf 8f6f 	isb	sy
 800dd7a:	f3bf 8f4f 	dsb	sy
 800dd7e:	607b      	str	r3, [r7, #4]
}
 800dd80:	bf00      	nop
 800dd82:	bf00      	nop
 800dd84:	e7fd      	b.n	800dd82 <vTaskSwitchContext+0x5a>
 800dd86:	697a      	ldr	r2, [r7, #20]
 800dd88:	4613      	mov	r3, r2
 800dd8a:	009b      	lsls	r3, r3, #2
 800dd8c:	4413      	add	r3, r2
 800dd8e:	009b      	lsls	r3, r3, #2
 800dd90:	4a14      	ldr	r2, [pc, #80]	@ (800dde4 <vTaskSwitchContext+0xbc>)
 800dd92:	4413      	add	r3, r2
 800dd94:	613b      	str	r3, [r7, #16]
 800dd96:	693b      	ldr	r3, [r7, #16]
 800dd98:	685b      	ldr	r3, [r3, #4]
 800dd9a:	685a      	ldr	r2, [r3, #4]
 800dd9c:	693b      	ldr	r3, [r7, #16]
 800dd9e:	605a      	str	r2, [r3, #4]
 800dda0:	693b      	ldr	r3, [r7, #16]
 800dda2:	685a      	ldr	r2, [r3, #4]
 800dda4:	693b      	ldr	r3, [r7, #16]
 800dda6:	3308      	adds	r3, #8
 800dda8:	429a      	cmp	r2, r3
 800ddaa:	d104      	bne.n	800ddb6 <vTaskSwitchContext+0x8e>
 800ddac:	693b      	ldr	r3, [r7, #16]
 800ddae:	685b      	ldr	r3, [r3, #4]
 800ddb0:	685a      	ldr	r2, [r3, #4]
 800ddb2:	693b      	ldr	r3, [r7, #16]
 800ddb4:	605a      	str	r2, [r3, #4]
 800ddb6:	693b      	ldr	r3, [r7, #16]
 800ddb8:	685b      	ldr	r3, [r3, #4]
 800ddba:	68db      	ldr	r3, [r3, #12]
 800ddbc:	4a0a      	ldr	r2, [pc, #40]	@ (800dde8 <vTaskSwitchContext+0xc0>)
 800ddbe:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ddc0:	4b09      	ldr	r3, [pc, #36]	@ (800dde8 <vTaskSwitchContext+0xc0>)
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	334c      	adds	r3, #76	@ 0x4c
 800ddc6:	4a09      	ldr	r2, [pc, #36]	@ (800ddec <vTaskSwitchContext+0xc4>)
 800ddc8:	6013      	str	r3, [r2, #0]
}
 800ddca:	bf00      	nop
 800ddcc:	371c      	adds	r7, #28
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd4:	4770      	bx	lr
 800ddd6:	bf00      	nop
 800ddd8:	20001794 	.word	0x20001794
 800dddc:	20001780 	.word	0x20001780
 800dde0:	20001774 	.word	0x20001774
 800dde4:	20001670 	.word	0x20001670
 800dde8:	2000166c 	.word	0x2000166c
 800ddec:	200002e0 	.word	0x200002e0

0800ddf0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b084      	sub	sp, #16
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6078      	str	r0, [r7, #4]
 800ddf8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d10b      	bne.n	800de18 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800de00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de04:	f383 8811 	msr	BASEPRI, r3
 800de08:	f3bf 8f6f 	isb	sy
 800de0c:	f3bf 8f4f 	dsb	sy
 800de10:	60fb      	str	r3, [r7, #12]
}
 800de12:	bf00      	nop
 800de14:	bf00      	nop
 800de16:	e7fd      	b.n	800de14 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800de18:	4b07      	ldr	r3, [pc, #28]	@ (800de38 <vTaskPlaceOnEventList+0x48>)
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	3318      	adds	r3, #24
 800de1e:	4619      	mov	r1, r3
 800de20:	6878      	ldr	r0, [r7, #4]
 800de22:	f7fe fdda 	bl	800c9da <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800de26:	2101      	movs	r1, #1
 800de28:	6838      	ldr	r0, [r7, #0]
 800de2a:	f000 fb8d 	bl	800e548 <prvAddCurrentTaskToDelayedList>
}
 800de2e:	bf00      	nop
 800de30:	3710      	adds	r7, #16
 800de32:	46bd      	mov	sp, r7
 800de34:	bd80      	pop	{r7, pc}
 800de36:	bf00      	nop
 800de38:	2000166c 	.word	0x2000166c

0800de3c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b086      	sub	sp, #24
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	68db      	ldr	r3, [r3, #12]
 800de48:	68db      	ldr	r3, [r3, #12]
 800de4a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800de4c:	693b      	ldr	r3, [r7, #16]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d10b      	bne.n	800de6a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800de52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de56:	f383 8811 	msr	BASEPRI, r3
 800de5a:	f3bf 8f6f 	isb	sy
 800de5e:	f3bf 8f4f 	dsb	sy
 800de62:	60fb      	str	r3, [r7, #12]
}
 800de64:	bf00      	nop
 800de66:	bf00      	nop
 800de68:	e7fd      	b.n	800de66 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800de6a:	693b      	ldr	r3, [r7, #16]
 800de6c:	3318      	adds	r3, #24
 800de6e:	4618      	mov	r0, r3
 800de70:	f7fe fdec 	bl	800ca4c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de74:	4b1d      	ldr	r3, [pc, #116]	@ (800deec <xTaskRemoveFromEventList+0xb0>)
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d11c      	bne.n	800deb6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800de7c:	693b      	ldr	r3, [r7, #16]
 800de7e:	3304      	adds	r3, #4
 800de80:	4618      	mov	r0, r3
 800de82:	f7fe fde3 	bl	800ca4c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800de86:	693b      	ldr	r3, [r7, #16]
 800de88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de8a:	2201      	movs	r2, #1
 800de8c:	409a      	lsls	r2, r3
 800de8e:	4b18      	ldr	r3, [pc, #96]	@ (800def0 <xTaskRemoveFromEventList+0xb4>)
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	4313      	orrs	r3, r2
 800de94:	4a16      	ldr	r2, [pc, #88]	@ (800def0 <xTaskRemoveFromEventList+0xb4>)
 800de96:	6013      	str	r3, [r2, #0]
 800de98:	693b      	ldr	r3, [r7, #16]
 800de9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de9c:	4613      	mov	r3, r2
 800de9e:	009b      	lsls	r3, r3, #2
 800dea0:	4413      	add	r3, r2
 800dea2:	009b      	lsls	r3, r3, #2
 800dea4:	4a13      	ldr	r2, [pc, #76]	@ (800def4 <xTaskRemoveFromEventList+0xb8>)
 800dea6:	441a      	add	r2, r3
 800dea8:	693b      	ldr	r3, [r7, #16]
 800deaa:	3304      	adds	r3, #4
 800deac:	4619      	mov	r1, r3
 800deae:	4610      	mov	r0, r2
 800deb0:	f7fe fd6f 	bl	800c992 <vListInsertEnd>
 800deb4:	e005      	b.n	800dec2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800deb6:	693b      	ldr	r3, [r7, #16]
 800deb8:	3318      	adds	r3, #24
 800deba:	4619      	mov	r1, r3
 800debc:	480e      	ldr	r0, [pc, #56]	@ (800def8 <xTaskRemoveFromEventList+0xbc>)
 800debe:	f7fe fd68 	bl	800c992 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dec2:	693b      	ldr	r3, [r7, #16]
 800dec4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dec6:	4b0d      	ldr	r3, [pc, #52]	@ (800defc <xTaskRemoveFromEventList+0xc0>)
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800decc:	429a      	cmp	r2, r3
 800dece:	d905      	bls.n	800dedc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ded0:	2301      	movs	r3, #1
 800ded2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ded4:	4b0a      	ldr	r3, [pc, #40]	@ (800df00 <xTaskRemoveFromEventList+0xc4>)
 800ded6:	2201      	movs	r2, #1
 800ded8:	601a      	str	r2, [r3, #0]
 800deda:	e001      	b.n	800dee0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800dedc:	2300      	movs	r3, #0
 800dede:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800dee0:	697b      	ldr	r3, [r7, #20]
}
 800dee2:	4618      	mov	r0, r3
 800dee4:	3718      	adds	r7, #24
 800dee6:	46bd      	mov	sp, r7
 800dee8:	bd80      	pop	{r7, pc}
 800deea:	bf00      	nop
 800deec:	20001794 	.word	0x20001794
 800def0:	20001774 	.word	0x20001774
 800def4:	20001670 	.word	0x20001670
 800def8:	2000172c 	.word	0x2000172c
 800defc:	2000166c 	.word	0x2000166c
 800df00:	20001780 	.word	0x20001780

0800df04 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800df04:	b480      	push	{r7}
 800df06:	b083      	sub	sp, #12
 800df08:	af00      	add	r7, sp, #0
 800df0a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800df0c:	4b06      	ldr	r3, [pc, #24]	@ (800df28 <vTaskInternalSetTimeOutState+0x24>)
 800df0e:	681a      	ldr	r2, [r3, #0]
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800df14:	4b05      	ldr	r3, [pc, #20]	@ (800df2c <vTaskInternalSetTimeOutState+0x28>)
 800df16:	681a      	ldr	r2, [r3, #0]
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	605a      	str	r2, [r3, #4]
}
 800df1c:	bf00      	nop
 800df1e:	370c      	adds	r7, #12
 800df20:	46bd      	mov	sp, r7
 800df22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df26:	4770      	bx	lr
 800df28:	20001784 	.word	0x20001784
 800df2c:	20001770 	.word	0x20001770

0800df30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800df30:	b580      	push	{r7, lr}
 800df32:	b088      	sub	sp, #32
 800df34:	af00      	add	r7, sp, #0
 800df36:	6078      	str	r0, [r7, #4]
 800df38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d10b      	bne.n	800df58 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800df40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df44:	f383 8811 	msr	BASEPRI, r3
 800df48:	f3bf 8f6f 	isb	sy
 800df4c:	f3bf 8f4f 	dsb	sy
 800df50:	613b      	str	r3, [r7, #16]
}
 800df52:	bf00      	nop
 800df54:	bf00      	nop
 800df56:	e7fd      	b.n	800df54 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800df58:	683b      	ldr	r3, [r7, #0]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d10b      	bne.n	800df76 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800df5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df62:	f383 8811 	msr	BASEPRI, r3
 800df66:	f3bf 8f6f 	isb	sy
 800df6a:	f3bf 8f4f 	dsb	sy
 800df6e:	60fb      	str	r3, [r7, #12]
}
 800df70:	bf00      	nop
 800df72:	bf00      	nop
 800df74:	e7fd      	b.n	800df72 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800df76:	f000 fc7f 	bl	800e878 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800df7a:	4b1d      	ldr	r3, [pc, #116]	@ (800dff0 <xTaskCheckForTimeOut+0xc0>)
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	685b      	ldr	r3, [r3, #4]
 800df84:	69ba      	ldr	r2, [r7, #24]
 800df86:	1ad3      	subs	r3, r2, r3
 800df88:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800df8a:	683b      	ldr	r3, [r7, #0]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df92:	d102      	bne.n	800df9a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800df94:	2300      	movs	r3, #0
 800df96:	61fb      	str	r3, [r7, #28]
 800df98:	e023      	b.n	800dfe2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	681a      	ldr	r2, [r3, #0]
 800df9e:	4b15      	ldr	r3, [pc, #84]	@ (800dff4 <xTaskCheckForTimeOut+0xc4>)
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	429a      	cmp	r2, r3
 800dfa4:	d007      	beq.n	800dfb6 <xTaskCheckForTimeOut+0x86>
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	685b      	ldr	r3, [r3, #4]
 800dfaa:	69ba      	ldr	r2, [r7, #24]
 800dfac:	429a      	cmp	r2, r3
 800dfae:	d302      	bcc.n	800dfb6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800dfb0:	2301      	movs	r3, #1
 800dfb2:	61fb      	str	r3, [r7, #28]
 800dfb4:	e015      	b.n	800dfe2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800dfb6:	683b      	ldr	r3, [r7, #0]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	697a      	ldr	r2, [r7, #20]
 800dfbc:	429a      	cmp	r2, r3
 800dfbe:	d20b      	bcs.n	800dfd8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800dfc0:	683b      	ldr	r3, [r7, #0]
 800dfc2:	681a      	ldr	r2, [r3, #0]
 800dfc4:	697b      	ldr	r3, [r7, #20]
 800dfc6:	1ad2      	subs	r2, r2, r3
 800dfc8:	683b      	ldr	r3, [r7, #0]
 800dfca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800dfcc:	6878      	ldr	r0, [r7, #4]
 800dfce:	f7ff ff99 	bl	800df04 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	61fb      	str	r3, [r7, #28]
 800dfd6:	e004      	b.n	800dfe2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800dfd8:	683b      	ldr	r3, [r7, #0]
 800dfda:	2200      	movs	r2, #0
 800dfdc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800dfde:	2301      	movs	r3, #1
 800dfe0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800dfe2:	f000 fc7b 	bl	800e8dc <vPortExitCritical>

	return xReturn;
 800dfe6:	69fb      	ldr	r3, [r7, #28]
}
 800dfe8:	4618      	mov	r0, r3
 800dfea:	3720      	adds	r7, #32
 800dfec:	46bd      	mov	sp, r7
 800dfee:	bd80      	pop	{r7, pc}
 800dff0:	20001770 	.word	0x20001770
 800dff4:	20001784 	.word	0x20001784

0800dff8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800dff8:	b480      	push	{r7}
 800dffa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800dffc:	4b03      	ldr	r3, [pc, #12]	@ (800e00c <vTaskMissedYield+0x14>)
 800dffe:	2201      	movs	r2, #1
 800e000:	601a      	str	r2, [r3, #0]
}
 800e002:	bf00      	nop
 800e004:	46bd      	mov	sp, r7
 800e006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00a:	4770      	bx	lr
 800e00c:	20001780 	.word	0x20001780

0800e010 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e010:	b580      	push	{r7, lr}
 800e012:	b082      	sub	sp, #8
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e018:	f000 f852 	bl	800e0c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e01c:	4b06      	ldr	r3, [pc, #24]	@ (800e038 <prvIdleTask+0x28>)
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	2b01      	cmp	r3, #1
 800e022:	d9f9      	bls.n	800e018 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e024:	4b05      	ldr	r3, [pc, #20]	@ (800e03c <prvIdleTask+0x2c>)
 800e026:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e02a:	601a      	str	r2, [r3, #0]
 800e02c:	f3bf 8f4f 	dsb	sy
 800e030:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e034:	e7f0      	b.n	800e018 <prvIdleTask+0x8>
 800e036:	bf00      	nop
 800e038:	20001670 	.word	0x20001670
 800e03c:	e000ed04 	.word	0xe000ed04

0800e040 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e040:	b580      	push	{r7, lr}
 800e042:	b082      	sub	sp, #8
 800e044:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e046:	2300      	movs	r3, #0
 800e048:	607b      	str	r3, [r7, #4]
 800e04a:	e00c      	b.n	800e066 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e04c:	687a      	ldr	r2, [r7, #4]
 800e04e:	4613      	mov	r3, r2
 800e050:	009b      	lsls	r3, r3, #2
 800e052:	4413      	add	r3, r2
 800e054:	009b      	lsls	r3, r3, #2
 800e056:	4a12      	ldr	r2, [pc, #72]	@ (800e0a0 <prvInitialiseTaskLists+0x60>)
 800e058:	4413      	add	r3, r2
 800e05a:	4618      	mov	r0, r3
 800e05c:	f7fe fc6c 	bl	800c938 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	3301      	adds	r3, #1
 800e064:	607b      	str	r3, [r7, #4]
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	2b06      	cmp	r3, #6
 800e06a:	d9ef      	bls.n	800e04c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e06c:	480d      	ldr	r0, [pc, #52]	@ (800e0a4 <prvInitialiseTaskLists+0x64>)
 800e06e:	f7fe fc63 	bl	800c938 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e072:	480d      	ldr	r0, [pc, #52]	@ (800e0a8 <prvInitialiseTaskLists+0x68>)
 800e074:	f7fe fc60 	bl	800c938 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e078:	480c      	ldr	r0, [pc, #48]	@ (800e0ac <prvInitialiseTaskLists+0x6c>)
 800e07a:	f7fe fc5d 	bl	800c938 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e07e:	480c      	ldr	r0, [pc, #48]	@ (800e0b0 <prvInitialiseTaskLists+0x70>)
 800e080:	f7fe fc5a 	bl	800c938 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e084:	480b      	ldr	r0, [pc, #44]	@ (800e0b4 <prvInitialiseTaskLists+0x74>)
 800e086:	f7fe fc57 	bl	800c938 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e08a:	4b0b      	ldr	r3, [pc, #44]	@ (800e0b8 <prvInitialiseTaskLists+0x78>)
 800e08c:	4a05      	ldr	r2, [pc, #20]	@ (800e0a4 <prvInitialiseTaskLists+0x64>)
 800e08e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e090:	4b0a      	ldr	r3, [pc, #40]	@ (800e0bc <prvInitialiseTaskLists+0x7c>)
 800e092:	4a05      	ldr	r2, [pc, #20]	@ (800e0a8 <prvInitialiseTaskLists+0x68>)
 800e094:	601a      	str	r2, [r3, #0]
}
 800e096:	bf00      	nop
 800e098:	3708      	adds	r7, #8
 800e09a:	46bd      	mov	sp, r7
 800e09c:	bd80      	pop	{r7, pc}
 800e09e:	bf00      	nop
 800e0a0:	20001670 	.word	0x20001670
 800e0a4:	200016fc 	.word	0x200016fc
 800e0a8:	20001710 	.word	0x20001710
 800e0ac:	2000172c 	.word	0x2000172c
 800e0b0:	20001740 	.word	0x20001740
 800e0b4:	20001758 	.word	0x20001758
 800e0b8:	20001724 	.word	0x20001724
 800e0bc:	20001728 	.word	0x20001728

0800e0c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b082      	sub	sp, #8
 800e0c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e0c6:	e019      	b.n	800e0fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e0c8:	f000 fbd6 	bl	800e878 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0cc:	4b10      	ldr	r3, [pc, #64]	@ (800e110 <prvCheckTasksWaitingTermination+0x50>)
 800e0ce:	68db      	ldr	r3, [r3, #12]
 800e0d0:	68db      	ldr	r3, [r3, #12]
 800e0d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	3304      	adds	r3, #4
 800e0d8:	4618      	mov	r0, r3
 800e0da:	f7fe fcb7 	bl	800ca4c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e0de:	4b0d      	ldr	r3, [pc, #52]	@ (800e114 <prvCheckTasksWaitingTermination+0x54>)
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	3b01      	subs	r3, #1
 800e0e4:	4a0b      	ldr	r2, [pc, #44]	@ (800e114 <prvCheckTasksWaitingTermination+0x54>)
 800e0e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e0e8:	4b0b      	ldr	r3, [pc, #44]	@ (800e118 <prvCheckTasksWaitingTermination+0x58>)
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	3b01      	subs	r3, #1
 800e0ee:	4a0a      	ldr	r2, [pc, #40]	@ (800e118 <prvCheckTasksWaitingTermination+0x58>)
 800e0f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e0f2:	f000 fbf3 	bl	800e8dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e0f6:	6878      	ldr	r0, [r7, #4]
 800e0f8:	f000 f810 	bl	800e11c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e0fc:	4b06      	ldr	r3, [pc, #24]	@ (800e118 <prvCheckTasksWaitingTermination+0x58>)
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d1e1      	bne.n	800e0c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e104:	bf00      	nop
 800e106:	bf00      	nop
 800e108:	3708      	adds	r7, #8
 800e10a:	46bd      	mov	sp, r7
 800e10c:	bd80      	pop	{r7, pc}
 800e10e:	bf00      	nop
 800e110:	20001740 	.word	0x20001740
 800e114:	2000176c 	.word	0x2000176c
 800e118:	20001754 	.word	0x20001754

0800e11c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e11c:	b580      	push	{r7, lr}
 800e11e:	b084      	sub	sp, #16
 800e120:	af00      	add	r7, sp, #0
 800e122:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	334c      	adds	r3, #76	@ 0x4c
 800e128:	4618      	mov	r0, r3
 800e12a:	f001 f9e7 	bl	800f4fc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800e134:	2b00      	cmp	r3, #0
 800e136:	d108      	bne.n	800e14a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e13c:	4618      	mov	r0, r3
 800e13e:	f000 fd8b 	bl	800ec58 <vPortFree>
				vPortFree( pxTCB );
 800e142:	6878      	ldr	r0, [r7, #4]
 800e144:	f000 fd88 	bl	800ec58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e148:	e019      	b.n	800e17e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800e150:	2b01      	cmp	r3, #1
 800e152:	d103      	bne.n	800e15c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e154:	6878      	ldr	r0, [r7, #4]
 800e156:	f000 fd7f 	bl	800ec58 <vPortFree>
	}
 800e15a:	e010      	b.n	800e17e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800e162:	2b02      	cmp	r3, #2
 800e164:	d00b      	beq.n	800e17e <prvDeleteTCB+0x62>
	__asm volatile
 800e166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e16a:	f383 8811 	msr	BASEPRI, r3
 800e16e:	f3bf 8f6f 	isb	sy
 800e172:	f3bf 8f4f 	dsb	sy
 800e176:	60fb      	str	r3, [r7, #12]
}
 800e178:	bf00      	nop
 800e17a:	bf00      	nop
 800e17c:	e7fd      	b.n	800e17a <prvDeleteTCB+0x5e>
	}
 800e17e:	bf00      	nop
 800e180:	3710      	adds	r7, #16
 800e182:	46bd      	mov	sp, r7
 800e184:	bd80      	pop	{r7, pc}
	...

0800e188 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e188:	b480      	push	{r7}
 800e18a:	b083      	sub	sp, #12
 800e18c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e18e:	4b0c      	ldr	r3, [pc, #48]	@ (800e1c0 <prvResetNextTaskUnblockTime+0x38>)
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d104      	bne.n	800e1a2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e198:	4b0a      	ldr	r3, [pc, #40]	@ (800e1c4 <prvResetNextTaskUnblockTime+0x3c>)
 800e19a:	f04f 32ff 	mov.w	r2, #4294967295
 800e19e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e1a0:	e008      	b.n	800e1b4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1a2:	4b07      	ldr	r3, [pc, #28]	@ (800e1c0 <prvResetNextTaskUnblockTime+0x38>)
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	68db      	ldr	r3, [r3, #12]
 800e1a8:	68db      	ldr	r3, [r3, #12]
 800e1aa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	685b      	ldr	r3, [r3, #4]
 800e1b0:	4a04      	ldr	r2, [pc, #16]	@ (800e1c4 <prvResetNextTaskUnblockTime+0x3c>)
 800e1b2:	6013      	str	r3, [r2, #0]
}
 800e1b4:	bf00      	nop
 800e1b6:	370c      	adds	r7, #12
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1be:	4770      	bx	lr
 800e1c0:	20001724 	.word	0x20001724
 800e1c4:	2000178c 	.word	0x2000178c

0800e1c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e1c8:	b480      	push	{r7}
 800e1ca:	b083      	sub	sp, #12
 800e1cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e1ce:	4b0b      	ldr	r3, [pc, #44]	@ (800e1fc <xTaskGetSchedulerState+0x34>)
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d102      	bne.n	800e1dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e1d6:	2301      	movs	r3, #1
 800e1d8:	607b      	str	r3, [r7, #4]
 800e1da:	e008      	b.n	800e1ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e1dc:	4b08      	ldr	r3, [pc, #32]	@ (800e200 <xTaskGetSchedulerState+0x38>)
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d102      	bne.n	800e1ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e1e4:	2302      	movs	r3, #2
 800e1e6:	607b      	str	r3, [r7, #4]
 800e1e8:	e001      	b.n	800e1ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e1ee:	687b      	ldr	r3, [r7, #4]
	}
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	370c      	adds	r7, #12
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1fa:	4770      	bx	lr
 800e1fc:	20001778 	.word	0x20001778
 800e200:	20001794 	.word	0x20001794

0800e204 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e204:	b580      	push	{r7, lr}
 800e206:	b084      	sub	sp, #16
 800e208:	af00      	add	r7, sp, #0
 800e20a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e210:	2300      	movs	r3, #0
 800e212:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d05e      	beq.n	800e2d8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e21a:	68bb      	ldr	r3, [r7, #8]
 800e21c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e21e:	4b31      	ldr	r3, [pc, #196]	@ (800e2e4 <xTaskPriorityInherit+0xe0>)
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e224:	429a      	cmp	r2, r3
 800e226:	d24e      	bcs.n	800e2c6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e228:	68bb      	ldr	r3, [r7, #8]
 800e22a:	699b      	ldr	r3, [r3, #24]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	db06      	blt.n	800e23e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e230:	4b2c      	ldr	r3, [pc, #176]	@ (800e2e4 <xTaskPriorityInherit+0xe0>)
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e236:	f1c3 0207 	rsb	r2, r3, #7
 800e23a:	68bb      	ldr	r3, [r7, #8]
 800e23c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e23e:	68bb      	ldr	r3, [r7, #8]
 800e240:	6959      	ldr	r1, [r3, #20]
 800e242:	68bb      	ldr	r3, [r7, #8]
 800e244:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e246:	4613      	mov	r3, r2
 800e248:	009b      	lsls	r3, r3, #2
 800e24a:	4413      	add	r3, r2
 800e24c:	009b      	lsls	r3, r3, #2
 800e24e:	4a26      	ldr	r2, [pc, #152]	@ (800e2e8 <xTaskPriorityInherit+0xe4>)
 800e250:	4413      	add	r3, r2
 800e252:	4299      	cmp	r1, r3
 800e254:	d12f      	bne.n	800e2b6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e256:	68bb      	ldr	r3, [r7, #8]
 800e258:	3304      	adds	r3, #4
 800e25a:	4618      	mov	r0, r3
 800e25c:	f7fe fbf6 	bl	800ca4c <uxListRemove>
 800e260:	4603      	mov	r3, r0
 800e262:	2b00      	cmp	r3, #0
 800e264:	d10a      	bne.n	800e27c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800e266:	68bb      	ldr	r3, [r7, #8]
 800e268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e26a:	2201      	movs	r2, #1
 800e26c:	fa02 f303 	lsl.w	r3, r2, r3
 800e270:	43da      	mvns	r2, r3
 800e272:	4b1e      	ldr	r3, [pc, #120]	@ (800e2ec <xTaskPriorityInherit+0xe8>)
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	4013      	ands	r3, r2
 800e278:	4a1c      	ldr	r2, [pc, #112]	@ (800e2ec <xTaskPriorityInherit+0xe8>)
 800e27a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e27c:	4b19      	ldr	r3, [pc, #100]	@ (800e2e4 <xTaskPriorityInherit+0xe0>)
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e282:	68bb      	ldr	r3, [r7, #8]
 800e284:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e286:	68bb      	ldr	r3, [r7, #8]
 800e288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e28a:	2201      	movs	r2, #1
 800e28c:	409a      	lsls	r2, r3
 800e28e:	4b17      	ldr	r3, [pc, #92]	@ (800e2ec <xTaskPriorityInherit+0xe8>)
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	4313      	orrs	r3, r2
 800e294:	4a15      	ldr	r2, [pc, #84]	@ (800e2ec <xTaskPriorityInherit+0xe8>)
 800e296:	6013      	str	r3, [r2, #0]
 800e298:	68bb      	ldr	r3, [r7, #8]
 800e29a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e29c:	4613      	mov	r3, r2
 800e29e:	009b      	lsls	r3, r3, #2
 800e2a0:	4413      	add	r3, r2
 800e2a2:	009b      	lsls	r3, r3, #2
 800e2a4:	4a10      	ldr	r2, [pc, #64]	@ (800e2e8 <xTaskPriorityInherit+0xe4>)
 800e2a6:	441a      	add	r2, r3
 800e2a8:	68bb      	ldr	r3, [r7, #8]
 800e2aa:	3304      	adds	r3, #4
 800e2ac:	4619      	mov	r1, r3
 800e2ae:	4610      	mov	r0, r2
 800e2b0:	f7fe fb6f 	bl	800c992 <vListInsertEnd>
 800e2b4:	e004      	b.n	800e2c0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e2b6:	4b0b      	ldr	r3, [pc, #44]	@ (800e2e4 <xTaskPriorityInherit+0xe0>)
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2bc:	68bb      	ldr	r3, [r7, #8]
 800e2be:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e2c0:	2301      	movs	r3, #1
 800e2c2:	60fb      	str	r3, [r7, #12]
 800e2c4:	e008      	b.n	800e2d8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e2c6:	68bb      	ldr	r3, [r7, #8]
 800e2c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e2ca:	4b06      	ldr	r3, [pc, #24]	@ (800e2e4 <xTaskPriorityInherit+0xe0>)
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2d0:	429a      	cmp	r2, r3
 800e2d2:	d201      	bcs.n	800e2d8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e2d4:	2301      	movs	r3, #1
 800e2d6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e2d8:	68fb      	ldr	r3, [r7, #12]
	}
 800e2da:	4618      	mov	r0, r3
 800e2dc:	3710      	adds	r7, #16
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	bd80      	pop	{r7, pc}
 800e2e2:	bf00      	nop
 800e2e4:	2000166c 	.word	0x2000166c
 800e2e8:	20001670 	.word	0x20001670
 800e2ec:	20001774 	.word	0x20001774

0800e2f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e2f0:	b580      	push	{r7, lr}
 800e2f2:	b086      	sub	sp, #24
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d070      	beq.n	800e3e8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e306:	4b3b      	ldr	r3, [pc, #236]	@ (800e3f4 <xTaskPriorityDisinherit+0x104>)
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	693a      	ldr	r2, [r7, #16]
 800e30c:	429a      	cmp	r2, r3
 800e30e:	d00b      	beq.n	800e328 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800e310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e314:	f383 8811 	msr	BASEPRI, r3
 800e318:	f3bf 8f6f 	isb	sy
 800e31c:	f3bf 8f4f 	dsb	sy
 800e320:	60fb      	str	r3, [r7, #12]
}
 800e322:	bf00      	nop
 800e324:	bf00      	nop
 800e326:	e7fd      	b.n	800e324 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e328:	693b      	ldr	r3, [r7, #16]
 800e32a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d10b      	bne.n	800e348 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800e330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e334:	f383 8811 	msr	BASEPRI, r3
 800e338:	f3bf 8f6f 	isb	sy
 800e33c:	f3bf 8f4f 	dsb	sy
 800e340:	60bb      	str	r3, [r7, #8]
}
 800e342:	bf00      	nop
 800e344:	bf00      	nop
 800e346:	e7fd      	b.n	800e344 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800e348:	693b      	ldr	r3, [r7, #16]
 800e34a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e34c:	1e5a      	subs	r2, r3, #1
 800e34e:	693b      	ldr	r3, [r7, #16]
 800e350:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e352:	693b      	ldr	r3, [r7, #16]
 800e354:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e356:	693b      	ldr	r3, [r7, #16]
 800e358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e35a:	429a      	cmp	r2, r3
 800e35c:	d044      	beq.n	800e3e8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e35e:	693b      	ldr	r3, [r7, #16]
 800e360:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e362:	2b00      	cmp	r3, #0
 800e364:	d140      	bne.n	800e3e8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e366:	693b      	ldr	r3, [r7, #16]
 800e368:	3304      	adds	r3, #4
 800e36a:	4618      	mov	r0, r3
 800e36c:	f7fe fb6e 	bl	800ca4c <uxListRemove>
 800e370:	4603      	mov	r3, r0
 800e372:	2b00      	cmp	r3, #0
 800e374:	d115      	bne.n	800e3a2 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e376:	693b      	ldr	r3, [r7, #16]
 800e378:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e37a:	491f      	ldr	r1, [pc, #124]	@ (800e3f8 <xTaskPriorityDisinherit+0x108>)
 800e37c:	4613      	mov	r3, r2
 800e37e:	009b      	lsls	r3, r3, #2
 800e380:	4413      	add	r3, r2
 800e382:	009b      	lsls	r3, r3, #2
 800e384:	440b      	add	r3, r1
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d10a      	bne.n	800e3a2 <xTaskPriorityDisinherit+0xb2>
 800e38c:	693b      	ldr	r3, [r7, #16]
 800e38e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e390:	2201      	movs	r2, #1
 800e392:	fa02 f303 	lsl.w	r3, r2, r3
 800e396:	43da      	mvns	r2, r3
 800e398:	4b18      	ldr	r3, [pc, #96]	@ (800e3fc <xTaskPriorityDisinherit+0x10c>)
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	4013      	ands	r3, r2
 800e39e:	4a17      	ldr	r2, [pc, #92]	@ (800e3fc <xTaskPriorityDisinherit+0x10c>)
 800e3a0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e3a2:	693b      	ldr	r3, [r7, #16]
 800e3a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e3a6:	693b      	ldr	r3, [r7, #16]
 800e3a8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e3aa:	693b      	ldr	r3, [r7, #16]
 800e3ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3ae:	f1c3 0207 	rsb	r2, r3, #7
 800e3b2:	693b      	ldr	r3, [r7, #16]
 800e3b4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e3b6:	693b      	ldr	r3, [r7, #16]
 800e3b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3ba:	2201      	movs	r2, #1
 800e3bc:	409a      	lsls	r2, r3
 800e3be:	4b0f      	ldr	r3, [pc, #60]	@ (800e3fc <xTaskPriorityDisinherit+0x10c>)
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	4313      	orrs	r3, r2
 800e3c4:	4a0d      	ldr	r2, [pc, #52]	@ (800e3fc <xTaskPriorityDisinherit+0x10c>)
 800e3c6:	6013      	str	r3, [r2, #0]
 800e3c8:	693b      	ldr	r3, [r7, #16]
 800e3ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e3cc:	4613      	mov	r3, r2
 800e3ce:	009b      	lsls	r3, r3, #2
 800e3d0:	4413      	add	r3, r2
 800e3d2:	009b      	lsls	r3, r3, #2
 800e3d4:	4a08      	ldr	r2, [pc, #32]	@ (800e3f8 <xTaskPriorityDisinherit+0x108>)
 800e3d6:	441a      	add	r2, r3
 800e3d8:	693b      	ldr	r3, [r7, #16]
 800e3da:	3304      	adds	r3, #4
 800e3dc:	4619      	mov	r1, r3
 800e3de:	4610      	mov	r0, r2
 800e3e0:	f7fe fad7 	bl	800c992 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e3e4:	2301      	movs	r3, #1
 800e3e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e3e8:	697b      	ldr	r3, [r7, #20]
	}
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	3718      	adds	r7, #24
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	bd80      	pop	{r7, pc}
 800e3f2:	bf00      	nop
 800e3f4:	2000166c 	.word	0x2000166c
 800e3f8:	20001670 	.word	0x20001670
 800e3fc:	20001774 	.word	0x20001774

0800e400 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e400:	b580      	push	{r7, lr}
 800e402:	b088      	sub	sp, #32
 800e404:	af00      	add	r7, sp, #0
 800e406:	6078      	str	r0, [r7, #4]
 800e408:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e40e:	2301      	movs	r3, #1
 800e410:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d079      	beq.n	800e50c <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e418:	69bb      	ldr	r3, [r7, #24]
 800e41a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d10b      	bne.n	800e438 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800e420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e424:	f383 8811 	msr	BASEPRI, r3
 800e428:	f3bf 8f6f 	isb	sy
 800e42c:	f3bf 8f4f 	dsb	sy
 800e430:	60fb      	str	r3, [r7, #12]
}
 800e432:	bf00      	nop
 800e434:	bf00      	nop
 800e436:	e7fd      	b.n	800e434 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e438:	69bb      	ldr	r3, [r7, #24]
 800e43a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e43c:	683a      	ldr	r2, [r7, #0]
 800e43e:	429a      	cmp	r2, r3
 800e440:	d902      	bls.n	800e448 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e442:	683b      	ldr	r3, [r7, #0]
 800e444:	61fb      	str	r3, [r7, #28]
 800e446:	e002      	b.n	800e44e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e448:	69bb      	ldr	r3, [r7, #24]
 800e44a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e44c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e44e:	69bb      	ldr	r3, [r7, #24]
 800e450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e452:	69fa      	ldr	r2, [r7, #28]
 800e454:	429a      	cmp	r2, r3
 800e456:	d059      	beq.n	800e50c <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e458:	69bb      	ldr	r3, [r7, #24]
 800e45a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e45c:	697a      	ldr	r2, [r7, #20]
 800e45e:	429a      	cmp	r2, r3
 800e460:	d154      	bne.n	800e50c <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e462:	4b2c      	ldr	r3, [pc, #176]	@ (800e514 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	69ba      	ldr	r2, [r7, #24]
 800e468:	429a      	cmp	r2, r3
 800e46a:	d10b      	bne.n	800e484 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800e46c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e470:	f383 8811 	msr	BASEPRI, r3
 800e474:	f3bf 8f6f 	isb	sy
 800e478:	f3bf 8f4f 	dsb	sy
 800e47c:	60bb      	str	r3, [r7, #8]
}
 800e47e:	bf00      	nop
 800e480:	bf00      	nop
 800e482:	e7fd      	b.n	800e480 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e484:	69bb      	ldr	r3, [r7, #24]
 800e486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e488:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e48a:	69bb      	ldr	r3, [r7, #24]
 800e48c:	69fa      	ldr	r2, [r7, #28]
 800e48e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e490:	69bb      	ldr	r3, [r7, #24]
 800e492:	699b      	ldr	r3, [r3, #24]
 800e494:	2b00      	cmp	r3, #0
 800e496:	db04      	blt.n	800e4a2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e498:	69fb      	ldr	r3, [r7, #28]
 800e49a:	f1c3 0207 	rsb	r2, r3, #7
 800e49e:	69bb      	ldr	r3, [r7, #24]
 800e4a0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e4a2:	69bb      	ldr	r3, [r7, #24]
 800e4a4:	6959      	ldr	r1, [r3, #20]
 800e4a6:	693a      	ldr	r2, [r7, #16]
 800e4a8:	4613      	mov	r3, r2
 800e4aa:	009b      	lsls	r3, r3, #2
 800e4ac:	4413      	add	r3, r2
 800e4ae:	009b      	lsls	r3, r3, #2
 800e4b0:	4a19      	ldr	r2, [pc, #100]	@ (800e518 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800e4b2:	4413      	add	r3, r2
 800e4b4:	4299      	cmp	r1, r3
 800e4b6:	d129      	bne.n	800e50c <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e4b8:	69bb      	ldr	r3, [r7, #24]
 800e4ba:	3304      	adds	r3, #4
 800e4bc:	4618      	mov	r0, r3
 800e4be:	f7fe fac5 	bl	800ca4c <uxListRemove>
 800e4c2:	4603      	mov	r3, r0
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d10a      	bne.n	800e4de <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800e4c8:	69bb      	ldr	r3, [r7, #24]
 800e4ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4cc:	2201      	movs	r2, #1
 800e4ce:	fa02 f303 	lsl.w	r3, r2, r3
 800e4d2:	43da      	mvns	r2, r3
 800e4d4:	4b11      	ldr	r3, [pc, #68]	@ (800e51c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	4013      	ands	r3, r2
 800e4da:	4a10      	ldr	r2, [pc, #64]	@ (800e51c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800e4dc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e4de:	69bb      	ldr	r3, [r7, #24]
 800e4e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4e2:	2201      	movs	r2, #1
 800e4e4:	409a      	lsls	r2, r3
 800e4e6:	4b0d      	ldr	r3, [pc, #52]	@ (800e51c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	4313      	orrs	r3, r2
 800e4ec:	4a0b      	ldr	r2, [pc, #44]	@ (800e51c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800e4ee:	6013      	str	r3, [r2, #0]
 800e4f0:	69bb      	ldr	r3, [r7, #24]
 800e4f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4f4:	4613      	mov	r3, r2
 800e4f6:	009b      	lsls	r3, r3, #2
 800e4f8:	4413      	add	r3, r2
 800e4fa:	009b      	lsls	r3, r3, #2
 800e4fc:	4a06      	ldr	r2, [pc, #24]	@ (800e518 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800e4fe:	441a      	add	r2, r3
 800e500:	69bb      	ldr	r3, [r7, #24]
 800e502:	3304      	adds	r3, #4
 800e504:	4619      	mov	r1, r3
 800e506:	4610      	mov	r0, r2
 800e508:	f7fe fa43 	bl	800c992 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e50c:	bf00      	nop
 800e50e:	3720      	adds	r7, #32
 800e510:	46bd      	mov	sp, r7
 800e512:	bd80      	pop	{r7, pc}
 800e514:	2000166c 	.word	0x2000166c
 800e518:	20001670 	.word	0x20001670
 800e51c:	20001774 	.word	0x20001774

0800e520 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e520:	b480      	push	{r7}
 800e522:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e524:	4b07      	ldr	r3, [pc, #28]	@ (800e544 <pvTaskIncrementMutexHeldCount+0x24>)
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d004      	beq.n	800e536 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e52c:	4b05      	ldr	r3, [pc, #20]	@ (800e544 <pvTaskIncrementMutexHeldCount+0x24>)
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e532:	3201      	adds	r2, #1
 800e534:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800e536:	4b03      	ldr	r3, [pc, #12]	@ (800e544 <pvTaskIncrementMutexHeldCount+0x24>)
 800e538:	681b      	ldr	r3, [r3, #0]
	}
 800e53a:	4618      	mov	r0, r3
 800e53c:	46bd      	mov	sp, r7
 800e53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e542:	4770      	bx	lr
 800e544:	2000166c 	.word	0x2000166c

0800e548 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e548:	b580      	push	{r7, lr}
 800e54a:	b084      	sub	sp, #16
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	6078      	str	r0, [r7, #4]
 800e550:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e552:	4b29      	ldr	r3, [pc, #164]	@ (800e5f8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e558:	4b28      	ldr	r3, [pc, #160]	@ (800e5fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	3304      	adds	r3, #4
 800e55e:	4618      	mov	r0, r3
 800e560:	f7fe fa74 	bl	800ca4c <uxListRemove>
 800e564:	4603      	mov	r3, r0
 800e566:	2b00      	cmp	r3, #0
 800e568:	d10b      	bne.n	800e582 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e56a:	4b24      	ldr	r3, [pc, #144]	@ (800e5fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e570:	2201      	movs	r2, #1
 800e572:	fa02 f303 	lsl.w	r3, r2, r3
 800e576:	43da      	mvns	r2, r3
 800e578:	4b21      	ldr	r3, [pc, #132]	@ (800e600 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	4013      	ands	r3, r2
 800e57e:	4a20      	ldr	r2, [pc, #128]	@ (800e600 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e580:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e588:	d10a      	bne.n	800e5a0 <prvAddCurrentTaskToDelayedList+0x58>
 800e58a:	683b      	ldr	r3, [r7, #0]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d007      	beq.n	800e5a0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e590:	4b1a      	ldr	r3, [pc, #104]	@ (800e5fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	3304      	adds	r3, #4
 800e596:	4619      	mov	r1, r3
 800e598:	481a      	ldr	r0, [pc, #104]	@ (800e604 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e59a:	f7fe f9fa 	bl	800c992 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e59e:	e026      	b.n	800e5ee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e5a0:	68fa      	ldr	r2, [r7, #12]
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	4413      	add	r3, r2
 800e5a6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e5a8:	4b14      	ldr	r3, [pc, #80]	@ (800e5fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	68ba      	ldr	r2, [r7, #8]
 800e5ae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e5b0:	68ba      	ldr	r2, [r7, #8]
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	429a      	cmp	r2, r3
 800e5b6:	d209      	bcs.n	800e5cc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e5b8:	4b13      	ldr	r3, [pc, #76]	@ (800e608 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e5ba:	681a      	ldr	r2, [r3, #0]
 800e5bc:	4b0f      	ldr	r3, [pc, #60]	@ (800e5fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	3304      	adds	r3, #4
 800e5c2:	4619      	mov	r1, r3
 800e5c4:	4610      	mov	r0, r2
 800e5c6:	f7fe fa08 	bl	800c9da <vListInsert>
}
 800e5ca:	e010      	b.n	800e5ee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e5cc:	4b0f      	ldr	r3, [pc, #60]	@ (800e60c <prvAddCurrentTaskToDelayedList+0xc4>)
 800e5ce:	681a      	ldr	r2, [r3, #0]
 800e5d0:	4b0a      	ldr	r3, [pc, #40]	@ (800e5fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	3304      	adds	r3, #4
 800e5d6:	4619      	mov	r1, r3
 800e5d8:	4610      	mov	r0, r2
 800e5da:	f7fe f9fe 	bl	800c9da <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e5de:	4b0c      	ldr	r3, [pc, #48]	@ (800e610 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	68ba      	ldr	r2, [r7, #8]
 800e5e4:	429a      	cmp	r2, r3
 800e5e6:	d202      	bcs.n	800e5ee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e5e8:	4a09      	ldr	r2, [pc, #36]	@ (800e610 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e5ea:	68bb      	ldr	r3, [r7, #8]
 800e5ec:	6013      	str	r3, [r2, #0]
}
 800e5ee:	bf00      	nop
 800e5f0:	3710      	adds	r7, #16
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	bd80      	pop	{r7, pc}
 800e5f6:	bf00      	nop
 800e5f8:	20001770 	.word	0x20001770
 800e5fc:	2000166c 	.word	0x2000166c
 800e600:	20001774 	.word	0x20001774
 800e604:	20001758 	.word	0x20001758
 800e608:	20001728 	.word	0x20001728
 800e60c:	20001724 	.word	0x20001724
 800e610:	2000178c 	.word	0x2000178c

0800e614 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e614:	b480      	push	{r7}
 800e616:	b085      	sub	sp, #20
 800e618:	af00      	add	r7, sp, #0
 800e61a:	60f8      	str	r0, [r7, #12]
 800e61c:	60b9      	str	r1, [r7, #8]
 800e61e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	3b04      	subs	r3, #4
 800e624:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800e62c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	3b04      	subs	r3, #4
 800e632:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e634:	68bb      	ldr	r3, [r7, #8]
 800e636:	f023 0201 	bic.w	r2, r3, #1
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	3b04      	subs	r3, #4
 800e642:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e644:	4a0c      	ldr	r2, [pc, #48]	@ (800e678 <pxPortInitialiseStack+0x64>)
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	3b14      	subs	r3, #20
 800e64e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e650:	687a      	ldr	r2, [r7, #4]
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	3b04      	subs	r3, #4
 800e65a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	f06f 0202 	mvn.w	r2, #2
 800e662:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	3b20      	subs	r3, #32
 800e668:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e66a:	68fb      	ldr	r3, [r7, #12]
}
 800e66c:	4618      	mov	r0, r3
 800e66e:	3714      	adds	r7, #20
 800e670:	46bd      	mov	sp, r7
 800e672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e676:	4770      	bx	lr
 800e678:	0800e67d 	.word	0x0800e67d

0800e67c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e67c:	b480      	push	{r7}
 800e67e:	b085      	sub	sp, #20
 800e680:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e682:	2300      	movs	r3, #0
 800e684:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e686:	4b13      	ldr	r3, [pc, #76]	@ (800e6d4 <prvTaskExitError+0x58>)
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e68e:	d00b      	beq.n	800e6a8 <prvTaskExitError+0x2c>
	__asm volatile
 800e690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e694:	f383 8811 	msr	BASEPRI, r3
 800e698:	f3bf 8f6f 	isb	sy
 800e69c:	f3bf 8f4f 	dsb	sy
 800e6a0:	60fb      	str	r3, [r7, #12]
}
 800e6a2:	bf00      	nop
 800e6a4:	bf00      	nop
 800e6a6:	e7fd      	b.n	800e6a4 <prvTaskExitError+0x28>
	__asm volatile
 800e6a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6ac:	f383 8811 	msr	BASEPRI, r3
 800e6b0:	f3bf 8f6f 	isb	sy
 800e6b4:	f3bf 8f4f 	dsb	sy
 800e6b8:	60bb      	str	r3, [r7, #8]
}
 800e6ba:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e6bc:	bf00      	nop
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d0fc      	beq.n	800e6be <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e6c4:	bf00      	nop
 800e6c6:	bf00      	nop
 800e6c8:	3714      	adds	r7, #20
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d0:	4770      	bx	lr
 800e6d2:	bf00      	nop
 800e6d4:	200002d0 	.word	0x200002d0
	...

0800e6e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e6e0:	4b07      	ldr	r3, [pc, #28]	@ (800e700 <pxCurrentTCBConst2>)
 800e6e2:	6819      	ldr	r1, [r3, #0]
 800e6e4:	6808      	ldr	r0, [r1, #0]
 800e6e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6ea:	f380 8809 	msr	PSP, r0
 800e6ee:	f3bf 8f6f 	isb	sy
 800e6f2:	f04f 0000 	mov.w	r0, #0
 800e6f6:	f380 8811 	msr	BASEPRI, r0
 800e6fa:	4770      	bx	lr
 800e6fc:	f3af 8000 	nop.w

0800e700 <pxCurrentTCBConst2>:
 800e700:	2000166c 	.word	0x2000166c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e704:	bf00      	nop
 800e706:	bf00      	nop

0800e708 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e708:	4808      	ldr	r0, [pc, #32]	@ (800e72c <prvPortStartFirstTask+0x24>)
 800e70a:	6800      	ldr	r0, [r0, #0]
 800e70c:	6800      	ldr	r0, [r0, #0]
 800e70e:	f380 8808 	msr	MSP, r0
 800e712:	f04f 0000 	mov.w	r0, #0
 800e716:	f380 8814 	msr	CONTROL, r0
 800e71a:	b662      	cpsie	i
 800e71c:	b661      	cpsie	f
 800e71e:	f3bf 8f4f 	dsb	sy
 800e722:	f3bf 8f6f 	isb	sy
 800e726:	df00      	svc	0
 800e728:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e72a:	bf00      	nop
 800e72c:	e000ed08 	.word	0xe000ed08

0800e730 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e730:	b580      	push	{r7, lr}
 800e732:	b086      	sub	sp, #24
 800e734:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e736:	4b47      	ldr	r3, [pc, #284]	@ (800e854 <xPortStartScheduler+0x124>)
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	4a47      	ldr	r2, [pc, #284]	@ (800e858 <xPortStartScheduler+0x128>)
 800e73c:	4293      	cmp	r3, r2
 800e73e:	d10b      	bne.n	800e758 <xPortStartScheduler+0x28>
	__asm volatile
 800e740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e744:	f383 8811 	msr	BASEPRI, r3
 800e748:	f3bf 8f6f 	isb	sy
 800e74c:	f3bf 8f4f 	dsb	sy
 800e750:	613b      	str	r3, [r7, #16]
}
 800e752:	bf00      	nop
 800e754:	bf00      	nop
 800e756:	e7fd      	b.n	800e754 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e758:	4b3e      	ldr	r3, [pc, #248]	@ (800e854 <xPortStartScheduler+0x124>)
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	4a3f      	ldr	r2, [pc, #252]	@ (800e85c <xPortStartScheduler+0x12c>)
 800e75e:	4293      	cmp	r3, r2
 800e760:	d10b      	bne.n	800e77a <xPortStartScheduler+0x4a>
	__asm volatile
 800e762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e766:	f383 8811 	msr	BASEPRI, r3
 800e76a:	f3bf 8f6f 	isb	sy
 800e76e:	f3bf 8f4f 	dsb	sy
 800e772:	60fb      	str	r3, [r7, #12]
}
 800e774:	bf00      	nop
 800e776:	bf00      	nop
 800e778:	e7fd      	b.n	800e776 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e77a:	4b39      	ldr	r3, [pc, #228]	@ (800e860 <xPortStartScheduler+0x130>)
 800e77c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e77e:	697b      	ldr	r3, [r7, #20]
 800e780:	781b      	ldrb	r3, [r3, #0]
 800e782:	b2db      	uxtb	r3, r3
 800e784:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e786:	697b      	ldr	r3, [r7, #20]
 800e788:	22ff      	movs	r2, #255	@ 0xff
 800e78a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e78c:	697b      	ldr	r3, [r7, #20]
 800e78e:	781b      	ldrb	r3, [r3, #0]
 800e790:	b2db      	uxtb	r3, r3
 800e792:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e794:	78fb      	ldrb	r3, [r7, #3]
 800e796:	b2db      	uxtb	r3, r3
 800e798:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e79c:	b2da      	uxtb	r2, r3
 800e79e:	4b31      	ldr	r3, [pc, #196]	@ (800e864 <xPortStartScheduler+0x134>)
 800e7a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e7a2:	4b31      	ldr	r3, [pc, #196]	@ (800e868 <xPortStartScheduler+0x138>)
 800e7a4:	2207      	movs	r2, #7
 800e7a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e7a8:	e009      	b.n	800e7be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800e7aa:	4b2f      	ldr	r3, [pc, #188]	@ (800e868 <xPortStartScheduler+0x138>)
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	3b01      	subs	r3, #1
 800e7b0:	4a2d      	ldr	r2, [pc, #180]	@ (800e868 <xPortStartScheduler+0x138>)
 800e7b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e7b4:	78fb      	ldrb	r3, [r7, #3]
 800e7b6:	b2db      	uxtb	r3, r3
 800e7b8:	005b      	lsls	r3, r3, #1
 800e7ba:	b2db      	uxtb	r3, r3
 800e7bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e7be:	78fb      	ldrb	r3, [r7, #3]
 800e7c0:	b2db      	uxtb	r3, r3
 800e7c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e7c6:	2b80      	cmp	r3, #128	@ 0x80
 800e7c8:	d0ef      	beq.n	800e7aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e7ca:	4b27      	ldr	r3, [pc, #156]	@ (800e868 <xPortStartScheduler+0x138>)
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	f1c3 0307 	rsb	r3, r3, #7
 800e7d2:	2b04      	cmp	r3, #4
 800e7d4:	d00b      	beq.n	800e7ee <xPortStartScheduler+0xbe>
	__asm volatile
 800e7d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7da:	f383 8811 	msr	BASEPRI, r3
 800e7de:	f3bf 8f6f 	isb	sy
 800e7e2:	f3bf 8f4f 	dsb	sy
 800e7e6:	60bb      	str	r3, [r7, #8]
}
 800e7e8:	bf00      	nop
 800e7ea:	bf00      	nop
 800e7ec:	e7fd      	b.n	800e7ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e7ee:	4b1e      	ldr	r3, [pc, #120]	@ (800e868 <xPortStartScheduler+0x138>)
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	021b      	lsls	r3, r3, #8
 800e7f4:	4a1c      	ldr	r2, [pc, #112]	@ (800e868 <xPortStartScheduler+0x138>)
 800e7f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e7f8:	4b1b      	ldr	r3, [pc, #108]	@ (800e868 <xPortStartScheduler+0x138>)
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e800:	4a19      	ldr	r2, [pc, #100]	@ (800e868 <xPortStartScheduler+0x138>)
 800e802:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	b2da      	uxtb	r2, r3
 800e808:	697b      	ldr	r3, [r7, #20]
 800e80a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e80c:	4b17      	ldr	r3, [pc, #92]	@ (800e86c <xPortStartScheduler+0x13c>)
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	4a16      	ldr	r2, [pc, #88]	@ (800e86c <xPortStartScheduler+0x13c>)
 800e812:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e816:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e818:	4b14      	ldr	r3, [pc, #80]	@ (800e86c <xPortStartScheduler+0x13c>)
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	4a13      	ldr	r2, [pc, #76]	@ (800e86c <xPortStartScheduler+0x13c>)
 800e81e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e822:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e824:	f000 f8da 	bl	800e9dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e828:	4b11      	ldr	r3, [pc, #68]	@ (800e870 <xPortStartScheduler+0x140>)
 800e82a:	2200      	movs	r2, #0
 800e82c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e82e:	f000 f8f9 	bl	800ea24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e832:	4b10      	ldr	r3, [pc, #64]	@ (800e874 <xPortStartScheduler+0x144>)
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	4a0f      	ldr	r2, [pc, #60]	@ (800e874 <xPortStartScheduler+0x144>)
 800e838:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e83c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e83e:	f7ff ff63 	bl	800e708 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e842:	f7ff fa71 	bl	800dd28 <vTaskSwitchContext>
	prvTaskExitError();
 800e846:	f7ff ff19 	bl	800e67c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e84a:	2300      	movs	r3, #0
}
 800e84c:	4618      	mov	r0, r3
 800e84e:	3718      	adds	r7, #24
 800e850:	46bd      	mov	sp, r7
 800e852:	bd80      	pop	{r7, pc}
 800e854:	e000ed00 	.word	0xe000ed00
 800e858:	410fc271 	.word	0x410fc271
 800e85c:	410fc270 	.word	0x410fc270
 800e860:	e000e400 	.word	0xe000e400
 800e864:	20001798 	.word	0x20001798
 800e868:	2000179c 	.word	0x2000179c
 800e86c:	e000ed20 	.word	0xe000ed20
 800e870:	200002d0 	.word	0x200002d0
 800e874:	e000ef34 	.word	0xe000ef34

0800e878 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e878:	b480      	push	{r7}
 800e87a:	b083      	sub	sp, #12
 800e87c:	af00      	add	r7, sp, #0
	__asm volatile
 800e87e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e882:	f383 8811 	msr	BASEPRI, r3
 800e886:	f3bf 8f6f 	isb	sy
 800e88a:	f3bf 8f4f 	dsb	sy
 800e88e:	607b      	str	r3, [r7, #4]
}
 800e890:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e892:	4b10      	ldr	r3, [pc, #64]	@ (800e8d4 <vPortEnterCritical+0x5c>)
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	3301      	adds	r3, #1
 800e898:	4a0e      	ldr	r2, [pc, #56]	@ (800e8d4 <vPortEnterCritical+0x5c>)
 800e89a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e89c:	4b0d      	ldr	r3, [pc, #52]	@ (800e8d4 <vPortEnterCritical+0x5c>)
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	2b01      	cmp	r3, #1
 800e8a2:	d110      	bne.n	800e8c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e8a4:	4b0c      	ldr	r3, [pc, #48]	@ (800e8d8 <vPortEnterCritical+0x60>)
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	b2db      	uxtb	r3, r3
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d00b      	beq.n	800e8c6 <vPortEnterCritical+0x4e>
	__asm volatile
 800e8ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8b2:	f383 8811 	msr	BASEPRI, r3
 800e8b6:	f3bf 8f6f 	isb	sy
 800e8ba:	f3bf 8f4f 	dsb	sy
 800e8be:	603b      	str	r3, [r7, #0]
}
 800e8c0:	bf00      	nop
 800e8c2:	bf00      	nop
 800e8c4:	e7fd      	b.n	800e8c2 <vPortEnterCritical+0x4a>
	}
}
 800e8c6:	bf00      	nop
 800e8c8:	370c      	adds	r7, #12
 800e8ca:	46bd      	mov	sp, r7
 800e8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d0:	4770      	bx	lr
 800e8d2:	bf00      	nop
 800e8d4:	200002d0 	.word	0x200002d0
 800e8d8:	e000ed04 	.word	0xe000ed04

0800e8dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e8dc:	b480      	push	{r7}
 800e8de:	b083      	sub	sp, #12
 800e8e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e8e2:	4b12      	ldr	r3, [pc, #72]	@ (800e92c <vPortExitCritical+0x50>)
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d10b      	bne.n	800e902 <vPortExitCritical+0x26>
	__asm volatile
 800e8ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8ee:	f383 8811 	msr	BASEPRI, r3
 800e8f2:	f3bf 8f6f 	isb	sy
 800e8f6:	f3bf 8f4f 	dsb	sy
 800e8fa:	607b      	str	r3, [r7, #4]
}
 800e8fc:	bf00      	nop
 800e8fe:	bf00      	nop
 800e900:	e7fd      	b.n	800e8fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e902:	4b0a      	ldr	r3, [pc, #40]	@ (800e92c <vPortExitCritical+0x50>)
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	3b01      	subs	r3, #1
 800e908:	4a08      	ldr	r2, [pc, #32]	@ (800e92c <vPortExitCritical+0x50>)
 800e90a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e90c:	4b07      	ldr	r3, [pc, #28]	@ (800e92c <vPortExitCritical+0x50>)
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d105      	bne.n	800e920 <vPortExitCritical+0x44>
 800e914:	2300      	movs	r3, #0
 800e916:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e918:	683b      	ldr	r3, [r7, #0]
 800e91a:	f383 8811 	msr	BASEPRI, r3
}
 800e91e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e920:	bf00      	nop
 800e922:	370c      	adds	r7, #12
 800e924:	46bd      	mov	sp, r7
 800e926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92a:	4770      	bx	lr
 800e92c:	200002d0 	.word	0x200002d0

0800e930 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e930:	f3ef 8009 	mrs	r0, PSP
 800e934:	f3bf 8f6f 	isb	sy
 800e938:	4b15      	ldr	r3, [pc, #84]	@ (800e990 <pxCurrentTCBConst>)
 800e93a:	681a      	ldr	r2, [r3, #0]
 800e93c:	f01e 0f10 	tst.w	lr, #16
 800e940:	bf08      	it	eq
 800e942:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e946:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e94a:	6010      	str	r0, [r2, #0]
 800e94c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e950:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e954:	f380 8811 	msr	BASEPRI, r0
 800e958:	f3bf 8f4f 	dsb	sy
 800e95c:	f3bf 8f6f 	isb	sy
 800e960:	f7ff f9e2 	bl	800dd28 <vTaskSwitchContext>
 800e964:	f04f 0000 	mov.w	r0, #0
 800e968:	f380 8811 	msr	BASEPRI, r0
 800e96c:	bc09      	pop	{r0, r3}
 800e96e:	6819      	ldr	r1, [r3, #0]
 800e970:	6808      	ldr	r0, [r1, #0]
 800e972:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e976:	f01e 0f10 	tst.w	lr, #16
 800e97a:	bf08      	it	eq
 800e97c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e980:	f380 8809 	msr	PSP, r0
 800e984:	f3bf 8f6f 	isb	sy
 800e988:	4770      	bx	lr
 800e98a:	bf00      	nop
 800e98c:	f3af 8000 	nop.w

0800e990 <pxCurrentTCBConst>:
 800e990:	2000166c 	.word	0x2000166c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e994:	bf00      	nop
 800e996:	bf00      	nop

0800e998 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e998:	b580      	push	{r7, lr}
 800e99a:	b082      	sub	sp, #8
 800e99c:	af00      	add	r7, sp, #0
	__asm volatile
 800e99e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9a2:	f383 8811 	msr	BASEPRI, r3
 800e9a6:	f3bf 8f6f 	isb	sy
 800e9aa:	f3bf 8f4f 	dsb	sy
 800e9ae:	607b      	str	r3, [r7, #4]
}
 800e9b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e9b2:	f7ff f8ff 	bl	800dbb4 <xTaskIncrementTick>
 800e9b6:	4603      	mov	r3, r0
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d003      	beq.n	800e9c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e9bc:	4b06      	ldr	r3, [pc, #24]	@ (800e9d8 <SysTick_Handler+0x40>)
 800e9be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e9c2:	601a      	str	r2, [r3, #0]
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e9c8:	683b      	ldr	r3, [r7, #0]
 800e9ca:	f383 8811 	msr	BASEPRI, r3
}
 800e9ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e9d0:	bf00      	nop
 800e9d2:	3708      	adds	r7, #8
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	bd80      	pop	{r7, pc}
 800e9d8:	e000ed04 	.word	0xe000ed04

0800e9dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e9dc:	b480      	push	{r7}
 800e9de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e9e0:	4b0b      	ldr	r3, [pc, #44]	@ (800ea10 <vPortSetupTimerInterrupt+0x34>)
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e9e6:	4b0b      	ldr	r3, [pc, #44]	@ (800ea14 <vPortSetupTimerInterrupt+0x38>)
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e9ec:	4b0a      	ldr	r3, [pc, #40]	@ (800ea18 <vPortSetupTimerInterrupt+0x3c>)
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	4a0a      	ldr	r2, [pc, #40]	@ (800ea1c <vPortSetupTimerInterrupt+0x40>)
 800e9f2:	fba2 2303 	umull	r2, r3, r2, r3
 800e9f6:	099b      	lsrs	r3, r3, #6
 800e9f8:	4a09      	ldr	r2, [pc, #36]	@ (800ea20 <vPortSetupTimerInterrupt+0x44>)
 800e9fa:	3b01      	subs	r3, #1
 800e9fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e9fe:	4b04      	ldr	r3, [pc, #16]	@ (800ea10 <vPortSetupTimerInterrupt+0x34>)
 800ea00:	2207      	movs	r2, #7
 800ea02:	601a      	str	r2, [r3, #0]
}
 800ea04:	bf00      	nop
 800ea06:	46bd      	mov	sp, r7
 800ea08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0c:	4770      	bx	lr
 800ea0e:	bf00      	nop
 800ea10:	e000e010 	.word	0xe000e010
 800ea14:	e000e018 	.word	0xe000e018
 800ea18:	20000004 	.word	0x20000004
 800ea1c:	10624dd3 	.word	0x10624dd3
 800ea20:	e000e014 	.word	0xe000e014

0800ea24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ea24:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ea34 <vPortEnableVFP+0x10>
 800ea28:	6801      	ldr	r1, [r0, #0]
 800ea2a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ea2e:	6001      	str	r1, [r0, #0]
 800ea30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ea32:	bf00      	nop
 800ea34:	e000ed88 	.word	0xe000ed88

0800ea38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ea38:	b480      	push	{r7}
 800ea3a:	b085      	sub	sp, #20
 800ea3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ea3e:	f3ef 8305 	mrs	r3, IPSR
 800ea42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	2b0f      	cmp	r3, #15
 800ea48:	d915      	bls.n	800ea76 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ea4a:	4a18      	ldr	r2, [pc, #96]	@ (800eaac <vPortValidateInterruptPriority+0x74>)
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	4413      	add	r3, r2
 800ea50:	781b      	ldrb	r3, [r3, #0]
 800ea52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ea54:	4b16      	ldr	r3, [pc, #88]	@ (800eab0 <vPortValidateInterruptPriority+0x78>)
 800ea56:	781b      	ldrb	r3, [r3, #0]
 800ea58:	7afa      	ldrb	r2, [r7, #11]
 800ea5a:	429a      	cmp	r2, r3
 800ea5c:	d20b      	bcs.n	800ea76 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ea5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea62:	f383 8811 	msr	BASEPRI, r3
 800ea66:	f3bf 8f6f 	isb	sy
 800ea6a:	f3bf 8f4f 	dsb	sy
 800ea6e:	607b      	str	r3, [r7, #4]
}
 800ea70:	bf00      	nop
 800ea72:	bf00      	nop
 800ea74:	e7fd      	b.n	800ea72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ea76:	4b0f      	ldr	r3, [pc, #60]	@ (800eab4 <vPortValidateInterruptPriority+0x7c>)
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ea7e:	4b0e      	ldr	r3, [pc, #56]	@ (800eab8 <vPortValidateInterruptPriority+0x80>)
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	429a      	cmp	r2, r3
 800ea84:	d90b      	bls.n	800ea9e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800ea86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea8a:	f383 8811 	msr	BASEPRI, r3
 800ea8e:	f3bf 8f6f 	isb	sy
 800ea92:	f3bf 8f4f 	dsb	sy
 800ea96:	603b      	str	r3, [r7, #0]
}
 800ea98:	bf00      	nop
 800ea9a:	bf00      	nop
 800ea9c:	e7fd      	b.n	800ea9a <vPortValidateInterruptPriority+0x62>
	}
 800ea9e:	bf00      	nop
 800eaa0:	3714      	adds	r7, #20
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa8:	4770      	bx	lr
 800eaaa:	bf00      	nop
 800eaac:	e000e3f0 	.word	0xe000e3f0
 800eab0:	20001798 	.word	0x20001798
 800eab4:	e000ed0c 	.word	0xe000ed0c
 800eab8:	2000179c 	.word	0x2000179c

0800eabc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b08a      	sub	sp, #40	@ 0x28
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800eac4:	2300      	movs	r3, #0
 800eac6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800eac8:	f7fe ffc8 	bl	800da5c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800eacc:	4b5c      	ldr	r3, [pc, #368]	@ (800ec40 <pvPortMalloc+0x184>)
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d101      	bne.n	800ead8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ead4:	f000 f924 	bl	800ed20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ead8:	4b5a      	ldr	r3, [pc, #360]	@ (800ec44 <pvPortMalloc+0x188>)
 800eada:	681a      	ldr	r2, [r3, #0]
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	4013      	ands	r3, r2
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	f040 8095 	bne.w	800ec10 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d01e      	beq.n	800eb2a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800eaec:	2208      	movs	r2, #8
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	4413      	add	r3, r2
 800eaf2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	f003 0307 	and.w	r3, r3, #7
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d015      	beq.n	800eb2a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	f023 0307 	bic.w	r3, r3, #7
 800eb04:	3308      	adds	r3, #8
 800eb06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	f003 0307 	and.w	r3, r3, #7
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d00b      	beq.n	800eb2a <pvPortMalloc+0x6e>
	__asm volatile
 800eb12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb16:	f383 8811 	msr	BASEPRI, r3
 800eb1a:	f3bf 8f6f 	isb	sy
 800eb1e:	f3bf 8f4f 	dsb	sy
 800eb22:	617b      	str	r3, [r7, #20]
}
 800eb24:	bf00      	nop
 800eb26:	bf00      	nop
 800eb28:	e7fd      	b.n	800eb26 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d06f      	beq.n	800ec10 <pvPortMalloc+0x154>
 800eb30:	4b45      	ldr	r3, [pc, #276]	@ (800ec48 <pvPortMalloc+0x18c>)
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	687a      	ldr	r2, [r7, #4]
 800eb36:	429a      	cmp	r2, r3
 800eb38:	d86a      	bhi.n	800ec10 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800eb3a:	4b44      	ldr	r3, [pc, #272]	@ (800ec4c <pvPortMalloc+0x190>)
 800eb3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800eb3e:	4b43      	ldr	r3, [pc, #268]	@ (800ec4c <pvPortMalloc+0x190>)
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eb44:	e004      	b.n	800eb50 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800eb46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800eb4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eb50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb52:	685b      	ldr	r3, [r3, #4]
 800eb54:	687a      	ldr	r2, [r7, #4]
 800eb56:	429a      	cmp	r2, r3
 800eb58:	d903      	bls.n	800eb62 <pvPortMalloc+0xa6>
 800eb5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d1f1      	bne.n	800eb46 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800eb62:	4b37      	ldr	r3, [pc, #220]	@ (800ec40 <pvPortMalloc+0x184>)
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eb68:	429a      	cmp	r2, r3
 800eb6a:	d051      	beq.n	800ec10 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800eb6c:	6a3b      	ldr	r3, [r7, #32]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	2208      	movs	r2, #8
 800eb72:	4413      	add	r3, r2
 800eb74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800eb76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb78:	681a      	ldr	r2, [r3, #0]
 800eb7a:	6a3b      	ldr	r3, [r7, #32]
 800eb7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800eb7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb80:	685a      	ldr	r2, [r3, #4]
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	1ad2      	subs	r2, r2, r3
 800eb86:	2308      	movs	r3, #8
 800eb88:	005b      	lsls	r3, r3, #1
 800eb8a:	429a      	cmp	r2, r3
 800eb8c:	d920      	bls.n	800ebd0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800eb8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	4413      	add	r3, r2
 800eb94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800eb96:	69bb      	ldr	r3, [r7, #24]
 800eb98:	f003 0307 	and.w	r3, r3, #7
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d00b      	beq.n	800ebb8 <pvPortMalloc+0xfc>
	__asm volatile
 800eba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eba4:	f383 8811 	msr	BASEPRI, r3
 800eba8:	f3bf 8f6f 	isb	sy
 800ebac:	f3bf 8f4f 	dsb	sy
 800ebb0:	613b      	str	r3, [r7, #16]
}
 800ebb2:	bf00      	nop
 800ebb4:	bf00      	nop
 800ebb6:	e7fd      	b.n	800ebb4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ebb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebba:	685a      	ldr	r2, [r3, #4]
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	1ad2      	subs	r2, r2, r3
 800ebc0:	69bb      	ldr	r3, [r7, #24]
 800ebc2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ebc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebc6:	687a      	ldr	r2, [r7, #4]
 800ebc8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ebca:	69b8      	ldr	r0, [r7, #24]
 800ebcc:	f000 f90a 	bl	800ede4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ebd0:	4b1d      	ldr	r3, [pc, #116]	@ (800ec48 <pvPortMalloc+0x18c>)
 800ebd2:	681a      	ldr	r2, [r3, #0]
 800ebd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebd6:	685b      	ldr	r3, [r3, #4]
 800ebd8:	1ad3      	subs	r3, r2, r3
 800ebda:	4a1b      	ldr	r2, [pc, #108]	@ (800ec48 <pvPortMalloc+0x18c>)
 800ebdc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ebde:	4b1a      	ldr	r3, [pc, #104]	@ (800ec48 <pvPortMalloc+0x18c>)
 800ebe0:	681a      	ldr	r2, [r3, #0]
 800ebe2:	4b1b      	ldr	r3, [pc, #108]	@ (800ec50 <pvPortMalloc+0x194>)
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	429a      	cmp	r2, r3
 800ebe8:	d203      	bcs.n	800ebf2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ebea:	4b17      	ldr	r3, [pc, #92]	@ (800ec48 <pvPortMalloc+0x18c>)
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	4a18      	ldr	r2, [pc, #96]	@ (800ec50 <pvPortMalloc+0x194>)
 800ebf0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ebf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebf4:	685a      	ldr	r2, [r3, #4]
 800ebf6:	4b13      	ldr	r3, [pc, #76]	@ (800ec44 <pvPortMalloc+0x188>)
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	431a      	orrs	r2, r3
 800ebfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebfe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ec00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec02:	2200      	movs	r2, #0
 800ec04:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ec06:	4b13      	ldr	r3, [pc, #76]	@ (800ec54 <pvPortMalloc+0x198>)
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	3301      	adds	r3, #1
 800ec0c:	4a11      	ldr	r2, [pc, #68]	@ (800ec54 <pvPortMalloc+0x198>)
 800ec0e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ec10:	f7fe ff32 	bl	800da78 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ec14:	69fb      	ldr	r3, [r7, #28]
 800ec16:	f003 0307 	and.w	r3, r3, #7
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d00b      	beq.n	800ec36 <pvPortMalloc+0x17a>
	__asm volatile
 800ec1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec22:	f383 8811 	msr	BASEPRI, r3
 800ec26:	f3bf 8f6f 	isb	sy
 800ec2a:	f3bf 8f4f 	dsb	sy
 800ec2e:	60fb      	str	r3, [r7, #12]
}
 800ec30:	bf00      	nop
 800ec32:	bf00      	nop
 800ec34:	e7fd      	b.n	800ec32 <pvPortMalloc+0x176>
	return pvReturn;
 800ec36:	69fb      	ldr	r3, [r7, #28]
}
 800ec38:	4618      	mov	r0, r3
 800ec3a:	3728      	adds	r7, #40	@ 0x28
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	bd80      	pop	{r7, pc}
 800ec40:	200053a8 	.word	0x200053a8
 800ec44:	200053bc 	.word	0x200053bc
 800ec48:	200053ac 	.word	0x200053ac
 800ec4c:	200053a0 	.word	0x200053a0
 800ec50:	200053b0 	.word	0x200053b0
 800ec54:	200053b4 	.word	0x200053b4

0800ec58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ec58:	b580      	push	{r7, lr}
 800ec5a:	b086      	sub	sp, #24
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d04f      	beq.n	800ed0a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ec6a:	2308      	movs	r3, #8
 800ec6c:	425b      	negs	r3, r3
 800ec6e:	697a      	ldr	r2, [r7, #20]
 800ec70:	4413      	add	r3, r2
 800ec72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ec74:	697b      	ldr	r3, [r7, #20]
 800ec76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ec78:	693b      	ldr	r3, [r7, #16]
 800ec7a:	685a      	ldr	r2, [r3, #4]
 800ec7c:	4b25      	ldr	r3, [pc, #148]	@ (800ed14 <vPortFree+0xbc>)
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	4013      	ands	r3, r2
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d10b      	bne.n	800ec9e <vPortFree+0x46>
	__asm volatile
 800ec86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec8a:	f383 8811 	msr	BASEPRI, r3
 800ec8e:	f3bf 8f6f 	isb	sy
 800ec92:	f3bf 8f4f 	dsb	sy
 800ec96:	60fb      	str	r3, [r7, #12]
}
 800ec98:	bf00      	nop
 800ec9a:	bf00      	nop
 800ec9c:	e7fd      	b.n	800ec9a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ec9e:	693b      	ldr	r3, [r7, #16]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d00b      	beq.n	800ecbe <vPortFree+0x66>
	__asm volatile
 800eca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecaa:	f383 8811 	msr	BASEPRI, r3
 800ecae:	f3bf 8f6f 	isb	sy
 800ecb2:	f3bf 8f4f 	dsb	sy
 800ecb6:	60bb      	str	r3, [r7, #8]
}
 800ecb8:	bf00      	nop
 800ecba:	bf00      	nop
 800ecbc:	e7fd      	b.n	800ecba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ecbe:	693b      	ldr	r3, [r7, #16]
 800ecc0:	685a      	ldr	r2, [r3, #4]
 800ecc2:	4b14      	ldr	r3, [pc, #80]	@ (800ed14 <vPortFree+0xbc>)
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	4013      	ands	r3, r2
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d01e      	beq.n	800ed0a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800eccc:	693b      	ldr	r3, [r7, #16]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d11a      	bne.n	800ed0a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ecd4:	693b      	ldr	r3, [r7, #16]
 800ecd6:	685a      	ldr	r2, [r3, #4]
 800ecd8:	4b0e      	ldr	r3, [pc, #56]	@ (800ed14 <vPortFree+0xbc>)
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	43db      	mvns	r3, r3
 800ecde:	401a      	ands	r2, r3
 800ece0:	693b      	ldr	r3, [r7, #16]
 800ece2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ece4:	f7fe feba 	bl	800da5c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ece8:	693b      	ldr	r3, [r7, #16]
 800ecea:	685a      	ldr	r2, [r3, #4]
 800ecec:	4b0a      	ldr	r3, [pc, #40]	@ (800ed18 <vPortFree+0xc0>)
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	4413      	add	r3, r2
 800ecf2:	4a09      	ldr	r2, [pc, #36]	@ (800ed18 <vPortFree+0xc0>)
 800ecf4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ecf6:	6938      	ldr	r0, [r7, #16]
 800ecf8:	f000 f874 	bl	800ede4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ecfc:	4b07      	ldr	r3, [pc, #28]	@ (800ed1c <vPortFree+0xc4>)
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	3301      	adds	r3, #1
 800ed02:	4a06      	ldr	r2, [pc, #24]	@ (800ed1c <vPortFree+0xc4>)
 800ed04:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ed06:	f7fe feb7 	bl	800da78 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ed0a:	bf00      	nop
 800ed0c:	3718      	adds	r7, #24
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	bd80      	pop	{r7, pc}
 800ed12:	bf00      	nop
 800ed14:	200053bc 	.word	0x200053bc
 800ed18:	200053ac 	.word	0x200053ac
 800ed1c:	200053b8 	.word	0x200053b8

0800ed20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ed20:	b480      	push	{r7}
 800ed22:	b085      	sub	sp, #20
 800ed24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ed26:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800ed2a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ed2c:	4b27      	ldr	r3, [pc, #156]	@ (800edcc <prvHeapInit+0xac>)
 800ed2e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	f003 0307 	and.w	r3, r3, #7
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d00c      	beq.n	800ed54 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	3307      	adds	r3, #7
 800ed3e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	f023 0307 	bic.w	r3, r3, #7
 800ed46:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ed48:	68ba      	ldr	r2, [r7, #8]
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	1ad3      	subs	r3, r2, r3
 800ed4e:	4a1f      	ldr	r2, [pc, #124]	@ (800edcc <prvHeapInit+0xac>)
 800ed50:	4413      	add	r3, r2
 800ed52:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ed58:	4a1d      	ldr	r2, [pc, #116]	@ (800edd0 <prvHeapInit+0xb0>)
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ed5e:	4b1c      	ldr	r3, [pc, #112]	@ (800edd0 <prvHeapInit+0xb0>)
 800ed60:	2200      	movs	r2, #0
 800ed62:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	68ba      	ldr	r2, [r7, #8]
 800ed68:	4413      	add	r3, r2
 800ed6a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ed6c:	2208      	movs	r2, #8
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	1a9b      	subs	r3, r3, r2
 800ed72:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	f023 0307 	bic.w	r3, r3, #7
 800ed7a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	4a15      	ldr	r2, [pc, #84]	@ (800edd4 <prvHeapInit+0xb4>)
 800ed80:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ed82:	4b14      	ldr	r3, [pc, #80]	@ (800edd4 <prvHeapInit+0xb4>)
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	2200      	movs	r2, #0
 800ed88:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ed8a:	4b12      	ldr	r3, [pc, #72]	@ (800edd4 <prvHeapInit+0xb4>)
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	2200      	movs	r2, #0
 800ed90:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ed96:	683b      	ldr	r3, [r7, #0]
 800ed98:	68fa      	ldr	r2, [r7, #12]
 800ed9a:	1ad2      	subs	r2, r2, r3
 800ed9c:	683b      	ldr	r3, [r7, #0]
 800ed9e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800eda0:	4b0c      	ldr	r3, [pc, #48]	@ (800edd4 <prvHeapInit+0xb4>)
 800eda2:	681a      	ldr	r2, [r3, #0]
 800eda4:	683b      	ldr	r3, [r7, #0]
 800eda6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eda8:	683b      	ldr	r3, [r7, #0]
 800edaa:	685b      	ldr	r3, [r3, #4]
 800edac:	4a0a      	ldr	r2, [pc, #40]	@ (800edd8 <prvHeapInit+0xb8>)
 800edae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800edb0:	683b      	ldr	r3, [r7, #0]
 800edb2:	685b      	ldr	r3, [r3, #4]
 800edb4:	4a09      	ldr	r2, [pc, #36]	@ (800eddc <prvHeapInit+0xbc>)
 800edb6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800edb8:	4b09      	ldr	r3, [pc, #36]	@ (800ede0 <prvHeapInit+0xc0>)
 800edba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800edbe:	601a      	str	r2, [r3, #0]
}
 800edc0:	bf00      	nop
 800edc2:	3714      	adds	r7, #20
 800edc4:	46bd      	mov	sp, r7
 800edc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edca:	4770      	bx	lr
 800edcc:	200017a0 	.word	0x200017a0
 800edd0:	200053a0 	.word	0x200053a0
 800edd4:	200053a8 	.word	0x200053a8
 800edd8:	200053b0 	.word	0x200053b0
 800eddc:	200053ac 	.word	0x200053ac
 800ede0:	200053bc 	.word	0x200053bc

0800ede4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ede4:	b480      	push	{r7}
 800ede6:	b085      	sub	sp, #20
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800edec:	4b28      	ldr	r3, [pc, #160]	@ (800ee90 <prvInsertBlockIntoFreeList+0xac>)
 800edee:	60fb      	str	r3, [r7, #12]
 800edf0:	e002      	b.n	800edf8 <prvInsertBlockIntoFreeList+0x14>
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	60fb      	str	r3, [r7, #12]
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	687a      	ldr	r2, [r7, #4]
 800edfe:	429a      	cmp	r2, r3
 800ee00:	d8f7      	bhi.n	800edf2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	685b      	ldr	r3, [r3, #4]
 800ee0a:	68ba      	ldr	r2, [r7, #8]
 800ee0c:	4413      	add	r3, r2
 800ee0e:	687a      	ldr	r2, [r7, #4]
 800ee10:	429a      	cmp	r2, r3
 800ee12:	d108      	bne.n	800ee26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	685a      	ldr	r2, [r3, #4]
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	685b      	ldr	r3, [r3, #4]
 800ee1c:	441a      	add	r2, r3
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	685b      	ldr	r3, [r3, #4]
 800ee2e:	68ba      	ldr	r2, [r7, #8]
 800ee30:	441a      	add	r2, r3
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	429a      	cmp	r2, r3
 800ee38:	d118      	bne.n	800ee6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	681a      	ldr	r2, [r3, #0]
 800ee3e:	4b15      	ldr	r3, [pc, #84]	@ (800ee94 <prvInsertBlockIntoFreeList+0xb0>)
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	429a      	cmp	r2, r3
 800ee44:	d00d      	beq.n	800ee62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	685a      	ldr	r2, [r3, #4]
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	685b      	ldr	r3, [r3, #4]
 800ee50:	441a      	add	r2, r3
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	681a      	ldr	r2, [r3, #0]
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	601a      	str	r2, [r3, #0]
 800ee60:	e008      	b.n	800ee74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ee62:	4b0c      	ldr	r3, [pc, #48]	@ (800ee94 <prvInsertBlockIntoFreeList+0xb0>)
 800ee64:	681a      	ldr	r2, [r3, #0]
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	601a      	str	r2, [r3, #0]
 800ee6a:	e003      	b.n	800ee74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	681a      	ldr	r2, [r3, #0]
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ee74:	68fa      	ldr	r2, [r7, #12]
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	429a      	cmp	r2, r3
 800ee7a:	d002      	beq.n	800ee82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	687a      	ldr	r2, [r7, #4]
 800ee80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ee82:	bf00      	nop
 800ee84:	3714      	adds	r7, #20
 800ee86:	46bd      	mov	sp, r7
 800ee88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee8c:	4770      	bx	lr
 800ee8e:	bf00      	nop
 800ee90:	200053a0 	.word	0x200053a0
 800ee94:	200053a8 	.word	0x200053a8

0800ee98 <sbrk_aligned>:
 800ee98:	b570      	push	{r4, r5, r6, lr}
 800ee9a:	4e0f      	ldr	r6, [pc, #60]	@ (800eed8 <sbrk_aligned+0x40>)
 800ee9c:	460c      	mov	r4, r1
 800ee9e:	6831      	ldr	r1, [r6, #0]
 800eea0:	4605      	mov	r5, r0
 800eea2:	b911      	cbnz	r1, 800eeaa <sbrk_aligned+0x12>
 800eea4:	f000 fba4 	bl	800f5f0 <_sbrk_r>
 800eea8:	6030      	str	r0, [r6, #0]
 800eeaa:	4621      	mov	r1, r4
 800eeac:	4628      	mov	r0, r5
 800eeae:	f000 fb9f 	bl	800f5f0 <_sbrk_r>
 800eeb2:	1c43      	adds	r3, r0, #1
 800eeb4:	d103      	bne.n	800eebe <sbrk_aligned+0x26>
 800eeb6:	f04f 34ff 	mov.w	r4, #4294967295
 800eeba:	4620      	mov	r0, r4
 800eebc:	bd70      	pop	{r4, r5, r6, pc}
 800eebe:	1cc4      	adds	r4, r0, #3
 800eec0:	f024 0403 	bic.w	r4, r4, #3
 800eec4:	42a0      	cmp	r0, r4
 800eec6:	d0f8      	beq.n	800eeba <sbrk_aligned+0x22>
 800eec8:	1a21      	subs	r1, r4, r0
 800eeca:	4628      	mov	r0, r5
 800eecc:	f000 fb90 	bl	800f5f0 <_sbrk_r>
 800eed0:	3001      	adds	r0, #1
 800eed2:	d1f2      	bne.n	800eeba <sbrk_aligned+0x22>
 800eed4:	e7ef      	b.n	800eeb6 <sbrk_aligned+0x1e>
 800eed6:	bf00      	nop
 800eed8:	200053c0 	.word	0x200053c0

0800eedc <_malloc_r>:
 800eedc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eee0:	1ccd      	adds	r5, r1, #3
 800eee2:	f025 0503 	bic.w	r5, r5, #3
 800eee6:	3508      	adds	r5, #8
 800eee8:	2d0c      	cmp	r5, #12
 800eeea:	bf38      	it	cc
 800eeec:	250c      	movcc	r5, #12
 800eeee:	2d00      	cmp	r5, #0
 800eef0:	4606      	mov	r6, r0
 800eef2:	db01      	blt.n	800eef8 <_malloc_r+0x1c>
 800eef4:	42a9      	cmp	r1, r5
 800eef6:	d904      	bls.n	800ef02 <_malloc_r+0x26>
 800eef8:	230c      	movs	r3, #12
 800eefa:	6033      	str	r3, [r6, #0]
 800eefc:	2000      	movs	r0, #0
 800eefe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef02:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800efd8 <_malloc_r+0xfc>
 800ef06:	f000 f869 	bl	800efdc <__malloc_lock>
 800ef0a:	f8d8 3000 	ldr.w	r3, [r8]
 800ef0e:	461c      	mov	r4, r3
 800ef10:	bb44      	cbnz	r4, 800ef64 <_malloc_r+0x88>
 800ef12:	4629      	mov	r1, r5
 800ef14:	4630      	mov	r0, r6
 800ef16:	f7ff ffbf 	bl	800ee98 <sbrk_aligned>
 800ef1a:	1c43      	adds	r3, r0, #1
 800ef1c:	4604      	mov	r4, r0
 800ef1e:	d158      	bne.n	800efd2 <_malloc_r+0xf6>
 800ef20:	f8d8 4000 	ldr.w	r4, [r8]
 800ef24:	4627      	mov	r7, r4
 800ef26:	2f00      	cmp	r7, #0
 800ef28:	d143      	bne.n	800efb2 <_malloc_r+0xd6>
 800ef2a:	2c00      	cmp	r4, #0
 800ef2c:	d04b      	beq.n	800efc6 <_malloc_r+0xea>
 800ef2e:	6823      	ldr	r3, [r4, #0]
 800ef30:	4639      	mov	r1, r7
 800ef32:	4630      	mov	r0, r6
 800ef34:	eb04 0903 	add.w	r9, r4, r3
 800ef38:	f000 fb5a 	bl	800f5f0 <_sbrk_r>
 800ef3c:	4581      	cmp	r9, r0
 800ef3e:	d142      	bne.n	800efc6 <_malloc_r+0xea>
 800ef40:	6821      	ldr	r1, [r4, #0]
 800ef42:	1a6d      	subs	r5, r5, r1
 800ef44:	4629      	mov	r1, r5
 800ef46:	4630      	mov	r0, r6
 800ef48:	f7ff ffa6 	bl	800ee98 <sbrk_aligned>
 800ef4c:	3001      	adds	r0, #1
 800ef4e:	d03a      	beq.n	800efc6 <_malloc_r+0xea>
 800ef50:	6823      	ldr	r3, [r4, #0]
 800ef52:	442b      	add	r3, r5
 800ef54:	6023      	str	r3, [r4, #0]
 800ef56:	f8d8 3000 	ldr.w	r3, [r8]
 800ef5a:	685a      	ldr	r2, [r3, #4]
 800ef5c:	bb62      	cbnz	r2, 800efb8 <_malloc_r+0xdc>
 800ef5e:	f8c8 7000 	str.w	r7, [r8]
 800ef62:	e00f      	b.n	800ef84 <_malloc_r+0xa8>
 800ef64:	6822      	ldr	r2, [r4, #0]
 800ef66:	1b52      	subs	r2, r2, r5
 800ef68:	d420      	bmi.n	800efac <_malloc_r+0xd0>
 800ef6a:	2a0b      	cmp	r2, #11
 800ef6c:	d917      	bls.n	800ef9e <_malloc_r+0xc2>
 800ef6e:	1961      	adds	r1, r4, r5
 800ef70:	42a3      	cmp	r3, r4
 800ef72:	6025      	str	r5, [r4, #0]
 800ef74:	bf18      	it	ne
 800ef76:	6059      	strne	r1, [r3, #4]
 800ef78:	6863      	ldr	r3, [r4, #4]
 800ef7a:	bf08      	it	eq
 800ef7c:	f8c8 1000 	streq.w	r1, [r8]
 800ef80:	5162      	str	r2, [r4, r5]
 800ef82:	604b      	str	r3, [r1, #4]
 800ef84:	4630      	mov	r0, r6
 800ef86:	f000 f82f 	bl	800efe8 <__malloc_unlock>
 800ef8a:	f104 000b 	add.w	r0, r4, #11
 800ef8e:	1d23      	adds	r3, r4, #4
 800ef90:	f020 0007 	bic.w	r0, r0, #7
 800ef94:	1ac2      	subs	r2, r0, r3
 800ef96:	bf1c      	itt	ne
 800ef98:	1a1b      	subne	r3, r3, r0
 800ef9a:	50a3      	strne	r3, [r4, r2]
 800ef9c:	e7af      	b.n	800eefe <_malloc_r+0x22>
 800ef9e:	6862      	ldr	r2, [r4, #4]
 800efa0:	42a3      	cmp	r3, r4
 800efa2:	bf0c      	ite	eq
 800efa4:	f8c8 2000 	streq.w	r2, [r8]
 800efa8:	605a      	strne	r2, [r3, #4]
 800efaa:	e7eb      	b.n	800ef84 <_malloc_r+0xa8>
 800efac:	4623      	mov	r3, r4
 800efae:	6864      	ldr	r4, [r4, #4]
 800efb0:	e7ae      	b.n	800ef10 <_malloc_r+0x34>
 800efb2:	463c      	mov	r4, r7
 800efb4:	687f      	ldr	r7, [r7, #4]
 800efb6:	e7b6      	b.n	800ef26 <_malloc_r+0x4a>
 800efb8:	461a      	mov	r2, r3
 800efba:	685b      	ldr	r3, [r3, #4]
 800efbc:	42a3      	cmp	r3, r4
 800efbe:	d1fb      	bne.n	800efb8 <_malloc_r+0xdc>
 800efc0:	2300      	movs	r3, #0
 800efc2:	6053      	str	r3, [r2, #4]
 800efc4:	e7de      	b.n	800ef84 <_malloc_r+0xa8>
 800efc6:	230c      	movs	r3, #12
 800efc8:	6033      	str	r3, [r6, #0]
 800efca:	4630      	mov	r0, r6
 800efcc:	f000 f80c 	bl	800efe8 <__malloc_unlock>
 800efd0:	e794      	b.n	800eefc <_malloc_r+0x20>
 800efd2:	6005      	str	r5, [r0, #0]
 800efd4:	e7d6      	b.n	800ef84 <_malloc_r+0xa8>
 800efd6:	bf00      	nop
 800efd8:	200053c4 	.word	0x200053c4

0800efdc <__malloc_lock>:
 800efdc:	4801      	ldr	r0, [pc, #4]	@ (800efe4 <__malloc_lock+0x8>)
 800efde:	f000 bb54 	b.w	800f68a <__retarget_lock_acquire_recursive>
 800efe2:	bf00      	nop
 800efe4:	20005508 	.word	0x20005508

0800efe8 <__malloc_unlock>:
 800efe8:	4801      	ldr	r0, [pc, #4]	@ (800eff0 <__malloc_unlock+0x8>)
 800efea:	f000 bb4f 	b.w	800f68c <__retarget_lock_release_recursive>
 800efee:	bf00      	nop
 800eff0:	20005508 	.word	0x20005508

0800eff4 <_realloc_r>:
 800eff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eff8:	4680      	mov	r8, r0
 800effa:	4615      	mov	r5, r2
 800effc:	460c      	mov	r4, r1
 800effe:	b921      	cbnz	r1, 800f00a <_realloc_r+0x16>
 800f000:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f004:	4611      	mov	r1, r2
 800f006:	f7ff bf69 	b.w	800eedc <_malloc_r>
 800f00a:	b92a      	cbnz	r2, 800f018 <_realloc_r+0x24>
 800f00c:	f000 fb4e 	bl	800f6ac <_free_r>
 800f010:	2400      	movs	r4, #0
 800f012:	4620      	mov	r0, r4
 800f014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f018:	f000 fb92 	bl	800f740 <_malloc_usable_size_r>
 800f01c:	4285      	cmp	r5, r0
 800f01e:	4606      	mov	r6, r0
 800f020:	d802      	bhi.n	800f028 <_realloc_r+0x34>
 800f022:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f026:	d8f4      	bhi.n	800f012 <_realloc_r+0x1e>
 800f028:	4629      	mov	r1, r5
 800f02a:	4640      	mov	r0, r8
 800f02c:	f7ff ff56 	bl	800eedc <_malloc_r>
 800f030:	4607      	mov	r7, r0
 800f032:	2800      	cmp	r0, #0
 800f034:	d0ec      	beq.n	800f010 <_realloc_r+0x1c>
 800f036:	42b5      	cmp	r5, r6
 800f038:	462a      	mov	r2, r5
 800f03a:	4621      	mov	r1, r4
 800f03c:	bf28      	it	cs
 800f03e:	4632      	movcs	r2, r6
 800f040:	f000 fb25 	bl	800f68e <memcpy>
 800f044:	4621      	mov	r1, r4
 800f046:	4640      	mov	r0, r8
 800f048:	f000 fb30 	bl	800f6ac <_free_r>
 800f04c:	463c      	mov	r4, r7
 800f04e:	e7e0      	b.n	800f012 <_realloc_r+0x1e>

0800f050 <std>:
 800f050:	2300      	movs	r3, #0
 800f052:	b510      	push	{r4, lr}
 800f054:	4604      	mov	r4, r0
 800f056:	e9c0 3300 	strd	r3, r3, [r0]
 800f05a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f05e:	6083      	str	r3, [r0, #8]
 800f060:	8181      	strh	r1, [r0, #12]
 800f062:	6643      	str	r3, [r0, #100]	@ 0x64
 800f064:	81c2      	strh	r2, [r0, #14]
 800f066:	6183      	str	r3, [r0, #24]
 800f068:	4619      	mov	r1, r3
 800f06a:	2208      	movs	r2, #8
 800f06c:	305c      	adds	r0, #92	@ 0x5c
 800f06e:	f000 fa2d 	bl	800f4cc <memset>
 800f072:	4b0d      	ldr	r3, [pc, #52]	@ (800f0a8 <std+0x58>)
 800f074:	6263      	str	r3, [r4, #36]	@ 0x24
 800f076:	4b0d      	ldr	r3, [pc, #52]	@ (800f0ac <std+0x5c>)
 800f078:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f07a:	4b0d      	ldr	r3, [pc, #52]	@ (800f0b0 <std+0x60>)
 800f07c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f07e:	4b0d      	ldr	r3, [pc, #52]	@ (800f0b4 <std+0x64>)
 800f080:	6323      	str	r3, [r4, #48]	@ 0x30
 800f082:	4b0d      	ldr	r3, [pc, #52]	@ (800f0b8 <std+0x68>)
 800f084:	6224      	str	r4, [r4, #32]
 800f086:	429c      	cmp	r4, r3
 800f088:	d006      	beq.n	800f098 <std+0x48>
 800f08a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f08e:	4294      	cmp	r4, r2
 800f090:	d002      	beq.n	800f098 <std+0x48>
 800f092:	33d0      	adds	r3, #208	@ 0xd0
 800f094:	429c      	cmp	r4, r3
 800f096:	d105      	bne.n	800f0a4 <std+0x54>
 800f098:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f09c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f0a0:	f000 baf2 	b.w	800f688 <__retarget_lock_init_recursive>
 800f0a4:	bd10      	pop	{r4, pc}
 800f0a6:	bf00      	nop
 800f0a8:	0800f31d 	.word	0x0800f31d
 800f0ac:	0800f33f 	.word	0x0800f33f
 800f0b0:	0800f377 	.word	0x0800f377
 800f0b4:	0800f39b 	.word	0x0800f39b
 800f0b8:	200053c8 	.word	0x200053c8

0800f0bc <stdio_exit_handler>:
 800f0bc:	4a02      	ldr	r2, [pc, #8]	@ (800f0c8 <stdio_exit_handler+0xc>)
 800f0be:	4903      	ldr	r1, [pc, #12]	@ (800f0cc <stdio_exit_handler+0x10>)
 800f0c0:	4803      	ldr	r0, [pc, #12]	@ (800f0d0 <stdio_exit_handler+0x14>)
 800f0c2:	f000 b869 	b.w	800f198 <_fwalk_sglue>
 800f0c6:	bf00      	nop
 800f0c8:	200002d4 	.word	0x200002d4
 800f0cc:	080100a9 	.word	0x080100a9
 800f0d0:	200002e4 	.word	0x200002e4

0800f0d4 <cleanup_stdio>:
 800f0d4:	6841      	ldr	r1, [r0, #4]
 800f0d6:	4b0c      	ldr	r3, [pc, #48]	@ (800f108 <cleanup_stdio+0x34>)
 800f0d8:	4299      	cmp	r1, r3
 800f0da:	b510      	push	{r4, lr}
 800f0dc:	4604      	mov	r4, r0
 800f0de:	d001      	beq.n	800f0e4 <cleanup_stdio+0x10>
 800f0e0:	f000 ffe2 	bl	80100a8 <_fflush_r>
 800f0e4:	68a1      	ldr	r1, [r4, #8]
 800f0e6:	4b09      	ldr	r3, [pc, #36]	@ (800f10c <cleanup_stdio+0x38>)
 800f0e8:	4299      	cmp	r1, r3
 800f0ea:	d002      	beq.n	800f0f2 <cleanup_stdio+0x1e>
 800f0ec:	4620      	mov	r0, r4
 800f0ee:	f000 ffdb 	bl	80100a8 <_fflush_r>
 800f0f2:	68e1      	ldr	r1, [r4, #12]
 800f0f4:	4b06      	ldr	r3, [pc, #24]	@ (800f110 <cleanup_stdio+0x3c>)
 800f0f6:	4299      	cmp	r1, r3
 800f0f8:	d004      	beq.n	800f104 <cleanup_stdio+0x30>
 800f0fa:	4620      	mov	r0, r4
 800f0fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f100:	f000 bfd2 	b.w	80100a8 <_fflush_r>
 800f104:	bd10      	pop	{r4, pc}
 800f106:	bf00      	nop
 800f108:	200053c8 	.word	0x200053c8
 800f10c:	20005430 	.word	0x20005430
 800f110:	20005498 	.word	0x20005498

0800f114 <global_stdio_init.part.0>:
 800f114:	b510      	push	{r4, lr}
 800f116:	4b0b      	ldr	r3, [pc, #44]	@ (800f144 <global_stdio_init.part.0+0x30>)
 800f118:	4c0b      	ldr	r4, [pc, #44]	@ (800f148 <global_stdio_init.part.0+0x34>)
 800f11a:	4a0c      	ldr	r2, [pc, #48]	@ (800f14c <global_stdio_init.part.0+0x38>)
 800f11c:	601a      	str	r2, [r3, #0]
 800f11e:	4620      	mov	r0, r4
 800f120:	2200      	movs	r2, #0
 800f122:	2104      	movs	r1, #4
 800f124:	f7ff ff94 	bl	800f050 <std>
 800f128:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f12c:	2201      	movs	r2, #1
 800f12e:	2109      	movs	r1, #9
 800f130:	f7ff ff8e 	bl	800f050 <std>
 800f134:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f138:	2202      	movs	r2, #2
 800f13a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f13e:	2112      	movs	r1, #18
 800f140:	f7ff bf86 	b.w	800f050 <std>
 800f144:	20005500 	.word	0x20005500
 800f148:	200053c8 	.word	0x200053c8
 800f14c:	0800f0bd 	.word	0x0800f0bd

0800f150 <__sfp_lock_acquire>:
 800f150:	4801      	ldr	r0, [pc, #4]	@ (800f158 <__sfp_lock_acquire+0x8>)
 800f152:	f000 ba9a 	b.w	800f68a <__retarget_lock_acquire_recursive>
 800f156:	bf00      	nop
 800f158:	20005509 	.word	0x20005509

0800f15c <__sfp_lock_release>:
 800f15c:	4801      	ldr	r0, [pc, #4]	@ (800f164 <__sfp_lock_release+0x8>)
 800f15e:	f000 ba95 	b.w	800f68c <__retarget_lock_release_recursive>
 800f162:	bf00      	nop
 800f164:	20005509 	.word	0x20005509

0800f168 <__sinit>:
 800f168:	b510      	push	{r4, lr}
 800f16a:	4604      	mov	r4, r0
 800f16c:	f7ff fff0 	bl	800f150 <__sfp_lock_acquire>
 800f170:	6a23      	ldr	r3, [r4, #32]
 800f172:	b11b      	cbz	r3, 800f17c <__sinit+0x14>
 800f174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f178:	f7ff bff0 	b.w	800f15c <__sfp_lock_release>
 800f17c:	4b04      	ldr	r3, [pc, #16]	@ (800f190 <__sinit+0x28>)
 800f17e:	6223      	str	r3, [r4, #32]
 800f180:	4b04      	ldr	r3, [pc, #16]	@ (800f194 <__sinit+0x2c>)
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	2b00      	cmp	r3, #0
 800f186:	d1f5      	bne.n	800f174 <__sinit+0xc>
 800f188:	f7ff ffc4 	bl	800f114 <global_stdio_init.part.0>
 800f18c:	e7f2      	b.n	800f174 <__sinit+0xc>
 800f18e:	bf00      	nop
 800f190:	0800f0d5 	.word	0x0800f0d5
 800f194:	20005500 	.word	0x20005500

0800f198 <_fwalk_sglue>:
 800f198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f19c:	4607      	mov	r7, r0
 800f19e:	4688      	mov	r8, r1
 800f1a0:	4614      	mov	r4, r2
 800f1a2:	2600      	movs	r6, #0
 800f1a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f1a8:	f1b9 0901 	subs.w	r9, r9, #1
 800f1ac:	d505      	bpl.n	800f1ba <_fwalk_sglue+0x22>
 800f1ae:	6824      	ldr	r4, [r4, #0]
 800f1b0:	2c00      	cmp	r4, #0
 800f1b2:	d1f7      	bne.n	800f1a4 <_fwalk_sglue+0xc>
 800f1b4:	4630      	mov	r0, r6
 800f1b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1ba:	89ab      	ldrh	r3, [r5, #12]
 800f1bc:	2b01      	cmp	r3, #1
 800f1be:	d907      	bls.n	800f1d0 <_fwalk_sglue+0x38>
 800f1c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f1c4:	3301      	adds	r3, #1
 800f1c6:	d003      	beq.n	800f1d0 <_fwalk_sglue+0x38>
 800f1c8:	4629      	mov	r1, r5
 800f1ca:	4638      	mov	r0, r7
 800f1cc:	47c0      	blx	r8
 800f1ce:	4306      	orrs	r6, r0
 800f1d0:	3568      	adds	r5, #104	@ 0x68
 800f1d2:	e7e9      	b.n	800f1a8 <_fwalk_sglue+0x10>

0800f1d4 <iprintf>:
 800f1d4:	b40f      	push	{r0, r1, r2, r3}
 800f1d6:	b507      	push	{r0, r1, r2, lr}
 800f1d8:	4906      	ldr	r1, [pc, #24]	@ (800f1f4 <iprintf+0x20>)
 800f1da:	ab04      	add	r3, sp, #16
 800f1dc:	6808      	ldr	r0, [r1, #0]
 800f1de:	f853 2b04 	ldr.w	r2, [r3], #4
 800f1e2:	6881      	ldr	r1, [r0, #8]
 800f1e4:	9301      	str	r3, [sp, #4]
 800f1e6:	f000 fc35 	bl	800fa54 <_vfiprintf_r>
 800f1ea:	b003      	add	sp, #12
 800f1ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800f1f0:	b004      	add	sp, #16
 800f1f2:	4770      	bx	lr
 800f1f4:	200002e0 	.word	0x200002e0

0800f1f8 <_puts_r>:
 800f1f8:	6a03      	ldr	r3, [r0, #32]
 800f1fa:	b570      	push	{r4, r5, r6, lr}
 800f1fc:	6884      	ldr	r4, [r0, #8]
 800f1fe:	4605      	mov	r5, r0
 800f200:	460e      	mov	r6, r1
 800f202:	b90b      	cbnz	r3, 800f208 <_puts_r+0x10>
 800f204:	f7ff ffb0 	bl	800f168 <__sinit>
 800f208:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f20a:	07db      	lsls	r3, r3, #31
 800f20c:	d405      	bmi.n	800f21a <_puts_r+0x22>
 800f20e:	89a3      	ldrh	r3, [r4, #12]
 800f210:	0598      	lsls	r0, r3, #22
 800f212:	d402      	bmi.n	800f21a <_puts_r+0x22>
 800f214:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f216:	f000 fa38 	bl	800f68a <__retarget_lock_acquire_recursive>
 800f21a:	89a3      	ldrh	r3, [r4, #12]
 800f21c:	0719      	lsls	r1, r3, #28
 800f21e:	d502      	bpl.n	800f226 <_puts_r+0x2e>
 800f220:	6923      	ldr	r3, [r4, #16]
 800f222:	2b00      	cmp	r3, #0
 800f224:	d135      	bne.n	800f292 <_puts_r+0x9a>
 800f226:	4621      	mov	r1, r4
 800f228:	4628      	mov	r0, r5
 800f22a:	f000 f8f9 	bl	800f420 <__swsetup_r>
 800f22e:	b380      	cbz	r0, 800f292 <_puts_r+0x9a>
 800f230:	f04f 35ff 	mov.w	r5, #4294967295
 800f234:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f236:	07da      	lsls	r2, r3, #31
 800f238:	d405      	bmi.n	800f246 <_puts_r+0x4e>
 800f23a:	89a3      	ldrh	r3, [r4, #12]
 800f23c:	059b      	lsls	r3, r3, #22
 800f23e:	d402      	bmi.n	800f246 <_puts_r+0x4e>
 800f240:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f242:	f000 fa23 	bl	800f68c <__retarget_lock_release_recursive>
 800f246:	4628      	mov	r0, r5
 800f248:	bd70      	pop	{r4, r5, r6, pc}
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	da04      	bge.n	800f258 <_puts_r+0x60>
 800f24e:	69a2      	ldr	r2, [r4, #24]
 800f250:	429a      	cmp	r2, r3
 800f252:	dc17      	bgt.n	800f284 <_puts_r+0x8c>
 800f254:	290a      	cmp	r1, #10
 800f256:	d015      	beq.n	800f284 <_puts_r+0x8c>
 800f258:	6823      	ldr	r3, [r4, #0]
 800f25a:	1c5a      	adds	r2, r3, #1
 800f25c:	6022      	str	r2, [r4, #0]
 800f25e:	7019      	strb	r1, [r3, #0]
 800f260:	68a3      	ldr	r3, [r4, #8]
 800f262:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f266:	3b01      	subs	r3, #1
 800f268:	60a3      	str	r3, [r4, #8]
 800f26a:	2900      	cmp	r1, #0
 800f26c:	d1ed      	bne.n	800f24a <_puts_r+0x52>
 800f26e:	2b00      	cmp	r3, #0
 800f270:	da11      	bge.n	800f296 <_puts_r+0x9e>
 800f272:	4622      	mov	r2, r4
 800f274:	210a      	movs	r1, #10
 800f276:	4628      	mov	r0, r5
 800f278:	f000 f893 	bl	800f3a2 <__swbuf_r>
 800f27c:	3001      	adds	r0, #1
 800f27e:	d0d7      	beq.n	800f230 <_puts_r+0x38>
 800f280:	250a      	movs	r5, #10
 800f282:	e7d7      	b.n	800f234 <_puts_r+0x3c>
 800f284:	4622      	mov	r2, r4
 800f286:	4628      	mov	r0, r5
 800f288:	f000 f88b 	bl	800f3a2 <__swbuf_r>
 800f28c:	3001      	adds	r0, #1
 800f28e:	d1e7      	bne.n	800f260 <_puts_r+0x68>
 800f290:	e7ce      	b.n	800f230 <_puts_r+0x38>
 800f292:	3e01      	subs	r6, #1
 800f294:	e7e4      	b.n	800f260 <_puts_r+0x68>
 800f296:	6823      	ldr	r3, [r4, #0]
 800f298:	1c5a      	adds	r2, r3, #1
 800f29a:	6022      	str	r2, [r4, #0]
 800f29c:	220a      	movs	r2, #10
 800f29e:	701a      	strb	r2, [r3, #0]
 800f2a0:	e7ee      	b.n	800f280 <_puts_r+0x88>
	...

0800f2a4 <puts>:
 800f2a4:	4b02      	ldr	r3, [pc, #8]	@ (800f2b0 <puts+0xc>)
 800f2a6:	4601      	mov	r1, r0
 800f2a8:	6818      	ldr	r0, [r3, #0]
 800f2aa:	f7ff bfa5 	b.w	800f1f8 <_puts_r>
 800f2ae:	bf00      	nop
 800f2b0:	200002e0 	.word	0x200002e0

0800f2b4 <sniprintf>:
 800f2b4:	b40c      	push	{r2, r3}
 800f2b6:	b530      	push	{r4, r5, lr}
 800f2b8:	4b17      	ldr	r3, [pc, #92]	@ (800f318 <sniprintf+0x64>)
 800f2ba:	1e0c      	subs	r4, r1, #0
 800f2bc:	681d      	ldr	r5, [r3, #0]
 800f2be:	b09d      	sub	sp, #116	@ 0x74
 800f2c0:	da08      	bge.n	800f2d4 <sniprintf+0x20>
 800f2c2:	238b      	movs	r3, #139	@ 0x8b
 800f2c4:	602b      	str	r3, [r5, #0]
 800f2c6:	f04f 30ff 	mov.w	r0, #4294967295
 800f2ca:	b01d      	add	sp, #116	@ 0x74
 800f2cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f2d0:	b002      	add	sp, #8
 800f2d2:	4770      	bx	lr
 800f2d4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800f2d8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f2dc:	bf14      	ite	ne
 800f2de:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f2e2:	4623      	moveq	r3, r4
 800f2e4:	9304      	str	r3, [sp, #16]
 800f2e6:	9307      	str	r3, [sp, #28]
 800f2e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f2ec:	9002      	str	r0, [sp, #8]
 800f2ee:	9006      	str	r0, [sp, #24]
 800f2f0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f2f4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800f2f6:	ab21      	add	r3, sp, #132	@ 0x84
 800f2f8:	a902      	add	r1, sp, #8
 800f2fa:	4628      	mov	r0, r5
 800f2fc:	9301      	str	r3, [sp, #4]
 800f2fe:	f000 fa83 	bl	800f808 <_svfiprintf_r>
 800f302:	1c43      	adds	r3, r0, #1
 800f304:	bfbc      	itt	lt
 800f306:	238b      	movlt	r3, #139	@ 0x8b
 800f308:	602b      	strlt	r3, [r5, #0]
 800f30a:	2c00      	cmp	r4, #0
 800f30c:	d0dd      	beq.n	800f2ca <sniprintf+0x16>
 800f30e:	9b02      	ldr	r3, [sp, #8]
 800f310:	2200      	movs	r2, #0
 800f312:	701a      	strb	r2, [r3, #0]
 800f314:	e7d9      	b.n	800f2ca <sniprintf+0x16>
 800f316:	bf00      	nop
 800f318:	200002e0 	.word	0x200002e0

0800f31c <__sread>:
 800f31c:	b510      	push	{r4, lr}
 800f31e:	460c      	mov	r4, r1
 800f320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f324:	f000 f952 	bl	800f5cc <_read_r>
 800f328:	2800      	cmp	r0, #0
 800f32a:	bfab      	itete	ge
 800f32c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f32e:	89a3      	ldrhlt	r3, [r4, #12]
 800f330:	181b      	addge	r3, r3, r0
 800f332:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f336:	bfac      	ite	ge
 800f338:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f33a:	81a3      	strhlt	r3, [r4, #12]
 800f33c:	bd10      	pop	{r4, pc}

0800f33e <__swrite>:
 800f33e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f342:	461f      	mov	r7, r3
 800f344:	898b      	ldrh	r3, [r1, #12]
 800f346:	05db      	lsls	r3, r3, #23
 800f348:	4605      	mov	r5, r0
 800f34a:	460c      	mov	r4, r1
 800f34c:	4616      	mov	r6, r2
 800f34e:	d505      	bpl.n	800f35c <__swrite+0x1e>
 800f350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f354:	2302      	movs	r3, #2
 800f356:	2200      	movs	r2, #0
 800f358:	f000 f926 	bl	800f5a8 <_lseek_r>
 800f35c:	89a3      	ldrh	r3, [r4, #12]
 800f35e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f362:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f366:	81a3      	strh	r3, [r4, #12]
 800f368:	4632      	mov	r2, r6
 800f36a:	463b      	mov	r3, r7
 800f36c:	4628      	mov	r0, r5
 800f36e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f372:	f000 b94d 	b.w	800f610 <_write_r>

0800f376 <__sseek>:
 800f376:	b510      	push	{r4, lr}
 800f378:	460c      	mov	r4, r1
 800f37a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f37e:	f000 f913 	bl	800f5a8 <_lseek_r>
 800f382:	1c43      	adds	r3, r0, #1
 800f384:	89a3      	ldrh	r3, [r4, #12]
 800f386:	bf15      	itete	ne
 800f388:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f38a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f38e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f392:	81a3      	strheq	r3, [r4, #12]
 800f394:	bf18      	it	ne
 800f396:	81a3      	strhne	r3, [r4, #12]
 800f398:	bd10      	pop	{r4, pc}

0800f39a <__sclose>:
 800f39a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f39e:	f000 b89d 	b.w	800f4dc <_close_r>

0800f3a2 <__swbuf_r>:
 800f3a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3a4:	460e      	mov	r6, r1
 800f3a6:	4614      	mov	r4, r2
 800f3a8:	4605      	mov	r5, r0
 800f3aa:	b118      	cbz	r0, 800f3b4 <__swbuf_r+0x12>
 800f3ac:	6a03      	ldr	r3, [r0, #32]
 800f3ae:	b90b      	cbnz	r3, 800f3b4 <__swbuf_r+0x12>
 800f3b0:	f7ff feda 	bl	800f168 <__sinit>
 800f3b4:	69a3      	ldr	r3, [r4, #24]
 800f3b6:	60a3      	str	r3, [r4, #8]
 800f3b8:	89a3      	ldrh	r3, [r4, #12]
 800f3ba:	071a      	lsls	r2, r3, #28
 800f3bc:	d501      	bpl.n	800f3c2 <__swbuf_r+0x20>
 800f3be:	6923      	ldr	r3, [r4, #16]
 800f3c0:	b943      	cbnz	r3, 800f3d4 <__swbuf_r+0x32>
 800f3c2:	4621      	mov	r1, r4
 800f3c4:	4628      	mov	r0, r5
 800f3c6:	f000 f82b 	bl	800f420 <__swsetup_r>
 800f3ca:	b118      	cbz	r0, 800f3d4 <__swbuf_r+0x32>
 800f3cc:	f04f 37ff 	mov.w	r7, #4294967295
 800f3d0:	4638      	mov	r0, r7
 800f3d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f3d4:	6823      	ldr	r3, [r4, #0]
 800f3d6:	6922      	ldr	r2, [r4, #16]
 800f3d8:	1a98      	subs	r0, r3, r2
 800f3da:	6963      	ldr	r3, [r4, #20]
 800f3dc:	b2f6      	uxtb	r6, r6
 800f3de:	4283      	cmp	r3, r0
 800f3e0:	4637      	mov	r7, r6
 800f3e2:	dc05      	bgt.n	800f3f0 <__swbuf_r+0x4e>
 800f3e4:	4621      	mov	r1, r4
 800f3e6:	4628      	mov	r0, r5
 800f3e8:	f000 fe5e 	bl	80100a8 <_fflush_r>
 800f3ec:	2800      	cmp	r0, #0
 800f3ee:	d1ed      	bne.n	800f3cc <__swbuf_r+0x2a>
 800f3f0:	68a3      	ldr	r3, [r4, #8]
 800f3f2:	3b01      	subs	r3, #1
 800f3f4:	60a3      	str	r3, [r4, #8]
 800f3f6:	6823      	ldr	r3, [r4, #0]
 800f3f8:	1c5a      	adds	r2, r3, #1
 800f3fa:	6022      	str	r2, [r4, #0]
 800f3fc:	701e      	strb	r6, [r3, #0]
 800f3fe:	6962      	ldr	r2, [r4, #20]
 800f400:	1c43      	adds	r3, r0, #1
 800f402:	429a      	cmp	r2, r3
 800f404:	d004      	beq.n	800f410 <__swbuf_r+0x6e>
 800f406:	89a3      	ldrh	r3, [r4, #12]
 800f408:	07db      	lsls	r3, r3, #31
 800f40a:	d5e1      	bpl.n	800f3d0 <__swbuf_r+0x2e>
 800f40c:	2e0a      	cmp	r6, #10
 800f40e:	d1df      	bne.n	800f3d0 <__swbuf_r+0x2e>
 800f410:	4621      	mov	r1, r4
 800f412:	4628      	mov	r0, r5
 800f414:	f000 fe48 	bl	80100a8 <_fflush_r>
 800f418:	2800      	cmp	r0, #0
 800f41a:	d0d9      	beq.n	800f3d0 <__swbuf_r+0x2e>
 800f41c:	e7d6      	b.n	800f3cc <__swbuf_r+0x2a>
	...

0800f420 <__swsetup_r>:
 800f420:	b538      	push	{r3, r4, r5, lr}
 800f422:	4b29      	ldr	r3, [pc, #164]	@ (800f4c8 <__swsetup_r+0xa8>)
 800f424:	4605      	mov	r5, r0
 800f426:	6818      	ldr	r0, [r3, #0]
 800f428:	460c      	mov	r4, r1
 800f42a:	b118      	cbz	r0, 800f434 <__swsetup_r+0x14>
 800f42c:	6a03      	ldr	r3, [r0, #32]
 800f42e:	b90b      	cbnz	r3, 800f434 <__swsetup_r+0x14>
 800f430:	f7ff fe9a 	bl	800f168 <__sinit>
 800f434:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f438:	0719      	lsls	r1, r3, #28
 800f43a:	d422      	bmi.n	800f482 <__swsetup_r+0x62>
 800f43c:	06da      	lsls	r2, r3, #27
 800f43e:	d407      	bmi.n	800f450 <__swsetup_r+0x30>
 800f440:	2209      	movs	r2, #9
 800f442:	602a      	str	r2, [r5, #0]
 800f444:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f448:	81a3      	strh	r3, [r4, #12]
 800f44a:	f04f 30ff 	mov.w	r0, #4294967295
 800f44e:	e033      	b.n	800f4b8 <__swsetup_r+0x98>
 800f450:	0758      	lsls	r0, r3, #29
 800f452:	d512      	bpl.n	800f47a <__swsetup_r+0x5a>
 800f454:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f456:	b141      	cbz	r1, 800f46a <__swsetup_r+0x4a>
 800f458:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f45c:	4299      	cmp	r1, r3
 800f45e:	d002      	beq.n	800f466 <__swsetup_r+0x46>
 800f460:	4628      	mov	r0, r5
 800f462:	f000 f923 	bl	800f6ac <_free_r>
 800f466:	2300      	movs	r3, #0
 800f468:	6363      	str	r3, [r4, #52]	@ 0x34
 800f46a:	89a3      	ldrh	r3, [r4, #12]
 800f46c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f470:	81a3      	strh	r3, [r4, #12]
 800f472:	2300      	movs	r3, #0
 800f474:	6063      	str	r3, [r4, #4]
 800f476:	6923      	ldr	r3, [r4, #16]
 800f478:	6023      	str	r3, [r4, #0]
 800f47a:	89a3      	ldrh	r3, [r4, #12]
 800f47c:	f043 0308 	orr.w	r3, r3, #8
 800f480:	81a3      	strh	r3, [r4, #12]
 800f482:	6923      	ldr	r3, [r4, #16]
 800f484:	b94b      	cbnz	r3, 800f49a <__swsetup_r+0x7a>
 800f486:	89a3      	ldrh	r3, [r4, #12]
 800f488:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f48c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f490:	d003      	beq.n	800f49a <__swsetup_r+0x7a>
 800f492:	4621      	mov	r1, r4
 800f494:	4628      	mov	r0, r5
 800f496:	f000 fe55 	bl	8010144 <__smakebuf_r>
 800f49a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f49e:	f013 0201 	ands.w	r2, r3, #1
 800f4a2:	d00a      	beq.n	800f4ba <__swsetup_r+0x9a>
 800f4a4:	2200      	movs	r2, #0
 800f4a6:	60a2      	str	r2, [r4, #8]
 800f4a8:	6962      	ldr	r2, [r4, #20]
 800f4aa:	4252      	negs	r2, r2
 800f4ac:	61a2      	str	r2, [r4, #24]
 800f4ae:	6922      	ldr	r2, [r4, #16]
 800f4b0:	b942      	cbnz	r2, 800f4c4 <__swsetup_r+0xa4>
 800f4b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f4b6:	d1c5      	bne.n	800f444 <__swsetup_r+0x24>
 800f4b8:	bd38      	pop	{r3, r4, r5, pc}
 800f4ba:	0799      	lsls	r1, r3, #30
 800f4bc:	bf58      	it	pl
 800f4be:	6962      	ldrpl	r2, [r4, #20]
 800f4c0:	60a2      	str	r2, [r4, #8]
 800f4c2:	e7f4      	b.n	800f4ae <__swsetup_r+0x8e>
 800f4c4:	2000      	movs	r0, #0
 800f4c6:	e7f7      	b.n	800f4b8 <__swsetup_r+0x98>
 800f4c8:	200002e0 	.word	0x200002e0

0800f4cc <memset>:
 800f4cc:	4402      	add	r2, r0
 800f4ce:	4603      	mov	r3, r0
 800f4d0:	4293      	cmp	r3, r2
 800f4d2:	d100      	bne.n	800f4d6 <memset+0xa>
 800f4d4:	4770      	bx	lr
 800f4d6:	f803 1b01 	strb.w	r1, [r3], #1
 800f4da:	e7f9      	b.n	800f4d0 <memset+0x4>

0800f4dc <_close_r>:
 800f4dc:	b538      	push	{r3, r4, r5, lr}
 800f4de:	4d06      	ldr	r5, [pc, #24]	@ (800f4f8 <_close_r+0x1c>)
 800f4e0:	2300      	movs	r3, #0
 800f4e2:	4604      	mov	r4, r0
 800f4e4:	4608      	mov	r0, r1
 800f4e6:	602b      	str	r3, [r5, #0]
 800f4e8:	f7f2 ff7f 	bl	80023ea <_close>
 800f4ec:	1c43      	adds	r3, r0, #1
 800f4ee:	d102      	bne.n	800f4f6 <_close_r+0x1a>
 800f4f0:	682b      	ldr	r3, [r5, #0]
 800f4f2:	b103      	cbz	r3, 800f4f6 <_close_r+0x1a>
 800f4f4:	6023      	str	r3, [r4, #0]
 800f4f6:	bd38      	pop	{r3, r4, r5, pc}
 800f4f8:	20005504 	.word	0x20005504

0800f4fc <_reclaim_reent>:
 800f4fc:	4b29      	ldr	r3, [pc, #164]	@ (800f5a4 <_reclaim_reent+0xa8>)
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	4283      	cmp	r3, r0
 800f502:	b570      	push	{r4, r5, r6, lr}
 800f504:	4604      	mov	r4, r0
 800f506:	d04b      	beq.n	800f5a0 <_reclaim_reent+0xa4>
 800f508:	69c3      	ldr	r3, [r0, #28]
 800f50a:	b1ab      	cbz	r3, 800f538 <_reclaim_reent+0x3c>
 800f50c:	68db      	ldr	r3, [r3, #12]
 800f50e:	b16b      	cbz	r3, 800f52c <_reclaim_reent+0x30>
 800f510:	2500      	movs	r5, #0
 800f512:	69e3      	ldr	r3, [r4, #28]
 800f514:	68db      	ldr	r3, [r3, #12]
 800f516:	5959      	ldr	r1, [r3, r5]
 800f518:	2900      	cmp	r1, #0
 800f51a:	d13b      	bne.n	800f594 <_reclaim_reent+0x98>
 800f51c:	3504      	adds	r5, #4
 800f51e:	2d80      	cmp	r5, #128	@ 0x80
 800f520:	d1f7      	bne.n	800f512 <_reclaim_reent+0x16>
 800f522:	69e3      	ldr	r3, [r4, #28]
 800f524:	4620      	mov	r0, r4
 800f526:	68d9      	ldr	r1, [r3, #12]
 800f528:	f000 f8c0 	bl	800f6ac <_free_r>
 800f52c:	69e3      	ldr	r3, [r4, #28]
 800f52e:	6819      	ldr	r1, [r3, #0]
 800f530:	b111      	cbz	r1, 800f538 <_reclaim_reent+0x3c>
 800f532:	4620      	mov	r0, r4
 800f534:	f000 f8ba 	bl	800f6ac <_free_r>
 800f538:	6961      	ldr	r1, [r4, #20]
 800f53a:	b111      	cbz	r1, 800f542 <_reclaim_reent+0x46>
 800f53c:	4620      	mov	r0, r4
 800f53e:	f000 f8b5 	bl	800f6ac <_free_r>
 800f542:	69e1      	ldr	r1, [r4, #28]
 800f544:	b111      	cbz	r1, 800f54c <_reclaim_reent+0x50>
 800f546:	4620      	mov	r0, r4
 800f548:	f000 f8b0 	bl	800f6ac <_free_r>
 800f54c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800f54e:	b111      	cbz	r1, 800f556 <_reclaim_reent+0x5a>
 800f550:	4620      	mov	r0, r4
 800f552:	f000 f8ab 	bl	800f6ac <_free_r>
 800f556:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f558:	b111      	cbz	r1, 800f560 <_reclaim_reent+0x64>
 800f55a:	4620      	mov	r0, r4
 800f55c:	f000 f8a6 	bl	800f6ac <_free_r>
 800f560:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800f562:	b111      	cbz	r1, 800f56a <_reclaim_reent+0x6e>
 800f564:	4620      	mov	r0, r4
 800f566:	f000 f8a1 	bl	800f6ac <_free_r>
 800f56a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800f56c:	b111      	cbz	r1, 800f574 <_reclaim_reent+0x78>
 800f56e:	4620      	mov	r0, r4
 800f570:	f000 f89c 	bl	800f6ac <_free_r>
 800f574:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800f576:	b111      	cbz	r1, 800f57e <_reclaim_reent+0x82>
 800f578:	4620      	mov	r0, r4
 800f57a:	f000 f897 	bl	800f6ac <_free_r>
 800f57e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800f580:	b111      	cbz	r1, 800f588 <_reclaim_reent+0x8c>
 800f582:	4620      	mov	r0, r4
 800f584:	f000 f892 	bl	800f6ac <_free_r>
 800f588:	6a23      	ldr	r3, [r4, #32]
 800f58a:	b14b      	cbz	r3, 800f5a0 <_reclaim_reent+0xa4>
 800f58c:	4620      	mov	r0, r4
 800f58e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f592:	4718      	bx	r3
 800f594:	680e      	ldr	r6, [r1, #0]
 800f596:	4620      	mov	r0, r4
 800f598:	f000 f888 	bl	800f6ac <_free_r>
 800f59c:	4631      	mov	r1, r6
 800f59e:	e7bb      	b.n	800f518 <_reclaim_reent+0x1c>
 800f5a0:	bd70      	pop	{r4, r5, r6, pc}
 800f5a2:	bf00      	nop
 800f5a4:	200002e0 	.word	0x200002e0

0800f5a8 <_lseek_r>:
 800f5a8:	b538      	push	{r3, r4, r5, lr}
 800f5aa:	4d07      	ldr	r5, [pc, #28]	@ (800f5c8 <_lseek_r+0x20>)
 800f5ac:	4604      	mov	r4, r0
 800f5ae:	4608      	mov	r0, r1
 800f5b0:	4611      	mov	r1, r2
 800f5b2:	2200      	movs	r2, #0
 800f5b4:	602a      	str	r2, [r5, #0]
 800f5b6:	461a      	mov	r2, r3
 800f5b8:	f7f2 ff3e 	bl	8002438 <_lseek>
 800f5bc:	1c43      	adds	r3, r0, #1
 800f5be:	d102      	bne.n	800f5c6 <_lseek_r+0x1e>
 800f5c0:	682b      	ldr	r3, [r5, #0]
 800f5c2:	b103      	cbz	r3, 800f5c6 <_lseek_r+0x1e>
 800f5c4:	6023      	str	r3, [r4, #0]
 800f5c6:	bd38      	pop	{r3, r4, r5, pc}
 800f5c8:	20005504 	.word	0x20005504

0800f5cc <_read_r>:
 800f5cc:	b538      	push	{r3, r4, r5, lr}
 800f5ce:	4d07      	ldr	r5, [pc, #28]	@ (800f5ec <_read_r+0x20>)
 800f5d0:	4604      	mov	r4, r0
 800f5d2:	4608      	mov	r0, r1
 800f5d4:	4611      	mov	r1, r2
 800f5d6:	2200      	movs	r2, #0
 800f5d8:	602a      	str	r2, [r5, #0]
 800f5da:	461a      	mov	r2, r3
 800f5dc:	f7f2 fecc 	bl	8002378 <_read>
 800f5e0:	1c43      	adds	r3, r0, #1
 800f5e2:	d102      	bne.n	800f5ea <_read_r+0x1e>
 800f5e4:	682b      	ldr	r3, [r5, #0]
 800f5e6:	b103      	cbz	r3, 800f5ea <_read_r+0x1e>
 800f5e8:	6023      	str	r3, [r4, #0]
 800f5ea:	bd38      	pop	{r3, r4, r5, pc}
 800f5ec:	20005504 	.word	0x20005504

0800f5f0 <_sbrk_r>:
 800f5f0:	b538      	push	{r3, r4, r5, lr}
 800f5f2:	4d06      	ldr	r5, [pc, #24]	@ (800f60c <_sbrk_r+0x1c>)
 800f5f4:	2300      	movs	r3, #0
 800f5f6:	4604      	mov	r4, r0
 800f5f8:	4608      	mov	r0, r1
 800f5fa:	602b      	str	r3, [r5, #0]
 800f5fc:	f7f2 ff2a 	bl	8002454 <_sbrk>
 800f600:	1c43      	adds	r3, r0, #1
 800f602:	d102      	bne.n	800f60a <_sbrk_r+0x1a>
 800f604:	682b      	ldr	r3, [r5, #0]
 800f606:	b103      	cbz	r3, 800f60a <_sbrk_r+0x1a>
 800f608:	6023      	str	r3, [r4, #0]
 800f60a:	bd38      	pop	{r3, r4, r5, pc}
 800f60c:	20005504 	.word	0x20005504

0800f610 <_write_r>:
 800f610:	b538      	push	{r3, r4, r5, lr}
 800f612:	4d07      	ldr	r5, [pc, #28]	@ (800f630 <_write_r+0x20>)
 800f614:	4604      	mov	r4, r0
 800f616:	4608      	mov	r0, r1
 800f618:	4611      	mov	r1, r2
 800f61a:	2200      	movs	r2, #0
 800f61c:	602a      	str	r2, [r5, #0]
 800f61e:	461a      	mov	r2, r3
 800f620:	f7f2 fec7 	bl	80023b2 <_write>
 800f624:	1c43      	adds	r3, r0, #1
 800f626:	d102      	bne.n	800f62e <_write_r+0x1e>
 800f628:	682b      	ldr	r3, [r5, #0]
 800f62a:	b103      	cbz	r3, 800f62e <_write_r+0x1e>
 800f62c:	6023      	str	r3, [r4, #0]
 800f62e:	bd38      	pop	{r3, r4, r5, pc}
 800f630:	20005504 	.word	0x20005504

0800f634 <__errno>:
 800f634:	4b01      	ldr	r3, [pc, #4]	@ (800f63c <__errno+0x8>)
 800f636:	6818      	ldr	r0, [r3, #0]
 800f638:	4770      	bx	lr
 800f63a:	bf00      	nop
 800f63c:	200002e0 	.word	0x200002e0

0800f640 <__libc_init_array>:
 800f640:	b570      	push	{r4, r5, r6, lr}
 800f642:	4d0d      	ldr	r5, [pc, #52]	@ (800f678 <__libc_init_array+0x38>)
 800f644:	4c0d      	ldr	r4, [pc, #52]	@ (800f67c <__libc_init_array+0x3c>)
 800f646:	1b64      	subs	r4, r4, r5
 800f648:	10a4      	asrs	r4, r4, #2
 800f64a:	2600      	movs	r6, #0
 800f64c:	42a6      	cmp	r6, r4
 800f64e:	d109      	bne.n	800f664 <__libc_init_array+0x24>
 800f650:	4d0b      	ldr	r5, [pc, #44]	@ (800f680 <__libc_init_array+0x40>)
 800f652:	4c0c      	ldr	r4, [pc, #48]	@ (800f684 <__libc_init_array+0x44>)
 800f654:	f000 fdee 	bl	8010234 <_init>
 800f658:	1b64      	subs	r4, r4, r5
 800f65a:	10a4      	asrs	r4, r4, #2
 800f65c:	2600      	movs	r6, #0
 800f65e:	42a6      	cmp	r6, r4
 800f660:	d105      	bne.n	800f66e <__libc_init_array+0x2e>
 800f662:	bd70      	pop	{r4, r5, r6, pc}
 800f664:	f855 3b04 	ldr.w	r3, [r5], #4
 800f668:	4798      	blx	r3
 800f66a:	3601      	adds	r6, #1
 800f66c:	e7ee      	b.n	800f64c <__libc_init_array+0xc>
 800f66e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f672:	4798      	blx	r3
 800f674:	3601      	adds	r6, #1
 800f676:	e7f2      	b.n	800f65e <__libc_init_array+0x1e>
 800f678:	08010514 	.word	0x08010514
 800f67c:	08010514 	.word	0x08010514
 800f680:	08010514 	.word	0x08010514
 800f684:	08010518 	.word	0x08010518

0800f688 <__retarget_lock_init_recursive>:
 800f688:	4770      	bx	lr

0800f68a <__retarget_lock_acquire_recursive>:
 800f68a:	4770      	bx	lr

0800f68c <__retarget_lock_release_recursive>:
 800f68c:	4770      	bx	lr

0800f68e <memcpy>:
 800f68e:	440a      	add	r2, r1
 800f690:	4291      	cmp	r1, r2
 800f692:	f100 33ff 	add.w	r3, r0, #4294967295
 800f696:	d100      	bne.n	800f69a <memcpy+0xc>
 800f698:	4770      	bx	lr
 800f69a:	b510      	push	{r4, lr}
 800f69c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f6a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f6a4:	4291      	cmp	r1, r2
 800f6a6:	d1f9      	bne.n	800f69c <memcpy+0xe>
 800f6a8:	bd10      	pop	{r4, pc}
	...

0800f6ac <_free_r>:
 800f6ac:	b538      	push	{r3, r4, r5, lr}
 800f6ae:	4605      	mov	r5, r0
 800f6b0:	2900      	cmp	r1, #0
 800f6b2:	d041      	beq.n	800f738 <_free_r+0x8c>
 800f6b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f6b8:	1f0c      	subs	r4, r1, #4
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	bfb8      	it	lt
 800f6be:	18e4      	addlt	r4, r4, r3
 800f6c0:	f7ff fc8c 	bl	800efdc <__malloc_lock>
 800f6c4:	4a1d      	ldr	r2, [pc, #116]	@ (800f73c <_free_r+0x90>)
 800f6c6:	6813      	ldr	r3, [r2, #0]
 800f6c8:	b933      	cbnz	r3, 800f6d8 <_free_r+0x2c>
 800f6ca:	6063      	str	r3, [r4, #4]
 800f6cc:	6014      	str	r4, [r2, #0]
 800f6ce:	4628      	mov	r0, r5
 800f6d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f6d4:	f7ff bc88 	b.w	800efe8 <__malloc_unlock>
 800f6d8:	42a3      	cmp	r3, r4
 800f6da:	d908      	bls.n	800f6ee <_free_r+0x42>
 800f6dc:	6820      	ldr	r0, [r4, #0]
 800f6de:	1821      	adds	r1, r4, r0
 800f6e0:	428b      	cmp	r3, r1
 800f6e2:	bf01      	itttt	eq
 800f6e4:	6819      	ldreq	r1, [r3, #0]
 800f6e6:	685b      	ldreq	r3, [r3, #4]
 800f6e8:	1809      	addeq	r1, r1, r0
 800f6ea:	6021      	streq	r1, [r4, #0]
 800f6ec:	e7ed      	b.n	800f6ca <_free_r+0x1e>
 800f6ee:	461a      	mov	r2, r3
 800f6f0:	685b      	ldr	r3, [r3, #4]
 800f6f2:	b10b      	cbz	r3, 800f6f8 <_free_r+0x4c>
 800f6f4:	42a3      	cmp	r3, r4
 800f6f6:	d9fa      	bls.n	800f6ee <_free_r+0x42>
 800f6f8:	6811      	ldr	r1, [r2, #0]
 800f6fa:	1850      	adds	r0, r2, r1
 800f6fc:	42a0      	cmp	r0, r4
 800f6fe:	d10b      	bne.n	800f718 <_free_r+0x6c>
 800f700:	6820      	ldr	r0, [r4, #0]
 800f702:	4401      	add	r1, r0
 800f704:	1850      	adds	r0, r2, r1
 800f706:	4283      	cmp	r3, r0
 800f708:	6011      	str	r1, [r2, #0]
 800f70a:	d1e0      	bne.n	800f6ce <_free_r+0x22>
 800f70c:	6818      	ldr	r0, [r3, #0]
 800f70e:	685b      	ldr	r3, [r3, #4]
 800f710:	6053      	str	r3, [r2, #4]
 800f712:	4408      	add	r0, r1
 800f714:	6010      	str	r0, [r2, #0]
 800f716:	e7da      	b.n	800f6ce <_free_r+0x22>
 800f718:	d902      	bls.n	800f720 <_free_r+0x74>
 800f71a:	230c      	movs	r3, #12
 800f71c:	602b      	str	r3, [r5, #0]
 800f71e:	e7d6      	b.n	800f6ce <_free_r+0x22>
 800f720:	6820      	ldr	r0, [r4, #0]
 800f722:	1821      	adds	r1, r4, r0
 800f724:	428b      	cmp	r3, r1
 800f726:	bf04      	itt	eq
 800f728:	6819      	ldreq	r1, [r3, #0]
 800f72a:	685b      	ldreq	r3, [r3, #4]
 800f72c:	6063      	str	r3, [r4, #4]
 800f72e:	bf04      	itt	eq
 800f730:	1809      	addeq	r1, r1, r0
 800f732:	6021      	streq	r1, [r4, #0]
 800f734:	6054      	str	r4, [r2, #4]
 800f736:	e7ca      	b.n	800f6ce <_free_r+0x22>
 800f738:	bd38      	pop	{r3, r4, r5, pc}
 800f73a:	bf00      	nop
 800f73c:	200053c4 	.word	0x200053c4

0800f740 <_malloc_usable_size_r>:
 800f740:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f744:	1f18      	subs	r0, r3, #4
 800f746:	2b00      	cmp	r3, #0
 800f748:	bfbc      	itt	lt
 800f74a:	580b      	ldrlt	r3, [r1, r0]
 800f74c:	18c0      	addlt	r0, r0, r3
 800f74e:	4770      	bx	lr

0800f750 <__ssputs_r>:
 800f750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f754:	688e      	ldr	r6, [r1, #8]
 800f756:	461f      	mov	r7, r3
 800f758:	42be      	cmp	r6, r7
 800f75a:	680b      	ldr	r3, [r1, #0]
 800f75c:	4682      	mov	sl, r0
 800f75e:	460c      	mov	r4, r1
 800f760:	4690      	mov	r8, r2
 800f762:	d82d      	bhi.n	800f7c0 <__ssputs_r+0x70>
 800f764:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f768:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f76c:	d026      	beq.n	800f7bc <__ssputs_r+0x6c>
 800f76e:	6965      	ldr	r5, [r4, #20]
 800f770:	6909      	ldr	r1, [r1, #16]
 800f772:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f776:	eba3 0901 	sub.w	r9, r3, r1
 800f77a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f77e:	1c7b      	adds	r3, r7, #1
 800f780:	444b      	add	r3, r9
 800f782:	106d      	asrs	r5, r5, #1
 800f784:	429d      	cmp	r5, r3
 800f786:	bf38      	it	cc
 800f788:	461d      	movcc	r5, r3
 800f78a:	0553      	lsls	r3, r2, #21
 800f78c:	d527      	bpl.n	800f7de <__ssputs_r+0x8e>
 800f78e:	4629      	mov	r1, r5
 800f790:	f7ff fba4 	bl	800eedc <_malloc_r>
 800f794:	4606      	mov	r6, r0
 800f796:	b360      	cbz	r0, 800f7f2 <__ssputs_r+0xa2>
 800f798:	6921      	ldr	r1, [r4, #16]
 800f79a:	464a      	mov	r2, r9
 800f79c:	f7ff ff77 	bl	800f68e <memcpy>
 800f7a0:	89a3      	ldrh	r3, [r4, #12]
 800f7a2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f7a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f7aa:	81a3      	strh	r3, [r4, #12]
 800f7ac:	6126      	str	r6, [r4, #16]
 800f7ae:	6165      	str	r5, [r4, #20]
 800f7b0:	444e      	add	r6, r9
 800f7b2:	eba5 0509 	sub.w	r5, r5, r9
 800f7b6:	6026      	str	r6, [r4, #0]
 800f7b8:	60a5      	str	r5, [r4, #8]
 800f7ba:	463e      	mov	r6, r7
 800f7bc:	42be      	cmp	r6, r7
 800f7be:	d900      	bls.n	800f7c2 <__ssputs_r+0x72>
 800f7c0:	463e      	mov	r6, r7
 800f7c2:	6820      	ldr	r0, [r4, #0]
 800f7c4:	4632      	mov	r2, r6
 800f7c6:	4641      	mov	r1, r8
 800f7c8:	f000 fcf8 	bl	80101bc <memmove>
 800f7cc:	68a3      	ldr	r3, [r4, #8]
 800f7ce:	1b9b      	subs	r3, r3, r6
 800f7d0:	60a3      	str	r3, [r4, #8]
 800f7d2:	6823      	ldr	r3, [r4, #0]
 800f7d4:	4433      	add	r3, r6
 800f7d6:	6023      	str	r3, [r4, #0]
 800f7d8:	2000      	movs	r0, #0
 800f7da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7de:	462a      	mov	r2, r5
 800f7e0:	f7ff fc08 	bl	800eff4 <_realloc_r>
 800f7e4:	4606      	mov	r6, r0
 800f7e6:	2800      	cmp	r0, #0
 800f7e8:	d1e0      	bne.n	800f7ac <__ssputs_r+0x5c>
 800f7ea:	6921      	ldr	r1, [r4, #16]
 800f7ec:	4650      	mov	r0, sl
 800f7ee:	f7ff ff5d 	bl	800f6ac <_free_r>
 800f7f2:	230c      	movs	r3, #12
 800f7f4:	f8ca 3000 	str.w	r3, [sl]
 800f7f8:	89a3      	ldrh	r3, [r4, #12]
 800f7fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f7fe:	81a3      	strh	r3, [r4, #12]
 800f800:	f04f 30ff 	mov.w	r0, #4294967295
 800f804:	e7e9      	b.n	800f7da <__ssputs_r+0x8a>
	...

0800f808 <_svfiprintf_r>:
 800f808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f80c:	4698      	mov	r8, r3
 800f80e:	898b      	ldrh	r3, [r1, #12]
 800f810:	061b      	lsls	r3, r3, #24
 800f812:	b09d      	sub	sp, #116	@ 0x74
 800f814:	4607      	mov	r7, r0
 800f816:	460d      	mov	r5, r1
 800f818:	4614      	mov	r4, r2
 800f81a:	d510      	bpl.n	800f83e <_svfiprintf_r+0x36>
 800f81c:	690b      	ldr	r3, [r1, #16]
 800f81e:	b973      	cbnz	r3, 800f83e <_svfiprintf_r+0x36>
 800f820:	2140      	movs	r1, #64	@ 0x40
 800f822:	f7ff fb5b 	bl	800eedc <_malloc_r>
 800f826:	6028      	str	r0, [r5, #0]
 800f828:	6128      	str	r0, [r5, #16]
 800f82a:	b930      	cbnz	r0, 800f83a <_svfiprintf_r+0x32>
 800f82c:	230c      	movs	r3, #12
 800f82e:	603b      	str	r3, [r7, #0]
 800f830:	f04f 30ff 	mov.w	r0, #4294967295
 800f834:	b01d      	add	sp, #116	@ 0x74
 800f836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f83a:	2340      	movs	r3, #64	@ 0x40
 800f83c:	616b      	str	r3, [r5, #20]
 800f83e:	2300      	movs	r3, #0
 800f840:	9309      	str	r3, [sp, #36]	@ 0x24
 800f842:	2320      	movs	r3, #32
 800f844:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f848:	f8cd 800c 	str.w	r8, [sp, #12]
 800f84c:	2330      	movs	r3, #48	@ 0x30
 800f84e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f9ec <_svfiprintf_r+0x1e4>
 800f852:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f856:	f04f 0901 	mov.w	r9, #1
 800f85a:	4623      	mov	r3, r4
 800f85c:	469a      	mov	sl, r3
 800f85e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f862:	b10a      	cbz	r2, 800f868 <_svfiprintf_r+0x60>
 800f864:	2a25      	cmp	r2, #37	@ 0x25
 800f866:	d1f9      	bne.n	800f85c <_svfiprintf_r+0x54>
 800f868:	ebba 0b04 	subs.w	fp, sl, r4
 800f86c:	d00b      	beq.n	800f886 <_svfiprintf_r+0x7e>
 800f86e:	465b      	mov	r3, fp
 800f870:	4622      	mov	r2, r4
 800f872:	4629      	mov	r1, r5
 800f874:	4638      	mov	r0, r7
 800f876:	f7ff ff6b 	bl	800f750 <__ssputs_r>
 800f87a:	3001      	adds	r0, #1
 800f87c:	f000 80a7 	beq.w	800f9ce <_svfiprintf_r+0x1c6>
 800f880:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f882:	445a      	add	r2, fp
 800f884:	9209      	str	r2, [sp, #36]	@ 0x24
 800f886:	f89a 3000 	ldrb.w	r3, [sl]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	f000 809f 	beq.w	800f9ce <_svfiprintf_r+0x1c6>
 800f890:	2300      	movs	r3, #0
 800f892:	f04f 32ff 	mov.w	r2, #4294967295
 800f896:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f89a:	f10a 0a01 	add.w	sl, sl, #1
 800f89e:	9304      	str	r3, [sp, #16]
 800f8a0:	9307      	str	r3, [sp, #28]
 800f8a2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f8a6:	931a      	str	r3, [sp, #104]	@ 0x68
 800f8a8:	4654      	mov	r4, sl
 800f8aa:	2205      	movs	r2, #5
 800f8ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8b0:	484e      	ldr	r0, [pc, #312]	@ (800f9ec <_svfiprintf_r+0x1e4>)
 800f8b2:	f7f0 fcb5 	bl	8000220 <memchr>
 800f8b6:	9a04      	ldr	r2, [sp, #16]
 800f8b8:	b9d8      	cbnz	r0, 800f8f2 <_svfiprintf_r+0xea>
 800f8ba:	06d0      	lsls	r0, r2, #27
 800f8bc:	bf44      	itt	mi
 800f8be:	2320      	movmi	r3, #32
 800f8c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f8c4:	0711      	lsls	r1, r2, #28
 800f8c6:	bf44      	itt	mi
 800f8c8:	232b      	movmi	r3, #43	@ 0x2b
 800f8ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f8ce:	f89a 3000 	ldrb.w	r3, [sl]
 800f8d2:	2b2a      	cmp	r3, #42	@ 0x2a
 800f8d4:	d015      	beq.n	800f902 <_svfiprintf_r+0xfa>
 800f8d6:	9a07      	ldr	r2, [sp, #28]
 800f8d8:	4654      	mov	r4, sl
 800f8da:	2000      	movs	r0, #0
 800f8dc:	f04f 0c0a 	mov.w	ip, #10
 800f8e0:	4621      	mov	r1, r4
 800f8e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f8e6:	3b30      	subs	r3, #48	@ 0x30
 800f8e8:	2b09      	cmp	r3, #9
 800f8ea:	d94b      	bls.n	800f984 <_svfiprintf_r+0x17c>
 800f8ec:	b1b0      	cbz	r0, 800f91c <_svfiprintf_r+0x114>
 800f8ee:	9207      	str	r2, [sp, #28]
 800f8f0:	e014      	b.n	800f91c <_svfiprintf_r+0x114>
 800f8f2:	eba0 0308 	sub.w	r3, r0, r8
 800f8f6:	fa09 f303 	lsl.w	r3, r9, r3
 800f8fa:	4313      	orrs	r3, r2
 800f8fc:	9304      	str	r3, [sp, #16]
 800f8fe:	46a2      	mov	sl, r4
 800f900:	e7d2      	b.n	800f8a8 <_svfiprintf_r+0xa0>
 800f902:	9b03      	ldr	r3, [sp, #12]
 800f904:	1d19      	adds	r1, r3, #4
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	9103      	str	r1, [sp, #12]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	bfbb      	ittet	lt
 800f90e:	425b      	neglt	r3, r3
 800f910:	f042 0202 	orrlt.w	r2, r2, #2
 800f914:	9307      	strge	r3, [sp, #28]
 800f916:	9307      	strlt	r3, [sp, #28]
 800f918:	bfb8      	it	lt
 800f91a:	9204      	strlt	r2, [sp, #16]
 800f91c:	7823      	ldrb	r3, [r4, #0]
 800f91e:	2b2e      	cmp	r3, #46	@ 0x2e
 800f920:	d10a      	bne.n	800f938 <_svfiprintf_r+0x130>
 800f922:	7863      	ldrb	r3, [r4, #1]
 800f924:	2b2a      	cmp	r3, #42	@ 0x2a
 800f926:	d132      	bne.n	800f98e <_svfiprintf_r+0x186>
 800f928:	9b03      	ldr	r3, [sp, #12]
 800f92a:	1d1a      	adds	r2, r3, #4
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	9203      	str	r2, [sp, #12]
 800f930:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f934:	3402      	adds	r4, #2
 800f936:	9305      	str	r3, [sp, #20]
 800f938:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f9fc <_svfiprintf_r+0x1f4>
 800f93c:	7821      	ldrb	r1, [r4, #0]
 800f93e:	2203      	movs	r2, #3
 800f940:	4650      	mov	r0, sl
 800f942:	f7f0 fc6d 	bl	8000220 <memchr>
 800f946:	b138      	cbz	r0, 800f958 <_svfiprintf_r+0x150>
 800f948:	9b04      	ldr	r3, [sp, #16]
 800f94a:	eba0 000a 	sub.w	r0, r0, sl
 800f94e:	2240      	movs	r2, #64	@ 0x40
 800f950:	4082      	lsls	r2, r0
 800f952:	4313      	orrs	r3, r2
 800f954:	3401      	adds	r4, #1
 800f956:	9304      	str	r3, [sp, #16]
 800f958:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f95c:	4824      	ldr	r0, [pc, #144]	@ (800f9f0 <_svfiprintf_r+0x1e8>)
 800f95e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f962:	2206      	movs	r2, #6
 800f964:	f7f0 fc5c 	bl	8000220 <memchr>
 800f968:	2800      	cmp	r0, #0
 800f96a:	d036      	beq.n	800f9da <_svfiprintf_r+0x1d2>
 800f96c:	4b21      	ldr	r3, [pc, #132]	@ (800f9f4 <_svfiprintf_r+0x1ec>)
 800f96e:	bb1b      	cbnz	r3, 800f9b8 <_svfiprintf_r+0x1b0>
 800f970:	9b03      	ldr	r3, [sp, #12]
 800f972:	3307      	adds	r3, #7
 800f974:	f023 0307 	bic.w	r3, r3, #7
 800f978:	3308      	adds	r3, #8
 800f97a:	9303      	str	r3, [sp, #12]
 800f97c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f97e:	4433      	add	r3, r6
 800f980:	9309      	str	r3, [sp, #36]	@ 0x24
 800f982:	e76a      	b.n	800f85a <_svfiprintf_r+0x52>
 800f984:	fb0c 3202 	mla	r2, ip, r2, r3
 800f988:	460c      	mov	r4, r1
 800f98a:	2001      	movs	r0, #1
 800f98c:	e7a8      	b.n	800f8e0 <_svfiprintf_r+0xd8>
 800f98e:	2300      	movs	r3, #0
 800f990:	3401      	adds	r4, #1
 800f992:	9305      	str	r3, [sp, #20]
 800f994:	4619      	mov	r1, r3
 800f996:	f04f 0c0a 	mov.w	ip, #10
 800f99a:	4620      	mov	r0, r4
 800f99c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f9a0:	3a30      	subs	r2, #48	@ 0x30
 800f9a2:	2a09      	cmp	r2, #9
 800f9a4:	d903      	bls.n	800f9ae <_svfiprintf_r+0x1a6>
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d0c6      	beq.n	800f938 <_svfiprintf_r+0x130>
 800f9aa:	9105      	str	r1, [sp, #20]
 800f9ac:	e7c4      	b.n	800f938 <_svfiprintf_r+0x130>
 800f9ae:	fb0c 2101 	mla	r1, ip, r1, r2
 800f9b2:	4604      	mov	r4, r0
 800f9b4:	2301      	movs	r3, #1
 800f9b6:	e7f0      	b.n	800f99a <_svfiprintf_r+0x192>
 800f9b8:	ab03      	add	r3, sp, #12
 800f9ba:	9300      	str	r3, [sp, #0]
 800f9bc:	462a      	mov	r2, r5
 800f9be:	4b0e      	ldr	r3, [pc, #56]	@ (800f9f8 <_svfiprintf_r+0x1f0>)
 800f9c0:	a904      	add	r1, sp, #16
 800f9c2:	4638      	mov	r0, r7
 800f9c4:	f3af 8000 	nop.w
 800f9c8:	1c42      	adds	r2, r0, #1
 800f9ca:	4606      	mov	r6, r0
 800f9cc:	d1d6      	bne.n	800f97c <_svfiprintf_r+0x174>
 800f9ce:	89ab      	ldrh	r3, [r5, #12]
 800f9d0:	065b      	lsls	r3, r3, #25
 800f9d2:	f53f af2d 	bmi.w	800f830 <_svfiprintf_r+0x28>
 800f9d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f9d8:	e72c      	b.n	800f834 <_svfiprintf_r+0x2c>
 800f9da:	ab03      	add	r3, sp, #12
 800f9dc:	9300      	str	r3, [sp, #0]
 800f9de:	462a      	mov	r2, r5
 800f9e0:	4b05      	ldr	r3, [pc, #20]	@ (800f9f8 <_svfiprintf_r+0x1f0>)
 800f9e2:	a904      	add	r1, sp, #16
 800f9e4:	4638      	mov	r0, r7
 800f9e6:	f000 f9bb 	bl	800fd60 <_printf_i>
 800f9ea:	e7ed      	b.n	800f9c8 <_svfiprintf_r+0x1c0>
 800f9ec:	080104d8 	.word	0x080104d8
 800f9f0:	080104e2 	.word	0x080104e2
 800f9f4:	00000000 	.word	0x00000000
 800f9f8:	0800f751 	.word	0x0800f751
 800f9fc:	080104de 	.word	0x080104de

0800fa00 <__sfputc_r>:
 800fa00:	6893      	ldr	r3, [r2, #8]
 800fa02:	3b01      	subs	r3, #1
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	b410      	push	{r4}
 800fa08:	6093      	str	r3, [r2, #8]
 800fa0a:	da08      	bge.n	800fa1e <__sfputc_r+0x1e>
 800fa0c:	6994      	ldr	r4, [r2, #24]
 800fa0e:	42a3      	cmp	r3, r4
 800fa10:	db01      	blt.n	800fa16 <__sfputc_r+0x16>
 800fa12:	290a      	cmp	r1, #10
 800fa14:	d103      	bne.n	800fa1e <__sfputc_r+0x1e>
 800fa16:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fa1a:	f7ff bcc2 	b.w	800f3a2 <__swbuf_r>
 800fa1e:	6813      	ldr	r3, [r2, #0]
 800fa20:	1c58      	adds	r0, r3, #1
 800fa22:	6010      	str	r0, [r2, #0]
 800fa24:	7019      	strb	r1, [r3, #0]
 800fa26:	4608      	mov	r0, r1
 800fa28:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fa2c:	4770      	bx	lr

0800fa2e <__sfputs_r>:
 800fa2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa30:	4606      	mov	r6, r0
 800fa32:	460f      	mov	r7, r1
 800fa34:	4614      	mov	r4, r2
 800fa36:	18d5      	adds	r5, r2, r3
 800fa38:	42ac      	cmp	r4, r5
 800fa3a:	d101      	bne.n	800fa40 <__sfputs_r+0x12>
 800fa3c:	2000      	movs	r0, #0
 800fa3e:	e007      	b.n	800fa50 <__sfputs_r+0x22>
 800fa40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa44:	463a      	mov	r2, r7
 800fa46:	4630      	mov	r0, r6
 800fa48:	f7ff ffda 	bl	800fa00 <__sfputc_r>
 800fa4c:	1c43      	adds	r3, r0, #1
 800fa4e:	d1f3      	bne.n	800fa38 <__sfputs_r+0xa>
 800fa50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fa54 <_vfiprintf_r>:
 800fa54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa58:	460d      	mov	r5, r1
 800fa5a:	b09d      	sub	sp, #116	@ 0x74
 800fa5c:	4614      	mov	r4, r2
 800fa5e:	4698      	mov	r8, r3
 800fa60:	4606      	mov	r6, r0
 800fa62:	b118      	cbz	r0, 800fa6c <_vfiprintf_r+0x18>
 800fa64:	6a03      	ldr	r3, [r0, #32]
 800fa66:	b90b      	cbnz	r3, 800fa6c <_vfiprintf_r+0x18>
 800fa68:	f7ff fb7e 	bl	800f168 <__sinit>
 800fa6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fa6e:	07d9      	lsls	r1, r3, #31
 800fa70:	d405      	bmi.n	800fa7e <_vfiprintf_r+0x2a>
 800fa72:	89ab      	ldrh	r3, [r5, #12]
 800fa74:	059a      	lsls	r2, r3, #22
 800fa76:	d402      	bmi.n	800fa7e <_vfiprintf_r+0x2a>
 800fa78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fa7a:	f7ff fe06 	bl	800f68a <__retarget_lock_acquire_recursive>
 800fa7e:	89ab      	ldrh	r3, [r5, #12]
 800fa80:	071b      	lsls	r3, r3, #28
 800fa82:	d501      	bpl.n	800fa88 <_vfiprintf_r+0x34>
 800fa84:	692b      	ldr	r3, [r5, #16]
 800fa86:	b99b      	cbnz	r3, 800fab0 <_vfiprintf_r+0x5c>
 800fa88:	4629      	mov	r1, r5
 800fa8a:	4630      	mov	r0, r6
 800fa8c:	f7ff fcc8 	bl	800f420 <__swsetup_r>
 800fa90:	b170      	cbz	r0, 800fab0 <_vfiprintf_r+0x5c>
 800fa92:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fa94:	07dc      	lsls	r4, r3, #31
 800fa96:	d504      	bpl.n	800faa2 <_vfiprintf_r+0x4e>
 800fa98:	f04f 30ff 	mov.w	r0, #4294967295
 800fa9c:	b01d      	add	sp, #116	@ 0x74
 800fa9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800faa2:	89ab      	ldrh	r3, [r5, #12]
 800faa4:	0598      	lsls	r0, r3, #22
 800faa6:	d4f7      	bmi.n	800fa98 <_vfiprintf_r+0x44>
 800faa8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800faaa:	f7ff fdef 	bl	800f68c <__retarget_lock_release_recursive>
 800faae:	e7f3      	b.n	800fa98 <_vfiprintf_r+0x44>
 800fab0:	2300      	movs	r3, #0
 800fab2:	9309      	str	r3, [sp, #36]	@ 0x24
 800fab4:	2320      	movs	r3, #32
 800fab6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800faba:	f8cd 800c 	str.w	r8, [sp, #12]
 800fabe:	2330      	movs	r3, #48	@ 0x30
 800fac0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800fc70 <_vfiprintf_r+0x21c>
 800fac4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fac8:	f04f 0901 	mov.w	r9, #1
 800facc:	4623      	mov	r3, r4
 800face:	469a      	mov	sl, r3
 800fad0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fad4:	b10a      	cbz	r2, 800fada <_vfiprintf_r+0x86>
 800fad6:	2a25      	cmp	r2, #37	@ 0x25
 800fad8:	d1f9      	bne.n	800face <_vfiprintf_r+0x7a>
 800fada:	ebba 0b04 	subs.w	fp, sl, r4
 800fade:	d00b      	beq.n	800faf8 <_vfiprintf_r+0xa4>
 800fae0:	465b      	mov	r3, fp
 800fae2:	4622      	mov	r2, r4
 800fae4:	4629      	mov	r1, r5
 800fae6:	4630      	mov	r0, r6
 800fae8:	f7ff ffa1 	bl	800fa2e <__sfputs_r>
 800faec:	3001      	adds	r0, #1
 800faee:	f000 80a7 	beq.w	800fc40 <_vfiprintf_r+0x1ec>
 800faf2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800faf4:	445a      	add	r2, fp
 800faf6:	9209      	str	r2, [sp, #36]	@ 0x24
 800faf8:	f89a 3000 	ldrb.w	r3, [sl]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	f000 809f 	beq.w	800fc40 <_vfiprintf_r+0x1ec>
 800fb02:	2300      	movs	r3, #0
 800fb04:	f04f 32ff 	mov.w	r2, #4294967295
 800fb08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fb0c:	f10a 0a01 	add.w	sl, sl, #1
 800fb10:	9304      	str	r3, [sp, #16]
 800fb12:	9307      	str	r3, [sp, #28]
 800fb14:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fb18:	931a      	str	r3, [sp, #104]	@ 0x68
 800fb1a:	4654      	mov	r4, sl
 800fb1c:	2205      	movs	r2, #5
 800fb1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb22:	4853      	ldr	r0, [pc, #332]	@ (800fc70 <_vfiprintf_r+0x21c>)
 800fb24:	f7f0 fb7c 	bl	8000220 <memchr>
 800fb28:	9a04      	ldr	r2, [sp, #16]
 800fb2a:	b9d8      	cbnz	r0, 800fb64 <_vfiprintf_r+0x110>
 800fb2c:	06d1      	lsls	r1, r2, #27
 800fb2e:	bf44      	itt	mi
 800fb30:	2320      	movmi	r3, #32
 800fb32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fb36:	0713      	lsls	r3, r2, #28
 800fb38:	bf44      	itt	mi
 800fb3a:	232b      	movmi	r3, #43	@ 0x2b
 800fb3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fb40:	f89a 3000 	ldrb.w	r3, [sl]
 800fb44:	2b2a      	cmp	r3, #42	@ 0x2a
 800fb46:	d015      	beq.n	800fb74 <_vfiprintf_r+0x120>
 800fb48:	9a07      	ldr	r2, [sp, #28]
 800fb4a:	4654      	mov	r4, sl
 800fb4c:	2000      	movs	r0, #0
 800fb4e:	f04f 0c0a 	mov.w	ip, #10
 800fb52:	4621      	mov	r1, r4
 800fb54:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fb58:	3b30      	subs	r3, #48	@ 0x30
 800fb5a:	2b09      	cmp	r3, #9
 800fb5c:	d94b      	bls.n	800fbf6 <_vfiprintf_r+0x1a2>
 800fb5e:	b1b0      	cbz	r0, 800fb8e <_vfiprintf_r+0x13a>
 800fb60:	9207      	str	r2, [sp, #28]
 800fb62:	e014      	b.n	800fb8e <_vfiprintf_r+0x13a>
 800fb64:	eba0 0308 	sub.w	r3, r0, r8
 800fb68:	fa09 f303 	lsl.w	r3, r9, r3
 800fb6c:	4313      	orrs	r3, r2
 800fb6e:	9304      	str	r3, [sp, #16]
 800fb70:	46a2      	mov	sl, r4
 800fb72:	e7d2      	b.n	800fb1a <_vfiprintf_r+0xc6>
 800fb74:	9b03      	ldr	r3, [sp, #12]
 800fb76:	1d19      	adds	r1, r3, #4
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	9103      	str	r1, [sp, #12]
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	bfbb      	ittet	lt
 800fb80:	425b      	neglt	r3, r3
 800fb82:	f042 0202 	orrlt.w	r2, r2, #2
 800fb86:	9307      	strge	r3, [sp, #28]
 800fb88:	9307      	strlt	r3, [sp, #28]
 800fb8a:	bfb8      	it	lt
 800fb8c:	9204      	strlt	r2, [sp, #16]
 800fb8e:	7823      	ldrb	r3, [r4, #0]
 800fb90:	2b2e      	cmp	r3, #46	@ 0x2e
 800fb92:	d10a      	bne.n	800fbaa <_vfiprintf_r+0x156>
 800fb94:	7863      	ldrb	r3, [r4, #1]
 800fb96:	2b2a      	cmp	r3, #42	@ 0x2a
 800fb98:	d132      	bne.n	800fc00 <_vfiprintf_r+0x1ac>
 800fb9a:	9b03      	ldr	r3, [sp, #12]
 800fb9c:	1d1a      	adds	r2, r3, #4
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	9203      	str	r2, [sp, #12]
 800fba2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fba6:	3402      	adds	r4, #2
 800fba8:	9305      	str	r3, [sp, #20]
 800fbaa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fc80 <_vfiprintf_r+0x22c>
 800fbae:	7821      	ldrb	r1, [r4, #0]
 800fbb0:	2203      	movs	r2, #3
 800fbb2:	4650      	mov	r0, sl
 800fbb4:	f7f0 fb34 	bl	8000220 <memchr>
 800fbb8:	b138      	cbz	r0, 800fbca <_vfiprintf_r+0x176>
 800fbba:	9b04      	ldr	r3, [sp, #16]
 800fbbc:	eba0 000a 	sub.w	r0, r0, sl
 800fbc0:	2240      	movs	r2, #64	@ 0x40
 800fbc2:	4082      	lsls	r2, r0
 800fbc4:	4313      	orrs	r3, r2
 800fbc6:	3401      	adds	r4, #1
 800fbc8:	9304      	str	r3, [sp, #16]
 800fbca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fbce:	4829      	ldr	r0, [pc, #164]	@ (800fc74 <_vfiprintf_r+0x220>)
 800fbd0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fbd4:	2206      	movs	r2, #6
 800fbd6:	f7f0 fb23 	bl	8000220 <memchr>
 800fbda:	2800      	cmp	r0, #0
 800fbdc:	d03f      	beq.n	800fc5e <_vfiprintf_r+0x20a>
 800fbde:	4b26      	ldr	r3, [pc, #152]	@ (800fc78 <_vfiprintf_r+0x224>)
 800fbe0:	bb1b      	cbnz	r3, 800fc2a <_vfiprintf_r+0x1d6>
 800fbe2:	9b03      	ldr	r3, [sp, #12]
 800fbe4:	3307      	adds	r3, #7
 800fbe6:	f023 0307 	bic.w	r3, r3, #7
 800fbea:	3308      	adds	r3, #8
 800fbec:	9303      	str	r3, [sp, #12]
 800fbee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbf0:	443b      	add	r3, r7
 800fbf2:	9309      	str	r3, [sp, #36]	@ 0x24
 800fbf4:	e76a      	b.n	800facc <_vfiprintf_r+0x78>
 800fbf6:	fb0c 3202 	mla	r2, ip, r2, r3
 800fbfa:	460c      	mov	r4, r1
 800fbfc:	2001      	movs	r0, #1
 800fbfe:	e7a8      	b.n	800fb52 <_vfiprintf_r+0xfe>
 800fc00:	2300      	movs	r3, #0
 800fc02:	3401      	adds	r4, #1
 800fc04:	9305      	str	r3, [sp, #20]
 800fc06:	4619      	mov	r1, r3
 800fc08:	f04f 0c0a 	mov.w	ip, #10
 800fc0c:	4620      	mov	r0, r4
 800fc0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fc12:	3a30      	subs	r2, #48	@ 0x30
 800fc14:	2a09      	cmp	r2, #9
 800fc16:	d903      	bls.n	800fc20 <_vfiprintf_r+0x1cc>
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d0c6      	beq.n	800fbaa <_vfiprintf_r+0x156>
 800fc1c:	9105      	str	r1, [sp, #20]
 800fc1e:	e7c4      	b.n	800fbaa <_vfiprintf_r+0x156>
 800fc20:	fb0c 2101 	mla	r1, ip, r1, r2
 800fc24:	4604      	mov	r4, r0
 800fc26:	2301      	movs	r3, #1
 800fc28:	e7f0      	b.n	800fc0c <_vfiprintf_r+0x1b8>
 800fc2a:	ab03      	add	r3, sp, #12
 800fc2c:	9300      	str	r3, [sp, #0]
 800fc2e:	462a      	mov	r2, r5
 800fc30:	4b12      	ldr	r3, [pc, #72]	@ (800fc7c <_vfiprintf_r+0x228>)
 800fc32:	a904      	add	r1, sp, #16
 800fc34:	4630      	mov	r0, r6
 800fc36:	f3af 8000 	nop.w
 800fc3a:	4607      	mov	r7, r0
 800fc3c:	1c78      	adds	r0, r7, #1
 800fc3e:	d1d6      	bne.n	800fbee <_vfiprintf_r+0x19a>
 800fc40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fc42:	07d9      	lsls	r1, r3, #31
 800fc44:	d405      	bmi.n	800fc52 <_vfiprintf_r+0x1fe>
 800fc46:	89ab      	ldrh	r3, [r5, #12]
 800fc48:	059a      	lsls	r2, r3, #22
 800fc4a:	d402      	bmi.n	800fc52 <_vfiprintf_r+0x1fe>
 800fc4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fc4e:	f7ff fd1d 	bl	800f68c <__retarget_lock_release_recursive>
 800fc52:	89ab      	ldrh	r3, [r5, #12]
 800fc54:	065b      	lsls	r3, r3, #25
 800fc56:	f53f af1f 	bmi.w	800fa98 <_vfiprintf_r+0x44>
 800fc5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fc5c:	e71e      	b.n	800fa9c <_vfiprintf_r+0x48>
 800fc5e:	ab03      	add	r3, sp, #12
 800fc60:	9300      	str	r3, [sp, #0]
 800fc62:	462a      	mov	r2, r5
 800fc64:	4b05      	ldr	r3, [pc, #20]	@ (800fc7c <_vfiprintf_r+0x228>)
 800fc66:	a904      	add	r1, sp, #16
 800fc68:	4630      	mov	r0, r6
 800fc6a:	f000 f879 	bl	800fd60 <_printf_i>
 800fc6e:	e7e4      	b.n	800fc3a <_vfiprintf_r+0x1e6>
 800fc70:	080104d8 	.word	0x080104d8
 800fc74:	080104e2 	.word	0x080104e2
 800fc78:	00000000 	.word	0x00000000
 800fc7c:	0800fa2f 	.word	0x0800fa2f
 800fc80:	080104de 	.word	0x080104de

0800fc84 <_printf_common>:
 800fc84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc88:	4616      	mov	r6, r2
 800fc8a:	4698      	mov	r8, r3
 800fc8c:	688a      	ldr	r2, [r1, #8]
 800fc8e:	690b      	ldr	r3, [r1, #16]
 800fc90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fc94:	4293      	cmp	r3, r2
 800fc96:	bfb8      	it	lt
 800fc98:	4613      	movlt	r3, r2
 800fc9a:	6033      	str	r3, [r6, #0]
 800fc9c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800fca0:	4607      	mov	r7, r0
 800fca2:	460c      	mov	r4, r1
 800fca4:	b10a      	cbz	r2, 800fcaa <_printf_common+0x26>
 800fca6:	3301      	adds	r3, #1
 800fca8:	6033      	str	r3, [r6, #0]
 800fcaa:	6823      	ldr	r3, [r4, #0]
 800fcac:	0699      	lsls	r1, r3, #26
 800fcae:	bf42      	ittt	mi
 800fcb0:	6833      	ldrmi	r3, [r6, #0]
 800fcb2:	3302      	addmi	r3, #2
 800fcb4:	6033      	strmi	r3, [r6, #0]
 800fcb6:	6825      	ldr	r5, [r4, #0]
 800fcb8:	f015 0506 	ands.w	r5, r5, #6
 800fcbc:	d106      	bne.n	800fccc <_printf_common+0x48>
 800fcbe:	f104 0a19 	add.w	sl, r4, #25
 800fcc2:	68e3      	ldr	r3, [r4, #12]
 800fcc4:	6832      	ldr	r2, [r6, #0]
 800fcc6:	1a9b      	subs	r3, r3, r2
 800fcc8:	42ab      	cmp	r3, r5
 800fcca:	dc26      	bgt.n	800fd1a <_printf_common+0x96>
 800fccc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fcd0:	6822      	ldr	r2, [r4, #0]
 800fcd2:	3b00      	subs	r3, #0
 800fcd4:	bf18      	it	ne
 800fcd6:	2301      	movne	r3, #1
 800fcd8:	0692      	lsls	r2, r2, #26
 800fcda:	d42b      	bmi.n	800fd34 <_printf_common+0xb0>
 800fcdc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fce0:	4641      	mov	r1, r8
 800fce2:	4638      	mov	r0, r7
 800fce4:	47c8      	blx	r9
 800fce6:	3001      	adds	r0, #1
 800fce8:	d01e      	beq.n	800fd28 <_printf_common+0xa4>
 800fcea:	6823      	ldr	r3, [r4, #0]
 800fcec:	6922      	ldr	r2, [r4, #16]
 800fcee:	f003 0306 	and.w	r3, r3, #6
 800fcf2:	2b04      	cmp	r3, #4
 800fcf4:	bf02      	ittt	eq
 800fcf6:	68e5      	ldreq	r5, [r4, #12]
 800fcf8:	6833      	ldreq	r3, [r6, #0]
 800fcfa:	1aed      	subeq	r5, r5, r3
 800fcfc:	68a3      	ldr	r3, [r4, #8]
 800fcfe:	bf0c      	ite	eq
 800fd00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fd04:	2500      	movne	r5, #0
 800fd06:	4293      	cmp	r3, r2
 800fd08:	bfc4      	itt	gt
 800fd0a:	1a9b      	subgt	r3, r3, r2
 800fd0c:	18ed      	addgt	r5, r5, r3
 800fd0e:	2600      	movs	r6, #0
 800fd10:	341a      	adds	r4, #26
 800fd12:	42b5      	cmp	r5, r6
 800fd14:	d11a      	bne.n	800fd4c <_printf_common+0xc8>
 800fd16:	2000      	movs	r0, #0
 800fd18:	e008      	b.n	800fd2c <_printf_common+0xa8>
 800fd1a:	2301      	movs	r3, #1
 800fd1c:	4652      	mov	r2, sl
 800fd1e:	4641      	mov	r1, r8
 800fd20:	4638      	mov	r0, r7
 800fd22:	47c8      	blx	r9
 800fd24:	3001      	adds	r0, #1
 800fd26:	d103      	bne.n	800fd30 <_printf_common+0xac>
 800fd28:	f04f 30ff 	mov.w	r0, #4294967295
 800fd2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd30:	3501      	adds	r5, #1
 800fd32:	e7c6      	b.n	800fcc2 <_printf_common+0x3e>
 800fd34:	18e1      	adds	r1, r4, r3
 800fd36:	1c5a      	adds	r2, r3, #1
 800fd38:	2030      	movs	r0, #48	@ 0x30
 800fd3a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fd3e:	4422      	add	r2, r4
 800fd40:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fd44:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fd48:	3302      	adds	r3, #2
 800fd4a:	e7c7      	b.n	800fcdc <_printf_common+0x58>
 800fd4c:	2301      	movs	r3, #1
 800fd4e:	4622      	mov	r2, r4
 800fd50:	4641      	mov	r1, r8
 800fd52:	4638      	mov	r0, r7
 800fd54:	47c8      	blx	r9
 800fd56:	3001      	adds	r0, #1
 800fd58:	d0e6      	beq.n	800fd28 <_printf_common+0xa4>
 800fd5a:	3601      	adds	r6, #1
 800fd5c:	e7d9      	b.n	800fd12 <_printf_common+0x8e>
	...

0800fd60 <_printf_i>:
 800fd60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fd64:	7e0f      	ldrb	r7, [r1, #24]
 800fd66:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fd68:	2f78      	cmp	r7, #120	@ 0x78
 800fd6a:	4691      	mov	r9, r2
 800fd6c:	4680      	mov	r8, r0
 800fd6e:	460c      	mov	r4, r1
 800fd70:	469a      	mov	sl, r3
 800fd72:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800fd76:	d807      	bhi.n	800fd88 <_printf_i+0x28>
 800fd78:	2f62      	cmp	r7, #98	@ 0x62
 800fd7a:	d80a      	bhi.n	800fd92 <_printf_i+0x32>
 800fd7c:	2f00      	cmp	r7, #0
 800fd7e:	f000 80d2 	beq.w	800ff26 <_printf_i+0x1c6>
 800fd82:	2f58      	cmp	r7, #88	@ 0x58
 800fd84:	f000 80b9 	beq.w	800fefa <_printf_i+0x19a>
 800fd88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fd8c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800fd90:	e03a      	b.n	800fe08 <_printf_i+0xa8>
 800fd92:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800fd96:	2b15      	cmp	r3, #21
 800fd98:	d8f6      	bhi.n	800fd88 <_printf_i+0x28>
 800fd9a:	a101      	add	r1, pc, #4	@ (adr r1, 800fda0 <_printf_i+0x40>)
 800fd9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fda0:	0800fdf9 	.word	0x0800fdf9
 800fda4:	0800fe0d 	.word	0x0800fe0d
 800fda8:	0800fd89 	.word	0x0800fd89
 800fdac:	0800fd89 	.word	0x0800fd89
 800fdb0:	0800fd89 	.word	0x0800fd89
 800fdb4:	0800fd89 	.word	0x0800fd89
 800fdb8:	0800fe0d 	.word	0x0800fe0d
 800fdbc:	0800fd89 	.word	0x0800fd89
 800fdc0:	0800fd89 	.word	0x0800fd89
 800fdc4:	0800fd89 	.word	0x0800fd89
 800fdc8:	0800fd89 	.word	0x0800fd89
 800fdcc:	0800ff0d 	.word	0x0800ff0d
 800fdd0:	0800fe37 	.word	0x0800fe37
 800fdd4:	0800fec7 	.word	0x0800fec7
 800fdd8:	0800fd89 	.word	0x0800fd89
 800fddc:	0800fd89 	.word	0x0800fd89
 800fde0:	0800ff2f 	.word	0x0800ff2f
 800fde4:	0800fd89 	.word	0x0800fd89
 800fde8:	0800fe37 	.word	0x0800fe37
 800fdec:	0800fd89 	.word	0x0800fd89
 800fdf0:	0800fd89 	.word	0x0800fd89
 800fdf4:	0800fecf 	.word	0x0800fecf
 800fdf8:	6833      	ldr	r3, [r6, #0]
 800fdfa:	1d1a      	adds	r2, r3, #4
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	6032      	str	r2, [r6, #0]
 800fe00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fe04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800fe08:	2301      	movs	r3, #1
 800fe0a:	e09d      	b.n	800ff48 <_printf_i+0x1e8>
 800fe0c:	6833      	ldr	r3, [r6, #0]
 800fe0e:	6820      	ldr	r0, [r4, #0]
 800fe10:	1d19      	adds	r1, r3, #4
 800fe12:	6031      	str	r1, [r6, #0]
 800fe14:	0606      	lsls	r6, r0, #24
 800fe16:	d501      	bpl.n	800fe1c <_printf_i+0xbc>
 800fe18:	681d      	ldr	r5, [r3, #0]
 800fe1a:	e003      	b.n	800fe24 <_printf_i+0xc4>
 800fe1c:	0645      	lsls	r5, r0, #25
 800fe1e:	d5fb      	bpl.n	800fe18 <_printf_i+0xb8>
 800fe20:	f9b3 5000 	ldrsh.w	r5, [r3]
 800fe24:	2d00      	cmp	r5, #0
 800fe26:	da03      	bge.n	800fe30 <_printf_i+0xd0>
 800fe28:	232d      	movs	r3, #45	@ 0x2d
 800fe2a:	426d      	negs	r5, r5
 800fe2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fe30:	4859      	ldr	r0, [pc, #356]	@ (800ff98 <_printf_i+0x238>)
 800fe32:	230a      	movs	r3, #10
 800fe34:	e011      	b.n	800fe5a <_printf_i+0xfa>
 800fe36:	6821      	ldr	r1, [r4, #0]
 800fe38:	6833      	ldr	r3, [r6, #0]
 800fe3a:	0608      	lsls	r0, r1, #24
 800fe3c:	f853 5b04 	ldr.w	r5, [r3], #4
 800fe40:	d402      	bmi.n	800fe48 <_printf_i+0xe8>
 800fe42:	0649      	lsls	r1, r1, #25
 800fe44:	bf48      	it	mi
 800fe46:	b2ad      	uxthmi	r5, r5
 800fe48:	2f6f      	cmp	r7, #111	@ 0x6f
 800fe4a:	4853      	ldr	r0, [pc, #332]	@ (800ff98 <_printf_i+0x238>)
 800fe4c:	6033      	str	r3, [r6, #0]
 800fe4e:	bf14      	ite	ne
 800fe50:	230a      	movne	r3, #10
 800fe52:	2308      	moveq	r3, #8
 800fe54:	2100      	movs	r1, #0
 800fe56:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800fe5a:	6866      	ldr	r6, [r4, #4]
 800fe5c:	60a6      	str	r6, [r4, #8]
 800fe5e:	2e00      	cmp	r6, #0
 800fe60:	bfa2      	ittt	ge
 800fe62:	6821      	ldrge	r1, [r4, #0]
 800fe64:	f021 0104 	bicge.w	r1, r1, #4
 800fe68:	6021      	strge	r1, [r4, #0]
 800fe6a:	b90d      	cbnz	r5, 800fe70 <_printf_i+0x110>
 800fe6c:	2e00      	cmp	r6, #0
 800fe6e:	d04b      	beq.n	800ff08 <_printf_i+0x1a8>
 800fe70:	4616      	mov	r6, r2
 800fe72:	fbb5 f1f3 	udiv	r1, r5, r3
 800fe76:	fb03 5711 	mls	r7, r3, r1, r5
 800fe7a:	5dc7      	ldrb	r7, [r0, r7]
 800fe7c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fe80:	462f      	mov	r7, r5
 800fe82:	42bb      	cmp	r3, r7
 800fe84:	460d      	mov	r5, r1
 800fe86:	d9f4      	bls.n	800fe72 <_printf_i+0x112>
 800fe88:	2b08      	cmp	r3, #8
 800fe8a:	d10b      	bne.n	800fea4 <_printf_i+0x144>
 800fe8c:	6823      	ldr	r3, [r4, #0]
 800fe8e:	07df      	lsls	r7, r3, #31
 800fe90:	d508      	bpl.n	800fea4 <_printf_i+0x144>
 800fe92:	6923      	ldr	r3, [r4, #16]
 800fe94:	6861      	ldr	r1, [r4, #4]
 800fe96:	4299      	cmp	r1, r3
 800fe98:	bfde      	ittt	le
 800fe9a:	2330      	movle	r3, #48	@ 0x30
 800fe9c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fea0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fea4:	1b92      	subs	r2, r2, r6
 800fea6:	6122      	str	r2, [r4, #16]
 800fea8:	f8cd a000 	str.w	sl, [sp]
 800feac:	464b      	mov	r3, r9
 800feae:	aa03      	add	r2, sp, #12
 800feb0:	4621      	mov	r1, r4
 800feb2:	4640      	mov	r0, r8
 800feb4:	f7ff fee6 	bl	800fc84 <_printf_common>
 800feb8:	3001      	adds	r0, #1
 800feba:	d14a      	bne.n	800ff52 <_printf_i+0x1f2>
 800febc:	f04f 30ff 	mov.w	r0, #4294967295
 800fec0:	b004      	add	sp, #16
 800fec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fec6:	6823      	ldr	r3, [r4, #0]
 800fec8:	f043 0320 	orr.w	r3, r3, #32
 800fecc:	6023      	str	r3, [r4, #0]
 800fece:	4833      	ldr	r0, [pc, #204]	@ (800ff9c <_printf_i+0x23c>)
 800fed0:	2778      	movs	r7, #120	@ 0x78
 800fed2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800fed6:	6823      	ldr	r3, [r4, #0]
 800fed8:	6831      	ldr	r1, [r6, #0]
 800feda:	061f      	lsls	r7, r3, #24
 800fedc:	f851 5b04 	ldr.w	r5, [r1], #4
 800fee0:	d402      	bmi.n	800fee8 <_printf_i+0x188>
 800fee2:	065f      	lsls	r7, r3, #25
 800fee4:	bf48      	it	mi
 800fee6:	b2ad      	uxthmi	r5, r5
 800fee8:	6031      	str	r1, [r6, #0]
 800feea:	07d9      	lsls	r1, r3, #31
 800feec:	bf44      	itt	mi
 800feee:	f043 0320 	orrmi.w	r3, r3, #32
 800fef2:	6023      	strmi	r3, [r4, #0]
 800fef4:	b11d      	cbz	r5, 800fefe <_printf_i+0x19e>
 800fef6:	2310      	movs	r3, #16
 800fef8:	e7ac      	b.n	800fe54 <_printf_i+0xf4>
 800fefa:	4827      	ldr	r0, [pc, #156]	@ (800ff98 <_printf_i+0x238>)
 800fefc:	e7e9      	b.n	800fed2 <_printf_i+0x172>
 800fefe:	6823      	ldr	r3, [r4, #0]
 800ff00:	f023 0320 	bic.w	r3, r3, #32
 800ff04:	6023      	str	r3, [r4, #0]
 800ff06:	e7f6      	b.n	800fef6 <_printf_i+0x196>
 800ff08:	4616      	mov	r6, r2
 800ff0a:	e7bd      	b.n	800fe88 <_printf_i+0x128>
 800ff0c:	6833      	ldr	r3, [r6, #0]
 800ff0e:	6825      	ldr	r5, [r4, #0]
 800ff10:	6961      	ldr	r1, [r4, #20]
 800ff12:	1d18      	adds	r0, r3, #4
 800ff14:	6030      	str	r0, [r6, #0]
 800ff16:	062e      	lsls	r6, r5, #24
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	d501      	bpl.n	800ff20 <_printf_i+0x1c0>
 800ff1c:	6019      	str	r1, [r3, #0]
 800ff1e:	e002      	b.n	800ff26 <_printf_i+0x1c6>
 800ff20:	0668      	lsls	r0, r5, #25
 800ff22:	d5fb      	bpl.n	800ff1c <_printf_i+0x1bc>
 800ff24:	8019      	strh	r1, [r3, #0]
 800ff26:	2300      	movs	r3, #0
 800ff28:	6123      	str	r3, [r4, #16]
 800ff2a:	4616      	mov	r6, r2
 800ff2c:	e7bc      	b.n	800fea8 <_printf_i+0x148>
 800ff2e:	6833      	ldr	r3, [r6, #0]
 800ff30:	1d1a      	adds	r2, r3, #4
 800ff32:	6032      	str	r2, [r6, #0]
 800ff34:	681e      	ldr	r6, [r3, #0]
 800ff36:	6862      	ldr	r2, [r4, #4]
 800ff38:	2100      	movs	r1, #0
 800ff3a:	4630      	mov	r0, r6
 800ff3c:	f7f0 f970 	bl	8000220 <memchr>
 800ff40:	b108      	cbz	r0, 800ff46 <_printf_i+0x1e6>
 800ff42:	1b80      	subs	r0, r0, r6
 800ff44:	6060      	str	r0, [r4, #4]
 800ff46:	6863      	ldr	r3, [r4, #4]
 800ff48:	6123      	str	r3, [r4, #16]
 800ff4a:	2300      	movs	r3, #0
 800ff4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ff50:	e7aa      	b.n	800fea8 <_printf_i+0x148>
 800ff52:	6923      	ldr	r3, [r4, #16]
 800ff54:	4632      	mov	r2, r6
 800ff56:	4649      	mov	r1, r9
 800ff58:	4640      	mov	r0, r8
 800ff5a:	47d0      	blx	sl
 800ff5c:	3001      	adds	r0, #1
 800ff5e:	d0ad      	beq.n	800febc <_printf_i+0x15c>
 800ff60:	6823      	ldr	r3, [r4, #0]
 800ff62:	079b      	lsls	r3, r3, #30
 800ff64:	d413      	bmi.n	800ff8e <_printf_i+0x22e>
 800ff66:	68e0      	ldr	r0, [r4, #12]
 800ff68:	9b03      	ldr	r3, [sp, #12]
 800ff6a:	4298      	cmp	r0, r3
 800ff6c:	bfb8      	it	lt
 800ff6e:	4618      	movlt	r0, r3
 800ff70:	e7a6      	b.n	800fec0 <_printf_i+0x160>
 800ff72:	2301      	movs	r3, #1
 800ff74:	4632      	mov	r2, r6
 800ff76:	4649      	mov	r1, r9
 800ff78:	4640      	mov	r0, r8
 800ff7a:	47d0      	blx	sl
 800ff7c:	3001      	adds	r0, #1
 800ff7e:	d09d      	beq.n	800febc <_printf_i+0x15c>
 800ff80:	3501      	adds	r5, #1
 800ff82:	68e3      	ldr	r3, [r4, #12]
 800ff84:	9903      	ldr	r1, [sp, #12]
 800ff86:	1a5b      	subs	r3, r3, r1
 800ff88:	42ab      	cmp	r3, r5
 800ff8a:	dcf2      	bgt.n	800ff72 <_printf_i+0x212>
 800ff8c:	e7eb      	b.n	800ff66 <_printf_i+0x206>
 800ff8e:	2500      	movs	r5, #0
 800ff90:	f104 0619 	add.w	r6, r4, #25
 800ff94:	e7f5      	b.n	800ff82 <_printf_i+0x222>
 800ff96:	bf00      	nop
 800ff98:	080104e9 	.word	0x080104e9
 800ff9c:	080104fa 	.word	0x080104fa

0800ffa0 <__sflush_r>:
 800ffa0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ffa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffa8:	0716      	lsls	r6, r2, #28
 800ffaa:	4605      	mov	r5, r0
 800ffac:	460c      	mov	r4, r1
 800ffae:	d454      	bmi.n	801005a <__sflush_r+0xba>
 800ffb0:	684b      	ldr	r3, [r1, #4]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	dc02      	bgt.n	800ffbc <__sflush_r+0x1c>
 800ffb6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	dd48      	ble.n	801004e <__sflush_r+0xae>
 800ffbc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ffbe:	2e00      	cmp	r6, #0
 800ffc0:	d045      	beq.n	801004e <__sflush_r+0xae>
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ffc8:	682f      	ldr	r7, [r5, #0]
 800ffca:	6a21      	ldr	r1, [r4, #32]
 800ffcc:	602b      	str	r3, [r5, #0]
 800ffce:	d030      	beq.n	8010032 <__sflush_r+0x92>
 800ffd0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ffd2:	89a3      	ldrh	r3, [r4, #12]
 800ffd4:	0759      	lsls	r1, r3, #29
 800ffd6:	d505      	bpl.n	800ffe4 <__sflush_r+0x44>
 800ffd8:	6863      	ldr	r3, [r4, #4]
 800ffda:	1ad2      	subs	r2, r2, r3
 800ffdc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ffde:	b10b      	cbz	r3, 800ffe4 <__sflush_r+0x44>
 800ffe0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ffe2:	1ad2      	subs	r2, r2, r3
 800ffe4:	2300      	movs	r3, #0
 800ffe6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ffe8:	6a21      	ldr	r1, [r4, #32]
 800ffea:	4628      	mov	r0, r5
 800ffec:	47b0      	blx	r6
 800ffee:	1c43      	adds	r3, r0, #1
 800fff0:	89a3      	ldrh	r3, [r4, #12]
 800fff2:	d106      	bne.n	8010002 <__sflush_r+0x62>
 800fff4:	6829      	ldr	r1, [r5, #0]
 800fff6:	291d      	cmp	r1, #29
 800fff8:	d82b      	bhi.n	8010052 <__sflush_r+0xb2>
 800fffa:	4a2a      	ldr	r2, [pc, #168]	@ (80100a4 <__sflush_r+0x104>)
 800fffc:	410a      	asrs	r2, r1
 800fffe:	07d6      	lsls	r6, r2, #31
 8010000:	d427      	bmi.n	8010052 <__sflush_r+0xb2>
 8010002:	2200      	movs	r2, #0
 8010004:	6062      	str	r2, [r4, #4]
 8010006:	04d9      	lsls	r1, r3, #19
 8010008:	6922      	ldr	r2, [r4, #16]
 801000a:	6022      	str	r2, [r4, #0]
 801000c:	d504      	bpl.n	8010018 <__sflush_r+0x78>
 801000e:	1c42      	adds	r2, r0, #1
 8010010:	d101      	bne.n	8010016 <__sflush_r+0x76>
 8010012:	682b      	ldr	r3, [r5, #0]
 8010014:	b903      	cbnz	r3, 8010018 <__sflush_r+0x78>
 8010016:	6560      	str	r0, [r4, #84]	@ 0x54
 8010018:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801001a:	602f      	str	r7, [r5, #0]
 801001c:	b1b9      	cbz	r1, 801004e <__sflush_r+0xae>
 801001e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010022:	4299      	cmp	r1, r3
 8010024:	d002      	beq.n	801002c <__sflush_r+0x8c>
 8010026:	4628      	mov	r0, r5
 8010028:	f7ff fb40 	bl	800f6ac <_free_r>
 801002c:	2300      	movs	r3, #0
 801002e:	6363      	str	r3, [r4, #52]	@ 0x34
 8010030:	e00d      	b.n	801004e <__sflush_r+0xae>
 8010032:	2301      	movs	r3, #1
 8010034:	4628      	mov	r0, r5
 8010036:	47b0      	blx	r6
 8010038:	4602      	mov	r2, r0
 801003a:	1c50      	adds	r0, r2, #1
 801003c:	d1c9      	bne.n	800ffd2 <__sflush_r+0x32>
 801003e:	682b      	ldr	r3, [r5, #0]
 8010040:	2b00      	cmp	r3, #0
 8010042:	d0c6      	beq.n	800ffd2 <__sflush_r+0x32>
 8010044:	2b1d      	cmp	r3, #29
 8010046:	d001      	beq.n	801004c <__sflush_r+0xac>
 8010048:	2b16      	cmp	r3, #22
 801004a:	d11e      	bne.n	801008a <__sflush_r+0xea>
 801004c:	602f      	str	r7, [r5, #0]
 801004e:	2000      	movs	r0, #0
 8010050:	e022      	b.n	8010098 <__sflush_r+0xf8>
 8010052:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010056:	b21b      	sxth	r3, r3
 8010058:	e01b      	b.n	8010092 <__sflush_r+0xf2>
 801005a:	690f      	ldr	r7, [r1, #16]
 801005c:	2f00      	cmp	r7, #0
 801005e:	d0f6      	beq.n	801004e <__sflush_r+0xae>
 8010060:	0793      	lsls	r3, r2, #30
 8010062:	680e      	ldr	r6, [r1, #0]
 8010064:	bf08      	it	eq
 8010066:	694b      	ldreq	r3, [r1, #20]
 8010068:	600f      	str	r7, [r1, #0]
 801006a:	bf18      	it	ne
 801006c:	2300      	movne	r3, #0
 801006e:	eba6 0807 	sub.w	r8, r6, r7
 8010072:	608b      	str	r3, [r1, #8]
 8010074:	f1b8 0f00 	cmp.w	r8, #0
 8010078:	dde9      	ble.n	801004e <__sflush_r+0xae>
 801007a:	6a21      	ldr	r1, [r4, #32]
 801007c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801007e:	4643      	mov	r3, r8
 8010080:	463a      	mov	r2, r7
 8010082:	4628      	mov	r0, r5
 8010084:	47b0      	blx	r6
 8010086:	2800      	cmp	r0, #0
 8010088:	dc08      	bgt.n	801009c <__sflush_r+0xfc>
 801008a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801008e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010092:	81a3      	strh	r3, [r4, #12]
 8010094:	f04f 30ff 	mov.w	r0, #4294967295
 8010098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801009c:	4407      	add	r7, r0
 801009e:	eba8 0800 	sub.w	r8, r8, r0
 80100a2:	e7e7      	b.n	8010074 <__sflush_r+0xd4>
 80100a4:	dfbffffe 	.word	0xdfbffffe

080100a8 <_fflush_r>:
 80100a8:	b538      	push	{r3, r4, r5, lr}
 80100aa:	690b      	ldr	r3, [r1, #16]
 80100ac:	4605      	mov	r5, r0
 80100ae:	460c      	mov	r4, r1
 80100b0:	b913      	cbnz	r3, 80100b8 <_fflush_r+0x10>
 80100b2:	2500      	movs	r5, #0
 80100b4:	4628      	mov	r0, r5
 80100b6:	bd38      	pop	{r3, r4, r5, pc}
 80100b8:	b118      	cbz	r0, 80100c2 <_fflush_r+0x1a>
 80100ba:	6a03      	ldr	r3, [r0, #32]
 80100bc:	b90b      	cbnz	r3, 80100c2 <_fflush_r+0x1a>
 80100be:	f7ff f853 	bl	800f168 <__sinit>
 80100c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d0f3      	beq.n	80100b2 <_fflush_r+0xa>
 80100ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80100cc:	07d0      	lsls	r0, r2, #31
 80100ce:	d404      	bmi.n	80100da <_fflush_r+0x32>
 80100d0:	0599      	lsls	r1, r3, #22
 80100d2:	d402      	bmi.n	80100da <_fflush_r+0x32>
 80100d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80100d6:	f7ff fad8 	bl	800f68a <__retarget_lock_acquire_recursive>
 80100da:	4628      	mov	r0, r5
 80100dc:	4621      	mov	r1, r4
 80100de:	f7ff ff5f 	bl	800ffa0 <__sflush_r>
 80100e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80100e4:	07da      	lsls	r2, r3, #31
 80100e6:	4605      	mov	r5, r0
 80100e8:	d4e4      	bmi.n	80100b4 <_fflush_r+0xc>
 80100ea:	89a3      	ldrh	r3, [r4, #12]
 80100ec:	059b      	lsls	r3, r3, #22
 80100ee:	d4e1      	bmi.n	80100b4 <_fflush_r+0xc>
 80100f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80100f2:	f7ff facb 	bl	800f68c <__retarget_lock_release_recursive>
 80100f6:	e7dd      	b.n	80100b4 <_fflush_r+0xc>

080100f8 <__swhatbuf_r>:
 80100f8:	b570      	push	{r4, r5, r6, lr}
 80100fa:	460c      	mov	r4, r1
 80100fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010100:	2900      	cmp	r1, #0
 8010102:	b096      	sub	sp, #88	@ 0x58
 8010104:	4615      	mov	r5, r2
 8010106:	461e      	mov	r6, r3
 8010108:	da0d      	bge.n	8010126 <__swhatbuf_r+0x2e>
 801010a:	89a3      	ldrh	r3, [r4, #12]
 801010c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010110:	f04f 0100 	mov.w	r1, #0
 8010114:	bf14      	ite	ne
 8010116:	2340      	movne	r3, #64	@ 0x40
 8010118:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801011c:	2000      	movs	r0, #0
 801011e:	6031      	str	r1, [r6, #0]
 8010120:	602b      	str	r3, [r5, #0]
 8010122:	b016      	add	sp, #88	@ 0x58
 8010124:	bd70      	pop	{r4, r5, r6, pc}
 8010126:	466a      	mov	r2, sp
 8010128:	f000 f862 	bl	80101f0 <_fstat_r>
 801012c:	2800      	cmp	r0, #0
 801012e:	dbec      	blt.n	801010a <__swhatbuf_r+0x12>
 8010130:	9901      	ldr	r1, [sp, #4]
 8010132:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010136:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801013a:	4259      	negs	r1, r3
 801013c:	4159      	adcs	r1, r3
 801013e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010142:	e7eb      	b.n	801011c <__swhatbuf_r+0x24>

08010144 <__smakebuf_r>:
 8010144:	898b      	ldrh	r3, [r1, #12]
 8010146:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010148:	079d      	lsls	r5, r3, #30
 801014a:	4606      	mov	r6, r0
 801014c:	460c      	mov	r4, r1
 801014e:	d507      	bpl.n	8010160 <__smakebuf_r+0x1c>
 8010150:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010154:	6023      	str	r3, [r4, #0]
 8010156:	6123      	str	r3, [r4, #16]
 8010158:	2301      	movs	r3, #1
 801015a:	6163      	str	r3, [r4, #20]
 801015c:	b003      	add	sp, #12
 801015e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010160:	ab01      	add	r3, sp, #4
 8010162:	466a      	mov	r2, sp
 8010164:	f7ff ffc8 	bl	80100f8 <__swhatbuf_r>
 8010168:	9f00      	ldr	r7, [sp, #0]
 801016a:	4605      	mov	r5, r0
 801016c:	4639      	mov	r1, r7
 801016e:	4630      	mov	r0, r6
 8010170:	f7fe feb4 	bl	800eedc <_malloc_r>
 8010174:	b948      	cbnz	r0, 801018a <__smakebuf_r+0x46>
 8010176:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801017a:	059a      	lsls	r2, r3, #22
 801017c:	d4ee      	bmi.n	801015c <__smakebuf_r+0x18>
 801017e:	f023 0303 	bic.w	r3, r3, #3
 8010182:	f043 0302 	orr.w	r3, r3, #2
 8010186:	81a3      	strh	r3, [r4, #12]
 8010188:	e7e2      	b.n	8010150 <__smakebuf_r+0xc>
 801018a:	89a3      	ldrh	r3, [r4, #12]
 801018c:	6020      	str	r0, [r4, #0]
 801018e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010192:	81a3      	strh	r3, [r4, #12]
 8010194:	9b01      	ldr	r3, [sp, #4]
 8010196:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801019a:	b15b      	cbz	r3, 80101b4 <__smakebuf_r+0x70>
 801019c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80101a0:	4630      	mov	r0, r6
 80101a2:	f000 f837 	bl	8010214 <_isatty_r>
 80101a6:	b128      	cbz	r0, 80101b4 <__smakebuf_r+0x70>
 80101a8:	89a3      	ldrh	r3, [r4, #12]
 80101aa:	f023 0303 	bic.w	r3, r3, #3
 80101ae:	f043 0301 	orr.w	r3, r3, #1
 80101b2:	81a3      	strh	r3, [r4, #12]
 80101b4:	89a3      	ldrh	r3, [r4, #12]
 80101b6:	431d      	orrs	r5, r3
 80101b8:	81a5      	strh	r5, [r4, #12]
 80101ba:	e7cf      	b.n	801015c <__smakebuf_r+0x18>

080101bc <memmove>:
 80101bc:	4288      	cmp	r0, r1
 80101be:	b510      	push	{r4, lr}
 80101c0:	eb01 0402 	add.w	r4, r1, r2
 80101c4:	d902      	bls.n	80101cc <memmove+0x10>
 80101c6:	4284      	cmp	r4, r0
 80101c8:	4623      	mov	r3, r4
 80101ca:	d807      	bhi.n	80101dc <memmove+0x20>
 80101cc:	1e43      	subs	r3, r0, #1
 80101ce:	42a1      	cmp	r1, r4
 80101d0:	d008      	beq.n	80101e4 <memmove+0x28>
 80101d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80101d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80101da:	e7f8      	b.n	80101ce <memmove+0x12>
 80101dc:	4402      	add	r2, r0
 80101de:	4601      	mov	r1, r0
 80101e0:	428a      	cmp	r2, r1
 80101e2:	d100      	bne.n	80101e6 <memmove+0x2a>
 80101e4:	bd10      	pop	{r4, pc}
 80101e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80101ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80101ee:	e7f7      	b.n	80101e0 <memmove+0x24>

080101f0 <_fstat_r>:
 80101f0:	b538      	push	{r3, r4, r5, lr}
 80101f2:	4d07      	ldr	r5, [pc, #28]	@ (8010210 <_fstat_r+0x20>)
 80101f4:	2300      	movs	r3, #0
 80101f6:	4604      	mov	r4, r0
 80101f8:	4608      	mov	r0, r1
 80101fa:	4611      	mov	r1, r2
 80101fc:	602b      	str	r3, [r5, #0]
 80101fe:	f7f2 f900 	bl	8002402 <_fstat>
 8010202:	1c43      	adds	r3, r0, #1
 8010204:	d102      	bne.n	801020c <_fstat_r+0x1c>
 8010206:	682b      	ldr	r3, [r5, #0]
 8010208:	b103      	cbz	r3, 801020c <_fstat_r+0x1c>
 801020a:	6023      	str	r3, [r4, #0]
 801020c:	bd38      	pop	{r3, r4, r5, pc}
 801020e:	bf00      	nop
 8010210:	20005504 	.word	0x20005504

08010214 <_isatty_r>:
 8010214:	b538      	push	{r3, r4, r5, lr}
 8010216:	4d06      	ldr	r5, [pc, #24]	@ (8010230 <_isatty_r+0x1c>)
 8010218:	2300      	movs	r3, #0
 801021a:	4604      	mov	r4, r0
 801021c:	4608      	mov	r0, r1
 801021e:	602b      	str	r3, [r5, #0]
 8010220:	f7f2 f8ff 	bl	8002422 <_isatty>
 8010224:	1c43      	adds	r3, r0, #1
 8010226:	d102      	bne.n	801022e <_isatty_r+0x1a>
 8010228:	682b      	ldr	r3, [r5, #0]
 801022a:	b103      	cbz	r3, 801022e <_isatty_r+0x1a>
 801022c:	6023      	str	r3, [r4, #0]
 801022e:	bd38      	pop	{r3, r4, r5, pc}
 8010230:	20005504 	.word	0x20005504

08010234 <_init>:
 8010234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010236:	bf00      	nop
 8010238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801023a:	bc08      	pop	{r3}
 801023c:	469e      	mov	lr, r3
 801023e:	4770      	bx	lr

08010240 <_fini>:
 8010240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010242:	bf00      	nop
 8010244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010246:	bc08      	pop	{r3}
 8010248:	469e      	mov	lr, r3
 801024a:	4770      	bx	lr
