
stm-freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d5f0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000630  0800d7c0  0800d7c0  0000e7c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ddf0  0800ddf0  0000f1e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ddf0  0800ddf0  0000edf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ddf8  0800ddf8  0000f1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ddf8  0800ddf8  0000edf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ddfc  0800ddfc  0000edfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800de00  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000045a8  200001e8  0800dfe8  0000f1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004790  0800dfe8  0000f790  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c032  00000000  00000000  0000f218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e06  00000000  00000000  0002b24a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019d8  00000000  00000000  0002f050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001468  00000000  00000000  00030a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025c12  00000000  00000000  00031e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c421  00000000  00000000  00057aa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0dd0  00000000  00000000  00073ec3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00154c93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000080f8  00000000  00000000  00154cd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  0015cdd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d7a8 	.word	0x0800d7a8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0800d7a8 	.word	0x0800d7a8

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2iz>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b94:	d215      	bcs.n	8000bc2 <__aeabi_d2iz+0x36>
 8000b96:	d511      	bpl.n	8000bbc <__aeabi_d2iz+0x30>
 8000b98:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d912      	bls.n	8000bc8 <__aeabi_d2iz+0x3c>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bb2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	4240      	negne	r0, r0
 8000bba:	4770      	bx	lr
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc6:	d105      	bne.n	8000bd4 <__aeabi_d2iz+0x48>
 8000bc8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bcc:	bf08      	it	eq
 8000bce:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <__aeabi_d2uiz>:
 8000bdc:	004a      	lsls	r2, r1, #1
 8000bde:	d211      	bcs.n	8000c04 <__aeabi_d2uiz+0x28>
 8000be0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be4:	d211      	bcs.n	8000c0a <__aeabi_d2uiz+0x2e>
 8000be6:	d50d      	bpl.n	8000c04 <__aeabi_d2uiz+0x28>
 8000be8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bf0:	d40e      	bmi.n	8000c10 <__aeabi_d2uiz+0x34>
 8000bf2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bfa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfe:	fa23 f002 	lsr.w	r0, r3, r2
 8000c02:	4770      	bx	lr
 8000c04:	f04f 0000 	mov.w	r0, #0
 8000c08:	4770      	bx	lr
 8000c0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0e:	d102      	bne.n	8000c16 <__aeabi_d2uiz+0x3a>
 8000c10:	f04f 30ff 	mov.w	r0, #4294967295
 8000c14:	4770      	bx	lr
 8000c16:	f04f 0000 	mov.w	r0, #0
 8000c1a:	4770      	bx	lr

08000c1c <__aeabi_d2f>:
 8000c1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c24:	bf24      	itt	cs
 8000c26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2e:	d90d      	bls.n	8000c4c <__aeabi_d2f+0x30>
 8000c30:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c3c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c44:	bf08      	it	eq
 8000c46:	f020 0001 	biceq.w	r0, r0, #1
 8000c4a:	4770      	bx	lr
 8000c4c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c50:	d121      	bne.n	8000c96 <__aeabi_d2f+0x7a>
 8000c52:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c56:	bfbc      	itt	lt
 8000c58:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c5c:	4770      	bxlt	lr
 8000c5e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c66:	f1c2 0218 	rsb	r2, r2, #24
 8000c6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c72:	fa20 f002 	lsr.w	r0, r0, r2
 8000c76:	bf18      	it	ne
 8000c78:	f040 0001 	orrne.w	r0, r0, #1
 8000c7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c88:	ea40 000c 	orr.w	r0, r0, ip
 8000c8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c94:	e7cc      	b.n	8000c30 <__aeabi_d2f+0x14>
 8000c96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c9a:	d107      	bne.n	8000cac <__aeabi_d2f+0x90>
 8000c9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ca0:	bf1e      	ittt	ne
 8000ca2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000caa:	4770      	bxne	lr
 8000cac:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cb0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop

08000cbc <__aeabi_uldivmod>:
 8000cbc:	b953      	cbnz	r3, 8000cd4 <__aeabi_uldivmod+0x18>
 8000cbe:	b94a      	cbnz	r2, 8000cd4 <__aeabi_uldivmod+0x18>
 8000cc0:	2900      	cmp	r1, #0
 8000cc2:	bf08      	it	eq
 8000cc4:	2800      	cmpeq	r0, #0
 8000cc6:	bf1c      	itt	ne
 8000cc8:	f04f 31ff 	movne.w	r1, #4294967295
 8000ccc:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd0:	f000 b9a0 	b.w	8001014 <__aeabi_idiv0>
 8000cd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cdc:	f000 f83c 	bl	8000d58 <__udivmoddi4>
 8000ce0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce8:	b004      	add	sp, #16
 8000cea:	4770      	bx	lr

08000cec <__aeabi_d2lz>:
 8000cec:	b538      	push	{r3, r4, r5, lr}
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	4604      	mov	r4, r0
 8000cf4:	460d      	mov	r5, r1
 8000cf6:	f7ff ff21 	bl	8000b3c <__aeabi_dcmplt>
 8000cfa:	b928      	cbnz	r0, 8000d08 <__aeabi_d2lz+0x1c>
 8000cfc:	4620      	mov	r0, r4
 8000cfe:	4629      	mov	r1, r5
 8000d00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d04:	f000 b80a 	b.w	8000d1c <__aeabi_d2ulz>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d0e:	f000 f805 	bl	8000d1c <__aeabi_d2ulz>
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	bd38      	pop	{r3, r4, r5, pc}
 8000d1a:	bf00      	nop

08000d1c <__aeabi_d2ulz>:
 8000d1c:	b5d0      	push	{r4, r6, r7, lr}
 8000d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d50 <__aeabi_d2ulz+0x34>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	4606      	mov	r6, r0
 8000d24:	460f      	mov	r7, r1
 8000d26:	f7ff fc97 	bl	8000658 <__aeabi_dmul>
 8000d2a:	f7ff ff57 	bl	8000bdc <__aeabi_d2uiz>
 8000d2e:	4604      	mov	r4, r0
 8000d30:	f7ff fc18 	bl	8000564 <__aeabi_ui2d>
 8000d34:	4b07      	ldr	r3, [pc, #28]	@ (8000d54 <__aeabi_d2ulz+0x38>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	f7ff fc8e 	bl	8000658 <__aeabi_dmul>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	460b      	mov	r3, r1
 8000d40:	4630      	mov	r0, r6
 8000d42:	4639      	mov	r1, r7
 8000d44:	f7ff fad0 	bl	80002e8 <__aeabi_dsub>
 8000d48:	f7ff ff48 	bl	8000bdc <__aeabi_d2uiz>
 8000d4c:	4621      	mov	r1, r4
 8000d4e:	bdd0      	pop	{r4, r6, r7, pc}
 8000d50:	3df00000 	.word	0x3df00000
 8000d54:	41f00000 	.word	0x41f00000

08000d58 <__udivmoddi4>:
 8000d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d5c:	9d08      	ldr	r5, [sp, #32]
 8000d5e:	460c      	mov	r4, r1
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d14e      	bne.n	8000e02 <__udivmoddi4+0xaa>
 8000d64:	4694      	mov	ip, r2
 8000d66:	458c      	cmp	ip, r1
 8000d68:	4686      	mov	lr, r0
 8000d6a:	fab2 f282 	clz	r2, r2
 8000d6e:	d962      	bls.n	8000e36 <__udivmoddi4+0xde>
 8000d70:	b14a      	cbz	r2, 8000d86 <__udivmoddi4+0x2e>
 8000d72:	f1c2 0320 	rsb	r3, r2, #32
 8000d76:	4091      	lsls	r1, r2
 8000d78:	fa20 f303 	lsr.w	r3, r0, r3
 8000d7c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d80:	4319      	orrs	r1, r3
 8000d82:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d8a:	fa1f f68c 	uxth.w	r6, ip
 8000d8e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d92:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d96:	fb07 1114 	mls	r1, r7, r4, r1
 8000d9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9e:	fb04 f106 	mul.w	r1, r4, r6
 8000da2:	4299      	cmp	r1, r3
 8000da4:	d90a      	bls.n	8000dbc <__udivmoddi4+0x64>
 8000da6:	eb1c 0303 	adds.w	r3, ip, r3
 8000daa:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dae:	f080 8112 	bcs.w	8000fd6 <__udivmoddi4+0x27e>
 8000db2:	4299      	cmp	r1, r3
 8000db4:	f240 810f 	bls.w	8000fd6 <__udivmoddi4+0x27e>
 8000db8:	3c02      	subs	r4, #2
 8000dba:	4463      	add	r3, ip
 8000dbc:	1a59      	subs	r1, r3, r1
 8000dbe:	fa1f f38e 	uxth.w	r3, lr
 8000dc2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc6:	fb07 1110 	mls	r1, r7, r0, r1
 8000dca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dce:	fb00 f606 	mul.w	r6, r0, r6
 8000dd2:	429e      	cmp	r6, r3
 8000dd4:	d90a      	bls.n	8000dec <__udivmoddi4+0x94>
 8000dd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dda:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dde:	f080 80fc 	bcs.w	8000fda <__udivmoddi4+0x282>
 8000de2:	429e      	cmp	r6, r3
 8000de4:	f240 80f9 	bls.w	8000fda <__udivmoddi4+0x282>
 8000de8:	4463      	add	r3, ip
 8000dea:	3802      	subs	r0, #2
 8000dec:	1b9b      	subs	r3, r3, r6
 8000dee:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000df2:	2100      	movs	r1, #0
 8000df4:	b11d      	cbz	r5, 8000dfe <__udivmoddi4+0xa6>
 8000df6:	40d3      	lsrs	r3, r2
 8000df8:	2200      	movs	r2, #0
 8000dfa:	e9c5 3200 	strd	r3, r2, [r5]
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	428b      	cmp	r3, r1
 8000e04:	d905      	bls.n	8000e12 <__udivmoddi4+0xba>
 8000e06:	b10d      	cbz	r5, 8000e0c <__udivmoddi4+0xb4>
 8000e08:	e9c5 0100 	strd	r0, r1, [r5]
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	4608      	mov	r0, r1
 8000e10:	e7f5      	b.n	8000dfe <__udivmoddi4+0xa6>
 8000e12:	fab3 f183 	clz	r1, r3
 8000e16:	2900      	cmp	r1, #0
 8000e18:	d146      	bne.n	8000ea8 <__udivmoddi4+0x150>
 8000e1a:	42a3      	cmp	r3, r4
 8000e1c:	d302      	bcc.n	8000e24 <__udivmoddi4+0xcc>
 8000e1e:	4290      	cmp	r0, r2
 8000e20:	f0c0 80f0 	bcc.w	8001004 <__udivmoddi4+0x2ac>
 8000e24:	1a86      	subs	r6, r0, r2
 8000e26:	eb64 0303 	sbc.w	r3, r4, r3
 8000e2a:	2001      	movs	r0, #1
 8000e2c:	2d00      	cmp	r5, #0
 8000e2e:	d0e6      	beq.n	8000dfe <__udivmoddi4+0xa6>
 8000e30:	e9c5 6300 	strd	r6, r3, [r5]
 8000e34:	e7e3      	b.n	8000dfe <__udivmoddi4+0xa6>
 8000e36:	2a00      	cmp	r2, #0
 8000e38:	f040 8090 	bne.w	8000f5c <__udivmoddi4+0x204>
 8000e3c:	eba1 040c 	sub.w	r4, r1, ip
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa1f f78c 	uxth.w	r7, ip
 8000e48:	2101      	movs	r1, #1
 8000e4a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e4e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e52:	fb08 4416 	mls	r4, r8, r6, r4
 8000e56:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e5a:	fb07 f006 	mul.w	r0, r7, r6
 8000e5e:	4298      	cmp	r0, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x11c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e6a:	d202      	bcs.n	8000e72 <__udivmoddi4+0x11a>
 8000e6c:	4298      	cmp	r0, r3
 8000e6e:	f200 80cd 	bhi.w	800100c <__udivmoddi4+0x2b4>
 8000e72:	4626      	mov	r6, r4
 8000e74:	1a1c      	subs	r4, r3, r0
 8000e76:	fa1f f38e 	uxth.w	r3, lr
 8000e7a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e7e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e86:	fb00 f707 	mul.w	r7, r0, r7
 8000e8a:	429f      	cmp	r7, r3
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x148>
 8000e8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e92:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x146>
 8000e98:	429f      	cmp	r7, r3
 8000e9a:	f200 80b0 	bhi.w	8000ffe <__udivmoddi4+0x2a6>
 8000e9e:	4620      	mov	r0, r4
 8000ea0:	1bdb      	subs	r3, r3, r7
 8000ea2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ea6:	e7a5      	b.n	8000df4 <__udivmoddi4+0x9c>
 8000ea8:	f1c1 0620 	rsb	r6, r1, #32
 8000eac:	408b      	lsls	r3, r1
 8000eae:	fa22 f706 	lsr.w	r7, r2, r6
 8000eb2:	431f      	orrs	r7, r3
 8000eb4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000eb8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ebc:	ea43 030c 	orr.w	r3, r3, ip
 8000ec0:	40f4      	lsrs	r4, r6
 8000ec2:	fa00 f801 	lsl.w	r8, r0, r1
 8000ec6:	0c38      	lsrs	r0, r7, #16
 8000ec8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ecc:	fbb4 fef0 	udiv	lr, r4, r0
 8000ed0:	fa1f fc87 	uxth.w	ip, r7
 8000ed4:	fb00 441e 	mls	r4, r0, lr, r4
 8000ed8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000edc:	fb0e f90c 	mul.w	r9, lr, ip
 8000ee0:	45a1      	cmp	r9, r4
 8000ee2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ee6:	d90a      	bls.n	8000efe <__udivmoddi4+0x1a6>
 8000ee8:	193c      	adds	r4, r7, r4
 8000eea:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eee:	f080 8084 	bcs.w	8000ffa <__udivmoddi4+0x2a2>
 8000ef2:	45a1      	cmp	r9, r4
 8000ef4:	f240 8081 	bls.w	8000ffa <__udivmoddi4+0x2a2>
 8000ef8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000efc:	443c      	add	r4, r7
 8000efe:	eba4 0409 	sub.w	r4, r4, r9
 8000f02:	fa1f f983 	uxth.w	r9, r3
 8000f06:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f0a:	fb00 4413 	mls	r4, r0, r3, r4
 8000f0e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f12:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f16:	45a4      	cmp	ip, r4
 8000f18:	d907      	bls.n	8000f2a <__udivmoddi4+0x1d2>
 8000f1a:	193c      	adds	r4, r7, r4
 8000f1c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f20:	d267      	bcs.n	8000ff2 <__udivmoddi4+0x29a>
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d965      	bls.n	8000ff2 <__udivmoddi4+0x29a>
 8000f26:	3b02      	subs	r3, #2
 8000f28:	443c      	add	r4, r7
 8000f2a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f2e:	fba0 9302 	umull	r9, r3, r0, r2
 8000f32:	eba4 040c 	sub.w	r4, r4, ip
 8000f36:	429c      	cmp	r4, r3
 8000f38:	46ce      	mov	lr, r9
 8000f3a:	469c      	mov	ip, r3
 8000f3c:	d351      	bcc.n	8000fe2 <__udivmoddi4+0x28a>
 8000f3e:	d04e      	beq.n	8000fde <__udivmoddi4+0x286>
 8000f40:	b155      	cbz	r5, 8000f58 <__udivmoddi4+0x200>
 8000f42:	ebb8 030e 	subs.w	r3, r8, lr
 8000f46:	eb64 040c 	sbc.w	r4, r4, ip
 8000f4a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f4e:	40cb      	lsrs	r3, r1
 8000f50:	431e      	orrs	r6, r3
 8000f52:	40cc      	lsrs	r4, r1
 8000f54:	e9c5 6400 	strd	r6, r4, [r5]
 8000f58:	2100      	movs	r1, #0
 8000f5a:	e750      	b.n	8000dfe <__udivmoddi4+0xa6>
 8000f5c:	f1c2 0320 	rsb	r3, r2, #32
 8000f60:	fa20 f103 	lsr.w	r1, r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa24 f303 	lsr.w	r3, r4, r3
 8000f6c:	4094      	lsls	r4, r2
 8000f6e:	430c      	orrs	r4, r1
 8000f70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f74:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f78:	fa1f f78c 	uxth.w	r7, ip
 8000f7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f80:	fb08 3110 	mls	r1, r8, r0, r3
 8000f84:	0c23      	lsrs	r3, r4, #16
 8000f86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f8a:	fb00 f107 	mul.w	r1, r0, r7
 8000f8e:	4299      	cmp	r1, r3
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x24c>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f9a:	d22c      	bcs.n	8000ff6 <__udivmoddi4+0x29e>
 8000f9c:	4299      	cmp	r1, r3
 8000f9e:	d92a      	bls.n	8000ff6 <__udivmoddi4+0x29e>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1a5b      	subs	r3, r3, r1
 8000fa6:	b2a4      	uxth	r4, r4
 8000fa8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fac:	fb08 3311 	mls	r3, r8, r1, r3
 8000fb0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fb4:	fb01 f307 	mul.w	r3, r1, r7
 8000fb8:	42a3      	cmp	r3, r4
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x276>
 8000fbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000fc0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fc4:	d213      	bcs.n	8000fee <__udivmoddi4+0x296>
 8000fc6:	42a3      	cmp	r3, r4
 8000fc8:	d911      	bls.n	8000fee <__udivmoddi4+0x296>
 8000fca:	3902      	subs	r1, #2
 8000fcc:	4464      	add	r4, ip
 8000fce:	1ae4      	subs	r4, r4, r3
 8000fd0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fd4:	e739      	b.n	8000e4a <__udivmoddi4+0xf2>
 8000fd6:	4604      	mov	r4, r0
 8000fd8:	e6f0      	b.n	8000dbc <__udivmoddi4+0x64>
 8000fda:	4608      	mov	r0, r1
 8000fdc:	e706      	b.n	8000dec <__udivmoddi4+0x94>
 8000fde:	45c8      	cmp	r8, r9
 8000fe0:	d2ae      	bcs.n	8000f40 <__udivmoddi4+0x1e8>
 8000fe2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fe6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fea:	3801      	subs	r0, #1
 8000fec:	e7a8      	b.n	8000f40 <__udivmoddi4+0x1e8>
 8000fee:	4631      	mov	r1, r6
 8000ff0:	e7ed      	b.n	8000fce <__udivmoddi4+0x276>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	e799      	b.n	8000f2a <__udivmoddi4+0x1d2>
 8000ff6:	4630      	mov	r0, r6
 8000ff8:	e7d4      	b.n	8000fa4 <__udivmoddi4+0x24c>
 8000ffa:	46d6      	mov	lr, sl
 8000ffc:	e77f      	b.n	8000efe <__udivmoddi4+0x1a6>
 8000ffe:	4463      	add	r3, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e74d      	b.n	8000ea0 <__udivmoddi4+0x148>
 8001004:	4606      	mov	r6, r0
 8001006:	4623      	mov	r3, r4
 8001008:	4608      	mov	r0, r1
 800100a:	e70f      	b.n	8000e2c <__udivmoddi4+0xd4>
 800100c:	3e02      	subs	r6, #2
 800100e:	4463      	add	r3, ip
 8001010:	e730      	b.n	8000e74 <__udivmoddi4+0x11c>
 8001012:	bf00      	nop

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d002      	beq.n	800102e <case_insensitive_strcmp+0x16>
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d101      	bne.n	8001032 <case_insensitive_strcmp+0x1a>
    {
        return 1;
 800102e:	2301      	movs	r3, #1
 8001030:	e056      	b.n	80010e0 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	429a      	cmp	r2, r3
 8001038:	d10d      	bne.n	8001056 <case_insensitive_strcmp+0x3e>
    {
        return 0;
 800103a:	2300      	movs	r3, #0
 800103c:	e050      	b.n	80010e0 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d101      	bne.n	800104a <case_insensitive_strcmp+0x32>
        {
            return 0;
 8001046:	2300      	movs	r3, #0
 8001048:	e04a      	b.n	80010e0 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	3301      	adds	r3, #1
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	3301      	adds	r3, #1
 8001054:	603b      	str	r3, [r7, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	73fb      	strb	r3, [r7, #15]
 800105c:	7bfb      	ldrb	r3, [r7, #15]
 800105e:	3301      	adds	r3, #1
 8001060:	4a22      	ldr	r2, [pc, #136]	@ (80010ec <case_insensitive_strcmp+0xd4>)
 8001062:	4413      	add	r3, r2
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	f003 0303 	and.w	r3, r3, #3
 800106a:	2b01      	cmp	r3, #1
 800106c:	d103      	bne.n	8001076 <case_insensitive_strcmp+0x5e>
 800106e:	7bfb      	ldrb	r3, [r7, #15]
 8001070:	f103 0220 	add.w	r2, r3, #32
 8001074:	e000      	b.n	8001078 <case_insensitive_strcmp+0x60>
 8001076:	7bfa      	ldrb	r2, [r7, #15]
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	73bb      	strb	r3, [r7, #14]
 800107e:	7bbb      	ldrb	r3, [r7, #14]
 8001080:	3301      	adds	r3, #1
 8001082:	491a      	ldr	r1, [pc, #104]	@ (80010ec <case_insensitive_strcmp+0xd4>)
 8001084:	440b      	add	r3, r1
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	f003 0303 	and.w	r3, r3, #3
 800108c:	2b01      	cmp	r3, #1
 800108e:	d102      	bne.n	8001096 <case_insensitive_strcmp+0x7e>
 8001090:	7bbb      	ldrb	r3, [r7, #14]
 8001092:	3320      	adds	r3, #32
 8001094:	e000      	b.n	8001098 <case_insensitive_strcmp+0x80>
 8001096:	7bbb      	ldrb	r3, [r7, #14]
 8001098:	429a      	cmp	r2, r3
 800109a:	d0d0      	beq.n	800103e <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	737b      	strb	r3, [r7, #13]
 80010a2:	7b7b      	ldrb	r3, [r7, #13]
 80010a4:	3301      	adds	r3, #1
 80010a6:	4a11      	ldr	r2, [pc, #68]	@ (80010ec <case_insensitive_strcmp+0xd4>)
 80010a8:	4413      	add	r3, r2
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	f003 0303 	and.w	r3, r3, #3
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d103      	bne.n	80010bc <case_insensitive_strcmp+0xa4>
 80010b4:	7b7b      	ldrb	r3, [r7, #13]
 80010b6:	f103 0220 	add.w	r2, r3, #32
 80010ba:	e000      	b.n	80010be <case_insensitive_strcmp+0xa6>
 80010bc:	7b7a      	ldrb	r2, [r7, #13]
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	733b      	strb	r3, [r7, #12]
 80010c4:	7b3b      	ldrb	r3, [r7, #12]
 80010c6:	3301      	adds	r3, #1
 80010c8:	4908      	ldr	r1, [pc, #32]	@ (80010ec <case_insensitive_strcmp+0xd4>)
 80010ca:	440b      	add	r3, r1
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	f003 0303 	and.w	r3, r3, #3
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d102      	bne.n	80010dc <case_insensitive_strcmp+0xc4>
 80010d6:	7b3b      	ldrb	r3, [r7, #12]
 80010d8:	3320      	adds	r3, #32
 80010da:	e000      	b.n	80010de <case_insensitive_strcmp+0xc6>
 80010dc:	7b3b      	ldrb	r3, [r7, #12]
 80010de:	1ad3      	subs	r3, r2, r3
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	0800da98 	.word	0x0800da98

080010f0 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2028      	movs	r0, #40	@ 0x28
 80010fe:	4798      	blx	r3
 8001100:	60f8      	str	r0, [r7, #12]
    if (node)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d004      	beq.n	8001112 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8001108:	2228      	movs	r2, #40	@ 0x28
 800110a:	2100      	movs	r1, #0
 800110c:	68f8      	ldr	r0, [r7, #12]
 800110e:	f00a fb50 	bl	800b7b2 <memset>
    }

    return node;
 8001112:	68fb      	ldr	r3, [r7, #12]
}
 8001114:	4618      	mov	r0, r3
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8001124:	2300      	movs	r3, #0
 8001126:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8001128:	e03d      	b.n	80011a6 <cJSON_Delete+0x8a>
    {
        next = item->next;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001138:	2b00      	cmp	r3, #0
 800113a:	d108      	bne.n	800114e <cJSON_Delete+0x32>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d004      	beq.n	800114e <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ffe7 	bl	800111c <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001156:	2b00      	cmp	r3, #0
 8001158:	d10c      	bne.n	8001174 <cJSON_Delete+0x58>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	691b      	ldr	r3, [r3, #16]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d008      	beq.n	8001174 <cJSON_Delete+0x58>
        {
            global_hooks.deallocate(item->valuestring);
 8001162:	4b15      	ldr	r3, [pc, #84]	@ (80011b8 <cJSON_Delete+0x9c>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	6912      	ldr	r2, [r2, #16]
 800116a:	4610      	mov	r0, r2
 800116c:	4798      	blx	r3
            item->valuestring = NULL;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	611a      	str	r2, [r3, #16]
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800117c:	2b00      	cmp	r3, #0
 800117e:	d10c      	bne.n	800119a <cJSON_Delete+0x7e>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6a1b      	ldr	r3, [r3, #32]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d008      	beq.n	800119a <cJSON_Delete+0x7e>
        {
            global_hooks.deallocate(item->string);
 8001188:	4b0b      	ldr	r3, [pc, #44]	@ (80011b8 <cJSON_Delete+0x9c>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	6a12      	ldr	r2, [r2, #32]
 8001190:	4610      	mov	r0, r2
 8001192:	4798      	blx	r3
            item->string = NULL;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	621a      	str	r2, [r3, #32]
        }
        global_hooks.deallocate(item);
 800119a:	4b07      	ldr	r3, [pc, #28]	@ (80011b8 <cJSON_Delete+0x9c>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	4798      	blx	r3
        item = next;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d1be      	bne.n	800112a <cJSON_Delete+0xe>
    }
}
 80011ac:	bf00      	nop
 80011ae:	bf00      	nop
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000000 	.word	0x20000000

080011bc <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 80011c0:	232e      	movs	r3, #46	@ 0x2e
#endif
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	0000      	movs	r0, r0
	...

080011d0 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b098      	sub	sp, #96	@ 0x60
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
    double number = 0;
 80011da:	f04f 0200 	mov.w	r2, #0
 80011de:	f04f 0300 	mov.w	r3, #0
 80011e2:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    unsigned char *after_end = NULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	64bb      	str	r3, [r7, #72]	@ 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 80011ea:	f7ff ffe7 	bl	80011bc <get_decimal_point>
 80011ee:	4603      	mov	r3, r0
 80011f0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    size_t i = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	65fb      	str	r3, [r7, #92]	@ 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <parse_number+0x36>
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d101      	bne.n	800120a <parse_number+0x3a>
    {
        return false;
 8001206:	2300      	movs	r3, #0
 8001208:	e0a0      	b.n	800134c <parse_number+0x17c>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800120a:	2300      	movs	r3, #0
 800120c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800120e:	e03d      	b.n	800128c <parse_number+0xbc>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	6899      	ldr	r1, [r3, #8]
 8001218:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800121a:	440b      	add	r3, r1
 800121c:	4413      	add	r3, r2
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b45      	cmp	r3, #69	@ 0x45
 8001222:	dc17      	bgt.n	8001254 <parse_number+0x84>
 8001224:	2b2b      	cmp	r3, #43	@ 0x2b
 8001226:	db40      	blt.n	80012aa <parse_number+0xda>
 8001228:	3b2b      	subs	r3, #43	@ 0x2b
 800122a:	2201      	movs	r2, #1
 800122c:	409a      	lsls	r2, r3
 800122e:	4b4c      	ldr	r3, [pc, #304]	@ (8001360 <parse_number+0x190>)
 8001230:	4013      	ands	r3, r2
 8001232:	2b00      	cmp	r3, #0
 8001234:	bf14      	ite	ne
 8001236:	2301      	movne	r3, #1
 8001238:	2300      	moveq	r3, #0
 800123a:	b2db      	uxtb	r3, r3
 800123c:	2b00      	cmp	r3, #0
 800123e:	d10b      	bne.n	8001258 <parse_number+0x88>
 8001240:	f002 0308 	and.w	r3, r2, #8
 8001244:	2b00      	cmp	r3, #0
 8001246:	bf14      	ite	ne
 8001248:	2301      	movne	r3, #1
 800124a:	2300      	moveq	r3, #0
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b00      	cmp	r3, #0
 8001250:	d111      	bne.n	8001276 <parse_number+0xa6>
            case '.':
                number_c_string[i] = decimal_point;
                break;

            default:
                goto loop_end;
 8001252:	e02a      	b.n	80012aa <parse_number+0xda>
        switch (buffer_at_offset(input_buffer)[i])
 8001254:	2b65      	cmp	r3, #101	@ 0x65
 8001256:	d128      	bne.n	80012aa <parse_number+0xda>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	6899      	ldr	r1, [r3, #8]
 8001260:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001262:	440b      	add	r3, r1
 8001264:	4413      	add	r3, r2
 8001266:	7819      	ldrb	r1, [r3, #0]
 8001268:	f107 0208 	add.w	r2, r7, #8
 800126c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800126e:	4413      	add	r3, r2
 8001270:	460a      	mov	r2, r1
 8001272:	701a      	strb	r2, [r3, #0]
                break;
 8001274:	e007      	b.n	8001286 <parse_number+0xb6>
                number_c_string[i] = decimal_point;
 8001276:	f107 0208 	add.w	r2, r7, #8
 800127a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800127c:	4413      	add	r3, r2
 800127e:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8001282:	701a      	strb	r2, [r3, #0]
                break;
 8001284:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8001286:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001288:	3301      	adds	r3, #1
 800128a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800128c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800128e:	2b3e      	cmp	r3, #62	@ 0x3e
 8001290:	d80d      	bhi.n	80012ae <parse_number+0xde>
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d00a      	beq.n	80012ae <parse_number+0xde>
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	689a      	ldr	r2, [r3, #8]
 800129c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800129e:	441a      	add	r2, r3
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d3b3      	bcc.n	8001210 <parse_number+0x40>
        }
    }
loop_end:
 80012a8:	e001      	b.n	80012ae <parse_number+0xde>
                goto loop_end;
 80012aa:	bf00      	nop
 80012ac:	e000      	b.n	80012b0 <parse_number+0xe0>
loop_end:
 80012ae:	bf00      	nop
    number_c_string[i] = '\0';
 80012b0:	f107 0208 	add.w	r2, r7, #8
 80012b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80012b6:	4413      	add	r3, r2
 80012b8:	2200      	movs	r2, #0
 80012ba:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 80012bc:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80012c0:	f107 0308 	add.w	r3, r7, #8
 80012c4:	4611      	mov	r1, r2
 80012c6:	4618      	mov	r0, r3
 80012c8:	f00a f92e 	bl	800b528 <strtod>
 80012cc:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
    if (number_c_string == after_end)
 80012d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80012d2:	f107 0308 	add.w	r3, r7, #8
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d101      	bne.n	80012de <parse_number+0x10e>
    {
        return false; /* parse_error */
 80012da:	2300      	movs	r3, #0
 80012dc:	e036      	b.n	800134c <parse_number+0x17c>
    }

    item->valuedouble = number;
 80012de:	6879      	ldr	r1, [r7, #4]
 80012e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80012e4:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 80012e8:	a31b      	add	r3, pc, #108	@ (adr r3, 8001358 <parse_number+0x188>)
 80012ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ee:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80012f2:	f7ff fc37 	bl	8000b64 <__aeabi_dcmpge>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d004      	beq.n	8001306 <parse_number+0x136>
    {
        item->valueint = INT_MAX;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001302:	615a      	str	r2, [r3, #20]
 8001304:	e015      	b.n	8001332 <parse_number+0x162>
    }
    else if (number <= (double)INT_MIN)
 8001306:	f04f 0200 	mov.w	r2, #0
 800130a:	4b16      	ldr	r3, [pc, #88]	@ (8001364 <parse_number+0x194>)
 800130c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001310:	f7ff fc1e 	bl	8000b50 <__aeabi_dcmple>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d004      	beq.n	8001324 <parse_number+0x154>
    {
        item->valueint = INT_MIN;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001320:	615a      	str	r2, [r3, #20]
 8001322:	e006      	b.n	8001332 <parse_number+0x162>
    }
    else
    {
        item->valueint = (int)number;
 8001324:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001328:	f7ff fc30 	bl	8000b8c <__aeabi_d2iz>
 800132c:	4602      	mov	r2, r0
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2208      	movs	r2, #8
 8001336:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800133e:	f107 0208 	add.w	r2, r7, #8
 8001342:	1a8a      	subs	r2, r1, r2
 8001344:	441a      	add	r2, r3
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	609a      	str	r2, [r3, #8]
    return true;
 800134a:	2301      	movs	r3, #1
}
 800134c:	4618      	mov	r0, r3
 800134e:	3760      	adds	r7, #96	@ 0x60
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	f3af 8000 	nop.w
 8001358:	ffc00000 	.word	0xffc00000
 800135c:	41dfffff 	.word	0x41dfffff
 8001360:	04007fe5 	.word	0x04007fe5
 8001364:	c1e00000 	.word	0xc1e00000

08001368 <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 8001370:	2300      	movs	r3, #0
 8001372:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 8001378:	2300      	movs	r3, #0
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	e04c      	b.n	8001418 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	4413      	add	r3, r2
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2b2f      	cmp	r3, #47	@ 0x2f
 8001388:	d90f      	bls.n	80013aa <parse_hex4+0x42>
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	4413      	add	r3, r2
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2b39      	cmp	r3, #57	@ 0x39
 8001394:	d809      	bhi.n	80013aa <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	4413      	add	r3, r2
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	461a      	mov	r2, r3
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4413      	add	r3, r2
 80013a4:	3b30      	subs	r3, #48	@ 0x30
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	e02d      	b.n	8001406 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	4413      	add	r3, r2
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b40      	cmp	r3, #64	@ 0x40
 80013b4:	d90f      	bls.n	80013d6 <parse_hex4+0x6e>
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	4413      	add	r3, r2
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b46      	cmp	r3, #70	@ 0x46
 80013c0:	d809      	bhi.n	80013d6 <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	4413      	add	r3, r2
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	461a      	mov	r2, r3
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	4413      	add	r3, r2
 80013d0:	3b37      	subs	r3, #55	@ 0x37
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	e017      	b.n	8001406 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	4413      	add	r3, r2
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b60      	cmp	r3, #96	@ 0x60
 80013e0:	d90f      	bls.n	8001402 <parse_hex4+0x9a>
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	4413      	add	r3, r2
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b66      	cmp	r3, #102	@ 0x66
 80013ec:	d809      	bhi.n	8001402 <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	4413      	add	r3, r2
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	461a      	mov	r2, r3
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	4413      	add	r3, r2
 80013fc:	3b57      	subs	r3, #87	@ 0x57
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	e001      	b.n	8001406 <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 8001402:	2300      	movs	r3, #0
 8001404:	e00c      	b.n	8001420 <parse_hex4+0xb8>
        }

        if (i < 3)
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	2b02      	cmp	r3, #2
 800140a:	d802      	bhi.n	8001412 <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	011b      	lsls	r3, r3, #4
 8001410:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	3301      	adds	r3, #1
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	2b03      	cmp	r3, #3
 800141c:	d9af      	bls.n	800137e <parse_hex4+0x16>
        }
    }

    return h;
 800141e:	68fb      	ldr	r3, [r7, #12]
}
 8001420:	4618      	mov	r0, r3
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08a      	sub	sp, #40	@ 0x28
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 8001438:	2300      	movs	r3, #0
 800143a:	627b      	str	r3, [r7, #36]	@ 0x24
    unsigned int first_code = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 8001444:	2300      	movs	r3, #0
 8001446:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    unsigned char utf8_position = 0;
 800144a:	2300      	movs	r3, #0
 800144c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    unsigned char sequence_length = 0;
 8001450:	2300      	movs	r3, #0
 8001452:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    unsigned char first_byte_mark = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 800145c:	68ba      	ldr	r2, [r7, #8]
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b05      	cmp	r3, #5
 8001464:	f340 80b7 	ble.w	80015d6 <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	3302      	adds	r3, #2
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff ff7b 	bl	8001368 <parse_hex4>
 8001472:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 800147a:	d304      	bcc.n	8001486 <utf16_literal_to_utf8+0x5a>
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 8001482:	f0c0 80aa 	bcc.w	80015da <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 800148c:	d337      	bcc.n	80014fe <utf16_literal_to_utf8+0xd2>
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 8001494:	d233      	bcs.n	80014fe <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	3306      	adds	r3, #6
 800149a:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 80014a0:	230c      	movs	r3, #12
 80014a2:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

        if ((input_end - second_sequence) < 6)
 80014a6:	68ba      	ldr	r2, [r7, #8]
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	2b05      	cmp	r3, #5
 80014ae:	f340 8096 	ble.w	80015de <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b5c      	cmp	r3, #92	@ 0x5c
 80014b8:	f040 8093 	bne.w	80015e2 <utf16_literal_to_utf8+0x1b6>
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	3301      	adds	r3, #1
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b75      	cmp	r3, #117	@ 0x75
 80014c4:	f040 808d 	bne.w	80015e2 <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	3302      	adds	r3, #2
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ff4b 	bl	8001368 <parse_hex4>
 80014d2:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 80014da:	f0c0 8084 	bcc.w	80015e6 <utf16_literal_to_utf8+0x1ba>
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 80014e4:	d27f      	bcs.n	80015e6 <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	029a      	lsls	r2, r3, #10
 80014ea:	4b43      	ldr	r3, [pc, #268]	@ (80015f8 <utf16_literal_to_utf8+0x1cc>)
 80014ec:	4013      	ands	r3, r2
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80014f4:	4313      	orrs	r3, r2
 80014f6:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80014fa:	627b      	str	r3, [r7, #36]	@ 0x24
    {
 80014fc:	e004      	b.n	8001508 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 80014fe:	2306      	movs	r3, #6
 8001500:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        codepoint = first_code;
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 8001508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800150a:	2b7f      	cmp	r3, #127	@ 0x7f
 800150c:	d803      	bhi.n	8001516 <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 800150e:	2301      	movs	r3, #1
 8001510:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001514:	e01f      	b.n	8001556 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 8001516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001518:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800151c:	d206      	bcs.n	800152c <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 800151e:	2302      	movs	r3, #2
 8001520:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 8001524:	23c0      	movs	r3, #192	@ 0xc0
 8001526:	f887 3020 	strb.w	r3, [r7, #32]
 800152a:	e014      	b.n	8001556 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 800152c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800152e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001532:	d206      	bcs.n	8001542 <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 8001534:	2303      	movs	r3, #3
 8001536:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 800153a:	23e0      	movs	r3, #224	@ 0xe0
 800153c:	f887 3020 	strb.w	r3, [r7, #32]
 8001540:	e009      	b.n	8001556 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 8001542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001544:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8001548:	d24f      	bcs.n	80015ea <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 800154a:	2304      	movs	r3, #4
 800154c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 8001550:	23f0      	movs	r3, #240	@ 0xf0
 8001552:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8001556:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800155a:	3b01      	subs	r3, #1
 800155c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001560:	e015      	b.n	800158e <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 8001562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001564:	b2db      	uxtb	r3, r3
 8001566:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800156a:	b2da      	uxtb	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6819      	ldr	r1, [r3, #0]
 8001570:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001574:	440b      	add	r3, r1
 8001576:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800157a:	b2d2      	uxtb	r2, r2
 800157c:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 800157e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001580:	099b      	lsrs	r3, r3, #6
 8001582:	627b      	str	r3, [r7, #36]	@ 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8001584:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001588:	3b01      	subs	r3, #1
 800158a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800158e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001592:	2b00      	cmp	r3, #0
 8001594:	d1e5      	bne.n	8001562 <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 8001596:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800159a:	2b01      	cmp	r3, #1
 800159c:	d909      	bls.n	80015b2 <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 800159e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a0:	b2d9      	uxtb	r1, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80015aa:	430a      	orrs	r2, r1
 80015ac:	b2d2      	uxtb	r2, r2
 80015ae:	701a      	strb	r2, [r3, #0]
 80015b0:	e007      	b.n	80015c2 <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 80015b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80015be:	b2d2      	uxtb	r2, r2
 80015c0:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80015ca:	441a      	add	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	601a      	str	r2, [r3, #0]

    return sequence_length;
 80015d0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80015d4:	e00b      	b.n	80015ee <utf16_literal_to_utf8+0x1c2>
        goto fail;
 80015d6:	bf00      	nop
 80015d8:	e008      	b.n	80015ec <utf16_literal_to_utf8+0x1c0>
        goto fail;
 80015da:	bf00      	nop
 80015dc:	e006      	b.n	80015ec <utf16_literal_to_utf8+0x1c0>
            goto fail;
 80015de:	bf00      	nop
 80015e0:	e004      	b.n	80015ec <utf16_literal_to_utf8+0x1c0>
            goto fail;
 80015e2:	bf00      	nop
 80015e4:	e002      	b.n	80015ec <utf16_literal_to_utf8+0x1c0>
            goto fail;
 80015e6:	bf00      	nop
 80015e8:	e000      	b.n	80015ec <utf16_literal_to_utf8+0x1c0>
        goto fail;
 80015ea:	bf00      	nop

fail:
    return 0;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3728      	adds	r7, #40	@ 0x28
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	000ffc00 	.word	0x000ffc00

080015fc <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08a      	sub	sp, #40	@ 0x28
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	3301      	adds	r3, #1
 8001610:	4413      	add	r3, r2
 8001612:	627b      	str	r3, [r7, #36]	@ 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	3301      	adds	r3, #1
 800161e:	4413      	add	r3, r2
 8001620:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 8001622:	2300      	movs	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 8001626:	2300      	movs	r3, #0
 8001628:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	4413      	add	r3, r2
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b22      	cmp	r3, #34	@ 0x22
 8001638:	f040 8103 	bne.w	8001842 <parse_string+0x246>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 800163c:	2300      	movs	r3, #0
 800163e:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 8001640:	2300      	movs	r3, #0
 8001642:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001644:	e017      	b.n	8001676 <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 8001646:	6a3b      	ldr	r3, [r7, #32]
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b5c      	cmp	r3, #92	@ 0x5c
 800164c:	d110      	bne.n	8001670 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 800164e:	6a3b      	ldr	r3, [r7, #32]
 8001650:	1c5a      	adds	r2, r3, #1
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	461a      	mov	r2, r3
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	429a      	cmp	r2, r3
 8001660:	f080 80f1 	bcs.w	8001846 <parse_string+0x24a>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	3301      	adds	r3, #1
 8001668:	61bb      	str	r3, [r7, #24]
                input_end++;
 800166a:	6a3b      	ldr	r3, [r7, #32]
 800166c:	3301      	adds	r3, #1
 800166e:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 8001670:	6a3b      	ldr	r3, [r7, #32]
 8001672:	3301      	adds	r3, #1
 8001674:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6a3a      	ldr	r2, [r7, #32]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	461a      	mov	r2, r3
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	429a      	cmp	r2, r3
 8001686:	d203      	bcs.n	8001690 <parse_string+0x94>
 8001688:	6a3b      	ldr	r3, [r7, #32]
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b22      	cmp	r3, #34	@ 0x22
 800168e:	d1da      	bne.n	8001646 <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6a3a      	ldr	r2, [r7, #32]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	461a      	mov	r2, r3
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	429a      	cmp	r2, r3
 80016a0:	f080 80d3 	bcs.w	800184a <parse_string+0x24e>
 80016a4:	6a3b      	ldr	r3, [r7, #32]
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b22      	cmp	r3, #34	@ 0x22
 80016aa:	f040 80ce 	bne.w	800184a <parse_string+0x24e>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	4413      	add	r3, r2
 80016b8:	6a3a      	ldr	r2, [r7, #32]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	461a      	mov	r2, r3
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	3201      	adds	r2, #1
 80016cc:	4610      	mov	r0, r2
 80016ce:	4798      	blx	r3
 80016d0:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	f000 80ba 	beq.w	800184e <parse_string+0x252>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 80016de:	e094      	b.n	800180a <parse_string+0x20e>
    {
        if (*input_pointer != '\\')
 80016e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b5c      	cmp	r3, #92	@ 0x5c
 80016e6:	d008      	beq.n	80016fa <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 80016e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016ea:	1c53      	adds	r3, r2, #1
 80016ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	1c59      	adds	r1, r3, #1
 80016f2:	60f9      	str	r1, [r7, #12]
 80016f4:	7812      	ldrb	r2, [r2, #0]
 80016f6:	701a      	strb	r2, [r3, #0]
 80016f8:	e087      	b.n	800180a <parse_string+0x20e>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 80016fa:	2302      	movs	r3, #2
 80016fc:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 80016fe:	6a3a      	ldr	r2, [r7, #32]
 8001700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b00      	cmp	r3, #0
 8001706:	f340 80a4 	ble.w	8001852 <parse_string+0x256>
            {
                goto fail;
            }

            switch (input_pointer[1])
 800170a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800170c:	3301      	adds	r3, #1
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b75      	cmp	r3, #117	@ 0x75
 8001712:	f300 80a0 	bgt.w	8001856 <parse_string+0x25a>
 8001716:	2b5c      	cmp	r3, #92	@ 0x5c
 8001718:	da04      	bge.n	8001724 <parse_string+0x128>
 800171a:	2b22      	cmp	r3, #34	@ 0x22
 800171c:	d05c      	beq.n	80017d8 <parse_string+0x1dc>
 800171e:	2b2f      	cmp	r3, #47	@ 0x2f
 8001720:	d05a      	beq.n	80017d8 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 8001722:	e098      	b.n	8001856 <parse_string+0x25a>
            switch (input_pointer[1])
 8001724:	3b5c      	subs	r3, #92	@ 0x5c
 8001726:	2b19      	cmp	r3, #25
 8001728:	f200 8095 	bhi.w	8001856 <parse_string+0x25a>
 800172c:	a201      	add	r2, pc, #4	@ (adr r2, 8001734 <parse_string+0x138>)
 800172e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001732:	bf00      	nop
 8001734:	080017d9 	.word	0x080017d9
 8001738:	08001857 	.word	0x08001857
 800173c:	08001857 	.word	0x08001857
 8001740:	08001857 	.word	0x08001857
 8001744:	08001857 	.word	0x08001857
 8001748:	08001857 	.word	0x08001857
 800174c:	0800179d 	.word	0x0800179d
 8001750:	08001857 	.word	0x08001857
 8001754:	08001857 	.word	0x08001857
 8001758:	08001857 	.word	0x08001857
 800175c:	080017a9 	.word	0x080017a9
 8001760:	08001857 	.word	0x08001857
 8001764:	08001857 	.word	0x08001857
 8001768:	08001857 	.word	0x08001857
 800176c:	08001857 	.word	0x08001857
 8001770:	08001857 	.word	0x08001857
 8001774:	08001857 	.word	0x08001857
 8001778:	08001857 	.word	0x08001857
 800177c:	080017b5 	.word	0x080017b5
 8001780:	08001857 	.word	0x08001857
 8001784:	08001857 	.word	0x08001857
 8001788:	08001857 	.word	0x08001857
 800178c:	080017c1 	.word	0x080017c1
 8001790:	08001857 	.word	0x08001857
 8001794:	080017cd 	.word	0x080017cd
 8001798:	080017e9 	.word	0x080017e9
                    *output_pointer++ = '\b';
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	1c5a      	adds	r2, r3, #1
 80017a0:	60fa      	str	r2, [r7, #12]
 80017a2:	2208      	movs	r2, #8
 80017a4:	701a      	strb	r2, [r3, #0]
                    break;
 80017a6:	e02c      	b.n	8001802 <parse_string+0x206>
                    *output_pointer++ = '\f';
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	1c5a      	adds	r2, r3, #1
 80017ac:	60fa      	str	r2, [r7, #12]
 80017ae:	220c      	movs	r2, #12
 80017b0:	701a      	strb	r2, [r3, #0]
                    break;
 80017b2:	e026      	b.n	8001802 <parse_string+0x206>
                    *output_pointer++ = '\n';
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	1c5a      	adds	r2, r3, #1
 80017b8:	60fa      	str	r2, [r7, #12]
 80017ba:	220a      	movs	r2, #10
 80017bc:	701a      	strb	r2, [r3, #0]
                    break;
 80017be:	e020      	b.n	8001802 <parse_string+0x206>
                    *output_pointer++ = '\r';
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	1c5a      	adds	r2, r3, #1
 80017c4:	60fa      	str	r2, [r7, #12]
 80017c6:	220d      	movs	r2, #13
 80017c8:	701a      	strb	r2, [r3, #0]
                    break;
 80017ca:	e01a      	b.n	8001802 <parse_string+0x206>
                    *output_pointer++ = '\t';
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	1c5a      	adds	r2, r3, #1
 80017d0:	60fa      	str	r2, [r7, #12]
 80017d2:	2209      	movs	r2, #9
 80017d4:	701a      	strb	r2, [r3, #0]
                    break;
 80017d6:	e014      	b.n	8001802 <parse_string+0x206>
                    *output_pointer++ = input_pointer[1];
 80017d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017da:	1c5a      	adds	r2, r3, #1
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	1c59      	adds	r1, r3, #1
 80017e0:	60f9      	str	r1, [r7, #12]
 80017e2:	7812      	ldrb	r2, [r2, #0]
 80017e4:	701a      	strb	r2, [r3, #0]
                    break;
 80017e6:	e00c      	b.n	8001802 <parse_string+0x206>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 80017e8:	f107 030c 	add.w	r3, r7, #12
 80017ec:	461a      	mov	r2, r3
 80017ee:	6a39      	ldr	r1, [r7, #32]
 80017f0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80017f2:	f7ff fe1b 	bl	800142c <utf16_literal_to_utf8>
 80017f6:	4603      	mov	r3, r0
 80017f8:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 80017fa:	7dfb      	ldrb	r3, [r7, #23]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d02c      	beq.n	800185a <parse_string+0x25e>
                    break;
 8001800:	bf00      	nop
            }
            input_pointer += sequence_length;
 8001802:	7dfb      	ldrb	r3, [r7, #23]
 8001804:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001806:	4413      	add	r3, r2
 8001808:	627b      	str	r3, [r7, #36]	@ 0x24
    while (input_pointer < input_end)
 800180a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800180c:	6a3b      	ldr	r3, [r7, #32]
 800180e:	429a      	cmp	r2, r3
 8001810:	f4ff af66 	bcc.w	80016e0 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2200      	movs	r2, #0
 8001818:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2210      	movs	r2, #16
 800181e:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	69fa      	ldr	r2, [r7, #28]
 8001824:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6a3a      	ldr	r2, [r7, #32]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	461a      	mov	r2, r3
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	1c5a      	adds	r2, r3, #1
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	609a      	str	r2, [r3, #8]

    return true;
 800183e:	2301      	movs	r3, #1
 8001840:	e020      	b.n	8001884 <parse_string+0x288>
        goto fail;
 8001842:	bf00      	nop
 8001844:	e00a      	b.n	800185c <parse_string+0x260>
                    goto fail;
 8001846:	bf00      	nop
 8001848:	e008      	b.n	800185c <parse_string+0x260>
            goto fail; /* string ended unexpectedly */
 800184a:	bf00      	nop
 800184c:	e006      	b.n	800185c <parse_string+0x260>
            goto fail; /* allocation failure */
 800184e:	bf00      	nop
 8001850:	e004      	b.n	800185c <parse_string+0x260>
                goto fail;
 8001852:	bf00      	nop
 8001854:	e002      	b.n	800185c <parse_string+0x260>
                    goto fail;
 8001856:	bf00      	nop
 8001858:	e000      	b.n	800185c <parse_string+0x260>
                        goto fail;
 800185a:	bf00      	nop

fail:
    if (output != NULL)
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d005      	beq.n	800186e <parse_string+0x272>
    {
        input_buffer->hooks.deallocate(output);
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	695b      	ldr	r3, [r3, #20]
 8001866:	69f8      	ldr	r0, [r7, #28]
 8001868:	4798      	blx	r3
        output = NULL;
 800186a:	2300      	movs	r3, #0
 800186c:	61fb      	str	r3, [r7, #28]
    }

    if (input_pointer != NULL)
 800186e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001870:	2b00      	cmp	r3, #0
 8001872:	d006      	beq.n	8001882 <parse_string+0x286>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	461a      	mov	r2, r3
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	609a      	str	r2, [r3, #8]
    }

    return false;
 8001882:	2300      	movs	r3, #0
}
 8001884:	4618      	mov	r0, r3
 8001886:	3728      	adds	r7, #40	@ 0x28
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d003      	beq.n	80018a2 <buffer_skip_whitespace+0x16>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d101      	bne.n	80018a6 <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	e02c      	b.n	8001900 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d005      	beq.n	80018b8 <buffer_skip_whitespace+0x2c>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d306      	bcc.n	80018c6 <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	e021      	b.n	8001900 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	1c5a      	adds	r2, r3, #1
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d00d      	beq.n	80018e8 <buffer_skip_whitespace+0x5c>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d207      	bcs.n	80018e8 <buffer_skip_whitespace+0x5c>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	4413      	add	r3, r2
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b20      	cmp	r3, #32
 80018e6:	d9e9      	bls.n	80018bc <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689a      	ldr	r2, [r3, #8]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d104      	bne.n	80018fe <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	1e5a      	subs	r2, r3, #1
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 80018fe:	687b      	ldr	r3, [r7, #4]
}
 8001900:	4618      	mov	r0, r3
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d007      	beq.n	800192a <skip_utf8_bom+0x1e>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d003      	beq.n	800192a <skip_utf8_bom+0x1e>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <skip_utf8_bom+0x22>
    {
        return NULL;
 800192a:	2300      	movs	r3, #0
 800192c:	e01c      	b.n	8001968 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d018      	beq.n	8001966 <skip_utf8_bom+0x5a>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	1d1a      	adds	r2, r3, #4
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	429a      	cmp	r2, r3
 8001940:	d211      	bcs.n	8001966 <skip_utf8_bom+0x5a>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	4413      	add	r3, r2
 800194c:	2203      	movs	r2, #3
 800194e:	4908      	ldr	r1, [pc, #32]	@ (8001970 <skip_utf8_bom+0x64>)
 8001950:	4618      	mov	r0, r3
 8001952:	f009 ff36 	bl	800b7c2 <strncmp>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d104      	bne.n	8001966 <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	1cda      	adds	r2, r3, #3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001966:	687b      	ldr	r3, [r7, #4]
}
 8001968:	4618      	mov	r0, r3
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	0800d7f8 	.word	0x0800d7f8

08001974 <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d101      	bne.n	800198a <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 8001986:	2300      	movs	r3, #0
 8001988:	e00c      	b.n	80019a4 <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 800198a:	68f8      	ldr	r0, [r7, #12]
 800198c:	f7fe fc4a 	bl	8000224 <strlen>
 8001990:	4603      	mov	r3, r0
 8001992:	3301      	adds	r3, #1
 8001994:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	68ba      	ldr	r2, [r7, #8]
 800199a:	6979      	ldr	r1, [r7, #20]
 800199c:	68f8      	ldr	r0, [r7, #12]
 800199e:	f000 f805 	bl	80019ac <cJSON_ParseWithLengthOpts>
 80019a2:	4603      	mov	r3, r0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3718      	adds	r7, #24
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08e      	sub	sp, #56	@ 0x38
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
 80019b8:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 80019ba:	f107 0318 	add.w	r3, r7, #24
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	605a      	str	r2, [r3, #4]
 80019c4:	609a      	str	r2, [r3, #8]
 80019c6:	60da      	str	r2, [r3, #12]
 80019c8:	611a      	str	r2, [r3, #16]
 80019ca:	615a      	str	r2, [r3, #20]
 80019cc:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	637b      	str	r3, [r7, #52]	@ 0x34

    /* reset error position */
    global_error.json = NULL;
 80019d2:	4b41      	ldr	r3, [pc, #260]	@ (8001ad8 <cJSON_ParseWithLengthOpts+0x12c>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 80019d8:	4b3f      	ldr	r3, [pc, #252]	@ (8001ad8 <cJSON_ParseWithLengthOpts+0x12c>)
 80019da:	2200      	movs	r2, #0
 80019dc:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d042      	beq.n	8001a6a <cJSON_ParseWithLengthOpts+0xbe>
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d03f      	beq.n	8001a6a <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 80019f6:	4a39      	ldr	r2, [pc, #228]	@ (8001adc <cJSON_ParseWithLengthOpts+0x130>)
 80019f8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80019fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 8001a02:	4836      	ldr	r0, [pc, #216]	@ (8001adc <cJSON_ParseWithLengthOpts+0x130>)
 8001a04:	f7ff fb74 	bl	80010f0 <cJSON_New_Item>
 8001a08:	6378      	str	r0, [r7, #52]	@ 0x34
    if (item == NULL) /* memory fail */
 8001a0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d02e      	beq.n	8001a6e <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 8001a10:	f107 0318 	add.w	r3, r7, #24
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff ff79 	bl	800190c <skip_utf8_bom>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff ff35 	bl	800188c <buffer_skip_whitespace>
 8001a22:	4603      	mov	r3, r0
 8001a24:	4619      	mov	r1, r3
 8001a26:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001a28:	f000 f868 	bl	8001afc <parse_value>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d01f      	beq.n	8001a72 <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d00e      	beq.n	8001a56 <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 8001a38:	f107 0318 	add.w	r3, r7, #24
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff ff25 	bl	800188c <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 8001a42:	6a3a      	ldr	r2, [r7, #32]
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d215      	bcs.n	8001a76 <cJSON_ParseWithLengthOpts+0xca>
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	6a3b      	ldr	r3, [r7, #32]
 8001a4e:	4413      	add	r3, r2
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d10f      	bne.n	8001a76 <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d004      	beq.n	8001a66 <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	6a3b      	ldr	r3, [r7, #32]
 8001a60:	441a      	add	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	601a      	str	r2, [r3, #0]
    }

    return item;
 8001a66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a68:	e031      	b.n	8001ace <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 8001a6a:	bf00      	nop
 8001a6c:	e004      	b.n	8001a78 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8001a6e:	bf00      	nop
 8001a70:	e002      	b.n	8001a78 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8001a72:	bf00      	nop
 8001a74:	e000      	b.n	8001a78 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 8001a76:	bf00      	nop

fail:
    if (item != NULL)
 8001a78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d002      	beq.n	8001a84 <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 8001a7e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001a80:	f7ff fb4c 	bl	800111c <cJSON_Delete>
    }

    if (value != NULL)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d020      	beq.n	8001acc <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 8001a92:	6a3a      	ldr	r2, [r7, #32]
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d202      	bcs.n	8001aa0 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 8001a9a:	6a3b      	ldr	r3, [r7, #32]
 8001a9c:	617b      	str	r3, [r7, #20]
 8001a9e:	e005      	b.n	8001aac <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d002      	beq.n	8001aac <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d004      	beq.n	8001abc <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	441a      	add	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 8001abc:	4b06      	ldr	r3, [pc, #24]	@ (8001ad8 <cJSON_ParseWithLengthOpts+0x12c>)
 8001abe:	461a      	mov	r2, r3
 8001ac0:	f107 0310 	add.w	r3, r7, #16
 8001ac4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001ac8:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3738      	adds	r7, #56	@ 0x38
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20000204 	.word	0x20000204
 8001adc:	20000000 	.word	0x20000000

08001ae0 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 8001ae8:	2200      	movs	r2, #0
 8001aea:	2100      	movs	r1, #0
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f7ff ff41 	bl	8001974 <cJSON_ParseWithOpts>
 8001af2:	4603      	mov	r3, r0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d003      	beq.n	8001b14 <parse_value+0x18>
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d101      	bne.n	8001b18 <parse_value+0x1c>
    {
        return false; /* no input */
 8001b14:	2300      	movs	r3, #0
 8001b16:	e0d2      	b.n	8001cbe <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d01d      	beq.n	8001b5a <parse_value+0x5e>
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	1d1a      	adds	r2, r3, #4
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d816      	bhi.n	8001b5a <parse_value+0x5e>
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	4413      	add	r3, r2
 8001b36:	2204      	movs	r2, #4
 8001b38:	4963      	ldr	r1, [pc, #396]	@ (8001cc8 <parse_value+0x1cc>)
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f009 fe41 	bl	800b7c2 <strncmp>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d109      	bne.n	8001b5a <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2204      	movs	r2, #4
 8001b4a:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	1d1a      	adds	r2, r3, #4
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	609a      	str	r2, [r3, #8]
        return true;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e0b1      	b.n	8001cbe <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d01d      	beq.n	8001b9c <parse_value+0xa0>
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	1d5a      	adds	r2, r3, #5
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d816      	bhi.n	8001b9c <parse_value+0xa0>
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	4413      	add	r3, r2
 8001b78:	2205      	movs	r2, #5
 8001b7a:	4954      	ldr	r1, [pc, #336]	@ (8001ccc <parse_value+0x1d0>)
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f009 fe20 	bl	800b7c2 <strncmp>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d109      	bne.n	8001b9c <parse_value+0xa0>
    {
        item->type = cJSON_False;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	1d5a      	adds	r2, r3, #5
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	609a      	str	r2, [r3, #8]
        return true;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e090      	b.n	8001cbe <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d020      	beq.n	8001be4 <parse_value+0xe8>
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	1d1a      	adds	r2, r3, #4
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d819      	bhi.n	8001be4 <parse_value+0xe8>
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	4413      	add	r3, r2
 8001bba:	2204      	movs	r2, #4
 8001bbc:	4944      	ldr	r1, [pc, #272]	@ (8001cd0 <parse_value+0x1d4>)
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f009 fdff 	bl	800b7c2 <strncmp>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d10c      	bne.n	8001be4 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2202      	movs	r2, #2
 8001bce:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	1d1a      	adds	r2, r3, #4
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	609a      	str	r2, [r3, #8]
        return true;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e06c      	b.n	8001cbe <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d013      	beq.n	8001c12 <parse_value+0x116>
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	689a      	ldr	r2, [r3, #8]
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d20d      	bcs.n	8001c12 <parse_value+0x116>
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	4413      	add	r3, r2
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	2b22      	cmp	r3, #34	@ 0x22
 8001c04:	d105      	bne.n	8001c12 <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 8001c06:	6839      	ldr	r1, [r7, #0]
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f7ff fcf7 	bl	80015fc <parse_string>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	e055      	b.n	8001cbe <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d023      	beq.n	8001c60 <parse_value+0x164>
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	689a      	ldr	r2, [r3, #8]
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d21d      	bcs.n	8001c60 <parse_value+0x164>
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b2d      	cmp	r3, #45	@ 0x2d
 8001c32:	d00f      	beq.n	8001c54 <parse_value+0x158>
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b2f      	cmp	r3, #47	@ 0x2f
 8001c42:	d90d      	bls.n	8001c60 <parse_value+0x164>
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2b39      	cmp	r3, #57	@ 0x39
 8001c52:	d805      	bhi.n	8001c60 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 8001c54:	6839      	ldr	r1, [r7, #0]
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7ff faba 	bl	80011d0 <parse_number>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	e02e      	b.n	8001cbe <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d013      	beq.n	8001c8e <parse_value+0x192>
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	689a      	ldr	r2, [r3, #8]
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d20d      	bcs.n	8001c8e <parse_value+0x192>
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	2b5b      	cmp	r3, #91	@ 0x5b
 8001c80:	d105      	bne.n	8001c8e <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 8001c82:	6839      	ldr	r1, [r7, #0]
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 f825 	bl	8001cd4 <parse_array>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	e017      	b.n	8001cbe <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d013      	beq.n	8001cbc <parse_value+0x1c0>
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d20d      	bcs.n	8001cbc <parse_value+0x1c0>
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	4413      	add	r3, r2
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b7b      	cmp	r3, #123	@ 0x7b
 8001cae:	d105      	bne.n	8001cbc <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 8001cb0:	6839      	ldr	r1, [r7, #0]
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 f8d2 	bl	8001e5c <parse_object>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	e000      	b.n	8001cbe <parse_value+0x1c2>
    }

    return false;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	0800d7cc 	.word	0x0800d7cc
 8001ccc:	0800d7fc 	.word	0x0800d7fc
 8001cd0:	0800d804 	.word	0x0800d804

08001cd4 <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 8001cde:	2300      	movs	r3, #0
 8001ce0:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001cee:	d301      	bcc.n	8001cf4 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	e0af      	b.n	8001e54 <parse_array+0x180>
    }
    input_buffer->depth++;
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	1c5a      	adds	r2, r3, #1
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	4413      	add	r3, r2
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	2b5b      	cmp	r3, #91	@ 0x5b
 8001d0c:	f040 8094 	bne.w	8001e38 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	1c5a      	adds	r2, r3, #1
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8001d1a:	6838      	ldr	r0, [r7, #0]
 8001d1c:	f7ff fdb6 	bl	800188c <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00d      	beq.n	8001d42 <parse_array+0x6e>
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	689a      	ldr	r2, [r3, #8]
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d207      	bcs.n	8001d42 <parse_array+0x6e>
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	2b5d      	cmp	r3, #93	@ 0x5d
 8001d40:	d061      	beq.n	8001e06 <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d005      	beq.n	8001d54 <parse_array+0x80>
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d305      	bcc.n	8001d60 <parse_array+0x8c>
    {
        input_buffer->offset--;
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	1e5a      	subs	r2, r3, #1
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	609a      	str	r2, [r3, #8]
        goto fail;
 8001d5e:	e072      	b.n	8001e46 <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	1e5a      	subs	r2, r3, #1
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	3310      	adds	r3, #16
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff f9be 	bl	80010f0 <cJSON_New_Item>
 8001d74:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d05f      	beq.n	8001e3c <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d104      	bne.n	8001d8c <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	617b      	str	r3, [r7, #20]
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	613b      	str	r3, [r7, #16]
 8001d8a:	e007      	b.n	8001d9c <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	1c5a      	adds	r2, r3, #1
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001da6:	6838      	ldr	r0, [r7, #0]
 8001da8:	f7ff fd70 	bl	800188c <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8001dac:	6839      	ldr	r1, [r7, #0]
 8001dae:	6938      	ldr	r0, [r7, #16]
 8001db0:	f7ff fea4 	bl	8001afc <parse_value>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d042      	beq.n	8001e40 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8001dba:	6838      	ldr	r0, [r7, #0]
 8001dbc:	f7ff fd66 	bl	800188c <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00d      	beq.n	8001de2 <parse_array+0x10e>
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	689a      	ldr	r2, [r3, #8]
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d207      	bcs.n	8001de2 <parse_array+0x10e>
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	4413      	add	r3, r2
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b2c      	cmp	r3, #44	@ 0x2c
 8001de0:	d0c3      	beq.n	8001d6a <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d02d      	beq.n	8001e44 <parse_array+0x170>
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d227      	bcs.n	8001e44 <parse_array+0x170>
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2b5d      	cmp	r3, #93	@ 0x5d
 8001e02:	d11f      	bne.n	8001e44 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 8001e04:	e000      	b.n	8001e08 <parse_array+0x134>
        goto success;
 8001e06:	bf00      	nop
    input_buffer->depth--;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	1e5a      	subs	r2, r3, #1
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d002      	beq.n	8001e1e <parse_array+0x14a>
        head->prev = current_item;
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2220      	movs	r2, #32
 8001e22:	60da      	str	r2, [r3, #12]
    item->child = head;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	697a      	ldr	r2, [r7, #20]
 8001e28:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	1c5a      	adds	r2, r3, #1
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	609a      	str	r2, [r3, #8]

    return true;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e00d      	b.n	8001e54 <parse_array+0x180>
        goto fail;
 8001e38:	bf00      	nop
 8001e3a:	e004      	b.n	8001e46 <parse_array+0x172>
            goto fail; /* allocation failure */
 8001e3c:	bf00      	nop
 8001e3e:	e002      	b.n	8001e46 <parse_array+0x172>
            goto fail; /* failed to parse value */
 8001e40:	bf00      	nop
 8001e42:	e000      	b.n	8001e46 <parse_array+0x172>
        goto fail; /* expected end of array */
 8001e44:	bf00      	nop

fail:
    if (head != NULL)
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d002      	beq.n	8001e52 <parse_array+0x17e>
    {
        cJSON_Delete(head);
 8001e4c:	6978      	ldr	r0, [r7, #20]
 8001e4e:	f7ff f965 	bl	800111c <cJSON_Delete>
    }

    return false;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3718      	adds	r7, #24
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 8001e66:	2300      	movs	r3, #0
 8001e68:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e76:	d301      	bcc.n	8001e7c <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8001e78:	2300      	movs	r3, #0
 8001e7a:	e0f7      	b.n	800206c <parse_object+0x210>
    }
    input_buffer->depth++;
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	1c5a      	adds	r2, r3, #1
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	f000 80db 	beq.w	8002044 <parse_object+0x1e8>
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	689a      	ldr	r2, [r3, #8]
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	f080 80d4 	bcs.w	8002044 <parse_object+0x1e8>
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b7b      	cmp	r3, #123	@ 0x7b
 8001eaa:	f040 80cb 	bne.w	8002044 <parse_object+0x1e8>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	1c5a      	adds	r2, r3, #1
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8001eb8:	6838      	ldr	r0, [r7, #0]
 8001eba:	f7ff fce7 	bl	800188c <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d00e      	beq.n	8001ee2 <parse_object+0x86>
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d208      	bcs.n	8001ee2 <parse_object+0x86>
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	4413      	add	r3, r2
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	2b7d      	cmp	r3, #125	@ 0x7d
 8001ede:	f000 8098 	beq.w	8002012 <parse_object+0x1b6>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d005      	beq.n	8001ef4 <parse_object+0x98>
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d305      	bcc.n	8001f00 <parse_object+0xa4>
    {
        input_buffer->offset--;
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	1e5a      	subs	r2, r3, #1
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	609a      	str	r2, [r3, #8]
        goto fail;
 8001efe:	e0ae      	b.n	800205e <parse_object+0x202>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	1e5a      	subs	r2, r3, #1
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	3310      	adds	r3, #16
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff f8ee 	bl	80010f0 <cJSON_New_Item>
 8001f14:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f000 8095 	beq.w	8002048 <parse_object+0x1ec>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d104      	bne.n	8001f2e <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	617b      	str	r3, [r7, #20]
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	613b      	str	r3, [r7, #16]
 8001f2c:	e007      	b.n	8001f3e <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	613b      	str	r3, [r7, #16]
        }

        if (cannot_access_at_index(input_buffer, 1))
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f000 8083 	beq.w	800204c <parse_object+0x1f0>
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	1c5a      	adds	r2, r3, #1
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d27b      	bcs.n	800204c <parse_object+0x1f0>
        {
            goto fail; /* nothing comes after the comma */
        }

        /* parse the name of the child */
        input_buffer->offset++;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	1c5a      	adds	r2, r3, #1
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001f5e:	6838      	ldr	r0, [r7, #0]
 8001f60:	f7ff fc94 	bl	800188c <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8001f64:	6839      	ldr	r1, [r7, #0]
 8001f66:	6938      	ldr	r0, [r7, #16]
 8001f68:	f7ff fb48 	bl	80015fc <parse_string>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d06e      	beq.n	8002050 <parse_object+0x1f4>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8001f72:	6838      	ldr	r0, [r7, #0]
 8001f74:	f7ff fc8a 	bl	800188c <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	691a      	ldr	r2, [r3, #16]
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	2200      	movs	r2, #0
 8001f84:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d063      	beq.n	8002054 <parse_object+0x1f8>
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	689a      	ldr	r2, [r3, #8]
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d25d      	bcs.n	8002054 <parse_object+0x1f8>
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b3a      	cmp	r3, #58	@ 0x3a
 8001fa6:	d155      	bne.n	8002054 <parse_object+0x1f8>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	1c5a      	adds	r2, r3, #1
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001fb2:	6838      	ldr	r0, [r7, #0]
 8001fb4:	f7ff fc6a 	bl	800188c <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8001fb8:	6839      	ldr	r1, [r7, #0]
 8001fba:	6938      	ldr	r0, [r7, #16]
 8001fbc:	f7ff fd9e 	bl	8001afc <parse_value>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d048      	beq.n	8002058 <parse_object+0x1fc>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8001fc6:	6838      	ldr	r0, [r7, #0]
 8001fc8:	f7ff fc60 	bl	800188c <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00d      	beq.n	8001fee <parse_object+0x192>
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	689a      	ldr	r2, [r3, #8]
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d207      	bcs.n	8001fee <parse_object+0x192>
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2b2c      	cmp	r3, #44	@ 0x2c
 8001fec:	d08d      	beq.n	8001f0a <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d033      	beq.n	800205c <parse_object+0x200>
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d22d      	bcs.n	800205c <parse_object+0x200>
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	4413      	add	r3, r2
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	2b7d      	cmp	r3, #125	@ 0x7d
 800200e:	d125      	bne.n	800205c <parse_object+0x200>
    {
        goto fail; /* expected end of object */
    }

success:
 8002010:	e000      	b.n	8002014 <parse_object+0x1b8>
        goto success; /* empty object */
 8002012:	bf00      	nop
    input_buffer->depth--;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	1e5a      	subs	r2, r3, #1
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d002      	beq.n	800202a <parse_object+0x1ce>
        head->prev = current_item;
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2240      	movs	r2, #64	@ 0x40
 800202e:	60da      	str	r2, [r3, #12]
    item->child = head;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	1c5a      	adds	r2, r3, #1
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	609a      	str	r2, [r3, #8]
    return true;
 8002040:	2301      	movs	r3, #1
 8002042:	e013      	b.n	800206c <parse_object+0x210>
        goto fail; /* not an object */
 8002044:	bf00      	nop
 8002046:	e00a      	b.n	800205e <parse_object+0x202>
            goto fail; /* allocation failure */
 8002048:	bf00      	nop
 800204a:	e008      	b.n	800205e <parse_object+0x202>
            goto fail; /* nothing comes after the comma */
 800204c:	bf00      	nop
 800204e:	e006      	b.n	800205e <parse_object+0x202>
            goto fail; /* failed to parse name */
 8002050:	bf00      	nop
 8002052:	e004      	b.n	800205e <parse_object+0x202>
            goto fail; /* invalid object */
 8002054:	bf00      	nop
 8002056:	e002      	b.n	800205e <parse_object+0x202>
            goto fail; /* failed to parse value */
 8002058:	bf00      	nop
 800205a:	e000      	b.n	800205e <parse_object+0x202>
        goto fail; /* expected end of object */
 800205c:	bf00      	nop

fail:
    if (head != NULL)
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d002      	beq.n	800206a <parse_object+0x20e>
    {
        cJSON_Delete(head);
 8002064:	6978      	ldr	r0, [r7, #20]
 8002066:	f7ff f859 	bl	800111c <cJSON_Delete>
    }

    return false;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3718      	adds	r7, #24
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d002      	beq.n	8002090 <get_object_item+0x1c>
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d101      	bne.n	8002094 <get_object_item+0x20>
    {
        return NULL;
 8002090:	2300      	movs	r3, #0
 8002092:	e033      	b.n	80020fc <get_object_item+0x88>
    }

    current_element = object->child;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d017      	beq.n	80020d0 <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 80020a0:	e002      	b.n	80020a8 <get_object_item+0x34>
        {
            current_element = current_element->next;
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d01c      	beq.n	80020e8 <get_object_item+0x74>
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d018      	beq.n	80020e8 <get_object_item+0x74>
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	6a1b      	ldr	r3, [r3, #32]
 80020ba:	4619      	mov	r1, r3
 80020bc:	68b8      	ldr	r0, [r7, #8]
 80020be:	f7fe f8a7 	bl	8000210 <strcmp>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1ec      	bne.n	80020a2 <get_object_item+0x2e>
 80020c8:	e00e      	b.n	80020e8 <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d008      	beq.n	80020e8 <get_object_item+0x74>
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	6a1b      	ldr	r3, [r3, #32]
 80020da:	4619      	mov	r1, r3
 80020dc:	68b8      	ldr	r0, [r7, #8]
 80020de:	f7fe ff9b 	bl	8001018 <case_insensitive_strcmp>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d1f0      	bne.n	80020ca <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <get_object_item+0x82>
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	6a1b      	ldr	r3, [r3, #32]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <get_object_item+0x86>
        return NULL;
 80020f6:	2300      	movs	r3, #0
 80020f8:	e000      	b.n	80020fc <get_object_item+0x88>
    }

    return current_element;
 80020fa:	697b      	ldr	r3, [r7, #20]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3718      	adds	r7, #24
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <cJSON_GetObjectItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 800210e:	2200      	movs	r2, #0
 8002110:	6839      	ldr	r1, [r7, #0]
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7ff ffae 	bl	8002074 <get_object_item>
 8002118:	4603      	mov	r3, r0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <cJSON_IsNumber>:

    return (item->type & 0xFF) == cJSON_NULL;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
 8002122:	b480      	push	{r7}
 8002124:	b083      	sub	sp, #12
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d101      	bne.n	8002134 <cJSON_IsNumber+0x12>
    {
        return false;
 8002130:	2300      	movs	r3, #0
 8002132:	e007      	b.n	8002144 <cJSON_IsNumber+0x22>
    }

    return (item->type & 0xFF) == cJSON_Number;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b08      	cmp	r3, #8
 800213c:	bf0c      	ite	eq
 800213e:	2301      	moveq	r3, #1
 8002140:	2300      	movne	r3, #0
 8002142:	b2db      	uxtb	r3, r3
}
 8002144:	4618      	mov	r0, r3
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	4a07      	ldr	r2, [pc, #28]	@ (800217c <vApplicationGetIdleTaskMemory+0x2c>)
 8002160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	4a06      	ldr	r2, [pc, #24]	@ (8002180 <vApplicationGetIdleTaskMemory+0x30>)
 8002166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2280      	movs	r2, #128	@ 0x80
 800216c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800216e:	bf00      	nop
 8002170:	3714      	adds	r7, #20
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	2000020c 	.word	0x2000020c
 8002180:	200002ac 	.word	0x200002ac

08002184 <process_command>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void process_command(char* cmd) {
 8002184:	b580      	push	{r7, lr}
 8002186:	b08c      	sub	sp, #48	@ 0x30
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
	cJSON *json_data = cJSON_Parse(cmd);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f7ff fca7 	bl	8001ae0 <cJSON_Parse>
 8002192:	62f8      	str	r0, [r7, #44]	@ 0x2c
	if (json_data != NULL) {
 8002194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002196:	2b00      	cmp	r3, #0
 8002198:	f000 808d 	beq.w	80022b6 <process_command+0x132>
		// Extract data from the JSON object
		cJSON *rpm = cJSON_GetObjectItem(json_data, "rpm");
 800219c:	494c      	ldr	r1, [pc, #304]	@ (80022d0 <process_command+0x14c>)
 800219e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80021a0:	f7ff ffb0 	bl	8002104 <cJSON_GetObjectItem>
 80021a4:	62b8      	str	r0, [r7, #40]	@ 0x28
		cJSON *gear = cJSON_GetObjectItem(json_data, "gear");
 80021a6:	494b      	ldr	r1, [pc, #300]	@ (80022d4 <process_command+0x150>)
 80021a8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80021aa:	f7ff ffab 	bl	8002104 <cJSON_GetObjectItem>
 80021ae:	6278      	str	r0, [r7, #36]	@ 0x24
		cJSON *speedKmh = cJSON_GetObjectItem(json_data, "speedKmh");
 80021b0:	4949      	ldr	r1, [pc, #292]	@ (80022d8 <process_command+0x154>)
 80021b2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80021b4:	f7ff ffa6 	bl	8002104 <cJSON_GetObjectItem>
 80021b8:	6238      	str	r0, [r7, #32]
		cJSON *hasDRS = cJSON_GetObjectItem(json_data, "hasDRS");
 80021ba:	4948      	ldr	r1, [pc, #288]	@ (80022dc <process_command+0x158>)
 80021bc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80021be:	f7ff ffa1 	bl	8002104 <cJSON_GetObjectItem>
 80021c2:	61f8      	str	r0, [r7, #28]
		cJSON *drs = cJSON_GetObjectItem(json_data, "drs");
 80021c4:	4946      	ldr	r1, [pc, #280]	@ (80022e0 <process_command+0x15c>)
 80021c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80021c8:	f7ff ff9c 	bl	8002104 <cJSON_GetObjectItem>
 80021cc:	61b8      	str	r0, [r7, #24]
		cJSON *pitLim = cJSON_GetObjectItem(json_data, "pitLim");
 80021ce:	4945      	ldr	r1, [pc, #276]	@ (80022e4 <process_command+0x160>)
 80021d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80021d2:	f7ff ff97 	bl	8002104 <cJSON_GetObjectItem>
 80021d6:	6178      	str	r0, [r7, #20]
		cJSON *fuel = cJSON_GetObjectItem(json_data, "fuel");
 80021d8:	4943      	ldr	r1, [pc, #268]	@ (80022e8 <process_command+0x164>)
 80021da:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80021dc:	f7ff ff92 	bl	8002104 <cJSON_GetObjectItem>
 80021e0:	6138      	str	r0, [r7, #16]
		cJSON *brakeBias = cJSON_GetObjectItem(json_data, "brakeBias");
 80021e2:	4942      	ldr	r1, [pc, #264]	@ (80022ec <process_command+0x168>)
 80021e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80021e6:	f7ff ff8d 	bl	8002104 <cJSON_GetObjectItem>
 80021ea:	60f8      	str	r0, [r7, #12]
		cJSON *forceFB = cJSON_GetObjectItem(json_data, "forceFB");
 80021ec:	4940      	ldr	r1, [pc, #256]	@ (80022f0 <process_command+0x16c>)
 80021ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80021f0:	f7ff ff88 	bl	8002104 <cJSON_GetObjectItem>
 80021f4:	60b8      	str	r0, [r7, #8]

		// Check if items were found and extract values
		if (cJSON_IsNumber(rpm)) { telemetry_data.tRpm = rpm->valueint; }
 80021f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80021f8:	f7ff ff93 	bl	8002122 <cJSON_IsNumber>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <process_command+0x86>
 8002202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	4a3b      	ldr	r2, [pc, #236]	@ (80022f4 <process_command+0x170>)
 8002208:	6013      	str	r3, [r2, #0]
		if (cJSON_IsNumber(gear)) { telemetry_data.tGear = gear->valueint; }
 800220a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800220c:	f7ff ff89 	bl	8002122 <cJSON_IsNumber>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <process_command+0x9a>
 8002216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	4a36      	ldr	r2, [pc, #216]	@ (80022f4 <process_command+0x170>)
 800221c:	6053      	str	r3, [r2, #4]
		if (cJSON_IsNumber(speedKmh)) { telemetry_data.tSpeedKmh = speedKmh->valueint; }
 800221e:	6a38      	ldr	r0, [r7, #32]
 8002220:	f7ff ff7f 	bl	8002122 <cJSON_IsNumber>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d003      	beq.n	8002232 <process_command+0xae>
 800222a:	6a3b      	ldr	r3, [r7, #32]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	4a31      	ldr	r2, [pc, #196]	@ (80022f4 <process_command+0x170>)
 8002230:	6093      	str	r3, [r2, #8]
		if (cJSON_IsNumber(hasDRS)) { telemetry_data.tHasDRS = hasDRS->valueint; }
 8002232:	69f8      	ldr	r0, [r7, #28]
 8002234:	f7ff ff75 	bl	8002122 <cJSON_IsNumber>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d003      	beq.n	8002246 <process_command+0xc2>
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	4a2c      	ldr	r2, [pc, #176]	@ (80022f4 <process_command+0x170>)
 8002244:	60d3      	str	r3, [r2, #12]
		if (cJSON_IsNumber(drs)) { telemetry_data.tDrs = drs->valueint; }
 8002246:	69b8      	ldr	r0, [r7, #24]
 8002248:	f7ff ff6b 	bl	8002122 <cJSON_IsNumber>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <process_command+0xd6>
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	4a27      	ldr	r2, [pc, #156]	@ (80022f4 <process_command+0x170>)
 8002258:	6113      	str	r3, [r2, #16]
		if (cJSON_IsNumber(pitLim)) { telemetry_data.tPitLim = pitLim->valueint; }
 800225a:	6978      	ldr	r0, [r7, #20]
 800225c:	f7ff ff61 	bl	8002122 <cJSON_IsNumber>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d003      	beq.n	800226e <process_command+0xea>
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	4a22      	ldr	r2, [pc, #136]	@ (80022f4 <process_command+0x170>)
 800226c:	6153      	str	r3, [r2, #20]
		if (cJSON_IsNumber(fuel)) { telemetry_data.tFuel = fuel->valueint; }
 800226e:	6938      	ldr	r0, [r7, #16]
 8002270:	f7ff ff57 	bl	8002122 <cJSON_IsNumber>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <process_command+0xfe>
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	4a1d      	ldr	r2, [pc, #116]	@ (80022f4 <process_command+0x170>)
 8002280:	6193      	str	r3, [r2, #24]
		if (cJSON_IsNumber(brakeBias)) { telemetry_data.tBrakeBias = brakeBias->valueint; }
 8002282:	68f8      	ldr	r0, [r7, #12]
 8002284:	f7ff ff4d 	bl	8002122 <cJSON_IsNumber>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <process_command+0x112>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	4a18      	ldr	r2, [pc, #96]	@ (80022f4 <process_command+0x170>)
 8002294:	61d3      	str	r3, [r2, #28]

		if (cJSON_IsNumber(forceFB)) { gFfbSignal = (float)forceFB->valuedouble; }
 8002296:	68b8      	ldr	r0, [r7, #8]
 8002298:	f7ff ff43 	bl	8002122 <cJSON_IsNumber>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d009      	beq.n	80022b6 <process_command+0x132>
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80022a8:	4610      	mov	r0, r2
 80022aa:	4619      	mov	r1, r3
 80022ac:	f7fe fcb6 	bl	8000c1c <__aeabi_d2f>
 80022b0:	4603      	mov	r3, r0
 80022b2:	4a11      	ldr	r2, [pc, #68]	@ (80022f8 <process_command+0x174>)
 80022b4:	6013      	str	r3, [r2, #0]
		}
		// Cleanup
		cJSON_Delete(json_data);
 80022b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80022b8:	f7fe ff30 	bl	800111c <cJSON_Delete>
		// Clear the buffer for the next message
		memset(gCommandData, 0, BUFFER_SIZE);
 80022bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80022c0:	2100      	movs	r1, #0
 80022c2:	480e      	ldr	r0, [pc, #56]	@ (80022fc <process_command+0x178>)
 80022c4:	f009 fa75 	bl	800b7b2 <memset>
}
 80022c8:	bf00      	nop
 80022ca:	3730      	adds	r7, #48	@ 0x30
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	0800d80c 	.word	0x0800d80c
 80022d4:	0800d810 	.word	0x0800d810
 80022d8:	0800d818 	.word	0x0800d818
 80022dc:	0800d824 	.word	0x0800d824
 80022e0:	0800d82c 	.word	0x0800d82c
 80022e4:	0800d830 	.word	0x0800d830
 80022e8:	0800d838 	.word	0x0800d838
 80022ec:	0800d840 	.word	0x0800d840
 80022f0:	0800d84c 	.word	0x0800d84c
 80022f4:	200004ac 	.word	0x200004ac
 80022f8:	20000874 	.word	0x20000874
 80022fc:	20000774 	.word	0x20000774

08002300 <send_response>:

void send_response(const char* str) {
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
    if (str == NULL) {
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d00c      	beq.n	8002328 <send_response+0x28>
        return; // Handle null pointer case if necessary
    }

    // Calculate the length of the string
    uint16_t len = strlen(str);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f7fd ff88 	bl	8000224 <strlen>
 8002314:	4603      	mov	r3, r0
 8002316:	81fb      	strh	r3, [r7, #14]

    // Transmit the string using HAL_UART_Transmit
    HAL_UART_Transmit(&huart2, (uint8_t*)str, len, HAL_MAX_DELAY);
 8002318:	89fa      	ldrh	r2, [r7, #14]
 800231a:	f04f 33ff 	mov.w	r3, #4294967295
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	4803      	ldr	r0, [pc, #12]	@ (8002330 <send_response+0x30>)
 8002322:	f004 fbd3 	bl	8006acc <HAL_UART_Transmit>
 8002326:	e000      	b.n	800232a <send_response+0x2a>
        return; // Handle null pointer case if necessary
 8002328:	bf00      	nop
}
 800232a:	3710      	adds	r7, #16
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	20000614 	.word	0x20000614

08002334 <DWT_Init>:

// Initialize DWT for cycle counting
void DWT_Init(void) {
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 8002338:	4b0c      	ldr	r3, [pc, #48]	@ (800236c <DWT_Init+0x38>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d105      	bne.n	8002350 <DWT_Init+0x1c>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002344:	4b09      	ldr	r3, [pc, #36]	@ (800236c <DWT_Init+0x38>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	4a08      	ldr	r2, [pc, #32]	@ (800236c <DWT_Init+0x38>)
 800234a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800234e:	60d3      	str	r3, [r2, #12]
    }
    DWT->CYCCNT = 0; // Reset the cycle counter
 8002350:	4b07      	ldr	r3, [pc, #28]	@ (8002370 <DWT_Init+0x3c>)
 8002352:	2200      	movs	r2, #0
 8002354:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; // Enable the cycle counter
 8002356:	4b06      	ldr	r3, [pc, #24]	@ (8002370 <DWT_Init+0x3c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a05      	ldr	r2, [pc, #20]	@ (8002370 <DWT_Init+0x3c>)
 800235c:	f043 0301 	orr.w	r3, r3, #1
 8002360:	6013      	str	r3, [r2, #0]
}
 8002362:	bf00      	nop
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	e000edf0 	.word	0xe000edf0
 8002370:	e0001000 	.word	0xe0001000

08002374 <DWT_Delay_us>:

// Delay function using DWT for accurate timing in microseconds
void DWT_Delay_us(uint32_t us) {
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT;
 800237c:	4b0d      	ldr	r3, [pc, #52]	@ (80023b4 <DWT_Delay_us+0x40>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	60fb      	str	r3, [r7, #12]
    uint32_t delayTicks = us * (SystemCoreClock / 1000000); // Convert microseconds to ticks
 8002382:	4b0d      	ldr	r3, [pc, #52]	@ (80023b8 <DWT_Delay_us+0x44>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a0d      	ldr	r2, [pc, #52]	@ (80023bc <DWT_Delay_us+0x48>)
 8002388:	fba2 2303 	umull	r2, r3, r2, r3
 800238c:	0c9a      	lsrs	r2, r3, #18
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	fb02 f303 	mul.w	r3, r2, r3
 8002394:	60bb      	str	r3, [r7, #8]

    while ((DWT->CYCCNT - startTick) < delayTicks) {
 8002396:	bf00      	nop
 8002398:	4b06      	ldr	r3, [pc, #24]	@ (80023b4 <DWT_Delay_us+0x40>)
 800239a:	685a      	ldr	r2, [r3, #4]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	68ba      	ldr	r2, [r7, #8]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d8f8      	bhi.n	8002398 <DWT_Delay_us+0x24>
        // Wait until the required delay has passed
    }
}
 80023a6:	bf00      	nop
 80023a8:	bf00      	nop
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	e0001000 	.word	0xe0001000
 80023b8:	20000010 	.word	0x20000010
 80023bc:	431bde83 	.word	0x431bde83

080023c0 <constrain>:

    // Calculate the oscillation value using a sine wave
    return sin((2 * M_PI * elapsed_time) / period);
}

float constrain(float x, float lower, float upper) {
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	ed87 0a03 	vstr	s0, [r7, #12]
 80023ca:	edc7 0a02 	vstr	s1, [r7, #8]
 80023ce:	ed87 1a01 	vstr	s2, [r7, #4]
    if (x < lower) return lower;
 80023d2:	ed97 7a03 	vldr	s14, [r7, #12]
 80023d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80023da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023e2:	d501      	bpl.n	80023e8 <constrain+0x28>
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	e00b      	b.n	8002400 <constrain+0x40>
    if (x > upper) return upper;
 80023e8:	ed97 7a03 	vldr	s14, [r7, #12]
 80023ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80023f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023f8:	dd01      	ble.n	80023fe <constrain+0x3e>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	e000      	b.n	8002400 <constrain+0x40>
    return x;
 80023fe:	68fb      	ldr	r3, [r7, #12]
}
 8002400:	ee07 3a90 	vmov	s15, r3
 8002404:	eeb0 0a67 	vmov.f32	s0, s15
 8002408:	3714      	adds	r7, #20
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
	...

08002414 <calculate_inertia>:

float calculate_inertia(float force_feedback, float angular_velocity) {
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	ed87 0a01 	vstr	s0, [r7, #4]
 800241e:	edc7 0a00 	vstr	s1, [r7]
    static float previous_output = 0;
    float inertia_coefficient = 0.1; // Fine-tune for feel
 8002422:	4b12      	ldr	r3, [pc, #72]	@ (800246c <calculate_inertia+0x58>)
 8002424:	60fb      	str	r3, [r7, #12]
    float inertia_force = inertia_coefficient * previous_output + (1 - inertia_coefficient) * force_feedback;
 8002426:	4b12      	ldr	r3, [pc, #72]	@ (8002470 <calculate_inertia+0x5c>)
 8002428:	ed93 7a00 	vldr	s14, [r3]
 800242c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002430:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002434:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002438:	edd7 7a03 	vldr	s15, [r7, #12]
 800243c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002440:	edd7 7a01 	vldr	s15, [r7, #4]
 8002444:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002448:	ee77 7a27 	vadd.f32	s15, s14, s15
 800244c:	edc7 7a02 	vstr	s15, [r7, #8]
    previous_output = inertia_force;
 8002450:	4a07      	ldr	r2, [pc, #28]	@ (8002470 <calculate_inertia+0x5c>)
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	6013      	str	r3, [r2, #0]
    return inertia_force;
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	ee07 3a90 	vmov	s15, r3
}
 800245c:	eeb0 0a67 	vmov.f32	s0, s15
 8002460:	3714      	adds	r7, #20
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	3dcccccd 	.word	0x3dcccccd
 8002470:	2000089c 	.word	0x2000089c

08002474 <calculate_damping>:

float calculate_damping(float angular_velocity) {
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	ed87 0a01 	vstr	s0, [r7, #4]
    float damping_coefficient = 0.05;
 800247e:	4b08      	ldr	r3, [pc, #32]	@ (80024a0 <calculate_damping+0x2c>)
 8002480:	60fb      	str	r3, [r7, #12]
    return -damping_coefficient * angular_velocity;
 8002482:	edd7 7a03 	vldr	s15, [r7, #12]
 8002486:	eeb1 7a67 	vneg.f32	s14, s15
 800248a:	edd7 7a01 	vldr	s15, [r7, #4]
 800248e:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8002492:	eeb0 0a67 	vmov.f32	s0, s15
 8002496:	3714      	adds	r7, #20
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr
 80024a0:	3d4ccccd 	.word	0x3d4ccccd

080024a4 <calculate_friction>:

float calculate_friction(float angular_velocity) {
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	ed87 0a01 	vstr	s0, [r7, #4]
    float friction_coefficient = 0.02;
 80024ae:	4b10      	ldr	r3, [pc, #64]	@ (80024f0 <calculate_friction+0x4c>)
 80024b0:	60fb      	str	r3, [r7, #12]
    if (angular_velocity > 0) {
 80024b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80024b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024be:	dd04      	ble.n	80024ca <calculate_friction+0x26>
        return -friction_coefficient;
 80024c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80024c4:	eef1 7a67 	vneg.f32	s15, s15
 80024c8:	e00b      	b.n	80024e2 <calculate_friction+0x3e>
    } else if (angular_velocity < 0) {
 80024ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80024ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024d6:	d502      	bpl.n	80024de <calculate_friction+0x3a>
        return friction_coefficient;
 80024d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80024dc:	e001      	b.n	80024e2 <calculate_friction+0x3e>
    } else {
        return 0;
 80024de:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80024f4 <calculate_friction+0x50>
    }
}
 80024e2:	eeb0 0a67 	vmov.f32	s0, s15
 80024e6:	3714      	adds	r7, #20
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	3ca3d70a 	.word	0x3ca3d70a
 80024f4:	00000000 	.word	0x00000000

080024f8 <calculate_lock>:

float calculate_lock(float angle) {
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	ed87 0a01 	vstr	s0, [r7, #4]
    float lock_coefficient = 1.0;
 8002502:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002506:	60fb      	str	r3, [r7, #12]
    float max_angle = 450.0;
 8002508:	4b1c      	ldr	r3, [pc, #112]	@ (800257c <calculate_lock+0x84>)
 800250a:	60bb      	str	r3, [r7, #8]
    if (angle > max_angle) {
 800250c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002510:	edd7 7a02 	vldr	s15, [r7, #8]
 8002514:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800251c:	dd0c      	ble.n	8002538 <calculate_lock+0x40>
        return -lock_coefficient * (angle - max_angle);
 800251e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002522:	eeb1 7a67 	vneg.f32	s14, s15
 8002526:	edd7 6a01 	vldr	s13, [r7, #4]
 800252a:	edd7 7a02 	vldr	s15, [r7, #8]
 800252e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002536:	e019      	b.n	800256c <calculate_lock+0x74>
    } else if (angle < -max_angle) {
 8002538:	edd7 7a02 	vldr	s15, [r7, #8]
 800253c:	eef1 7a67 	vneg.f32	s15, s15
 8002540:	ed97 7a01 	vldr	s14, [r7, #4]
 8002544:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800254c:	d50c      	bpl.n	8002568 <calculate_lock+0x70>
        return -lock_coefficient * (angle + max_angle);
 800254e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002552:	eeb1 7a67 	vneg.f32	s14, s15
 8002556:	edd7 6a01 	vldr	s13, [r7, #4]
 800255a:	edd7 7a02 	vldr	s15, [r7, #8]
 800255e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002566:	e001      	b.n	800256c <calculate_lock+0x74>
    }
    return 0;
 8002568:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8002580 <calculate_lock+0x88>
}
 800256c:	eeb0 0a67 	vmov.f32	s0, s15
 8002570:	3714      	adds	r7, #20
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	43e10000 	.word	0x43e10000
 8002580:	00000000 	.word	0x00000000

08002584 <scale_to_pwm>:
//    gPWM = pwm_output;
//
//    return pwm_output;
//}

float scale_to_pwm(float total_force) {
 8002584:	b5b0      	push	{r4, r5, r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af00      	add	r7, sp, #0
 800258a:	ed87 0a01 	vstr	s0, [r7, #4]
    const float MIN_PWM = 50.0f;    // Minimum PWM value for the motor to start moving
 800258e:	4b2b      	ldr	r3, [pc, #172]	@ (800263c <scale_to_pwm+0xb8>)
 8002590:	617b      	str	r3, [r7, #20]
    const float MAX_PWM = 255.0f;   // Maximum PWM value
 8002592:	4b2b      	ldr	r3, [pc, #172]	@ (8002640 <scale_to_pwm+0xbc>)
 8002594:	613b      	str	r3, [r7, #16]

    // If total_force is zero, return zero PWM output
    if (total_force == 0.0f) {
 8002596:	edd7 7a01 	vldr	s15, [r7, #4]
 800259a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800259e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025a2:	d106      	bne.n	80025b2 <scale_to_pwm+0x2e>
        gPWM = 0.0f;
 80025a4:	4b27      	ldr	r3, [pc, #156]	@ (8002644 <scale_to_pwm+0xc0>)
 80025a6:	f04f 0200 	mov.w	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
        return 0.0f;
 80025ac:	f04f 0300 	mov.w	r3, #0
 80025b0:	e03c      	b.n	800262c <scale_to_pwm+0xa8>
    }

    // Calculate PWM output
    float pwm_output = fabs(total_force) * (MAX_PWM - MIN_PWM) + MIN_PWM;
 80025b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80025b6:	eef0 7ae7 	vabs.f32	s15, s15
 80025ba:	ee17 0a90 	vmov	r0, s15
 80025be:	f7fd fff3 	bl	80005a8 <__aeabi_f2d>
 80025c2:	4604      	mov	r4, r0
 80025c4:	460d      	mov	r5, r1
 80025c6:	ed97 7a04 	vldr	s14, [r7, #16]
 80025ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80025ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025d2:	ee17 0a90 	vmov	r0, s15
 80025d6:	f7fd ffe7 	bl	80005a8 <__aeabi_f2d>
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	4620      	mov	r0, r4
 80025e0:	4629      	mov	r1, r5
 80025e2:	f7fe f839 	bl	8000658 <__aeabi_dmul>
 80025e6:	4602      	mov	r2, r0
 80025e8:	460b      	mov	r3, r1
 80025ea:	4614      	mov	r4, r2
 80025ec:	461d      	mov	r5, r3
 80025ee:	6978      	ldr	r0, [r7, #20]
 80025f0:	f7fd ffda 	bl	80005a8 <__aeabi_f2d>
 80025f4:	4602      	mov	r2, r0
 80025f6:	460b      	mov	r3, r1
 80025f8:	4620      	mov	r0, r4
 80025fa:	4629      	mov	r1, r5
 80025fc:	f7fd fe76 	bl	80002ec <__adddf3>
 8002600:	4602      	mov	r2, r0
 8002602:	460b      	mov	r3, r1
 8002604:	4610      	mov	r0, r2
 8002606:	4619      	mov	r1, r3
 8002608:	f7fe fb08 	bl	8000c1c <__aeabi_d2f>
 800260c:	4603      	mov	r3, r0
 800260e:	60fb      	str	r3, [r7, #12]

    // Constrain PWM output to valid range
    pwm_output = constrain(pwm_output, MIN_PWM, MAX_PWM);
 8002610:	ed97 1a04 	vldr	s2, [r7, #16]
 8002614:	edd7 0a05 	vldr	s1, [r7, #20]
 8002618:	ed97 0a03 	vldr	s0, [r7, #12]
 800261c:	f7ff fed0 	bl	80023c0 <constrain>
 8002620:	ed87 0a03 	vstr	s0, [r7, #12]

    // Update debug variable
    gPWM = pwm_output;
 8002624:	4a07      	ldr	r2, [pc, #28]	@ (8002644 <scale_to_pwm+0xc0>)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6013      	str	r3, [r2, #0]

    return pwm_output;
 800262a:	68fb      	ldr	r3, [r7, #12]
}
 800262c:	ee07 3a90 	vmov	s15, r3
 8002630:	eeb0 0a67 	vmov.f32	s0, s15
 8002634:	3718      	adds	r7, #24
 8002636:	46bd      	mov	sp, r7
 8002638:	bdb0      	pop	{r4, r5, r7, pc}
 800263a:	bf00      	nop
 800263c:	42480000 	.word	0x42480000
 8002640:	437f0000 	.word	0x437f0000
 8002644:	20000878 	.word	0x20000878

08002648 <init_encoder>:

void init_encoder() {
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
    // Start the encoder mode timer
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800264c:	213c      	movs	r1, #60	@ 0x3c
 800264e:	4803      	ldr	r0, [pc, #12]	@ (800265c <init_encoder+0x14>)
 8002650:	f003 fc72 	bl	8005f38 <HAL_TIM_Encoder_Start>
    reset_encoder_position();
 8002654:	f000 f812 	bl	800267c <reset_encoder_position>
}
 8002658:	bf00      	nop
 800265a:	bd80      	pop	{r7, pc}
 800265c:	20000584 	.word	0x20000584

08002660 <read_encoder_position>:

int16_t read_encoder_position() {
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
    return __HAL_TIM_GET_COUNTER(&htim2);  // Get the current encoder count
 8002664:	4b04      	ldr	r3, [pc, #16]	@ (8002678 <read_encoder_position+0x18>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266a:	b21b      	sxth	r3, r3
}
 800266c:	4618      	mov	r0, r3
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	20000584 	.word	0x20000584

0800267c <reset_encoder_position>:

void reset_encoder_position() {
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
    __HAL_TIM_SET_COUNTER(&htim2, 0);  // Reset the encoder count to zero
 8002680:	4b04      	ldr	r3, [pc, #16]	@ (8002694 <reset_encoder_position+0x18>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2200      	movs	r2, #0
 8002686:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002688:	bf00      	nop
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	20000584 	.word	0x20000584

08002698 <get_angle_degrees>:

float get_angle_degrees() {
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
    int16_t position = read_encoder_position();
 800269e:	f7ff ffdf 	bl	8002660 <read_encoder_position>
 80026a2:	4603      	mov	r3, r0
 80026a4:	80fb      	strh	r3, [r7, #6]
    gPosition = position;
 80026a6:	4a12      	ldr	r2, [pc, #72]	@ (80026f0 <get_angle_degrees+0x58>)
 80026a8:	88fb      	ldrh	r3, [r7, #6]
 80026aa:	8013      	strh	r3, [r2, #0]
    return (position * 360.0) / ENCODER_RESOLUTION;
 80026ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7fd ff67 	bl	8000584 <__aeabi_i2d>
 80026b6:	f04f 0200 	mov.w	r2, #0
 80026ba:	4b0e      	ldr	r3, [pc, #56]	@ (80026f4 <get_angle_degrees+0x5c>)
 80026bc:	f7fd ffcc 	bl	8000658 <__aeabi_dmul>
 80026c0:	4602      	mov	r2, r0
 80026c2:	460b      	mov	r3, r1
 80026c4:	4610      	mov	r0, r2
 80026c6:	4619      	mov	r1, r3
 80026c8:	f04f 0200 	mov.w	r2, #0
 80026cc:	4b0a      	ldr	r3, [pc, #40]	@ (80026f8 <get_angle_degrees+0x60>)
 80026ce:	f7fe f8ed 	bl	80008ac <__aeabi_ddiv>
 80026d2:	4602      	mov	r2, r0
 80026d4:	460b      	mov	r3, r1
 80026d6:	4610      	mov	r0, r2
 80026d8:	4619      	mov	r1, r3
 80026da:	f7fe fa9f 	bl	8000c1c <__aeabi_d2f>
 80026de:	4603      	mov	r3, r0
 80026e0:	ee07 3a90 	vmov	s15, r3
}
 80026e4:	eeb0 0a67 	vmov.f32	s0, s15
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	20000884 	.word	0x20000884
 80026f4:	40768000 	.word	0x40768000
 80026f8:	40a2c000 	.word	0x40a2c000

080026fc <update_wheel_position_and_velocity>:

void update_wheel_position_and_velocity(float *wheel_angle, float *angular_velocity) {
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
    // Get the current encoder count
    float current_angle = get_angle_degrees();
 8002706:	f7ff ffc7 	bl	8002698 <get_angle_degrees>
 800270a:	ed87 0a04 	vstr	s0, [r7, #16]

    // Calculate time difference (in seconds) since the last update
    uint32_t current_time = HAL_GetTick();  // In milliseconds
 800270e:	f001 fa25 	bl	8003b5c <HAL_GetTick>
 8002712:	60f8      	str	r0, [r7, #12]
    float dt = (current_time - last_update_time) / 1000.0f;  // Convert ms to seconds
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	ee07 3a90 	vmov	s15, r3
 800271a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800271e:	4b37      	ldr	r3, [pc, #220]	@ (80027fc <update_wheel_position_and_velocity+0x100>)
 8002720:	edd3 7a00 	vldr	s15, [r3]
 8002724:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002728:	eddf 6a35 	vldr	s13, [pc, #212]	@ 8002800 <update_wheel_position_and_velocity+0x104>
 800272c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002730:	edc7 7a02 	vstr	s15, [r7, #8]

    // Calculate the change in angle
    float delta_angle = current_angle - last_encoder_count;
 8002734:	4b33      	ldr	r3, [pc, #204]	@ (8002804 <update_wheel_position_and_velocity+0x108>)
 8002736:	edd3 7a00 	vldr	s15, [r3]
 800273a:	ed97 7a04 	vldr	s14, [r7, #16]
 800273e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002742:	edc7 7a05 	vstr	s15, [r7, #20]

    // Implement a threshold to ignore small changes
    if (fabs(delta_angle) < 0.25f) {  // Adjust the threshold as needed
 8002746:	edd7 7a05 	vldr	s15, [r7, #20]
 800274a:	eef0 7ae7 	vabs.f32	s15, s15
 800274e:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 8002752:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800275a:	d502      	bpl.n	8002762 <update_wheel_position_and_velocity+0x66>
        delta_angle = 0.0f;
 800275c:	f04f 0300 	mov.w	r3, #0
 8002760:	617b      	str	r3, [r7, #20]
    }

    // Update the wheel angle, keeping within the lock limit
    *wheel_angle += delta_angle;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	ed93 7a00 	vldr	s14, [r3]
 8002768:	edd7 7a05 	vldr	s15, [r7, #20]
 800276c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	edc3 7a00 	vstr	s15, [r3]
    if (*wheel_angle > WHEEL_MAX_ANGLE) *wheel_angle = WHEEL_MAX_ANGLE;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	edd3 7a00 	vldr	s15, [r3]
 800277c:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8002808 <update_wheel_position_and_velocity+0x10c>
 8002780:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002788:	dd02      	ble.n	8002790 <update_wheel_position_and_velocity+0x94>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a1f      	ldr	r2, [pc, #124]	@ (800280c <update_wheel_position_and_velocity+0x110>)
 800278e:	601a      	str	r2, [r3, #0]
    if (*wheel_angle < -WHEEL_MAX_ANGLE) *wheel_angle = -WHEEL_MAX_ANGLE;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	edd3 7a00 	vldr	s15, [r3]
 8002796:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8002810 <update_wheel_position_and_velocity+0x114>
 800279a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800279e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027a2:	d502      	bpl.n	80027aa <update_wheel_position_and_velocity+0xae>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a1b      	ldr	r2, [pc, #108]	@ (8002814 <update_wheel_position_and_velocity+0x118>)
 80027a8:	601a      	str	r2, [r3, #0]

    gDelta = delta_angle;
 80027aa:	4a1b      	ldr	r2, [pc, #108]	@ (8002818 <update_wheel_position_and_velocity+0x11c>)
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	6013      	str	r3, [r2, #0]
    // Calculate angular velocity (degrees per second)
    if (dt > 0.0001f) {  // Avoid division by zero
 80027b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80027b4:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800281c <update_wheel_position_and_velocity+0x120>
 80027b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027c0:	dd09      	ble.n	80027d6 <update_wheel_position_and_velocity+0xda>
        *angular_velocity = delta_angle / dt;
 80027c2:	edd7 6a05 	vldr	s13, [r7, #20]
 80027c6:	ed97 7a02 	vldr	s14, [r7, #8]
 80027ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	edc3 7a00 	vstr	s15, [r3]
 80027d4:	e003      	b.n	80027de <update_wheel_position_and_velocity+0xe2>
    } else {
        *angular_velocity = 0.0f;
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	f04f 0200 	mov.w	r2, #0
 80027dc:	601a      	str	r2, [r3, #0]
    }

    // Store the current values for the next update
    last_encoder_count = current_angle;
 80027de:	4a09      	ldr	r2, [pc, #36]	@ (8002804 <update_wheel_position_and_velocity+0x108>)
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	6013      	str	r3, [r2, #0]
    last_update_time = current_time;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	ee07 3a90 	vmov	s15, r3
 80027ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027ee:	4b03      	ldr	r3, [pc, #12]	@ (80027fc <update_wheel_position_and_velocity+0x100>)
 80027f0:	edc3 7a00 	vstr	s15, [r3]
}
 80027f4:	bf00      	nop
 80027f6:	3718      	adds	r7, #24
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	20000898 	.word	0x20000898
 8002800:	447a0000 	.word	0x447a0000
 8002804:	20000894 	.word	0x20000894
 8002808:	43e10000 	.word	0x43e10000
 800280c:	43e10000 	.word	0x43e10000
 8002810:	c3e10000 	.word	0xc3e10000
 8002814:	c3e10000 	.word	0xc3e10000
 8002818:	20000890 	.word	0x20000890
 800281c:	38d1b717 	.word	0x38d1b717

08002820 <set_motor_pwm>:


void set_motor_pwm(float pwm_value) {
 8002820:	b5b0      	push	{r4, r5, r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	ed87 0a01 	vstr	s0, [r7, #4]
    // Assuming pwm_value ranges from 0 to 255
    uint32_t pulse = (uint32_t)((pwm_value / 255.0) * htim3.Init.Period);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7fd febc 	bl	80005a8 <__aeabi_f2d>
 8002830:	a312      	add	r3, pc, #72	@ (adr r3, 800287c <set_motor_pwm+0x5c>)
 8002832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002836:	f7fe f839 	bl	80008ac <__aeabi_ddiv>
 800283a:	4602      	mov	r2, r0
 800283c:	460b      	mov	r3, r1
 800283e:	4614      	mov	r4, r2
 8002840:	461d      	mov	r5, r3
 8002842:	4b0d      	ldr	r3, [pc, #52]	@ (8002878 <set_motor_pwm+0x58>)
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	4618      	mov	r0, r3
 8002848:	f7fd fe8c 	bl	8000564 <__aeabi_ui2d>
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	4620      	mov	r0, r4
 8002852:	4629      	mov	r1, r5
 8002854:	f7fd ff00 	bl	8000658 <__aeabi_dmul>
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	4610      	mov	r0, r2
 800285e:	4619      	mov	r1, r3
 8002860:	f7fe f9bc 	bl	8000bdc <__aeabi_d2uiz>
 8002864:	4603      	mov	r3, r0
 8002866:	60fb      	str	r3, [r7, #12]

    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulse);
 8002868:	4b03      	ldr	r3, [pc, #12]	@ (8002878 <set_motor_pwm+0x58>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002870:	bf00      	nop
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	bdb0      	pop	{r4, r5, r7, pc}
 8002878:	200005cc 	.word	0x200005cc
 800287c:	00000000 	.word	0x00000000
 8002880:	406fe000 	.word	0x406fe000

08002884 <set_motor_direction>:

void set_motor_direction(uint8_t direction) {
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	4603      	mov	r3, r0
 800288c:	71fb      	strb	r3, [r7, #7]
    if (direction == 1) { // Forward
 800288e:	79fb      	ldrb	r3, [r7, #7]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d10a      	bne.n	80028aa <set_motor_direction+0x26>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);   // IN1 = HIGH
 8002894:	2201      	movs	r2, #1
 8002896:	2102      	movs	r1, #2
 8002898:	4812      	ldr	r0, [pc, #72]	@ (80028e4 <set_motor_direction+0x60>)
 800289a:	f001 ffe3 	bl	8004864 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); // IN2 = LOW
 800289e:	2200      	movs	r2, #0
 80028a0:	2104      	movs	r1, #4
 80028a2:	4810      	ldr	r0, [pc, #64]	@ (80028e4 <set_motor_direction+0x60>)
 80028a4:	f001 ffde 	bl	8004864 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);   // IN2 = HIGH
    } else { // Stop
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);   // IN1 = LOW
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);   // IN2 = LOW
    }
}
 80028a8:	e017      	b.n	80028da <set_motor_direction+0x56>
    } else if (direction == 0) { // Reverse
 80028aa:	79fb      	ldrb	r3, [r7, #7]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d10a      	bne.n	80028c6 <set_motor_direction+0x42>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // IN1 = LOW
 80028b0:	2200      	movs	r2, #0
 80028b2:	2102      	movs	r1, #2
 80028b4:	480b      	ldr	r0, [pc, #44]	@ (80028e4 <set_motor_direction+0x60>)
 80028b6:	f001 ffd5 	bl	8004864 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);   // IN2 = HIGH
 80028ba:	2201      	movs	r2, #1
 80028bc:	2104      	movs	r1, #4
 80028be:	4809      	ldr	r0, [pc, #36]	@ (80028e4 <set_motor_direction+0x60>)
 80028c0:	f001 ffd0 	bl	8004864 <HAL_GPIO_WritePin>
}
 80028c4:	e009      	b.n	80028da <set_motor_direction+0x56>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);   // IN1 = LOW
 80028c6:	2200      	movs	r2, #0
 80028c8:	2102      	movs	r1, #2
 80028ca:	4806      	ldr	r0, [pc, #24]	@ (80028e4 <set_motor_direction+0x60>)
 80028cc:	f001 ffca 	bl	8004864 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);   // IN2 = LOW
 80028d0:	2200      	movs	r2, #0
 80028d2:	2104      	movs	r1, #4
 80028d4:	4803      	ldr	r0, [pc, #12]	@ (80028e4 <set_motor_direction+0x60>)
 80028d6:	f001 ffc5 	bl	8004864 <HAL_GPIO_WritePin>
}
 80028da:	bf00      	nop
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	40020400 	.word	0x40020400

080028e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028e8:	b5b0      	push	{r4, r5, r7, lr}
 80028ea:	b0a6      	sub	sp, #152	@ 0x98
 80028ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028ee:	f001 f8ff 	bl	8003af0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028f2:	f000 f8c9 	bl	8002a88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028f6:	f000 fa6b 	bl	8002dd0 <MX_GPIO_Init>
  MX_DMA_Init();
 80028fa:	f000 fa49 	bl	8002d90 <MX_DMA_Init>
  MX_SPI2_Init();
 80028fe:	f000 f931 	bl	8002b64 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8002902:	f000 fa13 	bl	8002d2c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8002906:	f000 f963 	bl	8002bd0 <MX_TIM2_Init>
  MX_TIM3_Init();
 800290a:	f000 f9b5 	bl	8002c78 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  telemetry_data.tRpm = 0;
 800290e:	4b4f      	ldr	r3, [pc, #316]	@ (8002a4c <main+0x164>)
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]
  telemetry_data.tRpm = 0;
 8002914:	4b4d      	ldr	r3, [pc, #308]	@ (8002a4c <main+0x164>)
 8002916:	2200      	movs	r2, #0
 8002918:	601a      	str	r2, [r3, #0]
  telemetry_data.tSpeedKmh = 0;
 800291a:	4b4c      	ldr	r3, [pc, #304]	@ (8002a4c <main+0x164>)
 800291c:	2200      	movs	r2, #0
 800291e:	609a      	str	r2, [r3, #8]
  telemetry_data.tHasDRS = 0;
 8002920:	4b4a      	ldr	r3, [pc, #296]	@ (8002a4c <main+0x164>)
 8002922:	2200      	movs	r2, #0
 8002924:	60da      	str	r2, [r3, #12]
  telemetry_data.tDrs = 0;
 8002926:	4b49      	ldr	r3, [pc, #292]	@ (8002a4c <main+0x164>)
 8002928:	2200      	movs	r2, #0
 800292a:	611a      	str	r2, [r3, #16]
  telemetry_data.tPitLim = 0;
 800292c:	4b47      	ldr	r3, [pc, #284]	@ (8002a4c <main+0x164>)
 800292e:	2200      	movs	r2, #0
 8002930:	615a      	str	r2, [r3, #20]
  telemetry_data.tFuel = 0;
 8002932:	4b46      	ldr	r3, [pc, #280]	@ (8002a4c <main+0x164>)
 8002934:	2200      	movs	r2, #0
 8002936:	619a      	str	r2, [r3, #24]
  telemetry_data.tBrakeBias = 0;
 8002938:	4b44      	ldr	r3, [pc, #272]	@ (8002a4c <main+0x164>)
 800293a:	2200      	movs	r2, #0
 800293c:	61da      	str	r2, [r3, #28]
  gFfbSignal = 0;
 800293e:	4b44      	ldr	r3, [pc, #272]	@ (8002a50 <main+0x168>)
 8002940:	f04f 0200 	mov.w	r2, #0
 8002944:	601a      	str	r2, [r3, #0]
  memset(&telemetry_data, 0, sizeof(telemetry_packet)); // Zero-initialize
 8002946:	2220      	movs	r2, #32
 8002948:	2100      	movs	r1, #0
 800294a:	4840      	ldr	r0, [pc, #256]	@ (8002a4c <main+0x164>)
 800294c:	f008 ff31 	bl	800b7b2 <memset>
  init_encoder();
 8002950:	f7ff fe7a 	bl	8002648 <init_encoder>
  DWT_Init();
 8002954:	f7ff fcee 	bl	8002334 <DWT_Init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002958:	2100      	movs	r1, #0
 800295a:	483e      	ldr	r0, [pc, #248]	@ (8002a54 <main+0x16c>)
 800295c:	f003 f97e 	bl	8005c5c <HAL_TIM_PWM_Start>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of spiSendMutex */
  osSemaphoreDef(spiSendMutex);
 8002960:	2300      	movs	r3, #0
 8002962:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002966:	2300      	movs	r3, #0
 8002968:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  spiSendMutexHandle = osSemaphoreCreate(osSemaphore(spiSendMutex), 1);
 800296c:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8002970:	2101      	movs	r1, #1
 8002972:	4618      	mov	r0, r3
 8002974:	f005 f984 	bl	8007c80 <osSemaphoreCreate>
 8002978:	4603      	mov	r3, r0
 800297a:	4a37      	ldr	r2, [pc, #220]	@ (8002a58 <main+0x170>)
 800297c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800297e:	4b37      	ldr	r3, [pc, #220]	@ (8002a5c <main+0x174>)
 8002980:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 8002984:	461d      	mov	r5, r3
 8002986:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002988:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800298a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800298e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002992:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002996:	2100      	movs	r1, #0
 8002998:	4618      	mov	r0, r3
 800299a:	f005 f8d0 	bl	8007b3e <osThreadCreate>
 800299e:	4603      	mov	r3, r0
 80029a0:	4a2f      	ldr	r2, [pc, #188]	@ (8002a60 <main+0x178>)
 80029a2:	6013      	str	r3, [r2, #0]

  /* definition and creation of telemetryTask */
  osThreadDef(telemetryTask, StartTelemetryTask, osPriorityHigh, 0, 128);
 80029a4:	4b2f      	ldr	r3, [pc, #188]	@ (8002a64 <main+0x17c>)
 80029a6:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 80029aa:	461d      	mov	r5, r3
 80029ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80029b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  telemetryTaskHandle = osThreadCreate(osThread(telemetryTask), NULL);
 80029b8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80029bc:	2100      	movs	r1, #0
 80029be:	4618      	mov	r0, r3
 80029c0:	f005 f8bd 	bl	8007b3e <osThreadCreate>
 80029c4:	4603      	mov	r3, r0
 80029c6:	4a28      	ldr	r2, [pc, #160]	@ (8002a68 <main+0x180>)
 80029c8:	6013      	str	r3, [r2, #0]

  /* definition and creation of heartbeatTask */
  osThreadDef(heartbeatTask, StartHeartbeatTask, osPriorityLow, 0, 128);
 80029ca:	4b28      	ldr	r3, [pc, #160]	@ (8002a6c <main+0x184>)
 80029cc:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80029d0:	461d      	mov	r5, r3
 80029d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80029da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  heartbeatTaskHandle = osThreadCreate(osThread(heartbeatTask), NULL);
 80029de:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80029e2:	2100      	movs	r1, #0
 80029e4:	4618      	mov	r0, r3
 80029e6:	f005 f8aa 	bl	8007b3e <osThreadCreate>
 80029ea:	4603      	mov	r3, r0
 80029ec:	4a20      	ldr	r2, [pc, #128]	@ (8002a70 <main+0x188>)
 80029ee:	6013      	str	r3, [r2, #0]

  /* definition and creation of SPISendDataTask */
  osThreadDef(SPISendDataTask, StartSPISend, osPriorityHigh, 0, 128);
 80029f0:	4b20      	ldr	r3, [pc, #128]	@ (8002a74 <main+0x18c>)
 80029f2:	f107 0420 	add.w	r4, r7, #32
 80029f6:	461d      	mov	r5, r3
 80029f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002a00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SPISendDataTaskHandle = osThreadCreate(osThread(SPISendDataTask), NULL);
 8002a04:	f107 0320 	add.w	r3, r7, #32
 8002a08:	2100      	movs	r1, #0
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f005 f897 	bl	8007b3e <osThreadCreate>
 8002a10:	4603      	mov	r3, r0
 8002a12:	4a19      	ldr	r2, [pc, #100]	@ (8002a78 <main+0x190>)
 8002a14:	6013      	str	r3, [r2, #0]

  /* definition and creation of FFBTask */
  osThreadDef(FFBTask, StartFFBTask, osPriorityHigh, 0, 128);
 8002a16:	4b19      	ldr	r3, [pc, #100]	@ (8002a7c <main+0x194>)
 8002a18:	1d3c      	adds	r4, r7, #4
 8002a1a:	461d      	mov	r5, r3
 8002a1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a20:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002a24:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  FFBTaskHandle = osThreadCreate(osThread(FFBTask), NULL);
 8002a28:	1d3b      	adds	r3, r7, #4
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f005 f886 	bl	8007b3e <osThreadCreate>
 8002a32:	4603      	mov	r3, r0
 8002a34:	4a12      	ldr	r2, [pc, #72]	@ (8002a80 <main+0x198>)
 8002a36:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002a38:	f005 f87a 	bl	8007b30 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // Task creation
  // Start scheduler
  vTaskStartScheduler();
 8002a3c:	f006 f9fe 	bl	8008e3c <vTaskStartScheduler>
  send_response("STM Started");
 8002a40:	4810      	ldr	r0, [pc, #64]	@ (8002a84 <main+0x19c>)
 8002a42:	f7ff fc5d 	bl	8002300 <send_response>

  while (1)
 8002a46:	bf00      	nop
 8002a48:	e7fd      	b.n	8002a46 <main+0x15e>
 8002a4a:	bf00      	nop
 8002a4c:	200004ac 	.word	0x200004ac
 8002a50:	20000874 	.word	0x20000874
 8002a54:	200005cc 	.word	0x200005cc
 8002a58:	20000670 	.word	0x20000670
 8002a5c:	0800d86c 	.word	0x0800d86c
 8002a60:	2000065c 	.word	0x2000065c
 8002a64:	0800d898 	.word	0x0800d898
 8002a68:	20000660 	.word	0x20000660
 8002a6c:	0800d8c4 	.word	0x0800d8c4
 8002a70:	20000664 	.word	0x20000664
 8002a74:	0800d8f0 	.word	0x0800d8f0
 8002a78:	20000668 	.word	0x20000668
 8002a7c:	0800d914 	.word	0x0800d914
 8002a80:	2000066c 	.word	0x2000066c
 8002a84:	0800d854 	.word	0x0800d854

08002a88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b094      	sub	sp, #80	@ 0x50
 8002a8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a8e:	f107 031c 	add.w	r3, r7, #28
 8002a92:	2234      	movs	r2, #52	@ 0x34
 8002a94:	2100      	movs	r1, #0
 8002a96:	4618      	mov	r0, r3
 8002a98:	f008 fe8b 	bl	800b7b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a9c:	f107 0308 	add.w	r3, r7, #8
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	605a      	str	r2, [r3, #4]
 8002aa6:	609a      	str	r2, [r3, #8]
 8002aa8:	60da      	str	r2, [r3, #12]
 8002aaa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002aac:	2300      	movs	r3, #0
 8002aae:	607b      	str	r3, [r7, #4]
 8002ab0:	4b2a      	ldr	r3, [pc, #168]	@ (8002b5c <SystemClock_Config+0xd4>)
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab4:	4a29      	ldr	r2, [pc, #164]	@ (8002b5c <SystemClock_Config+0xd4>)
 8002ab6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002aba:	6413      	str	r3, [r2, #64]	@ 0x40
 8002abc:	4b27      	ldr	r3, [pc, #156]	@ (8002b5c <SystemClock_Config+0xd4>)
 8002abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ac4:	607b      	str	r3, [r7, #4]
 8002ac6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002ac8:	2300      	movs	r3, #0
 8002aca:	603b      	str	r3, [r7, #0]
 8002acc:	4b24      	ldr	r3, [pc, #144]	@ (8002b60 <SystemClock_Config+0xd8>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002ad4:	4a22      	ldr	r2, [pc, #136]	@ (8002b60 <SystemClock_Config+0xd8>)
 8002ad6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ada:	6013      	str	r3, [r2, #0]
 8002adc:	4b20      	ldr	r3, [pc, #128]	@ (8002b60 <SystemClock_Config+0xd8>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002ae4:	603b      	str	r3, [r7, #0]
 8002ae6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ae8:	2302      	movs	r3, #2
 8002aea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002aec:	2301      	movs	r3, #1
 8002aee:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002af0:	2310      	movs	r3, #16
 8002af2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002af4:	2302      	movs	r3, #2
 8002af6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002af8:	2300      	movs	r3, #0
 8002afa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002afc:	2310      	movs	r3, #16
 8002afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002b00:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002b04:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002b06:	2304      	movs	r3, #4
 8002b08:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002b0e:	2302      	movs	r3, #2
 8002b10:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b12:	f107 031c 	add.w	r3, r7, #28
 8002b16:	4618      	mov	r0, r3
 8002b18:	f002 fa3a 	bl	8004f90 <HAL_RCC_OscConfig>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002b22:	f000 fbcb 	bl	80032bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b26:	230f      	movs	r3, #15
 8002b28:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002b32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002b3c:	f107 0308 	add.w	r3, r7, #8
 8002b40:	2102      	movs	r1, #2
 8002b42:	4618      	mov	r0, r3
 8002b44:	f001 fea8 	bl	8004898 <HAL_RCC_ClockConfig>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8002b4e:	f000 fbb5 	bl	80032bc <Error_Handler>
  }
}
 8002b52:	bf00      	nop
 8002b54:	3750      	adds	r7, #80	@ 0x50
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	40023800 	.word	0x40023800
 8002b60:	40007000 	.word	0x40007000

08002b64 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002b68:	4b17      	ldr	r3, [pc, #92]	@ (8002bc8 <MX_SPI2_Init+0x64>)
 8002b6a:	4a18      	ldr	r2, [pc, #96]	@ (8002bcc <MX_SPI2_Init+0x68>)
 8002b6c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002b6e:	4b16      	ldr	r3, [pc, #88]	@ (8002bc8 <MX_SPI2_Init+0x64>)
 8002b70:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002b74:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002b76:	4b14      	ldr	r3, [pc, #80]	@ (8002bc8 <MX_SPI2_Init+0x64>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b7c:	4b12      	ldr	r3, [pc, #72]	@ (8002bc8 <MX_SPI2_Init+0x64>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b82:	4b11      	ldr	r3, [pc, #68]	@ (8002bc8 <MX_SPI2_Init+0x64>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b88:	4b0f      	ldr	r3, [pc, #60]	@ (8002bc8 <MX_SPI2_Init+0x64>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8002bc8 <MX_SPI2_Init+0x64>)
 8002b90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b94:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002b96:	4b0c      	ldr	r3, [pc, #48]	@ (8002bc8 <MX_SPI2_Init+0x64>)
 8002b98:	2228      	movs	r2, #40	@ 0x28
 8002b9a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8002bc8 <MX_SPI2_Init+0x64>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ba2:	4b09      	ldr	r3, [pc, #36]	@ (8002bc8 <MX_SPI2_Init+0x64>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ba8:	4b07      	ldr	r3, [pc, #28]	@ (8002bc8 <MX_SPI2_Init+0x64>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002bae:	4b06      	ldr	r3, [pc, #24]	@ (8002bc8 <MX_SPI2_Init+0x64>)
 8002bb0:	220a      	movs	r2, #10
 8002bb2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002bb4:	4804      	ldr	r0, [pc, #16]	@ (8002bc8 <MX_SPI2_Init+0x64>)
 8002bb6:	f002 fc89 	bl	80054cc <HAL_SPI_Init>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002bc0:	f000 fb7c 	bl	80032bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  //HAL_SPI_Transmit_DMA(&hspi2, buffer, sizeof(telemetry_packet));
  /* USER CODE END SPI2_Init 2 */

}
 8002bc4:	bf00      	nop
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	200004cc 	.word	0x200004cc
 8002bcc:	40003800 	.word	0x40003800

08002bd0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b08c      	sub	sp, #48	@ 0x30
 8002bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002bd6:	f107 030c 	add.w	r3, r7, #12
 8002bda:	2224      	movs	r2, #36	@ 0x24
 8002bdc:	2100      	movs	r1, #0
 8002bde:	4618      	mov	r0, r3
 8002be0:	f008 fde7 	bl	800b7b2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002be4:	1d3b      	adds	r3, r7, #4
 8002be6:	2200      	movs	r2, #0
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002bec:	4b21      	ldr	r3, [pc, #132]	@ (8002c74 <MX_TIM2_Init+0xa4>)
 8002bee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002bf2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002bf4:	4b1f      	ldr	r3, [pc, #124]	@ (8002c74 <MX_TIM2_Init+0xa4>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bfa:	4b1e      	ldr	r3, [pc, #120]	@ (8002c74 <MX_TIM2_Init+0xa4>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002c00:	4b1c      	ldr	r3, [pc, #112]	@ (8002c74 <MX_TIM2_Init+0xa4>)
 8002c02:	f04f 32ff 	mov.w	r2, #4294967295
 8002c06:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c08:	4b1a      	ldr	r3, [pc, #104]	@ (8002c74 <MX_TIM2_Init+0xa4>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c0e:	4b19      	ldr	r3, [pc, #100]	@ (8002c74 <MX_TIM2_Init+0xa4>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002c14:	2303      	movs	r3, #3
 8002c16:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002c20:	2300      	movs	r3, #0
 8002c22:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002c24:	2300      	movs	r3, #0
 8002c26:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002c30:	2300      	movs	r3, #0
 8002c32:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002c34:	2300      	movs	r3, #0
 8002c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002c38:	f107 030c 	add.w	r3, r7, #12
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	480d      	ldr	r0, [pc, #52]	@ (8002c74 <MX_TIM2_Init+0xa4>)
 8002c40:	f003 f8d4 	bl	8005dec <HAL_TIM_Encoder_Init>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002c4a:	f000 fb37 	bl	80032bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c52:	2300      	movs	r3, #0
 8002c54:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c56:	1d3b      	adds	r3, r7, #4
 8002c58:	4619      	mov	r1, r3
 8002c5a:	4806      	ldr	r0, [pc, #24]	@ (8002c74 <MX_TIM2_Init+0xa4>)
 8002c5c:	f003 fe56 	bl	800690c <HAL_TIMEx_MasterConfigSynchronization>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002c66:	f000 fb29 	bl	80032bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002c6a:	bf00      	nop
 8002c6c:	3730      	adds	r7, #48	@ 0x30
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	20000584 	.word	0x20000584

08002c78 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b08a      	sub	sp, #40	@ 0x28
 8002c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c7e:	f107 0320 	add.w	r3, r7, #32
 8002c82:	2200      	movs	r2, #0
 8002c84:	601a      	str	r2, [r3, #0]
 8002c86:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c88:	1d3b      	adds	r3, r7, #4
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	601a      	str	r2, [r3, #0]
 8002c8e:	605a      	str	r2, [r3, #4]
 8002c90:	609a      	str	r2, [r3, #8]
 8002c92:	60da      	str	r2, [r3, #12]
 8002c94:	611a      	str	r2, [r3, #16]
 8002c96:	615a      	str	r2, [r3, #20]
 8002c98:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002c9a:	4b22      	ldr	r3, [pc, #136]	@ (8002d24 <MX_TIM3_Init+0xac>)
 8002c9c:	4a22      	ldr	r2, [pc, #136]	@ (8002d28 <MX_TIM3_Init+0xb0>)
 8002c9e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84 -1;
 8002ca0:	4b20      	ldr	r3, [pc, #128]	@ (8002d24 <MX_TIM3_Init+0xac>)
 8002ca2:	2253      	movs	r2, #83	@ 0x53
 8002ca4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ca6:	4b1f      	ldr	r3, [pc, #124]	@ (8002d24 <MX_TIM3_Init+0xac>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000 - 1;
 8002cac:	4b1d      	ldr	r3, [pc, #116]	@ (8002d24 <MX_TIM3_Init+0xac>)
 8002cae:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002cb2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cb4:	4b1b      	ldr	r3, [pc, #108]	@ (8002d24 <MX_TIM3_Init+0xac>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cba:	4b1a      	ldr	r3, [pc, #104]	@ (8002d24 <MX_TIM3_Init+0xac>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002cc0:	4818      	ldr	r0, [pc, #96]	@ (8002d24 <MX_TIM3_Init+0xac>)
 8002cc2:	f002 ff7b 	bl	8005bbc <HAL_TIM_PWM_Init>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d001      	beq.n	8002cd0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002ccc:	f000 faf6 	bl	80032bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002cd8:	f107 0320 	add.w	r3, r7, #32
 8002cdc:	4619      	mov	r1, r3
 8002cde:	4811      	ldr	r0, [pc, #68]	@ (8002d24 <MX_TIM3_Init+0xac>)
 8002ce0:	f003 fe14 	bl	800690c <HAL_TIMEx_MasterConfigSynchronization>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002cea:	f000 fae7 	bl	80032bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cee:	2360      	movs	r3, #96	@ 0x60
 8002cf0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8002cf2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002cf6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d00:	1d3b      	adds	r3, r7, #4
 8002d02:	2200      	movs	r2, #0
 8002d04:	4619      	mov	r1, r3
 8002d06:	4807      	ldr	r0, [pc, #28]	@ (8002d24 <MX_TIM3_Init+0xac>)
 8002d08:	f003 fa94 	bl	8006234 <HAL_TIM_PWM_ConfigChannel>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8002d12:	f000 fad3 	bl	80032bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002d16:	4803      	ldr	r0, [pc, #12]	@ (8002d24 <MX_TIM3_Init+0xac>)
 8002d18:	f000 fc16 	bl	8003548 <HAL_TIM_MspPostInit>

}
 8002d1c:	bf00      	nop
 8002d1e:	3728      	adds	r7, #40	@ 0x28
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	200005cc 	.word	0x200005cc
 8002d28:	40000400 	.word	0x40000400

08002d2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002d30:	4b14      	ldr	r3, [pc, #80]	@ (8002d84 <MX_USART2_UART_Init+0x58>)
 8002d32:	4a15      	ldr	r2, [pc, #84]	@ (8002d88 <MX_USART2_UART_Init+0x5c>)
 8002d34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002d36:	4b13      	ldr	r3, [pc, #76]	@ (8002d84 <MX_USART2_UART_Init+0x58>)
 8002d38:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002d3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d3e:	4b11      	ldr	r3, [pc, #68]	@ (8002d84 <MX_USART2_UART_Init+0x58>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d44:	4b0f      	ldr	r3, [pc, #60]	@ (8002d84 <MX_USART2_UART_Init+0x58>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8002d84 <MX_USART2_UART_Init+0x58>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d50:	4b0c      	ldr	r3, [pc, #48]	@ (8002d84 <MX_USART2_UART_Init+0x58>)
 8002d52:	220c      	movs	r2, #12
 8002d54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d56:	4b0b      	ldr	r3, [pc, #44]	@ (8002d84 <MX_USART2_UART_Init+0x58>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d5c:	4b09      	ldr	r3, [pc, #36]	@ (8002d84 <MX_USART2_UART_Init+0x58>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d62:	4808      	ldr	r0, [pc, #32]	@ (8002d84 <MX_USART2_UART_Init+0x58>)
 8002d64:	f003 fe62 	bl	8006a2c <HAL_UART_Init>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002d6e:	f000 faa5 	bl	80032bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  HAL_UART_Receive_IT(&huart2, rx_buffer, sizeof(rx_buffer));
 8002d72:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d76:	4905      	ldr	r1, [pc, #20]	@ (8002d8c <MX_USART2_UART_Init+0x60>)
 8002d78:	4802      	ldr	r0, [pc, #8]	@ (8002d84 <MX_USART2_UART_Init+0x58>)
 8002d7a:	f003 ff32 	bl	8006be2 <HAL_UART_Receive_IT>
  /* USER CODE END USART2_Init 2 */

}
 8002d7e:	bf00      	nop
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	20000614 	.word	0x20000614
 8002d88:	40004400 	.word	0x40004400
 8002d8c:	20000674 	.word	0x20000674

08002d90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002d96:	2300      	movs	r3, #0
 8002d98:	607b      	str	r3, [r7, #4]
 8002d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8002dcc <MX_DMA_Init+0x3c>)
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d9e:	4a0b      	ldr	r2, [pc, #44]	@ (8002dcc <MX_DMA_Init+0x3c>)
 8002da0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002da4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002da6:	4b09      	ldr	r3, [pc, #36]	@ (8002dcc <MX_DMA_Init+0x3c>)
 8002da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002daa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dae:	607b      	str	r3, [r7, #4]
 8002db0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8002db2:	2200      	movs	r2, #0
 8002db4:	2105      	movs	r1, #5
 8002db6:	200f      	movs	r0, #15
 8002db8:	f000 ff94 	bl	8003ce4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002dbc:	200f      	movs	r0, #15
 8002dbe:	f000 ffad 	bl	8003d1c <HAL_NVIC_EnableIRQ>

}
 8002dc2:	bf00      	nop
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	40023800 	.word	0x40023800

08002dd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b08a      	sub	sp, #40	@ 0x28
 8002dd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd6:	f107 0314 	add.w	r3, r7, #20
 8002dda:	2200      	movs	r2, #0
 8002ddc:	601a      	str	r2, [r3, #0]
 8002dde:	605a      	str	r2, [r3, #4]
 8002de0:	609a      	str	r2, [r3, #8]
 8002de2:	60da      	str	r2, [r3, #12]
 8002de4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002de6:	2300      	movs	r3, #0
 8002de8:	613b      	str	r3, [r7, #16]
 8002dea:	4b37      	ldr	r3, [pc, #220]	@ (8002ec8 <MX_GPIO_Init+0xf8>)
 8002dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dee:	4a36      	ldr	r2, [pc, #216]	@ (8002ec8 <MX_GPIO_Init+0xf8>)
 8002df0:	f043 0304 	orr.w	r3, r3, #4
 8002df4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002df6:	4b34      	ldr	r3, [pc, #208]	@ (8002ec8 <MX_GPIO_Init+0xf8>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dfa:	f003 0304 	and.w	r3, r3, #4
 8002dfe:	613b      	str	r3, [r7, #16]
 8002e00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e02:	2300      	movs	r3, #0
 8002e04:	60fb      	str	r3, [r7, #12]
 8002e06:	4b30      	ldr	r3, [pc, #192]	@ (8002ec8 <MX_GPIO_Init+0xf8>)
 8002e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e0a:	4a2f      	ldr	r2, [pc, #188]	@ (8002ec8 <MX_GPIO_Init+0xf8>)
 8002e0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e10:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e12:	4b2d      	ldr	r3, [pc, #180]	@ (8002ec8 <MX_GPIO_Init+0xf8>)
 8002e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e1a:	60fb      	str	r3, [r7, #12]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e1e:	2300      	movs	r3, #0
 8002e20:	60bb      	str	r3, [r7, #8]
 8002e22:	4b29      	ldr	r3, [pc, #164]	@ (8002ec8 <MX_GPIO_Init+0xf8>)
 8002e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e26:	4a28      	ldr	r2, [pc, #160]	@ (8002ec8 <MX_GPIO_Init+0xf8>)
 8002e28:	f043 0301 	orr.w	r3, r3, #1
 8002e2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e2e:	4b26      	ldr	r3, [pc, #152]	@ (8002ec8 <MX_GPIO_Init+0xf8>)
 8002e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	60bb      	str	r3, [r7, #8]
 8002e38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	607b      	str	r3, [r7, #4]
 8002e3e:	4b22      	ldr	r3, [pc, #136]	@ (8002ec8 <MX_GPIO_Init+0xf8>)
 8002e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e42:	4a21      	ldr	r2, [pc, #132]	@ (8002ec8 <MX_GPIO_Init+0xf8>)
 8002e44:	f043 0302 	orr.w	r3, r3, #2
 8002e48:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e4a:	4b1f      	ldr	r3, [pc, #124]	@ (8002ec8 <MX_GPIO_Init+0xf8>)
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	607b      	str	r3, [r7, #4]
 8002e54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8002e56:	2200      	movs	r2, #0
 8002e58:	2130      	movs	r1, #48	@ 0x30
 8002e5a:	481c      	ldr	r0, [pc, #112]	@ (8002ecc <MX_GPIO_Init+0xfc>)
 8002e5c:	f001 fd02 	bl	8004864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8002e60:	2200      	movs	r2, #0
 8002e62:	2106      	movs	r1, #6
 8002e64:	481a      	ldr	r0, [pc, #104]	@ (8002ed0 <MX_GPIO_Init+0x100>)
 8002e66:	f001 fcfd 	bl	8004864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002e6a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002e70:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002e74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e76:	2300      	movs	r3, #0
 8002e78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002e7a:	f107 0314 	add.w	r3, r7, #20
 8002e7e:	4619      	mov	r1, r3
 8002e80:	4814      	ldr	r0, [pc, #80]	@ (8002ed4 <MX_GPIO_Init+0x104>)
 8002e82:	f001 fb5b 	bl	800453c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 8002e86:	2330      	movs	r3, #48	@ 0x30
 8002e88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e92:	2300      	movs	r3, #0
 8002e94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e96:	f107 0314 	add.w	r3, r7, #20
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	480b      	ldr	r0, [pc, #44]	@ (8002ecc <MX_GPIO_Init+0xfc>)
 8002e9e:	f001 fb4d 	bl	800453c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8002ea2:	2306      	movs	r3, #6
 8002ea4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eb2:	f107 0314 	add.w	r3, r7, #20
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	4805      	ldr	r0, [pc, #20]	@ (8002ed0 <MX_GPIO_Init+0x100>)
 8002eba:	f001 fb3f 	bl	800453c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002ebe:	bf00      	nop
 8002ec0:	3728      	adds	r7, #40	@ 0x28
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	40020000 	.word	0x40020000
 8002ed0:	40020400 	.word	0x40020400
 8002ed4:	40020800 	.word	0x40020800

08002ed8 <HAL_SPI_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
    // Pull CS line high to deselect the slave
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	2110      	movs	r1, #16
 8002ee4:	4807      	ldr	r0, [pc, #28]	@ (8002f04 <HAL_SPI_TxCpltCallback+0x2c>)
 8002ee6:	f001 fcbd 	bl	8004864 <HAL_GPIO_WritePin>
    DWT_Delay_us(2);
 8002eea:	2002      	movs	r0, #2
 8002eec:	f7ff fa42 	bl	8002374 <DWT_Delay_us>
    osSemaphoreRelease(spiSendMutexHandle);
 8002ef0:	4b05      	ldr	r3, [pc, #20]	@ (8002f08 <HAL_SPI_TxCpltCallback+0x30>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f004 ff43 	bl	8007d80 <osSemaphoreRelease>
}
 8002efa:	bf00      	nop
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	40020000 	.word	0x40020000
 8002f08:	20000670 	.word	0x20000670

08002f0c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a0d      	ldr	r2, [pc, #52]	@ (8002f50 <HAL_UART_RxCpltCallback+0x44>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d114      	bne.n	8002f48 <HAL_UART_RxCpltCallback+0x3c>
        // Process the received data (rx_buffer)
        memcpy(gCommandData, rx_buffer, sizeof(rx_buffer));
 8002f1e:	4a0d      	ldr	r2, [pc, #52]	@ (8002f54 <HAL_UART_RxCpltCallback+0x48>)
 8002f20:	4b0d      	ldr	r3, [pc, #52]	@ (8002f58 <HAL_UART_RxCpltCallback+0x4c>)
 8002f22:	4610      	mov	r0, r2
 8002f24:	4619      	mov	r1, r3
 8002f26:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	f008 fd35 	bl	800b99a <memcpy>
        // Notify the telemetry task to process the command
        osSignalSet(telemetryTaskHandle, 0x01);  // Set signal for telemetry task
 8002f30:	4b0a      	ldr	r3, [pc, #40]	@ (8002f5c <HAL_UART_RxCpltCallback+0x50>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2101      	movs	r1, #1
 8002f36:	4618      	mov	r0, r3
 8002f38:	f004 fe62 	bl	8007c00 <osSignalSet>
        // Clear the buffer for the next message
        memset(rx_buffer, 0, BUFFER_SIZE);
 8002f3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002f40:	2100      	movs	r1, #0
 8002f42:	4805      	ldr	r0, [pc, #20]	@ (8002f58 <HAL_UART_RxCpltCallback+0x4c>)
 8002f44:	f008 fc35 	bl	800b7b2 <memset>
    }
}
 8002f48:	bf00      	nop
 8002f4a:	3708      	adds	r7, #8
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	40004400 	.word	0x40004400
 8002f54:	20000774 	.word	0x20000774
 8002f58:	20000674 	.word	0x20000674
 8002f5c:	20000660 	.word	0x20000660

08002f60 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
    uint32_t error_code = HAL_UART_GetError(huart);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f004 f907 	bl	800717c <HAL_UART_GetError>
 8002f6e:	60f8      	str	r0, [r7, #12]

    // Identify which UART instance is causing the error (USART2 in this case)
    if (huart->Instance == USART2) {
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a1a      	ldr	r2, [pc, #104]	@ (8002fe0 <HAL_UART_ErrorCallback+0x80>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d12d      	bne.n	8002fd6 <HAL_UART_ErrorCallback+0x76>

        // Handle Overrun Error (ORE)
        if (error_code & HAL_UART_ERROR_ORE) {
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f003 0308 	and.w	r3, r3, #8
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00a      	beq.n	8002f9a <HAL_UART_ErrorCallback+0x3a>
            __HAL_UART_CLEAR_OREFLAG(huart);  // Clear overrun error flag
 8002f84:	2300      	movs	r3, #0
 8002f86:	60bb      	str	r3, [r7, #8]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	60bb      	str	r3, [r7, #8]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	60bb      	str	r3, [r7, #8]
 8002f98:	68bb      	ldr	r3, [r7, #8]
            // Optionally log or handle the error
            //send_response("UART Overrun Error");
        }

        // Handle Framing Error (FE)
        if (error_code & HAL_UART_ERROR_FE) {
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f003 0304 	and.w	r3, r3, #4
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d002      	beq.n	8002faa <HAL_UART_ErrorCallback+0x4a>
            // Clear framing error flag automatically by reading the status register
        	send_response("UART Framing Error");
 8002fa4:	480f      	ldr	r0, [pc, #60]	@ (8002fe4 <HAL_UART_ErrorCallback+0x84>)
 8002fa6:	f7ff f9ab 	bl	8002300 <send_response>
        }

        // Handle Parity Error (PE)
        if (error_code & HAL_UART_ERROR_PE) {
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f003 0301 	and.w	r3, r3, #1
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d002      	beq.n	8002fba <HAL_UART_ErrorCallback+0x5a>
            // Parity errors may indicate data corruption or mismatch in settings
        	send_response("UART Parity Error");
 8002fb4:	480c      	ldr	r0, [pc, #48]	@ (8002fe8 <HAL_UART_ErrorCallback+0x88>)
 8002fb6:	f7ff f9a3 	bl	8002300 <send_response>
        }

        // Handle Noise Error (NE)
        if (error_code & HAL_UART_ERROR_NE) {
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d002      	beq.n	8002fca <HAL_UART_ErrorCallback+0x6a>
            // Noise errors are usually transient but worth logging
        	send_response("UART Noise Error");
 8002fc4:	4809      	ldr	r0, [pc, #36]	@ (8002fec <HAL_UART_ErrorCallback+0x8c>)
 8002fc6:	f7ff f99b 	bl	8002300 <send_response>
        }

        // Recovery: Restart UART reception after clearing the error flags
        HAL_UART_Receive_IT(huart, rx_buffer, sizeof(rx_buffer));
 8002fca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002fce:	4908      	ldr	r1, [pc, #32]	@ (8002ff0 <HAL_UART_ErrorCallback+0x90>)
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f003 fe06 	bl	8006be2 <HAL_UART_Receive_IT>
    }
}
 8002fd6:	bf00      	nop
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	40004400 	.word	0x40004400
 8002fe4:	0800d930 	.word	0x0800d930
 8002fe8:	0800d944 	.word	0x0800d944
 8002fec:	0800d958 	.word	0x0800d958
 8002ff0:	20000674 	.word	0x20000674

08002ff4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

  for(;;)
 8002ffc:	bf00      	nop
 8002ffe:	e7fd      	b.n	8002ffc <StartDefaultTask+0x8>

08003000 <StartTelemetryTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTelemetryTask */
void StartTelemetryTask(void const * argument)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTelemetryTask */
  /* Infinite loop */
  for(;;)
  {
	// Wait for notification from UART callback
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8003008:	f04f 31ff 	mov.w	r1, #4294967295
 800300c:	2001      	movs	r0, #1
 800300e:	f006 fcf5 	bl	80099fc <ulTaskNotifyTake>
	// Process the command received via UART
	process_command(gCommandData);
 8003012:	4808      	ldr	r0, [pc, #32]	@ (8003034 <StartTelemetryTask+0x34>)
 8003014:	f7ff f8b6 	bl	8002184 <process_command>

	// Introduce a delay if necessary
	vTaskDelay(pdMS_TO_TICKS(100)); // Adjust delay as needed
 8003018:	2064      	movs	r0, #100	@ 0x64
 800301a:	f005 fed9 	bl	8008dd0 <vTaskDelay>
	// Re-enable UART reception
	HAL_UART_Receive_IT(&huart2, rx_buffer, sizeof(rx_buffer));
 800301e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003022:	4905      	ldr	r1, [pc, #20]	@ (8003038 <StartTelemetryTask+0x38>)
 8003024:	4805      	ldr	r0, [pc, #20]	@ (800303c <StartTelemetryTask+0x3c>)
 8003026:	f003 fddc 	bl	8006be2 <HAL_UART_Receive_IT>

	osDelay(1);
 800302a:	2001      	movs	r0, #1
 800302c:	f004 fdd3 	bl	8007bd6 <osDelay>
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8003030:	bf00      	nop
 8003032:	e7e9      	b.n	8003008 <StartTelemetryTask+0x8>
 8003034:	20000774 	.word	0x20000774
 8003038:	20000674 	.word	0x20000674
 800303c:	20000614 	.word	0x20000614

08003040 <StartHeartbeatTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartHeartbeatTask */
void StartHeartbeatTask(void const * argument)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHeartbeatTask */
  /* Infinite loop */
  for(;;)
  {
	// Perform actions based on telemetry data
	if (telemetry_data.tRpm >= 7000) {
 8003048:	4b0a      	ldr	r3, [pc, #40]	@ (8003074 <StartHeartbeatTask+0x34>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f641 3257 	movw	r2, #6999	@ 0x1b57
 8003050:	4293      	cmp	r3, r2
 8003052:	dd05      	ble.n	8003060 <StartHeartbeatTask+0x20>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8003054:	2201      	movs	r2, #1
 8003056:	2120      	movs	r1, #32
 8003058:	4807      	ldr	r0, [pc, #28]	@ (8003078 <StartHeartbeatTask+0x38>)
 800305a:	f001 fc03 	bl	8004864 <HAL_GPIO_WritePin>
 800305e:	e004      	b.n	800306a <StartHeartbeatTask+0x2a>
	} else {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8003060:	2200      	movs	r2, #0
 8003062:	2120      	movs	r1, #32
 8003064:	4804      	ldr	r0, [pc, #16]	@ (8003078 <StartHeartbeatTask+0x38>)
 8003066:	f001 fbfd 	bl	8004864 <HAL_GPIO_WritePin>
	}
    osDelay(1);
 800306a:	2001      	movs	r0, #1
 800306c:	f004 fdb3 	bl	8007bd6 <osDelay>
	if (telemetry_data.tRpm >= 7000) {
 8003070:	e7ea      	b.n	8003048 <StartHeartbeatTask+0x8>
 8003072:	bf00      	nop
 8003074:	200004ac 	.word	0x200004ac
 8003078:	40020000 	.word	0x40020000

0800307c <StartSPISend>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSPISend */
void StartSPISend(void const * argument)
{
 800307c:	b5b0      	push	{r4, r5, r7, lr}
 800307e:	b094      	sub	sp, #80	@ 0x50
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSPISend */
  /* Infinite loop */

  while(1)
  {
	  if (osSemaphoreWait(spiSendMutexHandle, osWaitForever) == osOK)
 8003084:	4b1b      	ldr	r3, [pc, #108]	@ (80030f4 <StartSPISend+0x78>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f04f 31ff 	mov.w	r1, #4294967295
 800308c:	4618      	mov	r0, r3
 800308e:	f004 fe29 	bl	8007ce4 <osSemaphoreWait>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d129      	bne.n	80030ec <StartSPISend+0x70>
	  {
		HAL_StatusTypeDef status;
		uint8_t buffer[sizeof(telemetry_packet)];
		telemetry_packet dataToSend = {3600, 1, 120, 0, 0, 0, 45, 0}; // DEBUG DATA
 8003098:	4b17      	ldr	r3, [pc, #92]	@ (80030f8 <StartSPISend+0x7c>)
 800309a:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 800309e:	461d      	mov	r5, r3
 80030a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030a4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80030a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		memcpy(&buffer, (uint8_t*)&telemetry_data, sizeof(telemetry_packet));
 80030ac:	4b13      	ldr	r3, [pc, #76]	@ (80030fc <StartSPISend+0x80>)
 80030ae:	f107 040c 	add.w	r4, r7, #12
 80030b2:	461d      	mov	r5, r3
 80030b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030b8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80030bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // Set NSS low
 80030c0:	2200      	movs	r2, #0
 80030c2:	2110      	movs	r1, #16
 80030c4:	480e      	ldr	r0, [pc, #56]	@ (8003100 <StartSPISend+0x84>)
 80030c6:	f001 fbcd 	bl	8004864 <HAL_GPIO_WritePin>

		status = HAL_SPI_Transmit_DMA(&hspi2, (uint8_t*)&dataToSend, sizeof(telemetry_packet)); // DEBUG DATA
 80030ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80030ce:	2220      	movs	r2, #32
 80030d0:	4619      	mov	r1, r3
 80030d2:	480c      	ldr	r0, [pc, #48]	@ (8003104 <StartSPISend+0x88>)
 80030d4:	f002 fa84 	bl	80055e0 <HAL_SPI_Transmit_DMA>
 80030d8:	4603      	mov	r3, r0
 80030da:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

		//uint8_t testData[4] = {0xAA, 0xBB, 0xCC, 0xDD}; // tRpm = 3600 in little-endian
		//HAL_SPI_Transmit_DMA(&hspi2, &testData, sizeof(testData));

		// Check for errors
		if (status != HAL_OK) {
 80030de:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d002      	beq.n	80030ec <StartSPISend+0x70>
			send_response("SPI Transmission Error");
 80030e6:	4808      	ldr	r0, [pc, #32]	@ (8003108 <StartSPISend+0x8c>)
 80030e8:	f7ff f90a 	bl	8002300 <send_response>
		}
		// Wait for transmission to complete (optional but safer)
	  }
	 osDelay(50);
 80030ec:	2032      	movs	r0, #50	@ 0x32
 80030ee:	f004 fd72 	bl	8007bd6 <osDelay>
	  if (osSemaphoreWait(spiSendMutexHandle, osWaitForever) == osOK)
 80030f2:	e7c7      	b.n	8003084 <StartSPISend+0x8>
 80030f4:	20000670 	.word	0x20000670
 80030f8:	0800d984 	.word	0x0800d984
 80030fc:	200004ac 	.word	0x200004ac
 8003100:	40020000 	.word	0x40020000
 8003104:	200004cc 	.word	0x200004cc
 8003108:	0800d96c 	.word	0x0800d96c

0800310c <StartFFBTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFFBTask */
void StartFFBTask(void const * argument)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b08e      	sub	sp, #56	@ 0x38
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartFFBTask */
  /* Infinite loop */
  for(;;)
  {
	  float total_force = 0.0;
 8003114:	f04f 0300 	mov.w	r3, #0
 8003118:	637b      	str	r3, [r7, #52]	@ 0x34
	  const float Kp = 1.0f;
 800311a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800311e:	633b      	str	r3, [r7, #48]	@ 0x30

	  for (;;) {
		  // Step 1: Retrieve current force feedback signal (e.g., from game data).
		  float force_feedback_signal = gFfbSignal;
 8003120:	4b53      	ldr	r3, [pc, #332]	@ (8003270 <StartFFBTask+0x164>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	62fb      	str	r3, [r7, #44]	@ 0x2c

		  // Step 2: Calculate individual forces based on physics:
		  float inertia_force = calculate_inertia(force_feedback_signal, angular_velocity);
 8003126:	4b53      	ldr	r3, [pc, #332]	@ (8003274 <StartFFBTask+0x168>)
 8003128:	edd3 7a00 	vldr	s15, [r3]
 800312c:	eef0 0a67 	vmov.f32	s1, s15
 8003130:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8003134:	f7ff f96e 	bl	8002414 <calculate_inertia>
 8003138:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
		  float damping_force = calculate_damping(angular_velocity);
 800313c:	4b4d      	ldr	r3, [pc, #308]	@ (8003274 <StartFFBTask+0x168>)
 800313e:	edd3 7a00 	vldr	s15, [r3]
 8003142:	eeb0 0a67 	vmov.f32	s0, s15
 8003146:	f7ff f995 	bl	8002474 <calculate_damping>
 800314a:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
		  float friction_force = calculate_friction(angular_velocity);
 800314e:	4b49      	ldr	r3, [pc, #292]	@ (8003274 <StartFFBTask+0x168>)
 8003150:	edd3 7a00 	vldr	s15, [r3]
 8003154:	eeb0 0a67 	vmov.f32	s0, s15
 8003158:	f7ff f9a4 	bl	80024a4 <calculate_friction>
 800315c:	ed87 0a08 	vstr	s0, [r7, #32]
		  float lock_force = calculate_lock(wheel_angle);
 8003160:	4b45      	ldr	r3, [pc, #276]	@ (8003278 <StartFFBTask+0x16c>)
 8003162:	edd3 7a00 	vldr	s15, [r3]
 8003166:	eeb0 0a67 	vmov.f32	s0, s15
 800316a:	f7ff f9c5 	bl	80024f8 <calculate_lock>
 800316e:	ed87 0a07 	vstr	s0, [r7, #28]

		  // Step 3: Sum all forces and scale to PWM range:
		  total_force = force_feedback_signal + inertia_force + damping_force + friction_force + lock_force;
 8003172:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003176:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800317a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800317e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003182:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003186:	edd7 7a08 	vldr	s15, [r7, #32]
 800318a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800318e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003192:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003196:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

		  // Strength gain
		  total_force *= gStrength;
 800319a:	4b38      	ldr	r3, [pc, #224]	@ (800327c <StartFFBTask+0x170>)
 800319c:	edd3 7a00 	vldr	s15, [r3]
 80031a0:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80031a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031a8:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

		  total_force = constrain(total_force, -1.0, 1.0);
 80031ac:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 80031b0:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 80031b4:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 80031b8:	f7ff f902 	bl	80023c0 <constrain>
 80031bc:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34

		  // Deadband
		  const float FORCE_DEADBAND_THRESHOLD = 0.05f; // Adjust as needed
 80031c0:	4b2f      	ldr	r3, [pc, #188]	@ (8003280 <StartFFBTask+0x174>)
 80031c2:	61bb      	str	r3, [r7, #24]
		  const float ANGLE_DEADBAND_THRESHOLD = 50.0f; // Adjust as needed
 80031c4:	4b2f      	ldr	r3, [pc, #188]	@ (8003284 <StartFFBTask+0x178>)
 80031c6:	617b      	str	r3, [r7, #20]
		  float error = wheel_angle;
 80031c8:	4b2b      	ldr	r3, [pc, #172]	@ (8003278 <StartFFBTask+0x16c>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	613b      	str	r3, [r7, #16]
		  if (fabsf(error) < ANGLE_DEADBAND_THRESHOLD)  {
 80031ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80031d2:	eef0 7ae7 	vabs.f32	s15, s15
 80031d6:	ed97 7a05 	vldr	s14, [r7, #20]
 80031da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031e2:	dd03      	ble.n	80031ec <StartFFBTask+0xe0>
			  total_force = 0.0f;
 80031e4:	f04f 0300 	mov.w	r3, #0
 80031e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80031ea:	e017      	b.n	800321c <StartFFBTask+0x110>
		  } else { // TEST CODE: gives increasing feedback farther away from center
			  total_force = -Kp * (error / WHEEL_MAX_ANGLE);
 80031ec:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80031f0:	eeb1 7a67 	vneg.f32	s14, s15
 80031f4:	edd7 6a04 	vldr	s13, [r7, #16]
 80031f8:	ed9f 6a23 	vldr	s12, [pc, #140]	@ 8003288 <StartFFBTask+0x17c>
 80031fc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003200:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003204:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
			  total_force = constrain(total_force, -1.0f, 1.0f);
 8003208:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 800320c:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 8003210:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 8003214:	f7ff f8d4 	bl	80023c0 <constrain>
 8003218:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
		  }

		  // Step 4: Map total_force to PWM and determine direction
		  float pwm_output = scale_to_pwm(total_force);
 800321c:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 8003220:	f7ff f9b0 	bl	8002584 <scale_to_pwm>
 8003224:	ed87 0a03 	vstr	s0, [r7, #12]
		  // 0 is negative direction; 1 is positive direction
		  uint8_t motor_direction = (total_force >= 0) ? 1 : 0;
 8003228:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800322c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003234:	bfac      	ite	ge
 8003236:	2301      	movge	r3, #1
 8003238:	2300      	movlt	r3, #0
 800323a:	b2db      	uxtb	r3, r3
 800323c:	72fb      	strb	r3, [r7, #11]

		  // Debug
		  gDir = motor_direction;
 800323e:	4a13      	ldr	r2, [pc, #76]	@ (800328c <StartFFBTask+0x180>)
 8003240:	7afb      	ldrb	r3, [r7, #11]
 8003242:	7013      	strb	r3, [r2, #0]
		  gTotalforce = total_force;
 8003244:	4a12      	ldr	r2, [pc, #72]	@ (8003290 <StartFFBTask+0x184>)
 8003246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003248:	6013      	str	r3, [r2, #0]
		  gPWMConst = pwm_output;
 800324a:	4a12      	ldr	r2, [pc, #72]	@ (8003294 <StartFFBTask+0x188>)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6013      	str	r3, [r2, #0]

		  // Step 5: Send PWM signal to H-bridge for motor control:
		  set_motor_direction(motor_direction);
 8003250:	7afb      	ldrb	r3, [r7, #11]
 8003252:	4618      	mov	r0, r3
 8003254:	f7ff fb16 	bl	8002884 <set_motor_direction>
		  set_motor_pwm(pwm_output);
 8003258:	ed97 0a03 	vldr	s0, [r7, #12]
 800325c:	f7ff fae0 	bl	8002820 <set_motor_pwm>

		  // Step 6: Update wheel position and velocity for next loop:
		  update_wheel_position_and_velocity(&wheel_angle, &angular_velocity);
 8003260:	4904      	ldr	r1, [pc, #16]	@ (8003274 <StartFFBTask+0x168>)
 8003262:	4805      	ldr	r0, [pc, #20]	@ (8003278 <StartFFBTask+0x16c>)
 8003264:	f7ff fa4a 	bl	80026fc <update_wheel_position_and_velocity>

		  // Run this task periodically (every 10ms):
		  osDelay(10);
 8003268:	200a      	movs	r0, #10
 800326a:	f004 fcb4 	bl	8007bd6 <osDelay>
	  for (;;) {
 800326e:	e757      	b.n	8003120 <StartFFBTask+0x14>
 8003270:	20000874 	.word	0x20000874
 8003274:	2000088c 	.word	0x2000088c
 8003278:	20000888 	.word	0x20000888
 800327c:	2000000c 	.word	0x2000000c
 8003280:	3d4ccccd 	.word	0x3d4ccccd
 8003284:	42480000 	.word	0x42480000
 8003288:	43e10000 	.word	0x43e10000
 800328c:	20000886 	.word	0x20000886
 8003290:	20000880 	.word	0x20000880
 8003294:	2000087c 	.word	0x2000087c

08003298 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a04      	ldr	r2, [pc, #16]	@ (80032b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d101      	bne.n	80032ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80032aa:	f000 fc43 	bl	8003b34 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80032ae:	bf00      	nop
 80032b0:	3708      	adds	r7, #8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	40001000 	.word	0x40001000

080032bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80032c0:	b672      	cpsid	i
}
 80032c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80032c4:	bf00      	nop
 80032c6:	e7fd      	b.n	80032c4 <Error_Handler+0x8>

080032c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ce:	2300      	movs	r3, #0
 80032d0:	607b      	str	r3, [r7, #4]
 80032d2:	4b12      	ldr	r3, [pc, #72]	@ (800331c <HAL_MspInit+0x54>)
 80032d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032d6:	4a11      	ldr	r2, [pc, #68]	@ (800331c <HAL_MspInit+0x54>)
 80032d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80032de:	4b0f      	ldr	r3, [pc, #60]	@ (800331c <HAL_MspInit+0x54>)
 80032e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032e6:	607b      	str	r3, [r7, #4]
 80032e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032ea:	2300      	movs	r3, #0
 80032ec:	603b      	str	r3, [r7, #0]
 80032ee:	4b0b      	ldr	r3, [pc, #44]	@ (800331c <HAL_MspInit+0x54>)
 80032f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f2:	4a0a      	ldr	r2, [pc, #40]	@ (800331c <HAL_MspInit+0x54>)
 80032f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80032fa:	4b08      	ldr	r3, [pc, #32]	@ (800331c <HAL_MspInit+0x54>)
 80032fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003302:	603b      	str	r3, [r7, #0]
 8003304:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003306:	2200      	movs	r2, #0
 8003308:	210f      	movs	r1, #15
 800330a:	f06f 0001 	mvn.w	r0, #1
 800330e:	f000 fce9 	bl	8003ce4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003312:	bf00      	nop
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	40023800 	.word	0x40023800

08003320 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b08a      	sub	sp, #40	@ 0x28
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003328:	f107 0314 	add.w	r3, r7, #20
 800332c:	2200      	movs	r2, #0
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	605a      	str	r2, [r3, #4]
 8003332:	609a      	str	r2, [r3, #8]
 8003334:	60da      	str	r2, [r3, #12]
 8003336:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a48      	ldr	r2, [pc, #288]	@ (8003460 <HAL_SPI_MspInit+0x140>)
 800333e:	4293      	cmp	r3, r2
 8003340:	f040 8089 	bne.w	8003456 <HAL_SPI_MspInit+0x136>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003344:	2300      	movs	r3, #0
 8003346:	613b      	str	r3, [r7, #16]
 8003348:	4b46      	ldr	r3, [pc, #280]	@ (8003464 <HAL_SPI_MspInit+0x144>)
 800334a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334c:	4a45      	ldr	r2, [pc, #276]	@ (8003464 <HAL_SPI_MspInit+0x144>)
 800334e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003352:	6413      	str	r3, [r2, #64]	@ 0x40
 8003354:	4b43      	ldr	r3, [pc, #268]	@ (8003464 <HAL_SPI_MspInit+0x144>)
 8003356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003358:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800335c:	613b      	str	r3, [r7, #16]
 800335e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003360:	2300      	movs	r3, #0
 8003362:	60fb      	str	r3, [r7, #12]
 8003364:	4b3f      	ldr	r3, [pc, #252]	@ (8003464 <HAL_SPI_MspInit+0x144>)
 8003366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003368:	4a3e      	ldr	r2, [pc, #248]	@ (8003464 <HAL_SPI_MspInit+0x144>)
 800336a:	f043 0304 	orr.w	r3, r3, #4
 800336e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003370:	4b3c      	ldr	r3, [pc, #240]	@ (8003464 <HAL_SPI_MspInit+0x144>)
 8003372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	60fb      	str	r3, [r7, #12]
 800337a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800337c:	2300      	movs	r3, #0
 800337e:	60bb      	str	r3, [r7, #8]
 8003380:	4b38      	ldr	r3, [pc, #224]	@ (8003464 <HAL_SPI_MspInit+0x144>)
 8003382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003384:	4a37      	ldr	r2, [pc, #220]	@ (8003464 <HAL_SPI_MspInit+0x144>)
 8003386:	f043 0301 	orr.w	r3, r3, #1
 800338a:	6313      	str	r3, [r2, #48]	@ 0x30
 800338c:	4b35      	ldr	r3, [pc, #212]	@ (8003464 <HAL_SPI_MspInit+0x144>)
 800338e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	60bb      	str	r3, [r7, #8]
 8003396:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PA9     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003398:	2302      	movs	r3, #2
 800339a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800339c:	2302      	movs	r3, #2
 800339e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a0:	2300      	movs	r3, #0
 80033a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033a4:	2303      	movs	r3, #3
 80033a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80033a8:	2307      	movs	r3, #7
 80033aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033ac:	f107 0314 	add.w	r3, r7, #20
 80033b0:	4619      	mov	r1, r3
 80033b2:	482d      	ldr	r0, [pc, #180]	@ (8003468 <HAL_SPI_MspInit+0x148>)
 80033b4:	f001 f8c2 	bl	800453c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80033b8:	2304      	movs	r3, #4
 80033ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033bc:	2302      	movs	r3, #2
 80033be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c0:	2300      	movs	r3, #0
 80033c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033c4:	2303      	movs	r3, #3
 80033c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80033c8:	2305      	movs	r3, #5
 80033ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033cc:	f107 0314 	add.w	r3, r7, #20
 80033d0:	4619      	mov	r1, r3
 80033d2:	4825      	ldr	r0, [pc, #148]	@ (8003468 <HAL_SPI_MspInit+0x148>)
 80033d4:	f001 f8b2 	bl	800453c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80033d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80033dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033de:	2302      	movs	r3, #2
 80033e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e2:	2300      	movs	r3, #0
 80033e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033e6:	2303      	movs	r3, #3
 80033e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80033ea:	2305      	movs	r3, #5
 80033ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033ee:	f107 0314 	add.w	r3, r7, #20
 80033f2:	4619      	mov	r1, r3
 80033f4:	481d      	ldr	r0, [pc, #116]	@ (800346c <HAL_SPI_MspInit+0x14c>)
 80033f6:	f001 f8a1 	bl	800453c <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80033fa:	4b1d      	ldr	r3, [pc, #116]	@ (8003470 <HAL_SPI_MspInit+0x150>)
 80033fc:	4a1d      	ldr	r2, [pc, #116]	@ (8003474 <HAL_SPI_MspInit+0x154>)
 80033fe:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8003400:	4b1b      	ldr	r3, [pc, #108]	@ (8003470 <HAL_SPI_MspInit+0x150>)
 8003402:	2200      	movs	r2, #0
 8003404:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003406:	4b1a      	ldr	r3, [pc, #104]	@ (8003470 <HAL_SPI_MspInit+0x150>)
 8003408:	2240      	movs	r2, #64	@ 0x40
 800340a:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800340c:	4b18      	ldr	r3, [pc, #96]	@ (8003470 <HAL_SPI_MspInit+0x150>)
 800340e:	2200      	movs	r2, #0
 8003410:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003412:	4b17      	ldr	r3, [pc, #92]	@ (8003470 <HAL_SPI_MspInit+0x150>)
 8003414:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003418:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800341a:	4b15      	ldr	r3, [pc, #84]	@ (8003470 <HAL_SPI_MspInit+0x150>)
 800341c:	2200      	movs	r2, #0
 800341e:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003420:	4b13      	ldr	r3, [pc, #76]	@ (8003470 <HAL_SPI_MspInit+0x150>)
 8003422:	2200      	movs	r2, #0
 8003424:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8003426:	4b12      	ldr	r3, [pc, #72]	@ (8003470 <HAL_SPI_MspInit+0x150>)
 8003428:	2200      	movs	r2, #0
 800342a:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800342c:	4b10      	ldr	r3, [pc, #64]	@ (8003470 <HAL_SPI_MspInit+0x150>)
 800342e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003432:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003434:	4b0e      	ldr	r3, [pc, #56]	@ (8003470 <HAL_SPI_MspInit+0x150>)
 8003436:	2200      	movs	r2, #0
 8003438:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800343a:	480d      	ldr	r0, [pc, #52]	@ (8003470 <HAL_SPI_MspInit+0x150>)
 800343c:	f000 fc7c 	bl	8003d38 <HAL_DMA_Init>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <HAL_SPI_MspInit+0x12a>
    {
      Error_Handler();
 8003446:	f7ff ff39 	bl	80032bc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a08      	ldr	r2, [pc, #32]	@ (8003470 <HAL_SPI_MspInit+0x150>)
 800344e:	649a      	str	r2, [r3, #72]	@ 0x48
 8003450:	4a07      	ldr	r2, [pc, #28]	@ (8003470 <HAL_SPI_MspInit+0x150>)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8003456:	bf00      	nop
 8003458:	3728      	adds	r7, #40	@ 0x28
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	40003800 	.word	0x40003800
 8003464:	40023800 	.word	0x40023800
 8003468:	40020800 	.word	0x40020800
 800346c:	40020000 	.word	0x40020000
 8003470:	20000524 	.word	0x20000524
 8003474:	40026070 	.word	0x40026070

08003478 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b08a      	sub	sp, #40	@ 0x28
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003480:	f107 0314 	add.w	r3, r7, #20
 8003484:	2200      	movs	r2, #0
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	605a      	str	r2, [r3, #4]
 800348a:	609a      	str	r2, [r3, #8]
 800348c:	60da      	str	r2, [r3, #12]
 800348e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003498:	d12b      	bne.n	80034f2 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800349a:	2300      	movs	r3, #0
 800349c:	613b      	str	r3, [r7, #16]
 800349e:	4b17      	ldr	r3, [pc, #92]	@ (80034fc <HAL_TIM_Encoder_MspInit+0x84>)
 80034a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a2:	4a16      	ldr	r2, [pc, #88]	@ (80034fc <HAL_TIM_Encoder_MspInit+0x84>)
 80034a4:	f043 0301 	orr.w	r3, r3, #1
 80034a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80034aa:	4b14      	ldr	r3, [pc, #80]	@ (80034fc <HAL_TIM_Encoder_MspInit+0x84>)
 80034ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	613b      	str	r3, [r7, #16]
 80034b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034b6:	2300      	movs	r3, #0
 80034b8:	60fb      	str	r3, [r7, #12]
 80034ba:	4b10      	ldr	r3, [pc, #64]	@ (80034fc <HAL_TIM_Encoder_MspInit+0x84>)
 80034bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034be:	4a0f      	ldr	r2, [pc, #60]	@ (80034fc <HAL_TIM_Encoder_MspInit+0x84>)
 80034c0:	f043 0301 	orr.w	r3, r3, #1
 80034c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80034c6:	4b0d      	ldr	r3, [pc, #52]	@ (80034fc <HAL_TIM_Encoder_MspInit+0x84>)
 80034c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	60fb      	str	r3, [r7, #12]
 80034d0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80034d2:	2303      	movs	r3, #3
 80034d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d6:	2302      	movs	r3, #2
 80034d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034da:	2300      	movs	r3, #0
 80034dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034de:	2300      	movs	r3, #0
 80034e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80034e2:	2301      	movs	r3, #1
 80034e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034e6:	f107 0314 	add.w	r3, r7, #20
 80034ea:	4619      	mov	r1, r3
 80034ec:	4804      	ldr	r0, [pc, #16]	@ (8003500 <HAL_TIM_Encoder_MspInit+0x88>)
 80034ee:	f001 f825 	bl	800453c <HAL_GPIO_Init>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80034f2:	bf00      	nop
 80034f4:	3728      	adds	r7, #40	@ 0x28
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	40023800 	.word	0x40023800
 8003500:	40020000 	.word	0x40020000

08003504 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a0b      	ldr	r2, [pc, #44]	@ (8003540 <HAL_TIM_PWM_MspInit+0x3c>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d10d      	bne.n	8003532 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003516:	2300      	movs	r3, #0
 8003518:	60fb      	str	r3, [r7, #12]
 800351a:	4b0a      	ldr	r3, [pc, #40]	@ (8003544 <HAL_TIM_PWM_MspInit+0x40>)
 800351c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351e:	4a09      	ldr	r2, [pc, #36]	@ (8003544 <HAL_TIM_PWM_MspInit+0x40>)
 8003520:	f043 0302 	orr.w	r3, r3, #2
 8003524:	6413      	str	r3, [r2, #64]	@ 0x40
 8003526:	4b07      	ldr	r3, [pc, #28]	@ (8003544 <HAL_TIM_PWM_MspInit+0x40>)
 8003528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	60fb      	str	r3, [r7, #12]
 8003530:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8003532:	bf00      	nop
 8003534:	3714      	adds	r7, #20
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	40000400 	.word	0x40000400
 8003544:	40023800 	.word	0x40023800

08003548 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b088      	sub	sp, #32
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003550:	f107 030c 	add.w	r3, r7, #12
 8003554:	2200      	movs	r2, #0
 8003556:	601a      	str	r2, [r3, #0]
 8003558:	605a      	str	r2, [r3, #4]
 800355a:	609a      	str	r2, [r3, #8]
 800355c:	60da      	str	r2, [r3, #12]
 800355e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a12      	ldr	r2, [pc, #72]	@ (80035b0 <HAL_TIM_MspPostInit+0x68>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d11d      	bne.n	80035a6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800356a:	2300      	movs	r3, #0
 800356c:	60bb      	str	r3, [r7, #8]
 800356e:	4b11      	ldr	r3, [pc, #68]	@ (80035b4 <HAL_TIM_MspPostInit+0x6c>)
 8003570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003572:	4a10      	ldr	r2, [pc, #64]	@ (80035b4 <HAL_TIM_MspPostInit+0x6c>)
 8003574:	f043 0301 	orr.w	r3, r3, #1
 8003578:	6313      	str	r3, [r2, #48]	@ 0x30
 800357a:	4b0e      	ldr	r3, [pc, #56]	@ (80035b4 <HAL_TIM_MspPostInit+0x6c>)
 800357c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	60bb      	str	r3, [r7, #8]
 8003584:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003586:	2340      	movs	r3, #64	@ 0x40
 8003588:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800358a:	2302      	movs	r3, #2
 800358c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800358e:	2300      	movs	r3, #0
 8003590:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003592:	2300      	movs	r3, #0
 8003594:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003596:	2302      	movs	r3, #2
 8003598:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800359a:	f107 030c 	add.w	r3, r7, #12
 800359e:	4619      	mov	r1, r3
 80035a0:	4805      	ldr	r0, [pc, #20]	@ (80035b8 <HAL_TIM_MspPostInit+0x70>)
 80035a2:	f000 ffcb 	bl	800453c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80035a6:	bf00      	nop
 80035a8:	3720      	adds	r7, #32
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	40000400 	.word	0x40000400
 80035b4:	40023800 	.word	0x40023800
 80035b8:	40020000 	.word	0x40020000

080035bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b08a      	sub	sp, #40	@ 0x28
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035c4:	f107 0314 	add.w	r3, r7, #20
 80035c8:	2200      	movs	r2, #0
 80035ca:	601a      	str	r2, [r3, #0]
 80035cc:	605a      	str	r2, [r3, #4]
 80035ce:	609a      	str	r2, [r3, #8]
 80035d0:	60da      	str	r2, [r3, #12]
 80035d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a1d      	ldr	r2, [pc, #116]	@ (8003650 <HAL_UART_MspInit+0x94>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d133      	bne.n	8003646 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80035de:	2300      	movs	r3, #0
 80035e0:	613b      	str	r3, [r7, #16]
 80035e2:	4b1c      	ldr	r3, [pc, #112]	@ (8003654 <HAL_UART_MspInit+0x98>)
 80035e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e6:	4a1b      	ldr	r2, [pc, #108]	@ (8003654 <HAL_UART_MspInit+0x98>)
 80035e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80035ee:	4b19      	ldr	r3, [pc, #100]	@ (8003654 <HAL_UART_MspInit+0x98>)
 80035f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035f6:	613b      	str	r3, [r7, #16]
 80035f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035fa:	2300      	movs	r3, #0
 80035fc:	60fb      	str	r3, [r7, #12]
 80035fe:	4b15      	ldr	r3, [pc, #84]	@ (8003654 <HAL_UART_MspInit+0x98>)
 8003600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003602:	4a14      	ldr	r2, [pc, #80]	@ (8003654 <HAL_UART_MspInit+0x98>)
 8003604:	f043 0301 	orr.w	r3, r3, #1
 8003608:	6313      	str	r3, [r2, #48]	@ 0x30
 800360a:	4b12      	ldr	r3, [pc, #72]	@ (8003654 <HAL_UART_MspInit+0x98>)
 800360c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	60fb      	str	r3, [r7, #12]
 8003614:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003616:	230c      	movs	r3, #12
 8003618:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800361a:	2302      	movs	r3, #2
 800361c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800361e:	2300      	movs	r3, #0
 8003620:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003622:	2303      	movs	r3, #3
 8003624:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003626:	2307      	movs	r3, #7
 8003628:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800362a:	f107 0314 	add.w	r3, r7, #20
 800362e:	4619      	mov	r1, r3
 8003630:	4809      	ldr	r0, [pc, #36]	@ (8003658 <HAL_UART_MspInit+0x9c>)
 8003632:	f000 ff83 	bl	800453c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8003636:	2200      	movs	r2, #0
 8003638:	2106      	movs	r1, #6
 800363a:	2026      	movs	r0, #38	@ 0x26
 800363c:	f000 fb52 	bl	8003ce4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003640:	2026      	movs	r0, #38	@ 0x26
 8003642:	f000 fb6b 	bl	8003d1c <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8003646:	bf00      	nop
 8003648:	3728      	adds	r7, #40	@ 0x28
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	40004400 	.word	0x40004400
 8003654:	40023800 	.word	0x40023800
 8003658:	40020000 	.word	0x40020000

0800365c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b08e      	sub	sp, #56	@ 0x38
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003664:	2300      	movs	r3, #0
 8003666:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003668:	2300      	movs	r3, #0
 800366a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800366c:	2300      	movs	r3, #0
 800366e:	60fb      	str	r3, [r7, #12]
 8003670:	4b33      	ldr	r3, [pc, #204]	@ (8003740 <HAL_InitTick+0xe4>)
 8003672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003674:	4a32      	ldr	r2, [pc, #200]	@ (8003740 <HAL_InitTick+0xe4>)
 8003676:	f043 0310 	orr.w	r3, r3, #16
 800367a:	6413      	str	r3, [r2, #64]	@ 0x40
 800367c:	4b30      	ldr	r3, [pc, #192]	@ (8003740 <HAL_InitTick+0xe4>)
 800367e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003680:	f003 0310 	and.w	r3, r3, #16
 8003684:	60fb      	str	r3, [r7, #12]
 8003686:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003688:	f107 0210 	add.w	r2, r7, #16
 800368c:	f107 0314 	add.w	r3, r7, #20
 8003690:	4611      	mov	r1, r2
 8003692:	4618      	mov	r0, r3
 8003694:	f001 fa1a 	bl	8004acc <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003698:	6a3b      	ldr	r3, [r7, #32]
 800369a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800369c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d103      	bne.n	80036aa <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80036a2:	f001 f9eb 	bl	8004a7c <HAL_RCC_GetPCLK1Freq>
 80036a6:	6378      	str	r0, [r7, #52]	@ 0x34
 80036a8:	e004      	b.n	80036b4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80036aa:	f001 f9e7 	bl	8004a7c <HAL_RCC_GetPCLK1Freq>
 80036ae:	4603      	mov	r3, r0
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80036b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036b6:	4a23      	ldr	r2, [pc, #140]	@ (8003744 <HAL_InitTick+0xe8>)
 80036b8:	fba2 2303 	umull	r2, r3, r2, r3
 80036bc:	0c9b      	lsrs	r3, r3, #18
 80036be:	3b01      	subs	r3, #1
 80036c0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80036c2:	4b21      	ldr	r3, [pc, #132]	@ (8003748 <HAL_InitTick+0xec>)
 80036c4:	4a21      	ldr	r2, [pc, #132]	@ (800374c <HAL_InitTick+0xf0>)
 80036c6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80036c8:	4b1f      	ldr	r3, [pc, #124]	@ (8003748 <HAL_InitTick+0xec>)
 80036ca:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80036ce:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80036d0:	4a1d      	ldr	r2, [pc, #116]	@ (8003748 <HAL_InitTick+0xec>)
 80036d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036d4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80036d6:	4b1c      	ldr	r3, [pc, #112]	@ (8003748 <HAL_InitTick+0xec>)
 80036d8:	2200      	movs	r2, #0
 80036da:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036dc:	4b1a      	ldr	r3, [pc, #104]	@ (8003748 <HAL_InitTick+0xec>)
 80036de:	2200      	movs	r2, #0
 80036e0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036e2:	4b19      	ldr	r3, [pc, #100]	@ (8003748 <HAL_InitTick+0xec>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80036e8:	4817      	ldr	r0, [pc, #92]	@ (8003748 <HAL_InitTick+0xec>)
 80036ea:	f002 f99d 	bl	8005a28 <HAL_TIM_Base_Init>
 80036ee:	4603      	mov	r3, r0
 80036f0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80036f4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d11b      	bne.n	8003734 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80036fc:	4812      	ldr	r0, [pc, #72]	@ (8003748 <HAL_InitTick+0xec>)
 80036fe:	f002 f9ed 	bl	8005adc <HAL_TIM_Base_Start_IT>
 8003702:	4603      	mov	r3, r0
 8003704:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8003708:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800370c:	2b00      	cmp	r3, #0
 800370e:	d111      	bne.n	8003734 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003710:	2036      	movs	r0, #54	@ 0x36
 8003712:	f000 fb03 	bl	8003d1c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2b0f      	cmp	r3, #15
 800371a:	d808      	bhi.n	800372e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800371c:	2200      	movs	r2, #0
 800371e:	6879      	ldr	r1, [r7, #4]
 8003720:	2036      	movs	r0, #54	@ 0x36
 8003722:	f000 fadf 	bl	8003ce4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003726:	4a0a      	ldr	r2, [pc, #40]	@ (8003750 <HAL_InitTick+0xf4>)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6013      	str	r3, [r2, #0]
 800372c:	e002      	b.n	8003734 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003734:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8003738:	4618      	mov	r0, r3
 800373a:	3738      	adds	r7, #56	@ 0x38
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	40023800 	.word	0x40023800
 8003744:	431bde83 	.word	0x431bde83
 8003748:	200008a0 	.word	0x200008a0
 800374c:	40001000 	.word	0x40001000
 8003750:	20000014 	.word	0x20000014

08003754 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003754:	b480      	push	{r7}
 8003756:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8003758:	f3bf 8f4f 	dsb	sy
}
 800375c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800375e:	4b06      	ldr	r3, [pc, #24]	@ (8003778 <__NVIC_SystemReset+0x24>)
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003766:	4904      	ldr	r1, [pc, #16]	@ (8003778 <__NVIC_SystemReset+0x24>)
 8003768:	4b04      	ldr	r3, [pc, #16]	@ (800377c <__NVIC_SystemReset+0x28>)
 800376a:	4313      	orrs	r3, r2
 800376c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800376e:	f3bf 8f4f 	dsb	sy
}
 8003772:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003774:	bf00      	nop
 8003776:	e7fd      	b.n	8003774 <__NVIC_SystemReset+0x20>
 8003778:	e000ed00 	.word	0xe000ed00
 800377c:	05fa0004 	.word	0x05fa0004

08003780 <log_message>:
extern UART_HandleTypeDef huart2;
extern TIM_HandleTypeDef htim6;

/* USER CODE BEGIN EV */
/* USER CODE BEGIN 0 */
void log_message(const char *message) {
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
    // Send the log message over UART
    HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f7fc fd4b 	bl	8000224 <strlen>
 800378e:	4603      	mov	r3, r0
 8003790:	b29a      	uxth	r2, r3
 8003792:	f04f 33ff 	mov.w	r3, #4294967295
 8003796:	6879      	ldr	r1, [r7, #4]
 8003798:	4803      	ldr	r0, [pc, #12]	@ (80037a8 <log_message+0x28>)
 800379a:	f003 f997 	bl	8006acc <HAL_UART_Transmit>
}
 800379e:	bf00      	nop
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	20000614 	.word	0x20000614

080037ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037ac:	b480      	push	{r7}
 80037ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80037b0:	bf00      	nop
 80037b2:	e7fd      	b.n	80037b0 <NMI_Handler+0x4>

080037b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b0d6      	sub	sp, #344	@ 0x158
 80037b8:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE BEGIN HardFault_IRQn 0 */
	// Store stack pointer
	uint32_t *stack_pointer;
	__asm volatile (
 80037ba:	f01e 0f04 	tst.w	lr, #4
 80037be:	bf0c      	ite	eq
 80037c0:	f3ef 8308 	mrseq	r3, MSP
 80037c4:	f3ef 8309 	mrsne	r3, PSP
 80037c8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
		"MRSNE %0, PSP \n"   // If PSP, move PSP to stack_pointer
		: "=r" (stack_pointer)
	);

	// Log or store the stack pointer contents for analysis
	uint32_t r0 = stack_pointer[0];  // R0
 80037cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	uint32_t r1 = stack_pointer[1];  // R1
 80037d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	uint32_t r2 = stack_pointer[2];  // R2
 80037e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	uint32_t r3 = stack_pointer[3];  // R3
 80037ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	uint32_t r12 = stack_pointer[4]; // R12
 80037f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	uint32_t lr = stack_pointer[5];  // LR
 80037fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003802:	695b      	ldr	r3, [r3, #20]
 8003804:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	uint32_t pc = stack_pointer[6];  // PC
 8003808:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	uint32_t psr = stack_pointer[7]; // PSR
 8003812:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003816:	69db      	ldr	r3, [r3, #28]
 8003818:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	// Read the HFSR and CFSR registers for diagnostics
	uint32_t hfsr = SCB->HFSR;
 800381c:	4b18      	ldr	r3, [pc, #96]	@ (8003880 <HardFault_Handler+0xcc>)
 800381e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003820:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
	uint32_t cfsr = SCB->CFSR;
 8003824:	4b16      	ldr	r3, [pc, #88]	@ (8003880 <HardFault_Handler+0xcc>)
 8003826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003828:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

	// Create a log message
	char log_buffer[256];
	snprintf(log_buffer, sizeof(log_buffer),
 800382c:	1d38      	adds	r0, r7, #4
 800382e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003832:	9308      	str	r3, [sp, #32]
 8003834:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003838:	9307      	str	r3, [sp, #28]
 800383a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800383e:	9306      	str	r3, [sp, #24]
 8003840:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003844:	9305      	str	r3, [sp, #20]
 8003846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800384a:	9304      	str	r3, [sp, #16]
 800384c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003850:	9303      	str	r3, [sp, #12]
 8003852:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003856:	9302      	str	r3, [sp, #8]
 8003858:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800385c:	9301      	str	r3, [sp, #4]
 800385e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003862:	9300      	str	r3, [sp, #0]
 8003864:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003868:	4a06      	ldr	r2, [pc, #24]	@ (8003884 <HardFault_Handler+0xd0>)
 800386a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800386e:	f007 ff29 	bl	800b6c4 <sniprintf>
		"CFSR: %08X HFSR: %08X\n",
		r0, r1, r2, r3, r12, lr, pc, psr, cfsr, hfsr
	);

	// Log the message
	log_message(log_buffer);
 8003872:	1d3b      	adds	r3, r7, #4
 8003874:	4618      	mov	r0, r3
 8003876:	f7ff ff83 	bl	8003780 <log_message>

	NVIC_SystemReset();
 800387a:	f7ff ff6b 	bl	8003754 <__NVIC_SystemReset>
 800387e:	bf00      	nop
 8003880:	e000ed00 	.word	0xe000ed00
 8003884:	0800d9a4 	.word	0x0800d9a4

08003888 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800388c:	bf00      	nop
 800388e:	e7fd      	b.n	800388c <MemManage_Handler+0x4>

08003890 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003890:	b480      	push	{r7}
 8003892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003894:	bf00      	nop
 8003896:	e7fd      	b.n	8003894 <BusFault_Handler+0x4>

08003898 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003898:	b480      	push	{r7}
 800389a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800389c:	bf00      	nop
 800389e:	e7fd      	b.n	800389c <UsageFault_Handler+0x4>

080038a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038a4:	bf00      	nop
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
	...

080038b0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80038b4:	4802      	ldr	r0, [pc, #8]	@ (80038c0 <DMA1_Stream4_IRQHandler+0x10>)
 80038b6:	f000 fbd7 	bl	8004068 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80038ba:	bf00      	nop
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	20000524 	.word	0x20000524

080038c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80038c8:	4802      	ldr	r0, [pc, #8]	@ (80038d4 <USART2_IRQHandler+0x10>)
 80038ca:	f003 f9af 	bl	8006c2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80038ce:	bf00      	nop
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	20000614 	.word	0x20000614

080038d8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80038dc:	4802      	ldr	r0, [pc, #8]	@ (80038e8 <TIM6_DAC_IRQHandler+0x10>)
 80038de:	f002 fbb9 	bl	8006054 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80038e2:	bf00      	nop
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	200008a0 	.word	0x200008a0

080038ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0
  return 1;
 80038f0:	2301      	movs	r3, #1
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <_kill>:

int _kill(int pid, int sig)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003906:	f008 f81b 	bl	800b940 <__errno>
 800390a:	4603      	mov	r3, r0
 800390c:	2216      	movs	r2, #22
 800390e:	601a      	str	r2, [r3, #0]
  return -1;
 8003910:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003914:	4618      	mov	r0, r3
 8003916:	3708      	adds	r7, #8
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <_exit>:

void _exit (int status)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003924:	f04f 31ff 	mov.w	r1, #4294967295
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f7ff ffe7 	bl	80038fc <_kill>
  while (1) {}    /* Make sure we hang here */
 800392e:	bf00      	nop
 8003930:	e7fd      	b.n	800392e <_exit+0x12>

08003932 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b086      	sub	sp, #24
 8003936:	af00      	add	r7, sp, #0
 8003938:	60f8      	str	r0, [r7, #12]
 800393a:	60b9      	str	r1, [r7, #8]
 800393c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800393e:	2300      	movs	r3, #0
 8003940:	617b      	str	r3, [r7, #20]
 8003942:	e00a      	b.n	800395a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003944:	f3af 8000 	nop.w
 8003948:	4601      	mov	r1, r0
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	1c5a      	adds	r2, r3, #1
 800394e:	60ba      	str	r2, [r7, #8]
 8003950:	b2ca      	uxtb	r2, r1
 8003952:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	3301      	adds	r3, #1
 8003958:	617b      	str	r3, [r7, #20]
 800395a:	697a      	ldr	r2, [r7, #20]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	429a      	cmp	r2, r3
 8003960:	dbf0      	blt.n	8003944 <_read+0x12>
  }

  return len;
 8003962:	687b      	ldr	r3, [r7, #4]
}
 8003964:	4618      	mov	r0, r3
 8003966:	3718      	adds	r7, #24
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b086      	sub	sp, #24
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003978:	2300      	movs	r3, #0
 800397a:	617b      	str	r3, [r7, #20]
 800397c:	e009      	b.n	8003992 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	1c5a      	adds	r2, r3, #1
 8003982:	60ba      	str	r2, [r7, #8]
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	4618      	mov	r0, r3
 8003988:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	3301      	adds	r3, #1
 8003990:	617b      	str	r3, [r7, #20]
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	429a      	cmp	r2, r3
 8003998:	dbf1      	blt.n	800397e <_write+0x12>
  }
  return len;
 800399a:	687b      	ldr	r3, [r7, #4]
}
 800399c:	4618      	mov	r0, r3
 800399e:	3718      	adds	r7, #24
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <_close>:

int _close(int file)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80039ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80039cc:	605a      	str	r2, [r3, #4]
  return 0;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <_isatty>:

int _isatty(int file)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80039e4:	2301      	movs	r3, #1
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr

080039f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80039f2:	b480      	push	{r7}
 80039f4:	b085      	sub	sp, #20
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	60f8      	str	r0, [r7, #12]
 80039fa:	60b9      	str	r1, [r7, #8]
 80039fc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3714      	adds	r7, #20
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b086      	sub	sp, #24
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a14:	4a14      	ldr	r2, [pc, #80]	@ (8003a68 <_sbrk+0x5c>)
 8003a16:	4b15      	ldr	r3, [pc, #84]	@ (8003a6c <_sbrk+0x60>)
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a20:	4b13      	ldr	r3, [pc, #76]	@ (8003a70 <_sbrk+0x64>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d102      	bne.n	8003a2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a28:	4b11      	ldr	r3, [pc, #68]	@ (8003a70 <_sbrk+0x64>)
 8003a2a:	4a12      	ldr	r2, [pc, #72]	@ (8003a74 <_sbrk+0x68>)
 8003a2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a2e:	4b10      	ldr	r3, [pc, #64]	@ (8003a70 <_sbrk+0x64>)
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4413      	add	r3, r2
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d207      	bcs.n	8003a4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a3c:	f007 ff80 	bl	800b940 <__errno>
 8003a40:	4603      	mov	r3, r0
 8003a42:	220c      	movs	r2, #12
 8003a44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a46:	f04f 33ff 	mov.w	r3, #4294967295
 8003a4a:	e009      	b.n	8003a60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a4c:	4b08      	ldr	r3, [pc, #32]	@ (8003a70 <_sbrk+0x64>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a52:	4b07      	ldr	r3, [pc, #28]	@ (8003a70 <_sbrk+0x64>)
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4413      	add	r3, r2
 8003a5a:	4a05      	ldr	r2, [pc, #20]	@ (8003a70 <_sbrk+0x64>)
 8003a5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3718      	adds	r7, #24
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	20020000 	.word	0x20020000
 8003a6c:	00000400 	.word	0x00000400
 8003a70:	200008e8 	.word	0x200008e8
 8003a74:	20004790 	.word	0x20004790

08003a78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a7c:	4b06      	ldr	r3, [pc, #24]	@ (8003a98 <SystemInit+0x20>)
 8003a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a82:	4a05      	ldr	r2, [pc, #20]	@ (8003a98 <SystemInit+0x20>)
 8003a84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003a88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a8c:	bf00      	nop
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	e000ed00 	.word	0xe000ed00

08003a9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003a9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003ad4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003aa0:	f7ff ffea 	bl	8003a78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003aa4:	480c      	ldr	r0, [pc, #48]	@ (8003ad8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003aa6:	490d      	ldr	r1, [pc, #52]	@ (8003adc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003aa8:	4a0d      	ldr	r2, [pc, #52]	@ (8003ae0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003aaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003aac:	e002      	b.n	8003ab4 <LoopCopyDataInit>

08003aae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003aae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ab0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ab2:	3304      	adds	r3, #4

08003ab4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ab4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ab6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ab8:	d3f9      	bcc.n	8003aae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003aba:	4a0a      	ldr	r2, [pc, #40]	@ (8003ae4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003abc:	4c0a      	ldr	r4, [pc, #40]	@ (8003ae8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003abe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ac0:	e001      	b.n	8003ac6 <LoopFillZerobss>

08003ac2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ac2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ac4:	3204      	adds	r2, #4

08003ac6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ac6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ac8:	d3fb      	bcc.n	8003ac2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003aca:	f007 ff3f 	bl	800b94c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ace:	f7fe ff0b 	bl	80028e8 <main>
  bx  lr    
 8003ad2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003ad4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003ad8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003adc:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8003ae0:	0800de00 	.word	0x0800de00
  ldr r2, =_sbss
 8003ae4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8003ae8:	20004790 	.word	0x20004790

08003aec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003aec:	e7fe      	b.n	8003aec <ADC_IRQHandler>
	...

08003af0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003af4:	4b0e      	ldr	r3, [pc, #56]	@ (8003b30 <HAL_Init+0x40>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a0d      	ldr	r2, [pc, #52]	@ (8003b30 <HAL_Init+0x40>)
 8003afa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003afe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b00:	4b0b      	ldr	r3, [pc, #44]	@ (8003b30 <HAL_Init+0x40>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a0a      	ldr	r2, [pc, #40]	@ (8003b30 <HAL_Init+0x40>)
 8003b06:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b0c:	4b08      	ldr	r3, [pc, #32]	@ (8003b30 <HAL_Init+0x40>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a07      	ldr	r2, [pc, #28]	@ (8003b30 <HAL_Init+0x40>)
 8003b12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b18:	2003      	movs	r0, #3
 8003b1a:	f000 f8d8 	bl	8003cce <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b1e:	200f      	movs	r0, #15
 8003b20:	f7ff fd9c 	bl	800365c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b24:	f7ff fbd0 	bl	80032c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	40023c00 	.word	0x40023c00

08003b34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b34:	b480      	push	{r7}
 8003b36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b38:	4b06      	ldr	r3, [pc, #24]	@ (8003b54 <HAL_IncTick+0x20>)
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	4b06      	ldr	r3, [pc, #24]	@ (8003b58 <HAL_IncTick+0x24>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4413      	add	r3, r2
 8003b44:	4a04      	ldr	r2, [pc, #16]	@ (8003b58 <HAL_IncTick+0x24>)
 8003b46:	6013      	str	r3, [r2, #0]
}
 8003b48:	bf00      	nop
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	20000018 	.word	0x20000018
 8003b58:	200008ec 	.word	0x200008ec

08003b5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8003b60:	4b03      	ldr	r3, [pc, #12]	@ (8003b70 <HAL_GetTick+0x14>)
 8003b62:	681b      	ldr	r3, [r3, #0]
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	200008ec 	.word	0x200008ec

08003b74 <__NVIC_SetPriorityGrouping>:
{
 8003b74:	b480      	push	{r7}
 8003b76:	b085      	sub	sp, #20
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f003 0307 	and.w	r3, r3, #7
 8003b82:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b84:	4b0c      	ldr	r3, [pc, #48]	@ (8003bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b8a:	68ba      	ldr	r2, [r7, #8]
 8003b8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003b90:	4013      	ands	r3, r2
 8003b92:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003ba0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ba4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ba6:	4a04      	ldr	r2, [pc, #16]	@ (8003bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	60d3      	str	r3, [r2, #12]
}
 8003bac:	bf00      	nop
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr
 8003bb8:	e000ed00 	.word	0xe000ed00

08003bbc <__NVIC_GetPriorityGrouping>:
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bc0:	4b04      	ldr	r3, [pc, #16]	@ (8003bd4 <__NVIC_GetPriorityGrouping+0x18>)
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	0a1b      	lsrs	r3, r3, #8
 8003bc6:	f003 0307 	and.w	r3, r3, #7
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr
 8003bd4:	e000ed00 	.word	0xe000ed00

08003bd8 <__NVIC_EnableIRQ>:
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	4603      	mov	r3, r0
 8003be0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	db0b      	blt.n	8003c02 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bea:	79fb      	ldrb	r3, [r7, #7]
 8003bec:	f003 021f 	and.w	r2, r3, #31
 8003bf0:	4907      	ldr	r1, [pc, #28]	@ (8003c10 <__NVIC_EnableIRQ+0x38>)
 8003bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bf6:	095b      	lsrs	r3, r3, #5
 8003bf8:	2001      	movs	r0, #1
 8003bfa:	fa00 f202 	lsl.w	r2, r0, r2
 8003bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003c02:	bf00      	nop
 8003c04:	370c      	adds	r7, #12
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	e000e100 	.word	0xe000e100

08003c14 <__NVIC_SetPriority>:
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	6039      	str	r1, [r7, #0]
 8003c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	db0a      	blt.n	8003c3e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	b2da      	uxtb	r2, r3
 8003c2c:	490c      	ldr	r1, [pc, #48]	@ (8003c60 <__NVIC_SetPriority+0x4c>)
 8003c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c32:	0112      	lsls	r2, r2, #4
 8003c34:	b2d2      	uxtb	r2, r2
 8003c36:	440b      	add	r3, r1
 8003c38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003c3c:	e00a      	b.n	8003c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	b2da      	uxtb	r2, r3
 8003c42:	4908      	ldr	r1, [pc, #32]	@ (8003c64 <__NVIC_SetPriority+0x50>)
 8003c44:	79fb      	ldrb	r3, [r7, #7]
 8003c46:	f003 030f 	and.w	r3, r3, #15
 8003c4a:	3b04      	subs	r3, #4
 8003c4c:	0112      	lsls	r2, r2, #4
 8003c4e:	b2d2      	uxtb	r2, r2
 8003c50:	440b      	add	r3, r1
 8003c52:	761a      	strb	r2, [r3, #24]
}
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr
 8003c60:	e000e100 	.word	0xe000e100
 8003c64:	e000ed00 	.word	0xe000ed00

08003c68 <NVIC_EncodePriority>:
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b089      	sub	sp, #36	@ 0x24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f003 0307 	and.w	r3, r3, #7
 8003c7a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	f1c3 0307 	rsb	r3, r3, #7
 8003c82:	2b04      	cmp	r3, #4
 8003c84:	bf28      	it	cs
 8003c86:	2304      	movcs	r3, #4
 8003c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	3304      	adds	r3, #4
 8003c8e:	2b06      	cmp	r3, #6
 8003c90:	d902      	bls.n	8003c98 <NVIC_EncodePriority+0x30>
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	3b03      	subs	r3, #3
 8003c96:	e000      	b.n	8003c9a <NVIC_EncodePriority+0x32>
 8003c98:	2300      	movs	r3, #0
 8003c9a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca6:	43da      	mvns	r2, r3
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	401a      	ands	r2, r3
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cba:	43d9      	mvns	r1, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cc0:	4313      	orrs	r3, r2
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3724      	adds	r7, #36	@ 0x24
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr

08003cce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b082      	sub	sp, #8
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f7ff ff4c 	bl	8003b74 <__NVIC_SetPriorityGrouping>
}
 8003cdc:	bf00      	nop
 8003cde:	3708      	adds	r7, #8
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b086      	sub	sp, #24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	4603      	mov	r3, r0
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
 8003cf0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003cf6:	f7ff ff61 	bl	8003bbc <__NVIC_GetPriorityGrouping>
 8003cfa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	68b9      	ldr	r1, [r7, #8]
 8003d00:	6978      	ldr	r0, [r7, #20]
 8003d02:	f7ff ffb1 	bl	8003c68 <NVIC_EncodePriority>
 8003d06:	4602      	mov	r2, r0
 8003d08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d0c:	4611      	mov	r1, r2
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7ff ff80 	bl	8003c14 <__NVIC_SetPriority>
}
 8003d14:	bf00      	nop
 8003d16:	3718      	adds	r7, #24
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	4603      	mov	r3, r0
 8003d24:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7ff ff54 	bl	8003bd8 <__NVIC_EnableIRQ>
}
 8003d30:	bf00      	nop
 8003d32:	3708      	adds	r7, #8
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d40:	2300      	movs	r3, #0
 8003d42:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003d44:	f7ff ff0a 	bl	8003b5c <HAL_GetTick>
 8003d48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d101      	bne.n	8003d54 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e099      	b.n	8003e88 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2202      	movs	r2, #2
 8003d58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f022 0201 	bic.w	r2, r2, #1
 8003d72:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d74:	e00f      	b.n	8003d96 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d76:	f7ff fef1 	bl	8003b5c <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b05      	cmp	r3, #5
 8003d82:	d908      	bls.n	8003d96 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2220      	movs	r2, #32
 8003d88:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2203      	movs	r2, #3
 8003d8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e078      	b.n	8003e88 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0301 	and.w	r3, r3, #1
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1e8      	bne.n	8003d76 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003dac:	697a      	ldr	r2, [r7, #20]
 8003dae:	4b38      	ldr	r3, [pc, #224]	@ (8003e90 <HAL_DMA_Init+0x158>)
 8003db0:	4013      	ands	r3, r2
 8003db2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003dc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a1b      	ldr	r3, [r3, #32]
 8003de0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dec:	2b04      	cmp	r3, #4
 8003dee:	d107      	bne.n	8003e00 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	697a      	ldr	r2, [r7, #20]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	697a      	ldr	r2, [r7, #20]
 8003e06:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	f023 0307 	bic.w	r3, r3, #7
 8003e16:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e1c:	697a      	ldr	r2, [r7, #20]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e26:	2b04      	cmp	r3, #4
 8003e28:	d117      	bne.n	8003e5a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00e      	beq.n	8003e5a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 fb01 	bl	8004444 <DMA_CheckFifoParam>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d008      	beq.n	8003e5a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2240      	movs	r2, #64	@ 0x40
 8003e4c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003e56:	2301      	movs	r3, #1
 8003e58:	e016      	b.n	8003e88 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	697a      	ldr	r2, [r7, #20]
 8003e60:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 fab8 	bl	80043d8 <DMA_CalcBaseAndBitshift>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e70:	223f      	movs	r2, #63	@ 0x3f
 8003e72:	409a      	lsls	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3718      	adds	r7, #24
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	f010803f 	.word	0xf010803f

08003e94 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
 8003ea0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eaa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d101      	bne.n	8003eba <HAL_DMA_Start_IT+0x26>
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	e040      	b.n	8003f3c <HAL_DMA_Start_IT+0xa8>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d12f      	bne.n	8003f2e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2202      	movs	r2, #2
 8003ed2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	68b9      	ldr	r1, [r7, #8]
 8003ee2:	68f8      	ldr	r0, [r7, #12]
 8003ee4:	f000 fa4a 	bl	800437c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eec:	223f      	movs	r2, #63	@ 0x3f
 8003eee:	409a      	lsls	r2, r3
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f042 0216 	orr.w	r2, r2, #22
 8003f02:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d007      	beq.n	8003f1c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f042 0208 	orr.w	r2, r2, #8
 8003f1a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f042 0201 	orr.w	r2, r2, #1
 8003f2a:	601a      	str	r2, [r3, #0]
 8003f2c:	e005      	b.n	8003f3a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003f36:	2302      	movs	r3, #2
 8003f38:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3718      	adds	r7, #24
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f50:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003f52:	f7ff fe03 	bl	8003b5c <HAL_GetTick>
 8003f56:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d008      	beq.n	8003f76 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2280      	movs	r2, #128	@ 0x80
 8003f68:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e052      	b.n	800401c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f022 0216 	bic.w	r2, r2, #22
 8003f84:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	695a      	ldr	r2, [r3, #20]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f94:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d103      	bne.n	8003fa6 <HAL_DMA_Abort+0x62>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d007      	beq.n	8003fb6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 0208 	bic.w	r2, r2, #8
 8003fb4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f022 0201 	bic.w	r2, r2, #1
 8003fc4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fc6:	e013      	b.n	8003ff0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003fc8:	f7ff fdc8 	bl	8003b5c <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b05      	cmp	r3, #5
 8003fd4:	d90c      	bls.n	8003ff0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2220      	movs	r2, #32
 8003fda:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2203      	movs	r2, #3
 8003fe0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e015      	b.n	800401c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1e4      	bne.n	8003fc8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004002:	223f      	movs	r2, #63	@ 0x3f
 8004004:	409a      	lsls	r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800401a:	2300      	movs	r3, #0
}
 800401c:	4618      	mov	r0, r3
 800401e:	3710      	adds	r7, #16
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2b02      	cmp	r3, #2
 8004036:	d004      	beq.n	8004042 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2280      	movs	r2, #128	@ 0x80
 800403c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e00c      	b.n	800405c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2205      	movs	r2, #5
 8004046:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f022 0201 	bic.w	r2, r2, #1
 8004058:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b086      	sub	sp, #24
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004070:	2300      	movs	r3, #0
 8004072:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004074:	4b8e      	ldr	r3, [pc, #568]	@ (80042b0 <HAL_DMA_IRQHandler+0x248>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a8e      	ldr	r2, [pc, #568]	@ (80042b4 <HAL_DMA_IRQHandler+0x24c>)
 800407a:	fba2 2303 	umull	r2, r3, r2, r3
 800407e:	0a9b      	lsrs	r3, r3, #10
 8004080:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004086:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004092:	2208      	movs	r2, #8
 8004094:	409a      	lsls	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	4013      	ands	r3, r2
 800409a:	2b00      	cmp	r3, #0
 800409c:	d01a      	beq.n	80040d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0304 	and.w	r3, r3, #4
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d013      	beq.n	80040d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f022 0204 	bic.w	r2, r2, #4
 80040ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040c0:	2208      	movs	r2, #8
 80040c2:	409a      	lsls	r2, r3
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040cc:	f043 0201 	orr.w	r2, r3, #1
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040d8:	2201      	movs	r2, #1
 80040da:	409a      	lsls	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	4013      	ands	r3, r2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d012      	beq.n	800410a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00b      	beq.n	800410a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040f6:	2201      	movs	r2, #1
 80040f8:	409a      	lsls	r2, r3
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004102:	f043 0202 	orr.w	r2, r3, #2
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800410e:	2204      	movs	r2, #4
 8004110:	409a      	lsls	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	4013      	ands	r3, r2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d012      	beq.n	8004140 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0302 	and.w	r3, r3, #2
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00b      	beq.n	8004140 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800412c:	2204      	movs	r2, #4
 800412e:	409a      	lsls	r2, r3
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004138:	f043 0204 	orr.w	r2, r3, #4
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004144:	2210      	movs	r2, #16
 8004146:	409a      	lsls	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	4013      	ands	r3, r2
 800414c:	2b00      	cmp	r3, #0
 800414e:	d043      	beq.n	80041d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0308 	and.w	r3, r3, #8
 800415a:	2b00      	cmp	r3, #0
 800415c:	d03c      	beq.n	80041d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004162:	2210      	movs	r2, #16
 8004164:	409a      	lsls	r2, r3
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d018      	beq.n	80041aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d108      	bne.n	8004198 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800418a:	2b00      	cmp	r3, #0
 800418c:	d024      	beq.n	80041d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	4798      	blx	r3
 8004196:	e01f      	b.n	80041d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800419c:	2b00      	cmp	r3, #0
 800419e:	d01b      	beq.n	80041d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	4798      	blx	r3
 80041a8:	e016      	b.n	80041d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d107      	bne.n	80041c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f022 0208 	bic.w	r2, r2, #8
 80041c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d003      	beq.n	80041d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041dc:	2220      	movs	r2, #32
 80041de:	409a      	lsls	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	4013      	ands	r3, r2
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f000 808f 	beq.w	8004308 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0310 	and.w	r3, r3, #16
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f000 8087 	beq.w	8004308 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041fe:	2220      	movs	r2, #32
 8004200:	409a      	lsls	r2, r3
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800420c:	b2db      	uxtb	r3, r3
 800420e:	2b05      	cmp	r3, #5
 8004210:	d136      	bne.n	8004280 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f022 0216 	bic.w	r2, r2, #22
 8004220:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	695a      	ldr	r2, [r3, #20]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004230:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004236:	2b00      	cmp	r3, #0
 8004238:	d103      	bne.n	8004242 <HAL_DMA_IRQHandler+0x1da>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800423e:	2b00      	cmp	r3, #0
 8004240:	d007      	beq.n	8004252 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f022 0208 	bic.w	r2, r2, #8
 8004250:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004256:	223f      	movs	r2, #63	@ 0x3f
 8004258:	409a      	lsls	r2, r3
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004272:	2b00      	cmp	r3, #0
 8004274:	d07e      	beq.n	8004374 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	4798      	blx	r3
        }
        return;
 800427e:	e079      	b.n	8004374 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d01d      	beq.n	80042ca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d10d      	bne.n	80042b8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d031      	beq.n	8004308 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	4798      	blx	r3
 80042ac:	e02c      	b.n	8004308 <HAL_DMA_IRQHandler+0x2a0>
 80042ae:	bf00      	nop
 80042b0:	20000010 	.word	0x20000010
 80042b4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d023      	beq.n	8004308 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	4798      	blx	r3
 80042c8:	e01e      	b.n	8004308 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d10f      	bne.n	80042f8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f022 0210 	bic.w	r2, r2, #16
 80042e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d003      	beq.n	8004308 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800430c:	2b00      	cmp	r3, #0
 800430e:	d032      	beq.n	8004376 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004314:	f003 0301 	and.w	r3, r3, #1
 8004318:	2b00      	cmp	r3, #0
 800431a:	d022      	beq.n	8004362 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2205      	movs	r2, #5
 8004320:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f022 0201 	bic.w	r2, r2, #1
 8004332:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	3301      	adds	r3, #1
 8004338:	60bb      	str	r3, [r7, #8]
 800433a:	697a      	ldr	r2, [r7, #20]
 800433c:	429a      	cmp	r2, r3
 800433e:	d307      	bcc.n	8004350 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1f2      	bne.n	8004334 <HAL_DMA_IRQHandler+0x2cc>
 800434e:	e000      	b.n	8004352 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004350:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2201      	movs	r2, #1
 8004356:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004366:	2b00      	cmp	r3, #0
 8004368:	d005      	beq.n	8004376 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	4798      	blx	r3
 8004372:	e000      	b.n	8004376 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004374:	bf00      	nop
    }
  }
}
 8004376:	3718      	adds	r7, #24
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800437c:	b480      	push	{r7}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
 8004388:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004398:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	683a      	ldr	r2, [r7, #0]
 80043a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	2b40      	cmp	r3, #64	@ 0x40
 80043a8:	d108      	bne.n	80043bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68ba      	ldr	r2, [r7, #8]
 80043b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80043ba:	e007      	b.n	80043cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68ba      	ldr	r2, [r7, #8]
 80043c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	60da      	str	r2, [r3, #12]
}
 80043cc:	bf00      	nop
 80043ce:	3714      	adds	r7, #20
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	3b10      	subs	r3, #16
 80043e8:	4a14      	ldr	r2, [pc, #80]	@ (800443c <DMA_CalcBaseAndBitshift+0x64>)
 80043ea:	fba2 2303 	umull	r2, r3, r2, r3
 80043ee:	091b      	lsrs	r3, r3, #4
 80043f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80043f2:	4a13      	ldr	r2, [pc, #76]	@ (8004440 <DMA_CalcBaseAndBitshift+0x68>)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	4413      	add	r3, r2
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	461a      	mov	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2b03      	cmp	r3, #3
 8004404:	d909      	bls.n	800441a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800440e:	f023 0303 	bic.w	r3, r3, #3
 8004412:	1d1a      	adds	r2, r3, #4
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	659a      	str	r2, [r3, #88]	@ 0x58
 8004418:	e007      	b.n	800442a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004422:	f023 0303 	bic.w	r3, r3, #3
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800442e:	4618      	mov	r0, r3
 8004430:	3714      	adds	r7, #20
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	aaaaaaab 	.word	0xaaaaaaab
 8004440:	0800da30 	.word	0x0800da30

08004444 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800444c:	2300      	movs	r3, #0
 800444e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004454:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d11f      	bne.n	800449e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	2b03      	cmp	r3, #3
 8004462:	d856      	bhi.n	8004512 <DMA_CheckFifoParam+0xce>
 8004464:	a201      	add	r2, pc, #4	@ (adr r2, 800446c <DMA_CheckFifoParam+0x28>)
 8004466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800446a:	bf00      	nop
 800446c:	0800447d 	.word	0x0800447d
 8004470:	0800448f 	.word	0x0800448f
 8004474:	0800447d 	.word	0x0800447d
 8004478:	08004513 	.word	0x08004513
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004480:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d046      	beq.n	8004516 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800448c:	e043      	b.n	8004516 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004492:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004496:	d140      	bne.n	800451a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800449c:	e03d      	b.n	800451a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044a6:	d121      	bne.n	80044ec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	2b03      	cmp	r3, #3
 80044ac:	d837      	bhi.n	800451e <DMA_CheckFifoParam+0xda>
 80044ae:	a201      	add	r2, pc, #4	@ (adr r2, 80044b4 <DMA_CheckFifoParam+0x70>)
 80044b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b4:	080044c5 	.word	0x080044c5
 80044b8:	080044cb 	.word	0x080044cb
 80044bc:	080044c5 	.word	0x080044c5
 80044c0:	080044dd 	.word	0x080044dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	73fb      	strb	r3, [r7, #15]
      break;
 80044c8:	e030      	b.n	800452c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d025      	beq.n	8004522 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044da:	e022      	b.n	8004522 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044e0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80044e4:	d11f      	bne.n	8004526 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80044ea:	e01c      	b.n	8004526 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d903      	bls.n	80044fa <DMA_CheckFifoParam+0xb6>
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	2b03      	cmp	r3, #3
 80044f6:	d003      	beq.n	8004500 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80044f8:	e018      	b.n	800452c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	73fb      	strb	r3, [r7, #15]
      break;
 80044fe:	e015      	b.n	800452c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004504:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00e      	beq.n	800452a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	73fb      	strb	r3, [r7, #15]
      break;
 8004510:	e00b      	b.n	800452a <DMA_CheckFifoParam+0xe6>
      break;
 8004512:	bf00      	nop
 8004514:	e00a      	b.n	800452c <DMA_CheckFifoParam+0xe8>
      break;
 8004516:	bf00      	nop
 8004518:	e008      	b.n	800452c <DMA_CheckFifoParam+0xe8>
      break;
 800451a:	bf00      	nop
 800451c:	e006      	b.n	800452c <DMA_CheckFifoParam+0xe8>
      break;
 800451e:	bf00      	nop
 8004520:	e004      	b.n	800452c <DMA_CheckFifoParam+0xe8>
      break;
 8004522:	bf00      	nop
 8004524:	e002      	b.n	800452c <DMA_CheckFifoParam+0xe8>
      break;   
 8004526:	bf00      	nop
 8004528:	e000      	b.n	800452c <DMA_CheckFifoParam+0xe8>
      break;
 800452a:	bf00      	nop
    }
  } 
  
  return status; 
 800452c:	7bfb      	ldrb	r3, [r7, #15]
}
 800452e:	4618      	mov	r0, r3
 8004530:	3714      	adds	r7, #20
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop

0800453c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800453c:	b480      	push	{r7}
 800453e:	b089      	sub	sp, #36	@ 0x24
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004546:	2300      	movs	r3, #0
 8004548:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800454a:	2300      	movs	r3, #0
 800454c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800454e:	2300      	movs	r3, #0
 8004550:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004552:	2300      	movs	r3, #0
 8004554:	61fb      	str	r3, [r7, #28]
 8004556:	e165      	b.n	8004824 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004558:	2201      	movs	r2, #1
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	fa02 f303 	lsl.w	r3, r2, r3
 8004560:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	4013      	ands	r3, r2
 800456a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800456c:	693a      	ldr	r2, [r7, #16]
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	429a      	cmp	r2, r3
 8004572:	f040 8154 	bne.w	800481e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f003 0303 	and.w	r3, r3, #3
 800457e:	2b01      	cmp	r3, #1
 8004580:	d005      	beq.n	800458e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800458a:	2b02      	cmp	r3, #2
 800458c:	d130      	bne.n	80045f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	005b      	lsls	r3, r3, #1
 8004598:	2203      	movs	r2, #3
 800459a:	fa02 f303 	lsl.w	r3, r2, r3
 800459e:	43db      	mvns	r3, r3
 80045a0:	69ba      	ldr	r2, [r7, #24]
 80045a2:	4013      	ands	r3, r2
 80045a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	68da      	ldr	r2, [r3, #12]
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	005b      	lsls	r3, r3, #1
 80045ae:	fa02 f303 	lsl.w	r3, r2, r3
 80045b2:	69ba      	ldr	r2, [r7, #24]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	69ba      	ldr	r2, [r7, #24]
 80045bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80045c4:	2201      	movs	r2, #1
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	fa02 f303 	lsl.w	r3, r2, r3
 80045cc:	43db      	mvns	r3, r3
 80045ce:	69ba      	ldr	r2, [r7, #24]
 80045d0:	4013      	ands	r3, r2
 80045d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	091b      	lsrs	r3, r3, #4
 80045da:	f003 0201 	and.w	r2, r3, #1
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	fa02 f303 	lsl.w	r3, r2, r3
 80045e4:	69ba      	ldr	r2, [r7, #24]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	69ba      	ldr	r2, [r7, #24]
 80045ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f003 0303 	and.w	r3, r3, #3
 80045f8:	2b03      	cmp	r3, #3
 80045fa:	d017      	beq.n	800462c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	005b      	lsls	r3, r3, #1
 8004606:	2203      	movs	r2, #3
 8004608:	fa02 f303 	lsl.w	r3, r2, r3
 800460c:	43db      	mvns	r3, r3
 800460e:	69ba      	ldr	r2, [r7, #24]
 8004610:	4013      	ands	r3, r2
 8004612:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	689a      	ldr	r2, [r3, #8]
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	005b      	lsls	r3, r3, #1
 800461c:	fa02 f303 	lsl.w	r3, r2, r3
 8004620:	69ba      	ldr	r2, [r7, #24]
 8004622:	4313      	orrs	r3, r2
 8004624:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	69ba      	ldr	r2, [r7, #24]
 800462a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f003 0303 	and.w	r3, r3, #3
 8004634:	2b02      	cmp	r3, #2
 8004636:	d123      	bne.n	8004680 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	08da      	lsrs	r2, r3, #3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	3208      	adds	r2, #8
 8004640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004644:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	f003 0307 	and.w	r3, r3, #7
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	220f      	movs	r2, #15
 8004650:	fa02 f303 	lsl.w	r3, r2, r3
 8004654:	43db      	mvns	r3, r3
 8004656:	69ba      	ldr	r2, [r7, #24]
 8004658:	4013      	ands	r3, r2
 800465a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	691a      	ldr	r2, [r3, #16]
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	f003 0307 	and.w	r3, r3, #7
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	fa02 f303 	lsl.w	r3, r2, r3
 800466c:	69ba      	ldr	r2, [r7, #24]
 800466e:	4313      	orrs	r3, r2
 8004670:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	08da      	lsrs	r2, r3, #3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	3208      	adds	r2, #8
 800467a:	69b9      	ldr	r1, [r7, #24]
 800467c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	005b      	lsls	r3, r3, #1
 800468a:	2203      	movs	r2, #3
 800468c:	fa02 f303 	lsl.w	r3, r2, r3
 8004690:	43db      	mvns	r3, r3
 8004692:	69ba      	ldr	r2, [r7, #24]
 8004694:	4013      	ands	r3, r2
 8004696:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f003 0203 	and.w	r2, r3, #3
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	005b      	lsls	r3, r3, #1
 80046a4:	fa02 f303 	lsl.w	r3, r2, r3
 80046a8:	69ba      	ldr	r2, [r7, #24]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	69ba      	ldr	r2, [r7, #24]
 80046b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f000 80ae 	beq.w	800481e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046c2:	2300      	movs	r3, #0
 80046c4:	60fb      	str	r3, [r7, #12]
 80046c6:	4b5d      	ldr	r3, [pc, #372]	@ (800483c <HAL_GPIO_Init+0x300>)
 80046c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ca:	4a5c      	ldr	r2, [pc, #368]	@ (800483c <HAL_GPIO_Init+0x300>)
 80046cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80046d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80046d2:	4b5a      	ldr	r3, [pc, #360]	@ (800483c <HAL_GPIO_Init+0x300>)
 80046d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046da:	60fb      	str	r3, [r7, #12]
 80046dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046de:	4a58      	ldr	r2, [pc, #352]	@ (8004840 <HAL_GPIO_Init+0x304>)
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	089b      	lsrs	r3, r3, #2
 80046e4:	3302      	adds	r3, #2
 80046e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	f003 0303 	and.w	r3, r3, #3
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	220f      	movs	r2, #15
 80046f6:	fa02 f303 	lsl.w	r3, r2, r3
 80046fa:	43db      	mvns	r3, r3
 80046fc:	69ba      	ldr	r2, [r7, #24]
 80046fe:	4013      	ands	r3, r2
 8004700:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a4f      	ldr	r2, [pc, #316]	@ (8004844 <HAL_GPIO_Init+0x308>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d025      	beq.n	8004756 <HAL_GPIO_Init+0x21a>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a4e      	ldr	r2, [pc, #312]	@ (8004848 <HAL_GPIO_Init+0x30c>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d01f      	beq.n	8004752 <HAL_GPIO_Init+0x216>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a4d      	ldr	r2, [pc, #308]	@ (800484c <HAL_GPIO_Init+0x310>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d019      	beq.n	800474e <HAL_GPIO_Init+0x212>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a4c      	ldr	r2, [pc, #304]	@ (8004850 <HAL_GPIO_Init+0x314>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d013      	beq.n	800474a <HAL_GPIO_Init+0x20e>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a4b      	ldr	r2, [pc, #300]	@ (8004854 <HAL_GPIO_Init+0x318>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d00d      	beq.n	8004746 <HAL_GPIO_Init+0x20a>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a4a      	ldr	r2, [pc, #296]	@ (8004858 <HAL_GPIO_Init+0x31c>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d007      	beq.n	8004742 <HAL_GPIO_Init+0x206>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a49      	ldr	r2, [pc, #292]	@ (800485c <HAL_GPIO_Init+0x320>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d101      	bne.n	800473e <HAL_GPIO_Init+0x202>
 800473a:	2306      	movs	r3, #6
 800473c:	e00c      	b.n	8004758 <HAL_GPIO_Init+0x21c>
 800473e:	2307      	movs	r3, #7
 8004740:	e00a      	b.n	8004758 <HAL_GPIO_Init+0x21c>
 8004742:	2305      	movs	r3, #5
 8004744:	e008      	b.n	8004758 <HAL_GPIO_Init+0x21c>
 8004746:	2304      	movs	r3, #4
 8004748:	e006      	b.n	8004758 <HAL_GPIO_Init+0x21c>
 800474a:	2303      	movs	r3, #3
 800474c:	e004      	b.n	8004758 <HAL_GPIO_Init+0x21c>
 800474e:	2302      	movs	r3, #2
 8004750:	e002      	b.n	8004758 <HAL_GPIO_Init+0x21c>
 8004752:	2301      	movs	r3, #1
 8004754:	e000      	b.n	8004758 <HAL_GPIO_Init+0x21c>
 8004756:	2300      	movs	r3, #0
 8004758:	69fa      	ldr	r2, [r7, #28]
 800475a:	f002 0203 	and.w	r2, r2, #3
 800475e:	0092      	lsls	r2, r2, #2
 8004760:	4093      	lsls	r3, r2
 8004762:	69ba      	ldr	r2, [r7, #24]
 8004764:	4313      	orrs	r3, r2
 8004766:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004768:	4935      	ldr	r1, [pc, #212]	@ (8004840 <HAL_GPIO_Init+0x304>)
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	089b      	lsrs	r3, r3, #2
 800476e:	3302      	adds	r3, #2
 8004770:	69ba      	ldr	r2, [r7, #24]
 8004772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004776:	4b3a      	ldr	r3, [pc, #232]	@ (8004860 <HAL_GPIO_Init+0x324>)
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	43db      	mvns	r3, r3
 8004780:	69ba      	ldr	r2, [r7, #24]
 8004782:	4013      	ands	r3, r2
 8004784:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d003      	beq.n	800479a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004792:	69ba      	ldr	r2, [r7, #24]
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	4313      	orrs	r3, r2
 8004798:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800479a:	4a31      	ldr	r2, [pc, #196]	@ (8004860 <HAL_GPIO_Init+0x324>)
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80047a0:	4b2f      	ldr	r3, [pc, #188]	@ (8004860 <HAL_GPIO_Init+0x324>)
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	43db      	mvns	r3, r3
 80047aa:	69ba      	ldr	r2, [r7, #24]
 80047ac:	4013      	ands	r3, r2
 80047ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d003      	beq.n	80047c4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80047bc:	69ba      	ldr	r2, [r7, #24]
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80047c4:	4a26      	ldr	r2, [pc, #152]	@ (8004860 <HAL_GPIO_Init+0x324>)
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80047ca:	4b25      	ldr	r3, [pc, #148]	@ (8004860 <HAL_GPIO_Init+0x324>)
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	43db      	mvns	r3, r3
 80047d4:	69ba      	ldr	r2, [r7, #24]
 80047d6:	4013      	ands	r3, r2
 80047d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d003      	beq.n	80047ee <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80047e6:	69ba      	ldr	r2, [r7, #24]
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80047ee:	4a1c      	ldr	r2, [pc, #112]	@ (8004860 <HAL_GPIO_Init+0x324>)
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80047f4:	4b1a      	ldr	r3, [pc, #104]	@ (8004860 <HAL_GPIO_Init+0x324>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	43db      	mvns	r3, r3
 80047fe:	69ba      	ldr	r2, [r7, #24]
 8004800:	4013      	ands	r3, r2
 8004802:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d003      	beq.n	8004818 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004810:	69ba      	ldr	r2, [r7, #24]
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	4313      	orrs	r3, r2
 8004816:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004818:	4a11      	ldr	r2, [pc, #68]	@ (8004860 <HAL_GPIO_Init+0x324>)
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	3301      	adds	r3, #1
 8004822:	61fb      	str	r3, [r7, #28]
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	2b0f      	cmp	r3, #15
 8004828:	f67f ae96 	bls.w	8004558 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800482c:	bf00      	nop
 800482e:	bf00      	nop
 8004830:	3724      	adds	r7, #36	@ 0x24
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	40023800 	.word	0x40023800
 8004840:	40013800 	.word	0x40013800
 8004844:	40020000 	.word	0x40020000
 8004848:	40020400 	.word	0x40020400
 800484c:	40020800 	.word	0x40020800
 8004850:	40020c00 	.word	0x40020c00
 8004854:	40021000 	.word	0x40021000
 8004858:	40021400 	.word	0x40021400
 800485c:	40021800 	.word	0x40021800
 8004860:	40013c00 	.word	0x40013c00

08004864 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	460b      	mov	r3, r1
 800486e:	807b      	strh	r3, [r7, #2]
 8004870:	4613      	mov	r3, r2
 8004872:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004874:	787b      	ldrb	r3, [r7, #1]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d003      	beq.n	8004882 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800487a:	887a      	ldrh	r2, [r7, #2]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004880:	e003      	b.n	800488a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004882:	887b      	ldrh	r3, [r7, #2]
 8004884:	041a      	lsls	r2, r3, #16
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	619a      	str	r2, [r3, #24]
}
 800488a:	bf00      	nop
 800488c:	370c      	adds	r7, #12
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
	...

08004898 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d101      	bne.n	80048ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e0cc      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048ac:	4b68      	ldr	r3, [pc, #416]	@ (8004a50 <HAL_RCC_ClockConfig+0x1b8>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 030f 	and.w	r3, r3, #15
 80048b4:	683a      	ldr	r2, [r7, #0]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d90c      	bls.n	80048d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ba:	4b65      	ldr	r3, [pc, #404]	@ (8004a50 <HAL_RCC_ClockConfig+0x1b8>)
 80048bc:	683a      	ldr	r2, [r7, #0]
 80048be:	b2d2      	uxtb	r2, r2
 80048c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048c2:	4b63      	ldr	r3, [pc, #396]	@ (8004a50 <HAL_RCC_ClockConfig+0x1b8>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 030f 	and.w	r3, r3, #15
 80048ca:	683a      	ldr	r2, [r7, #0]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d001      	beq.n	80048d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e0b8      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0302 	and.w	r3, r3, #2
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d020      	beq.n	8004922 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0304 	and.w	r3, r3, #4
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d005      	beq.n	80048f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048ec:	4b59      	ldr	r3, [pc, #356]	@ (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	4a58      	ldr	r2, [pc, #352]	@ (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 80048f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80048f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0308 	and.w	r3, r3, #8
 8004900:	2b00      	cmp	r3, #0
 8004902:	d005      	beq.n	8004910 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004904:	4b53      	ldr	r3, [pc, #332]	@ (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	4a52      	ldr	r2, [pc, #328]	@ (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 800490a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800490e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004910:	4b50      	ldr	r3, [pc, #320]	@ (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	494d      	ldr	r1, [pc, #308]	@ (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 800491e:	4313      	orrs	r3, r2
 8004920:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b00      	cmp	r3, #0
 800492c:	d044      	beq.n	80049b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d107      	bne.n	8004946 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004936:	4b47      	ldr	r3, [pc, #284]	@ (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d119      	bne.n	8004976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e07f      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	2b02      	cmp	r3, #2
 800494c:	d003      	beq.n	8004956 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004952:	2b03      	cmp	r3, #3
 8004954:	d107      	bne.n	8004966 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004956:	4b3f      	ldr	r3, [pc, #252]	@ (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d109      	bne.n	8004976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e06f      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004966:	4b3b      	ldr	r3, [pc, #236]	@ (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d101      	bne.n	8004976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e067      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004976:	4b37      	ldr	r3, [pc, #220]	@ (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f023 0203 	bic.w	r2, r3, #3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	4934      	ldr	r1, [pc, #208]	@ (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 8004984:	4313      	orrs	r3, r2
 8004986:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004988:	f7ff f8e8 	bl	8003b5c <HAL_GetTick>
 800498c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800498e:	e00a      	b.n	80049a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004990:	f7ff f8e4 	bl	8003b5c <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800499e:	4293      	cmp	r3, r2
 80049a0:	d901      	bls.n	80049a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e04f      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049a6:	4b2b      	ldr	r3, [pc, #172]	@ (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f003 020c 	and.w	r2, r3, #12
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d1eb      	bne.n	8004990 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049b8:	4b25      	ldr	r3, [pc, #148]	@ (8004a50 <HAL_RCC_ClockConfig+0x1b8>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 030f 	and.w	r3, r3, #15
 80049c0:	683a      	ldr	r2, [r7, #0]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d20c      	bcs.n	80049e0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049c6:	4b22      	ldr	r3, [pc, #136]	@ (8004a50 <HAL_RCC_ClockConfig+0x1b8>)
 80049c8:	683a      	ldr	r2, [r7, #0]
 80049ca:	b2d2      	uxtb	r2, r2
 80049cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ce:	4b20      	ldr	r3, [pc, #128]	@ (8004a50 <HAL_RCC_ClockConfig+0x1b8>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 030f 	and.w	r3, r3, #15
 80049d6:	683a      	ldr	r2, [r7, #0]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d001      	beq.n	80049e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e032      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0304 	and.w	r3, r3, #4
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d008      	beq.n	80049fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049ec:	4b19      	ldr	r3, [pc, #100]	@ (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	4916      	ldr	r1, [pc, #88]	@ (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0308 	and.w	r3, r3, #8
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d009      	beq.n	8004a1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a0a:	4b12      	ldr	r3, [pc, #72]	@ (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	00db      	lsls	r3, r3, #3
 8004a18:	490e      	ldr	r1, [pc, #56]	@ (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a1e:	f000 f887 	bl	8004b30 <HAL_RCC_GetSysClockFreq>
 8004a22:	4602      	mov	r2, r0
 8004a24:	4b0b      	ldr	r3, [pc, #44]	@ (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	091b      	lsrs	r3, r3, #4
 8004a2a:	f003 030f 	and.w	r3, r3, #15
 8004a2e:	490a      	ldr	r1, [pc, #40]	@ (8004a58 <HAL_RCC_ClockConfig+0x1c0>)
 8004a30:	5ccb      	ldrb	r3, [r1, r3]
 8004a32:	fa22 f303 	lsr.w	r3, r2, r3
 8004a36:	4a09      	ldr	r2, [pc, #36]	@ (8004a5c <HAL_RCC_ClockConfig+0x1c4>)
 8004a38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004a3a:	4b09      	ldr	r3, [pc, #36]	@ (8004a60 <HAL_RCC_ClockConfig+0x1c8>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7fe fe0c 	bl	800365c <HAL_InitTick>

  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	40023c00 	.word	0x40023c00
 8004a54:	40023800 	.word	0x40023800
 8004a58:	0800da18 	.word	0x0800da18
 8004a5c:	20000010 	.word	0x20000010
 8004a60:	20000014 	.word	0x20000014

08004a64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a64:	b480      	push	{r7}
 8004a66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a68:	4b03      	ldr	r3, [pc, #12]	@ (8004a78 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	20000010 	.word	0x20000010

08004a7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a80:	f7ff fff0 	bl	8004a64 <HAL_RCC_GetHCLKFreq>
 8004a84:	4602      	mov	r2, r0
 8004a86:	4b05      	ldr	r3, [pc, #20]	@ (8004a9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	0a9b      	lsrs	r3, r3, #10
 8004a8c:	f003 0307 	and.w	r3, r3, #7
 8004a90:	4903      	ldr	r1, [pc, #12]	@ (8004aa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a92:	5ccb      	ldrb	r3, [r1, r3]
 8004a94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	40023800 	.word	0x40023800
 8004aa0:	0800da28 	.word	0x0800da28

08004aa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004aa8:	f7ff ffdc 	bl	8004a64 <HAL_RCC_GetHCLKFreq>
 8004aac:	4602      	mov	r2, r0
 8004aae:	4b05      	ldr	r3, [pc, #20]	@ (8004ac4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	0b5b      	lsrs	r3, r3, #13
 8004ab4:	f003 0307 	and.w	r3, r3, #7
 8004ab8:	4903      	ldr	r1, [pc, #12]	@ (8004ac8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004aba:	5ccb      	ldrb	r3, [r1, r3]
 8004abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	40023800 	.word	0x40023800
 8004ac8:	0800da28 	.word	0x0800da28

08004acc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	220f      	movs	r2, #15
 8004ada:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004adc:	4b12      	ldr	r3, [pc, #72]	@ (8004b28 <HAL_RCC_GetClockConfig+0x5c>)
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f003 0203 	and.w	r2, r3, #3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8004b28 <HAL_RCC_GetClockConfig+0x5c>)
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004af4:	4b0c      	ldr	r3, [pc, #48]	@ (8004b28 <HAL_RCC_GetClockConfig+0x5c>)
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004b00:	4b09      	ldr	r3, [pc, #36]	@ (8004b28 <HAL_RCC_GetClockConfig+0x5c>)
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	08db      	lsrs	r3, r3, #3
 8004b06:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004b0e:	4b07      	ldr	r3, [pc, #28]	@ (8004b2c <HAL_RCC_GetClockConfig+0x60>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 020f 	and.w	r2, r3, #15
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	601a      	str	r2, [r3, #0]
}
 8004b1a:	bf00      	nop
 8004b1c:	370c      	adds	r7, #12
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	40023800 	.word	0x40023800
 8004b2c:	40023c00 	.word	0x40023c00

08004b30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b34:	b0ae      	sub	sp, #184	@ 0xb8
 8004b36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004b44:	2300      	movs	r3, #0
 8004b46:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004b50:	2300      	movs	r3, #0
 8004b52:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b56:	4bcb      	ldr	r3, [pc, #812]	@ (8004e84 <HAL_RCC_GetSysClockFreq+0x354>)
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f003 030c 	and.w	r3, r3, #12
 8004b5e:	2b0c      	cmp	r3, #12
 8004b60:	f200 8206 	bhi.w	8004f70 <HAL_RCC_GetSysClockFreq+0x440>
 8004b64:	a201      	add	r2, pc, #4	@ (adr r2, 8004b6c <HAL_RCC_GetSysClockFreq+0x3c>)
 8004b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b6a:	bf00      	nop
 8004b6c:	08004ba1 	.word	0x08004ba1
 8004b70:	08004f71 	.word	0x08004f71
 8004b74:	08004f71 	.word	0x08004f71
 8004b78:	08004f71 	.word	0x08004f71
 8004b7c:	08004ba9 	.word	0x08004ba9
 8004b80:	08004f71 	.word	0x08004f71
 8004b84:	08004f71 	.word	0x08004f71
 8004b88:	08004f71 	.word	0x08004f71
 8004b8c:	08004bb1 	.word	0x08004bb1
 8004b90:	08004f71 	.word	0x08004f71
 8004b94:	08004f71 	.word	0x08004f71
 8004b98:	08004f71 	.word	0x08004f71
 8004b9c:	08004da1 	.word	0x08004da1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ba0:	4bb9      	ldr	r3, [pc, #740]	@ (8004e88 <HAL_RCC_GetSysClockFreq+0x358>)
 8004ba2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004ba6:	e1e7      	b.n	8004f78 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ba8:	4bb8      	ldr	r3, [pc, #736]	@ (8004e8c <HAL_RCC_GetSysClockFreq+0x35c>)
 8004baa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004bae:	e1e3      	b.n	8004f78 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bb0:	4bb4      	ldr	r3, [pc, #720]	@ (8004e84 <HAL_RCC_GetSysClockFreq+0x354>)
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004bb8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bbc:	4bb1      	ldr	r3, [pc, #708]	@ (8004e84 <HAL_RCC_GetSysClockFreq+0x354>)
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d071      	beq.n	8004cac <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bc8:	4bae      	ldr	r3, [pc, #696]	@ (8004e84 <HAL_RCC_GetSysClockFreq+0x354>)
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	099b      	lsrs	r3, r3, #6
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004bd4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004bd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004bdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004be0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004be4:	2300      	movs	r3, #0
 8004be6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004bea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004bee:	4622      	mov	r2, r4
 8004bf0:	462b      	mov	r3, r5
 8004bf2:	f04f 0000 	mov.w	r0, #0
 8004bf6:	f04f 0100 	mov.w	r1, #0
 8004bfa:	0159      	lsls	r1, r3, #5
 8004bfc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c00:	0150      	lsls	r0, r2, #5
 8004c02:	4602      	mov	r2, r0
 8004c04:	460b      	mov	r3, r1
 8004c06:	4621      	mov	r1, r4
 8004c08:	1a51      	subs	r1, r2, r1
 8004c0a:	6439      	str	r1, [r7, #64]	@ 0x40
 8004c0c:	4629      	mov	r1, r5
 8004c0e:	eb63 0301 	sbc.w	r3, r3, r1
 8004c12:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c14:	f04f 0200 	mov.w	r2, #0
 8004c18:	f04f 0300 	mov.w	r3, #0
 8004c1c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004c20:	4649      	mov	r1, r9
 8004c22:	018b      	lsls	r3, r1, #6
 8004c24:	4641      	mov	r1, r8
 8004c26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c2a:	4641      	mov	r1, r8
 8004c2c:	018a      	lsls	r2, r1, #6
 8004c2e:	4641      	mov	r1, r8
 8004c30:	1a51      	subs	r1, r2, r1
 8004c32:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004c34:	4649      	mov	r1, r9
 8004c36:	eb63 0301 	sbc.w	r3, r3, r1
 8004c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c3c:	f04f 0200 	mov.w	r2, #0
 8004c40:	f04f 0300 	mov.w	r3, #0
 8004c44:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004c48:	4649      	mov	r1, r9
 8004c4a:	00cb      	lsls	r3, r1, #3
 8004c4c:	4641      	mov	r1, r8
 8004c4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c52:	4641      	mov	r1, r8
 8004c54:	00ca      	lsls	r2, r1, #3
 8004c56:	4610      	mov	r0, r2
 8004c58:	4619      	mov	r1, r3
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	4622      	mov	r2, r4
 8004c5e:	189b      	adds	r3, r3, r2
 8004c60:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c62:	462b      	mov	r3, r5
 8004c64:	460a      	mov	r2, r1
 8004c66:	eb42 0303 	adc.w	r3, r2, r3
 8004c6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c6c:	f04f 0200 	mov.w	r2, #0
 8004c70:	f04f 0300 	mov.w	r3, #0
 8004c74:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004c78:	4629      	mov	r1, r5
 8004c7a:	024b      	lsls	r3, r1, #9
 8004c7c:	4621      	mov	r1, r4
 8004c7e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c82:	4621      	mov	r1, r4
 8004c84:	024a      	lsls	r2, r1, #9
 8004c86:	4610      	mov	r0, r2
 8004c88:	4619      	mov	r1, r3
 8004c8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004c94:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004c98:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004c9c:	f7fc f80e 	bl	8000cbc <__aeabi_uldivmod>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	460b      	mov	r3, r1
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004caa:	e067      	b.n	8004d7c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cac:	4b75      	ldr	r3, [pc, #468]	@ (8004e84 <HAL_RCC_GetSysClockFreq+0x354>)
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	099b      	lsrs	r3, r3, #6
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004cb8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004cbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004cc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cc4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004cca:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004cce:	4622      	mov	r2, r4
 8004cd0:	462b      	mov	r3, r5
 8004cd2:	f04f 0000 	mov.w	r0, #0
 8004cd6:	f04f 0100 	mov.w	r1, #0
 8004cda:	0159      	lsls	r1, r3, #5
 8004cdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ce0:	0150      	lsls	r0, r2, #5
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	4621      	mov	r1, r4
 8004ce8:	1a51      	subs	r1, r2, r1
 8004cea:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004cec:	4629      	mov	r1, r5
 8004cee:	eb63 0301 	sbc.w	r3, r3, r1
 8004cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cf4:	f04f 0200 	mov.w	r2, #0
 8004cf8:	f04f 0300 	mov.w	r3, #0
 8004cfc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004d00:	4649      	mov	r1, r9
 8004d02:	018b      	lsls	r3, r1, #6
 8004d04:	4641      	mov	r1, r8
 8004d06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d0a:	4641      	mov	r1, r8
 8004d0c:	018a      	lsls	r2, r1, #6
 8004d0e:	4641      	mov	r1, r8
 8004d10:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d14:	4649      	mov	r1, r9
 8004d16:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d1a:	f04f 0200 	mov.w	r2, #0
 8004d1e:	f04f 0300 	mov.w	r3, #0
 8004d22:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d26:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d2a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d2e:	4692      	mov	sl, r2
 8004d30:	469b      	mov	fp, r3
 8004d32:	4623      	mov	r3, r4
 8004d34:	eb1a 0303 	adds.w	r3, sl, r3
 8004d38:	623b      	str	r3, [r7, #32]
 8004d3a:	462b      	mov	r3, r5
 8004d3c:	eb4b 0303 	adc.w	r3, fp, r3
 8004d40:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d42:	f04f 0200 	mov.w	r2, #0
 8004d46:	f04f 0300 	mov.w	r3, #0
 8004d4a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004d4e:	4629      	mov	r1, r5
 8004d50:	028b      	lsls	r3, r1, #10
 8004d52:	4621      	mov	r1, r4
 8004d54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d58:	4621      	mov	r1, r4
 8004d5a:	028a      	lsls	r2, r1, #10
 8004d5c:	4610      	mov	r0, r2
 8004d5e:	4619      	mov	r1, r3
 8004d60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004d64:	2200      	movs	r2, #0
 8004d66:	673b      	str	r3, [r7, #112]	@ 0x70
 8004d68:	677a      	str	r2, [r7, #116]	@ 0x74
 8004d6a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004d6e:	f7fb ffa5 	bl	8000cbc <__aeabi_uldivmod>
 8004d72:	4602      	mov	r2, r0
 8004d74:	460b      	mov	r3, r1
 8004d76:	4613      	mov	r3, r2
 8004d78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004d7c:	4b41      	ldr	r3, [pc, #260]	@ (8004e84 <HAL_RCC_GetSysClockFreq+0x354>)
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	0c1b      	lsrs	r3, r3, #16
 8004d82:	f003 0303 	and.w	r3, r3, #3
 8004d86:	3301      	adds	r3, #1
 8004d88:	005b      	lsls	r3, r3, #1
 8004d8a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8004d8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004d92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004d9e:	e0eb      	b.n	8004f78 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004da0:	4b38      	ldr	r3, [pc, #224]	@ (8004e84 <HAL_RCC_GetSysClockFreq+0x354>)
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004da8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004dac:	4b35      	ldr	r3, [pc, #212]	@ (8004e84 <HAL_RCC_GetSysClockFreq+0x354>)
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d06b      	beq.n	8004e90 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004db8:	4b32      	ldr	r3, [pc, #200]	@ (8004e84 <HAL_RCC_GetSysClockFreq+0x354>)
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	099b      	lsrs	r3, r3, #6
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004dc2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004dc4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004dc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dca:	663b      	str	r3, [r7, #96]	@ 0x60
 8004dcc:	2300      	movs	r3, #0
 8004dce:	667b      	str	r3, [r7, #100]	@ 0x64
 8004dd0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004dd4:	4622      	mov	r2, r4
 8004dd6:	462b      	mov	r3, r5
 8004dd8:	f04f 0000 	mov.w	r0, #0
 8004ddc:	f04f 0100 	mov.w	r1, #0
 8004de0:	0159      	lsls	r1, r3, #5
 8004de2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004de6:	0150      	lsls	r0, r2, #5
 8004de8:	4602      	mov	r2, r0
 8004dea:	460b      	mov	r3, r1
 8004dec:	4621      	mov	r1, r4
 8004dee:	1a51      	subs	r1, r2, r1
 8004df0:	61b9      	str	r1, [r7, #24]
 8004df2:	4629      	mov	r1, r5
 8004df4:	eb63 0301 	sbc.w	r3, r3, r1
 8004df8:	61fb      	str	r3, [r7, #28]
 8004dfa:	f04f 0200 	mov.w	r2, #0
 8004dfe:	f04f 0300 	mov.w	r3, #0
 8004e02:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004e06:	4659      	mov	r1, fp
 8004e08:	018b      	lsls	r3, r1, #6
 8004e0a:	4651      	mov	r1, sl
 8004e0c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e10:	4651      	mov	r1, sl
 8004e12:	018a      	lsls	r2, r1, #6
 8004e14:	4651      	mov	r1, sl
 8004e16:	ebb2 0801 	subs.w	r8, r2, r1
 8004e1a:	4659      	mov	r1, fp
 8004e1c:	eb63 0901 	sbc.w	r9, r3, r1
 8004e20:	f04f 0200 	mov.w	r2, #0
 8004e24:	f04f 0300 	mov.w	r3, #0
 8004e28:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e2c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e30:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e34:	4690      	mov	r8, r2
 8004e36:	4699      	mov	r9, r3
 8004e38:	4623      	mov	r3, r4
 8004e3a:	eb18 0303 	adds.w	r3, r8, r3
 8004e3e:	613b      	str	r3, [r7, #16]
 8004e40:	462b      	mov	r3, r5
 8004e42:	eb49 0303 	adc.w	r3, r9, r3
 8004e46:	617b      	str	r3, [r7, #20]
 8004e48:	f04f 0200 	mov.w	r2, #0
 8004e4c:	f04f 0300 	mov.w	r3, #0
 8004e50:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004e54:	4629      	mov	r1, r5
 8004e56:	024b      	lsls	r3, r1, #9
 8004e58:	4621      	mov	r1, r4
 8004e5a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e5e:	4621      	mov	r1, r4
 8004e60:	024a      	lsls	r2, r1, #9
 8004e62:	4610      	mov	r0, r2
 8004e64:	4619      	mov	r1, r3
 8004e66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004e6e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004e70:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004e74:	f7fb ff22 	bl	8000cbc <__aeabi_uldivmod>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	460b      	mov	r3, r1
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004e82:	e065      	b.n	8004f50 <HAL_RCC_GetSysClockFreq+0x420>
 8004e84:	40023800 	.word	0x40023800
 8004e88:	00f42400 	.word	0x00f42400
 8004e8c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e90:	4b3d      	ldr	r3, [pc, #244]	@ (8004f88 <HAL_RCC_GetSysClockFreq+0x458>)
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	099b      	lsrs	r3, r3, #6
 8004e96:	2200      	movs	r2, #0
 8004e98:	4618      	mov	r0, r3
 8004e9a:	4611      	mov	r1, r2
 8004e9c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004ea0:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ea6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004eaa:	4642      	mov	r2, r8
 8004eac:	464b      	mov	r3, r9
 8004eae:	f04f 0000 	mov.w	r0, #0
 8004eb2:	f04f 0100 	mov.w	r1, #0
 8004eb6:	0159      	lsls	r1, r3, #5
 8004eb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ebc:	0150      	lsls	r0, r2, #5
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	4641      	mov	r1, r8
 8004ec4:	1a51      	subs	r1, r2, r1
 8004ec6:	60b9      	str	r1, [r7, #8]
 8004ec8:	4649      	mov	r1, r9
 8004eca:	eb63 0301 	sbc.w	r3, r3, r1
 8004ece:	60fb      	str	r3, [r7, #12]
 8004ed0:	f04f 0200 	mov.w	r2, #0
 8004ed4:	f04f 0300 	mov.w	r3, #0
 8004ed8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004edc:	4659      	mov	r1, fp
 8004ede:	018b      	lsls	r3, r1, #6
 8004ee0:	4651      	mov	r1, sl
 8004ee2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ee6:	4651      	mov	r1, sl
 8004ee8:	018a      	lsls	r2, r1, #6
 8004eea:	4651      	mov	r1, sl
 8004eec:	1a54      	subs	r4, r2, r1
 8004eee:	4659      	mov	r1, fp
 8004ef0:	eb63 0501 	sbc.w	r5, r3, r1
 8004ef4:	f04f 0200 	mov.w	r2, #0
 8004ef8:	f04f 0300 	mov.w	r3, #0
 8004efc:	00eb      	lsls	r3, r5, #3
 8004efe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f02:	00e2      	lsls	r2, r4, #3
 8004f04:	4614      	mov	r4, r2
 8004f06:	461d      	mov	r5, r3
 8004f08:	4643      	mov	r3, r8
 8004f0a:	18e3      	adds	r3, r4, r3
 8004f0c:	603b      	str	r3, [r7, #0]
 8004f0e:	464b      	mov	r3, r9
 8004f10:	eb45 0303 	adc.w	r3, r5, r3
 8004f14:	607b      	str	r3, [r7, #4]
 8004f16:	f04f 0200 	mov.w	r2, #0
 8004f1a:	f04f 0300 	mov.w	r3, #0
 8004f1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f22:	4629      	mov	r1, r5
 8004f24:	028b      	lsls	r3, r1, #10
 8004f26:	4621      	mov	r1, r4
 8004f28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f2c:	4621      	mov	r1, r4
 8004f2e:	028a      	lsls	r2, r1, #10
 8004f30:	4610      	mov	r0, r2
 8004f32:	4619      	mov	r1, r3
 8004f34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f38:	2200      	movs	r2, #0
 8004f3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f3c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004f3e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004f42:	f7fb febb 	bl	8000cbc <__aeabi_uldivmod>
 8004f46:	4602      	mov	r2, r0
 8004f48:	460b      	mov	r3, r1
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004f50:	4b0d      	ldr	r3, [pc, #52]	@ (8004f88 <HAL_RCC_GetSysClockFreq+0x458>)
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	0f1b      	lsrs	r3, r3, #28
 8004f56:	f003 0307 	and.w	r3, r3, #7
 8004f5a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8004f5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004f62:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004f6e:	e003      	b.n	8004f78 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f70:	4b06      	ldr	r3, [pc, #24]	@ (8004f8c <HAL_RCC_GetSysClockFreq+0x45c>)
 8004f72:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004f76:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f78:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	37b8      	adds	r7, #184	@ 0xb8
 8004f80:	46bd      	mov	sp, r7
 8004f82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f86:	bf00      	nop
 8004f88:	40023800 	.word	0x40023800
 8004f8c:	00f42400 	.word	0x00f42400

08004f90 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b086      	sub	sp, #24
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d101      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e28d      	b.n	80054be <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0301 	and.w	r3, r3, #1
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	f000 8083 	beq.w	80050b6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004fb0:	4b94      	ldr	r3, [pc, #592]	@ (8005204 <HAL_RCC_OscConfig+0x274>)
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	f003 030c 	and.w	r3, r3, #12
 8004fb8:	2b04      	cmp	r3, #4
 8004fba:	d019      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004fbc:	4b91      	ldr	r3, [pc, #580]	@ (8005204 <HAL_RCC_OscConfig+0x274>)
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f003 030c 	and.w	r3, r3, #12
        || \
 8004fc4:	2b08      	cmp	r3, #8
 8004fc6:	d106      	bne.n	8004fd6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004fc8:	4b8e      	ldr	r3, [pc, #568]	@ (8005204 <HAL_RCC_OscConfig+0x274>)
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fd0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fd4:	d00c      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fd6:	4b8b      	ldr	r3, [pc, #556]	@ (8005204 <HAL_RCC_OscConfig+0x274>)
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004fde:	2b0c      	cmp	r3, #12
 8004fe0:	d112      	bne.n	8005008 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fe2:	4b88      	ldr	r3, [pc, #544]	@ (8005204 <HAL_RCC_OscConfig+0x274>)
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fee:	d10b      	bne.n	8005008 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ff0:	4b84      	ldr	r3, [pc, #528]	@ (8005204 <HAL_RCC_OscConfig+0x274>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d05b      	beq.n	80050b4 <HAL_RCC_OscConfig+0x124>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d157      	bne.n	80050b4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e25a      	b.n	80054be <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005010:	d106      	bne.n	8005020 <HAL_RCC_OscConfig+0x90>
 8005012:	4b7c      	ldr	r3, [pc, #496]	@ (8005204 <HAL_RCC_OscConfig+0x274>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a7b      	ldr	r2, [pc, #492]	@ (8005204 <HAL_RCC_OscConfig+0x274>)
 8005018:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800501c:	6013      	str	r3, [r2, #0]
 800501e:	e01d      	b.n	800505c <HAL_RCC_OscConfig+0xcc>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005028:	d10c      	bne.n	8005044 <HAL_RCC_OscConfig+0xb4>
 800502a:	4b76      	ldr	r3, [pc, #472]	@ (8005204 <HAL_RCC_OscConfig+0x274>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a75      	ldr	r2, [pc, #468]	@ (8005204 <HAL_RCC_OscConfig+0x274>)
 8005030:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005034:	6013      	str	r3, [r2, #0]
 8005036:	4b73      	ldr	r3, [pc, #460]	@ (8005204 <HAL_RCC_OscConfig+0x274>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a72      	ldr	r2, [pc, #456]	@ (8005204 <HAL_RCC_OscConfig+0x274>)
 800503c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005040:	6013      	str	r3, [r2, #0]
 8005042:	e00b      	b.n	800505c <HAL_RCC_OscConfig+0xcc>
 8005044:	4b6f      	ldr	r3, [pc, #444]	@ (8005204 <HAL_RCC_OscConfig+0x274>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a6e      	ldr	r2, [pc, #440]	@ (8005204 <HAL_RCC_OscConfig+0x274>)
 800504a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800504e:	6013      	str	r3, [r2, #0]
 8005050:	4b6c      	ldr	r3, [pc, #432]	@ (8005204 <HAL_RCC_OscConfig+0x274>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a6b      	ldr	r2, [pc, #428]	@ (8005204 <HAL_RCC_OscConfig+0x274>)
 8005056:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800505a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d013      	beq.n	800508c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005064:	f7fe fd7a 	bl	8003b5c <HAL_GetTick>
 8005068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800506a:	e008      	b.n	800507e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800506c:	f7fe fd76 	bl	8003b5c <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	2b64      	cmp	r3, #100	@ 0x64
 8005078:	d901      	bls.n	800507e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e21f      	b.n	80054be <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800507e:	4b61      	ldr	r3, [pc, #388]	@ (8005204 <HAL_RCC_OscConfig+0x274>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d0f0      	beq.n	800506c <HAL_RCC_OscConfig+0xdc>
 800508a:	e014      	b.n	80050b6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800508c:	f7fe fd66 	bl	8003b5c <HAL_GetTick>
 8005090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005092:	e008      	b.n	80050a6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005094:	f7fe fd62 	bl	8003b5c <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	2b64      	cmp	r3, #100	@ 0x64
 80050a0:	d901      	bls.n	80050a6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e20b      	b.n	80054be <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050a6:	4b57      	ldr	r3, [pc, #348]	@ (8005204 <HAL_RCC_OscConfig+0x274>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d1f0      	bne.n	8005094 <HAL_RCC_OscConfig+0x104>
 80050b2:	e000      	b.n	80050b6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0302 	and.w	r3, r3, #2
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d06f      	beq.n	80051a2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80050c2:	4b50      	ldr	r3, [pc, #320]	@ (8005204 <HAL_RCC_OscConfig+0x274>)
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f003 030c 	and.w	r3, r3, #12
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d017      	beq.n	80050fe <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80050ce:	4b4d      	ldr	r3, [pc, #308]	@ (8005204 <HAL_RCC_OscConfig+0x274>)
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f003 030c 	and.w	r3, r3, #12
        || \
 80050d6:	2b08      	cmp	r3, #8
 80050d8:	d105      	bne.n	80050e6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80050da:	4b4a      	ldr	r3, [pc, #296]	@ (8005204 <HAL_RCC_OscConfig+0x274>)
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00b      	beq.n	80050fe <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050e6:	4b47      	ldr	r3, [pc, #284]	@ (8005204 <HAL_RCC_OscConfig+0x274>)
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80050ee:	2b0c      	cmp	r3, #12
 80050f0:	d11c      	bne.n	800512c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050f2:	4b44      	ldr	r3, [pc, #272]	@ (8005204 <HAL_RCC_OscConfig+0x274>)
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d116      	bne.n	800512c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050fe:	4b41      	ldr	r3, [pc, #260]	@ (8005204 <HAL_RCC_OscConfig+0x274>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d005      	beq.n	8005116 <HAL_RCC_OscConfig+0x186>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	2b01      	cmp	r3, #1
 8005110:	d001      	beq.n	8005116 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e1d3      	b.n	80054be <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005116:	4b3b      	ldr	r3, [pc, #236]	@ (8005204 <HAL_RCC_OscConfig+0x274>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	00db      	lsls	r3, r3, #3
 8005124:	4937      	ldr	r1, [pc, #220]	@ (8005204 <HAL_RCC_OscConfig+0x274>)
 8005126:	4313      	orrs	r3, r2
 8005128:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800512a:	e03a      	b.n	80051a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d020      	beq.n	8005176 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005134:	4b34      	ldr	r3, [pc, #208]	@ (8005208 <HAL_RCC_OscConfig+0x278>)
 8005136:	2201      	movs	r2, #1
 8005138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800513a:	f7fe fd0f 	bl	8003b5c <HAL_GetTick>
 800513e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005140:	e008      	b.n	8005154 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005142:	f7fe fd0b 	bl	8003b5c <HAL_GetTick>
 8005146:	4602      	mov	r2, r0
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	2b02      	cmp	r3, #2
 800514e:	d901      	bls.n	8005154 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e1b4      	b.n	80054be <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005154:	4b2b      	ldr	r3, [pc, #172]	@ (8005204 <HAL_RCC_OscConfig+0x274>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0302 	and.w	r3, r3, #2
 800515c:	2b00      	cmp	r3, #0
 800515e:	d0f0      	beq.n	8005142 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005160:	4b28      	ldr	r3, [pc, #160]	@ (8005204 <HAL_RCC_OscConfig+0x274>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	00db      	lsls	r3, r3, #3
 800516e:	4925      	ldr	r1, [pc, #148]	@ (8005204 <HAL_RCC_OscConfig+0x274>)
 8005170:	4313      	orrs	r3, r2
 8005172:	600b      	str	r3, [r1, #0]
 8005174:	e015      	b.n	80051a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005176:	4b24      	ldr	r3, [pc, #144]	@ (8005208 <HAL_RCC_OscConfig+0x278>)
 8005178:	2200      	movs	r2, #0
 800517a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800517c:	f7fe fcee 	bl	8003b5c <HAL_GetTick>
 8005180:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005182:	e008      	b.n	8005196 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005184:	f7fe fcea 	bl	8003b5c <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	2b02      	cmp	r3, #2
 8005190:	d901      	bls.n	8005196 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e193      	b.n	80054be <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005196:	4b1b      	ldr	r3, [pc, #108]	@ (8005204 <HAL_RCC_OscConfig+0x274>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0302 	and.w	r3, r3, #2
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1f0      	bne.n	8005184 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0308 	and.w	r3, r3, #8
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d036      	beq.n	800521c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d016      	beq.n	80051e4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051b6:	4b15      	ldr	r3, [pc, #84]	@ (800520c <HAL_RCC_OscConfig+0x27c>)
 80051b8:	2201      	movs	r2, #1
 80051ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051bc:	f7fe fcce 	bl	8003b5c <HAL_GetTick>
 80051c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051c2:	e008      	b.n	80051d6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051c4:	f7fe fcca 	bl	8003b5c <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d901      	bls.n	80051d6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e173      	b.n	80054be <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051d6:	4b0b      	ldr	r3, [pc, #44]	@ (8005204 <HAL_RCC_OscConfig+0x274>)
 80051d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051da:	f003 0302 	and.w	r3, r3, #2
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d0f0      	beq.n	80051c4 <HAL_RCC_OscConfig+0x234>
 80051e2:	e01b      	b.n	800521c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051e4:	4b09      	ldr	r3, [pc, #36]	@ (800520c <HAL_RCC_OscConfig+0x27c>)
 80051e6:	2200      	movs	r2, #0
 80051e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ea:	f7fe fcb7 	bl	8003b5c <HAL_GetTick>
 80051ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051f0:	e00e      	b.n	8005210 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051f2:	f7fe fcb3 	bl	8003b5c <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d907      	bls.n	8005210 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e15c      	b.n	80054be <HAL_RCC_OscConfig+0x52e>
 8005204:	40023800 	.word	0x40023800
 8005208:	42470000 	.word	0x42470000
 800520c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005210:	4b8a      	ldr	r3, [pc, #552]	@ (800543c <HAL_RCC_OscConfig+0x4ac>)
 8005212:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005214:	f003 0302 	and.w	r3, r3, #2
 8005218:	2b00      	cmp	r3, #0
 800521a:	d1ea      	bne.n	80051f2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0304 	and.w	r3, r3, #4
 8005224:	2b00      	cmp	r3, #0
 8005226:	f000 8097 	beq.w	8005358 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800522a:	2300      	movs	r3, #0
 800522c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800522e:	4b83      	ldr	r3, [pc, #524]	@ (800543c <HAL_RCC_OscConfig+0x4ac>)
 8005230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005232:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d10f      	bne.n	800525a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800523a:	2300      	movs	r3, #0
 800523c:	60bb      	str	r3, [r7, #8]
 800523e:	4b7f      	ldr	r3, [pc, #508]	@ (800543c <HAL_RCC_OscConfig+0x4ac>)
 8005240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005242:	4a7e      	ldr	r2, [pc, #504]	@ (800543c <HAL_RCC_OscConfig+0x4ac>)
 8005244:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005248:	6413      	str	r3, [r2, #64]	@ 0x40
 800524a:	4b7c      	ldr	r3, [pc, #496]	@ (800543c <HAL_RCC_OscConfig+0x4ac>)
 800524c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800524e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005252:	60bb      	str	r3, [r7, #8]
 8005254:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005256:	2301      	movs	r3, #1
 8005258:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800525a:	4b79      	ldr	r3, [pc, #484]	@ (8005440 <HAL_RCC_OscConfig+0x4b0>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005262:	2b00      	cmp	r3, #0
 8005264:	d118      	bne.n	8005298 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005266:	4b76      	ldr	r3, [pc, #472]	@ (8005440 <HAL_RCC_OscConfig+0x4b0>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a75      	ldr	r2, [pc, #468]	@ (8005440 <HAL_RCC_OscConfig+0x4b0>)
 800526c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005270:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005272:	f7fe fc73 	bl	8003b5c <HAL_GetTick>
 8005276:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005278:	e008      	b.n	800528c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800527a:	f7fe fc6f 	bl	8003b5c <HAL_GetTick>
 800527e:	4602      	mov	r2, r0
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	2b02      	cmp	r3, #2
 8005286:	d901      	bls.n	800528c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	e118      	b.n	80054be <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800528c:	4b6c      	ldr	r3, [pc, #432]	@ (8005440 <HAL_RCC_OscConfig+0x4b0>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005294:	2b00      	cmp	r3, #0
 8005296:	d0f0      	beq.n	800527a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	2b01      	cmp	r3, #1
 800529e:	d106      	bne.n	80052ae <HAL_RCC_OscConfig+0x31e>
 80052a0:	4b66      	ldr	r3, [pc, #408]	@ (800543c <HAL_RCC_OscConfig+0x4ac>)
 80052a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052a4:	4a65      	ldr	r2, [pc, #404]	@ (800543c <HAL_RCC_OscConfig+0x4ac>)
 80052a6:	f043 0301 	orr.w	r3, r3, #1
 80052aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80052ac:	e01c      	b.n	80052e8 <HAL_RCC_OscConfig+0x358>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	2b05      	cmp	r3, #5
 80052b4:	d10c      	bne.n	80052d0 <HAL_RCC_OscConfig+0x340>
 80052b6:	4b61      	ldr	r3, [pc, #388]	@ (800543c <HAL_RCC_OscConfig+0x4ac>)
 80052b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052ba:	4a60      	ldr	r2, [pc, #384]	@ (800543c <HAL_RCC_OscConfig+0x4ac>)
 80052bc:	f043 0304 	orr.w	r3, r3, #4
 80052c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80052c2:	4b5e      	ldr	r3, [pc, #376]	@ (800543c <HAL_RCC_OscConfig+0x4ac>)
 80052c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052c6:	4a5d      	ldr	r2, [pc, #372]	@ (800543c <HAL_RCC_OscConfig+0x4ac>)
 80052c8:	f043 0301 	orr.w	r3, r3, #1
 80052cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80052ce:	e00b      	b.n	80052e8 <HAL_RCC_OscConfig+0x358>
 80052d0:	4b5a      	ldr	r3, [pc, #360]	@ (800543c <HAL_RCC_OscConfig+0x4ac>)
 80052d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052d4:	4a59      	ldr	r2, [pc, #356]	@ (800543c <HAL_RCC_OscConfig+0x4ac>)
 80052d6:	f023 0301 	bic.w	r3, r3, #1
 80052da:	6713      	str	r3, [r2, #112]	@ 0x70
 80052dc:	4b57      	ldr	r3, [pc, #348]	@ (800543c <HAL_RCC_OscConfig+0x4ac>)
 80052de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052e0:	4a56      	ldr	r2, [pc, #344]	@ (800543c <HAL_RCC_OscConfig+0x4ac>)
 80052e2:	f023 0304 	bic.w	r3, r3, #4
 80052e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d015      	beq.n	800531c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052f0:	f7fe fc34 	bl	8003b5c <HAL_GetTick>
 80052f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052f6:	e00a      	b.n	800530e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052f8:	f7fe fc30 	bl	8003b5c <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005306:	4293      	cmp	r3, r2
 8005308:	d901      	bls.n	800530e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e0d7      	b.n	80054be <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800530e:	4b4b      	ldr	r3, [pc, #300]	@ (800543c <HAL_RCC_OscConfig+0x4ac>)
 8005310:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005312:	f003 0302 	and.w	r3, r3, #2
 8005316:	2b00      	cmp	r3, #0
 8005318:	d0ee      	beq.n	80052f8 <HAL_RCC_OscConfig+0x368>
 800531a:	e014      	b.n	8005346 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800531c:	f7fe fc1e 	bl	8003b5c <HAL_GetTick>
 8005320:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005322:	e00a      	b.n	800533a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005324:	f7fe fc1a 	bl	8003b5c <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005332:	4293      	cmp	r3, r2
 8005334:	d901      	bls.n	800533a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e0c1      	b.n	80054be <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800533a:	4b40      	ldr	r3, [pc, #256]	@ (800543c <HAL_RCC_OscConfig+0x4ac>)
 800533c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800533e:	f003 0302 	and.w	r3, r3, #2
 8005342:	2b00      	cmp	r3, #0
 8005344:	d1ee      	bne.n	8005324 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005346:	7dfb      	ldrb	r3, [r7, #23]
 8005348:	2b01      	cmp	r3, #1
 800534a:	d105      	bne.n	8005358 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800534c:	4b3b      	ldr	r3, [pc, #236]	@ (800543c <HAL_RCC_OscConfig+0x4ac>)
 800534e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005350:	4a3a      	ldr	r2, [pc, #232]	@ (800543c <HAL_RCC_OscConfig+0x4ac>)
 8005352:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005356:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	699b      	ldr	r3, [r3, #24]
 800535c:	2b00      	cmp	r3, #0
 800535e:	f000 80ad 	beq.w	80054bc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005362:	4b36      	ldr	r3, [pc, #216]	@ (800543c <HAL_RCC_OscConfig+0x4ac>)
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	f003 030c 	and.w	r3, r3, #12
 800536a:	2b08      	cmp	r3, #8
 800536c:	d060      	beq.n	8005430 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	699b      	ldr	r3, [r3, #24]
 8005372:	2b02      	cmp	r3, #2
 8005374:	d145      	bne.n	8005402 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005376:	4b33      	ldr	r3, [pc, #204]	@ (8005444 <HAL_RCC_OscConfig+0x4b4>)
 8005378:	2200      	movs	r2, #0
 800537a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800537c:	f7fe fbee 	bl	8003b5c <HAL_GetTick>
 8005380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005382:	e008      	b.n	8005396 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005384:	f7fe fbea 	bl	8003b5c <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	2b02      	cmp	r3, #2
 8005390:	d901      	bls.n	8005396 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e093      	b.n	80054be <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005396:	4b29      	ldr	r3, [pc, #164]	@ (800543c <HAL_RCC_OscConfig+0x4ac>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1f0      	bne.n	8005384 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	69da      	ldr	r2, [r3, #28]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a1b      	ldr	r3, [r3, #32]
 80053aa:	431a      	orrs	r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b0:	019b      	lsls	r3, r3, #6
 80053b2:	431a      	orrs	r2, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053b8:	085b      	lsrs	r3, r3, #1
 80053ba:	3b01      	subs	r3, #1
 80053bc:	041b      	lsls	r3, r3, #16
 80053be:	431a      	orrs	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053c4:	061b      	lsls	r3, r3, #24
 80053c6:	431a      	orrs	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053cc:	071b      	lsls	r3, r3, #28
 80053ce:	491b      	ldr	r1, [pc, #108]	@ (800543c <HAL_RCC_OscConfig+0x4ac>)
 80053d0:	4313      	orrs	r3, r2
 80053d2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053d4:	4b1b      	ldr	r3, [pc, #108]	@ (8005444 <HAL_RCC_OscConfig+0x4b4>)
 80053d6:	2201      	movs	r2, #1
 80053d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053da:	f7fe fbbf 	bl	8003b5c <HAL_GetTick>
 80053de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053e0:	e008      	b.n	80053f4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053e2:	f7fe fbbb 	bl	8003b5c <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d901      	bls.n	80053f4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	e064      	b.n	80054be <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053f4:	4b11      	ldr	r3, [pc, #68]	@ (800543c <HAL_RCC_OscConfig+0x4ac>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d0f0      	beq.n	80053e2 <HAL_RCC_OscConfig+0x452>
 8005400:	e05c      	b.n	80054bc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005402:	4b10      	ldr	r3, [pc, #64]	@ (8005444 <HAL_RCC_OscConfig+0x4b4>)
 8005404:	2200      	movs	r2, #0
 8005406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005408:	f7fe fba8 	bl	8003b5c <HAL_GetTick>
 800540c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800540e:	e008      	b.n	8005422 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005410:	f7fe fba4 	bl	8003b5c <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	2b02      	cmp	r3, #2
 800541c:	d901      	bls.n	8005422 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	e04d      	b.n	80054be <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005422:	4b06      	ldr	r3, [pc, #24]	@ (800543c <HAL_RCC_OscConfig+0x4ac>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1f0      	bne.n	8005410 <HAL_RCC_OscConfig+0x480>
 800542e:	e045      	b.n	80054bc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	699b      	ldr	r3, [r3, #24]
 8005434:	2b01      	cmp	r3, #1
 8005436:	d107      	bne.n	8005448 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e040      	b.n	80054be <HAL_RCC_OscConfig+0x52e>
 800543c:	40023800 	.word	0x40023800
 8005440:	40007000 	.word	0x40007000
 8005444:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005448:	4b1f      	ldr	r3, [pc, #124]	@ (80054c8 <HAL_RCC_OscConfig+0x538>)
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	699b      	ldr	r3, [r3, #24]
 8005452:	2b01      	cmp	r3, #1
 8005454:	d030      	beq.n	80054b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005460:	429a      	cmp	r2, r3
 8005462:	d129      	bne.n	80054b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800546e:	429a      	cmp	r2, r3
 8005470:	d122      	bne.n	80054b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005478:	4013      	ands	r3, r2
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800547e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005480:	4293      	cmp	r3, r2
 8005482:	d119      	bne.n	80054b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800548e:	085b      	lsrs	r3, r3, #1
 8005490:	3b01      	subs	r3, #1
 8005492:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005494:	429a      	cmp	r2, r3
 8005496:	d10f      	bne.n	80054b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d107      	bne.n	80054b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054b2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d001      	beq.n	80054bc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e000      	b.n	80054be <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3718      	adds	r7, #24
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	40023800 	.word	0x40023800

080054cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b082      	sub	sp, #8
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d101      	bne.n	80054de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e07b      	b.n	80055d6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d108      	bne.n	80054f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80054ee:	d009      	beq.n	8005504 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	61da      	str	r2, [r3, #28]
 80054f6:	e005      	b.n	8005504 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005510:	b2db      	uxtb	r3, r3
 8005512:	2b00      	cmp	r3, #0
 8005514:	d106      	bne.n	8005524 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f7fd fefe 	bl	8003320 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2202      	movs	r2, #2
 8005528:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800553a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800554c:	431a      	orrs	r2, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005556:	431a      	orrs	r2, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	f003 0302 	and.w	r3, r3, #2
 8005560:	431a      	orrs	r2, r3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	f003 0301 	and.w	r3, r3, #1
 800556a:	431a      	orrs	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	699b      	ldr	r3, [r3, #24]
 8005570:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005574:	431a      	orrs	r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	69db      	ldr	r3, [r3, #28]
 800557a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800557e:	431a      	orrs	r2, r3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a1b      	ldr	r3, [r3, #32]
 8005584:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005588:	ea42 0103 	orr.w	r1, r2, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005590:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	430a      	orrs	r2, r1
 800559a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	699b      	ldr	r3, [r3, #24]
 80055a0:	0c1b      	lsrs	r3, r3, #16
 80055a2:	f003 0104 	and.w	r1, r3, #4
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055aa:	f003 0210 	and.w	r2, r3, #16
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	430a      	orrs	r2, r1
 80055b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	69da      	ldr	r2, [r3, #28]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80055c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3708      	adds	r7, #8
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
	...

080055e0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	4613      	mov	r3, r2
 80055ec:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d001      	beq.n	80055fe <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 80055fa:	2302      	movs	r3, #2
 80055fc:	e097      	b.n	800572e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d002      	beq.n	800560a <HAL_SPI_Transmit_DMA+0x2a>
 8005604:	88fb      	ldrh	r3, [r7, #6]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d101      	bne.n	800560e <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e08f      	b.n	800572e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005614:	2b01      	cmp	r3, #1
 8005616:	d101      	bne.n	800561c <HAL_SPI_Transmit_DMA+0x3c>
 8005618:	2302      	movs	r3, #2
 800561a:	e088      	b.n	800572e <HAL_SPI_Transmit_DMA+0x14e>
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2203      	movs	r2, #3
 8005628:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	68ba      	ldr	r2, [r7, #8]
 8005636:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	88fa      	ldrh	r2, [r7, #6]
 800563c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	88fa      	ldrh	r2, [r7, #6]
 8005642:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2200      	movs	r2, #0
 8005648:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2200      	movs	r2, #0
 800564e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2200      	movs	r2, #0
 8005654:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2200      	movs	r2, #0
 8005660:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800566a:	d10f      	bne.n	800568c <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800567a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800568a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005690:	4a29      	ldr	r2, [pc, #164]	@ (8005738 <HAL_SPI_Transmit_DMA+0x158>)
 8005692:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005698:	4a28      	ldr	r2, [pc, #160]	@ (800573c <HAL_SPI_Transmit_DMA+0x15c>)
 800569a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056a0:	4a27      	ldr	r2, [pc, #156]	@ (8005740 <HAL_SPI_Transmit_DMA+0x160>)
 80056a2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056a8:	2200      	movs	r2, #0
 80056aa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056b4:	4619      	mov	r1, r3
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	330c      	adds	r3, #12
 80056bc:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056c2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80056c4:	f7fe fbe6 	bl	8003e94 <HAL_DMA_Start_IT>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00b      	beq.n	80056e6 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056d2:	f043 0210 	orr.w	r2, r3, #16
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2200      	movs	r2, #0
 80056de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e023      	b.n	800572e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056f0:	2b40      	cmp	r3, #64	@ 0x40
 80056f2:	d007      	beq.n	8005704 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005702:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	685a      	ldr	r2, [r3, #4]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f042 0220 	orr.w	r2, r2, #32
 800571a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	685a      	ldr	r2, [r3, #4]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f042 0202 	orr.w	r2, r2, #2
 800572a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800572c:	2300      	movs	r3, #0
}
 800572e:	4618      	mov	r0, r3
 8005730:	3710      	adds	r7, #16
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
 8005736:	bf00      	nop
 8005738:	08005815 	.word	0x08005815
 800573c:	0800576d 	.word	0x0800576d
 8005740:	08005831 	.word	0x08005831

08005744 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800574c:	bf00      	nop
 800574e:	370c      	adds	r7, #12
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005760:	bf00      	nop
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b086      	sub	sp, #24
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005778:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800577a:	f7fe f9ef 	bl	8003b5c <HAL_GetTick>
 800577e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800578a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800578e:	d03b      	beq.n	8005808 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	685a      	ldr	r2, [r3, #4]
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f022 0220 	bic.w	r2, r2, #32
 800579e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	685a      	ldr	r2, [r3, #4]
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f022 0202 	bic.w	r2, r2, #2
 80057ae:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80057b0:	693a      	ldr	r2, [r7, #16]
 80057b2:	2164      	movs	r1, #100	@ 0x64
 80057b4:	6978      	ldr	r0, [r7, #20]
 80057b6:	f000 f8e3 	bl	8005980 <SPI_EndRxTxTransaction>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d005      	beq.n	80057cc <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057c4:	f043 0220 	orr.w	r2, r3, #32
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d10a      	bne.n	80057ea <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057d4:	2300      	movs	r3, #0
 80057d6:	60fb      	str	r3, [r7, #12]
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	60fb      	str	r3, [r7, #12]
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	60fb      	str	r3, [r7, #12]
 80057e8:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	2200      	movs	r2, #0
 80057ee:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d003      	beq.n	8005808 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005800:	6978      	ldr	r0, [r7, #20]
 8005802:	f7ff ffa9 	bl	8005758 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005806:	e002      	b.n	800580e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005808:	6978      	ldr	r0, [r7, #20]
 800580a:	f7fd fb65 	bl	8002ed8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800580e:	3718      	adds	r7, #24
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005820:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005822:	68f8      	ldr	r0, [r7, #12]
 8005824:	f7ff ff8e 	bl	8005744 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005828:	bf00      	nop
 800582a:	3710      	adds	r7, #16
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800583c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	685a      	ldr	r2, [r3, #4]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f022 0203 	bic.w	r2, r2, #3
 800584c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005852:	f043 0210 	orr.w	r2, r3, #16
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2201      	movs	r2, #1
 800585e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005862:	68f8      	ldr	r0, [r7, #12]
 8005864:	f7ff ff78 	bl	8005758 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005868:	bf00      	nop
 800586a:	3710      	adds	r7, #16
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b088      	sub	sp, #32
 8005874:	af00      	add	r7, sp, #0
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	60b9      	str	r1, [r7, #8]
 800587a:	603b      	str	r3, [r7, #0]
 800587c:	4613      	mov	r3, r2
 800587e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005880:	f7fe f96c 	bl	8003b5c <HAL_GetTick>
 8005884:	4602      	mov	r2, r0
 8005886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005888:	1a9b      	subs	r3, r3, r2
 800588a:	683a      	ldr	r2, [r7, #0]
 800588c:	4413      	add	r3, r2
 800588e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005890:	f7fe f964 	bl	8003b5c <HAL_GetTick>
 8005894:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005896:	4b39      	ldr	r3, [pc, #228]	@ (800597c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	015b      	lsls	r3, r3, #5
 800589c:	0d1b      	lsrs	r3, r3, #20
 800589e:	69fa      	ldr	r2, [r7, #28]
 80058a0:	fb02 f303 	mul.w	r3, r2, r3
 80058a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058a6:	e054      	b.n	8005952 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ae:	d050      	beq.n	8005952 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80058b0:	f7fe f954 	bl	8003b5c <HAL_GetTick>
 80058b4:	4602      	mov	r2, r0
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	69fa      	ldr	r2, [r7, #28]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d902      	bls.n	80058c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d13d      	bne.n	8005942 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	685a      	ldr	r2, [r3, #4]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80058d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80058de:	d111      	bne.n	8005904 <SPI_WaitFlagStateUntilTimeout+0x94>
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058e8:	d004      	beq.n	80058f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058f2:	d107      	bne.n	8005904 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005902:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005908:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800590c:	d10f      	bne.n	800592e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800591c:	601a      	str	r2, [r3, #0]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800592c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2201      	movs	r2, #1
 8005932:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800593e:	2303      	movs	r3, #3
 8005940:	e017      	b.n	8005972 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d101      	bne.n	800594c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005948:	2300      	movs	r3, #0
 800594a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	3b01      	subs	r3, #1
 8005950:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	689a      	ldr	r2, [r3, #8]
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	4013      	ands	r3, r2
 800595c:	68ba      	ldr	r2, [r7, #8]
 800595e:	429a      	cmp	r2, r3
 8005960:	bf0c      	ite	eq
 8005962:	2301      	moveq	r3, #1
 8005964:	2300      	movne	r3, #0
 8005966:	b2db      	uxtb	r3, r3
 8005968:	461a      	mov	r2, r3
 800596a:	79fb      	ldrb	r3, [r7, #7]
 800596c:	429a      	cmp	r2, r3
 800596e:	d19b      	bne.n	80058a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3720      	adds	r7, #32
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	20000010 	.word	0x20000010

08005980 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b088      	sub	sp, #32
 8005984:	af02      	add	r7, sp, #8
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	9300      	str	r3, [sp, #0]
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	2201      	movs	r2, #1
 8005994:	2102      	movs	r1, #2
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	f7ff ff6a 	bl	8005870 <SPI_WaitFlagStateUntilTimeout>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d007      	beq.n	80059b2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059a6:	f043 0220 	orr.w	r2, r3, #32
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e032      	b.n	8005a18 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80059b2:	4b1b      	ldr	r3, [pc, #108]	@ (8005a20 <SPI_EndRxTxTransaction+0xa0>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a1b      	ldr	r2, [pc, #108]	@ (8005a24 <SPI_EndRxTxTransaction+0xa4>)
 80059b8:	fba2 2303 	umull	r2, r3, r2, r3
 80059bc:	0d5b      	lsrs	r3, r3, #21
 80059be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80059c2:	fb02 f303 	mul.w	r3, r2, r3
 80059c6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80059d0:	d112      	bne.n	80059f8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	9300      	str	r3, [sp, #0]
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	2200      	movs	r2, #0
 80059da:	2180      	movs	r1, #128	@ 0x80
 80059dc:	68f8      	ldr	r0, [r7, #12]
 80059de:	f7ff ff47 	bl	8005870 <SPI_WaitFlagStateUntilTimeout>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d016      	beq.n	8005a16 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059ec:	f043 0220 	orr.w	r2, r3, #32
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e00f      	b.n	8005a18 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00a      	beq.n	8005a14 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	3b01      	subs	r3, #1
 8005a02:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a0e:	2b80      	cmp	r3, #128	@ 0x80
 8005a10:	d0f2      	beq.n	80059f8 <SPI_EndRxTxTransaction+0x78>
 8005a12:	e000      	b.n	8005a16 <SPI_EndRxTxTransaction+0x96>
        break;
 8005a14:	bf00      	nop
  }

  return HAL_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3718      	adds	r7, #24
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	20000010 	.word	0x20000010
 8005a24:	165e9f81 	.word	0x165e9f81

08005a28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d101      	bne.n	8005a3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e041      	b.n	8005abe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d106      	bne.n	8005a54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 f839 	bl	8005ac6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2202      	movs	r2, #2
 8005a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	3304      	adds	r3, #4
 8005a64:	4619      	mov	r1, r3
 8005a66:	4610      	mov	r0, r2
 8005a68:	f000 fcce 	bl	8006408 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005abc:	2300      	movs	r3, #0
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3708      	adds	r7, #8
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005ac6:	b480      	push	{r7}
 8005ac8:	b083      	sub	sp, #12
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005ace:	bf00      	nop
 8005ad0:	370c      	adds	r7, #12
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
	...

08005adc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d001      	beq.n	8005af4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e04e      	b.n	8005b92 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2202      	movs	r2, #2
 8005af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	68da      	ldr	r2, [r3, #12]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f042 0201 	orr.w	r2, r2, #1
 8005b0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a23      	ldr	r2, [pc, #140]	@ (8005ba0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d022      	beq.n	8005b5c <HAL_TIM_Base_Start_IT+0x80>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b1e:	d01d      	beq.n	8005b5c <HAL_TIM_Base_Start_IT+0x80>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a1f      	ldr	r2, [pc, #124]	@ (8005ba4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d018      	beq.n	8005b5c <HAL_TIM_Base_Start_IT+0x80>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a1e      	ldr	r2, [pc, #120]	@ (8005ba8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d013      	beq.n	8005b5c <HAL_TIM_Base_Start_IT+0x80>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a1c      	ldr	r2, [pc, #112]	@ (8005bac <HAL_TIM_Base_Start_IT+0xd0>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d00e      	beq.n	8005b5c <HAL_TIM_Base_Start_IT+0x80>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a1b      	ldr	r2, [pc, #108]	@ (8005bb0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d009      	beq.n	8005b5c <HAL_TIM_Base_Start_IT+0x80>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a19      	ldr	r2, [pc, #100]	@ (8005bb4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d004      	beq.n	8005b5c <HAL_TIM_Base_Start_IT+0x80>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a18      	ldr	r2, [pc, #96]	@ (8005bb8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d111      	bne.n	8005b80 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	f003 0307 	and.w	r3, r3, #7
 8005b66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2b06      	cmp	r3, #6
 8005b6c:	d010      	beq.n	8005b90 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f042 0201 	orr.w	r2, r2, #1
 8005b7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b7e:	e007      	b.n	8005b90 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f042 0201 	orr.w	r2, r2, #1
 8005b8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3714      	adds	r7, #20
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	40010000 	.word	0x40010000
 8005ba4:	40000400 	.word	0x40000400
 8005ba8:	40000800 	.word	0x40000800
 8005bac:	40000c00 	.word	0x40000c00
 8005bb0:	40010400 	.word	0x40010400
 8005bb4:	40014000 	.word	0x40014000
 8005bb8:	40001800 	.word	0x40001800

08005bbc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b082      	sub	sp, #8
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d101      	bne.n	8005bce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e041      	b.n	8005c52 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d106      	bne.n	8005be8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f7fd fc8e 	bl	8003504 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2202      	movs	r2, #2
 8005bec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	3304      	adds	r3, #4
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	4610      	mov	r0, r2
 8005bfc:	f000 fc04 	bl	8006408 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3708      	adds	r7, #8
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
	...

08005c5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d109      	bne.n	8005c80 <HAL_TIM_PWM_Start+0x24>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	bf14      	ite	ne
 8005c78:	2301      	movne	r3, #1
 8005c7a:	2300      	moveq	r3, #0
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	e022      	b.n	8005cc6 <HAL_TIM_PWM_Start+0x6a>
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	2b04      	cmp	r3, #4
 8005c84:	d109      	bne.n	8005c9a <HAL_TIM_PWM_Start+0x3e>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	bf14      	ite	ne
 8005c92:	2301      	movne	r3, #1
 8005c94:	2300      	moveq	r3, #0
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	e015      	b.n	8005cc6 <HAL_TIM_PWM_Start+0x6a>
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	2b08      	cmp	r3, #8
 8005c9e:	d109      	bne.n	8005cb4 <HAL_TIM_PWM_Start+0x58>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	bf14      	ite	ne
 8005cac:	2301      	movne	r3, #1
 8005cae:	2300      	moveq	r3, #0
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	e008      	b.n	8005cc6 <HAL_TIM_PWM_Start+0x6a>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	bf14      	ite	ne
 8005cc0:	2301      	movne	r3, #1
 8005cc2:	2300      	moveq	r3, #0
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d001      	beq.n	8005cce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e07c      	b.n	8005dc8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d104      	bne.n	8005cde <HAL_TIM_PWM_Start+0x82>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2202      	movs	r2, #2
 8005cd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005cdc:	e013      	b.n	8005d06 <HAL_TIM_PWM_Start+0xaa>
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	2b04      	cmp	r3, #4
 8005ce2:	d104      	bne.n	8005cee <HAL_TIM_PWM_Start+0x92>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005cec:	e00b      	b.n	8005d06 <HAL_TIM_PWM_Start+0xaa>
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	2b08      	cmp	r3, #8
 8005cf2:	d104      	bne.n	8005cfe <HAL_TIM_PWM_Start+0xa2>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2202      	movs	r2, #2
 8005cf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005cfc:	e003      	b.n	8005d06 <HAL_TIM_PWM_Start+0xaa>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2202      	movs	r2, #2
 8005d02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	6839      	ldr	r1, [r7, #0]
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f000 fdd6 	bl	80068c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a2d      	ldr	r2, [pc, #180]	@ (8005dd0 <HAL_TIM_PWM_Start+0x174>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d004      	beq.n	8005d28 <HAL_TIM_PWM_Start+0xcc>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a2c      	ldr	r2, [pc, #176]	@ (8005dd4 <HAL_TIM_PWM_Start+0x178>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d101      	bne.n	8005d2c <HAL_TIM_PWM_Start+0xd0>
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e000      	b.n	8005d2e <HAL_TIM_PWM_Start+0xd2>
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d007      	beq.n	8005d42 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005d40:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a22      	ldr	r2, [pc, #136]	@ (8005dd0 <HAL_TIM_PWM_Start+0x174>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d022      	beq.n	8005d92 <HAL_TIM_PWM_Start+0x136>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d54:	d01d      	beq.n	8005d92 <HAL_TIM_PWM_Start+0x136>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a1f      	ldr	r2, [pc, #124]	@ (8005dd8 <HAL_TIM_PWM_Start+0x17c>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d018      	beq.n	8005d92 <HAL_TIM_PWM_Start+0x136>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a1d      	ldr	r2, [pc, #116]	@ (8005ddc <HAL_TIM_PWM_Start+0x180>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d013      	beq.n	8005d92 <HAL_TIM_PWM_Start+0x136>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a1c      	ldr	r2, [pc, #112]	@ (8005de0 <HAL_TIM_PWM_Start+0x184>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d00e      	beq.n	8005d92 <HAL_TIM_PWM_Start+0x136>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a16      	ldr	r2, [pc, #88]	@ (8005dd4 <HAL_TIM_PWM_Start+0x178>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d009      	beq.n	8005d92 <HAL_TIM_PWM_Start+0x136>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a18      	ldr	r2, [pc, #96]	@ (8005de4 <HAL_TIM_PWM_Start+0x188>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d004      	beq.n	8005d92 <HAL_TIM_PWM_Start+0x136>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a16      	ldr	r2, [pc, #88]	@ (8005de8 <HAL_TIM_PWM_Start+0x18c>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d111      	bne.n	8005db6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	f003 0307 	and.w	r3, r3, #7
 8005d9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2b06      	cmp	r3, #6
 8005da2:	d010      	beq.n	8005dc6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f042 0201 	orr.w	r2, r2, #1
 8005db2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005db4:	e007      	b.n	8005dc6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f042 0201 	orr.w	r2, r2, #1
 8005dc4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005dc6:	2300      	movs	r3, #0
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3710      	adds	r7, #16
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	40010000 	.word	0x40010000
 8005dd4:	40010400 	.word	0x40010400
 8005dd8:	40000400 	.word	0x40000400
 8005ddc:	40000800 	.word	0x40000800
 8005de0:	40000c00 	.word	0x40000c00
 8005de4:	40014000 	.word	0x40014000
 8005de8:	40001800 	.word	0x40001800

08005dec <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b086      	sub	sp, #24
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d101      	bne.n	8005e00 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e097      	b.n	8005f30 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d106      	bne.n	8005e1a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f7fd fb2f 	bl	8003478 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2202      	movs	r2, #2
 8005e1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	6812      	ldr	r2, [r2, #0]
 8005e2c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e30:	f023 0307 	bic.w	r3, r3, #7
 8005e34:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	3304      	adds	r3, #4
 8005e3e:	4619      	mov	r1, r3
 8005e40:	4610      	mov	r0, r2
 8005e42:	f000 fae1 	bl	8006408 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	699b      	ldr	r3, [r3, #24]
 8005e54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	6a1b      	ldr	r3, [r3, #32]
 8005e5c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	697a      	ldr	r2, [r7, #20]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e6e:	f023 0303 	bic.w	r3, r3, #3
 8005e72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	689a      	ldr	r2, [r3, #8]
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	699b      	ldr	r3, [r3, #24]
 8005e7c:	021b      	lsls	r3, r3, #8
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	693a      	ldr	r2, [r7, #16]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005e8c:	f023 030c 	bic.w	r3, r3, #12
 8005e90:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005e98:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	68da      	ldr	r2, [r3, #12]
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	69db      	ldr	r3, [r3, #28]
 8005ea6:	021b      	lsls	r3, r3, #8
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	693a      	ldr	r2, [r7, #16]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	011a      	lsls	r2, r3, #4
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	6a1b      	ldr	r3, [r3, #32]
 8005eba:	031b      	lsls	r3, r3, #12
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	693a      	ldr	r2, [r7, #16]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005eca:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005ed2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	685a      	ldr	r2, [r3, #4]
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	695b      	ldr	r3, [r3, #20]
 8005edc:	011b      	lsls	r3, r3, #4
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	697a      	ldr	r2, [r7, #20]
 8005eec:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	693a      	ldr	r2, [r7, #16]
 8005ef4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2201      	movs	r2, #1
 8005f02:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2201      	movs	r2, #1
 8005f12:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2201      	movs	r2, #1
 8005f22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3718      	adds	r7, #24
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005f48:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005f50:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f58:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005f60:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d110      	bne.n	8005f8a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f68:	7bfb      	ldrb	r3, [r7, #15]
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d102      	bne.n	8005f74 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005f6e:	7b7b      	ldrb	r3, [r7, #13]
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d001      	beq.n	8005f78 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e069      	b.n	800604c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2202      	movs	r2, #2
 8005f7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2202      	movs	r2, #2
 8005f84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f88:	e031      	b.n	8005fee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	2b04      	cmp	r3, #4
 8005f8e:	d110      	bne.n	8005fb2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f90:	7bbb      	ldrb	r3, [r7, #14]
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d102      	bne.n	8005f9c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005f96:	7b3b      	ldrb	r3, [r7, #12]
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d001      	beq.n	8005fa0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e055      	b.n	800604c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2202      	movs	r2, #2
 8005fa4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2202      	movs	r2, #2
 8005fac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005fb0:	e01d      	b.n	8005fee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005fb2:	7bfb      	ldrb	r3, [r7, #15]
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d108      	bne.n	8005fca <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005fb8:	7bbb      	ldrb	r3, [r7, #14]
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d105      	bne.n	8005fca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005fbe:	7b7b      	ldrb	r3, [r7, #13]
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d102      	bne.n	8005fca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005fc4:	7b3b      	ldrb	r3, [r7, #12]
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d001      	beq.n	8005fce <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e03e      	b.n	800604c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2202      	movs	r2, #2
 8005fd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2202      	movs	r2, #2
 8005fda:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2202      	movs	r2, #2
 8005fe2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2202      	movs	r2, #2
 8005fea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d003      	beq.n	8005ffc <HAL_TIM_Encoder_Start+0xc4>
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	2b04      	cmp	r3, #4
 8005ff8:	d008      	beq.n	800600c <HAL_TIM_Encoder_Start+0xd4>
 8005ffa:	e00f      	b.n	800601c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2201      	movs	r2, #1
 8006002:	2100      	movs	r1, #0
 8006004:	4618      	mov	r0, r3
 8006006:	f000 fc5b 	bl	80068c0 <TIM_CCxChannelCmd>
      break;
 800600a:	e016      	b.n	800603a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2201      	movs	r2, #1
 8006012:	2104      	movs	r1, #4
 8006014:	4618      	mov	r0, r3
 8006016:	f000 fc53 	bl	80068c0 <TIM_CCxChannelCmd>
      break;
 800601a:	e00e      	b.n	800603a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2201      	movs	r2, #1
 8006022:	2100      	movs	r1, #0
 8006024:	4618      	mov	r0, r3
 8006026:	f000 fc4b 	bl	80068c0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2201      	movs	r2, #1
 8006030:	2104      	movs	r1, #4
 8006032:	4618      	mov	r0, r3
 8006034:	f000 fc44 	bl	80068c0 <TIM_CCxChannelCmd>
      break;
 8006038:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f042 0201 	orr.w	r2, r2, #1
 8006048:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800604a:	2300      	movs	r3, #0
}
 800604c:	4618      	mov	r0, r3
 800604e:	3710      	adds	r7, #16
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	f003 0302 	and.w	r3, r3, #2
 8006072:	2b00      	cmp	r3, #0
 8006074:	d020      	beq.n	80060b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f003 0302 	and.w	r3, r3, #2
 800607c:	2b00      	cmp	r3, #0
 800607e:	d01b      	beq.n	80060b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f06f 0202 	mvn.w	r2, #2
 8006088:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2201      	movs	r2, #1
 800608e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	699b      	ldr	r3, [r3, #24]
 8006096:	f003 0303 	and.w	r3, r3, #3
 800609a:	2b00      	cmp	r3, #0
 800609c:	d003      	beq.n	80060a6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 f994 	bl	80063cc <HAL_TIM_IC_CaptureCallback>
 80060a4:	e005      	b.n	80060b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 f986 	bl	80063b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f000 f997 	bl	80063e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	f003 0304 	and.w	r3, r3, #4
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d020      	beq.n	8006104 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f003 0304 	and.w	r3, r3, #4
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d01b      	beq.n	8006104 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f06f 0204 	mvn.w	r2, #4
 80060d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2202      	movs	r2, #2
 80060da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	699b      	ldr	r3, [r3, #24]
 80060e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d003      	beq.n	80060f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 f96e 	bl	80063cc <HAL_TIM_IC_CaptureCallback>
 80060f0:	e005      	b.n	80060fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 f960 	bl	80063b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 f971 	bl	80063e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	f003 0308 	and.w	r3, r3, #8
 800610a:	2b00      	cmp	r3, #0
 800610c:	d020      	beq.n	8006150 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f003 0308 	and.w	r3, r3, #8
 8006114:	2b00      	cmp	r3, #0
 8006116:	d01b      	beq.n	8006150 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f06f 0208 	mvn.w	r2, #8
 8006120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2204      	movs	r2, #4
 8006126:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	69db      	ldr	r3, [r3, #28]
 800612e:	f003 0303 	and.w	r3, r3, #3
 8006132:	2b00      	cmp	r3, #0
 8006134:	d003      	beq.n	800613e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 f948 	bl	80063cc <HAL_TIM_IC_CaptureCallback>
 800613c:	e005      	b.n	800614a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 f93a 	bl	80063b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 f94b 	bl	80063e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	f003 0310 	and.w	r3, r3, #16
 8006156:	2b00      	cmp	r3, #0
 8006158:	d020      	beq.n	800619c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f003 0310 	and.w	r3, r3, #16
 8006160:	2b00      	cmp	r3, #0
 8006162:	d01b      	beq.n	800619c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f06f 0210 	mvn.w	r2, #16
 800616c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2208      	movs	r2, #8
 8006172:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	69db      	ldr	r3, [r3, #28]
 800617a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800617e:	2b00      	cmp	r3, #0
 8006180:	d003      	beq.n	800618a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 f922 	bl	80063cc <HAL_TIM_IC_CaptureCallback>
 8006188:	e005      	b.n	8006196 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 f914 	bl	80063b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f000 f925 	bl	80063e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	f003 0301 	and.w	r3, r3, #1
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d00c      	beq.n	80061c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f003 0301 	and.w	r3, r3, #1
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d007      	beq.n	80061c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f06f 0201 	mvn.w	r2, #1
 80061b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f7fd f86c 	bl	8003298 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00c      	beq.n	80061e4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d007      	beq.n	80061e4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80061dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 fc1a 	bl	8006a18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d00c      	beq.n	8006208 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d007      	beq.n	8006208 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 f8f6 	bl	80063f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	f003 0320 	and.w	r3, r3, #32
 800620e:	2b00      	cmp	r3, #0
 8006210:	d00c      	beq.n	800622c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f003 0320 	and.w	r3, r3, #32
 8006218:	2b00      	cmp	r3, #0
 800621a:	d007      	beq.n	800622c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f06f 0220 	mvn.w	r2, #32
 8006224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 fbec 	bl	8006a04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800622c:	bf00      	nop
 800622e:	3710      	adds	r7, #16
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b086      	sub	sp, #24
 8006238:	af00      	add	r7, sp, #0
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006240:	2300      	movs	r3, #0
 8006242:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800624a:	2b01      	cmp	r3, #1
 800624c:	d101      	bne.n	8006252 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800624e:	2302      	movs	r3, #2
 8006250:	e0ae      	b.n	80063b0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2201      	movs	r2, #1
 8006256:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2b0c      	cmp	r3, #12
 800625e:	f200 809f 	bhi.w	80063a0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006262:	a201      	add	r2, pc, #4	@ (adr r2, 8006268 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006268:	0800629d 	.word	0x0800629d
 800626c:	080063a1 	.word	0x080063a1
 8006270:	080063a1 	.word	0x080063a1
 8006274:	080063a1 	.word	0x080063a1
 8006278:	080062dd 	.word	0x080062dd
 800627c:	080063a1 	.word	0x080063a1
 8006280:	080063a1 	.word	0x080063a1
 8006284:	080063a1 	.word	0x080063a1
 8006288:	0800631f 	.word	0x0800631f
 800628c:	080063a1 	.word	0x080063a1
 8006290:	080063a1 	.word	0x080063a1
 8006294:	080063a1 	.word	0x080063a1
 8006298:	0800635f 	.word	0x0800635f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68b9      	ldr	r1, [r7, #8]
 80062a2:	4618      	mov	r0, r3
 80062a4:	f000 f95c 	bl	8006560 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	699a      	ldr	r2, [r3, #24]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f042 0208 	orr.w	r2, r2, #8
 80062b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	699a      	ldr	r2, [r3, #24]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f022 0204 	bic.w	r2, r2, #4
 80062c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	6999      	ldr	r1, [r3, #24]
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	691a      	ldr	r2, [r3, #16]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	430a      	orrs	r2, r1
 80062d8:	619a      	str	r2, [r3, #24]
      break;
 80062da:	e064      	b.n	80063a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68b9      	ldr	r1, [r7, #8]
 80062e2:	4618      	mov	r0, r3
 80062e4:	f000 f9ac 	bl	8006640 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	699a      	ldr	r2, [r3, #24]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80062f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	699a      	ldr	r2, [r3, #24]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006306:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	6999      	ldr	r1, [r3, #24]
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	021a      	lsls	r2, r3, #8
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	430a      	orrs	r2, r1
 800631a:	619a      	str	r2, [r3, #24]
      break;
 800631c:	e043      	b.n	80063a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	68b9      	ldr	r1, [r7, #8]
 8006324:	4618      	mov	r0, r3
 8006326:	f000 fa01 	bl	800672c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	69da      	ldr	r2, [r3, #28]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f042 0208 	orr.w	r2, r2, #8
 8006338:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	69da      	ldr	r2, [r3, #28]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f022 0204 	bic.w	r2, r2, #4
 8006348:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	69d9      	ldr	r1, [r3, #28]
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	691a      	ldr	r2, [r3, #16]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	430a      	orrs	r2, r1
 800635a:	61da      	str	r2, [r3, #28]
      break;
 800635c:	e023      	b.n	80063a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	68b9      	ldr	r1, [r7, #8]
 8006364:	4618      	mov	r0, r3
 8006366:	f000 fa55 	bl	8006814 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	69da      	ldr	r2, [r3, #28]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006378:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	69da      	ldr	r2, [r3, #28]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006388:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	69d9      	ldr	r1, [r3, #28]
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	021a      	lsls	r2, r3, #8
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	430a      	orrs	r2, r1
 800639c:	61da      	str	r2, [r3, #28]
      break;
 800639e:	e002      	b.n	80063a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	75fb      	strb	r3, [r7, #23]
      break;
 80063a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80063ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3718      	adds	r7, #24
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80063c0:	bf00      	nop
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80063d4:	bf00      	nop
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80063e8:	bf00      	nop
 80063ea:	370c      	adds	r7, #12
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80063fc:	bf00      	nop
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006408:	b480      	push	{r7}
 800640a:	b085      	sub	sp, #20
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a46      	ldr	r2, [pc, #280]	@ (8006534 <TIM_Base_SetConfig+0x12c>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d013      	beq.n	8006448 <TIM_Base_SetConfig+0x40>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006426:	d00f      	beq.n	8006448 <TIM_Base_SetConfig+0x40>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4a43      	ldr	r2, [pc, #268]	@ (8006538 <TIM_Base_SetConfig+0x130>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d00b      	beq.n	8006448 <TIM_Base_SetConfig+0x40>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4a42      	ldr	r2, [pc, #264]	@ (800653c <TIM_Base_SetConfig+0x134>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d007      	beq.n	8006448 <TIM_Base_SetConfig+0x40>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	4a41      	ldr	r2, [pc, #260]	@ (8006540 <TIM_Base_SetConfig+0x138>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d003      	beq.n	8006448 <TIM_Base_SetConfig+0x40>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4a40      	ldr	r2, [pc, #256]	@ (8006544 <TIM_Base_SetConfig+0x13c>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d108      	bne.n	800645a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800644e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	4313      	orrs	r3, r2
 8006458:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	4a35      	ldr	r2, [pc, #212]	@ (8006534 <TIM_Base_SetConfig+0x12c>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d02b      	beq.n	80064ba <TIM_Base_SetConfig+0xb2>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006468:	d027      	beq.n	80064ba <TIM_Base_SetConfig+0xb2>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4a32      	ldr	r2, [pc, #200]	@ (8006538 <TIM_Base_SetConfig+0x130>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d023      	beq.n	80064ba <TIM_Base_SetConfig+0xb2>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4a31      	ldr	r2, [pc, #196]	@ (800653c <TIM_Base_SetConfig+0x134>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d01f      	beq.n	80064ba <TIM_Base_SetConfig+0xb2>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4a30      	ldr	r2, [pc, #192]	@ (8006540 <TIM_Base_SetConfig+0x138>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d01b      	beq.n	80064ba <TIM_Base_SetConfig+0xb2>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4a2f      	ldr	r2, [pc, #188]	@ (8006544 <TIM_Base_SetConfig+0x13c>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d017      	beq.n	80064ba <TIM_Base_SetConfig+0xb2>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4a2e      	ldr	r2, [pc, #184]	@ (8006548 <TIM_Base_SetConfig+0x140>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d013      	beq.n	80064ba <TIM_Base_SetConfig+0xb2>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	4a2d      	ldr	r2, [pc, #180]	@ (800654c <TIM_Base_SetConfig+0x144>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d00f      	beq.n	80064ba <TIM_Base_SetConfig+0xb2>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4a2c      	ldr	r2, [pc, #176]	@ (8006550 <TIM_Base_SetConfig+0x148>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d00b      	beq.n	80064ba <TIM_Base_SetConfig+0xb2>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4a2b      	ldr	r2, [pc, #172]	@ (8006554 <TIM_Base_SetConfig+0x14c>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d007      	beq.n	80064ba <TIM_Base_SetConfig+0xb2>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a2a      	ldr	r2, [pc, #168]	@ (8006558 <TIM_Base_SetConfig+0x150>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d003      	beq.n	80064ba <TIM_Base_SetConfig+0xb2>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	4a29      	ldr	r2, [pc, #164]	@ (800655c <TIM_Base_SetConfig+0x154>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d108      	bne.n	80064cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	695b      	ldr	r3, [r3, #20]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	689a      	ldr	r2, [r3, #8]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4a10      	ldr	r2, [pc, #64]	@ (8006534 <TIM_Base_SetConfig+0x12c>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d003      	beq.n	8006500 <TIM_Base_SetConfig+0xf8>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a12      	ldr	r2, [pc, #72]	@ (8006544 <TIM_Base_SetConfig+0x13c>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d103      	bne.n	8006508 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	691a      	ldr	r2, [r3, #16]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	f003 0301 	and.w	r3, r3, #1
 8006516:	2b01      	cmp	r3, #1
 8006518:	d105      	bne.n	8006526 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	f023 0201 	bic.w	r2, r3, #1
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	611a      	str	r2, [r3, #16]
  }
}
 8006526:	bf00      	nop
 8006528:	3714      	adds	r7, #20
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	40010000 	.word	0x40010000
 8006538:	40000400 	.word	0x40000400
 800653c:	40000800 	.word	0x40000800
 8006540:	40000c00 	.word	0x40000c00
 8006544:	40010400 	.word	0x40010400
 8006548:	40014000 	.word	0x40014000
 800654c:	40014400 	.word	0x40014400
 8006550:	40014800 	.word	0x40014800
 8006554:	40001800 	.word	0x40001800
 8006558:	40001c00 	.word	0x40001c00
 800655c:	40002000 	.word	0x40002000

08006560 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006560:	b480      	push	{r7}
 8006562:	b087      	sub	sp, #28
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a1b      	ldr	r3, [r3, #32]
 800656e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6a1b      	ldr	r3, [r3, #32]
 8006574:	f023 0201 	bic.w	r2, r3, #1
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	699b      	ldr	r3, [r3, #24]
 8006586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800658e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f023 0303 	bic.w	r3, r3, #3
 8006596:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	4313      	orrs	r3, r2
 80065a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	f023 0302 	bic.w	r3, r3, #2
 80065a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	697a      	ldr	r2, [r7, #20]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a20      	ldr	r2, [pc, #128]	@ (8006638 <TIM_OC1_SetConfig+0xd8>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d003      	beq.n	80065c4 <TIM_OC1_SetConfig+0x64>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a1f      	ldr	r2, [pc, #124]	@ (800663c <TIM_OC1_SetConfig+0xdc>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d10c      	bne.n	80065de <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	f023 0308 	bic.w	r3, r3, #8
 80065ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	697a      	ldr	r2, [r7, #20]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	f023 0304 	bic.w	r3, r3, #4
 80065dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a15      	ldr	r2, [pc, #84]	@ (8006638 <TIM_OC1_SetConfig+0xd8>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d003      	beq.n	80065ee <TIM_OC1_SetConfig+0x8e>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a14      	ldr	r2, [pc, #80]	@ (800663c <TIM_OC1_SetConfig+0xdc>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d111      	bne.n	8006612 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80065fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	695b      	ldr	r3, [r3, #20]
 8006602:	693a      	ldr	r2, [r7, #16]
 8006604:	4313      	orrs	r3, r2
 8006606:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	699b      	ldr	r3, [r3, #24]
 800660c:	693a      	ldr	r2, [r7, #16]
 800660e:	4313      	orrs	r3, r2
 8006610:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	693a      	ldr	r2, [r7, #16]
 8006616:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	68fa      	ldr	r2, [r7, #12]
 800661c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	685a      	ldr	r2, [r3, #4]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	697a      	ldr	r2, [r7, #20]
 800662a:	621a      	str	r2, [r3, #32]
}
 800662c:	bf00      	nop
 800662e:	371c      	adds	r7, #28
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr
 8006638:	40010000 	.word	0x40010000
 800663c:	40010400 	.word	0x40010400

08006640 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006640:	b480      	push	{r7}
 8006642:	b087      	sub	sp, #28
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a1b      	ldr	r3, [r3, #32]
 800664e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6a1b      	ldr	r3, [r3, #32]
 8006654:	f023 0210 	bic.w	r2, r3, #16
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	699b      	ldr	r3, [r3, #24]
 8006666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800666e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006676:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	021b      	lsls	r3, r3, #8
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	4313      	orrs	r3, r2
 8006682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	f023 0320 	bic.w	r3, r3, #32
 800668a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	011b      	lsls	r3, r3, #4
 8006692:	697a      	ldr	r2, [r7, #20]
 8006694:	4313      	orrs	r3, r2
 8006696:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4a22      	ldr	r2, [pc, #136]	@ (8006724 <TIM_OC2_SetConfig+0xe4>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d003      	beq.n	80066a8 <TIM_OC2_SetConfig+0x68>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	4a21      	ldr	r2, [pc, #132]	@ (8006728 <TIM_OC2_SetConfig+0xe8>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d10d      	bne.n	80066c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	011b      	lsls	r3, r3, #4
 80066b6:	697a      	ldr	r2, [r7, #20]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4a17      	ldr	r2, [pc, #92]	@ (8006724 <TIM_OC2_SetConfig+0xe4>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d003      	beq.n	80066d4 <TIM_OC2_SetConfig+0x94>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4a16      	ldr	r2, [pc, #88]	@ (8006728 <TIM_OC2_SetConfig+0xe8>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d113      	bne.n	80066fc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80066da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80066e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	695b      	ldr	r3, [r3, #20]
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	693a      	ldr	r2, [r7, #16]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	699b      	ldr	r3, [r3, #24]
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	693a      	ldr	r2, [r7, #16]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	693a      	ldr	r2, [r7, #16]
 8006700:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	68fa      	ldr	r2, [r7, #12]
 8006706:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	685a      	ldr	r2, [r3, #4]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	697a      	ldr	r2, [r7, #20]
 8006714:	621a      	str	r2, [r3, #32]
}
 8006716:	bf00      	nop
 8006718:	371c      	adds	r7, #28
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	40010000 	.word	0x40010000
 8006728:	40010400 	.word	0x40010400

0800672c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800672c:	b480      	push	{r7}
 800672e:	b087      	sub	sp, #28
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6a1b      	ldr	r3, [r3, #32]
 800673a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6a1b      	ldr	r3, [r3, #32]
 8006740:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	69db      	ldr	r3, [r3, #28]
 8006752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800675a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f023 0303 	bic.w	r3, r3, #3
 8006762:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	4313      	orrs	r3, r2
 800676c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006774:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	021b      	lsls	r3, r3, #8
 800677c:	697a      	ldr	r2, [r7, #20]
 800677e:	4313      	orrs	r3, r2
 8006780:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a21      	ldr	r2, [pc, #132]	@ (800680c <TIM_OC3_SetConfig+0xe0>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d003      	beq.n	8006792 <TIM_OC3_SetConfig+0x66>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a20      	ldr	r2, [pc, #128]	@ (8006810 <TIM_OC3_SetConfig+0xe4>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d10d      	bne.n	80067ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006798:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	021b      	lsls	r3, r3, #8
 80067a0:	697a      	ldr	r2, [r7, #20]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80067ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a16      	ldr	r2, [pc, #88]	@ (800680c <TIM_OC3_SetConfig+0xe0>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d003      	beq.n	80067be <TIM_OC3_SetConfig+0x92>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4a15      	ldr	r2, [pc, #84]	@ (8006810 <TIM_OC3_SetConfig+0xe4>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d113      	bne.n	80067e6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80067c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80067cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	695b      	ldr	r3, [r3, #20]
 80067d2:	011b      	lsls	r3, r3, #4
 80067d4:	693a      	ldr	r2, [r7, #16]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	699b      	ldr	r3, [r3, #24]
 80067de:	011b      	lsls	r3, r3, #4
 80067e0:	693a      	ldr	r2, [r7, #16]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	693a      	ldr	r2, [r7, #16]
 80067ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	68fa      	ldr	r2, [r7, #12]
 80067f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	685a      	ldr	r2, [r3, #4]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	697a      	ldr	r2, [r7, #20]
 80067fe:	621a      	str	r2, [r3, #32]
}
 8006800:	bf00      	nop
 8006802:	371c      	adds	r7, #28
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr
 800680c:	40010000 	.word	0x40010000
 8006810:	40010400 	.word	0x40010400

08006814 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006814:	b480      	push	{r7}
 8006816:	b087      	sub	sp, #28
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a1b      	ldr	r3, [r3, #32]
 8006822:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a1b      	ldr	r3, [r3, #32]
 8006828:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	69db      	ldr	r3, [r3, #28]
 800683a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006842:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800684a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	021b      	lsls	r3, r3, #8
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	4313      	orrs	r3, r2
 8006856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800685e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	031b      	lsls	r3, r3, #12
 8006866:	693a      	ldr	r2, [r7, #16]
 8006868:	4313      	orrs	r3, r2
 800686a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4a12      	ldr	r2, [pc, #72]	@ (80068b8 <TIM_OC4_SetConfig+0xa4>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d003      	beq.n	800687c <TIM_OC4_SetConfig+0x68>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4a11      	ldr	r2, [pc, #68]	@ (80068bc <TIM_OC4_SetConfig+0xa8>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d109      	bne.n	8006890 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006882:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	695b      	ldr	r3, [r3, #20]
 8006888:	019b      	lsls	r3, r3, #6
 800688a:	697a      	ldr	r2, [r7, #20]
 800688c:	4313      	orrs	r3, r2
 800688e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	697a      	ldr	r2, [r7, #20]
 8006894:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	685a      	ldr	r2, [r3, #4]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	693a      	ldr	r2, [r7, #16]
 80068a8:	621a      	str	r2, [r3, #32]
}
 80068aa:	bf00      	nop
 80068ac:	371c      	adds	r7, #28
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr
 80068b6:	bf00      	nop
 80068b8:	40010000 	.word	0x40010000
 80068bc:	40010400 	.word	0x40010400

080068c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b087      	sub	sp, #28
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	f003 031f 	and.w	r3, r3, #31
 80068d2:	2201      	movs	r2, #1
 80068d4:	fa02 f303 	lsl.w	r3, r2, r3
 80068d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	6a1a      	ldr	r2, [r3, #32]
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	43db      	mvns	r3, r3
 80068e2:	401a      	ands	r2, r3
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6a1a      	ldr	r2, [r3, #32]
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	f003 031f 	and.w	r3, r3, #31
 80068f2:	6879      	ldr	r1, [r7, #4]
 80068f4:	fa01 f303 	lsl.w	r3, r1, r3
 80068f8:	431a      	orrs	r2, r3
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	621a      	str	r2, [r3, #32]
}
 80068fe:	bf00      	nop
 8006900:	371c      	adds	r7, #28
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr
	...

0800690c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800690c:	b480      	push	{r7}
 800690e:	b085      	sub	sp, #20
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800691c:	2b01      	cmp	r3, #1
 800691e:	d101      	bne.n	8006924 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006920:	2302      	movs	r3, #2
 8006922:	e05a      	b.n	80069da <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2202      	movs	r2, #2
 8006930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800694a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	68fa      	ldr	r2, [r7, #12]
 8006952:	4313      	orrs	r3, r2
 8006954:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	68fa      	ldr	r2, [r7, #12]
 800695c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a21      	ldr	r2, [pc, #132]	@ (80069e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d022      	beq.n	80069ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006970:	d01d      	beq.n	80069ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a1d      	ldr	r2, [pc, #116]	@ (80069ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d018      	beq.n	80069ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a1b      	ldr	r2, [pc, #108]	@ (80069f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d013      	beq.n	80069ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a1a      	ldr	r2, [pc, #104]	@ (80069f4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d00e      	beq.n	80069ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a18      	ldr	r2, [pc, #96]	@ (80069f8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d009      	beq.n	80069ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a17      	ldr	r2, [pc, #92]	@ (80069fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d004      	beq.n	80069ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a15      	ldr	r2, [pc, #84]	@ (8006a00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d10c      	bne.n	80069c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	68ba      	ldr	r2, [r7, #8]
 80069bc:	4313      	orrs	r3, r2
 80069be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	68ba      	ldr	r2, [r7, #8]
 80069c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3714      	adds	r7, #20
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr
 80069e6:	bf00      	nop
 80069e8:	40010000 	.word	0x40010000
 80069ec:	40000400 	.word	0x40000400
 80069f0:	40000800 	.word	0x40000800
 80069f4:	40000c00 	.word	0x40000c00
 80069f8:	40010400 	.word	0x40010400
 80069fc:	40014000 	.word	0x40014000
 8006a00:	40001800 	.word	0x40001800

08006a04 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a0c:	bf00      	nop
 8006a0e:	370c      	adds	r7, #12
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr

08006a18 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a20:	bf00      	nop
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr

08006a2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b082      	sub	sp, #8
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d101      	bne.n	8006a3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e042      	b.n	8006ac4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d106      	bne.n	8006a58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f7fc fdb2 	bl	80035bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2224      	movs	r2, #36	@ 0x24
 8006a5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	68da      	ldr	r2, [r3, #12]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006a6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 fdbf 	bl	80075f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	691a      	ldr	r2, [r3, #16]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006a84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	695a      	ldr	r2, [r3, #20]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006a94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	68da      	ldr	r2, [r3, #12]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006aa4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2220      	movs	r2, #32
 8006ab0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2220      	movs	r2, #32
 8006ab8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006ac2:	2300      	movs	r3, #0
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3708      	adds	r7, #8
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b08a      	sub	sp, #40	@ 0x28
 8006ad0:	af02      	add	r7, sp, #8
 8006ad2:	60f8      	str	r0, [r7, #12]
 8006ad4:	60b9      	str	r1, [r7, #8]
 8006ad6:	603b      	str	r3, [r7, #0]
 8006ad8:	4613      	mov	r3, r2
 8006ada:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006adc:	2300      	movs	r3, #0
 8006ade:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	2b20      	cmp	r3, #32
 8006aea:	d175      	bne.n	8006bd8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d002      	beq.n	8006af8 <HAL_UART_Transmit+0x2c>
 8006af2:	88fb      	ldrh	r3, [r7, #6]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d101      	bne.n	8006afc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	e06e      	b.n	8006bda <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2200      	movs	r2, #0
 8006b00:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2221      	movs	r2, #33	@ 0x21
 8006b06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b0a:	f7fd f827 	bl	8003b5c <HAL_GetTick>
 8006b0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	88fa      	ldrh	r2, [r7, #6]
 8006b14:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	88fa      	ldrh	r2, [r7, #6]
 8006b1a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b24:	d108      	bne.n	8006b38 <HAL_UART_Transmit+0x6c>
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	691b      	ldr	r3, [r3, #16]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d104      	bne.n	8006b38 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	61bb      	str	r3, [r7, #24]
 8006b36:	e003      	b.n	8006b40 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006b40:	e02e      	b.n	8006ba0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	9300      	str	r3, [sp, #0]
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	2180      	movs	r1, #128	@ 0x80
 8006b4c:	68f8      	ldr	r0, [r7, #12]
 8006b4e:	f000 fb21 	bl	8007194 <UART_WaitOnFlagUntilTimeout>
 8006b52:	4603      	mov	r3, r0
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d005      	beq.n	8006b64 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2220      	movs	r2, #32
 8006b5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006b60:	2303      	movs	r3, #3
 8006b62:	e03a      	b.n	8006bda <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d10b      	bne.n	8006b82 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b6a:	69bb      	ldr	r3, [r7, #24]
 8006b6c:	881b      	ldrh	r3, [r3, #0]
 8006b6e:	461a      	mov	r2, r3
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b78:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	3302      	adds	r3, #2
 8006b7e:	61bb      	str	r3, [r7, #24]
 8006b80:	e007      	b.n	8006b92 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b82:	69fb      	ldr	r3, [r7, #28]
 8006b84:	781a      	ldrb	r2, [r3, #0]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	3301      	adds	r3, #1
 8006b90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	3b01      	subs	r3, #1
 8006b9a:	b29a      	uxth	r2, r3
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d1cb      	bne.n	8006b42 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	9300      	str	r3, [sp, #0]
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	2140      	movs	r1, #64	@ 0x40
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	f000 faed 	bl	8007194 <UART_WaitOnFlagUntilTimeout>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d005      	beq.n	8006bcc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2220      	movs	r2, #32
 8006bc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006bc8:	2303      	movs	r3, #3
 8006bca:	e006      	b.n	8006bda <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2220      	movs	r2, #32
 8006bd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	e000      	b.n	8006bda <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006bd8:	2302      	movs	r3, #2
  }
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3720      	adds	r7, #32
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b084      	sub	sp, #16
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	60f8      	str	r0, [r7, #12]
 8006bea:	60b9      	str	r1, [r7, #8]
 8006bec:	4613      	mov	r3, r2
 8006bee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	2b20      	cmp	r3, #32
 8006bfa:	d112      	bne.n	8006c22 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d002      	beq.n	8006c08 <HAL_UART_Receive_IT+0x26>
 8006c02:	88fb      	ldrh	r3, [r7, #6]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d101      	bne.n	8006c0c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e00b      	b.n	8006c24 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006c12:	88fb      	ldrh	r3, [r7, #6]
 8006c14:	461a      	mov	r2, r3
 8006c16:	68b9      	ldr	r1, [r7, #8]
 8006c18:	68f8      	ldr	r0, [r7, #12]
 8006c1a:	f000 fb14 	bl	8007246 <UART_Start_Receive_IT>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	e000      	b.n	8006c24 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006c22:	2302      	movs	r3, #2
  }
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3710      	adds	r7, #16
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b0ba      	sub	sp, #232	@ 0xe8
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	695b      	ldr	r3, [r3, #20]
 8006c4e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006c52:	2300      	movs	r3, #0
 8006c54:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c62:	f003 030f 	and.w	r3, r3, #15
 8006c66:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006c6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d10f      	bne.n	8006c92 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c76:	f003 0320 	and.w	r3, r3, #32
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d009      	beq.n	8006c92 <HAL_UART_IRQHandler+0x66>
 8006c7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c82:	f003 0320 	and.w	r3, r3, #32
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d003      	beq.n	8006c92 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 fbf4 	bl	8007478 <UART_Receive_IT>
      return;
 8006c90:	e25b      	b.n	800714a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006c92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	f000 80de 	beq.w	8006e58 <HAL_UART_IRQHandler+0x22c>
 8006c9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ca0:	f003 0301 	and.w	r3, r3, #1
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d106      	bne.n	8006cb6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006ca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cac:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f000 80d1 	beq.w	8006e58 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cba:	f003 0301 	and.w	r3, r3, #1
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00b      	beq.n	8006cda <HAL_UART_IRQHandler+0xae>
 8006cc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d005      	beq.n	8006cda <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cd2:	f043 0201 	orr.w	r2, r3, #1
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cde:	f003 0304 	and.w	r3, r3, #4
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d00b      	beq.n	8006cfe <HAL_UART_IRQHandler+0xd2>
 8006ce6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006cea:	f003 0301 	and.w	r3, r3, #1
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d005      	beq.n	8006cfe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cf6:	f043 0202 	orr.w	r2, r3, #2
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d02:	f003 0302 	and.w	r3, r3, #2
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d00b      	beq.n	8006d22 <HAL_UART_IRQHandler+0xf6>
 8006d0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d0e:	f003 0301 	and.w	r3, r3, #1
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d005      	beq.n	8006d22 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d1a:	f043 0204 	orr.w	r2, r3, #4
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d26:	f003 0308 	and.w	r3, r3, #8
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d011      	beq.n	8006d52 <HAL_UART_IRQHandler+0x126>
 8006d2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d32:	f003 0320 	and.w	r3, r3, #32
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d105      	bne.n	8006d46 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006d3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d3e:	f003 0301 	and.w	r3, r3, #1
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d005      	beq.n	8006d52 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d4a:	f043 0208 	orr.w	r2, r3, #8
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	f000 81f2 	beq.w	8007140 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d60:	f003 0320 	and.w	r3, r3, #32
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d008      	beq.n	8006d7a <HAL_UART_IRQHandler+0x14e>
 8006d68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d6c:	f003 0320 	and.w	r3, r3, #32
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d002      	beq.n	8006d7a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 fb7f 	bl	8007478 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	695b      	ldr	r3, [r3, #20]
 8006d80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d84:	2b40      	cmp	r3, #64	@ 0x40
 8006d86:	bf0c      	ite	eq
 8006d88:	2301      	moveq	r3, #1
 8006d8a:	2300      	movne	r3, #0
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d96:	f003 0308 	and.w	r3, r3, #8
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d103      	bne.n	8006da6 <HAL_UART_IRQHandler+0x17a>
 8006d9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d04f      	beq.n	8006e46 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 fa87 	bl	80072ba <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	695b      	ldr	r3, [r3, #20]
 8006db2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006db6:	2b40      	cmp	r3, #64	@ 0x40
 8006db8:	d141      	bne.n	8006e3e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	3314      	adds	r3, #20
 8006dc0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006dc8:	e853 3f00 	ldrex	r3, [r3]
 8006dcc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006dd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006dd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006dd8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	3314      	adds	r3, #20
 8006de2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006de6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006dea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006df2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006df6:	e841 2300 	strex	r3, r2, [r1]
 8006dfa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006dfe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d1d9      	bne.n	8006dba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d013      	beq.n	8006e36 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e12:	4a7e      	ldr	r2, [pc, #504]	@ (800700c <HAL_UART_IRQHandler+0x3e0>)
 8006e14:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f7fd f902 	bl	8004024 <HAL_DMA_Abort_IT>
 8006e20:	4603      	mov	r3, r0
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d016      	beq.n	8006e54 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006e30:	4610      	mov	r0, r2
 8006e32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e34:	e00e      	b.n	8006e54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f7fc f892 	bl	8002f60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e3c:	e00a      	b.n	8006e54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f7fc f88e 	bl	8002f60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e44:	e006      	b.n	8006e54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f7fc f88a 	bl	8002f60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006e52:	e175      	b.n	8007140 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e54:	bf00      	nop
    return;
 8006e56:	e173      	b.n	8007140 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	f040 814f 	bne.w	8007100 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e66:	f003 0310 	and.w	r3, r3, #16
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	f000 8148 	beq.w	8007100 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e74:	f003 0310 	and.w	r3, r3, #16
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	f000 8141 	beq.w	8007100 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e7e:	2300      	movs	r3, #0
 8006e80:	60bb      	str	r3, [r7, #8]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	60bb      	str	r3, [r7, #8]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	60bb      	str	r3, [r7, #8]
 8006e92:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	695b      	ldr	r3, [r3, #20]
 8006e9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e9e:	2b40      	cmp	r3, #64	@ 0x40
 8006ea0:	f040 80b6 	bne.w	8007010 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006eb0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	f000 8145 	beq.w	8007144 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006ebe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	f080 813e 	bcs.w	8007144 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006ece:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ed4:	69db      	ldr	r3, [r3, #28]
 8006ed6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006eda:	f000 8088 	beq.w	8006fee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	330c      	adds	r3, #12
 8006ee4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006eec:	e853 3f00 	ldrex	r3, [r3]
 8006ef0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006ef4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006ef8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006efc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	330c      	adds	r3, #12
 8006f06:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006f0a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006f0e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f12:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006f16:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006f1a:	e841 2300 	strex	r3, r2, [r1]
 8006f1e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006f22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d1d9      	bne.n	8006ede <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	3314      	adds	r3, #20
 8006f30:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006f34:	e853 3f00 	ldrex	r3, [r3]
 8006f38:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006f3a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006f3c:	f023 0301 	bic.w	r3, r3, #1
 8006f40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	3314      	adds	r3, #20
 8006f4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006f4e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006f52:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f54:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006f56:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006f5a:	e841 2300 	strex	r3, r2, [r1]
 8006f5e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006f60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d1e1      	bne.n	8006f2a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	3314      	adds	r3, #20
 8006f6c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006f70:	e853 3f00 	ldrex	r3, [r3]
 8006f74:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006f76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	3314      	adds	r3, #20
 8006f86:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006f8a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006f8c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f8e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006f90:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006f92:	e841 2300 	strex	r3, r2, [r1]
 8006f96:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006f98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d1e3      	bne.n	8006f66 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2220      	movs	r2, #32
 8006fa2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	330c      	adds	r3, #12
 8006fb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fb6:	e853 3f00 	ldrex	r3, [r3]
 8006fba:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006fbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006fbe:	f023 0310 	bic.w	r3, r3, #16
 8006fc2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	330c      	adds	r3, #12
 8006fcc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006fd0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006fd2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006fd6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006fd8:	e841 2300 	strex	r3, r2, [r1]
 8006fdc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006fde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d1e3      	bne.n	8006fac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f7fc ffab 	bl	8003f44 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2202      	movs	r2, #2
 8006ff2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	1ad3      	subs	r3, r2, r3
 8007000:	b29b      	uxth	r3, r3
 8007002:	4619      	mov	r1, r3
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 f8ad 	bl	8007164 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800700a:	e09b      	b.n	8007144 <HAL_UART_IRQHandler+0x518>
 800700c:	08007381 	.word	0x08007381
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007018:	b29b      	uxth	r3, r3
 800701a:	1ad3      	subs	r3, r2, r3
 800701c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007024:	b29b      	uxth	r3, r3
 8007026:	2b00      	cmp	r3, #0
 8007028:	f000 808e 	beq.w	8007148 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800702c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007030:	2b00      	cmp	r3, #0
 8007032:	f000 8089 	beq.w	8007148 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	330c      	adds	r3, #12
 800703c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800703e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007040:	e853 3f00 	ldrex	r3, [r3]
 8007044:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007048:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800704c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	330c      	adds	r3, #12
 8007056:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800705a:	647a      	str	r2, [r7, #68]	@ 0x44
 800705c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800705e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007060:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007062:	e841 2300 	strex	r3, r2, [r1]
 8007066:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007068:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800706a:	2b00      	cmp	r3, #0
 800706c:	d1e3      	bne.n	8007036 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	3314      	adds	r3, #20
 8007074:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007078:	e853 3f00 	ldrex	r3, [r3]
 800707c:	623b      	str	r3, [r7, #32]
   return(result);
 800707e:	6a3b      	ldr	r3, [r7, #32]
 8007080:	f023 0301 	bic.w	r3, r3, #1
 8007084:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	3314      	adds	r3, #20
 800708e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007092:	633a      	str	r2, [r7, #48]	@ 0x30
 8007094:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007096:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007098:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800709a:	e841 2300 	strex	r3, r2, [r1]
 800709e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80070a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d1e3      	bne.n	800706e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2220      	movs	r2, #32
 80070aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	330c      	adds	r3, #12
 80070ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	e853 3f00 	ldrex	r3, [r3]
 80070c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f023 0310 	bic.w	r3, r3, #16
 80070ca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	330c      	adds	r3, #12
 80070d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80070d8:	61fa      	str	r2, [r7, #28]
 80070da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070dc:	69b9      	ldr	r1, [r7, #24]
 80070de:	69fa      	ldr	r2, [r7, #28]
 80070e0:	e841 2300 	strex	r3, r2, [r1]
 80070e4:	617b      	str	r3, [r7, #20]
   return(result);
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d1e3      	bne.n	80070b4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2202      	movs	r2, #2
 80070f0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80070f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80070f6:	4619      	mov	r1, r3
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f000 f833 	bl	8007164 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80070fe:	e023      	b.n	8007148 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007104:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007108:	2b00      	cmp	r3, #0
 800710a:	d009      	beq.n	8007120 <HAL_UART_IRQHandler+0x4f4>
 800710c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007110:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007114:	2b00      	cmp	r3, #0
 8007116:	d003      	beq.n	8007120 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 f945 	bl	80073a8 <UART_Transmit_IT>
    return;
 800711e:	e014      	b.n	800714a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007120:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007124:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007128:	2b00      	cmp	r3, #0
 800712a:	d00e      	beq.n	800714a <HAL_UART_IRQHandler+0x51e>
 800712c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007134:	2b00      	cmp	r3, #0
 8007136:	d008      	beq.n	800714a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 f985 	bl	8007448 <UART_EndTransmit_IT>
    return;
 800713e:	e004      	b.n	800714a <HAL_UART_IRQHandler+0x51e>
    return;
 8007140:	bf00      	nop
 8007142:	e002      	b.n	800714a <HAL_UART_IRQHandler+0x51e>
      return;
 8007144:	bf00      	nop
 8007146:	e000      	b.n	800714a <HAL_UART_IRQHandler+0x51e>
      return;
 8007148:	bf00      	nop
  }
}
 800714a:	37e8      	adds	r7, #232	@ 0xe8
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}

08007150 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007150:	b480      	push	{r7}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007158:	bf00      	nop
 800715a:	370c      	adds	r7, #12
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr

08007164 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007164:	b480      	push	{r7}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	460b      	mov	r3, r1
 800716e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007170:	bf00      	nop
 8007172:	370c      	adds	r7, #12
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr

0800717c <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8007188:	4618      	mov	r0, r3
 800718a:	370c      	adds	r7, #12
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b086      	sub	sp, #24
 8007198:	af00      	add	r7, sp, #0
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	603b      	str	r3, [r7, #0]
 80071a0:	4613      	mov	r3, r2
 80071a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071a4:	e03b      	b.n	800721e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071a6:	6a3b      	ldr	r3, [r7, #32]
 80071a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ac:	d037      	beq.n	800721e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071ae:	f7fc fcd5 	bl	8003b5c <HAL_GetTick>
 80071b2:	4602      	mov	r2, r0
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	1ad3      	subs	r3, r2, r3
 80071b8:	6a3a      	ldr	r2, [r7, #32]
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d302      	bcc.n	80071c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80071be:	6a3b      	ldr	r3, [r7, #32]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d101      	bne.n	80071c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80071c4:	2303      	movs	r3, #3
 80071c6:	e03a      	b.n	800723e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	f003 0304 	and.w	r3, r3, #4
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d023      	beq.n	800721e <UART_WaitOnFlagUntilTimeout+0x8a>
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	2b80      	cmp	r3, #128	@ 0x80
 80071da:	d020      	beq.n	800721e <UART_WaitOnFlagUntilTimeout+0x8a>
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	2b40      	cmp	r3, #64	@ 0x40
 80071e0:	d01d      	beq.n	800721e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f003 0308 	and.w	r3, r3, #8
 80071ec:	2b08      	cmp	r3, #8
 80071ee:	d116      	bne.n	800721e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80071f0:	2300      	movs	r3, #0
 80071f2:	617b      	str	r3, [r7, #20]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	617b      	str	r3, [r7, #20]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	617b      	str	r3, [r7, #20]
 8007204:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007206:	68f8      	ldr	r0, [r7, #12]
 8007208:	f000 f857 	bl	80072ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2208      	movs	r2, #8
 8007210:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2200      	movs	r2, #0
 8007216:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800721a:	2301      	movs	r3, #1
 800721c:	e00f      	b.n	800723e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	4013      	ands	r3, r2
 8007228:	68ba      	ldr	r2, [r7, #8]
 800722a:	429a      	cmp	r2, r3
 800722c:	bf0c      	ite	eq
 800722e:	2301      	moveq	r3, #1
 8007230:	2300      	movne	r3, #0
 8007232:	b2db      	uxtb	r3, r3
 8007234:	461a      	mov	r2, r3
 8007236:	79fb      	ldrb	r3, [r7, #7]
 8007238:	429a      	cmp	r2, r3
 800723a:	d0b4      	beq.n	80071a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800723c:	2300      	movs	r3, #0
}
 800723e:	4618      	mov	r0, r3
 8007240:	3718      	adds	r7, #24
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}

08007246 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007246:	b480      	push	{r7}
 8007248:	b085      	sub	sp, #20
 800724a:	af00      	add	r7, sp, #0
 800724c:	60f8      	str	r0, [r7, #12]
 800724e:	60b9      	str	r1, [r7, #8]
 8007250:	4613      	mov	r3, r2
 8007252:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	68ba      	ldr	r2, [r7, #8]
 8007258:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	88fa      	ldrh	r2, [r7, #6]
 800725e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	88fa      	ldrh	r2, [r7, #6]
 8007264:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2200      	movs	r2, #0
 800726a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2222      	movs	r2, #34	@ 0x22
 8007270:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	691b      	ldr	r3, [r3, #16]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d007      	beq.n	800728c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	68da      	ldr	r2, [r3, #12]
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800728a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	695a      	ldr	r2, [r3, #20]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f042 0201 	orr.w	r2, r2, #1
 800729a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	68da      	ldr	r2, [r3, #12]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f042 0220 	orr.w	r2, r2, #32
 80072aa:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80072ac:	2300      	movs	r3, #0
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3714      	adds	r7, #20
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr

080072ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80072ba:	b480      	push	{r7}
 80072bc:	b095      	sub	sp, #84	@ 0x54
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	330c      	adds	r3, #12
 80072c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072cc:	e853 3f00 	ldrex	r3, [r3]
 80072d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80072d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80072d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	330c      	adds	r3, #12
 80072e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80072e2:	643a      	str	r2, [r7, #64]	@ 0x40
 80072e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80072e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80072ea:	e841 2300 	strex	r3, r2, [r1]
 80072ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80072f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d1e5      	bne.n	80072c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	3314      	adds	r3, #20
 80072fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072fe:	6a3b      	ldr	r3, [r7, #32]
 8007300:	e853 3f00 	ldrex	r3, [r3]
 8007304:	61fb      	str	r3, [r7, #28]
   return(result);
 8007306:	69fb      	ldr	r3, [r7, #28]
 8007308:	f023 0301 	bic.w	r3, r3, #1
 800730c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	3314      	adds	r3, #20
 8007314:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007316:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007318:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800731a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800731c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800731e:	e841 2300 	strex	r3, r2, [r1]
 8007322:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007326:	2b00      	cmp	r3, #0
 8007328:	d1e5      	bne.n	80072f6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800732e:	2b01      	cmp	r3, #1
 8007330:	d119      	bne.n	8007366 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	330c      	adds	r3, #12
 8007338:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	e853 3f00 	ldrex	r3, [r3]
 8007340:	60bb      	str	r3, [r7, #8]
   return(result);
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	f023 0310 	bic.w	r3, r3, #16
 8007348:	647b      	str	r3, [r7, #68]	@ 0x44
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	330c      	adds	r3, #12
 8007350:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007352:	61ba      	str	r2, [r7, #24]
 8007354:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007356:	6979      	ldr	r1, [r7, #20]
 8007358:	69ba      	ldr	r2, [r7, #24]
 800735a:	e841 2300 	strex	r3, r2, [r1]
 800735e:	613b      	str	r3, [r7, #16]
   return(result);
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d1e5      	bne.n	8007332 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2220      	movs	r2, #32
 800736a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007374:	bf00      	nop
 8007376:	3754      	adds	r7, #84	@ 0x54
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800738c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2200      	movs	r2, #0
 8007392:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2200      	movs	r2, #0
 8007398:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800739a:	68f8      	ldr	r0, [r7, #12]
 800739c:	f7fb fde0 	bl	8002f60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073a0:	bf00      	nop
 80073a2:	3710      	adds	r7, #16
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b085      	sub	sp, #20
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	2b21      	cmp	r3, #33	@ 0x21
 80073ba:	d13e      	bne.n	800743a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073c4:	d114      	bne.n	80073f0 <UART_Transmit_IT+0x48>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	691b      	ldr	r3, [r3, #16]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d110      	bne.n	80073f0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6a1b      	ldr	r3, [r3, #32]
 80073d2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	881b      	ldrh	r3, [r3, #0]
 80073d8:	461a      	mov	r2, r3
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073e2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6a1b      	ldr	r3, [r3, #32]
 80073e8:	1c9a      	adds	r2, r3, #2
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	621a      	str	r2, [r3, #32]
 80073ee:	e008      	b.n	8007402 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6a1b      	ldr	r3, [r3, #32]
 80073f4:	1c59      	adds	r1, r3, #1
 80073f6:	687a      	ldr	r2, [r7, #4]
 80073f8:	6211      	str	r1, [r2, #32]
 80073fa:	781a      	ldrb	r2, [r3, #0]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007406:	b29b      	uxth	r3, r3
 8007408:	3b01      	subs	r3, #1
 800740a:	b29b      	uxth	r3, r3
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	4619      	mov	r1, r3
 8007410:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007412:	2b00      	cmp	r3, #0
 8007414:	d10f      	bne.n	8007436 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	68da      	ldr	r2, [r3, #12]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007424:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	68da      	ldr	r2, [r3, #12]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007434:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007436:	2300      	movs	r3, #0
 8007438:	e000      	b.n	800743c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800743a:	2302      	movs	r3, #2
  }
}
 800743c:	4618      	mov	r0, r3
 800743e:	3714      	adds	r7, #20
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr

08007448 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b082      	sub	sp, #8
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	68da      	ldr	r2, [r3, #12]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800745e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2220      	movs	r2, #32
 8007464:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f7ff fe71 	bl	8007150 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800746e:	2300      	movs	r3, #0
}
 8007470:	4618      	mov	r0, r3
 8007472:	3708      	adds	r7, #8
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b08c      	sub	sp, #48	@ 0x30
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007486:	b2db      	uxtb	r3, r3
 8007488:	2b22      	cmp	r3, #34	@ 0x22
 800748a:	f040 80ae 	bne.w	80075ea <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007496:	d117      	bne.n	80074c8 <UART_Receive_IT+0x50>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	691b      	ldr	r3, [r3, #16]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d113      	bne.n	80074c8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80074a0:	2300      	movs	r3, #0
 80074a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074a8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074b6:	b29a      	uxth	r2, r3
 80074b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074c0:	1c9a      	adds	r2, r3, #2
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	629a      	str	r2, [r3, #40]	@ 0x28
 80074c6:	e026      	b.n	8007516 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80074ce:	2300      	movs	r3, #0
 80074d0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074da:	d007      	beq.n	80074ec <UART_Receive_IT+0x74>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d10a      	bne.n	80074fa <UART_Receive_IT+0x82>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	691b      	ldr	r3, [r3, #16]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d106      	bne.n	80074fa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	b2da      	uxtb	r2, r3
 80074f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074f6:	701a      	strb	r2, [r3, #0]
 80074f8:	e008      	b.n	800750c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	b2db      	uxtb	r3, r3
 8007502:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007506:	b2da      	uxtb	r2, r3
 8007508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800750a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007510:	1c5a      	adds	r2, r3, #1
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800751a:	b29b      	uxth	r3, r3
 800751c:	3b01      	subs	r3, #1
 800751e:	b29b      	uxth	r3, r3
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	4619      	mov	r1, r3
 8007524:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007526:	2b00      	cmp	r3, #0
 8007528:	d15d      	bne.n	80075e6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	68da      	ldr	r2, [r3, #12]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f022 0220 	bic.w	r2, r2, #32
 8007538:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	68da      	ldr	r2, [r3, #12]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007548:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	695a      	ldr	r2, [r3, #20]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f022 0201 	bic.w	r2, r2, #1
 8007558:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2220      	movs	r2, #32
 800755e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2200      	movs	r2, #0
 8007566:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800756c:	2b01      	cmp	r3, #1
 800756e:	d135      	bne.n	80075dc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2200      	movs	r2, #0
 8007574:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	330c      	adds	r3, #12
 800757c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	e853 3f00 	ldrex	r3, [r3]
 8007584:	613b      	str	r3, [r7, #16]
   return(result);
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	f023 0310 	bic.w	r3, r3, #16
 800758c:	627b      	str	r3, [r7, #36]	@ 0x24
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	330c      	adds	r3, #12
 8007594:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007596:	623a      	str	r2, [r7, #32]
 8007598:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800759a:	69f9      	ldr	r1, [r7, #28]
 800759c:	6a3a      	ldr	r2, [r7, #32]
 800759e:	e841 2300 	strex	r3, r2, [r1]
 80075a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80075a4:	69bb      	ldr	r3, [r7, #24]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d1e5      	bne.n	8007576 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f003 0310 	and.w	r3, r3, #16
 80075b4:	2b10      	cmp	r3, #16
 80075b6:	d10a      	bne.n	80075ce <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80075b8:	2300      	movs	r3, #0
 80075ba:	60fb      	str	r3, [r7, #12]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	60fb      	str	r3, [r7, #12]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	60fb      	str	r3, [r7, #12]
 80075cc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80075d2:	4619      	mov	r1, r3
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f7ff fdc5 	bl	8007164 <HAL_UARTEx_RxEventCallback>
 80075da:	e002      	b.n	80075e2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f7fb fc95 	bl	8002f0c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80075e2:	2300      	movs	r3, #0
 80075e4:	e002      	b.n	80075ec <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80075e6:	2300      	movs	r3, #0
 80075e8:	e000      	b.n	80075ec <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80075ea:	2302      	movs	r3, #2
  }
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3730      	adds	r7, #48	@ 0x30
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80075f8:	b0c0      	sub	sp, #256	@ 0x100
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	691b      	ldr	r3, [r3, #16]
 8007608:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800760c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007610:	68d9      	ldr	r1, [r3, #12]
 8007612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	ea40 0301 	orr.w	r3, r0, r1
 800761c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800761e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007622:	689a      	ldr	r2, [r3, #8]
 8007624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007628:	691b      	ldr	r3, [r3, #16]
 800762a:	431a      	orrs	r2, r3
 800762c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007630:	695b      	ldr	r3, [r3, #20]
 8007632:	431a      	orrs	r2, r3
 8007634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007638:	69db      	ldr	r3, [r3, #28]
 800763a:	4313      	orrs	r3, r2
 800763c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	68db      	ldr	r3, [r3, #12]
 8007648:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800764c:	f021 010c 	bic.w	r1, r1, #12
 8007650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007654:	681a      	ldr	r2, [r3, #0]
 8007656:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800765a:	430b      	orrs	r3, r1
 800765c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800765e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	695b      	ldr	r3, [r3, #20]
 8007666:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800766a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800766e:	6999      	ldr	r1, [r3, #24]
 8007670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	ea40 0301 	orr.w	r3, r0, r1
 800767a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800767c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	4b8f      	ldr	r3, [pc, #572]	@ (80078c0 <UART_SetConfig+0x2cc>)
 8007684:	429a      	cmp	r2, r3
 8007686:	d005      	beq.n	8007694 <UART_SetConfig+0xa0>
 8007688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800768c:	681a      	ldr	r2, [r3, #0]
 800768e:	4b8d      	ldr	r3, [pc, #564]	@ (80078c4 <UART_SetConfig+0x2d0>)
 8007690:	429a      	cmp	r2, r3
 8007692:	d104      	bne.n	800769e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007694:	f7fd fa06 	bl	8004aa4 <HAL_RCC_GetPCLK2Freq>
 8007698:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800769c:	e003      	b.n	80076a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800769e:	f7fd f9ed 	bl	8004a7c <HAL_RCC_GetPCLK1Freq>
 80076a2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076aa:	69db      	ldr	r3, [r3, #28]
 80076ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80076b0:	f040 810c 	bne.w	80078cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80076b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80076b8:	2200      	movs	r2, #0
 80076ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80076be:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80076c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80076c6:	4622      	mov	r2, r4
 80076c8:	462b      	mov	r3, r5
 80076ca:	1891      	adds	r1, r2, r2
 80076cc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80076ce:	415b      	adcs	r3, r3
 80076d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80076d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80076d6:	4621      	mov	r1, r4
 80076d8:	eb12 0801 	adds.w	r8, r2, r1
 80076dc:	4629      	mov	r1, r5
 80076de:	eb43 0901 	adc.w	r9, r3, r1
 80076e2:	f04f 0200 	mov.w	r2, #0
 80076e6:	f04f 0300 	mov.w	r3, #0
 80076ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80076ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80076f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80076f6:	4690      	mov	r8, r2
 80076f8:	4699      	mov	r9, r3
 80076fa:	4623      	mov	r3, r4
 80076fc:	eb18 0303 	adds.w	r3, r8, r3
 8007700:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007704:	462b      	mov	r3, r5
 8007706:	eb49 0303 	adc.w	r3, r9, r3
 800770a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800770e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	2200      	movs	r2, #0
 8007716:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800771a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800771e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007722:	460b      	mov	r3, r1
 8007724:	18db      	adds	r3, r3, r3
 8007726:	653b      	str	r3, [r7, #80]	@ 0x50
 8007728:	4613      	mov	r3, r2
 800772a:	eb42 0303 	adc.w	r3, r2, r3
 800772e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007730:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007734:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007738:	f7f9 fac0 	bl	8000cbc <__aeabi_uldivmod>
 800773c:	4602      	mov	r2, r0
 800773e:	460b      	mov	r3, r1
 8007740:	4b61      	ldr	r3, [pc, #388]	@ (80078c8 <UART_SetConfig+0x2d4>)
 8007742:	fba3 2302 	umull	r2, r3, r3, r2
 8007746:	095b      	lsrs	r3, r3, #5
 8007748:	011c      	lsls	r4, r3, #4
 800774a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800774e:	2200      	movs	r2, #0
 8007750:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007754:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007758:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800775c:	4642      	mov	r2, r8
 800775e:	464b      	mov	r3, r9
 8007760:	1891      	adds	r1, r2, r2
 8007762:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007764:	415b      	adcs	r3, r3
 8007766:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007768:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800776c:	4641      	mov	r1, r8
 800776e:	eb12 0a01 	adds.w	sl, r2, r1
 8007772:	4649      	mov	r1, r9
 8007774:	eb43 0b01 	adc.w	fp, r3, r1
 8007778:	f04f 0200 	mov.w	r2, #0
 800777c:	f04f 0300 	mov.w	r3, #0
 8007780:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007784:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007788:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800778c:	4692      	mov	sl, r2
 800778e:	469b      	mov	fp, r3
 8007790:	4643      	mov	r3, r8
 8007792:	eb1a 0303 	adds.w	r3, sl, r3
 8007796:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800779a:	464b      	mov	r3, r9
 800779c:	eb4b 0303 	adc.w	r3, fp, r3
 80077a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80077a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80077b0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80077b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80077b8:	460b      	mov	r3, r1
 80077ba:	18db      	adds	r3, r3, r3
 80077bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80077be:	4613      	mov	r3, r2
 80077c0:	eb42 0303 	adc.w	r3, r2, r3
 80077c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80077c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80077ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80077ce:	f7f9 fa75 	bl	8000cbc <__aeabi_uldivmod>
 80077d2:	4602      	mov	r2, r0
 80077d4:	460b      	mov	r3, r1
 80077d6:	4611      	mov	r1, r2
 80077d8:	4b3b      	ldr	r3, [pc, #236]	@ (80078c8 <UART_SetConfig+0x2d4>)
 80077da:	fba3 2301 	umull	r2, r3, r3, r1
 80077de:	095b      	lsrs	r3, r3, #5
 80077e0:	2264      	movs	r2, #100	@ 0x64
 80077e2:	fb02 f303 	mul.w	r3, r2, r3
 80077e6:	1acb      	subs	r3, r1, r3
 80077e8:	00db      	lsls	r3, r3, #3
 80077ea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80077ee:	4b36      	ldr	r3, [pc, #216]	@ (80078c8 <UART_SetConfig+0x2d4>)
 80077f0:	fba3 2302 	umull	r2, r3, r3, r2
 80077f4:	095b      	lsrs	r3, r3, #5
 80077f6:	005b      	lsls	r3, r3, #1
 80077f8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80077fc:	441c      	add	r4, r3
 80077fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007802:	2200      	movs	r2, #0
 8007804:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007808:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800780c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007810:	4642      	mov	r2, r8
 8007812:	464b      	mov	r3, r9
 8007814:	1891      	adds	r1, r2, r2
 8007816:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007818:	415b      	adcs	r3, r3
 800781a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800781c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007820:	4641      	mov	r1, r8
 8007822:	1851      	adds	r1, r2, r1
 8007824:	6339      	str	r1, [r7, #48]	@ 0x30
 8007826:	4649      	mov	r1, r9
 8007828:	414b      	adcs	r3, r1
 800782a:	637b      	str	r3, [r7, #52]	@ 0x34
 800782c:	f04f 0200 	mov.w	r2, #0
 8007830:	f04f 0300 	mov.w	r3, #0
 8007834:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007838:	4659      	mov	r1, fp
 800783a:	00cb      	lsls	r3, r1, #3
 800783c:	4651      	mov	r1, sl
 800783e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007842:	4651      	mov	r1, sl
 8007844:	00ca      	lsls	r2, r1, #3
 8007846:	4610      	mov	r0, r2
 8007848:	4619      	mov	r1, r3
 800784a:	4603      	mov	r3, r0
 800784c:	4642      	mov	r2, r8
 800784e:	189b      	adds	r3, r3, r2
 8007850:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007854:	464b      	mov	r3, r9
 8007856:	460a      	mov	r2, r1
 8007858:	eb42 0303 	adc.w	r3, r2, r3
 800785c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800786c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007870:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007874:	460b      	mov	r3, r1
 8007876:	18db      	adds	r3, r3, r3
 8007878:	62bb      	str	r3, [r7, #40]	@ 0x28
 800787a:	4613      	mov	r3, r2
 800787c:	eb42 0303 	adc.w	r3, r2, r3
 8007880:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007882:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007886:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800788a:	f7f9 fa17 	bl	8000cbc <__aeabi_uldivmod>
 800788e:	4602      	mov	r2, r0
 8007890:	460b      	mov	r3, r1
 8007892:	4b0d      	ldr	r3, [pc, #52]	@ (80078c8 <UART_SetConfig+0x2d4>)
 8007894:	fba3 1302 	umull	r1, r3, r3, r2
 8007898:	095b      	lsrs	r3, r3, #5
 800789a:	2164      	movs	r1, #100	@ 0x64
 800789c:	fb01 f303 	mul.w	r3, r1, r3
 80078a0:	1ad3      	subs	r3, r2, r3
 80078a2:	00db      	lsls	r3, r3, #3
 80078a4:	3332      	adds	r3, #50	@ 0x32
 80078a6:	4a08      	ldr	r2, [pc, #32]	@ (80078c8 <UART_SetConfig+0x2d4>)
 80078a8:	fba2 2303 	umull	r2, r3, r2, r3
 80078ac:	095b      	lsrs	r3, r3, #5
 80078ae:	f003 0207 	and.w	r2, r3, #7
 80078b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4422      	add	r2, r4
 80078ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80078bc:	e106      	b.n	8007acc <UART_SetConfig+0x4d8>
 80078be:	bf00      	nop
 80078c0:	40011000 	.word	0x40011000
 80078c4:	40011400 	.word	0x40011400
 80078c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80078cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078d0:	2200      	movs	r2, #0
 80078d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80078d6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80078da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80078de:	4642      	mov	r2, r8
 80078e0:	464b      	mov	r3, r9
 80078e2:	1891      	adds	r1, r2, r2
 80078e4:	6239      	str	r1, [r7, #32]
 80078e6:	415b      	adcs	r3, r3
 80078e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80078ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80078ee:	4641      	mov	r1, r8
 80078f0:	1854      	adds	r4, r2, r1
 80078f2:	4649      	mov	r1, r9
 80078f4:	eb43 0501 	adc.w	r5, r3, r1
 80078f8:	f04f 0200 	mov.w	r2, #0
 80078fc:	f04f 0300 	mov.w	r3, #0
 8007900:	00eb      	lsls	r3, r5, #3
 8007902:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007906:	00e2      	lsls	r2, r4, #3
 8007908:	4614      	mov	r4, r2
 800790a:	461d      	mov	r5, r3
 800790c:	4643      	mov	r3, r8
 800790e:	18e3      	adds	r3, r4, r3
 8007910:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007914:	464b      	mov	r3, r9
 8007916:	eb45 0303 	adc.w	r3, r5, r3
 800791a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800791e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	2200      	movs	r2, #0
 8007926:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800792a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800792e:	f04f 0200 	mov.w	r2, #0
 8007932:	f04f 0300 	mov.w	r3, #0
 8007936:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800793a:	4629      	mov	r1, r5
 800793c:	008b      	lsls	r3, r1, #2
 800793e:	4621      	mov	r1, r4
 8007940:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007944:	4621      	mov	r1, r4
 8007946:	008a      	lsls	r2, r1, #2
 8007948:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800794c:	f7f9 f9b6 	bl	8000cbc <__aeabi_uldivmod>
 8007950:	4602      	mov	r2, r0
 8007952:	460b      	mov	r3, r1
 8007954:	4b60      	ldr	r3, [pc, #384]	@ (8007ad8 <UART_SetConfig+0x4e4>)
 8007956:	fba3 2302 	umull	r2, r3, r3, r2
 800795a:	095b      	lsrs	r3, r3, #5
 800795c:	011c      	lsls	r4, r3, #4
 800795e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007962:	2200      	movs	r2, #0
 8007964:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007968:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800796c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007970:	4642      	mov	r2, r8
 8007972:	464b      	mov	r3, r9
 8007974:	1891      	adds	r1, r2, r2
 8007976:	61b9      	str	r1, [r7, #24]
 8007978:	415b      	adcs	r3, r3
 800797a:	61fb      	str	r3, [r7, #28]
 800797c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007980:	4641      	mov	r1, r8
 8007982:	1851      	adds	r1, r2, r1
 8007984:	6139      	str	r1, [r7, #16]
 8007986:	4649      	mov	r1, r9
 8007988:	414b      	adcs	r3, r1
 800798a:	617b      	str	r3, [r7, #20]
 800798c:	f04f 0200 	mov.w	r2, #0
 8007990:	f04f 0300 	mov.w	r3, #0
 8007994:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007998:	4659      	mov	r1, fp
 800799a:	00cb      	lsls	r3, r1, #3
 800799c:	4651      	mov	r1, sl
 800799e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80079a2:	4651      	mov	r1, sl
 80079a4:	00ca      	lsls	r2, r1, #3
 80079a6:	4610      	mov	r0, r2
 80079a8:	4619      	mov	r1, r3
 80079aa:	4603      	mov	r3, r0
 80079ac:	4642      	mov	r2, r8
 80079ae:	189b      	adds	r3, r3, r2
 80079b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80079b4:	464b      	mov	r3, r9
 80079b6:	460a      	mov	r2, r1
 80079b8:	eb42 0303 	adc.w	r3, r2, r3
 80079bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80079c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	2200      	movs	r2, #0
 80079c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80079ca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80079cc:	f04f 0200 	mov.w	r2, #0
 80079d0:	f04f 0300 	mov.w	r3, #0
 80079d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80079d8:	4649      	mov	r1, r9
 80079da:	008b      	lsls	r3, r1, #2
 80079dc:	4641      	mov	r1, r8
 80079de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80079e2:	4641      	mov	r1, r8
 80079e4:	008a      	lsls	r2, r1, #2
 80079e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80079ea:	f7f9 f967 	bl	8000cbc <__aeabi_uldivmod>
 80079ee:	4602      	mov	r2, r0
 80079f0:	460b      	mov	r3, r1
 80079f2:	4611      	mov	r1, r2
 80079f4:	4b38      	ldr	r3, [pc, #224]	@ (8007ad8 <UART_SetConfig+0x4e4>)
 80079f6:	fba3 2301 	umull	r2, r3, r3, r1
 80079fa:	095b      	lsrs	r3, r3, #5
 80079fc:	2264      	movs	r2, #100	@ 0x64
 80079fe:	fb02 f303 	mul.w	r3, r2, r3
 8007a02:	1acb      	subs	r3, r1, r3
 8007a04:	011b      	lsls	r3, r3, #4
 8007a06:	3332      	adds	r3, #50	@ 0x32
 8007a08:	4a33      	ldr	r2, [pc, #204]	@ (8007ad8 <UART_SetConfig+0x4e4>)
 8007a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a0e:	095b      	lsrs	r3, r3, #5
 8007a10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007a14:	441c      	add	r4, r3
 8007a16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	673b      	str	r3, [r7, #112]	@ 0x70
 8007a1e:	677a      	str	r2, [r7, #116]	@ 0x74
 8007a20:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007a24:	4642      	mov	r2, r8
 8007a26:	464b      	mov	r3, r9
 8007a28:	1891      	adds	r1, r2, r2
 8007a2a:	60b9      	str	r1, [r7, #8]
 8007a2c:	415b      	adcs	r3, r3
 8007a2e:	60fb      	str	r3, [r7, #12]
 8007a30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007a34:	4641      	mov	r1, r8
 8007a36:	1851      	adds	r1, r2, r1
 8007a38:	6039      	str	r1, [r7, #0]
 8007a3a:	4649      	mov	r1, r9
 8007a3c:	414b      	adcs	r3, r1
 8007a3e:	607b      	str	r3, [r7, #4]
 8007a40:	f04f 0200 	mov.w	r2, #0
 8007a44:	f04f 0300 	mov.w	r3, #0
 8007a48:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007a4c:	4659      	mov	r1, fp
 8007a4e:	00cb      	lsls	r3, r1, #3
 8007a50:	4651      	mov	r1, sl
 8007a52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a56:	4651      	mov	r1, sl
 8007a58:	00ca      	lsls	r2, r1, #3
 8007a5a:	4610      	mov	r0, r2
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	4603      	mov	r3, r0
 8007a60:	4642      	mov	r2, r8
 8007a62:	189b      	adds	r3, r3, r2
 8007a64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007a66:	464b      	mov	r3, r9
 8007a68:	460a      	mov	r2, r1
 8007a6a:	eb42 0303 	adc.w	r3, r2, r3
 8007a6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	2200      	movs	r2, #0
 8007a78:	663b      	str	r3, [r7, #96]	@ 0x60
 8007a7a:	667a      	str	r2, [r7, #100]	@ 0x64
 8007a7c:	f04f 0200 	mov.w	r2, #0
 8007a80:	f04f 0300 	mov.w	r3, #0
 8007a84:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007a88:	4649      	mov	r1, r9
 8007a8a:	008b      	lsls	r3, r1, #2
 8007a8c:	4641      	mov	r1, r8
 8007a8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a92:	4641      	mov	r1, r8
 8007a94:	008a      	lsls	r2, r1, #2
 8007a96:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007a9a:	f7f9 f90f 	bl	8000cbc <__aeabi_uldivmod>
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	460b      	mov	r3, r1
 8007aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8007ad8 <UART_SetConfig+0x4e4>)
 8007aa4:	fba3 1302 	umull	r1, r3, r3, r2
 8007aa8:	095b      	lsrs	r3, r3, #5
 8007aaa:	2164      	movs	r1, #100	@ 0x64
 8007aac:	fb01 f303 	mul.w	r3, r1, r3
 8007ab0:	1ad3      	subs	r3, r2, r3
 8007ab2:	011b      	lsls	r3, r3, #4
 8007ab4:	3332      	adds	r3, #50	@ 0x32
 8007ab6:	4a08      	ldr	r2, [pc, #32]	@ (8007ad8 <UART_SetConfig+0x4e4>)
 8007ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8007abc:	095b      	lsrs	r3, r3, #5
 8007abe:	f003 020f 	and.w	r2, r3, #15
 8007ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4422      	add	r2, r4
 8007aca:	609a      	str	r2, [r3, #8]
}
 8007acc:	bf00      	nop
 8007ace:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ad8:	51eb851f 	.word	0x51eb851f

08007adc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b085      	sub	sp, #20
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007aea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007aee:	2b84      	cmp	r3, #132	@ 0x84
 8007af0:	d005      	beq.n	8007afe <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007af2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	4413      	add	r3, r2
 8007afa:	3303      	adds	r3, #3
 8007afc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007afe:	68fb      	ldr	r3, [r7, #12]
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3714      	adds	r7, #20
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr

08007b0c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b083      	sub	sp, #12
 8007b10:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b12:	f3ef 8305 	mrs	r3, IPSR
 8007b16:	607b      	str	r3, [r7, #4]
  return(result);
 8007b18:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	bf14      	ite	ne
 8007b1e:	2301      	movne	r3, #1
 8007b20:	2300      	moveq	r3, #0
 8007b22:	b2db      	uxtb	r3, r3
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	370c      	adds	r7, #12
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr

08007b30 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007b34:	f001 f982 	bl	8008e3c <vTaskStartScheduler>
  
  return osOK;
 8007b38:	2300      	movs	r3, #0
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	bd80      	pop	{r7, pc}

08007b3e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007b3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b40:	b089      	sub	sp, #36	@ 0x24
 8007b42:	af04      	add	r7, sp, #16
 8007b44:	6078      	str	r0, [r7, #4]
 8007b46:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	695b      	ldr	r3, [r3, #20]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d020      	beq.n	8007b92 <osThreadCreate+0x54>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	699b      	ldr	r3, [r3, #24]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d01c      	beq.n	8007b92 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	685c      	ldr	r4, [r3, #4]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	691e      	ldr	r6, [r3, #16]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f7ff ffb6 	bl	8007adc <makeFreeRtosPriority>
 8007b70:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	695b      	ldr	r3, [r3, #20]
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007b7a:	9202      	str	r2, [sp, #8]
 8007b7c:	9301      	str	r3, [sp, #4]
 8007b7e:	9100      	str	r1, [sp, #0]
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	4632      	mov	r2, r6
 8007b84:	4629      	mov	r1, r5
 8007b86:	4620      	mov	r0, r4
 8007b88:	f000 ff72 	bl	8008a70 <xTaskCreateStatic>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	60fb      	str	r3, [r7, #12]
 8007b90:	e01c      	b.n	8007bcc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	685c      	ldr	r4, [r3, #4]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007b9e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f7ff ff98 	bl	8007adc <makeFreeRtosPriority>
 8007bac:	4602      	mov	r2, r0
 8007bae:	f107 030c 	add.w	r3, r7, #12
 8007bb2:	9301      	str	r3, [sp, #4]
 8007bb4:	9200      	str	r2, [sp, #0]
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	4632      	mov	r2, r6
 8007bba:	4629      	mov	r1, r5
 8007bbc:	4620      	mov	r0, r4
 8007bbe:	f000 ffb7 	bl	8008b30 <xTaskCreate>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d001      	beq.n	8007bcc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	e000      	b.n	8007bce <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3714      	adds	r7, #20
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007bd6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007bd6:	b580      	push	{r7, lr}
 8007bd8:	b084      	sub	sp, #16
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d001      	beq.n	8007bec <osDelay+0x16>
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	e000      	b.n	8007bee <osDelay+0x18>
 8007bec:	2301      	movs	r3, #1
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f001 f8ee 	bl	8008dd0 <vTaskDelay>
  
  return osOK;
 8007bf4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3710      	adds	r7, #16
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
	...

08007c00 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b086      	sub	sp, #24
 8007c04:	af02      	add	r7, sp, #8
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8007c12:	f7ff ff7b 	bl	8007b0c <inHandlerMode>
 8007c16:	4603      	mov	r3, r0
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d01c      	beq.n	8007c56 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8007c1c:	6839      	ldr	r1, [r7, #0]
 8007c1e:	f107 0208 	add.w	r2, r7, #8
 8007c22:	f107 030c 	add.w	r3, r7, #12
 8007c26:	9300      	str	r3, [sp, #0]
 8007c28:	4613      	mov	r3, r2
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f001 fff3 	bl	8009c18 <xTaskGenericNotifyFromISR>
 8007c32:	4603      	mov	r3, r0
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d002      	beq.n	8007c3e <osSignalSet+0x3e>
      return 0x80000000;
 8007c38:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007c3c:	e019      	b.n	8007c72 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d015      	beq.n	8007c70 <osSignalSet+0x70>
 8007c44:	4b0d      	ldr	r3, [pc, #52]	@ (8007c7c <osSignalSet+0x7c>)
 8007c46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c4a:	601a      	str	r2, [r3, #0]
 8007c4c:	f3bf 8f4f 	dsb	sy
 8007c50:	f3bf 8f6f 	isb	sy
 8007c54:	e00c      	b.n	8007c70 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8007c56:	6839      	ldr	r1, [r7, #0]
 8007c58:	f107 0308 	add.w	r3, r7, #8
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f001 ff18 	bl	8009a94 <xTaskGenericNotify>
 8007c64:	4603      	mov	r3, r0
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d002      	beq.n	8007c70 <osSignalSet+0x70>
    return 0x80000000;
 8007c6a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007c6e:	e000      	b.n	8007c72 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8007c70:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3710      	adds	r7, #16
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
 8007c7a:	bf00      	nop
 8007c7c:	e000ed04 	.word	0xe000ed04

08007c80 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b086      	sub	sp, #24
 8007c84:	af02      	add	r7, sp, #8
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d00f      	beq.n	8007cb2 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d10a      	bne.n	8007cae <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	2203      	movs	r2, #3
 8007c9e:	9200      	str	r2, [sp, #0]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	2100      	movs	r1, #0
 8007ca4:	2001      	movs	r0, #1
 8007ca6:	f000 f9bf 	bl	8008028 <xQueueGenericCreateStatic>
 8007caa:	4603      	mov	r3, r0
 8007cac:	e016      	b.n	8007cdc <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	e014      	b.n	8007cdc <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d110      	bne.n	8007cda <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8007cb8:	2203      	movs	r2, #3
 8007cba:	2100      	movs	r1, #0
 8007cbc:	2001      	movs	r0, #1
 8007cbe:	f000 fa30 	bl	8008122 <xQueueGenericCreate>
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d005      	beq.n	8007cd6 <osSemaphoreCreate+0x56>
 8007cca:	2300      	movs	r3, #0
 8007ccc:	2200      	movs	r2, #0
 8007cce:	2100      	movs	r1, #0
 8007cd0:	68f8      	ldr	r0, [r7, #12]
 8007cd2:	f000 fa81 	bl	80081d8 <xQueueGenericSend>
      return sema;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	e000      	b.n	8007cdc <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8007cda:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3710      	adds	r7, #16
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8007cee:	2300      	movs	r3, #0
 8007cf0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d101      	bne.n	8007cfc <osSemaphoreWait+0x18>
    return osErrorParameter;
 8007cf8:	2380      	movs	r3, #128	@ 0x80
 8007cfa:	e03a      	b.n	8007d72 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d06:	d103      	bne.n	8007d10 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8007d08:	f04f 33ff 	mov.w	r3, #4294967295
 8007d0c:	60fb      	str	r3, [r7, #12]
 8007d0e:	e009      	b.n	8007d24 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d006      	beq.n	8007d24 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d101      	bne.n	8007d24 <osSemaphoreWait+0x40>
      ticks = 1;
 8007d20:	2301      	movs	r3, #1
 8007d22:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007d24:	f7ff fef2 	bl	8007b0c <inHandlerMode>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d017      	beq.n	8007d5e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007d2e:	f107 0308 	add.w	r3, r7, #8
 8007d32:	461a      	mov	r2, r3
 8007d34:	2100      	movs	r1, #0
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 fcf0 	bl	800871c <xQueueReceiveFromISR>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d001      	beq.n	8007d46 <osSemaphoreWait+0x62>
      return osErrorOS;
 8007d42:	23ff      	movs	r3, #255	@ 0xff
 8007d44:	e015      	b.n	8007d72 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d011      	beq.n	8007d70 <osSemaphoreWait+0x8c>
 8007d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8007d7c <osSemaphoreWait+0x98>)
 8007d4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d52:	601a      	str	r2, [r3, #0]
 8007d54:	f3bf 8f4f 	dsb	sy
 8007d58:	f3bf 8f6f 	isb	sy
 8007d5c:	e008      	b.n	8007d70 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8007d5e:	68f9      	ldr	r1, [r7, #12]
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 fbcb 	bl	80084fc <xQueueSemaphoreTake>
 8007d66:	4603      	mov	r3, r0
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d001      	beq.n	8007d70 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8007d6c:	23ff      	movs	r3, #255	@ 0xff
 8007d6e:	e000      	b.n	8007d72 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8007d70:	2300      	movs	r3, #0
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3710      	adds	r7, #16
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
 8007d7a:	bf00      	nop
 8007d7c:	e000ed04 	.word	0xe000ed04

08007d80 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8007d90:	f7ff febc 	bl	8007b0c <inHandlerMode>
 8007d94:	4603      	mov	r3, r0
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d016      	beq.n	8007dc8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007d9a:	f107 0308 	add.w	r3, r7, #8
 8007d9e:	4619      	mov	r1, r3
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 fb1b 	bl	80083dc <xQueueGiveFromISR>
 8007da6:	4603      	mov	r3, r0
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d001      	beq.n	8007db0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8007dac:	23ff      	movs	r3, #255	@ 0xff
 8007dae:	e017      	b.n	8007de0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d013      	beq.n	8007dde <osSemaphoreRelease+0x5e>
 8007db6:	4b0c      	ldr	r3, [pc, #48]	@ (8007de8 <osSemaphoreRelease+0x68>)
 8007db8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007dbc:	601a      	str	r2, [r3, #0]
 8007dbe:	f3bf 8f4f 	dsb	sy
 8007dc2:	f3bf 8f6f 	isb	sy
 8007dc6:	e00a      	b.n	8007dde <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8007dc8:	2300      	movs	r3, #0
 8007dca:	2200      	movs	r2, #0
 8007dcc:	2100      	movs	r1, #0
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 fa02 	bl	80081d8 <xQueueGenericSend>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d001      	beq.n	8007dde <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8007dda:	23ff      	movs	r3, #255	@ 0xff
 8007ddc:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8007dde:	68fb      	ldr	r3, [r7, #12]
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3710      	adds	r7, #16
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}
 8007de8:	e000ed04 	.word	0xe000ed04

08007dec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007dec:	b480      	push	{r7}
 8007dee:	b083      	sub	sp, #12
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f103 0208 	add.w	r2, r3, #8
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f04f 32ff 	mov.w	r2, #4294967295
 8007e04:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f103 0208 	add.w	r2, r3, #8
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f103 0208 	add.w	r2, r3, #8
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007e20:	bf00      	nop
 8007e22:	370c      	adds	r7, #12
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr

08007e2c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b083      	sub	sp, #12
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2200      	movs	r2, #0
 8007e38:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007e3a:	bf00      	nop
 8007e3c:	370c      	adds	r7, #12
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr

08007e46 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e46:	b480      	push	{r7}
 8007e48:	b085      	sub	sp, #20
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
 8007e4e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	68fa      	ldr	r2, [r7, #12]
 8007e5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	689a      	ldr	r2, [r3, #8]
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	689b      	ldr	r3, [r3, #8]
 8007e68:	683a      	ldr	r2, [r7, #0]
 8007e6a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	683a      	ldr	r2, [r7, #0]
 8007e70:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	1c5a      	adds	r2, r3, #1
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	601a      	str	r2, [r3, #0]
}
 8007e82:	bf00      	nop
 8007e84:	3714      	adds	r7, #20
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr

08007e8e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e8e:	b480      	push	{r7}
 8007e90:	b085      	sub	sp, #20
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
 8007e96:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ea4:	d103      	bne.n	8007eae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	691b      	ldr	r3, [r3, #16]
 8007eaa:	60fb      	str	r3, [r7, #12]
 8007eac:	e00c      	b.n	8007ec8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	3308      	adds	r3, #8
 8007eb2:	60fb      	str	r3, [r7, #12]
 8007eb4:	e002      	b.n	8007ebc <vListInsert+0x2e>
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	60fb      	str	r3, [r7, #12]
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	68ba      	ldr	r2, [r7, #8]
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d2f6      	bcs.n	8007eb6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	685a      	ldr	r2, [r3, #4]
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	683a      	ldr	r2, [r7, #0]
 8007ed6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	68fa      	ldr	r2, [r7, #12]
 8007edc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	683a      	ldr	r2, [r7, #0]
 8007ee2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	1c5a      	adds	r2, r3, #1
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	601a      	str	r2, [r3, #0]
}
 8007ef4:	bf00      	nop
 8007ef6:	3714      	adds	r7, #20
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr

08007f00 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007f00:	b480      	push	{r7}
 8007f02:	b085      	sub	sp, #20
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	691b      	ldr	r3, [r3, #16]
 8007f0c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	687a      	ldr	r2, [r7, #4]
 8007f14:	6892      	ldr	r2, [r2, #8]
 8007f16:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	6852      	ldr	r2, [r2, #4]
 8007f20:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d103      	bne.n	8007f34 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	689a      	ldr	r2, [r3, #8]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2200      	movs	r2, #0
 8007f38:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	1e5a      	subs	r2, r3, #1
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3714      	adds	r7, #20
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr

08007f54 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d10b      	bne.n	8007f80 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007f68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f6c:	f383 8811 	msr	BASEPRI, r3
 8007f70:	f3bf 8f6f 	isb	sy
 8007f74:	f3bf 8f4f 	dsb	sy
 8007f78:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007f7a:	bf00      	nop
 8007f7c:	bf00      	nop
 8007f7e:	e7fd      	b.n	8007f7c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007f80:	f002 f8ca 	bl	800a118 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681a      	ldr	r2, [r3, #0]
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f8c:	68f9      	ldr	r1, [r7, #12]
 8007f8e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007f90:	fb01 f303 	mul.w	r3, r1, r3
 8007f94:	441a      	add	r2, r3
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681a      	ldr	r2, [r3, #0]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fb0:	3b01      	subs	r3, #1
 8007fb2:	68f9      	ldr	r1, [r7, #12]
 8007fb4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007fb6:	fb01 f303 	mul.w	r3, r1, r3
 8007fba:	441a      	add	r2, r3
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	22ff      	movs	r2, #255	@ 0xff
 8007fc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	22ff      	movs	r2, #255	@ 0xff
 8007fcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d114      	bne.n	8008000 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	691b      	ldr	r3, [r3, #16]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d01a      	beq.n	8008014 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	3310      	adds	r3, #16
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f001 f984 	bl	80092f0 <xTaskRemoveFromEventList>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d012      	beq.n	8008014 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007fee:	4b0d      	ldr	r3, [pc, #52]	@ (8008024 <xQueueGenericReset+0xd0>)
 8007ff0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ff4:	601a      	str	r2, [r3, #0]
 8007ff6:	f3bf 8f4f 	dsb	sy
 8007ffa:	f3bf 8f6f 	isb	sy
 8007ffe:	e009      	b.n	8008014 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	3310      	adds	r3, #16
 8008004:	4618      	mov	r0, r3
 8008006:	f7ff fef1 	bl	8007dec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	3324      	adds	r3, #36	@ 0x24
 800800e:	4618      	mov	r0, r3
 8008010:	f7ff feec 	bl	8007dec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008014:	f002 f8b2 	bl	800a17c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008018:	2301      	movs	r3, #1
}
 800801a:	4618      	mov	r0, r3
 800801c:	3710      	adds	r7, #16
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
 8008022:	bf00      	nop
 8008024:	e000ed04 	.word	0xe000ed04

08008028 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008028:	b580      	push	{r7, lr}
 800802a:	b08e      	sub	sp, #56	@ 0x38
 800802c:	af02      	add	r7, sp, #8
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	60b9      	str	r1, [r7, #8]
 8008032:	607a      	str	r2, [r7, #4]
 8008034:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d10b      	bne.n	8008054 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800803c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008040:	f383 8811 	msr	BASEPRI, r3
 8008044:	f3bf 8f6f 	isb	sy
 8008048:	f3bf 8f4f 	dsb	sy
 800804c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800804e:	bf00      	nop
 8008050:	bf00      	nop
 8008052:	e7fd      	b.n	8008050 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d10b      	bne.n	8008072 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800805a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800805e:	f383 8811 	msr	BASEPRI, r3
 8008062:	f3bf 8f6f 	isb	sy
 8008066:	f3bf 8f4f 	dsb	sy
 800806a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800806c:	bf00      	nop
 800806e:	bf00      	nop
 8008070:	e7fd      	b.n	800806e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d002      	beq.n	800807e <xQueueGenericCreateStatic+0x56>
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d001      	beq.n	8008082 <xQueueGenericCreateStatic+0x5a>
 800807e:	2301      	movs	r3, #1
 8008080:	e000      	b.n	8008084 <xQueueGenericCreateStatic+0x5c>
 8008082:	2300      	movs	r3, #0
 8008084:	2b00      	cmp	r3, #0
 8008086:	d10b      	bne.n	80080a0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800808c:	f383 8811 	msr	BASEPRI, r3
 8008090:	f3bf 8f6f 	isb	sy
 8008094:	f3bf 8f4f 	dsb	sy
 8008098:	623b      	str	r3, [r7, #32]
}
 800809a:	bf00      	nop
 800809c:	bf00      	nop
 800809e:	e7fd      	b.n	800809c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d102      	bne.n	80080ac <xQueueGenericCreateStatic+0x84>
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d101      	bne.n	80080b0 <xQueueGenericCreateStatic+0x88>
 80080ac:	2301      	movs	r3, #1
 80080ae:	e000      	b.n	80080b2 <xQueueGenericCreateStatic+0x8a>
 80080b0:	2300      	movs	r3, #0
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d10b      	bne.n	80080ce <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80080b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ba:	f383 8811 	msr	BASEPRI, r3
 80080be:	f3bf 8f6f 	isb	sy
 80080c2:	f3bf 8f4f 	dsb	sy
 80080c6:	61fb      	str	r3, [r7, #28]
}
 80080c8:	bf00      	nop
 80080ca:	bf00      	nop
 80080cc:	e7fd      	b.n	80080ca <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80080ce:	2348      	movs	r3, #72	@ 0x48
 80080d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	2b48      	cmp	r3, #72	@ 0x48
 80080d6:	d00b      	beq.n	80080f0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80080d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080dc:	f383 8811 	msr	BASEPRI, r3
 80080e0:	f3bf 8f6f 	isb	sy
 80080e4:	f3bf 8f4f 	dsb	sy
 80080e8:	61bb      	str	r3, [r7, #24]
}
 80080ea:	bf00      	nop
 80080ec:	bf00      	nop
 80080ee:	e7fd      	b.n	80080ec <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80080f0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80080f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d00d      	beq.n	8008118 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80080fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080fe:	2201      	movs	r2, #1
 8008100:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008104:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800810a:	9300      	str	r3, [sp, #0]
 800810c:	4613      	mov	r3, r2
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	68b9      	ldr	r1, [r7, #8]
 8008112:	68f8      	ldr	r0, [r7, #12]
 8008114:	f000 f840 	bl	8008198 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800811a:	4618      	mov	r0, r3
 800811c:	3730      	adds	r7, #48	@ 0x30
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}

08008122 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008122:	b580      	push	{r7, lr}
 8008124:	b08a      	sub	sp, #40	@ 0x28
 8008126:	af02      	add	r7, sp, #8
 8008128:	60f8      	str	r0, [r7, #12]
 800812a:	60b9      	str	r1, [r7, #8]
 800812c:	4613      	mov	r3, r2
 800812e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d10b      	bne.n	800814e <xQueueGenericCreate+0x2c>
	__asm volatile
 8008136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800813a:	f383 8811 	msr	BASEPRI, r3
 800813e:	f3bf 8f6f 	isb	sy
 8008142:	f3bf 8f4f 	dsb	sy
 8008146:	613b      	str	r3, [r7, #16]
}
 8008148:	bf00      	nop
 800814a:	bf00      	nop
 800814c:	e7fd      	b.n	800814a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	68ba      	ldr	r2, [r7, #8]
 8008152:	fb02 f303 	mul.w	r3, r2, r3
 8008156:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008158:	69fb      	ldr	r3, [r7, #28]
 800815a:	3348      	adds	r3, #72	@ 0x48
 800815c:	4618      	mov	r0, r3
 800815e:	f002 f8fd 	bl	800a35c <pvPortMalloc>
 8008162:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008164:	69bb      	ldr	r3, [r7, #24]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d011      	beq.n	800818e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800816a:	69bb      	ldr	r3, [r7, #24]
 800816c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	3348      	adds	r3, #72	@ 0x48
 8008172:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008174:	69bb      	ldr	r3, [r7, #24]
 8008176:	2200      	movs	r2, #0
 8008178:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800817c:	79fa      	ldrb	r2, [r7, #7]
 800817e:	69bb      	ldr	r3, [r7, #24]
 8008180:	9300      	str	r3, [sp, #0]
 8008182:	4613      	mov	r3, r2
 8008184:	697a      	ldr	r2, [r7, #20]
 8008186:	68b9      	ldr	r1, [r7, #8]
 8008188:	68f8      	ldr	r0, [r7, #12]
 800818a:	f000 f805 	bl	8008198 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800818e:	69bb      	ldr	r3, [r7, #24]
	}
 8008190:	4618      	mov	r0, r3
 8008192:	3720      	adds	r7, #32
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	60f8      	str	r0, [r7, #12]
 80081a0:	60b9      	str	r1, [r7, #8]
 80081a2:	607a      	str	r2, [r7, #4]
 80081a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d103      	bne.n	80081b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80081ac:	69bb      	ldr	r3, [r7, #24]
 80081ae:	69ba      	ldr	r2, [r7, #24]
 80081b0:	601a      	str	r2, [r3, #0]
 80081b2:	e002      	b.n	80081ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80081b4:	69bb      	ldr	r3, [r7, #24]
 80081b6:	687a      	ldr	r2, [r7, #4]
 80081b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80081ba:	69bb      	ldr	r3, [r7, #24]
 80081bc:	68fa      	ldr	r2, [r7, #12]
 80081be:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80081c0:	69bb      	ldr	r3, [r7, #24]
 80081c2:	68ba      	ldr	r2, [r7, #8]
 80081c4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80081c6:	2101      	movs	r1, #1
 80081c8:	69b8      	ldr	r0, [r7, #24]
 80081ca:	f7ff fec3 	bl	8007f54 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80081ce:	bf00      	nop
 80081d0:	3710      	adds	r7, #16
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
	...

080081d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b08e      	sub	sp, #56	@ 0x38
 80081dc:	af00      	add	r7, sp, #0
 80081de:	60f8      	str	r0, [r7, #12]
 80081e0:	60b9      	str	r1, [r7, #8]
 80081e2:	607a      	str	r2, [r7, #4]
 80081e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80081e6:	2300      	movs	r3, #0
 80081e8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80081ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d10b      	bne.n	800820c <xQueueGenericSend+0x34>
	__asm volatile
 80081f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081f8:	f383 8811 	msr	BASEPRI, r3
 80081fc:	f3bf 8f6f 	isb	sy
 8008200:	f3bf 8f4f 	dsb	sy
 8008204:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008206:	bf00      	nop
 8008208:	bf00      	nop
 800820a:	e7fd      	b.n	8008208 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d103      	bne.n	800821a <xQueueGenericSend+0x42>
 8008212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008216:	2b00      	cmp	r3, #0
 8008218:	d101      	bne.n	800821e <xQueueGenericSend+0x46>
 800821a:	2301      	movs	r3, #1
 800821c:	e000      	b.n	8008220 <xQueueGenericSend+0x48>
 800821e:	2300      	movs	r3, #0
 8008220:	2b00      	cmp	r3, #0
 8008222:	d10b      	bne.n	800823c <xQueueGenericSend+0x64>
	__asm volatile
 8008224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008228:	f383 8811 	msr	BASEPRI, r3
 800822c:	f3bf 8f6f 	isb	sy
 8008230:	f3bf 8f4f 	dsb	sy
 8008234:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008236:	bf00      	nop
 8008238:	bf00      	nop
 800823a:	e7fd      	b.n	8008238 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	2b02      	cmp	r3, #2
 8008240:	d103      	bne.n	800824a <xQueueGenericSend+0x72>
 8008242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008244:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008246:	2b01      	cmp	r3, #1
 8008248:	d101      	bne.n	800824e <xQueueGenericSend+0x76>
 800824a:	2301      	movs	r3, #1
 800824c:	e000      	b.n	8008250 <xQueueGenericSend+0x78>
 800824e:	2300      	movs	r3, #0
 8008250:	2b00      	cmp	r3, #0
 8008252:	d10b      	bne.n	800826c <xQueueGenericSend+0x94>
	__asm volatile
 8008254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008258:	f383 8811 	msr	BASEPRI, r3
 800825c:	f3bf 8f6f 	isb	sy
 8008260:	f3bf 8f4f 	dsb	sy
 8008264:	623b      	str	r3, [r7, #32]
}
 8008266:	bf00      	nop
 8008268:	bf00      	nop
 800826a:	e7fd      	b.n	8008268 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800826c:	f001 fa06 	bl	800967c <xTaskGetSchedulerState>
 8008270:	4603      	mov	r3, r0
 8008272:	2b00      	cmp	r3, #0
 8008274:	d102      	bne.n	800827c <xQueueGenericSend+0xa4>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d101      	bne.n	8008280 <xQueueGenericSend+0xa8>
 800827c:	2301      	movs	r3, #1
 800827e:	e000      	b.n	8008282 <xQueueGenericSend+0xaa>
 8008280:	2300      	movs	r3, #0
 8008282:	2b00      	cmp	r3, #0
 8008284:	d10b      	bne.n	800829e <xQueueGenericSend+0xc6>
	__asm volatile
 8008286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800828a:	f383 8811 	msr	BASEPRI, r3
 800828e:	f3bf 8f6f 	isb	sy
 8008292:	f3bf 8f4f 	dsb	sy
 8008296:	61fb      	str	r3, [r7, #28]
}
 8008298:	bf00      	nop
 800829a:	bf00      	nop
 800829c:	e7fd      	b.n	800829a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800829e:	f001 ff3b 	bl	800a118 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80082a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80082a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d302      	bcc.n	80082b4 <xQueueGenericSend+0xdc>
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	2b02      	cmp	r3, #2
 80082b2:	d129      	bne.n	8008308 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80082b4:	683a      	ldr	r2, [r7, #0]
 80082b6:	68b9      	ldr	r1, [r7, #8]
 80082b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80082ba:	f000 fac9 	bl	8008850 <prvCopyDataToQueue>
 80082be:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d010      	beq.n	80082ea <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ca:	3324      	adds	r3, #36	@ 0x24
 80082cc:	4618      	mov	r0, r3
 80082ce:	f001 f80f 	bl	80092f0 <xTaskRemoveFromEventList>
 80082d2:	4603      	mov	r3, r0
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d013      	beq.n	8008300 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80082d8:	4b3f      	ldr	r3, [pc, #252]	@ (80083d8 <xQueueGenericSend+0x200>)
 80082da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082de:	601a      	str	r2, [r3, #0]
 80082e0:	f3bf 8f4f 	dsb	sy
 80082e4:	f3bf 8f6f 	isb	sy
 80082e8:	e00a      	b.n	8008300 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80082ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d007      	beq.n	8008300 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80082f0:	4b39      	ldr	r3, [pc, #228]	@ (80083d8 <xQueueGenericSend+0x200>)
 80082f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082f6:	601a      	str	r2, [r3, #0]
 80082f8:	f3bf 8f4f 	dsb	sy
 80082fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008300:	f001 ff3c 	bl	800a17c <vPortExitCritical>
				return pdPASS;
 8008304:	2301      	movs	r3, #1
 8008306:	e063      	b.n	80083d0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d103      	bne.n	8008316 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800830e:	f001 ff35 	bl	800a17c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008312:	2300      	movs	r3, #0
 8008314:	e05c      	b.n	80083d0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008316:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008318:	2b00      	cmp	r3, #0
 800831a:	d106      	bne.n	800832a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800831c:	f107 0314 	add.w	r3, r7, #20
 8008320:	4618      	mov	r0, r3
 8008322:	f001 f849 	bl	80093b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008326:	2301      	movs	r3, #1
 8008328:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800832a:	f001 ff27 	bl	800a17c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800832e:	f000 fdef 	bl	8008f10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008332:	f001 fef1 	bl	800a118 <vPortEnterCritical>
 8008336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008338:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800833c:	b25b      	sxtb	r3, r3
 800833e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008342:	d103      	bne.n	800834c <xQueueGenericSend+0x174>
 8008344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008346:	2200      	movs	r2, #0
 8008348:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800834c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800834e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008352:	b25b      	sxtb	r3, r3
 8008354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008358:	d103      	bne.n	8008362 <xQueueGenericSend+0x18a>
 800835a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800835c:	2200      	movs	r2, #0
 800835e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008362:	f001 ff0b 	bl	800a17c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008366:	1d3a      	adds	r2, r7, #4
 8008368:	f107 0314 	add.w	r3, r7, #20
 800836c:	4611      	mov	r1, r2
 800836e:	4618      	mov	r0, r3
 8008370:	f001 f838 	bl	80093e4 <xTaskCheckForTimeOut>
 8008374:	4603      	mov	r3, r0
 8008376:	2b00      	cmp	r3, #0
 8008378:	d124      	bne.n	80083c4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800837a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800837c:	f000 fb60 	bl	8008a40 <prvIsQueueFull>
 8008380:	4603      	mov	r3, r0
 8008382:	2b00      	cmp	r3, #0
 8008384:	d018      	beq.n	80083b8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008388:	3310      	adds	r3, #16
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	4611      	mov	r1, r2
 800838e:	4618      	mov	r0, r3
 8008390:	f000 ff88 	bl	80092a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008394:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008396:	f000 faeb 	bl	8008970 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800839a:	f000 fdc7 	bl	8008f2c <xTaskResumeAll>
 800839e:	4603      	mov	r3, r0
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	f47f af7c 	bne.w	800829e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80083a6:	4b0c      	ldr	r3, [pc, #48]	@ (80083d8 <xQueueGenericSend+0x200>)
 80083a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083ac:	601a      	str	r2, [r3, #0]
 80083ae:	f3bf 8f4f 	dsb	sy
 80083b2:	f3bf 8f6f 	isb	sy
 80083b6:	e772      	b.n	800829e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80083b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80083ba:	f000 fad9 	bl	8008970 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80083be:	f000 fdb5 	bl	8008f2c <xTaskResumeAll>
 80083c2:	e76c      	b.n	800829e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80083c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80083c6:	f000 fad3 	bl	8008970 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80083ca:	f000 fdaf 	bl	8008f2c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80083ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3738      	adds	r7, #56	@ 0x38
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}
 80083d8:	e000ed04 	.word	0xe000ed04

080083dc <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b08e      	sub	sp, #56	@ 0x38
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80083ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d10b      	bne.n	8008408 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80083f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083f4:	f383 8811 	msr	BASEPRI, r3
 80083f8:	f3bf 8f6f 	isb	sy
 80083fc:	f3bf 8f4f 	dsb	sy
 8008400:	623b      	str	r3, [r7, #32]
}
 8008402:	bf00      	nop
 8008404:	bf00      	nop
 8008406:	e7fd      	b.n	8008404 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800840a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800840c:	2b00      	cmp	r3, #0
 800840e:	d00b      	beq.n	8008428 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8008410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008414:	f383 8811 	msr	BASEPRI, r3
 8008418:	f3bf 8f6f 	isb	sy
 800841c:	f3bf 8f4f 	dsb	sy
 8008420:	61fb      	str	r3, [r7, #28]
}
 8008422:	bf00      	nop
 8008424:	bf00      	nop
 8008426:	e7fd      	b.n	8008424 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d103      	bne.n	8008438 <xQueueGiveFromISR+0x5c>
 8008430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008432:	689b      	ldr	r3, [r3, #8]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d101      	bne.n	800843c <xQueueGiveFromISR+0x60>
 8008438:	2301      	movs	r3, #1
 800843a:	e000      	b.n	800843e <xQueueGiveFromISR+0x62>
 800843c:	2300      	movs	r3, #0
 800843e:	2b00      	cmp	r3, #0
 8008440:	d10b      	bne.n	800845a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8008442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008446:	f383 8811 	msr	BASEPRI, r3
 800844a:	f3bf 8f6f 	isb	sy
 800844e:	f3bf 8f4f 	dsb	sy
 8008452:	61bb      	str	r3, [r7, #24]
}
 8008454:	bf00      	nop
 8008456:	bf00      	nop
 8008458:	e7fd      	b.n	8008456 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800845a:	f001 ff3d 	bl	800a2d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800845e:	f3ef 8211 	mrs	r2, BASEPRI
 8008462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008466:	f383 8811 	msr	BASEPRI, r3
 800846a:	f3bf 8f6f 	isb	sy
 800846e:	f3bf 8f4f 	dsb	sy
 8008472:	617a      	str	r2, [r7, #20]
 8008474:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008476:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008478:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800847a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800847c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800847e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008482:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008484:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008486:	429a      	cmp	r2, r3
 8008488:	d22b      	bcs.n	80084e2 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800848a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800848c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008490:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008496:	1c5a      	adds	r2, r3, #1
 8008498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800849a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800849c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80084a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084a4:	d112      	bne.n	80084cc <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d016      	beq.n	80084dc <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084b0:	3324      	adds	r3, #36	@ 0x24
 80084b2:	4618      	mov	r0, r3
 80084b4:	f000 ff1c 	bl	80092f0 <xTaskRemoveFromEventList>
 80084b8:	4603      	mov	r3, r0
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d00e      	beq.n	80084dc <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d00b      	beq.n	80084dc <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	2201      	movs	r2, #1
 80084c8:	601a      	str	r2, [r3, #0]
 80084ca:	e007      	b.n	80084dc <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80084cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80084d0:	3301      	adds	r3, #1
 80084d2:	b2db      	uxtb	r3, r3
 80084d4:	b25a      	sxtb	r2, r3
 80084d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80084dc:	2301      	movs	r3, #1
 80084de:	637b      	str	r3, [r7, #52]	@ 0x34
 80084e0:	e001      	b.n	80084e6 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80084e2:	2300      	movs	r3, #0
 80084e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80084e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084e8:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80084f0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80084f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3738      	adds	r7, #56	@ 0x38
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}

080084fc <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b08e      	sub	sp, #56	@ 0x38
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008506:	2300      	movs	r3, #0
 8008508:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800850e:	2300      	movs	r3, #0
 8008510:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008514:	2b00      	cmp	r3, #0
 8008516:	d10b      	bne.n	8008530 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8008518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800851c:	f383 8811 	msr	BASEPRI, r3
 8008520:	f3bf 8f6f 	isb	sy
 8008524:	f3bf 8f4f 	dsb	sy
 8008528:	623b      	str	r3, [r7, #32]
}
 800852a:	bf00      	nop
 800852c:	bf00      	nop
 800852e:	e7fd      	b.n	800852c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008534:	2b00      	cmp	r3, #0
 8008536:	d00b      	beq.n	8008550 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8008538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800853c:	f383 8811 	msr	BASEPRI, r3
 8008540:	f3bf 8f6f 	isb	sy
 8008544:	f3bf 8f4f 	dsb	sy
 8008548:	61fb      	str	r3, [r7, #28]
}
 800854a:	bf00      	nop
 800854c:	bf00      	nop
 800854e:	e7fd      	b.n	800854c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008550:	f001 f894 	bl	800967c <xTaskGetSchedulerState>
 8008554:	4603      	mov	r3, r0
 8008556:	2b00      	cmp	r3, #0
 8008558:	d102      	bne.n	8008560 <xQueueSemaphoreTake+0x64>
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d101      	bne.n	8008564 <xQueueSemaphoreTake+0x68>
 8008560:	2301      	movs	r3, #1
 8008562:	e000      	b.n	8008566 <xQueueSemaphoreTake+0x6a>
 8008564:	2300      	movs	r3, #0
 8008566:	2b00      	cmp	r3, #0
 8008568:	d10b      	bne.n	8008582 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800856a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800856e:	f383 8811 	msr	BASEPRI, r3
 8008572:	f3bf 8f6f 	isb	sy
 8008576:	f3bf 8f4f 	dsb	sy
 800857a:	61bb      	str	r3, [r7, #24]
}
 800857c:	bf00      	nop
 800857e:	bf00      	nop
 8008580:	e7fd      	b.n	800857e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008582:	f001 fdc9 	bl	800a118 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800858a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800858c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800858e:	2b00      	cmp	r3, #0
 8008590:	d024      	beq.n	80085dc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008594:	1e5a      	subs	r2, r3, #1
 8008596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008598:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800859a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d104      	bne.n	80085ac <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80085a2:	f001 fa17 	bl	80099d4 <pvTaskIncrementMutexHeldCount>
 80085a6:	4602      	mov	r2, r0
 80085a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085aa:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085ae:	691b      	ldr	r3, [r3, #16]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d00f      	beq.n	80085d4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085b6:	3310      	adds	r3, #16
 80085b8:	4618      	mov	r0, r3
 80085ba:	f000 fe99 	bl	80092f0 <xTaskRemoveFromEventList>
 80085be:	4603      	mov	r3, r0
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d007      	beq.n	80085d4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80085c4:	4b54      	ldr	r3, [pc, #336]	@ (8008718 <xQueueSemaphoreTake+0x21c>)
 80085c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085ca:	601a      	str	r2, [r3, #0]
 80085cc:	f3bf 8f4f 	dsb	sy
 80085d0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80085d4:	f001 fdd2 	bl	800a17c <vPortExitCritical>
				return pdPASS;
 80085d8:	2301      	movs	r3, #1
 80085da:	e098      	b.n	800870e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d112      	bne.n	8008608 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80085e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d00b      	beq.n	8008600 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80085e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ec:	f383 8811 	msr	BASEPRI, r3
 80085f0:	f3bf 8f6f 	isb	sy
 80085f4:	f3bf 8f4f 	dsb	sy
 80085f8:	617b      	str	r3, [r7, #20]
}
 80085fa:	bf00      	nop
 80085fc:	bf00      	nop
 80085fe:	e7fd      	b.n	80085fc <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008600:	f001 fdbc 	bl	800a17c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008604:	2300      	movs	r3, #0
 8008606:	e082      	b.n	800870e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800860a:	2b00      	cmp	r3, #0
 800860c:	d106      	bne.n	800861c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800860e:	f107 030c 	add.w	r3, r7, #12
 8008612:	4618      	mov	r0, r3
 8008614:	f000 fed0 	bl	80093b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008618:	2301      	movs	r3, #1
 800861a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800861c:	f001 fdae 	bl	800a17c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008620:	f000 fc76 	bl	8008f10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008624:	f001 fd78 	bl	800a118 <vPortEnterCritical>
 8008628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800862a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800862e:	b25b      	sxtb	r3, r3
 8008630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008634:	d103      	bne.n	800863e <xQueueSemaphoreTake+0x142>
 8008636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008638:	2200      	movs	r2, #0
 800863a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800863e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008640:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008644:	b25b      	sxtb	r3, r3
 8008646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800864a:	d103      	bne.n	8008654 <xQueueSemaphoreTake+0x158>
 800864c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800864e:	2200      	movs	r2, #0
 8008650:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008654:	f001 fd92 	bl	800a17c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008658:	463a      	mov	r2, r7
 800865a:	f107 030c 	add.w	r3, r7, #12
 800865e:	4611      	mov	r1, r2
 8008660:	4618      	mov	r0, r3
 8008662:	f000 febf 	bl	80093e4 <xTaskCheckForTimeOut>
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	d132      	bne.n	80086d2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800866c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800866e:	f000 f9d1 	bl	8008a14 <prvIsQueueEmpty>
 8008672:	4603      	mov	r3, r0
 8008674:	2b00      	cmp	r3, #0
 8008676:	d026      	beq.n	80086c6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d109      	bne.n	8008694 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8008680:	f001 fd4a 	bl	800a118 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008686:	689b      	ldr	r3, [r3, #8]
 8008688:	4618      	mov	r0, r3
 800868a:	f001 f815 	bl	80096b8 <xTaskPriorityInherit>
 800868e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8008690:	f001 fd74 	bl	800a17c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008696:	3324      	adds	r3, #36	@ 0x24
 8008698:	683a      	ldr	r2, [r7, #0]
 800869a:	4611      	mov	r1, r2
 800869c:	4618      	mov	r0, r3
 800869e:	f000 fe01 	bl	80092a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80086a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80086a4:	f000 f964 	bl	8008970 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80086a8:	f000 fc40 	bl	8008f2c <xTaskResumeAll>
 80086ac:	4603      	mov	r3, r0
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	f47f af67 	bne.w	8008582 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80086b4:	4b18      	ldr	r3, [pc, #96]	@ (8008718 <xQueueSemaphoreTake+0x21c>)
 80086b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086ba:	601a      	str	r2, [r3, #0]
 80086bc:	f3bf 8f4f 	dsb	sy
 80086c0:	f3bf 8f6f 	isb	sy
 80086c4:	e75d      	b.n	8008582 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80086c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80086c8:	f000 f952 	bl	8008970 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80086cc:	f000 fc2e 	bl	8008f2c <xTaskResumeAll>
 80086d0:	e757      	b.n	8008582 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80086d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80086d4:	f000 f94c 	bl	8008970 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80086d8:	f000 fc28 	bl	8008f2c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80086dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80086de:	f000 f999 	bl	8008a14 <prvIsQueueEmpty>
 80086e2:	4603      	mov	r3, r0
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	f43f af4c 	beq.w	8008582 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80086ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d00d      	beq.n	800870c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80086f0:	f001 fd12 	bl	800a118 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80086f4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80086f6:	f000 f893 	bl	8008820 <prvGetDisinheritPriorityAfterTimeout>
 80086fa:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80086fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008702:	4618      	mov	r0, r3
 8008704:	f001 f8d6 	bl	80098b4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008708:	f001 fd38 	bl	800a17c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800870c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800870e:	4618      	mov	r0, r3
 8008710:	3738      	adds	r7, #56	@ 0x38
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop
 8008718:	e000ed04 	.word	0xe000ed04

0800871c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b08e      	sub	sp, #56	@ 0x38
 8008720:	af00      	add	r7, sp, #0
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	60b9      	str	r1, [r7, #8]
 8008726:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800872c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800872e:	2b00      	cmp	r3, #0
 8008730:	d10b      	bne.n	800874a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8008732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008736:	f383 8811 	msr	BASEPRI, r3
 800873a:	f3bf 8f6f 	isb	sy
 800873e:	f3bf 8f4f 	dsb	sy
 8008742:	623b      	str	r3, [r7, #32]
}
 8008744:	bf00      	nop
 8008746:	bf00      	nop
 8008748:	e7fd      	b.n	8008746 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d103      	bne.n	8008758 <xQueueReceiveFromISR+0x3c>
 8008750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008754:	2b00      	cmp	r3, #0
 8008756:	d101      	bne.n	800875c <xQueueReceiveFromISR+0x40>
 8008758:	2301      	movs	r3, #1
 800875a:	e000      	b.n	800875e <xQueueReceiveFromISR+0x42>
 800875c:	2300      	movs	r3, #0
 800875e:	2b00      	cmp	r3, #0
 8008760:	d10b      	bne.n	800877a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8008762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008766:	f383 8811 	msr	BASEPRI, r3
 800876a:	f3bf 8f6f 	isb	sy
 800876e:	f3bf 8f4f 	dsb	sy
 8008772:	61fb      	str	r3, [r7, #28]
}
 8008774:	bf00      	nop
 8008776:	bf00      	nop
 8008778:	e7fd      	b.n	8008776 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800877a:	f001 fdad 	bl	800a2d8 <vPortValidateInterruptPriority>
	__asm volatile
 800877e:	f3ef 8211 	mrs	r2, BASEPRI
 8008782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008786:	f383 8811 	msr	BASEPRI, r3
 800878a:	f3bf 8f6f 	isb	sy
 800878e:	f3bf 8f4f 	dsb	sy
 8008792:	61ba      	str	r2, [r7, #24]
 8008794:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008796:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008798:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800879a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800879c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800879e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80087a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d02f      	beq.n	8008806 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80087a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80087ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80087b0:	68b9      	ldr	r1, [r7, #8]
 80087b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80087b4:	f000 f8b6 	bl	8008924 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80087b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087ba:	1e5a      	subs	r2, r3, #1
 80087bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087be:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80087c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80087c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087c8:	d112      	bne.n	80087f0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087cc:	691b      	ldr	r3, [r3, #16]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d016      	beq.n	8008800 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087d4:	3310      	adds	r3, #16
 80087d6:	4618      	mov	r0, r3
 80087d8:	f000 fd8a 	bl	80092f0 <xTaskRemoveFromEventList>
 80087dc:	4603      	mov	r3, r0
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d00e      	beq.n	8008800 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d00b      	beq.n	8008800 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2201      	movs	r2, #1
 80087ec:	601a      	str	r2, [r3, #0]
 80087ee:	e007      	b.n	8008800 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80087f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80087f4:	3301      	adds	r3, #1
 80087f6:	b2db      	uxtb	r3, r3
 80087f8:	b25a      	sxtb	r2, r3
 80087fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8008800:	2301      	movs	r3, #1
 8008802:	637b      	str	r3, [r7, #52]	@ 0x34
 8008804:	e001      	b.n	800880a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8008806:	2300      	movs	r3, #0
 8008808:	637b      	str	r3, [r7, #52]	@ 0x34
 800880a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800880c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	f383 8811 	msr	BASEPRI, r3
}
 8008814:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008816:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008818:	4618      	mov	r0, r3
 800881a:	3738      	adds	r7, #56	@ 0x38
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008820:	b480      	push	{r7}
 8008822:	b085      	sub	sp, #20
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800882c:	2b00      	cmp	r3, #0
 800882e:	d006      	beq.n	800883e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f1c3 0307 	rsb	r3, r3, #7
 800883a:	60fb      	str	r3, [r7, #12]
 800883c:	e001      	b.n	8008842 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800883e:	2300      	movs	r3, #0
 8008840:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008842:	68fb      	ldr	r3, [r7, #12]
	}
 8008844:	4618      	mov	r0, r3
 8008846:	3714      	adds	r7, #20
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr

08008850 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b086      	sub	sp, #24
 8008854:	af00      	add	r7, sp, #0
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800885c:	2300      	movs	r3, #0
 800885e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008864:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800886a:	2b00      	cmp	r3, #0
 800886c:	d10d      	bne.n	800888a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d14d      	bne.n	8008912 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	689b      	ldr	r3, [r3, #8]
 800887a:	4618      	mov	r0, r3
 800887c:	f000 ff92 	bl	80097a4 <xTaskPriorityDisinherit>
 8008880:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2200      	movs	r2, #0
 8008886:	609a      	str	r2, [r3, #8]
 8008888:	e043      	b.n	8008912 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d119      	bne.n	80088c4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	6858      	ldr	r0, [r3, #4]
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008898:	461a      	mov	r2, r3
 800889a:	68b9      	ldr	r1, [r7, #8]
 800889c:	f003 f87d 	bl	800b99a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	685a      	ldr	r2, [r3, #4]
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088a8:	441a      	add	r2, r3
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	685a      	ldr	r2, [r3, #4]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d32b      	bcc.n	8008912 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681a      	ldr	r2, [r3, #0]
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	605a      	str	r2, [r3, #4]
 80088c2:	e026      	b.n	8008912 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	68d8      	ldr	r0, [r3, #12]
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088cc:	461a      	mov	r2, r3
 80088ce:	68b9      	ldr	r1, [r7, #8]
 80088d0:	f003 f863 	bl	800b99a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	68da      	ldr	r2, [r3, #12]
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088dc:	425b      	negs	r3, r3
 80088de:	441a      	add	r2, r3
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	68da      	ldr	r2, [r3, #12]
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d207      	bcs.n	8008900 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	689a      	ldr	r2, [r3, #8]
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088f8:	425b      	negs	r3, r3
 80088fa:	441a      	add	r2, r3
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2b02      	cmp	r3, #2
 8008904:	d105      	bne.n	8008912 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d002      	beq.n	8008912 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	3b01      	subs	r3, #1
 8008910:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	1c5a      	adds	r2, r3, #1
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800891a:	697b      	ldr	r3, [r7, #20]
}
 800891c:	4618      	mov	r0, r3
 800891e:	3718      	adds	r7, #24
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}

08008924 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b082      	sub	sp, #8
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008932:	2b00      	cmp	r3, #0
 8008934:	d018      	beq.n	8008968 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	68da      	ldr	r2, [r3, #12]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800893e:	441a      	add	r2, r3
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	68da      	ldr	r2, [r3, #12]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	429a      	cmp	r2, r3
 800894e:	d303      	bcc.n	8008958 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681a      	ldr	r2, [r3, #0]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	68d9      	ldr	r1, [r3, #12]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008960:	461a      	mov	r2, r3
 8008962:	6838      	ldr	r0, [r7, #0]
 8008964:	f003 f819 	bl	800b99a <memcpy>
	}
}
 8008968:	bf00      	nop
 800896a:	3708      	adds	r7, #8
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b084      	sub	sp, #16
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008978:	f001 fbce 	bl	800a118 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008982:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008984:	e011      	b.n	80089aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800898a:	2b00      	cmp	r3, #0
 800898c:	d012      	beq.n	80089b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	3324      	adds	r3, #36	@ 0x24
 8008992:	4618      	mov	r0, r3
 8008994:	f000 fcac 	bl	80092f0 <xTaskRemoveFromEventList>
 8008998:	4603      	mov	r3, r0
 800899a:	2b00      	cmp	r3, #0
 800899c:	d001      	beq.n	80089a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800899e:	f000 fd85 	bl	80094ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80089a2:	7bfb      	ldrb	r3, [r7, #15]
 80089a4:	3b01      	subs	r3, #1
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80089aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	dce9      	bgt.n	8008986 <prvUnlockQueue+0x16>
 80089b2:	e000      	b.n	80089b6 <prvUnlockQueue+0x46>
					break;
 80089b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	22ff      	movs	r2, #255	@ 0xff
 80089ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80089be:	f001 fbdd 	bl	800a17c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80089c2:	f001 fba9 	bl	800a118 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80089cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80089ce:	e011      	b.n	80089f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	691b      	ldr	r3, [r3, #16]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d012      	beq.n	80089fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	3310      	adds	r3, #16
 80089dc:	4618      	mov	r0, r3
 80089de:	f000 fc87 	bl	80092f0 <xTaskRemoveFromEventList>
 80089e2:	4603      	mov	r3, r0
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d001      	beq.n	80089ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80089e8:	f000 fd60 	bl	80094ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80089ec:	7bbb      	ldrb	r3, [r7, #14]
 80089ee:	3b01      	subs	r3, #1
 80089f0:	b2db      	uxtb	r3, r3
 80089f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80089f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	dce9      	bgt.n	80089d0 <prvUnlockQueue+0x60>
 80089fc:	e000      	b.n	8008a00 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80089fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	22ff      	movs	r2, #255	@ 0xff
 8008a04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008a08:	f001 fbb8 	bl	800a17c <vPortExitCritical>
}
 8008a0c:	bf00      	nop
 8008a0e:	3710      	adds	r7, #16
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b084      	sub	sp, #16
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008a1c:	f001 fb7c 	bl	800a118 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d102      	bne.n	8008a2e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	60fb      	str	r3, [r7, #12]
 8008a2c:	e001      	b.n	8008a32 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008a32:	f001 fba3 	bl	800a17c <vPortExitCritical>

	return xReturn;
 8008a36:	68fb      	ldr	r3, [r7, #12]
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3710      	adds	r7, #16
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}

08008a40 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b084      	sub	sp, #16
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008a48:	f001 fb66 	bl	800a118 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d102      	bne.n	8008a5e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008a58:	2301      	movs	r3, #1
 8008a5a:	60fb      	str	r3, [r7, #12]
 8008a5c:	e001      	b.n	8008a62 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008a62:	f001 fb8b 	bl	800a17c <vPortExitCritical>

	return xReturn;
 8008a66:	68fb      	ldr	r3, [r7, #12]
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3710      	adds	r7, #16
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}

08008a70 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b08e      	sub	sp, #56	@ 0x38
 8008a74:	af04      	add	r7, sp, #16
 8008a76:	60f8      	str	r0, [r7, #12]
 8008a78:	60b9      	str	r1, [r7, #8]
 8008a7a:	607a      	str	r2, [r7, #4]
 8008a7c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008a7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d10b      	bne.n	8008a9c <xTaskCreateStatic+0x2c>
	__asm volatile
 8008a84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a88:	f383 8811 	msr	BASEPRI, r3
 8008a8c:	f3bf 8f6f 	isb	sy
 8008a90:	f3bf 8f4f 	dsb	sy
 8008a94:	623b      	str	r3, [r7, #32]
}
 8008a96:	bf00      	nop
 8008a98:	bf00      	nop
 8008a9a:	e7fd      	b.n	8008a98 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d10b      	bne.n	8008aba <xTaskCreateStatic+0x4a>
	__asm volatile
 8008aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aa6:	f383 8811 	msr	BASEPRI, r3
 8008aaa:	f3bf 8f6f 	isb	sy
 8008aae:	f3bf 8f4f 	dsb	sy
 8008ab2:	61fb      	str	r3, [r7, #28]
}
 8008ab4:	bf00      	nop
 8008ab6:	bf00      	nop
 8008ab8:	e7fd      	b.n	8008ab6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008aba:	23a0      	movs	r3, #160	@ 0xa0
 8008abc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	2ba0      	cmp	r3, #160	@ 0xa0
 8008ac2:	d00b      	beq.n	8008adc <xTaskCreateStatic+0x6c>
	__asm volatile
 8008ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ac8:	f383 8811 	msr	BASEPRI, r3
 8008acc:	f3bf 8f6f 	isb	sy
 8008ad0:	f3bf 8f4f 	dsb	sy
 8008ad4:	61bb      	str	r3, [r7, #24]
}
 8008ad6:	bf00      	nop
 8008ad8:	bf00      	nop
 8008ada:	e7fd      	b.n	8008ad8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008adc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d01e      	beq.n	8008b22 <xTaskCreateStatic+0xb2>
 8008ae4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d01b      	beq.n	8008b22 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aec:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008af0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008af2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008af6:	2202      	movs	r2, #2
 8008af8:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008afc:	2300      	movs	r3, #0
 8008afe:	9303      	str	r3, [sp, #12]
 8008b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b02:	9302      	str	r3, [sp, #8]
 8008b04:	f107 0314 	add.w	r3, r7, #20
 8008b08:	9301      	str	r3, [sp, #4]
 8008b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b0c:	9300      	str	r3, [sp, #0]
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	687a      	ldr	r2, [r7, #4]
 8008b12:	68b9      	ldr	r1, [r7, #8]
 8008b14:	68f8      	ldr	r0, [r7, #12]
 8008b16:	f000 f851 	bl	8008bbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b1a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008b1c:	f000 f8ee 	bl	8008cfc <prvAddNewTaskToReadyList>
 8008b20:	e001      	b.n	8008b26 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008b22:	2300      	movs	r3, #0
 8008b24:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008b26:	697b      	ldr	r3, [r7, #20]
	}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3728      	adds	r7, #40	@ 0x28
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b08c      	sub	sp, #48	@ 0x30
 8008b34:	af04      	add	r7, sp, #16
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	60b9      	str	r1, [r7, #8]
 8008b3a:	603b      	str	r3, [r7, #0]
 8008b3c:	4613      	mov	r3, r2
 8008b3e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008b40:	88fb      	ldrh	r3, [r7, #6]
 8008b42:	009b      	lsls	r3, r3, #2
 8008b44:	4618      	mov	r0, r3
 8008b46:	f001 fc09 	bl	800a35c <pvPortMalloc>
 8008b4a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d00e      	beq.n	8008b70 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008b52:	20a0      	movs	r0, #160	@ 0xa0
 8008b54:	f001 fc02 	bl	800a35c <pvPortMalloc>
 8008b58:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008b5a:	69fb      	ldr	r3, [r7, #28]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d003      	beq.n	8008b68 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008b60:	69fb      	ldr	r3, [r7, #28]
 8008b62:	697a      	ldr	r2, [r7, #20]
 8008b64:	631a      	str	r2, [r3, #48]	@ 0x30
 8008b66:	e005      	b.n	8008b74 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008b68:	6978      	ldr	r0, [r7, #20]
 8008b6a:	f001 fcc5 	bl	800a4f8 <vPortFree>
 8008b6e:	e001      	b.n	8008b74 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008b70:	2300      	movs	r3, #0
 8008b72:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008b74:	69fb      	ldr	r3, [r7, #28]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d017      	beq.n	8008baa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008b7a:	69fb      	ldr	r3, [r7, #28]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008b82:	88fa      	ldrh	r2, [r7, #6]
 8008b84:	2300      	movs	r3, #0
 8008b86:	9303      	str	r3, [sp, #12]
 8008b88:	69fb      	ldr	r3, [r7, #28]
 8008b8a:	9302      	str	r3, [sp, #8]
 8008b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b8e:	9301      	str	r3, [sp, #4]
 8008b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b92:	9300      	str	r3, [sp, #0]
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	68b9      	ldr	r1, [r7, #8]
 8008b98:	68f8      	ldr	r0, [r7, #12]
 8008b9a:	f000 f80f 	bl	8008bbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b9e:	69f8      	ldr	r0, [r7, #28]
 8008ba0:	f000 f8ac 	bl	8008cfc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	61bb      	str	r3, [r7, #24]
 8008ba8:	e002      	b.n	8008bb0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008baa:	f04f 33ff 	mov.w	r3, #4294967295
 8008bae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008bb0:	69bb      	ldr	r3, [r7, #24]
	}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3720      	adds	r7, #32
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
	...

08008bbc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b088      	sub	sp, #32
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	60f8      	str	r0, [r7, #12]
 8008bc4:	60b9      	str	r1, [r7, #8]
 8008bc6:	607a      	str	r2, [r7, #4]
 8008bc8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bcc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008bd4:	3b01      	subs	r3, #1
 8008bd6:	009b      	lsls	r3, r3, #2
 8008bd8:	4413      	add	r3, r2
 8008bda:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008bdc:	69bb      	ldr	r3, [r7, #24]
 8008bde:	f023 0307 	bic.w	r3, r3, #7
 8008be2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008be4:	69bb      	ldr	r3, [r7, #24]
 8008be6:	f003 0307 	and.w	r3, r3, #7
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d00b      	beq.n	8008c06 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8008bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bf2:	f383 8811 	msr	BASEPRI, r3
 8008bf6:	f3bf 8f6f 	isb	sy
 8008bfa:	f3bf 8f4f 	dsb	sy
 8008bfe:	617b      	str	r3, [r7, #20]
}
 8008c00:	bf00      	nop
 8008c02:	bf00      	nop
 8008c04:	e7fd      	b.n	8008c02 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d01f      	beq.n	8008c4c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	61fb      	str	r3, [r7, #28]
 8008c10:	e012      	b.n	8008c38 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008c12:	68ba      	ldr	r2, [r7, #8]
 8008c14:	69fb      	ldr	r3, [r7, #28]
 8008c16:	4413      	add	r3, r2
 8008c18:	7819      	ldrb	r1, [r3, #0]
 8008c1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c1c:	69fb      	ldr	r3, [r7, #28]
 8008c1e:	4413      	add	r3, r2
 8008c20:	3334      	adds	r3, #52	@ 0x34
 8008c22:	460a      	mov	r2, r1
 8008c24:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008c26:	68ba      	ldr	r2, [r7, #8]
 8008c28:	69fb      	ldr	r3, [r7, #28]
 8008c2a:	4413      	add	r3, r2
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d006      	beq.n	8008c40 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c32:	69fb      	ldr	r3, [r7, #28]
 8008c34:	3301      	adds	r3, #1
 8008c36:	61fb      	str	r3, [r7, #28]
 8008c38:	69fb      	ldr	r3, [r7, #28]
 8008c3a:	2b0f      	cmp	r3, #15
 8008c3c:	d9e9      	bls.n	8008c12 <prvInitialiseNewTask+0x56>
 8008c3e:	e000      	b.n	8008c42 <prvInitialiseNewTask+0x86>
			{
				break;
 8008c40:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c44:	2200      	movs	r2, #0
 8008c46:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008c4a:	e003      	b.n	8008c54 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c4e:	2200      	movs	r2, #0
 8008c50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c56:	2b06      	cmp	r3, #6
 8008c58:	d901      	bls.n	8008c5e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008c5a:	2306      	movs	r3, #6
 8008c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008c62:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008c68:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c72:	3304      	adds	r3, #4
 8008c74:	4618      	mov	r0, r3
 8008c76:	f7ff f8d9 	bl	8007e2c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c7c:	3318      	adds	r3, #24
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f7ff f8d4 	bl	8007e2c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c88:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c8c:	f1c3 0207 	rsb	r2, r3, #7
 8008c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c92:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c98:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cac:	334c      	adds	r3, #76	@ 0x4c
 8008cae:	224c      	movs	r2, #76	@ 0x4c
 8008cb0:	2100      	movs	r1, #0
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f002 fd7d 	bl	800b7b2 <memset>
 8008cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cba:	4a0d      	ldr	r2, [pc, #52]	@ (8008cf0 <prvInitialiseNewTask+0x134>)
 8008cbc:	651a      	str	r2, [r3, #80]	@ 0x50
 8008cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cc0:	4a0c      	ldr	r2, [pc, #48]	@ (8008cf4 <prvInitialiseNewTask+0x138>)
 8008cc2:	655a      	str	r2, [r3, #84]	@ 0x54
 8008cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cc6:	4a0c      	ldr	r2, [pc, #48]	@ (8008cf8 <prvInitialiseNewTask+0x13c>)
 8008cc8:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008cca:	683a      	ldr	r2, [r7, #0]
 8008ccc:	68f9      	ldr	r1, [r7, #12]
 8008cce:	69b8      	ldr	r0, [r7, #24]
 8008cd0:	f001 f8ee 	bl	8009eb0 <pxPortInitialiseStack>
 8008cd4:	4602      	mov	r2, r0
 8008cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cd8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d002      	beq.n	8008ce6 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ce2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ce4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ce6:	bf00      	nop
 8008ce8:	3720      	adds	r7, #32
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}
 8008cee:	bf00      	nop
 8008cf0:	2000464c 	.word	0x2000464c
 8008cf4:	200046b4 	.word	0x200046b4
 8008cf8:	2000471c 	.word	0x2000471c

08008cfc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b082      	sub	sp, #8
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008d04:	f001 fa08 	bl	800a118 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008d08:	4b2a      	ldr	r3, [pc, #168]	@ (8008db4 <prvAddNewTaskToReadyList+0xb8>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	3301      	adds	r3, #1
 8008d0e:	4a29      	ldr	r2, [pc, #164]	@ (8008db4 <prvAddNewTaskToReadyList+0xb8>)
 8008d10:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008d12:	4b29      	ldr	r3, [pc, #164]	@ (8008db8 <prvAddNewTaskToReadyList+0xbc>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d109      	bne.n	8008d2e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008d1a:	4a27      	ldr	r2, [pc, #156]	@ (8008db8 <prvAddNewTaskToReadyList+0xbc>)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008d20:	4b24      	ldr	r3, [pc, #144]	@ (8008db4 <prvAddNewTaskToReadyList+0xb8>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	d110      	bne.n	8008d4a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008d28:	f000 fbe4 	bl	80094f4 <prvInitialiseTaskLists>
 8008d2c:	e00d      	b.n	8008d4a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008d2e:	4b23      	ldr	r3, [pc, #140]	@ (8008dbc <prvAddNewTaskToReadyList+0xc0>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d109      	bne.n	8008d4a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008d36:	4b20      	ldr	r3, [pc, #128]	@ (8008db8 <prvAddNewTaskToReadyList+0xbc>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d40:	429a      	cmp	r2, r3
 8008d42:	d802      	bhi.n	8008d4a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008d44:	4a1c      	ldr	r2, [pc, #112]	@ (8008db8 <prvAddNewTaskToReadyList+0xbc>)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008d4a:	4b1d      	ldr	r3, [pc, #116]	@ (8008dc0 <prvAddNewTaskToReadyList+0xc4>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	3301      	adds	r3, #1
 8008d50:	4a1b      	ldr	r2, [pc, #108]	@ (8008dc0 <prvAddNewTaskToReadyList+0xc4>)
 8008d52:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d58:	2201      	movs	r2, #1
 8008d5a:	409a      	lsls	r2, r3
 8008d5c:	4b19      	ldr	r3, [pc, #100]	@ (8008dc4 <prvAddNewTaskToReadyList+0xc8>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4313      	orrs	r3, r2
 8008d62:	4a18      	ldr	r2, [pc, #96]	@ (8008dc4 <prvAddNewTaskToReadyList+0xc8>)
 8008d64:	6013      	str	r3, [r2, #0]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d6a:	4613      	mov	r3, r2
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	4413      	add	r3, r2
 8008d70:	009b      	lsls	r3, r3, #2
 8008d72:	4a15      	ldr	r2, [pc, #84]	@ (8008dc8 <prvAddNewTaskToReadyList+0xcc>)
 8008d74:	441a      	add	r2, r3
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	3304      	adds	r3, #4
 8008d7a:	4619      	mov	r1, r3
 8008d7c:	4610      	mov	r0, r2
 8008d7e:	f7ff f862 	bl	8007e46 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008d82:	f001 f9fb 	bl	800a17c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008d86:	4b0d      	ldr	r3, [pc, #52]	@ (8008dbc <prvAddNewTaskToReadyList+0xc0>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d00e      	beq.n	8008dac <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008d8e:	4b0a      	ldr	r3, [pc, #40]	@ (8008db8 <prvAddNewTaskToReadyList+0xbc>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	d207      	bcs.n	8008dac <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8008dcc <prvAddNewTaskToReadyList+0xd0>)
 8008d9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008da2:	601a      	str	r2, [r3, #0]
 8008da4:	f3bf 8f4f 	dsb	sy
 8008da8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008dac:	bf00      	nop
 8008dae:	3708      	adds	r7, #8
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}
 8008db4:	200009f0 	.word	0x200009f0
 8008db8:	200008f0 	.word	0x200008f0
 8008dbc:	200009fc 	.word	0x200009fc
 8008dc0:	20000a0c 	.word	0x20000a0c
 8008dc4:	200009f8 	.word	0x200009f8
 8008dc8:	200008f4 	.word	0x200008f4
 8008dcc:	e000ed04 	.word	0xe000ed04

08008dd0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b084      	sub	sp, #16
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d018      	beq.n	8008e14 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008de2:	4b14      	ldr	r3, [pc, #80]	@ (8008e34 <vTaskDelay+0x64>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d00b      	beq.n	8008e02 <vTaskDelay+0x32>
	__asm volatile
 8008dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dee:	f383 8811 	msr	BASEPRI, r3
 8008df2:	f3bf 8f6f 	isb	sy
 8008df6:	f3bf 8f4f 	dsb	sy
 8008dfa:	60bb      	str	r3, [r7, #8]
}
 8008dfc:	bf00      	nop
 8008dfe:	bf00      	nop
 8008e00:	e7fd      	b.n	8008dfe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008e02:	f000 f885 	bl	8008f10 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008e06:	2100      	movs	r1, #0
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f000 ffeb 	bl	8009de4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008e0e:	f000 f88d 	bl	8008f2c <xTaskResumeAll>
 8008e12:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d107      	bne.n	8008e2a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008e1a:	4b07      	ldr	r3, [pc, #28]	@ (8008e38 <vTaskDelay+0x68>)
 8008e1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e20:	601a      	str	r2, [r3, #0]
 8008e22:	f3bf 8f4f 	dsb	sy
 8008e26:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008e2a:	bf00      	nop
 8008e2c:	3710      	adds	r7, #16
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}
 8008e32:	bf00      	nop
 8008e34:	20000a18 	.word	0x20000a18
 8008e38:	e000ed04 	.word	0xe000ed04

08008e3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b08a      	sub	sp, #40	@ 0x28
 8008e40:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008e42:	2300      	movs	r3, #0
 8008e44:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008e46:	2300      	movs	r3, #0
 8008e48:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008e4a:	463a      	mov	r2, r7
 8008e4c:	1d39      	adds	r1, r7, #4
 8008e4e:	f107 0308 	add.w	r3, r7, #8
 8008e52:	4618      	mov	r0, r3
 8008e54:	f7f9 f97c 	bl	8002150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008e58:	6839      	ldr	r1, [r7, #0]
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	68ba      	ldr	r2, [r7, #8]
 8008e5e:	9202      	str	r2, [sp, #8]
 8008e60:	9301      	str	r3, [sp, #4]
 8008e62:	2300      	movs	r3, #0
 8008e64:	9300      	str	r3, [sp, #0]
 8008e66:	2300      	movs	r3, #0
 8008e68:	460a      	mov	r2, r1
 8008e6a:	4921      	ldr	r1, [pc, #132]	@ (8008ef0 <vTaskStartScheduler+0xb4>)
 8008e6c:	4821      	ldr	r0, [pc, #132]	@ (8008ef4 <vTaskStartScheduler+0xb8>)
 8008e6e:	f7ff fdff 	bl	8008a70 <xTaskCreateStatic>
 8008e72:	4603      	mov	r3, r0
 8008e74:	4a20      	ldr	r2, [pc, #128]	@ (8008ef8 <vTaskStartScheduler+0xbc>)
 8008e76:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008e78:	4b1f      	ldr	r3, [pc, #124]	@ (8008ef8 <vTaskStartScheduler+0xbc>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d002      	beq.n	8008e86 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008e80:	2301      	movs	r3, #1
 8008e82:	617b      	str	r3, [r7, #20]
 8008e84:	e001      	b.n	8008e8a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008e86:	2300      	movs	r3, #0
 8008e88:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d11b      	bne.n	8008ec8 <vTaskStartScheduler+0x8c>
	__asm volatile
 8008e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e94:	f383 8811 	msr	BASEPRI, r3
 8008e98:	f3bf 8f6f 	isb	sy
 8008e9c:	f3bf 8f4f 	dsb	sy
 8008ea0:	613b      	str	r3, [r7, #16]
}
 8008ea2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008ea4:	4b15      	ldr	r3, [pc, #84]	@ (8008efc <vTaskStartScheduler+0xc0>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	334c      	adds	r3, #76	@ 0x4c
 8008eaa:	4a15      	ldr	r2, [pc, #84]	@ (8008f00 <vTaskStartScheduler+0xc4>)
 8008eac:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008eae:	4b15      	ldr	r3, [pc, #84]	@ (8008f04 <vTaskStartScheduler+0xc8>)
 8008eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8008eb4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008eb6:	4b14      	ldr	r3, [pc, #80]	@ (8008f08 <vTaskStartScheduler+0xcc>)
 8008eb8:	2201      	movs	r2, #1
 8008eba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008ebc:	4b13      	ldr	r3, [pc, #76]	@ (8008f0c <vTaskStartScheduler+0xd0>)
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008ec2:	f001 f885 	bl	8009fd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008ec6:	e00f      	b.n	8008ee8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ece:	d10b      	bne.n	8008ee8 <vTaskStartScheduler+0xac>
	__asm volatile
 8008ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ed4:	f383 8811 	msr	BASEPRI, r3
 8008ed8:	f3bf 8f6f 	isb	sy
 8008edc:	f3bf 8f4f 	dsb	sy
 8008ee0:	60fb      	str	r3, [r7, #12]
}
 8008ee2:	bf00      	nop
 8008ee4:	bf00      	nop
 8008ee6:	e7fd      	b.n	8008ee4 <vTaskStartScheduler+0xa8>
}
 8008ee8:	bf00      	nop
 8008eea:	3718      	adds	r7, #24
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}
 8008ef0:	0800da10 	.word	0x0800da10
 8008ef4:	080094c5 	.word	0x080094c5
 8008ef8:	20000a14 	.word	0x20000a14
 8008efc:	200008f0 	.word	0x200008f0
 8008f00:	20000198 	.word	0x20000198
 8008f04:	20000a10 	.word	0x20000a10
 8008f08:	200009fc 	.word	0x200009fc
 8008f0c:	200009f4 	.word	0x200009f4

08008f10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008f10:	b480      	push	{r7}
 8008f12:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008f14:	4b04      	ldr	r3, [pc, #16]	@ (8008f28 <vTaskSuspendAll+0x18>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	3301      	adds	r3, #1
 8008f1a:	4a03      	ldr	r2, [pc, #12]	@ (8008f28 <vTaskSuspendAll+0x18>)
 8008f1c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008f1e:	bf00      	nop
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr
 8008f28:	20000a18 	.word	0x20000a18

08008f2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b084      	sub	sp, #16
 8008f30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008f32:	2300      	movs	r3, #0
 8008f34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008f36:	2300      	movs	r3, #0
 8008f38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008f3a:	4b42      	ldr	r3, [pc, #264]	@ (8009044 <xTaskResumeAll+0x118>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d10b      	bne.n	8008f5a <xTaskResumeAll+0x2e>
	__asm volatile
 8008f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f46:	f383 8811 	msr	BASEPRI, r3
 8008f4a:	f3bf 8f6f 	isb	sy
 8008f4e:	f3bf 8f4f 	dsb	sy
 8008f52:	603b      	str	r3, [r7, #0]
}
 8008f54:	bf00      	nop
 8008f56:	bf00      	nop
 8008f58:	e7fd      	b.n	8008f56 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008f5a:	f001 f8dd 	bl	800a118 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008f5e:	4b39      	ldr	r3, [pc, #228]	@ (8009044 <xTaskResumeAll+0x118>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	3b01      	subs	r3, #1
 8008f64:	4a37      	ldr	r2, [pc, #220]	@ (8009044 <xTaskResumeAll+0x118>)
 8008f66:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f68:	4b36      	ldr	r3, [pc, #216]	@ (8009044 <xTaskResumeAll+0x118>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d161      	bne.n	8009034 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008f70:	4b35      	ldr	r3, [pc, #212]	@ (8009048 <xTaskResumeAll+0x11c>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d05d      	beq.n	8009034 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f78:	e02e      	b.n	8008fd8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f7a:	4b34      	ldr	r3, [pc, #208]	@ (800904c <xTaskResumeAll+0x120>)
 8008f7c:	68db      	ldr	r3, [r3, #12]
 8008f7e:	68db      	ldr	r3, [r3, #12]
 8008f80:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	3318      	adds	r3, #24
 8008f86:	4618      	mov	r0, r3
 8008f88:	f7fe ffba 	bl	8007f00 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	3304      	adds	r3, #4
 8008f90:	4618      	mov	r0, r3
 8008f92:	f7fe ffb5 	bl	8007f00 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	409a      	lsls	r2, r3
 8008f9e:	4b2c      	ldr	r3, [pc, #176]	@ (8009050 <xTaskResumeAll+0x124>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	4a2a      	ldr	r2, [pc, #168]	@ (8009050 <xTaskResumeAll+0x124>)
 8008fa6:	6013      	str	r3, [r2, #0]
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fac:	4613      	mov	r3, r2
 8008fae:	009b      	lsls	r3, r3, #2
 8008fb0:	4413      	add	r3, r2
 8008fb2:	009b      	lsls	r3, r3, #2
 8008fb4:	4a27      	ldr	r2, [pc, #156]	@ (8009054 <xTaskResumeAll+0x128>)
 8008fb6:	441a      	add	r2, r3
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	3304      	adds	r3, #4
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	4610      	mov	r0, r2
 8008fc0:	f7fe ff41 	bl	8007e46 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fc8:	4b23      	ldr	r3, [pc, #140]	@ (8009058 <xTaskResumeAll+0x12c>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d302      	bcc.n	8008fd8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008fd2:	4b22      	ldr	r3, [pc, #136]	@ (800905c <xTaskResumeAll+0x130>)
 8008fd4:	2201      	movs	r2, #1
 8008fd6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008fd8:	4b1c      	ldr	r3, [pc, #112]	@ (800904c <xTaskResumeAll+0x120>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d1cc      	bne.n	8008f7a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d001      	beq.n	8008fea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008fe6:	f000 fb29 	bl	800963c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008fea:	4b1d      	ldr	r3, [pc, #116]	@ (8009060 <xTaskResumeAll+0x134>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d010      	beq.n	8009018 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008ff6:	f000 f837 	bl	8009068 <xTaskIncrementTick>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d002      	beq.n	8009006 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009000:	4b16      	ldr	r3, [pc, #88]	@ (800905c <xTaskResumeAll+0x130>)
 8009002:	2201      	movs	r2, #1
 8009004:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	3b01      	subs	r3, #1
 800900a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d1f1      	bne.n	8008ff6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009012:	4b13      	ldr	r3, [pc, #76]	@ (8009060 <xTaskResumeAll+0x134>)
 8009014:	2200      	movs	r2, #0
 8009016:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009018:	4b10      	ldr	r3, [pc, #64]	@ (800905c <xTaskResumeAll+0x130>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d009      	beq.n	8009034 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009020:	2301      	movs	r3, #1
 8009022:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009024:	4b0f      	ldr	r3, [pc, #60]	@ (8009064 <xTaskResumeAll+0x138>)
 8009026:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800902a:	601a      	str	r2, [r3, #0]
 800902c:	f3bf 8f4f 	dsb	sy
 8009030:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009034:	f001 f8a2 	bl	800a17c <vPortExitCritical>

	return xAlreadyYielded;
 8009038:	68bb      	ldr	r3, [r7, #8]
}
 800903a:	4618      	mov	r0, r3
 800903c:	3710      	adds	r7, #16
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
 8009042:	bf00      	nop
 8009044:	20000a18 	.word	0x20000a18
 8009048:	200009f0 	.word	0x200009f0
 800904c:	200009b0 	.word	0x200009b0
 8009050:	200009f8 	.word	0x200009f8
 8009054:	200008f4 	.word	0x200008f4
 8009058:	200008f0 	.word	0x200008f0
 800905c:	20000a04 	.word	0x20000a04
 8009060:	20000a00 	.word	0x20000a00
 8009064:	e000ed04 	.word	0xe000ed04

08009068 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b086      	sub	sp, #24
 800906c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800906e:	2300      	movs	r3, #0
 8009070:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009072:	4b4f      	ldr	r3, [pc, #316]	@ (80091b0 <xTaskIncrementTick+0x148>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	2b00      	cmp	r3, #0
 8009078:	f040 808f 	bne.w	800919a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800907c:	4b4d      	ldr	r3, [pc, #308]	@ (80091b4 <xTaskIncrementTick+0x14c>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	3301      	adds	r3, #1
 8009082:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009084:	4a4b      	ldr	r2, [pc, #300]	@ (80091b4 <xTaskIncrementTick+0x14c>)
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d121      	bne.n	80090d4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009090:	4b49      	ldr	r3, [pc, #292]	@ (80091b8 <xTaskIncrementTick+0x150>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d00b      	beq.n	80090b2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800909a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800909e:	f383 8811 	msr	BASEPRI, r3
 80090a2:	f3bf 8f6f 	isb	sy
 80090a6:	f3bf 8f4f 	dsb	sy
 80090aa:	603b      	str	r3, [r7, #0]
}
 80090ac:	bf00      	nop
 80090ae:	bf00      	nop
 80090b0:	e7fd      	b.n	80090ae <xTaskIncrementTick+0x46>
 80090b2:	4b41      	ldr	r3, [pc, #260]	@ (80091b8 <xTaskIncrementTick+0x150>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	60fb      	str	r3, [r7, #12]
 80090b8:	4b40      	ldr	r3, [pc, #256]	@ (80091bc <xTaskIncrementTick+0x154>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a3e      	ldr	r2, [pc, #248]	@ (80091b8 <xTaskIncrementTick+0x150>)
 80090be:	6013      	str	r3, [r2, #0]
 80090c0:	4a3e      	ldr	r2, [pc, #248]	@ (80091bc <xTaskIncrementTick+0x154>)
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	6013      	str	r3, [r2, #0]
 80090c6:	4b3e      	ldr	r3, [pc, #248]	@ (80091c0 <xTaskIncrementTick+0x158>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	3301      	adds	r3, #1
 80090cc:	4a3c      	ldr	r2, [pc, #240]	@ (80091c0 <xTaskIncrementTick+0x158>)
 80090ce:	6013      	str	r3, [r2, #0]
 80090d0:	f000 fab4 	bl	800963c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80090d4:	4b3b      	ldr	r3, [pc, #236]	@ (80091c4 <xTaskIncrementTick+0x15c>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	693a      	ldr	r2, [r7, #16]
 80090da:	429a      	cmp	r2, r3
 80090dc:	d348      	bcc.n	8009170 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090de:	4b36      	ldr	r3, [pc, #216]	@ (80091b8 <xTaskIncrementTick+0x150>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d104      	bne.n	80090f2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090e8:	4b36      	ldr	r3, [pc, #216]	@ (80091c4 <xTaskIncrementTick+0x15c>)
 80090ea:	f04f 32ff 	mov.w	r2, #4294967295
 80090ee:	601a      	str	r2, [r3, #0]
					break;
 80090f0:	e03e      	b.n	8009170 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090f2:	4b31      	ldr	r3, [pc, #196]	@ (80091b8 <xTaskIncrementTick+0x150>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	68db      	ldr	r3, [r3, #12]
 80090f8:	68db      	ldr	r3, [r3, #12]
 80090fa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009102:	693a      	ldr	r2, [r7, #16]
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	429a      	cmp	r2, r3
 8009108:	d203      	bcs.n	8009112 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800910a:	4a2e      	ldr	r2, [pc, #184]	@ (80091c4 <xTaskIncrementTick+0x15c>)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009110:	e02e      	b.n	8009170 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	3304      	adds	r3, #4
 8009116:	4618      	mov	r0, r3
 8009118:	f7fe fef2 	bl	8007f00 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009120:	2b00      	cmp	r3, #0
 8009122:	d004      	beq.n	800912e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	3318      	adds	r3, #24
 8009128:	4618      	mov	r0, r3
 800912a:	f7fe fee9 	bl	8007f00 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009132:	2201      	movs	r2, #1
 8009134:	409a      	lsls	r2, r3
 8009136:	4b24      	ldr	r3, [pc, #144]	@ (80091c8 <xTaskIncrementTick+0x160>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4313      	orrs	r3, r2
 800913c:	4a22      	ldr	r2, [pc, #136]	@ (80091c8 <xTaskIncrementTick+0x160>)
 800913e:	6013      	str	r3, [r2, #0]
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009144:	4613      	mov	r3, r2
 8009146:	009b      	lsls	r3, r3, #2
 8009148:	4413      	add	r3, r2
 800914a:	009b      	lsls	r3, r3, #2
 800914c:	4a1f      	ldr	r2, [pc, #124]	@ (80091cc <xTaskIncrementTick+0x164>)
 800914e:	441a      	add	r2, r3
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	3304      	adds	r3, #4
 8009154:	4619      	mov	r1, r3
 8009156:	4610      	mov	r0, r2
 8009158:	f7fe fe75 	bl	8007e46 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009160:	4b1b      	ldr	r3, [pc, #108]	@ (80091d0 <xTaskIncrementTick+0x168>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009166:	429a      	cmp	r2, r3
 8009168:	d3b9      	bcc.n	80090de <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800916a:	2301      	movs	r3, #1
 800916c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800916e:	e7b6      	b.n	80090de <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009170:	4b17      	ldr	r3, [pc, #92]	@ (80091d0 <xTaskIncrementTick+0x168>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009176:	4915      	ldr	r1, [pc, #84]	@ (80091cc <xTaskIncrementTick+0x164>)
 8009178:	4613      	mov	r3, r2
 800917a:	009b      	lsls	r3, r3, #2
 800917c:	4413      	add	r3, r2
 800917e:	009b      	lsls	r3, r3, #2
 8009180:	440b      	add	r3, r1
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	2b01      	cmp	r3, #1
 8009186:	d901      	bls.n	800918c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009188:	2301      	movs	r3, #1
 800918a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800918c:	4b11      	ldr	r3, [pc, #68]	@ (80091d4 <xTaskIncrementTick+0x16c>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d007      	beq.n	80091a4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009194:	2301      	movs	r3, #1
 8009196:	617b      	str	r3, [r7, #20]
 8009198:	e004      	b.n	80091a4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800919a:	4b0f      	ldr	r3, [pc, #60]	@ (80091d8 <xTaskIncrementTick+0x170>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	3301      	adds	r3, #1
 80091a0:	4a0d      	ldr	r2, [pc, #52]	@ (80091d8 <xTaskIncrementTick+0x170>)
 80091a2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80091a4:	697b      	ldr	r3, [r7, #20]
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3718      	adds	r7, #24
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
 80091ae:	bf00      	nop
 80091b0:	20000a18 	.word	0x20000a18
 80091b4:	200009f4 	.word	0x200009f4
 80091b8:	200009a8 	.word	0x200009a8
 80091bc:	200009ac 	.word	0x200009ac
 80091c0:	20000a08 	.word	0x20000a08
 80091c4:	20000a10 	.word	0x20000a10
 80091c8:	200009f8 	.word	0x200009f8
 80091cc:	200008f4 	.word	0x200008f4
 80091d0:	200008f0 	.word	0x200008f0
 80091d4:	20000a04 	.word	0x20000a04
 80091d8:	20000a00 	.word	0x20000a00

080091dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80091dc:	b480      	push	{r7}
 80091de:	b087      	sub	sp, #28
 80091e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80091e2:	4b2a      	ldr	r3, [pc, #168]	@ (800928c <vTaskSwitchContext+0xb0>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d003      	beq.n	80091f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80091ea:	4b29      	ldr	r3, [pc, #164]	@ (8009290 <vTaskSwitchContext+0xb4>)
 80091ec:	2201      	movs	r2, #1
 80091ee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80091f0:	e045      	b.n	800927e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80091f2:	4b27      	ldr	r3, [pc, #156]	@ (8009290 <vTaskSwitchContext+0xb4>)
 80091f4:	2200      	movs	r2, #0
 80091f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091f8:	4b26      	ldr	r3, [pc, #152]	@ (8009294 <vTaskSwitchContext+0xb8>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	fab3 f383 	clz	r3, r3
 8009204:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009206:	7afb      	ldrb	r3, [r7, #11]
 8009208:	f1c3 031f 	rsb	r3, r3, #31
 800920c:	617b      	str	r3, [r7, #20]
 800920e:	4922      	ldr	r1, [pc, #136]	@ (8009298 <vTaskSwitchContext+0xbc>)
 8009210:	697a      	ldr	r2, [r7, #20]
 8009212:	4613      	mov	r3, r2
 8009214:	009b      	lsls	r3, r3, #2
 8009216:	4413      	add	r3, r2
 8009218:	009b      	lsls	r3, r3, #2
 800921a:	440b      	add	r3, r1
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d10b      	bne.n	800923a <vTaskSwitchContext+0x5e>
	__asm volatile
 8009222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009226:	f383 8811 	msr	BASEPRI, r3
 800922a:	f3bf 8f6f 	isb	sy
 800922e:	f3bf 8f4f 	dsb	sy
 8009232:	607b      	str	r3, [r7, #4]
}
 8009234:	bf00      	nop
 8009236:	bf00      	nop
 8009238:	e7fd      	b.n	8009236 <vTaskSwitchContext+0x5a>
 800923a:	697a      	ldr	r2, [r7, #20]
 800923c:	4613      	mov	r3, r2
 800923e:	009b      	lsls	r3, r3, #2
 8009240:	4413      	add	r3, r2
 8009242:	009b      	lsls	r3, r3, #2
 8009244:	4a14      	ldr	r2, [pc, #80]	@ (8009298 <vTaskSwitchContext+0xbc>)
 8009246:	4413      	add	r3, r2
 8009248:	613b      	str	r3, [r7, #16]
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	685b      	ldr	r3, [r3, #4]
 800924e:	685a      	ldr	r2, [r3, #4]
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	605a      	str	r2, [r3, #4]
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	685a      	ldr	r2, [r3, #4]
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	3308      	adds	r3, #8
 800925c:	429a      	cmp	r2, r3
 800925e:	d104      	bne.n	800926a <vTaskSwitchContext+0x8e>
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	685a      	ldr	r2, [r3, #4]
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	605a      	str	r2, [r3, #4]
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	685b      	ldr	r3, [r3, #4]
 800926e:	68db      	ldr	r3, [r3, #12]
 8009270:	4a0a      	ldr	r2, [pc, #40]	@ (800929c <vTaskSwitchContext+0xc0>)
 8009272:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009274:	4b09      	ldr	r3, [pc, #36]	@ (800929c <vTaskSwitchContext+0xc0>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	334c      	adds	r3, #76	@ 0x4c
 800927a:	4a09      	ldr	r2, [pc, #36]	@ (80092a0 <vTaskSwitchContext+0xc4>)
 800927c:	6013      	str	r3, [r2, #0]
}
 800927e:	bf00      	nop
 8009280:	371c      	adds	r7, #28
 8009282:	46bd      	mov	sp, r7
 8009284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009288:	4770      	bx	lr
 800928a:	bf00      	nop
 800928c:	20000a18 	.word	0x20000a18
 8009290:	20000a04 	.word	0x20000a04
 8009294:	200009f8 	.word	0x200009f8
 8009298:	200008f4 	.word	0x200008f4
 800929c:	200008f0 	.word	0x200008f0
 80092a0:	20000198 	.word	0x20000198

080092a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b084      	sub	sp, #16
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d10b      	bne.n	80092cc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80092b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092b8:	f383 8811 	msr	BASEPRI, r3
 80092bc:	f3bf 8f6f 	isb	sy
 80092c0:	f3bf 8f4f 	dsb	sy
 80092c4:	60fb      	str	r3, [r7, #12]
}
 80092c6:	bf00      	nop
 80092c8:	bf00      	nop
 80092ca:	e7fd      	b.n	80092c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80092cc:	4b07      	ldr	r3, [pc, #28]	@ (80092ec <vTaskPlaceOnEventList+0x48>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	3318      	adds	r3, #24
 80092d2:	4619      	mov	r1, r3
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f7fe fdda 	bl	8007e8e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80092da:	2101      	movs	r1, #1
 80092dc:	6838      	ldr	r0, [r7, #0]
 80092de:	f000 fd81 	bl	8009de4 <prvAddCurrentTaskToDelayedList>
}
 80092e2:	bf00      	nop
 80092e4:	3710      	adds	r7, #16
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}
 80092ea:	bf00      	nop
 80092ec:	200008f0 	.word	0x200008f0

080092f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b086      	sub	sp, #24
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	68db      	ldr	r3, [r3, #12]
 80092fc:	68db      	ldr	r3, [r3, #12]
 80092fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d10b      	bne.n	800931e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800930a:	f383 8811 	msr	BASEPRI, r3
 800930e:	f3bf 8f6f 	isb	sy
 8009312:	f3bf 8f4f 	dsb	sy
 8009316:	60fb      	str	r3, [r7, #12]
}
 8009318:	bf00      	nop
 800931a:	bf00      	nop
 800931c:	e7fd      	b.n	800931a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	3318      	adds	r3, #24
 8009322:	4618      	mov	r0, r3
 8009324:	f7fe fdec 	bl	8007f00 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009328:	4b1d      	ldr	r3, [pc, #116]	@ (80093a0 <xTaskRemoveFromEventList+0xb0>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d11c      	bne.n	800936a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	3304      	adds	r3, #4
 8009334:	4618      	mov	r0, r3
 8009336:	f7fe fde3 	bl	8007f00 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800933e:	2201      	movs	r2, #1
 8009340:	409a      	lsls	r2, r3
 8009342:	4b18      	ldr	r3, [pc, #96]	@ (80093a4 <xTaskRemoveFromEventList+0xb4>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4313      	orrs	r3, r2
 8009348:	4a16      	ldr	r2, [pc, #88]	@ (80093a4 <xTaskRemoveFromEventList+0xb4>)
 800934a:	6013      	str	r3, [r2, #0]
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009350:	4613      	mov	r3, r2
 8009352:	009b      	lsls	r3, r3, #2
 8009354:	4413      	add	r3, r2
 8009356:	009b      	lsls	r3, r3, #2
 8009358:	4a13      	ldr	r2, [pc, #76]	@ (80093a8 <xTaskRemoveFromEventList+0xb8>)
 800935a:	441a      	add	r2, r3
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	3304      	adds	r3, #4
 8009360:	4619      	mov	r1, r3
 8009362:	4610      	mov	r0, r2
 8009364:	f7fe fd6f 	bl	8007e46 <vListInsertEnd>
 8009368:	e005      	b.n	8009376 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	3318      	adds	r3, #24
 800936e:	4619      	mov	r1, r3
 8009370:	480e      	ldr	r0, [pc, #56]	@ (80093ac <xTaskRemoveFromEventList+0xbc>)
 8009372:	f7fe fd68 	bl	8007e46 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800937a:	4b0d      	ldr	r3, [pc, #52]	@ (80093b0 <xTaskRemoveFromEventList+0xc0>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009380:	429a      	cmp	r2, r3
 8009382:	d905      	bls.n	8009390 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009384:	2301      	movs	r3, #1
 8009386:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009388:	4b0a      	ldr	r3, [pc, #40]	@ (80093b4 <xTaskRemoveFromEventList+0xc4>)
 800938a:	2201      	movs	r2, #1
 800938c:	601a      	str	r2, [r3, #0]
 800938e:	e001      	b.n	8009394 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009390:	2300      	movs	r3, #0
 8009392:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009394:	697b      	ldr	r3, [r7, #20]
}
 8009396:	4618      	mov	r0, r3
 8009398:	3718      	adds	r7, #24
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}
 800939e:	bf00      	nop
 80093a0:	20000a18 	.word	0x20000a18
 80093a4:	200009f8 	.word	0x200009f8
 80093a8:	200008f4 	.word	0x200008f4
 80093ac:	200009b0 	.word	0x200009b0
 80093b0:	200008f0 	.word	0x200008f0
 80093b4:	20000a04 	.word	0x20000a04

080093b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80093b8:	b480      	push	{r7}
 80093ba:	b083      	sub	sp, #12
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80093c0:	4b06      	ldr	r3, [pc, #24]	@ (80093dc <vTaskInternalSetTimeOutState+0x24>)
 80093c2:	681a      	ldr	r2, [r3, #0]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80093c8:	4b05      	ldr	r3, [pc, #20]	@ (80093e0 <vTaskInternalSetTimeOutState+0x28>)
 80093ca:	681a      	ldr	r2, [r3, #0]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	605a      	str	r2, [r3, #4]
}
 80093d0:	bf00      	nop
 80093d2:	370c      	adds	r7, #12
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr
 80093dc:	20000a08 	.word	0x20000a08
 80093e0:	200009f4 	.word	0x200009f4

080093e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b088      	sub	sp, #32
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d10b      	bne.n	800940c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80093f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093f8:	f383 8811 	msr	BASEPRI, r3
 80093fc:	f3bf 8f6f 	isb	sy
 8009400:	f3bf 8f4f 	dsb	sy
 8009404:	613b      	str	r3, [r7, #16]
}
 8009406:	bf00      	nop
 8009408:	bf00      	nop
 800940a:	e7fd      	b.n	8009408 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d10b      	bne.n	800942a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009416:	f383 8811 	msr	BASEPRI, r3
 800941a:	f3bf 8f6f 	isb	sy
 800941e:	f3bf 8f4f 	dsb	sy
 8009422:	60fb      	str	r3, [r7, #12]
}
 8009424:	bf00      	nop
 8009426:	bf00      	nop
 8009428:	e7fd      	b.n	8009426 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800942a:	f000 fe75 	bl	800a118 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800942e:	4b1d      	ldr	r3, [pc, #116]	@ (80094a4 <xTaskCheckForTimeOut+0xc0>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	685b      	ldr	r3, [r3, #4]
 8009438:	69ba      	ldr	r2, [r7, #24]
 800943a:	1ad3      	subs	r3, r2, r3
 800943c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009446:	d102      	bne.n	800944e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009448:	2300      	movs	r3, #0
 800944a:	61fb      	str	r3, [r7, #28]
 800944c:	e023      	b.n	8009496 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681a      	ldr	r2, [r3, #0]
 8009452:	4b15      	ldr	r3, [pc, #84]	@ (80094a8 <xTaskCheckForTimeOut+0xc4>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	429a      	cmp	r2, r3
 8009458:	d007      	beq.n	800946a <xTaskCheckForTimeOut+0x86>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	685b      	ldr	r3, [r3, #4]
 800945e:	69ba      	ldr	r2, [r7, #24]
 8009460:	429a      	cmp	r2, r3
 8009462:	d302      	bcc.n	800946a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009464:	2301      	movs	r3, #1
 8009466:	61fb      	str	r3, [r7, #28]
 8009468:	e015      	b.n	8009496 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	697a      	ldr	r2, [r7, #20]
 8009470:	429a      	cmp	r2, r3
 8009472:	d20b      	bcs.n	800948c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	681a      	ldr	r2, [r3, #0]
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	1ad2      	subs	r2, r2, r3
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f7ff ff99 	bl	80093b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009486:	2300      	movs	r3, #0
 8009488:	61fb      	str	r3, [r7, #28]
 800948a:	e004      	b.n	8009496 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	2200      	movs	r2, #0
 8009490:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009492:	2301      	movs	r3, #1
 8009494:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009496:	f000 fe71 	bl	800a17c <vPortExitCritical>

	return xReturn;
 800949a:	69fb      	ldr	r3, [r7, #28]
}
 800949c:	4618      	mov	r0, r3
 800949e:	3720      	adds	r7, #32
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}
 80094a4:	200009f4 	.word	0x200009f4
 80094a8:	20000a08 	.word	0x20000a08

080094ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80094ac:	b480      	push	{r7}
 80094ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80094b0:	4b03      	ldr	r3, [pc, #12]	@ (80094c0 <vTaskMissedYield+0x14>)
 80094b2:	2201      	movs	r2, #1
 80094b4:	601a      	str	r2, [r3, #0]
}
 80094b6:	bf00      	nop
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr
 80094c0:	20000a04 	.word	0x20000a04

080094c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b082      	sub	sp, #8
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80094cc:	f000 f852 	bl	8009574 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80094d0:	4b06      	ldr	r3, [pc, #24]	@ (80094ec <prvIdleTask+0x28>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	2b01      	cmp	r3, #1
 80094d6:	d9f9      	bls.n	80094cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80094d8:	4b05      	ldr	r3, [pc, #20]	@ (80094f0 <prvIdleTask+0x2c>)
 80094da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094de:	601a      	str	r2, [r3, #0]
 80094e0:	f3bf 8f4f 	dsb	sy
 80094e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80094e8:	e7f0      	b.n	80094cc <prvIdleTask+0x8>
 80094ea:	bf00      	nop
 80094ec:	200008f4 	.word	0x200008f4
 80094f0:	e000ed04 	.word	0xe000ed04

080094f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b082      	sub	sp, #8
 80094f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80094fa:	2300      	movs	r3, #0
 80094fc:	607b      	str	r3, [r7, #4]
 80094fe:	e00c      	b.n	800951a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009500:	687a      	ldr	r2, [r7, #4]
 8009502:	4613      	mov	r3, r2
 8009504:	009b      	lsls	r3, r3, #2
 8009506:	4413      	add	r3, r2
 8009508:	009b      	lsls	r3, r3, #2
 800950a:	4a12      	ldr	r2, [pc, #72]	@ (8009554 <prvInitialiseTaskLists+0x60>)
 800950c:	4413      	add	r3, r2
 800950e:	4618      	mov	r0, r3
 8009510:	f7fe fc6c 	bl	8007dec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	3301      	adds	r3, #1
 8009518:	607b      	str	r3, [r7, #4]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2b06      	cmp	r3, #6
 800951e:	d9ef      	bls.n	8009500 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009520:	480d      	ldr	r0, [pc, #52]	@ (8009558 <prvInitialiseTaskLists+0x64>)
 8009522:	f7fe fc63 	bl	8007dec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009526:	480d      	ldr	r0, [pc, #52]	@ (800955c <prvInitialiseTaskLists+0x68>)
 8009528:	f7fe fc60 	bl	8007dec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800952c:	480c      	ldr	r0, [pc, #48]	@ (8009560 <prvInitialiseTaskLists+0x6c>)
 800952e:	f7fe fc5d 	bl	8007dec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009532:	480c      	ldr	r0, [pc, #48]	@ (8009564 <prvInitialiseTaskLists+0x70>)
 8009534:	f7fe fc5a 	bl	8007dec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009538:	480b      	ldr	r0, [pc, #44]	@ (8009568 <prvInitialiseTaskLists+0x74>)
 800953a:	f7fe fc57 	bl	8007dec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800953e:	4b0b      	ldr	r3, [pc, #44]	@ (800956c <prvInitialiseTaskLists+0x78>)
 8009540:	4a05      	ldr	r2, [pc, #20]	@ (8009558 <prvInitialiseTaskLists+0x64>)
 8009542:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009544:	4b0a      	ldr	r3, [pc, #40]	@ (8009570 <prvInitialiseTaskLists+0x7c>)
 8009546:	4a05      	ldr	r2, [pc, #20]	@ (800955c <prvInitialiseTaskLists+0x68>)
 8009548:	601a      	str	r2, [r3, #0]
}
 800954a:	bf00      	nop
 800954c:	3708      	adds	r7, #8
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}
 8009552:	bf00      	nop
 8009554:	200008f4 	.word	0x200008f4
 8009558:	20000980 	.word	0x20000980
 800955c:	20000994 	.word	0x20000994
 8009560:	200009b0 	.word	0x200009b0
 8009564:	200009c4 	.word	0x200009c4
 8009568:	200009dc 	.word	0x200009dc
 800956c:	200009a8 	.word	0x200009a8
 8009570:	200009ac 	.word	0x200009ac

08009574 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b082      	sub	sp, #8
 8009578:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800957a:	e019      	b.n	80095b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800957c:	f000 fdcc 	bl	800a118 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009580:	4b10      	ldr	r3, [pc, #64]	@ (80095c4 <prvCheckTasksWaitingTermination+0x50>)
 8009582:	68db      	ldr	r3, [r3, #12]
 8009584:	68db      	ldr	r3, [r3, #12]
 8009586:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	3304      	adds	r3, #4
 800958c:	4618      	mov	r0, r3
 800958e:	f7fe fcb7 	bl	8007f00 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009592:	4b0d      	ldr	r3, [pc, #52]	@ (80095c8 <prvCheckTasksWaitingTermination+0x54>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	3b01      	subs	r3, #1
 8009598:	4a0b      	ldr	r2, [pc, #44]	@ (80095c8 <prvCheckTasksWaitingTermination+0x54>)
 800959a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800959c:	4b0b      	ldr	r3, [pc, #44]	@ (80095cc <prvCheckTasksWaitingTermination+0x58>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	3b01      	subs	r3, #1
 80095a2:	4a0a      	ldr	r2, [pc, #40]	@ (80095cc <prvCheckTasksWaitingTermination+0x58>)
 80095a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80095a6:	f000 fde9 	bl	800a17c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f000 f810 	bl	80095d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80095b0:	4b06      	ldr	r3, [pc, #24]	@ (80095cc <prvCheckTasksWaitingTermination+0x58>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d1e1      	bne.n	800957c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80095b8:	bf00      	nop
 80095ba:	bf00      	nop
 80095bc:	3708      	adds	r7, #8
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}
 80095c2:	bf00      	nop
 80095c4:	200009c4 	.word	0x200009c4
 80095c8:	200009f0 	.word	0x200009f0
 80095cc:	200009d8 	.word	0x200009d8

080095d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b084      	sub	sp, #16
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	334c      	adds	r3, #76	@ 0x4c
 80095dc:	4618      	mov	r0, r3
 80095de:	f002 f913 	bl	800b808 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d108      	bne.n	80095fe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095f0:	4618      	mov	r0, r3
 80095f2:	f000 ff81 	bl	800a4f8 <vPortFree>
				vPortFree( pxTCB );
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f000 ff7e 	bl	800a4f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80095fc:	e019      	b.n	8009632 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009604:	2b01      	cmp	r3, #1
 8009606:	d103      	bne.n	8009610 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f000 ff75 	bl	800a4f8 <vPortFree>
	}
 800960e:	e010      	b.n	8009632 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009616:	2b02      	cmp	r3, #2
 8009618:	d00b      	beq.n	8009632 <prvDeleteTCB+0x62>
	__asm volatile
 800961a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800961e:	f383 8811 	msr	BASEPRI, r3
 8009622:	f3bf 8f6f 	isb	sy
 8009626:	f3bf 8f4f 	dsb	sy
 800962a:	60fb      	str	r3, [r7, #12]
}
 800962c:	bf00      	nop
 800962e:	bf00      	nop
 8009630:	e7fd      	b.n	800962e <prvDeleteTCB+0x5e>
	}
 8009632:	bf00      	nop
 8009634:	3710      	adds	r7, #16
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}
	...

0800963c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800963c:	b480      	push	{r7}
 800963e:	b083      	sub	sp, #12
 8009640:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009642:	4b0c      	ldr	r3, [pc, #48]	@ (8009674 <prvResetNextTaskUnblockTime+0x38>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d104      	bne.n	8009656 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800964c:	4b0a      	ldr	r3, [pc, #40]	@ (8009678 <prvResetNextTaskUnblockTime+0x3c>)
 800964e:	f04f 32ff 	mov.w	r2, #4294967295
 8009652:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009654:	e008      	b.n	8009668 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009656:	4b07      	ldr	r3, [pc, #28]	@ (8009674 <prvResetNextTaskUnblockTime+0x38>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	68db      	ldr	r3, [r3, #12]
 800965c:	68db      	ldr	r3, [r3, #12]
 800965e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	685b      	ldr	r3, [r3, #4]
 8009664:	4a04      	ldr	r2, [pc, #16]	@ (8009678 <prvResetNextTaskUnblockTime+0x3c>)
 8009666:	6013      	str	r3, [r2, #0]
}
 8009668:	bf00      	nop
 800966a:	370c      	adds	r7, #12
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr
 8009674:	200009a8 	.word	0x200009a8
 8009678:	20000a10 	.word	0x20000a10

0800967c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800967c:	b480      	push	{r7}
 800967e:	b083      	sub	sp, #12
 8009680:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009682:	4b0b      	ldr	r3, [pc, #44]	@ (80096b0 <xTaskGetSchedulerState+0x34>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d102      	bne.n	8009690 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800968a:	2301      	movs	r3, #1
 800968c:	607b      	str	r3, [r7, #4]
 800968e:	e008      	b.n	80096a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009690:	4b08      	ldr	r3, [pc, #32]	@ (80096b4 <xTaskGetSchedulerState+0x38>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d102      	bne.n	800969e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009698:	2302      	movs	r3, #2
 800969a:	607b      	str	r3, [r7, #4]
 800969c:	e001      	b.n	80096a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800969e:	2300      	movs	r3, #0
 80096a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80096a2:	687b      	ldr	r3, [r7, #4]
	}
 80096a4:	4618      	mov	r0, r3
 80096a6:	370c      	adds	r7, #12
 80096a8:	46bd      	mov	sp, r7
 80096aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ae:	4770      	bx	lr
 80096b0:	200009fc 	.word	0x200009fc
 80096b4:	20000a18 	.word	0x20000a18

080096b8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b084      	sub	sp, #16
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80096c4:	2300      	movs	r3, #0
 80096c6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d05e      	beq.n	800978c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096d2:	4b31      	ldr	r3, [pc, #196]	@ (8009798 <xTaskPriorityInherit+0xe0>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096d8:	429a      	cmp	r2, r3
 80096da:	d24e      	bcs.n	800977a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	699b      	ldr	r3, [r3, #24]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	db06      	blt.n	80096f2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096e4:	4b2c      	ldr	r3, [pc, #176]	@ (8009798 <xTaskPriorityInherit+0xe0>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096ea:	f1c3 0207 	rsb	r2, r3, #7
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	6959      	ldr	r1, [r3, #20]
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096fa:	4613      	mov	r3, r2
 80096fc:	009b      	lsls	r3, r3, #2
 80096fe:	4413      	add	r3, r2
 8009700:	009b      	lsls	r3, r3, #2
 8009702:	4a26      	ldr	r2, [pc, #152]	@ (800979c <xTaskPriorityInherit+0xe4>)
 8009704:	4413      	add	r3, r2
 8009706:	4299      	cmp	r1, r3
 8009708:	d12f      	bne.n	800976a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	3304      	adds	r3, #4
 800970e:	4618      	mov	r0, r3
 8009710:	f7fe fbf6 	bl	8007f00 <uxListRemove>
 8009714:	4603      	mov	r3, r0
 8009716:	2b00      	cmp	r3, #0
 8009718:	d10a      	bne.n	8009730 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800971e:	2201      	movs	r2, #1
 8009720:	fa02 f303 	lsl.w	r3, r2, r3
 8009724:	43da      	mvns	r2, r3
 8009726:	4b1e      	ldr	r3, [pc, #120]	@ (80097a0 <xTaskPriorityInherit+0xe8>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4013      	ands	r3, r2
 800972c:	4a1c      	ldr	r2, [pc, #112]	@ (80097a0 <xTaskPriorityInherit+0xe8>)
 800972e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009730:	4b19      	ldr	r3, [pc, #100]	@ (8009798 <xTaskPriorityInherit+0xe0>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800973e:	2201      	movs	r2, #1
 8009740:	409a      	lsls	r2, r3
 8009742:	4b17      	ldr	r3, [pc, #92]	@ (80097a0 <xTaskPriorityInherit+0xe8>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	4313      	orrs	r3, r2
 8009748:	4a15      	ldr	r2, [pc, #84]	@ (80097a0 <xTaskPriorityInherit+0xe8>)
 800974a:	6013      	str	r3, [r2, #0]
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009750:	4613      	mov	r3, r2
 8009752:	009b      	lsls	r3, r3, #2
 8009754:	4413      	add	r3, r2
 8009756:	009b      	lsls	r3, r3, #2
 8009758:	4a10      	ldr	r2, [pc, #64]	@ (800979c <xTaskPriorityInherit+0xe4>)
 800975a:	441a      	add	r2, r3
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	3304      	adds	r3, #4
 8009760:	4619      	mov	r1, r3
 8009762:	4610      	mov	r0, r2
 8009764:	f7fe fb6f 	bl	8007e46 <vListInsertEnd>
 8009768:	e004      	b.n	8009774 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800976a:	4b0b      	ldr	r3, [pc, #44]	@ (8009798 <xTaskPriorityInherit+0xe0>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009774:	2301      	movs	r3, #1
 8009776:	60fb      	str	r3, [r7, #12]
 8009778:	e008      	b.n	800978c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800977e:	4b06      	ldr	r3, [pc, #24]	@ (8009798 <xTaskPriorityInherit+0xe0>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009784:	429a      	cmp	r2, r3
 8009786:	d201      	bcs.n	800978c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009788:	2301      	movs	r3, #1
 800978a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800978c:	68fb      	ldr	r3, [r7, #12]
	}
 800978e:	4618      	mov	r0, r3
 8009790:	3710      	adds	r7, #16
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
 8009796:	bf00      	nop
 8009798:	200008f0 	.word	0x200008f0
 800979c:	200008f4 	.word	0x200008f4
 80097a0:	200009f8 	.word	0x200009f8

080097a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b086      	sub	sp, #24
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80097b0:	2300      	movs	r3, #0
 80097b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d070      	beq.n	800989c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80097ba:	4b3b      	ldr	r3, [pc, #236]	@ (80098a8 <xTaskPriorityDisinherit+0x104>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	693a      	ldr	r2, [r7, #16]
 80097c0:	429a      	cmp	r2, r3
 80097c2:	d00b      	beq.n	80097dc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80097c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097c8:	f383 8811 	msr	BASEPRI, r3
 80097cc:	f3bf 8f6f 	isb	sy
 80097d0:	f3bf 8f4f 	dsb	sy
 80097d4:	60fb      	str	r3, [r7, #12]
}
 80097d6:	bf00      	nop
 80097d8:	bf00      	nop
 80097da:	e7fd      	b.n	80097d8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d10b      	bne.n	80097fc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80097e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097e8:	f383 8811 	msr	BASEPRI, r3
 80097ec:	f3bf 8f6f 	isb	sy
 80097f0:	f3bf 8f4f 	dsb	sy
 80097f4:	60bb      	str	r3, [r7, #8]
}
 80097f6:	bf00      	nop
 80097f8:	bf00      	nop
 80097fa:	e7fd      	b.n	80097f8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009800:	1e5a      	subs	r2, r3, #1
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800980e:	429a      	cmp	r2, r3
 8009810:	d044      	beq.n	800989c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009816:	2b00      	cmp	r3, #0
 8009818:	d140      	bne.n	800989c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	3304      	adds	r3, #4
 800981e:	4618      	mov	r0, r3
 8009820:	f7fe fb6e 	bl	8007f00 <uxListRemove>
 8009824:	4603      	mov	r3, r0
 8009826:	2b00      	cmp	r3, #0
 8009828:	d115      	bne.n	8009856 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800982e:	491f      	ldr	r1, [pc, #124]	@ (80098ac <xTaskPriorityDisinherit+0x108>)
 8009830:	4613      	mov	r3, r2
 8009832:	009b      	lsls	r3, r3, #2
 8009834:	4413      	add	r3, r2
 8009836:	009b      	lsls	r3, r3, #2
 8009838:	440b      	add	r3, r1
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d10a      	bne.n	8009856 <xTaskPriorityDisinherit+0xb2>
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009844:	2201      	movs	r2, #1
 8009846:	fa02 f303 	lsl.w	r3, r2, r3
 800984a:	43da      	mvns	r2, r3
 800984c:	4b18      	ldr	r3, [pc, #96]	@ (80098b0 <xTaskPriorityDisinherit+0x10c>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4013      	ands	r3, r2
 8009852:	4a17      	ldr	r2, [pc, #92]	@ (80098b0 <xTaskPriorityDisinherit+0x10c>)
 8009854:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009862:	f1c3 0207 	rsb	r2, r3, #7
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800986e:	2201      	movs	r2, #1
 8009870:	409a      	lsls	r2, r3
 8009872:	4b0f      	ldr	r3, [pc, #60]	@ (80098b0 <xTaskPriorityDisinherit+0x10c>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	4313      	orrs	r3, r2
 8009878:	4a0d      	ldr	r2, [pc, #52]	@ (80098b0 <xTaskPriorityDisinherit+0x10c>)
 800987a:	6013      	str	r3, [r2, #0]
 800987c:	693b      	ldr	r3, [r7, #16]
 800987e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009880:	4613      	mov	r3, r2
 8009882:	009b      	lsls	r3, r3, #2
 8009884:	4413      	add	r3, r2
 8009886:	009b      	lsls	r3, r3, #2
 8009888:	4a08      	ldr	r2, [pc, #32]	@ (80098ac <xTaskPriorityDisinherit+0x108>)
 800988a:	441a      	add	r2, r3
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	3304      	adds	r3, #4
 8009890:	4619      	mov	r1, r3
 8009892:	4610      	mov	r0, r2
 8009894:	f7fe fad7 	bl	8007e46 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009898:	2301      	movs	r3, #1
 800989a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800989c:	697b      	ldr	r3, [r7, #20]
	}
 800989e:	4618      	mov	r0, r3
 80098a0:	3718      	adds	r7, #24
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}
 80098a6:	bf00      	nop
 80098a8:	200008f0 	.word	0x200008f0
 80098ac:	200008f4 	.word	0x200008f4
 80098b0:	200009f8 	.word	0x200009f8

080098b4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b088      	sub	sp, #32
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80098c2:	2301      	movs	r3, #1
 80098c4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d079      	beq.n	80099c0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80098cc:	69bb      	ldr	r3, [r7, #24]
 80098ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d10b      	bne.n	80098ec <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80098d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098d8:	f383 8811 	msr	BASEPRI, r3
 80098dc:	f3bf 8f6f 	isb	sy
 80098e0:	f3bf 8f4f 	dsb	sy
 80098e4:	60fb      	str	r3, [r7, #12]
}
 80098e6:	bf00      	nop
 80098e8:	bf00      	nop
 80098ea:	e7fd      	b.n	80098e8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80098ec:	69bb      	ldr	r3, [r7, #24]
 80098ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098f0:	683a      	ldr	r2, [r7, #0]
 80098f2:	429a      	cmp	r2, r3
 80098f4:	d902      	bls.n	80098fc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	61fb      	str	r3, [r7, #28]
 80098fa:	e002      	b.n	8009902 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80098fc:	69bb      	ldr	r3, [r7, #24]
 80098fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009900:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009902:	69bb      	ldr	r3, [r7, #24]
 8009904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009906:	69fa      	ldr	r2, [r7, #28]
 8009908:	429a      	cmp	r2, r3
 800990a:	d059      	beq.n	80099c0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800990c:	69bb      	ldr	r3, [r7, #24]
 800990e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009910:	697a      	ldr	r2, [r7, #20]
 8009912:	429a      	cmp	r2, r3
 8009914:	d154      	bne.n	80099c0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009916:	4b2c      	ldr	r3, [pc, #176]	@ (80099c8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	69ba      	ldr	r2, [r7, #24]
 800991c:	429a      	cmp	r2, r3
 800991e:	d10b      	bne.n	8009938 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8009920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009924:	f383 8811 	msr	BASEPRI, r3
 8009928:	f3bf 8f6f 	isb	sy
 800992c:	f3bf 8f4f 	dsb	sy
 8009930:	60bb      	str	r3, [r7, #8]
}
 8009932:	bf00      	nop
 8009934:	bf00      	nop
 8009936:	e7fd      	b.n	8009934 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009938:	69bb      	ldr	r3, [r7, #24]
 800993a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800993c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800993e:	69bb      	ldr	r3, [r7, #24]
 8009940:	69fa      	ldr	r2, [r7, #28]
 8009942:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009944:	69bb      	ldr	r3, [r7, #24]
 8009946:	699b      	ldr	r3, [r3, #24]
 8009948:	2b00      	cmp	r3, #0
 800994a:	db04      	blt.n	8009956 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800994c:	69fb      	ldr	r3, [r7, #28]
 800994e:	f1c3 0207 	rsb	r2, r3, #7
 8009952:	69bb      	ldr	r3, [r7, #24]
 8009954:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009956:	69bb      	ldr	r3, [r7, #24]
 8009958:	6959      	ldr	r1, [r3, #20]
 800995a:	693a      	ldr	r2, [r7, #16]
 800995c:	4613      	mov	r3, r2
 800995e:	009b      	lsls	r3, r3, #2
 8009960:	4413      	add	r3, r2
 8009962:	009b      	lsls	r3, r3, #2
 8009964:	4a19      	ldr	r2, [pc, #100]	@ (80099cc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009966:	4413      	add	r3, r2
 8009968:	4299      	cmp	r1, r3
 800996a:	d129      	bne.n	80099c0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800996c:	69bb      	ldr	r3, [r7, #24]
 800996e:	3304      	adds	r3, #4
 8009970:	4618      	mov	r0, r3
 8009972:	f7fe fac5 	bl	8007f00 <uxListRemove>
 8009976:	4603      	mov	r3, r0
 8009978:	2b00      	cmp	r3, #0
 800997a:	d10a      	bne.n	8009992 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800997c:	69bb      	ldr	r3, [r7, #24]
 800997e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009980:	2201      	movs	r2, #1
 8009982:	fa02 f303 	lsl.w	r3, r2, r3
 8009986:	43da      	mvns	r2, r3
 8009988:	4b11      	ldr	r3, [pc, #68]	@ (80099d0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	4013      	ands	r3, r2
 800998e:	4a10      	ldr	r2, [pc, #64]	@ (80099d0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8009990:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009992:	69bb      	ldr	r3, [r7, #24]
 8009994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009996:	2201      	movs	r2, #1
 8009998:	409a      	lsls	r2, r3
 800999a:	4b0d      	ldr	r3, [pc, #52]	@ (80099d0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	4313      	orrs	r3, r2
 80099a0:	4a0b      	ldr	r2, [pc, #44]	@ (80099d0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80099a2:	6013      	str	r3, [r2, #0]
 80099a4:	69bb      	ldr	r3, [r7, #24]
 80099a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099a8:	4613      	mov	r3, r2
 80099aa:	009b      	lsls	r3, r3, #2
 80099ac:	4413      	add	r3, r2
 80099ae:	009b      	lsls	r3, r3, #2
 80099b0:	4a06      	ldr	r2, [pc, #24]	@ (80099cc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80099b2:	441a      	add	r2, r3
 80099b4:	69bb      	ldr	r3, [r7, #24]
 80099b6:	3304      	adds	r3, #4
 80099b8:	4619      	mov	r1, r3
 80099ba:	4610      	mov	r0, r2
 80099bc:	f7fe fa43 	bl	8007e46 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80099c0:	bf00      	nop
 80099c2:	3720      	adds	r7, #32
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}
 80099c8:	200008f0 	.word	0x200008f0
 80099cc:	200008f4 	.word	0x200008f4
 80099d0:	200009f8 	.word	0x200009f8

080099d4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80099d4:	b480      	push	{r7}
 80099d6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80099d8:	4b07      	ldr	r3, [pc, #28]	@ (80099f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d004      	beq.n	80099ea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80099e0:	4b05      	ldr	r3, [pc, #20]	@ (80099f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80099e6:	3201      	adds	r2, #1
 80099e8:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80099ea:	4b03      	ldr	r3, [pc, #12]	@ (80099f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80099ec:	681b      	ldr	r3, [r3, #0]
	}
 80099ee:	4618      	mov	r0, r3
 80099f0:	46bd      	mov	sp, r7
 80099f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f6:	4770      	bx	lr
 80099f8:	200008f0 	.word	0x200008f0

080099fc <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b084      	sub	sp, #16
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8009a06:	f000 fb87 	bl	800a118 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8009a0a:	4b20      	ldr	r3, [pc, #128]	@ (8009a8c <ulTaskNotifyTake+0x90>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d113      	bne.n	8009a3e <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009a16:	4b1d      	ldr	r3, [pc, #116]	@ (8009a8c <ulTaskNotifyTake+0x90>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	2201      	movs	r2, #1
 8009a1c:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d00b      	beq.n	8009a3e <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009a26:	2101      	movs	r1, #1
 8009a28:	6838      	ldr	r0, [r7, #0]
 8009a2a:	f000 f9db 	bl	8009de4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8009a2e:	4b18      	ldr	r3, [pc, #96]	@ (8009a90 <ulTaskNotifyTake+0x94>)
 8009a30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a34:	601a      	str	r2, [r3, #0]
 8009a36:	f3bf 8f4f 	dsb	sy
 8009a3a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009a3e:	f000 fb9d 	bl	800a17c <vPortExitCritical>

		taskENTER_CRITICAL();
 8009a42:	f000 fb69 	bl	800a118 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8009a46:	4b11      	ldr	r3, [pc, #68]	@ (8009a8c <ulTaskNotifyTake+0x90>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009a4e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d00e      	beq.n	8009a74 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d005      	beq.n	8009a68 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8009a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8009a8c <ulTaskNotifyTake+0x90>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	2200      	movs	r2, #0
 8009a62:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8009a66:	e005      	b.n	8009a74 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8009a68:	4b08      	ldr	r3, [pc, #32]	@ (8009a8c <ulTaskNotifyTake+0x90>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	68fa      	ldr	r2, [r7, #12]
 8009a6e:	3a01      	subs	r2, #1
 8009a70:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009a74:	4b05      	ldr	r3, [pc, #20]	@ (8009a8c <ulTaskNotifyTake+0x90>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
		}
		taskEXIT_CRITICAL();
 8009a7e:	f000 fb7d 	bl	800a17c <vPortExitCritical>

		return ulReturn;
 8009a82:	68fb      	ldr	r3, [r7, #12]
	}
 8009a84:	4618      	mov	r0, r3
 8009a86:	3710      	adds	r7, #16
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}
 8009a8c:	200008f0 	.word	0x200008f0
 8009a90:	e000ed04 	.word	0xe000ed04

08009a94 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b08a      	sub	sp, #40	@ 0x28
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	60f8      	str	r0, [r7, #12]
 8009a9c:	60b9      	str	r1, [r7, #8]
 8009a9e:	603b      	str	r3, [r7, #0]
 8009aa0:	4613      	mov	r3, r2
 8009aa2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d10b      	bne.n	8009ac6 <xTaskGenericNotify+0x32>
	__asm volatile
 8009aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ab2:	f383 8811 	msr	BASEPRI, r3
 8009ab6:	f3bf 8f6f 	isb	sy
 8009aba:	f3bf 8f4f 	dsb	sy
 8009abe:	61bb      	str	r3, [r7, #24]
}
 8009ac0:	bf00      	nop
 8009ac2:	bf00      	nop
 8009ac4:	e7fd      	b.n	8009ac2 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8009aca:	f000 fb25 	bl	800a118 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d004      	beq.n	8009ade <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009ad4:	6a3b      	ldr	r3, [r7, #32]
 8009ad6:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009ade:	6a3b      	ldr	r3, [r7, #32]
 8009ae0:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8009ae4:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009ae6:	6a3b      	ldr	r3, [r7, #32]
 8009ae8:	2202      	movs	r2, #2
 8009aea:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 8009aee:	79fb      	ldrb	r3, [r7, #7]
 8009af0:	2b04      	cmp	r3, #4
 8009af2:	d82e      	bhi.n	8009b52 <xTaskGenericNotify+0xbe>
 8009af4:	a201      	add	r2, pc, #4	@ (adr r2, 8009afc <xTaskGenericNotify+0x68>)
 8009af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009afa:	bf00      	nop
 8009afc:	08009b77 	.word	0x08009b77
 8009b00:	08009b11 	.word	0x08009b11
 8009b04:	08009b23 	.word	0x08009b23
 8009b08:	08009b33 	.word	0x08009b33
 8009b0c:	08009b3d 	.word	0x08009b3d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009b10:	6a3b      	ldr	r3, [r7, #32]
 8009b12:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	431a      	orrs	r2, r3
 8009b1a:	6a3b      	ldr	r3, [r7, #32]
 8009b1c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8009b20:	e02c      	b.n	8009b7c <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009b22:	6a3b      	ldr	r3, [r7, #32]
 8009b24:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009b28:	1c5a      	adds	r2, r3, #1
 8009b2a:	6a3b      	ldr	r3, [r7, #32]
 8009b2c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8009b30:	e024      	b.n	8009b7c <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8009b32:	6a3b      	ldr	r3, [r7, #32]
 8009b34:	68ba      	ldr	r2, [r7, #8]
 8009b36:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8009b3a:	e01f      	b.n	8009b7c <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009b3c:	7ffb      	ldrb	r3, [r7, #31]
 8009b3e:	2b02      	cmp	r3, #2
 8009b40:	d004      	beq.n	8009b4c <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009b42:	6a3b      	ldr	r3, [r7, #32]
 8009b44:	68ba      	ldr	r2, [r7, #8]
 8009b46:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009b4a:	e017      	b.n	8009b7c <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8009b50:	e014      	b.n	8009b7c <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009b52:	6a3b      	ldr	r3, [r7, #32]
 8009b54:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b5c:	d00d      	beq.n	8009b7a <xTaskGenericNotify+0xe6>
	__asm volatile
 8009b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b62:	f383 8811 	msr	BASEPRI, r3
 8009b66:	f3bf 8f6f 	isb	sy
 8009b6a:	f3bf 8f4f 	dsb	sy
 8009b6e:	617b      	str	r3, [r7, #20]
}
 8009b70:	bf00      	nop
 8009b72:	bf00      	nop
 8009b74:	e7fd      	b.n	8009b72 <xTaskGenericNotify+0xde>
					break;
 8009b76:	bf00      	nop
 8009b78:	e000      	b.n	8009b7c <xTaskGenericNotify+0xe8>

					break;
 8009b7a:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009b7c:	7ffb      	ldrb	r3, [r7, #31]
 8009b7e:	2b01      	cmp	r3, #1
 8009b80:	d13a      	bne.n	8009bf8 <xTaskGenericNotify+0x164>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b82:	6a3b      	ldr	r3, [r7, #32]
 8009b84:	3304      	adds	r3, #4
 8009b86:	4618      	mov	r0, r3
 8009b88:	f7fe f9ba 	bl	8007f00 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8009b8c:	6a3b      	ldr	r3, [r7, #32]
 8009b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b90:	2201      	movs	r2, #1
 8009b92:	409a      	lsls	r2, r3
 8009b94:	4b1c      	ldr	r3, [pc, #112]	@ (8009c08 <xTaskGenericNotify+0x174>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	4313      	orrs	r3, r2
 8009b9a:	4a1b      	ldr	r2, [pc, #108]	@ (8009c08 <xTaskGenericNotify+0x174>)
 8009b9c:	6013      	str	r3, [r2, #0]
 8009b9e:	6a3b      	ldr	r3, [r7, #32]
 8009ba0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ba2:	4613      	mov	r3, r2
 8009ba4:	009b      	lsls	r3, r3, #2
 8009ba6:	4413      	add	r3, r2
 8009ba8:	009b      	lsls	r3, r3, #2
 8009baa:	4a18      	ldr	r2, [pc, #96]	@ (8009c0c <xTaskGenericNotify+0x178>)
 8009bac:	441a      	add	r2, r3
 8009bae:	6a3b      	ldr	r3, [r7, #32]
 8009bb0:	3304      	adds	r3, #4
 8009bb2:	4619      	mov	r1, r3
 8009bb4:	4610      	mov	r0, r2
 8009bb6:	f7fe f946 	bl	8007e46 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009bba:	6a3b      	ldr	r3, [r7, #32]
 8009bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d00b      	beq.n	8009bda <xTaskGenericNotify+0x146>
	__asm volatile
 8009bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bc6:	f383 8811 	msr	BASEPRI, r3
 8009bca:	f3bf 8f6f 	isb	sy
 8009bce:	f3bf 8f4f 	dsb	sy
 8009bd2:	613b      	str	r3, [r7, #16]
}
 8009bd4:	bf00      	nop
 8009bd6:	bf00      	nop
 8009bd8:	e7fd      	b.n	8009bd6 <xTaskGenericNotify+0x142>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009bda:	6a3b      	ldr	r3, [r7, #32]
 8009bdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bde:	4b0c      	ldr	r3, [pc, #48]	@ (8009c10 <xTaskGenericNotify+0x17c>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009be4:	429a      	cmp	r2, r3
 8009be6:	d907      	bls.n	8009bf8 <xTaskGenericNotify+0x164>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8009be8:	4b0a      	ldr	r3, [pc, #40]	@ (8009c14 <xTaskGenericNotify+0x180>)
 8009bea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009bee:	601a      	str	r2, [r3, #0]
 8009bf0:	f3bf 8f4f 	dsb	sy
 8009bf4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009bf8:	f000 fac0 	bl	800a17c <vPortExitCritical>

		return xReturn;
 8009bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3728      	adds	r7, #40	@ 0x28
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}
 8009c06:	bf00      	nop
 8009c08:	200009f8 	.word	0x200009f8
 8009c0c:	200008f4 	.word	0x200008f4
 8009c10:	200008f0 	.word	0x200008f0
 8009c14:	e000ed04 	.word	0xe000ed04

08009c18 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b08e      	sub	sp, #56	@ 0x38
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	60f8      	str	r0, [r7, #12]
 8009c20:	60b9      	str	r1, [r7, #8]
 8009c22:	603b      	str	r3, [r7, #0]
 8009c24:	4613      	mov	r3, r2
 8009c26:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8009c28:	2301      	movs	r3, #1
 8009c2a:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d10b      	bne.n	8009c4a <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8009c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c36:	f383 8811 	msr	BASEPRI, r3
 8009c3a:	f3bf 8f6f 	isb	sy
 8009c3e:	f3bf 8f4f 	dsb	sy
 8009c42:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009c44:	bf00      	nop
 8009c46:	bf00      	nop
 8009c48:	e7fd      	b.n	8009c46 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009c4a:	f000 fb45 	bl	800a2d8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8009c52:	f3ef 8211 	mrs	r2, BASEPRI
 8009c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c5a:	f383 8811 	msr	BASEPRI, r3
 8009c5e:	f3bf 8f6f 	isb	sy
 8009c62:	f3bf 8f4f 	dsb	sy
 8009c66:	623a      	str	r2, [r7, #32]
 8009c68:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8009c6a:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d004      	beq.n	8009c7e <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c76:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c80:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8009c84:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c8a:	2202      	movs	r2, #2
 8009c8c:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 8009c90:	79fb      	ldrb	r3, [r7, #7]
 8009c92:	2b04      	cmp	r3, #4
 8009c94:	d82e      	bhi.n	8009cf4 <xTaskGenericNotifyFromISR+0xdc>
 8009c96:	a201      	add	r2, pc, #4	@ (adr r2, 8009c9c <xTaskGenericNotifyFromISR+0x84>)
 8009c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c9c:	08009d19 	.word	0x08009d19
 8009ca0:	08009cb1 	.word	0x08009cb1
 8009ca4:	08009cc3 	.word	0x08009cc3
 8009ca8:	08009cd3 	.word	0x08009cd3
 8009cac:	08009cdd 	.word	0x08009cdd
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cb2:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	431a      	orrs	r2, r3
 8009cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cbc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8009cc0:	e02d      	b.n	8009d1e <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009cc8:	1c5a      	adds	r2, r3, #1
 8009cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ccc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8009cd0:	e025      	b.n	8009d1e <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8009cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cd4:	68ba      	ldr	r2, [r7, #8]
 8009cd6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8009cda:	e020      	b.n	8009d1e <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009cdc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009ce0:	2b02      	cmp	r3, #2
 8009ce2:	d004      	beq.n	8009cee <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ce6:	68ba      	ldr	r2, [r7, #8]
 8009ce8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009cec:	e017      	b.n	8009d1e <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8009cf2:	e014      	b.n	8009d1e <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cf6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cfe:	d00d      	beq.n	8009d1c <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 8009d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d04:	f383 8811 	msr	BASEPRI, r3
 8009d08:	f3bf 8f6f 	isb	sy
 8009d0c:	f3bf 8f4f 	dsb	sy
 8009d10:	61bb      	str	r3, [r7, #24]
}
 8009d12:	bf00      	nop
 8009d14:	bf00      	nop
 8009d16:	e7fd      	b.n	8009d14 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8009d18:	bf00      	nop
 8009d1a:	e000      	b.n	8009d1e <xTaskGenericNotifyFromISR+0x106>
					break;
 8009d1c:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009d1e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009d22:	2b01      	cmp	r3, #1
 8009d24:	d146      	bne.n	8009db4 <xTaskGenericNotifyFromISR+0x19c>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d00b      	beq.n	8009d46 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 8009d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d32:	f383 8811 	msr	BASEPRI, r3
 8009d36:	f3bf 8f6f 	isb	sy
 8009d3a:	f3bf 8f4f 	dsb	sy
 8009d3e:	617b      	str	r3, [r7, #20]
}
 8009d40:	bf00      	nop
 8009d42:	bf00      	nop
 8009d44:	e7fd      	b.n	8009d42 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d46:	4b21      	ldr	r3, [pc, #132]	@ (8009dcc <xTaskGenericNotifyFromISR+0x1b4>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d11c      	bne.n	8009d88 <xTaskGenericNotifyFromISR+0x170>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d50:	3304      	adds	r3, #4
 8009d52:	4618      	mov	r0, r3
 8009d54:	f7fe f8d4 	bl	8007f00 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d5c:	2201      	movs	r2, #1
 8009d5e:	409a      	lsls	r2, r3
 8009d60:	4b1b      	ldr	r3, [pc, #108]	@ (8009dd0 <xTaskGenericNotifyFromISR+0x1b8>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	4313      	orrs	r3, r2
 8009d66:	4a1a      	ldr	r2, [pc, #104]	@ (8009dd0 <xTaskGenericNotifyFromISR+0x1b8>)
 8009d68:	6013      	str	r3, [r2, #0]
 8009d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d6e:	4613      	mov	r3, r2
 8009d70:	009b      	lsls	r3, r3, #2
 8009d72:	4413      	add	r3, r2
 8009d74:	009b      	lsls	r3, r3, #2
 8009d76:	4a17      	ldr	r2, [pc, #92]	@ (8009dd4 <xTaskGenericNotifyFromISR+0x1bc>)
 8009d78:	441a      	add	r2, r3
 8009d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d7c:	3304      	adds	r3, #4
 8009d7e:	4619      	mov	r1, r3
 8009d80:	4610      	mov	r0, r2
 8009d82:	f7fe f860 	bl	8007e46 <vListInsertEnd>
 8009d86:	e005      	b.n	8009d94 <xTaskGenericNotifyFromISR+0x17c>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8009d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d8a:	3318      	adds	r3, #24
 8009d8c:	4619      	mov	r1, r3
 8009d8e:	4812      	ldr	r0, [pc, #72]	@ (8009dd8 <xTaskGenericNotifyFromISR+0x1c0>)
 8009d90:	f7fe f859 	bl	8007e46 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d98:	4b10      	ldr	r3, [pc, #64]	@ (8009ddc <xTaskGenericNotifyFromISR+0x1c4>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d9e:	429a      	cmp	r2, r3
 8009da0:	d908      	bls.n	8009db4 <xTaskGenericNotifyFromISR+0x19c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8009da2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d002      	beq.n	8009dae <xTaskGenericNotifyFromISR+0x196>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8009da8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009daa:	2201      	movs	r2, #1
 8009dac:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8009dae:	4b0c      	ldr	r3, [pc, #48]	@ (8009de0 <xTaskGenericNotifyFromISR+0x1c8>)
 8009db0:	2201      	movs	r2, #1
 8009db2:	601a      	str	r2, [r3, #0]
 8009db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009db6:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	f383 8811 	msr	BASEPRI, r3
}
 8009dbe:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8009dc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3738      	adds	r7, #56	@ 0x38
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}
 8009dca:	bf00      	nop
 8009dcc:	20000a18 	.word	0x20000a18
 8009dd0:	200009f8 	.word	0x200009f8
 8009dd4:	200008f4 	.word	0x200008f4
 8009dd8:	200009b0 	.word	0x200009b0
 8009ddc:	200008f0 	.word	0x200008f0
 8009de0:	20000a04 	.word	0x20000a04

08009de4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b084      	sub	sp, #16
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
 8009dec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009dee:	4b29      	ldr	r3, [pc, #164]	@ (8009e94 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009df4:	4b28      	ldr	r3, [pc, #160]	@ (8009e98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	3304      	adds	r3, #4
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f7fe f880 	bl	8007f00 <uxListRemove>
 8009e00:	4603      	mov	r3, r0
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d10b      	bne.n	8009e1e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009e06:	4b24      	ldr	r3, [pc, #144]	@ (8009e98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e0c:	2201      	movs	r2, #1
 8009e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8009e12:	43da      	mvns	r2, r3
 8009e14:	4b21      	ldr	r3, [pc, #132]	@ (8009e9c <prvAddCurrentTaskToDelayedList+0xb8>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4013      	ands	r3, r2
 8009e1a:	4a20      	ldr	r2, [pc, #128]	@ (8009e9c <prvAddCurrentTaskToDelayedList+0xb8>)
 8009e1c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e24:	d10a      	bne.n	8009e3c <prvAddCurrentTaskToDelayedList+0x58>
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d007      	beq.n	8009e3c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e2c:	4b1a      	ldr	r3, [pc, #104]	@ (8009e98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	3304      	adds	r3, #4
 8009e32:	4619      	mov	r1, r3
 8009e34:	481a      	ldr	r0, [pc, #104]	@ (8009ea0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009e36:	f7fe f806 	bl	8007e46 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009e3a:	e026      	b.n	8009e8a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009e3c:	68fa      	ldr	r2, [r7, #12]
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	4413      	add	r3, r2
 8009e42:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009e44:	4b14      	ldr	r3, [pc, #80]	@ (8009e98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	68ba      	ldr	r2, [r7, #8]
 8009e4a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009e4c:	68ba      	ldr	r2, [r7, #8]
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	429a      	cmp	r2, r3
 8009e52:	d209      	bcs.n	8009e68 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e54:	4b13      	ldr	r3, [pc, #76]	@ (8009ea4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009e56:	681a      	ldr	r2, [r3, #0]
 8009e58:	4b0f      	ldr	r3, [pc, #60]	@ (8009e98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	3304      	adds	r3, #4
 8009e5e:	4619      	mov	r1, r3
 8009e60:	4610      	mov	r0, r2
 8009e62:	f7fe f814 	bl	8007e8e <vListInsert>
}
 8009e66:	e010      	b.n	8009e8a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e68:	4b0f      	ldr	r3, [pc, #60]	@ (8009ea8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009e6a:	681a      	ldr	r2, [r3, #0]
 8009e6c:	4b0a      	ldr	r3, [pc, #40]	@ (8009e98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	3304      	adds	r3, #4
 8009e72:	4619      	mov	r1, r3
 8009e74:	4610      	mov	r0, r2
 8009e76:	f7fe f80a 	bl	8007e8e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009e7a:	4b0c      	ldr	r3, [pc, #48]	@ (8009eac <prvAddCurrentTaskToDelayedList+0xc8>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	68ba      	ldr	r2, [r7, #8]
 8009e80:	429a      	cmp	r2, r3
 8009e82:	d202      	bcs.n	8009e8a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009e84:	4a09      	ldr	r2, [pc, #36]	@ (8009eac <prvAddCurrentTaskToDelayedList+0xc8>)
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	6013      	str	r3, [r2, #0]
}
 8009e8a:	bf00      	nop
 8009e8c:	3710      	adds	r7, #16
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}
 8009e92:	bf00      	nop
 8009e94:	200009f4 	.word	0x200009f4
 8009e98:	200008f0 	.word	0x200008f0
 8009e9c:	200009f8 	.word	0x200009f8
 8009ea0:	200009dc 	.word	0x200009dc
 8009ea4:	200009ac 	.word	0x200009ac
 8009ea8:	200009a8 	.word	0x200009a8
 8009eac:	20000a10 	.word	0x20000a10

08009eb0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b085      	sub	sp, #20
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	60f8      	str	r0, [r7, #12]
 8009eb8:	60b9      	str	r1, [r7, #8]
 8009eba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	3b04      	subs	r3, #4
 8009ec0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009ec8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	3b04      	subs	r3, #4
 8009ece:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	f023 0201 	bic.w	r2, r3, #1
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	3b04      	subs	r3, #4
 8009ede:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009ee0:	4a0c      	ldr	r2, [pc, #48]	@ (8009f14 <pxPortInitialiseStack+0x64>)
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	3b14      	subs	r3, #20
 8009eea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009eec:	687a      	ldr	r2, [r7, #4]
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	3b04      	subs	r3, #4
 8009ef6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	f06f 0202 	mvn.w	r2, #2
 8009efe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	3b20      	subs	r3, #32
 8009f04:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009f06:	68fb      	ldr	r3, [r7, #12]
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3714      	adds	r7, #20
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f12:	4770      	bx	lr
 8009f14:	08009f19 	.word	0x08009f19

08009f18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b085      	sub	sp, #20
 8009f1c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009f22:	4b13      	ldr	r3, [pc, #76]	@ (8009f70 <prvTaskExitError+0x58>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f2a:	d00b      	beq.n	8009f44 <prvTaskExitError+0x2c>
	__asm volatile
 8009f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f30:	f383 8811 	msr	BASEPRI, r3
 8009f34:	f3bf 8f6f 	isb	sy
 8009f38:	f3bf 8f4f 	dsb	sy
 8009f3c:	60fb      	str	r3, [r7, #12]
}
 8009f3e:	bf00      	nop
 8009f40:	bf00      	nop
 8009f42:	e7fd      	b.n	8009f40 <prvTaskExitError+0x28>
	__asm volatile
 8009f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f48:	f383 8811 	msr	BASEPRI, r3
 8009f4c:	f3bf 8f6f 	isb	sy
 8009f50:	f3bf 8f4f 	dsb	sy
 8009f54:	60bb      	str	r3, [r7, #8]
}
 8009f56:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009f58:	bf00      	nop
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d0fc      	beq.n	8009f5a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009f60:	bf00      	nop
 8009f62:	bf00      	nop
 8009f64:	3714      	adds	r7, #20
 8009f66:	46bd      	mov	sp, r7
 8009f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6c:	4770      	bx	lr
 8009f6e:	bf00      	nop
 8009f70:	2000001c 	.word	0x2000001c
	...

08009f80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009f80:	4b07      	ldr	r3, [pc, #28]	@ (8009fa0 <pxCurrentTCBConst2>)
 8009f82:	6819      	ldr	r1, [r3, #0]
 8009f84:	6808      	ldr	r0, [r1, #0]
 8009f86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f8a:	f380 8809 	msr	PSP, r0
 8009f8e:	f3bf 8f6f 	isb	sy
 8009f92:	f04f 0000 	mov.w	r0, #0
 8009f96:	f380 8811 	msr	BASEPRI, r0
 8009f9a:	4770      	bx	lr
 8009f9c:	f3af 8000 	nop.w

08009fa0 <pxCurrentTCBConst2>:
 8009fa0:	200008f0 	.word	0x200008f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009fa4:	bf00      	nop
 8009fa6:	bf00      	nop

08009fa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009fa8:	4808      	ldr	r0, [pc, #32]	@ (8009fcc <prvPortStartFirstTask+0x24>)
 8009faa:	6800      	ldr	r0, [r0, #0]
 8009fac:	6800      	ldr	r0, [r0, #0]
 8009fae:	f380 8808 	msr	MSP, r0
 8009fb2:	f04f 0000 	mov.w	r0, #0
 8009fb6:	f380 8814 	msr	CONTROL, r0
 8009fba:	b662      	cpsie	i
 8009fbc:	b661      	cpsie	f
 8009fbe:	f3bf 8f4f 	dsb	sy
 8009fc2:	f3bf 8f6f 	isb	sy
 8009fc6:	df00      	svc	0
 8009fc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009fca:	bf00      	nop
 8009fcc:	e000ed08 	.word	0xe000ed08

08009fd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b086      	sub	sp, #24
 8009fd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009fd6:	4b47      	ldr	r3, [pc, #284]	@ (800a0f4 <xPortStartScheduler+0x124>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	4a47      	ldr	r2, [pc, #284]	@ (800a0f8 <xPortStartScheduler+0x128>)
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	d10b      	bne.n	8009ff8 <xPortStartScheduler+0x28>
	__asm volatile
 8009fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fe4:	f383 8811 	msr	BASEPRI, r3
 8009fe8:	f3bf 8f6f 	isb	sy
 8009fec:	f3bf 8f4f 	dsb	sy
 8009ff0:	613b      	str	r3, [r7, #16]
}
 8009ff2:	bf00      	nop
 8009ff4:	bf00      	nop
 8009ff6:	e7fd      	b.n	8009ff4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009ff8:	4b3e      	ldr	r3, [pc, #248]	@ (800a0f4 <xPortStartScheduler+0x124>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	4a3f      	ldr	r2, [pc, #252]	@ (800a0fc <xPortStartScheduler+0x12c>)
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d10b      	bne.n	800a01a <xPortStartScheduler+0x4a>
	__asm volatile
 800a002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a006:	f383 8811 	msr	BASEPRI, r3
 800a00a:	f3bf 8f6f 	isb	sy
 800a00e:	f3bf 8f4f 	dsb	sy
 800a012:	60fb      	str	r3, [r7, #12]
}
 800a014:	bf00      	nop
 800a016:	bf00      	nop
 800a018:	e7fd      	b.n	800a016 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a01a:	4b39      	ldr	r3, [pc, #228]	@ (800a100 <xPortStartScheduler+0x130>)
 800a01c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	781b      	ldrb	r3, [r3, #0]
 800a022:	b2db      	uxtb	r3, r3
 800a024:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	22ff      	movs	r2, #255	@ 0xff
 800a02a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	781b      	ldrb	r3, [r3, #0]
 800a030:	b2db      	uxtb	r3, r3
 800a032:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a034:	78fb      	ldrb	r3, [r7, #3]
 800a036:	b2db      	uxtb	r3, r3
 800a038:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a03c:	b2da      	uxtb	r2, r3
 800a03e:	4b31      	ldr	r3, [pc, #196]	@ (800a104 <xPortStartScheduler+0x134>)
 800a040:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a042:	4b31      	ldr	r3, [pc, #196]	@ (800a108 <xPortStartScheduler+0x138>)
 800a044:	2207      	movs	r2, #7
 800a046:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a048:	e009      	b.n	800a05e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a04a:	4b2f      	ldr	r3, [pc, #188]	@ (800a108 <xPortStartScheduler+0x138>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	3b01      	subs	r3, #1
 800a050:	4a2d      	ldr	r2, [pc, #180]	@ (800a108 <xPortStartScheduler+0x138>)
 800a052:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a054:	78fb      	ldrb	r3, [r7, #3]
 800a056:	b2db      	uxtb	r3, r3
 800a058:	005b      	lsls	r3, r3, #1
 800a05a:	b2db      	uxtb	r3, r3
 800a05c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a05e:	78fb      	ldrb	r3, [r7, #3]
 800a060:	b2db      	uxtb	r3, r3
 800a062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a066:	2b80      	cmp	r3, #128	@ 0x80
 800a068:	d0ef      	beq.n	800a04a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a06a:	4b27      	ldr	r3, [pc, #156]	@ (800a108 <xPortStartScheduler+0x138>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f1c3 0307 	rsb	r3, r3, #7
 800a072:	2b04      	cmp	r3, #4
 800a074:	d00b      	beq.n	800a08e <xPortStartScheduler+0xbe>
	__asm volatile
 800a076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a07a:	f383 8811 	msr	BASEPRI, r3
 800a07e:	f3bf 8f6f 	isb	sy
 800a082:	f3bf 8f4f 	dsb	sy
 800a086:	60bb      	str	r3, [r7, #8]
}
 800a088:	bf00      	nop
 800a08a:	bf00      	nop
 800a08c:	e7fd      	b.n	800a08a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a08e:	4b1e      	ldr	r3, [pc, #120]	@ (800a108 <xPortStartScheduler+0x138>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	021b      	lsls	r3, r3, #8
 800a094:	4a1c      	ldr	r2, [pc, #112]	@ (800a108 <xPortStartScheduler+0x138>)
 800a096:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a098:	4b1b      	ldr	r3, [pc, #108]	@ (800a108 <xPortStartScheduler+0x138>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a0a0:	4a19      	ldr	r2, [pc, #100]	@ (800a108 <xPortStartScheduler+0x138>)
 800a0a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	b2da      	uxtb	r2, r3
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a0ac:	4b17      	ldr	r3, [pc, #92]	@ (800a10c <xPortStartScheduler+0x13c>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	4a16      	ldr	r2, [pc, #88]	@ (800a10c <xPortStartScheduler+0x13c>)
 800a0b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a0b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a0b8:	4b14      	ldr	r3, [pc, #80]	@ (800a10c <xPortStartScheduler+0x13c>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4a13      	ldr	r2, [pc, #76]	@ (800a10c <xPortStartScheduler+0x13c>)
 800a0be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a0c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a0c4:	f000 f8da 	bl	800a27c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a0c8:	4b11      	ldr	r3, [pc, #68]	@ (800a110 <xPortStartScheduler+0x140>)
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a0ce:	f000 f8f9 	bl	800a2c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a0d2:	4b10      	ldr	r3, [pc, #64]	@ (800a114 <xPortStartScheduler+0x144>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	4a0f      	ldr	r2, [pc, #60]	@ (800a114 <xPortStartScheduler+0x144>)
 800a0d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a0dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a0de:	f7ff ff63 	bl	8009fa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a0e2:	f7ff f87b 	bl	80091dc <vTaskSwitchContext>
	prvTaskExitError();
 800a0e6:	f7ff ff17 	bl	8009f18 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a0ea:	2300      	movs	r3, #0
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	3718      	adds	r7, #24
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}
 800a0f4:	e000ed00 	.word	0xe000ed00
 800a0f8:	410fc271 	.word	0x410fc271
 800a0fc:	410fc270 	.word	0x410fc270
 800a100:	e000e400 	.word	0xe000e400
 800a104:	20000a1c 	.word	0x20000a1c
 800a108:	20000a20 	.word	0x20000a20
 800a10c:	e000ed20 	.word	0xe000ed20
 800a110:	2000001c 	.word	0x2000001c
 800a114:	e000ef34 	.word	0xe000ef34

0800a118 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a118:	b480      	push	{r7}
 800a11a:	b083      	sub	sp, #12
 800a11c:	af00      	add	r7, sp, #0
	__asm volatile
 800a11e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a122:	f383 8811 	msr	BASEPRI, r3
 800a126:	f3bf 8f6f 	isb	sy
 800a12a:	f3bf 8f4f 	dsb	sy
 800a12e:	607b      	str	r3, [r7, #4]
}
 800a130:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a132:	4b10      	ldr	r3, [pc, #64]	@ (800a174 <vPortEnterCritical+0x5c>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	3301      	adds	r3, #1
 800a138:	4a0e      	ldr	r2, [pc, #56]	@ (800a174 <vPortEnterCritical+0x5c>)
 800a13a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a13c:	4b0d      	ldr	r3, [pc, #52]	@ (800a174 <vPortEnterCritical+0x5c>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	2b01      	cmp	r3, #1
 800a142:	d110      	bne.n	800a166 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a144:	4b0c      	ldr	r3, [pc, #48]	@ (800a178 <vPortEnterCritical+0x60>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	b2db      	uxtb	r3, r3
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d00b      	beq.n	800a166 <vPortEnterCritical+0x4e>
	__asm volatile
 800a14e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a152:	f383 8811 	msr	BASEPRI, r3
 800a156:	f3bf 8f6f 	isb	sy
 800a15a:	f3bf 8f4f 	dsb	sy
 800a15e:	603b      	str	r3, [r7, #0]
}
 800a160:	bf00      	nop
 800a162:	bf00      	nop
 800a164:	e7fd      	b.n	800a162 <vPortEnterCritical+0x4a>
	}
}
 800a166:	bf00      	nop
 800a168:	370c      	adds	r7, #12
 800a16a:	46bd      	mov	sp, r7
 800a16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a170:	4770      	bx	lr
 800a172:	bf00      	nop
 800a174:	2000001c 	.word	0x2000001c
 800a178:	e000ed04 	.word	0xe000ed04

0800a17c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a17c:	b480      	push	{r7}
 800a17e:	b083      	sub	sp, #12
 800a180:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a182:	4b12      	ldr	r3, [pc, #72]	@ (800a1cc <vPortExitCritical+0x50>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d10b      	bne.n	800a1a2 <vPortExitCritical+0x26>
	__asm volatile
 800a18a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a18e:	f383 8811 	msr	BASEPRI, r3
 800a192:	f3bf 8f6f 	isb	sy
 800a196:	f3bf 8f4f 	dsb	sy
 800a19a:	607b      	str	r3, [r7, #4]
}
 800a19c:	bf00      	nop
 800a19e:	bf00      	nop
 800a1a0:	e7fd      	b.n	800a19e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a1a2:	4b0a      	ldr	r3, [pc, #40]	@ (800a1cc <vPortExitCritical+0x50>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	3b01      	subs	r3, #1
 800a1a8:	4a08      	ldr	r2, [pc, #32]	@ (800a1cc <vPortExitCritical+0x50>)
 800a1aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a1ac:	4b07      	ldr	r3, [pc, #28]	@ (800a1cc <vPortExitCritical+0x50>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d105      	bne.n	800a1c0 <vPortExitCritical+0x44>
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	f383 8811 	msr	BASEPRI, r3
}
 800a1be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a1c0:	bf00      	nop
 800a1c2:	370c      	adds	r7, #12
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ca:	4770      	bx	lr
 800a1cc:	2000001c 	.word	0x2000001c

0800a1d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a1d0:	f3ef 8009 	mrs	r0, PSP
 800a1d4:	f3bf 8f6f 	isb	sy
 800a1d8:	4b15      	ldr	r3, [pc, #84]	@ (800a230 <pxCurrentTCBConst>)
 800a1da:	681a      	ldr	r2, [r3, #0]
 800a1dc:	f01e 0f10 	tst.w	lr, #16
 800a1e0:	bf08      	it	eq
 800a1e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a1e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1ea:	6010      	str	r0, [r2, #0]
 800a1ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a1f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a1f4:	f380 8811 	msr	BASEPRI, r0
 800a1f8:	f3bf 8f4f 	dsb	sy
 800a1fc:	f3bf 8f6f 	isb	sy
 800a200:	f7fe ffec 	bl	80091dc <vTaskSwitchContext>
 800a204:	f04f 0000 	mov.w	r0, #0
 800a208:	f380 8811 	msr	BASEPRI, r0
 800a20c:	bc09      	pop	{r0, r3}
 800a20e:	6819      	ldr	r1, [r3, #0]
 800a210:	6808      	ldr	r0, [r1, #0]
 800a212:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a216:	f01e 0f10 	tst.w	lr, #16
 800a21a:	bf08      	it	eq
 800a21c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a220:	f380 8809 	msr	PSP, r0
 800a224:	f3bf 8f6f 	isb	sy
 800a228:	4770      	bx	lr
 800a22a:	bf00      	nop
 800a22c:	f3af 8000 	nop.w

0800a230 <pxCurrentTCBConst>:
 800a230:	200008f0 	.word	0x200008f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a234:	bf00      	nop
 800a236:	bf00      	nop

0800a238 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b082      	sub	sp, #8
 800a23c:	af00      	add	r7, sp, #0
	__asm volatile
 800a23e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a242:	f383 8811 	msr	BASEPRI, r3
 800a246:	f3bf 8f6f 	isb	sy
 800a24a:	f3bf 8f4f 	dsb	sy
 800a24e:	607b      	str	r3, [r7, #4]
}
 800a250:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a252:	f7fe ff09 	bl	8009068 <xTaskIncrementTick>
 800a256:	4603      	mov	r3, r0
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d003      	beq.n	800a264 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a25c:	4b06      	ldr	r3, [pc, #24]	@ (800a278 <SysTick_Handler+0x40>)
 800a25e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a262:	601a      	str	r2, [r3, #0]
 800a264:	2300      	movs	r3, #0
 800a266:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	f383 8811 	msr	BASEPRI, r3
}
 800a26e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a270:	bf00      	nop
 800a272:	3708      	adds	r7, #8
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}
 800a278:	e000ed04 	.word	0xe000ed04

0800a27c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a27c:	b480      	push	{r7}
 800a27e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a280:	4b0b      	ldr	r3, [pc, #44]	@ (800a2b0 <vPortSetupTimerInterrupt+0x34>)
 800a282:	2200      	movs	r2, #0
 800a284:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a286:	4b0b      	ldr	r3, [pc, #44]	@ (800a2b4 <vPortSetupTimerInterrupt+0x38>)
 800a288:	2200      	movs	r2, #0
 800a28a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a28c:	4b0a      	ldr	r3, [pc, #40]	@ (800a2b8 <vPortSetupTimerInterrupt+0x3c>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	4a0a      	ldr	r2, [pc, #40]	@ (800a2bc <vPortSetupTimerInterrupt+0x40>)
 800a292:	fba2 2303 	umull	r2, r3, r2, r3
 800a296:	099b      	lsrs	r3, r3, #6
 800a298:	4a09      	ldr	r2, [pc, #36]	@ (800a2c0 <vPortSetupTimerInterrupt+0x44>)
 800a29a:	3b01      	subs	r3, #1
 800a29c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a29e:	4b04      	ldr	r3, [pc, #16]	@ (800a2b0 <vPortSetupTimerInterrupt+0x34>)
 800a2a0:	2207      	movs	r2, #7
 800a2a2:	601a      	str	r2, [r3, #0]
}
 800a2a4:	bf00      	nop
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ac:	4770      	bx	lr
 800a2ae:	bf00      	nop
 800a2b0:	e000e010 	.word	0xe000e010
 800a2b4:	e000e018 	.word	0xe000e018
 800a2b8:	20000010 	.word	0x20000010
 800a2bc:	10624dd3 	.word	0x10624dd3
 800a2c0:	e000e014 	.word	0xe000e014

0800a2c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a2c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a2d4 <vPortEnableVFP+0x10>
 800a2c8:	6801      	ldr	r1, [r0, #0]
 800a2ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a2ce:	6001      	str	r1, [r0, #0]
 800a2d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a2d2:	bf00      	nop
 800a2d4:	e000ed88 	.word	0xe000ed88

0800a2d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a2d8:	b480      	push	{r7}
 800a2da:	b085      	sub	sp, #20
 800a2dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a2de:	f3ef 8305 	mrs	r3, IPSR
 800a2e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	2b0f      	cmp	r3, #15
 800a2e8:	d915      	bls.n	800a316 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a2ea:	4a18      	ldr	r2, [pc, #96]	@ (800a34c <vPortValidateInterruptPriority+0x74>)
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	4413      	add	r3, r2
 800a2f0:	781b      	ldrb	r3, [r3, #0]
 800a2f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a2f4:	4b16      	ldr	r3, [pc, #88]	@ (800a350 <vPortValidateInterruptPriority+0x78>)
 800a2f6:	781b      	ldrb	r3, [r3, #0]
 800a2f8:	7afa      	ldrb	r2, [r7, #11]
 800a2fa:	429a      	cmp	r2, r3
 800a2fc:	d20b      	bcs.n	800a316 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a2fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a302:	f383 8811 	msr	BASEPRI, r3
 800a306:	f3bf 8f6f 	isb	sy
 800a30a:	f3bf 8f4f 	dsb	sy
 800a30e:	607b      	str	r3, [r7, #4]
}
 800a310:	bf00      	nop
 800a312:	bf00      	nop
 800a314:	e7fd      	b.n	800a312 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a316:	4b0f      	ldr	r3, [pc, #60]	@ (800a354 <vPortValidateInterruptPriority+0x7c>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a31e:	4b0e      	ldr	r3, [pc, #56]	@ (800a358 <vPortValidateInterruptPriority+0x80>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	429a      	cmp	r2, r3
 800a324:	d90b      	bls.n	800a33e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a32a:	f383 8811 	msr	BASEPRI, r3
 800a32e:	f3bf 8f6f 	isb	sy
 800a332:	f3bf 8f4f 	dsb	sy
 800a336:	603b      	str	r3, [r7, #0]
}
 800a338:	bf00      	nop
 800a33a:	bf00      	nop
 800a33c:	e7fd      	b.n	800a33a <vPortValidateInterruptPriority+0x62>
	}
 800a33e:	bf00      	nop
 800a340:	3714      	adds	r7, #20
 800a342:	46bd      	mov	sp, r7
 800a344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a348:	4770      	bx	lr
 800a34a:	bf00      	nop
 800a34c:	e000e3f0 	.word	0xe000e3f0
 800a350:	20000a1c 	.word	0x20000a1c
 800a354:	e000ed0c 	.word	0xe000ed0c
 800a358:	20000a20 	.word	0x20000a20

0800a35c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b08a      	sub	sp, #40	@ 0x28
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a364:	2300      	movs	r3, #0
 800a366:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a368:	f7fe fdd2 	bl	8008f10 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a36c:	4b5c      	ldr	r3, [pc, #368]	@ (800a4e0 <pvPortMalloc+0x184>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d101      	bne.n	800a378 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a374:	f000 f924 	bl	800a5c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a378:	4b5a      	ldr	r3, [pc, #360]	@ (800a4e4 <pvPortMalloc+0x188>)
 800a37a:	681a      	ldr	r2, [r3, #0]
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	4013      	ands	r3, r2
 800a380:	2b00      	cmp	r3, #0
 800a382:	f040 8095 	bne.w	800a4b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d01e      	beq.n	800a3ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a38c:	2208      	movs	r2, #8
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	4413      	add	r3, r2
 800a392:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f003 0307 	and.w	r3, r3, #7
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d015      	beq.n	800a3ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f023 0307 	bic.w	r3, r3, #7
 800a3a4:	3308      	adds	r3, #8
 800a3a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f003 0307 	and.w	r3, r3, #7
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d00b      	beq.n	800a3ca <pvPortMalloc+0x6e>
	__asm volatile
 800a3b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3b6:	f383 8811 	msr	BASEPRI, r3
 800a3ba:	f3bf 8f6f 	isb	sy
 800a3be:	f3bf 8f4f 	dsb	sy
 800a3c2:	617b      	str	r3, [r7, #20]
}
 800a3c4:	bf00      	nop
 800a3c6:	bf00      	nop
 800a3c8:	e7fd      	b.n	800a3c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d06f      	beq.n	800a4b0 <pvPortMalloc+0x154>
 800a3d0:	4b45      	ldr	r3, [pc, #276]	@ (800a4e8 <pvPortMalloc+0x18c>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	687a      	ldr	r2, [r7, #4]
 800a3d6:	429a      	cmp	r2, r3
 800a3d8:	d86a      	bhi.n	800a4b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a3da:	4b44      	ldr	r3, [pc, #272]	@ (800a4ec <pvPortMalloc+0x190>)
 800a3dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a3de:	4b43      	ldr	r3, [pc, #268]	@ (800a4ec <pvPortMalloc+0x190>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a3e4:	e004      	b.n	800a3f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a3e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a3ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a3f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	687a      	ldr	r2, [r7, #4]
 800a3f6:	429a      	cmp	r2, r3
 800a3f8:	d903      	bls.n	800a402 <pvPortMalloc+0xa6>
 800a3fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d1f1      	bne.n	800a3e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a402:	4b37      	ldr	r3, [pc, #220]	@ (800a4e0 <pvPortMalloc+0x184>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a408:	429a      	cmp	r2, r3
 800a40a:	d051      	beq.n	800a4b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a40c:	6a3b      	ldr	r3, [r7, #32]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	2208      	movs	r2, #8
 800a412:	4413      	add	r3, r2
 800a414:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a418:	681a      	ldr	r2, [r3, #0]
 800a41a:	6a3b      	ldr	r3, [r7, #32]
 800a41c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a41e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a420:	685a      	ldr	r2, [r3, #4]
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	1ad2      	subs	r2, r2, r3
 800a426:	2308      	movs	r3, #8
 800a428:	005b      	lsls	r3, r3, #1
 800a42a:	429a      	cmp	r2, r3
 800a42c:	d920      	bls.n	800a470 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a42e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	4413      	add	r3, r2
 800a434:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a436:	69bb      	ldr	r3, [r7, #24]
 800a438:	f003 0307 	and.w	r3, r3, #7
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d00b      	beq.n	800a458 <pvPortMalloc+0xfc>
	__asm volatile
 800a440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a444:	f383 8811 	msr	BASEPRI, r3
 800a448:	f3bf 8f6f 	isb	sy
 800a44c:	f3bf 8f4f 	dsb	sy
 800a450:	613b      	str	r3, [r7, #16]
}
 800a452:	bf00      	nop
 800a454:	bf00      	nop
 800a456:	e7fd      	b.n	800a454 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a45a:	685a      	ldr	r2, [r3, #4]
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	1ad2      	subs	r2, r2, r3
 800a460:	69bb      	ldr	r3, [r7, #24]
 800a462:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a466:	687a      	ldr	r2, [r7, #4]
 800a468:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a46a:	69b8      	ldr	r0, [r7, #24]
 800a46c:	f000 f90a 	bl	800a684 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a470:	4b1d      	ldr	r3, [pc, #116]	@ (800a4e8 <pvPortMalloc+0x18c>)
 800a472:	681a      	ldr	r2, [r3, #0]
 800a474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a476:	685b      	ldr	r3, [r3, #4]
 800a478:	1ad3      	subs	r3, r2, r3
 800a47a:	4a1b      	ldr	r2, [pc, #108]	@ (800a4e8 <pvPortMalloc+0x18c>)
 800a47c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a47e:	4b1a      	ldr	r3, [pc, #104]	@ (800a4e8 <pvPortMalloc+0x18c>)
 800a480:	681a      	ldr	r2, [r3, #0]
 800a482:	4b1b      	ldr	r3, [pc, #108]	@ (800a4f0 <pvPortMalloc+0x194>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	429a      	cmp	r2, r3
 800a488:	d203      	bcs.n	800a492 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a48a:	4b17      	ldr	r3, [pc, #92]	@ (800a4e8 <pvPortMalloc+0x18c>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	4a18      	ldr	r2, [pc, #96]	@ (800a4f0 <pvPortMalloc+0x194>)
 800a490:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a494:	685a      	ldr	r2, [r3, #4]
 800a496:	4b13      	ldr	r3, [pc, #76]	@ (800a4e4 <pvPortMalloc+0x188>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	431a      	orrs	r2, r3
 800a49c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a49e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a4a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a4a6:	4b13      	ldr	r3, [pc, #76]	@ (800a4f4 <pvPortMalloc+0x198>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	3301      	adds	r3, #1
 800a4ac:	4a11      	ldr	r2, [pc, #68]	@ (800a4f4 <pvPortMalloc+0x198>)
 800a4ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a4b0:	f7fe fd3c 	bl	8008f2c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a4b4:	69fb      	ldr	r3, [r7, #28]
 800a4b6:	f003 0307 	and.w	r3, r3, #7
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d00b      	beq.n	800a4d6 <pvPortMalloc+0x17a>
	__asm volatile
 800a4be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4c2:	f383 8811 	msr	BASEPRI, r3
 800a4c6:	f3bf 8f6f 	isb	sy
 800a4ca:	f3bf 8f4f 	dsb	sy
 800a4ce:	60fb      	str	r3, [r7, #12]
}
 800a4d0:	bf00      	nop
 800a4d2:	bf00      	nop
 800a4d4:	e7fd      	b.n	800a4d2 <pvPortMalloc+0x176>
	return pvReturn;
 800a4d6:	69fb      	ldr	r3, [r7, #28]
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3728      	adds	r7, #40	@ 0x28
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}
 800a4e0:	2000462c 	.word	0x2000462c
 800a4e4:	20004640 	.word	0x20004640
 800a4e8:	20004630 	.word	0x20004630
 800a4ec:	20004624 	.word	0x20004624
 800a4f0:	20004634 	.word	0x20004634
 800a4f4:	20004638 	.word	0x20004638

0800a4f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b086      	sub	sp, #24
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d04f      	beq.n	800a5aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a50a:	2308      	movs	r3, #8
 800a50c:	425b      	negs	r3, r3
 800a50e:	697a      	ldr	r2, [r7, #20]
 800a510:	4413      	add	r3, r2
 800a512:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a518:	693b      	ldr	r3, [r7, #16]
 800a51a:	685a      	ldr	r2, [r3, #4]
 800a51c:	4b25      	ldr	r3, [pc, #148]	@ (800a5b4 <vPortFree+0xbc>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	4013      	ands	r3, r2
 800a522:	2b00      	cmp	r3, #0
 800a524:	d10b      	bne.n	800a53e <vPortFree+0x46>
	__asm volatile
 800a526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a52a:	f383 8811 	msr	BASEPRI, r3
 800a52e:	f3bf 8f6f 	isb	sy
 800a532:	f3bf 8f4f 	dsb	sy
 800a536:	60fb      	str	r3, [r7, #12]
}
 800a538:	bf00      	nop
 800a53a:	bf00      	nop
 800a53c:	e7fd      	b.n	800a53a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d00b      	beq.n	800a55e <vPortFree+0x66>
	__asm volatile
 800a546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a54a:	f383 8811 	msr	BASEPRI, r3
 800a54e:	f3bf 8f6f 	isb	sy
 800a552:	f3bf 8f4f 	dsb	sy
 800a556:	60bb      	str	r3, [r7, #8]
}
 800a558:	bf00      	nop
 800a55a:	bf00      	nop
 800a55c:	e7fd      	b.n	800a55a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a55e:	693b      	ldr	r3, [r7, #16]
 800a560:	685a      	ldr	r2, [r3, #4]
 800a562:	4b14      	ldr	r3, [pc, #80]	@ (800a5b4 <vPortFree+0xbc>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	4013      	ands	r3, r2
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d01e      	beq.n	800a5aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a56c:	693b      	ldr	r3, [r7, #16]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d11a      	bne.n	800a5aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	685a      	ldr	r2, [r3, #4]
 800a578:	4b0e      	ldr	r3, [pc, #56]	@ (800a5b4 <vPortFree+0xbc>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	43db      	mvns	r3, r3
 800a57e:	401a      	ands	r2, r3
 800a580:	693b      	ldr	r3, [r7, #16]
 800a582:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a584:	f7fe fcc4 	bl	8008f10 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	685a      	ldr	r2, [r3, #4]
 800a58c:	4b0a      	ldr	r3, [pc, #40]	@ (800a5b8 <vPortFree+0xc0>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	4413      	add	r3, r2
 800a592:	4a09      	ldr	r2, [pc, #36]	@ (800a5b8 <vPortFree+0xc0>)
 800a594:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a596:	6938      	ldr	r0, [r7, #16]
 800a598:	f000 f874 	bl	800a684 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a59c:	4b07      	ldr	r3, [pc, #28]	@ (800a5bc <vPortFree+0xc4>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	3301      	adds	r3, #1
 800a5a2:	4a06      	ldr	r2, [pc, #24]	@ (800a5bc <vPortFree+0xc4>)
 800a5a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a5a6:	f7fe fcc1 	bl	8008f2c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a5aa:	bf00      	nop
 800a5ac:	3718      	adds	r7, #24
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}
 800a5b2:	bf00      	nop
 800a5b4:	20004640 	.word	0x20004640
 800a5b8:	20004630 	.word	0x20004630
 800a5bc:	2000463c 	.word	0x2000463c

0800a5c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	b085      	sub	sp, #20
 800a5c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a5c6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a5ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a5cc:	4b27      	ldr	r3, [pc, #156]	@ (800a66c <prvHeapInit+0xac>)
 800a5ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	f003 0307 	and.w	r3, r3, #7
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d00c      	beq.n	800a5f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	3307      	adds	r3, #7
 800a5de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	f023 0307 	bic.w	r3, r3, #7
 800a5e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a5e8:	68ba      	ldr	r2, [r7, #8]
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	1ad3      	subs	r3, r2, r3
 800a5ee:	4a1f      	ldr	r2, [pc, #124]	@ (800a66c <prvHeapInit+0xac>)
 800a5f0:	4413      	add	r3, r2
 800a5f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a5f8:	4a1d      	ldr	r2, [pc, #116]	@ (800a670 <prvHeapInit+0xb0>)
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a5fe:	4b1c      	ldr	r3, [pc, #112]	@ (800a670 <prvHeapInit+0xb0>)
 800a600:	2200      	movs	r2, #0
 800a602:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	68ba      	ldr	r2, [r7, #8]
 800a608:	4413      	add	r3, r2
 800a60a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a60c:	2208      	movs	r2, #8
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	1a9b      	subs	r3, r3, r2
 800a612:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	f023 0307 	bic.w	r3, r3, #7
 800a61a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	4a15      	ldr	r2, [pc, #84]	@ (800a674 <prvHeapInit+0xb4>)
 800a620:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a622:	4b14      	ldr	r3, [pc, #80]	@ (800a674 <prvHeapInit+0xb4>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	2200      	movs	r2, #0
 800a628:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a62a:	4b12      	ldr	r3, [pc, #72]	@ (800a674 <prvHeapInit+0xb4>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	2200      	movs	r2, #0
 800a630:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	68fa      	ldr	r2, [r7, #12]
 800a63a:	1ad2      	subs	r2, r2, r3
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a640:	4b0c      	ldr	r3, [pc, #48]	@ (800a674 <prvHeapInit+0xb4>)
 800a642:	681a      	ldr	r2, [r3, #0]
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	4a0a      	ldr	r2, [pc, #40]	@ (800a678 <prvHeapInit+0xb8>)
 800a64e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	685b      	ldr	r3, [r3, #4]
 800a654:	4a09      	ldr	r2, [pc, #36]	@ (800a67c <prvHeapInit+0xbc>)
 800a656:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a658:	4b09      	ldr	r3, [pc, #36]	@ (800a680 <prvHeapInit+0xc0>)
 800a65a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a65e:	601a      	str	r2, [r3, #0]
}
 800a660:	bf00      	nop
 800a662:	3714      	adds	r7, #20
 800a664:	46bd      	mov	sp, r7
 800a666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66a:	4770      	bx	lr
 800a66c:	20000a24 	.word	0x20000a24
 800a670:	20004624 	.word	0x20004624
 800a674:	2000462c 	.word	0x2000462c
 800a678:	20004634 	.word	0x20004634
 800a67c:	20004630 	.word	0x20004630
 800a680:	20004640 	.word	0x20004640

0800a684 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a684:	b480      	push	{r7}
 800a686:	b085      	sub	sp, #20
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a68c:	4b28      	ldr	r3, [pc, #160]	@ (800a730 <prvInsertBlockIntoFreeList+0xac>)
 800a68e:	60fb      	str	r3, [r7, #12]
 800a690:	e002      	b.n	800a698 <prvInsertBlockIntoFreeList+0x14>
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	60fb      	str	r3, [r7, #12]
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	687a      	ldr	r2, [r7, #4]
 800a69e:	429a      	cmp	r2, r3
 800a6a0:	d8f7      	bhi.n	800a692 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	685b      	ldr	r3, [r3, #4]
 800a6aa:	68ba      	ldr	r2, [r7, #8]
 800a6ac:	4413      	add	r3, r2
 800a6ae:	687a      	ldr	r2, [r7, #4]
 800a6b0:	429a      	cmp	r2, r3
 800a6b2:	d108      	bne.n	800a6c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	685a      	ldr	r2, [r3, #4]
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	685b      	ldr	r3, [r3, #4]
 800a6bc:	441a      	add	r2, r3
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	685b      	ldr	r3, [r3, #4]
 800a6ce:	68ba      	ldr	r2, [r7, #8]
 800a6d0:	441a      	add	r2, r3
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	d118      	bne.n	800a70c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681a      	ldr	r2, [r3, #0]
 800a6de:	4b15      	ldr	r3, [pc, #84]	@ (800a734 <prvInsertBlockIntoFreeList+0xb0>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	429a      	cmp	r2, r3
 800a6e4:	d00d      	beq.n	800a702 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	685a      	ldr	r2, [r3, #4]
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	685b      	ldr	r3, [r3, #4]
 800a6f0:	441a      	add	r2, r3
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	681a      	ldr	r2, [r3, #0]
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	601a      	str	r2, [r3, #0]
 800a700:	e008      	b.n	800a714 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a702:	4b0c      	ldr	r3, [pc, #48]	@ (800a734 <prvInsertBlockIntoFreeList+0xb0>)
 800a704:	681a      	ldr	r2, [r3, #0]
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	601a      	str	r2, [r3, #0]
 800a70a:	e003      	b.n	800a714 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	681a      	ldr	r2, [r3, #0]
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a714:	68fa      	ldr	r2, [r7, #12]
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	429a      	cmp	r2, r3
 800a71a:	d002      	beq.n	800a722 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	687a      	ldr	r2, [r7, #4]
 800a720:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a722:	bf00      	nop
 800a724:	3714      	adds	r7, #20
 800a726:	46bd      	mov	sp, r7
 800a728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72c:	4770      	bx	lr
 800a72e:	bf00      	nop
 800a730:	20004624 	.word	0x20004624
 800a734:	2000462c 	.word	0x2000462c

0800a738 <malloc>:
 800a738:	4b02      	ldr	r3, [pc, #8]	@ (800a744 <malloc+0xc>)
 800a73a:	4601      	mov	r1, r0
 800a73c:	6818      	ldr	r0, [r3, #0]
 800a73e:	f000 b82d 	b.w	800a79c <_malloc_r>
 800a742:	bf00      	nop
 800a744:	20000198 	.word	0x20000198

0800a748 <free>:
 800a748:	4b02      	ldr	r3, [pc, #8]	@ (800a754 <free+0xc>)
 800a74a:	4601      	mov	r1, r0
 800a74c:	6818      	ldr	r0, [r3, #0]
 800a74e:	f001 b93b 	b.w	800b9c8 <_free_r>
 800a752:	bf00      	nop
 800a754:	20000198 	.word	0x20000198

0800a758 <sbrk_aligned>:
 800a758:	b570      	push	{r4, r5, r6, lr}
 800a75a:	4e0f      	ldr	r6, [pc, #60]	@ (800a798 <sbrk_aligned+0x40>)
 800a75c:	460c      	mov	r4, r1
 800a75e:	6831      	ldr	r1, [r6, #0]
 800a760:	4605      	mov	r5, r0
 800a762:	b911      	cbnz	r1, 800a76a <sbrk_aligned+0x12>
 800a764:	f001 f8ca 	bl	800b8fc <_sbrk_r>
 800a768:	6030      	str	r0, [r6, #0]
 800a76a:	4621      	mov	r1, r4
 800a76c:	4628      	mov	r0, r5
 800a76e:	f001 f8c5 	bl	800b8fc <_sbrk_r>
 800a772:	1c43      	adds	r3, r0, #1
 800a774:	d103      	bne.n	800a77e <sbrk_aligned+0x26>
 800a776:	f04f 34ff 	mov.w	r4, #4294967295
 800a77a:	4620      	mov	r0, r4
 800a77c:	bd70      	pop	{r4, r5, r6, pc}
 800a77e:	1cc4      	adds	r4, r0, #3
 800a780:	f024 0403 	bic.w	r4, r4, #3
 800a784:	42a0      	cmp	r0, r4
 800a786:	d0f8      	beq.n	800a77a <sbrk_aligned+0x22>
 800a788:	1a21      	subs	r1, r4, r0
 800a78a:	4628      	mov	r0, r5
 800a78c:	f001 f8b6 	bl	800b8fc <_sbrk_r>
 800a790:	3001      	adds	r0, #1
 800a792:	d1f2      	bne.n	800a77a <sbrk_aligned+0x22>
 800a794:	e7ef      	b.n	800a776 <sbrk_aligned+0x1e>
 800a796:	bf00      	nop
 800a798:	20004644 	.word	0x20004644

0800a79c <_malloc_r>:
 800a79c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7a0:	1ccd      	adds	r5, r1, #3
 800a7a2:	f025 0503 	bic.w	r5, r5, #3
 800a7a6:	3508      	adds	r5, #8
 800a7a8:	2d0c      	cmp	r5, #12
 800a7aa:	bf38      	it	cc
 800a7ac:	250c      	movcc	r5, #12
 800a7ae:	2d00      	cmp	r5, #0
 800a7b0:	4606      	mov	r6, r0
 800a7b2:	db01      	blt.n	800a7b8 <_malloc_r+0x1c>
 800a7b4:	42a9      	cmp	r1, r5
 800a7b6:	d904      	bls.n	800a7c2 <_malloc_r+0x26>
 800a7b8:	230c      	movs	r3, #12
 800a7ba:	6033      	str	r3, [r6, #0]
 800a7bc:	2000      	movs	r0, #0
 800a7be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a898 <_malloc_r+0xfc>
 800a7c6:	f000 f869 	bl	800a89c <__malloc_lock>
 800a7ca:	f8d8 3000 	ldr.w	r3, [r8]
 800a7ce:	461c      	mov	r4, r3
 800a7d0:	bb44      	cbnz	r4, 800a824 <_malloc_r+0x88>
 800a7d2:	4629      	mov	r1, r5
 800a7d4:	4630      	mov	r0, r6
 800a7d6:	f7ff ffbf 	bl	800a758 <sbrk_aligned>
 800a7da:	1c43      	adds	r3, r0, #1
 800a7dc:	4604      	mov	r4, r0
 800a7de:	d158      	bne.n	800a892 <_malloc_r+0xf6>
 800a7e0:	f8d8 4000 	ldr.w	r4, [r8]
 800a7e4:	4627      	mov	r7, r4
 800a7e6:	2f00      	cmp	r7, #0
 800a7e8:	d143      	bne.n	800a872 <_malloc_r+0xd6>
 800a7ea:	2c00      	cmp	r4, #0
 800a7ec:	d04b      	beq.n	800a886 <_malloc_r+0xea>
 800a7ee:	6823      	ldr	r3, [r4, #0]
 800a7f0:	4639      	mov	r1, r7
 800a7f2:	4630      	mov	r0, r6
 800a7f4:	eb04 0903 	add.w	r9, r4, r3
 800a7f8:	f001 f880 	bl	800b8fc <_sbrk_r>
 800a7fc:	4581      	cmp	r9, r0
 800a7fe:	d142      	bne.n	800a886 <_malloc_r+0xea>
 800a800:	6821      	ldr	r1, [r4, #0]
 800a802:	1a6d      	subs	r5, r5, r1
 800a804:	4629      	mov	r1, r5
 800a806:	4630      	mov	r0, r6
 800a808:	f7ff ffa6 	bl	800a758 <sbrk_aligned>
 800a80c:	3001      	adds	r0, #1
 800a80e:	d03a      	beq.n	800a886 <_malloc_r+0xea>
 800a810:	6823      	ldr	r3, [r4, #0]
 800a812:	442b      	add	r3, r5
 800a814:	6023      	str	r3, [r4, #0]
 800a816:	f8d8 3000 	ldr.w	r3, [r8]
 800a81a:	685a      	ldr	r2, [r3, #4]
 800a81c:	bb62      	cbnz	r2, 800a878 <_malloc_r+0xdc>
 800a81e:	f8c8 7000 	str.w	r7, [r8]
 800a822:	e00f      	b.n	800a844 <_malloc_r+0xa8>
 800a824:	6822      	ldr	r2, [r4, #0]
 800a826:	1b52      	subs	r2, r2, r5
 800a828:	d420      	bmi.n	800a86c <_malloc_r+0xd0>
 800a82a:	2a0b      	cmp	r2, #11
 800a82c:	d917      	bls.n	800a85e <_malloc_r+0xc2>
 800a82e:	1961      	adds	r1, r4, r5
 800a830:	42a3      	cmp	r3, r4
 800a832:	6025      	str	r5, [r4, #0]
 800a834:	bf18      	it	ne
 800a836:	6059      	strne	r1, [r3, #4]
 800a838:	6863      	ldr	r3, [r4, #4]
 800a83a:	bf08      	it	eq
 800a83c:	f8c8 1000 	streq.w	r1, [r8]
 800a840:	5162      	str	r2, [r4, r5]
 800a842:	604b      	str	r3, [r1, #4]
 800a844:	4630      	mov	r0, r6
 800a846:	f000 f82f 	bl	800a8a8 <__malloc_unlock>
 800a84a:	f104 000b 	add.w	r0, r4, #11
 800a84e:	1d23      	adds	r3, r4, #4
 800a850:	f020 0007 	bic.w	r0, r0, #7
 800a854:	1ac2      	subs	r2, r0, r3
 800a856:	bf1c      	itt	ne
 800a858:	1a1b      	subne	r3, r3, r0
 800a85a:	50a3      	strne	r3, [r4, r2]
 800a85c:	e7af      	b.n	800a7be <_malloc_r+0x22>
 800a85e:	6862      	ldr	r2, [r4, #4]
 800a860:	42a3      	cmp	r3, r4
 800a862:	bf0c      	ite	eq
 800a864:	f8c8 2000 	streq.w	r2, [r8]
 800a868:	605a      	strne	r2, [r3, #4]
 800a86a:	e7eb      	b.n	800a844 <_malloc_r+0xa8>
 800a86c:	4623      	mov	r3, r4
 800a86e:	6864      	ldr	r4, [r4, #4]
 800a870:	e7ae      	b.n	800a7d0 <_malloc_r+0x34>
 800a872:	463c      	mov	r4, r7
 800a874:	687f      	ldr	r7, [r7, #4]
 800a876:	e7b6      	b.n	800a7e6 <_malloc_r+0x4a>
 800a878:	461a      	mov	r2, r3
 800a87a:	685b      	ldr	r3, [r3, #4]
 800a87c:	42a3      	cmp	r3, r4
 800a87e:	d1fb      	bne.n	800a878 <_malloc_r+0xdc>
 800a880:	2300      	movs	r3, #0
 800a882:	6053      	str	r3, [r2, #4]
 800a884:	e7de      	b.n	800a844 <_malloc_r+0xa8>
 800a886:	230c      	movs	r3, #12
 800a888:	6033      	str	r3, [r6, #0]
 800a88a:	4630      	mov	r0, r6
 800a88c:	f000 f80c 	bl	800a8a8 <__malloc_unlock>
 800a890:	e794      	b.n	800a7bc <_malloc_r+0x20>
 800a892:	6005      	str	r5, [r0, #0]
 800a894:	e7d6      	b.n	800a844 <_malloc_r+0xa8>
 800a896:	bf00      	nop
 800a898:	20004648 	.word	0x20004648

0800a89c <__malloc_lock>:
 800a89c:	4801      	ldr	r0, [pc, #4]	@ (800a8a4 <__malloc_lock+0x8>)
 800a89e:	f001 b87a 	b.w	800b996 <__retarget_lock_acquire_recursive>
 800a8a2:	bf00      	nop
 800a8a4:	2000478c 	.word	0x2000478c

0800a8a8 <__malloc_unlock>:
 800a8a8:	4801      	ldr	r0, [pc, #4]	@ (800a8b0 <__malloc_unlock+0x8>)
 800a8aa:	f001 b875 	b.w	800b998 <__retarget_lock_release_recursive>
 800a8ae:	bf00      	nop
 800a8b0:	2000478c 	.word	0x2000478c

0800a8b4 <realloc>:
 800a8b4:	4b02      	ldr	r3, [pc, #8]	@ (800a8c0 <realloc+0xc>)
 800a8b6:	460a      	mov	r2, r1
 800a8b8:	4601      	mov	r1, r0
 800a8ba:	6818      	ldr	r0, [r3, #0]
 800a8bc:	f000 b802 	b.w	800a8c4 <_realloc_r>
 800a8c0:	20000198 	.word	0x20000198

0800a8c4 <_realloc_r>:
 800a8c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8c8:	4680      	mov	r8, r0
 800a8ca:	4615      	mov	r5, r2
 800a8cc:	460c      	mov	r4, r1
 800a8ce:	b921      	cbnz	r1, 800a8da <_realloc_r+0x16>
 800a8d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8d4:	4611      	mov	r1, r2
 800a8d6:	f7ff bf61 	b.w	800a79c <_malloc_r>
 800a8da:	b92a      	cbnz	r2, 800a8e8 <_realloc_r+0x24>
 800a8dc:	f001 f874 	bl	800b9c8 <_free_r>
 800a8e0:	2400      	movs	r4, #0
 800a8e2:	4620      	mov	r0, r4
 800a8e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8e8:	f002 f8b6 	bl	800ca58 <_malloc_usable_size_r>
 800a8ec:	4285      	cmp	r5, r0
 800a8ee:	4606      	mov	r6, r0
 800a8f0:	d802      	bhi.n	800a8f8 <_realloc_r+0x34>
 800a8f2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a8f6:	d8f4      	bhi.n	800a8e2 <_realloc_r+0x1e>
 800a8f8:	4629      	mov	r1, r5
 800a8fa:	4640      	mov	r0, r8
 800a8fc:	f7ff ff4e 	bl	800a79c <_malloc_r>
 800a900:	4607      	mov	r7, r0
 800a902:	2800      	cmp	r0, #0
 800a904:	d0ec      	beq.n	800a8e0 <_realloc_r+0x1c>
 800a906:	42b5      	cmp	r5, r6
 800a908:	462a      	mov	r2, r5
 800a90a:	4621      	mov	r1, r4
 800a90c:	bf28      	it	cs
 800a90e:	4632      	movcs	r2, r6
 800a910:	f001 f843 	bl	800b99a <memcpy>
 800a914:	4621      	mov	r1, r4
 800a916:	4640      	mov	r0, r8
 800a918:	f001 f856 	bl	800b9c8 <_free_r>
 800a91c:	463c      	mov	r4, r7
 800a91e:	e7e0      	b.n	800a8e2 <_realloc_r+0x1e>

0800a920 <sulp>:
 800a920:	b570      	push	{r4, r5, r6, lr}
 800a922:	4604      	mov	r4, r0
 800a924:	460d      	mov	r5, r1
 800a926:	ec45 4b10 	vmov	d0, r4, r5
 800a92a:	4616      	mov	r6, r2
 800a92c:	f001 ff56 	bl	800c7dc <__ulp>
 800a930:	ec51 0b10 	vmov	r0, r1, d0
 800a934:	b17e      	cbz	r6, 800a956 <sulp+0x36>
 800a936:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a93a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a93e:	2b00      	cmp	r3, #0
 800a940:	dd09      	ble.n	800a956 <sulp+0x36>
 800a942:	051b      	lsls	r3, r3, #20
 800a944:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a948:	2400      	movs	r4, #0
 800a94a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a94e:	4622      	mov	r2, r4
 800a950:	462b      	mov	r3, r5
 800a952:	f7f5 fe81 	bl	8000658 <__aeabi_dmul>
 800a956:	ec41 0b10 	vmov	d0, r0, r1
 800a95a:	bd70      	pop	{r4, r5, r6, pc}
 800a95c:	0000      	movs	r0, r0
	...

0800a960 <_strtod_l>:
 800a960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a964:	b09f      	sub	sp, #124	@ 0x7c
 800a966:	460c      	mov	r4, r1
 800a968:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a96a:	2200      	movs	r2, #0
 800a96c:	921a      	str	r2, [sp, #104]	@ 0x68
 800a96e:	9005      	str	r0, [sp, #20]
 800a970:	f04f 0a00 	mov.w	sl, #0
 800a974:	f04f 0b00 	mov.w	fp, #0
 800a978:	460a      	mov	r2, r1
 800a97a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a97c:	7811      	ldrb	r1, [r2, #0]
 800a97e:	292b      	cmp	r1, #43	@ 0x2b
 800a980:	d04a      	beq.n	800aa18 <_strtod_l+0xb8>
 800a982:	d838      	bhi.n	800a9f6 <_strtod_l+0x96>
 800a984:	290d      	cmp	r1, #13
 800a986:	d832      	bhi.n	800a9ee <_strtod_l+0x8e>
 800a988:	2908      	cmp	r1, #8
 800a98a:	d832      	bhi.n	800a9f2 <_strtod_l+0x92>
 800a98c:	2900      	cmp	r1, #0
 800a98e:	d03b      	beq.n	800aa08 <_strtod_l+0xa8>
 800a990:	2200      	movs	r2, #0
 800a992:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a994:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a996:	782a      	ldrb	r2, [r5, #0]
 800a998:	2a30      	cmp	r2, #48	@ 0x30
 800a99a:	f040 80b3 	bne.w	800ab04 <_strtod_l+0x1a4>
 800a99e:	786a      	ldrb	r2, [r5, #1]
 800a9a0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a9a4:	2a58      	cmp	r2, #88	@ 0x58
 800a9a6:	d16e      	bne.n	800aa86 <_strtod_l+0x126>
 800a9a8:	9302      	str	r3, [sp, #8]
 800a9aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a9ac:	9301      	str	r3, [sp, #4]
 800a9ae:	ab1a      	add	r3, sp, #104	@ 0x68
 800a9b0:	9300      	str	r3, [sp, #0]
 800a9b2:	4a8e      	ldr	r2, [pc, #568]	@ (800abec <_strtod_l+0x28c>)
 800a9b4:	9805      	ldr	r0, [sp, #20]
 800a9b6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a9b8:	a919      	add	r1, sp, #100	@ 0x64
 800a9ba:	f001 f8b7 	bl	800bb2c <__gethex>
 800a9be:	f010 060f 	ands.w	r6, r0, #15
 800a9c2:	4604      	mov	r4, r0
 800a9c4:	d005      	beq.n	800a9d2 <_strtod_l+0x72>
 800a9c6:	2e06      	cmp	r6, #6
 800a9c8:	d128      	bne.n	800aa1c <_strtod_l+0xbc>
 800a9ca:	3501      	adds	r5, #1
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	9519      	str	r5, [sp, #100]	@ 0x64
 800a9d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a9d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	f040 858e 	bne.w	800b4f6 <_strtod_l+0xb96>
 800a9da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a9dc:	b1cb      	cbz	r3, 800aa12 <_strtod_l+0xb2>
 800a9de:	4652      	mov	r2, sl
 800a9e0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a9e4:	ec43 2b10 	vmov	d0, r2, r3
 800a9e8:	b01f      	add	sp, #124	@ 0x7c
 800a9ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9ee:	2920      	cmp	r1, #32
 800a9f0:	d1ce      	bne.n	800a990 <_strtod_l+0x30>
 800a9f2:	3201      	adds	r2, #1
 800a9f4:	e7c1      	b.n	800a97a <_strtod_l+0x1a>
 800a9f6:	292d      	cmp	r1, #45	@ 0x2d
 800a9f8:	d1ca      	bne.n	800a990 <_strtod_l+0x30>
 800a9fa:	2101      	movs	r1, #1
 800a9fc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a9fe:	1c51      	adds	r1, r2, #1
 800aa00:	9119      	str	r1, [sp, #100]	@ 0x64
 800aa02:	7852      	ldrb	r2, [r2, #1]
 800aa04:	2a00      	cmp	r2, #0
 800aa06:	d1c5      	bne.n	800a994 <_strtod_l+0x34>
 800aa08:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800aa0a:	9419      	str	r4, [sp, #100]	@ 0x64
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	f040 8570 	bne.w	800b4f2 <_strtod_l+0xb92>
 800aa12:	4652      	mov	r2, sl
 800aa14:	465b      	mov	r3, fp
 800aa16:	e7e5      	b.n	800a9e4 <_strtod_l+0x84>
 800aa18:	2100      	movs	r1, #0
 800aa1a:	e7ef      	b.n	800a9fc <_strtod_l+0x9c>
 800aa1c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800aa1e:	b13a      	cbz	r2, 800aa30 <_strtod_l+0xd0>
 800aa20:	2135      	movs	r1, #53	@ 0x35
 800aa22:	a81c      	add	r0, sp, #112	@ 0x70
 800aa24:	f001 ffd4 	bl	800c9d0 <__copybits>
 800aa28:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aa2a:	9805      	ldr	r0, [sp, #20]
 800aa2c:	f001 fba2 	bl	800c174 <_Bfree>
 800aa30:	3e01      	subs	r6, #1
 800aa32:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800aa34:	2e04      	cmp	r6, #4
 800aa36:	d806      	bhi.n	800aa46 <_strtod_l+0xe6>
 800aa38:	e8df f006 	tbb	[pc, r6]
 800aa3c:	201d0314 	.word	0x201d0314
 800aa40:	14          	.byte	0x14
 800aa41:	00          	.byte	0x00
 800aa42:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800aa46:	05e1      	lsls	r1, r4, #23
 800aa48:	bf48      	it	mi
 800aa4a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800aa4e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800aa52:	0d1b      	lsrs	r3, r3, #20
 800aa54:	051b      	lsls	r3, r3, #20
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d1bb      	bne.n	800a9d2 <_strtod_l+0x72>
 800aa5a:	f000 ff71 	bl	800b940 <__errno>
 800aa5e:	2322      	movs	r3, #34	@ 0x22
 800aa60:	6003      	str	r3, [r0, #0]
 800aa62:	e7b6      	b.n	800a9d2 <_strtod_l+0x72>
 800aa64:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800aa68:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800aa6c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800aa70:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800aa74:	e7e7      	b.n	800aa46 <_strtod_l+0xe6>
 800aa76:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800abf4 <_strtod_l+0x294>
 800aa7a:	e7e4      	b.n	800aa46 <_strtod_l+0xe6>
 800aa7c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800aa80:	f04f 3aff 	mov.w	sl, #4294967295
 800aa84:	e7df      	b.n	800aa46 <_strtod_l+0xe6>
 800aa86:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aa88:	1c5a      	adds	r2, r3, #1
 800aa8a:	9219      	str	r2, [sp, #100]	@ 0x64
 800aa8c:	785b      	ldrb	r3, [r3, #1]
 800aa8e:	2b30      	cmp	r3, #48	@ 0x30
 800aa90:	d0f9      	beq.n	800aa86 <_strtod_l+0x126>
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d09d      	beq.n	800a9d2 <_strtod_l+0x72>
 800aa96:	2301      	movs	r3, #1
 800aa98:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa9a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aa9c:	930c      	str	r3, [sp, #48]	@ 0x30
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	9308      	str	r3, [sp, #32]
 800aaa2:	930a      	str	r3, [sp, #40]	@ 0x28
 800aaa4:	461f      	mov	r7, r3
 800aaa6:	220a      	movs	r2, #10
 800aaa8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800aaaa:	7805      	ldrb	r5, [r0, #0]
 800aaac:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800aab0:	b2d9      	uxtb	r1, r3
 800aab2:	2909      	cmp	r1, #9
 800aab4:	d928      	bls.n	800ab08 <_strtod_l+0x1a8>
 800aab6:	494e      	ldr	r1, [pc, #312]	@ (800abf0 <_strtod_l+0x290>)
 800aab8:	2201      	movs	r2, #1
 800aaba:	f000 fe82 	bl	800b7c2 <strncmp>
 800aabe:	2800      	cmp	r0, #0
 800aac0:	d032      	beq.n	800ab28 <_strtod_l+0x1c8>
 800aac2:	2000      	movs	r0, #0
 800aac4:	462a      	mov	r2, r5
 800aac6:	4681      	mov	r9, r0
 800aac8:	463d      	mov	r5, r7
 800aaca:	4603      	mov	r3, r0
 800aacc:	2a65      	cmp	r2, #101	@ 0x65
 800aace:	d001      	beq.n	800aad4 <_strtod_l+0x174>
 800aad0:	2a45      	cmp	r2, #69	@ 0x45
 800aad2:	d114      	bne.n	800aafe <_strtod_l+0x19e>
 800aad4:	b91d      	cbnz	r5, 800aade <_strtod_l+0x17e>
 800aad6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aad8:	4302      	orrs	r2, r0
 800aada:	d095      	beq.n	800aa08 <_strtod_l+0xa8>
 800aadc:	2500      	movs	r5, #0
 800aade:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800aae0:	1c62      	adds	r2, r4, #1
 800aae2:	9219      	str	r2, [sp, #100]	@ 0x64
 800aae4:	7862      	ldrb	r2, [r4, #1]
 800aae6:	2a2b      	cmp	r2, #43	@ 0x2b
 800aae8:	d077      	beq.n	800abda <_strtod_l+0x27a>
 800aaea:	2a2d      	cmp	r2, #45	@ 0x2d
 800aaec:	d07b      	beq.n	800abe6 <_strtod_l+0x286>
 800aaee:	f04f 0c00 	mov.w	ip, #0
 800aaf2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800aaf6:	2909      	cmp	r1, #9
 800aaf8:	f240 8082 	bls.w	800ac00 <_strtod_l+0x2a0>
 800aafc:	9419      	str	r4, [sp, #100]	@ 0x64
 800aafe:	f04f 0800 	mov.w	r8, #0
 800ab02:	e0a2      	b.n	800ac4a <_strtod_l+0x2ea>
 800ab04:	2300      	movs	r3, #0
 800ab06:	e7c7      	b.n	800aa98 <_strtod_l+0x138>
 800ab08:	2f08      	cmp	r7, #8
 800ab0a:	bfd5      	itete	le
 800ab0c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800ab0e:	9908      	ldrgt	r1, [sp, #32]
 800ab10:	fb02 3301 	mlale	r3, r2, r1, r3
 800ab14:	fb02 3301 	mlagt	r3, r2, r1, r3
 800ab18:	f100 0001 	add.w	r0, r0, #1
 800ab1c:	bfd4      	ite	le
 800ab1e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800ab20:	9308      	strgt	r3, [sp, #32]
 800ab22:	3701      	adds	r7, #1
 800ab24:	9019      	str	r0, [sp, #100]	@ 0x64
 800ab26:	e7bf      	b.n	800aaa8 <_strtod_l+0x148>
 800ab28:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab2a:	1c5a      	adds	r2, r3, #1
 800ab2c:	9219      	str	r2, [sp, #100]	@ 0x64
 800ab2e:	785a      	ldrb	r2, [r3, #1]
 800ab30:	b37f      	cbz	r7, 800ab92 <_strtod_l+0x232>
 800ab32:	4681      	mov	r9, r0
 800ab34:	463d      	mov	r5, r7
 800ab36:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ab3a:	2b09      	cmp	r3, #9
 800ab3c:	d912      	bls.n	800ab64 <_strtod_l+0x204>
 800ab3e:	2301      	movs	r3, #1
 800ab40:	e7c4      	b.n	800aacc <_strtod_l+0x16c>
 800ab42:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab44:	1c5a      	adds	r2, r3, #1
 800ab46:	9219      	str	r2, [sp, #100]	@ 0x64
 800ab48:	785a      	ldrb	r2, [r3, #1]
 800ab4a:	3001      	adds	r0, #1
 800ab4c:	2a30      	cmp	r2, #48	@ 0x30
 800ab4e:	d0f8      	beq.n	800ab42 <_strtod_l+0x1e2>
 800ab50:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ab54:	2b08      	cmp	r3, #8
 800ab56:	f200 84d3 	bhi.w	800b500 <_strtod_l+0xba0>
 800ab5a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab5c:	930c      	str	r3, [sp, #48]	@ 0x30
 800ab5e:	4681      	mov	r9, r0
 800ab60:	2000      	movs	r0, #0
 800ab62:	4605      	mov	r5, r0
 800ab64:	3a30      	subs	r2, #48	@ 0x30
 800ab66:	f100 0301 	add.w	r3, r0, #1
 800ab6a:	d02a      	beq.n	800abc2 <_strtod_l+0x262>
 800ab6c:	4499      	add	r9, r3
 800ab6e:	eb00 0c05 	add.w	ip, r0, r5
 800ab72:	462b      	mov	r3, r5
 800ab74:	210a      	movs	r1, #10
 800ab76:	4563      	cmp	r3, ip
 800ab78:	d10d      	bne.n	800ab96 <_strtod_l+0x236>
 800ab7a:	1c69      	adds	r1, r5, #1
 800ab7c:	4401      	add	r1, r0
 800ab7e:	4428      	add	r0, r5
 800ab80:	2808      	cmp	r0, #8
 800ab82:	dc16      	bgt.n	800abb2 <_strtod_l+0x252>
 800ab84:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ab86:	230a      	movs	r3, #10
 800ab88:	fb03 2300 	mla	r3, r3, r0, r2
 800ab8c:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab8e:	2300      	movs	r3, #0
 800ab90:	e018      	b.n	800abc4 <_strtod_l+0x264>
 800ab92:	4638      	mov	r0, r7
 800ab94:	e7da      	b.n	800ab4c <_strtod_l+0x1ec>
 800ab96:	2b08      	cmp	r3, #8
 800ab98:	f103 0301 	add.w	r3, r3, #1
 800ab9c:	dc03      	bgt.n	800aba6 <_strtod_l+0x246>
 800ab9e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800aba0:	434e      	muls	r6, r1
 800aba2:	960a      	str	r6, [sp, #40]	@ 0x28
 800aba4:	e7e7      	b.n	800ab76 <_strtod_l+0x216>
 800aba6:	2b10      	cmp	r3, #16
 800aba8:	bfde      	ittt	le
 800abaa:	9e08      	ldrle	r6, [sp, #32]
 800abac:	434e      	mulle	r6, r1
 800abae:	9608      	strle	r6, [sp, #32]
 800abb0:	e7e1      	b.n	800ab76 <_strtod_l+0x216>
 800abb2:	280f      	cmp	r0, #15
 800abb4:	dceb      	bgt.n	800ab8e <_strtod_l+0x22e>
 800abb6:	9808      	ldr	r0, [sp, #32]
 800abb8:	230a      	movs	r3, #10
 800abba:	fb03 2300 	mla	r3, r3, r0, r2
 800abbe:	9308      	str	r3, [sp, #32]
 800abc0:	e7e5      	b.n	800ab8e <_strtod_l+0x22e>
 800abc2:	4629      	mov	r1, r5
 800abc4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800abc6:	1c50      	adds	r0, r2, #1
 800abc8:	9019      	str	r0, [sp, #100]	@ 0x64
 800abca:	7852      	ldrb	r2, [r2, #1]
 800abcc:	4618      	mov	r0, r3
 800abce:	460d      	mov	r5, r1
 800abd0:	e7b1      	b.n	800ab36 <_strtod_l+0x1d6>
 800abd2:	f04f 0900 	mov.w	r9, #0
 800abd6:	2301      	movs	r3, #1
 800abd8:	e77d      	b.n	800aad6 <_strtod_l+0x176>
 800abda:	f04f 0c00 	mov.w	ip, #0
 800abde:	1ca2      	adds	r2, r4, #2
 800abe0:	9219      	str	r2, [sp, #100]	@ 0x64
 800abe2:	78a2      	ldrb	r2, [r4, #2]
 800abe4:	e785      	b.n	800aaf2 <_strtod_l+0x192>
 800abe6:	f04f 0c01 	mov.w	ip, #1
 800abea:	e7f8      	b.n	800abde <_strtod_l+0x27e>
 800abec:	0800da5c 	.word	0x0800da5c
 800abf0:	0800da38 	.word	0x0800da38
 800abf4:	7ff00000 	.word	0x7ff00000
 800abf8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800abfa:	1c51      	adds	r1, r2, #1
 800abfc:	9119      	str	r1, [sp, #100]	@ 0x64
 800abfe:	7852      	ldrb	r2, [r2, #1]
 800ac00:	2a30      	cmp	r2, #48	@ 0x30
 800ac02:	d0f9      	beq.n	800abf8 <_strtod_l+0x298>
 800ac04:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ac08:	2908      	cmp	r1, #8
 800ac0a:	f63f af78 	bhi.w	800aafe <_strtod_l+0x19e>
 800ac0e:	3a30      	subs	r2, #48	@ 0x30
 800ac10:	920e      	str	r2, [sp, #56]	@ 0x38
 800ac12:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ac14:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ac16:	f04f 080a 	mov.w	r8, #10
 800ac1a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ac1c:	1c56      	adds	r6, r2, #1
 800ac1e:	9619      	str	r6, [sp, #100]	@ 0x64
 800ac20:	7852      	ldrb	r2, [r2, #1]
 800ac22:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ac26:	f1be 0f09 	cmp.w	lr, #9
 800ac2a:	d939      	bls.n	800aca0 <_strtod_l+0x340>
 800ac2c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ac2e:	1a76      	subs	r6, r6, r1
 800ac30:	2e08      	cmp	r6, #8
 800ac32:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ac36:	dc03      	bgt.n	800ac40 <_strtod_l+0x2e0>
 800ac38:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ac3a:	4588      	cmp	r8, r1
 800ac3c:	bfa8      	it	ge
 800ac3e:	4688      	movge	r8, r1
 800ac40:	f1bc 0f00 	cmp.w	ip, #0
 800ac44:	d001      	beq.n	800ac4a <_strtod_l+0x2ea>
 800ac46:	f1c8 0800 	rsb	r8, r8, #0
 800ac4a:	2d00      	cmp	r5, #0
 800ac4c:	d14e      	bne.n	800acec <_strtod_l+0x38c>
 800ac4e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ac50:	4308      	orrs	r0, r1
 800ac52:	f47f aebe 	bne.w	800a9d2 <_strtod_l+0x72>
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	f47f aed6 	bne.w	800aa08 <_strtod_l+0xa8>
 800ac5c:	2a69      	cmp	r2, #105	@ 0x69
 800ac5e:	d028      	beq.n	800acb2 <_strtod_l+0x352>
 800ac60:	dc25      	bgt.n	800acae <_strtod_l+0x34e>
 800ac62:	2a49      	cmp	r2, #73	@ 0x49
 800ac64:	d025      	beq.n	800acb2 <_strtod_l+0x352>
 800ac66:	2a4e      	cmp	r2, #78	@ 0x4e
 800ac68:	f47f aece 	bne.w	800aa08 <_strtod_l+0xa8>
 800ac6c:	499b      	ldr	r1, [pc, #620]	@ (800aedc <_strtod_l+0x57c>)
 800ac6e:	a819      	add	r0, sp, #100	@ 0x64
 800ac70:	f001 f97e 	bl	800bf70 <__match>
 800ac74:	2800      	cmp	r0, #0
 800ac76:	f43f aec7 	beq.w	800aa08 <_strtod_l+0xa8>
 800ac7a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac7c:	781b      	ldrb	r3, [r3, #0]
 800ac7e:	2b28      	cmp	r3, #40	@ 0x28
 800ac80:	d12e      	bne.n	800ace0 <_strtod_l+0x380>
 800ac82:	4997      	ldr	r1, [pc, #604]	@ (800aee0 <_strtod_l+0x580>)
 800ac84:	aa1c      	add	r2, sp, #112	@ 0x70
 800ac86:	a819      	add	r0, sp, #100	@ 0x64
 800ac88:	f001 f986 	bl	800bf98 <__hexnan>
 800ac8c:	2805      	cmp	r0, #5
 800ac8e:	d127      	bne.n	800ace0 <_strtod_l+0x380>
 800ac90:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ac92:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ac96:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ac9a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ac9e:	e698      	b.n	800a9d2 <_strtod_l+0x72>
 800aca0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800aca2:	fb08 2101 	mla	r1, r8, r1, r2
 800aca6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800acaa:	920e      	str	r2, [sp, #56]	@ 0x38
 800acac:	e7b5      	b.n	800ac1a <_strtod_l+0x2ba>
 800acae:	2a6e      	cmp	r2, #110	@ 0x6e
 800acb0:	e7da      	b.n	800ac68 <_strtod_l+0x308>
 800acb2:	498c      	ldr	r1, [pc, #560]	@ (800aee4 <_strtod_l+0x584>)
 800acb4:	a819      	add	r0, sp, #100	@ 0x64
 800acb6:	f001 f95b 	bl	800bf70 <__match>
 800acba:	2800      	cmp	r0, #0
 800acbc:	f43f aea4 	beq.w	800aa08 <_strtod_l+0xa8>
 800acc0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800acc2:	4989      	ldr	r1, [pc, #548]	@ (800aee8 <_strtod_l+0x588>)
 800acc4:	3b01      	subs	r3, #1
 800acc6:	a819      	add	r0, sp, #100	@ 0x64
 800acc8:	9319      	str	r3, [sp, #100]	@ 0x64
 800acca:	f001 f951 	bl	800bf70 <__match>
 800acce:	b910      	cbnz	r0, 800acd6 <_strtod_l+0x376>
 800acd0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800acd2:	3301      	adds	r3, #1
 800acd4:	9319      	str	r3, [sp, #100]	@ 0x64
 800acd6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800aef8 <_strtod_l+0x598>
 800acda:	f04f 0a00 	mov.w	sl, #0
 800acde:	e678      	b.n	800a9d2 <_strtod_l+0x72>
 800ace0:	4882      	ldr	r0, [pc, #520]	@ (800aeec <_strtod_l+0x58c>)
 800ace2:	f000 fe69 	bl	800b9b8 <nan>
 800ace6:	ec5b ab10 	vmov	sl, fp, d0
 800acea:	e672      	b.n	800a9d2 <_strtod_l+0x72>
 800acec:	eba8 0309 	sub.w	r3, r8, r9
 800acf0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800acf2:	9309      	str	r3, [sp, #36]	@ 0x24
 800acf4:	2f00      	cmp	r7, #0
 800acf6:	bf08      	it	eq
 800acf8:	462f      	moveq	r7, r5
 800acfa:	2d10      	cmp	r5, #16
 800acfc:	462c      	mov	r4, r5
 800acfe:	bfa8      	it	ge
 800ad00:	2410      	movge	r4, #16
 800ad02:	f7f5 fc2f 	bl	8000564 <__aeabi_ui2d>
 800ad06:	2d09      	cmp	r5, #9
 800ad08:	4682      	mov	sl, r0
 800ad0a:	468b      	mov	fp, r1
 800ad0c:	dc13      	bgt.n	800ad36 <_strtod_l+0x3d6>
 800ad0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	f43f ae5e 	beq.w	800a9d2 <_strtod_l+0x72>
 800ad16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad18:	dd78      	ble.n	800ae0c <_strtod_l+0x4ac>
 800ad1a:	2b16      	cmp	r3, #22
 800ad1c:	dc5f      	bgt.n	800adde <_strtod_l+0x47e>
 800ad1e:	4974      	ldr	r1, [pc, #464]	@ (800aef0 <_strtod_l+0x590>)
 800ad20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ad24:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad28:	4652      	mov	r2, sl
 800ad2a:	465b      	mov	r3, fp
 800ad2c:	f7f5 fc94 	bl	8000658 <__aeabi_dmul>
 800ad30:	4682      	mov	sl, r0
 800ad32:	468b      	mov	fp, r1
 800ad34:	e64d      	b.n	800a9d2 <_strtod_l+0x72>
 800ad36:	4b6e      	ldr	r3, [pc, #440]	@ (800aef0 <_strtod_l+0x590>)
 800ad38:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ad3c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ad40:	f7f5 fc8a 	bl	8000658 <__aeabi_dmul>
 800ad44:	4682      	mov	sl, r0
 800ad46:	9808      	ldr	r0, [sp, #32]
 800ad48:	468b      	mov	fp, r1
 800ad4a:	f7f5 fc0b 	bl	8000564 <__aeabi_ui2d>
 800ad4e:	4602      	mov	r2, r0
 800ad50:	460b      	mov	r3, r1
 800ad52:	4650      	mov	r0, sl
 800ad54:	4659      	mov	r1, fp
 800ad56:	f7f5 fac9 	bl	80002ec <__adddf3>
 800ad5a:	2d0f      	cmp	r5, #15
 800ad5c:	4682      	mov	sl, r0
 800ad5e:	468b      	mov	fp, r1
 800ad60:	ddd5      	ble.n	800ad0e <_strtod_l+0x3ae>
 800ad62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad64:	1b2c      	subs	r4, r5, r4
 800ad66:	441c      	add	r4, r3
 800ad68:	2c00      	cmp	r4, #0
 800ad6a:	f340 8096 	ble.w	800ae9a <_strtod_l+0x53a>
 800ad6e:	f014 030f 	ands.w	r3, r4, #15
 800ad72:	d00a      	beq.n	800ad8a <_strtod_l+0x42a>
 800ad74:	495e      	ldr	r1, [pc, #376]	@ (800aef0 <_strtod_l+0x590>)
 800ad76:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ad7a:	4652      	mov	r2, sl
 800ad7c:	465b      	mov	r3, fp
 800ad7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad82:	f7f5 fc69 	bl	8000658 <__aeabi_dmul>
 800ad86:	4682      	mov	sl, r0
 800ad88:	468b      	mov	fp, r1
 800ad8a:	f034 040f 	bics.w	r4, r4, #15
 800ad8e:	d073      	beq.n	800ae78 <_strtod_l+0x518>
 800ad90:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ad94:	dd48      	ble.n	800ae28 <_strtod_l+0x4c8>
 800ad96:	2400      	movs	r4, #0
 800ad98:	46a0      	mov	r8, r4
 800ad9a:	940a      	str	r4, [sp, #40]	@ 0x28
 800ad9c:	46a1      	mov	r9, r4
 800ad9e:	9a05      	ldr	r2, [sp, #20]
 800ada0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800aef8 <_strtod_l+0x598>
 800ada4:	2322      	movs	r3, #34	@ 0x22
 800ada6:	6013      	str	r3, [r2, #0]
 800ada8:	f04f 0a00 	mov.w	sl, #0
 800adac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800adae:	2b00      	cmp	r3, #0
 800adb0:	f43f ae0f 	beq.w	800a9d2 <_strtod_l+0x72>
 800adb4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800adb6:	9805      	ldr	r0, [sp, #20]
 800adb8:	f001 f9dc 	bl	800c174 <_Bfree>
 800adbc:	9805      	ldr	r0, [sp, #20]
 800adbe:	4649      	mov	r1, r9
 800adc0:	f001 f9d8 	bl	800c174 <_Bfree>
 800adc4:	9805      	ldr	r0, [sp, #20]
 800adc6:	4641      	mov	r1, r8
 800adc8:	f001 f9d4 	bl	800c174 <_Bfree>
 800adcc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800adce:	9805      	ldr	r0, [sp, #20]
 800add0:	f001 f9d0 	bl	800c174 <_Bfree>
 800add4:	9805      	ldr	r0, [sp, #20]
 800add6:	4621      	mov	r1, r4
 800add8:	f001 f9cc 	bl	800c174 <_Bfree>
 800addc:	e5f9      	b.n	800a9d2 <_strtod_l+0x72>
 800adde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ade0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ade4:	4293      	cmp	r3, r2
 800ade6:	dbbc      	blt.n	800ad62 <_strtod_l+0x402>
 800ade8:	4c41      	ldr	r4, [pc, #260]	@ (800aef0 <_strtod_l+0x590>)
 800adea:	f1c5 050f 	rsb	r5, r5, #15
 800adee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800adf2:	4652      	mov	r2, sl
 800adf4:	465b      	mov	r3, fp
 800adf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adfa:	f7f5 fc2d 	bl	8000658 <__aeabi_dmul>
 800adfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae00:	1b5d      	subs	r5, r3, r5
 800ae02:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ae06:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ae0a:	e78f      	b.n	800ad2c <_strtod_l+0x3cc>
 800ae0c:	3316      	adds	r3, #22
 800ae0e:	dba8      	blt.n	800ad62 <_strtod_l+0x402>
 800ae10:	4b37      	ldr	r3, [pc, #220]	@ (800aef0 <_strtod_l+0x590>)
 800ae12:	eba9 0808 	sub.w	r8, r9, r8
 800ae16:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800ae1a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ae1e:	4650      	mov	r0, sl
 800ae20:	4659      	mov	r1, fp
 800ae22:	f7f5 fd43 	bl	80008ac <__aeabi_ddiv>
 800ae26:	e783      	b.n	800ad30 <_strtod_l+0x3d0>
 800ae28:	4b32      	ldr	r3, [pc, #200]	@ (800aef4 <_strtod_l+0x594>)
 800ae2a:	9308      	str	r3, [sp, #32]
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	1124      	asrs	r4, r4, #4
 800ae30:	4650      	mov	r0, sl
 800ae32:	4659      	mov	r1, fp
 800ae34:	461e      	mov	r6, r3
 800ae36:	2c01      	cmp	r4, #1
 800ae38:	dc21      	bgt.n	800ae7e <_strtod_l+0x51e>
 800ae3a:	b10b      	cbz	r3, 800ae40 <_strtod_l+0x4e0>
 800ae3c:	4682      	mov	sl, r0
 800ae3e:	468b      	mov	fp, r1
 800ae40:	492c      	ldr	r1, [pc, #176]	@ (800aef4 <_strtod_l+0x594>)
 800ae42:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ae46:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ae4a:	4652      	mov	r2, sl
 800ae4c:	465b      	mov	r3, fp
 800ae4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae52:	f7f5 fc01 	bl	8000658 <__aeabi_dmul>
 800ae56:	4b28      	ldr	r3, [pc, #160]	@ (800aef8 <_strtod_l+0x598>)
 800ae58:	460a      	mov	r2, r1
 800ae5a:	400b      	ands	r3, r1
 800ae5c:	4927      	ldr	r1, [pc, #156]	@ (800aefc <_strtod_l+0x59c>)
 800ae5e:	428b      	cmp	r3, r1
 800ae60:	4682      	mov	sl, r0
 800ae62:	d898      	bhi.n	800ad96 <_strtod_l+0x436>
 800ae64:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800ae68:	428b      	cmp	r3, r1
 800ae6a:	bf86      	itte	hi
 800ae6c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800af00 <_strtod_l+0x5a0>
 800ae70:	f04f 3aff 	movhi.w	sl, #4294967295
 800ae74:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ae78:	2300      	movs	r3, #0
 800ae7a:	9308      	str	r3, [sp, #32]
 800ae7c:	e07a      	b.n	800af74 <_strtod_l+0x614>
 800ae7e:	07e2      	lsls	r2, r4, #31
 800ae80:	d505      	bpl.n	800ae8e <_strtod_l+0x52e>
 800ae82:	9b08      	ldr	r3, [sp, #32]
 800ae84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae88:	f7f5 fbe6 	bl	8000658 <__aeabi_dmul>
 800ae8c:	2301      	movs	r3, #1
 800ae8e:	9a08      	ldr	r2, [sp, #32]
 800ae90:	3208      	adds	r2, #8
 800ae92:	3601      	adds	r6, #1
 800ae94:	1064      	asrs	r4, r4, #1
 800ae96:	9208      	str	r2, [sp, #32]
 800ae98:	e7cd      	b.n	800ae36 <_strtod_l+0x4d6>
 800ae9a:	d0ed      	beq.n	800ae78 <_strtod_l+0x518>
 800ae9c:	4264      	negs	r4, r4
 800ae9e:	f014 020f 	ands.w	r2, r4, #15
 800aea2:	d00a      	beq.n	800aeba <_strtod_l+0x55a>
 800aea4:	4b12      	ldr	r3, [pc, #72]	@ (800aef0 <_strtod_l+0x590>)
 800aea6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aeaa:	4650      	mov	r0, sl
 800aeac:	4659      	mov	r1, fp
 800aeae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeb2:	f7f5 fcfb 	bl	80008ac <__aeabi_ddiv>
 800aeb6:	4682      	mov	sl, r0
 800aeb8:	468b      	mov	fp, r1
 800aeba:	1124      	asrs	r4, r4, #4
 800aebc:	d0dc      	beq.n	800ae78 <_strtod_l+0x518>
 800aebe:	2c1f      	cmp	r4, #31
 800aec0:	dd20      	ble.n	800af04 <_strtod_l+0x5a4>
 800aec2:	2400      	movs	r4, #0
 800aec4:	46a0      	mov	r8, r4
 800aec6:	940a      	str	r4, [sp, #40]	@ 0x28
 800aec8:	46a1      	mov	r9, r4
 800aeca:	9a05      	ldr	r2, [sp, #20]
 800aecc:	2322      	movs	r3, #34	@ 0x22
 800aece:	f04f 0a00 	mov.w	sl, #0
 800aed2:	f04f 0b00 	mov.w	fp, #0
 800aed6:	6013      	str	r3, [r2, #0]
 800aed8:	e768      	b.n	800adac <_strtod_l+0x44c>
 800aeda:	bf00      	nop
 800aedc:	0800da43 	.word	0x0800da43
 800aee0:	0800da48 	.word	0x0800da48
 800aee4:	0800da3a 	.word	0x0800da3a
 800aee8:	0800da3d 	.word	0x0800da3d
 800aeec:	0800ddee 	.word	0x0800ddee
 800aef0:	0800dcb8 	.word	0x0800dcb8
 800aef4:	0800dc90 	.word	0x0800dc90
 800aef8:	7ff00000 	.word	0x7ff00000
 800aefc:	7ca00000 	.word	0x7ca00000
 800af00:	7fefffff 	.word	0x7fefffff
 800af04:	f014 0310 	ands.w	r3, r4, #16
 800af08:	bf18      	it	ne
 800af0a:	236a      	movne	r3, #106	@ 0x6a
 800af0c:	4ea9      	ldr	r6, [pc, #676]	@ (800b1b4 <_strtod_l+0x854>)
 800af0e:	9308      	str	r3, [sp, #32]
 800af10:	4650      	mov	r0, sl
 800af12:	4659      	mov	r1, fp
 800af14:	2300      	movs	r3, #0
 800af16:	07e2      	lsls	r2, r4, #31
 800af18:	d504      	bpl.n	800af24 <_strtod_l+0x5c4>
 800af1a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800af1e:	f7f5 fb9b 	bl	8000658 <__aeabi_dmul>
 800af22:	2301      	movs	r3, #1
 800af24:	1064      	asrs	r4, r4, #1
 800af26:	f106 0608 	add.w	r6, r6, #8
 800af2a:	d1f4      	bne.n	800af16 <_strtod_l+0x5b6>
 800af2c:	b10b      	cbz	r3, 800af32 <_strtod_l+0x5d2>
 800af2e:	4682      	mov	sl, r0
 800af30:	468b      	mov	fp, r1
 800af32:	9b08      	ldr	r3, [sp, #32]
 800af34:	b1b3      	cbz	r3, 800af64 <_strtod_l+0x604>
 800af36:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800af3a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800af3e:	2b00      	cmp	r3, #0
 800af40:	4659      	mov	r1, fp
 800af42:	dd0f      	ble.n	800af64 <_strtod_l+0x604>
 800af44:	2b1f      	cmp	r3, #31
 800af46:	dd55      	ble.n	800aff4 <_strtod_l+0x694>
 800af48:	2b34      	cmp	r3, #52	@ 0x34
 800af4a:	bfde      	ittt	le
 800af4c:	f04f 33ff 	movle.w	r3, #4294967295
 800af50:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800af54:	4093      	lslle	r3, r2
 800af56:	f04f 0a00 	mov.w	sl, #0
 800af5a:	bfcc      	ite	gt
 800af5c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800af60:	ea03 0b01 	andle.w	fp, r3, r1
 800af64:	2200      	movs	r2, #0
 800af66:	2300      	movs	r3, #0
 800af68:	4650      	mov	r0, sl
 800af6a:	4659      	mov	r1, fp
 800af6c:	f7f5 fddc 	bl	8000b28 <__aeabi_dcmpeq>
 800af70:	2800      	cmp	r0, #0
 800af72:	d1a6      	bne.n	800aec2 <_strtod_l+0x562>
 800af74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af76:	9300      	str	r3, [sp, #0]
 800af78:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800af7a:	9805      	ldr	r0, [sp, #20]
 800af7c:	462b      	mov	r3, r5
 800af7e:	463a      	mov	r2, r7
 800af80:	f001 f960 	bl	800c244 <__s2b>
 800af84:	900a      	str	r0, [sp, #40]	@ 0x28
 800af86:	2800      	cmp	r0, #0
 800af88:	f43f af05 	beq.w	800ad96 <_strtod_l+0x436>
 800af8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af8e:	2a00      	cmp	r2, #0
 800af90:	eba9 0308 	sub.w	r3, r9, r8
 800af94:	bfa8      	it	ge
 800af96:	2300      	movge	r3, #0
 800af98:	9312      	str	r3, [sp, #72]	@ 0x48
 800af9a:	2400      	movs	r4, #0
 800af9c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800afa0:	9316      	str	r3, [sp, #88]	@ 0x58
 800afa2:	46a0      	mov	r8, r4
 800afa4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800afa6:	9805      	ldr	r0, [sp, #20]
 800afa8:	6859      	ldr	r1, [r3, #4]
 800afaa:	f001 f8a3 	bl	800c0f4 <_Balloc>
 800afae:	4681      	mov	r9, r0
 800afb0:	2800      	cmp	r0, #0
 800afb2:	f43f aef4 	beq.w	800ad9e <_strtod_l+0x43e>
 800afb6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800afb8:	691a      	ldr	r2, [r3, #16]
 800afba:	3202      	adds	r2, #2
 800afbc:	f103 010c 	add.w	r1, r3, #12
 800afc0:	0092      	lsls	r2, r2, #2
 800afc2:	300c      	adds	r0, #12
 800afc4:	f000 fce9 	bl	800b99a <memcpy>
 800afc8:	ec4b ab10 	vmov	d0, sl, fp
 800afcc:	9805      	ldr	r0, [sp, #20]
 800afce:	aa1c      	add	r2, sp, #112	@ 0x70
 800afd0:	a91b      	add	r1, sp, #108	@ 0x6c
 800afd2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800afd6:	f001 fc71 	bl	800c8bc <__d2b>
 800afda:	901a      	str	r0, [sp, #104]	@ 0x68
 800afdc:	2800      	cmp	r0, #0
 800afde:	f43f aede 	beq.w	800ad9e <_strtod_l+0x43e>
 800afe2:	9805      	ldr	r0, [sp, #20]
 800afe4:	2101      	movs	r1, #1
 800afe6:	f001 f9c3 	bl	800c370 <__i2b>
 800afea:	4680      	mov	r8, r0
 800afec:	b948      	cbnz	r0, 800b002 <_strtod_l+0x6a2>
 800afee:	f04f 0800 	mov.w	r8, #0
 800aff2:	e6d4      	b.n	800ad9e <_strtod_l+0x43e>
 800aff4:	f04f 32ff 	mov.w	r2, #4294967295
 800aff8:	fa02 f303 	lsl.w	r3, r2, r3
 800affc:	ea03 0a0a 	and.w	sl, r3, sl
 800b000:	e7b0      	b.n	800af64 <_strtod_l+0x604>
 800b002:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b004:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b006:	2d00      	cmp	r5, #0
 800b008:	bfab      	itete	ge
 800b00a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b00c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b00e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b010:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b012:	bfac      	ite	ge
 800b014:	18ef      	addge	r7, r5, r3
 800b016:	1b5e      	sublt	r6, r3, r5
 800b018:	9b08      	ldr	r3, [sp, #32]
 800b01a:	1aed      	subs	r5, r5, r3
 800b01c:	4415      	add	r5, r2
 800b01e:	4b66      	ldr	r3, [pc, #408]	@ (800b1b8 <_strtod_l+0x858>)
 800b020:	3d01      	subs	r5, #1
 800b022:	429d      	cmp	r5, r3
 800b024:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b028:	da50      	bge.n	800b0cc <_strtod_l+0x76c>
 800b02a:	1b5b      	subs	r3, r3, r5
 800b02c:	2b1f      	cmp	r3, #31
 800b02e:	eba2 0203 	sub.w	r2, r2, r3
 800b032:	f04f 0101 	mov.w	r1, #1
 800b036:	dc3d      	bgt.n	800b0b4 <_strtod_l+0x754>
 800b038:	fa01 f303 	lsl.w	r3, r1, r3
 800b03c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b03e:	2300      	movs	r3, #0
 800b040:	9310      	str	r3, [sp, #64]	@ 0x40
 800b042:	18bd      	adds	r5, r7, r2
 800b044:	9b08      	ldr	r3, [sp, #32]
 800b046:	42af      	cmp	r7, r5
 800b048:	4416      	add	r6, r2
 800b04a:	441e      	add	r6, r3
 800b04c:	463b      	mov	r3, r7
 800b04e:	bfa8      	it	ge
 800b050:	462b      	movge	r3, r5
 800b052:	42b3      	cmp	r3, r6
 800b054:	bfa8      	it	ge
 800b056:	4633      	movge	r3, r6
 800b058:	2b00      	cmp	r3, #0
 800b05a:	bfc2      	ittt	gt
 800b05c:	1aed      	subgt	r5, r5, r3
 800b05e:	1af6      	subgt	r6, r6, r3
 800b060:	1aff      	subgt	r7, r7, r3
 800b062:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b064:	2b00      	cmp	r3, #0
 800b066:	dd16      	ble.n	800b096 <_strtod_l+0x736>
 800b068:	4641      	mov	r1, r8
 800b06a:	9805      	ldr	r0, [sp, #20]
 800b06c:	461a      	mov	r2, r3
 800b06e:	f001 fa3f 	bl	800c4f0 <__pow5mult>
 800b072:	4680      	mov	r8, r0
 800b074:	2800      	cmp	r0, #0
 800b076:	d0ba      	beq.n	800afee <_strtod_l+0x68e>
 800b078:	4601      	mov	r1, r0
 800b07a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b07c:	9805      	ldr	r0, [sp, #20]
 800b07e:	f001 f98d 	bl	800c39c <__multiply>
 800b082:	900e      	str	r0, [sp, #56]	@ 0x38
 800b084:	2800      	cmp	r0, #0
 800b086:	f43f ae8a 	beq.w	800ad9e <_strtod_l+0x43e>
 800b08a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b08c:	9805      	ldr	r0, [sp, #20]
 800b08e:	f001 f871 	bl	800c174 <_Bfree>
 800b092:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b094:	931a      	str	r3, [sp, #104]	@ 0x68
 800b096:	2d00      	cmp	r5, #0
 800b098:	dc1d      	bgt.n	800b0d6 <_strtod_l+0x776>
 800b09a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	dd23      	ble.n	800b0e8 <_strtod_l+0x788>
 800b0a0:	4649      	mov	r1, r9
 800b0a2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b0a4:	9805      	ldr	r0, [sp, #20]
 800b0a6:	f001 fa23 	bl	800c4f0 <__pow5mult>
 800b0aa:	4681      	mov	r9, r0
 800b0ac:	b9e0      	cbnz	r0, 800b0e8 <_strtod_l+0x788>
 800b0ae:	f04f 0900 	mov.w	r9, #0
 800b0b2:	e674      	b.n	800ad9e <_strtod_l+0x43e>
 800b0b4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b0b8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b0bc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b0c0:	35e2      	adds	r5, #226	@ 0xe2
 800b0c2:	fa01 f305 	lsl.w	r3, r1, r5
 800b0c6:	9310      	str	r3, [sp, #64]	@ 0x40
 800b0c8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b0ca:	e7ba      	b.n	800b042 <_strtod_l+0x6e2>
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	9310      	str	r3, [sp, #64]	@ 0x40
 800b0d0:	2301      	movs	r3, #1
 800b0d2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b0d4:	e7b5      	b.n	800b042 <_strtod_l+0x6e2>
 800b0d6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b0d8:	9805      	ldr	r0, [sp, #20]
 800b0da:	462a      	mov	r2, r5
 800b0dc:	f001 fa62 	bl	800c5a4 <__lshift>
 800b0e0:	901a      	str	r0, [sp, #104]	@ 0x68
 800b0e2:	2800      	cmp	r0, #0
 800b0e4:	d1d9      	bne.n	800b09a <_strtod_l+0x73a>
 800b0e6:	e65a      	b.n	800ad9e <_strtod_l+0x43e>
 800b0e8:	2e00      	cmp	r6, #0
 800b0ea:	dd07      	ble.n	800b0fc <_strtod_l+0x79c>
 800b0ec:	4649      	mov	r1, r9
 800b0ee:	9805      	ldr	r0, [sp, #20]
 800b0f0:	4632      	mov	r2, r6
 800b0f2:	f001 fa57 	bl	800c5a4 <__lshift>
 800b0f6:	4681      	mov	r9, r0
 800b0f8:	2800      	cmp	r0, #0
 800b0fa:	d0d8      	beq.n	800b0ae <_strtod_l+0x74e>
 800b0fc:	2f00      	cmp	r7, #0
 800b0fe:	dd08      	ble.n	800b112 <_strtod_l+0x7b2>
 800b100:	4641      	mov	r1, r8
 800b102:	9805      	ldr	r0, [sp, #20]
 800b104:	463a      	mov	r2, r7
 800b106:	f001 fa4d 	bl	800c5a4 <__lshift>
 800b10a:	4680      	mov	r8, r0
 800b10c:	2800      	cmp	r0, #0
 800b10e:	f43f ae46 	beq.w	800ad9e <_strtod_l+0x43e>
 800b112:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b114:	9805      	ldr	r0, [sp, #20]
 800b116:	464a      	mov	r2, r9
 800b118:	f001 facc 	bl	800c6b4 <__mdiff>
 800b11c:	4604      	mov	r4, r0
 800b11e:	2800      	cmp	r0, #0
 800b120:	f43f ae3d 	beq.w	800ad9e <_strtod_l+0x43e>
 800b124:	68c3      	ldr	r3, [r0, #12]
 800b126:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b128:	2300      	movs	r3, #0
 800b12a:	60c3      	str	r3, [r0, #12]
 800b12c:	4641      	mov	r1, r8
 800b12e:	f001 faa5 	bl	800c67c <__mcmp>
 800b132:	2800      	cmp	r0, #0
 800b134:	da46      	bge.n	800b1c4 <_strtod_l+0x864>
 800b136:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b138:	ea53 030a 	orrs.w	r3, r3, sl
 800b13c:	d16c      	bne.n	800b218 <_strtod_l+0x8b8>
 800b13e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b142:	2b00      	cmp	r3, #0
 800b144:	d168      	bne.n	800b218 <_strtod_l+0x8b8>
 800b146:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b14a:	0d1b      	lsrs	r3, r3, #20
 800b14c:	051b      	lsls	r3, r3, #20
 800b14e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b152:	d961      	bls.n	800b218 <_strtod_l+0x8b8>
 800b154:	6963      	ldr	r3, [r4, #20]
 800b156:	b913      	cbnz	r3, 800b15e <_strtod_l+0x7fe>
 800b158:	6923      	ldr	r3, [r4, #16]
 800b15a:	2b01      	cmp	r3, #1
 800b15c:	dd5c      	ble.n	800b218 <_strtod_l+0x8b8>
 800b15e:	4621      	mov	r1, r4
 800b160:	2201      	movs	r2, #1
 800b162:	9805      	ldr	r0, [sp, #20]
 800b164:	f001 fa1e 	bl	800c5a4 <__lshift>
 800b168:	4641      	mov	r1, r8
 800b16a:	4604      	mov	r4, r0
 800b16c:	f001 fa86 	bl	800c67c <__mcmp>
 800b170:	2800      	cmp	r0, #0
 800b172:	dd51      	ble.n	800b218 <_strtod_l+0x8b8>
 800b174:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b178:	9a08      	ldr	r2, [sp, #32]
 800b17a:	0d1b      	lsrs	r3, r3, #20
 800b17c:	051b      	lsls	r3, r3, #20
 800b17e:	2a00      	cmp	r2, #0
 800b180:	d06b      	beq.n	800b25a <_strtod_l+0x8fa>
 800b182:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b186:	d868      	bhi.n	800b25a <_strtod_l+0x8fa>
 800b188:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b18c:	f67f ae9d 	bls.w	800aeca <_strtod_l+0x56a>
 800b190:	4b0a      	ldr	r3, [pc, #40]	@ (800b1bc <_strtod_l+0x85c>)
 800b192:	4650      	mov	r0, sl
 800b194:	4659      	mov	r1, fp
 800b196:	2200      	movs	r2, #0
 800b198:	f7f5 fa5e 	bl	8000658 <__aeabi_dmul>
 800b19c:	4b08      	ldr	r3, [pc, #32]	@ (800b1c0 <_strtod_l+0x860>)
 800b19e:	400b      	ands	r3, r1
 800b1a0:	4682      	mov	sl, r0
 800b1a2:	468b      	mov	fp, r1
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	f47f ae05 	bne.w	800adb4 <_strtod_l+0x454>
 800b1aa:	9a05      	ldr	r2, [sp, #20]
 800b1ac:	2322      	movs	r3, #34	@ 0x22
 800b1ae:	6013      	str	r3, [r2, #0]
 800b1b0:	e600      	b.n	800adb4 <_strtod_l+0x454>
 800b1b2:	bf00      	nop
 800b1b4:	0800da70 	.word	0x0800da70
 800b1b8:	fffffc02 	.word	0xfffffc02
 800b1bc:	39500000 	.word	0x39500000
 800b1c0:	7ff00000 	.word	0x7ff00000
 800b1c4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b1c8:	d165      	bne.n	800b296 <_strtod_l+0x936>
 800b1ca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b1cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b1d0:	b35a      	cbz	r2, 800b22a <_strtod_l+0x8ca>
 800b1d2:	4a9f      	ldr	r2, [pc, #636]	@ (800b450 <_strtod_l+0xaf0>)
 800b1d4:	4293      	cmp	r3, r2
 800b1d6:	d12b      	bne.n	800b230 <_strtod_l+0x8d0>
 800b1d8:	9b08      	ldr	r3, [sp, #32]
 800b1da:	4651      	mov	r1, sl
 800b1dc:	b303      	cbz	r3, 800b220 <_strtod_l+0x8c0>
 800b1de:	4b9d      	ldr	r3, [pc, #628]	@ (800b454 <_strtod_l+0xaf4>)
 800b1e0:	465a      	mov	r2, fp
 800b1e2:	4013      	ands	r3, r2
 800b1e4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b1e8:	f04f 32ff 	mov.w	r2, #4294967295
 800b1ec:	d81b      	bhi.n	800b226 <_strtod_l+0x8c6>
 800b1ee:	0d1b      	lsrs	r3, r3, #20
 800b1f0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b1f4:	fa02 f303 	lsl.w	r3, r2, r3
 800b1f8:	4299      	cmp	r1, r3
 800b1fa:	d119      	bne.n	800b230 <_strtod_l+0x8d0>
 800b1fc:	4b96      	ldr	r3, [pc, #600]	@ (800b458 <_strtod_l+0xaf8>)
 800b1fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b200:	429a      	cmp	r2, r3
 800b202:	d102      	bne.n	800b20a <_strtod_l+0x8aa>
 800b204:	3101      	adds	r1, #1
 800b206:	f43f adca 	beq.w	800ad9e <_strtod_l+0x43e>
 800b20a:	4b92      	ldr	r3, [pc, #584]	@ (800b454 <_strtod_l+0xaf4>)
 800b20c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b20e:	401a      	ands	r2, r3
 800b210:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b214:	f04f 0a00 	mov.w	sl, #0
 800b218:	9b08      	ldr	r3, [sp, #32]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d1b8      	bne.n	800b190 <_strtod_l+0x830>
 800b21e:	e5c9      	b.n	800adb4 <_strtod_l+0x454>
 800b220:	f04f 33ff 	mov.w	r3, #4294967295
 800b224:	e7e8      	b.n	800b1f8 <_strtod_l+0x898>
 800b226:	4613      	mov	r3, r2
 800b228:	e7e6      	b.n	800b1f8 <_strtod_l+0x898>
 800b22a:	ea53 030a 	orrs.w	r3, r3, sl
 800b22e:	d0a1      	beq.n	800b174 <_strtod_l+0x814>
 800b230:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b232:	b1db      	cbz	r3, 800b26c <_strtod_l+0x90c>
 800b234:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b236:	4213      	tst	r3, r2
 800b238:	d0ee      	beq.n	800b218 <_strtod_l+0x8b8>
 800b23a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b23c:	9a08      	ldr	r2, [sp, #32]
 800b23e:	4650      	mov	r0, sl
 800b240:	4659      	mov	r1, fp
 800b242:	b1bb      	cbz	r3, 800b274 <_strtod_l+0x914>
 800b244:	f7ff fb6c 	bl	800a920 <sulp>
 800b248:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b24c:	ec53 2b10 	vmov	r2, r3, d0
 800b250:	f7f5 f84c 	bl	80002ec <__adddf3>
 800b254:	4682      	mov	sl, r0
 800b256:	468b      	mov	fp, r1
 800b258:	e7de      	b.n	800b218 <_strtod_l+0x8b8>
 800b25a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b25e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b262:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b266:	f04f 3aff 	mov.w	sl, #4294967295
 800b26a:	e7d5      	b.n	800b218 <_strtod_l+0x8b8>
 800b26c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b26e:	ea13 0f0a 	tst.w	r3, sl
 800b272:	e7e1      	b.n	800b238 <_strtod_l+0x8d8>
 800b274:	f7ff fb54 	bl	800a920 <sulp>
 800b278:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b27c:	ec53 2b10 	vmov	r2, r3, d0
 800b280:	f7f5 f832 	bl	80002e8 <__aeabi_dsub>
 800b284:	2200      	movs	r2, #0
 800b286:	2300      	movs	r3, #0
 800b288:	4682      	mov	sl, r0
 800b28a:	468b      	mov	fp, r1
 800b28c:	f7f5 fc4c 	bl	8000b28 <__aeabi_dcmpeq>
 800b290:	2800      	cmp	r0, #0
 800b292:	d0c1      	beq.n	800b218 <_strtod_l+0x8b8>
 800b294:	e619      	b.n	800aeca <_strtod_l+0x56a>
 800b296:	4641      	mov	r1, r8
 800b298:	4620      	mov	r0, r4
 800b29a:	f001 fb67 	bl	800c96c <__ratio>
 800b29e:	ec57 6b10 	vmov	r6, r7, d0
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b2a8:	4630      	mov	r0, r6
 800b2aa:	4639      	mov	r1, r7
 800b2ac:	f7f5 fc50 	bl	8000b50 <__aeabi_dcmple>
 800b2b0:	2800      	cmp	r0, #0
 800b2b2:	d06f      	beq.n	800b394 <_strtod_l+0xa34>
 800b2b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d17a      	bne.n	800b3b0 <_strtod_l+0xa50>
 800b2ba:	f1ba 0f00 	cmp.w	sl, #0
 800b2be:	d158      	bne.n	800b372 <_strtod_l+0xa12>
 800b2c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b2c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d15a      	bne.n	800b380 <_strtod_l+0xa20>
 800b2ca:	4b64      	ldr	r3, [pc, #400]	@ (800b45c <_strtod_l+0xafc>)
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	4630      	mov	r0, r6
 800b2d0:	4639      	mov	r1, r7
 800b2d2:	f7f5 fc33 	bl	8000b3c <__aeabi_dcmplt>
 800b2d6:	2800      	cmp	r0, #0
 800b2d8:	d159      	bne.n	800b38e <_strtod_l+0xa2e>
 800b2da:	4630      	mov	r0, r6
 800b2dc:	4639      	mov	r1, r7
 800b2de:	4b60      	ldr	r3, [pc, #384]	@ (800b460 <_strtod_l+0xb00>)
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	f7f5 f9b9 	bl	8000658 <__aeabi_dmul>
 800b2e6:	4606      	mov	r6, r0
 800b2e8:	460f      	mov	r7, r1
 800b2ea:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b2ee:	9606      	str	r6, [sp, #24]
 800b2f0:	9307      	str	r3, [sp, #28]
 800b2f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b2f6:	4d57      	ldr	r5, [pc, #348]	@ (800b454 <_strtod_l+0xaf4>)
 800b2f8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b2fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b2fe:	401d      	ands	r5, r3
 800b300:	4b58      	ldr	r3, [pc, #352]	@ (800b464 <_strtod_l+0xb04>)
 800b302:	429d      	cmp	r5, r3
 800b304:	f040 80b2 	bne.w	800b46c <_strtod_l+0xb0c>
 800b308:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b30a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b30e:	ec4b ab10 	vmov	d0, sl, fp
 800b312:	f001 fa63 	bl	800c7dc <__ulp>
 800b316:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b31a:	ec51 0b10 	vmov	r0, r1, d0
 800b31e:	f7f5 f99b 	bl	8000658 <__aeabi_dmul>
 800b322:	4652      	mov	r2, sl
 800b324:	465b      	mov	r3, fp
 800b326:	f7f4 ffe1 	bl	80002ec <__adddf3>
 800b32a:	460b      	mov	r3, r1
 800b32c:	4949      	ldr	r1, [pc, #292]	@ (800b454 <_strtod_l+0xaf4>)
 800b32e:	4a4e      	ldr	r2, [pc, #312]	@ (800b468 <_strtod_l+0xb08>)
 800b330:	4019      	ands	r1, r3
 800b332:	4291      	cmp	r1, r2
 800b334:	4682      	mov	sl, r0
 800b336:	d942      	bls.n	800b3be <_strtod_l+0xa5e>
 800b338:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b33a:	4b47      	ldr	r3, [pc, #284]	@ (800b458 <_strtod_l+0xaf8>)
 800b33c:	429a      	cmp	r2, r3
 800b33e:	d103      	bne.n	800b348 <_strtod_l+0x9e8>
 800b340:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b342:	3301      	adds	r3, #1
 800b344:	f43f ad2b 	beq.w	800ad9e <_strtod_l+0x43e>
 800b348:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b458 <_strtod_l+0xaf8>
 800b34c:	f04f 3aff 	mov.w	sl, #4294967295
 800b350:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b352:	9805      	ldr	r0, [sp, #20]
 800b354:	f000 ff0e 	bl	800c174 <_Bfree>
 800b358:	9805      	ldr	r0, [sp, #20]
 800b35a:	4649      	mov	r1, r9
 800b35c:	f000 ff0a 	bl	800c174 <_Bfree>
 800b360:	9805      	ldr	r0, [sp, #20]
 800b362:	4641      	mov	r1, r8
 800b364:	f000 ff06 	bl	800c174 <_Bfree>
 800b368:	9805      	ldr	r0, [sp, #20]
 800b36a:	4621      	mov	r1, r4
 800b36c:	f000 ff02 	bl	800c174 <_Bfree>
 800b370:	e618      	b.n	800afa4 <_strtod_l+0x644>
 800b372:	f1ba 0f01 	cmp.w	sl, #1
 800b376:	d103      	bne.n	800b380 <_strtod_l+0xa20>
 800b378:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	f43f ada5 	beq.w	800aeca <_strtod_l+0x56a>
 800b380:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b430 <_strtod_l+0xad0>
 800b384:	4f35      	ldr	r7, [pc, #212]	@ (800b45c <_strtod_l+0xafc>)
 800b386:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b38a:	2600      	movs	r6, #0
 800b38c:	e7b1      	b.n	800b2f2 <_strtod_l+0x992>
 800b38e:	4f34      	ldr	r7, [pc, #208]	@ (800b460 <_strtod_l+0xb00>)
 800b390:	2600      	movs	r6, #0
 800b392:	e7aa      	b.n	800b2ea <_strtod_l+0x98a>
 800b394:	4b32      	ldr	r3, [pc, #200]	@ (800b460 <_strtod_l+0xb00>)
 800b396:	4630      	mov	r0, r6
 800b398:	4639      	mov	r1, r7
 800b39a:	2200      	movs	r2, #0
 800b39c:	f7f5 f95c 	bl	8000658 <__aeabi_dmul>
 800b3a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3a2:	4606      	mov	r6, r0
 800b3a4:	460f      	mov	r7, r1
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d09f      	beq.n	800b2ea <_strtod_l+0x98a>
 800b3aa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b3ae:	e7a0      	b.n	800b2f2 <_strtod_l+0x992>
 800b3b0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b438 <_strtod_l+0xad8>
 800b3b4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b3b8:	ec57 6b17 	vmov	r6, r7, d7
 800b3bc:	e799      	b.n	800b2f2 <_strtod_l+0x992>
 800b3be:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b3c2:	9b08      	ldr	r3, [sp, #32]
 800b3c4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d1c1      	bne.n	800b350 <_strtod_l+0x9f0>
 800b3cc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b3d0:	0d1b      	lsrs	r3, r3, #20
 800b3d2:	051b      	lsls	r3, r3, #20
 800b3d4:	429d      	cmp	r5, r3
 800b3d6:	d1bb      	bne.n	800b350 <_strtod_l+0x9f0>
 800b3d8:	4630      	mov	r0, r6
 800b3da:	4639      	mov	r1, r7
 800b3dc:	f7f5 fc86 	bl	8000cec <__aeabi_d2lz>
 800b3e0:	f7f5 f90c 	bl	80005fc <__aeabi_l2d>
 800b3e4:	4602      	mov	r2, r0
 800b3e6:	460b      	mov	r3, r1
 800b3e8:	4630      	mov	r0, r6
 800b3ea:	4639      	mov	r1, r7
 800b3ec:	f7f4 ff7c 	bl	80002e8 <__aeabi_dsub>
 800b3f0:	460b      	mov	r3, r1
 800b3f2:	4602      	mov	r2, r0
 800b3f4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b3f8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b3fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3fe:	ea46 060a 	orr.w	r6, r6, sl
 800b402:	431e      	orrs	r6, r3
 800b404:	d06f      	beq.n	800b4e6 <_strtod_l+0xb86>
 800b406:	a30e      	add	r3, pc, #56	@ (adr r3, 800b440 <_strtod_l+0xae0>)
 800b408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b40c:	f7f5 fb96 	bl	8000b3c <__aeabi_dcmplt>
 800b410:	2800      	cmp	r0, #0
 800b412:	f47f accf 	bne.w	800adb4 <_strtod_l+0x454>
 800b416:	a30c      	add	r3, pc, #48	@ (adr r3, 800b448 <_strtod_l+0xae8>)
 800b418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b41c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b420:	f7f5 fbaa 	bl	8000b78 <__aeabi_dcmpgt>
 800b424:	2800      	cmp	r0, #0
 800b426:	d093      	beq.n	800b350 <_strtod_l+0x9f0>
 800b428:	e4c4      	b.n	800adb4 <_strtod_l+0x454>
 800b42a:	bf00      	nop
 800b42c:	f3af 8000 	nop.w
 800b430:	00000000 	.word	0x00000000
 800b434:	bff00000 	.word	0xbff00000
 800b438:	00000000 	.word	0x00000000
 800b43c:	3ff00000 	.word	0x3ff00000
 800b440:	94a03595 	.word	0x94a03595
 800b444:	3fdfffff 	.word	0x3fdfffff
 800b448:	35afe535 	.word	0x35afe535
 800b44c:	3fe00000 	.word	0x3fe00000
 800b450:	000fffff 	.word	0x000fffff
 800b454:	7ff00000 	.word	0x7ff00000
 800b458:	7fefffff 	.word	0x7fefffff
 800b45c:	3ff00000 	.word	0x3ff00000
 800b460:	3fe00000 	.word	0x3fe00000
 800b464:	7fe00000 	.word	0x7fe00000
 800b468:	7c9fffff 	.word	0x7c9fffff
 800b46c:	9b08      	ldr	r3, [sp, #32]
 800b46e:	b323      	cbz	r3, 800b4ba <_strtod_l+0xb5a>
 800b470:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b474:	d821      	bhi.n	800b4ba <_strtod_l+0xb5a>
 800b476:	a328      	add	r3, pc, #160	@ (adr r3, 800b518 <_strtod_l+0xbb8>)
 800b478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b47c:	4630      	mov	r0, r6
 800b47e:	4639      	mov	r1, r7
 800b480:	f7f5 fb66 	bl	8000b50 <__aeabi_dcmple>
 800b484:	b1a0      	cbz	r0, 800b4b0 <_strtod_l+0xb50>
 800b486:	4639      	mov	r1, r7
 800b488:	4630      	mov	r0, r6
 800b48a:	f7f5 fba7 	bl	8000bdc <__aeabi_d2uiz>
 800b48e:	2801      	cmp	r0, #1
 800b490:	bf38      	it	cc
 800b492:	2001      	movcc	r0, #1
 800b494:	f7f5 f866 	bl	8000564 <__aeabi_ui2d>
 800b498:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b49a:	4606      	mov	r6, r0
 800b49c:	460f      	mov	r7, r1
 800b49e:	b9fb      	cbnz	r3, 800b4e0 <_strtod_l+0xb80>
 800b4a0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b4a4:	9014      	str	r0, [sp, #80]	@ 0x50
 800b4a6:	9315      	str	r3, [sp, #84]	@ 0x54
 800b4a8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b4ac:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b4b0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b4b2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b4b6:	1b5b      	subs	r3, r3, r5
 800b4b8:	9311      	str	r3, [sp, #68]	@ 0x44
 800b4ba:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b4be:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b4c2:	f001 f98b 	bl	800c7dc <__ulp>
 800b4c6:	4650      	mov	r0, sl
 800b4c8:	ec53 2b10 	vmov	r2, r3, d0
 800b4cc:	4659      	mov	r1, fp
 800b4ce:	f7f5 f8c3 	bl	8000658 <__aeabi_dmul>
 800b4d2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b4d6:	f7f4 ff09 	bl	80002ec <__adddf3>
 800b4da:	4682      	mov	sl, r0
 800b4dc:	468b      	mov	fp, r1
 800b4de:	e770      	b.n	800b3c2 <_strtod_l+0xa62>
 800b4e0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b4e4:	e7e0      	b.n	800b4a8 <_strtod_l+0xb48>
 800b4e6:	a30e      	add	r3, pc, #56	@ (adr r3, 800b520 <_strtod_l+0xbc0>)
 800b4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ec:	f7f5 fb26 	bl	8000b3c <__aeabi_dcmplt>
 800b4f0:	e798      	b.n	800b424 <_strtod_l+0xac4>
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b4f6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b4f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b4fa:	6013      	str	r3, [r2, #0]
 800b4fc:	f7ff ba6d 	b.w	800a9da <_strtod_l+0x7a>
 800b500:	2a65      	cmp	r2, #101	@ 0x65
 800b502:	f43f ab66 	beq.w	800abd2 <_strtod_l+0x272>
 800b506:	2a45      	cmp	r2, #69	@ 0x45
 800b508:	f43f ab63 	beq.w	800abd2 <_strtod_l+0x272>
 800b50c:	2301      	movs	r3, #1
 800b50e:	f7ff bb9e 	b.w	800ac4e <_strtod_l+0x2ee>
 800b512:	bf00      	nop
 800b514:	f3af 8000 	nop.w
 800b518:	ffc00000 	.word	0xffc00000
 800b51c:	41dfffff 	.word	0x41dfffff
 800b520:	94a03595 	.word	0x94a03595
 800b524:	3fcfffff 	.word	0x3fcfffff

0800b528 <strtod>:
 800b528:	460a      	mov	r2, r1
 800b52a:	4601      	mov	r1, r0
 800b52c:	4802      	ldr	r0, [pc, #8]	@ (800b538 <strtod+0x10>)
 800b52e:	4b03      	ldr	r3, [pc, #12]	@ (800b53c <strtod+0x14>)
 800b530:	6800      	ldr	r0, [r0, #0]
 800b532:	f7ff ba15 	b.w	800a960 <_strtod_l>
 800b536:	bf00      	nop
 800b538:	20000198 	.word	0x20000198
 800b53c:	2000002c 	.word	0x2000002c

0800b540 <std>:
 800b540:	2300      	movs	r3, #0
 800b542:	b510      	push	{r4, lr}
 800b544:	4604      	mov	r4, r0
 800b546:	e9c0 3300 	strd	r3, r3, [r0]
 800b54a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b54e:	6083      	str	r3, [r0, #8]
 800b550:	8181      	strh	r1, [r0, #12]
 800b552:	6643      	str	r3, [r0, #100]	@ 0x64
 800b554:	81c2      	strh	r2, [r0, #14]
 800b556:	6183      	str	r3, [r0, #24]
 800b558:	4619      	mov	r1, r3
 800b55a:	2208      	movs	r2, #8
 800b55c:	305c      	adds	r0, #92	@ 0x5c
 800b55e:	f000 f928 	bl	800b7b2 <memset>
 800b562:	4b0d      	ldr	r3, [pc, #52]	@ (800b598 <std+0x58>)
 800b564:	6263      	str	r3, [r4, #36]	@ 0x24
 800b566:	4b0d      	ldr	r3, [pc, #52]	@ (800b59c <std+0x5c>)
 800b568:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b56a:	4b0d      	ldr	r3, [pc, #52]	@ (800b5a0 <std+0x60>)
 800b56c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b56e:	4b0d      	ldr	r3, [pc, #52]	@ (800b5a4 <std+0x64>)
 800b570:	6323      	str	r3, [r4, #48]	@ 0x30
 800b572:	4b0d      	ldr	r3, [pc, #52]	@ (800b5a8 <std+0x68>)
 800b574:	6224      	str	r4, [r4, #32]
 800b576:	429c      	cmp	r4, r3
 800b578:	d006      	beq.n	800b588 <std+0x48>
 800b57a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b57e:	4294      	cmp	r4, r2
 800b580:	d002      	beq.n	800b588 <std+0x48>
 800b582:	33d0      	adds	r3, #208	@ 0xd0
 800b584:	429c      	cmp	r4, r3
 800b586:	d105      	bne.n	800b594 <std+0x54>
 800b588:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b58c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b590:	f000 ba00 	b.w	800b994 <__retarget_lock_init_recursive>
 800b594:	bd10      	pop	{r4, pc}
 800b596:	bf00      	nop
 800b598:	0800b72d 	.word	0x0800b72d
 800b59c:	0800b74f 	.word	0x0800b74f
 800b5a0:	0800b787 	.word	0x0800b787
 800b5a4:	0800b7ab 	.word	0x0800b7ab
 800b5a8:	2000464c 	.word	0x2000464c

0800b5ac <stdio_exit_handler>:
 800b5ac:	4a02      	ldr	r2, [pc, #8]	@ (800b5b8 <stdio_exit_handler+0xc>)
 800b5ae:	4903      	ldr	r1, [pc, #12]	@ (800b5bc <stdio_exit_handler+0x10>)
 800b5b0:	4803      	ldr	r0, [pc, #12]	@ (800b5c0 <stdio_exit_handler+0x14>)
 800b5b2:	f000 b869 	b.w	800b688 <_fwalk_sglue>
 800b5b6:	bf00      	nop
 800b5b8:	20000020 	.word	0x20000020
 800b5bc:	0800d155 	.word	0x0800d155
 800b5c0:	2000019c 	.word	0x2000019c

0800b5c4 <cleanup_stdio>:
 800b5c4:	6841      	ldr	r1, [r0, #4]
 800b5c6:	4b0c      	ldr	r3, [pc, #48]	@ (800b5f8 <cleanup_stdio+0x34>)
 800b5c8:	4299      	cmp	r1, r3
 800b5ca:	b510      	push	{r4, lr}
 800b5cc:	4604      	mov	r4, r0
 800b5ce:	d001      	beq.n	800b5d4 <cleanup_stdio+0x10>
 800b5d0:	f001 fdc0 	bl	800d154 <_fflush_r>
 800b5d4:	68a1      	ldr	r1, [r4, #8]
 800b5d6:	4b09      	ldr	r3, [pc, #36]	@ (800b5fc <cleanup_stdio+0x38>)
 800b5d8:	4299      	cmp	r1, r3
 800b5da:	d002      	beq.n	800b5e2 <cleanup_stdio+0x1e>
 800b5dc:	4620      	mov	r0, r4
 800b5de:	f001 fdb9 	bl	800d154 <_fflush_r>
 800b5e2:	68e1      	ldr	r1, [r4, #12]
 800b5e4:	4b06      	ldr	r3, [pc, #24]	@ (800b600 <cleanup_stdio+0x3c>)
 800b5e6:	4299      	cmp	r1, r3
 800b5e8:	d004      	beq.n	800b5f4 <cleanup_stdio+0x30>
 800b5ea:	4620      	mov	r0, r4
 800b5ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5f0:	f001 bdb0 	b.w	800d154 <_fflush_r>
 800b5f4:	bd10      	pop	{r4, pc}
 800b5f6:	bf00      	nop
 800b5f8:	2000464c 	.word	0x2000464c
 800b5fc:	200046b4 	.word	0x200046b4
 800b600:	2000471c 	.word	0x2000471c

0800b604 <global_stdio_init.part.0>:
 800b604:	b510      	push	{r4, lr}
 800b606:	4b0b      	ldr	r3, [pc, #44]	@ (800b634 <global_stdio_init.part.0+0x30>)
 800b608:	4c0b      	ldr	r4, [pc, #44]	@ (800b638 <global_stdio_init.part.0+0x34>)
 800b60a:	4a0c      	ldr	r2, [pc, #48]	@ (800b63c <global_stdio_init.part.0+0x38>)
 800b60c:	601a      	str	r2, [r3, #0]
 800b60e:	4620      	mov	r0, r4
 800b610:	2200      	movs	r2, #0
 800b612:	2104      	movs	r1, #4
 800b614:	f7ff ff94 	bl	800b540 <std>
 800b618:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b61c:	2201      	movs	r2, #1
 800b61e:	2109      	movs	r1, #9
 800b620:	f7ff ff8e 	bl	800b540 <std>
 800b624:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b628:	2202      	movs	r2, #2
 800b62a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b62e:	2112      	movs	r1, #18
 800b630:	f7ff bf86 	b.w	800b540 <std>
 800b634:	20004784 	.word	0x20004784
 800b638:	2000464c 	.word	0x2000464c
 800b63c:	0800b5ad 	.word	0x0800b5ad

0800b640 <__sfp_lock_acquire>:
 800b640:	4801      	ldr	r0, [pc, #4]	@ (800b648 <__sfp_lock_acquire+0x8>)
 800b642:	f000 b9a8 	b.w	800b996 <__retarget_lock_acquire_recursive>
 800b646:	bf00      	nop
 800b648:	2000478d 	.word	0x2000478d

0800b64c <__sfp_lock_release>:
 800b64c:	4801      	ldr	r0, [pc, #4]	@ (800b654 <__sfp_lock_release+0x8>)
 800b64e:	f000 b9a3 	b.w	800b998 <__retarget_lock_release_recursive>
 800b652:	bf00      	nop
 800b654:	2000478d 	.word	0x2000478d

0800b658 <__sinit>:
 800b658:	b510      	push	{r4, lr}
 800b65a:	4604      	mov	r4, r0
 800b65c:	f7ff fff0 	bl	800b640 <__sfp_lock_acquire>
 800b660:	6a23      	ldr	r3, [r4, #32]
 800b662:	b11b      	cbz	r3, 800b66c <__sinit+0x14>
 800b664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b668:	f7ff bff0 	b.w	800b64c <__sfp_lock_release>
 800b66c:	4b04      	ldr	r3, [pc, #16]	@ (800b680 <__sinit+0x28>)
 800b66e:	6223      	str	r3, [r4, #32]
 800b670:	4b04      	ldr	r3, [pc, #16]	@ (800b684 <__sinit+0x2c>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d1f5      	bne.n	800b664 <__sinit+0xc>
 800b678:	f7ff ffc4 	bl	800b604 <global_stdio_init.part.0>
 800b67c:	e7f2      	b.n	800b664 <__sinit+0xc>
 800b67e:	bf00      	nop
 800b680:	0800b5c5 	.word	0x0800b5c5
 800b684:	20004784 	.word	0x20004784

0800b688 <_fwalk_sglue>:
 800b688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b68c:	4607      	mov	r7, r0
 800b68e:	4688      	mov	r8, r1
 800b690:	4614      	mov	r4, r2
 800b692:	2600      	movs	r6, #0
 800b694:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b698:	f1b9 0901 	subs.w	r9, r9, #1
 800b69c:	d505      	bpl.n	800b6aa <_fwalk_sglue+0x22>
 800b69e:	6824      	ldr	r4, [r4, #0]
 800b6a0:	2c00      	cmp	r4, #0
 800b6a2:	d1f7      	bne.n	800b694 <_fwalk_sglue+0xc>
 800b6a4:	4630      	mov	r0, r6
 800b6a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6aa:	89ab      	ldrh	r3, [r5, #12]
 800b6ac:	2b01      	cmp	r3, #1
 800b6ae:	d907      	bls.n	800b6c0 <_fwalk_sglue+0x38>
 800b6b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b6b4:	3301      	adds	r3, #1
 800b6b6:	d003      	beq.n	800b6c0 <_fwalk_sglue+0x38>
 800b6b8:	4629      	mov	r1, r5
 800b6ba:	4638      	mov	r0, r7
 800b6bc:	47c0      	blx	r8
 800b6be:	4306      	orrs	r6, r0
 800b6c0:	3568      	adds	r5, #104	@ 0x68
 800b6c2:	e7e9      	b.n	800b698 <_fwalk_sglue+0x10>

0800b6c4 <sniprintf>:
 800b6c4:	b40c      	push	{r2, r3}
 800b6c6:	b530      	push	{r4, r5, lr}
 800b6c8:	4b17      	ldr	r3, [pc, #92]	@ (800b728 <sniprintf+0x64>)
 800b6ca:	1e0c      	subs	r4, r1, #0
 800b6cc:	681d      	ldr	r5, [r3, #0]
 800b6ce:	b09d      	sub	sp, #116	@ 0x74
 800b6d0:	da08      	bge.n	800b6e4 <sniprintf+0x20>
 800b6d2:	238b      	movs	r3, #139	@ 0x8b
 800b6d4:	602b      	str	r3, [r5, #0]
 800b6d6:	f04f 30ff 	mov.w	r0, #4294967295
 800b6da:	b01d      	add	sp, #116	@ 0x74
 800b6dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b6e0:	b002      	add	sp, #8
 800b6e2:	4770      	bx	lr
 800b6e4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b6e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b6ec:	bf14      	ite	ne
 800b6ee:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b6f2:	4623      	moveq	r3, r4
 800b6f4:	9304      	str	r3, [sp, #16]
 800b6f6:	9307      	str	r3, [sp, #28]
 800b6f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b6fc:	9002      	str	r0, [sp, #8]
 800b6fe:	9006      	str	r0, [sp, #24]
 800b700:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b704:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b706:	ab21      	add	r3, sp, #132	@ 0x84
 800b708:	a902      	add	r1, sp, #8
 800b70a:	4628      	mov	r0, r5
 800b70c:	9301      	str	r3, [sp, #4]
 800b70e:	f001 fa13 	bl	800cb38 <_svfiprintf_r>
 800b712:	1c43      	adds	r3, r0, #1
 800b714:	bfbc      	itt	lt
 800b716:	238b      	movlt	r3, #139	@ 0x8b
 800b718:	602b      	strlt	r3, [r5, #0]
 800b71a:	2c00      	cmp	r4, #0
 800b71c:	d0dd      	beq.n	800b6da <sniprintf+0x16>
 800b71e:	9b02      	ldr	r3, [sp, #8]
 800b720:	2200      	movs	r2, #0
 800b722:	701a      	strb	r2, [r3, #0]
 800b724:	e7d9      	b.n	800b6da <sniprintf+0x16>
 800b726:	bf00      	nop
 800b728:	20000198 	.word	0x20000198

0800b72c <__sread>:
 800b72c:	b510      	push	{r4, lr}
 800b72e:	460c      	mov	r4, r1
 800b730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b734:	f000 f8d0 	bl	800b8d8 <_read_r>
 800b738:	2800      	cmp	r0, #0
 800b73a:	bfab      	itete	ge
 800b73c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b73e:	89a3      	ldrhlt	r3, [r4, #12]
 800b740:	181b      	addge	r3, r3, r0
 800b742:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b746:	bfac      	ite	ge
 800b748:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b74a:	81a3      	strhlt	r3, [r4, #12]
 800b74c:	bd10      	pop	{r4, pc}

0800b74e <__swrite>:
 800b74e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b752:	461f      	mov	r7, r3
 800b754:	898b      	ldrh	r3, [r1, #12]
 800b756:	05db      	lsls	r3, r3, #23
 800b758:	4605      	mov	r5, r0
 800b75a:	460c      	mov	r4, r1
 800b75c:	4616      	mov	r6, r2
 800b75e:	d505      	bpl.n	800b76c <__swrite+0x1e>
 800b760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b764:	2302      	movs	r3, #2
 800b766:	2200      	movs	r2, #0
 800b768:	f000 f8a4 	bl	800b8b4 <_lseek_r>
 800b76c:	89a3      	ldrh	r3, [r4, #12]
 800b76e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b772:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b776:	81a3      	strh	r3, [r4, #12]
 800b778:	4632      	mov	r2, r6
 800b77a:	463b      	mov	r3, r7
 800b77c:	4628      	mov	r0, r5
 800b77e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b782:	f000 b8cb 	b.w	800b91c <_write_r>

0800b786 <__sseek>:
 800b786:	b510      	push	{r4, lr}
 800b788:	460c      	mov	r4, r1
 800b78a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b78e:	f000 f891 	bl	800b8b4 <_lseek_r>
 800b792:	1c43      	adds	r3, r0, #1
 800b794:	89a3      	ldrh	r3, [r4, #12]
 800b796:	bf15      	itete	ne
 800b798:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b79a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b79e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b7a2:	81a3      	strheq	r3, [r4, #12]
 800b7a4:	bf18      	it	ne
 800b7a6:	81a3      	strhne	r3, [r4, #12]
 800b7a8:	bd10      	pop	{r4, pc}

0800b7aa <__sclose>:
 800b7aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7ae:	f000 b81b 	b.w	800b7e8 <_close_r>

0800b7b2 <memset>:
 800b7b2:	4402      	add	r2, r0
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	4293      	cmp	r3, r2
 800b7b8:	d100      	bne.n	800b7bc <memset+0xa>
 800b7ba:	4770      	bx	lr
 800b7bc:	f803 1b01 	strb.w	r1, [r3], #1
 800b7c0:	e7f9      	b.n	800b7b6 <memset+0x4>

0800b7c2 <strncmp>:
 800b7c2:	b510      	push	{r4, lr}
 800b7c4:	b16a      	cbz	r2, 800b7e2 <strncmp+0x20>
 800b7c6:	3901      	subs	r1, #1
 800b7c8:	1884      	adds	r4, r0, r2
 800b7ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7ce:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b7d2:	429a      	cmp	r2, r3
 800b7d4:	d103      	bne.n	800b7de <strncmp+0x1c>
 800b7d6:	42a0      	cmp	r0, r4
 800b7d8:	d001      	beq.n	800b7de <strncmp+0x1c>
 800b7da:	2a00      	cmp	r2, #0
 800b7dc:	d1f5      	bne.n	800b7ca <strncmp+0x8>
 800b7de:	1ad0      	subs	r0, r2, r3
 800b7e0:	bd10      	pop	{r4, pc}
 800b7e2:	4610      	mov	r0, r2
 800b7e4:	e7fc      	b.n	800b7e0 <strncmp+0x1e>
	...

0800b7e8 <_close_r>:
 800b7e8:	b538      	push	{r3, r4, r5, lr}
 800b7ea:	4d06      	ldr	r5, [pc, #24]	@ (800b804 <_close_r+0x1c>)
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	4604      	mov	r4, r0
 800b7f0:	4608      	mov	r0, r1
 800b7f2:	602b      	str	r3, [r5, #0]
 800b7f4:	f7f8 f8d6 	bl	80039a4 <_close>
 800b7f8:	1c43      	adds	r3, r0, #1
 800b7fa:	d102      	bne.n	800b802 <_close_r+0x1a>
 800b7fc:	682b      	ldr	r3, [r5, #0]
 800b7fe:	b103      	cbz	r3, 800b802 <_close_r+0x1a>
 800b800:	6023      	str	r3, [r4, #0]
 800b802:	bd38      	pop	{r3, r4, r5, pc}
 800b804:	20004788 	.word	0x20004788

0800b808 <_reclaim_reent>:
 800b808:	4b29      	ldr	r3, [pc, #164]	@ (800b8b0 <_reclaim_reent+0xa8>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	4283      	cmp	r3, r0
 800b80e:	b570      	push	{r4, r5, r6, lr}
 800b810:	4604      	mov	r4, r0
 800b812:	d04b      	beq.n	800b8ac <_reclaim_reent+0xa4>
 800b814:	69c3      	ldr	r3, [r0, #28]
 800b816:	b1ab      	cbz	r3, 800b844 <_reclaim_reent+0x3c>
 800b818:	68db      	ldr	r3, [r3, #12]
 800b81a:	b16b      	cbz	r3, 800b838 <_reclaim_reent+0x30>
 800b81c:	2500      	movs	r5, #0
 800b81e:	69e3      	ldr	r3, [r4, #28]
 800b820:	68db      	ldr	r3, [r3, #12]
 800b822:	5959      	ldr	r1, [r3, r5]
 800b824:	2900      	cmp	r1, #0
 800b826:	d13b      	bne.n	800b8a0 <_reclaim_reent+0x98>
 800b828:	3504      	adds	r5, #4
 800b82a:	2d80      	cmp	r5, #128	@ 0x80
 800b82c:	d1f7      	bne.n	800b81e <_reclaim_reent+0x16>
 800b82e:	69e3      	ldr	r3, [r4, #28]
 800b830:	4620      	mov	r0, r4
 800b832:	68d9      	ldr	r1, [r3, #12]
 800b834:	f000 f8c8 	bl	800b9c8 <_free_r>
 800b838:	69e3      	ldr	r3, [r4, #28]
 800b83a:	6819      	ldr	r1, [r3, #0]
 800b83c:	b111      	cbz	r1, 800b844 <_reclaim_reent+0x3c>
 800b83e:	4620      	mov	r0, r4
 800b840:	f000 f8c2 	bl	800b9c8 <_free_r>
 800b844:	6961      	ldr	r1, [r4, #20]
 800b846:	b111      	cbz	r1, 800b84e <_reclaim_reent+0x46>
 800b848:	4620      	mov	r0, r4
 800b84a:	f000 f8bd 	bl	800b9c8 <_free_r>
 800b84e:	69e1      	ldr	r1, [r4, #28]
 800b850:	b111      	cbz	r1, 800b858 <_reclaim_reent+0x50>
 800b852:	4620      	mov	r0, r4
 800b854:	f000 f8b8 	bl	800b9c8 <_free_r>
 800b858:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b85a:	b111      	cbz	r1, 800b862 <_reclaim_reent+0x5a>
 800b85c:	4620      	mov	r0, r4
 800b85e:	f000 f8b3 	bl	800b9c8 <_free_r>
 800b862:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b864:	b111      	cbz	r1, 800b86c <_reclaim_reent+0x64>
 800b866:	4620      	mov	r0, r4
 800b868:	f000 f8ae 	bl	800b9c8 <_free_r>
 800b86c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800b86e:	b111      	cbz	r1, 800b876 <_reclaim_reent+0x6e>
 800b870:	4620      	mov	r0, r4
 800b872:	f000 f8a9 	bl	800b9c8 <_free_r>
 800b876:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b878:	b111      	cbz	r1, 800b880 <_reclaim_reent+0x78>
 800b87a:	4620      	mov	r0, r4
 800b87c:	f000 f8a4 	bl	800b9c8 <_free_r>
 800b880:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800b882:	b111      	cbz	r1, 800b88a <_reclaim_reent+0x82>
 800b884:	4620      	mov	r0, r4
 800b886:	f000 f89f 	bl	800b9c8 <_free_r>
 800b88a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b88c:	b111      	cbz	r1, 800b894 <_reclaim_reent+0x8c>
 800b88e:	4620      	mov	r0, r4
 800b890:	f000 f89a 	bl	800b9c8 <_free_r>
 800b894:	6a23      	ldr	r3, [r4, #32]
 800b896:	b14b      	cbz	r3, 800b8ac <_reclaim_reent+0xa4>
 800b898:	4620      	mov	r0, r4
 800b89a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b89e:	4718      	bx	r3
 800b8a0:	680e      	ldr	r6, [r1, #0]
 800b8a2:	4620      	mov	r0, r4
 800b8a4:	f000 f890 	bl	800b9c8 <_free_r>
 800b8a8:	4631      	mov	r1, r6
 800b8aa:	e7bb      	b.n	800b824 <_reclaim_reent+0x1c>
 800b8ac:	bd70      	pop	{r4, r5, r6, pc}
 800b8ae:	bf00      	nop
 800b8b0:	20000198 	.word	0x20000198

0800b8b4 <_lseek_r>:
 800b8b4:	b538      	push	{r3, r4, r5, lr}
 800b8b6:	4d07      	ldr	r5, [pc, #28]	@ (800b8d4 <_lseek_r+0x20>)
 800b8b8:	4604      	mov	r4, r0
 800b8ba:	4608      	mov	r0, r1
 800b8bc:	4611      	mov	r1, r2
 800b8be:	2200      	movs	r2, #0
 800b8c0:	602a      	str	r2, [r5, #0]
 800b8c2:	461a      	mov	r2, r3
 800b8c4:	f7f8 f895 	bl	80039f2 <_lseek>
 800b8c8:	1c43      	adds	r3, r0, #1
 800b8ca:	d102      	bne.n	800b8d2 <_lseek_r+0x1e>
 800b8cc:	682b      	ldr	r3, [r5, #0]
 800b8ce:	b103      	cbz	r3, 800b8d2 <_lseek_r+0x1e>
 800b8d0:	6023      	str	r3, [r4, #0]
 800b8d2:	bd38      	pop	{r3, r4, r5, pc}
 800b8d4:	20004788 	.word	0x20004788

0800b8d8 <_read_r>:
 800b8d8:	b538      	push	{r3, r4, r5, lr}
 800b8da:	4d07      	ldr	r5, [pc, #28]	@ (800b8f8 <_read_r+0x20>)
 800b8dc:	4604      	mov	r4, r0
 800b8de:	4608      	mov	r0, r1
 800b8e0:	4611      	mov	r1, r2
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	602a      	str	r2, [r5, #0]
 800b8e6:	461a      	mov	r2, r3
 800b8e8:	f7f8 f823 	bl	8003932 <_read>
 800b8ec:	1c43      	adds	r3, r0, #1
 800b8ee:	d102      	bne.n	800b8f6 <_read_r+0x1e>
 800b8f0:	682b      	ldr	r3, [r5, #0]
 800b8f2:	b103      	cbz	r3, 800b8f6 <_read_r+0x1e>
 800b8f4:	6023      	str	r3, [r4, #0]
 800b8f6:	bd38      	pop	{r3, r4, r5, pc}
 800b8f8:	20004788 	.word	0x20004788

0800b8fc <_sbrk_r>:
 800b8fc:	b538      	push	{r3, r4, r5, lr}
 800b8fe:	4d06      	ldr	r5, [pc, #24]	@ (800b918 <_sbrk_r+0x1c>)
 800b900:	2300      	movs	r3, #0
 800b902:	4604      	mov	r4, r0
 800b904:	4608      	mov	r0, r1
 800b906:	602b      	str	r3, [r5, #0]
 800b908:	f7f8 f880 	bl	8003a0c <_sbrk>
 800b90c:	1c43      	adds	r3, r0, #1
 800b90e:	d102      	bne.n	800b916 <_sbrk_r+0x1a>
 800b910:	682b      	ldr	r3, [r5, #0]
 800b912:	b103      	cbz	r3, 800b916 <_sbrk_r+0x1a>
 800b914:	6023      	str	r3, [r4, #0]
 800b916:	bd38      	pop	{r3, r4, r5, pc}
 800b918:	20004788 	.word	0x20004788

0800b91c <_write_r>:
 800b91c:	b538      	push	{r3, r4, r5, lr}
 800b91e:	4d07      	ldr	r5, [pc, #28]	@ (800b93c <_write_r+0x20>)
 800b920:	4604      	mov	r4, r0
 800b922:	4608      	mov	r0, r1
 800b924:	4611      	mov	r1, r2
 800b926:	2200      	movs	r2, #0
 800b928:	602a      	str	r2, [r5, #0]
 800b92a:	461a      	mov	r2, r3
 800b92c:	f7f8 f81e 	bl	800396c <_write>
 800b930:	1c43      	adds	r3, r0, #1
 800b932:	d102      	bne.n	800b93a <_write_r+0x1e>
 800b934:	682b      	ldr	r3, [r5, #0]
 800b936:	b103      	cbz	r3, 800b93a <_write_r+0x1e>
 800b938:	6023      	str	r3, [r4, #0]
 800b93a:	bd38      	pop	{r3, r4, r5, pc}
 800b93c:	20004788 	.word	0x20004788

0800b940 <__errno>:
 800b940:	4b01      	ldr	r3, [pc, #4]	@ (800b948 <__errno+0x8>)
 800b942:	6818      	ldr	r0, [r3, #0]
 800b944:	4770      	bx	lr
 800b946:	bf00      	nop
 800b948:	20000198 	.word	0x20000198

0800b94c <__libc_init_array>:
 800b94c:	b570      	push	{r4, r5, r6, lr}
 800b94e:	4d0d      	ldr	r5, [pc, #52]	@ (800b984 <__libc_init_array+0x38>)
 800b950:	4c0d      	ldr	r4, [pc, #52]	@ (800b988 <__libc_init_array+0x3c>)
 800b952:	1b64      	subs	r4, r4, r5
 800b954:	10a4      	asrs	r4, r4, #2
 800b956:	2600      	movs	r6, #0
 800b958:	42a6      	cmp	r6, r4
 800b95a:	d109      	bne.n	800b970 <__libc_init_array+0x24>
 800b95c:	4d0b      	ldr	r5, [pc, #44]	@ (800b98c <__libc_init_array+0x40>)
 800b95e:	4c0c      	ldr	r4, [pc, #48]	@ (800b990 <__libc_init_array+0x44>)
 800b960:	f001 ff22 	bl	800d7a8 <_init>
 800b964:	1b64      	subs	r4, r4, r5
 800b966:	10a4      	asrs	r4, r4, #2
 800b968:	2600      	movs	r6, #0
 800b96a:	42a6      	cmp	r6, r4
 800b96c:	d105      	bne.n	800b97a <__libc_init_array+0x2e>
 800b96e:	bd70      	pop	{r4, r5, r6, pc}
 800b970:	f855 3b04 	ldr.w	r3, [r5], #4
 800b974:	4798      	blx	r3
 800b976:	3601      	adds	r6, #1
 800b978:	e7ee      	b.n	800b958 <__libc_init_array+0xc>
 800b97a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b97e:	4798      	blx	r3
 800b980:	3601      	adds	r6, #1
 800b982:	e7f2      	b.n	800b96a <__libc_init_array+0x1e>
 800b984:	0800ddf8 	.word	0x0800ddf8
 800b988:	0800ddf8 	.word	0x0800ddf8
 800b98c:	0800ddf8 	.word	0x0800ddf8
 800b990:	0800ddfc 	.word	0x0800ddfc

0800b994 <__retarget_lock_init_recursive>:
 800b994:	4770      	bx	lr

0800b996 <__retarget_lock_acquire_recursive>:
 800b996:	4770      	bx	lr

0800b998 <__retarget_lock_release_recursive>:
 800b998:	4770      	bx	lr

0800b99a <memcpy>:
 800b99a:	440a      	add	r2, r1
 800b99c:	4291      	cmp	r1, r2
 800b99e:	f100 33ff 	add.w	r3, r0, #4294967295
 800b9a2:	d100      	bne.n	800b9a6 <memcpy+0xc>
 800b9a4:	4770      	bx	lr
 800b9a6:	b510      	push	{r4, lr}
 800b9a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b9ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b9b0:	4291      	cmp	r1, r2
 800b9b2:	d1f9      	bne.n	800b9a8 <memcpy+0xe>
 800b9b4:	bd10      	pop	{r4, pc}
	...

0800b9b8 <nan>:
 800b9b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b9c0 <nan+0x8>
 800b9bc:	4770      	bx	lr
 800b9be:	bf00      	nop
 800b9c0:	00000000 	.word	0x00000000
 800b9c4:	7ff80000 	.word	0x7ff80000

0800b9c8 <_free_r>:
 800b9c8:	b538      	push	{r3, r4, r5, lr}
 800b9ca:	4605      	mov	r5, r0
 800b9cc:	2900      	cmp	r1, #0
 800b9ce:	d041      	beq.n	800ba54 <_free_r+0x8c>
 800b9d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9d4:	1f0c      	subs	r4, r1, #4
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	bfb8      	it	lt
 800b9da:	18e4      	addlt	r4, r4, r3
 800b9dc:	f7fe ff5e 	bl	800a89c <__malloc_lock>
 800b9e0:	4a1d      	ldr	r2, [pc, #116]	@ (800ba58 <_free_r+0x90>)
 800b9e2:	6813      	ldr	r3, [r2, #0]
 800b9e4:	b933      	cbnz	r3, 800b9f4 <_free_r+0x2c>
 800b9e6:	6063      	str	r3, [r4, #4]
 800b9e8:	6014      	str	r4, [r2, #0]
 800b9ea:	4628      	mov	r0, r5
 800b9ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9f0:	f7fe bf5a 	b.w	800a8a8 <__malloc_unlock>
 800b9f4:	42a3      	cmp	r3, r4
 800b9f6:	d908      	bls.n	800ba0a <_free_r+0x42>
 800b9f8:	6820      	ldr	r0, [r4, #0]
 800b9fa:	1821      	adds	r1, r4, r0
 800b9fc:	428b      	cmp	r3, r1
 800b9fe:	bf01      	itttt	eq
 800ba00:	6819      	ldreq	r1, [r3, #0]
 800ba02:	685b      	ldreq	r3, [r3, #4]
 800ba04:	1809      	addeq	r1, r1, r0
 800ba06:	6021      	streq	r1, [r4, #0]
 800ba08:	e7ed      	b.n	800b9e6 <_free_r+0x1e>
 800ba0a:	461a      	mov	r2, r3
 800ba0c:	685b      	ldr	r3, [r3, #4]
 800ba0e:	b10b      	cbz	r3, 800ba14 <_free_r+0x4c>
 800ba10:	42a3      	cmp	r3, r4
 800ba12:	d9fa      	bls.n	800ba0a <_free_r+0x42>
 800ba14:	6811      	ldr	r1, [r2, #0]
 800ba16:	1850      	adds	r0, r2, r1
 800ba18:	42a0      	cmp	r0, r4
 800ba1a:	d10b      	bne.n	800ba34 <_free_r+0x6c>
 800ba1c:	6820      	ldr	r0, [r4, #0]
 800ba1e:	4401      	add	r1, r0
 800ba20:	1850      	adds	r0, r2, r1
 800ba22:	4283      	cmp	r3, r0
 800ba24:	6011      	str	r1, [r2, #0]
 800ba26:	d1e0      	bne.n	800b9ea <_free_r+0x22>
 800ba28:	6818      	ldr	r0, [r3, #0]
 800ba2a:	685b      	ldr	r3, [r3, #4]
 800ba2c:	6053      	str	r3, [r2, #4]
 800ba2e:	4408      	add	r0, r1
 800ba30:	6010      	str	r0, [r2, #0]
 800ba32:	e7da      	b.n	800b9ea <_free_r+0x22>
 800ba34:	d902      	bls.n	800ba3c <_free_r+0x74>
 800ba36:	230c      	movs	r3, #12
 800ba38:	602b      	str	r3, [r5, #0]
 800ba3a:	e7d6      	b.n	800b9ea <_free_r+0x22>
 800ba3c:	6820      	ldr	r0, [r4, #0]
 800ba3e:	1821      	adds	r1, r4, r0
 800ba40:	428b      	cmp	r3, r1
 800ba42:	bf04      	itt	eq
 800ba44:	6819      	ldreq	r1, [r3, #0]
 800ba46:	685b      	ldreq	r3, [r3, #4]
 800ba48:	6063      	str	r3, [r4, #4]
 800ba4a:	bf04      	itt	eq
 800ba4c:	1809      	addeq	r1, r1, r0
 800ba4e:	6021      	streq	r1, [r4, #0]
 800ba50:	6054      	str	r4, [r2, #4]
 800ba52:	e7ca      	b.n	800b9ea <_free_r+0x22>
 800ba54:	bd38      	pop	{r3, r4, r5, pc}
 800ba56:	bf00      	nop
 800ba58:	20004648 	.word	0x20004648

0800ba5c <rshift>:
 800ba5c:	6903      	ldr	r3, [r0, #16]
 800ba5e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ba62:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ba66:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ba6a:	f100 0414 	add.w	r4, r0, #20
 800ba6e:	dd45      	ble.n	800bafc <rshift+0xa0>
 800ba70:	f011 011f 	ands.w	r1, r1, #31
 800ba74:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ba78:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ba7c:	d10c      	bne.n	800ba98 <rshift+0x3c>
 800ba7e:	f100 0710 	add.w	r7, r0, #16
 800ba82:	4629      	mov	r1, r5
 800ba84:	42b1      	cmp	r1, r6
 800ba86:	d334      	bcc.n	800baf2 <rshift+0x96>
 800ba88:	1a9b      	subs	r3, r3, r2
 800ba8a:	009b      	lsls	r3, r3, #2
 800ba8c:	1eea      	subs	r2, r5, #3
 800ba8e:	4296      	cmp	r6, r2
 800ba90:	bf38      	it	cc
 800ba92:	2300      	movcc	r3, #0
 800ba94:	4423      	add	r3, r4
 800ba96:	e015      	b.n	800bac4 <rshift+0x68>
 800ba98:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ba9c:	f1c1 0820 	rsb	r8, r1, #32
 800baa0:	40cf      	lsrs	r7, r1
 800baa2:	f105 0e04 	add.w	lr, r5, #4
 800baa6:	46a1      	mov	r9, r4
 800baa8:	4576      	cmp	r6, lr
 800baaa:	46f4      	mov	ip, lr
 800baac:	d815      	bhi.n	800bada <rshift+0x7e>
 800baae:	1a9a      	subs	r2, r3, r2
 800bab0:	0092      	lsls	r2, r2, #2
 800bab2:	3a04      	subs	r2, #4
 800bab4:	3501      	adds	r5, #1
 800bab6:	42ae      	cmp	r6, r5
 800bab8:	bf38      	it	cc
 800baba:	2200      	movcc	r2, #0
 800babc:	18a3      	adds	r3, r4, r2
 800babe:	50a7      	str	r7, [r4, r2]
 800bac0:	b107      	cbz	r7, 800bac4 <rshift+0x68>
 800bac2:	3304      	adds	r3, #4
 800bac4:	1b1a      	subs	r2, r3, r4
 800bac6:	42a3      	cmp	r3, r4
 800bac8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bacc:	bf08      	it	eq
 800bace:	2300      	moveq	r3, #0
 800bad0:	6102      	str	r2, [r0, #16]
 800bad2:	bf08      	it	eq
 800bad4:	6143      	streq	r3, [r0, #20]
 800bad6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bada:	f8dc c000 	ldr.w	ip, [ip]
 800bade:	fa0c fc08 	lsl.w	ip, ip, r8
 800bae2:	ea4c 0707 	orr.w	r7, ip, r7
 800bae6:	f849 7b04 	str.w	r7, [r9], #4
 800baea:	f85e 7b04 	ldr.w	r7, [lr], #4
 800baee:	40cf      	lsrs	r7, r1
 800baf0:	e7da      	b.n	800baa8 <rshift+0x4c>
 800baf2:	f851 cb04 	ldr.w	ip, [r1], #4
 800baf6:	f847 cf04 	str.w	ip, [r7, #4]!
 800bafa:	e7c3      	b.n	800ba84 <rshift+0x28>
 800bafc:	4623      	mov	r3, r4
 800bafe:	e7e1      	b.n	800bac4 <rshift+0x68>

0800bb00 <__hexdig_fun>:
 800bb00:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800bb04:	2b09      	cmp	r3, #9
 800bb06:	d802      	bhi.n	800bb0e <__hexdig_fun+0xe>
 800bb08:	3820      	subs	r0, #32
 800bb0a:	b2c0      	uxtb	r0, r0
 800bb0c:	4770      	bx	lr
 800bb0e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800bb12:	2b05      	cmp	r3, #5
 800bb14:	d801      	bhi.n	800bb1a <__hexdig_fun+0x1a>
 800bb16:	3847      	subs	r0, #71	@ 0x47
 800bb18:	e7f7      	b.n	800bb0a <__hexdig_fun+0xa>
 800bb1a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800bb1e:	2b05      	cmp	r3, #5
 800bb20:	d801      	bhi.n	800bb26 <__hexdig_fun+0x26>
 800bb22:	3827      	subs	r0, #39	@ 0x27
 800bb24:	e7f1      	b.n	800bb0a <__hexdig_fun+0xa>
 800bb26:	2000      	movs	r0, #0
 800bb28:	4770      	bx	lr
	...

0800bb2c <__gethex>:
 800bb2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb30:	b085      	sub	sp, #20
 800bb32:	468a      	mov	sl, r1
 800bb34:	9302      	str	r3, [sp, #8]
 800bb36:	680b      	ldr	r3, [r1, #0]
 800bb38:	9001      	str	r0, [sp, #4]
 800bb3a:	4690      	mov	r8, r2
 800bb3c:	1c9c      	adds	r4, r3, #2
 800bb3e:	46a1      	mov	r9, r4
 800bb40:	f814 0b01 	ldrb.w	r0, [r4], #1
 800bb44:	2830      	cmp	r0, #48	@ 0x30
 800bb46:	d0fa      	beq.n	800bb3e <__gethex+0x12>
 800bb48:	eba9 0303 	sub.w	r3, r9, r3
 800bb4c:	f1a3 0b02 	sub.w	fp, r3, #2
 800bb50:	f7ff ffd6 	bl	800bb00 <__hexdig_fun>
 800bb54:	4605      	mov	r5, r0
 800bb56:	2800      	cmp	r0, #0
 800bb58:	d168      	bne.n	800bc2c <__gethex+0x100>
 800bb5a:	49a0      	ldr	r1, [pc, #640]	@ (800bddc <__gethex+0x2b0>)
 800bb5c:	2201      	movs	r2, #1
 800bb5e:	4648      	mov	r0, r9
 800bb60:	f7ff fe2f 	bl	800b7c2 <strncmp>
 800bb64:	4607      	mov	r7, r0
 800bb66:	2800      	cmp	r0, #0
 800bb68:	d167      	bne.n	800bc3a <__gethex+0x10e>
 800bb6a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800bb6e:	4626      	mov	r6, r4
 800bb70:	f7ff ffc6 	bl	800bb00 <__hexdig_fun>
 800bb74:	2800      	cmp	r0, #0
 800bb76:	d062      	beq.n	800bc3e <__gethex+0x112>
 800bb78:	4623      	mov	r3, r4
 800bb7a:	7818      	ldrb	r0, [r3, #0]
 800bb7c:	2830      	cmp	r0, #48	@ 0x30
 800bb7e:	4699      	mov	r9, r3
 800bb80:	f103 0301 	add.w	r3, r3, #1
 800bb84:	d0f9      	beq.n	800bb7a <__gethex+0x4e>
 800bb86:	f7ff ffbb 	bl	800bb00 <__hexdig_fun>
 800bb8a:	fab0 f580 	clz	r5, r0
 800bb8e:	096d      	lsrs	r5, r5, #5
 800bb90:	f04f 0b01 	mov.w	fp, #1
 800bb94:	464a      	mov	r2, r9
 800bb96:	4616      	mov	r6, r2
 800bb98:	3201      	adds	r2, #1
 800bb9a:	7830      	ldrb	r0, [r6, #0]
 800bb9c:	f7ff ffb0 	bl	800bb00 <__hexdig_fun>
 800bba0:	2800      	cmp	r0, #0
 800bba2:	d1f8      	bne.n	800bb96 <__gethex+0x6a>
 800bba4:	498d      	ldr	r1, [pc, #564]	@ (800bddc <__gethex+0x2b0>)
 800bba6:	2201      	movs	r2, #1
 800bba8:	4630      	mov	r0, r6
 800bbaa:	f7ff fe0a 	bl	800b7c2 <strncmp>
 800bbae:	2800      	cmp	r0, #0
 800bbb0:	d13f      	bne.n	800bc32 <__gethex+0x106>
 800bbb2:	b944      	cbnz	r4, 800bbc6 <__gethex+0x9a>
 800bbb4:	1c74      	adds	r4, r6, #1
 800bbb6:	4622      	mov	r2, r4
 800bbb8:	4616      	mov	r6, r2
 800bbba:	3201      	adds	r2, #1
 800bbbc:	7830      	ldrb	r0, [r6, #0]
 800bbbe:	f7ff ff9f 	bl	800bb00 <__hexdig_fun>
 800bbc2:	2800      	cmp	r0, #0
 800bbc4:	d1f8      	bne.n	800bbb8 <__gethex+0x8c>
 800bbc6:	1ba4      	subs	r4, r4, r6
 800bbc8:	00a7      	lsls	r7, r4, #2
 800bbca:	7833      	ldrb	r3, [r6, #0]
 800bbcc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800bbd0:	2b50      	cmp	r3, #80	@ 0x50
 800bbd2:	d13e      	bne.n	800bc52 <__gethex+0x126>
 800bbd4:	7873      	ldrb	r3, [r6, #1]
 800bbd6:	2b2b      	cmp	r3, #43	@ 0x2b
 800bbd8:	d033      	beq.n	800bc42 <__gethex+0x116>
 800bbda:	2b2d      	cmp	r3, #45	@ 0x2d
 800bbdc:	d034      	beq.n	800bc48 <__gethex+0x11c>
 800bbde:	1c71      	adds	r1, r6, #1
 800bbe0:	2400      	movs	r4, #0
 800bbe2:	7808      	ldrb	r0, [r1, #0]
 800bbe4:	f7ff ff8c 	bl	800bb00 <__hexdig_fun>
 800bbe8:	1e43      	subs	r3, r0, #1
 800bbea:	b2db      	uxtb	r3, r3
 800bbec:	2b18      	cmp	r3, #24
 800bbee:	d830      	bhi.n	800bc52 <__gethex+0x126>
 800bbf0:	f1a0 0210 	sub.w	r2, r0, #16
 800bbf4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bbf8:	f7ff ff82 	bl	800bb00 <__hexdig_fun>
 800bbfc:	f100 3cff 	add.w	ip, r0, #4294967295
 800bc00:	fa5f fc8c 	uxtb.w	ip, ip
 800bc04:	f1bc 0f18 	cmp.w	ip, #24
 800bc08:	f04f 030a 	mov.w	r3, #10
 800bc0c:	d91e      	bls.n	800bc4c <__gethex+0x120>
 800bc0e:	b104      	cbz	r4, 800bc12 <__gethex+0xe6>
 800bc10:	4252      	negs	r2, r2
 800bc12:	4417      	add	r7, r2
 800bc14:	f8ca 1000 	str.w	r1, [sl]
 800bc18:	b1ed      	cbz	r5, 800bc56 <__gethex+0x12a>
 800bc1a:	f1bb 0f00 	cmp.w	fp, #0
 800bc1e:	bf0c      	ite	eq
 800bc20:	2506      	moveq	r5, #6
 800bc22:	2500      	movne	r5, #0
 800bc24:	4628      	mov	r0, r5
 800bc26:	b005      	add	sp, #20
 800bc28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc2c:	2500      	movs	r5, #0
 800bc2e:	462c      	mov	r4, r5
 800bc30:	e7b0      	b.n	800bb94 <__gethex+0x68>
 800bc32:	2c00      	cmp	r4, #0
 800bc34:	d1c7      	bne.n	800bbc6 <__gethex+0x9a>
 800bc36:	4627      	mov	r7, r4
 800bc38:	e7c7      	b.n	800bbca <__gethex+0x9e>
 800bc3a:	464e      	mov	r6, r9
 800bc3c:	462f      	mov	r7, r5
 800bc3e:	2501      	movs	r5, #1
 800bc40:	e7c3      	b.n	800bbca <__gethex+0x9e>
 800bc42:	2400      	movs	r4, #0
 800bc44:	1cb1      	adds	r1, r6, #2
 800bc46:	e7cc      	b.n	800bbe2 <__gethex+0xb6>
 800bc48:	2401      	movs	r4, #1
 800bc4a:	e7fb      	b.n	800bc44 <__gethex+0x118>
 800bc4c:	fb03 0002 	mla	r0, r3, r2, r0
 800bc50:	e7ce      	b.n	800bbf0 <__gethex+0xc4>
 800bc52:	4631      	mov	r1, r6
 800bc54:	e7de      	b.n	800bc14 <__gethex+0xe8>
 800bc56:	eba6 0309 	sub.w	r3, r6, r9
 800bc5a:	3b01      	subs	r3, #1
 800bc5c:	4629      	mov	r1, r5
 800bc5e:	2b07      	cmp	r3, #7
 800bc60:	dc0a      	bgt.n	800bc78 <__gethex+0x14c>
 800bc62:	9801      	ldr	r0, [sp, #4]
 800bc64:	f000 fa46 	bl	800c0f4 <_Balloc>
 800bc68:	4604      	mov	r4, r0
 800bc6a:	b940      	cbnz	r0, 800bc7e <__gethex+0x152>
 800bc6c:	4b5c      	ldr	r3, [pc, #368]	@ (800bde0 <__gethex+0x2b4>)
 800bc6e:	4602      	mov	r2, r0
 800bc70:	21e4      	movs	r1, #228	@ 0xe4
 800bc72:	485c      	ldr	r0, [pc, #368]	@ (800bde4 <__gethex+0x2b8>)
 800bc74:	f001 fab0 	bl	800d1d8 <__assert_func>
 800bc78:	3101      	adds	r1, #1
 800bc7a:	105b      	asrs	r3, r3, #1
 800bc7c:	e7ef      	b.n	800bc5e <__gethex+0x132>
 800bc7e:	f100 0a14 	add.w	sl, r0, #20
 800bc82:	2300      	movs	r3, #0
 800bc84:	4655      	mov	r5, sl
 800bc86:	469b      	mov	fp, r3
 800bc88:	45b1      	cmp	r9, r6
 800bc8a:	d337      	bcc.n	800bcfc <__gethex+0x1d0>
 800bc8c:	f845 bb04 	str.w	fp, [r5], #4
 800bc90:	eba5 050a 	sub.w	r5, r5, sl
 800bc94:	10ad      	asrs	r5, r5, #2
 800bc96:	6125      	str	r5, [r4, #16]
 800bc98:	4658      	mov	r0, fp
 800bc9a:	f000 fb1d 	bl	800c2d8 <__hi0bits>
 800bc9e:	016d      	lsls	r5, r5, #5
 800bca0:	f8d8 6000 	ldr.w	r6, [r8]
 800bca4:	1a2d      	subs	r5, r5, r0
 800bca6:	42b5      	cmp	r5, r6
 800bca8:	dd54      	ble.n	800bd54 <__gethex+0x228>
 800bcaa:	1bad      	subs	r5, r5, r6
 800bcac:	4629      	mov	r1, r5
 800bcae:	4620      	mov	r0, r4
 800bcb0:	f000 feb1 	bl	800ca16 <__any_on>
 800bcb4:	4681      	mov	r9, r0
 800bcb6:	b178      	cbz	r0, 800bcd8 <__gethex+0x1ac>
 800bcb8:	1e6b      	subs	r3, r5, #1
 800bcba:	1159      	asrs	r1, r3, #5
 800bcbc:	f003 021f 	and.w	r2, r3, #31
 800bcc0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800bcc4:	f04f 0901 	mov.w	r9, #1
 800bcc8:	fa09 f202 	lsl.w	r2, r9, r2
 800bccc:	420a      	tst	r2, r1
 800bcce:	d003      	beq.n	800bcd8 <__gethex+0x1ac>
 800bcd0:	454b      	cmp	r3, r9
 800bcd2:	dc36      	bgt.n	800bd42 <__gethex+0x216>
 800bcd4:	f04f 0902 	mov.w	r9, #2
 800bcd8:	4629      	mov	r1, r5
 800bcda:	4620      	mov	r0, r4
 800bcdc:	f7ff febe 	bl	800ba5c <rshift>
 800bce0:	442f      	add	r7, r5
 800bce2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bce6:	42bb      	cmp	r3, r7
 800bce8:	da42      	bge.n	800bd70 <__gethex+0x244>
 800bcea:	9801      	ldr	r0, [sp, #4]
 800bcec:	4621      	mov	r1, r4
 800bcee:	f000 fa41 	bl	800c174 <_Bfree>
 800bcf2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	6013      	str	r3, [r2, #0]
 800bcf8:	25a3      	movs	r5, #163	@ 0xa3
 800bcfa:	e793      	b.n	800bc24 <__gethex+0xf8>
 800bcfc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800bd00:	2a2e      	cmp	r2, #46	@ 0x2e
 800bd02:	d012      	beq.n	800bd2a <__gethex+0x1fe>
 800bd04:	2b20      	cmp	r3, #32
 800bd06:	d104      	bne.n	800bd12 <__gethex+0x1e6>
 800bd08:	f845 bb04 	str.w	fp, [r5], #4
 800bd0c:	f04f 0b00 	mov.w	fp, #0
 800bd10:	465b      	mov	r3, fp
 800bd12:	7830      	ldrb	r0, [r6, #0]
 800bd14:	9303      	str	r3, [sp, #12]
 800bd16:	f7ff fef3 	bl	800bb00 <__hexdig_fun>
 800bd1a:	9b03      	ldr	r3, [sp, #12]
 800bd1c:	f000 000f 	and.w	r0, r0, #15
 800bd20:	4098      	lsls	r0, r3
 800bd22:	ea4b 0b00 	orr.w	fp, fp, r0
 800bd26:	3304      	adds	r3, #4
 800bd28:	e7ae      	b.n	800bc88 <__gethex+0x15c>
 800bd2a:	45b1      	cmp	r9, r6
 800bd2c:	d8ea      	bhi.n	800bd04 <__gethex+0x1d8>
 800bd2e:	492b      	ldr	r1, [pc, #172]	@ (800bddc <__gethex+0x2b0>)
 800bd30:	9303      	str	r3, [sp, #12]
 800bd32:	2201      	movs	r2, #1
 800bd34:	4630      	mov	r0, r6
 800bd36:	f7ff fd44 	bl	800b7c2 <strncmp>
 800bd3a:	9b03      	ldr	r3, [sp, #12]
 800bd3c:	2800      	cmp	r0, #0
 800bd3e:	d1e1      	bne.n	800bd04 <__gethex+0x1d8>
 800bd40:	e7a2      	b.n	800bc88 <__gethex+0x15c>
 800bd42:	1ea9      	subs	r1, r5, #2
 800bd44:	4620      	mov	r0, r4
 800bd46:	f000 fe66 	bl	800ca16 <__any_on>
 800bd4a:	2800      	cmp	r0, #0
 800bd4c:	d0c2      	beq.n	800bcd4 <__gethex+0x1a8>
 800bd4e:	f04f 0903 	mov.w	r9, #3
 800bd52:	e7c1      	b.n	800bcd8 <__gethex+0x1ac>
 800bd54:	da09      	bge.n	800bd6a <__gethex+0x23e>
 800bd56:	1b75      	subs	r5, r6, r5
 800bd58:	4621      	mov	r1, r4
 800bd5a:	9801      	ldr	r0, [sp, #4]
 800bd5c:	462a      	mov	r2, r5
 800bd5e:	f000 fc21 	bl	800c5a4 <__lshift>
 800bd62:	1b7f      	subs	r7, r7, r5
 800bd64:	4604      	mov	r4, r0
 800bd66:	f100 0a14 	add.w	sl, r0, #20
 800bd6a:	f04f 0900 	mov.w	r9, #0
 800bd6e:	e7b8      	b.n	800bce2 <__gethex+0x1b6>
 800bd70:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bd74:	42bd      	cmp	r5, r7
 800bd76:	dd6f      	ble.n	800be58 <__gethex+0x32c>
 800bd78:	1bed      	subs	r5, r5, r7
 800bd7a:	42ae      	cmp	r6, r5
 800bd7c:	dc34      	bgt.n	800bde8 <__gethex+0x2bc>
 800bd7e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bd82:	2b02      	cmp	r3, #2
 800bd84:	d022      	beq.n	800bdcc <__gethex+0x2a0>
 800bd86:	2b03      	cmp	r3, #3
 800bd88:	d024      	beq.n	800bdd4 <__gethex+0x2a8>
 800bd8a:	2b01      	cmp	r3, #1
 800bd8c:	d115      	bne.n	800bdba <__gethex+0x28e>
 800bd8e:	42ae      	cmp	r6, r5
 800bd90:	d113      	bne.n	800bdba <__gethex+0x28e>
 800bd92:	2e01      	cmp	r6, #1
 800bd94:	d10b      	bne.n	800bdae <__gethex+0x282>
 800bd96:	9a02      	ldr	r2, [sp, #8]
 800bd98:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bd9c:	6013      	str	r3, [r2, #0]
 800bd9e:	2301      	movs	r3, #1
 800bda0:	6123      	str	r3, [r4, #16]
 800bda2:	f8ca 3000 	str.w	r3, [sl]
 800bda6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bda8:	2562      	movs	r5, #98	@ 0x62
 800bdaa:	601c      	str	r4, [r3, #0]
 800bdac:	e73a      	b.n	800bc24 <__gethex+0xf8>
 800bdae:	1e71      	subs	r1, r6, #1
 800bdb0:	4620      	mov	r0, r4
 800bdb2:	f000 fe30 	bl	800ca16 <__any_on>
 800bdb6:	2800      	cmp	r0, #0
 800bdb8:	d1ed      	bne.n	800bd96 <__gethex+0x26a>
 800bdba:	9801      	ldr	r0, [sp, #4]
 800bdbc:	4621      	mov	r1, r4
 800bdbe:	f000 f9d9 	bl	800c174 <_Bfree>
 800bdc2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	6013      	str	r3, [r2, #0]
 800bdc8:	2550      	movs	r5, #80	@ 0x50
 800bdca:	e72b      	b.n	800bc24 <__gethex+0xf8>
 800bdcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d1f3      	bne.n	800bdba <__gethex+0x28e>
 800bdd2:	e7e0      	b.n	800bd96 <__gethex+0x26a>
 800bdd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d1dd      	bne.n	800bd96 <__gethex+0x26a>
 800bdda:	e7ee      	b.n	800bdba <__gethex+0x28e>
 800bddc:	0800da38 	.word	0x0800da38
 800bde0:	0800dba1 	.word	0x0800dba1
 800bde4:	0800dbb2 	.word	0x0800dbb2
 800bde8:	1e6f      	subs	r7, r5, #1
 800bdea:	f1b9 0f00 	cmp.w	r9, #0
 800bdee:	d130      	bne.n	800be52 <__gethex+0x326>
 800bdf0:	b127      	cbz	r7, 800bdfc <__gethex+0x2d0>
 800bdf2:	4639      	mov	r1, r7
 800bdf4:	4620      	mov	r0, r4
 800bdf6:	f000 fe0e 	bl	800ca16 <__any_on>
 800bdfa:	4681      	mov	r9, r0
 800bdfc:	117a      	asrs	r2, r7, #5
 800bdfe:	2301      	movs	r3, #1
 800be00:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800be04:	f007 071f 	and.w	r7, r7, #31
 800be08:	40bb      	lsls	r3, r7
 800be0a:	4213      	tst	r3, r2
 800be0c:	4629      	mov	r1, r5
 800be0e:	4620      	mov	r0, r4
 800be10:	bf18      	it	ne
 800be12:	f049 0902 	orrne.w	r9, r9, #2
 800be16:	f7ff fe21 	bl	800ba5c <rshift>
 800be1a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800be1e:	1b76      	subs	r6, r6, r5
 800be20:	2502      	movs	r5, #2
 800be22:	f1b9 0f00 	cmp.w	r9, #0
 800be26:	d047      	beq.n	800beb8 <__gethex+0x38c>
 800be28:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800be2c:	2b02      	cmp	r3, #2
 800be2e:	d015      	beq.n	800be5c <__gethex+0x330>
 800be30:	2b03      	cmp	r3, #3
 800be32:	d017      	beq.n	800be64 <__gethex+0x338>
 800be34:	2b01      	cmp	r3, #1
 800be36:	d109      	bne.n	800be4c <__gethex+0x320>
 800be38:	f019 0f02 	tst.w	r9, #2
 800be3c:	d006      	beq.n	800be4c <__gethex+0x320>
 800be3e:	f8da 3000 	ldr.w	r3, [sl]
 800be42:	ea49 0903 	orr.w	r9, r9, r3
 800be46:	f019 0f01 	tst.w	r9, #1
 800be4a:	d10e      	bne.n	800be6a <__gethex+0x33e>
 800be4c:	f045 0510 	orr.w	r5, r5, #16
 800be50:	e032      	b.n	800beb8 <__gethex+0x38c>
 800be52:	f04f 0901 	mov.w	r9, #1
 800be56:	e7d1      	b.n	800bdfc <__gethex+0x2d0>
 800be58:	2501      	movs	r5, #1
 800be5a:	e7e2      	b.n	800be22 <__gethex+0x2f6>
 800be5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be5e:	f1c3 0301 	rsb	r3, r3, #1
 800be62:	930f      	str	r3, [sp, #60]	@ 0x3c
 800be64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be66:	2b00      	cmp	r3, #0
 800be68:	d0f0      	beq.n	800be4c <__gethex+0x320>
 800be6a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800be6e:	f104 0314 	add.w	r3, r4, #20
 800be72:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800be76:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800be7a:	f04f 0c00 	mov.w	ip, #0
 800be7e:	4618      	mov	r0, r3
 800be80:	f853 2b04 	ldr.w	r2, [r3], #4
 800be84:	f1b2 3fff 	cmp.w	r2, #4294967295
 800be88:	d01b      	beq.n	800bec2 <__gethex+0x396>
 800be8a:	3201      	adds	r2, #1
 800be8c:	6002      	str	r2, [r0, #0]
 800be8e:	2d02      	cmp	r5, #2
 800be90:	f104 0314 	add.w	r3, r4, #20
 800be94:	d13c      	bne.n	800bf10 <__gethex+0x3e4>
 800be96:	f8d8 2000 	ldr.w	r2, [r8]
 800be9a:	3a01      	subs	r2, #1
 800be9c:	42b2      	cmp	r2, r6
 800be9e:	d109      	bne.n	800beb4 <__gethex+0x388>
 800bea0:	1171      	asrs	r1, r6, #5
 800bea2:	2201      	movs	r2, #1
 800bea4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bea8:	f006 061f 	and.w	r6, r6, #31
 800beac:	fa02 f606 	lsl.w	r6, r2, r6
 800beb0:	421e      	tst	r6, r3
 800beb2:	d13a      	bne.n	800bf2a <__gethex+0x3fe>
 800beb4:	f045 0520 	orr.w	r5, r5, #32
 800beb8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800beba:	601c      	str	r4, [r3, #0]
 800bebc:	9b02      	ldr	r3, [sp, #8]
 800bebe:	601f      	str	r7, [r3, #0]
 800bec0:	e6b0      	b.n	800bc24 <__gethex+0xf8>
 800bec2:	4299      	cmp	r1, r3
 800bec4:	f843 cc04 	str.w	ip, [r3, #-4]
 800bec8:	d8d9      	bhi.n	800be7e <__gethex+0x352>
 800beca:	68a3      	ldr	r3, [r4, #8]
 800becc:	459b      	cmp	fp, r3
 800bece:	db17      	blt.n	800bf00 <__gethex+0x3d4>
 800bed0:	6861      	ldr	r1, [r4, #4]
 800bed2:	9801      	ldr	r0, [sp, #4]
 800bed4:	3101      	adds	r1, #1
 800bed6:	f000 f90d 	bl	800c0f4 <_Balloc>
 800beda:	4681      	mov	r9, r0
 800bedc:	b918      	cbnz	r0, 800bee6 <__gethex+0x3ba>
 800bede:	4b1a      	ldr	r3, [pc, #104]	@ (800bf48 <__gethex+0x41c>)
 800bee0:	4602      	mov	r2, r0
 800bee2:	2184      	movs	r1, #132	@ 0x84
 800bee4:	e6c5      	b.n	800bc72 <__gethex+0x146>
 800bee6:	6922      	ldr	r2, [r4, #16]
 800bee8:	3202      	adds	r2, #2
 800beea:	f104 010c 	add.w	r1, r4, #12
 800beee:	0092      	lsls	r2, r2, #2
 800bef0:	300c      	adds	r0, #12
 800bef2:	f7ff fd52 	bl	800b99a <memcpy>
 800bef6:	4621      	mov	r1, r4
 800bef8:	9801      	ldr	r0, [sp, #4]
 800befa:	f000 f93b 	bl	800c174 <_Bfree>
 800befe:	464c      	mov	r4, r9
 800bf00:	6923      	ldr	r3, [r4, #16]
 800bf02:	1c5a      	adds	r2, r3, #1
 800bf04:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bf08:	6122      	str	r2, [r4, #16]
 800bf0a:	2201      	movs	r2, #1
 800bf0c:	615a      	str	r2, [r3, #20]
 800bf0e:	e7be      	b.n	800be8e <__gethex+0x362>
 800bf10:	6922      	ldr	r2, [r4, #16]
 800bf12:	455a      	cmp	r2, fp
 800bf14:	dd0b      	ble.n	800bf2e <__gethex+0x402>
 800bf16:	2101      	movs	r1, #1
 800bf18:	4620      	mov	r0, r4
 800bf1a:	f7ff fd9f 	bl	800ba5c <rshift>
 800bf1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bf22:	3701      	adds	r7, #1
 800bf24:	42bb      	cmp	r3, r7
 800bf26:	f6ff aee0 	blt.w	800bcea <__gethex+0x1be>
 800bf2a:	2501      	movs	r5, #1
 800bf2c:	e7c2      	b.n	800beb4 <__gethex+0x388>
 800bf2e:	f016 061f 	ands.w	r6, r6, #31
 800bf32:	d0fa      	beq.n	800bf2a <__gethex+0x3fe>
 800bf34:	4453      	add	r3, sl
 800bf36:	f1c6 0620 	rsb	r6, r6, #32
 800bf3a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bf3e:	f000 f9cb 	bl	800c2d8 <__hi0bits>
 800bf42:	42b0      	cmp	r0, r6
 800bf44:	dbe7      	blt.n	800bf16 <__gethex+0x3ea>
 800bf46:	e7f0      	b.n	800bf2a <__gethex+0x3fe>
 800bf48:	0800dba1 	.word	0x0800dba1

0800bf4c <L_shift>:
 800bf4c:	f1c2 0208 	rsb	r2, r2, #8
 800bf50:	0092      	lsls	r2, r2, #2
 800bf52:	b570      	push	{r4, r5, r6, lr}
 800bf54:	f1c2 0620 	rsb	r6, r2, #32
 800bf58:	6843      	ldr	r3, [r0, #4]
 800bf5a:	6804      	ldr	r4, [r0, #0]
 800bf5c:	fa03 f506 	lsl.w	r5, r3, r6
 800bf60:	432c      	orrs	r4, r5
 800bf62:	40d3      	lsrs	r3, r2
 800bf64:	6004      	str	r4, [r0, #0]
 800bf66:	f840 3f04 	str.w	r3, [r0, #4]!
 800bf6a:	4288      	cmp	r0, r1
 800bf6c:	d3f4      	bcc.n	800bf58 <L_shift+0xc>
 800bf6e:	bd70      	pop	{r4, r5, r6, pc}

0800bf70 <__match>:
 800bf70:	b530      	push	{r4, r5, lr}
 800bf72:	6803      	ldr	r3, [r0, #0]
 800bf74:	3301      	adds	r3, #1
 800bf76:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf7a:	b914      	cbnz	r4, 800bf82 <__match+0x12>
 800bf7c:	6003      	str	r3, [r0, #0]
 800bf7e:	2001      	movs	r0, #1
 800bf80:	bd30      	pop	{r4, r5, pc}
 800bf82:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf86:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800bf8a:	2d19      	cmp	r5, #25
 800bf8c:	bf98      	it	ls
 800bf8e:	3220      	addls	r2, #32
 800bf90:	42a2      	cmp	r2, r4
 800bf92:	d0f0      	beq.n	800bf76 <__match+0x6>
 800bf94:	2000      	movs	r0, #0
 800bf96:	e7f3      	b.n	800bf80 <__match+0x10>

0800bf98 <__hexnan>:
 800bf98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf9c:	680b      	ldr	r3, [r1, #0]
 800bf9e:	6801      	ldr	r1, [r0, #0]
 800bfa0:	115e      	asrs	r6, r3, #5
 800bfa2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bfa6:	f013 031f 	ands.w	r3, r3, #31
 800bfaa:	b087      	sub	sp, #28
 800bfac:	bf18      	it	ne
 800bfae:	3604      	addne	r6, #4
 800bfb0:	2500      	movs	r5, #0
 800bfb2:	1f37      	subs	r7, r6, #4
 800bfb4:	4682      	mov	sl, r0
 800bfb6:	4690      	mov	r8, r2
 800bfb8:	9301      	str	r3, [sp, #4]
 800bfba:	f846 5c04 	str.w	r5, [r6, #-4]
 800bfbe:	46b9      	mov	r9, r7
 800bfc0:	463c      	mov	r4, r7
 800bfc2:	9502      	str	r5, [sp, #8]
 800bfc4:	46ab      	mov	fp, r5
 800bfc6:	784a      	ldrb	r2, [r1, #1]
 800bfc8:	1c4b      	adds	r3, r1, #1
 800bfca:	9303      	str	r3, [sp, #12]
 800bfcc:	b342      	cbz	r2, 800c020 <__hexnan+0x88>
 800bfce:	4610      	mov	r0, r2
 800bfd0:	9105      	str	r1, [sp, #20]
 800bfd2:	9204      	str	r2, [sp, #16]
 800bfd4:	f7ff fd94 	bl	800bb00 <__hexdig_fun>
 800bfd8:	2800      	cmp	r0, #0
 800bfda:	d151      	bne.n	800c080 <__hexnan+0xe8>
 800bfdc:	9a04      	ldr	r2, [sp, #16]
 800bfde:	9905      	ldr	r1, [sp, #20]
 800bfe0:	2a20      	cmp	r2, #32
 800bfe2:	d818      	bhi.n	800c016 <__hexnan+0x7e>
 800bfe4:	9b02      	ldr	r3, [sp, #8]
 800bfe6:	459b      	cmp	fp, r3
 800bfe8:	dd13      	ble.n	800c012 <__hexnan+0x7a>
 800bfea:	454c      	cmp	r4, r9
 800bfec:	d206      	bcs.n	800bffc <__hexnan+0x64>
 800bfee:	2d07      	cmp	r5, #7
 800bff0:	dc04      	bgt.n	800bffc <__hexnan+0x64>
 800bff2:	462a      	mov	r2, r5
 800bff4:	4649      	mov	r1, r9
 800bff6:	4620      	mov	r0, r4
 800bff8:	f7ff ffa8 	bl	800bf4c <L_shift>
 800bffc:	4544      	cmp	r4, r8
 800bffe:	d952      	bls.n	800c0a6 <__hexnan+0x10e>
 800c000:	2300      	movs	r3, #0
 800c002:	f1a4 0904 	sub.w	r9, r4, #4
 800c006:	f844 3c04 	str.w	r3, [r4, #-4]
 800c00a:	f8cd b008 	str.w	fp, [sp, #8]
 800c00e:	464c      	mov	r4, r9
 800c010:	461d      	mov	r5, r3
 800c012:	9903      	ldr	r1, [sp, #12]
 800c014:	e7d7      	b.n	800bfc6 <__hexnan+0x2e>
 800c016:	2a29      	cmp	r2, #41	@ 0x29
 800c018:	d157      	bne.n	800c0ca <__hexnan+0x132>
 800c01a:	3102      	adds	r1, #2
 800c01c:	f8ca 1000 	str.w	r1, [sl]
 800c020:	f1bb 0f00 	cmp.w	fp, #0
 800c024:	d051      	beq.n	800c0ca <__hexnan+0x132>
 800c026:	454c      	cmp	r4, r9
 800c028:	d206      	bcs.n	800c038 <__hexnan+0xa0>
 800c02a:	2d07      	cmp	r5, #7
 800c02c:	dc04      	bgt.n	800c038 <__hexnan+0xa0>
 800c02e:	462a      	mov	r2, r5
 800c030:	4649      	mov	r1, r9
 800c032:	4620      	mov	r0, r4
 800c034:	f7ff ff8a 	bl	800bf4c <L_shift>
 800c038:	4544      	cmp	r4, r8
 800c03a:	d936      	bls.n	800c0aa <__hexnan+0x112>
 800c03c:	f1a8 0204 	sub.w	r2, r8, #4
 800c040:	4623      	mov	r3, r4
 800c042:	f853 1b04 	ldr.w	r1, [r3], #4
 800c046:	f842 1f04 	str.w	r1, [r2, #4]!
 800c04a:	429f      	cmp	r7, r3
 800c04c:	d2f9      	bcs.n	800c042 <__hexnan+0xaa>
 800c04e:	1b3b      	subs	r3, r7, r4
 800c050:	f023 0303 	bic.w	r3, r3, #3
 800c054:	3304      	adds	r3, #4
 800c056:	3401      	adds	r4, #1
 800c058:	3e03      	subs	r6, #3
 800c05a:	42b4      	cmp	r4, r6
 800c05c:	bf88      	it	hi
 800c05e:	2304      	movhi	r3, #4
 800c060:	4443      	add	r3, r8
 800c062:	2200      	movs	r2, #0
 800c064:	f843 2b04 	str.w	r2, [r3], #4
 800c068:	429f      	cmp	r7, r3
 800c06a:	d2fb      	bcs.n	800c064 <__hexnan+0xcc>
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	b91b      	cbnz	r3, 800c078 <__hexnan+0xe0>
 800c070:	4547      	cmp	r7, r8
 800c072:	d128      	bne.n	800c0c6 <__hexnan+0x12e>
 800c074:	2301      	movs	r3, #1
 800c076:	603b      	str	r3, [r7, #0]
 800c078:	2005      	movs	r0, #5
 800c07a:	b007      	add	sp, #28
 800c07c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c080:	3501      	adds	r5, #1
 800c082:	2d08      	cmp	r5, #8
 800c084:	f10b 0b01 	add.w	fp, fp, #1
 800c088:	dd06      	ble.n	800c098 <__hexnan+0x100>
 800c08a:	4544      	cmp	r4, r8
 800c08c:	d9c1      	bls.n	800c012 <__hexnan+0x7a>
 800c08e:	2300      	movs	r3, #0
 800c090:	f844 3c04 	str.w	r3, [r4, #-4]
 800c094:	2501      	movs	r5, #1
 800c096:	3c04      	subs	r4, #4
 800c098:	6822      	ldr	r2, [r4, #0]
 800c09a:	f000 000f 	and.w	r0, r0, #15
 800c09e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c0a2:	6020      	str	r0, [r4, #0]
 800c0a4:	e7b5      	b.n	800c012 <__hexnan+0x7a>
 800c0a6:	2508      	movs	r5, #8
 800c0a8:	e7b3      	b.n	800c012 <__hexnan+0x7a>
 800c0aa:	9b01      	ldr	r3, [sp, #4]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d0dd      	beq.n	800c06c <__hexnan+0xd4>
 800c0b0:	f1c3 0320 	rsb	r3, r3, #32
 800c0b4:	f04f 32ff 	mov.w	r2, #4294967295
 800c0b8:	40da      	lsrs	r2, r3
 800c0ba:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c0be:	4013      	ands	r3, r2
 800c0c0:	f846 3c04 	str.w	r3, [r6, #-4]
 800c0c4:	e7d2      	b.n	800c06c <__hexnan+0xd4>
 800c0c6:	3f04      	subs	r7, #4
 800c0c8:	e7d0      	b.n	800c06c <__hexnan+0xd4>
 800c0ca:	2004      	movs	r0, #4
 800c0cc:	e7d5      	b.n	800c07a <__hexnan+0xe2>

0800c0ce <__ascii_mbtowc>:
 800c0ce:	b082      	sub	sp, #8
 800c0d0:	b901      	cbnz	r1, 800c0d4 <__ascii_mbtowc+0x6>
 800c0d2:	a901      	add	r1, sp, #4
 800c0d4:	b142      	cbz	r2, 800c0e8 <__ascii_mbtowc+0x1a>
 800c0d6:	b14b      	cbz	r3, 800c0ec <__ascii_mbtowc+0x1e>
 800c0d8:	7813      	ldrb	r3, [r2, #0]
 800c0da:	600b      	str	r3, [r1, #0]
 800c0dc:	7812      	ldrb	r2, [r2, #0]
 800c0de:	1e10      	subs	r0, r2, #0
 800c0e0:	bf18      	it	ne
 800c0e2:	2001      	movne	r0, #1
 800c0e4:	b002      	add	sp, #8
 800c0e6:	4770      	bx	lr
 800c0e8:	4610      	mov	r0, r2
 800c0ea:	e7fb      	b.n	800c0e4 <__ascii_mbtowc+0x16>
 800c0ec:	f06f 0001 	mvn.w	r0, #1
 800c0f0:	e7f8      	b.n	800c0e4 <__ascii_mbtowc+0x16>
	...

0800c0f4 <_Balloc>:
 800c0f4:	b570      	push	{r4, r5, r6, lr}
 800c0f6:	69c6      	ldr	r6, [r0, #28]
 800c0f8:	4604      	mov	r4, r0
 800c0fa:	460d      	mov	r5, r1
 800c0fc:	b976      	cbnz	r6, 800c11c <_Balloc+0x28>
 800c0fe:	2010      	movs	r0, #16
 800c100:	f7fe fb1a 	bl	800a738 <malloc>
 800c104:	4602      	mov	r2, r0
 800c106:	61e0      	str	r0, [r4, #28]
 800c108:	b920      	cbnz	r0, 800c114 <_Balloc+0x20>
 800c10a:	4b18      	ldr	r3, [pc, #96]	@ (800c16c <_Balloc+0x78>)
 800c10c:	4818      	ldr	r0, [pc, #96]	@ (800c170 <_Balloc+0x7c>)
 800c10e:	216b      	movs	r1, #107	@ 0x6b
 800c110:	f001 f862 	bl	800d1d8 <__assert_func>
 800c114:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c118:	6006      	str	r6, [r0, #0]
 800c11a:	60c6      	str	r6, [r0, #12]
 800c11c:	69e6      	ldr	r6, [r4, #28]
 800c11e:	68f3      	ldr	r3, [r6, #12]
 800c120:	b183      	cbz	r3, 800c144 <_Balloc+0x50>
 800c122:	69e3      	ldr	r3, [r4, #28]
 800c124:	68db      	ldr	r3, [r3, #12]
 800c126:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c12a:	b9b8      	cbnz	r0, 800c15c <_Balloc+0x68>
 800c12c:	2101      	movs	r1, #1
 800c12e:	fa01 f605 	lsl.w	r6, r1, r5
 800c132:	1d72      	adds	r2, r6, #5
 800c134:	0092      	lsls	r2, r2, #2
 800c136:	4620      	mov	r0, r4
 800c138:	f001 f86c 	bl	800d214 <_calloc_r>
 800c13c:	b160      	cbz	r0, 800c158 <_Balloc+0x64>
 800c13e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c142:	e00e      	b.n	800c162 <_Balloc+0x6e>
 800c144:	2221      	movs	r2, #33	@ 0x21
 800c146:	2104      	movs	r1, #4
 800c148:	4620      	mov	r0, r4
 800c14a:	f001 f863 	bl	800d214 <_calloc_r>
 800c14e:	69e3      	ldr	r3, [r4, #28]
 800c150:	60f0      	str	r0, [r6, #12]
 800c152:	68db      	ldr	r3, [r3, #12]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d1e4      	bne.n	800c122 <_Balloc+0x2e>
 800c158:	2000      	movs	r0, #0
 800c15a:	bd70      	pop	{r4, r5, r6, pc}
 800c15c:	6802      	ldr	r2, [r0, #0]
 800c15e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c162:	2300      	movs	r3, #0
 800c164:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c168:	e7f7      	b.n	800c15a <_Balloc+0x66>
 800c16a:	bf00      	nop
 800c16c:	0800dc12 	.word	0x0800dc12
 800c170:	0800dc29 	.word	0x0800dc29

0800c174 <_Bfree>:
 800c174:	b570      	push	{r4, r5, r6, lr}
 800c176:	69c6      	ldr	r6, [r0, #28]
 800c178:	4605      	mov	r5, r0
 800c17a:	460c      	mov	r4, r1
 800c17c:	b976      	cbnz	r6, 800c19c <_Bfree+0x28>
 800c17e:	2010      	movs	r0, #16
 800c180:	f7fe fada 	bl	800a738 <malloc>
 800c184:	4602      	mov	r2, r0
 800c186:	61e8      	str	r0, [r5, #28]
 800c188:	b920      	cbnz	r0, 800c194 <_Bfree+0x20>
 800c18a:	4b09      	ldr	r3, [pc, #36]	@ (800c1b0 <_Bfree+0x3c>)
 800c18c:	4809      	ldr	r0, [pc, #36]	@ (800c1b4 <_Bfree+0x40>)
 800c18e:	218f      	movs	r1, #143	@ 0x8f
 800c190:	f001 f822 	bl	800d1d8 <__assert_func>
 800c194:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c198:	6006      	str	r6, [r0, #0]
 800c19a:	60c6      	str	r6, [r0, #12]
 800c19c:	b13c      	cbz	r4, 800c1ae <_Bfree+0x3a>
 800c19e:	69eb      	ldr	r3, [r5, #28]
 800c1a0:	6862      	ldr	r2, [r4, #4]
 800c1a2:	68db      	ldr	r3, [r3, #12]
 800c1a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c1a8:	6021      	str	r1, [r4, #0]
 800c1aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c1ae:	bd70      	pop	{r4, r5, r6, pc}
 800c1b0:	0800dc12 	.word	0x0800dc12
 800c1b4:	0800dc29 	.word	0x0800dc29

0800c1b8 <__multadd>:
 800c1b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1bc:	690d      	ldr	r5, [r1, #16]
 800c1be:	4607      	mov	r7, r0
 800c1c0:	460c      	mov	r4, r1
 800c1c2:	461e      	mov	r6, r3
 800c1c4:	f101 0c14 	add.w	ip, r1, #20
 800c1c8:	2000      	movs	r0, #0
 800c1ca:	f8dc 3000 	ldr.w	r3, [ip]
 800c1ce:	b299      	uxth	r1, r3
 800c1d0:	fb02 6101 	mla	r1, r2, r1, r6
 800c1d4:	0c1e      	lsrs	r6, r3, #16
 800c1d6:	0c0b      	lsrs	r3, r1, #16
 800c1d8:	fb02 3306 	mla	r3, r2, r6, r3
 800c1dc:	b289      	uxth	r1, r1
 800c1de:	3001      	adds	r0, #1
 800c1e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c1e4:	4285      	cmp	r5, r0
 800c1e6:	f84c 1b04 	str.w	r1, [ip], #4
 800c1ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c1ee:	dcec      	bgt.n	800c1ca <__multadd+0x12>
 800c1f0:	b30e      	cbz	r6, 800c236 <__multadd+0x7e>
 800c1f2:	68a3      	ldr	r3, [r4, #8]
 800c1f4:	42ab      	cmp	r3, r5
 800c1f6:	dc19      	bgt.n	800c22c <__multadd+0x74>
 800c1f8:	6861      	ldr	r1, [r4, #4]
 800c1fa:	4638      	mov	r0, r7
 800c1fc:	3101      	adds	r1, #1
 800c1fe:	f7ff ff79 	bl	800c0f4 <_Balloc>
 800c202:	4680      	mov	r8, r0
 800c204:	b928      	cbnz	r0, 800c212 <__multadd+0x5a>
 800c206:	4602      	mov	r2, r0
 800c208:	4b0c      	ldr	r3, [pc, #48]	@ (800c23c <__multadd+0x84>)
 800c20a:	480d      	ldr	r0, [pc, #52]	@ (800c240 <__multadd+0x88>)
 800c20c:	21ba      	movs	r1, #186	@ 0xba
 800c20e:	f000 ffe3 	bl	800d1d8 <__assert_func>
 800c212:	6922      	ldr	r2, [r4, #16]
 800c214:	3202      	adds	r2, #2
 800c216:	f104 010c 	add.w	r1, r4, #12
 800c21a:	0092      	lsls	r2, r2, #2
 800c21c:	300c      	adds	r0, #12
 800c21e:	f7ff fbbc 	bl	800b99a <memcpy>
 800c222:	4621      	mov	r1, r4
 800c224:	4638      	mov	r0, r7
 800c226:	f7ff ffa5 	bl	800c174 <_Bfree>
 800c22a:	4644      	mov	r4, r8
 800c22c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c230:	3501      	adds	r5, #1
 800c232:	615e      	str	r6, [r3, #20]
 800c234:	6125      	str	r5, [r4, #16]
 800c236:	4620      	mov	r0, r4
 800c238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c23c:	0800dba1 	.word	0x0800dba1
 800c240:	0800dc29 	.word	0x0800dc29

0800c244 <__s2b>:
 800c244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c248:	460c      	mov	r4, r1
 800c24a:	4615      	mov	r5, r2
 800c24c:	461f      	mov	r7, r3
 800c24e:	2209      	movs	r2, #9
 800c250:	3308      	adds	r3, #8
 800c252:	4606      	mov	r6, r0
 800c254:	fb93 f3f2 	sdiv	r3, r3, r2
 800c258:	2100      	movs	r1, #0
 800c25a:	2201      	movs	r2, #1
 800c25c:	429a      	cmp	r2, r3
 800c25e:	db09      	blt.n	800c274 <__s2b+0x30>
 800c260:	4630      	mov	r0, r6
 800c262:	f7ff ff47 	bl	800c0f4 <_Balloc>
 800c266:	b940      	cbnz	r0, 800c27a <__s2b+0x36>
 800c268:	4602      	mov	r2, r0
 800c26a:	4b19      	ldr	r3, [pc, #100]	@ (800c2d0 <__s2b+0x8c>)
 800c26c:	4819      	ldr	r0, [pc, #100]	@ (800c2d4 <__s2b+0x90>)
 800c26e:	21d3      	movs	r1, #211	@ 0xd3
 800c270:	f000 ffb2 	bl	800d1d8 <__assert_func>
 800c274:	0052      	lsls	r2, r2, #1
 800c276:	3101      	adds	r1, #1
 800c278:	e7f0      	b.n	800c25c <__s2b+0x18>
 800c27a:	9b08      	ldr	r3, [sp, #32]
 800c27c:	6143      	str	r3, [r0, #20]
 800c27e:	2d09      	cmp	r5, #9
 800c280:	f04f 0301 	mov.w	r3, #1
 800c284:	6103      	str	r3, [r0, #16]
 800c286:	dd16      	ble.n	800c2b6 <__s2b+0x72>
 800c288:	f104 0909 	add.w	r9, r4, #9
 800c28c:	46c8      	mov	r8, r9
 800c28e:	442c      	add	r4, r5
 800c290:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c294:	4601      	mov	r1, r0
 800c296:	3b30      	subs	r3, #48	@ 0x30
 800c298:	220a      	movs	r2, #10
 800c29a:	4630      	mov	r0, r6
 800c29c:	f7ff ff8c 	bl	800c1b8 <__multadd>
 800c2a0:	45a0      	cmp	r8, r4
 800c2a2:	d1f5      	bne.n	800c290 <__s2b+0x4c>
 800c2a4:	f1a5 0408 	sub.w	r4, r5, #8
 800c2a8:	444c      	add	r4, r9
 800c2aa:	1b2d      	subs	r5, r5, r4
 800c2ac:	1963      	adds	r3, r4, r5
 800c2ae:	42bb      	cmp	r3, r7
 800c2b0:	db04      	blt.n	800c2bc <__s2b+0x78>
 800c2b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2b6:	340a      	adds	r4, #10
 800c2b8:	2509      	movs	r5, #9
 800c2ba:	e7f6      	b.n	800c2aa <__s2b+0x66>
 800c2bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c2c0:	4601      	mov	r1, r0
 800c2c2:	3b30      	subs	r3, #48	@ 0x30
 800c2c4:	220a      	movs	r2, #10
 800c2c6:	4630      	mov	r0, r6
 800c2c8:	f7ff ff76 	bl	800c1b8 <__multadd>
 800c2cc:	e7ee      	b.n	800c2ac <__s2b+0x68>
 800c2ce:	bf00      	nop
 800c2d0:	0800dba1 	.word	0x0800dba1
 800c2d4:	0800dc29 	.word	0x0800dc29

0800c2d8 <__hi0bits>:
 800c2d8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c2dc:	4603      	mov	r3, r0
 800c2de:	bf36      	itet	cc
 800c2e0:	0403      	lslcc	r3, r0, #16
 800c2e2:	2000      	movcs	r0, #0
 800c2e4:	2010      	movcc	r0, #16
 800c2e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c2ea:	bf3c      	itt	cc
 800c2ec:	021b      	lslcc	r3, r3, #8
 800c2ee:	3008      	addcc	r0, #8
 800c2f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c2f4:	bf3c      	itt	cc
 800c2f6:	011b      	lslcc	r3, r3, #4
 800c2f8:	3004      	addcc	r0, #4
 800c2fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c2fe:	bf3c      	itt	cc
 800c300:	009b      	lslcc	r3, r3, #2
 800c302:	3002      	addcc	r0, #2
 800c304:	2b00      	cmp	r3, #0
 800c306:	db05      	blt.n	800c314 <__hi0bits+0x3c>
 800c308:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c30c:	f100 0001 	add.w	r0, r0, #1
 800c310:	bf08      	it	eq
 800c312:	2020      	moveq	r0, #32
 800c314:	4770      	bx	lr

0800c316 <__lo0bits>:
 800c316:	6803      	ldr	r3, [r0, #0]
 800c318:	4602      	mov	r2, r0
 800c31a:	f013 0007 	ands.w	r0, r3, #7
 800c31e:	d00b      	beq.n	800c338 <__lo0bits+0x22>
 800c320:	07d9      	lsls	r1, r3, #31
 800c322:	d421      	bmi.n	800c368 <__lo0bits+0x52>
 800c324:	0798      	lsls	r0, r3, #30
 800c326:	bf49      	itett	mi
 800c328:	085b      	lsrmi	r3, r3, #1
 800c32a:	089b      	lsrpl	r3, r3, #2
 800c32c:	2001      	movmi	r0, #1
 800c32e:	6013      	strmi	r3, [r2, #0]
 800c330:	bf5c      	itt	pl
 800c332:	6013      	strpl	r3, [r2, #0]
 800c334:	2002      	movpl	r0, #2
 800c336:	4770      	bx	lr
 800c338:	b299      	uxth	r1, r3
 800c33a:	b909      	cbnz	r1, 800c340 <__lo0bits+0x2a>
 800c33c:	0c1b      	lsrs	r3, r3, #16
 800c33e:	2010      	movs	r0, #16
 800c340:	b2d9      	uxtb	r1, r3
 800c342:	b909      	cbnz	r1, 800c348 <__lo0bits+0x32>
 800c344:	3008      	adds	r0, #8
 800c346:	0a1b      	lsrs	r3, r3, #8
 800c348:	0719      	lsls	r1, r3, #28
 800c34a:	bf04      	itt	eq
 800c34c:	091b      	lsreq	r3, r3, #4
 800c34e:	3004      	addeq	r0, #4
 800c350:	0799      	lsls	r1, r3, #30
 800c352:	bf04      	itt	eq
 800c354:	089b      	lsreq	r3, r3, #2
 800c356:	3002      	addeq	r0, #2
 800c358:	07d9      	lsls	r1, r3, #31
 800c35a:	d403      	bmi.n	800c364 <__lo0bits+0x4e>
 800c35c:	085b      	lsrs	r3, r3, #1
 800c35e:	f100 0001 	add.w	r0, r0, #1
 800c362:	d003      	beq.n	800c36c <__lo0bits+0x56>
 800c364:	6013      	str	r3, [r2, #0]
 800c366:	4770      	bx	lr
 800c368:	2000      	movs	r0, #0
 800c36a:	4770      	bx	lr
 800c36c:	2020      	movs	r0, #32
 800c36e:	4770      	bx	lr

0800c370 <__i2b>:
 800c370:	b510      	push	{r4, lr}
 800c372:	460c      	mov	r4, r1
 800c374:	2101      	movs	r1, #1
 800c376:	f7ff febd 	bl	800c0f4 <_Balloc>
 800c37a:	4602      	mov	r2, r0
 800c37c:	b928      	cbnz	r0, 800c38a <__i2b+0x1a>
 800c37e:	4b05      	ldr	r3, [pc, #20]	@ (800c394 <__i2b+0x24>)
 800c380:	4805      	ldr	r0, [pc, #20]	@ (800c398 <__i2b+0x28>)
 800c382:	f240 1145 	movw	r1, #325	@ 0x145
 800c386:	f000 ff27 	bl	800d1d8 <__assert_func>
 800c38a:	2301      	movs	r3, #1
 800c38c:	6144      	str	r4, [r0, #20]
 800c38e:	6103      	str	r3, [r0, #16]
 800c390:	bd10      	pop	{r4, pc}
 800c392:	bf00      	nop
 800c394:	0800dba1 	.word	0x0800dba1
 800c398:	0800dc29 	.word	0x0800dc29

0800c39c <__multiply>:
 800c39c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3a0:	4614      	mov	r4, r2
 800c3a2:	690a      	ldr	r2, [r1, #16]
 800c3a4:	6923      	ldr	r3, [r4, #16]
 800c3a6:	429a      	cmp	r2, r3
 800c3a8:	bfa8      	it	ge
 800c3aa:	4623      	movge	r3, r4
 800c3ac:	460f      	mov	r7, r1
 800c3ae:	bfa4      	itt	ge
 800c3b0:	460c      	movge	r4, r1
 800c3b2:	461f      	movge	r7, r3
 800c3b4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c3b8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c3bc:	68a3      	ldr	r3, [r4, #8]
 800c3be:	6861      	ldr	r1, [r4, #4]
 800c3c0:	eb0a 0609 	add.w	r6, sl, r9
 800c3c4:	42b3      	cmp	r3, r6
 800c3c6:	b085      	sub	sp, #20
 800c3c8:	bfb8      	it	lt
 800c3ca:	3101      	addlt	r1, #1
 800c3cc:	f7ff fe92 	bl	800c0f4 <_Balloc>
 800c3d0:	b930      	cbnz	r0, 800c3e0 <__multiply+0x44>
 800c3d2:	4602      	mov	r2, r0
 800c3d4:	4b44      	ldr	r3, [pc, #272]	@ (800c4e8 <__multiply+0x14c>)
 800c3d6:	4845      	ldr	r0, [pc, #276]	@ (800c4ec <__multiply+0x150>)
 800c3d8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c3dc:	f000 fefc 	bl	800d1d8 <__assert_func>
 800c3e0:	f100 0514 	add.w	r5, r0, #20
 800c3e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c3e8:	462b      	mov	r3, r5
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	4543      	cmp	r3, r8
 800c3ee:	d321      	bcc.n	800c434 <__multiply+0x98>
 800c3f0:	f107 0114 	add.w	r1, r7, #20
 800c3f4:	f104 0214 	add.w	r2, r4, #20
 800c3f8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c3fc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c400:	9302      	str	r3, [sp, #8]
 800c402:	1b13      	subs	r3, r2, r4
 800c404:	3b15      	subs	r3, #21
 800c406:	f023 0303 	bic.w	r3, r3, #3
 800c40a:	3304      	adds	r3, #4
 800c40c:	f104 0715 	add.w	r7, r4, #21
 800c410:	42ba      	cmp	r2, r7
 800c412:	bf38      	it	cc
 800c414:	2304      	movcc	r3, #4
 800c416:	9301      	str	r3, [sp, #4]
 800c418:	9b02      	ldr	r3, [sp, #8]
 800c41a:	9103      	str	r1, [sp, #12]
 800c41c:	428b      	cmp	r3, r1
 800c41e:	d80c      	bhi.n	800c43a <__multiply+0x9e>
 800c420:	2e00      	cmp	r6, #0
 800c422:	dd03      	ble.n	800c42c <__multiply+0x90>
 800c424:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d05b      	beq.n	800c4e4 <__multiply+0x148>
 800c42c:	6106      	str	r6, [r0, #16]
 800c42e:	b005      	add	sp, #20
 800c430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c434:	f843 2b04 	str.w	r2, [r3], #4
 800c438:	e7d8      	b.n	800c3ec <__multiply+0x50>
 800c43a:	f8b1 a000 	ldrh.w	sl, [r1]
 800c43e:	f1ba 0f00 	cmp.w	sl, #0
 800c442:	d024      	beq.n	800c48e <__multiply+0xf2>
 800c444:	f104 0e14 	add.w	lr, r4, #20
 800c448:	46a9      	mov	r9, r5
 800c44a:	f04f 0c00 	mov.w	ip, #0
 800c44e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c452:	f8d9 3000 	ldr.w	r3, [r9]
 800c456:	fa1f fb87 	uxth.w	fp, r7
 800c45a:	b29b      	uxth	r3, r3
 800c45c:	fb0a 330b 	mla	r3, sl, fp, r3
 800c460:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c464:	f8d9 7000 	ldr.w	r7, [r9]
 800c468:	4463      	add	r3, ip
 800c46a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c46e:	fb0a c70b 	mla	r7, sl, fp, ip
 800c472:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c476:	b29b      	uxth	r3, r3
 800c478:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c47c:	4572      	cmp	r2, lr
 800c47e:	f849 3b04 	str.w	r3, [r9], #4
 800c482:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c486:	d8e2      	bhi.n	800c44e <__multiply+0xb2>
 800c488:	9b01      	ldr	r3, [sp, #4]
 800c48a:	f845 c003 	str.w	ip, [r5, r3]
 800c48e:	9b03      	ldr	r3, [sp, #12]
 800c490:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c494:	3104      	adds	r1, #4
 800c496:	f1b9 0f00 	cmp.w	r9, #0
 800c49a:	d021      	beq.n	800c4e0 <__multiply+0x144>
 800c49c:	682b      	ldr	r3, [r5, #0]
 800c49e:	f104 0c14 	add.w	ip, r4, #20
 800c4a2:	46ae      	mov	lr, r5
 800c4a4:	f04f 0a00 	mov.w	sl, #0
 800c4a8:	f8bc b000 	ldrh.w	fp, [ip]
 800c4ac:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c4b0:	fb09 770b 	mla	r7, r9, fp, r7
 800c4b4:	4457      	add	r7, sl
 800c4b6:	b29b      	uxth	r3, r3
 800c4b8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c4bc:	f84e 3b04 	str.w	r3, [lr], #4
 800c4c0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c4c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c4c8:	f8be 3000 	ldrh.w	r3, [lr]
 800c4cc:	fb09 330a 	mla	r3, r9, sl, r3
 800c4d0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c4d4:	4562      	cmp	r2, ip
 800c4d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c4da:	d8e5      	bhi.n	800c4a8 <__multiply+0x10c>
 800c4dc:	9f01      	ldr	r7, [sp, #4]
 800c4de:	51eb      	str	r3, [r5, r7]
 800c4e0:	3504      	adds	r5, #4
 800c4e2:	e799      	b.n	800c418 <__multiply+0x7c>
 800c4e4:	3e01      	subs	r6, #1
 800c4e6:	e79b      	b.n	800c420 <__multiply+0x84>
 800c4e8:	0800dba1 	.word	0x0800dba1
 800c4ec:	0800dc29 	.word	0x0800dc29

0800c4f0 <__pow5mult>:
 800c4f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4f4:	4615      	mov	r5, r2
 800c4f6:	f012 0203 	ands.w	r2, r2, #3
 800c4fa:	4607      	mov	r7, r0
 800c4fc:	460e      	mov	r6, r1
 800c4fe:	d007      	beq.n	800c510 <__pow5mult+0x20>
 800c500:	4c25      	ldr	r4, [pc, #148]	@ (800c598 <__pow5mult+0xa8>)
 800c502:	3a01      	subs	r2, #1
 800c504:	2300      	movs	r3, #0
 800c506:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c50a:	f7ff fe55 	bl	800c1b8 <__multadd>
 800c50e:	4606      	mov	r6, r0
 800c510:	10ad      	asrs	r5, r5, #2
 800c512:	d03d      	beq.n	800c590 <__pow5mult+0xa0>
 800c514:	69fc      	ldr	r4, [r7, #28]
 800c516:	b97c      	cbnz	r4, 800c538 <__pow5mult+0x48>
 800c518:	2010      	movs	r0, #16
 800c51a:	f7fe f90d 	bl	800a738 <malloc>
 800c51e:	4602      	mov	r2, r0
 800c520:	61f8      	str	r0, [r7, #28]
 800c522:	b928      	cbnz	r0, 800c530 <__pow5mult+0x40>
 800c524:	4b1d      	ldr	r3, [pc, #116]	@ (800c59c <__pow5mult+0xac>)
 800c526:	481e      	ldr	r0, [pc, #120]	@ (800c5a0 <__pow5mult+0xb0>)
 800c528:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c52c:	f000 fe54 	bl	800d1d8 <__assert_func>
 800c530:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c534:	6004      	str	r4, [r0, #0]
 800c536:	60c4      	str	r4, [r0, #12]
 800c538:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c53c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c540:	b94c      	cbnz	r4, 800c556 <__pow5mult+0x66>
 800c542:	f240 2171 	movw	r1, #625	@ 0x271
 800c546:	4638      	mov	r0, r7
 800c548:	f7ff ff12 	bl	800c370 <__i2b>
 800c54c:	2300      	movs	r3, #0
 800c54e:	f8c8 0008 	str.w	r0, [r8, #8]
 800c552:	4604      	mov	r4, r0
 800c554:	6003      	str	r3, [r0, #0]
 800c556:	f04f 0900 	mov.w	r9, #0
 800c55a:	07eb      	lsls	r3, r5, #31
 800c55c:	d50a      	bpl.n	800c574 <__pow5mult+0x84>
 800c55e:	4631      	mov	r1, r6
 800c560:	4622      	mov	r2, r4
 800c562:	4638      	mov	r0, r7
 800c564:	f7ff ff1a 	bl	800c39c <__multiply>
 800c568:	4631      	mov	r1, r6
 800c56a:	4680      	mov	r8, r0
 800c56c:	4638      	mov	r0, r7
 800c56e:	f7ff fe01 	bl	800c174 <_Bfree>
 800c572:	4646      	mov	r6, r8
 800c574:	106d      	asrs	r5, r5, #1
 800c576:	d00b      	beq.n	800c590 <__pow5mult+0xa0>
 800c578:	6820      	ldr	r0, [r4, #0]
 800c57a:	b938      	cbnz	r0, 800c58c <__pow5mult+0x9c>
 800c57c:	4622      	mov	r2, r4
 800c57e:	4621      	mov	r1, r4
 800c580:	4638      	mov	r0, r7
 800c582:	f7ff ff0b 	bl	800c39c <__multiply>
 800c586:	6020      	str	r0, [r4, #0]
 800c588:	f8c0 9000 	str.w	r9, [r0]
 800c58c:	4604      	mov	r4, r0
 800c58e:	e7e4      	b.n	800c55a <__pow5mult+0x6a>
 800c590:	4630      	mov	r0, r6
 800c592:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c596:	bf00      	nop
 800c598:	0800dc84 	.word	0x0800dc84
 800c59c:	0800dc12 	.word	0x0800dc12
 800c5a0:	0800dc29 	.word	0x0800dc29

0800c5a4 <__lshift>:
 800c5a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5a8:	460c      	mov	r4, r1
 800c5aa:	6849      	ldr	r1, [r1, #4]
 800c5ac:	6923      	ldr	r3, [r4, #16]
 800c5ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c5b2:	68a3      	ldr	r3, [r4, #8]
 800c5b4:	4607      	mov	r7, r0
 800c5b6:	4691      	mov	r9, r2
 800c5b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c5bc:	f108 0601 	add.w	r6, r8, #1
 800c5c0:	42b3      	cmp	r3, r6
 800c5c2:	db0b      	blt.n	800c5dc <__lshift+0x38>
 800c5c4:	4638      	mov	r0, r7
 800c5c6:	f7ff fd95 	bl	800c0f4 <_Balloc>
 800c5ca:	4605      	mov	r5, r0
 800c5cc:	b948      	cbnz	r0, 800c5e2 <__lshift+0x3e>
 800c5ce:	4602      	mov	r2, r0
 800c5d0:	4b28      	ldr	r3, [pc, #160]	@ (800c674 <__lshift+0xd0>)
 800c5d2:	4829      	ldr	r0, [pc, #164]	@ (800c678 <__lshift+0xd4>)
 800c5d4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c5d8:	f000 fdfe 	bl	800d1d8 <__assert_func>
 800c5dc:	3101      	adds	r1, #1
 800c5de:	005b      	lsls	r3, r3, #1
 800c5e0:	e7ee      	b.n	800c5c0 <__lshift+0x1c>
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	f100 0114 	add.w	r1, r0, #20
 800c5e8:	f100 0210 	add.w	r2, r0, #16
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	4553      	cmp	r3, sl
 800c5f0:	db33      	blt.n	800c65a <__lshift+0xb6>
 800c5f2:	6920      	ldr	r0, [r4, #16]
 800c5f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c5f8:	f104 0314 	add.w	r3, r4, #20
 800c5fc:	f019 091f 	ands.w	r9, r9, #31
 800c600:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c604:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c608:	d02b      	beq.n	800c662 <__lshift+0xbe>
 800c60a:	f1c9 0e20 	rsb	lr, r9, #32
 800c60e:	468a      	mov	sl, r1
 800c610:	2200      	movs	r2, #0
 800c612:	6818      	ldr	r0, [r3, #0]
 800c614:	fa00 f009 	lsl.w	r0, r0, r9
 800c618:	4310      	orrs	r0, r2
 800c61a:	f84a 0b04 	str.w	r0, [sl], #4
 800c61e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c622:	459c      	cmp	ip, r3
 800c624:	fa22 f20e 	lsr.w	r2, r2, lr
 800c628:	d8f3      	bhi.n	800c612 <__lshift+0x6e>
 800c62a:	ebac 0304 	sub.w	r3, ip, r4
 800c62e:	3b15      	subs	r3, #21
 800c630:	f023 0303 	bic.w	r3, r3, #3
 800c634:	3304      	adds	r3, #4
 800c636:	f104 0015 	add.w	r0, r4, #21
 800c63a:	4584      	cmp	ip, r0
 800c63c:	bf38      	it	cc
 800c63e:	2304      	movcc	r3, #4
 800c640:	50ca      	str	r2, [r1, r3]
 800c642:	b10a      	cbz	r2, 800c648 <__lshift+0xa4>
 800c644:	f108 0602 	add.w	r6, r8, #2
 800c648:	3e01      	subs	r6, #1
 800c64a:	4638      	mov	r0, r7
 800c64c:	612e      	str	r6, [r5, #16]
 800c64e:	4621      	mov	r1, r4
 800c650:	f7ff fd90 	bl	800c174 <_Bfree>
 800c654:	4628      	mov	r0, r5
 800c656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c65a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c65e:	3301      	adds	r3, #1
 800c660:	e7c5      	b.n	800c5ee <__lshift+0x4a>
 800c662:	3904      	subs	r1, #4
 800c664:	f853 2b04 	ldr.w	r2, [r3], #4
 800c668:	f841 2f04 	str.w	r2, [r1, #4]!
 800c66c:	459c      	cmp	ip, r3
 800c66e:	d8f9      	bhi.n	800c664 <__lshift+0xc0>
 800c670:	e7ea      	b.n	800c648 <__lshift+0xa4>
 800c672:	bf00      	nop
 800c674:	0800dba1 	.word	0x0800dba1
 800c678:	0800dc29 	.word	0x0800dc29

0800c67c <__mcmp>:
 800c67c:	690a      	ldr	r2, [r1, #16]
 800c67e:	4603      	mov	r3, r0
 800c680:	6900      	ldr	r0, [r0, #16]
 800c682:	1a80      	subs	r0, r0, r2
 800c684:	b530      	push	{r4, r5, lr}
 800c686:	d10e      	bne.n	800c6a6 <__mcmp+0x2a>
 800c688:	3314      	adds	r3, #20
 800c68a:	3114      	adds	r1, #20
 800c68c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c690:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c694:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c698:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c69c:	4295      	cmp	r5, r2
 800c69e:	d003      	beq.n	800c6a8 <__mcmp+0x2c>
 800c6a0:	d205      	bcs.n	800c6ae <__mcmp+0x32>
 800c6a2:	f04f 30ff 	mov.w	r0, #4294967295
 800c6a6:	bd30      	pop	{r4, r5, pc}
 800c6a8:	42a3      	cmp	r3, r4
 800c6aa:	d3f3      	bcc.n	800c694 <__mcmp+0x18>
 800c6ac:	e7fb      	b.n	800c6a6 <__mcmp+0x2a>
 800c6ae:	2001      	movs	r0, #1
 800c6b0:	e7f9      	b.n	800c6a6 <__mcmp+0x2a>
	...

0800c6b4 <__mdiff>:
 800c6b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6b8:	4689      	mov	r9, r1
 800c6ba:	4606      	mov	r6, r0
 800c6bc:	4611      	mov	r1, r2
 800c6be:	4648      	mov	r0, r9
 800c6c0:	4614      	mov	r4, r2
 800c6c2:	f7ff ffdb 	bl	800c67c <__mcmp>
 800c6c6:	1e05      	subs	r5, r0, #0
 800c6c8:	d112      	bne.n	800c6f0 <__mdiff+0x3c>
 800c6ca:	4629      	mov	r1, r5
 800c6cc:	4630      	mov	r0, r6
 800c6ce:	f7ff fd11 	bl	800c0f4 <_Balloc>
 800c6d2:	4602      	mov	r2, r0
 800c6d4:	b928      	cbnz	r0, 800c6e2 <__mdiff+0x2e>
 800c6d6:	4b3f      	ldr	r3, [pc, #252]	@ (800c7d4 <__mdiff+0x120>)
 800c6d8:	f240 2137 	movw	r1, #567	@ 0x237
 800c6dc:	483e      	ldr	r0, [pc, #248]	@ (800c7d8 <__mdiff+0x124>)
 800c6de:	f000 fd7b 	bl	800d1d8 <__assert_func>
 800c6e2:	2301      	movs	r3, #1
 800c6e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c6e8:	4610      	mov	r0, r2
 800c6ea:	b003      	add	sp, #12
 800c6ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6f0:	bfbc      	itt	lt
 800c6f2:	464b      	movlt	r3, r9
 800c6f4:	46a1      	movlt	r9, r4
 800c6f6:	4630      	mov	r0, r6
 800c6f8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c6fc:	bfba      	itte	lt
 800c6fe:	461c      	movlt	r4, r3
 800c700:	2501      	movlt	r5, #1
 800c702:	2500      	movge	r5, #0
 800c704:	f7ff fcf6 	bl	800c0f4 <_Balloc>
 800c708:	4602      	mov	r2, r0
 800c70a:	b918      	cbnz	r0, 800c714 <__mdiff+0x60>
 800c70c:	4b31      	ldr	r3, [pc, #196]	@ (800c7d4 <__mdiff+0x120>)
 800c70e:	f240 2145 	movw	r1, #581	@ 0x245
 800c712:	e7e3      	b.n	800c6dc <__mdiff+0x28>
 800c714:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c718:	6926      	ldr	r6, [r4, #16]
 800c71a:	60c5      	str	r5, [r0, #12]
 800c71c:	f109 0310 	add.w	r3, r9, #16
 800c720:	f109 0514 	add.w	r5, r9, #20
 800c724:	f104 0e14 	add.w	lr, r4, #20
 800c728:	f100 0b14 	add.w	fp, r0, #20
 800c72c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c730:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c734:	9301      	str	r3, [sp, #4]
 800c736:	46d9      	mov	r9, fp
 800c738:	f04f 0c00 	mov.w	ip, #0
 800c73c:	9b01      	ldr	r3, [sp, #4]
 800c73e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c742:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c746:	9301      	str	r3, [sp, #4]
 800c748:	fa1f f38a 	uxth.w	r3, sl
 800c74c:	4619      	mov	r1, r3
 800c74e:	b283      	uxth	r3, r0
 800c750:	1acb      	subs	r3, r1, r3
 800c752:	0c00      	lsrs	r0, r0, #16
 800c754:	4463      	add	r3, ip
 800c756:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c75a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c75e:	b29b      	uxth	r3, r3
 800c760:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c764:	4576      	cmp	r6, lr
 800c766:	f849 3b04 	str.w	r3, [r9], #4
 800c76a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c76e:	d8e5      	bhi.n	800c73c <__mdiff+0x88>
 800c770:	1b33      	subs	r3, r6, r4
 800c772:	3b15      	subs	r3, #21
 800c774:	f023 0303 	bic.w	r3, r3, #3
 800c778:	3415      	adds	r4, #21
 800c77a:	3304      	adds	r3, #4
 800c77c:	42a6      	cmp	r6, r4
 800c77e:	bf38      	it	cc
 800c780:	2304      	movcc	r3, #4
 800c782:	441d      	add	r5, r3
 800c784:	445b      	add	r3, fp
 800c786:	461e      	mov	r6, r3
 800c788:	462c      	mov	r4, r5
 800c78a:	4544      	cmp	r4, r8
 800c78c:	d30e      	bcc.n	800c7ac <__mdiff+0xf8>
 800c78e:	f108 0103 	add.w	r1, r8, #3
 800c792:	1b49      	subs	r1, r1, r5
 800c794:	f021 0103 	bic.w	r1, r1, #3
 800c798:	3d03      	subs	r5, #3
 800c79a:	45a8      	cmp	r8, r5
 800c79c:	bf38      	it	cc
 800c79e:	2100      	movcc	r1, #0
 800c7a0:	440b      	add	r3, r1
 800c7a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c7a6:	b191      	cbz	r1, 800c7ce <__mdiff+0x11a>
 800c7a8:	6117      	str	r7, [r2, #16]
 800c7aa:	e79d      	b.n	800c6e8 <__mdiff+0x34>
 800c7ac:	f854 1b04 	ldr.w	r1, [r4], #4
 800c7b0:	46e6      	mov	lr, ip
 800c7b2:	0c08      	lsrs	r0, r1, #16
 800c7b4:	fa1c fc81 	uxtah	ip, ip, r1
 800c7b8:	4471      	add	r1, lr
 800c7ba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c7be:	b289      	uxth	r1, r1
 800c7c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c7c4:	f846 1b04 	str.w	r1, [r6], #4
 800c7c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c7cc:	e7dd      	b.n	800c78a <__mdiff+0xd6>
 800c7ce:	3f01      	subs	r7, #1
 800c7d0:	e7e7      	b.n	800c7a2 <__mdiff+0xee>
 800c7d2:	bf00      	nop
 800c7d4:	0800dba1 	.word	0x0800dba1
 800c7d8:	0800dc29 	.word	0x0800dc29

0800c7dc <__ulp>:
 800c7dc:	b082      	sub	sp, #8
 800c7de:	ed8d 0b00 	vstr	d0, [sp]
 800c7e2:	9a01      	ldr	r2, [sp, #4]
 800c7e4:	4b0f      	ldr	r3, [pc, #60]	@ (800c824 <__ulp+0x48>)
 800c7e6:	4013      	ands	r3, r2
 800c7e8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	dc08      	bgt.n	800c802 <__ulp+0x26>
 800c7f0:	425b      	negs	r3, r3
 800c7f2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c7f6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c7fa:	da04      	bge.n	800c806 <__ulp+0x2a>
 800c7fc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c800:	4113      	asrs	r3, r2
 800c802:	2200      	movs	r2, #0
 800c804:	e008      	b.n	800c818 <__ulp+0x3c>
 800c806:	f1a2 0314 	sub.w	r3, r2, #20
 800c80a:	2b1e      	cmp	r3, #30
 800c80c:	bfda      	itte	le
 800c80e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c812:	40da      	lsrle	r2, r3
 800c814:	2201      	movgt	r2, #1
 800c816:	2300      	movs	r3, #0
 800c818:	4619      	mov	r1, r3
 800c81a:	4610      	mov	r0, r2
 800c81c:	ec41 0b10 	vmov	d0, r0, r1
 800c820:	b002      	add	sp, #8
 800c822:	4770      	bx	lr
 800c824:	7ff00000 	.word	0x7ff00000

0800c828 <__b2d>:
 800c828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c82c:	6906      	ldr	r6, [r0, #16]
 800c82e:	f100 0814 	add.w	r8, r0, #20
 800c832:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c836:	1f37      	subs	r7, r6, #4
 800c838:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c83c:	4610      	mov	r0, r2
 800c83e:	f7ff fd4b 	bl	800c2d8 <__hi0bits>
 800c842:	f1c0 0320 	rsb	r3, r0, #32
 800c846:	280a      	cmp	r0, #10
 800c848:	600b      	str	r3, [r1, #0]
 800c84a:	491b      	ldr	r1, [pc, #108]	@ (800c8b8 <__b2d+0x90>)
 800c84c:	dc15      	bgt.n	800c87a <__b2d+0x52>
 800c84e:	f1c0 0c0b 	rsb	ip, r0, #11
 800c852:	fa22 f30c 	lsr.w	r3, r2, ip
 800c856:	45b8      	cmp	r8, r7
 800c858:	ea43 0501 	orr.w	r5, r3, r1
 800c85c:	bf34      	ite	cc
 800c85e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c862:	2300      	movcs	r3, #0
 800c864:	3015      	adds	r0, #21
 800c866:	fa02 f000 	lsl.w	r0, r2, r0
 800c86a:	fa23 f30c 	lsr.w	r3, r3, ip
 800c86e:	4303      	orrs	r3, r0
 800c870:	461c      	mov	r4, r3
 800c872:	ec45 4b10 	vmov	d0, r4, r5
 800c876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c87a:	45b8      	cmp	r8, r7
 800c87c:	bf3a      	itte	cc
 800c87e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c882:	f1a6 0708 	subcc.w	r7, r6, #8
 800c886:	2300      	movcs	r3, #0
 800c888:	380b      	subs	r0, #11
 800c88a:	d012      	beq.n	800c8b2 <__b2d+0x8a>
 800c88c:	f1c0 0120 	rsb	r1, r0, #32
 800c890:	fa23 f401 	lsr.w	r4, r3, r1
 800c894:	4082      	lsls	r2, r0
 800c896:	4322      	orrs	r2, r4
 800c898:	4547      	cmp	r7, r8
 800c89a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c89e:	bf8c      	ite	hi
 800c8a0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c8a4:	2200      	movls	r2, #0
 800c8a6:	4083      	lsls	r3, r0
 800c8a8:	40ca      	lsrs	r2, r1
 800c8aa:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c8ae:	4313      	orrs	r3, r2
 800c8b0:	e7de      	b.n	800c870 <__b2d+0x48>
 800c8b2:	ea42 0501 	orr.w	r5, r2, r1
 800c8b6:	e7db      	b.n	800c870 <__b2d+0x48>
 800c8b8:	3ff00000 	.word	0x3ff00000

0800c8bc <__d2b>:
 800c8bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c8c0:	460f      	mov	r7, r1
 800c8c2:	2101      	movs	r1, #1
 800c8c4:	ec59 8b10 	vmov	r8, r9, d0
 800c8c8:	4616      	mov	r6, r2
 800c8ca:	f7ff fc13 	bl	800c0f4 <_Balloc>
 800c8ce:	4604      	mov	r4, r0
 800c8d0:	b930      	cbnz	r0, 800c8e0 <__d2b+0x24>
 800c8d2:	4602      	mov	r2, r0
 800c8d4:	4b23      	ldr	r3, [pc, #140]	@ (800c964 <__d2b+0xa8>)
 800c8d6:	4824      	ldr	r0, [pc, #144]	@ (800c968 <__d2b+0xac>)
 800c8d8:	f240 310f 	movw	r1, #783	@ 0x30f
 800c8dc:	f000 fc7c 	bl	800d1d8 <__assert_func>
 800c8e0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c8e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c8e8:	b10d      	cbz	r5, 800c8ee <__d2b+0x32>
 800c8ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c8ee:	9301      	str	r3, [sp, #4]
 800c8f0:	f1b8 0300 	subs.w	r3, r8, #0
 800c8f4:	d023      	beq.n	800c93e <__d2b+0x82>
 800c8f6:	4668      	mov	r0, sp
 800c8f8:	9300      	str	r3, [sp, #0]
 800c8fa:	f7ff fd0c 	bl	800c316 <__lo0bits>
 800c8fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c902:	b1d0      	cbz	r0, 800c93a <__d2b+0x7e>
 800c904:	f1c0 0320 	rsb	r3, r0, #32
 800c908:	fa02 f303 	lsl.w	r3, r2, r3
 800c90c:	430b      	orrs	r3, r1
 800c90e:	40c2      	lsrs	r2, r0
 800c910:	6163      	str	r3, [r4, #20]
 800c912:	9201      	str	r2, [sp, #4]
 800c914:	9b01      	ldr	r3, [sp, #4]
 800c916:	61a3      	str	r3, [r4, #24]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	bf0c      	ite	eq
 800c91c:	2201      	moveq	r2, #1
 800c91e:	2202      	movne	r2, #2
 800c920:	6122      	str	r2, [r4, #16]
 800c922:	b1a5      	cbz	r5, 800c94e <__d2b+0x92>
 800c924:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c928:	4405      	add	r5, r0
 800c92a:	603d      	str	r5, [r7, #0]
 800c92c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c930:	6030      	str	r0, [r6, #0]
 800c932:	4620      	mov	r0, r4
 800c934:	b003      	add	sp, #12
 800c936:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c93a:	6161      	str	r1, [r4, #20]
 800c93c:	e7ea      	b.n	800c914 <__d2b+0x58>
 800c93e:	a801      	add	r0, sp, #4
 800c940:	f7ff fce9 	bl	800c316 <__lo0bits>
 800c944:	9b01      	ldr	r3, [sp, #4]
 800c946:	6163      	str	r3, [r4, #20]
 800c948:	3020      	adds	r0, #32
 800c94a:	2201      	movs	r2, #1
 800c94c:	e7e8      	b.n	800c920 <__d2b+0x64>
 800c94e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c952:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c956:	6038      	str	r0, [r7, #0]
 800c958:	6918      	ldr	r0, [r3, #16]
 800c95a:	f7ff fcbd 	bl	800c2d8 <__hi0bits>
 800c95e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c962:	e7e5      	b.n	800c930 <__d2b+0x74>
 800c964:	0800dba1 	.word	0x0800dba1
 800c968:	0800dc29 	.word	0x0800dc29

0800c96c <__ratio>:
 800c96c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c970:	b085      	sub	sp, #20
 800c972:	e9cd 1000 	strd	r1, r0, [sp]
 800c976:	a902      	add	r1, sp, #8
 800c978:	f7ff ff56 	bl	800c828 <__b2d>
 800c97c:	9800      	ldr	r0, [sp, #0]
 800c97e:	a903      	add	r1, sp, #12
 800c980:	ec55 4b10 	vmov	r4, r5, d0
 800c984:	f7ff ff50 	bl	800c828 <__b2d>
 800c988:	9b01      	ldr	r3, [sp, #4]
 800c98a:	6919      	ldr	r1, [r3, #16]
 800c98c:	9b00      	ldr	r3, [sp, #0]
 800c98e:	691b      	ldr	r3, [r3, #16]
 800c990:	1ac9      	subs	r1, r1, r3
 800c992:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c996:	1a9b      	subs	r3, r3, r2
 800c998:	ec5b ab10 	vmov	sl, fp, d0
 800c99c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	bfce      	itee	gt
 800c9a4:	462a      	movgt	r2, r5
 800c9a6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c9aa:	465a      	movle	r2, fp
 800c9ac:	462f      	mov	r7, r5
 800c9ae:	46d9      	mov	r9, fp
 800c9b0:	bfcc      	ite	gt
 800c9b2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c9b6:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c9ba:	464b      	mov	r3, r9
 800c9bc:	4652      	mov	r2, sl
 800c9be:	4620      	mov	r0, r4
 800c9c0:	4639      	mov	r1, r7
 800c9c2:	f7f3 ff73 	bl	80008ac <__aeabi_ddiv>
 800c9c6:	ec41 0b10 	vmov	d0, r0, r1
 800c9ca:	b005      	add	sp, #20
 800c9cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c9d0 <__copybits>:
 800c9d0:	3901      	subs	r1, #1
 800c9d2:	b570      	push	{r4, r5, r6, lr}
 800c9d4:	1149      	asrs	r1, r1, #5
 800c9d6:	6914      	ldr	r4, [r2, #16]
 800c9d8:	3101      	adds	r1, #1
 800c9da:	f102 0314 	add.w	r3, r2, #20
 800c9de:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c9e2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c9e6:	1f05      	subs	r5, r0, #4
 800c9e8:	42a3      	cmp	r3, r4
 800c9ea:	d30c      	bcc.n	800ca06 <__copybits+0x36>
 800c9ec:	1aa3      	subs	r3, r4, r2
 800c9ee:	3b11      	subs	r3, #17
 800c9f0:	f023 0303 	bic.w	r3, r3, #3
 800c9f4:	3211      	adds	r2, #17
 800c9f6:	42a2      	cmp	r2, r4
 800c9f8:	bf88      	it	hi
 800c9fa:	2300      	movhi	r3, #0
 800c9fc:	4418      	add	r0, r3
 800c9fe:	2300      	movs	r3, #0
 800ca00:	4288      	cmp	r0, r1
 800ca02:	d305      	bcc.n	800ca10 <__copybits+0x40>
 800ca04:	bd70      	pop	{r4, r5, r6, pc}
 800ca06:	f853 6b04 	ldr.w	r6, [r3], #4
 800ca0a:	f845 6f04 	str.w	r6, [r5, #4]!
 800ca0e:	e7eb      	b.n	800c9e8 <__copybits+0x18>
 800ca10:	f840 3b04 	str.w	r3, [r0], #4
 800ca14:	e7f4      	b.n	800ca00 <__copybits+0x30>

0800ca16 <__any_on>:
 800ca16:	f100 0214 	add.w	r2, r0, #20
 800ca1a:	6900      	ldr	r0, [r0, #16]
 800ca1c:	114b      	asrs	r3, r1, #5
 800ca1e:	4298      	cmp	r0, r3
 800ca20:	b510      	push	{r4, lr}
 800ca22:	db11      	blt.n	800ca48 <__any_on+0x32>
 800ca24:	dd0a      	ble.n	800ca3c <__any_on+0x26>
 800ca26:	f011 011f 	ands.w	r1, r1, #31
 800ca2a:	d007      	beq.n	800ca3c <__any_on+0x26>
 800ca2c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ca30:	fa24 f001 	lsr.w	r0, r4, r1
 800ca34:	fa00 f101 	lsl.w	r1, r0, r1
 800ca38:	428c      	cmp	r4, r1
 800ca3a:	d10b      	bne.n	800ca54 <__any_on+0x3e>
 800ca3c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ca40:	4293      	cmp	r3, r2
 800ca42:	d803      	bhi.n	800ca4c <__any_on+0x36>
 800ca44:	2000      	movs	r0, #0
 800ca46:	bd10      	pop	{r4, pc}
 800ca48:	4603      	mov	r3, r0
 800ca4a:	e7f7      	b.n	800ca3c <__any_on+0x26>
 800ca4c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ca50:	2900      	cmp	r1, #0
 800ca52:	d0f5      	beq.n	800ca40 <__any_on+0x2a>
 800ca54:	2001      	movs	r0, #1
 800ca56:	e7f6      	b.n	800ca46 <__any_on+0x30>

0800ca58 <_malloc_usable_size_r>:
 800ca58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca5c:	1f18      	subs	r0, r3, #4
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	bfbc      	itt	lt
 800ca62:	580b      	ldrlt	r3, [r1, r0]
 800ca64:	18c0      	addlt	r0, r0, r3
 800ca66:	4770      	bx	lr

0800ca68 <__ascii_wctomb>:
 800ca68:	4603      	mov	r3, r0
 800ca6a:	4608      	mov	r0, r1
 800ca6c:	b141      	cbz	r1, 800ca80 <__ascii_wctomb+0x18>
 800ca6e:	2aff      	cmp	r2, #255	@ 0xff
 800ca70:	d904      	bls.n	800ca7c <__ascii_wctomb+0x14>
 800ca72:	228a      	movs	r2, #138	@ 0x8a
 800ca74:	601a      	str	r2, [r3, #0]
 800ca76:	f04f 30ff 	mov.w	r0, #4294967295
 800ca7a:	4770      	bx	lr
 800ca7c:	700a      	strb	r2, [r1, #0]
 800ca7e:	2001      	movs	r0, #1
 800ca80:	4770      	bx	lr

0800ca82 <__ssputs_r>:
 800ca82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca86:	688e      	ldr	r6, [r1, #8]
 800ca88:	461f      	mov	r7, r3
 800ca8a:	42be      	cmp	r6, r7
 800ca8c:	680b      	ldr	r3, [r1, #0]
 800ca8e:	4682      	mov	sl, r0
 800ca90:	460c      	mov	r4, r1
 800ca92:	4690      	mov	r8, r2
 800ca94:	d82d      	bhi.n	800caf2 <__ssputs_r+0x70>
 800ca96:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ca9a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ca9e:	d026      	beq.n	800caee <__ssputs_r+0x6c>
 800caa0:	6965      	ldr	r5, [r4, #20]
 800caa2:	6909      	ldr	r1, [r1, #16]
 800caa4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800caa8:	eba3 0901 	sub.w	r9, r3, r1
 800caac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cab0:	1c7b      	adds	r3, r7, #1
 800cab2:	444b      	add	r3, r9
 800cab4:	106d      	asrs	r5, r5, #1
 800cab6:	429d      	cmp	r5, r3
 800cab8:	bf38      	it	cc
 800caba:	461d      	movcc	r5, r3
 800cabc:	0553      	lsls	r3, r2, #21
 800cabe:	d527      	bpl.n	800cb10 <__ssputs_r+0x8e>
 800cac0:	4629      	mov	r1, r5
 800cac2:	f7fd fe6b 	bl	800a79c <_malloc_r>
 800cac6:	4606      	mov	r6, r0
 800cac8:	b360      	cbz	r0, 800cb24 <__ssputs_r+0xa2>
 800caca:	6921      	ldr	r1, [r4, #16]
 800cacc:	464a      	mov	r2, r9
 800cace:	f7fe ff64 	bl	800b99a <memcpy>
 800cad2:	89a3      	ldrh	r3, [r4, #12]
 800cad4:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cad8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cadc:	81a3      	strh	r3, [r4, #12]
 800cade:	6126      	str	r6, [r4, #16]
 800cae0:	6165      	str	r5, [r4, #20]
 800cae2:	444e      	add	r6, r9
 800cae4:	eba5 0509 	sub.w	r5, r5, r9
 800cae8:	6026      	str	r6, [r4, #0]
 800caea:	60a5      	str	r5, [r4, #8]
 800caec:	463e      	mov	r6, r7
 800caee:	42be      	cmp	r6, r7
 800caf0:	d900      	bls.n	800caf4 <__ssputs_r+0x72>
 800caf2:	463e      	mov	r6, r7
 800caf4:	6820      	ldr	r0, [r4, #0]
 800caf6:	4632      	mov	r2, r6
 800caf8:	4641      	mov	r1, r8
 800cafa:	f000 fb53 	bl	800d1a4 <memmove>
 800cafe:	68a3      	ldr	r3, [r4, #8]
 800cb00:	1b9b      	subs	r3, r3, r6
 800cb02:	60a3      	str	r3, [r4, #8]
 800cb04:	6823      	ldr	r3, [r4, #0]
 800cb06:	4433      	add	r3, r6
 800cb08:	6023      	str	r3, [r4, #0]
 800cb0a:	2000      	movs	r0, #0
 800cb0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb10:	462a      	mov	r2, r5
 800cb12:	f7fd fed7 	bl	800a8c4 <_realloc_r>
 800cb16:	4606      	mov	r6, r0
 800cb18:	2800      	cmp	r0, #0
 800cb1a:	d1e0      	bne.n	800cade <__ssputs_r+0x5c>
 800cb1c:	6921      	ldr	r1, [r4, #16]
 800cb1e:	4650      	mov	r0, sl
 800cb20:	f7fe ff52 	bl	800b9c8 <_free_r>
 800cb24:	230c      	movs	r3, #12
 800cb26:	f8ca 3000 	str.w	r3, [sl]
 800cb2a:	89a3      	ldrh	r3, [r4, #12]
 800cb2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb30:	81a3      	strh	r3, [r4, #12]
 800cb32:	f04f 30ff 	mov.w	r0, #4294967295
 800cb36:	e7e9      	b.n	800cb0c <__ssputs_r+0x8a>

0800cb38 <_svfiprintf_r>:
 800cb38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb3c:	4698      	mov	r8, r3
 800cb3e:	898b      	ldrh	r3, [r1, #12]
 800cb40:	061b      	lsls	r3, r3, #24
 800cb42:	b09d      	sub	sp, #116	@ 0x74
 800cb44:	4607      	mov	r7, r0
 800cb46:	460d      	mov	r5, r1
 800cb48:	4614      	mov	r4, r2
 800cb4a:	d510      	bpl.n	800cb6e <_svfiprintf_r+0x36>
 800cb4c:	690b      	ldr	r3, [r1, #16]
 800cb4e:	b973      	cbnz	r3, 800cb6e <_svfiprintf_r+0x36>
 800cb50:	2140      	movs	r1, #64	@ 0x40
 800cb52:	f7fd fe23 	bl	800a79c <_malloc_r>
 800cb56:	6028      	str	r0, [r5, #0]
 800cb58:	6128      	str	r0, [r5, #16]
 800cb5a:	b930      	cbnz	r0, 800cb6a <_svfiprintf_r+0x32>
 800cb5c:	230c      	movs	r3, #12
 800cb5e:	603b      	str	r3, [r7, #0]
 800cb60:	f04f 30ff 	mov.w	r0, #4294967295
 800cb64:	b01d      	add	sp, #116	@ 0x74
 800cb66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb6a:	2340      	movs	r3, #64	@ 0x40
 800cb6c:	616b      	str	r3, [r5, #20]
 800cb6e:	2300      	movs	r3, #0
 800cb70:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb72:	2320      	movs	r3, #32
 800cb74:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cb78:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb7c:	2330      	movs	r3, #48	@ 0x30
 800cb7e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cd1c <_svfiprintf_r+0x1e4>
 800cb82:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cb86:	f04f 0901 	mov.w	r9, #1
 800cb8a:	4623      	mov	r3, r4
 800cb8c:	469a      	mov	sl, r3
 800cb8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb92:	b10a      	cbz	r2, 800cb98 <_svfiprintf_r+0x60>
 800cb94:	2a25      	cmp	r2, #37	@ 0x25
 800cb96:	d1f9      	bne.n	800cb8c <_svfiprintf_r+0x54>
 800cb98:	ebba 0b04 	subs.w	fp, sl, r4
 800cb9c:	d00b      	beq.n	800cbb6 <_svfiprintf_r+0x7e>
 800cb9e:	465b      	mov	r3, fp
 800cba0:	4622      	mov	r2, r4
 800cba2:	4629      	mov	r1, r5
 800cba4:	4638      	mov	r0, r7
 800cba6:	f7ff ff6c 	bl	800ca82 <__ssputs_r>
 800cbaa:	3001      	adds	r0, #1
 800cbac:	f000 80a7 	beq.w	800ccfe <_svfiprintf_r+0x1c6>
 800cbb0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cbb2:	445a      	add	r2, fp
 800cbb4:	9209      	str	r2, [sp, #36]	@ 0x24
 800cbb6:	f89a 3000 	ldrb.w	r3, [sl]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	f000 809f 	beq.w	800ccfe <_svfiprintf_r+0x1c6>
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	f04f 32ff 	mov.w	r2, #4294967295
 800cbc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cbca:	f10a 0a01 	add.w	sl, sl, #1
 800cbce:	9304      	str	r3, [sp, #16]
 800cbd0:	9307      	str	r3, [sp, #28]
 800cbd2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cbd6:	931a      	str	r3, [sp, #104]	@ 0x68
 800cbd8:	4654      	mov	r4, sl
 800cbda:	2205      	movs	r2, #5
 800cbdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbe0:	484e      	ldr	r0, [pc, #312]	@ (800cd1c <_svfiprintf_r+0x1e4>)
 800cbe2:	f7f3 fb2d 	bl	8000240 <memchr>
 800cbe6:	9a04      	ldr	r2, [sp, #16]
 800cbe8:	b9d8      	cbnz	r0, 800cc22 <_svfiprintf_r+0xea>
 800cbea:	06d0      	lsls	r0, r2, #27
 800cbec:	bf44      	itt	mi
 800cbee:	2320      	movmi	r3, #32
 800cbf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cbf4:	0711      	lsls	r1, r2, #28
 800cbf6:	bf44      	itt	mi
 800cbf8:	232b      	movmi	r3, #43	@ 0x2b
 800cbfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cbfe:	f89a 3000 	ldrb.w	r3, [sl]
 800cc02:	2b2a      	cmp	r3, #42	@ 0x2a
 800cc04:	d015      	beq.n	800cc32 <_svfiprintf_r+0xfa>
 800cc06:	9a07      	ldr	r2, [sp, #28]
 800cc08:	4654      	mov	r4, sl
 800cc0a:	2000      	movs	r0, #0
 800cc0c:	f04f 0c0a 	mov.w	ip, #10
 800cc10:	4621      	mov	r1, r4
 800cc12:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cc16:	3b30      	subs	r3, #48	@ 0x30
 800cc18:	2b09      	cmp	r3, #9
 800cc1a:	d94b      	bls.n	800ccb4 <_svfiprintf_r+0x17c>
 800cc1c:	b1b0      	cbz	r0, 800cc4c <_svfiprintf_r+0x114>
 800cc1e:	9207      	str	r2, [sp, #28]
 800cc20:	e014      	b.n	800cc4c <_svfiprintf_r+0x114>
 800cc22:	eba0 0308 	sub.w	r3, r0, r8
 800cc26:	fa09 f303 	lsl.w	r3, r9, r3
 800cc2a:	4313      	orrs	r3, r2
 800cc2c:	9304      	str	r3, [sp, #16]
 800cc2e:	46a2      	mov	sl, r4
 800cc30:	e7d2      	b.n	800cbd8 <_svfiprintf_r+0xa0>
 800cc32:	9b03      	ldr	r3, [sp, #12]
 800cc34:	1d19      	adds	r1, r3, #4
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	9103      	str	r1, [sp, #12]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	bfbb      	ittet	lt
 800cc3e:	425b      	neglt	r3, r3
 800cc40:	f042 0202 	orrlt.w	r2, r2, #2
 800cc44:	9307      	strge	r3, [sp, #28]
 800cc46:	9307      	strlt	r3, [sp, #28]
 800cc48:	bfb8      	it	lt
 800cc4a:	9204      	strlt	r2, [sp, #16]
 800cc4c:	7823      	ldrb	r3, [r4, #0]
 800cc4e:	2b2e      	cmp	r3, #46	@ 0x2e
 800cc50:	d10a      	bne.n	800cc68 <_svfiprintf_r+0x130>
 800cc52:	7863      	ldrb	r3, [r4, #1]
 800cc54:	2b2a      	cmp	r3, #42	@ 0x2a
 800cc56:	d132      	bne.n	800ccbe <_svfiprintf_r+0x186>
 800cc58:	9b03      	ldr	r3, [sp, #12]
 800cc5a:	1d1a      	adds	r2, r3, #4
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	9203      	str	r2, [sp, #12]
 800cc60:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cc64:	3402      	adds	r4, #2
 800cc66:	9305      	str	r3, [sp, #20]
 800cc68:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cd2c <_svfiprintf_r+0x1f4>
 800cc6c:	7821      	ldrb	r1, [r4, #0]
 800cc6e:	2203      	movs	r2, #3
 800cc70:	4650      	mov	r0, sl
 800cc72:	f7f3 fae5 	bl	8000240 <memchr>
 800cc76:	b138      	cbz	r0, 800cc88 <_svfiprintf_r+0x150>
 800cc78:	9b04      	ldr	r3, [sp, #16]
 800cc7a:	eba0 000a 	sub.w	r0, r0, sl
 800cc7e:	2240      	movs	r2, #64	@ 0x40
 800cc80:	4082      	lsls	r2, r0
 800cc82:	4313      	orrs	r3, r2
 800cc84:	3401      	adds	r4, #1
 800cc86:	9304      	str	r3, [sp, #16]
 800cc88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc8c:	4824      	ldr	r0, [pc, #144]	@ (800cd20 <_svfiprintf_r+0x1e8>)
 800cc8e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cc92:	2206      	movs	r2, #6
 800cc94:	f7f3 fad4 	bl	8000240 <memchr>
 800cc98:	2800      	cmp	r0, #0
 800cc9a:	d036      	beq.n	800cd0a <_svfiprintf_r+0x1d2>
 800cc9c:	4b21      	ldr	r3, [pc, #132]	@ (800cd24 <_svfiprintf_r+0x1ec>)
 800cc9e:	bb1b      	cbnz	r3, 800cce8 <_svfiprintf_r+0x1b0>
 800cca0:	9b03      	ldr	r3, [sp, #12]
 800cca2:	3307      	adds	r3, #7
 800cca4:	f023 0307 	bic.w	r3, r3, #7
 800cca8:	3308      	adds	r3, #8
 800ccaa:	9303      	str	r3, [sp, #12]
 800ccac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ccae:	4433      	add	r3, r6
 800ccb0:	9309      	str	r3, [sp, #36]	@ 0x24
 800ccb2:	e76a      	b.n	800cb8a <_svfiprintf_r+0x52>
 800ccb4:	fb0c 3202 	mla	r2, ip, r2, r3
 800ccb8:	460c      	mov	r4, r1
 800ccba:	2001      	movs	r0, #1
 800ccbc:	e7a8      	b.n	800cc10 <_svfiprintf_r+0xd8>
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	3401      	adds	r4, #1
 800ccc2:	9305      	str	r3, [sp, #20]
 800ccc4:	4619      	mov	r1, r3
 800ccc6:	f04f 0c0a 	mov.w	ip, #10
 800ccca:	4620      	mov	r0, r4
 800cccc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ccd0:	3a30      	subs	r2, #48	@ 0x30
 800ccd2:	2a09      	cmp	r2, #9
 800ccd4:	d903      	bls.n	800ccde <_svfiprintf_r+0x1a6>
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d0c6      	beq.n	800cc68 <_svfiprintf_r+0x130>
 800ccda:	9105      	str	r1, [sp, #20]
 800ccdc:	e7c4      	b.n	800cc68 <_svfiprintf_r+0x130>
 800ccde:	fb0c 2101 	mla	r1, ip, r1, r2
 800cce2:	4604      	mov	r4, r0
 800cce4:	2301      	movs	r3, #1
 800cce6:	e7f0      	b.n	800ccca <_svfiprintf_r+0x192>
 800cce8:	ab03      	add	r3, sp, #12
 800ccea:	9300      	str	r3, [sp, #0]
 800ccec:	462a      	mov	r2, r5
 800ccee:	4b0e      	ldr	r3, [pc, #56]	@ (800cd28 <_svfiprintf_r+0x1f0>)
 800ccf0:	a904      	add	r1, sp, #16
 800ccf2:	4638      	mov	r0, r7
 800ccf4:	f3af 8000 	nop.w
 800ccf8:	1c42      	adds	r2, r0, #1
 800ccfa:	4606      	mov	r6, r0
 800ccfc:	d1d6      	bne.n	800ccac <_svfiprintf_r+0x174>
 800ccfe:	89ab      	ldrh	r3, [r5, #12]
 800cd00:	065b      	lsls	r3, r3, #25
 800cd02:	f53f af2d 	bmi.w	800cb60 <_svfiprintf_r+0x28>
 800cd06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cd08:	e72c      	b.n	800cb64 <_svfiprintf_r+0x2c>
 800cd0a:	ab03      	add	r3, sp, #12
 800cd0c:	9300      	str	r3, [sp, #0]
 800cd0e:	462a      	mov	r2, r5
 800cd10:	4b05      	ldr	r3, [pc, #20]	@ (800cd28 <_svfiprintf_r+0x1f0>)
 800cd12:	a904      	add	r1, sp, #16
 800cd14:	4638      	mov	r0, r7
 800cd16:	f000 f879 	bl	800ce0c <_printf_i>
 800cd1a:	e7ed      	b.n	800ccf8 <_svfiprintf_r+0x1c0>
 800cd1c:	0800dd80 	.word	0x0800dd80
 800cd20:	0800dd8a 	.word	0x0800dd8a
 800cd24:	00000000 	.word	0x00000000
 800cd28:	0800ca83 	.word	0x0800ca83
 800cd2c:	0800dd86 	.word	0x0800dd86

0800cd30 <_printf_common>:
 800cd30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd34:	4616      	mov	r6, r2
 800cd36:	4698      	mov	r8, r3
 800cd38:	688a      	ldr	r2, [r1, #8]
 800cd3a:	690b      	ldr	r3, [r1, #16]
 800cd3c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cd40:	4293      	cmp	r3, r2
 800cd42:	bfb8      	it	lt
 800cd44:	4613      	movlt	r3, r2
 800cd46:	6033      	str	r3, [r6, #0]
 800cd48:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cd4c:	4607      	mov	r7, r0
 800cd4e:	460c      	mov	r4, r1
 800cd50:	b10a      	cbz	r2, 800cd56 <_printf_common+0x26>
 800cd52:	3301      	adds	r3, #1
 800cd54:	6033      	str	r3, [r6, #0]
 800cd56:	6823      	ldr	r3, [r4, #0]
 800cd58:	0699      	lsls	r1, r3, #26
 800cd5a:	bf42      	ittt	mi
 800cd5c:	6833      	ldrmi	r3, [r6, #0]
 800cd5e:	3302      	addmi	r3, #2
 800cd60:	6033      	strmi	r3, [r6, #0]
 800cd62:	6825      	ldr	r5, [r4, #0]
 800cd64:	f015 0506 	ands.w	r5, r5, #6
 800cd68:	d106      	bne.n	800cd78 <_printf_common+0x48>
 800cd6a:	f104 0a19 	add.w	sl, r4, #25
 800cd6e:	68e3      	ldr	r3, [r4, #12]
 800cd70:	6832      	ldr	r2, [r6, #0]
 800cd72:	1a9b      	subs	r3, r3, r2
 800cd74:	42ab      	cmp	r3, r5
 800cd76:	dc26      	bgt.n	800cdc6 <_printf_common+0x96>
 800cd78:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cd7c:	6822      	ldr	r2, [r4, #0]
 800cd7e:	3b00      	subs	r3, #0
 800cd80:	bf18      	it	ne
 800cd82:	2301      	movne	r3, #1
 800cd84:	0692      	lsls	r2, r2, #26
 800cd86:	d42b      	bmi.n	800cde0 <_printf_common+0xb0>
 800cd88:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cd8c:	4641      	mov	r1, r8
 800cd8e:	4638      	mov	r0, r7
 800cd90:	47c8      	blx	r9
 800cd92:	3001      	adds	r0, #1
 800cd94:	d01e      	beq.n	800cdd4 <_printf_common+0xa4>
 800cd96:	6823      	ldr	r3, [r4, #0]
 800cd98:	6922      	ldr	r2, [r4, #16]
 800cd9a:	f003 0306 	and.w	r3, r3, #6
 800cd9e:	2b04      	cmp	r3, #4
 800cda0:	bf02      	ittt	eq
 800cda2:	68e5      	ldreq	r5, [r4, #12]
 800cda4:	6833      	ldreq	r3, [r6, #0]
 800cda6:	1aed      	subeq	r5, r5, r3
 800cda8:	68a3      	ldr	r3, [r4, #8]
 800cdaa:	bf0c      	ite	eq
 800cdac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cdb0:	2500      	movne	r5, #0
 800cdb2:	4293      	cmp	r3, r2
 800cdb4:	bfc4      	itt	gt
 800cdb6:	1a9b      	subgt	r3, r3, r2
 800cdb8:	18ed      	addgt	r5, r5, r3
 800cdba:	2600      	movs	r6, #0
 800cdbc:	341a      	adds	r4, #26
 800cdbe:	42b5      	cmp	r5, r6
 800cdc0:	d11a      	bne.n	800cdf8 <_printf_common+0xc8>
 800cdc2:	2000      	movs	r0, #0
 800cdc4:	e008      	b.n	800cdd8 <_printf_common+0xa8>
 800cdc6:	2301      	movs	r3, #1
 800cdc8:	4652      	mov	r2, sl
 800cdca:	4641      	mov	r1, r8
 800cdcc:	4638      	mov	r0, r7
 800cdce:	47c8      	blx	r9
 800cdd0:	3001      	adds	r0, #1
 800cdd2:	d103      	bne.n	800cddc <_printf_common+0xac>
 800cdd4:	f04f 30ff 	mov.w	r0, #4294967295
 800cdd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cddc:	3501      	adds	r5, #1
 800cdde:	e7c6      	b.n	800cd6e <_printf_common+0x3e>
 800cde0:	18e1      	adds	r1, r4, r3
 800cde2:	1c5a      	adds	r2, r3, #1
 800cde4:	2030      	movs	r0, #48	@ 0x30
 800cde6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cdea:	4422      	add	r2, r4
 800cdec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cdf0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cdf4:	3302      	adds	r3, #2
 800cdf6:	e7c7      	b.n	800cd88 <_printf_common+0x58>
 800cdf8:	2301      	movs	r3, #1
 800cdfa:	4622      	mov	r2, r4
 800cdfc:	4641      	mov	r1, r8
 800cdfe:	4638      	mov	r0, r7
 800ce00:	47c8      	blx	r9
 800ce02:	3001      	adds	r0, #1
 800ce04:	d0e6      	beq.n	800cdd4 <_printf_common+0xa4>
 800ce06:	3601      	adds	r6, #1
 800ce08:	e7d9      	b.n	800cdbe <_printf_common+0x8e>
	...

0800ce0c <_printf_i>:
 800ce0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ce10:	7e0f      	ldrb	r7, [r1, #24]
 800ce12:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ce14:	2f78      	cmp	r7, #120	@ 0x78
 800ce16:	4691      	mov	r9, r2
 800ce18:	4680      	mov	r8, r0
 800ce1a:	460c      	mov	r4, r1
 800ce1c:	469a      	mov	sl, r3
 800ce1e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ce22:	d807      	bhi.n	800ce34 <_printf_i+0x28>
 800ce24:	2f62      	cmp	r7, #98	@ 0x62
 800ce26:	d80a      	bhi.n	800ce3e <_printf_i+0x32>
 800ce28:	2f00      	cmp	r7, #0
 800ce2a:	f000 80d2 	beq.w	800cfd2 <_printf_i+0x1c6>
 800ce2e:	2f58      	cmp	r7, #88	@ 0x58
 800ce30:	f000 80b9 	beq.w	800cfa6 <_printf_i+0x19a>
 800ce34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ce38:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ce3c:	e03a      	b.n	800ceb4 <_printf_i+0xa8>
 800ce3e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ce42:	2b15      	cmp	r3, #21
 800ce44:	d8f6      	bhi.n	800ce34 <_printf_i+0x28>
 800ce46:	a101      	add	r1, pc, #4	@ (adr r1, 800ce4c <_printf_i+0x40>)
 800ce48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ce4c:	0800cea5 	.word	0x0800cea5
 800ce50:	0800ceb9 	.word	0x0800ceb9
 800ce54:	0800ce35 	.word	0x0800ce35
 800ce58:	0800ce35 	.word	0x0800ce35
 800ce5c:	0800ce35 	.word	0x0800ce35
 800ce60:	0800ce35 	.word	0x0800ce35
 800ce64:	0800ceb9 	.word	0x0800ceb9
 800ce68:	0800ce35 	.word	0x0800ce35
 800ce6c:	0800ce35 	.word	0x0800ce35
 800ce70:	0800ce35 	.word	0x0800ce35
 800ce74:	0800ce35 	.word	0x0800ce35
 800ce78:	0800cfb9 	.word	0x0800cfb9
 800ce7c:	0800cee3 	.word	0x0800cee3
 800ce80:	0800cf73 	.word	0x0800cf73
 800ce84:	0800ce35 	.word	0x0800ce35
 800ce88:	0800ce35 	.word	0x0800ce35
 800ce8c:	0800cfdb 	.word	0x0800cfdb
 800ce90:	0800ce35 	.word	0x0800ce35
 800ce94:	0800cee3 	.word	0x0800cee3
 800ce98:	0800ce35 	.word	0x0800ce35
 800ce9c:	0800ce35 	.word	0x0800ce35
 800cea0:	0800cf7b 	.word	0x0800cf7b
 800cea4:	6833      	ldr	r3, [r6, #0]
 800cea6:	1d1a      	adds	r2, r3, #4
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	6032      	str	r2, [r6, #0]
 800ceac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ceb0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ceb4:	2301      	movs	r3, #1
 800ceb6:	e09d      	b.n	800cff4 <_printf_i+0x1e8>
 800ceb8:	6833      	ldr	r3, [r6, #0]
 800ceba:	6820      	ldr	r0, [r4, #0]
 800cebc:	1d19      	adds	r1, r3, #4
 800cebe:	6031      	str	r1, [r6, #0]
 800cec0:	0606      	lsls	r6, r0, #24
 800cec2:	d501      	bpl.n	800cec8 <_printf_i+0xbc>
 800cec4:	681d      	ldr	r5, [r3, #0]
 800cec6:	e003      	b.n	800ced0 <_printf_i+0xc4>
 800cec8:	0645      	lsls	r5, r0, #25
 800ceca:	d5fb      	bpl.n	800cec4 <_printf_i+0xb8>
 800cecc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ced0:	2d00      	cmp	r5, #0
 800ced2:	da03      	bge.n	800cedc <_printf_i+0xd0>
 800ced4:	232d      	movs	r3, #45	@ 0x2d
 800ced6:	426d      	negs	r5, r5
 800ced8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cedc:	4859      	ldr	r0, [pc, #356]	@ (800d044 <_printf_i+0x238>)
 800cede:	230a      	movs	r3, #10
 800cee0:	e011      	b.n	800cf06 <_printf_i+0xfa>
 800cee2:	6821      	ldr	r1, [r4, #0]
 800cee4:	6833      	ldr	r3, [r6, #0]
 800cee6:	0608      	lsls	r0, r1, #24
 800cee8:	f853 5b04 	ldr.w	r5, [r3], #4
 800ceec:	d402      	bmi.n	800cef4 <_printf_i+0xe8>
 800ceee:	0649      	lsls	r1, r1, #25
 800cef0:	bf48      	it	mi
 800cef2:	b2ad      	uxthmi	r5, r5
 800cef4:	2f6f      	cmp	r7, #111	@ 0x6f
 800cef6:	4853      	ldr	r0, [pc, #332]	@ (800d044 <_printf_i+0x238>)
 800cef8:	6033      	str	r3, [r6, #0]
 800cefa:	bf14      	ite	ne
 800cefc:	230a      	movne	r3, #10
 800cefe:	2308      	moveq	r3, #8
 800cf00:	2100      	movs	r1, #0
 800cf02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cf06:	6866      	ldr	r6, [r4, #4]
 800cf08:	60a6      	str	r6, [r4, #8]
 800cf0a:	2e00      	cmp	r6, #0
 800cf0c:	bfa2      	ittt	ge
 800cf0e:	6821      	ldrge	r1, [r4, #0]
 800cf10:	f021 0104 	bicge.w	r1, r1, #4
 800cf14:	6021      	strge	r1, [r4, #0]
 800cf16:	b90d      	cbnz	r5, 800cf1c <_printf_i+0x110>
 800cf18:	2e00      	cmp	r6, #0
 800cf1a:	d04b      	beq.n	800cfb4 <_printf_i+0x1a8>
 800cf1c:	4616      	mov	r6, r2
 800cf1e:	fbb5 f1f3 	udiv	r1, r5, r3
 800cf22:	fb03 5711 	mls	r7, r3, r1, r5
 800cf26:	5dc7      	ldrb	r7, [r0, r7]
 800cf28:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cf2c:	462f      	mov	r7, r5
 800cf2e:	42bb      	cmp	r3, r7
 800cf30:	460d      	mov	r5, r1
 800cf32:	d9f4      	bls.n	800cf1e <_printf_i+0x112>
 800cf34:	2b08      	cmp	r3, #8
 800cf36:	d10b      	bne.n	800cf50 <_printf_i+0x144>
 800cf38:	6823      	ldr	r3, [r4, #0]
 800cf3a:	07df      	lsls	r7, r3, #31
 800cf3c:	d508      	bpl.n	800cf50 <_printf_i+0x144>
 800cf3e:	6923      	ldr	r3, [r4, #16]
 800cf40:	6861      	ldr	r1, [r4, #4]
 800cf42:	4299      	cmp	r1, r3
 800cf44:	bfde      	ittt	le
 800cf46:	2330      	movle	r3, #48	@ 0x30
 800cf48:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cf4c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cf50:	1b92      	subs	r2, r2, r6
 800cf52:	6122      	str	r2, [r4, #16]
 800cf54:	f8cd a000 	str.w	sl, [sp]
 800cf58:	464b      	mov	r3, r9
 800cf5a:	aa03      	add	r2, sp, #12
 800cf5c:	4621      	mov	r1, r4
 800cf5e:	4640      	mov	r0, r8
 800cf60:	f7ff fee6 	bl	800cd30 <_printf_common>
 800cf64:	3001      	adds	r0, #1
 800cf66:	d14a      	bne.n	800cffe <_printf_i+0x1f2>
 800cf68:	f04f 30ff 	mov.w	r0, #4294967295
 800cf6c:	b004      	add	sp, #16
 800cf6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf72:	6823      	ldr	r3, [r4, #0]
 800cf74:	f043 0320 	orr.w	r3, r3, #32
 800cf78:	6023      	str	r3, [r4, #0]
 800cf7a:	4833      	ldr	r0, [pc, #204]	@ (800d048 <_printf_i+0x23c>)
 800cf7c:	2778      	movs	r7, #120	@ 0x78
 800cf7e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cf82:	6823      	ldr	r3, [r4, #0]
 800cf84:	6831      	ldr	r1, [r6, #0]
 800cf86:	061f      	lsls	r7, r3, #24
 800cf88:	f851 5b04 	ldr.w	r5, [r1], #4
 800cf8c:	d402      	bmi.n	800cf94 <_printf_i+0x188>
 800cf8e:	065f      	lsls	r7, r3, #25
 800cf90:	bf48      	it	mi
 800cf92:	b2ad      	uxthmi	r5, r5
 800cf94:	6031      	str	r1, [r6, #0]
 800cf96:	07d9      	lsls	r1, r3, #31
 800cf98:	bf44      	itt	mi
 800cf9a:	f043 0320 	orrmi.w	r3, r3, #32
 800cf9e:	6023      	strmi	r3, [r4, #0]
 800cfa0:	b11d      	cbz	r5, 800cfaa <_printf_i+0x19e>
 800cfa2:	2310      	movs	r3, #16
 800cfa4:	e7ac      	b.n	800cf00 <_printf_i+0xf4>
 800cfa6:	4827      	ldr	r0, [pc, #156]	@ (800d044 <_printf_i+0x238>)
 800cfa8:	e7e9      	b.n	800cf7e <_printf_i+0x172>
 800cfaa:	6823      	ldr	r3, [r4, #0]
 800cfac:	f023 0320 	bic.w	r3, r3, #32
 800cfb0:	6023      	str	r3, [r4, #0]
 800cfb2:	e7f6      	b.n	800cfa2 <_printf_i+0x196>
 800cfb4:	4616      	mov	r6, r2
 800cfb6:	e7bd      	b.n	800cf34 <_printf_i+0x128>
 800cfb8:	6833      	ldr	r3, [r6, #0]
 800cfba:	6825      	ldr	r5, [r4, #0]
 800cfbc:	6961      	ldr	r1, [r4, #20]
 800cfbe:	1d18      	adds	r0, r3, #4
 800cfc0:	6030      	str	r0, [r6, #0]
 800cfc2:	062e      	lsls	r6, r5, #24
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	d501      	bpl.n	800cfcc <_printf_i+0x1c0>
 800cfc8:	6019      	str	r1, [r3, #0]
 800cfca:	e002      	b.n	800cfd2 <_printf_i+0x1c6>
 800cfcc:	0668      	lsls	r0, r5, #25
 800cfce:	d5fb      	bpl.n	800cfc8 <_printf_i+0x1bc>
 800cfd0:	8019      	strh	r1, [r3, #0]
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	6123      	str	r3, [r4, #16]
 800cfd6:	4616      	mov	r6, r2
 800cfd8:	e7bc      	b.n	800cf54 <_printf_i+0x148>
 800cfda:	6833      	ldr	r3, [r6, #0]
 800cfdc:	1d1a      	adds	r2, r3, #4
 800cfde:	6032      	str	r2, [r6, #0]
 800cfe0:	681e      	ldr	r6, [r3, #0]
 800cfe2:	6862      	ldr	r2, [r4, #4]
 800cfe4:	2100      	movs	r1, #0
 800cfe6:	4630      	mov	r0, r6
 800cfe8:	f7f3 f92a 	bl	8000240 <memchr>
 800cfec:	b108      	cbz	r0, 800cff2 <_printf_i+0x1e6>
 800cfee:	1b80      	subs	r0, r0, r6
 800cff0:	6060      	str	r0, [r4, #4]
 800cff2:	6863      	ldr	r3, [r4, #4]
 800cff4:	6123      	str	r3, [r4, #16]
 800cff6:	2300      	movs	r3, #0
 800cff8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cffc:	e7aa      	b.n	800cf54 <_printf_i+0x148>
 800cffe:	6923      	ldr	r3, [r4, #16]
 800d000:	4632      	mov	r2, r6
 800d002:	4649      	mov	r1, r9
 800d004:	4640      	mov	r0, r8
 800d006:	47d0      	blx	sl
 800d008:	3001      	adds	r0, #1
 800d00a:	d0ad      	beq.n	800cf68 <_printf_i+0x15c>
 800d00c:	6823      	ldr	r3, [r4, #0]
 800d00e:	079b      	lsls	r3, r3, #30
 800d010:	d413      	bmi.n	800d03a <_printf_i+0x22e>
 800d012:	68e0      	ldr	r0, [r4, #12]
 800d014:	9b03      	ldr	r3, [sp, #12]
 800d016:	4298      	cmp	r0, r3
 800d018:	bfb8      	it	lt
 800d01a:	4618      	movlt	r0, r3
 800d01c:	e7a6      	b.n	800cf6c <_printf_i+0x160>
 800d01e:	2301      	movs	r3, #1
 800d020:	4632      	mov	r2, r6
 800d022:	4649      	mov	r1, r9
 800d024:	4640      	mov	r0, r8
 800d026:	47d0      	blx	sl
 800d028:	3001      	adds	r0, #1
 800d02a:	d09d      	beq.n	800cf68 <_printf_i+0x15c>
 800d02c:	3501      	adds	r5, #1
 800d02e:	68e3      	ldr	r3, [r4, #12]
 800d030:	9903      	ldr	r1, [sp, #12]
 800d032:	1a5b      	subs	r3, r3, r1
 800d034:	42ab      	cmp	r3, r5
 800d036:	dcf2      	bgt.n	800d01e <_printf_i+0x212>
 800d038:	e7eb      	b.n	800d012 <_printf_i+0x206>
 800d03a:	2500      	movs	r5, #0
 800d03c:	f104 0619 	add.w	r6, r4, #25
 800d040:	e7f5      	b.n	800d02e <_printf_i+0x222>
 800d042:	bf00      	nop
 800d044:	0800dd91 	.word	0x0800dd91
 800d048:	0800dda2 	.word	0x0800dda2

0800d04c <__sflush_r>:
 800d04c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d054:	0716      	lsls	r6, r2, #28
 800d056:	4605      	mov	r5, r0
 800d058:	460c      	mov	r4, r1
 800d05a:	d454      	bmi.n	800d106 <__sflush_r+0xba>
 800d05c:	684b      	ldr	r3, [r1, #4]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	dc02      	bgt.n	800d068 <__sflush_r+0x1c>
 800d062:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d064:	2b00      	cmp	r3, #0
 800d066:	dd48      	ble.n	800d0fa <__sflush_r+0xae>
 800d068:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d06a:	2e00      	cmp	r6, #0
 800d06c:	d045      	beq.n	800d0fa <__sflush_r+0xae>
 800d06e:	2300      	movs	r3, #0
 800d070:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d074:	682f      	ldr	r7, [r5, #0]
 800d076:	6a21      	ldr	r1, [r4, #32]
 800d078:	602b      	str	r3, [r5, #0]
 800d07a:	d030      	beq.n	800d0de <__sflush_r+0x92>
 800d07c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d07e:	89a3      	ldrh	r3, [r4, #12]
 800d080:	0759      	lsls	r1, r3, #29
 800d082:	d505      	bpl.n	800d090 <__sflush_r+0x44>
 800d084:	6863      	ldr	r3, [r4, #4]
 800d086:	1ad2      	subs	r2, r2, r3
 800d088:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d08a:	b10b      	cbz	r3, 800d090 <__sflush_r+0x44>
 800d08c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d08e:	1ad2      	subs	r2, r2, r3
 800d090:	2300      	movs	r3, #0
 800d092:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d094:	6a21      	ldr	r1, [r4, #32]
 800d096:	4628      	mov	r0, r5
 800d098:	47b0      	blx	r6
 800d09a:	1c43      	adds	r3, r0, #1
 800d09c:	89a3      	ldrh	r3, [r4, #12]
 800d09e:	d106      	bne.n	800d0ae <__sflush_r+0x62>
 800d0a0:	6829      	ldr	r1, [r5, #0]
 800d0a2:	291d      	cmp	r1, #29
 800d0a4:	d82b      	bhi.n	800d0fe <__sflush_r+0xb2>
 800d0a6:	4a2a      	ldr	r2, [pc, #168]	@ (800d150 <__sflush_r+0x104>)
 800d0a8:	410a      	asrs	r2, r1
 800d0aa:	07d6      	lsls	r6, r2, #31
 800d0ac:	d427      	bmi.n	800d0fe <__sflush_r+0xb2>
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	6062      	str	r2, [r4, #4]
 800d0b2:	04d9      	lsls	r1, r3, #19
 800d0b4:	6922      	ldr	r2, [r4, #16]
 800d0b6:	6022      	str	r2, [r4, #0]
 800d0b8:	d504      	bpl.n	800d0c4 <__sflush_r+0x78>
 800d0ba:	1c42      	adds	r2, r0, #1
 800d0bc:	d101      	bne.n	800d0c2 <__sflush_r+0x76>
 800d0be:	682b      	ldr	r3, [r5, #0]
 800d0c0:	b903      	cbnz	r3, 800d0c4 <__sflush_r+0x78>
 800d0c2:	6560      	str	r0, [r4, #84]	@ 0x54
 800d0c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d0c6:	602f      	str	r7, [r5, #0]
 800d0c8:	b1b9      	cbz	r1, 800d0fa <__sflush_r+0xae>
 800d0ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d0ce:	4299      	cmp	r1, r3
 800d0d0:	d002      	beq.n	800d0d8 <__sflush_r+0x8c>
 800d0d2:	4628      	mov	r0, r5
 800d0d4:	f7fe fc78 	bl	800b9c8 <_free_r>
 800d0d8:	2300      	movs	r3, #0
 800d0da:	6363      	str	r3, [r4, #52]	@ 0x34
 800d0dc:	e00d      	b.n	800d0fa <__sflush_r+0xae>
 800d0de:	2301      	movs	r3, #1
 800d0e0:	4628      	mov	r0, r5
 800d0e2:	47b0      	blx	r6
 800d0e4:	4602      	mov	r2, r0
 800d0e6:	1c50      	adds	r0, r2, #1
 800d0e8:	d1c9      	bne.n	800d07e <__sflush_r+0x32>
 800d0ea:	682b      	ldr	r3, [r5, #0]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d0c6      	beq.n	800d07e <__sflush_r+0x32>
 800d0f0:	2b1d      	cmp	r3, #29
 800d0f2:	d001      	beq.n	800d0f8 <__sflush_r+0xac>
 800d0f4:	2b16      	cmp	r3, #22
 800d0f6:	d11e      	bne.n	800d136 <__sflush_r+0xea>
 800d0f8:	602f      	str	r7, [r5, #0]
 800d0fa:	2000      	movs	r0, #0
 800d0fc:	e022      	b.n	800d144 <__sflush_r+0xf8>
 800d0fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d102:	b21b      	sxth	r3, r3
 800d104:	e01b      	b.n	800d13e <__sflush_r+0xf2>
 800d106:	690f      	ldr	r7, [r1, #16]
 800d108:	2f00      	cmp	r7, #0
 800d10a:	d0f6      	beq.n	800d0fa <__sflush_r+0xae>
 800d10c:	0793      	lsls	r3, r2, #30
 800d10e:	680e      	ldr	r6, [r1, #0]
 800d110:	bf08      	it	eq
 800d112:	694b      	ldreq	r3, [r1, #20]
 800d114:	600f      	str	r7, [r1, #0]
 800d116:	bf18      	it	ne
 800d118:	2300      	movne	r3, #0
 800d11a:	eba6 0807 	sub.w	r8, r6, r7
 800d11e:	608b      	str	r3, [r1, #8]
 800d120:	f1b8 0f00 	cmp.w	r8, #0
 800d124:	dde9      	ble.n	800d0fa <__sflush_r+0xae>
 800d126:	6a21      	ldr	r1, [r4, #32]
 800d128:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d12a:	4643      	mov	r3, r8
 800d12c:	463a      	mov	r2, r7
 800d12e:	4628      	mov	r0, r5
 800d130:	47b0      	blx	r6
 800d132:	2800      	cmp	r0, #0
 800d134:	dc08      	bgt.n	800d148 <__sflush_r+0xfc>
 800d136:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d13a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d13e:	81a3      	strh	r3, [r4, #12]
 800d140:	f04f 30ff 	mov.w	r0, #4294967295
 800d144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d148:	4407      	add	r7, r0
 800d14a:	eba8 0800 	sub.w	r8, r8, r0
 800d14e:	e7e7      	b.n	800d120 <__sflush_r+0xd4>
 800d150:	dfbffffe 	.word	0xdfbffffe

0800d154 <_fflush_r>:
 800d154:	b538      	push	{r3, r4, r5, lr}
 800d156:	690b      	ldr	r3, [r1, #16]
 800d158:	4605      	mov	r5, r0
 800d15a:	460c      	mov	r4, r1
 800d15c:	b913      	cbnz	r3, 800d164 <_fflush_r+0x10>
 800d15e:	2500      	movs	r5, #0
 800d160:	4628      	mov	r0, r5
 800d162:	bd38      	pop	{r3, r4, r5, pc}
 800d164:	b118      	cbz	r0, 800d16e <_fflush_r+0x1a>
 800d166:	6a03      	ldr	r3, [r0, #32]
 800d168:	b90b      	cbnz	r3, 800d16e <_fflush_r+0x1a>
 800d16a:	f7fe fa75 	bl	800b658 <__sinit>
 800d16e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d0f3      	beq.n	800d15e <_fflush_r+0xa>
 800d176:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d178:	07d0      	lsls	r0, r2, #31
 800d17a:	d404      	bmi.n	800d186 <_fflush_r+0x32>
 800d17c:	0599      	lsls	r1, r3, #22
 800d17e:	d402      	bmi.n	800d186 <_fflush_r+0x32>
 800d180:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d182:	f7fe fc08 	bl	800b996 <__retarget_lock_acquire_recursive>
 800d186:	4628      	mov	r0, r5
 800d188:	4621      	mov	r1, r4
 800d18a:	f7ff ff5f 	bl	800d04c <__sflush_r>
 800d18e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d190:	07da      	lsls	r2, r3, #31
 800d192:	4605      	mov	r5, r0
 800d194:	d4e4      	bmi.n	800d160 <_fflush_r+0xc>
 800d196:	89a3      	ldrh	r3, [r4, #12]
 800d198:	059b      	lsls	r3, r3, #22
 800d19a:	d4e1      	bmi.n	800d160 <_fflush_r+0xc>
 800d19c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d19e:	f7fe fbfb 	bl	800b998 <__retarget_lock_release_recursive>
 800d1a2:	e7dd      	b.n	800d160 <_fflush_r+0xc>

0800d1a4 <memmove>:
 800d1a4:	4288      	cmp	r0, r1
 800d1a6:	b510      	push	{r4, lr}
 800d1a8:	eb01 0402 	add.w	r4, r1, r2
 800d1ac:	d902      	bls.n	800d1b4 <memmove+0x10>
 800d1ae:	4284      	cmp	r4, r0
 800d1b0:	4623      	mov	r3, r4
 800d1b2:	d807      	bhi.n	800d1c4 <memmove+0x20>
 800d1b4:	1e43      	subs	r3, r0, #1
 800d1b6:	42a1      	cmp	r1, r4
 800d1b8:	d008      	beq.n	800d1cc <memmove+0x28>
 800d1ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d1be:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d1c2:	e7f8      	b.n	800d1b6 <memmove+0x12>
 800d1c4:	4402      	add	r2, r0
 800d1c6:	4601      	mov	r1, r0
 800d1c8:	428a      	cmp	r2, r1
 800d1ca:	d100      	bne.n	800d1ce <memmove+0x2a>
 800d1cc:	bd10      	pop	{r4, pc}
 800d1ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d1d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d1d6:	e7f7      	b.n	800d1c8 <memmove+0x24>

0800d1d8 <__assert_func>:
 800d1d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d1da:	4614      	mov	r4, r2
 800d1dc:	461a      	mov	r2, r3
 800d1de:	4b09      	ldr	r3, [pc, #36]	@ (800d204 <__assert_func+0x2c>)
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	4605      	mov	r5, r0
 800d1e4:	68d8      	ldr	r0, [r3, #12]
 800d1e6:	b954      	cbnz	r4, 800d1fe <__assert_func+0x26>
 800d1e8:	4b07      	ldr	r3, [pc, #28]	@ (800d208 <__assert_func+0x30>)
 800d1ea:	461c      	mov	r4, r3
 800d1ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d1f0:	9100      	str	r1, [sp, #0]
 800d1f2:	462b      	mov	r3, r5
 800d1f4:	4905      	ldr	r1, [pc, #20]	@ (800d20c <__assert_func+0x34>)
 800d1f6:	f000 f821 	bl	800d23c <fiprintf>
 800d1fa:	f000 f831 	bl	800d260 <abort>
 800d1fe:	4b04      	ldr	r3, [pc, #16]	@ (800d210 <__assert_func+0x38>)
 800d200:	e7f4      	b.n	800d1ec <__assert_func+0x14>
 800d202:	bf00      	nop
 800d204:	20000198 	.word	0x20000198
 800d208:	0800ddee 	.word	0x0800ddee
 800d20c:	0800ddc0 	.word	0x0800ddc0
 800d210:	0800ddb3 	.word	0x0800ddb3

0800d214 <_calloc_r>:
 800d214:	b570      	push	{r4, r5, r6, lr}
 800d216:	fba1 5402 	umull	r5, r4, r1, r2
 800d21a:	b93c      	cbnz	r4, 800d22c <_calloc_r+0x18>
 800d21c:	4629      	mov	r1, r5
 800d21e:	f7fd fabd 	bl	800a79c <_malloc_r>
 800d222:	4606      	mov	r6, r0
 800d224:	b928      	cbnz	r0, 800d232 <_calloc_r+0x1e>
 800d226:	2600      	movs	r6, #0
 800d228:	4630      	mov	r0, r6
 800d22a:	bd70      	pop	{r4, r5, r6, pc}
 800d22c:	220c      	movs	r2, #12
 800d22e:	6002      	str	r2, [r0, #0]
 800d230:	e7f9      	b.n	800d226 <_calloc_r+0x12>
 800d232:	462a      	mov	r2, r5
 800d234:	4621      	mov	r1, r4
 800d236:	f7fe fabc 	bl	800b7b2 <memset>
 800d23a:	e7f5      	b.n	800d228 <_calloc_r+0x14>

0800d23c <fiprintf>:
 800d23c:	b40e      	push	{r1, r2, r3}
 800d23e:	b503      	push	{r0, r1, lr}
 800d240:	4601      	mov	r1, r0
 800d242:	ab03      	add	r3, sp, #12
 800d244:	4805      	ldr	r0, [pc, #20]	@ (800d25c <fiprintf+0x20>)
 800d246:	f853 2b04 	ldr.w	r2, [r3], #4
 800d24a:	6800      	ldr	r0, [r0, #0]
 800d24c:	9301      	str	r3, [sp, #4]
 800d24e:	f000 f837 	bl	800d2c0 <_vfiprintf_r>
 800d252:	b002      	add	sp, #8
 800d254:	f85d eb04 	ldr.w	lr, [sp], #4
 800d258:	b003      	add	sp, #12
 800d25a:	4770      	bx	lr
 800d25c:	20000198 	.word	0x20000198

0800d260 <abort>:
 800d260:	b508      	push	{r3, lr}
 800d262:	2006      	movs	r0, #6
 800d264:	f000 fa00 	bl	800d668 <raise>
 800d268:	2001      	movs	r0, #1
 800d26a:	f7f6 fb57 	bl	800391c <_exit>

0800d26e <__sfputc_r>:
 800d26e:	6893      	ldr	r3, [r2, #8]
 800d270:	3b01      	subs	r3, #1
 800d272:	2b00      	cmp	r3, #0
 800d274:	b410      	push	{r4}
 800d276:	6093      	str	r3, [r2, #8]
 800d278:	da08      	bge.n	800d28c <__sfputc_r+0x1e>
 800d27a:	6994      	ldr	r4, [r2, #24]
 800d27c:	42a3      	cmp	r3, r4
 800d27e:	db01      	blt.n	800d284 <__sfputc_r+0x16>
 800d280:	290a      	cmp	r1, #10
 800d282:	d103      	bne.n	800d28c <__sfputc_r+0x1e>
 800d284:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d288:	f000 b932 	b.w	800d4f0 <__swbuf_r>
 800d28c:	6813      	ldr	r3, [r2, #0]
 800d28e:	1c58      	adds	r0, r3, #1
 800d290:	6010      	str	r0, [r2, #0]
 800d292:	7019      	strb	r1, [r3, #0]
 800d294:	4608      	mov	r0, r1
 800d296:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d29a:	4770      	bx	lr

0800d29c <__sfputs_r>:
 800d29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d29e:	4606      	mov	r6, r0
 800d2a0:	460f      	mov	r7, r1
 800d2a2:	4614      	mov	r4, r2
 800d2a4:	18d5      	adds	r5, r2, r3
 800d2a6:	42ac      	cmp	r4, r5
 800d2a8:	d101      	bne.n	800d2ae <__sfputs_r+0x12>
 800d2aa:	2000      	movs	r0, #0
 800d2ac:	e007      	b.n	800d2be <__sfputs_r+0x22>
 800d2ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2b2:	463a      	mov	r2, r7
 800d2b4:	4630      	mov	r0, r6
 800d2b6:	f7ff ffda 	bl	800d26e <__sfputc_r>
 800d2ba:	1c43      	adds	r3, r0, #1
 800d2bc:	d1f3      	bne.n	800d2a6 <__sfputs_r+0xa>
 800d2be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d2c0 <_vfiprintf_r>:
 800d2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2c4:	460d      	mov	r5, r1
 800d2c6:	b09d      	sub	sp, #116	@ 0x74
 800d2c8:	4614      	mov	r4, r2
 800d2ca:	4698      	mov	r8, r3
 800d2cc:	4606      	mov	r6, r0
 800d2ce:	b118      	cbz	r0, 800d2d8 <_vfiprintf_r+0x18>
 800d2d0:	6a03      	ldr	r3, [r0, #32]
 800d2d2:	b90b      	cbnz	r3, 800d2d8 <_vfiprintf_r+0x18>
 800d2d4:	f7fe f9c0 	bl	800b658 <__sinit>
 800d2d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d2da:	07d9      	lsls	r1, r3, #31
 800d2dc:	d405      	bmi.n	800d2ea <_vfiprintf_r+0x2a>
 800d2de:	89ab      	ldrh	r3, [r5, #12]
 800d2e0:	059a      	lsls	r2, r3, #22
 800d2e2:	d402      	bmi.n	800d2ea <_vfiprintf_r+0x2a>
 800d2e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d2e6:	f7fe fb56 	bl	800b996 <__retarget_lock_acquire_recursive>
 800d2ea:	89ab      	ldrh	r3, [r5, #12]
 800d2ec:	071b      	lsls	r3, r3, #28
 800d2ee:	d501      	bpl.n	800d2f4 <_vfiprintf_r+0x34>
 800d2f0:	692b      	ldr	r3, [r5, #16]
 800d2f2:	b99b      	cbnz	r3, 800d31c <_vfiprintf_r+0x5c>
 800d2f4:	4629      	mov	r1, r5
 800d2f6:	4630      	mov	r0, r6
 800d2f8:	f000 f938 	bl	800d56c <__swsetup_r>
 800d2fc:	b170      	cbz	r0, 800d31c <_vfiprintf_r+0x5c>
 800d2fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d300:	07dc      	lsls	r4, r3, #31
 800d302:	d504      	bpl.n	800d30e <_vfiprintf_r+0x4e>
 800d304:	f04f 30ff 	mov.w	r0, #4294967295
 800d308:	b01d      	add	sp, #116	@ 0x74
 800d30a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d30e:	89ab      	ldrh	r3, [r5, #12]
 800d310:	0598      	lsls	r0, r3, #22
 800d312:	d4f7      	bmi.n	800d304 <_vfiprintf_r+0x44>
 800d314:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d316:	f7fe fb3f 	bl	800b998 <__retarget_lock_release_recursive>
 800d31a:	e7f3      	b.n	800d304 <_vfiprintf_r+0x44>
 800d31c:	2300      	movs	r3, #0
 800d31e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d320:	2320      	movs	r3, #32
 800d322:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d326:	f8cd 800c 	str.w	r8, [sp, #12]
 800d32a:	2330      	movs	r3, #48	@ 0x30
 800d32c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d4dc <_vfiprintf_r+0x21c>
 800d330:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d334:	f04f 0901 	mov.w	r9, #1
 800d338:	4623      	mov	r3, r4
 800d33a:	469a      	mov	sl, r3
 800d33c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d340:	b10a      	cbz	r2, 800d346 <_vfiprintf_r+0x86>
 800d342:	2a25      	cmp	r2, #37	@ 0x25
 800d344:	d1f9      	bne.n	800d33a <_vfiprintf_r+0x7a>
 800d346:	ebba 0b04 	subs.w	fp, sl, r4
 800d34a:	d00b      	beq.n	800d364 <_vfiprintf_r+0xa4>
 800d34c:	465b      	mov	r3, fp
 800d34e:	4622      	mov	r2, r4
 800d350:	4629      	mov	r1, r5
 800d352:	4630      	mov	r0, r6
 800d354:	f7ff ffa2 	bl	800d29c <__sfputs_r>
 800d358:	3001      	adds	r0, #1
 800d35a:	f000 80a7 	beq.w	800d4ac <_vfiprintf_r+0x1ec>
 800d35e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d360:	445a      	add	r2, fp
 800d362:	9209      	str	r2, [sp, #36]	@ 0x24
 800d364:	f89a 3000 	ldrb.w	r3, [sl]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	f000 809f 	beq.w	800d4ac <_vfiprintf_r+0x1ec>
 800d36e:	2300      	movs	r3, #0
 800d370:	f04f 32ff 	mov.w	r2, #4294967295
 800d374:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d378:	f10a 0a01 	add.w	sl, sl, #1
 800d37c:	9304      	str	r3, [sp, #16]
 800d37e:	9307      	str	r3, [sp, #28]
 800d380:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d384:	931a      	str	r3, [sp, #104]	@ 0x68
 800d386:	4654      	mov	r4, sl
 800d388:	2205      	movs	r2, #5
 800d38a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d38e:	4853      	ldr	r0, [pc, #332]	@ (800d4dc <_vfiprintf_r+0x21c>)
 800d390:	f7f2 ff56 	bl	8000240 <memchr>
 800d394:	9a04      	ldr	r2, [sp, #16]
 800d396:	b9d8      	cbnz	r0, 800d3d0 <_vfiprintf_r+0x110>
 800d398:	06d1      	lsls	r1, r2, #27
 800d39a:	bf44      	itt	mi
 800d39c:	2320      	movmi	r3, #32
 800d39e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d3a2:	0713      	lsls	r3, r2, #28
 800d3a4:	bf44      	itt	mi
 800d3a6:	232b      	movmi	r3, #43	@ 0x2b
 800d3a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d3ac:	f89a 3000 	ldrb.w	r3, [sl]
 800d3b0:	2b2a      	cmp	r3, #42	@ 0x2a
 800d3b2:	d015      	beq.n	800d3e0 <_vfiprintf_r+0x120>
 800d3b4:	9a07      	ldr	r2, [sp, #28]
 800d3b6:	4654      	mov	r4, sl
 800d3b8:	2000      	movs	r0, #0
 800d3ba:	f04f 0c0a 	mov.w	ip, #10
 800d3be:	4621      	mov	r1, r4
 800d3c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d3c4:	3b30      	subs	r3, #48	@ 0x30
 800d3c6:	2b09      	cmp	r3, #9
 800d3c8:	d94b      	bls.n	800d462 <_vfiprintf_r+0x1a2>
 800d3ca:	b1b0      	cbz	r0, 800d3fa <_vfiprintf_r+0x13a>
 800d3cc:	9207      	str	r2, [sp, #28]
 800d3ce:	e014      	b.n	800d3fa <_vfiprintf_r+0x13a>
 800d3d0:	eba0 0308 	sub.w	r3, r0, r8
 800d3d4:	fa09 f303 	lsl.w	r3, r9, r3
 800d3d8:	4313      	orrs	r3, r2
 800d3da:	9304      	str	r3, [sp, #16]
 800d3dc:	46a2      	mov	sl, r4
 800d3de:	e7d2      	b.n	800d386 <_vfiprintf_r+0xc6>
 800d3e0:	9b03      	ldr	r3, [sp, #12]
 800d3e2:	1d19      	adds	r1, r3, #4
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	9103      	str	r1, [sp, #12]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	bfbb      	ittet	lt
 800d3ec:	425b      	neglt	r3, r3
 800d3ee:	f042 0202 	orrlt.w	r2, r2, #2
 800d3f2:	9307      	strge	r3, [sp, #28]
 800d3f4:	9307      	strlt	r3, [sp, #28]
 800d3f6:	bfb8      	it	lt
 800d3f8:	9204      	strlt	r2, [sp, #16]
 800d3fa:	7823      	ldrb	r3, [r4, #0]
 800d3fc:	2b2e      	cmp	r3, #46	@ 0x2e
 800d3fe:	d10a      	bne.n	800d416 <_vfiprintf_r+0x156>
 800d400:	7863      	ldrb	r3, [r4, #1]
 800d402:	2b2a      	cmp	r3, #42	@ 0x2a
 800d404:	d132      	bne.n	800d46c <_vfiprintf_r+0x1ac>
 800d406:	9b03      	ldr	r3, [sp, #12]
 800d408:	1d1a      	adds	r2, r3, #4
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	9203      	str	r2, [sp, #12]
 800d40e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d412:	3402      	adds	r4, #2
 800d414:	9305      	str	r3, [sp, #20]
 800d416:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d4ec <_vfiprintf_r+0x22c>
 800d41a:	7821      	ldrb	r1, [r4, #0]
 800d41c:	2203      	movs	r2, #3
 800d41e:	4650      	mov	r0, sl
 800d420:	f7f2 ff0e 	bl	8000240 <memchr>
 800d424:	b138      	cbz	r0, 800d436 <_vfiprintf_r+0x176>
 800d426:	9b04      	ldr	r3, [sp, #16]
 800d428:	eba0 000a 	sub.w	r0, r0, sl
 800d42c:	2240      	movs	r2, #64	@ 0x40
 800d42e:	4082      	lsls	r2, r0
 800d430:	4313      	orrs	r3, r2
 800d432:	3401      	adds	r4, #1
 800d434:	9304      	str	r3, [sp, #16]
 800d436:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d43a:	4829      	ldr	r0, [pc, #164]	@ (800d4e0 <_vfiprintf_r+0x220>)
 800d43c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d440:	2206      	movs	r2, #6
 800d442:	f7f2 fefd 	bl	8000240 <memchr>
 800d446:	2800      	cmp	r0, #0
 800d448:	d03f      	beq.n	800d4ca <_vfiprintf_r+0x20a>
 800d44a:	4b26      	ldr	r3, [pc, #152]	@ (800d4e4 <_vfiprintf_r+0x224>)
 800d44c:	bb1b      	cbnz	r3, 800d496 <_vfiprintf_r+0x1d6>
 800d44e:	9b03      	ldr	r3, [sp, #12]
 800d450:	3307      	adds	r3, #7
 800d452:	f023 0307 	bic.w	r3, r3, #7
 800d456:	3308      	adds	r3, #8
 800d458:	9303      	str	r3, [sp, #12]
 800d45a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d45c:	443b      	add	r3, r7
 800d45e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d460:	e76a      	b.n	800d338 <_vfiprintf_r+0x78>
 800d462:	fb0c 3202 	mla	r2, ip, r2, r3
 800d466:	460c      	mov	r4, r1
 800d468:	2001      	movs	r0, #1
 800d46a:	e7a8      	b.n	800d3be <_vfiprintf_r+0xfe>
 800d46c:	2300      	movs	r3, #0
 800d46e:	3401      	adds	r4, #1
 800d470:	9305      	str	r3, [sp, #20]
 800d472:	4619      	mov	r1, r3
 800d474:	f04f 0c0a 	mov.w	ip, #10
 800d478:	4620      	mov	r0, r4
 800d47a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d47e:	3a30      	subs	r2, #48	@ 0x30
 800d480:	2a09      	cmp	r2, #9
 800d482:	d903      	bls.n	800d48c <_vfiprintf_r+0x1cc>
 800d484:	2b00      	cmp	r3, #0
 800d486:	d0c6      	beq.n	800d416 <_vfiprintf_r+0x156>
 800d488:	9105      	str	r1, [sp, #20]
 800d48a:	e7c4      	b.n	800d416 <_vfiprintf_r+0x156>
 800d48c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d490:	4604      	mov	r4, r0
 800d492:	2301      	movs	r3, #1
 800d494:	e7f0      	b.n	800d478 <_vfiprintf_r+0x1b8>
 800d496:	ab03      	add	r3, sp, #12
 800d498:	9300      	str	r3, [sp, #0]
 800d49a:	462a      	mov	r2, r5
 800d49c:	4b12      	ldr	r3, [pc, #72]	@ (800d4e8 <_vfiprintf_r+0x228>)
 800d49e:	a904      	add	r1, sp, #16
 800d4a0:	4630      	mov	r0, r6
 800d4a2:	f3af 8000 	nop.w
 800d4a6:	4607      	mov	r7, r0
 800d4a8:	1c78      	adds	r0, r7, #1
 800d4aa:	d1d6      	bne.n	800d45a <_vfiprintf_r+0x19a>
 800d4ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d4ae:	07d9      	lsls	r1, r3, #31
 800d4b0:	d405      	bmi.n	800d4be <_vfiprintf_r+0x1fe>
 800d4b2:	89ab      	ldrh	r3, [r5, #12]
 800d4b4:	059a      	lsls	r2, r3, #22
 800d4b6:	d402      	bmi.n	800d4be <_vfiprintf_r+0x1fe>
 800d4b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d4ba:	f7fe fa6d 	bl	800b998 <__retarget_lock_release_recursive>
 800d4be:	89ab      	ldrh	r3, [r5, #12]
 800d4c0:	065b      	lsls	r3, r3, #25
 800d4c2:	f53f af1f 	bmi.w	800d304 <_vfiprintf_r+0x44>
 800d4c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d4c8:	e71e      	b.n	800d308 <_vfiprintf_r+0x48>
 800d4ca:	ab03      	add	r3, sp, #12
 800d4cc:	9300      	str	r3, [sp, #0]
 800d4ce:	462a      	mov	r2, r5
 800d4d0:	4b05      	ldr	r3, [pc, #20]	@ (800d4e8 <_vfiprintf_r+0x228>)
 800d4d2:	a904      	add	r1, sp, #16
 800d4d4:	4630      	mov	r0, r6
 800d4d6:	f7ff fc99 	bl	800ce0c <_printf_i>
 800d4da:	e7e4      	b.n	800d4a6 <_vfiprintf_r+0x1e6>
 800d4dc:	0800dd80 	.word	0x0800dd80
 800d4e0:	0800dd8a 	.word	0x0800dd8a
 800d4e4:	00000000 	.word	0x00000000
 800d4e8:	0800d29d 	.word	0x0800d29d
 800d4ec:	0800dd86 	.word	0x0800dd86

0800d4f0 <__swbuf_r>:
 800d4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4f2:	460e      	mov	r6, r1
 800d4f4:	4614      	mov	r4, r2
 800d4f6:	4605      	mov	r5, r0
 800d4f8:	b118      	cbz	r0, 800d502 <__swbuf_r+0x12>
 800d4fa:	6a03      	ldr	r3, [r0, #32]
 800d4fc:	b90b      	cbnz	r3, 800d502 <__swbuf_r+0x12>
 800d4fe:	f7fe f8ab 	bl	800b658 <__sinit>
 800d502:	69a3      	ldr	r3, [r4, #24]
 800d504:	60a3      	str	r3, [r4, #8]
 800d506:	89a3      	ldrh	r3, [r4, #12]
 800d508:	071a      	lsls	r2, r3, #28
 800d50a:	d501      	bpl.n	800d510 <__swbuf_r+0x20>
 800d50c:	6923      	ldr	r3, [r4, #16]
 800d50e:	b943      	cbnz	r3, 800d522 <__swbuf_r+0x32>
 800d510:	4621      	mov	r1, r4
 800d512:	4628      	mov	r0, r5
 800d514:	f000 f82a 	bl	800d56c <__swsetup_r>
 800d518:	b118      	cbz	r0, 800d522 <__swbuf_r+0x32>
 800d51a:	f04f 37ff 	mov.w	r7, #4294967295
 800d51e:	4638      	mov	r0, r7
 800d520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d522:	6823      	ldr	r3, [r4, #0]
 800d524:	6922      	ldr	r2, [r4, #16]
 800d526:	1a98      	subs	r0, r3, r2
 800d528:	6963      	ldr	r3, [r4, #20]
 800d52a:	b2f6      	uxtb	r6, r6
 800d52c:	4283      	cmp	r3, r0
 800d52e:	4637      	mov	r7, r6
 800d530:	dc05      	bgt.n	800d53e <__swbuf_r+0x4e>
 800d532:	4621      	mov	r1, r4
 800d534:	4628      	mov	r0, r5
 800d536:	f7ff fe0d 	bl	800d154 <_fflush_r>
 800d53a:	2800      	cmp	r0, #0
 800d53c:	d1ed      	bne.n	800d51a <__swbuf_r+0x2a>
 800d53e:	68a3      	ldr	r3, [r4, #8]
 800d540:	3b01      	subs	r3, #1
 800d542:	60a3      	str	r3, [r4, #8]
 800d544:	6823      	ldr	r3, [r4, #0]
 800d546:	1c5a      	adds	r2, r3, #1
 800d548:	6022      	str	r2, [r4, #0]
 800d54a:	701e      	strb	r6, [r3, #0]
 800d54c:	6962      	ldr	r2, [r4, #20]
 800d54e:	1c43      	adds	r3, r0, #1
 800d550:	429a      	cmp	r2, r3
 800d552:	d004      	beq.n	800d55e <__swbuf_r+0x6e>
 800d554:	89a3      	ldrh	r3, [r4, #12]
 800d556:	07db      	lsls	r3, r3, #31
 800d558:	d5e1      	bpl.n	800d51e <__swbuf_r+0x2e>
 800d55a:	2e0a      	cmp	r6, #10
 800d55c:	d1df      	bne.n	800d51e <__swbuf_r+0x2e>
 800d55e:	4621      	mov	r1, r4
 800d560:	4628      	mov	r0, r5
 800d562:	f7ff fdf7 	bl	800d154 <_fflush_r>
 800d566:	2800      	cmp	r0, #0
 800d568:	d0d9      	beq.n	800d51e <__swbuf_r+0x2e>
 800d56a:	e7d6      	b.n	800d51a <__swbuf_r+0x2a>

0800d56c <__swsetup_r>:
 800d56c:	b538      	push	{r3, r4, r5, lr}
 800d56e:	4b29      	ldr	r3, [pc, #164]	@ (800d614 <__swsetup_r+0xa8>)
 800d570:	4605      	mov	r5, r0
 800d572:	6818      	ldr	r0, [r3, #0]
 800d574:	460c      	mov	r4, r1
 800d576:	b118      	cbz	r0, 800d580 <__swsetup_r+0x14>
 800d578:	6a03      	ldr	r3, [r0, #32]
 800d57a:	b90b      	cbnz	r3, 800d580 <__swsetup_r+0x14>
 800d57c:	f7fe f86c 	bl	800b658 <__sinit>
 800d580:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d584:	0719      	lsls	r1, r3, #28
 800d586:	d422      	bmi.n	800d5ce <__swsetup_r+0x62>
 800d588:	06da      	lsls	r2, r3, #27
 800d58a:	d407      	bmi.n	800d59c <__swsetup_r+0x30>
 800d58c:	2209      	movs	r2, #9
 800d58e:	602a      	str	r2, [r5, #0]
 800d590:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d594:	81a3      	strh	r3, [r4, #12]
 800d596:	f04f 30ff 	mov.w	r0, #4294967295
 800d59a:	e033      	b.n	800d604 <__swsetup_r+0x98>
 800d59c:	0758      	lsls	r0, r3, #29
 800d59e:	d512      	bpl.n	800d5c6 <__swsetup_r+0x5a>
 800d5a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d5a2:	b141      	cbz	r1, 800d5b6 <__swsetup_r+0x4a>
 800d5a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d5a8:	4299      	cmp	r1, r3
 800d5aa:	d002      	beq.n	800d5b2 <__swsetup_r+0x46>
 800d5ac:	4628      	mov	r0, r5
 800d5ae:	f7fe fa0b 	bl	800b9c8 <_free_r>
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	6363      	str	r3, [r4, #52]	@ 0x34
 800d5b6:	89a3      	ldrh	r3, [r4, #12]
 800d5b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d5bc:	81a3      	strh	r3, [r4, #12]
 800d5be:	2300      	movs	r3, #0
 800d5c0:	6063      	str	r3, [r4, #4]
 800d5c2:	6923      	ldr	r3, [r4, #16]
 800d5c4:	6023      	str	r3, [r4, #0]
 800d5c6:	89a3      	ldrh	r3, [r4, #12]
 800d5c8:	f043 0308 	orr.w	r3, r3, #8
 800d5cc:	81a3      	strh	r3, [r4, #12]
 800d5ce:	6923      	ldr	r3, [r4, #16]
 800d5d0:	b94b      	cbnz	r3, 800d5e6 <__swsetup_r+0x7a>
 800d5d2:	89a3      	ldrh	r3, [r4, #12]
 800d5d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d5d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d5dc:	d003      	beq.n	800d5e6 <__swsetup_r+0x7a>
 800d5de:	4621      	mov	r1, r4
 800d5e0:	4628      	mov	r0, r5
 800d5e2:	f000 f883 	bl	800d6ec <__smakebuf_r>
 800d5e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5ea:	f013 0201 	ands.w	r2, r3, #1
 800d5ee:	d00a      	beq.n	800d606 <__swsetup_r+0x9a>
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	60a2      	str	r2, [r4, #8]
 800d5f4:	6962      	ldr	r2, [r4, #20]
 800d5f6:	4252      	negs	r2, r2
 800d5f8:	61a2      	str	r2, [r4, #24]
 800d5fa:	6922      	ldr	r2, [r4, #16]
 800d5fc:	b942      	cbnz	r2, 800d610 <__swsetup_r+0xa4>
 800d5fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d602:	d1c5      	bne.n	800d590 <__swsetup_r+0x24>
 800d604:	bd38      	pop	{r3, r4, r5, pc}
 800d606:	0799      	lsls	r1, r3, #30
 800d608:	bf58      	it	pl
 800d60a:	6962      	ldrpl	r2, [r4, #20]
 800d60c:	60a2      	str	r2, [r4, #8]
 800d60e:	e7f4      	b.n	800d5fa <__swsetup_r+0x8e>
 800d610:	2000      	movs	r0, #0
 800d612:	e7f7      	b.n	800d604 <__swsetup_r+0x98>
 800d614:	20000198 	.word	0x20000198

0800d618 <_raise_r>:
 800d618:	291f      	cmp	r1, #31
 800d61a:	b538      	push	{r3, r4, r5, lr}
 800d61c:	4605      	mov	r5, r0
 800d61e:	460c      	mov	r4, r1
 800d620:	d904      	bls.n	800d62c <_raise_r+0x14>
 800d622:	2316      	movs	r3, #22
 800d624:	6003      	str	r3, [r0, #0]
 800d626:	f04f 30ff 	mov.w	r0, #4294967295
 800d62a:	bd38      	pop	{r3, r4, r5, pc}
 800d62c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d62e:	b112      	cbz	r2, 800d636 <_raise_r+0x1e>
 800d630:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d634:	b94b      	cbnz	r3, 800d64a <_raise_r+0x32>
 800d636:	4628      	mov	r0, r5
 800d638:	f000 f830 	bl	800d69c <_getpid_r>
 800d63c:	4622      	mov	r2, r4
 800d63e:	4601      	mov	r1, r0
 800d640:	4628      	mov	r0, r5
 800d642:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d646:	f000 b817 	b.w	800d678 <_kill_r>
 800d64a:	2b01      	cmp	r3, #1
 800d64c:	d00a      	beq.n	800d664 <_raise_r+0x4c>
 800d64e:	1c59      	adds	r1, r3, #1
 800d650:	d103      	bne.n	800d65a <_raise_r+0x42>
 800d652:	2316      	movs	r3, #22
 800d654:	6003      	str	r3, [r0, #0]
 800d656:	2001      	movs	r0, #1
 800d658:	e7e7      	b.n	800d62a <_raise_r+0x12>
 800d65a:	2100      	movs	r1, #0
 800d65c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d660:	4620      	mov	r0, r4
 800d662:	4798      	blx	r3
 800d664:	2000      	movs	r0, #0
 800d666:	e7e0      	b.n	800d62a <_raise_r+0x12>

0800d668 <raise>:
 800d668:	4b02      	ldr	r3, [pc, #8]	@ (800d674 <raise+0xc>)
 800d66a:	4601      	mov	r1, r0
 800d66c:	6818      	ldr	r0, [r3, #0]
 800d66e:	f7ff bfd3 	b.w	800d618 <_raise_r>
 800d672:	bf00      	nop
 800d674:	20000198 	.word	0x20000198

0800d678 <_kill_r>:
 800d678:	b538      	push	{r3, r4, r5, lr}
 800d67a:	4d07      	ldr	r5, [pc, #28]	@ (800d698 <_kill_r+0x20>)
 800d67c:	2300      	movs	r3, #0
 800d67e:	4604      	mov	r4, r0
 800d680:	4608      	mov	r0, r1
 800d682:	4611      	mov	r1, r2
 800d684:	602b      	str	r3, [r5, #0]
 800d686:	f7f6 f939 	bl	80038fc <_kill>
 800d68a:	1c43      	adds	r3, r0, #1
 800d68c:	d102      	bne.n	800d694 <_kill_r+0x1c>
 800d68e:	682b      	ldr	r3, [r5, #0]
 800d690:	b103      	cbz	r3, 800d694 <_kill_r+0x1c>
 800d692:	6023      	str	r3, [r4, #0]
 800d694:	bd38      	pop	{r3, r4, r5, pc}
 800d696:	bf00      	nop
 800d698:	20004788 	.word	0x20004788

0800d69c <_getpid_r>:
 800d69c:	f7f6 b926 	b.w	80038ec <_getpid>

0800d6a0 <__swhatbuf_r>:
 800d6a0:	b570      	push	{r4, r5, r6, lr}
 800d6a2:	460c      	mov	r4, r1
 800d6a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6a8:	2900      	cmp	r1, #0
 800d6aa:	b096      	sub	sp, #88	@ 0x58
 800d6ac:	4615      	mov	r5, r2
 800d6ae:	461e      	mov	r6, r3
 800d6b0:	da0d      	bge.n	800d6ce <__swhatbuf_r+0x2e>
 800d6b2:	89a3      	ldrh	r3, [r4, #12]
 800d6b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d6b8:	f04f 0100 	mov.w	r1, #0
 800d6bc:	bf14      	ite	ne
 800d6be:	2340      	movne	r3, #64	@ 0x40
 800d6c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d6c4:	2000      	movs	r0, #0
 800d6c6:	6031      	str	r1, [r6, #0]
 800d6c8:	602b      	str	r3, [r5, #0]
 800d6ca:	b016      	add	sp, #88	@ 0x58
 800d6cc:	bd70      	pop	{r4, r5, r6, pc}
 800d6ce:	466a      	mov	r2, sp
 800d6d0:	f000 f848 	bl	800d764 <_fstat_r>
 800d6d4:	2800      	cmp	r0, #0
 800d6d6:	dbec      	blt.n	800d6b2 <__swhatbuf_r+0x12>
 800d6d8:	9901      	ldr	r1, [sp, #4]
 800d6da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d6de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d6e2:	4259      	negs	r1, r3
 800d6e4:	4159      	adcs	r1, r3
 800d6e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d6ea:	e7eb      	b.n	800d6c4 <__swhatbuf_r+0x24>

0800d6ec <__smakebuf_r>:
 800d6ec:	898b      	ldrh	r3, [r1, #12]
 800d6ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d6f0:	079d      	lsls	r5, r3, #30
 800d6f2:	4606      	mov	r6, r0
 800d6f4:	460c      	mov	r4, r1
 800d6f6:	d507      	bpl.n	800d708 <__smakebuf_r+0x1c>
 800d6f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d6fc:	6023      	str	r3, [r4, #0]
 800d6fe:	6123      	str	r3, [r4, #16]
 800d700:	2301      	movs	r3, #1
 800d702:	6163      	str	r3, [r4, #20]
 800d704:	b003      	add	sp, #12
 800d706:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d708:	ab01      	add	r3, sp, #4
 800d70a:	466a      	mov	r2, sp
 800d70c:	f7ff ffc8 	bl	800d6a0 <__swhatbuf_r>
 800d710:	9f00      	ldr	r7, [sp, #0]
 800d712:	4605      	mov	r5, r0
 800d714:	4639      	mov	r1, r7
 800d716:	4630      	mov	r0, r6
 800d718:	f7fd f840 	bl	800a79c <_malloc_r>
 800d71c:	b948      	cbnz	r0, 800d732 <__smakebuf_r+0x46>
 800d71e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d722:	059a      	lsls	r2, r3, #22
 800d724:	d4ee      	bmi.n	800d704 <__smakebuf_r+0x18>
 800d726:	f023 0303 	bic.w	r3, r3, #3
 800d72a:	f043 0302 	orr.w	r3, r3, #2
 800d72e:	81a3      	strh	r3, [r4, #12]
 800d730:	e7e2      	b.n	800d6f8 <__smakebuf_r+0xc>
 800d732:	89a3      	ldrh	r3, [r4, #12]
 800d734:	6020      	str	r0, [r4, #0]
 800d736:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d73a:	81a3      	strh	r3, [r4, #12]
 800d73c:	9b01      	ldr	r3, [sp, #4]
 800d73e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d742:	b15b      	cbz	r3, 800d75c <__smakebuf_r+0x70>
 800d744:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d748:	4630      	mov	r0, r6
 800d74a:	f000 f81d 	bl	800d788 <_isatty_r>
 800d74e:	b128      	cbz	r0, 800d75c <__smakebuf_r+0x70>
 800d750:	89a3      	ldrh	r3, [r4, #12]
 800d752:	f023 0303 	bic.w	r3, r3, #3
 800d756:	f043 0301 	orr.w	r3, r3, #1
 800d75a:	81a3      	strh	r3, [r4, #12]
 800d75c:	89a3      	ldrh	r3, [r4, #12]
 800d75e:	431d      	orrs	r5, r3
 800d760:	81a5      	strh	r5, [r4, #12]
 800d762:	e7cf      	b.n	800d704 <__smakebuf_r+0x18>

0800d764 <_fstat_r>:
 800d764:	b538      	push	{r3, r4, r5, lr}
 800d766:	4d07      	ldr	r5, [pc, #28]	@ (800d784 <_fstat_r+0x20>)
 800d768:	2300      	movs	r3, #0
 800d76a:	4604      	mov	r4, r0
 800d76c:	4608      	mov	r0, r1
 800d76e:	4611      	mov	r1, r2
 800d770:	602b      	str	r3, [r5, #0]
 800d772:	f7f6 f923 	bl	80039bc <_fstat>
 800d776:	1c43      	adds	r3, r0, #1
 800d778:	d102      	bne.n	800d780 <_fstat_r+0x1c>
 800d77a:	682b      	ldr	r3, [r5, #0]
 800d77c:	b103      	cbz	r3, 800d780 <_fstat_r+0x1c>
 800d77e:	6023      	str	r3, [r4, #0]
 800d780:	bd38      	pop	{r3, r4, r5, pc}
 800d782:	bf00      	nop
 800d784:	20004788 	.word	0x20004788

0800d788 <_isatty_r>:
 800d788:	b538      	push	{r3, r4, r5, lr}
 800d78a:	4d06      	ldr	r5, [pc, #24]	@ (800d7a4 <_isatty_r+0x1c>)
 800d78c:	2300      	movs	r3, #0
 800d78e:	4604      	mov	r4, r0
 800d790:	4608      	mov	r0, r1
 800d792:	602b      	str	r3, [r5, #0]
 800d794:	f7f6 f922 	bl	80039dc <_isatty>
 800d798:	1c43      	adds	r3, r0, #1
 800d79a:	d102      	bne.n	800d7a2 <_isatty_r+0x1a>
 800d79c:	682b      	ldr	r3, [r5, #0]
 800d79e:	b103      	cbz	r3, 800d7a2 <_isatty_r+0x1a>
 800d7a0:	6023      	str	r3, [r4, #0]
 800d7a2:	bd38      	pop	{r3, r4, r5, pc}
 800d7a4:	20004788 	.word	0x20004788

0800d7a8 <_init>:
 800d7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7aa:	bf00      	nop
 800d7ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7ae:	bc08      	pop	{r3}
 800d7b0:	469e      	mov	lr, r3
 800d7b2:	4770      	bx	lr

0800d7b4 <_fini>:
 800d7b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7b6:	bf00      	nop
 800d7b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7ba:	bc08      	pop	{r3}
 800d7bc:	469e      	mov	lr, r3
 800d7be:	4770      	bx	lr
