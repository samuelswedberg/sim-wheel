
stm-freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000100b4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  08010284  08010284  00011284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010440  08010440  00012324  2**0
                  CONTENTS
  4 .ARM          00000008  08010440  08010440  00011440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010448  08010448  00012324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010448  08010448  00011448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801044c  0801044c  0001144c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000324  20000000  08010450  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000051e0  20000324  08010774  00012324  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005504  08010774  00012504  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00012324  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025de2  00000000  00000000  00012354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000653c  00000000  00000000  00038136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d70  00000000  00000000  0003e678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001656  00000000  00000000  000403e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029473  00000000  00000000  00041a3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000283d8  00000000  00000000  0006aeb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee298  00000000  00000000  00093289  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00181521  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f1c  00000000  00000000  00181564  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  00189480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000324 	.word	0x20000324
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801026c 	.word	0x0801026c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000328 	.word	0x20000328
 800020c:	0801026c 	.word	0x0801026c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_d2f>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a94:	bf24      	itt	cs
 8000a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9e:	d90d      	bls.n	8000abc <__aeabi_d2f+0x30>
 8000aa0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aac:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab4:	bf08      	it	eq
 8000ab6:	f020 0001 	biceq.w	r0, r0, #1
 8000aba:	4770      	bx	lr
 8000abc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ac0:	d121      	bne.n	8000b06 <__aeabi_d2f+0x7a>
 8000ac2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac6:	bfbc      	itt	lt
 8000ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000acc:	4770      	bxlt	lr
 8000ace:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad6:	f1c2 0218 	rsb	r2, r2, #24
 8000ada:	f1c2 0c20 	rsb	ip, r2, #32
 8000ade:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	f040 0001 	orrne.w	r0, r0, #1
 8000aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af8:	ea40 000c 	orr.w	r0, r0, ip
 8000afc:	fa23 f302 	lsr.w	r3, r3, r2
 8000b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b04:	e7cc      	b.n	8000aa0 <__aeabi_d2f+0x14>
 8000b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0a:	d107      	bne.n	8000b1c <__aeabi_d2f+0x90>
 8000b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b10:	bf1e      	ittt	ne
 8000b12:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b16:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b1a:	4770      	bxne	lr
 8000b1c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b20:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b24:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_uldivmod>:
 8000b2c:	b953      	cbnz	r3, 8000b44 <__aeabi_uldivmod+0x18>
 8000b2e:	b94a      	cbnz	r2, 8000b44 <__aeabi_uldivmod+0x18>
 8000b30:	2900      	cmp	r1, #0
 8000b32:	bf08      	it	eq
 8000b34:	2800      	cmpeq	r0, #0
 8000b36:	bf1c      	itt	ne
 8000b38:	f04f 31ff 	movne.w	r1, #4294967295
 8000b3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b40:	f000 b96a 	b.w	8000e18 <__aeabi_idiv0>
 8000b44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b4c:	f000 f806 	bl	8000b5c <__udivmoddi4>
 8000b50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b58:	b004      	add	sp, #16
 8000b5a:	4770      	bx	lr

08000b5c <__udivmoddi4>:
 8000b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b60:	9d08      	ldr	r5, [sp, #32]
 8000b62:	460c      	mov	r4, r1
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d14e      	bne.n	8000c06 <__udivmoddi4+0xaa>
 8000b68:	4694      	mov	ip, r2
 8000b6a:	458c      	cmp	ip, r1
 8000b6c:	4686      	mov	lr, r0
 8000b6e:	fab2 f282 	clz	r2, r2
 8000b72:	d962      	bls.n	8000c3a <__udivmoddi4+0xde>
 8000b74:	b14a      	cbz	r2, 8000b8a <__udivmoddi4+0x2e>
 8000b76:	f1c2 0320 	rsb	r3, r2, #32
 8000b7a:	4091      	lsls	r1, r2
 8000b7c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b84:	4319      	orrs	r1, r3
 8000b86:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b8a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b8e:	fa1f f68c 	uxth.w	r6, ip
 8000b92:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b96:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b9a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba2:	fb04 f106 	mul.w	r1, r4, r6
 8000ba6:	4299      	cmp	r1, r3
 8000ba8:	d90a      	bls.n	8000bc0 <__udivmoddi4+0x64>
 8000baa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bae:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bb2:	f080 8112 	bcs.w	8000dda <__udivmoddi4+0x27e>
 8000bb6:	4299      	cmp	r1, r3
 8000bb8:	f240 810f 	bls.w	8000dda <__udivmoddi4+0x27e>
 8000bbc:	3c02      	subs	r4, #2
 8000bbe:	4463      	add	r3, ip
 8000bc0:	1a59      	subs	r1, r3, r1
 8000bc2:	fa1f f38e 	uxth.w	r3, lr
 8000bc6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bca:	fb07 1110 	mls	r1, r7, r0, r1
 8000bce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bd2:	fb00 f606 	mul.w	r6, r0, r6
 8000bd6:	429e      	cmp	r6, r3
 8000bd8:	d90a      	bls.n	8000bf0 <__udivmoddi4+0x94>
 8000bda:	eb1c 0303 	adds.w	r3, ip, r3
 8000bde:	f100 31ff 	add.w	r1, r0, #4294967295
 8000be2:	f080 80fc 	bcs.w	8000dde <__udivmoddi4+0x282>
 8000be6:	429e      	cmp	r6, r3
 8000be8:	f240 80f9 	bls.w	8000dde <__udivmoddi4+0x282>
 8000bec:	4463      	add	r3, ip
 8000bee:	3802      	subs	r0, #2
 8000bf0:	1b9b      	subs	r3, r3, r6
 8000bf2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	b11d      	cbz	r5, 8000c02 <__udivmoddi4+0xa6>
 8000bfa:	40d3      	lsrs	r3, r2
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	e9c5 3200 	strd	r3, r2, [r5]
 8000c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c06:	428b      	cmp	r3, r1
 8000c08:	d905      	bls.n	8000c16 <__udivmoddi4+0xba>
 8000c0a:	b10d      	cbz	r5, 8000c10 <__udivmoddi4+0xb4>
 8000c0c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c10:	2100      	movs	r1, #0
 8000c12:	4608      	mov	r0, r1
 8000c14:	e7f5      	b.n	8000c02 <__udivmoddi4+0xa6>
 8000c16:	fab3 f183 	clz	r1, r3
 8000c1a:	2900      	cmp	r1, #0
 8000c1c:	d146      	bne.n	8000cac <__udivmoddi4+0x150>
 8000c1e:	42a3      	cmp	r3, r4
 8000c20:	d302      	bcc.n	8000c28 <__udivmoddi4+0xcc>
 8000c22:	4290      	cmp	r0, r2
 8000c24:	f0c0 80f0 	bcc.w	8000e08 <__udivmoddi4+0x2ac>
 8000c28:	1a86      	subs	r6, r0, r2
 8000c2a:	eb64 0303 	sbc.w	r3, r4, r3
 8000c2e:	2001      	movs	r0, #1
 8000c30:	2d00      	cmp	r5, #0
 8000c32:	d0e6      	beq.n	8000c02 <__udivmoddi4+0xa6>
 8000c34:	e9c5 6300 	strd	r6, r3, [r5]
 8000c38:	e7e3      	b.n	8000c02 <__udivmoddi4+0xa6>
 8000c3a:	2a00      	cmp	r2, #0
 8000c3c:	f040 8090 	bne.w	8000d60 <__udivmoddi4+0x204>
 8000c40:	eba1 040c 	sub.w	r4, r1, ip
 8000c44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c48:	fa1f f78c 	uxth.w	r7, ip
 8000c4c:	2101      	movs	r1, #1
 8000c4e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb08 4416 	mls	r4, r8, r6, r4
 8000c5a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c5e:	fb07 f006 	mul.w	r0, r7, r6
 8000c62:	4298      	cmp	r0, r3
 8000c64:	d908      	bls.n	8000c78 <__udivmoddi4+0x11c>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c6e:	d202      	bcs.n	8000c76 <__udivmoddi4+0x11a>
 8000c70:	4298      	cmp	r0, r3
 8000c72:	f200 80cd 	bhi.w	8000e10 <__udivmoddi4+0x2b4>
 8000c76:	4626      	mov	r6, r4
 8000c78:	1a1c      	subs	r4, r3, r0
 8000c7a:	fa1f f38e 	uxth.w	r3, lr
 8000c7e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c82:	fb08 4410 	mls	r4, r8, r0, r4
 8000c86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c8a:	fb00 f707 	mul.w	r7, r0, r7
 8000c8e:	429f      	cmp	r7, r3
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x148>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0x146>
 8000c9c:	429f      	cmp	r7, r3
 8000c9e:	f200 80b0 	bhi.w	8000e02 <__udivmoddi4+0x2a6>
 8000ca2:	4620      	mov	r0, r4
 8000ca4:	1bdb      	subs	r3, r3, r7
 8000ca6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000caa:	e7a5      	b.n	8000bf8 <__udivmoddi4+0x9c>
 8000cac:	f1c1 0620 	rsb	r6, r1, #32
 8000cb0:	408b      	lsls	r3, r1
 8000cb2:	fa22 f706 	lsr.w	r7, r2, r6
 8000cb6:	431f      	orrs	r7, r3
 8000cb8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cbc:	fa04 f301 	lsl.w	r3, r4, r1
 8000cc0:	ea43 030c 	orr.w	r3, r3, ip
 8000cc4:	40f4      	lsrs	r4, r6
 8000cc6:	fa00 f801 	lsl.w	r8, r0, r1
 8000cca:	0c38      	lsrs	r0, r7, #16
 8000ccc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cd0:	fbb4 fef0 	udiv	lr, r4, r0
 8000cd4:	fa1f fc87 	uxth.w	ip, r7
 8000cd8:	fb00 441e 	mls	r4, r0, lr, r4
 8000cdc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ce0:	fb0e f90c 	mul.w	r9, lr, ip
 8000ce4:	45a1      	cmp	r9, r4
 8000ce6:	fa02 f201 	lsl.w	r2, r2, r1
 8000cea:	d90a      	bls.n	8000d02 <__udivmoddi4+0x1a6>
 8000cec:	193c      	adds	r4, r7, r4
 8000cee:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000cf2:	f080 8084 	bcs.w	8000dfe <__udivmoddi4+0x2a2>
 8000cf6:	45a1      	cmp	r9, r4
 8000cf8:	f240 8081 	bls.w	8000dfe <__udivmoddi4+0x2a2>
 8000cfc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d00:	443c      	add	r4, r7
 8000d02:	eba4 0409 	sub.w	r4, r4, r9
 8000d06:	fa1f f983 	uxth.w	r9, r3
 8000d0a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d0e:	fb00 4413 	mls	r4, r0, r3, r4
 8000d12:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d16:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d1a:	45a4      	cmp	ip, r4
 8000d1c:	d907      	bls.n	8000d2e <__udivmoddi4+0x1d2>
 8000d1e:	193c      	adds	r4, r7, r4
 8000d20:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d24:	d267      	bcs.n	8000df6 <__udivmoddi4+0x29a>
 8000d26:	45a4      	cmp	ip, r4
 8000d28:	d965      	bls.n	8000df6 <__udivmoddi4+0x29a>
 8000d2a:	3b02      	subs	r3, #2
 8000d2c:	443c      	add	r4, r7
 8000d2e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d32:	fba0 9302 	umull	r9, r3, r0, r2
 8000d36:	eba4 040c 	sub.w	r4, r4, ip
 8000d3a:	429c      	cmp	r4, r3
 8000d3c:	46ce      	mov	lr, r9
 8000d3e:	469c      	mov	ip, r3
 8000d40:	d351      	bcc.n	8000de6 <__udivmoddi4+0x28a>
 8000d42:	d04e      	beq.n	8000de2 <__udivmoddi4+0x286>
 8000d44:	b155      	cbz	r5, 8000d5c <__udivmoddi4+0x200>
 8000d46:	ebb8 030e 	subs.w	r3, r8, lr
 8000d4a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d4e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d52:	40cb      	lsrs	r3, r1
 8000d54:	431e      	orrs	r6, r3
 8000d56:	40cc      	lsrs	r4, r1
 8000d58:	e9c5 6400 	strd	r6, r4, [r5]
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	e750      	b.n	8000c02 <__udivmoddi4+0xa6>
 8000d60:	f1c2 0320 	rsb	r3, r2, #32
 8000d64:	fa20 f103 	lsr.w	r1, r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d70:	4094      	lsls	r4, r2
 8000d72:	430c      	orrs	r4, r1
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d7c:	fa1f f78c 	uxth.w	r7, ip
 8000d80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d84:	fb08 3110 	mls	r1, r8, r0, r3
 8000d88:	0c23      	lsrs	r3, r4, #16
 8000d8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8e:	fb00 f107 	mul.w	r1, r0, r7
 8000d92:	4299      	cmp	r1, r3
 8000d94:	d908      	bls.n	8000da8 <__udivmoddi4+0x24c>
 8000d96:	eb1c 0303 	adds.w	r3, ip, r3
 8000d9a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d9e:	d22c      	bcs.n	8000dfa <__udivmoddi4+0x29e>
 8000da0:	4299      	cmp	r1, r3
 8000da2:	d92a      	bls.n	8000dfa <__udivmoddi4+0x29e>
 8000da4:	3802      	subs	r0, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f1f8 	udiv	r1, r3, r8
 8000db0:	fb08 3311 	mls	r3, r8, r1, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb01 f307 	mul.w	r3, r1, r7
 8000dbc:	42a3      	cmp	r3, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x276>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000dc8:	d213      	bcs.n	8000df2 <__udivmoddi4+0x296>
 8000dca:	42a3      	cmp	r3, r4
 8000dcc:	d911      	bls.n	8000df2 <__udivmoddi4+0x296>
 8000dce:	3902      	subs	r1, #2
 8000dd0:	4464      	add	r4, ip
 8000dd2:	1ae4      	subs	r4, r4, r3
 8000dd4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000dd8:	e739      	b.n	8000c4e <__udivmoddi4+0xf2>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	e6f0      	b.n	8000bc0 <__udivmoddi4+0x64>
 8000dde:	4608      	mov	r0, r1
 8000de0:	e706      	b.n	8000bf0 <__udivmoddi4+0x94>
 8000de2:	45c8      	cmp	r8, r9
 8000de4:	d2ae      	bcs.n	8000d44 <__udivmoddi4+0x1e8>
 8000de6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dea:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dee:	3801      	subs	r0, #1
 8000df0:	e7a8      	b.n	8000d44 <__udivmoddi4+0x1e8>
 8000df2:	4631      	mov	r1, r6
 8000df4:	e7ed      	b.n	8000dd2 <__udivmoddi4+0x276>
 8000df6:	4603      	mov	r3, r0
 8000df8:	e799      	b.n	8000d2e <__udivmoddi4+0x1d2>
 8000dfa:	4630      	mov	r0, r6
 8000dfc:	e7d4      	b.n	8000da8 <__udivmoddi4+0x24c>
 8000dfe:	46d6      	mov	lr, sl
 8000e00:	e77f      	b.n	8000d02 <__udivmoddi4+0x1a6>
 8000e02:	4463      	add	r3, ip
 8000e04:	3802      	subs	r0, #2
 8000e06:	e74d      	b.n	8000ca4 <__udivmoddi4+0x148>
 8000e08:	4606      	mov	r6, r0
 8000e0a:	4623      	mov	r3, r4
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	e70f      	b.n	8000c30 <__udivmoddi4+0xd4>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	4463      	add	r3, ip
 8000e14:	e730      	b.n	8000c78 <__udivmoddi4+0x11c>
 8000e16:	bf00      	nop

08000e18 <__aeabi_idiv0>:
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop

08000e1c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e22:	463b      	mov	r3, r7
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e2e:	4b22      	ldr	r3, [pc, #136]	@ (8000eb8 <MX_ADC1_Init+0x9c>)
 8000e30:	4a22      	ldr	r2, [pc, #136]	@ (8000ebc <MX_ADC1_Init+0xa0>)
 8000e32:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e34:	4b20      	ldr	r3, [pc, #128]	@ (8000eb8 <MX_ADC1_Init+0x9c>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e3a:	4b1f      	ldr	r3, [pc, #124]	@ (8000eb8 <MX_ADC1_Init+0x9c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000e40:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb8 <MX_ADC1_Init+0x9c>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e46:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb8 <MX_ADC1_Init+0x9c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb8 <MX_ADC1_Init+0x9c>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000e54:	4b18      	ldr	r3, [pc, #96]	@ (8000eb8 <MX_ADC1_Init+0x9c>)
 8000e56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000e5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8000e5c:	4b16      	ldr	r3, [pc, #88]	@ (8000eb8 <MX_ADC1_Init+0x9c>)
 8000e5e:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8000e62:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e64:	4b14      	ldr	r3, [pc, #80]	@ (8000eb8 <MX_ADC1_Init+0x9c>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e6a:	4b13      	ldr	r3, [pc, #76]	@ (8000eb8 <MX_ADC1_Init+0x9c>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000e70:	4b11      	ldr	r3, [pc, #68]	@ (8000eb8 <MX_ADC1_Init+0x9c>)
 8000e72:	2201      	movs	r2, #1
 8000e74:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e78:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb8 <MX_ADC1_Init+0x9c>)
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e7e:	480e      	ldr	r0, [pc, #56]	@ (8000eb8 <MX_ADC1_Init+0x9c>)
 8000e80:	f001 fd66 	bl	8002950 <HAL_ADC_Init>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000e8a:	f001 f85f 	bl	8001f4c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000e8e:	2307      	movs	r3, #7
 8000e90:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e92:	2301      	movs	r3, #1
 8000e94:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000e96:	2307      	movs	r3, #7
 8000e98:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4806      	ldr	r0, [pc, #24]	@ (8000eb8 <MX_ADC1_Init+0x9c>)
 8000ea0:	f001 febe 	bl	8002c20 <HAL_ADC_ConfigChannel>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000eaa:	f001 f84f 	bl	8001f4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000eae:	bf00      	nop
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000340 	.word	0x20000340
 8000ebc:	40012000 	.word	0x40012000

08000ec0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08a      	sub	sp, #40	@ 0x28
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a2f      	ldr	r2, [pc, #188]	@ (8000f9c <HAL_ADC_MspInit+0xdc>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d158      	bne.n	8000f94 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	613b      	str	r3, [r7, #16]
 8000ee6:	4b2e      	ldr	r3, [pc, #184]	@ (8000fa0 <HAL_ADC_MspInit+0xe0>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eea:	4a2d      	ldr	r2, [pc, #180]	@ (8000fa0 <HAL_ADC_MspInit+0xe0>)
 8000eec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ef0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ef2:	4b2b      	ldr	r3, [pc, #172]	@ (8000fa0 <HAL_ADC_MspInit+0xe0>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ef6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000efa:	613b      	str	r3, [r7, #16]
 8000efc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	4b27      	ldr	r3, [pc, #156]	@ (8000fa0 <HAL_ADC_MspInit+0xe0>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f06:	4a26      	ldr	r2, [pc, #152]	@ (8000fa0 <HAL_ADC_MspInit+0xe0>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f0e:	4b24      	ldr	r3, [pc, #144]	@ (8000fa0 <HAL_ADC_MspInit+0xe0>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f1a:	2380      	movs	r3, #128	@ 0x80
 8000f1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f26:	f107 0314 	add.w	r3, r7, #20
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	481d      	ldr	r0, [pc, #116]	@ (8000fa4 <HAL_ADC_MspInit+0xe4>)
 8000f2e:	f003 fc53 	bl	80047d8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000f32:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa8 <HAL_ADC_MspInit+0xe8>)
 8000f34:	4a1d      	ldr	r2, [pc, #116]	@ (8000fac <HAL_ADC_MspInit+0xec>)
 8000f36:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f38:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa8 <HAL_ADC_MspInit+0xe8>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa8 <HAL_ADC_MspInit+0xe8>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f44:	4b18      	ldr	r3, [pc, #96]	@ (8000fa8 <HAL_ADC_MspInit+0xe8>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f4a:	4b17      	ldr	r3, [pc, #92]	@ (8000fa8 <HAL_ADC_MspInit+0xe8>)
 8000f4c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f50:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f52:	4b15      	ldr	r3, [pc, #84]	@ (8000fa8 <HAL_ADC_MspInit+0xe8>)
 8000f54:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f58:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f5a:	4b13      	ldr	r3, [pc, #76]	@ (8000fa8 <HAL_ADC_MspInit+0xe8>)
 8000f5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f60:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f62:	4b11      	ldr	r3, [pc, #68]	@ (8000fa8 <HAL_ADC_MspInit+0xe8>)
 8000f64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f68:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa8 <HAL_ADC_MspInit+0xe8>)
 8000f6c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000f70:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f72:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa8 <HAL_ADC_MspInit+0xe8>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f78:	480b      	ldr	r0, [pc, #44]	@ (8000fa8 <HAL_ADC_MspInit+0xe8>)
 8000f7a:	f003 f8bd 	bl	80040f8 <HAL_DMA_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8000f84:	f000 ffe2 	bl	8001f4c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4a07      	ldr	r2, [pc, #28]	@ (8000fa8 <HAL_ADC_MspInit+0xe8>)
 8000f8c:	639a      	str	r2, [r3, #56]	@ 0x38
 8000f8e:	4a06      	ldr	r2, [pc, #24]	@ (8000fa8 <HAL_ADC_MspInit+0xe8>)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f94:	bf00      	nop
 8000f96:	3728      	adds	r7, #40	@ 0x28
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40012000 	.word	0x40012000
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40020000 	.word	0x40020000
 8000fa8:	20000388 	.word	0x20000388
 8000fac:	40026410 	.word	0x40026410

08000fb0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	@ 0x28
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000fb6:	4b22      	ldr	r3, [pc, #136]	@ (8001040 <MX_CAN1_Init+0x90>)
 8000fb8:	4a22      	ldr	r2, [pc, #136]	@ (8001044 <MX_CAN1_Init+0x94>)
 8000fba:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8000fbc:	4b20      	ldr	r3, [pc, #128]	@ (8001040 <MX_CAN1_Init+0x90>)
 8000fbe:	2203      	movs	r2, #3
 8000fc0:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000fc2:	4b1f      	ldr	r3, [pc, #124]	@ (8001040 <MX_CAN1_Init+0x90>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000fc8:	4b1d      	ldr	r3, [pc, #116]	@ (8001040 <MX_CAN1_Init+0x90>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_9TQ;
 8000fce:	4b1c      	ldr	r3, [pc, #112]	@ (8001040 <MX_CAN1_Init+0x90>)
 8000fd0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000fd4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000fd6:	4b1a      	ldr	r3, [pc, #104]	@ (8001040 <MX_CAN1_Init+0x90>)
 8000fd8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000fdc:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000fde:	4b18      	ldr	r3, [pc, #96]	@ (8001040 <MX_CAN1_Init+0x90>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000fe4:	4b16      	ldr	r3, [pc, #88]	@ (8001040 <MX_CAN1_Init+0x90>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000fea:	4b15      	ldr	r3, [pc, #84]	@ (8001040 <MX_CAN1_Init+0x90>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000ff0:	4b13      	ldr	r3, [pc, #76]	@ (8001040 <MX_CAN1_Init+0x90>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000ff6:	4b12      	ldr	r3, [pc, #72]	@ (8001040 <MX_CAN1_Init+0x90>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000ffc:	4b10      	ldr	r3, [pc, #64]	@ (8001040 <MX_CAN1_Init+0x90>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001002:	480f      	ldr	r0, [pc, #60]	@ (8001040 <MX_CAN1_Init+0x90>)
 8001004:	f002 f8bc 	bl	8003180 <HAL_CAN_Init>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800100e:	f000 ff9d 	bl	8001f4c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef filterConfig;

  filterConfig.FilterBank = 0;                      // Use Filter Bank 0
 8001012:	2300      	movs	r3, #0
 8001014:	617b      	str	r3, [r7, #20]
  filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;  // Mask mode (allows flexible ID matching)
 8001016:	2300      	movs	r3, #0
 8001018:	61bb      	str	r3, [r7, #24]
  filterConfig.FilterScale = CAN_FILTERSCALE_32BIT; // Use 32-bit filtering
 800101a:	2301      	movs	r3, #1
 800101c:	61fb      	str	r3, [r7, #28]
  filterConfig.FilterIdHigh = (0x000 << 5);         // Base ID (ignored due to mask)
 800101e:	2300      	movs	r3, #0
 8001020:	603b      	str	r3, [r7, #0]
  filterConfig.FilterMaskIdHigh = (0x000 << 5);     // Mask 0x000 means accept all messages
 8001022:	2300      	movs	r3, #0
 8001024:	60bb      	str	r3, [r7, #8]
  filterConfig.FilterFIFOAssignment = CAN_RX_FIFO1; // Assign messages to FIFO 1
 8001026:	2301      	movs	r3, #1
 8001028:	613b      	str	r3, [r7, #16]
  filterConfig.FilterActivation = ENABLE;
 800102a:	2301      	movs	r3, #1
 800102c:	623b      	str	r3, [r7, #32]
//  filterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;     // Route accepted messages to FIFO1
//  filterConfig.FilterActivation     = ENABLE;
//  filterConfig.SlaveStartFilterBank = 14;               // For CAN1 if CAN2 is used (safe default)


  HAL_CAN_ConfigFilter(&hcan1, &filterConfig);
 800102e:	463b      	mov	r3, r7
 8001030:	4619      	mov	r1, r3
 8001032:	4803      	ldr	r0, [pc, #12]	@ (8001040 <MX_CAN1_Init+0x90>)
 8001034:	f002 f9a0 	bl	8003378 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_Init 2 */

}
 8001038:	bf00      	nop
 800103a:	3728      	adds	r7, #40	@ 0x28
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	200003e8 	.word	0x200003e8
 8001044:	40006400 	.word	0x40006400

08001048 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08a      	sub	sp, #40	@ 0x28
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a2a      	ldr	r2, [pc, #168]	@ (8001110 <HAL_CAN_MspInit+0xc8>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d14d      	bne.n	8001106 <HAL_CAN_MspInit+0xbe>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	613b      	str	r3, [r7, #16]
 800106e:	4b29      	ldr	r3, [pc, #164]	@ (8001114 <HAL_CAN_MspInit+0xcc>)
 8001070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001072:	4a28      	ldr	r2, [pc, #160]	@ (8001114 <HAL_CAN_MspInit+0xcc>)
 8001074:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001078:	6413      	str	r3, [r2, #64]	@ 0x40
 800107a:	4b26      	ldr	r3, [pc, #152]	@ (8001114 <HAL_CAN_MspInit+0xcc>)
 800107c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001082:	613b      	str	r3, [r7, #16]
 8001084:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	4b22      	ldr	r3, [pc, #136]	@ (8001114 <HAL_CAN_MspInit+0xcc>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108e:	4a21      	ldr	r2, [pc, #132]	@ (8001114 <HAL_CAN_MspInit+0xcc>)
 8001090:	f043 0302 	orr.w	r3, r3, #2
 8001094:	6313      	str	r3, [r2, #48]	@ 0x30
 8001096:	4b1f      	ldr	r3, [pc, #124]	@ (8001114 <HAL_CAN_MspInit+0xcc>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80010a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a8:	2302      	movs	r3, #2
 80010aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010ac:	2301      	movs	r3, #1
 80010ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b0:	2303      	movs	r3, #3
 80010b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80010b4:	2309      	movs	r3, #9
 80010b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	4619      	mov	r1, r3
 80010be:	4816      	ldr	r0, [pc, #88]	@ (8001118 <HAL_CAN_MspInit+0xd0>)
 80010c0:	f003 fb8a 	bl	80047d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ca:	2302      	movs	r3, #2
 80010cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d2:	2303      	movs	r3, #3
 80010d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80010d6:	2309      	movs	r3, #9
 80010d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010da:	f107 0314 	add.w	r3, r7, #20
 80010de:	4619      	mov	r1, r3
 80010e0:	480d      	ldr	r0, [pc, #52]	@ (8001118 <HAL_CAN_MspInit+0xd0>)
 80010e2:	f003 fb79 	bl	80047d8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2105      	movs	r1, #5
 80010ea:	2014      	movs	r0, #20
 80010ec:	f002 ffda 	bl	80040a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80010f0:	2014      	movs	r0, #20
 80010f2:	f002 fff3 	bl	80040dc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2105      	movs	r1, #5
 80010fa:	2015      	movs	r0, #21
 80010fc:	f002 ffd2 	bl	80040a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001100:	2015      	movs	r0, #21
 8001102:	f002 ffeb 	bl	80040dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001106:	bf00      	nop
 8001108:	3728      	adds	r7, #40	@ 0x28
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40006400 	.word	0x40006400
 8001114:	40023800 	.word	0x40023800
 8001118:	40020400 	.word	0x40020400

0800111c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	607b      	str	r3, [r7, #4]
 8001126:	4b0c      	ldr	r3, [pc, #48]	@ (8001158 <MX_DMA_Init+0x3c>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112a:	4a0b      	ldr	r2, [pc, #44]	@ (8001158 <MX_DMA_Init+0x3c>)
 800112c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001130:	6313      	str	r3, [r2, #48]	@ 0x30
 8001132:	4b09      	ldr	r3, [pc, #36]	@ (8001158 <MX_DMA_Init+0x3c>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001136:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800113e:	2200      	movs	r2, #0
 8001140:	2105      	movs	r1, #5
 8001142:	2038      	movs	r0, #56	@ 0x38
 8001144:	f002 ffae 	bl	80040a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001148:	2038      	movs	r0, #56	@ 0x38
 800114a:	f002 ffc7 	bl	80040dc <HAL_NVIC_EnableIRQ>

}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40023800 	.word	0x40023800

0800115c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4a07      	ldr	r2, [pc, #28]	@ (8001188 <vApplicationGetIdleTaskMemory+0x2c>)
 800116c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	4a06      	ldr	r2, [pc, #24]	@ (800118c <vApplicationGetIdleTaskMemory+0x30>)
 8001172:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2280      	movs	r2, #128	@ 0x80
 8001178:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800117a:	bf00      	nop
 800117c:	3714      	adds	r7, #20
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	200004a0 	.word	0x200004a0
 800118c:	20000540 	.word	0x20000540

08001190 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001190:	b5b0      	push	{r4, r5, r7, lr}
 8001192:	b09a      	sub	sp, #104	@ 0x68
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	telemetry_data.tRpm = 0;
 8001196:	4b45      	ldr	r3, [pc, #276]	@ (80012ac <MX_FREERTOS_Init+0x11c>)
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
	telemetry_data.tRpm = 0;
 800119c:	4b43      	ldr	r3, [pc, #268]	@ (80012ac <MX_FREERTOS_Init+0x11c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
	telemetry_data.tSpeedKmh = 0;
 80011a2:	4b42      	ldr	r3, [pc, #264]	@ (80012ac <MX_FREERTOS_Init+0x11c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	609a      	str	r2, [r3, #8]
	telemetry_data.tHasDRS = 0;
 80011a8:	4b40      	ldr	r3, [pc, #256]	@ (80012ac <MX_FREERTOS_Init+0x11c>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	60da      	str	r2, [r3, #12]
	telemetry_data.tDrs = 0;
 80011ae:	4b3f      	ldr	r3, [pc, #252]	@ (80012ac <MX_FREERTOS_Init+0x11c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	611a      	str	r2, [r3, #16]
	telemetry_data.tPitLim = 0;
 80011b4:	4b3d      	ldr	r3, [pc, #244]	@ (80012ac <MX_FREERTOS_Init+0x11c>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	615a      	str	r2, [r3, #20]
	telemetry_data.tFuel = 0;
 80011ba:	4b3c      	ldr	r3, [pc, #240]	@ (80012ac <MX_FREERTOS_Init+0x11c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	619a      	str	r2, [r3, #24]
	telemetry_data.tBrakeBias = 0;
 80011c0:	4b3a      	ldr	r3, [pc, #232]	@ (80012ac <MX_FREERTOS_Init+0x11c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	61da      	str	r2, [r3, #28]
	gFfbSignal = 0;
 80011c6:	4b3a      	ldr	r3, [pc, #232]	@ (80012b0 <MX_FREERTOS_Init+0x120>)
 80011c8:	f04f 0200 	mov.w	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]

	HIDReport.steering = 0;        // Steering data (0-255)
 80011ce:	4b39      	ldr	r3, [pc, #228]	@ (80012b4 <MX_FREERTOS_Init+0x124>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	701a      	strb	r2, [r3, #0]
	HIDReport.throttle = 0;        // Throttle data (0-255)
 80011d4:	4b37      	ldr	r3, [pc, #220]	@ (80012b4 <MX_FREERTOS_Init+0x124>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	705a      	strb	r2, [r3, #1]
	HIDReport.brake = 0;           // Brake data (0-255)
 80011da:	4b36      	ldr	r3, [pc, #216]	@ (80012b4 <MX_FREERTOS_Init+0x124>)
 80011dc:	2200      	movs	r2, #0
 80011de:	709a      	strb	r2, [r3, #2]
	HIDReport.clutch = 0;         // Clutch data (0-255)
 80011e0:	4b34      	ldr	r3, [pc, #208]	@ (80012b4 <MX_FREERTOS_Init+0x124>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	70da      	strb	r2, [r3, #3]
	HIDReport.buttons = 0;   // Each bit represents a button'
 80011e6:	4b33      	ldr	r3, [pc, #204]	@ (80012b4 <MX_FREERTOS_Init+0x124>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	605a      	str	r2, [r3, #4]
	HIDReport.rz = 0;
 80011ec:	4b31      	ldr	r3, [pc, #196]	@ (80012b4 <MX_FREERTOS_Init+0x124>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	721a      	strb	r2, [r3, #8]
	HIDReport.slider = 0;
 80011f2:	4b30      	ldr	r3, [pc, #192]	@ (80012b4 <MX_FREERTOS_Init+0x124>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	725a      	strb	r2, [r3, #9]
	memset(&telemetry_data, 0, sizeof(telemetry_packet)); // Zero-initialize
 80011f8:	2228      	movs	r2, #40	@ 0x28
 80011fa:	2100      	movs	r1, #0
 80011fc:	482b      	ldr	r0, [pc, #172]	@ (80012ac <MX_FREERTOS_Init+0x11c>)
 80011fe:	f00e fc3b 	bl	800fa78 <memset>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of spiSendMutex */
  osSemaphoreDef(spiSendMutex);
 8001202:	2300      	movs	r3, #0
 8001204:	663b      	str	r3, [r7, #96]	@ 0x60
 8001206:	2300      	movs	r3, #0
 8001208:	667b      	str	r3, [r7, #100]	@ 0x64
  spiSendMutexHandle = osSemaphoreCreate(osSemaphore(spiSendMutex), 1);
 800120a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800120e:	2101      	movs	r1, #1
 8001210:	4618      	mov	r0, r3
 8001212:	f00b ffbc 	bl	800d18e <osSemaphoreCreate>
 8001216:	4603      	mov	r3, r0
 8001218:	4a27      	ldr	r2, [pc, #156]	@ (80012b8 <MX_FREERTOS_Init+0x128>)
 800121a:	6013      	str	r3, [r2, #0]

  /* definition and creation of uartMutex */
  osSemaphoreDef(uartMutex);
 800121c:	2300      	movs	r3, #0
 800121e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001220:	2300      	movs	r3, #0
 8001222:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uartMutexHandle = osSemaphoreCreate(osSemaphore(uartMutex), 1);
 8001224:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001228:	2101      	movs	r1, #1
 800122a:	4618      	mov	r0, r3
 800122c:	f00b ffaf 	bl	800d18e <osSemaphoreCreate>
 8001230:	4603      	mov	r3, r0
 8001232:	4a22      	ldr	r2, [pc, #136]	@ (80012bc <MX_FREERTOS_Init+0x12c>)
 8001234:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001236:	4b22      	ldr	r3, [pc, #136]	@ (80012c0 <MX_FREERTOS_Init+0x130>)
 8001238:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 800123c:	461d      	mov	r5, r3
 800123e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001240:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001242:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001246:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800124a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800124e:	2100      	movs	r1, #0
 8001250:	4618      	mov	r0, r3
 8001252:	f00b ff3c 	bl	800d0ce <osThreadCreate>
 8001256:	4603      	mov	r3, r0
 8001258:	4a1a      	ldr	r2, [pc, #104]	@ (80012c4 <MX_FREERTOS_Init+0x134>)
 800125a:	6013      	str	r3, [r2, #0]

  /* definition and creation of ControlLoopTask */
  osThreadDef(ControlLoopTask, StartControlLoop, osPriorityHigh, 0, 512);
 800125c:	4b1a      	ldr	r3, [pc, #104]	@ (80012c8 <MX_FREERTOS_Init+0x138>)
 800125e:	f107 0420 	add.w	r4, r7, #32
 8001262:	461d      	mov	r5, r3
 8001264:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001266:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001268:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800126c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ControlLoopTaskHandle = osThreadCreate(osThread(ControlLoopTask), NULL);
 8001270:	f107 0320 	add.w	r3, r7, #32
 8001274:	2100      	movs	r1, #0
 8001276:	4618      	mov	r0, r3
 8001278:	f00b ff29 	bl	800d0ce <osThreadCreate>
 800127c:	4603      	mov	r3, r0
 800127e:	4a13      	ldr	r2, [pc, #76]	@ (80012cc <MX_FREERTOS_Init+0x13c>)
 8001280:	6013      	str	r3, [r2, #0]

  /* definition and creation of CommLoopTask */
  osThreadDef(CommLoopTask, StartCommLoopTask, osPriorityNormal, 0, 512);
 8001282:	4b13      	ldr	r3, [pc, #76]	@ (80012d0 <MX_FREERTOS_Init+0x140>)
 8001284:	1d3c      	adds	r4, r7, #4
 8001286:	461d      	mov	r5, r3
 8001288:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800128a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800128c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001290:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CommLoopTaskHandle = osThreadCreate(osThread(CommLoopTask), NULL);
 8001294:	1d3b      	adds	r3, r7, #4
 8001296:	2100      	movs	r1, #0
 8001298:	4618      	mov	r0, r3
 800129a:	f00b ff18 	bl	800d0ce <osThreadCreate>
 800129e:	4603      	mov	r3, r0
 80012a0:	4a0c      	ldr	r2, [pc, #48]	@ (80012d4 <MX_FREERTOS_Init+0x144>)
 80012a2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80012a4:	bf00      	nop
 80012a6:	3768      	adds	r7, #104	@ 0x68
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bdb0      	pop	{r4, r5, r7, pc}
 80012ac:	20000410 	.word	0x20000410
 80012b0:	20000484 	.word	0x20000484
 80012b4:	20000438 	.word	0x20000438
 80012b8:	20000498 	.word	0x20000498
 80012bc:	2000049c 	.word	0x2000049c
 80012c0:	08010290 	.word	0x08010290
 80012c4:	2000048c 	.word	0x2000048c
 80012c8:	080102bc 	.word	0x080102bc
 80012cc:	20000490 	.word	0x20000490
 80012d0:	080102e8 	.word	0x080102e8
 80012d4:	20000494 	.word	0x20000494

080012d8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
 80012e0:	bf00      	nop
 80012e2:	e7fd      	b.n	80012e0 <StartDefaultTask+0x8>

080012e4 <StartControlLoop>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartControlLoop */
void StartControlLoop(void const * argument)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08a      	sub	sp, #40	@ 0x28
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartControlLoop */
  /* Infinite loop */
	Start_ADC_DMA();
 80012ec:	f000 fbfe 	bl	8001aec <Start_ADC_DMA>
  for(;;)
  {
	  float total_force = 0.0;
 80012f0:	f04f 0300 	mov.w	r3, #0
 80012f4:	627b      	str	r3, [r7, #36]	@ 0x24
	  const float Kp = 1.0f;
 80012f6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80012fa:	623b      	str	r3, [r7, #32]

	  for (;;) {
		  // Step 1: Retrieve current force feedback signal (e.g., from game data).
		  float force_feedback_signal = telemetry_data.tForceFB;
 80012fc:	4b23      	ldr	r3, [pc, #140]	@ (800138c <StartControlLoop+0xa8>)
 80012fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001300:	61fb      	str	r3, [r7, #28]
		  read_hall_sensor();
 8001302:	f000 fbd5 	bl	8001ab0 <read_hall_sensor>
//		  float friction_force = calculate_friction(angular_velocity);
//		  float lock_force = calculate_lock(wheel_angle);

		  // Step 3: Sum all forces and scale to PWM range:
//		  total_force = force_feedback_signal + inertia_force + damping_force + friction_force + lock_force;
		  total_force = force_feedback_signal;
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	627b      	str	r3, [r7, #36]	@ 0x24
		  // Strength gain
		  total_force *= gStrength;
 800130a:	4b21      	ldr	r3, [pc, #132]	@ (8001390 <StartControlLoop+0xac>)
 800130c:	edd3 7a00 	vldr	s15, [r3]
 8001310:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001314:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001318:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

		  total_force = constrain(total_force, -1.0, 1.0);
 800131c:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8001320:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 8001324:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001328:	f000 f984 	bl	8001634 <constrain>
 800132c:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24

		  // Deadband
		  const float FORCE_DEADBAND_THRESHOLD = 0.05f; // Adjust as needed
 8001330:	4b18      	ldr	r3, [pc, #96]	@ (8001394 <StartControlLoop+0xb0>)
 8001332:	61bb      	str	r3, [r7, #24]
		  const float ANGLE_DEADBAND_THRESHOLD = 50.0f; // Adjust as needed
 8001334:	4b18      	ldr	r3, [pc, #96]	@ (8001398 <StartControlLoop+0xb4>)
 8001336:	617b      	str	r3, [r7, #20]
//			  total_force = -Kp * (error / WHEEL_MAX_ANGLE);
//			  total_force = constrain(total_force, -1.0f, 1.0f);
//		  }

		  // Step 4: Map total_force to PWM and determine direction
		  float pwm_output = scale_to_pwm(total_force);
 8001338:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 800133c:	f000 f9a4 	bl	8001688 <scale_to_pwm>
 8001340:	ed87 0a04 	vstr	s0, [r7, #16]
		  // 0 is negative direction; 1 is positive direction
		  uint8_t motor_direction = (total_force >= 0) ? 1 : 0;
 8001344:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001348:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800134c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001350:	bfac      	ite	ge
 8001352:	2301      	movge	r3, #1
 8001354:	2300      	movlt	r3, #0
 8001356:	b2db      	uxtb	r3, r3
 8001358:	73fb      	strb	r3, [r7, #15]

		  // Debug
		  gDir = motor_direction;
 800135a:	4a10      	ldr	r2, [pc, #64]	@ (800139c <StartControlLoop+0xb8>)
 800135c:	7bfb      	ldrb	r3, [r7, #15]
 800135e:	7013      	strb	r3, [r2, #0]
		  gTotalforce = total_force;
 8001360:	4a0f      	ldr	r2, [pc, #60]	@ (80013a0 <StartControlLoop+0xbc>)
 8001362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001364:	6013      	str	r3, [r2, #0]
		  gPWMConst = pwm_output;
 8001366:	4a0f      	ldr	r2, [pc, #60]	@ (80013a4 <StartControlLoop+0xc0>)
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	6013      	str	r3, [r2, #0]

		  // Step 5: Send PWM signal to H-bridge for motor control:
		  //set_motor_direction(motor_direction);
		  set_motor_pwm(pwm_output, motor_direction);
 800136c:	7bfb      	ldrb	r3, [r7, #15]
 800136e:	4618      	mov	r0, r3
 8001370:	ed97 0a04 	vldr	s0, [r7, #16]
 8001374:	f000 fb1c 	bl	80019b0 <set_motor_pwm>
//		  set_motor_pwm(gPWMConstDebug, gDirDebug); //DEBUG MOTOR

		  // Step 6: Update wheel position and velocity for next loop:
		  update_wheel_position_and_velocity(&wheel_angle, &angular_velocity);
 8001378:	490b      	ldr	r1, [pc, #44]	@ (80013a8 <StartControlLoop+0xc4>)
 800137a:	480c      	ldr	r0, [pc, #48]	@ (80013ac <StartControlLoop+0xc8>)
 800137c:	f000 fa8e 	bl	800189c <update_wheel_position_and_velocity>

		  // Run this task periodically (every 10ms):
		  osDelay(5);
 8001380:	2005      	movs	r0, #5
 8001382:	f00b fef0 	bl	800d166 <osDelay>
	  for (;;) {
 8001386:	bf00      	nop
 8001388:	e7b8      	b.n	80012fc <StartControlLoop+0x18>
 800138a:	bf00      	nop
 800138c:	20000410 	.word	0x20000410
 8001390:	20000000 	.word	0x20000000
 8001394:	3d4ccccd 	.word	0x3d4ccccd
 8001398:	42480000 	.word	0x42480000
 800139c:	20000462 	.word	0x20000462
 80013a0:	2000045c 	.word	0x2000045c
 80013a4:	20000458 	.word	0x20000458
 80013a8:	20000468 	.word	0x20000468
 80013ac:	20000464 	.word	0x20000464

080013b0 <StartCommLoopTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCommLoopTask */
void StartCommLoopTask(void const * argument)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCommLoopTask */
  /* Infinite loop */
  for(;;)
  {
	  if (osSemaphoreWait(spiSendMutexHandle, 10) == osOK) {
 80013b8:	4b08      	ldr	r3, [pc, #32]	@ (80013dc <StartCommLoopTask+0x2c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	210a      	movs	r1, #10
 80013be:	4618      	mov	r0, r3
 80013c0:	f00b ff18 	bl	800d1f4 <osSemaphoreWait>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d101      	bne.n	80013ce <StartCommLoopTask+0x1e>
		  runCAN();
 80013ca:	f000 f877 	bl	80014bc <runCAN>
	  }

	  runReport();
 80013ce:	f000 f827 	bl	8001420 <runReport>
    osDelay(10);
 80013d2:	200a      	movs	r0, #10
 80013d4:	f00b fec7 	bl	800d166 <osDelay>
	  if (osSemaphoreWait(spiSendMutexHandle, 10) == osOK) {
 80013d8:	e7ee      	b.n	80013b8 <StartCommLoopTask+0x8>
 80013da:	bf00      	nop
 80013dc:	20000498 	.word	0x20000498

080013e0 <DWT_Init>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
// Initialize DWT for cycle counting
void DWT_Init(void) {
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 80013e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001418 <DWT_Init+0x38>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d105      	bne.n	80013fc <DWT_Init+0x1c>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80013f0:	4b09      	ldr	r3, [pc, #36]	@ (8001418 <DWT_Init+0x38>)
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	4a08      	ldr	r2, [pc, #32]	@ (8001418 <DWT_Init+0x38>)
 80013f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80013fa:	60d3      	str	r3, [r2, #12]
    }
    DWT->CYCCNT = 0; // Reset the cycle counter
 80013fc:	4b07      	ldr	r3, [pc, #28]	@ (800141c <DWT_Init+0x3c>)
 80013fe:	2200      	movs	r2, #0
 8001400:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; // Enable the cycle counter
 8001402:	4b06      	ldr	r3, [pc, #24]	@ (800141c <DWT_Init+0x3c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a05      	ldr	r2, [pc, #20]	@ (800141c <DWT_Init+0x3c>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	6013      	str	r3, [r2, #0]
}
 800140e:	bf00      	nop
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	e000edf0 	.word	0xe000edf0
 800141c:	e0001000 	.word	0xe0001000

08001420 <runReport>:
    while ((DWT->CYCCNT - startTick) < delayTicks) {
        // Wait until the required delay has passed
    }
}

void runReport() {
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
	memset(&HIDReport, 0, sizeof(HIDReport_t));
 8001426:	220a      	movs	r2, #10
 8001428:	2100      	movs	r1, #0
 800142a:	4820      	ldr	r0, [pc, #128]	@ (80014ac <runReport+0x8c>)
 800142c:	f00e fb24 	bl	800fa78 <memset>

	uint16_t max_clutch = pedal_data.encoder_3;
 8001430:	4b1f      	ldr	r3, [pc, #124]	@ (80014b0 <runReport+0x90>)
 8001432:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001436:	81fb      	strh	r3, [r7, #14]

	if (user_input_data.hall_analog_1 > max_clutch) {
 8001438:	4b1e      	ldr	r3, [pc, #120]	@ (80014b4 <runReport+0x94>)
 800143a:	791b      	ldrb	r3, [r3, #4]
 800143c:	461a      	mov	r2, r3
 800143e:	89fb      	ldrh	r3, [r7, #14]
 8001440:	4293      	cmp	r3, r2
 8001442:	d202      	bcs.n	800144a <runReport+0x2a>
		max_clutch = user_input_data.hall_analog_1;
 8001444:	4b1b      	ldr	r3, [pc, #108]	@ (80014b4 <runReport+0x94>)
 8001446:	791b      	ldrb	r3, [r3, #4]
 8001448:	81fb      	strh	r3, [r7, #14]
	}
	if (user_input_data.hall_analog_1 > max_clutch) {
 800144a:	4b1a      	ldr	r3, [pc, #104]	@ (80014b4 <runReport+0x94>)
 800144c:	791b      	ldrb	r3, [r3, #4]
 800144e:	461a      	mov	r2, r3
 8001450:	89fb      	ldrh	r3, [r7, #14]
 8001452:	4293      	cmp	r3, r2
 8001454:	d202      	bcs.n	800145c <runReport+0x3c>
		max_clutch = user_input_data.hall_analog_1;
 8001456:	4b17      	ldr	r3, [pc, #92]	@ (80014b4 <runReport+0x94>)
 8001458:	791b      	ldrb	r3, [r3, #4]
 800145a:	81fb      	strh	r3, [r7, #14]
	}

	HIDReport.steering = gSteering;
 800145c:	4b16      	ldr	r3, [pc, #88]	@ (80014b8 <runReport+0x98>)
 800145e:	edd3 7a00 	vldr	s15, [r3]
 8001462:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001466:	edc7 7a01 	vstr	s15, [r7, #4]
 800146a:	793b      	ldrb	r3, [r7, #4]
 800146c:	b2da      	uxtb	r2, r3
 800146e:	4b0f      	ldr	r3, [pc, #60]	@ (80014ac <runReport+0x8c>)
 8001470:	701a      	strb	r2, [r3, #0]
	HIDReport.throttle = pedal_data.encoder_1;
 8001472:	4b0f      	ldr	r3, [pc, #60]	@ (80014b0 <runReport+0x90>)
 8001474:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001478:	b2da      	uxtb	r2, r3
 800147a:	4b0c      	ldr	r3, [pc, #48]	@ (80014ac <runReport+0x8c>)
 800147c:	705a      	strb	r2, [r3, #1]
	HIDReport.brake = pedal_data.encoder_2;
 800147e:	4b0c      	ldr	r3, [pc, #48]	@ (80014b0 <runReport+0x90>)
 8001480:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001484:	b2da      	uxtb	r2, r3
 8001486:	4b09      	ldr	r3, [pc, #36]	@ (80014ac <runReport+0x8c>)
 8001488:	709a      	strb	r2, [r3, #2]
	HIDReport.clutch = max_clutch;
 800148a:	89fb      	ldrh	r3, [r7, #14]
 800148c:	b2da      	uxtb	r2, r3
 800148e:	4b07      	ldr	r3, [pc, #28]	@ (80014ac <runReport+0x8c>)
 8001490:	70da      	strb	r2, [r3, #3]

	HIDReport.buttons = user_input_data.buttons;
 8001492:	4b08      	ldr	r3, [pc, #32]	@ (80014b4 <runReport+0x94>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a05      	ldr	r2, [pc, #20]	@ (80014ac <runReport+0x8c>)
 8001498:	6053      	str	r3, [r2, #4]

//	HIDReport.rz = (uint8_t) (user_input_data.encoder_1 & 0xFF);
//	HIDReport.slider = (uint8_t) (user_input_data.encoder_2 & 0xFF);

	USBD_CUSTOM_HID_SendCustomReport((uint8_t *)&HIDReport, sizeof(HIDReport));
 800149a:	210a      	movs	r1, #10
 800149c:	4803      	ldr	r0, [pc, #12]	@ (80014ac <runReport+0x8c>)
 800149e:	f008 fe97 	bl	800a1d0 <USBD_CUSTOM_HID_SendCustomReport>
}
 80014a2:	bf00      	nop
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000438 	.word	0x20000438
 80014b0:	2000044c 	.word	0x2000044c
 80014b4:	20000444 	.word	0x20000444
 80014b8:	2000046c 	.word	0x2000046c

080014bc <runCAN>:

void runCAN() {
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
    static uint8_t messageIndex = 0;
    uint32_t currentTime = HAL_GetTick();
 80014c2:	f001 fa15 	bl	80028f0 <HAL_GetTick>
 80014c6:	6078      	str	r0, [r7, #4]

    if (currentTime - lastSendTime >= 2) {  // Reduce cycle time to avoid backlog
 80014c8:	4b3e      	ldr	r3, [pc, #248]	@ (80015c4 <runCAN+0x108>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d96d      	bls.n	80015b0 <runCAN+0xf4>
        switch (messageIndex) {
 80014d4:	4b3c      	ldr	r3, [pc, #240]	@ (80015c8 <runCAN+0x10c>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b03      	cmp	r3, #3
 80014da:	d859      	bhi.n	8001590 <runCAN+0xd4>
 80014dc:	a201      	add	r2, pc, #4	@ (adr r2, 80014e4 <runCAN+0x28>)
 80014de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014e2:	bf00      	nop
 80014e4:	080014f5 	.word	0x080014f5
 80014e8:	08001521 	.word	0x08001521
 80014ec:	0800154d 	.word	0x0800154d
 80014f0:	08001579 	.word	0x08001579
            case 0:
                sendCANMessage(0x100, telemetry_data.tRpm);
 80014f4:	4b35      	ldr	r3, [pc, #212]	@ (80015cc <runCAN+0x110>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4619      	mov	r1, r3
 80014fa:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80014fe:	f000 f869 	bl	80015d4 <sendCANMessage>
                sendCANMessage(0x101, telemetry_data.tGear);
 8001502:	4b32      	ldr	r3, [pc, #200]	@ (80015cc <runCAN+0x110>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	4619      	mov	r1, r3
 8001508:	f240 1001 	movw	r0, #257	@ 0x101
 800150c:	f000 f862 	bl	80015d4 <sendCANMessage>
                sendCANMessage(0x102, telemetry_data.tSpeedKmh);
 8001510:	4b2e      	ldr	r3, [pc, #184]	@ (80015cc <runCAN+0x110>)
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	4619      	mov	r1, r3
 8001516:	f44f 7081 	mov.w	r0, #258	@ 0x102
 800151a:	f000 f85b 	bl	80015d4 <sendCANMessage>
                break;
 800151e:	e037      	b.n	8001590 <runCAN+0xd4>
            case 1:
                sendCANMessage(0x103, telemetry_data.tHasDRS);
 8001520:	4b2a      	ldr	r3, [pc, #168]	@ (80015cc <runCAN+0x110>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	4619      	mov	r1, r3
 8001526:	f240 1003 	movw	r0, #259	@ 0x103
 800152a:	f000 f853 	bl	80015d4 <sendCANMessage>
                sendCANMessage(0x104, telemetry_data.tDrs);
 800152e:	4b27      	ldr	r3, [pc, #156]	@ (80015cc <runCAN+0x110>)
 8001530:	691b      	ldr	r3, [r3, #16]
 8001532:	4619      	mov	r1, r3
 8001534:	f44f 7082 	mov.w	r0, #260	@ 0x104
 8001538:	f000 f84c 	bl	80015d4 <sendCANMessage>
                sendCANMessage(0x105, telemetry_data.tPitLim);
 800153c:	4b23      	ldr	r3, [pc, #140]	@ (80015cc <runCAN+0x110>)
 800153e:	695b      	ldr	r3, [r3, #20]
 8001540:	4619      	mov	r1, r3
 8001542:	f240 1005 	movw	r0, #261	@ 0x105
 8001546:	f000 f845 	bl	80015d4 <sendCANMessage>
                break;
 800154a:	e021      	b.n	8001590 <runCAN+0xd4>
            case 2:
                sendCANMessage(0x106, telemetry_data.tFuel);
 800154c:	4b1f      	ldr	r3, [pc, #124]	@ (80015cc <runCAN+0x110>)
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	4619      	mov	r1, r3
 8001552:	f44f 7083 	mov.w	r0, #262	@ 0x106
 8001556:	f000 f83d 	bl	80015d4 <sendCANMessage>
                sendCANMessage(0x107, telemetry_data.tBrakeBias);
 800155a:	4b1c      	ldr	r3, [pc, #112]	@ (80015cc <runCAN+0x110>)
 800155c:	69db      	ldr	r3, [r3, #28]
 800155e:	4619      	mov	r1, r3
 8001560:	f240 1007 	movw	r0, #263	@ 0x107
 8001564:	f000 f836 	bl	80015d4 <sendCANMessage>
                sendCANMessage(0x108, telemetry_data.tMaxRpm);
 8001568:	4b18      	ldr	r3, [pc, #96]	@ (80015cc <runCAN+0x110>)
 800156a:	6a1b      	ldr	r3, [r3, #32]
 800156c:	4619      	mov	r1, r3
 800156e:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8001572:	f000 f82f 	bl	80015d4 <sendCANMessage>
                break;
 8001576:	e00b      	b.n	8001590 <runCAN+0xd4>
            case 3:
                sendCANMessage(0x109, telemetry_data.tForceFB);
 8001578:	4b14      	ldr	r3, [pc, #80]	@ (80015cc <runCAN+0x110>)
 800157a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800157e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001582:	ee17 1a90 	vmov	r1, s15
 8001586:	f240 1009 	movw	r0, #265	@ 0x109
 800158a:	f000 f823 	bl	80015d4 <sendCANMessage>
                break;
 800158e:	bf00      	nop
        }

        messageIndex = (messageIndex + 1) % 4;  // Cycle through cases
 8001590:	4b0d      	ldr	r3, [pc, #52]	@ (80015c8 <runCAN+0x10c>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	3301      	adds	r3, #1
 8001596:	425a      	negs	r2, r3
 8001598:	f003 0303 	and.w	r3, r3, #3
 800159c:	f002 0203 	and.w	r2, r2, #3
 80015a0:	bf58      	it	pl
 80015a2:	4253      	negpl	r3, r2
 80015a4:	b2da      	uxtb	r2, r3
 80015a6:	4b08      	ldr	r3, [pc, #32]	@ (80015c8 <runCAN+0x10c>)
 80015a8:	701a      	strb	r2, [r3, #0]
        lastSendTime = currentTime;  // Update time
 80015aa:	4a06      	ldr	r2, [pc, #24]	@ (80015c4 <runCAN+0x108>)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6013      	str	r3, [r2, #0]
    }

    osSemaphoreRelease(spiSendMutexHandle);
 80015b0:	4b07      	ldr	r3, [pc, #28]	@ (80015d0 <runCAN+0x114>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f00b fe6b 	bl	800d290 <osSemaphoreRelease>
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	2000047c 	.word	0x2000047c
 80015c8:	20000740 	.word	0x20000740
 80015cc:	20000410 	.word	0x20000410
 80015d0:	20000498 	.word	0x20000498

080015d4 <sendCANMessage>:

void sendCANMessage(uint16_t canID, int32_t value) {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08c      	sub	sp, #48	@ 0x30
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	6039      	str	r1, [r7, #0]
 80015de:	80fb      	strh	r3, [r7, #6]
    CAN_TxHeaderTypeDef TxHeader;
    uint8_t TxData[4];  // 4-byte buffer
    uint32_t TxMailbox;

    // Configure the CAN header
    TxHeader.StdId = canID;  // Set the ID
 80015e0:	88fb      	ldrh	r3, [r7, #6]
 80015e2:	617b      	str	r3, [r7, #20]
    TxHeader.IDE = CAN_ID_STD;  // Standard 11-bit ID
 80015e4:	2300      	movs	r3, #0
 80015e6:	61fb      	str	r3, [r7, #28]
    TxHeader.RTR = CAN_RTR_DATA;  // Data frame, not remote request
 80015e8:	2300      	movs	r3, #0
 80015ea:	623b      	str	r3, [r7, #32]
    TxHeader.DLC = sizeof(value);  // Data Length = 4 bytes
 80015ec:	2304      	movs	r3, #4
 80015ee:	627b      	str	r3, [r7, #36]	@ 0x24

    // Copy integer value into TxData buffer (ensure correct byte order)
    memcpy(TxData, &value, sizeof(value));
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	613b      	str	r3, [r7, #16]

    // Send the CAN message
    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
 80015f4:	f107 030c 	add.w	r3, r7, #12
 80015f8:	f107 0210 	add.w	r2, r7, #16
 80015fc:	f107 0114 	add.w	r1, r7, #20
 8001600:	480b      	ldr	r0, [pc, #44]	@ (8001630 <sendCANMessage+0x5c>)
 8001602:	f002 f826 	bl	8003652 <HAL_CAN_AddTxMessage>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d00d      	beq.n	8001628 <sendCANMessage+0x54>
    	 // Optionally log the state of CAN error counters
		uint32_t error = HAL_CAN_GetError(&hcan1);
 800160c:	4808      	ldr	r0, [pc, #32]	@ (8001630 <sendCANMessage+0x5c>)
 800160e:	f002 fc85 	bl	8003f1c <HAL_CAN_GetError>
 8001612:	62f8      	str	r0, [r7, #44]	@ 0x2c
		HAL_CAN_Stop(&hcan1);  // Stop CAN
 8001614:	4806      	ldr	r0, [pc, #24]	@ (8001630 <sendCANMessage+0x5c>)
 8001616:	f001 ffd3 	bl	80035c0 <HAL_CAN_Stop>
		HAL_CAN_Start(&hcan1); // Restart CAN
 800161a:	4805      	ldr	r0, [pc, #20]	@ (8001630 <sendCANMessage+0x5c>)
 800161c:	f001 ff8c 	bl	8003538 <HAL_CAN_Start>

		// Optional: Clear error flags
		__HAL_CAN_CLEAR_FLAG(&hcan1, CAN_FLAG_ERRI);
 8001620:	4b03      	ldr	r3, [pc, #12]	@ (8001630 <sendCANMessage+0x5c>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2204      	movs	r2, #4
 8001626:	605a      	str	r2, [r3, #4]
    }
}
 8001628:	bf00      	nop
 800162a:	3730      	adds	r7, #48	@ 0x30
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	200003e8 	.word	0x200003e8

08001634 <constrain>:

    // Calculate the oscillation value using a sine wave
    return sin((2 * M_PI * elapsed_time) / period);
}

float constrain(float x, float lower, float upper) {
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	ed87 0a03 	vstr	s0, [r7, #12]
 800163e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001642:	ed87 1a01 	vstr	s2, [r7, #4]
    if (x < lower) return lower;
 8001646:	ed97 7a03 	vldr	s14, [r7, #12]
 800164a:	edd7 7a02 	vldr	s15, [r7, #8]
 800164e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001656:	d501      	bpl.n	800165c <constrain+0x28>
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	e00b      	b.n	8001674 <constrain+0x40>
    if (x > upper) return upper;
 800165c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001660:	edd7 7a01 	vldr	s15, [r7, #4]
 8001664:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800166c:	dd01      	ble.n	8001672 <constrain+0x3e>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	e000      	b.n	8001674 <constrain+0x40>
    return x;
 8001672:	68fb      	ldr	r3, [r7, #12]
}
 8001674:	ee07 3a90 	vmov	s15, r3
 8001678:	eeb0 0a67 	vmov.f32	s0, s15
 800167c:	3714      	adds	r7, #20
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
	...

08001688 <scale_to_pwm>:
        return -lock_coefficient * (angle + max_angle);
    }
    return 0;
}

float scale_to_pwm(float total_force) {
 8001688:	b5b0      	push	{r4, r5, r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	ed87 0a01 	vstr	s0, [r7, #4]
    const float MIN_PWM = 50.0f;    // Minimum PWM value for the motor to start moving
 8001692:	4b2b      	ldr	r3, [pc, #172]	@ (8001740 <scale_to_pwm+0xb8>)
 8001694:	617b      	str	r3, [r7, #20]
    const float MAX_PWM = 255.0f;   // Maximum PWM value
 8001696:	4b2b      	ldr	r3, [pc, #172]	@ (8001744 <scale_to_pwm+0xbc>)
 8001698:	613b      	str	r3, [r7, #16]

    // If total_force is zero, return zero PWM output
    if (total_force == 0.0f) {
 800169a:	edd7 7a01 	vldr	s15, [r7, #4]
 800169e:	eef5 7a40 	vcmp.f32	s15, #0.0
 80016a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016a6:	d106      	bne.n	80016b6 <scale_to_pwm+0x2e>
        gPWM = 0.0f;
 80016a8:	4b27      	ldr	r3, [pc, #156]	@ (8001748 <scale_to_pwm+0xc0>)
 80016aa:	f04f 0200 	mov.w	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
        return 0.0f;
 80016b0:	f04f 0300 	mov.w	r3, #0
 80016b4:	e03c      	b.n	8001730 <scale_to_pwm+0xa8>
    }

    // Calculate PWM output
    float pwm_output = fabs(total_force) * (MAX_PWM - MIN_PWM) + MIN_PWM;
 80016b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80016ba:	eef0 7ae7 	vabs.f32	s15, s15
 80016be:	ee17 0a90 	vmov	r0, s15
 80016c2:	f7fe ff59 	bl	8000578 <__aeabi_f2d>
 80016c6:	4604      	mov	r4, r0
 80016c8:	460d      	mov	r5, r1
 80016ca:	ed97 7a04 	vldr	s14, [r7, #16]
 80016ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80016d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016d6:	ee17 0a90 	vmov	r0, s15
 80016da:	f7fe ff4d 	bl	8000578 <__aeabi_f2d>
 80016de:	4602      	mov	r2, r0
 80016e0:	460b      	mov	r3, r1
 80016e2:	4620      	mov	r0, r4
 80016e4:	4629      	mov	r1, r5
 80016e6:	f7fe ff9f 	bl	8000628 <__aeabi_dmul>
 80016ea:	4602      	mov	r2, r0
 80016ec:	460b      	mov	r3, r1
 80016ee:	4614      	mov	r4, r2
 80016f0:	461d      	mov	r5, r3
 80016f2:	6978      	ldr	r0, [r7, #20]
 80016f4:	f7fe ff40 	bl	8000578 <__aeabi_f2d>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	4620      	mov	r0, r4
 80016fe:	4629      	mov	r1, r5
 8001700:	f7fe fddc 	bl	80002bc <__adddf3>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	4610      	mov	r0, r2
 800170a:	4619      	mov	r1, r3
 800170c:	f7ff f9be 	bl	8000a8c <__aeabi_d2f>
 8001710:	4603      	mov	r3, r0
 8001712:	60fb      	str	r3, [r7, #12]

    // Constrain PWM output to valid range
    pwm_output = constrain(pwm_output, MIN_PWM, MAX_PWM);
 8001714:	ed97 1a04 	vldr	s2, [r7, #16]
 8001718:	edd7 0a05 	vldr	s1, [r7, #20]
 800171c:	ed97 0a03 	vldr	s0, [r7, #12]
 8001720:	f7ff ff88 	bl	8001634 <constrain>
 8001724:	ed87 0a03 	vstr	s0, [r7, #12]

    // Update debug variable
    gPWM = pwm_output;
 8001728:	4a07      	ldr	r2, [pc, #28]	@ (8001748 <scale_to_pwm+0xc0>)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	6013      	str	r3, [r2, #0]

    return pwm_output;
 800172e:	68fb      	ldr	r3, [r7, #12]
}
 8001730:	ee07 3a90 	vmov	s15, r3
 8001734:	eeb0 0a67 	vmov.f32	s0, s15
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bdb0      	pop	{r4, r5, r7, pc}
 800173e:	bf00      	nop
 8001740:	42480000 	.word	0x42480000
 8001744:	437f0000 	.word	0x437f0000
 8001748:	20000454 	.word	0x20000454

0800174c <map_wheel_position_to_axis>:

uint8_t map_wheel_position_to_axis(int32_t position) {
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
    int32_t min_position = -450;
 8001754:	4b15      	ldr	r3, [pc, #84]	@ (80017ac <map_wheel_position_to_axis+0x60>)
 8001756:	60fb      	str	r3, [r7, #12]
    int32_t max_position = 450;
 8001758:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 800175c:	60bb      	str	r3, [r7, #8]

    // Clamp the position to the valid range
	if (position < min_position) {
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	429a      	cmp	r2, r3
 8001764:	da02      	bge.n	800176c <map_wheel_position_to_axis+0x20>
		position = min_position;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	607b      	str	r3, [r7, #4]
 800176a:	e005      	b.n	8001778 <map_wheel_position_to_axis+0x2c>
	} else if (position > max_position) {
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	429a      	cmp	r2, r3
 8001772:	dd01      	ble.n	8001778 <map_wheel_position_to_axis+0x2c>
		position = max_position;
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	607b      	str	r3, [r7, #4]
	}

	// Reverse the mapping
	return (uint8_t)((((max_position - position) * 255) + (max_position - min_position) / 2) / (max_position - min_position));
 8001778:	68ba      	ldr	r2, [r7, #8]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	1ad2      	subs	r2, r2, r3
 800177e:	4613      	mov	r3, r2
 8001780:	021b      	lsls	r3, r3, #8
 8001782:	1a9a      	subs	r2, r3, r2
 8001784:	68b9      	ldr	r1, [r7, #8]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	1acb      	subs	r3, r1, r3
 800178a:	0fd9      	lsrs	r1, r3, #31
 800178c:	440b      	add	r3, r1
 800178e:	105b      	asrs	r3, r3, #1
 8001790:	441a      	add	r2, r3
 8001792:	68b9      	ldr	r1, [r7, #8]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	1acb      	subs	r3, r1, r3
 8001798:	fb92 f3f3 	sdiv	r3, r2, r3
 800179c:	b2db      	uxtb	r3, r3
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3714      	adds	r7, #20
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	fffffe3e 	.word	0xfffffe3e

080017b0 <init_encoder>:

extern void init_encoder() {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
    // Start the encoder mode timer
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80017b4:	213c      	movs	r1, #60	@ 0x3c
 80017b6:	4803      	ldr	r0, [pc, #12]	@ (80017c4 <init_encoder+0x14>)
 80017b8:	f006 f8d4 	bl	8007964 <HAL_TIM_Encoder_Start>
    reset_encoder_position();
 80017bc:	f000 f812 	bl	80017e4 <reset_encoder_position>
}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20000794 	.word	0x20000794

080017c8 <read_encoder_position>:

int16_t read_encoder_position() {
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
    return __HAL_TIM_GET_COUNTER(&htim2);  // Get the current encoder count
 80017cc:	4b04      	ldr	r3, [pc, #16]	@ (80017e0 <read_encoder_position+0x18>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d2:	b21b      	sxth	r3, r3
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	20000794 	.word	0x20000794

080017e4 <reset_encoder_position>:

void reset_encoder_position() {
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
    __HAL_TIM_SET_COUNTER(&htim2, 0);  // Reset the encoder count to zero
 80017e8:	4b04      	ldr	r3, [pc, #16]	@ (80017fc <reset_encoder_position+0x18>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2200      	movs	r2, #0
 80017ee:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	20000794 	.word	0x20000794

08001800 <get_angle_degrees>:

float get_angle_degrees() {
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
	if(gHall <= 1110 && gHall <= 1130)
 8001806:	4b1f      	ldr	r3, [pc, #124]	@ (8001884 <get_angle_degrees+0x84>)
 8001808:	edd3 7a00 	vldr	s15, [r3]
 800180c:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001888 <get_angle_degrees+0x88>
 8001810:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001818:	d80b      	bhi.n	8001832 <get_angle_degrees+0x32>
 800181a:	4b1a      	ldr	r3, [pc, #104]	@ (8001884 <get_angle_degrees+0x84>)
 800181c:	edd3 7a00 	vldr	s15, [r3]
 8001820:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 800188c <get_angle_degrees+0x8c>
 8001824:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800182c:	d801      	bhi.n	8001832 <get_angle_degrees+0x32>
	{
		reset_encoder_position();
 800182e:	f7ff ffd9 	bl	80017e4 <reset_encoder_position>
	}
	int16_t position = read_encoder_position();
 8001832:	f7ff ffc9 	bl	80017c8 <read_encoder_position>
 8001836:	4603      	mov	r3, r0
 8001838:	80fb      	strh	r3, [r7, #6]
    gPosition = position;
 800183a:	4a15      	ldr	r2, [pc, #84]	@ (8001890 <get_angle_degrees+0x90>)
 800183c:	88fb      	ldrh	r3, [r7, #6]
 800183e:	8013      	strh	r3, [r2, #0]
    return (position * 360.0) / ENCODER_RESOLUTION;
 8001840:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001844:	4618      	mov	r0, r3
 8001846:	f7fe fe85 	bl	8000554 <__aeabi_i2d>
 800184a:	f04f 0200 	mov.w	r2, #0
 800184e:	4b11      	ldr	r3, [pc, #68]	@ (8001894 <get_angle_degrees+0x94>)
 8001850:	f7fe feea 	bl	8000628 <__aeabi_dmul>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	4610      	mov	r0, r2
 800185a:	4619      	mov	r1, r3
 800185c:	f04f 0200 	mov.w	r2, #0
 8001860:	4b0d      	ldr	r3, [pc, #52]	@ (8001898 <get_angle_degrees+0x98>)
 8001862:	f7ff f80b 	bl	800087c <__aeabi_ddiv>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	4610      	mov	r0, r2
 800186c:	4619      	mov	r1, r3
 800186e:	f7ff f90d 	bl	8000a8c <__aeabi_d2f>
 8001872:	4603      	mov	r3, r0
 8001874:	ee07 3a90 	vmov	s15, r3
}
 8001878:	eeb0 0a67 	vmov.f32	s0, s15
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20000470 	.word	0x20000470
 8001888:	448ac000 	.word	0x448ac000
 800188c:	448d4000 	.word	0x448d4000
 8001890:	20000460 	.word	0x20000460
 8001894:	40768000 	.word	0x40768000
 8001898:	40a2c000 	.word	0x40a2c000

0800189c <update_wheel_position_and_velocity>:
//    last_update_time = current_time;
//
//    gSteering = map_wheel_position_to_axis(*wheel_angle);
//}

void update_wheel_position_and_velocity(float *wheel_angle, float *angular_velocity) {
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
    // Get the absolute current encoder angle
    float current_angle = get_angle_degrees();
 80018a6:	f7ff ffab 	bl	8001800 <get_angle_degrees>
 80018aa:	ed87 0a05 	vstr	s0, [r7, #20]

    // Clamp the wheel angle between -WHEEL_MAX_ANGLE and +WHEEL_MAX_ANGLE
    if (current_angle > WHEEL_MAX_ANGLE) current_angle = WHEEL_MAX_ANGLE;
 80018ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80018b2:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8001988 <update_wheel_position_and_velocity+0xec>
 80018b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018be:	dd01      	ble.n	80018c4 <update_wheel_position_and_velocity+0x28>
 80018c0:	4b32      	ldr	r3, [pc, #200]	@ (800198c <update_wheel_position_and_velocity+0xf0>)
 80018c2:	617b      	str	r3, [r7, #20]
    if (current_angle < -WHEEL_MAX_ANGLE) current_angle = -WHEEL_MAX_ANGLE;
 80018c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80018c8:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001990 <update_wheel_position_and_velocity+0xf4>
 80018cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d4:	d501      	bpl.n	80018da <update_wheel_position_and_velocity+0x3e>
 80018d6:	4b2f      	ldr	r3, [pc, #188]	@ (8001994 <update_wheel_position_and_velocity+0xf8>)
 80018d8:	617b      	str	r3, [r7, #20]

    // Directly set the wheel angle
    *wheel_angle = current_angle;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	697a      	ldr	r2, [r7, #20]
 80018de:	601a      	str	r2, [r3, #0]

    // Calculate time difference
    uint32_t current_time = HAL_GetTick();  // In milliseconds
 80018e0:	f001 f806 	bl	80028f0 <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]
    float dt = (current_time - last_update_time) / 1000.0f;  // ms to seconds
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	ee07 3a90 	vmov	s15, r3
 80018ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018f0:	4b29      	ldr	r3, [pc, #164]	@ (8001998 <update_wheel_position_and_velocity+0xfc>)
 80018f2:	edd3 7a00 	vldr	s15, [r3]
 80018f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018fa:	eddf 6a28 	vldr	s13, [pc, #160]	@ 800199c <update_wheel_position_and_velocity+0x100>
 80018fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001902:	edc7 7a03 	vstr	s15, [r7, #12]

    // Calculate angular velocity
    static float last_angle = 0.0f;
    float delta_angle = current_angle - last_angle;
 8001906:	4b26      	ldr	r3, [pc, #152]	@ (80019a0 <update_wheel_position_and_velocity+0x104>)
 8001908:	edd3 7a00 	vldr	s15, [r3]
 800190c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001910:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001914:	edc7 7a02 	vstr	s15, [r7, #8]

    if (dt > 0.0001f) {  // Avoid division by zero
 8001918:	edd7 7a03 	vldr	s15, [r7, #12]
 800191c:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80019a4 <update_wheel_position_and_velocity+0x108>
 8001920:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001928:	dd09      	ble.n	800193e <update_wheel_position_and_velocity+0xa2>
        *angular_velocity = delta_angle / dt;
 800192a:	edd7 6a02 	vldr	s13, [r7, #8]
 800192e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001932:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	edc3 7a00 	vstr	s15, [r3]
 800193c:	e003      	b.n	8001946 <update_wheel_position_and_velocity+0xaa>
    } else {
        *angular_velocity = 0.0f;
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	f04f 0200 	mov.w	r2, #0
 8001944:	601a      	str	r2, [r3, #0]
    }

    // Update for next loop
    last_angle = current_angle;
 8001946:	4a16      	ldr	r2, [pc, #88]	@ (80019a0 <update_wheel_position_and_velocity+0x104>)
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	6013      	str	r3, [r2, #0]
    last_update_time = current_time;
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	ee07 3a90 	vmov	s15, r3
 8001952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001956:	4b10      	ldr	r3, [pc, #64]	@ (8001998 <update_wheel_position_and_velocity+0xfc>)
 8001958:	edc3 7a00 	vstr	s15, [r3]

    // Map to steering value
    gSteering = map_wheel_position_to_axis(*wheel_angle);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	edd3 7a00 	vldr	s15, [r3]
 8001962:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001966:	ee17 0a90 	vmov	r0, s15
 800196a:	f7ff feef 	bl	800174c <map_wheel_position_to_axis>
 800196e:	4603      	mov	r3, r0
 8001970:	ee07 3a90 	vmov	s15, r3
 8001974:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001978:	4b0b      	ldr	r3, [pc, #44]	@ (80019a8 <update_wheel_position_and_velocity+0x10c>)
 800197a:	edc3 7a00 	vstr	s15, [r3]
}
 800197e:	bf00      	nop
 8001980:	3718      	adds	r7, #24
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	43e10000 	.word	0x43e10000
 800198c:	43e10000 	.word	0x43e10000
 8001990:	c3e10000 	.word	0xc3e10000
 8001994:	c3e10000 	.word	0xc3e10000
 8001998:	20000488 	.word	0x20000488
 800199c:	447a0000 	.word	0x447a0000
 80019a0:	20000744 	.word	0x20000744
 80019a4:	38d1b717 	.word	0x38d1b717
 80019a8:	2000046c 	.word	0x2000046c
 80019ac:	00000000 	.word	0x00000000

080019b0 <set_motor_pwm>:


void set_motor_pwm(float pwm_value, uint8_t direction) {
 80019b0:	b5b0      	push	{r4, r5, r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	ed87 0a01 	vstr	s0, [r7, #4]
 80019ba:	4603      	mov	r3, r0
 80019bc:	70fb      	strb	r3, [r7, #3]
    // Assuming pwm_value ranges from 0 to 255
    uint32_t pulse = (uint32_t)((pwm_value / 255.0) * htim3.Init.Period);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f7fe fdda 	bl	8000578 <__aeabi_f2d>
 80019c4:	a321      	add	r3, pc, #132	@ (adr r3, 8001a4c <set_motor_pwm+0x9c>)
 80019c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ca:	f7fe ff57 	bl	800087c <__aeabi_ddiv>
 80019ce:	4602      	mov	r2, r0
 80019d0:	460b      	mov	r3, r1
 80019d2:	4614      	mov	r4, r2
 80019d4:	461d      	mov	r5, r3
 80019d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001a48 <set_motor_pwm+0x98>)
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	4618      	mov	r0, r3
 80019dc:	f7fe fdaa 	bl	8000534 <__aeabi_ui2d>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	4620      	mov	r0, r4
 80019e6:	4629      	mov	r1, r5
 80019e8:	f7fe fe1e 	bl	8000628 <__aeabi_dmul>
 80019ec:	4602      	mov	r2, r0
 80019ee:	460b      	mov	r3, r1
 80019f0:	4610      	mov	r0, r2
 80019f2:	4619      	mov	r1, r3
 80019f4:	f7ff f82a 	bl	8000a4c <__aeabi_d2uiz>
 80019f8:	4603      	mov	r3, r0
 80019fa:	60fb      	str	r3, [r7, #12]

    if (direction == 1) { // Forward
 80019fc:	78fb      	ldrb	r3, [r7, #3]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d108      	bne.n	8001a14 <set_motor_pwm+0x64>
    	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulse);
 8001a02:	4b11      	ldr	r3, [pc, #68]	@ (8001a48 <set_motor_pwm+0x98>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	635a      	str	r2, [r3, #52]	@ 0x34
    	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8001a0a:	4b0f      	ldr	r3, [pc, #60]	@ (8001a48 <set_motor_pwm+0x98>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	639a      	str	r2, [r3, #56]	@ 0x38
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pulse);
	} else { // Stop
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
	}
}
 8001a12:	e013      	b.n	8001a3c <set_motor_pwm+0x8c>
	} else if (direction == 0) { // Reverse
 8001a14:	78fb      	ldrb	r3, [r7, #3]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d108      	bne.n	8001a2c <set_motor_pwm+0x7c>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a48 <set_motor_pwm+0x98>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pulse);
 8001a22:	4b09      	ldr	r3, [pc, #36]	@ (8001a48 <set_motor_pwm+0x98>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001a2a:	e007      	b.n	8001a3c <set_motor_pwm+0x8c>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001a2c:	4b06      	ldr	r3, [pc, #24]	@ (8001a48 <set_motor_pwm+0x98>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2200      	movs	r2, #0
 8001a32:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8001a34:	4b04      	ldr	r3, [pc, #16]	@ (8001a48 <set_motor_pwm+0x98>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001a3c:	bf00      	nop
 8001a3e:	3710      	adds	r7, #16
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bdb0      	pop	{r4, r5, r7, pc}
 8001a44:	f3af 8000 	nop.w
 8001a48:	200007dc 	.word	0x200007dc
 8001a4c:	00000000 	.word	0x00000000
 8001a50:	406fe000 	.word	0x406fe000

08001a54 <signalTelemetryTask>:
//        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);   // IN1 = LOW
//        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);   // IN2 = LOW
//    }
//}

extern void signalTelemetryTask(uint8_t *Buf, uint32_t Len) {
 8001a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
	if (Len == sizeof(telemetry_packet))  // Verify the data size matches the struct size
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	2b28      	cmp	r3, #40	@ 0x28
 8001a62:	d11b      	bne.n	8001a9c <signalTelemetryTask+0x48>
	{
		// Process the received data (rx_buffer)
		memcpy(&telemetry_data, Buf, sizeof(telemetry_data));
 8001a64:	4a10      	ldr	r2, [pc, #64]	@ (8001aa8 <signalTelemetryTask+0x54>)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	461c      	mov	r4, r3
 8001a6a:	4616      	mov	r6, r2
 8001a6c:	f104 0c20 	add.w	ip, r4, #32
 8001a70:	4635      	mov	r5, r6
 8001a72:	4623      	mov	r3, r4
 8001a74:	6818      	ldr	r0, [r3, #0]
 8001a76:	6859      	ldr	r1, [r3, #4]
 8001a78:	689a      	ldr	r2, [r3, #8]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a7e:	3410      	adds	r4, #16
 8001a80:	3610      	adds	r6, #16
 8001a82:	4564      	cmp	r4, ip
 8001a84:	d1f4      	bne.n	8001a70 <signalTelemetryTask+0x1c>
 8001a86:	4633      	mov	r3, r6
 8001a88:	4622      	mov	r2, r4
 8001a8a:	6810      	ldr	r0, [r2, #0]
 8001a8c:	6851      	ldr	r1, [r2, #4]
 8001a8e:	c303      	stmia	r3!, {r0, r1}
		osSemaphoreRelease(uartMutexHandle);
 8001a90:	4b06      	ldr	r3, [pc, #24]	@ (8001aac <signalTelemetryTask+0x58>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f00b fbfb 	bl	800d290 <osSemaphoreRelease>
	}
	else
	{
		int wkglwkgw = 1;
	}
}
 8001a9a:	e001      	b.n	8001aa0 <signalTelemetryTask+0x4c>
		int wkglwkgw = 1;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	60fb      	str	r3, [r7, #12]
}
 8001aa0:	bf00      	nop
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aa8:	20000410 	.word	0x20000410
 8001aac:	2000049c 	.word	0x2000049c

08001ab0 <read_hall_sensor>:

    // Stop Motor
    set_motor_pwm(0, 0);
}

void read_hall_sensor() {
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
	if (adc_data_ready) {
 8001ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae0 <read_hall_sensor+0x30>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d00b      	beq.n	8001ad6 <read_hall_sensor+0x26>
	    adc_data_ready = 0;
 8001abe:	4b08      	ldr	r3, [pc, #32]	@ (8001ae0 <read_hall_sensor+0x30>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	701a      	strb	r2, [r3, #0]

	    gHall = adc_buffer[0];
 8001ac4:	4b07      	ldr	r3, [pc, #28]	@ (8001ae4 <read_hall_sensor+0x34>)
 8001ac6:	881b      	ldrh	r3, [r3, #0]
 8001ac8:	ee07 3a90 	vmov	s15, r3
 8001acc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ad0:	4b05      	ldr	r3, [pc, #20]	@ (8001ae8 <read_hall_sensor+0x38>)
 8001ad2:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8001ad6:	bf00      	nop
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	20000482 	.word	0x20000482
 8001ae4:	20000480 	.word	0x20000480
 8001ae8:	20000470 	.word	0x20000470

08001aec <Start_ADC_DMA>:

void Start_ADC_DMA() {
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim8);  // starts the timer
 8001af0:	4804      	ldr	r0, [pc, #16]	@ (8001b04 <Start_ADC_DMA+0x18>)
 8001af2:	f005 fc53 	bl	800739c <HAL_TIM_Base_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, 1);
 8001af6:	2201      	movs	r2, #1
 8001af8:	4903      	ldr	r1, [pc, #12]	@ (8001b08 <Start_ADC_DMA+0x1c>)
 8001afa:	4804      	ldr	r0, [pc, #16]	@ (8001b0c <Start_ADC_DMA+0x20>)
 8001afc:	f000 ff6c 	bl	80029d8 <HAL_ADC_Start_DMA>
}
 8001b00:	bf00      	nop
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	20000824 	.word	0x20000824
 8001b08:	20000480 	.word	0x20000480
 8001b0c:	20000340 	.word	0x20000340

08001b10 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1) {
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a05      	ldr	r2, [pc, #20]	@ (8001b34 <HAL_ADC_ConvCpltCallback+0x24>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d102      	bne.n	8001b28 <HAL_ADC_ConvCpltCallback+0x18>
        adc_data_ready = 1;
 8001b22:	4b05      	ldr	r3, [pc, #20]	@ (8001b38 <HAL_ADC_ConvCpltCallback+0x28>)
 8001b24:	2201      	movs	r2, #1
 8001b26:	701a      	strb	r2, [r3, #0]
    }
}
 8001b28:	bf00      	nop
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	40012000 	.word	0x40012000
 8001b38:	20000482 	.word	0x20000482

08001b3c <processCAN>:

    // Stop Motor
    set_motor_pwm(0, 0);
}

void processCAN() {
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08a      	sub	sp, #40	@ 0x28
 8001b40:	af00      	add	r7, sp, #0
    CAN_RxHeaderTypeDef RxHeader;
    uint8_t RxData[8];

    while (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO1) > 0) {
 8001b42:	e08d      	b.n	8001c60 <processCAN+0x124>
    	 if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO1, &RxHeader, RxData) == HAL_OK) {
 8001b44:	463b      	mov	r3, r7
 8001b46:	f107 0208 	add.w	r2, r7, #8
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	484b      	ldr	r0, [pc, #300]	@ (8001c7c <processCAN+0x140>)
 8001b4e:	f001 fe50 	bl	80037f2 <HAL_CAN_GetRxMessage>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	f040 8083 	bne.w	8001c60 <processCAN+0x124>
            int32_t value = 0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	627b      	str	r3, [r7, #36]	@ 0x24

            // If the received message is for pedals, only use 2 bytes (int16_t)
            if (RxHeader.StdId >= 0x300 && RxHeader.StdId <= 0x302) {
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001b64:	d30d      	bcc.n	8001b82 <processCAN+0x46>
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	f240 3202 	movw	r2, #770	@ 0x302
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d808      	bhi.n	8001b82 <processCAN+0x46>
                value = (int16_t)(
                    ((uint16_t)RxData[0]) |
 8001b70:	783b      	ldrb	r3, [r7, #0]
 8001b72:	b21a      	sxth	r2, r3
                    ((uint16_t)RxData[1] << 8)  // Combine 2 bytes into int16_t
 8001b74:	787b      	ldrb	r3, [r7, #1]
 8001b76:	021b      	lsls	r3, r3, #8
                value = (int16_t)(
 8001b78:	b21b      	sxth	r3, r3
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	b21b      	sxth	r3, r3
 8001b7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b80:	e00b      	b.n	8001b9a <processCAN+0x5e>
                );
            } else {
                // Steering Wheel Messages (4-byte int32_t)
                value = (int32_t)(
                    ((uint32_t)RxData[0]) |
 8001b82:	783b      	ldrb	r3, [r7, #0]
 8001b84:	461a      	mov	r2, r3
                    ((uint32_t)RxData[1] << 8) |
 8001b86:	787b      	ldrb	r3, [r7, #1]
 8001b88:	021b      	lsls	r3, r3, #8
                    ((uint32_t)RxData[0]) |
 8001b8a:	431a      	orrs	r2, r3
                    ((uint32_t)RxData[2] << 16) |
 8001b8c:	78bb      	ldrb	r3, [r7, #2]
 8001b8e:	041b      	lsls	r3, r3, #16
                    ((uint32_t)RxData[1] << 8) |
 8001b90:	431a      	orrs	r2, r3
                    ((uint32_t)RxData[3] << 24)
 8001b92:	78fb      	ldrb	r3, [r7, #3]
 8001b94:	061b      	lsls	r3, r3, #24
                    ((uint32_t)RxData[2] << 16) |
 8001b96:	4313      	orrs	r3, r2
                value = (int32_t)(
 8001b98:	627b      	str	r3, [r7, #36]	@ 0x24
                );
            }

			switch (RxHeader.StdId) {
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	f240 3202 	movw	r2, #770	@ 0x302
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d052      	beq.n	8001c4a <processCAN+0x10e>
 8001ba4:	f240 3202 	movw	r2, #770	@ 0x302
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d858      	bhi.n	8001c5e <processCAN+0x122>
 8001bac:	f240 3201 	movw	r2, #769	@ 0x301
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d040      	beq.n	8001c36 <processCAN+0xfa>
 8001bb4:	f240 3201 	movw	r2, #769	@ 0x301
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d850      	bhi.n	8001c5e <processCAN+0x122>
 8001bbc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001bc0:	d02f      	beq.n	8001c22 <processCAN+0xe6>
 8001bc2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001bc6:	d84a      	bhi.n	8001c5e <processCAN+0x122>
 8001bc8:	f240 2202 	movw	r2, #514	@ 0x202
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d01e      	beq.n	8001c0e <processCAN+0xd2>
 8001bd0:	f240 2202 	movw	r2, #514	@ 0x202
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d842      	bhi.n	8001c5e <processCAN+0x122>
 8001bd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001bdc:	d004      	beq.n	8001be8 <processCAN+0xac>
 8001bde:	f240 2201 	movw	r2, #513	@ 0x201
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d009      	beq.n	8001bfa <processCAN+0xbe>

				// Pedals
				case 0x300: pedal_data.encoder_1 = (int16_t)value; gDebugCounter2++; break;
				case 0x301: pedal_data.encoder_2 = (int16_t)value; gDebugCounter2++;  break;
				case 0x302: pedal_data.encoder_3 = (int16_t)value; gDebugCounter2++; break;
				default: break;
 8001be6:	e03a      	b.n	8001c5e <processCAN+0x122>
				case 0x200: user_input_data.buttons = (uint32_t)value; gDebugCounter1++; break;
 8001be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bea:	4a25      	ldr	r2, [pc, #148]	@ (8001c80 <processCAN+0x144>)
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	4b25      	ldr	r3, [pc, #148]	@ (8001c84 <processCAN+0x148>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	4a23      	ldr	r2, [pc, #140]	@ (8001c84 <processCAN+0x148>)
 8001bf6:	6013      	str	r3, [r2, #0]
 8001bf8:	e032      	b.n	8001c60 <processCAN+0x124>
				case 0x201: user_input_data.hall_analog_1 = (uint8_t)value; gDebugCounter1++; break;
 8001bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bfc:	b2da      	uxtb	r2, r3
 8001bfe:	4b20      	ldr	r3, [pc, #128]	@ (8001c80 <processCAN+0x144>)
 8001c00:	711a      	strb	r2, [r3, #4]
 8001c02:	4b20      	ldr	r3, [pc, #128]	@ (8001c84 <processCAN+0x148>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	3301      	adds	r3, #1
 8001c08:	4a1e      	ldr	r2, [pc, #120]	@ (8001c84 <processCAN+0x148>)
 8001c0a:	6013      	str	r3, [r2, #0]
 8001c0c:	e028      	b.n	8001c60 <processCAN+0x124>
				case 0x202: user_input_data.hall_analog_2 = (uint8_t)value; gDebugCounter1++; break;
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c10:	b2da      	uxtb	r2, r3
 8001c12:	4b1b      	ldr	r3, [pc, #108]	@ (8001c80 <processCAN+0x144>)
 8001c14:	715a      	strb	r2, [r3, #5]
 8001c16:	4b1b      	ldr	r3, [pc, #108]	@ (8001c84 <processCAN+0x148>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	4a19      	ldr	r2, [pc, #100]	@ (8001c84 <processCAN+0x148>)
 8001c1e:	6013      	str	r3, [r2, #0]
 8001c20:	e01e      	b.n	8001c60 <processCAN+0x124>
				case 0x300: pedal_data.encoder_1 = (int16_t)value; gDebugCounter2++; break;
 8001c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c24:	b21a      	sxth	r2, r3
 8001c26:	4b18      	ldr	r3, [pc, #96]	@ (8001c88 <processCAN+0x14c>)
 8001c28:	801a      	strh	r2, [r3, #0]
 8001c2a:	4b18      	ldr	r3, [pc, #96]	@ (8001c8c <processCAN+0x150>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	4a16      	ldr	r2, [pc, #88]	@ (8001c8c <processCAN+0x150>)
 8001c32:	6013      	str	r3, [r2, #0]
 8001c34:	e014      	b.n	8001c60 <processCAN+0x124>
				case 0x301: pedal_data.encoder_2 = (int16_t)value; gDebugCounter2++;  break;
 8001c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c38:	b21a      	sxth	r2, r3
 8001c3a:	4b13      	ldr	r3, [pc, #76]	@ (8001c88 <processCAN+0x14c>)
 8001c3c:	805a      	strh	r2, [r3, #2]
 8001c3e:	4b13      	ldr	r3, [pc, #76]	@ (8001c8c <processCAN+0x150>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	3301      	adds	r3, #1
 8001c44:	4a11      	ldr	r2, [pc, #68]	@ (8001c8c <processCAN+0x150>)
 8001c46:	6013      	str	r3, [r2, #0]
 8001c48:	e00a      	b.n	8001c60 <processCAN+0x124>
				case 0x302: pedal_data.encoder_3 = (int16_t)value; gDebugCounter2++; break;
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c4c:	b21a      	sxth	r2, r3
 8001c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c88 <processCAN+0x14c>)
 8001c50:	809a      	strh	r2, [r3, #4]
 8001c52:	4b0e      	ldr	r3, [pc, #56]	@ (8001c8c <processCAN+0x150>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	3301      	adds	r3, #1
 8001c58:	4a0c      	ldr	r2, [pc, #48]	@ (8001c8c <processCAN+0x150>)
 8001c5a:	6013      	str	r3, [r2, #0]
 8001c5c:	e000      	b.n	8001c60 <processCAN+0x124>
				default: break;
 8001c5e:	bf00      	nop
    while (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO1) > 0) {
 8001c60:	2101      	movs	r1, #1
 8001c62:	4806      	ldr	r0, [pc, #24]	@ (8001c7c <processCAN+0x140>)
 8001c64:	f001 fee7 	bl	8003a36 <HAL_CAN_GetRxFifoFillLevel>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f47f af6a 	bne.w	8001b44 <processCAN+0x8>
			}
		}
	}
}
 8001c70:	bf00      	nop
 8001c72:	bf00      	nop
 8001c74:	3728      	adds	r7, #40	@ 0x28
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	200003e8 	.word	0x200003e8
 8001c80:	20000444 	.word	0x20000444
 8001c84:	20000474 	.word	0x20000474
 8001c88:	2000044c 	.word	0x2000044c
 8001c8c:	20000478 	.word	0x20000478

08001c90 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b08a      	sub	sp, #40	@ 0x28
 8001c94:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c96:	f107 0314 	add.w	r3, r7, #20
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	605a      	str	r2, [r3, #4]
 8001ca0:	609a      	str	r2, [r3, #8]
 8001ca2:	60da      	str	r2, [r3, #12]
 8001ca4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	613b      	str	r3, [r7, #16]
 8001caa:	4b37      	ldr	r3, [pc, #220]	@ (8001d88 <MX_GPIO_Init+0xf8>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cae:	4a36      	ldr	r2, [pc, #216]	@ (8001d88 <MX_GPIO_Init+0xf8>)
 8001cb0:	f043 0304 	orr.w	r3, r3, #4
 8001cb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cb6:	4b34      	ldr	r3, [pc, #208]	@ (8001d88 <MX_GPIO_Init+0xf8>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cba:	f003 0304 	and.w	r3, r3, #4
 8001cbe:	613b      	str	r3, [r7, #16]
 8001cc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	4b30      	ldr	r3, [pc, #192]	@ (8001d88 <MX_GPIO_Init+0xf8>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cca:	4a2f      	ldr	r2, [pc, #188]	@ (8001d88 <MX_GPIO_Init+0xf8>)
 8001ccc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cd2:	4b2d      	ldr	r3, [pc, #180]	@ (8001d88 <MX_GPIO_Init+0xf8>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60bb      	str	r3, [r7, #8]
 8001ce2:	4b29      	ldr	r3, [pc, #164]	@ (8001d88 <MX_GPIO_Init+0xf8>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce6:	4a28      	ldr	r2, [pc, #160]	@ (8001d88 <MX_GPIO_Init+0xf8>)
 8001ce8:	f043 0301 	orr.w	r3, r3, #1
 8001cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cee:	4b26      	ldr	r3, [pc, #152]	@ (8001d88 <MX_GPIO_Init+0xf8>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	60bb      	str	r3, [r7, #8]
 8001cf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	607b      	str	r3, [r7, #4]
 8001cfe:	4b22      	ldr	r3, [pc, #136]	@ (8001d88 <MX_GPIO_Init+0xf8>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d02:	4a21      	ldr	r2, [pc, #132]	@ (8001d88 <MX_GPIO_Init+0xf8>)
 8001d04:	f043 0302 	orr.w	r3, r3, #2
 8001d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d0a:	4b1f      	ldr	r3, [pc, #124]	@ (8001d88 <MX_GPIO_Init+0xf8>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	607b      	str	r3, [r7, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8001d16:	2200      	movs	r2, #0
 8001d18:	2130      	movs	r1, #48	@ 0x30
 8001d1a:	481c      	ldr	r0, [pc, #112]	@ (8001d8c <MX_GPIO_Init+0xfc>)
 8001d1c:	f002 fef0 	bl	8004b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8001d20:	2200      	movs	r2, #0
 8001d22:	2106      	movs	r1, #6
 8001d24:	481a      	ldr	r0, [pc, #104]	@ (8001d90 <MX_GPIO_Init+0x100>)
 8001d26:	f002 feeb 	bl	8004b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d2a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d30:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001d34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d36:	2300      	movs	r3, #0
 8001d38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d3a:	f107 0314 	add.w	r3, r7, #20
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4814      	ldr	r0, [pc, #80]	@ (8001d94 <MX_GPIO_Init+0x104>)
 8001d42:	f002 fd49 	bl	80047d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 8001d46:	2330      	movs	r3, #48	@ 0x30
 8001d48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d52:	2300      	movs	r3, #0
 8001d54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d56:	f107 0314 	add.w	r3, r7, #20
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	480b      	ldr	r0, [pc, #44]	@ (8001d8c <MX_GPIO_Init+0xfc>)
 8001d5e:	f002 fd3b 	bl	80047d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001d62:	2306      	movs	r3, #6
 8001d64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d66:	2301      	movs	r3, #1
 8001d68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d72:	f107 0314 	add.w	r3, r7, #20
 8001d76:	4619      	mov	r1, r3
 8001d78:	4805      	ldr	r0, [pc, #20]	@ (8001d90 <MX_GPIO_Init+0x100>)
 8001d7a:	f002 fd2d 	bl	80047d8 <HAL_GPIO_Init>

}
 8001d7e:	bf00      	nop
 8001d80:	3728      	adds	r7, #40	@ 0x28
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	40020000 	.word	0x40020000
 8001d90:	40020400 	.word	0x40020400
 8001d94:	40020800 	.word	0x40020800

08001d98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d9c:	f000 fd72 	bl	8002884 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001da0:	f000 f832 	bl	8001e08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001da4:	f7ff ff74 	bl	8001c90 <MX_GPIO_Init>
  MX_DMA_Init();
 8001da8:	f7ff f9b8 	bl	800111c <MX_DMA_Init>
  MX_TIM2_Init();
 8001dac:	f000 fa8a 	bl	80022c4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001db0:	f000 fadc 	bl	800236c <MX_TIM3_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001db4:	f000 fca4 	bl	8002700 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8001db8:	f7ff f830 	bl	8000e1c <MX_ADC1_Init>
  MX_CAN1_Init();
 8001dbc:	f7ff f8f8 	bl	8000fb0 <MX_CAN1_Init>
  MX_TIM8_Init();
 8001dc0:	f000 fb3a 	bl	8002438 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */



  init_encoder();
 8001dc4:	f7ff fcf4 	bl	80017b0 <init_encoder>
  DWT_Init();
 8001dc8:	f7ff fb0a 	bl	80013e0 <DWT_Init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001dcc:	2100      	movs	r1, #0
 8001dce:	480c      	ldr	r0, [pc, #48]	@ (8001e00 <main+0x68>)
 8001dd0:	f005 fc5a 	bl	8007688 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001dd4:	2104      	movs	r1, #4
 8001dd6:	480a      	ldr	r0, [pc, #40]	@ (8001e00 <main+0x68>)
 8001dd8:	f005 fc56 	bl	8007688 <HAL_TIM_PWM_Start>

  MX_USB_DEVICE_Init();
 8001ddc:	f007 ff2c 	bl	8009c38 <MX_USB_DEVICE_Init>

  HAL_CAN_Start(&hcan1);
 8001de0:	4808      	ldr	r0, [pc, #32]	@ (8001e04 <main+0x6c>)
 8001de2:	f001 fba9 	bl	8003538 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING);
 8001de6:	2110      	movs	r1, #16
 8001de8:	4806      	ldr	r0, [pc, #24]	@ (8001e04 <main+0x6c>)
 8001dea:	f001 fe4c 	bl	8003a86 <HAL_CAN_ActivateNotification>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001dee:	f7ff f9cf 	bl	8001190 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001df2:	f00b f965 	bl	800d0c0 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // Task creation
  // Start scheduler
  vTaskStartScheduler();
 8001df6:	f00c faa9 	bl	800e34c <vTaskStartScheduler>

  while (1)
 8001dfa:	bf00      	nop
 8001dfc:	e7fd      	b.n	8001dfa <main+0x62>
 8001dfe:	bf00      	nop
 8001e00:	200007dc 	.word	0x200007dc
 8001e04:	200003e8 	.word	0x200003e8

08001e08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b094      	sub	sp, #80	@ 0x50
 8001e0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e0e:	f107 031c 	add.w	r3, r7, #28
 8001e12:	2234      	movs	r2, #52	@ 0x34
 8001e14:	2100      	movs	r1, #0
 8001e16:	4618      	mov	r0, r3
 8001e18:	f00d fe2e 	bl	800fa78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e1c:	f107 0308 	add.w	r3, r7, #8
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	60da      	str	r2, [r3, #12]
 8001e2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	607b      	str	r3, [r7, #4]
 8001e30:	4b29      	ldr	r3, [pc, #164]	@ (8001ed8 <SystemClock_Config+0xd0>)
 8001e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e34:	4a28      	ldr	r2, [pc, #160]	@ (8001ed8 <SystemClock_Config+0xd0>)
 8001e36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e3c:	4b26      	ldr	r3, [pc, #152]	@ (8001ed8 <SystemClock_Config+0xd0>)
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e44:	607b      	str	r3, [r7, #4]
 8001e46:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001e48:	2300      	movs	r3, #0
 8001e4a:	603b      	str	r3, [r7, #0]
 8001e4c:	4b23      	ldr	r3, [pc, #140]	@ (8001edc <SystemClock_Config+0xd4>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001e54:	4a21      	ldr	r2, [pc, #132]	@ (8001edc <SystemClock_Config+0xd4>)
 8001e56:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e5a:	6013      	str	r3, [r2, #0]
 8001e5c:	4b1f      	ldr	r3, [pc, #124]	@ (8001edc <SystemClock_Config+0xd4>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e64:	603b      	str	r3, [r7, #0]
 8001e66:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e6c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e70:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e72:	2302      	movs	r3, #2
 8001e74:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e76:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001e7a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001e7c:	2304      	movs	r3, #4
 8001e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001e80:	2348      	movs	r3, #72	@ 0x48
 8001e82:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e84:	2302      	movs	r3, #2
 8001e86:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e90:	f107 031c 	add.w	r3, r7, #28
 8001e94:	4618      	mov	r0, r3
 8001e96:	f004 ff89 	bl	8006dac <HAL_RCC_OscConfig>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001ea0:	f000 f854 	bl	8001f4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ea4:	230f      	movs	r3, #15
 8001ea6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001eac:	2300      	movs	r3, #0
 8001eae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001eb0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001eb4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001eba:	f107 0308 	add.w	r3, r7, #8
 8001ebe:	2102      	movs	r1, #2
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f004 f8e1 	bl	8006088 <HAL_RCC_ClockConfig>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001ecc:	f000 f83e 	bl	8001f4c <Error_Handler>
  }
}
 8001ed0:	bf00      	nop
 8001ed2:	3750      	adds	r7, #80	@ 0x50
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	40007000 	.word	0x40007000

08001ee0 <HAL_CAN_RxFifo1MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a04      	ldr	r2, [pc, #16]	@ (8001f00 <HAL_CAN_RxFifo1MsgPendingCallback+0x20>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d101      	bne.n	8001ef6 <HAL_CAN_RxFifo1MsgPendingCallback+0x16>
	{
		processCAN();
 8001ef2:	f7ff fe23 	bl	8001b3c <processCAN>
	}
}
 8001ef6:	bf00      	nop
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40006400 	.word	0x40006400

08001f04 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a04      	ldr	r2, [pc, #16]	@ (8001f24 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d101      	bne.n	8001f1a <HAL_CAN_RxFifo0MsgPendingCallback+0x16>
	{
		processCAN();
 8001f16:	f7ff fe11 	bl	8001b3c <processCAN>
	}
}
 8001f1a:	bf00      	nop
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40006400 	.word	0x40006400

08001f28 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a04      	ldr	r2, [pc, #16]	@ (8001f48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d101      	bne.n	8001f3e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f3a:	f000 fcc5 	bl	80028c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40001000 	.word	0x40001000

08001f4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f50:	b672      	cpsid	i
}
 8001f52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f54:	bf00      	nop
 8001f56:	e7fd      	b.n	8001f54 <Error_Handler+0x8>

08001f58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f5e:	2300      	movs	r3, #0
 8001f60:	607b      	str	r3, [r7, #4]
 8001f62:	4b12      	ldr	r3, [pc, #72]	@ (8001fac <HAL_MspInit+0x54>)
 8001f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f66:	4a11      	ldr	r2, [pc, #68]	@ (8001fac <HAL_MspInit+0x54>)
 8001f68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f6e:	4b0f      	ldr	r3, [pc, #60]	@ (8001fac <HAL_MspInit+0x54>)
 8001f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f76:	607b      	str	r3, [r7, #4]
 8001f78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	603b      	str	r3, [r7, #0]
 8001f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001fac <HAL_MspInit+0x54>)
 8001f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f82:	4a0a      	ldr	r2, [pc, #40]	@ (8001fac <HAL_MspInit+0x54>)
 8001f84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f88:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f8a:	4b08      	ldr	r3, [pc, #32]	@ (8001fac <HAL_MspInit+0x54>)
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f92:	603b      	str	r3, [r7, #0]
 8001f94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f96:	2200      	movs	r2, #0
 8001f98:	210f      	movs	r1, #15
 8001f9a:	f06f 0001 	mvn.w	r0, #1
 8001f9e:	f002 f881 	bl	80040a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fa2:	bf00      	nop
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40023800 	.word	0x40023800

08001fb0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b08e      	sub	sp, #56	@ 0x38
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	4b33      	ldr	r3, [pc, #204]	@ (8002094 <HAL_InitTick+0xe4>)
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc8:	4a32      	ldr	r2, [pc, #200]	@ (8002094 <HAL_InitTick+0xe4>)
 8001fca:	f043 0310 	orr.w	r3, r3, #16
 8001fce:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fd0:	4b30      	ldr	r3, [pc, #192]	@ (8002094 <HAL_InitTick+0xe4>)
 8001fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd4:	f003 0310 	and.w	r3, r3, #16
 8001fd8:	60fb      	str	r3, [r7, #12]
 8001fda:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001fdc:	f107 0210 	add.w	r2, r7, #16
 8001fe0:	f107 0314 	add.w	r3, r7, #20
 8001fe4:	4611      	mov	r1, r2
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f004 f954 	bl	8006294 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001fec:	6a3b      	ldr	r3, [r7, #32]
 8001fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d103      	bne.n	8001ffe <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001ff6:	f004 f939 	bl	800626c <HAL_RCC_GetPCLK1Freq>
 8001ffa:	6378      	str	r0, [r7, #52]	@ 0x34
 8001ffc:	e004      	b.n	8002008 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001ffe:	f004 f935 	bl	800626c <HAL_RCC_GetPCLK1Freq>
 8002002:	4603      	mov	r3, r0
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800200a:	4a23      	ldr	r2, [pc, #140]	@ (8002098 <HAL_InitTick+0xe8>)
 800200c:	fba2 2303 	umull	r2, r3, r2, r3
 8002010:	0c9b      	lsrs	r3, r3, #18
 8002012:	3b01      	subs	r3, #1
 8002014:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002016:	4b21      	ldr	r3, [pc, #132]	@ (800209c <HAL_InitTick+0xec>)
 8002018:	4a21      	ldr	r2, [pc, #132]	@ (80020a0 <HAL_InitTick+0xf0>)
 800201a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800201c:	4b1f      	ldr	r3, [pc, #124]	@ (800209c <HAL_InitTick+0xec>)
 800201e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002022:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002024:	4a1d      	ldr	r2, [pc, #116]	@ (800209c <HAL_InitTick+0xec>)
 8002026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002028:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800202a:	4b1c      	ldr	r3, [pc, #112]	@ (800209c <HAL_InitTick+0xec>)
 800202c:	2200      	movs	r2, #0
 800202e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002030:	4b1a      	ldr	r3, [pc, #104]	@ (800209c <HAL_InitTick+0xec>)
 8002032:	2200      	movs	r2, #0
 8002034:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002036:	4b19      	ldr	r3, [pc, #100]	@ (800209c <HAL_InitTick+0xec>)
 8002038:	2200      	movs	r2, #0
 800203a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800203c:	4817      	ldr	r0, [pc, #92]	@ (800209c <HAL_InitTick+0xec>)
 800203e:	f005 f953 	bl	80072e8 <HAL_TIM_Base_Init>
 8002042:	4603      	mov	r3, r0
 8002044:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002048:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800204c:	2b00      	cmp	r3, #0
 800204e:	d11b      	bne.n	8002088 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002050:	4812      	ldr	r0, [pc, #72]	@ (800209c <HAL_InitTick+0xec>)
 8002052:	f005 fa0b 	bl	800746c <HAL_TIM_Base_Start_IT>
 8002056:	4603      	mov	r3, r0
 8002058:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800205c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002060:	2b00      	cmp	r3, #0
 8002062:	d111      	bne.n	8002088 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002064:	2036      	movs	r0, #54	@ 0x36
 8002066:	f002 f839 	bl	80040dc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b0f      	cmp	r3, #15
 800206e:	d808      	bhi.n	8002082 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002070:	2200      	movs	r2, #0
 8002072:	6879      	ldr	r1, [r7, #4]
 8002074:	2036      	movs	r0, #54	@ 0x36
 8002076:	f002 f815 	bl	80040a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800207a:	4a0a      	ldr	r2, [pc, #40]	@ (80020a4 <HAL_InitTick+0xf4>)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6013      	str	r3, [r2, #0]
 8002080:	e002      	b.n	8002088 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002088:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800208c:	4618      	mov	r0, r3
 800208e:	3738      	adds	r7, #56	@ 0x38
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40023800 	.word	0x40023800
 8002098:	431bde83 	.word	0x431bde83
 800209c:	20000748 	.word	0x20000748
 80020a0:	40001000 	.word	0x40001000
 80020a4:	20000008 	.word	0x20000008

080020a8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80020ac:	f3bf 8f4f 	dsb	sy
}
 80020b0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80020b2:	4b06      	ldr	r3, [pc, #24]	@ (80020cc <__NVIC_SystemReset+0x24>)
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80020ba:	4904      	ldr	r1, [pc, #16]	@ (80020cc <__NVIC_SystemReset+0x24>)
 80020bc:	4b04      	ldr	r3, [pc, #16]	@ (80020d0 <__NVIC_SystemReset+0x28>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80020c2:	f3bf 8f4f 	dsb	sy
}
 80020c6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80020c8:	bf00      	nop
 80020ca:	e7fd      	b.n	80020c8 <__NVIC_SystemReset+0x20>
 80020cc:	e000ed00 	.word	0xe000ed00
 80020d0:	05fa0004 	.word	0x05fa0004

080020d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020d8:	bf00      	nop
 80020da:	e7fd      	b.n	80020d8 <NMI_Handler+0x4>

080020dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b0d6      	sub	sp, #344	@ 0x158
 80020e0:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE BEGIN HardFault_IRQn 0 */
	// Store stack pointer
	uint32_t *stack_pointer;
	__asm volatile (
 80020e2:	f01e 0f04 	tst.w	lr, #4
 80020e6:	bf0c      	ite	eq
 80020e8:	f3ef 8308 	mrseq	r3, MSP
 80020ec:	f3ef 8309 	mrsne	r3, PSP
 80020f0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
		"MRSNE %0, PSP \n"   // If PSP, move PSP to stack_pointer
		: "=r" (stack_pointer)
	);

	// Log or store the stack pointer contents for analysis
	uint32_t r0 = stack_pointer[0];  // R0
 80020f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	uint32_t r1 = stack_pointer[1];  // R1
 80020fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	uint32_t r2 = stack_pointer[2];  // R2
 8002108:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	uint32_t r3 = stack_pointer[3];  // R3
 8002112:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	uint32_t r12 = stack_pointer[4]; // R12
 800211c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	uint32_t lr = stack_pointer[5];  // LR
 8002126:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800212a:	695b      	ldr	r3, [r3, #20]
 800212c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	uint32_t pc = stack_pointer[6];  // PC
 8002130:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	uint32_t psr = stack_pointer[7]; // PSR
 800213a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800213e:	69db      	ldr	r3, [r3, #28]
 8002140:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	// Read the HFSR and CFSR registers for diagnostics
	uint32_t hfsr = SCB->HFSR;
 8002144:	4b16      	ldr	r3, [pc, #88]	@ (80021a0 <HardFault_Handler+0xc4>)
 8002146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002148:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
	uint32_t cfsr = SCB->CFSR;
 800214c:	4b14      	ldr	r3, [pc, #80]	@ (80021a0 <HardFault_Handler+0xc4>)
 800214e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002150:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

	// Create a log message
	char log_buffer[256];
	snprintf(log_buffer, sizeof(log_buffer),
 8002154:	1d38      	adds	r0, r7, #4
 8002156:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800215a:	9308      	str	r3, [sp, #32]
 800215c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002160:	9307      	str	r3, [sp, #28]
 8002162:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002166:	9306      	str	r3, [sp, #24]
 8002168:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800216c:	9305      	str	r3, [sp, #20]
 800216e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002172:	9304      	str	r3, [sp, #16]
 8002174:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002178:	9303      	str	r3, [sp, #12]
 800217a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800217e:	9302      	str	r3, [sp, #8]
 8002180:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002184:	9301      	str	r3, [sp, #4]
 8002186:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800218a:	9300      	str	r3, [sp, #0]
 800218c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002190:	4a04      	ldr	r2, [pc, #16]	@ (80021a4 <HardFault_Handler+0xc8>)
 8002192:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002196:	f00d fc3b 	bl	800fa10 <sniprintf>
	);

	// Log the message
//	log_message(log_buffer);

	NVIC_SystemReset();
 800219a:	f7ff ff85 	bl	80020a8 <__NVIC_SystemReset>
 800219e:	bf00      	nop
 80021a0:	e000ed00 	.word	0xe000ed00
 80021a4:	08010304 	.word	0x08010304

080021a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021ac:	bf00      	nop
 80021ae:	e7fd      	b.n	80021ac <MemManage_Handler+0x4>

080021b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021b4:	bf00      	nop
 80021b6:	e7fd      	b.n	80021b4 <BusFault_Handler+0x4>

080021b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021bc:	bf00      	nop
 80021be:	e7fd      	b.n	80021bc <UsageFault_Handler+0x4>

080021c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021c4:	bf00      	nop
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
	...

080021d0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80021d4:	4802      	ldr	r0, [pc, #8]	@ (80021e0 <CAN1_RX0_IRQHandler+0x10>)
 80021d6:	f001 fc7c 	bl	8003ad2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80021da:	bf00      	nop
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	200003e8 	.word	0x200003e8

080021e4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80021e8:	4802      	ldr	r0, [pc, #8]	@ (80021f4 <CAN1_RX1_IRQHandler+0x10>)
 80021ea:	f001 fc72 	bl	8003ad2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80021ee:	bf00      	nop
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	200003e8 	.word	0x200003e8

080021f8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80021fc:	4802      	ldr	r0, [pc, #8]	@ (8002208 <TIM6_DAC_IRQHandler+0x10>)
 80021fe:	f005 fc3f 	bl	8007a80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002202:	bf00      	nop
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	20000748 	.word	0x20000748

0800220c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002210:	4802      	ldr	r0, [pc, #8]	@ (800221c <DMA2_Stream0_IRQHandler+0x10>)
 8002212:	f002 f877 	bl	8004304 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002216:	bf00      	nop
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	20000388 	.word	0x20000388

08002220 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002224:	4802      	ldr	r0, [pc, #8]	@ (8002230 <OTG_FS_IRQHandler+0x10>)
 8002226:	f002 fdcf 	bl	8004dc8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800222a:	bf00      	nop
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	2000086c 	.word	0x2000086c

08002234 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800223c:	4a14      	ldr	r2, [pc, #80]	@ (8002290 <_sbrk+0x5c>)
 800223e:	4b15      	ldr	r3, [pc, #84]	@ (8002294 <_sbrk+0x60>)
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002248:	4b13      	ldr	r3, [pc, #76]	@ (8002298 <_sbrk+0x64>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d102      	bne.n	8002256 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002250:	4b11      	ldr	r3, [pc, #68]	@ (8002298 <_sbrk+0x64>)
 8002252:	4a12      	ldr	r2, [pc, #72]	@ (800229c <_sbrk+0x68>)
 8002254:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002256:	4b10      	ldr	r3, [pc, #64]	@ (8002298 <_sbrk+0x64>)
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4413      	add	r3, r2
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	429a      	cmp	r2, r3
 8002262:	d207      	bcs.n	8002274 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002264:	f00d fc76 	bl	800fb54 <__errno>
 8002268:	4603      	mov	r3, r0
 800226a:	220c      	movs	r2, #12
 800226c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800226e:	f04f 33ff 	mov.w	r3, #4294967295
 8002272:	e009      	b.n	8002288 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002274:	4b08      	ldr	r3, [pc, #32]	@ (8002298 <_sbrk+0x64>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800227a:	4b07      	ldr	r3, [pc, #28]	@ (8002298 <_sbrk+0x64>)
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4413      	add	r3, r2
 8002282:	4a05      	ldr	r2, [pc, #20]	@ (8002298 <_sbrk+0x64>)
 8002284:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002286:	68fb      	ldr	r3, [r7, #12]
}
 8002288:	4618      	mov	r0, r3
 800228a:	3718      	adds	r7, #24
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	20020000 	.word	0x20020000
 8002294:	00000400 	.word	0x00000400
 8002298:	20000790 	.word	0x20000790
 800229c:	20005508 	.word	0x20005508

080022a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022a4:	4b06      	ldr	r3, [pc, #24]	@ (80022c0 <SystemInit+0x20>)
 80022a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022aa:	4a05      	ldr	r2, [pc, #20]	@ (80022c0 <SystemInit+0x20>)
 80022ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022b4:	bf00      	nop
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	e000ed00 	.word	0xe000ed00

080022c4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b08c      	sub	sp, #48	@ 0x30
 80022c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80022ca:	f107 030c 	add.w	r3, r7, #12
 80022ce:	2224      	movs	r2, #36	@ 0x24
 80022d0:	2100      	movs	r1, #0
 80022d2:	4618      	mov	r0, r3
 80022d4:	f00d fbd0 	bl	800fa78 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022d8:	1d3b      	adds	r3, r7, #4
 80022da:	2200      	movs	r2, #0
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022e0:	4b21      	ldr	r3, [pc, #132]	@ (8002368 <MX_TIM2_Init+0xa4>)
 80022e2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80022e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80022e8:	4b1f      	ldr	r3, [pc, #124]	@ (8002368 <MX_TIM2_Init+0xa4>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002368 <MX_TIM2_Init+0xa4>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80022f4:	4b1c      	ldr	r3, [pc, #112]	@ (8002368 <MX_TIM2_Init+0xa4>)
 80022f6:	f04f 32ff 	mov.w	r2, #4294967295
 80022fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002368 <MX_TIM2_Init+0xa4>)
 80022fe:	2200      	movs	r2, #0
 8002300:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002302:	4b19      	ldr	r3, [pc, #100]	@ (8002368 <MX_TIM2_Init+0xa4>)
 8002304:	2200      	movs	r2, #0
 8002306:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002308:	2303      	movs	r3, #3
 800230a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800230c:	2300      	movs	r3, #0
 800230e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002310:	2301      	movs	r3, #1
 8002312:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002314:	2300      	movs	r3, #0
 8002316:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002318:	2300      	movs	r3, #0
 800231a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800231c:	2300      	movs	r3, #0
 800231e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002320:	2301      	movs	r3, #1
 8002322:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002324:	2300      	movs	r3, #0
 8002326:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002328:	2300      	movs	r3, #0
 800232a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800232c:	f107 030c 	add.w	r3, r7, #12
 8002330:	4619      	mov	r1, r3
 8002332:	480d      	ldr	r0, [pc, #52]	@ (8002368 <MX_TIM2_Init+0xa4>)
 8002334:	f005 fa70 	bl	8007818 <HAL_TIM_Encoder_Init>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800233e:	f7ff fe05 	bl	8001f4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002342:	2300      	movs	r3, #0
 8002344:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002346:	2300      	movs	r3, #0
 8002348:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800234a:	1d3b      	adds	r3, r7, #4
 800234c:	4619      	mov	r1, r3
 800234e:	4806      	ldr	r0, [pc, #24]	@ (8002368 <MX_TIM2_Init+0xa4>)
 8002350:	f006 f84e 	bl	80083f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800235a:	f7ff fdf7 	bl	8001f4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800235e:	bf00      	nop
 8002360:	3730      	adds	r7, #48	@ 0x30
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	20000794 	.word	0x20000794

0800236c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b08a      	sub	sp, #40	@ 0x28
 8002370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002372:	f107 0320 	add.w	r3, r7, #32
 8002376:	2200      	movs	r2, #0
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800237c:	1d3b      	adds	r3, r7, #4
 800237e:	2200      	movs	r2, #0
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	605a      	str	r2, [r3, #4]
 8002384:	609a      	str	r2, [r3, #8]
 8002386:	60da      	str	r2, [r3, #12]
 8002388:	611a      	str	r2, [r3, #16]
 800238a:	615a      	str	r2, [r3, #20]
 800238c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800238e:	4b28      	ldr	r3, [pc, #160]	@ (8002430 <MX_TIM3_Init+0xc4>)
 8002390:	4a28      	ldr	r2, [pc, #160]	@ (8002434 <MX_TIM3_Init+0xc8>)
 8002392:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84 -1;
 8002394:	4b26      	ldr	r3, [pc, #152]	@ (8002430 <MX_TIM3_Init+0xc4>)
 8002396:	2253      	movs	r2, #83	@ 0x53
 8002398:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800239a:	4b25      	ldr	r3, [pc, #148]	@ (8002430 <MX_TIM3_Init+0xc4>)
 800239c:	2200      	movs	r2, #0
 800239e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000 - 1;
 80023a0:	4b23      	ldr	r3, [pc, #140]	@ (8002430 <MX_TIM3_Init+0xc4>)
 80023a2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80023a6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023a8:	4b21      	ldr	r3, [pc, #132]	@ (8002430 <MX_TIM3_Init+0xc4>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023ae:	4b20      	ldr	r3, [pc, #128]	@ (8002430 <MX_TIM3_Init+0xc4>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80023b4:	481e      	ldr	r0, [pc, #120]	@ (8002430 <MX_TIM3_Init+0xc4>)
 80023b6:	f005 f918 	bl	80075ea <HAL_TIM_PWM_Init>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80023c0:	f7ff fdc4 	bl	8001f4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023c4:	2300      	movs	r3, #0
 80023c6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023c8:	2300      	movs	r3, #0
 80023ca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023cc:	f107 0320 	add.w	r3, r7, #32
 80023d0:	4619      	mov	r1, r3
 80023d2:	4817      	ldr	r0, [pc, #92]	@ (8002430 <MX_TIM3_Init+0xc4>)
 80023d4:	f006 f80c 	bl	80083f0 <HAL_TIMEx_MasterConfigSynchronization>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80023de:	f7ff fdb5 	bl	8001f4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023e2:	2360      	movs	r3, #96	@ 0x60
 80023e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 80023e6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80023ea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023ec:	2300      	movs	r3, #0
 80023ee:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023f0:	2300      	movs	r3, #0
 80023f2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023f4:	1d3b      	adds	r3, r7, #4
 80023f6:	2200      	movs	r2, #0
 80023f8:	4619      	mov	r1, r3
 80023fa:	480d      	ldr	r0, [pc, #52]	@ (8002430 <MX_TIM3_Init+0xc4>)
 80023fc:	f005 fc8c 	bl	8007d18 <HAL_TIM_PWM_ConfigChannel>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8002406:	f7ff fda1 	bl	8001f4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800240a:	1d3b      	adds	r3, r7, #4
 800240c:	2204      	movs	r2, #4
 800240e:	4619      	mov	r1, r3
 8002410:	4807      	ldr	r0, [pc, #28]	@ (8002430 <MX_TIM3_Init+0xc4>)
 8002412:	f005 fc81 	bl	8007d18 <HAL_TIM_PWM_ConfigChannel>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 800241c:	f7ff fd96 	bl	8001f4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002420:	4803      	ldr	r0, [pc, #12]	@ (8002430 <MX_TIM3_Init+0xc4>)
 8002422:	f000 f913 	bl	800264c <HAL_TIM_MspPostInit>

}
 8002426:	bf00      	nop
 8002428:	3728      	adds	r7, #40	@ 0x28
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	200007dc 	.word	0x200007dc
 8002434:	40000400 	.word	0x40000400

08002438 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b092      	sub	sp, #72	@ 0x48
 800243c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800243e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002442:	2200      	movs	r2, #0
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002448:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	605a      	str	r2, [r3, #4]
 8002452:	609a      	str	r2, [r3, #8]
 8002454:	60da      	str	r2, [r3, #12]
 8002456:	611a      	str	r2, [r3, #16]
 8002458:	615a      	str	r2, [r3, #20]
 800245a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800245c:	1d3b      	adds	r3, r7, #4
 800245e:	2220      	movs	r2, #32
 8002460:	2100      	movs	r1, #0
 8002462:	4618      	mov	r0, r3
 8002464:	f00d fb08 	bl	800fa78 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002468:	4b31      	ldr	r3, [pc, #196]	@ (8002530 <MX_TIM8_Init+0xf8>)
 800246a:	4a32      	ldr	r2, [pc, #200]	@ (8002534 <MX_TIM8_Init+0xfc>)
 800246c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 83;
 800246e:	4b30      	ldr	r3, [pc, #192]	@ (8002530 <MX_TIM8_Init+0xf8>)
 8002470:	2253      	movs	r2, #83	@ 0x53
 8002472:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002474:	4b2e      	ldr	r3, [pc, #184]	@ (8002530 <MX_TIM8_Init+0xf8>)
 8002476:	2200      	movs	r2, #0
 8002478:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 499;
 800247a:	4b2d      	ldr	r3, [pc, #180]	@ (8002530 <MX_TIM8_Init+0xf8>)
 800247c:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8002480:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002482:	4b2b      	ldr	r3, [pc, #172]	@ (8002530 <MX_TIM8_Init+0xf8>)
 8002484:	2200      	movs	r2, #0
 8002486:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002488:	4b29      	ldr	r3, [pc, #164]	@ (8002530 <MX_TIM8_Init+0xf8>)
 800248a:	2200      	movs	r2, #0
 800248c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800248e:	4b28      	ldr	r3, [pc, #160]	@ (8002530 <MX_TIM8_Init+0xf8>)
 8002490:	2200      	movs	r2, #0
 8002492:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8002494:	4826      	ldr	r0, [pc, #152]	@ (8002530 <MX_TIM8_Init+0xf8>)
 8002496:	f005 f859 	bl	800754c <HAL_TIM_OC_Init>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 80024a0:	f7ff fd54 	bl	8001f4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80024a4:	2320      	movs	r3, #32
 80024a6:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024a8:	2300      	movs	r3, #0
 80024aa:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80024ac:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80024b0:	4619      	mov	r1, r3
 80024b2:	481f      	ldr	r0, [pc, #124]	@ (8002530 <MX_TIM8_Init+0xf8>)
 80024b4:	f005 ff9c 	bl	80083f0 <HAL_TIMEx_MasterConfigSynchronization>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 80024be:	f7ff fd45 	bl	8001f4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80024c2:	2300      	movs	r3, #0
 80024c4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80024c6:	2300      	movs	r3, #0
 80024c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024ca:	2300      	movs	r3, #0
 80024cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80024ce:	2300      	movs	r3, #0
 80024d0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024d2:	2300      	movs	r3, #0
 80024d4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80024d6:	2300      	movs	r3, #0
 80024d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80024da:	2300      	movs	r3, #0
 80024dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024e2:	2200      	movs	r2, #0
 80024e4:	4619      	mov	r1, r3
 80024e6:	4812      	ldr	r0, [pc, #72]	@ (8002530 <MX_TIM8_Init+0xf8>)
 80024e8:	f005 fbba 	bl	8007c60 <HAL_TIM_OC_ConfigChannel>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 80024f2:	f7ff fd2b 	bl	8001f4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80024f6:	2300      	movs	r3, #0
 80024f8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80024fa:	2300      	movs	r3, #0
 80024fc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80024fe:	2300      	movs	r3, #0
 8002500:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002502:	2300      	movs	r3, #0
 8002504:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002506:	2300      	movs	r3, #0
 8002508:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800250a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800250e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002510:	2300      	movs	r3, #0
 8002512:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002514:	1d3b      	adds	r3, r7, #4
 8002516:	4619      	mov	r1, r3
 8002518:	4805      	ldr	r0, [pc, #20]	@ (8002530 <MX_TIM8_Init+0xf8>)
 800251a:	f005 ffe5 	bl	80084e8 <HAL_TIMEx_ConfigBreakDeadTime>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <MX_TIM8_Init+0xf0>
  {
    Error_Handler();
 8002524:	f7ff fd12 	bl	8001f4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002528:	bf00      	nop
 800252a:	3748      	adds	r7, #72	@ 0x48
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	20000824 	.word	0x20000824
 8002534:	40010400 	.word	0x40010400

08002538 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b08a      	sub	sp, #40	@ 0x28
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002540:	f107 0314 	add.w	r3, r7, #20
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	605a      	str	r2, [r3, #4]
 800254a:	609a      	str	r2, [r3, #8]
 800254c:	60da      	str	r2, [r3, #12]
 800254e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002558:	d12b      	bne.n	80025b2 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800255a:	2300      	movs	r3, #0
 800255c:	613b      	str	r3, [r7, #16]
 800255e:	4b17      	ldr	r3, [pc, #92]	@ (80025bc <HAL_TIM_Encoder_MspInit+0x84>)
 8002560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002562:	4a16      	ldr	r2, [pc, #88]	@ (80025bc <HAL_TIM_Encoder_MspInit+0x84>)
 8002564:	f043 0301 	orr.w	r3, r3, #1
 8002568:	6413      	str	r3, [r2, #64]	@ 0x40
 800256a:	4b14      	ldr	r3, [pc, #80]	@ (80025bc <HAL_TIM_Encoder_MspInit+0x84>)
 800256c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	613b      	str	r3, [r7, #16]
 8002574:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002576:	2300      	movs	r3, #0
 8002578:	60fb      	str	r3, [r7, #12]
 800257a:	4b10      	ldr	r3, [pc, #64]	@ (80025bc <HAL_TIM_Encoder_MspInit+0x84>)
 800257c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800257e:	4a0f      	ldr	r2, [pc, #60]	@ (80025bc <HAL_TIM_Encoder_MspInit+0x84>)
 8002580:	f043 0301 	orr.w	r3, r3, #1
 8002584:	6313      	str	r3, [r2, #48]	@ 0x30
 8002586:	4b0d      	ldr	r3, [pc, #52]	@ (80025bc <HAL_TIM_Encoder_MspInit+0x84>)
 8002588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	60fb      	str	r3, [r7, #12]
 8002590:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002592:	2303      	movs	r3, #3
 8002594:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002596:	2302      	movs	r3, #2
 8002598:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259a:	2300      	movs	r3, #0
 800259c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800259e:	2300      	movs	r3, #0
 80025a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80025a2:	2301      	movs	r3, #1
 80025a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a6:	f107 0314 	add.w	r3, r7, #20
 80025aa:	4619      	mov	r1, r3
 80025ac:	4804      	ldr	r0, [pc, #16]	@ (80025c0 <HAL_TIM_Encoder_MspInit+0x88>)
 80025ae:	f002 f913 	bl	80047d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80025b2:	bf00      	nop
 80025b4:	3728      	adds	r7, #40	@ 0x28
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	40023800 	.word	0x40023800
 80025c0:	40020000 	.word	0x40020000

080025c4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a0b      	ldr	r2, [pc, #44]	@ (8002600 <HAL_TIM_PWM_MspInit+0x3c>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d10d      	bne.n	80025f2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025d6:	2300      	movs	r3, #0
 80025d8:	60fb      	str	r3, [r7, #12]
 80025da:	4b0a      	ldr	r3, [pc, #40]	@ (8002604 <HAL_TIM_PWM_MspInit+0x40>)
 80025dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025de:	4a09      	ldr	r2, [pc, #36]	@ (8002604 <HAL_TIM_PWM_MspInit+0x40>)
 80025e0:	f043 0302 	orr.w	r3, r3, #2
 80025e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80025e6:	4b07      	ldr	r3, [pc, #28]	@ (8002604 <HAL_TIM_PWM_MspInit+0x40>)
 80025e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80025f2:	bf00      	nop
 80025f4:	3714      	adds	r7, #20
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	40000400 	.word	0x40000400
 8002604:	40023800 	.word	0x40023800

08002608 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM8)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a0b      	ldr	r2, [pc, #44]	@ (8002644 <HAL_TIM_OC_MspInit+0x3c>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d10d      	bne.n	8002636 <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800261a:	2300      	movs	r3, #0
 800261c:	60fb      	str	r3, [r7, #12]
 800261e:	4b0a      	ldr	r3, [pc, #40]	@ (8002648 <HAL_TIM_OC_MspInit+0x40>)
 8002620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002622:	4a09      	ldr	r2, [pc, #36]	@ (8002648 <HAL_TIM_OC_MspInit+0x40>)
 8002624:	f043 0302 	orr.w	r3, r3, #2
 8002628:	6453      	str	r3, [r2, #68]	@ 0x44
 800262a:	4b07      	ldr	r3, [pc, #28]	@ (8002648 <HAL_TIM_OC_MspInit+0x40>)
 800262c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	60fb      	str	r3, [r7, #12]
 8002634:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002636:	bf00      	nop
 8002638:	3714      	adds	r7, #20
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	40010400 	.word	0x40010400
 8002648:	40023800 	.word	0x40023800

0800264c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b08a      	sub	sp, #40	@ 0x28
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002654:	f107 0314 	add.w	r3, r7, #20
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	605a      	str	r2, [r3, #4]
 800265e:	609a      	str	r2, [r3, #8]
 8002660:	60da      	str	r2, [r3, #12]
 8002662:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a21      	ldr	r2, [pc, #132]	@ (80026f0 <HAL_TIM_MspPostInit+0xa4>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d13b      	bne.n	80026e6 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800266e:	2300      	movs	r3, #0
 8002670:	613b      	str	r3, [r7, #16]
 8002672:	4b20      	ldr	r3, [pc, #128]	@ (80026f4 <HAL_TIM_MspPostInit+0xa8>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002676:	4a1f      	ldr	r2, [pc, #124]	@ (80026f4 <HAL_TIM_MspPostInit+0xa8>)
 8002678:	f043 0301 	orr.w	r3, r3, #1
 800267c:	6313      	str	r3, [r2, #48]	@ 0x30
 800267e:	4b1d      	ldr	r3, [pc, #116]	@ (80026f4 <HAL_TIM_MspPostInit+0xa8>)
 8002680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	613b      	str	r3, [r7, #16]
 8002688:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800268a:	2300      	movs	r3, #0
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	4b19      	ldr	r3, [pc, #100]	@ (80026f4 <HAL_TIM_MspPostInit+0xa8>)
 8002690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002692:	4a18      	ldr	r2, [pc, #96]	@ (80026f4 <HAL_TIM_MspPostInit+0xa8>)
 8002694:	f043 0304 	orr.w	r3, r3, #4
 8002698:	6313      	str	r3, [r2, #48]	@ 0x30
 800269a:	4b16      	ldr	r3, [pc, #88]	@ (80026f4 <HAL_TIM_MspPostInit+0xa8>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269e:	f003 0304 	and.w	r3, r3, #4
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80026a6:	2340      	movs	r3, #64	@ 0x40
 80026a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026aa:	2302      	movs	r3, #2
 80026ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ae:	2300      	movs	r3, #0
 80026b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b2:	2300      	movs	r3, #0
 80026b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80026b6:	2302      	movs	r3, #2
 80026b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ba:	f107 0314 	add.w	r3, r7, #20
 80026be:	4619      	mov	r1, r3
 80026c0:	480d      	ldr	r0, [pc, #52]	@ (80026f8 <HAL_TIM_MspPostInit+0xac>)
 80026c2:	f002 f889 	bl	80047d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80026c6:	2380      	movs	r3, #128	@ 0x80
 80026c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ca:	2302      	movs	r3, #2
 80026cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ce:	2300      	movs	r3, #0
 80026d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d2:	2300      	movs	r3, #0
 80026d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80026d6:	2302      	movs	r3, #2
 80026d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026da:	f107 0314 	add.w	r3, r7, #20
 80026de:	4619      	mov	r1, r3
 80026e0:	4806      	ldr	r0, [pc, #24]	@ (80026fc <HAL_TIM_MspPostInit+0xb0>)
 80026e2:	f002 f879 	bl	80047d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80026e6:	bf00      	nop
 80026e8:	3728      	adds	r7, #40	@ 0x28
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	40000400 	.word	0x40000400
 80026f4:	40023800 	.word	0x40023800
 80026f8:	40020000 	.word	0x40020000
 80026fc:	40020800 	.word	0x40020800

08002700 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002704:	4b14      	ldr	r3, [pc, #80]	@ (8002758 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002706:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800270a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800270c:	4b12      	ldr	r3, [pc, #72]	@ (8002758 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800270e:	2206      	movs	r2, #6
 8002710:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002712:	4b11      	ldr	r3, [pc, #68]	@ (8002758 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002714:	2202      	movs	r2, #2
 8002716:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002718:	4b0f      	ldr	r3, [pc, #60]	@ (8002758 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800271a:	2200      	movs	r2, #0
 800271c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800271e:	4b0e      	ldr	r3, [pc, #56]	@ (8002758 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002720:	2202      	movs	r2, #2
 8002722:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002724:	4b0c      	ldr	r3, [pc, #48]	@ (8002758 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002726:	2200      	movs	r2, #0
 8002728:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800272a:	4b0b      	ldr	r3, [pc, #44]	@ (8002758 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800272c:	2200      	movs	r2, #0
 800272e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002730:	4b09      	ldr	r3, [pc, #36]	@ (8002758 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002732:	2200      	movs	r2, #0
 8002734:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8002736:	4b08      	ldr	r3, [pc, #32]	@ (8002758 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002738:	2200      	movs	r2, #0
 800273a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800273c:	4b06      	ldr	r3, [pc, #24]	@ (8002758 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800273e:	2200      	movs	r2, #0
 8002740:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002742:	4805      	ldr	r0, [pc, #20]	@ (8002758 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002744:	f002 f9f5 	bl	8004b32 <HAL_PCD_Init>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800274e:	f7ff fbfd 	bl	8001f4c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002752:	bf00      	nop
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	2000086c 	.word	0x2000086c

0800275c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b0a0      	sub	sp, #128	@ 0x80
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002764:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	605a      	str	r2, [r3, #4]
 800276e:	609a      	str	r2, [r3, #8]
 8002770:	60da      	str	r2, [r3, #12]
 8002772:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002774:	f107 0310 	add.w	r3, r7, #16
 8002778:	225c      	movs	r2, #92	@ 0x5c
 800277a:	2100      	movs	r1, #0
 800277c:	4618      	mov	r0, r3
 800277e:	f00d f97b 	bl	800fa78 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800278a:	d149      	bne.n	8002820 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800278c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002790:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8002792:	2300      	movs	r3, #0
 8002794:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002796:	f107 0310 	add.w	r3, r7, #16
 800279a:	4618      	mov	r0, r3
 800279c:	f003 fdac 	bl	80062f8 <HAL_RCCEx_PeriphCLKConfig>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 80027a6:	f7ff fbd1 	bl	8001f4c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027aa:	2300      	movs	r3, #0
 80027ac:	60fb      	str	r3, [r7, #12]
 80027ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002828 <HAL_PCD_MspInit+0xcc>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b2:	4a1d      	ldr	r2, [pc, #116]	@ (8002828 <HAL_PCD_MspInit+0xcc>)
 80027b4:	f043 0301 	orr.w	r3, r3, #1
 80027b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80027ba:	4b1b      	ldr	r3, [pc, #108]	@ (8002828 <HAL_PCD_MspInit+0xcc>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	60fb      	str	r3, [r7, #12]
 80027c4:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80027c6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80027ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027cc:	2302      	movs	r3, #2
 80027ce:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d0:	2300      	movs	r3, #0
 80027d2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027d4:	2303      	movs	r3, #3
 80027d6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80027d8:	230a      	movs	r3, #10
 80027da:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027dc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80027e0:	4619      	mov	r1, r3
 80027e2:	4812      	ldr	r0, [pc, #72]	@ (800282c <HAL_PCD_MspInit+0xd0>)
 80027e4:	f001 fff8 	bl	80047d8 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80027e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002828 <HAL_PCD_MspInit+0xcc>)
 80027ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027ec:	4a0e      	ldr	r2, [pc, #56]	@ (8002828 <HAL_PCD_MspInit+0xcc>)
 80027ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027f2:	6353      	str	r3, [r2, #52]	@ 0x34
 80027f4:	2300      	movs	r3, #0
 80027f6:	60bb      	str	r3, [r7, #8]
 80027f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002828 <HAL_PCD_MspInit+0xcc>)
 80027fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027fc:	4a0a      	ldr	r2, [pc, #40]	@ (8002828 <HAL_PCD_MspInit+0xcc>)
 80027fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002802:	6453      	str	r3, [r2, #68]	@ 0x44
 8002804:	4b08      	ldr	r3, [pc, #32]	@ (8002828 <HAL_PCD_MspInit+0xcc>)
 8002806:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002808:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800280c:	60bb      	str	r3, [r7, #8]
 800280e:	68bb      	ldr	r3, [r7, #8]

    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8002810:	2200      	movs	r2, #0
 8002812:	2106      	movs	r1, #6
 8002814:	2043      	movs	r0, #67	@ 0x43
 8002816:	f001 fc45 	bl	80040a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800281a:	2043      	movs	r0, #67	@ 0x43
 800281c:	f001 fc5e 	bl	80040dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002820:	bf00      	nop
 8002822:	3780      	adds	r7, #128	@ 0x80
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40023800 	.word	0x40023800
 800282c:	40020000 	.word	0x40020000

08002830 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002830:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002868 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002834:	f7ff fd34 	bl	80022a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002838:	480c      	ldr	r0, [pc, #48]	@ (800286c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800283a:	490d      	ldr	r1, [pc, #52]	@ (8002870 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800283c:	4a0d      	ldr	r2, [pc, #52]	@ (8002874 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800283e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002840:	e002      	b.n	8002848 <LoopCopyDataInit>

08002842 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002842:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002844:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002846:	3304      	adds	r3, #4

08002848 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002848:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800284a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800284c:	d3f9      	bcc.n	8002842 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800284e:	4a0a      	ldr	r2, [pc, #40]	@ (8002878 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002850:	4c0a      	ldr	r4, [pc, #40]	@ (800287c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002852:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002854:	e001      	b.n	800285a <LoopFillZerobss>

08002856 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002856:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002858:	3204      	adds	r2, #4

0800285a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800285a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800285c:	d3fb      	bcc.n	8002856 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800285e:	f00d f97f 	bl	800fb60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002862:	f7ff fa99 	bl	8001d98 <main>
  bx  lr    
 8002866:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002868:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800286c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002870:	20000324 	.word	0x20000324
  ldr r2, =_sidata
 8002874:	08010450 	.word	0x08010450
  ldr r2, =_sbss
 8002878:	20000324 	.word	0x20000324
  ldr r4, =_ebss
 800287c:	20005504 	.word	0x20005504

08002880 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002880:	e7fe      	b.n	8002880 <ADC_IRQHandler>
	...

08002884 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002888:	4b0e      	ldr	r3, [pc, #56]	@ (80028c4 <HAL_Init+0x40>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a0d      	ldr	r2, [pc, #52]	@ (80028c4 <HAL_Init+0x40>)
 800288e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002892:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002894:	4b0b      	ldr	r3, [pc, #44]	@ (80028c4 <HAL_Init+0x40>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a0a      	ldr	r2, [pc, #40]	@ (80028c4 <HAL_Init+0x40>)
 800289a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800289e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028a0:	4b08      	ldr	r3, [pc, #32]	@ (80028c4 <HAL_Init+0x40>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a07      	ldr	r2, [pc, #28]	@ (80028c4 <HAL_Init+0x40>)
 80028a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028ac:	2003      	movs	r0, #3
 80028ae:	f001 fbee 	bl	800408e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028b2:	200f      	movs	r0, #15
 80028b4:	f7ff fb7c 	bl	8001fb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028b8:	f7ff fb4e 	bl	8001f58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	40023c00 	.word	0x40023c00

080028c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028cc:	4b06      	ldr	r3, [pc, #24]	@ (80028e8 <HAL_IncTick+0x20>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	461a      	mov	r2, r3
 80028d2:	4b06      	ldr	r3, [pc, #24]	@ (80028ec <HAL_IncTick+0x24>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4413      	add	r3, r2
 80028d8:	4a04      	ldr	r2, [pc, #16]	@ (80028ec <HAL_IncTick+0x24>)
 80028da:	6013      	str	r3, [r2, #0]
}
 80028dc:	bf00      	nop
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	2000000c 	.word	0x2000000c
 80028ec:	20000d50 	.word	0x20000d50

080028f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  return uwTick;
 80028f4:	4b03      	ldr	r3, [pc, #12]	@ (8002904 <HAL_GetTick+0x14>)
 80028f6:	681b      	ldr	r3, [r3, #0]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	20000d50 	.word	0x20000d50

08002908 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002910:	f7ff ffee 	bl	80028f0 <HAL_GetTick>
 8002914:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002920:	d005      	beq.n	800292e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002922:	4b0a      	ldr	r3, [pc, #40]	@ (800294c <HAL_Delay+0x44>)
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	461a      	mov	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	4413      	add	r3, r2
 800292c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800292e:	bf00      	nop
 8002930:	f7ff ffde 	bl	80028f0 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	429a      	cmp	r2, r3
 800293e:	d8f7      	bhi.n	8002930 <HAL_Delay+0x28>
  {
  }
}
 8002940:	bf00      	nop
 8002942:	bf00      	nop
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	2000000c 	.word	0x2000000c

08002950 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002958:	2300      	movs	r3, #0
 800295a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e033      	b.n	80029ce <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296a:	2b00      	cmp	r3, #0
 800296c:	d109      	bne.n	8002982 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f7fe faa6 	bl	8000ec0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002986:	f003 0310 	and.w	r3, r3, #16
 800298a:	2b00      	cmp	r3, #0
 800298c:	d118      	bne.n	80029c0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002992:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002996:	f023 0302 	bic.w	r3, r3, #2
 800299a:	f043 0202 	orr.w	r2, r3, #2
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 fa6e 	bl	8002e84 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b2:	f023 0303 	bic.w	r3, r3, #3
 80029b6:	f043 0201 	orr.w	r2, r3, #1
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	641a      	str	r2, [r3, #64]	@ 0x40
 80029be:	e001      	b.n	80029c4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80029cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
	...

080029d8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80029e4:	2300      	movs	r3, #0
 80029e6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d101      	bne.n	80029f6 <HAL_ADC_Start_DMA+0x1e>
 80029f2:	2302      	movs	r3, #2
 80029f4:	e0e9      	b.n	8002bca <HAL_ADC_Start_DMA+0x1f2>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d018      	beq.n	8002a3e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	689a      	ldr	r2, [r3, #8]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f042 0201 	orr.w	r2, r2, #1
 8002a1a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002a1c:	4b6d      	ldr	r3, [pc, #436]	@ (8002bd4 <HAL_ADC_Start_DMA+0x1fc>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a6d      	ldr	r2, [pc, #436]	@ (8002bd8 <HAL_ADC_Start_DMA+0x200>)
 8002a22:	fba2 2303 	umull	r2, r3, r2, r3
 8002a26:	0c9a      	lsrs	r2, r3, #18
 8002a28:	4613      	mov	r3, r2
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	4413      	add	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002a30:	e002      	b.n	8002a38 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	3b01      	subs	r3, #1
 8002a36:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1f9      	bne.n	8002a32 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a4c:	d107      	bne.n	8002a5e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689a      	ldr	r2, [r3, #8]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a5c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	f040 80a1 	bne.w	8002bb0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a72:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002a76:	f023 0301 	bic.w	r3, r3, #1
 8002a7a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d007      	beq.n	8002aa0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a94:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002a98:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002aa8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002aac:	d106      	bne.n	8002abc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ab2:	f023 0206 	bic.w	r2, r3, #6
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	645a      	str	r2, [r3, #68]	@ 0x44
 8002aba:	e002      	b.n	8002ac2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002aca:	4b44      	ldr	r3, [pc, #272]	@ (8002bdc <HAL_ADC_Start_DMA+0x204>)
 8002acc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ad2:	4a43      	ldr	r2, [pc, #268]	@ (8002be0 <HAL_ADC_Start_DMA+0x208>)
 8002ad4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ada:	4a42      	ldr	r2, [pc, #264]	@ (8002be4 <HAL_ADC_Start_DMA+0x20c>)
 8002adc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ae2:	4a41      	ldr	r2, [pc, #260]	@ (8002be8 <HAL_ADC_Start_DMA+0x210>)
 8002ae4:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002aee:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002afe:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689a      	ldr	r2, [r3, #8]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b0e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	334c      	adds	r3, #76	@ 0x4c
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	68ba      	ldr	r2, [r7, #8]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f001 fb98 	bl	8004254 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f003 031f 	and.w	r3, r3, #31
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d12a      	bne.n	8002b86 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a2d      	ldr	r2, [pc, #180]	@ (8002bec <HAL_ADC_Start_DMA+0x214>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d015      	beq.n	8002b66 <HAL_ADC_Start_DMA+0x18e>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a2c      	ldr	r2, [pc, #176]	@ (8002bf0 <HAL_ADC_Start_DMA+0x218>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d105      	bne.n	8002b50 <HAL_ADC_Start_DMA+0x178>
 8002b44:	4b25      	ldr	r3, [pc, #148]	@ (8002bdc <HAL_ADC_Start_DMA+0x204>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f003 031f 	and.w	r3, r3, #31
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00a      	beq.n	8002b66 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a27      	ldr	r2, [pc, #156]	@ (8002bf4 <HAL_ADC_Start_DMA+0x21c>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d136      	bne.n	8002bc8 <HAL_ADC_Start_DMA+0x1f0>
 8002b5a:	4b20      	ldr	r3, [pc, #128]	@ (8002bdc <HAL_ADC_Start_DMA+0x204>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f003 0310 	and.w	r3, r3, #16
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d130      	bne.n	8002bc8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d129      	bne.n	8002bc8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	689a      	ldr	r2, [r3, #8]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002b82:	609a      	str	r2, [r3, #8]
 8002b84:	e020      	b.n	8002bc8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a18      	ldr	r2, [pc, #96]	@ (8002bec <HAL_ADC_Start_DMA+0x214>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d11b      	bne.n	8002bc8 <HAL_ADC_Start_DMA+0x1f0>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d114      	bne.n	8002bc8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002bac:	609a      	str	r2, [r3, #8]
 8002bae:	e00b      	b.n	8002bc8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb4:	f043 0210 	orr.w	r2, r3, #16
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bc0:	f043 0201 	orr.w	r2, r3, #1
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3718      	adds	r7, #24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	20000004 	.word	0x20000004
 8002bd8:	431bde83 	.word	0x431bde83
 8002bdc:	40012300 	.word	0x40012300
 8002be0:	0800307d 	.word	0x0800307d
 8002be4:	08003137 	.word	0x08003137
 8002be8:	08003153 	.word	0x08003153
 8002bec:	40012000 	.word	0x40012000
 8002bf0:	40012100 	.word	0x40012100
 8002bf4:	40012200 	.word	0x40012200

08002bf8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d101      	bne.n	8002c3c <HAL_ADC_ConfigChannel+0x1c>
 8002c38:	2302      	movs	r3, #2
 8002c3a:	e113      	b.n	8002e64 <HAL_ADC_ConfigChannel+0x244>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2b09      	cmp	r3, #9
 8002c4a:	d925      	bls.n	8002c98 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68d9      	ldr	r1, [r3, #12]
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	461a      	mov	r2, r3
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	4413      	add	r3, r2
 8002c60:	3b1e      	subs	r3, #30
 8002c62:	2207      	movs	r2, #7
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	43da      	mvns	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	400a      	ands	r2, r1
 8002c70:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68d9      	ldr	r1, [r3, #12]
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	689a      	ldr	r2, [r3, #8]
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	4618      	mov	r0, r3
 8002c84:	4603      	mov	r3, r0
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	4403      	add	r3, r0
 8002c8a:	3b1e      	subs	r3, #30
 8002c8c:	409a      	lsls	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	430a      	orrs	r2, r1
 8002c94:	60da      	str	r2, [r3, #12]
 8002c96:	e022      	b.n	8002cde <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6919      	ldr	r1, [r3, #16]
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	4413      	add	r3, r2
 8002cac:	2207      	movs	r2, #7
 8002cae:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb2:	43da      	mvns	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	400a      	ands	r2, r1
 8002cba:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6919      	ldr	r1, [r3, #16]
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	689a      	ldr	r2, [r3, #8]
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	4618      	mov	r0, r3
 8002cce:	4603      	mov	r3, r0
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	4403      	add	r3, r0
 8002cd4:	409a      	lsls	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	2b06      	cmp	r3, #6
 8002ce4:	d824      	bhi.n	8002d30 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685a      	ldr	r2, [r3, #4]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	4413      	add	r3, r2
 8002cf6:	3b05      	subs	r3, #5
 8002cf8:	221f      	movs	r2, #31
 8002cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfe:	43da      	mvns	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	400a      	ands	r2, r1
 8002d06:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	4618      	mov	r0, r3
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685a      	ldr	r2, [r3, #4]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	4413      	add	r3, r2
 8002d20:	3b05      	subs	r3, #5
 8002d22:	fa00 f203 	lsl.w	r2, r0, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002d2e:	e04c      	b.n	8002dca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	2b0c      	cmp	r3, #12
 8002d36:	d824      	bhi.n	8002d82 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685a      	ldr	r2, [r3, #4]
 8002d42:	4613      	mov	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	4413      	add	r3, r2
 8002d48:	3b23      	subs	r3, #35	@ 0x23
 8002d4a:	221f      	movs	r2, #31
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	43da      	mvns	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	400a      	ands	r2, r1
 8002d58:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	4618      	mov	r0, r3
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685a      	ldr	r2, [r3, #4]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4413      	add	r3, r2
 8002d72:	3b23      	subs	r3, #35	@ 0x23
 8002d74:	fa00 f203 	lsl.w	r2, r0, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d80:	e023      	b.n	8002dca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685a      	ldr	r2, [r3, #4]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	4413      	add	r3, r2
 8002d92:	3b41      	subs	r3, #65	@ 0x41
 8002d94:	221f      	movs	r2, #31
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	43da      	mvns	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	400a      	ands	r2, r1
 8002da2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	4618      	mov	r0, r3
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685a      	ldr	r2, [r3, #4]
 8002db6:	4613      	mov	r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	4413      	add	r3, r2
 8002dbc:	3b41      	subs	r3, #65	@ 0x41
 8002dbe:	fa00 f203 	lsl.w	r2, r0, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002dca:	4b29      	ldr	r3, [pc, #164]	@ (8002e70 <HAL_ADC_ConfigChannel+0x250>)
 8002dcc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a28      	ldr	r2, [pc, #160]	@ (8002e74 <HAL_ADC_ConfigChannel+0x254>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d10f      	bne.n	8002df8 <HAL_ADC_ConfigChannel+0x1d8>
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2b12      	cmp	r3, #18
 8002dde:	d10b      	bne.n	8002df8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a1d      	ldr	r2, [pc, #116]	@ (8002e74 <HAL_ADC_ConfigChannel+0x254>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d12b      	bne.n	8002e5a <HAL_ADC_ConfigChannel+0x23a>
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a1c      	ldr	r2, [pc, #112]	@ (8002e78 <HAL_ADC_ConfigChannel+0x258>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d003      	beq.n	8002e14 <HAL_ADC_ConfigChannel+0x1f4>
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2b11      	cmp	r3, #17
 8002e12:	d122      	bne.n	8002e5a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a11      	ldr	r2, [pc, #68]	@ (8002e78 <HAL_ADC_ConfigChannel+0x258>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d111      	bne.n	8002e5a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e36:	4b11      	ldr	r3, [pc, #68]	@ (8002e7c <HAL_ADC_ConfigChannel+0x25c>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a11      	ldr	r2, [pc, #68]	@ (8002e80 <HAL_ADC_ConfigChannel+0x260>)
 8002e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e40:	0c9a      	lsrs	r2, r3, #18
 8002e42:	4613      	mov	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4413      	add	r3, r2
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002e4c:	e002      	b.n	8002e54 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	3b01      	subs	r3, #1
 8002e52:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1f9      	bne.n	8002e4e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3714      	adds	r7, #20
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr
 8002e70:	40012300 	.word	0x40012300
 8002e74:	40012000 	.word	0x40012000
 8002e78:	10000012 	.word	0x10000012
 8002e7c:	20000004 	.word	0x20000004
 8002e80:	431bde83 	.word	0x431bde83

08002e84 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e8c:	4b79      	ldr	r3, [pc, #484]	@ (8003074 <ADC_Init+0x1f0>)
 8002e8e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	685a      	ldr	r2, [r3, #4]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	685a      	ldr	r2, [r3, #4]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002eb8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6859      	ldr	r1, [r3, #4]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	021a      	lsls	r2, r3, #8
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002edc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	6859      	ldr	r1, [r3, #4]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689a      	ldr	r2, [r3, #8]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689a      	ldr	r2, [r3, #8]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002efe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6899      	ldr	r1, [r3, #8]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68da      	ldr	r2, [r3, #12]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f16:	4a58      	ldr	r2, [pc, #352]	@ (8003078 <ADC_Init+0x1f4>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d022      	beq.n	8002f62 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689a      	ldr	r2, [r3, #8]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002f2a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6899      	ldr	r1, [r3, #8]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002f4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	6899      	ldr	r1, [r3, #8]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	609a      	str	r2, [r3, #8]
 8002f60:	e00f      	b.n	8002f82 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002f70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	689a      	ldr	r2, [r3, #8]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002f80:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	689a      	ldr	r2, [r3, #8]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f022 0202 	bic.w	r2, r2, #2
 8002f90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	6899      	ldr	r1, [r3, #8]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	7e1b      	ldrb	r3, [r3, #24]
 8002f9c:	005a      	lsls	r2, r3, #1
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d01b      	beq.n	8002fe8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	685a      	ldr	r2, [r3, #4]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fbe:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	685a      	ldr	r2, [r3, #4]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002fce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6859      	ldr	r1, [r3, #4]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	035a      	lsls	r2, r3, #13
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	605a      	str	r2, [r3, #4]
 8002fe6:	e007      	b.n	8002ff8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	685a      	ldr	r2, [r3, #4]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ff6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003006:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	69db      	ldr	r3, [r3, #28]
 8003012:	3b01      	subs	r3, #1
 8003014:	051a      	lsls	r2, r3, #20
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	430a      	orrs	r2, r1
 800301c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	689a      	ldr	r2, [r3, #8]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800302c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	6899      	ldr	r1, [r3, #8]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800303a:	025a      	lsls	r2, r3, #9
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	430a      	orrs	r2, r1
 8003042:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	689a      	ldr	r2, [r3, #8]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003052:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6899      	ldr	r1, [r3, #8]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	029a      	lsls	r2, r3, #10
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	430a      	orrs	r2, r1
 8003066:	609a      	str	r2, [r3, #8]
}
 8003068:	bf00      	nop
 800306a:	3714      	adds	r7, #20
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr
 8003074:	40012300 	.word	0x40012300
 8003078:	0f000001 	.word	0x0f000001

0800307c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003088:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800308e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003092:	2b00      	cmp	r3, #0
 8003094:	d13c      	bne.n	8003110 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d12b      	bne.n	8003108 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d127      	bne.n	8003108 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030be:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d006      	beq.n	80030d4 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d119      	bne.n	8003108 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f022 0220 	bic.w	r2, r2, #32
 80030e2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d105      	bne.n	8003108 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003100:	f043 0201 	orr.w	r2, r3, #1
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f7fe fd01 	bl	8001b10 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800310e:	e00e      	b.n	800312e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003114:	f003 0310 	and.w	r3, r3, #16
 8003118:	2b00      	cmp	r3, #0
 800311a:	d003      	beq.n	8003124 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f7ff fd75 	bl	8002c0c <HAL_ADC_ErrorCallback>
}
 8003122:	e004      	b.n	800312e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	4798      	blx	r3
}
 800312e:	bf00      	nop
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b084      	sub	sp, #16
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003142:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f7ff fd57 	bl	8002bf8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800314a:	bf00      	nop
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b084      	sub	sp, #16
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800315e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2240      	movs	r2, #64	@ 0x40
 8003164:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800316a:	f043 0204 	orr.w	r2, r3, #4
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f7ff fd4a 	bl	8002c0c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003178:	bf00      	nop
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e0ed      	b.n	800336e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d102      	bne.n	80031a4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7fd ff52 	bl	8001048 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f042 0201 	orr.w	r2, r2, #1
 80031b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031b4:	f7ff fb9c 	bl	80028f0 <HAL_GetTick>
 80031b8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80031ba:	e012      	b.n	80031e2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80031bc:	f7ff fb98 	bl	80028f0 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b0a      	cmp	r3, #10
 80031c8:	d90b      	bls.n	80031e2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ce:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2205      	movs	r2, #5
 80031da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e0c5      	b.n	800336e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d0e5      	beq.n	80031bc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f022 0202 	bic.w	r2, r2, #2
 80031fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003200:	f7ff fb76 	bl	80028f0 <HAL_GetTick>
 8003204:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003206:	e012      	b.n	800322e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003208:	f7ff fb72 	bl	80028f0 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b0a      	cmp	r3, #10
 8003214:	d90b      	bls.n	800322e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800321a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2205      	movs	r2, #5
 8003226:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e09f      	b.n	800336e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d1e5      	bne.n	8003208 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	7e1b      	ldrb	r3, [r3, #24]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d108      	bne.n	8003256 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003252:	601a      	str	r2, [r3, #0]
 8003254:	e007      	b.n	8003266 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003264:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	7e5b      	ldrb	r3, [r3, #25]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d108      	bne.n	8003280 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800327c:	601a      	str	r2, [r3, #0]
 800327e:	e007      	b.n	8003290 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800328e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	7e9b      	ldrb	r3, [r3, #26]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d108      	bne.n	80032aa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f042 0220 	orr.w	r2, r2, #32
 80032a6:	601a      	str	r2, [r3, #0]
 80032a8:	e007      	b.n	80032ba <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 0220 	bic.w	r2, r2, #32
 80032b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	7edb      	ldrb	r3, [r3, #27]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d108      	bne.n	80032d4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 0210 	bic.w	r2, r2, #16
 80032d0:	601a      	str	r2, [r3, #0]
 80032d2:	e007      	b.n	80032e4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f042 0210 	orr.w	r2, r2, #16
 80032e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	7f1b      	ldrb	r3, [r3, #28]
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d108      	bne.n	80032fe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f042 0208 	orr.w	r2, r2, #8
 80032fa:	601a      	str	r2, [r3, #0]
 80032fc:	e007      	b.n	800330e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 0208 	bic.w	r2, r2, #8
 800330c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	7f5b      	ldrb	r3, [r3, #29]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d108      	bne.n	8003328 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f042 0204 	orr.w	r2, r2, #4
 8003324:	601a      	str	r2, [r3, #0]
 8003326:	e007      	b.n	8003338 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f022 0204 	bic.w	r2, r2, #4
 8003336:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689a      	ldr	r2, [r3, #8]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	431a      	orrs	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	431a      	orrs	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	695b      	ldr	r3, [r3, #20]
 800334c:	ea42 0103 	orr.w	r1, r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	1e5a      	subs	r2, r3, #1
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	430a      	orrs	r2, r1
 800335c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
	...

08003378 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003378:	b480      	push	{r7}
 800337a:	b087      	sub	sp, #28
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800338e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003390:	7cfb      	ldrb	r3, [r7, #19]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d003      	beq.n	800339e <HAL_CAN_ConfigFilter+0x26>
 8003396:	7cfb      	ldrb	r3, [r7, #19]
 8003398:	2b02      	cmp	r3, #2
 800339a:	f040 80be 	bne.w	800351a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800339e:	4b65      	ldr	r3, [pc, #404]	@ (8003534 <HAL_CAN_ConfigFilter+0x1bc>)
 80033a0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80033a8:	f043 0201 	orr.w	r2, r3, #1
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80033b8:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033cc:	021b      	lsls	r3, r3, #8
 80033ce:	431a      	orrs	r2, r3
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	f003 031f 	and.w	r3, r3, #31
 80033de:	2201      	movs	r2, #1
 80033e0:	fa02 f303 	lsl.w	r3, r2, r3
 80033e4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	43db      	mvns	r3, r3
 80033f0:	401a      	ands	r2, r3
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	69db      	ldr	r3, [r3, #28]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d123      	bne.n	8003448 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	43db      	mvns	r3, r3
 800340a:	401a      	ands	r2, r3
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003422:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	3248      	adds	r2, #72	@ 0x48
 8003428:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800343c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800343e:	6979      	ldr	r1, [r7, #20]
 8003440:	3348      	adds	r3, #72	@ 0x48
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	440b      	add	r3, r1
 8003446:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	69db      	ldr	r3, [r3, #28]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d122      	bne.n	8003496 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	431a      	orrs	r2, r3
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800346c:	683a      	ldr	r2, [r7, #0]
 800346e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003470:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	3248      	adds	r2, #72	@ 0x48
 8003476:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800348a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800348c:	6979      	ldr	r1, [r7, #20]
 800348e:	3348      	adds	r3, #72	@ 0x48
 8003490:	00db      	lsls	r3, r3, #3
 8003492:	440b      	add	r3, r1
 8003494:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d109      	bne.n	80034b2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	43db      	mvns	r3, r3
 80034a8:	401a      	ands	r2, r3
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80034b0:	e007      	b.n	80034c2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	431a      	orrs	r2, r3
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d109      	bne.n	80034de <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	43db      	mvns	r3, r3
 80034d4:	401a      	ands	r2, r3
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80034dc:	e007      	b.n	80034ee <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	431a      	orrs	r2, r3
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d107      	bne.n	8003506 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	431a      	orrs	r2, r3
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800350c:	f023 0201 	bic.w	r2, r3, #1
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8003516:	2300      	movs	r3, #0
 8003518:	e006      	b.n	8003528 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
  }
}
 8003528:	4618      	mov	r0, r3
 800352a:	371c      	adds	r7, #28
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr
 8003534:	40006400 	.word	0x40006400

08003538 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2b01      	cmp	r3, #1
 800354a:	d12e      	bne.n	80035aa <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2202      	movs	r2, #2
 8003550:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 0201 	bic.w	r2, r2, #1
 8003562:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003564:	f7ff f9c4 	bl	80028f0 <HAL_GetTick>
 8003568:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800356a:	e012      	b.n	8003592 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800356c:	f7ff f9c0 	bl	80028f0 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	2b0a      	cmp	r3, #10
 8003578:	d90b      	bls.n	8003592 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800357e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2205      	movs	r2, #5
 800358a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e012      	b.n	80035b8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1e5      	bne.n	800356c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80035a6:	2300      	movs	r3, #0
 80035a8:	e006      	b.n	80035b8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ae:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
  }
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d133      	bne.n	800363c <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f042 0201 	orr.w	r2, r2, #1
 80035e2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80035e4:	f7ff f984 	bl	80028f0 <HAL_GetTick>
 80035e8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80035ea:	e012      	b.n	8003612 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80035ec:	f7ff f980 	bl	80028f0 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b0a      	cmp	r3, #10
 80035f8:	d90b      	bls.n	8003612 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035fe:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2205      	movs	r2, #5
 800360a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e01b      	b.n	800364a <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	2b00      	cmp	r3, #0
 800361e:	d0e5      	beq.n	80035ec <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f022 0202 	bic.w	r2, r2, #2
 800362e:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8003638:	2300      	movs	r3, #0
 800363a:	e006      	b.n	800364a <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003640:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
  }
}
 800364a:	4618      	mov	r0, r3
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003652:	b480      	push	{r7}
 8003654:	b089      	sub	sp, #36	@ 0x24
 8003656:	af00      	add	r7, sp, #0
 8003658:	60f8      	str	r0, [r7, #12]
 800365a:	60b9      	str	r1, [r7, #8]
 800365c:	607a      	str	r2, [r7, #4]
 800365e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003666:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003670:	7ffb      	ldrb	r3, [r7, #31]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d003      	beq.n	800367e <HAL_CAN_AddTxMessage+0x2c>
 8003676:	7ffb      	ldrb	r3, [r7, #31]
 8003678:	2b02      	cmp	r3, #2
 800367a:	f040 80ad 	bne.w	80037d8 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d10a      	bne.n	800369e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800368e:	2b00      	cmp	r3, #0
 8003690:	d105      	bne.n	800369e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003698:	2b00      	cmp	r3, #0
 800369a:	f000 8095 	beq.w	80037c8 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	0e1b      	lsrs	r3, r3, #24
 80036a2:	f003 0303 	and.w	r3, r3, #3
 80036a6:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80036a8:	2201      	movs	r2, #1
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	409a      	lsls	r2, r3
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10d      	bne.n	80036d6 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80036c4:	68f9      	ldr	r1, [r7, #12]
 80036c6:	6809      	ldr	r1, [r1, #0]
 80036c8:	431a      	orrs	r2, r3
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	3318      	adds	r3, #24
 80036ce:	011b      	lsls	r3, r3, #4
 80036d0:	440b      	add	r3, r1
 80036d2:	601a      	str	r2, [r3, #0]
 80036d4:	e00f      	b.n	80036f6 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80036e0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80036e6:	68f9      	ldr	r1, [r7, #12]
 80036e8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80036ea:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	3318      	adds	r3, #24
 80036f0:	011b      	lsls	r3, r3, #4
 80036f2:	440b      	add	r3, r1
 80036f4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6819      	ldr	r1, [r3, #0]
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	691a      	ldr	r2, [r3, #16]
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	3318      	adds	r3, #24
 8003702:	011b      	lsls	r3, r3, #4
 8003704:	440b      	add	r3, r1
 8003706:	3304      	adds	r3, #4
 8003708:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	7d1b      	ldrb	r3, [r3, #20]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d111      	bne.n	8003736 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	3318      	adds	r3, #24
 800371a:	011b      	lsls	r3, r3, #4
 800371c:	4413      	add	r3, r2
 800371e:	3304      	adds	r3, #4
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	6811      	ldr	r1, [r2, #0]
 8003726:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	3318      	adds	r3, #24
 800372e:	011b      	lsls	r3, r3, #4
 8003730:	440b      	add	r3, r1
 8003732:	3304      	adds	r3, #4
 8003734:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	3307      	adds	r3, #7
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	061a      	lsls	r2, r3, #24
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	3306      	adds	r3, #6
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	041b      	lsls	r3, r3, #16
 8003746:	431a      	orrs	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	3305      	adds	r3, #5
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	021b      	lsls	r3, r3, #8
 8003750:	4313      	orrs	r3, r2
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	3204      	adds	r2, #4
 8003756:	7812      	ldrb	r2, [r2, #0]
 8003758:	4610      	mov	r0, r2
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	6811      	ldr	r1, [r2, #0]
 800375e:	ea43 0200 	orr.w	r2, r3, r0
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	011b      	lsls	r3, r3, #4
 8003766:	440b      	add	r3, r1
 8003768:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800376c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	3303      	adds	r3, #3
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	061a      	lsls	r2, r3, #24
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	3302      	adds	r3, #2
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	041b      	lsls	r3, r3, #16
 800377e:	431a      	orrs	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	3301      	adds	r3, #1
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	021b      	lsls	r3, r3, #8
 8003788:	4313      	orrs	r3, r2
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	7812      	ldrb	r2, [r2, #0]
 800378e:	4610      	mov	r0, r2
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	6811      	ldr	r1, [r2, #0]
 8003794:	ea43 0200 	orr.w	r2, r3, r0
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	011b      	lsls	r3, r3, #4
 800379c:	440b      	add	r3, r1
 800379e:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80037a2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	3318      	adds	r3, #24
 80037ac:	011b      	lsls	r3, r3, #4
 80037ae:	4413      	add	r3, r2
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	6811      	ldr	r1, [r2, #0]
 80037b6:	f043 0201 	orr.w	r2, r3, #1
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	3318      	adds	r3, #24
 80037be:	011b      	lsls	r3, r3, #4
 80037c0:	440b      	add	r3, r1
 80037c2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80037c4:	2300      	movs	r3, #0
 80037c6:	e00e      	b.n	80037e6 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037cc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e006      	b.n	80037e6 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037dc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
  }
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3724      	adds	r7, #36	@ 0x24
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr

080037f2 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80037f2:	b480      	push	{r7}
 80037f4:	b087      	sub	sp, #28
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	60f8      	str	r0, [r7, #12]
 80037fa:	60b9      	str	r1, [r7, #8]
 80037fc:	607a      	str	r2, [r7, #4]
 80037fe:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003806:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003808:	7dfb      	ldrb	r3, [r7, #23]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d003      	beq.n	8003816 <HAL_CAN_GetRxMessage+0x24>
 800380e:	7dfb      	ldrb	r3, [r7, #23]
 8003810:	2b02      	cmp	r3, #2
 8003812:	f040 8103 	bne.w	8003a1c <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d10e      	bne.n	800383a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	f003 0303 	and.w	r3, r3, #3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d116      	bne.n	8003858 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800382e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e0f7      	b.n	8003a2a <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	f003 0303 	and.w	r3, r3, #3
 8003844:	2b00      	cmp	r3, #0
 8003846:	d107      	bne.n	8003858 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e0e8      	b.n	8003a2a <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	331b      	adds	r3, #27
 8003860:	011b      	lsls	r3, r3, #4
 8003862:	4413      	add	r3, r2
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0204 	and.w	r2, r3, #4
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d10c      	bne.n	8003890 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	331b      	adds	r3, #27
 800387e:	011b      	lsls	r3, r3, #4
 8003880:	4413      	add	r3, r2
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	0d5b      	lsrs	r3, r3, #21
 8003886:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	601a      	str	r2, [r3, #0]
 800388e:	e00b      	b.n	80038a8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	331b      	adds	r3, #27
 8003898:	011b      	lsls	r3, r3, #4
 800389a:	4413      	add	r3, r2
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	08db      	lsrs	r3, r3, #3
 80038a0:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	331b      	adds	r3, #27
 80038b0:	011b      	lsls	r3, r3, #4
 80038b2:	4413      	add	r3, r2
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0202 	and.w	r2, r3, #2
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	331b      	adds	r3, #27
 80038c6:	011b      	lsls	r3, r3, #4
 80038c8:	4413      	add	r3, r2
 80038ca:	3304      	adds	r3, #4
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0308 	and.w	r3, r3, #8
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d003      	beq.n	80038de <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2208      	movs	r2, #8
 80038da:	611a      	str	r2, [r3, #16]
 80038dc:	e00b      	b.n	80038f6 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	331b      	adds	r3, #27
 80038e6:	011b      	lsls	r3, r3, #4
 80038e8:	4413      	add	r3, r2
 80038ea:	3304      	adds	r3, #4
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 020f 	and.w	r2, r3, #15
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	331b      	adds	r3, #27
 80038fe:	011b      	lsls	r3, r3, #4
 8003900:	4413      	add	r3, r2
 8003902:	3304      	adds	r3, #4
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	0a1b      	lsrs	r3, r3, #8
 8003908:	b2da      	uxtb	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	331b      	adds	r3, #27
 8003916:	011b      	lsls	r3, r3, #4
 8003918:	4413      	add	r3, r2
 800391a:	3304      	adds	r3, #4
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	0c1b      	lsrs	r3, r3, #16
 8003920:	b29a      	uxth	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	011b      	lsls	r3, r3, #4
 800392e:	4413      	add	r3, r2
 8003930:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	b2da      	uxtb	r2, r3
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	011b      	lsls	r3, r3, #4
 8003944:	4413      	add	r3, r2
 8003946:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	0a1a      	lsrs	r2, r3, #8
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	3301      	adds	r3, #1
 8003952:	b2d2      	uxtb	r2, r2
 8003954:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	011b      	lsls	r3, r3, #4
 800395e:	4413      	add	r3, r2
 8003960:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	0c1a      	lsrs	r2, r3, #16
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	3302      	adds	r3, #2
 800396c:	b2d2      	uxtb	r2, r2
 800396e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	011b      	lsls	r3, r3, #4
 8003978:	4413      	add	r3, r2
 800397a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	0e1a      	lsrs	r2, r3, #24
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	3303      	adds	r3, #3
 8003986:	b2d2      	uxtb	r2, r2
 8003988:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	011b      	lsls	r3, r3, #4
 8003992:	4413      	add	r3, r2
 8003994:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	3304      	adds	r3, #4
 800399e:	b2d2      	uxtb	r2, r2
 80039a0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	011b      	lsls	r3, r3, #4
 80039aa:	4413      	add	r3, r2
 80039ac:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	0a1a      	lsrs	r2, r3, #8
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	3305      	adds	r3, #5
 80039b8:	b2d2      	uxtb	r2, r2
 80039ba:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	011b      	lsls	r3, r3, #4
 80039c4:	4413      	add	r3, r2
 80039c6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	0c1a      	lsrs	r2, r3, #16
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	3306      	adds	r3, #6
 80039d2:	b2d2      	uxtb	r2, r2
 80039d4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	011b      	lsls	r3, r3, #4
 80039de:	4413      	add	r3, r2
 80039e0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	0e1a      	lsrs	r2, r3, #24
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	3307      	adds	r3, #7
 80039ec:	b2d2      	uxtb	r2, r2
 80039ee:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d108      	bne.n	8003a08 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68da      	ldr	r2, [r3, #12]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f042 0220 	orr.w	r2, r2, #32
 8003a04:	60da      	str	r2, [r3, #12]
 8003a06:	e007      	b.n	8003a18 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	691a      	ldr	r2, [r3, #16]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f042 0220 	orr.w	r2, r2, #32
 8003a16:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	e006      	b.n	8003a2a <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a20:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
  }
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	371c      	adds	r7, #28
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr

08003a36 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8003a36:	b480      	push	{r7}
 8003a38:	b085      	sub	sp, #20
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
 8003a3e:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8003a40:	2300      	movs	r3, #0
 8003a42:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a4a:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003a4c:	7afb      	ldrb	r3, [r7, #11]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d002      	beq.n	8003a58 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8003a52:	7afb      	ldrb	r3, [r7, #11]
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d10f      	bne.n	8003a78 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d106      	bne.n	8003a6c <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	f003 0303 	and.w	r3, r3, #3
 8003a68:	60fb      	str	r3, [r7, #12]
 8003a6a:	e005      	b.n	8003a78 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	f003 0303 	and.w	r3, r3, #3
 8003a76:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8003a78:	68fb      	ldr	r3, [r7, #12]
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3714      	adds	r7, #20
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr

08003a86 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003a86:	b480      	push	{r7}
 8003a88:	b085      	sub	sp, #20
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
 8003a8e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a96:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003a98:	7bfb      	ldrb	r3, [r7, #15]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d002      	beq.n	8003aa4 <HAL_CAN_ActivateNotification+0x1e>
 8003a9e:	7bfb      	ldrb	r3, [r7, #15]
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d109      	bne.n	8003ab8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	6959      	ldr	r1, [r3, #20]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	683a      	ldr	r2, [r7, #0]
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	e006      	b.n	8003ac6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003abc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
  }
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3714      	adds	r7, #20
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr

08003ad2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b08a      	sub	sp, #40	@ 0x28
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003ada:	2300      	movs	r3, #0
 8003adc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003b0e:	6a3b      	ldr	r3, [r7, #32]
 8003b10:	f003 0301 	and.w	r3, r3, #1
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d07c      	beq.n	8003c12 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d023      	beq.n	8003b6a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2201      	movs	r2, #1
 8003b28:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	f003 0302 	and.w	r3, r3, #2
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d003      	beq.n	8003b3c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 f983 	bl	8003e40 <HAL_CAN_TxMailbox0CompleteCallback>
 8003b3a:	e016      	b.n	8003b6a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	f003 0304 	and.w	r3, r3, #4
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d004      	beq.n	8003b50 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b48:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003b4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b4e:	e00c      	b.n	8003b6a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	f003 0308 	and.w	r3, r3, #8
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d004      	beq.n	8003b64 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b5c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003b60:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b62:	e002      	b.n	8003b6a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 f989 	bl	8003e7c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d024      	beq.n	8003bbe <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b7c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d003      	beq.n	8003b90 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 f963 	bl	8003e54 <HAL_CAN_TxMailbox1CompleteCallback>
 8003b8e:	e016      	b.n	8003bbe <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d004      	beq.n	8003ba4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b9c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003ba0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ba2:	e00c      	b.n	8003bbe <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d004      	beq.n	8003bb8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003bb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bb6:	e002      	b.n	8003bbe <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 f969 	bl	8003e90 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d024      	beq.n	8003c12 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003bd0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d003      	beq.n	8003be4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 f943 	bl	8003e68 <HAL_CAN_TxMailbox2CompleteCallback>
 8003be2:	e016      	b.n	8003c12 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d004      	beq.n	8003bf8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bf4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bf6:	e00c      	b.n	8003c12 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d004      	beq.n	8003c0c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c08:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c0a:	e002      	b.n	8003c12 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 f949 	bl	8003ea4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003c12:	6a3b      	ldr	r3, [r7, #32]
 8003c14:	f003 0308 	and.w	r3, r3, #8
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00c      	beq.n	8003c36 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	f003 0310 	and.w	r3, r3, #16
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d007      	beq.n	8003c36 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c28:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c2c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2210      	movs	r2, #16
 8003c34:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003c36:	6a3b      	ldr	r3, [r7, #32]
 8003c38:	f003 0304 	and.w	r3, r3, #4
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00b      	beq.n	8003c58 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	f003 0308 	and.w	r3, r3, #8
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d006      	beq.n	8003c58 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2208      	movs	r2, #8
 8003c50:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f930 	bl	8003eb8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003c58:	6a3b      	ldr	r3, [r7, #32]
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d009      	beq.n	8003c76 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	f003 0303 	and.w	r3, r3, #3
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d002      	beq.n	8003c76 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f7fe f947 	bl	8001f04 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003c76:	6a3b      	ldr	r3, [r7, #32]
 8003c78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00c      	beq.n	8003c9a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	f003 0310 	and.w	r3, r3, #16
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d007      	beq.n	8003c9a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c8c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003c90:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2210      	movs	r2, #16
 8003c98:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003c9a:	6a3b      	ldr	r3, [r7, #32]
 8003c9c:	f003 0320 	and.w	r3, r3, #32
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00b      	beq.n	8003cbc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	f003 0308 	and.w	r3, r3, #8
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d006      	beq.n	8003cbc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2208      	movs	r2, #8
 8003cb4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 f908 	bl	8003ecc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003cbc:	6a3b      	ldr	r3, [r7, #32]
 8003cbe:	f003 0310 	and.w	r3, r3, #16
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d009      	beq.n	8003cda <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	f003 0303 	and.w	r3, r3, #3
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d002      	beq.n	8003cda <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f7fe f903 	bl	8001ee0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003cda:	6a3b      	ldr	r3, [r7, #32]
 8003cdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00b      	beq.n	8003cfc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	f003 0310 	and.w	r3, r3, #16
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d006      	beq.n	8003cfc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2210      	movs	r2, #16
 8003cf4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f8f2 	bl	8003ee0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003cfc:	6a3b      	ldr	r3, [r7, #32]
 8003cfe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00b      	beq.n	8003d1e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	f003 0308 	and.w	r3, r3, #8
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d006      	beq.n	8003d1e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2208      	movs	r2, #8
 8003d16:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 f8eb 	bl	8003ef4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003d1e:	6a3b      	ldr	r3, [r7, #32]
 8003d20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d07b      	beq.n	8003e20 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	f003 0304 	and.w	r3, r3, #4
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d072      	beq.n	8003e18 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003d32:	6a3b      	ldr	r3, [r7, #32]
 8003d34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d008      	beq.n	8003d4e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d003      	beq.n	8003d4e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d48:	f043 0301 	orr.w	r3, r3, #1
 8003d4c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003d4e:	6a3b      	ldr	r3, [r7, #32]
 8003d50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d008      	beq.n	8003d6a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d003      	beq.n	8003d6a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d64:	f043 0302 	orr.w	r3, r3, #2
 8003d68:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003d6a:	6a3b      	ldr	r3, [r7, #32]
 8003d6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d008      	beq.n	8003d86 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d003      	beq.n	8003d86 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d80:	f043 0304 	orr.w	r3, r3, #4
 8003d84:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003d86:	6a3b      	ldr	r3, [r7, #32]
 8003d88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d043      	beq.n	8003e18 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d03e      	beq.n	8003e18 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003da0:	2b60      	cmp	r3, #96	@ 0x60
 8003da2:	d02b      	beq.n	8003dfc <HAL_CAN_IRQHandler+0x32a>
 8003da4:	2b60      	cmp	r3, #96	@ 0x60
 8003da6:	d82e      	bhi.n	8003e06 <HAL_CAN_IRQHandler+0x334>
 8003da8:	2b50      	cmp	r3, #80	@ 0x50
 8003daa:	d022      	beq.n	8003df2 <HAL_CAN_IRQHandler+0x320>
 8003dac:	2b50      	cmp	r3, #80	@ 0x50
 8003dae:	d82a      	bhi.n	8003e06 <HAL_CAN_IRQHandler+0x334>
 8003db0:	2b40      	cmp	r3, #64	@ 0x40
 8003db2:	d019      	beq.n	8003de8 <HAL_CAN_IRQHandler+0x316>
 8003db4:	2b40      	cmp	r3, #64	@ 0x40
 8003db6:	d826      	bhi.n	8003e06 <HAL_CAN_IRQHandler+0x334>
 8003db8:	2b30      	cmp	r3, #48	@ 0x30
 8003dba:	d010      	beq.n	8003dde <HAL_CAN_IRQHandler+0x30c>
 8003dbc:	2b30      	cmp	r3, #48	@ 0x30
 8003dbe:	d822      	bhi.n	8003e06 <HAL_CAN_IRQHandler+0x334>
 8003dc0:	2b10      	cmp	r3, #16
 8003dc2:	d002      	beq.n	8003dca <HAL_CAN_IRQHandler+0x2f8>
 8003dc4:	2b20      	cmp	r3, #32
 8003dc6:	d005      	beq.n	8003dd4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003dc8:	e01d      	b.n	8003e06 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dcc:	f043 0308 	orr.w	r3, r3, #8
 8003dd0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003dd2:	e019      	b.n	8003e08 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd6:	f043 0310 	orr.w	r3, r3, #16
 8003dda:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003ddc:	e014      	b.n	8003e08 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de0:	f043 0320 	orr.w	r3, r3, #32
 8003de4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003de6:	e00f      	b.n	8003e08 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003dee:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003df0:	e00a      	b.n	8003e08 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003df8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003dfa:	e005      	b.n	8003e08 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e02:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003e04:	e000      	b.n	8003e08 <HAL_CAN_IRQHandler+0x336>
            break;
 8003e06:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	699a      	ldr	r2, [r3, #24]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003e16:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2204      	movs	r2, #4
 8003e1e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d008      	beq.n	8003e38 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e2c:	431a      	orrs	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f868 	bl	8003f08 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003e38:	bf00      	nop
 8003e3a:	3728      	adds	r7, #40	@ 0x28
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003eac:	bf00      	nop
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003ed4:	bf00      	nop
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003efc:	bf00      	nop
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <__NVIC_SetPriorityGrouping>:
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f003 0307 	and.w	r3, r3, #7
 8003f42:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f44:	4b0c      	ldr	r3, [pc, #48]	@ (8003f78 <__NVIC_SetPriorityGrouping+0x44>)
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f4a:	68ba      	ldr	r2, [r7, #8]
 8003f4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003f50:	4013      	ands	r3, r2
 8003f52:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003f60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f66:	4a04      	ldr	r2, [pc, #16]	@ (8003f78 <__NVIC_SetPriorityGrouping+0x44>)
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	60d3      	str	r3, [r2, #12]
}
 8003f6c:	bf00      	nop
 8003f6e:	3714      	adds	r7, #20
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr
 8003f78:	e000ed00 	.word	0xe000ed00

08003f7c <__NVIC_GetPriorityGrouping>:
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f80:	4b04      	ldr	r3, [pc, #16]	@ (8003f94 <__NVIC_GetPriorityGrouping+0x18>)
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	0a1b      	lsrs	r3, r3, #8
 8003f86:	f003 0307 	and.w	r3, r3, #7
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr
 8003f94:	e000ed00 	.word	0xe000ed00

08003f98 <__NVIC_EnableIRQ>:
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	db0b      	blt.n	8003fc2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003faa:	79fb      	ldrb	r3, [r7, #7]
 8003fac:	f003 021f 	and.w	r2, r3, #31
 8003fb0:	4907      	ldr	r1, [pc, #28]	@ (8003fd0 <__NVIC_EnableIRQ+0x38>)
 8003fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fb6:	095b      	lsrs	r3, r3, #5
 8003fb8:	2001      	movs	r0, #1
 8003fba:	fa00 f202 	lsl.w	r2, r0, r2
 8003fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003fc2:	bf00      	nop
 8003fc4:	370c      	adds	r7, #12
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	e000e100 	.word	0xe000e100

08003fd4 <__NVIC_SetPriority>:
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	4603      	mov	r3, r0
 8003fdc:	6039      	str	r1, [r7, #0]
 8003fde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	db0a      	blt.n	8003ffe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	b2da      	uxtb	r2, r3
 8003fec:	490c      	ldr	r1, [pc, #48]	@ (8004020 <__NVIC_SetPriority+0x4c>)
 8003fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ff2:	0112      	lsls	r2, r2, #4
 8003ff4:	b2d2      	uxtb	r2, r2
 8003ff6:	440b      	add	r3, r1
 8003ff8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003ffc:	e00a      	b.n	8004014 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	b2da      	uxtb	r2, r3
 8004002:	4908      	ldr	r1, [pc, #32]	@ (8004024 <__NVIC_SetPriority+0x50>)
 8004004:	79fb      	ldrb	r3, [r7, #7]
 8004006:	f003 030f 	and.w	r3, r3, #15
 800400a:	3b04      	subs	r3, #4
 800400c:	0112      	lsls	r2, r2, #4
 800400e:	b2d2      	uxtb	r2, r2
 8004010:	440b      	add	r3, r1
 8004012:	761a      	strb	r2, [r3, #24]
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr
 8004020:	e000e100 	.word	0xe000e100
 8004024:	e000ed00 	.word	0xe000ed00

08004028 <NVIC_EncodePriority>:
{
 8004028:	b480      	push	{r7}
 800402a:	b089      	sub	sp, #36	@ 0x24
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f003 0307 	and.w	r3, r3, #7
 800403a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	f1c3 0307 	rsb	r3, r3, #7
 8004042:	2b04      	cmp	r3, #4
 8004044:	bf28      	it	cs
 8004046:	2304      	movcs	r3, #4
 8004048:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	3304      	adds	r3, #4
 800404e:	2b06      	cmp	r3, #6
 8004050:	d902      	bls.n	8004058 <NVIC_EncodePriority+0x30>
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	3b03      	subs	r3, #3
 8004056:	e000      	b.n	800405a <NVIC_EncodePriority+0x32>
 8004058:	2300      	movs	r3, #0
 800405a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800405c:	f04f 32ff 	mov.w	r2, #4294967295
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	fa02 f303 	lsl.w	r3, r2, r3
 8004066:	43da      	mvns	r2, r3
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	401a      	ands	r2, r3
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004070:	f04f 31ff 	mov.w	r1, #4294967295
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	fa01 f303 	lsl.w	r3, r1, r3
 800407a:	43d9      	mvns	r1, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004080:	4313      	orrs	r3, r2
}
 8004082:	4618      	mov	r0, r3
 8004084:	3724      	adds	r7, #36	@ 0x24
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr

0800408e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800408e:	b580      	push	{r7, lr}
 8004090:	b082      	sub	sp, #8
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f7ff ff4c 	bl	8003f34 <__NVIC_SetPriorityGrouping>
}
 800409c:	bf00      	nop
 800409e:	3708      	adds	r7, #8
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	4603      	mov	r3, r0
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
 80040b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80040b2:	2300      	movs	r3, #0
 80040b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80040b6:	f7ff ff61 	bl	8003f7c <__NVIC_GetPriorityGrouping>
 80040ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	68b9      	ldr	r1, [r7, #8]
 80040c0:	6978      	ldr	r0, [r7, #20]
 80040c2:	f7ff ffb1 	bl	8004028 <NVIC_EncodePriority>
 80040c6:	4602      	mov	r2, r0
 80040c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040cc:	4611      	mov	r1, r2
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7ff ff80 	bl	8003fd4 <__NVIC_SetPriority>
}
 80040d4:	bf00      	nop
 80040d6:	3718      	adds	r7, #24
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	4603      	mov	r3, r0
 80040e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7ff ff54 	bl	8003f98 <__NVIC_EnableIRQ>
}
 80040f0:	bf00      	nop
 80040f2:	3708      	adds	r7, #8
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b086      	sub	sp, #24
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004100:	2300      	movs	r3, #0
 8004102:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004104:	f7fe fbf4 	bl	80028f0 <HAL_GetTick>
 8004108:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d101      	bne.n	8004114 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e099      	b.n	8004248 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2202      	movs	r2, #2
 8004118:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f022 0201 	bic.w	r2, r2, #1
 8004132:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004134:	e00f      	b.n	8004156 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004136:	f7fe fbdb 	bl	80028f0 <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	2b05      	cmp	r3, #5
 8004142:	d908      	bls.n	8004156 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2220      	movs	r2, #32
 8004148:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2203      	movs	r2, #3
 800414e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e078      	b.n	8004248 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1e8      	bne.n	8004136 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800416c:	697a      	ldr	r2, [r7, #20]
 800416e:	4b38      	ldr	r3, [pc, #224]	@ (8004250 <HAL_DMA_Init+0x158>)
 8004170:	4013      	ands	r3, r2
 8004172:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685a      	ldr	r2, [r3, #4]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004182:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800418e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800419a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a1b      	ldr	r3, [r3, #32]
 80041a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ac:	2b04      	cmp	r3, #4
 80041ae:	d107      	bne.n	80041c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041b8:	4313      	orrs	r3, r2
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	4313      	orrs	r3, r2
 80041be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	f023 0307 	bic.w	r3, r3, #7
 80041d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	4313      	orrs	r3, r2
 80041e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e6:	2b04      	cmp	r3, #4
 80041e8:	d117      	bne.n	800421a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ee:	697a      	ldr	r2, [r7, #20]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00e      	beq.n	800421a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f000 fa6f 	bl	80046e0 <DMA_CheckFifoParam>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d008      	beq.n	800421a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2240      	movs	r2, #64	@ 0x40
 800420c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004216:	2301      	movs	r3, #1
 8004218:	e016      	b.n	8004248 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 fa26 	bl	8004674 <DMA_CalcBaseAndBitshift>
 8004228:	4603      	mov	r3, r0
 800422a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004230:	223f      	movs	r2, #63	@ 0x3f
 8004232:	409a      	lsls	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2201      	movs	r2, #1
 8004242:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	3718      	adds	r7, #24
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	f010803f 	.word	0xf010803f

08004254 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b086      	sub	sp, #24
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]
 8004260:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004262:	2300      	movs	r3, #0
 8004264:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800426a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004272:	2b01      	cmp	r3, #1
 8004274:	d101      	bne.n	800427a <HAL_DMA_Start_IT+0x26>
 8004276:	2302      	movs	r3, #2
 8004278:	e040      	b.n	80042fc <HAL_DMA_Start_IT+0xa8>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2201      	movs	r2, #1
 800427e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b01      	cmp	r3, #1
 800428c:	d12f      	bne.n	80042ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2202      	movs	r2, #2
 8004292:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2200      	movs	r2, #0
 800429a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	68b9      	ldr	r1, [r7, #8]
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f000 f9b8 	bl	8004618 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042ac:	223f      	movs	r2, #63	@ 0x3f
 80042ae:	409a      	lsls	r2, r3
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f042 0216 	orr.w	r2, r2, #22
 80042c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d007      	beq.n	80042dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f042 0208 	orr.w	r2, r2, #8
 80042da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f042 0201 	orr.w	r2, r2, #1
 80042ea:	601a      	str	r2, [r3, #0]
 80042ec:	e005      	b.n	80042fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80042f6:	2302      	movs	r3, #2
 80042f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80042fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3718      	adds	r7, #24
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b086      	sub	sp, #24
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800430c:	2300      	movs	r3, #0
 800430e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004310:	4b8e      	ldr	r3, [pc, #568]	@ (800454c <HAL_DMA_IRQHandler+0x248>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a8e      	ldr	r2, [pc, #568]	@ (8004550 <HAL_DMA_IRQHandler+0x24c>)
 8004316:	fba2 2303 	umull	r2, r3, r2, r3
 800431a:	0a9b      	lsrs	r3, r3, #10
 800431c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004322:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800432e:	2208      	movs	r2, #8
 8004330:	409a      	lsls	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	4013      	ands	r3, r2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d01a      	beq.n	8004370 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0304 	and.w	r3, r3, #4
 8004344:	2b00      	cmp	r3, #0
 8004346:	d013      	beq.n	8004370 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f022 0204 	bic.w	r2, r2, #4
 8004356:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800435c:	2208      	movs	r2, #8
 800435e:	409a      	lsls	r2, r3
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004368:	f043 0201 	orr.w	r2, r3, #1
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004374:	2201      	movs	r2, #1
 8004376:	409a      	lsls	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	4013      	ands	r3, r2
 800437c:	2b00      	cmp	r3, #0
 800437e:	d012      	beq.n	80043a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00b      	beq.n	80043a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004392:	2201      	movs	r2, #1
 8004394:	409a      	lsls	r2, r3
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800439e:	f043 0202 	orr.w	r2, r3, #2
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043aa:	2204      	movs	r2, #4
 80043ac:	409a      	lsls	r2, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	4013      	ands	r3, r2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d012      	beq.n	80043dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0302 	and.w	r3, r3, #2
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d00b      	beq.n	80043dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043c8:	2204      	movs	r2, #4
 80043ca:	409a      	lsls	r2, r3
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043d4:	f043 0204 	orr.w	r2, r3, #4
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043e0:	2210      	movs	r2, #16
 80043e2:	409a      	lsls	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	4013      	ands	r3, r2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d043      	beq.n	8004474 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0308 	and.w	r3, r3, #8
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d03c      	beq.n	8004474 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043fe:	2210      	movs	r2, #16
 8004400:	409a      	lsls	r2, r3
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d018      	beq.n	8004446 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d108      	bne.n	8004434 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004426:	2b00      	cmp	r3, #0
 8004428:	d024      	beq.n	8004474 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	4798      	blx	r3
 8004432:	e01f      	b.n	8004474 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004438:	2b00      	cmp	r3, #0
 800443a:	d01b      	beq.n	8004474 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	4798      	blx	r3
 8004444:	e016      	b.n	8004474 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004450:	2b00      	cmp	r3, #0
 8004452:	d107      	bne.n	8004464 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f022 0208 	bic.w	r2, r2, #8
 8004462:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004468:	2b00      	cmp	r3, #0
 800446a:	d003      	beq.n	8004474 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004478:	2220      	movs	r2, #32
 800447a:	409a      	lsls	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	4013      	ands	r3, r2
 8004480:	2b00      	cmp	r3, #0
 8004482:	f000 808f 	beq.w	80045a4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0310 	and.w	r3, r3, #16
 8004490:	2b00      	cmp	r3, #0
 8004492:	f000 8087 	beq.w	80045a4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800449a:	2220      	movs	r2, #32
 800449c:	409a      	lsls	r2, r3
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	2b05      	cmp	r3, #5
 80044ac:	d136      	bne.n	800451c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f022 0216 	bic.w	r2, r2, #22
 80044bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	695a      	ldr	r2, [r3, #20]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80044cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d103      	bne.n	80044de <HAL_DMA_IRQHandler+0x1da>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d007      	beq.n	80044ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f022 0208 	bic.w	r2, r2, #8
 80044ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044f2:	223f      	movs	r2, #63	@ 0x3f
 80044f4:	409a      	lsls	r2, r3
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2201      	movs	r2, #1
 80044fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800450e:	2b00      	cmp	r3, #0
 8004510:	d07e      	beq.n	8004610 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	4798      	blx	r3
        }
        return;
 800451a:	e079      	b.n	8004610 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d01d      	beq.n	8004566 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d10d      	bne.n	8004554 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800453c:	2b00      	cmp	r3, #0
 800453e:	d031      	beq.n	80045a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	4798      	blx	r3
 8004548:	e02c      	b.n	80045a4 <HAL_DMA_IRQHandler+0x2a0>
 800454a:	bf00      	nop
 800454c:	20000004 	.word	0x20000004
 8004550:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004558:	2b00      	cmp	r3, #0
 800455a:	d023      	beq.n	80045a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	4798      	blx	r3
 8004564:	e01e      	b.n	80045a4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004570:	2b00      	cmp	r3, #0
 8004572:	d10f      	bne.n	8004594 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f022 0210 	bic.w	r2, r2, #16
 8004582:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004598:	2b00      	cmp	r3, #0
 800459a:	d003      	beq.n	80045a4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d032      	beq.n	8004612 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d022      	beq.n	80045fe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2205      	movs	r2, #5
 80045bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f022 0201 	bic.w	r2, r2, #1
 80045ce:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	3301      	adds	r3, #1
 80045d4:	60bb      	str	r3, [r7, #8]
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d307      	bcc.n	80045ec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0301 	and.w	r3, r3, #1
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1f2      	bne.n	80045d0 <HAL_DMA_IRQHandler+0x2cc>
 80045ea:	e000      	b.n	80045ee <HAL_DMA_IRQHandler+0x2ea>
          break;
 80045ec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2201      	movs	r2, #1
 80045f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004602:	2b00      	cmp	r3, #0
 8004604:	d005      	beq.n	8004612 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	4798      	blx	r3
 800460e:	e000      	b.n	8004612 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004610:	bf00      	nop
    }
  }
}
 8004612:	3718      	adds	r7, #24
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004618:	b480      	push	{r7}
 800461a:	b085      	sub	sp, #20
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	607a      	str	r2, [r7, #4]
 8004624:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004634:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	683a      	ldr	r2, [r7, #0]
 800463c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	2b40      	cmp	r3, #64	@ 0x40
 8004644:	d108      	bne.n	8004658 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68ba      	ldr	r2, [r7, #8]
 8004654:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004656:	e007      	b.n	8004668 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	60da      	str	r2, [r3, #12]
}
 8004668:	bf00      	nop
 800466a:	3714      	adds	r7, #20
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004674:	b480      	push	{r7}
 8004676:	b085      	sub	sp, #20
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	b2db      	uxtb	r3, r3
 8004682:	3b10      	subs	r3, #16
 8004684:	4a14      	ldr	r2, [pc, #80]	@ (80046d8 <DMA_CalcBaseAndBitshift+0x64>)
 8004686:	fba2 2303 	umull	r2, r3, r2, r3
 800468a:	091b      	lsrs	r3, r3, #4
 800468c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800468e:	4a13      	ldr	r2, [pc, #76]	@ (80046dc <DMA_CalcBaseAndBitshift+0x68>)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	4413      	add	r3, r2
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	461a      	mov	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2b03      	cmp	r3, #3
 80046a0:	d909      	bls.n	80046b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80046aa:	f023 0303 	bic.w	r3, r3, #3
 80046ae:	1d1a      	adds	r2, r3, #4
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	659a      	str	r2, [r3, #88]	@ 0x58
 80046b4:	e007      	b.n	80046c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80046be:	f023 0303 	bic.w	r3, r3, #3
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3714      	adds	r7, #20
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	aaaaaaab 	.word	0xaaaaaaab
 80046dc:	08010404 	.word	0x08010404

080046e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046e8:	2300      	movs	r3, #0
 80046ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	699b      	ldr	r3, [r3, #24]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d11f      	bne.n	800473a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	2b03      	cmp	r3, #3
 80046fe:	d856      	bhi.n	80047ae <DMA_CheckFifoParam+0xce>
 8004700:	a201      	add	r2, pc, #4	@ (adr r2, 8004708 <DMA_CheckFifoParam+0x28>)
 8004702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004706:	bf00      	nop
 8004708:	08004719 	.word	0x08004719
 800470c:	0800472b 	.word	0x0800472b
 8004710:	08004719 	.word	0x08004719
 8004714:	080047af 	.word	0x080047af
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800471c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d046      	beq.n	80047b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004728:	e043      	b.n	80047b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800472e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004732:	d140      	bne.n	80047b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004738:	e03d      	b.n	80047b6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004742:	d121      	bne.n	8004788 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	2b03      	cmp	r3, #3
 8004748:	d837      	bhi.n	80047ba <DMA_CheckFifoParam+0xda>
 800474a:	a201      	add	r2, pc, #4	@ (adr r2, 8004750 <DMA_CheckFifoParam+0x70>)
 800474c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004750:	08004761 	.word	0x08004761
 8004754:	08004767 	.word	0x08004767
 8004758:	08004761 	.word	0x08004761
 800475c:	08004779 	.word	0x08004779
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	73fb      	strb	r3, [r7, #15]
      break;
 8004764:	e030      	b.n	80047c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800476a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d025      	beq.n	80047be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004776:	e022      	b.n	80047be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800477c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004780:	d11f      	bne.n	80047c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004786:	e01c      	b.n	80047c2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	2b02      	cmp	r3, #2
 800478c:	d903      	bls.n	8004796 <DMA_CheckFifoParam+0xb6>
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	2b03      	cmp	r3, #3
 8004792:	d003      	beq.n	800479c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004794:	e018      	b.n	80047c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	73fb      	strb	r3, [r7, #15]
      break;
 800479a:	e015      	b.n	80047c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00e      	beq.n	80047c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	73fb      	strb	r3, [r7, #15]
      break;
 80047ac:	e00b      	b.n	80047c6 <DMA_CheckFifoParam+0xe6>
      break;
 80047ae:	bf00      	nop
 80047b0:	e00a      	b.n	80047c8 <DMA_CheckFifoParam+0xe8>
      break;
 80047b2:	bf00      	nop
 80047b4:	e008      	b.n	80047c8 <DMA_CheckFifoParam+0xe8>
      break;
 80047b6:	bf00      	nop
 80047b8:	e006      	b.n	80047c8 <DMA_CheckFifoParam+0xe8>
      break;
 80047ba:	bf00      	nop
 80047bc:	e004      	b.n	80047c8 <DMA_CheckFifoParam+0xe8>
      break;
 80047be:	bf00      	nop
 80047c0:	e002      	b.n	80047c8 <DMA_CheckFifoParam+0xe8>
      break;   
 80047c2:	bf00      	nop
 80047c4:	e000      	b.n	80047c8 <DMA_CheckFifoParam+0xe8>
      break;
 80047c6:	bf00      	nop
    }
  } 
  
  return status; 
 80047c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3714      	adds	r7, #20
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop

080047d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047d8:	b480      	push	{r7}
 80047da:	b089      	sub	sp, #36	@ 0x24
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80047e2:	2300      	movs	r3, #0
 80047e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80047e6:	2300      	movs	r3, #0
 80047e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80047ea:	2300      	movs	r3, #0
 80047ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047ee:	2300      	movs	r3, #0
 80047f0:	61fb      	str	r3, [r7, #28]
 80047f2:	e165      	b.n	8004ac0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80047f4:	2201      	movs	r2, #1
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	fa02 f303 	lsl.w	r3, r2, r3
 80047fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	697a      	ldr	r2, [r7, #20]
 8004804:	4013      	ands	r3, r2
 8004806:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004808:	693a      	ldr	r2, [r7, #16]
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	429a      	cmp	r2, r3
 800480e:	f040 8154 	bne.w	8004aba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f003 0303 	and.w	r3, r3, #3
 800481a:	2b01      	cmp	r3, #1
 800481c:	d005      	beq.n	800482a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004826:	2b02      	cmp	r3, #2
 8004828:	d130      	bne.n	800488c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	005b      	lsls	r3, r3, #1
 8004834:	2203      	movs	r2, #3
 8004836:	fa02 f303 	lsl.w	r3, r2, r3
 800483a:	43db      	mvns	r3, r3
 800483c:	69ba      	ldr	r2, [r7, #24]
 800483e:	4013      	ands	r3, r2
 8004840:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	68da      	ldr	r2, [r3, #12]
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	005b      	lsls	r3, r3, #1
 800484a:	fa02 f303 	lsl.w	r3, r2, r3
 800484e:	69ba      	ldr	r2, [r7, #24]
 8004850:	4313      	orrs	r3, r2
 8004852:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	69ba      	ldr	r2, [r7, #24]
 8004858:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004860:	2201      	movs	r2, #1
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	fa02 f303 	lsl.w	r3, r2, r3
 8004868:	43db      	mvns	r3, r3
 800486a:	69ba      	ldr	r2, [r7, #24]
 800486c:	4013      	ands	r3, r2
 800486e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	091b      	lsrs	r3, r3, #4
 8004876:	f003 0201 	and.w	r2, r3, #1
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	fa02 f303 	lsl.w	r3, r2, r3
 8004880:	69ba      	ldr	r2, [r7, #24]
 8004882:	4313      	orrs	r3, r2
 8004884:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	69ba      	ldr	r2, [r7, #24]
 800488a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f003 0303 	and.w	r3, r3, #3
 8004894:	2b03      	cmp	r3, #3
 8004896:	d017      	beq.n	80048c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	005b      	lsls	r3, r3, #1
 80048a2:	2203      	movs	r2, #3
 80048a4:	fa02 f303 	lsl.w	r3, r2, r3
 80048a8:	43db      	mvns	r3, r3
 80048aa:	69ba      	ldr	r2, [r7, #24]
 80048ac:	4013      	ands	r3, r2
 80048ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	689a      	ldr	r2, [r3, #8]
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	005b      	lsls	r3, r3, #1
 80048b8:	fa02 f303 	lsl.w	r3, r2, r3
 80048bc:	69ba      	ldr	r2, [r7, #24]
 80048be:	4313      	orrs	r3, r2
 80048c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f003 0303 	and.w	r3, r3, #3
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d123      	bne.n	800491c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	08da      	lsrs	r2, r3, #3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	3208      	adds	r2, #8
 80048dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	f003 0307 	and.w	r3, r3, #7
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	220f      	movs	r2, #15
 80048ec:	fa02 f303 	lsl.w	r3, r2, r3
 80048f0:	43db      	mvns	r3, r3
 80048f2:	69ba      	ldr	r2, [r7, #24]
 80048f4:	4013      	ands	r3, r2
 80048f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	691a      	ldr	r2, [r3, #16]
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	f003 0307 	and.w	r3, r3, #7
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	fa02 f303 	lsl.w	r3, r2, r3
 8004908:	69ba      	ldr	r2, [r7, #24]
 800490a:	4313      	orrs	r3, r2
 800490c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	08da      	lsrs	r2, r3, #3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	3208      	adds	r2, #8
 8004916:	69b9      	ldr	r1, [r7, #24]
 8004918:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	005b      	lsls	r3, r3, #1
 8004926:	2203      	movs	r2, #3
 8004928:	fa02 f303 	lsl.w	r3, r2, r3
 800492c:	43db      	mvns	r3, r3
 800492e:	69ba      	ldr	r2, [r7, #24]
 8004930:	4013      	ands	r3, r2
 8004932:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f003 0203 	and.w	r2, r3, #3
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	005b      	lsls	r3, r3, #1
 8004940:	fa02 f303 	lsl.w	r3, r2, r3
 8004944:	69ba      	ldr	r2, [r7, #24]
 8004946:	4313      	orrs	r3, r2
 8004948:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	69ba      	ldr	r2, [r7, #24]
 800494e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004958:	2b00      	cmp	r3, #0
 800495a:	f000 80ae 	beq.w	8004aba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800495e:	2300      	movs	r3, #0
 8004960:	60fb      	str	r3, [r7, #12]
 8004962:	4b5d      	ldr	r3, [pc, #372]	@ (8004ad8 <HAL_GPIO_Init+0x300>)
 8004964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004966:	4a5c      	ldr	r2, [pc, #368]	@ (8004ad8 <HAL_GPIO_Init+0x300>)
 8004968:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800496c:	6453      	str	r3, [r2, #68]	@ 0x44
 800496e:	4b5a      	ldr	r3, [pc, #360]	@ (8004ad8 <HAL_GPIO_Init+0x300>)
 8004970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004972:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004976:	60fb      	str	r3, [r7, #12]
 8004978:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800497a:	4a58      	ldr	r2, [pc, #352]	@ (8004adc <HAL_GPIO_Init+0x304>)
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	089b      	lsrs	r3, r3, #2
 8004980:	3302      	adds	r3, #2
 8004982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004986:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	f003 0303 	and.w	r3, r3, #3
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	220f      	movs	r2, #15
 8004992:	fa02 f303 	lsl.w	r3, r2, r3
 8004996:	43db      	mvns	r3, r3
 8004998:	69ba      	ldr	r2, [r7, #24]
 800499a:	4013      	ands	r3, r2
 800499c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a4f      	ldr	r2, [pc, #316]	@ (8004ae0 <HAL_GPIO_Init+0x308>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d025      	beq.n	80049f2 <HAL_GPIO_Init+0x21a>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a4e      	ldr	r2, [pc, #312]	@ (8004ae4 <HAL_GPIO_Init+0x30c>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d01f      	beq.n	80049ee <HAL_GPIO_Init+0x216>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a4d      	ldr	r2, [pc, #308]	@ (8004ae8 <HAL_GPIO_Init+0x310>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d019      	beq.n	80049ea <HAL_GPIO_Init+0x212>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a4c      	ldr	r2, [pc, #304]	@ (8004aec <HAL_GPIO_Init+0x314>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d013      	beq.n	80049e6 <HAL_GPIO_Init+0x20e>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a4b      	ldr	r2, [pc, #300]	@ (8004af0 <HAL_GPIO_Init+0x318>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d00d      	beq.n	80049e2 <HAL_GPIO_Init+0x20a>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a4a      	ldr	r2, [pc, #296]	@ (8004af4 <HAL_GPIO_Init+0x31c>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d007      	beq.n	80049de <HAL_GPIO_Init+0x206>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a49      	ldr	r2, [pc, #292]	@ (8004af8 <HAL_GPIO_Init+0x320>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d101      	bne.n	80049da <HAL_GPIO_Init+0x202>
 80049d6:	2306      	movs	r3, #6
 80049d8:	e00c      	b.n	80049f4 <HAL_GPIO_Init+0x21c>
 80049da:	2307      	movs	r3, #7
 80049dc:	e00a      	b.n	80049f4 <HAL_GPIO_Init+0x21c>
 80049de:	2305      	movs	r3, #5
 80049e0:	e008      	b.n	80049f4 <HAL_GPIO_Init+0x21c>
 80049e2:	2304      	movs	r3, #4
 80049e4:	e006      	b.n	80049f4 <HAL_GPIO_Init+0x21c>
 80049e6:	2303      	movs	r3, #3
 80049e8:	e004      	b.n	80049f4 <HAL_GPIO_Init+0x21c>
 80049ea:	2302      	movs	r3, #2
 80049ec:	e002      	b.n	80049f4 <HAL_GPIO_Init+0x21c>
 80049ee:	2301      	movs	r3, #1
 80049f0:	e000      	b.n	80049f4 <HAL_GPIO_Init+0x21c>
 80049f2:	2300      	movs	r3, #0
 80049f4:	69fa      	ldr	r2, [r7, #28]
 80049f6:	f002 0203 	and.w	r2, r2, #3
 80049fa:	0092      	lsls	r2, r2, #2
 80049fc:	4093      	lsls	r3, r2
 80049fe:	69ba      	ldr	r2, [r7, #24]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a04:	4935      	ldr	r1, [pc, #212]	@ (8004adc <HAL_GPIO_Init+0x304>)
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	089b      	lsrs	r3, r3, #2
 8004a0a:	3302      	adds	r3, #2
 8004a0c:	69ba      	ldr	r2, [r7, #24]
 8004a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a12:	4b3a      	ldr	r3, [pc, #232]	@ (8004afc <HAL_GPIO_Init+0x324>)
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	43db      	mvns	r3, r3
 8004a1c:	69ba      	ldr	r2, [r7, #24]
 8004a1e:	4013      	ands	r3, r2
 8004a20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d003      	beq.n	8004a36 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004a2e:	69ba      	ldr	r2, [r7, #24]
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a36:	4a31      	ldr	r2, [pc, #196]	@ (8004afc <HAL_GPIO_Init+0x324>)
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a3c:	4b2f      	ldr	r3, [pc, #188]	@ (8004afc <HAL_GPIO_Init+0x324>)
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	43db      	mvns	r3, r3
 8004a46:	69ba      	ldr	r2, [r7, #24]
 8004a48:	4013      	ands	r3, r2
 8004a4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d003      	beq.n	8004a60 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004a58:	69ba      	ldr	r2, [r7, #24]
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a60:	4a26      	ldr	r2, [pc, #152]	@ (8004afc <HAL_GPIO_Init+0x324>)
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004a66:	4b25      	ldr	r3, [pc, #148]	@ (8004afc <HAL_GPIO_Init+0x324>)
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	43db      	mvns	r3, r3
 8004a70:	69ba      	ldr	r2, [r7, #24]
 8004a72:	4013      	ands	r3, r2
 8004a74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d003      	beq.n	8004a8a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004a82:	69ba      	ldr	r2, [r7, #24]
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a8a:	4a1c      	ldr	r2, [pc, #112]	@ (8004afc <HAL_GPIO_Init+0x324>)
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a90:	4b1a      	ldr	r3, [pc, #104]	@ (8004afc <HAL_GPIO_Init+0x324>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	43db      	mvns	r3, r3
 8004a9a:	69ba      	ldr	r2, [r7, #24]
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d003      	beq.n	8004ab4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004aac:	69ba      	ldr	r2, [r7, #24]
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004ab4:	4a11      	ldr	r2, [pc, #68]	@ (8004afc <HAL_GPIO_Init+0x324>)
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	3301      	adds	r3, #1
 8004abe:	61fb      	str	r3, [r7, #28]
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	2b0f      	cmp	r3, #15
 8004ac4:	f67f ae96 	bls.w	80047f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004ac8:	bf00      	nop
 8004aca:	bf00      	nop
 8004acc:	3724      	adds	r7, #36	@ 0x24
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	40023800 	.word	0x40023800
 8004adc:	40013800 	.word	0x40013800
 8004ae0:	40020000 	.word	0x40020000
 8004ae4:	40020400 	.word	0x40020400
 8004ae8:	40020800 	.word	0x40020800
 8004aec:	40020c00 	.word	0x40020c00
 8004af0:	40021000 	.word	0x40021000
 8004af4:	40021400 	.word	0x40021400
 8004af8:	40021800 	.word	0x40021800
 8004afc:	40013c00 	.word	0x40013c00

08004b00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	460b      	mov	r3, r1
 8004b0a:	807b      	strh	r3, [r7, #2]
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b10:	787b      	ldrb	r3, [r7, #1]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d003      	beq.n	8004b1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b16:	887a      	ldrh	r2, [r7, #2]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004b1c:	e003      	b.n	8004b26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b1e:	887b      	ldrh	r3, [r7, #2]
 8004b20:	041a      	lsls	r2, r3, #16
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	619a      	str	r2, [r3, #24]
}
 8004b26:	bf00      	nop
 8004b28:	370c      	adds	r7, #12
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr

08004b32 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b086      	sub	sp, #24
 8004b36:	af02      	add	r7, sp, #8
 8004b38:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d101      	bne.n	8004b44 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e108      	b.n	8004d56 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d106      	bne.n	8004b64 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f7fd fdfc 	bl	800275c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2203      	movs	r2, #3
 8004b68:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b72:	d102      	bne.n	8004b7a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f003 fe2f 	bl	80087e2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6818      	ldr	r0, [r3, #0]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	7c1a      	ldrb	r2, [r3, #16]
 8004b8c:	f88d 2000 	strb.w	r2, [sp]
 8004b90:	3304      	adds	r3, #4
 8004b92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b94:	f003 fd0e 	bl	80085b4 <USB_CoreInit>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d005      	beq.n	8004baa <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2202      	movs	r2, #2
 8004ba2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e0d5      	b.n	8004d56 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2100      	movs	r1, #0
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f003 fe27 	bl	8008804 <USB_SetCurrentMode>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d005      	beq.n	8004bc8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2202      	movs	r2, #2
 8004bc0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e0c6      	b.n	8004d56 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bc8:	2300      	movs	r3, #0
 8004bca:	73fb      	strb	r3, [r7, #15]
 8004bcc:	e04a      	b.n	8004c64 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004bce:	7bfa      	ldrb	r2, [r7, #15]
 8004bd0:	6879      	ldr	r1, [r7, #4]
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	00db      	lsls	r3, r3, #3
 8004bd6:	4413      	add	r3, r2
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	440b      	add	r3, r1
 8004bdc:	3315      	adds	r3, #21
 8004bde:	2201      	movs	r2, #1
 8004be0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004be2:	7bfa      	ldrb	r2, [r7, #15]
 8004be4:	6879      	ldr	r1, [r7, #4]
 8004be6:	4613      	mov	r3, r2
 8004be8:	00db      	lsls	r3, r3, #3
 8004bea:	4413      	add	r3, r2
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	440b      	add	r3, r1
 8004bf0:	3314      	adds	r3, #20
 8004bf2:	7bfa      	ldrb	r2, [r7, #15]
 8004bf4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004bf6:	7bfa      	ldrb	r2, [r7, #15]
 8004bf8:	7bfb      	ldrb	r3, [r7, #15]
 8004bfa:	b298      	uxth	r0, r3
 8004bfc:	6879      	ldr	r1, [r7, #4]
 8004bfe:	4613      	mov	r3, r2
 8004c00:	00db      	lsls	r3, r3, #3
 8004c02:	4413      	add	r3, r2
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	440b      	add	r3, r1
 8004c08:	332e      	adds	r3, #46	@ 0x2e
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004c0e:	7bfa      	ldrb	r2, [r7, #15]
 8004c10:	6879      	ldr	r1, [r7, #4]
 8004c12:	4613      	mov	r3, r2
 8004c14:	00db      	lsls	r3, r3, #3
 8004c16:	4413      	add	r3, r2
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	440b      	add	r3, r1
 8004c1c:	3318      	adds	r3, #24
 8004c1e:	2200      	movs	r2, #0
 8004c20:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004c22:	7bfa      	ldrb	r2, [r7, #15]
 8004c24:	6879      	ldr	r1, [r7, #4]
 8004c26:	4613      	mov	r3, r2
 8004c28:	00db      	lsls	r3, r3, #3
 8004c2a:	4413      	add	r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	440b      	add	r3, r1
 8004c30:	331c      	adds	r3, #28
 8004c32:	2200      	movs	r2, #0
 8004c34:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004c36:	7bfa      	ldrb	r2, [r7, #15]
 8004c38:	6879      	ldr	r1, [r7, #4]
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	00db      	lsls	r3, r3, #3
 8004c3e:	4413      	add	r3, r2
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	440b      	add	r3, r1
 8004c44:	3320      	adds	r3, #32
 8004c46:	2200      	movs	r2, #0
 8004c48:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004c4a:	7bfa      	ldrb	r2, [r7, #15]
 8004c4c:	6879      	ldr	r1, [r7, #4]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	00db      	lsls	r3, r3, #3
 8004c52:	4413      	add	r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	440b      	add	r3, r1
 8004c58:	3324      	adds	r3, #36	@ 0x24
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c5e:	7bfb      	ldrb	r3, [r7, #15]
 8004c60:	3301      	adds	r3, #1
 8004c62:	73fb      	strb	r3, [r7, #15]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	791b      	ldrb	r3, [r3, #4]
 8004c68:	7bfa      	ldrb	r2, [r7, #15]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d3af      	bcc.n	8004bce <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c6e:	2300      	movs	r3, #0
 8004c70:	73fb      	strb	r3, [r7, #15]
 8004c72:	e044      	b.n	8004cfe <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004c74:	7bfa      	ldrb	r2, [r7, #15]
 8004c76:	6879      	ldr	r1, [r7, #4]
 8004c78:	4613      	mov	r3, r2
 8004c7a:	00db      	lsls	r3, r3, #3
 8004c7c:	4413      	add	r3, r2
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	440b      	add	r3, r1
 8004c82:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004c86:	2200      	movs	r2, #0
 8004c88:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004c8a:	7bfa      	ldrb	r2, [r7, #15]
 8004c8c:	6879      	ldr	r1, [r7, #4]
 8004c8e:	4613      	mov	r3, r2
 8004c90:	00db      	lsls	r3, r3, #3
 8004c92:	4413      	add	r3, r2
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	440b      	add	r3, r1
 8004c98:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004c9c:	7bfa      	ldrb	r2, [r7, #15]
 8004c9e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004ca0:	7bfa      	ldrb	r2, [r7, #15]
 8004ca2:	6879      	ldr	r1, [r7, #4]
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	00db      	lsls	r3, r3, #3
 8004ca8:	4413      	add	r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	440b      	add	r3, r1
 8004cae:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004cb6:	7bfa      	ldrb	r2, [r7, #15]
 8004cb8:	6879      	ldr	r1, [r7, #4]
 8004cba:	4613      	mov	r3, r2
 8004cbc:	00db      	lsls	r3, r3, #3
 8004cbe:	4413      	add	r3, r2
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	440b      	add	r3, r1
 8004cc4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004cc8:	2200      	movs	r2, #0
 8004cca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004ccc:	7bfa      	ldrb	r2, [r7, #15]
 8004cce:	6879      	ldr	r1, [r7, #4]
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	00db      	lsls	r3, r3, #3
 8004cd4:	4413      	add	r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	440b      	add	r3, r1
 8004cda:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004cde:	2200      	movs	r2, #0
 8004ce0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004ce2:	7bfa      	ldrb	r2, [r7, #15]
 8004ce4:	6879      	ldr	r1, [r7, #4]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	00db      	lsls	r3, r3, #3
 8004cea:	4413      	add	r3, r2
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	440b      	add	r3, r1
 8004cf0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cf8:	7bfb      	ldrb	r3, [r7, #15]
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	73fb      	strb	r3, [r7, #15]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	791b      	ldrb	r3, [r3, #4]
 8004d02:	7bfa      	ldrb	r2, [r7, #15]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d3b5      	bcc.n	8004c74 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6818      	ldr	r0, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	7c1a      	ldrb	r2, [r3, #16]
 8004d10:	f88d 2000 	strb.w	r2, [sp]
 8004d14:	3304      	adds	r3, #4
 8004d16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d18:	f003 fdc0 	bl	800889c <USB_DevInit>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d005      	beq.n	8004d2e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2202      	movs	r2, #2
 8004d26:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e013      	b.n	8004d56 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	7b1b      	ldrb	r3, [r3, #12]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d102      	bne.n	8004d4a <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f001 f96f 	bl	8006028 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f004 fdfd 	bl	800994e <USB_DevDisconnect>

  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b084      	sub	sp, #16
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d101      	bne.n	8004d7a <HAL_PCD_Start+0x1c>
 8004d76:	2302      	movs	r3, #2
 8004d78:	e022      	b.n	8004dc0 <HAL_PCD_Start+0x62>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d009      	beq.n	8004da2 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d105      	bne.n	8004da2 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d9a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4618      	mov	r0, r3
 8004da8:	f003 fd0a 	bl	80087c0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4618      	mov	r0, r3
 8004db2:	f004 fdab 	bl	800990c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004dbe:	2300      	movs	r3, #0
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3710      	adds	r7, #16
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004dc8:	b590      	push	{r4, r7, lr}
 8004dca:	b08d      	sub	sp, #52	@ 0x34
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dd6:	6a3b      	ldr	r3, [r7, #32]
 8004dd8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4618      	mov	r0, r3
 8004de0:	f004 fe69 	bl	8009ab6 <USB_GetMode>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	f040 84b9 	bne.w	800575e <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4618      	mov	r0, r3
 8004df2:	f004 fdcd 	bl	8009990 <USB_ReadInterrupts>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	f000 84af 	beq.w	800575c <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	0a1b      	lsrs	r3, r3, #8
 8004e08:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4618      	mov	r0, r3
 8004e18:	f004 fdba 	bl	8009990 <USB_ReadInterrupts>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	f003 0302 	and.w	r3, r3, #2
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d107      	bne.n	8004e36 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	695a      	ldr	r2, [r3, #20]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f002 0202 	and.w	r2, r2, #2
 8004e34:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f004 fda8 	bl	8009990 <USB_ReadInterrupts>
 8004e40:	4603      	mov	r3, r0
 8004e42:	f003 0310 	and.w	r3, r3, #16
 8004e46:	2b10      	cmp	r3, #16
 8004e48:	d161      	bne.n	8004f0e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	699a      	ldr	r2, [r3, #24]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f022 0210 	bic.w	r2, r2, #16
 8004e58:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004e5a:	6a3b      	ldr	r3, [r7, #32]
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	f003 020f 	and.w	r2, r3, #15
 8004e66:	4613      	mov	r3, r2
 8004e68:	00db      	lsls	r3, r3, #3
 8004e6a:	4413      	add	r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	4413      	add	r3, r2
 8004e76:	3304      	adds	r3, #4
 8004e78:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	0c5b      	lsrs	r3, r3, #17
 8004e7e:	f003 030f 	and.w	r3, r3, #15
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d124      	bne.n	8004ed0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004e86:	69ba      	ldr	r2, [r7, #24]
 8004e88:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d035      	beq.n	8004efe <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	091b      	lsrs	r3, r3, #4
 8004e9a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004e9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	6a38      	ldr	r0, [r7, #32]
 8004ea6:	f004 fbdf 	bl	8009668 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	68da      	ldr	r2, [r3, #12]
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	091b      	lsrs	r3, r3, #4
 8004eb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004eb6:	441a      	add	r2, r3
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	695a      	ldr	r2, [r3, #20]
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	091b      	lsrs	r3, r3, #4
 8004ec4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ec8:	441a      	add	r2, r3
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	615a      	str	r2, [r3, #20]
 8004ece:	e016      	b.n	8004efe <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	0c5b      	lsrs	r3, r3, #17
 8004ed4:	f003 030f 	and.w	r3, r3, #15
 8004ed8:	2b06      	cmp	r3, #6
 8004eda:	d110      	bne.n	8004efe <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004ee2:	2208      	movs	r2, #8
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	6a38      	ldr	r0, [r7, #32]
 8004ee8:	f004 fbbe 	bl	8009668 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	695a      	ldr	r2, [r3, #20]
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	091b      	lsrs	r3, r3, #4
 8004ef4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ef8:	441a      	add	r2, r3
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	699a      	ldr	r2, [r3, #24]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f042 0210 	orr.w	r2, r2, #16
 8004f0c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4618      	mov	r0, r3
 8004f14:	f004 fd3c 	bl	8009990 <USB_ReadInterrupts>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f1e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004f22:	f040 80a7 	bne.w	8005074 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004f26:	2300      	movs	r3, #0
 8004f28:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f004 fd41 	bl	80099b6 <USB_ReadDevAllOutEpInterrupt>
 8004f34:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004f36:	e099      	b.n	800506c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f3a:	f003 0301 	and.w	r3, r3, #1
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	f000 808e 	beq.w	8005060 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f4a:	b2d2      	uxtb	r2, r2
 8004f4c:	4611      	mov	r1, r2
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f004 fd65 	bl	8009a1e <USB_ReadDevOutEPInterrupt>
 8004f54:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	f003 0301 	and.w	r3, r3, #1
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00c      	beq.n	8004f7a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f62:	015a      	lsls	r2, r3, #5
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	4413      	add	r3, r2
 8004f68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	2301      	movs	r3, #1
 8004f70:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004f72:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f000 fed1 	bl	8005d1c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	f003 0308 	and.w	r3, r3, #8
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d00c      	beq.n	8004f9e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f86:	015a      	lsls	r2, r3, #5
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f90:	461a      	mov	r2, r3
 8004f92:	2308      	movs	r3, #8
 8004f94:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004f96:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f000 ffa7 	bl	8005eec <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	f003 0310 	and.w	r3, r3, #16
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d008      	beq.n	8004fba <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004faa:	015a      	lsls	r2, r3, #5
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	4413      	add	r3, r2
 8004fb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	2310      	movs	r3, #16
 8004fb8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	f003 0302 	and.w	r3, r3, #2
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d030      	beq.n	8005026 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004fc4:	6a3b      	ldr	r3, [r7, #32]
 8004fc6:	695b      	ldr	r3, [r3, #20]
 8004fc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fcc:	2b80      	cmp	r3, #128	@ 0x80
 8004fce:	d109      	bne.n	8004fe4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	69fa      	ldr	r2, [r7, #28]
 8004fda:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004fde:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004fe2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004fe4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	00db      	lsls	r3, r3, #3
 8004fea:	4413      	add	r3, r2
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	3304      	adds	r3, #4
 8004ff8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	78db      	ldrb	r3, [r3, #3]
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d108      	bne.n	8005014 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	2200      	movs	r2, #0
 8005006:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800500a:	b2db      	uxtb	r3, r3
 800500c:	4619      	mov	r1, r3
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f007 fe24 	bl	800cc5c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005016:	015a      	lsls	r2, r3, #5
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	4413      	add	r3, r2
 800501c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005020:	461a      	mov	r2, r3
 8005022:	2302      	movs	r3, #2
 8005024:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	f003 0320 	and.w	r3, r3, #32
 800502c:	2b00      	cmp	r3, #0
 800502e:	d008      	beq.n	8005042 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005032:	015a      	lsls	r2, r3, #5
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	4413      	add	r3, r2
 8005038:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800503c:	461a      	mov	r2, r3
 800503e:	2320      	movs	r3, #32
 8005040:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005048:	2b00      	cmp	r3, #0
 800504a:	d009      	beq.n	8005060 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800504c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504e:	015a      	lsls	r2, r3, #5
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	4413      	add	r3, r2
 8005054:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005058:	461a      	mov	r2, r3
 800505a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800505e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005062:	3301      	adds	r3, #1
 8005064:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005068:	085b      	lsrs	r3, r3, #1
 800506a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800506c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800506e:	2b00      	cmp	r3, #0
 8005070:	f47f af62 	bne.w	8004f38 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4618      	mov	r0, r3
 800507a:	f004 fc89 	bl	8009990 <USB_ReadInterrupts>
 800507e:	4603      	mov	r3, r0
 8005080:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005084:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005088:	f040 80db 	bne.w	8005242 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4618      	mov	r0, r3
 8005092:	f004 fcaa 	bl	80099ea <USB_ReadDevAllInEpInterrupt>
 8005096:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8005098:	2300      	movs	r3, #0
 800509a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800509c:	e0cd      	b.n	800523a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800509e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050a0:	f003 0301 	and.w	r3, r3, #1
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	f000 80c2 	beq.w	800522e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050b0:	b2d2      	uxtb	r2, r2
 80050b2:	4611      	mov	r1, r2
 80050b4:	4618      	mov	r0, r3
 80050b6:	f004 fcd0 	bl	8009a5a <USB_ReadDevInEPInterrupt>
 80050ba:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d057      	beq.n	8005176 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80050c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c8:	f003 030f 	and.w	r3, r3, #15
 80050cc:	2201      	movs	r2, #1
 80050ce:	fa02 f303 	lsl.w	r3, r2, r3
 80050d2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	43db      	mvns	r3, r3
 80050e0:	69f9      	ldr	r1, [r7, #28]
 80050e2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80050e6:	4013      	ands	r3, r2
 80050e8:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80050ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ec:	015a      	lsls	r2, r3, #5
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	4413      	add	r3, r2
 80050f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050f6:	461a      	mov	r2, r3
 80050f8:	2301      	movs	r3, #1
 80050fa:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	799b      	ldrb	r3, [r3, #6]
 8005100:	2b01      	cmp	r3, #1
 8005102:	d132      	bne.n	800516a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005104:	6879      	ldr	r1, [r7, #4]
 8005106:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005108:	4613      	mov	r3, r2
 800510a:	00db      	lsls	r3, r3, #3
 800510c:	4413      	add	r3, r2
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	440b      	add	r3, r1
 8005112:	3320      	adds	r3, #32
 8005114:	6819      	ldr	r1, [r3, #0]
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800511a:	4613      	mov	r3, r2
 800511c:	00db      	lsls	r3, r3, #3
 800511e:	4413      	add	r3, r2
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	4403      	add	r3, r0
 8005124:	331c      	adds	r3, #28
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4419      	add	r1, r3
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800512e:	4613      	mov	r3, r2
 8005130:	00db      	lsls	r3, r3, #3
 8005132:	4413      	add	r3, r2
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	4403      	add	r3, r0
 8005138:	3320      	adds	r3, #32
 800513a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800513c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513e:	2b00      	cmp	r3, #0
 8005140:	d113      	bne.n	800516a <HAL_PCD_IRQHandler+0x3a2>
 8005142:	6879      	ldr	r1, [r7, #4]
 8005144:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005146:	4613      	mov	r3, r2
 8005148:	00db      	lsls	r3, r3, #3
 800514a:	4413      	add	r3, r2
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	440b      	add	r3, r1
 8005150:	3324      	adds	r3, #36	@ 0x24
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d108      	bne.n	800516a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6818      	ldr	r0, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005162:	461a      	mov	r2, r3
 8005164:	2101      	movs	r1, #1
 8005166:	f004 fcd7 	bl	8009b18 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800516a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800516c:	b2db      	uxtb	r3, r3
 800516e:	4619      	mov	r1, r3
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f007 fcee 	bl	800cb52 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	f003 0308 	and.w	r3, r3, #8
 800517c:	2b00      	cmp	r3, #0
 800517e:	d008      	beq.n	8005192 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005182:	015a      	lsls	r2, r3, #5
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	4413      	add	r3, r2
 8005188:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800518c:	461a      	mov	r2, r3
 800518e:	2308      	movs	r3, #8
 8005190:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	f003 0310 	and.w	r3, r3, #16
 8005198:	2b00      	cmp	r3, #0
 800519a:	d008      	beq.n	80051ae <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800519c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519e:	015a      	lsls	r2, r3, #5
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	4413      	add	r3, r2
 80051a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051a8:	461a      	mov	r2, r3
 80051aa:	2310      	movs	r3, #16
 80051ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d008      	beq.n	80051ca <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80051b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ba:	015a      	lsls	r2, r3, #5
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	4413      	add	r3, r2
 80051c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051c4:	461a      	mov	r2, r3
 80051c6:	2340      	movs	r3, #64	@ 0x40
 80051c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	f003 0302 	and.w	r3, r3, #2
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d023      	beq.n	800521c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80051d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80051d6:	6a38      	ldr	r0, [r7, #32]
 80051d8:	f003 fcbe 	bl	8008b58 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80051dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051de:	4613      	mov	r3, r2
 80051e0:	00db      	lsls	r3, r3, #3
 80051e2:	4413      	add	r3, r2
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	3310      	adds	r3, #16
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	4413      	add	r3, r2
 80051ec:	3304      	adds	r3, #4
 80051ee:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	78db      	ldrb	r3, [r3, #3]
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d108      	bne.n	800520a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	2200      	movs	r2, #0
 80051fc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80051fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005200:	b2db      	uxtb	r3, r3
 8005202:	4619      	mov	r1, r3
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f007 fd3b 	bl	800cc80 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800520a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800520c:	015a      	lsls	r2, r3, #5
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	4413      	add	r3, r2
 8005212:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005216:	461a      	mov	r2, r3
 8005218:	2302      	movs	r3, #2
 800521a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005222:	2b00      	cmp	r3, #0
 8005224:	d003      	beq.n	800522e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005226:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 fcea 	bl	8005c02 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800522e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005230:	3301      	adds	r3, #1
 8005232:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005236:	085b      	lsrs	r3, r3, #1
 8005238:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800523a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800523c:	2b00      	cmp	r3, #0
 800523e:	f47f af2e 	bne.w	800509e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4618      	mov	r0, r3
 8005248:	f004 fba2 	bl	8009990 <USB_ReadInterrupts>
 800524c:	4603      	mov	r3, r0
 800524e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005252:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005256:	d122      	bne.n	800529e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	69fa      	ldr	r2, [r7, #28]
 8005262:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005266:	f023 0301 	bic.w	r3, r3, #1
 800526a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005272:	2b01      	cmp	r3, #1
 8005274:	d108      	bne.n	8005288 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800527e:	2100      	movs	r1, #0
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 fef5 	bl	8006070 <HAL_PCDEx_LPM_Callback>
 8005286:	e002      	b.n	800528e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f007 fcd9 	bl	800cc40 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	695a      	ldr	r2, [r3, #20]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800529c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4618      	mov	r0, r3
 80052a4:	f004 fb74 	bl	8009990 <USB_ReadInterrupts>
 80052a8:	4603      	mov	r3, r0
 80052aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052b2:	d112      	bne.n	80052da <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f003 0301 	and.w	r3, r3, #1
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d102      	bne.n	80052ca <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f007 fc95 	bl	800cbf4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	695a      	ldr	r2, [r3, #20]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80052d8:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4618      	mov	r0, r3
 80052e0:	f004 fb56 	bl	8009990 <USB_ReadInterrupts>
 80052e4:	4603      	mov	r3, r0
 80052e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80052ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80052ee:	d121      	bne.n	8005334 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	695a      	ldr	r2, [r3, #20]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80052fe:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005306:	2b00      	cmp	r3, #0
 8005308:	d111      	bne.n	800532e <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005318:	089b      	lsrs	r3, r3, #2
 800531a:	f003 020f 	and.w	r2, r3, #15
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005324:	2101      	movs	r1, #1
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 fea2 	bl	8006070 <HAL_PCDEx_LPM_Callback>
 800532c:	e002      	b.n	8005334 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f007 fc60 	bl	800cbf4 <HAL_PCD_SuspendCallback>
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4618      	mov	r0, r3
 800533a:	f004 fb29 	bl	8009990 <USB_ReadInterrupts>
 800533e:	4603      	mov	r3, r0
 8005340:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005344:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005348:	f040 80b7 	bne.w	80054ba <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	69fa      	ldr	r2, [r7, #28]
 8005356:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800535a:	f023 0301 	bic.w	r3, r3, #1
 800535e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2110      	movs	r1, #16
 8005366:	4618      	mov	r0, r3
 8005368:	f003 fbf6 	bl	8008b58 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800536c:	2300      	movs	r3, #0
 800536e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005370:	e046      	b.n	8005400 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005374:	015a      	lsls	r2, r3, #5
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	4413      	add	r3, r2
 800537a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800537e:	461a      	mov	r2, r3
 8005380:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005384:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005388:	015a      	lsls	r2, r3, #5
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	4413      	add	r3, r2
 800538e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005396:	0151      	lsls	r1, r2, #5
 8005398:	69fa      	ldr	r2, [r7, #28]
 800539a:	440a      	add	r2, r1
 800539c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053a0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80053a4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80053a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053a8:	015a      	lsls	r2, r3, #5
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	4413      	add	r3, r2
 80053ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053b2:	461a      	mov	r2, r3
 80053b4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80053b8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80053ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053bc:	015a      	lsls	r2, r3, #5
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	4413      	add	r3, r2
 80053c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053ca:	0151      	lsls	r1, r2, #5
 80053cc:	69fa      	ldr	r2, [r7, #28]
 80053ce:	440a      	add	r2, r1
 80053d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053d4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80053d8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80053da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053dc:	015a      	lsls	r2, r3, #5
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	4413      	add	r3, r2
 80053e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053ea:	0151      	lsls	r1, r2, #5
 80053ec:	69fa      	ldr	r2, [r7, #28]
 80053ee:	440a      	add	r2, r1
 80053f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053f4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80053f8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053fc:	3301      	adds	r3, #1
 80053fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	791b      	ldrb	r3, [r3, #4]
 8005404:	461a      	mov	r2, r3
 8005406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005408:	4293      	cmp	r3, r2
 800540a:	d3b2      	bcc.n	8005372 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005412:	69db      	ldr	r3, [r3, #28]
 8005414:	69fa      	ldr	r2, [r7, #28]
 8005416:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800541a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800541e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	7bdb      	ldrb	r3, [r3, #15]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d016      	beq.n	8005456 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800542e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005432:	69fa      	ldr	r2, [r7, #28]
 8005434:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005438:	f043 030b 	orr.w	r3, r3, #11
 800543c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005446:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005448:	69fa      	ldr	r2, [r7, #28]
 800544a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800544e:	f043 030b 	orr.w	r3, r3, #11
 8005452:	6453      	str	r3, [r2, #68]	@ 0x44
 8005454:	e015      	b.n	8005482 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	69fa      	ldr	r2, [r7, #28]
 8005460:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005464:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005468:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800546c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	69fa      	ldr	r2, [r7, #28]
 8005478:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800547c:	f043 030b 	orr.w	r3, r3, #11
 8005480:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	69fa      	ldr	r2, [r7, #28]
 800548c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005490:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005494:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6818      	ldr	r0, [r3, #0]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80054a4:	461a      	mov	r2, r3
 80054a6:	f004 fb37 	bl	8009b18 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	695a      	ldr	r2, [r3, #20]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80054b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4618      	mov	r0, r3
 80054c0:	f004 fa66 	bl	8009990 <USB_ReadInterrupts>
 80054c4:	4603      	mov	r3, r0
 80054c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80054ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054ce:	d123      	bne.n	8005518 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4618      	mov	r0, r3
 80054d6:	f004 fafc 	bl	8009ad2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4618      	mov	r0, r3
 80054e0:	f003 fbb3 	bl	8008c4a <USB_GetDevSpeed>
 80054e4:	4603      	mov	r3, r0
 80054e6:	461a      	mov	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681c      	ldr	r4, [r3, #0]
 80054f0:	f000 feb0 	bl	8006254 <HAL_RCC_GetHCLKFreq>
 80054f4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80054fa:	461a      	mov	r2, r3
 80054fc:	4620      	mov	r0, r4
 80054fe:	f003 f8bd 	bl	800867c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f007 fb4d 	bl	800cba2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	695a      	ldr	r2, [r3, #20]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005516:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4618      	mov	r0, r3
 800551e:	f004 fa37 	bl	8009990 <USB_ReadInterrupts>
 8005522:	4603      	mov	r3, r0
 8005524:	f003 0308 	and.w	r3, r3, #8
 8005528:	2b08      	cmp	r3, #8
 800552a:	d10a      	bne.n	8005542 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f007 fb2a 	bl	800cb86 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	695a      	ldr	r2, [r3, #20]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f002 0208 	and.w	r2, r2, #8
 8005540:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4618      	mov	r0, r3
 8005548:	f004 fa22 	bl	8009990 <USB_ReadInterrupts>
 800554c:	4603      	mov	r3, r0
 800554e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005552:	2b80      	cmp	r3, #128	@ 0x80
 8005554:	d123      	bne.n	800559e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005556:	6a3b      	ldr	r3, [r7, #32]
 8005558:	699b      	ldr	r3, [r3, #24]
 800555a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800555e:	6a3b      	ldr	r3, [r7, #32]
 8005560:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005562:	2301      	movs	r3, #1
 8005564:	627b      	str	r3, [r7, #36]	@ 0x24
 8005566:	e014      	b.n	8005592 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005568:	6879      	ldr	r1, [r7, #4]
 800556a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800556c:	4613      	mov	r3, r2
 800556e:	00db      	lsls	r3, r3, #3
 8005570:	4413      	add	r3, r2
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	440b      	add	r3, r1
 8005576:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d105      	bne.n	800558c <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005582:	b2db      	uxtb	r3, r3
 8005584:	4619      	mov	r1, r3
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 fb0a 	bl	8005ba0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800558c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800558e:	3301      	adds	r3, #1
 8005590:	627b      	str	r3, [r7, #36]	@ 0x24
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	791b      	ldrb	r3, [r3, #4]
 8005596:	461a      	mov	r2, r3
 8005598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800559a:	4293      	cmp	r3, r2
 800559c:	d3e4      	bcc.n	8005568 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4618      	mov	r0, r3
 80055a4:	f004 f9f4 	bl	8009990 <USB_ReadInterrupts>
 80055a8:	4603      	mov	r3, r0
 80055aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80055ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055b2:	d13c      	bne.n	800562e <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80055b4:	2301      	movs	r3, #1
 80055b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80055b8:	e02b      	b.n	8005612 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80055ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055bc:	015a      	lsls	r2, r3, #5
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	4413      	add	r3, r2
 80055c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80055ca:	6879      	ldr	r1, [r7, #4]
 80055cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055ce:	4613      	mov	r3, r2
 80055d0:	00db      	lsls	r3, r3, #3
 80055d2:	4413      	add	r3, r2
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	440b      	add	r3, r1
 80055d8:	3318      	adds	r3, #24
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d115      	bne.n	800560c <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80055e0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	da12      	bge.n	800560c <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80055e6:	6879      	ldr	r1, [r7, #4]
 80055e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055ea:	4613      	mov	r3, r2
 80055ec:	00db      	lsls	r3, r3, #3
 80055ee:	4413      	add	r3, r2
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	440b      	add	r3, r1
 80055f4:	3317      	adds	r3, #23
 80055f6:	2201      	movs	r2, #1
 80055f8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80055fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005602:	b2db      	uxtb	r3, r3
 8005604:	4619      	mov	r1, r3
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 faca 	bl	8005ba0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800560c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560e:	3301      	adds	r3, #1
 8005610:	627b      	str	r3, [r7, #36]	@ 0x24
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	791b      	ldrb	r3, [r3, #4]
 8005616:	461a      	mov	r2, r3
 8005618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800561a:	4293      	cmp	r3, r2
 800561c:	d3cd      	bcc.n	80055ba <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	695a      	ldr	r2, [r3, #20]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800562c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4618      	mov	r0, r3
 8005634:	f004 f9ac 	bl	8009990 <USB_ReadInterrupts>
 8005638:	4603      	mov	r3, r0
 800563a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800563e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005642:	d156      	bne.n	80056f2 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005644:	2301      	movs	r3, #1
 8005646:	627b      	str	r3, [r7, #36]	@ 0x24
 8005648:	e045      	b.n	80056d6 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800564a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800564c:	015a      	lsls	r2, r3, #5
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	4413      	add	r3, r2
 8005652:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800565a:	6879      	ldr	r1, [r7, #4]
 800565c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800565e:	4613      	mov	r3, r2
 8005660:	00db      	lsls	r3, r3, #3
 8005662:	4413      	add	r3, r2
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	440b      	add	r3, r1
 8005668:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	2b01      	cmp	r3, #1
 8005670:	d12e      	bne.n	80056d0 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005672:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005674:	2b00      	cmp	r3, #0
 8005676:	da2b      	bge.n	80056d0 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005684:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005688:	429a      	cmp	r2, r3
 800568a:	d121      	bne.n	80056d0 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800568c:	6879      	ldr	r1, [r7, #4]
 800568e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005690:	4613      	mov	r3, r2
 8005692:	00db      	lsls	r3, r3, #3
 8005694:	4413      	add	r3, r2
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	440b      	add	r3, r1
 800569a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800569e:	2201      	movs	r2, #1
 80056a0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80056a2:	6a3b      	ldr	r3, [r7, #32]
 80056a4:	699b      	ldr	r3, [r3, #24]
 80056a6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80056aa:	6a3b      	ldr	r3, [r7, #32]
 80056ac:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80056ae:	6a3b      	ldr	r3, [r7, #32]
 80056b0:	695b      	ldr	r3, [r3, #20]
 80056b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d10a      	bne.n	80056d0 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	69fa      	ldr	r2, [r7, #28]
 80056c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80056c8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80056cc:	6053      	str	r3, [r2, #4]
            break;
 80056ce:	e008      	b.n	80056e2 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80056d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d2:	3301      	adds	r3, #1
 80056d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	791b      	ldrb	r3, [r3, #4]
 80056da:	461a      	mov	r2, r3
 80056dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056de:	4293      	cmp	r3, r2
 80056e0:	d3b3      	bcc.n	800564a <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	695a      	ldr	r2, [r3, #20]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80056f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4618      	mov	r0, r3
 80056f8:	f004 f94a 	bl	8009990 <USB_ReadInterrupts>
 80056fc:	4603      	mov	r3, r0
 80056fe:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005702:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005706:	d10a      	bne.n	800571e <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f007 facb 	bl	800cca4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	695a      	ldr	r2, [r3, #20]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800571c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4618      	mov	r0, r3
 8005724:	f004 f934 	bl	8009990 <USB_ReadInterrupts>
 8005728:	4603      	mov	r3, r0
 800572a:	f003 0304 	and.w	r3, r3, #4
 800572e:	2b04      	cmp	r3, #4
 8005730:	d115      	bne.n	800575e <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	f003 0304 	and.w	r3, r3, #4
 8005740:	2b00      	cmp	r3, #0
 8005742:	d002      	beq.n	800574a <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f007 fabb 	bl	800ccc0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	6859      	ldr	r1, [r3, #4]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	69ba      	ldr	r2, [r7, #24]
 8005756:	430a      	orrs	r2, r1
 8005758:	605a      	str	r2, [r3, #4]
 800575a:	e000      	b.n	800575e <HAL_PCD_IRQHandler+0x996>
      return;
 800575c:	bf00      	nop
    }
  }
}
 800575e:	3734      	adds	r7, #52	@ 0x34
 8005760:	46bd      	mov	sp, r7
 8005762:	bd90      	pop	{r4, r7, pc}

08005764 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	460b      	mov	r3, r1
 800576e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005776:	2b01      	cmp	r3, #1
 8005778:	d101      	bne.n	800577e <HAL_PCD_SetAddress+0x1a>
 800577a:	2302      	movs	r3, #2
 800577c:	e012      	b.n	80057a4 <HAL_PCD_SetAddress+0x40>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2201      	movs	r2, #1
 8005782:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	78fa      	ldrb	r2, [r7, #3]
 800578a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	78fa      	ldrb	r2, [r7, #3]
 8005792:	4611      	mov	r1, r2
 8005794:	4618      	mov	r0, r3
 8005796:	f004 f893 	bl	80098c0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3708      	adds	r7, #8
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	4608      	mov	r0, r1
 80057b6:	4611      	mov	r1, r2
 80057b8:	461a      	mov	r2, r3
 80057ba:	4603      	mov	r3, r0
 80057bc:	70fb      	strb	r3, [r7, #3]
 80057be:	460b      	mov	r3, r1
 80057c0:	803b      	strh	r3, [r7, #0]
 80057c2:	4613      	mov	r3, r2
 80057c4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80057c6:	2300      	movs	r3, #0
 80057c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80057ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	da0f      	bge.n	80057f2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057d2:	78fb      	ldrb	r3, [r7, #3]
 80057d4:	f003 020f 	and.w	r2, r3, #15
 80057d8:	4613      	mov	r3, r2
 80057da:	00db      	lsls	r3, r3, #3
 80057dc:	4413      	add	r3, r2
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	3310      	adds	r3, #16
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	4413      	add	r3, r2
 80057e6:	3304      	adds	r3, #4
 80057e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2201      	movs	r2, #1
 80057ee:	705a      	strb	r2, [r3, #1]
 80057f0:	e00f      	b.n	8005812 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80057f2:	78fb      	ldrb	r3, [r7, #3]
 80057f4:	f003 020f 	and.w	r2, r3, #15
 80057f8:	4613      	mov	r3, r2
 80057fa:	00db      	lsls	r3, r3, #3
 80057fc:	4413      	add	r3, r2
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	4413      	add	r3, r2
 8005808:	3304      	adds	r3, #4
 800580a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005812:	78fb      	ldrb	r3, [r7, #3]
 8005814:	f003 030f 	and.w	r3, r3, #15
 8005818:	b2da      	uxtb	r2, r3
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800581e:	883b      	ldrh	r3, [r7, #0]
 8005820:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	78ba      	ldrb	r2, [r7, #2]
 800582c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	785b      	ldrb	r3, [r3, #1]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d004      	beq.n	8005840 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	461a      	mov	r2, r3
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005840:	78bb      	ldrb	r3, [r7, #2]
 8005842:	2b02      	cmp	r3, #2
 8005844:	d102      	bne.n	800584c <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005852:	2b01      	cmp	r3, #1
 8005854:	d101      	bne.n	800585a <HAL_PCD_EP_Open+0xae>
 8005856:	2302      	movs	r3, #2
 8005858:	e00e      	b.n	8005878 <HAL_PCD_EP_Open+0xcc>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2201      	movs	r2, #1
 800585e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68f9      	ldr	r1, [r7, #12]
 8005868:	4618      	mov	r0, r3
 800586a:	f003 fa13 	bl	8008c94 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005876:	7afb      	ldrb	r3, [r7, #11]
}
 8005878:	4618      	mov	r0, r3
 800587a:	3710      	adds	r7, #16
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	460b      	mov	r3, r1
 800588a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800588c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005890:	2b00      	cmp	r3, #0
 8005892:	da0f      	bge.n	80058b4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005894:	78fb      	ldrb	r3, [r7, #3]
 8005896:	f003 020f 	and.w	r2, r3, #15
 800589a:	4613      	mov	r3, r2
 800589c:	00db      	lsls	r3, r3, #3
 800589e:	4413      	add	r3, r2
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	3310      	adds	r3, #16
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	4413      	add	r3, r2
 80058a8:	3304      	adds	r3, #4
 80058aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2201      	movs	r2, #1
 80058b0:	705a      	strb	r2, [r3, #1]
 80058b2:	e00f      	b.n	80058d4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80058b4:	78fb      	ldrb	r3, [r7, #3]
 80058b6:	f003 020f 	and.w	r2, r3, #15
 80058ba:	4613      	mov	r3, r2
 80058bc:	00db      	lsls	r3, r3, #3
 80058be:	4413      	add	r3, r2
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	4413      	add	r3, r2
 80058ca:	3304      	adds	r3, #4
 80058cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2200      	movs	r2, #0
 80058d2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80058d4:	78fb      	ldrb	r3, [r7, #3]
 80058d6:	f003 030f 	and.w	r3, r3, #15
 80058da:	b2da      	uxtb	r2, r3
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d101      	bne.n	80058ee <HAL_PCD_EP_Close+0x6e>
 80058ea:	2302      	movs	r3, #2
 80058ec:	e00e      	b.n	800590c <HAL_PCD_EP_Close+0x8c>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2201      	movs	r2, #1
 80058f2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68f9      	ldr	r1, [r7, #12]
 80058fc:	4618      	mov	r0, r3
 80058fe:	f003 fa51 	bl	8008da4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800590a:	2300      	movs	r3, #0
}
 800590c:	4618      	mov	r0, r3
 800590e:	3710      	adds	r7, #16
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b086      	sub	sp, #24
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	607a      	str	r2, [r7, #4]
 800591e:	603b      	str	r3, [r7, #0]
 8005920:	460b      	mov	r3, r1
 8005922:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005924:	7afb      	ldrb	r3, [r7, #11]
 8005926:	f003 020f 	and.w	r2, r3, #15
 800592a:	4613      	mov	r3, r2
 800592c:	00db      	lsls	r3, r3, #3
 800592e:	4413      	add	r3, r2
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	4413      	add	r3, r2
 800593a:	3304      	adds	r3, #4
 800593c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	683a      	ldr	r2, [r7, #0]
 8005948:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	2200      	movs	r2, #0
 800594e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	2200      	movs	r2, #0
 8005954:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005956:	7afb      	ldrb	r3, [r7, #11]
 8005958:	f003 030f 	and.w	r3, r3, #15
 800595c:	b2da      	uxtb	r2, r3
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	799b      	ldrb	r3, [r3, #6]
 8005966:	2b01      	cmp	r3, #1
 8005968:	d102      	bne.n	8005970 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6818      	ldr	r0, [r3, #0]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	799b      	ldrb	r3, [r3, #6]
 8005978:	461a      	mov	r2, r3
 800597a:	6979      	ldr	r1, [r7, #20]
 800597c:	f003 faee 	bl	8008f5c <USB_EPStartXfer>

  return HAL_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	3718      	adds	r7, #24
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}

0800598a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800598a:	b480      	push	{r7}
 800598c:	b083      	sub	sp, #12
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
 8005992:	460b      	mov	r3, r1
 8005994:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005996:	78fb      	ldrb	r3, [r7, #3]
 8005998:	f003 020f 	and.w	r2, r3, #15
 800599c:	6879      	ldr	r1, [r7, #4]
 800599e:	4613      	mov	r3, r2
 80059a0:	00db      	lsls	r3, r3, #3
 80059a2:	4413      	add	r3, r2
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	440b      	add	r3, r1
 80059a8:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80059ac:	681b      	ldr	r3, [r3, #0]
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	370c      	adds	r7, #12
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr

080059ba <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80059ba:	b580      	push	{r7, lr}
 80059bc:	b086      	sub	sp, #24
 80059be:	af00      	add	r7, sp, #0
 80059c0:	60f8      	str	r0, [r7, #12]
 80059c2:	607a      	str	r2, [r7, #4]
 80059c4:	603b      	str	r3, [r7, #0]
 80059c6:	460b      	mov	r3, r1
 80059c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059ca:	7afb      	ldrb	r3, [r7, #11]
 80059cc:	f003 020f 	and.w	r2, r3, #15
 80059d0:	4613      	mov	r3, r2
 80059d2:	00db      	lsls	r3, r3, #3
 80059d4:	4413      	add	r3, r2
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	3310      	adds	r3, #16
 80059da:	68fa      	ldr	r2, [r7, #12]
 80059dc:	4413      	add	r3, r2
 80059de:	3304      	adds	r3, #4
 80059e0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	683a      	ldr	r2, [r7, #0]
 80059ec:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	2200      	movs	r2, #0
 80059f2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	2201      	movs	r2, #1
 80059f8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80059fa:	7afb      	ldrb	r3, [r7, #11]
 80059fc:	f003 030f 	and.w	r3, r3, #15
 8005a00:	b2da      	uxtb	r2, r3
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	799b      	ldrb	r3, [r3, #6]
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d102      	bne.n	8005a14 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6818      	ldr	r0, [r3, #0]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	799b      	ldrb	r3, [r3, #6]
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	6979      	ldr	r1, [r7, #20]
 8005a20:	f003 fa9c 	bl	8008f5c <USB_EPStartXfer>

  return HAL_OK;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3718      	adds	r7, #24
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}

08005a2e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a2e:	b580      	push	{r7, lr}
 8005a30:	b084      	sub	sp, #16
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
 8005a36:	460b      	mov	r3, r1
 8005a38:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005a3a:	78fb      	ldrb	r3, [r7, #3]
 8005a3c:	f003 030f 	and.w	r3, r3, #15
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	7912      	ldrb	r2, [r2, #4]
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d901      	bls.n	8005a4c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e04f      	b.n	8005aec <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005a4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	da0f      	bge.n	8005a74 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a54:	78fb      	ldrb	r3, [r7, #3]
 8005a56:	f003 020f 	and.w	r2, r3, #15
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	00db      	lsls	r3, r3, #3
 8005a5e:	4413      	add	r3, r2
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	3310      	adds	r3, #16
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	4413      	add	r3, r2
 8005a68:	3304      	adds	r3, #4
 8005a6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	705a      	strb	r2, [r3, #1]
 8005a72:	e00d      	b.n	8005a90 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005a74:	78fa      	ldrb	r2, [r7, #3]
 8005a76:	4613      	mov	r3, r2
 8005a78:	00db      	lsls	r3, r3, #3
 8005a7a:	4413      	add	r3, r2
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	4413      	add	r3, r2
 8005a86:	3304      	adds	r3, #4
 8005a88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2201      	movs	r2, #1
 8005a94:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a96:	78fb      	ldrb	r3, [r7, #3]
 8005a98:	f003 030f 	and.w	r3, r3, #15
 8005a9c:	b2da      	uxtb	r2, r3
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d101      	bne.n	8005ab0 <HAL_PCD_EP_SetStall+0x82>
 8005aac:	2302      	movs	r3, #2
 8005aae:	e01d      	b.n	8005aec <HAL_PCD_EP_SetStall+0xbe>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68f9      	ldr	r1, [r7, #12]
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f003 fe2a 	bl	8009718 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005ac4:	78fb      	ldrb	r3, [r7, #3]
 8005ac6:	f003 030f 	and.w	r3, r3, #15
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d109      	bne.n	8005ae2 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6818      	ldr	r0, [r3, #0]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	7999      	ldrb	r1, [r3, #6]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005adc:	461a      	mov	r2, r3
 8005ade:	f004 f81b 	bl	8009b18 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3710      	adds	r7, #16
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	460b      	mov	r3, r1
 8005afe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005b00:	78fb      	ldrb	r3, [r7, #3]
 8005b02:	f003 030f 	and.w	r3, r3, #15
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	7912      	ldrb	r2, [r2, #4]
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d901      	bls.n	8005b12 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e042      	b.n	8005b98 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005b12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	da0f      	bge.n	8005b3a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b1a:	78fb      	ldrb	r3, [r7, #3]
 8005b1c:	f003 020f 	and.w	r2, r3, #15
 8005b20:	4613      	mov	r3, r2
 8005b22:	00db      	lsls	r3, r3, #3
 8005b24:	4413      	add	r3, r2
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	3310      	adds	r3, #16
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	3304      	adds	r3, #4
 8005b30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2201      	movs	r2, #1
 8005b36:	705a      	strb	r2, [r3, #1]
 8005b38:	e00f      	b.n	8005b5a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b3a:	78fb      	ldrb	r3, [r7, #3]
 8005b3c:	f003 020f 	and.w	r2, r3, #15
 8005b40:	4613      	mov	r3, r2
 8005b42:	00db      	lsls	r3, r3, #3
 8005b44:	4413      	add	r3, r2
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	4413      	add	r3, r2
 8005b50:	3304      	adds	r3, #4
 8005b52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b60:	78fb      	ldrb	r3, [r7, #3]
 8005b62:	f003 030f 	and.w	r3, r3, #15
 8005b66:	b2da      	uxtb	r2, r3
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d101      	bne.n	8005b7a <HAL_PCD_EP_ClrStall+0x86>
 8005b76:	2302      	movs	r3, #2
 8005b78:	e00e      	b.n	8005b98 <HAL_PCD_EP_ClrStall+0xa4>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68f9      	ldr	r1, [r7, #12]
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f003 fe33 	bl	80097f4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005b96:	2300      	movs	r3, #0
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3710      	adds	r7, #16
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	460b      	mov	r3, r1
 8005baa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005bac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	da0c      	bge.n	8005bce <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005bb4:	78fb      	ldrb	r3, [r7, #3]
 8005bb6:	f003 020f 	and.w	r2, r3, #15
 8005bba:	4613      	mov	r3, r2
 8005bbc:	00db      	lsls	r3, r3, #3
 8005bbe:	4413      	add	r3, r2
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	3310      	adds	r3, #16
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	3304      	adds	r3, #4
 8005bca:	60fb      	str	r3, [r7, #12]
 8005bcc:	e00c      	b.n	8005be8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005bce:	78fb      	ldrb	r3, [r7, #3]
 8005bd0:	f003 020f 	and.w	r2, r3, #15
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	00db      	lsls	r3, r3, #3
 8005bd8:	4413      	add	r3, r2
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	4413      	add	r3, r2
 8005be4:	3304      	adds	r3, #4
 8005be6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68f9      	ldr	r1, [r7, #12]
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f003 fc52 	bl	8009498 <USB_EPStopXfer>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005bf8:	7afb      	ldrb	r3, [r7, #11]
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005c02:	b580      	push	{r7, lr}
 8005c04:	b08a      	sub	sp, #40	@ 0x28
 8005c06:	af02      	add	r7, sp, #8
 8005c08:	6078      	str	r0, [r7, #4]
 8005c0a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005c16:	683a      	ldr	r2, [r7, #0]
 8005c18:	4613      	mov	r3, r2
 8005c1a:	00db      	lsls	r3, r3, #3
 8005c1c:	4413      	add	r3, r2
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	3310      	adds	r3, #16
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	4413      	add	r3, r2
 8005c26:	3304      	adds	r3, #4
 8005c28:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	695a      	ldr	r2, [r3, #20]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d901      	bls.n	8005c3a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e06b      	b.n	8005d12 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	691a      	ldr	r2, [r3, #16]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	1ad3      	subs	r3, r2, r3
 8005c44:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	69fa      	ldr	r2, [r7, #28]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d902      	bls.n	8005c56 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	3303      	adds	r3, #3
 8005c5a:	089b      	lsrs	r3, r3, #2
 8005c5c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005c5e:	e02a      	b.n	8005cb6 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	691a      	ldr	r2, [r3, #16]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	695b      	ldr	r3, [r3, #20]
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	69fa      	ldr	r2, [r7, #28]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d902      	bls.n	8005c7c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	3303      	adds	r3, #3
 8005c80:	089b      	lsrs	r3, r3, #2
 8005c82:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	68d9      	ldr	r1, [r3, #12]
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	b2da      	uxtb	r2, r3
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005c94:	9300      	str	r3, [sp, #0]
 8005c96:	4603      	mov	r3, r0
 8005c98:	6978      	ldr	r0, [r7, #20]
 8005c9a:	f003 fca7 	bl	80095ec <USB_WritePacket>

    ep->xfer_buff  += len;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	68da      	ldr	r2, [r3, #12]
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	441a      	add	r2, r3
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	695a      	ldr	r2, [r3, #20]
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	441a      	add	r2, r3
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	015a      	lsls	r2, r3, #5
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cc2:	699b      	ldr	r3, [r3, #24]
 8005cc4:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005cc6:	69ba      	ldr	r2, [r7, #24]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d809      	bhi.n	8005ce0 <PCD_WriteEmptyTxFifo+0xde>
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	695a      	ldr	r2, [r3, #20]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d203      	bcs.n	8005ce0 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	691b      	ldr	r3, [r3, #16]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d1bf      	bne.n	8005c60 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	691a      	ldr	r2, [r3, #16]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	695b      	ldr	r3, [r3, #20]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d811      	bhi.n	8005d10 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	f003 030f 	and.w	r3, r3, #15
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	43db      	mvns	r3, r3
 8005d06:	6939      	ldr	r1, [r7, #16]
 8005d08:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3720      	adds	r7, #32
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
	...

08005d1c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b088      	sub	sp, #32
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	333c      	adds	r3, #60	@ 0x3c
 8005d34:	3304      	adds	r3, #4
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	015a      	lsls	r2, r3, #5
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	4413      	add	r3, r2
 8005d42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	799b      	ldrb	r3, [r3, #6]
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d17b      	bne.n	8005e4a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	f003 0308 	and.w	r3, r3, #8
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d015      	beq.n	8005d88 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	4a61      	ldr	r2, [pc, #388]	@ (8005ee4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	f240 80b9 	bls.w	8005ed8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	f000 80b3 	beq.w	8005ed8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	015a      	lsls	r2, r3, #5
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	4413      	add	r3, r2
 8005d7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d7e:	461a      	mov	r2, r3
 8005d80:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d84:	6093      	str	r3, [r2, #8]
 8005d86:	e0a7      	b.n	8005ed8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	f003 0320 	and.w	r3, r3, #32
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d009      	beq.n	8005da6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	015a      	lsls	r2, r3, #5
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	4413      	add	r3, r2
 8005d9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d9e:	461a      	mov	r2, r3
 8005da0:	2320      	movs	r3, #32
 8005da2:	6093      	str	r3, [r2, #8]
 8005da4:	e098      	b.n	8005ed8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f040 8093 	bne.w	8005ed8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	4a4b      	ldr	r2, [pc, #300]	@ (8005ee4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d90f      	bls.n	8005dda <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00a      	beq.n	8005dda <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	015a      	lsls	r2, r3, #5
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	4413      	add	r3, r2
 8005dcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005dd6:	6093      	str	r3, [r2, #8]
 8005dd8:	e07e      	b.n	8005ed8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005dda:	683a      	ldr	r2, [r7, #0]
 8005ddc:	4613      	mov	r3, r2
 8005dde:	00db      	lsls	r3, r3, #3
 8005de0:	4413      	add	r3, r2
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	4413      	add	r3, r2
 8005dec:	3304      	adds	r3, #4
 8005dee:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6a1a      	ldr	r2, [r3, #32]
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	0159      	lsls	r1, r3, #5
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	440b      	add	r3, r1
 8005dfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e06:	1ad2      	subs	r2, r2, r3
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d114      	bne.n	8005e3c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d109      	bne.n	8005e2e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6818      	ldr	r0, [r3, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005e24:	461a      	mov	r2, r3
 8005e26:	2101      	movs	r1, #1
 8005e28:	f003 fe76 	bl	8009b18 <USB_EP0_OutStart>
 8005e2c:	e006      	b.n	8005e3c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	68da      	ldr	r2, [r3, #12]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	695b      	ldr	r3, [r3, #20]
 8005e36:	441a      	add	r2, r3
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	4619      	mov	r1, r3
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f006 fe6a 	bl	800cb1c <HAL_PCD_DataOutStageCallback>
 8005e48:	e046      	b.n	8005ed8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	4a26      	ldr	r2, [pc, #152]	@ (8005ee8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d124      	bne.n	8005e9c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d00a      	beq.n	8005e72 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	015a      	lsls	r2, r3, #5
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	4413      	add	r3, r2
 8005e64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e68:	461a      	mov	r2, r3
 8005e6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e6e:	6093      	str	r3, [r2, #8]
 8005e70:	e032      	b.n	8005ed8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	f003 0320 	and.w	r3, r3, #32
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d008      	beq.n	8005e8e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	015a      	lsls	r2, r3, #5
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	4413      	add	r3, r2
 8005e84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e88:	461a      	mov	r2, r3
 8005e8a:	2320      	movs	r3, #32
 8005e8c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	4619      	mov	r1, r3
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f006 fe41 	bl	800cb1c <HAL_PCD_DataOutStageCallback>
 8005e9a:	e01d      	b.n	8005ed8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d114      	bne.n	8005ecc <PCD_EP_OutXfrComplete_int+0x1b0>
 8005ea2:	6879      	ldr	r1, [r7, #4]
 8005ea4:	683a      	ldr	r2, [r7, #0]
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	00db      	lsls	r3, r3, #3
 8005eaa:	4413      	add	r3, r2
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	440b      	add	r3, r1
 8005eb0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d108      	bne.n	8005ecc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6818      	ldr	r0, [r3, #0]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	2100      	movs	r1, #0
 8005ec8:	f003 fe26 	bl	8009b18 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f006 fe22 	bl	800cb1c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3720      	adds	r7, #32
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	4f54300a 	.word	0x4f54300a
 8005ee8:	4f54310a 	.word	0x4f54310a

08005eec <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b086      	sub	sp, #24
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	333c      	adds	r3, #60	@ 0x3c
 8005f04:	3304      	adds	r3, #4
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	015a      	lsls	r2, r3, #5
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	4413      	add	r3, r2
 8005f12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	4a15      	ldr	r2, [pc, #84]	@ (8005f74 <PCD_EP_OutSetupPacket_int+0x88>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d90e      	bls.n	8005f40 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d009      	beq.n	8005f40 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	015a      	lsls	r2, r3, #5
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	4413      	add	r3, r2
 8005f34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f38:	461a      	mov	r2, r3
 8005f3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f3e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f006 fdd9 	bl	800caf8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	4a0a      	ldr	r2, [pc, #40]	@ (8005f74 <PCD_EP_OutSetupPacket_int+0x88>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d90c      	bls.n	8005f68 <PCD_EP_OutSetupPacket_int+0x7c>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	799b      	ldrb	r3, [r3, #6]
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d108      	bne.n	8005f68 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6818      	ldr	r0, [r3, #0]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005f60:	461a      	mov	r2, r3
 8005f62:	2101      	movs	r1, #1
 8005f64:	f003 fdd8 	bl	8009b18 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3718      	adds	r7, #24
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	4f54300a 	.word	0x4f54300a

08005f78 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b085      	sub	sp, #20
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	460b      	mov	r3, r1
 8005f82:	70fb      	strb	r3, [r7, #3]
 8005f84:	4613      	mov	r3, r2
 8005f86:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f8e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005f90:	78fb      	ldrb	r3, [r7, #3]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d107      	bne.n	8005fa6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005f96:	883b      	ldrh	r3, [r7, #0]
 8005f98:	0419      	lsls	r1, r3, #16
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	68ba      	ldr	r2, [r7, #8]
 8005fa0:	430a      	orrs	r2, r1
 8005fa2:	629a      	str	r2, [r3, #40]	@ 0x28
 8005fa4:	e028      	b.n	8005ff8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fac:	0c1b      	lsrs	r3, r3, #16
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	4413      	add	r3, r2
 8005fb2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	73fb      	strb	r3, [r7, #15]
 8005fb8:	e00d      	b.n	8005fd6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	7bfb      	ldrb	r3, [r7, #15]
 8005fc0:	3340      	adds	r3, #64	@ 0x40
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	4413      	add	r3, r2
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	0c1b      	lsrs	r3, r3, #16
 8005fca:	68ba      	ldr	r2, [r7, #8]
 8005fcc:	4413      	add	r3, r2
 8005fce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005fd0:	7bfb      	ldrb	r3, [r7, #15]
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	73fb      	strb	r3, [r7, #15]
 8005fd6:	7bfa      	ldrb	r2, [r7, #15]
 8005fd8:	78fb      	ldrb	r3, [r7, #3]
 8005fda:	3b01      	subs	r3, #1
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d3ec      	bcc.n	8005fba <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005fe0:	883b      	ldrh	r3, [r7, #0]
 8005fe2:	0418      	lsls	r0, r3, #16
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6819      	ldr	r1, [r3, #0]
 8005fe8:	78fb      	ldrb	r3, [r7, #3]
 8005fea:	3b01      	subs	r3, #1
 8005fec:	68ba      	ldr	r2, [r7, #8]
 8005fee:	4302      	orrs	r2, r0
 8005ff0:	3340      	adds	r3, #64	@ 0x40
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	440b      	add	r3, r1
 8005ff6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3714      	adds	r7, #20
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr

08006006 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006006:	b480      	push	{r7}
 8006008:	b083      	sub	sp, #12
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
 800600e:	460b      	mov	r3, r1
 8006010:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	887a      	ldrh	r2, [r7, #2]
 8006018:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800601a:	2300      	movs	r3, #0
}
 800601c:	4618      	mov	r0, r3
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006028:	b480      	push	{r7}
 800602a:	b085      	sub	sp, #20
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2201      	movs	r2, #1
 800603a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	699b      	ldr	r3, [r3, #24]
 800604a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006056:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800605a:	f043 0303 	orr.w	r3, r3, #3
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8006062:	2300      	movs	r3, #0
}
 8006064:	4618      	mov	r0, r3
 8006066:	3714      	adds	r7, #20
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	460b      	mov	r3, r1
 800607a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800607c:	bf00      	nop
 800607e:	370c      	adds	r7, #12
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr

08006088 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d101      	bne.n	800609c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	e0cc      	b.n	8006236 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800609c:	4b68      	ldr	r3, [pc, #416]	@ (8006240 <HAL_RCC_ClockConfig+0x1b8>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 030f 	and.w	r3, r3, #15
 80060a4:	683a      	ldr	r2, [r7, #0]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d90c      	bls.n	80060c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060aa:	4b65      	ldr	r3, [pc, #404]	@ (8006240 <HAL_RCC_ClockConfig+0x1b8>)
 80060ac:	683a      	ldr	r2, [r7, #0]
 80060ae:	b2d2      	uxtb	r2, r2
 80060b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060b2:	4b63      	ldr	r3, [pc, #396]	@ (8006240 <HAL_RCC_ClockConfig+0x1b8>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 030f 	and.w	r3, r3, #15
 80060ba:	683a      	ldr	r2, [r7, #0]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d001      	beq.n	80060c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	e0b8      	b.n	8006236 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 0302 	and.w	r3, r3, #2
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d020      	beq.n	8006112 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 0304 	and.w	r3, r3, #4
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d005      	beq.n	80060e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80060dc:	4b59      	ldr	r3, [pc, #356]	@ (8006244 <HAL_RCC_ClockConfig+0x1bc>)
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	4a58      	ldr	r2, [pc, #352]	@ (8006244 <HAL_RCC_ClockConfig+0x1bc>)
 80060e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80060e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f003 0308 	and.w	r3, r3, #8
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d005      	beq.n	8006100 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80060f4:	4b53      	ldr	r3, [pc, #332]	@ (8006244 <HAL_RCC_ClockConfig+0x1bc>)
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	4a52      	ldr	r2, [pc, #328]	@ (8006244 <HAL_RCC_ClockConfig+0x1bc>)
 80060fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80060fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006100:	4b50      	ldr	r3, [pc, #320]	@ (8006244 <HAL_RCC_ClockConfig+0x1bc>)
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	494d      	ldr	r1, [pc, #308]	@ (8006244 <HAL_RCC_ClockConfig+0x1bc>)
 800610e:	4313      	orrs	r3, r2
 8006110:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 0301 	and.w	r3, r3, #1
 800611a:	2b00      	cmp	r3, #0
 800611c:	d044      	beq.n	80061a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	2b01      	cmp	r3, #1
 8006124:	d107      	bne.n	8006136 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006126:	4b47      	ldr	r3, [pc, #284]	@ (8006244 <HAL_RCC_ClockConfig+0x1bc>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800612e:	2b00      	cmp	r3, #0
 8006130:	d119      	bne.n	8006166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e07f      	b.n	8006236 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	2b02      	cmp	r3, #2
 800613c:	d003      	beq.n	8006146 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006142:	2b03      	cmp	r3, #3
 8006144:	d107      	bne.n	8006156 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006146:	4b3f      	ldr	r3, [pc, #252]	@ (8006244 <HAL_RCC_ClockConfig+0x1bc>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800614e:	2b00      	cmp	r3, #0
 8006150:	d109      	bne.n	8006166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e06f      	b.n	8006236 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006156:	4b3b      	ldr	r3, [pc, #236]	@ (8006244 <HAL_RCC_ClockConfig+0x1bc>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f003 0302 	and.w	r3, r3, #2
 800615e:	2b00      	cmp	r3, #0
 8006160:	d101      	bne.n	8006166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e067      	b.n	8006236 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006166:	4b37      	ldr	r3, [pc, #220]	@ (8006244 <HAL_RCC_ClockConfig+0x1bc>)
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	f023 0203 	bic.w	r2, r3, #3
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	4934      	ldr	r1, [pc, #208]	@ (8006244 <HAL_RCC_ClockConfig+0x1bc>)
 8006174:	4313      	orrs	r3, r2
 8006176:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006178:	f7fc fbba 	bl	80028f0 <HAL_GetTick>
 800617c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800617e:	e00a      	b.n	8006196 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006180:	f7fc fbb6 	bl	80028f0 <HAL_GetTick>
 8006184:	4602      	mov	r2, r0
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	1ad3      	subs	r3, r2, r3
 800618a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800618e:	4293      	cmp	r3, r2
 8006190:	d901      	bls.n	8006196 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006192:	2303      	movs	r3, #3
 8006194:	e04f      	b.n	8006236 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006196:	4b2b      	ldr	r3, [pc, #172]	@ (8006244 <HAL_RCC_ClockConfig+0x1bc>)
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	f003 020c 	and.w	r2, r3, #12
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d1eb      	bne.n	8006180 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80061a8:	4b25      	ldr	r3, [pc, #148]	@ (8006240 <HAL_RCC_ClockConfig+0x1b8>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f003 030f 	and.w	r3, r3, #15
 80061b0:	683a      	ldr	r2, [r7, #0]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d20c      	bcs.n	80061d0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061b6:	4b22      	ldr	r3, [pc, #136]	@ (8006240 <HAL_RCC_ClockConfig+0x1b8>)
 80061b8:	683a      	ldr	r2, [r7, #0]
 80061ba:	b2d2      	uxtb	r2, r2
 80061bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061be:	4b20      	ldr	r3, [pc, #128]	@ (8006240 <HAL_RCC_ClockConfig+0x1b8>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 030f 	and.w	r3, r3, #15
 80061c6:	683a      	ldr	r2, [r7, #0]
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d001      	beq.n	80061d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e032      	b.n	8006236 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0304 	and.w	r3, r3, #4
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d008      	beq.n	80061ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80061dc:	4b19      	ldr	r3, [pc, #100]	@ (8006244 <HAL_RCC_ClockConfig+0x1bc>)
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	4916      	ldr	r1, [pc, #88]	@ (8006244 <HAL_RCC_ClockConfig+0x1bc>)
 80061ea:	4313      	orrs	r3, r2
 80061ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 0308 	and.w	r3, r3, #8
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d009      	beq.n	800620e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80061fa:	4b12      	ldr	r3, [pc, #72]	@ (8006244 <HAL_RCC_ClockConfig+0x1bc>)
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	00db      	lsls	r3, r3, #3
 8006208:	490e      	ldr	r1, [pc, #56]	@ (8006244 <HAL_RCC_ClockConfig+0x1bc>)
 800620a:	4313      	orrs	r3, r2
 800620c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800620e:	f000 fb9d 	bl	800694c <HAL_RCC_GetSysClockFreq>
 8006212:	4602      	mov	r2, r0
 8006214:	4b0b      	ldr	r3, [pc, #44]	@ (8006244 <HAL_RCC_ClockConfig+0x1bc>)
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	091b      	lsrs	r3, r3, #4
 800621a:	f003 030f 	and.w	r3, r3, #15
 800621e:	490a      	ldr	r1, [pc, #40]	@ (8006248 <HAL_RCC_ClockConfig+0x1c0>)
 8006220:	5ccb      	ldrb	r3, [r1, r3]
 8006222:	fa22 f303 	lsr.w	r3, r2, r3
 8006226:	4a09      	ldr	r2, [pc, #36]	@ (800624c <HAL_RCC_ClockConfig+0x1c4>)
 8006228:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800622a:	4b09      	ldr	r3, [pc, #36]	@ (8006250 <HAL_RCC_ClockConfig+0x1c8>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4618      	mov	r0, r3
 8006230:	f7fb febe 	bl	8001fb0 <HAL_InitTick>

  return HAL_OK;
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	3710      	adds	r7, #16
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	40023c00 	.word	0x40023c00
 8006244:	40023800 	.word	0x40023800
 8006248:	080103ec 	.word	0x080103ec
 800624c:	20000004 	.word	0x20000004
 8006250:	20000008 	.word	0x20000008

08006254 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006254:	b480      	push	{r7}
 8006256:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006258:	4b03      	ldr	r3, [pc, #12]	@ (8006268 <HAL_RCC_GetHCLKFreq+0x14>)
 800625a:	681b      	ldr	r3, [r3, #0]
}
 800625c:	4618      	mov	r0, r3
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr
 8006266:	bf00      	nop
 8006268:	20000004 	.word	0x20000004

0800626c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006270:	f7ff fff0 	bl	8006254 <HAL_RCC_GetHCLKFreq>
 8006274:	4602      	mov	r2, r0
 8006276:	4b05      	ldr	r3, [pc, #20]	@ (800628c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	0a9b      	lsrs	r3, r3, #10
 800627c:	f003 0307 	and.w	r3, r3, #7
 8006280:	4903      	ldr	r1, [pc, #12]	@ (8006290 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006282:	5ccb      	ldrb	r3, [r1, r3]
 8006284:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006288:	4618      	mov	r0, r3
 800628a:	bd80      	pop	{r7, pc}
 800628c:	40023800 	.word	0x40023800
 8006290:	080103fc 	.word	0x080103fc

08006294 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	220f      	movs	r2, #15
 80062a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80062a4:	4b12      	ldr	r3, [pc, #72]	@ (80062f0 <HAL_RCC_GetClockConfig+0x5c>)
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	f003 0203 	and.w	r2, r3, #3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80062b0:	4b0f      	ldr	r3, [pc, #60]	@ (80062f0 <HAL_RCC_GetClockConfig+0x5c>)
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80062bc:	4b0c      	ldr	r3, [pc, #48]	@ (80062f0 <HAL_RCC_GetClockConfig+0x5c>)
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80062c8:	4b09      	ldr	r3, [pc, #36]	@ (80062f0 <HAL_RCC_GetClockConfig+0x5c>)
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	08db      	lsrs	r3, r3, #3
 80062ce:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80062d6:	4b07      	ldr	r3, [pc, #28]	@ (80062f4 <HAL_RCC_GetClockConfig+0x60>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 020f 	and.w	r2, r3, #15
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	601a      	str	r2, [r3, #0]
}
 80062e2:	bf00      	nop
 80062e4:	370c      	adds	r7, #12
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop
 80062f0:	40023800 	.word	0x40023800
 80062f4:	40023c00 	.word	0x40023c00

080062f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b08c      	sub	sp, #48	@ 0x30
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006300:	2300      	movs	r3, #0
 8006302:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8006304:	2300      	movs	r3, #0
 8006306:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8006308:	2300      	movs	r3, #0
 800630a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800630c:	2300      	movs	r3, #0
 800630e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8006310:	2300      	movs	r3, #0
 8006312:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8006314:	2300      	movs	r3, #0
 8006316:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8006318:	2300      	movs	r3, #0
 800631a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800631c:	2300      	movs	r3, #0
 800631e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8006320:	2300      	movs	r3, #0
 8006322:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f003 0301 	and.w	r3, r3, #1
 800632c:	2b00      	cmp	r3, #0
 800632e:	d010      	beq.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8006330:	4b6f      	ldr	r3, [pc, #444]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006332:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006336:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800633e:	496c      	ldr	r1, [pc, #432]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006340:	4313      	orrs	r3, r2
 8006342:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800634a:	2b00      	cmp	r3, #0
 800634c:	d101      	bne.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800634e:	2301      	movs	r3, #1
 8006350:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 0302 	and.w	r3, r3, #2
 800635a:	2b00      	cmp	r3, #0
 800635c:	d010      	beq.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800635e:	4b64      	ldr	r3, [pc, #400]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006360:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006364:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800636c:	4960      	ldr	r1, [pc, #384]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800636e:	4313      	orrs	r3, r2
 8006370:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006378:	2b00      	cmp	r3, #0
 800637a:	d101      	bne.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800637c:	2301      	movs	r3, #1
 800637e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f003 0304 	and.w	r3, r3, #4
 8006388:	2b00      	cmp	r3, #0
 800638a:	d017      	beq.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800638c:	4b58      	ldr	r3, [pc, #352]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800638e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006392:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800639a:	4955      	ldr	r1, [pc, #340]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800639c:	4313      	orrs	r3, r2
 800639e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063aa:	d101      	bne.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80063ac:	2301      	movs	r3, #1
 80063ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d101      	bne.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80063b8:	2301      	movs	r3, #1
 80063ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 0308 	and.w	r3, r3, #8
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d017      	beq.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80063c8:	4b49      	ldr	r3, [pc, #292]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80063ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80063ce:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063d6:	4946      	ldr	r1, [pc, #280]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80063d8:	4313      	orrs	r3, r2
 80063da:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80063e6:	d101      	bne.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80063e8:	2301      	movs	r3, #1
 80063ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d101      	bne.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80063f4:	2301      	movs	r3, #1
 80063f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 0320 	and.w	r3, r3, #32
 8006400:	2b00      	cmp	r3, #0
 8006402:	f000 808a 	beq.w	800651a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006406:	2300      	movs	r3, #0
 8006408:	60bb      	str	r3, [r7, #8]
 800640a:	4b39      	ldr	r3, [pc, #228]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800640c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800640e:	4a38      	ldr	r2, [pc, #224]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006410:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006414:	6413      	str	r3, [r2, #64]	@ 0x40
 8006416:	4b36      	ldr	r3, [pc, #216]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800641a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800641e:	60bb      	str	r3, [r7, #8]
 8006420:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006422:	4b34      	ldr	r3, [pc, #208]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a33      	ldr	r2, [pc, #204]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006428:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800642c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800642e:	f7fc fa5f 	bl	80028f0 <HAL_GetTick>
 8006432:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006434:	e008      	b.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006436:	f7fc fa5b 	bl	80028f0 <HAL_GetTick>
 800643a:	4602      	mov	r2, r0
 800643c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800643e:	1ad3      	subs	r3, r2, r3
 8006440:	2b02      	cmp	r3, #2
 8006442:	d901      	bls.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8006444:	2303      	movs	r3, #3
 8006446:	e278      	b.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006448:	4b2a      	ldr	r3, [pc, #168]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006450:	2b00      	cmp	r3, #0
 8006452:	d0f0      	beq.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006454:	4b26      	ldr	r3, [pc, #152]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006456:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006458:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800645c:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800645e:	6a3b      	ldr	r3, [r7, #32]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d02f      	beq.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006468:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800646c:	6a3a      	ldr	r2, [r7, #32]
 800646e:	429a      	cmp	r2, r3
 8006470:	d028      	beq.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006472:	4b1f      	ldr	r3, [pc, #124]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006474:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006476:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800647a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800647c:	4b1e      	ldr	r3, [pc, #120]	@ (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800647e:	2201      	movs	r2, #1
 8006480:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006482:	4b1d      	ldr	r3, [pc, #116]	@ (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8006484:	2200      	movs	r2, #0
 8006486:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006488:	4a19      	ldr	r2, [pc, #100]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800648a:	6a3b      	ldr	r3, [r7, #32]
 800648c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800648e:	4b18      	ldr	r3, [pc, #96]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006490:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006492:	f003 0301 	and.w	r3, r3, #1
 8006496:	2b01      	cmp	r3, #1
 8006498:	d114      	bne.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800649a:	f7fc fa29 	bl	80028f0 <HAL_GetTick>
 800649e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064a0:	e00a      	b.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064a2:	f7fc fa25 	bl	80028f0 <HAL_GetTick>
 80064a6:	4602      	mov	r2, r0
 80064a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064aa:	1ad3      	subs	r3, r2, r3
 80064ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d901      	bls.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80064b4:	2303      	movs	r3, #3
 80064b6:	e240      	b.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064b8:	4b0d      	ldr	r3, [pc, #52]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80064ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064bc:	f003 0302 	and.w	r3, r3, #2
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d0ee      	beq.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064d0:	d114      	bne.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x204>
 80064d2:	4b07      	ldr	r3, [pc, #28]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064de:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80064e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064e6:	4902      	ldr	r1, [pc, #8]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80064e8:	4313      	orrs	r3, r2
 80064ea:	608b      	str	r3, [r1, #8]
 80064ec:	e00c      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80064ee:	bf00      	nop
 80064f0:	40023800 	.word	0x40023800
 80064f4:	40007000 	.word	0x40007000
 80064f8:	42470e40 	.word	0x42470e40
 80064fc:	4b4a      	ldr	r3, [pc, #296]	@ (8006628 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	4a49      	ldr	r2, [pc, #292]	@ (8006628 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006502:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006506:	6093      	str	r3, [r2, #8]
 8006508:	4b47      	ldr	r3, [pc, #284]	@ (8006628 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800650a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006510:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006514:	4944      	ldr	r1, [pc, #272]	@ (8006628 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006516:	4313      	orrs	r3, r2
 8006518:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 0310 	and.w	r3, r3, #16
 8006522:	2b00      	cmp	r3, #0
 8006524:	d004      	beq.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800652c:	4b3f      	ldr	r3, [pc, #252]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800652e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00a      	beq.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800653c:	4b3a      	ldr	r3, [pc, #232]	@ (8006628 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800653e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006542:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800654a:	4937      	ldr	r1, [pc, #220]	@ (8006628 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800654c:	4313      	orrs	r3, r2
 800654e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00a      	beq.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800655e:	4b32      	ldr	r3, [pc, #200]	@ (8006628 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006560:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006564:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800656c:	492e      	ldr	r1, [pc, #184]	@ (8006628 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800656e:	4313      	orrs	r3, r2
 8006570:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800657c:	2b00      	cmp	r3, #0
 800657e:	d011      	beq.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006580:	4b29      	ldr	r3, [pc, #164]	@ (8006628 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006582:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006586:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800658e:	4926      	ldr	r1, [pc, #152]	@ (8006628 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006590:	4313      	orrs	r3, r2
 8006592:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800659a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800659e:	d101      	bne.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80065a0:	2301      	movs	r3, #1
 80065a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d00a      	beq.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80065b0:	4b1d      	ldr	r3, [pc, #116]	@ (8006628 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80065b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065b6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065be:	491a      	ldr	r1, [pc, #104]	@ (8006628 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80065c0:	4313      	orrs	r3, r2
 80065c2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d011      	beq.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80065d2:	4b15      	ldr	r3, [pc, #84]	@ (8006628 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80065d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065d8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065e0:	4911      	ldr	r1, [pc, #68]	@ (8006628 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80065e2:	4313      	orrs	r3, r2
 80065e4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065f0:	d101      	bne.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80065f2:	2301      	movs	r3, #1
 80065f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80065f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d005      	beq.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006604:	f040 80ff 	bne.w	8006806 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006608:	4b09      	ldr	r3, [pc, #36]	@ (8006630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800660a:	2200      	movs	r2, #0
 800660c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800660e:	f7fc f96f 	bl	80028f0 <HAL_GetTick>
 8006612:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006614:	e00e      	b.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006616:	f7fc f96b 	bl	80028f0 <HAL_GetTick>
 800661a:	4602      	mov	r2, r0
 800661c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800661e:	1ad3      	subs	r3, r2, r3
 8006620:	2b02      	cmp	r3, #2
 8006622:	d907      	bls.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006624:	2303      	movs	r3, #3
 8006626:	e188      	b.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8006628:	40023800 	.word	0x40023800
 800662c:	424711e0 	.word	0x424711e0
 8006630:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006634:	4b7e      	ldr	r3, [pc, #504]	@ (8006830 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800663c:	2b00      	cmp	r3, #0
 800663e:	d1ea      	bne.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 0301 	and.w	r3, r3, #1
 8006648:	2b00      	cmp	r3, #0
 800664a:	d003      	beq.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006650:	2b00      	cmp	r3, #0
 8006652:	d009      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800665c:	2b00      	cmp	r3, #0
 800665e:	d028      	beq.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006664:	2b00      	cmp	r3, #0
 8006666:	d124      	bne.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006668:	4b71      	ldr	r3, [pc, #452]	@ (8006830 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800666a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800666e:	0c1b      	lsrs	r3, r3, #16
 8006670:	f003 0303 	and.w	r3, r3, #3
 8006674:	3301      	adds	r3, #1
 8006676:	005b      	lsls	r3, r3, #1
 8006678:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800667a:	4b6d      	ldr	r3, [pc, #436]	@ (8006830 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800667c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006680:	0e1b      	lsrs	r3, r3, #24
 8006682:	f003 030f 	and.w	r3, r3, #15
 8006686:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	685a      	ldr	r2, [r3, #4]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	019b      	lsls	r3, r3, #6
 8006692:	431a      	orrs	r2, r3
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	085b      	lsrs	r3, r3, #1
 8006698:	3b01      	subs	r3, #1
 800669a:	041b      	lsls	r3, r3, #16
 800669c:	431a      	orrs	r2, r3
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	061b      	lsls	r3, r3, #24
 80066a2:	431a      	orrs	r2, r3
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	695b      	ldr	r3, [r3, #20]
 80066a8:	071b      	lsls	r3, r3, #28
 80066aa:	4961      	ldr	r1, [pc, #388]	@ (8006830 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80066ac:	4313      	orrs	r3, r2
 80066ae:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 0304 	and.w	r3, r3, #4
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d004      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80066c6:	d00a      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d035      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80066dc:	d130      	bne.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80066de:	4b54      	ldr	r3, [pc, #336]	@ (8006830 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80066e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066e4:	0c1b      	lsrs	r3, r3, #16
 80066e6:	f003 0303 	and.w	r3, r3, #3
 80066ea:	3301      	adds	r3, #1
 80066ec:	005b      	lsls	r3, r3, #1
 80066ee:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80066f0:	4b4f      	ldr	r3, [pc, #316]	@ (8006830 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80066f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066f6:	0f1b      	lsrs	r3, r3, #28
 80066f8:	f003 0307 	and.w	r3, r3, #7
 80066fc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	685a      	ldr	r2, [r3, #4]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	019b      	lsls	r3, r3, #6
 8006708:	431a      	orrs	r2, r3
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	085b      	lsrs	r3, r3, #1
 800670e:	3b01      	subs	r3, #1
 8006710:	041b      	lsls	r3, r3, #16
 8006712:	431a      	orrs	r2, r3
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	061b      	lsls	r3, r3, #24
 800671a:	431a      	orrs	r2, r3
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	071b      	lsls	r3, r3, #28
 8006720:	4943      	ldr	r1, [pc, #268]	@ (8006830 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006722:	4313      	orrs	r3, r2
 8006724:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006728:	4b41      	ldr	r3, [pc, #260]	@ (8006830 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800672a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800672e:	f023 021f 	bic.w	r2, r3, #31
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006736:	3b01      	subs	r3, #1
 8006738:	493d      	ldr	r1, [pc, #244]	@ (8006830 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800673a:	4313      	orrs	r3, r2
 800673c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006748:	2b00      	cmp	r3, #0
 800674a:	d029      	beq.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006750:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006754:	d124      	bne.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006756:	4b36      	ldr	r3, [pc, #216]	@ (8006830 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006758:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800675c:	0c1b      	lsrs	r3, r3, #16
 800675e:	f003 0303 	and.w	r3, r3, #3
 8006762:	3301      	adds	r3, #1
 8006764:	005b      	lsls	r3, r3, #1
 8006766:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006768:	4b31      	ldr	r3, [pc, #196]	@ (8006830 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800676a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800676e:	0f1b      	lsrs	r3, r3, #28
 8006770:	f003 0307 	and.w	r3, r3, #7
 8006774:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	685a      	ldr	r2, [r3, #4]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	019b      	lsls	r3, r3, #6
 8006780:	431a      	orrs	r2, r3
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	68db      	ldr	r3, [r3, #12]
 8006786:	085b      	lsrs	r3, r3, #1
 8006788:	3b01      	subs	r3, #1
 800678a:	041b      	lsls	r3, r3, #16
 800678c:	431a      	orrs	r2, r3
 800678e:	69bb      	ldr	r3, [r7, #24]
 8006790:	061b      	lsls	r3, r3, #24
 8006792:	431a      	orrs	r2, r3
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	071b      	lsls	r3, r3, #28
 8006798:	4925      	ldr	r1, [pc, #148]	@ (8006830 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800679a:	4313      	orrs	r3, r2
 800679c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d016      	beq.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	685a      	ldr	r2, [r3, #4]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	019b      	lsls	r3, r3, #6
 80067b6:	431a      	orrs	r2, r3
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	085b      	lsrs	r3, r3, #1
 80067be:	3b01      	subs	r3, #1
 80067c0:	041b      	lsls	r3, r3, #16
 80067c2:	431a      	orrs	r2, r3
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	691b      	ldr	r3, [r3, #16]
 80067c8:	061b      	lsls	r3, r3, #24
 80067ca:	431a      	orrs	r2, r3
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	695b      	ldr	r3, [r3, #20]
 80067d0:	071b      	lsls	r3, r3, #28
 80067d2:	4917      	ldr	r1, [pc, #92]	@ (8006830 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80067d4:	4313      	orrs	r3, r2
 80067d6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80067da:	4b16      	ldr	r3, [pc, #88]	@ (8006834 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80067dc:	2201      	movs	r2, #1
 80067de:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80067e0:	f7fc f886 	bl	80028f0 <HAL_GetTick>
 80067e4:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80067e6:	e008      	b.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80067e8:	f7fc f882 	bl	80028f0 <HAL_GetTick>
 80067ec:	4602      	mov	r2, r0
 80067ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f0:	1ad3      	subs	r3, r2, r3
 80067f2:	2b02      	cmp	r3, #2
 80067f4:	d901      	bls.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80067f6:	2303      	movs	r3, #3
 80067f8:	e09f      	b.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80067fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006830 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006802:	2b00      	cmp	r3, #0
 8006804:	d0f0      	beq.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8006806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006808:	2b01      	cmp	r3, #1
 800680a:	f040 8095 	bne.w	8006938 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800680e:	4b0a      	ldr	r3, [pc, #40]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8006810:	2200      	movs	r2, #0
 8006812:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006814:	f7fc f86c 	bl	80028f0 <HAL_GetTick>
 8006818:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800681a:	e00f      	b.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800681c:	f7fc f868 	bl	80028f0 <HAL_GetTick>
 8006820:	4602      	mov	r2, r0
 8006822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006824:	1ad3      	subs	r3, r2, r3
 8006826:	2b02      	cmp	r3, #2
 8006828:	d908      	bls.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800682a:	2303      	movs	r3, #3
 800682c:	e085      	b.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x642>
 800682e:	bf00      	nop
 8006830:	40023800 	.word	0x40023800
 8006834:	42470068 	.word	0x42470068
 8006838:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800683c:	4b41      	ldr	r3, [pc, #260]	@ (8006944 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006844:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006848:	d0e8      	beq.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 0304 	and.w	r3, r3, #4
 8006852:	2b00      	cmp	r3, #0
 8006854:	d003      	beq.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800685a:	2b00      	cmp	r3, #0
 800685c:	d009      	beq.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8006866:	2b00      	cmp	r3, #0
 8006868:	d02b      	beq.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800686e:	2b00      	cmp	r3, #0
 8006870:	d127      	bne.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8006872:	4b34      	ldr	r3, [pc, #208]	@ (8006944 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006874:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006878:	0c1b      	lsrs	r3, r3, #16
 800687a:	f003 0303 	and.w	r3, r3, #3
 800687e:	3301      	adds	r3, #1
 8006880:	005b      	lsls	r3, r3, #1
 8006882:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	699a      	ldr	r2, [r3, #24]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	69db      	ldr	r3, [r3, #28]
 800688c:	019b      	lsls	r3, r3, #6
 800688e:	431a      	orrs	r2, r3
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	085b      	lsrs	r3, r3, #1
 8006894:	3b01      	subs	r3, #1
 8006896:	041b      	lsls	r3, r3, #16
 8006898:	431a      	orrs	r2, r3
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800689e:	061b      	lsls	r3, r3, #24
 80068a0:	4928      	ldr	r1, [pc, #160]	@ (8006944 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80068a2:	4313      	orrs	r3, r2
 80068a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80068a8:	4b26      	ldr	r3, [pc, #152]	@ (8006944 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80068aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80068ae:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068b6:	3b01      	subs	r3, #1
 80068b8:	021b      	lsls	r3, r3, #8
 80068ba:	4922      	ldr	r1, [pc, #136]	@ (8006944 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80068bc:	4313      	orrs	r3, r2
 80068be:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d01d      	beq.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80068d6:	d118      	bne.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80068d8:	4b1a      	ldr	r3, [pc, #104]	@ (8006944 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80068da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068de:	0e1b      	lsrs	r3, r3, #24
 80068e0:	f003 030f 	and.w	r3, r3, #15
 80068e4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	699a      	ldr	r2, [r3, #24]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	69db      	ldr	r3, [r3, #28]
 80068ee:	019b      	lsls	r3, r3, #6
 80068f0:	431a      	orrs	r2, r3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6a1b      	ldr	r3, [r3, #32]
 80068f6:	085b      	lsrs	r3, r3, #1
 80068f8:	3b01      	subs	r3, #1
 80068fa:	041b      	lsls	r3, r3, #16
 80068fc:	431a      	orrs	r2, r3
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	061b      	lsls	r3, r3, #24
 8006902:	4910      	ldr	r1, [pc, #64]	@ (8006944 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006904:	4313      	orrs	r3, r2
 8006906:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800690a:	4b0f      	ldr	r3, [pc, #60]	@ (8006948 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800690c:	2201      	movs	r2, #1
 800690e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006910:	f7fb ffee 	bl	80028f0 <HAL_GetTick>
 8006914:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006916:	e008      	b.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006918:	f7fb ffea 	bl	80028f0 <HAL_GetTick>
 800691c:	4602      	mov	r2, r0
 800691e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006920:	1ad3      	subs	r3, r2, r3
 8006922:	2b02      	cmp	r3, #2
 8006924:	d901      	bls.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006926:	2303      	movs	r3, #3
 8006928:	e007      	b.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800692a:	4b06      	ldr	r3, [pc, #24]	@ (8006944 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006932:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006936:	d1ef      	bne.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3730      	adds	r7, #48	@ 0x30
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	40023800 	.word	0x40023800
 8006948:	42470070 	.word	0x42470070

0800694c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800694c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006950:	b0ae      	sub	sp, #184	@ 0xb8
 8006952:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006954:	2300      	movs	r3, #0
 8006956:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800695a:	2300      	movs	r3, #0
 800695c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8006960:	2300      	movs	r3, #0
 8006962:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8006966:	2300      	movs	r3, #0
 8006968:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800696c:	2300      	movs	r3, #0
 800696e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006972:	4bcb      	ldr	r3, [pc, #812]	@ (8006ca0 <HAL_RCC_GetSysClockFreq+0x354>)
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	f003 030c 	and.w	r3, r3, #12
 800697a:	2b0c      	cmp	r3, #12
 800697c:	f200 8206 	bhi.w	8006d8c <HAL_RCC_GetSysClockFreq+0x440>
 8006980:	a201      	add	r2, pc, #4	@ (adr r2, 8006988 <HAL_RCC_GetSysClockFreq+0x3c>)
 8006982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006986:	bf00      	nop
 8006988:	080069bd 	.word	0x080069bd
 800698c:	08006d8d 	.word	0x08006d8d
 8006990:	08006d8d 	.word	0x08006d8d
 8006994:	08006d8d 	.word	0x08006d8d
 8006998:	080069c5 	.word	0x080069c5
 800699c:	08006d8d 	.word	0x08006d8d
 80069a0:	08006d8d 	.word	0x08006d8d
 80069a4:	08006d8d 	.word	0x08006d8d
 80069a8:	080069cd 	.word	0x080069cd
 80069ac:	08006d8d 	.word	0x08006d8d
 80069b0:	08006d8d 	.word	0x08006d8d
 80069b4:	08006d8d 	.word	0x08006d8d
 80069b8:	08006bbd 	.word	0x08006bbd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80069bc:	4bb9      	ldr	r3, [pc, #740]	@ (8006ca4 <HAL_RCC_GetSysClockFreq+0x358>)
 80069be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80069c2:	e1e7      	b.n	8006d94 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80069c4:	4bb8      	ldr	r3, [pc, #736]	@ (8006ca8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80069c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80069ca:	e1e3      	b.n	8006d94 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80069cc:	4bb4      	ldr	r3, [pc, #720]	@ (8006ca0 <HAL_RCC_GetSysClockFreq+0x354>)
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80069d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80069d8:	4bb1      	ldr	r3, [pc, #708]	@ (8006ca0 <HAL_RCC_GetSysClockFreq+0x354>)
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d071      	beq.n	8006ac8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069e4:	4bae      	ldr	r3, [pc, #696]	@ (8006ca0 <HAL_RCC_GetSysClockFreq+0x354>)
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	099b      	lsrs	r3, r3, #6
 80069ea:	2200      	movs	r2, #0
 80069ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80069f0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80069f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80069f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006a00:	2300      	movs	r3, #0
 8006a02:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006a06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006a0a:	4622      	mov	r2, r4
 8006a0c:	462b      	mov	r3, r5
 8006a0e:	f04f 0000 	mov.w	r0, #0
 8006a12:	f04f 0100 	mov.w	r1, #0
 8006a16:	0159      	lsls	r1, r3, #5
 8006a18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a1c:	0150      	lsls	r0, r2, #5
 8006a1e:	4602      	mov	r2, r0
 8006a20:	460b      	mov	r3, r1
 8006a22:	4621      	mov	r1, r4
 8006a24:	1a51      	subs	r1, r2, r1
 8006a26:	6439      	str	r1, [r7, #64]	@ 0x40
 8006a28:	4629      	mov	r1, r5
 8006a2a:	eb63 0301 	sbc.w	r3, r3, r1
 8006a2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a30:	f04f 0200 	mov.w	r2, #0
 8006a34:	f04f 0300 	mov.w	r3, #0
 8006a38:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8006a3c:	4649      	mov	r1, r9
 8006a3e:	018b      	lsls	r3, r1, #6
 8006a40:	4641      	mov	r1, r8
 8006a42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006a46:	4641      	mov	r1, r8
 8006a48:	018a      	lsls	r2, r1, #6
 8006a4a:	4641      	mov	r1, r8
 8006a4c:	1a51      	subs	r1, r2, r1
 8006a4e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006a50:	4649      	mov	r1, r9
 8006a52:	eb63 0301 	sbc.w	r3, r3, r1
 8006a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a58:	f04f 0200 	mov.w	r2, #0
 8006a5c:	f04f 0300 	mov.w	r3, #0
 8006a60:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8006a64:	4649      	mov	r1, r9
 8006a66:	00cb      	lsls	r3, r1, #3
 8006a68:	4641      	mov	r1, r8
 8006a6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a6e:	4641      	mov	r1, r8
 8006a70:	00ca      	lsls	r2, r1, #3
 8006a72:	4610      	mov	r0, r2
 8006a74:	4619      	mov	r1, r3
 8006a76:	4603      	mov	r3, r0
 8006a78:	4622      	mov	r2, r4
 8006a7a:	189b      	adds	r3, r3, r2
 8006a7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a7e:	462b      	mov	r3, r5
 8006a80:	460a      	mov	r2, r1
 8006a82:	eb42 0303 	adc.w	r3, r2, r3
 8006a86:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a88:	f04f 0200 	mov.w	r2, #0
 8006a8c:	f04f 0300 	mov.w	r3, #0
 8006a90:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006a94:	4629      	mov	r1, r5
 8006a96:	024b      	lsls	r3, r1, #9
 8006a98:	4621      	mov	r1, r4
 8006a9a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006a9e:	4621      	mov	r1, r4
 8006aa0:	024a      	lsls	r2, r1, #9
 8006aa2:	4610      	mov	r0, r2
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006ab0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006ab4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006ab8:	f7fa f838 	bl	8000b2c <__aeabi_uldivmod>
 8006abc:	4602      	mov	r2, r0
 8006abe:	460b      	mov	r3, r1
 8006ac0:	4613      	mov	r3, r2
 8006ac2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006ac6:	e067      	b.n	8006b98 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ac8:	4b75      	ldr	r3, [pc, #468]	@ (8006ca0 <HAL_RCC_GetSysClockFreq+0x354>)
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	099b      	lsrs	r3, r3, #6
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006ad4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8006ad8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006adc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ae0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006ae6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8006aea:	4622      	mov	r2, r4
 8006aec:	462b      	mov	r3, r5
 8006aee:	f04f 0000 	mov.w	r0, #0
 8006af2:	f04f 0100 	mov.w	r1, #0
 8006af6:	0159      	lsls	r1, r3, #5
 8006af8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006afc:	0150      	lsls	r0, r2, #5
 8006afe:	4602      	mov	r2, r0
 8006b00:	460b      	mov	r3, r1
 8006b02:	4621      	mov	r1, r4
 8006b04:	1a51      	subs	r1, r2, r1
 8006b06:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006b08:	4629      	mov	r1, r5
 8006b0a:	eb63 0301 	sbc.w	r3, r3, r1
 8006b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b10:	f04f 0200 	mov.w	r2, #0
 8006b14:	f04f 0300 	mov.w	r3, #0
 8006b18:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8006b1c:	4649      	mov	r1, r9
 8006b1e:	018b      	lsls	r3, r1, #6
 8006b20:	4641      	mov	r1, r8
 8006b22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006b26:	4641      	mov	r1, r8
 8006b28:	018a      	lsls	r2, r1, #6
 8006b2a:	4641      	mov	r1, r8
 8006b2c:	ebb2 0a01 	subs.w	sl, r2, r1
 8006b30:	4649      	mov	r1, r9
 8006b32:	eb63 0b01 	sbc.w	fp, r3, r1
 8006b36:	f04f 0200 	mov.w	r2, #0
 8006b3a:	f04f 0300 	mov.w	r3, #0
 8006b3e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006b42:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006b46:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b4a:	4692      	mov	sl, r2
 8006b4c:	469b      	mov	fp, r3
 8006b4e:	4623      	mov	r3, r4
 8006b50:	eb1a 0303 	adds.w	r3, sl, r3
 8006b54:	623b      	str	r3, [r7, #32]
 8006b56:	462b      	mov	r3, r5
 8006b58:	eb4b 0303 	adc.w	r3, fp, r3
 8006b5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b5e:	f04f 0200 	mov.w	r2, #0
 8006b62:	f04f 0300 	mov.w	r3, #0
 8006b66:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006b6a:	4629      	mov	r1, r5
 8006b6c:	028b      	lsls	r3, r1, #10
 8006b6e:	4621      	mov	r1, r4
 8006b70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006b74:	4621      	mov	r1, r4
 8006b76:	028a      	lsls	r2, r1, #10
 8006b78:	4610      	mov	r0, r2
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006b80:	2200      	movs	r2, #0
 8006b82:	673b      	str	r3, [r7, #112]	@ 0x70
 8006b84:	677a      	str	r2, [r7, #116]	@ 0x74
 8006b86:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8006b8a:	f7f9 ffcf 	bl	8000b2c <__aeabi_uldivmod>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	460b      	mov	r3, r1
 8006b92:	4613      	mov	r3, r2
 8006b94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006b98:	4b41      	ldr	r3, [pc, #260]	@ (8006ca0 <HAL_RCC_GetSysClockFreq+0x354>)
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	0c1b      	lsrs	r3, r3, #16
 8006b9e:	f003 0303 	and.w	r3, r3, #3
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	005b      	lsls	r3, r3, #1
 8006ba6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8006baa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006bae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bb6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006bba:	e0eb      	b.n	8006d94 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006bbc:	4b38      	ldr	r3, [pc, #224]	@ (8006ca0 <HAL_RCC_GetSysClockFreq+0x354>)
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006bc4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006bc8:	4b35      	ldr	r3, [pc, #212]	@ (8006ca0 <HAL_RCC_GetSysClockFreq+0x354>)
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d06b      	beq.n	8006cac <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006bd4:	4b32      	ldr	r3, [pc, #200]	@ (8006ca0 <HAL_RCC_GetSysClockFreq+0x354>)
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	099b      	lsrs	r3, r3, #6
 8006bda:	2200      	movs	r2, #0
 8006bdc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006bde:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006be0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006be6:	663b      	str	r3, [r7, #96]	@ 0x60
 8006be8:	2300      	movs	r3, #0
 8006bea:	667b      	str	r3, [r7, #100]	@ 0x64
 8006bec:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8006bf0:	4622      	mov	r2, r4
 8006bf2:	462b      	mov	r3, r5
 8006bf4:	f04f 0000 	mov.w	r0, #0
 8006bf8:	f04f 0100 	mov.w	r1, #0
 8006bfc:	0159      	lsls	r1, r3, #5
 8006bfe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c02:	0150      	lsls	r0, r2, #5
 8006c04:	4602      	mov	r2, r0
 8006c06:	460b      	mov	r3, r1
 8006c08:	4621      	mov	r1, r4
 8006c0a:	1a51      	subs	r1, r2, r1
 8006c0c:	61b9      	str	r1, [r7, #24]
 8006c0e:	4629      	mov	r1, r5
 8006c10:	eb63 0301 	sbc.w	r3, r3, r1
 8006c14:	61fb      	str	r3, [r7, #28]
 8006c16:	f04f 0200 	mov.w	r2, #0
 8006c1a:	f04f 0300 	mov.w	r3, #0
 8006c1e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8006c22:	4659      	mov	r1, fp
 8006c24:	018b      	lsls	r3, r1, #6
 8006c26:	4651      	mov	r1, sl
 8006c28:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006c2c:	4651      	mov	r1, sl
 8006c2e:	018a      	lsls	r2, r1, #6
 8006c30:	4651      	mov	r1, sl
 8006c32:	ebb2 0801 	subs.w	r8, r2, r1
 8006c36:	4659      	mov	r1, fp
 8006c38:	eb63 0901 	sbc.w	r9, r3, r1
 8006c3c:	f04f 0200 	mov.w	r2, #0
 8006c40:	f04f 0300 	mov.w	r3, #0
 8006c44:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c48:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c4c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c50:	4690      	mov	r8, r2
 8006c52:	4699      	mov	r9, r3
 8006c54:	4623      	mov	r3, r4
 8006c56:	eb18 0303 	adds.w	r3, r8, r3
 8006c5a:	613b      	str	r3, [r7, #16]
 8006c5c:	462b      	mov	r3, r5
 8006c5e:	eb49 0303 	adc.w	r3, r9, r3
 8006c62:	617b      	str	r3, [r7, #20]
 8006c64:	f04f 0200 	mov.w	r2, #0
 8006c68:	f04f 0300 	mov.w	r3, #0
 8006c6c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006c70:	4629      	mov	r1, r5
 8006c72:	024b      	lsls	r3, r1, #9
 8006c74:	4621      	mov	r1, r4
 8006c76:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006c7a:	4621      	mov	r1, r4
 8006c7c:	024a      	lsls	r2, r1, #9
 8006c7e:	4610      	mov	r0, r2
 8006c80:	4619      	mov	r1, r3
 8006c82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006c86:	2200      	movs	r2, #0
 8006c88:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006c8a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8006c8c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006c90:	f7f9 ff4c 	bl	8000b2c <__aeabi_uldivmod>
 8006c94:	4602      	mov	r2, r0
 8006c96:	460b      	mov	r3, r1
 8006c98:	4613      	mov	r3, r2
 8006c9a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c9e:	e065      	b.n	8006d6c <HAL_RCC_GetSysClockFreq+0x420>
 8006ca0:	40023800 	.word	0x40023800
 8006ca4:	00f42400 	.word	0x00f42400
 8006ca8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006cac:	4b3d      	ldr	r3, [pc, #244]	@ (8006da4 <HAL_RCC_GetSysClockFreq+0x458>)
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	099b      	lsrs	r3, r3, #6
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	4611      	mov	r1, r2
 8006cb8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006cbc:	653b      	str	r3, [r7, #80]	@ 0x50
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	657b      	str	r3, [r7, #84]	@ 0x54
 8006cc2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8006cc6:	4642      	mov	r2, r8
 8006cc8:	464b      	mov	r3, r9
 8006cca:	f04f 0000 	mov.w	r0, #0
 8006cce:	f04f 0100 	mov.w	r1, #0
 8006cd2:	0159      	lsls	r1, r3, #5
 8006cd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006cd8:	0150      	lsls	r0, r2, #5
 8006cda:	4602      	mov	r2, r0
 8006cdc:	460b      	mov	r3, r1
 8006cde:	4641      	mov	r1, r8
 8006ce0:	1a51      	subs	r1, r2, r1
 8006ce2:	60b9      	str	r1, [r7, #8]
 8006ce4:	4649      	mov	r1, r9
 8006ce6:	eb63 0301 	sbc.w	r3, r3, r1
 8006cea:	60fb      	str	r3, [r7, #12]
 8006cec:	f04f 0200 	mov.w	r2, #0
 8006cf0:	f04f 0300 	mov.w	r3, #0
 8006cf4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006cf8:	4659      	mov	r1, fp
 8006cfa:	018b      	lsls	r3, r1, #6
 8006cfc:	4651      	mov	r1, sl
 8006cfe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006d02:	4651      	mov	r1, sl
 8006d04:	018a      	lsls	r2, r1, #6
 8006d06:	4651      	mov	r1, sl
 8006d08:	1a54      	subs	r4, r2, r1
 8006d0a:	4659      	mov	r1, fp
 8006d0c:	eb63 0501 	sbc.w	r5, r3, r1
 8006d10:	f04f 0200 	mov.w	r2, #0
 8006d14:	f04f 0300 	mov.w	r3, #0
 8006d18:	00eb      	lsls	r3, r5, #3
 8006d1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d1e:	00e2      	lsls	r2, r4, #3
 8006d20:	4614      	mov	r4, r2
 8006d22:	461d      	mov	r5, r3
 8006d24:	4643      	mov	r3, r8
 8006d26:	18e3      	adds	r3, r4, r3
 8006d28:	603b      	str	r3, [r7, #0]
 8006d2a:	464b      	mov	r3, r9
 8006d2c:	eb45 0303 	adc.w	r3, r5, r3
 8006d30:	607b      	str	r3, [r7, #4]
 8006d32:	f04f 0200 	mov.w	r2, #0
 8006d36:	f04f 0300 	mov.w	r3, #0
 8006d3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006d3e:	4629      	mov	r1, r5
 8006d40:	028b      	lsls	r3, r1, #10
 8006d42:	4621      	mov	r1, r4
 8006d44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006d48:	4621      	mov	r1, r4
 8006d4a:	028a      	lsls	r2, r1, #10
 8006d4c:	4610      	mov	r0, r2
 8006d4e:	4619      	mov	r1, r3
 8006d50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d54:	2200      	movs	r2, #0
 8006d56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d58:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006d5a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006d5e:	f7f9 fee5 	bl	8000b2c <__aeabi_uldivmod>
 8006d62:	4602      	mov	r2, r0
 8006d64:	460b      	mov	r3, r1
 8006d66:	4613      	mov	r3, r2
 8006d68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006d6c:	4b0d      	ldr	r3, [pc, #52]	@ (8006da4 <HAL_RCC_GetSysClockFreq+0x458>)
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	0f1b      	lsrs	r3, r3, #28
 8006d72:	f003 0307 	and.w	r3, r3, #7
 8006d76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8006d7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006d7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d86:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006d8a:	e003      	b.n	8006d94 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006d8c:	4b06      	ldr	r3, [pc, #24]	@ (8006da8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8006d8e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006d92:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d94:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	37b8      	adds	r7, #184	@ 0xb8
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006da2:	bf00      	nop
 8006da4:	40023800 	.word	0x40023800
 8006da8:	00f42400 	.word	0x00f42400

08006dac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b086      	sub	sp, #24
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d101      	bne.n	8006dbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	e28d      	b.n	80072da <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 0301 	and.w	r3, r3, #1
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	f000 8083 	beq.w	8006ed2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006dcc:	4b94      	ldr	r3, [pc, #592]	@ (8007020 <HAL_RCC_OscConfig+0x274>)
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	f003 030c 	and.w	r3, r3, #12
 8006dd4:	2b04      	cmp	r3, #4
 8006dd6:	d019      	beq.n	8006e0c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006dd8:	4b91      	ldr	r3, [pc, #580]	@ (8007020 <HAL_RCC_OscConfig+0x274>)
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	f003 030c 	and.w	r3, r3, #12
        || \
 8006de0:	2b08      	cmp	r3, #8
 8006de2:	d106      	bne.n	8006df2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006de4:	4b8e      	ldr	r3, [pc, #568]	@ (8007020 <HAL_RCC_OscConfig+0x274>)
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006dec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006df0:	d00c      	beq.n	8006e0c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006df2:	4b8b      	ldr	r3, [pc, #556]	@ (8007020 <HAL_RCC_OscConfig+0x274>)
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006dfa:	2b0c      	cmp	r3, #12
 8006dfc:	d112      	bne.n	8006e24 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006dfe:	4b88      	ldr	r3, [pc, #544]	@ (8007020 <HAL_RCC_OscConfig+0x274>)
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e06:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006e0a:	d10b      	bne.n	8006e24 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e0c:	4b84      	ldr	r3, [pc, #528]	@ (8007020 <HAL_RCC_OscConfig+0x274>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d05b      	beq.n	8006ed0 <HAL_RCC_OscConfig+0x124>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d157      	bne.n	8006ed0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	e25a      	b.n	80072da <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e2c:	d106      	bne.n	8006e3c <HAL_RCC_OscConfig+0x90>
 8006e2e:	4b7c      	ldr	r3, [pc, #496]	@ (8007020 <HAL_RCC_OscConfig+0x274>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a7b      	ldr	r2, [pc, #492]	@ (8007020 <HAL_RCC_OscConfig+0x274>)
 8006e34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e38:	6013      	str	r3, [r2, #0]
 8006e3a:	e01d      	b.n	8006e78 <HAL_RCC_OscConfig+0xcc>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006e44:	d10c      	bne.n	8006e60 <HAL_RCC_OscConfig+0xb4>
 8006e46:	4b76      	ldr	r3, [pc, #472]	@ (8007020 <HAL_RCC_OscConfig+0x274>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a75      	ldr	r2, [pc, #468]	@ (8007020 <HAL_RCC_OscConfig+0x274>)
 8006e4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006e50:	6013      	str	r3, [r2, #0]
 8006e52:	4b73      	ldr	r3, [pc, #460]	@ (8007020 <HAL_RCC_OscConfig+0x274>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a72      	ldr	r2, [pc, #456]	@ (8007020 <HAL_RCC_OscConfig+0x274>)
 8006e58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e5c:	6013      	str	r3, [r2, #0]
 8006e5e:	e00b      	b.n	8006e78 <HAL_RCC_OscConfig+0xcc>
 8006e60:	4b6f      	ldr	r3, [pc, #444]	@ (8007020 <HAL_RCC_OscConfig+0x274>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a6e      	ldr	r2, [pc, #440]	@ (8007020 <HAL_RCC_OscConfig+0x274>)
 8006e66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e6a:	6013      	str	r3, [r2, #0]
 8006e6c:	4b6c      	ldr	r3, [pc, #432]	@ (8007020 <HAL_RCC_OscConfig+0x274>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a6b      	ldr	r2, [pc, #428]	@ (8007020 <HAL_RCC_OscConfig+0x274>)
 8006e72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006e76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d013      	beq.n	8006ea8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e80:	f7fb fd36 	bl	80028f0 <HAL_GetTick>
 8006e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e86:	e008      	b.n	8006e9a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e88:	f7fb fd32 	bl	80028f0 <HAL_GetTick>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	1ad3      	subs	r3, r2, r3
 8006e92:	2b64      	cmp	r3, #100	@ 0x64
 8006e94:	d901      	bls.n	8006e9a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006e96:	2303      	movs	r3, #3
 8006e98:	e21f      	b.n	80072da <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e9a:	4b61      	ldr	r3, [pc, #388]	@ (8007020 <HAL_RCC_OscConfig+0x274>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d0f0      	beq.n	8006e88 <HAL_RCC_OscConfig+0xdc>
 8006ea6:	e014      	b.n	8006ed2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ea8:	f7fb fd22 	bl	80028f0 <HAL_GetTick>
 8006eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006eae:	e008      	b.n	8006ec2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006eb0:	f7fb fd1e 	bl	80028f0 <HAL_GetTick>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	1ad3      	subs	r3, r2, r3
 8006eba:	2b64      	cmp	r3, #100	@ 0x64
 8006ebc:	d901      	bls.n	8006ec2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006ebe:	2303      	movs	r3, #3
 8006ec0:	e20b      	b.n	80072da <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ec2:	4b57      	ldr	r3, [pc, #348]	@ (8007020 <HAL_RCC_OscConfig+0x274>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d1f0      	bne.n	8006eb0 <HAL_RCC_OscConfig+0x104>
 8006ece:	e000      	b.n	8006ed2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ed0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f003 0302 	and.w	r3, r3, #2
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d06f      	beq.n	8006fbe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006ede:	4b50      	ldr	r3, [pc, #320]	@ (8007020 <HAL_RCC_OscConfig+0x274>)
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	f003 030c 	and.w	r3, r3, #12
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d017      	beq.n	8006f1a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006eea:	4b4d      	ldr	r3, [pc, #308]	@ (8007020 <HAL_RCC_OscConfig+0x274>)
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	f003 030c 	and.w	r3, r3, #12
        || \
 8006ef2:	2b08      	cmp	r3, #8
 8006ef4:	d105      	bne.n	8006f02 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006ef6:	4b4a      	ldr	r3, [pc, #296]	@ (8007020 <HAL_RCC_OscConfig+0x274>)
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d00b      	beq.n	8006f1a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f02:	4b47      	ldr	r3, [pc, #284]	@ (8007020 <HAL_RCC_OscConfig+0x274>)
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006f0a:	2b0c      	cmp	r3, #12
 8006f0c:	d11c      	bne.n	8006f48 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f0e:	4b44      	ldr	r3, [pc, #272]	@ (8007020 <HAL_RCC_OscConfig+0x274>)
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d116      	bne.n	8006f48 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f1a:	4b41      	ldr	r3, [pc, #260]	@ (8007020 <HAL_RCC_OscConfig+0x274>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f003 0302 	and.w	r3, r3, #2
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d005      	beq.n	8006f32 <HAL_RCC_OscConfig+0x186>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d001      	beq.n	8006f32 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e1d3      	b.n	80072da <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f32:	4b3b      	ldr	r3, [pc, #236]	@ (8007020 <HAL_RCC_OscConfig+0x274>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	691b      	ldr	r3, [r3, #16]
 8006f3e:	00db      	lsls	r3, r3, #3
 8006f40:	4937      	ldr	r1, [pc, #220]	@ (8007020 <HAL_RCC_OscConfig+0x274>)
 8006f42:	4313      	orrs	r3, r2
 8006f44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f46:	e03a      	b.n	8006fbe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d020      	beq.n	8006f92 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f50:	4b34      	ldr	r3, [pc, #208]	@ (8007024 <HAL_RCC_OscConfig+0x278>)
 8006f52:	2201      	movs	r2, #1
 8006f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f56:	f7fb fccb 	bl	80028f0 <HAL_GetTick>
 8006f5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f5c:	e008      	b.n	8006f70 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f5e:	f7fb fcc7 	bl	80028f0 <HAL_GetTick>
 8006f62:	4602      	mov	r2, r0
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	1ad3      	subs	r3, r2, r3
 8006f68:	2b02      	cmp	r3, #2
 8006f6a:	d901      	bls.n	8006f70 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006f6c:	2303      	movs	r3, #3
 8006f6e:	e1b4      	b.n	80072da <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f70:	4b2b      	ldr	r3, [pc, #172]	@ (8007020 <HAL_RCC_OscConfig+0x274>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f003 0302 	and.w	r3, r3, #2
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d0f0      	beq.n	8006f5e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f7c:	4b28      	ldr	r3, [pc, #160]	@ (8007020 <HAL_RCC_OscConfig+0x274>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	00db      	lsls	r3, r3, #3
 8006f8a:	4925      	ldr	r1, [pc, #148]	@ (8007020 <HAL_RCC_OscConfig+0x274>)
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	600b      	str	r3, [r1, #0]
 8006f90:	e015      	b.n	8006fbe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f92:	4b24      	ldr	r3, [pc, #144]	@ (8007024 <HAL_RCC_OscConfig+0x278>)
 8006f94:	2200      	movs	r2, #0
 8006f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f98:	f7fb fcaa 	bl	80028f0 <HAL_GetTick>
 8006f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f9e:	e008      	b.n	8006fb2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006fa0:	f7fb fca6 	bl	80028f0 <HAL_GetTick>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	1ad3      	subs	r3, r2, r3
 8006faa:	2b02      	cmp	r3, #2
 8006fac:	d901      	bls.n	8006fb2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006fae:	2303      	movs	r3, #3
 8006fb0:	e193      	b.n	80072da <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006fb2:	4b1b      	ldr	r3, [pc, #108]	@ (8007020 <HAL_RCC_OscConfig+0x274>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f003 0302 	and.w	r3, r3, #2
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d1f0      	bne.n	8006fa0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f003 0308 	and.w	r3, r3, #8
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d036      	beq.n	8007038 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	695b      	ldr	r3, [r3, #20]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d016      	beq.n	8007000 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006fd2:	4b15      	ldr	r3, [pc, #84]	@ (8007028 <HAL_RCC_OscConfig+0x27c>)
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fd8:	f7fb fc8a 	bl	80028f0 <HAL_GetTick>
 8006fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006fde:	e008      	b.n	8006ff2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006fe0:	f7fb fc86 	bl	80028f0 <HAL_GetTick>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	1ad3      	subs	r3, r2, r3
 8006fea:	2b02      	cmp	r3, #2
 8006fec:	d901      	bls.n	8006ff2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006fee:	2303      	movs	r3, #3
 8006ff0:	e173      	b.n	80072da <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8007020 <HAL_RCC_OscConfig+0x274>)
 8006ff4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ff6:	f003 0302 	and.w	r3, r3, #2
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d0f0      	beq.n	8006fe0 <HAL_RCC_OscConfig+0x234>
 8006ffe:	e01b      	b.n	8007038 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007000:	4b09      	ldr	r3, [pc, #36]	@ (8007028 <HAL_RCC_OscConfig+0x27c>)
 8007002:	2200      	movs	r2, #0
 8007004:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007006:	f7fb fc73 	bl	80028f0 <HAL_GetTick>
 800700a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800700c:	e00e      	b.n	800702c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800700e:	f7fb fc6f 	bl	80028f0 <HAL_GetTick>
 8007012:	4602      	mov	r2, r0
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	1ad3      	subs	r3, r2, r3
 8007018:	2b02      	cmp	r3, #2
 800701a:	d907      	bls.n	800702c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800701c:	2303      	movs	r3, #3
 800701e:	e15c      	b.n	80072da <HAL_RCC_OscConfig+0x52e>
 8007020:	40023800 	.word	0x40023800
 8007024:	42470000 	.word	0x42470000
 8007028:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800702c:	4b8a      	ldr	r3, [pc, #552]	@ (8007258 <HAL_RCC_OscConfig+0x4ac>)
 800702e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007030:	f003 0302 	and.w	r3, r3, #2
 8007034:	2b00      	cmp	r3, #0
 8007036:	d1ea      	bne.n	800700e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 0304 	and.w	r3, r3, #4
 8007040:	2b00      	cmp	r3, #0
 8007042:	f000 8097 	beq.w	8007174 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007046:	2300      	movs	r3, #0
 8007048:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800704a:	4b83      	ldr	r3, [pc, #524]	@ (8007258 <HAL_RCC_OscConfig+0x4ac>)
 800704c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800704e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007052:	2b00      	cmp	r3, #0
 8007054:	d10f      	bne.n	8007076 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007056:	2300      	movs	r3, #0
 8007058:	60bb      	str	r3, [r7, #8]
 800705a:	4b7f      	ldr	r3, [pc, #508]	@ (8007258 <HAL_RCC_OscConfig+0x4ac>)
 800705c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800705e:	4a7e      	ldr	r2, [pc, #504]	@ (8007258 <HAL_RCC_OscConfig+0x4ac>)
 8007060:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007064:	6413      	str	r3, [r2, #64]	@ 0x40
 8007066:	4b7c      	ldr	r3, [pc, #496]	@ (8007258 <HAL_RCC_OscConfig+0x4ac>)
 8007068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800706a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800706e:	60bb      	str	r3, [r7, #8]
 8007070:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007072:	2301      	movs	r3, #1
 8007074:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007076:	4b79      	ldr	r3, [pc, #484]	@ (800725c <HAL_RCC_OscConfig+0x4b0>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800707e:	2b00      	cmp	r3, #0
 8007080:	d118      	bne.n	80070b4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007082:	4b76      	ldr	r3, [pc, #472]	@ (800725c <HAL_RCC_OscConfig+0x4b0>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a75      	ldr	r2, [pc, #468]	@ (800725c <HAL_RCC_OscConfig+0x4b0>)
 8007088:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800708c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800708e:	f7fb fc2f 	bl	80028f0 <HAL_GetTick>
 8007092:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007094:	e008      	b.n	80070a8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007096:	f7fb fc2b 	bl	80028f0 <HAL_GetTick>
 800709a:	4602      	mov	r2, r0
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	1ad3      	subs	r3, r2, r3
 80070a0:	2b02      	cmp	r3, #2
 80070a2:	d901      	bls.n	80070a8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80070a4:	2303      	movs	r3, #3
 80070a6:	e118      	b.n	80072da <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070a8:	4b6c      	ldr	r3, [pc, #432]	@ (800725c <HAL_RCC_OscConfig+0x4b0>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d0f0      	beq.n	8007096 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d106      	bne.n	80070ca <HAL_RCC_OscConfig+0x31e>
 80070bc:	4b66      	ldr	r3, [pc, #408]	@ (8007258 <HAL_RCC_OscConfig+0x4ac>)
 80070be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070c0:	4a65      	ldr	r2, [pc, #404]	@ (8007258 <HAL_RCC_OscConfig+0x4ac>)
 80070c2:	f043 0301 	orr.w	r3, r3, #1
 80070c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80070c8:	e01c      	b.n	8007104 <HAL_RCC_OscConfig+0x358>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	2b05      	cmp	r3, #5
 80070d0:	d10c      	bne.n	80070ec <HAL_RCC_OscConfig+0x340>
 80070d2:	4b61      	ldr	r3, [pc, #388]	@ (8007258 <HAL_RCC_OscConfig+0x4ac>)
 80070d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070d6:	4a60      	ldr	r2, [pc, #384]	@ (8007258 <HAL_RCC_OscConfig+0x4ac>)
 80070d8:	f043 0304 	orr.w	r3, r3, #4
 80070dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80070de:	4b5e      	ldr	r3, [pc, #376]	@ (8007258 <HAL_RCC_OscConfig+0x4ac>)
 80070e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070e2:	4a5d      	ldr	r2, [pc, #372]	@ (8007258 <HAL_RCC_OscConfig+0x4ac>)
 80070e4:	f043 0301 	orr.w	r3, r3, #1
 80070e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80070ea:	e00b      	b.n	8007104 <HAL_RCC_OscConfig+0x358>
 80070ec:	4b5a      	ldr	r3, [pc, #360]	@ (8007258 <HAL_RCC_OscConfig+0x4ac>)
 80070ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070f0:	4a59      	ldr	r2, [pc, #356]	@ (8007258 <HAL_RCC_OscConfig+0x4ac>)
 80070f2:	f023 0301 	bic.w	r3, r3, #1
 80070f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80070f8:	4b57      	ldr	r3, [pc, #348]	@ (8007258 <HAL_RCC_OscConfig+0x4ac>)
 80070fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070fc:	4a56      	ldr	r2, [pc, #344]	@ (8007258 <HAL_RCC_OscConfig+0x4ac>)
 80070fe:	f023 0304 	bic.w	r3, r3, #4
 8007102:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d015      	beq.n	8007138 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800710c:	f7fb fbf0 	bl	80028f0 <HAL_GetTick>
 8007110:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007112:	e00a      	b.n	800712a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007114:	f7fb fbec 	bl	80028f0 <HAL_GetTick>
 8007118:	4602      	mov	r2, r0
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	1ad3      	subs	r3, r2, r3
 800711e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007122:	4293      	cmp	r3, r2
 8007124:	d901      	bls.n	800712a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8007126:	2303      	movs	r3, #3
 8007128:	e0d7      	b.n	80072da <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800712a:	4b4b      	ldr	r3, [pc, #300]	@ (8007258 <HAL_RCC_OscConfig+0x4ac>)
 800712c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800712e:	f003 0302 	and.w	r3, r3, #2
 8007132:	2b00      	cmp	r3, #0
 8007134:	d0ee      	beq.n	8007114 <HAL_RCC_OscConfig+0x368>
 8007136:	e014      	b.n	8007162 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007138:	f7fb fbda 	bl	80028f0 <HAL_GetTick>
 800713c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800713e:	e00a      	b.n	8007156 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007140:	f7fb fbd6 	bl	80028f0 <HAL_GetTick>
 8007144:	4602      	mov	r2, r0
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	1ad3      	subs	r3, r2, r3
 800714a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800714e:	4293      	cmp	r3, r2
 8007150:	d901      	bls.n	8007156 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007152:	2303      	movs	r3, #3
 8007154:	e0c1      	b.n	80072da <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007156:	4b40      	ldr	r3, [pc, #256]	@ (8007258 <HAL_RCC_OscConfig+0x4ac>)
 8007158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800715a:	f003 0302 	and.w	r3, r3, #2
 800715e:	2b00      	cmp	r3, #0
 8007160:	d1ee      	bne.n	8007140 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007162:	7dfb      	ldrb	r3, [r7, #23]
 8007164:	2b01      	cmp	r3, #1
 8007166:	d105      	bne.n	8007174 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007168:	4b3b      	ldr	r3, [pc, #236]	@ (8007258 <HAL_RCC_OscConfig+0x4ac>)
 800716a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800716c:	4a3a      	ldr	r2, [pc, #232]	@ (8007258 <HAL_RCC_OscConfig+0x4ac>)
 800716e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007172:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	699b      	ldr	r3, [r3, #24]
 8007178:	2b00      	cmp	r3, #0
 800717a:	f000 80ad 	beq.w	80072d8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800717e:	4b36      	ldr	r3, [pc, #216]	@ (8007258 <HAL_RCC_OscConfig+0x4ac>)
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	f003 030c 	and.w	r3, r3, #12
 8007186:	2b08      	cmp	r3, #8
 8007188:	d060      	beq.n	800724c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	699b      	ldr	r3, [r3, #24]
 800718e:	2b02      	cmp	r3, #2
 8007190:	d145      	bne.n	800721e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007192:	4b33      	ldr	r3, [pc, #204]	@ (8007260 <HAL_RCC_OscConfig+0x4b4>)
 8007194:	2200      	movs	r2, #0
 8007196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007198:	f7fb fbaa 	bl	80028f0 <HAL_GetTick>
 800719c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800719e:	e008      	b.n	80071b2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071a0:	f7fb fba6 	bl	80028f0 <HAL_GetTick>
 80071a4:	4602      	mov	r2, r0
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	1ad3      	subs	r3, r2, r3
 80071aa:	2b02      	cmp	r3, #2
 80071ac:	d901      	bls.n	80071b2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80071ae:	2303      	movs	r3, #3
 80071b0:	e093      	b.n	80072da <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071b2:	4b29      	ldr	r3, [pc, #164]	@ (8007258 <HAL_RCC_OscConfig+0x4ac>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d1f0      	bne.n	80071a0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	69da      	ldr	r2, [r3, #28]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6a1b      	ldr	r3, [r3, #32]
 80071c6:	431a      	orrs	r2, r3
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071cc:	019b      	lsls	r3, r3, #6
 80071ce:	431a      	orrs	r2, r3
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071d4:	085b      	lsrs	r3, r3, #1
 80071d6:	3b01      	subs	r3, #1
 80071d8:	041b      	lsls	r3, r3, #16
 80071da:	431a      	orrs	r2, r3
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071e0:	061b      	lsls	r3, r3, #24
 80071e2:	431a      	orrs	r2, r3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071e8:	071b      	lsls	r3, r3, #28
 80071ea:	491b      	ldr	r1, [pc, #108]	@ (8007258 <HAL_RCC_OscConfig+0x4ac>)
 80071ec:	4313      	orrs	r3, r2
 80071ee:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80071f0:	4b1b      	ldr	r3, [pc, #108]	@ (8007260 <HAL_RCC_OscConfig+0x4b4>)
 80071f2:	2201      	movs	r2, #1
 80071f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071f6:	f7fb fb7b 	bl	80028f0 <HAL_GetTick>
 80071fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071fc:	e008      	b.n	8007210 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071fe:	f7fb fb77 	bl	80028f0 <HAL_GetTick>
 8007202:	4602      	mov	r2, r0
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	1ad3      	subs	r3, r2, r3
 8007208:	2b02      	cmp	r3, #2
 800720a:	d901      	bls.n	8007210 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800720c:	2303      	movs	r3, #3
 800720e:	e064      	b.n	80072da <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007210:	4b11      	ldr	r3, [pc, #68]	@ (8007258 <HAL_RCC_OscConfig+0x4ac>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007218:	2b00      	cmp	r3, #0
 800721a:	d0f0      	beq.n	80071fe <HAL_RCC_OscConfig+0x452>
 800721c:	e05c      	b.n	80072d8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800721e:	4b10      	ldr	r3, [pc, #64]	@ (8007260 <HAL_RCC_OscConfig+0x4b4>)
 8007220:	2200      	movs	r2, #0
 8007222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007224:	f7fb fb64 	bl	80028f0 <HAL_GetTick>
 8007228:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800722a:	e008      	b.n	800723e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800722c:	f7fb fb60 	bl	80028f0 <HAL_GetTick>
 8007230:	4602      	mov	r2, r0
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	1ad3      	subs	r3, r2, r3
 8007236:	2b02      	cmp	r3, #2
 8007238:	d901      	bls.n	800723e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800723a:	2303      	movs	r3, #3
 800723c:	e04d      	b.n	80072da <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800723e:	4b06      	ldr	r3, [pc, #24]	@ (8007258 <HAL_RCC_OscConfig+0x4ac>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007246:	2b00      	cmp	r3, #0
 8007248:	d1f0      	bne.n	800722c <HAL_RCC_OscConfig+0x480>
 800724a:	e045      	b.n	80072d8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	699b      	ldr	r3, [r3, #24]
 8007250:	2b01      	cmp	r3, #1
 8007252:	d107      	bne.n	8007264 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8007254:	2301      	movs	r3, #1
 8007256:	e040      	b.n	80072da <HAL_RCC_OscConfig+0x52e>
 8007258:	40023800 	.word	0x40023800
 800725c:	40007000 	.word	0x40007000
 8007260:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007264:	4b1f      	ldr	r3, [pc, #124]	@ (80072e4 <HAL_RCC_OscConfig+0x538>)
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	699b      	ldr	r3, [r3, #24]
 800726e:	2b01      	cmp	r3, #1
 8007270:	d030      	beq.n	80072d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800727c:	429a      	cmp	r2, r3
 800727e:	d129      	bne.n	80072d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800728a:	429a      	cmp	r2, r3
 800728c:	d122      	bne.n	80072d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800728e:	68fa      	ldr	r2, [r7, #12]
 8007290:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007294:	4013      	ands	r3, r2
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800729a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800729c:	4293      	cmp	r3, r2
 800729e:	d119      	bne.n	80072d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072aa:	085b      	lsrs	r3, r3, #1
 80072ac:	3b01      	subs	r3, #1
 80072ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d10f      	bne.n	80072d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d107      	bne.n	80072d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072ce:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d001      	beq.n	80072d8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80072d4:	2301      	movs	r3, #1
 80072d6:	e000      	b.n	80072da <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80072d8:	2300      	movs	r3, #0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3718      	adds	r7, #24
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	40023800 	.word	0x40023800

080072e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d101      	bne.n	80072fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	e041      	b.n	800737e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007300:	b2db      	uxtb	r3, r3
 8007302:	2b00      	cmp	r3, #0
 8007304:	d106      	bne.n	8007314 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 f839 	bl	8007386 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2202      	movs	r2, #2
 8007318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	3304      	adds	r3, #4
 8007324:	4619      	mov	r1, r3
 8007326:	4610      	mov	r0, r2
 8007328:	f000 fde0 	bl	8007eec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2201      	movs	r2, #1
 8007348:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2201      	movs	r2, #1
 8007350:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2201      	movs	r2, #1
 8007358:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2201      	movs	r2, #1
 8007370:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2201      	movs	r2, #1
 8007378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800737c:	2300      	movs	r3, #0
}
 800737e:	4618      	mov	r0, r3
 8007380:	3708      	adds	r7, #8
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}

08007386 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007386:	b480      	push	{r7}
 8007388:	b083      	sub	sp, #12
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800738e:	bf00      	nop
 8007390:	370c      	adds	r7, #12
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr
	...

0800739c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800739c:	b480      	push	{r7}
 800739e:	b085      	sub	sp, #20
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d001      	beq.n	80073b4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80073b0:	2301      	movs	r3, #1
 80073b2:	e046      	b.n	8007442 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2202      	movs	r2, #2
 80073b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a23      	ldr	r2, [pc, #140]	@ (8007450 <HAL_TIM_Base_Start+0xb4>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d022      	beq.n	800740c <HAL_TIM_Base_Start+0x70>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073ce:	d01d      	beq.n	800740c <HAL_TIM_Base_Start+0x70>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a1f      	ldr	r2, [pc, #124]	@ (8007454 <HAL_TIM_Base_Start+0xb8>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d018      	beq.n	800740c <HAL_TIM_Base_Start+0x70>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a1e      	ldr	r2, [pc, #120]	@ (8007458 <HAL_TIM_Base_Start+0xbc>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d013      	beq.n	800740c <HAL_TIM_Base_Start+0x70>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a1c      	ldr	r2, [pc, #112]	@ (800745c <HAL_TIM_Base_Start+0xc0>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d00e      	beq.n	800740c <HAL_TIM_Base_Start+0x70>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a1b      	ldr	r2, [pc, #108]	@ (8007460 <HAL_TIM_Base_Start+0xc4>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d009      	beq.n	800740c <HAL_TIM_Base_Start+0x70>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a19      	ldr	r2, [pc, #100]	@ (8007464 <HAL_TIM_Base_Start+0xc8>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d004      	beq.n	800740c <HAL_TIM_Base_Start+0x70>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a18      	ldr	r2, [pc, #96]	@ (8007468 <HAL_TIM_Base_Start+0xcc>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d111      	bne.n	8007430 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	f003 0307 	and.w	r3, r3, #7
 8007416:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2b06      	cmp	r3, #6
 800741c:	d010      	beq.n	8007440 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	681a      	ldr	r2, [r3, #0]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f042 0201 	orr.w	r2, r2, #1
 800742c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800742e:	e007      	b.n	8007440 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	681a      	ldr	r2, [r3, #0]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f042 0201 	orr.w	r2, r2, #1
 800743e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007440:	2300      	movs	r3, #0
}
 8007442:	4618      	mov	r0, r3
 8007444:	3714      	adds	r7, #20
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr
 800744e:	bf00      	nop
 8007450:	40010000 	.word	0x40010000
 8007454:	40000400 	.word	0x40000400
 8007458:	40000800 	.word	0x40000800
 800745c:	40000c00 	.word	0x40000c00
 8007460:	40010400 	.word	0x40010400
 8007464:	40014000 	.word	0x40014000
 8007468:	40001800 	.word	0x40001800

0800746c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800746c:	b480      	push	{r7}
 800746e:	b085      	sub	sp, #20
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800747a:	b2db      	uxtb	r3, r3
 800747c:	2b01      	cmp	r3, #1
 800747e:	d001      	beq.n	8007484 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007480:	2301      	movs	r3, #1
 8007482:	e04e      	b.n	8007522 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2202      	movs	r2, #2
 8007488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	68da      	ldr	r2, [r3, #12]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f042 0201 	orr.w	r2, r2, #1
 800749a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a23      	ldr	r2, [pc, #140]	@ (8007530 <HAL_TIM_Base_Start_IT+0xc4>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d022      	beq.n	80074ec <HAL_TIM_Base_Start_IT+0x80>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074ae:	d01d      	beq.n	80074ec <HAL_TIM_Base_Start_IT+0x80>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a1f      	ldr	r2, [pc, #124]	@ (8007534 <HAL_TIM_Base_Start_IT+0xc8>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d018      	beq.n	80074ec <HAL_TIM_Base_Start_IT+0x80>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a1e      	ldr	r2, [pc, #120]	@ (8007538 <HAL_TIM_Base_Start_IT+0xcc>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d013      	beq.n	80074ec <HAL_TIM_Base_Start_IT+0x80>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a1c      	ldr	r2, [pc, #112]	@ (800753c <HAL_TIM_Base_Start_IT+0xd0>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d00e      	beq.n	80074ec <HAL_TIM_Base_Start_IT+0x80>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a1b      	ldr	r2, [pc, #108]	@ (8007540 <HAL_TIM_Base_Start_IT+0xd4>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d009      	beq.n	80074ec <HAL_TIM_Base_Start_IT+0x80>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a19      	ldr	r2, [pc, #100]	@ (8007544 <HAL_TIM_Base_Start_IT+0xd8>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d004      	beq.n	80074ec <HAL_TIM_Base_Start_IT+0x80>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a18      	ldr	r2, [pc, #96]	@ (8007548 <HAL_TIM_Base_Start_IT+0xdc>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d111      	bne.n	8007510 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	f003 0307 	and.w	r3, r3, #7
 80074f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2b06      	cmp	r3, #6
 80074fc:	d010      	beq.n	8007520 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	681a      	ldr	r2, [r3, #0]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f042 0201 	orr.w	r2, r2, #1
 800750c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800750e:	e007      	b.n	8007520 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f042 0201 	orr.w	r2, r2, #1
 800751e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007520:	2300      	movs	r3, #0
}
 8007522:	4618      	mov	r0, r3
 8007524:	3714      	adds	r7, #20
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr
 800752e:	bf00      	nop
 8007530:	40010000 	.word	0x40010000
 8007534:	40000400 	.word	0x40000400
 8007538:	40000800 	.word	0x40000800
 800753c:	40000c00 	.word	0x40000c00
 8007540:	40010400 	.word	0x40010400
 8007544:	40014000 	.word	0x40014000
 8007548:	40001800 	.word	0x40001800

0800754c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b082      	sub	sp, #8
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d101      	bne.n	800755e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	e041      	b.n	80075e2 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007564:	b2db      	uxtb	r3, r3
 8007566:	2b00      	cmp	r3, #0
 8007568:	d106      	bne.n	8007578 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f7fb f848 	bl	8002608 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2202      	movs	r2, #2
 800757c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	3304      	adds	r3, #4
 8007588:	4619      	mov	r1, r3
 800758a:	4610      	mov	r0, r2
 800758c:	f000 fcae 	bl	8007eec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2201      	movs	r2, #1
 8007594:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2201      	movs	r2, #1
 80075a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2201      	movs	r2, #1
 80075bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2201      	movs	r2, #1
 80075c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2201      	movs	r2, #1
 80075cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2201      	movs	r2, #1
 80075d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2201      	movs	r2, #1
 80075dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80075e0:	2300      	movs	r3, #0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3708      	adds	r7, #8
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}

080075ea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80075ea:	b580      	push	{r7, lr}
 80075ec:	b082      	sub	sp, #8
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d101      	bne.n	80075fc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80075f8:	2301      	movs	r3, #1
 80075fa:	e041      	b.n	8007680 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007602:	b2db      	uxtb	r3, r3
 8007604:	2b00      	cmp	r3, #0
 8007606:	d106      	bne.n	8007616 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f7fa ffd7 	bl	80025c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2202      	movs	r2, #2
 800761a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	3304      	adds	r3, #4
 8007626:	4619      	mov	r1, r3
 8007628:	4610      	mov	r0, r2
 800762a:	f000 fc5f 	bl	8007eec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2201      	movs	r2, #1
 8007632:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2201      	movs	r2, #1
 800763a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2201      	movs	r2, #1
 8007642:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2201      	movs	r2, #1
 800764a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2201      	movs	r2, #1
 8007652:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2201      	movs	r2, #1
 800765a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2201      	movs	r2, #1
 8007662:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2201      	movs	r2, #1
 800766a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2201      	movs	r2, #1
 8007672:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2201      	movs	r2, #1
 800767a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800767e:	2300      	movs	r3, #0
}
 8007680:	4618      	mov	r0, r3
 8007682:	3708      	adds	r7, #8
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}

08007688 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b084      	sub	sp, #16
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d109      	bne.n	80076ac <HAL_TIM_PWM_Start+0x24>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	bf14      	ite	ne
 80076a4:	2301      	movne	r3, #1
 80076a6:	2300      	moveq	r3, #0
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	e022      	b.n	80076f2 <HAL_TIM_PWM_Start+0x6a>
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	2b04      	cmp	r3, #4
 80076b0:	d109      	bne.n	80076c6 <HAL_TIM_PWM_Start+0x3e>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	bf14      	ite	ne
 80076be:	2301      	movne	r3, #1
 80076c0:	2300      	moveq	r3, #0
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	e015      	b.n	80076f2 <HAL_TIM_PWM_Start+0x6a>
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	2b08      	cmp	r3, #8
 80076ca:	d109      	bne.n	80076e0 <HAL_TIM_PWM_Start+0x58>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	bf14      	ite	ne
 80076d8:	2301      	movne	r3, #1
 80076da:	2300      	moveq	r3, #0
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	e008      	b.n	80076f2 <HAL_TIM_PWM_Start+0x6a>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	bf14      	ite	ne
 80076ec:	2301      	movne	r3, #1
 80076ee:	2300      	moveq	r3, #0
 80076f0:	b2db      	uxtb	r3, r3
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d001      	beq.n	80076fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
 80076f8:	e07c      	b.n	80077f4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d104      	bne.n	800770a <HAL_TIM_PWM_Start+0x82>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2202      	movs	r2, #2
 8007704:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007708:	e013      	b.n	8007732 <HAL_TIM_PWM_Start+0xaa>
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	2b04      	cmp	r3, #4
 800770e:	d104      	bne.n	800771a <HAL_TIM_PWM_Start+0x92>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2202      	movs	r2, #2
 8007714:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007718:	e00b      	b.n	8007732 <HAL_TIM_PWM_Start+0xaa>
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	2b08      	cmp	r3, #8
 800771e:	d104      	bne.n	800772a <HAL_TIM_PWM_Start+0xa2>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2202      	movs	r2, #2
 8007724:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007728:	e003      	b.n	8007732 <HAL_TIM_PWM_Start+0xaa>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2202      	movs	r2, #2
 800772e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2201      	movs	r2, #1
 8007738:	6839      	ldr	r1, [r7, #0]
 800773a:	4618      	mov	r0, r3
 800773c:	f000 fe32 	bl	80083a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a2d      	ldr	r2, [pc, #180]	@ (80077fc <HAL_TIM_PWM_Start+0x174>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d004      	beq.n	8007754 <HAL_TIM_PWM_Start+0xcc>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a2c      	ldr	r2, [pc, #176]	@ (8007800 <HAL_TIM_PWM_Start+0x178>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d101      	bne.n	8007758 <HAL_TIM_PWM_Start+0xd0>
 8007754:	2301      	movs	r3, #1
 8007756:	e000      	b.n	800775a <HAL_TIM_PWM_Start+0xd2>
 8007758:	2300      	movs	r3, #0
 800775a:	2b00      	cmp	r3, #0
 800775c:	d007      	beq.n	800776e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800776c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a22      	ldr	r2, [pc, #136]	@ (80077fc <HAL_TIM_PWM_Start+0x174>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d022      	beq.n	80077be <HAL_TIM_PWM_Start+0x136>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007780:	d01d      	beq.n	80077be <HAL_TIM_PWM_Start+0x136>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a1f      	ldr	r2, [pc, #124]	@ (8007804 <HAL_TIM_PWM_Start+0x17c>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d018      	beq.n	80077be <HAL_TIM_PWM_Start+0x136>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a1d      	ldr	r2, [pc, #116]	@ (8007808 <HAL_TIM_PWM_Start+0x180>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d013      	beq.n	80077be <HAL_TIM_PWM_Start+0x136>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a1c      	ldr	r2, [pc, #112]	@ (800780c <HAL_TIM_PWM_Start+0x184>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d00e      	beq.n	80077be <HAL_TIM_PWM_Start+0x136>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a16      	ldr	r2, [pc, #88]	@ (8007800 <HAL_TIM_PWM_Start+0x178>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d009      	beq.n	80077be <HAL_TIM_PWM_Start+0x136>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a18      	ldr	r2, [pc, #96]	@ (8007810 <HAL_TIM_PWM_Start+0x188>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d004      	beq.n	80077be <HAL_TIM_PWM_Start+0x136>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a16      	ldr	r2, [pc, #88]	@ (8007814 <HAL_TIM_PWM_Start+0x18c>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d111      	bne.n	80077e2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	f003 0307 	and.w	r3, r3, #7
 80077c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2b06      	cmp	r3, #6
 80077ce:	d010      	beq.n	80077f2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f042 0201 	orr.w	r2, r2, #1
 80077de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077e0:	e007      	b.n	80077f2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f042 0201 	orr.w	r2, r2, #1
 80077f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80077f2:	2300      	movs	r3, #0
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3710      	adds	r7, #16
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}
 80077fc:	40010000 	.word	0x40010000
 8007800:	40010400 	.word	0x40010400
 8007804:	40000400 	.word	0x40000400
 8007808:	40000800 	.word	0x40000800
 800780c:	40000c00 	.word	0x40000c00
 8007810:	40014000 	.word	0x40014000
 8007814:	40001800 	.word	0x40001800

08007818 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b086      	sub	sp, #24
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d101      	bne.n	800782c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007828:	2301      	movs	r3, #1
 800782a:	e097      	b.n	800795c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007832:	b2db      	uxtb	r3, r3
 8007834:	2b00      	cmp	r3, #0
 8007836:	d106      	bne.n	8007846 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2200      	movs	r2, #0
 800783c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f7fa fe79 	bl	8002538 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2202      	movs	r2, #2
 800784a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	6812      	ldr	r2, [r2, #0]
 8007858:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800785c:	f023 0307 	bic.w	r3, r3, #7
 8007860:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	3304      	adds	r3, #4
 800786a:	4619      	mov	r1, r3
 800786c:	4610      	mov	r0, r2
 800786e:	f000 fb3d 	bl	8007eec <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	699b      	ldr	r3, [r3, #24]
 8007880:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	6a1b      	ldr	r3, [r3, #32]
 8007888:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	697a      	ldr	r2, [r7, #20]
 8007890:	4313      	orrs	r3, r2
 8007892:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800789a:	f023 0303 	bic.w	r3, r3, #3
 800789e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	689a      	ldr	r2, [r3, #8]
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	699b      	ldr	r3, [r3, #24]
 80078a8:	021b      	lsls	r3, r3, #8
 80078aa:	4313      	orrs	r3, r2
 80078ac:	693a      	ldr	r2, [r7, #16]
 80078ae:	4313      	orrs	r3, r2
 80078b0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80078b8:	f023 030c 	bic.w	r3, r3, #12
 80078bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80078c4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80078c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	68da      	ldr	r2, [r3, #12]
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	69db      	ldr	r3, [r3, #28]
 80078d2:	021b      	lsls	r3, r3, #8
 80078d4:	4313      	orrs	r3, r2
 80078d6:	693a      	ldr	r2, [r7, #16]
 80078d8:	4313      	orrs	r3, r2
 80078da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	691b      	ldr	r3, [r3, #16]
 80078e0:	011a      	lsls	r2, r3, #4
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	6a1b      	ldr	r3, [r3, #32]
 80078e6:	031b      	lsls	r3, r3, #12
 80078e8:	4313      	orrs	r3, r2
 80078ea:	693a      	ldr	r2, [r7, #16]
 80078ec:	4313      	orrs	r3, r2
 80078ee:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80078f6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80078fe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	685a      	ldr	r2, [r3, #4]
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	695b      	ldr	r3, [r3, #20]
 8007908:	011b      	lsls	r3, r3, #4
 800790a:	4313      	orrs	r3, r2
 800790c:	68fa      	ldr	r2, [r7, #12]
 800790e:	4313      	orrs	r3, r2
 8007910:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	697a      	ldr	r2, [r7, #20]
 8007918:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	693a      	ldr	r2, [r7, #16]
 8007920:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	68fa      	ldr	r2, [r7, #12]
 8007928:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2201      	movs	r2, #1
 800792e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2201      	movs	r2, #1
 8007936:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2201      	movs	r2, #1
 800793e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2201      	movs	r2, #1
 8007946:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2201      	movs	r2, #1
 800794e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2201      	movs	r2, #1
 8007956:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800795a:	2300      	movs	r3, #0
}
 800795c:	4618      	mov	r0, r3
 800795e:	3718      	adds	r7, #24
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}

08007964 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b084      	sub	sp, #16
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007974:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800797c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007984:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800798c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d110      	bne.n	80079b6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007994:	7bfb      	ldrb	r3, [r7, #15]
 8007996:	2b01      	cmp	r3, #1
 8007998:	d102      	bne.n	80079a0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800799a:	7b7b      	ldrb	r3, [r7, #13]
 800799c:	2b01      	cmp	r3, #1
 800799e:	d001      	beq.n	80079a4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80079a0:	2301      	movs	r3, #1
 80079a2:	e069      	b.n	8007a78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2202      	movs	r2, #2
 80079a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2202      	movs	r2, #2
 80079b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80079b4:	e031      	b.n	8007a1a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	2b04      	cmp	r3, #4
 80079ba:	d110      	bne.n	80079de <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80079bc:	7bbb      	ldrb	r3, [r7, #14]
 80079be:	2b01      	cmp	r3, #1
 80079c0:	d102      	bne.n	80079c8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80079c2:	7b3b      	ldrb	r3, [r7, #12]
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d001      	beq.n	80079cc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80079c8:	2301      	movs	r3, #1
 80079ca:	e055      	b.n	8007a78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2202      	movs	r2, #2
 80079d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2202      	movs	r2, #2
 80079d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80079dc:	e01d      	b.n	8007a1a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80079de:	7bfb      	ldrb	r3, [r7, #15]
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d108      	bne.n	80079f6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80079e4:	7bbb      	ldrb	r3, [r7, #14]
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d105      	bne.n	80079f6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80079ea:	7b7b      	ldrb	r3, [r7, #13]
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d102      	bne.n	80079f6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80079f0:	7b3b      	ldrb	r3, [r7, #12]
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d001      	beq.n	80079fa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	e03e      	b.n	8007a78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2202      	movs	r2, #2
 80079fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2202      	movs	r2, #2
 8007a06:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2202      	movs	r2, #2
 8007a0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2202      	movs	r2, #2
 8007a16:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d003      	beq.n	8007a28 <HAL_TIM_Encoder_Start+0xc4>
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	2b04      	cmp	r3, #4
 8007a24:	d008      	beq.n	8007a38 <HAL_TIM_Encoder_Start+0xd4>
 8007a26:	e00f      	b.n	8007a48 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	2100      	movs	r1, #0
 8007a30:	4618      	mov	r0, r3
 8007a32:	f000 fcb7 	bl	80083a4 <TIM_CCxChannelCmd>
      break;
 8007a36:	e016      	b.n	8007a66 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	2104      	movs	r1, #4
 8007a40:	4618      	mov	r0, r3
 8007a42:	f000 fcaf 	bl	80083a4 <TIM_CCxChannelCmd>
      break;
 8007a46:	e00e      	b.n	8007a66 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	2100      	movs	r1, #0
 8007a50:	4618      	mov	r0, r3
 8007a52:	f000 fca7 	bl	80083a4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	2104      	movs	r1, #4
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f000 fca0 	bl	80083a4 <TIM_CCxChannelCmd>
      break;
 8007a64:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f042 0201 	orr.w	r2, r2, #1
 8007a74:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007a76:	2300      	movs	r3, #0
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3710      	adds	r7, #16
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	68db      	ldr	r3, [r3, #12]
 8007a8e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	691b      	ldr	r3, [r3, #16]
 8007a96:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	f003 0302 	and.w	r3, r3, #2
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d020      	beq.n	8007ae4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f003 0302 	and.w	r3, r3, #2
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d01b      	beq.n	8007ae4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f06f 0202 	mvn.w	r2, #2
 8007ab4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2201      	movs	r2, #1
 8007aba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	699b      	ldr	r3, [r3, #24]
 8007ac2:	f003 0303 	and.w	r3, r3, #3
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d003      	beq.n	8007ad2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f000 f9f0 	bl	8007eb0 <HAL_TIM_IC_CaptureCallback>
 8007ad0:	e005      	b.n	8007ade <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 f9e2 	bl	8007e9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 f9f3 	bl	8007ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	f003 0304 	and.w	r3, r3, #4
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d020      	beq.n	8007b30 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f003 0304 	and.w	r3, r3, #4
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d01b      	beq.n	8007b30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f06f 0204 	mvn.w	r2, #4
 8007b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2202      	movs	r2, #2
 8007b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	699b      	ldr	r3, [r3, #24]
 8007b0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d003      	beq.n	8007b1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 f9ca 	bl	8007eb0 <HAL_TIM_IC_CaptureCallback>
 8007b1c:	e005      	b.n	8007b2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f000 f9bc 	bl	8007e9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 f9cd 	bl	8007ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	f003 0308 	and.w	r3, r3, #8
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d020      	beq.n	8007b7c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f003 0308 	and.w	r3, r3, #8
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d01b      	beq.n	8007b7c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f06f 0208 	mvn.w	r2, #8
 8007b4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2204      	movs	r2, #4
 8007b52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	69db      	ldr	r3, [r3, #28]
 8007b5a:	f003 0303 	and.w	r3, r3, #3
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d003      	beq.n	8007b6a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 f9a4 	bl	8007eb0 <HAL_TIM_IC_CaptureCallback>
 8007b68:	e005      	b.n	8007b76 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 f996 	bl	8007e9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 f9a7 	bl	8007ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	f003 0310 	and.w	r3, r3, #16
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d020      	beq.n	8007bc8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f003 0310 	and.w	r3, r3, #16
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d01b      	beq.n	8007bc8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f06f 0210 	mvn.w	r2, #16
 8007b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2208      	movs	r2, #8
 8007b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	69db      	ldr	r3, [r3, #28]
 8007ba6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d003      	beq.n	8007bb6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 f97e 	bl	8007eb0 <HAL_TIM_IC_CaptureCallback>
 8007bb4:	e005      	b.n	8007bc2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 f970 	bl	8007e9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 f981 	bl	8007ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	f003 0301 	and.w	r3, r3, #1
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d00c      	beq.n	8007bec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f003 0301 	and.w	r3, r3, #1
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d007      	beq.n	8007bec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f06f 0201 	mvn.w	r2, #1
 8007be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f7fa f99e 	bl	8001f28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d00c      	beq.n	8007c10 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d007      	beq.n	8007c10 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 fcc8 	bl	80085a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d00c      	beq.n	8007c34 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d007      	beq.n	8007c34 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 f952 	bl	8007ed8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	f003 0320 	and.w	r3, r3, #32
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d00c      	beq.n	8007c58 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f003 0320 	and.w	r3, r3, #32
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d007      	beq.n	8007c58 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f06f 0220 	mvn.w	r2, #32
 8007c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 fc9a 	bl	800858c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c58:	bf00      	nop
 8007c5a:	3710      	adds	r7, #16
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b086      	sub	sp, #24
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	60f8      	str	r0, [r7, #12]
 8007c68:	60b9      	str	r1, [r7, #8]
 8007c6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d101      	bne.n	8007c7e <HAL_TIM_OC_ConfigChannel+0x1e>
 8007c7a:	2302      	movs	r3, #2
 8007c7c:	e048      	b.n	8007d10 <HAL_TIM_OC_ConfigChannel+0xb0>
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2201      	movs	r2, #1
 8007c82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2b0c      	cmp	r3, #12
 8007c8a:	d839      	bhi.n	8007d00 <HAL_TIM_OC_ConfigChannel+0xa0>
 8007c8c:	a201      	add	r2, pc, #4	@ (adr r2, 8007c94 <HAL_TIM_OC_ConfigChannel+0x34>)
 8007c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c92:	bf00      	nop
 8007c94:	08007cc9 	.word	0x08007cc9
 8007c98:	08007d01 	.word	0x08007d01
 8007c9c:	08007d01 	.word	0x08007d01
 8007ca0:	08007d01 	.word	0x08007d01
 8007ca4:	08007cd7 	.word	0x08007cd7
 8007ca8:	08007d01 	.word	0x08007d01
 8007cac:	08007d01 	.word	0x08007d01
 8007cb0:	08007d01 	.word	0x08007d01
 8007cb4:	08007ce5 	.word	0x08007ce5
 8007cb8:	08007d01 	.word	0x08007d01
 8007cbc:	08007d01 	.word	0x08007d01
 8007cc0:	08007d01 	.word	0x08007d01
 8007cc4:	08007cf3 	.word	0x08007cf3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	68b9      	ldr	r1, [r7, #8]
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f000 f9b8 	bl	8008044 <TIM_OC1_SetConfig>
      break;
 8007cd4:	e017      	b.n	8007d06 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	68b9      	ldr	r1, [r7, #8]
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f000 fa21 	bl	8008124 <TIM_OC2_SetConfig>
      break;
 8007ce2:	e010      	b.n	8007d06 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	68b9      	ldr	r1, [r7, #8]
 8007cea:	4618      	mov	r0, r3
 8007cec:	f000 fa90 	bl	8008210 <TIM_OC3_SetConfig>
      break;
 8007cf0:	e009      	b.n	8007d06 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	68b9      	ldr	r1, [r7, #8]
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f000 fafd 	bl	80082f8 <TIM_OC4_SetConfig>
      break;
 8007cfe:	e002      	b.n	8007d06 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8007d00:	2301      	movs	r3, #1
 8007d02:	75fb      	strb	r3, [r7, #23]
      break;
 8007d04:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007d0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3718      	adds	r7, #24
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b086      	sub	sp, #24
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	60f8      	str	r0, [r7, #12]
 8007d20:	60b9      	str	r1, [r7, #8]
 8007d22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d24:	2300      	movs	r3, #0
 8007d26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d101      	bne.n	8007d36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007d32:	2302      	movs	r3, #2
 8007d34:	e0ae      	b.n	8007e94 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2201      	movs	r2, #1
 8007d3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2b0c      	cmp	r3, #12
 8007d42:	f200 809f 	bhi.w	8007e84 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007d46:	a201      	add	r2, pc, #4	@ (adr r2, 8007d4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d4c:	08007d81 	.word	0x08007d81
 8007d50:	08007e85 	.word	0x08007e85
 8007d54:	08007e85 	.word	0x08007e85
 8007d58:	08007e85 	.word	0x08007e85
 8007d5c:	08007dc1 	.word	0x08007dc1
 8007d60:	08007e85 	.word	0x08007e85
 8007d64:	08007e85 	.word	0x08007e85
 8007d68:	08007e85 	.word	0x08007e85
 8007d6c:	08007e03 	.word	0x08007e03
 8007d70:	08007e85 	.word	0x08007e85
 8007d74:	08007e85 	.word	0x08007e85
 8007d78:	08007e85 	.word	0x08007e85
 8007d7c:	08007e43 	.word	0x08007e43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	68b9      	ldr	r1, [r7, #8]
 8007d86:	4618      	mov	r0, r3
 8007d88:	f000 f95c 	bl	8008044 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	699a      	ldr	r2, [r3, #24]
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f042 0208 	orr.w	r2, r2, #8
 8007d9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	699a      	ldr	r2, [r3, #24]
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f022 0204 	bic.w	r2, r2, #4
 8007daa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	6999      	ldr	r1, [r3, #24]
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	691a      	ldr	r2, [r3, #16]
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	430a      	orrs	r2, r1
 8007dbc:	619a      	str	r2, [r3, #24]
      break;
 8007dbe:	e064      	b.n	8007e8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	68b9      	ldr	r1, [r7, #8]
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f000 f9ac 	bl	8008124 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	699a      	ldr	r2, [r3, #24]
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007dda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	699a      	ldr	r2, [r3, #24]
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007dea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	6999      	ldr	r1, [r3, #24]
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	691b      	ldr	r3, [r3, #16]
 8007df6:	021a      	lsls	r2, r3, #8
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	430a      	orrs	r2, r1
 8007dfe:	619a      	str	r2, [r3, #24]
      break;
 8007e00:	e043      	b.n	8007e8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	68b9      	ldr	r1, [r7, #8]
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f000 fa01 	bl	8008210 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	69da      	ldr	r2, [r3, #28]
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f042 0208 	orr.w	r2, r2, #8
 8007e1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	69da      	ldr	r2, [r3, #28]
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f022 0204 	bic.w	r2, r2, #4
 8007e2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	69d9      	ldr	r1, [r3, #28]
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	691a      	ldr	r2, [r3, #16]
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	430a      	orrs	r2, r1
 8007e3e:	61da      	str	r2, [r3, #28]
      break;
 8007e40:	e023      	b.n	8007e8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	68b9      	ldr	r1, [r7, #8]
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f000 fa55 	bl	80082f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	69da      	ldr	r2, [r3, #28]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	69da      	ldr	r2, [r3, #28]
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	69d9      	ldr	r1, [r3, #28]
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	691b      	ldr	r3, [r3, #16]
 8007e78:	021a      	lsls	r2, r3, #8
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	430a      	orrs	r2, r1
 8007e80:	61da      	str	r2, [r3, #28]
      break;
 8007e82:	e002      	b.n	8007e8a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007e84:	2301      	movs	r3, #1
 8007e86:	75fb      	strb	r3, [r7, #23]
      break;
 8007e88:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007e92:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3718      	adds	r7, #24
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b083      	sub	sp, #12
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ea4:	bf00      	nop
 8007ea6:	370c      	adds	r7, #12
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr

08007eb0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b083      	sub	sp, #12
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007eb8:	bf00      	nop
 8007eba:	370c      	adds	r7, #12
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr

08007ec4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ecc:	bf00      	nop
 8007ece:	370c      	adds	r7, #12
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr

08007ed8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b083      	sub	sp, #12
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ee0:	bf00      	nop
 8007ee2:	370c      	adds	r7, #12
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b085      	sub	sp, #20
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	4a46      	ldr	r2, [pc, #280]	@ (8008018 <TIM_Base_SetConfig+0x12c>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d013      	beq.n	8007f2c <TIM_Base_SetConfig+0x40>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f0a:	d00f      	beq.n	8007f2c <TIM_Base_SetConfig+0x40>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	4a43      	ldr	r2, [pc, #268]	@ (800801c <TIM_Base_SetConfig+0x130>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d00b      	beq.n	8007f2c <TIM_Base_SetConfig+0x40>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	4a42      	ldr	r2, [pc, #264]	@ (8008020 <TIM_Base_SetConfig+0x134>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d007      	beq.n	8007f2c <TIM_Base_SetConfig+0x40>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	4a41      	ldr	r2, [pc, #260]	@ (8008024 <TIM_Base_SetConfig+0x138>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d003      	beq.n	8007f2c <TIM_Base_SetConfig+0x40>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4a40      	ldr	r2, [pc, #256]	@ (8008028 <TIM_Base_SetConfig+0x13c>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d108      	bne.n	8007f3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	68fa      	ldr	r2, [r7, #12]
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	4a35      	ldr	r2, [pc, #212]	@ (8008018 <TIM_Base_SetConfig+0x12c>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d02b      	beq.n	8007f9e <TIM_Base_SetConfig+0xb2>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f4c:	d027      	beq.n	8007f9e <TIM_Base_SetConfig+0xb2>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4a32      	ldr	r2, [pc, #200]	@ (800801c <TIM_Base_SetConfig+0x130>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d023      	beq.n	8007f9e <TIM_Base_SetConfig+0xb2>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	4a31      	ldr	r2, [pc, #196]	@ (8008020 <TIM_Base_SetConfig+0x134>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d01f      	beq.n	8007f9e <TIM_Base_SetConfig+0xb2>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	4a30      	ldr	r2, [pc, #192]	@ (8008024 <TIM_Base_SetConfig+0x138>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d01b      	beq.n	8007f9e <TIM_Base_SetConfig+0xb2>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	4a2f      	ldr	r2, [pc, #188]	@ (8008028 <TIM_Base_SetConfig+0x13c>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d017      	beq.n	8007f9e <TIM_Base_SetConfig+0xb2>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	4a2e      	ldr	r2, [pc, #184]	@ (800802c <TIM_Base_SetConfig+0x140>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d013      	beq.n	8007f9e <TIM_Base_SetConfig+0xb2>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	4a2d      	ldr	r2, [pc, #180]	@ (8008030 <TIM_Base_SetConfig+0x144>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d00f      	beq.n	8007f9e <TIM_Base_SetConfig+0xb2>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	4a2c      	ldr	r2, [pc, #176]	@ (8008034 <TIM_Base_SetConfig+0x148>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d00b      	beq.n	8007f9e <TIM_Base_SetConfig+0xb2>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	4a2b      	ldr	r2, [pc, #172]	@ (8008038 <TIM_Base_SetConfig+0x14c>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d007      	beq.n	8007f9e <TIM_Base_SetConfig+0xb2>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	4a2a      	ldr	r2, [pc, #168]	@ (800803c <TIM_Base_SetConfig+0x150>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d003      	beq.n	8007f9e <TIM_Base_SetConfig+0xb2>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	4a29      	ldr	r2, [pc, #164]	@ (8008040 <TIM_Base_SetConfig+0x154>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d108      	bne.n	8007fb0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007fa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	68db      	ldr	r3, [r3, #12]
 8007faa:	68fa      	ldr	r2, [r7, #12]
 8007fac:	4313      	orrs	r3, r2
 8007fae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	695b      	ldr	r3, [r3, #20]
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	68fa      	ldr	r2, [r7, #12]
 8007fc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	689a      	ldr	r2, [r3, #8]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	4a10      	ldr	r2, [pc, #64]	@ (8008018 <TIM_Base_SetConfig+0x12c>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d003      	beq.n	8007fe4 <TIM_Base_SetConfig+0xf8>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	4a12      	ldr	r2, [pc, #72]	@ (8008028 <TIM_Base_SetConfig+0x13c>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d103      	bne.n	8007fec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	691a      	ldr	r2, [r3, #16]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2201      	movs	r2, #1
 8007ff0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	691b      	ldr	r3, [r3, #16]
 8007ff6:	f003 0301 	and.w	r3, r3, #1
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d105      	bne.n	800800a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	691b      	ldr	r3, [r3, #16]
 8008002:	f023 0201 	bic.w	r2, r3, #1
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	611a      	str	r2, [r3, #16]
  }
}
 800800a:	bf00      	nop
 800800c:	3714      	adds	r7, #20
 800800e:	46bd      	mov	sp, r7
 8008010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008014:	4770      	bx	lr
 8008016:	bf00      	nop
 8008018:	40010000 	.word	0x40010000
 800801c:	40000400 	.word	0x40000400
 8008020:	40000800 	.word	0x40000800
 8008024:	40000c00 	.word	0x40000c00
 8008028:	40010400 	.word	0x40010400
 800802c:	40014000 	.word	0x40014000
 8008030:	40014400 	.word	0x40014400
 8008034:	40014800 	.word	0x40014800
 8008038:	40001800 	.word	0x40001800
 800803c:	40001c00 	.word	0x40001c00
 8008040:	40002000 	.word	0x40002000

08008044 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008044:	b480      	push	{r7}
 8008046:	b087      	sub	sp, #28
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6a1b      	ldr	r3, [r3, #32]
 8008052:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6a1b      	ldr	r3, [r3, #32]
 8008058:	f023 0201 	bic.w	r2, r3, #1
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	699b      	ldr	r3, [r3, #24]
 800806a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f023 0303 	bic.w	r3, r3, #3
 800807a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	68fa      	ldr	r2, [r7, #12]
 8008082:	4313      	orrs	r3, r2
 8008084:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	f023 0302 	bic.w	r3, r3, #2
 800808c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	689b      	ldr	r3, [r3, #8]
 8008092:	697a      	ldr	r2, [r7, #20]
 8008094:	4313      	orrs	r3, r2
 8008096:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	4a20      	ldr	r2, [pc, #128]	@ (800811c <TIM_OC1_SetConfig+0xd8>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d003      	beq.n	80080a8 <TIM_OC1_SetConfig+0x64>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	4a1f      	ldr	r2, [pc, #124]	@ (8008120 <TIM_OC1_SetConfig+0xdc>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d10c      	bne.n	80080c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	f023 0308 	bic.w	r3, r3, #8
 80080ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	68db      	ldr	r3, [r3, #12]
 80080b4:	697a      	ldr	r2, [r7, #20]
 80080b6:	4313      	orrs	r3, r2
 80080b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	f023 0304 	bic.w	r3, r3, #4
 80080c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	4a15      	ldr	r2, [pc, #84]	@ (800811c <TIM_OC1_SetConfig+0xd8>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d003      	beq.n	80080d2 <TIM_OC1_SetConfig+0x8e>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	4a14      	ldr	r2, [pc, #80]	@ (8008120 <TIM_OC1_SetConfig+0xdc>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d111      	bne.n	80080f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80080d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80080e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	695b      	ldr	r3, [r3, #20]
 80080e6:	693a      	ldr	r2, [r7, #16]
 80080e8:	4313      	orrs	r3, r2
 80080ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	699b      	ldr	r3, [r3, #24]
 80080f0:	693a      	ldr	r2, [r7, #16]
 80080f2:	4313      	orrs	r3, r2
 80080f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	693a      	ldr	r2, [r7, #16]
 80080fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	68fa      	ldr	r2, [r7, #12]
 8008100:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	685a      	ldr	r2, [r3, #4]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	697a      	ldr	r2, [r7, #20]
 800810e:	621a      	str	r2, [r3, #32]
}
 8008110:	bf00      	nop
 8008112:	371c      	adds	r7, #28
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr
 800811c:	40010000 	.word	0x40010000
 8008120:	40010400 	.word	0x40010400

08008124 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008124:	b480      	push	{r7}
 8008126:	b087      	sub	sp, #28
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6a1b      	ldr	r3, [r3, #32]
 8008132:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6a1b      	ldr	r3, [r3, #32]
 8008138:	f023 0210 	bic.w	r2, r3, #16
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	699b      	ldr	r3, [r3, #24]
 800814a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800815a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	021b      	lsls	r3, r3, #8
 8008162:	68fa      	ldr	r2, [r7, #12]
 8008164:	4313      	orrs	r3, r2
 8008166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	f023 0320 	bic.w	r3, r3, #32
 800816e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	011b      	lsls	r3, r3, #4
 8008176:	697a      	ldr	r2, [r7, #20]
 8008178:	4313      	orrs	r3, r2
 800817a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	4a22      	ldr	r2, [pc, #136]	@ (8008208 <TIM_OC2_SetConfig+0xe4>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d003      	beq.n	800818c <TIM_OC2_SetConfig+0x68>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	4a21      	ldr	r2, [pc, #132]	@ (800820c <TIM_OC2_SetConfig+0xe8>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d10d      	bne.n	80081a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008192:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	68db      	ldr	r3, [r3, #12]
 8008198:	011b      	lsls	r3, r3, #4
 800819a:	697a      	ldr	r2, [r7, #20]
 800819c:	4313      	orrs	r3, r2
 800819e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	4a17      	ldr	r2, [pc, #92]	@ (8008208 <TIM_OC2_SetConfig+0xe4>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d003      	beq.n	80081b8 <TIM_OC2_SetConfig+0x94>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	4a16      	ldr	r2, [pc, #88]	@ (800820c <TIM_OC2_SetConfig+0xe8>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d113      	bne.n	80081e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80081be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80081c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	695b      	ldr	r3, [r3, #20]
 80081cc:	009b      	lsls	r3, r3, #2
 80081ce:	693a      	ldr	r2, [r7, #16]
 80081d0:	4313      	orrs	r3, r2
 80081d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	699b      	ldr	r3, [r3, #24]
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	693a      	ldr	r2, [r7, #16]
 80081dc:	4313      	orrs	r3, r2
 80081de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	693a      	ldr	r2, [r7, #16]
 80081e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	68fa      	ldr	r2, [r7, #12]
 80081ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	685a      	ldr	r2, [r3, #4]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	697a      	ldr	r2, [r7, #20]
 80081f8:	621a      	str	r2, [r3, #32]
}
 80081fa:	bf00      	nop
 80081fc:	371c      	adds	r7, #28
 80081fe:	46bd      	mov	sp, r7
 8008200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008204:	4770      	bx	lr
 8008206:	bf00      	nop
 8008208:	40010000 	.word	0x40010000
 800820c:	40010400 	.word	0x40010400

08008210 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008210:	b480      	push	{r7}
 8008212:	b087      	sub	sp, #28
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6a1b      	ldr	r3, [r3, #32]
 800821e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6a1b      	ldr	r3, [r3, #32]
 8008224:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	69db      	ldr	r3, [r3, #28]
 8008236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800823e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f023 0303 	bic.w	r3, r3, #3
 8008246:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	68fa      	ldr	r2, [r7, #12]
 800824e:	4313      	orrs	r3, r2
 8008250:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008258:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	689b      	ldr	r3, [r3, #8]
 800825e:	021b      	lsls	r3, r3, #8
 8008260:	697a      	ldr	r2, [r7, #20]
 8008262:	4313      	orrs	r3, r2
 8008264:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	4a21      	ldr	r2, [pc, #132]	@ (80082f0 <TIM_OC3_SetConfig+0xe0>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d003      	beq.n	8008276 <TIM_OC3_SetConfig+0x66>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	4a20      	ldr	r2, [pc, #128]	@ (80082f4 <TIM_OC3_SetConfig+0xe4>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d10d      	bne.n	8008292 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800827c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	68db      	ldr	r3, [r3, #12]
 8008282:	021b      	lsls	r3, r3, #8
 8008284:	697a      	ldr	r2, [r7, #20]
 8008286:	4313      	orrs	r3, r2
 8008288:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008290:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	4a16      	ldr	r2, [pc, #88]	@ (80082f0 <TIM_OC3_SetConfig+0xe0>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d003      	beq.n	80082a2 <TIM_OC3_SetConfig+0x92>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	4a15      	ldr	r2, [pc, #84]	@ (80082f4 <TIM_OC3_SetConfig+0xe4>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d113      	bne.n	80082ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80082a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80082b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	695b      	ldr	r3, [r3, #20]
 80082b6:	011b      	lsls	r3, r3, #4
 80082b8:	693a      	ldr	r2, [r7, #16]
 80082ba:	4313      	orrs	r3, r2
 80082bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	699b      	ldr	r3, [r3, #24]
 80082c2:	011b      	lsls	r3, r3, #4
 80082c4:	693a      	ldr	r2, [r7, #16]
 80082c6:	4313      	orrs	r3, r2
 80082c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	693a      	ldr	r2, [r7, #16]
 80082ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	68fa      	ldr	r2, [r7, #12]
 80082d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	685a      	ldr	r2, [r3, #4]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	697a      	ldr	r2, [r7, #20]
 80082e2:	621a      	str	r2, [r3, #32]
}
 80082e4:	bf00      	nop
 80082e6:	371c      	adds	r7, #28
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr
 80082f0:	40010000 	.word	0x40010000
 80082f4:	40010400 	.word	0x40010400

080082f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b087      	sub	sp, #28
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6a1b      	ldr	r3, [r3, #32]
 8008306:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6a1b      	ldr	r3, [r3, #32]
 800830c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	69db      	ldr	r3, [r3, #28]
 800831e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800832e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	021b      	lsls	r3, r3, #8
 8008336:	68fa      	ldr	r2, [r7, #12]
 8008338:	4313      	orrs	r3, r2
 800833a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008342:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	031b      	lsls	r3, r3, #12
 800834a:	693a      	ldr	r2, [r7, #16]
 800834c:	4313      	orrs	r3, r2
 800834e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	4a12      	ldr	r2, [pc, #72]	@ (800839c <TIM_OC4_SetConfig+0xa4>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d003      	beq.n	8008360 <TIM_OC4_SetConfig+0x68>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	4a11      	ldr	r2, [pc, #68]	@ (80083a0 <TIM_OC4_SetConfig+0xa8>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d109      	bne.n	8008374 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008366:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	695b      	ldr	r3, [r3, #20]
 800836c:	019b      	lsls	r3, r3, #6
 800836e:	697a      	ldr	r2, [r7, #20]
 8008370:	4313      	orrs	r3, r2
 8008372:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	697a      	ldr	r2, [r7, #20]
 8008378:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	68fa      	ldr	r2, [r7, #12]
 800837e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	685a      	ldr	r2, [r3, #4]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	693a      	ldr	r2, [r7, #16]
 800838c:	621a      	str	r2, [r3, #32]
}
 800838e:	bf00      	nop
 8008390:	371c      	adds	r7, #28
 8008392:	46bd      	mov	sp, r7
 8008394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008398:	4770      	bx	lr
 800839a:	bf00      	nop
 800839c:	40010000 	.word	0x40010000
 80083a0:	40010400 	.word	0x40010400

080083a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b087      	sub	sp, #28
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	60f8      	str	r0, [r7, #12]
 80083ac:	60b9      	str	r1, [r7, #8]
 80083ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	f003 031f 	and.w	r3, r3, #31
 80083b6:	2201      	movs	r2, #1
 80083b8:	fa02 f303 	lsl.w	r3, r2, r3
 80083bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	6a1a      	ldr	r2, [r3, #32]
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	43db      	mvns	r3, r3
 80083c6:	401a      	ands	r2, r3
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	6a1a      	ldr	r2, [r3, #32]
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	f003 031f 	and.w	r3, r3, #31
 80083d6:	6879      	ldr	r1, [r7, #4]
 80083d8:	fa01 f303 	lsl.w	r3, r1, r3
 80083dc:	431a      	orrs	r2, r3
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	621a      	str	r2, [r3, #32]
}
 80083e2:	bf00      	nop
 80083e4:	371c      	adds	r7, #28
 80083e6:	46bd      	mov	sp, r7
 80083e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ec:	4770      	bx	lr
	...

080083f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b085      	sub	sp, #20
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008400:	2b01      	cmp	r3, #1
 8008402:	d101      	bne.n	8008408 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008404:	2302      	movs	r3, #2
 8008406:	e05a      	b.n	80084be <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2201      	movs	r2, #1
 800840c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2202      	movs	r2, #2
 8008414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	689b      	ldr	r3, [r3, #8]
 8008426:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800842e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	68fa      	ldr	r2, [r7, #12]
 8008436:	4313      	orrs	r3, r2
 8008438:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	68fa      	ldr	r2, [r7, #12]
 8008440:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4a21      	ldr	r2, [pc, #132]	@ (80084cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d022      	beq.n	8008492 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008454:	d01d      	beq.n	8008492 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a1d      	ldr	r2, [pc, #116]	@ (80084d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d018      	beq.n	8008492 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4a1b      	ldr	r2, [pc, #108]	@ (80084d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d013      	beq.n	8008492 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a1a      	ldr	r2, [pc, #104]	@ (80084d8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d00e      	beq.n	8008492 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a18      	ldr	r2, [pc, #96]	@ (80084dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d009      	beq.n	8008492 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4a17      	ldr	r2, [pc, #92]	@ (80084e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d004      	beq.n	8008492 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a15      	ldr	r2, [pc, #84]	@ (80084e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d10c      	bne.n	80084ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008498:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	68ba      	ldr	r2, [r7, #8]
 80084a0:	4313      	orrs	r3, r2
 80084a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	68ba      	ldr	r2, [r7, #8]
 80084aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2201      	movs	r2, #1
 80084b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2200      	movs	r2, #0
 80084b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80084bc:	2300      	movs	r3, #0
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3714      	adds	r7, #20
 80084c2:	46bd      	mov	sp, r7
 80084c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c8:	4770      	bx	lr
 80084ca:	bf00      	nop
 80084cc:	40010000 	.word	0x40010000
 80084d0:	40000400 	.word	0x40000400
 80084d4:	40000800 	.word	0x40000800
 80084d8:	40000c00 	.word	0x40000c00
 80084dc:	40010400 	.word	0x40010400
 80084e0:	40014000 	.word	0x40014000
 80084e4:	40001800 	.word	0x40001800

080084e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b085      	sub	sp, #20
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80084f2:	2300      	movs	r3, #0
 80084f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d101      	bne.n	8008504 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008500:	2302      	movs	r3, #2
 8008502:	e03d      	b.n	8008580 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2201      	movs	r2, #1
 8008508:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	68db      	ldr	r3, [r3, #12]
 8008516:	4313      	orrs	r3, r2
 8008518:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	689b      	ldr	r3, [r3, #8]
 8008524:	4313      	orrs	r3, r2
 8008526:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	4313      	orrs	r3, r2
 8008534:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4313      	orrs	r3, r2
 8008542:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	691b      	ldr	r3, [r3, #16]
 800854e:	4313      	orrs	r3, r2
 8008550:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	695b      	ldr	r3, [r3, #20]
 800855c:	4313      	orrs	r3, r2
 800855e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	69db      	ldr	r3, [r3, #28]
 800856a:	4313      	orrs	r3, r2
 800856c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	68fa      	ldr	r2, [r7, #12]
 8008574:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2200      	movs	r2, #0
 800857a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800857e:	2300      	movs	r3, #0
}
 8008580:	4618      	mov	r0, r3
 8008582:	3714      	adds	r7, #20
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr

0800858c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800858c:	b480      	push	{r7}
 800858e:	b083      	sub	sp, #12
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008594:	bf00      	nop
 8008596:	370c      	adds	r7, #12
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr

080085a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b083      	sub	sp, #12
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80085a8:	bf00      	nop
 80085aa:	370c      	adds	r7, #12
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr

080085b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80085b4:	b084      	sub	sp, #16
 80085b6:	b580      	push	{r7, lr}
 80085b8:	b084      	sub	sp, #16
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
 80085be:	f107 001c 	add.w	r0, r7, #28
 80085c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80085c6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d123      	bne.n	8008616 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085d2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	68db      	ldr	r3, [r3, #12]
 80085de:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80085e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80085e6:	687a      	ldr	r2, [r7, #4]
 80085e8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	68db      	ldr	r3, [r3, #12]
 80085ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80085f6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	d105      	bne.n	800860a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	68db      	ldr	r3, [r3, #12]
 8008602:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f001 fae2 	bl	8009bd4 <USB_CoreReset>
 8008610:	4603      	mov	r3, r0
 8008612:	73fb      	strb	r3, [r7, #15]
 8008614:	e01b      	b.n	800864e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	68db      	ldr	r3, [r3, #12]
 800861a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f001 fad6 	bl	8009bd4 <USB_CoreReset>
 8008628:	4603      	mov	r3, r0
 800862a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800862c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008630:	2b00      	cmp	r3, #0
 8008632:	d106      	bne.n	8008642 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008638:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	639a      	str	r2, [r3, #56]	@ 0x38
 8008640:	e005      	b.n	800864e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008646:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800864e:	7fbb      	ldrb	r3, [r7, #30]
 8008650:	2b01      	cmp	r3, #1
 8008652:	d10b      	bne.n	800866c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	689b      	ldr	r3, [r3, #8]
 8008658:	f043 0206 	orr.w	r2, r3, #6
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	f043 0220 	orr.w	r2, r3, #32
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800866c:	7bfb      	ldrb	r3, [r7, #15]
}
 800866e:	4618      	mov	r0, r3
 8008670:	3710      	adds	r7, #16
 8008672:	46bd      	mov	sp, r7
 8008674:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008678:	b004      	add	sp, #16
 800867a:	4770      	bx	lr

0800867c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800867c:	b480      	push	{r7}
 800867e:	b087      	sub	sp, #28
 8008680:	af00      	add	r7, sp, #0
 8008682:	60f8      	str	r0, [r7, #12]
 8008684:	60b9      	str	r1, [r7, #8]
 8008686:	4613      	mov	r3, r2
 8008688:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800868a:	79fb      	ldrb	r3, [r7, #7]
 800868c:	2b02      	cmp	r3, #2
 800868e:	d165      	bne.n	800875c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	4a41      	ldr	r2, [pc, #260]	@ (8008798 <USB_SetTurnaroundTime+0x11c>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d906      	bls.n	80086a6 <USB_SetTurnaroundTime+0x2a>
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	4a40      	ldr	r2, [pc, #256]	@ (800879c <USB_SetTurnaroundTime+0x120>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d202      	bcs.n	80086a6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80086a0:	230f      	movs	r3, #15
 80086a2:	617b      	str	r3, [r7, #20]
 80086a4:	e062      	b.n	800876c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	4a3c      	ldr	r2, [pc, #240]	@ (800879c <USB_SetTurnaroundTime+0x120>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d306      	bcc.n	80086bc <USB_SetTurnaroundTime+0x40>
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	4a3b      	ldr	r2, [pc, #236]	@ (80087a0 <USB_SetTurnaroundTime+0x124>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d202      	bcs.n	80086bc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80086b6:	230e      	movs	r3, #14
 80086b8:	617b      	str	r3, [r7, #20]
 80086ba:	e057      	b.n	800876c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	4a38      	ldr	r2, [pc, #224]	@ (80087a0 <USB_SetTurnaroundTime+0x124>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d306      	bcc.n	80086d2 <USB_SetTurnaroundTime+0x56>
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	4a37      	ldr	r2, [pc, #220]	@ (80087a4 <USB_SetTurnaroundTime+0x128>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d202      	bcs.n	80086d2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80086cc:	230d      	movs	r3, #13
 80086ce:	617b      	str	r3, [r7, #20]
 80086d0:	e04c      	b.n	800876c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	4a33      	ldr	r2, [pc, #204]	@ (80087a4 <USB_SetTurnaroundTime+0x128>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d306      	bcc.n	80086e8 <USB_SetTurnaroundTime+0x6c>
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	4a32      	ldr	r2, [pc, #200]	@ (80087a8 <USB_SetTurnaroundTime+0x12c>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d802      	bhi.n	80086e8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80086e2:	230c      	movs	r3, #12
 80086e4:	617b      	str	r3, [r7, #20]
 80086e6:	e041      	b.n	800876c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	4a2f      	ldr	r2, [pc, #188]	@ (80087a8 <USB_SetTurnaroundTime+0x12c>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d906      	bls.n	80086fe <USB_SetTurnaroundTime+0x82>
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	4a2e      	ldr	r2, [pc, #184]	@ (80087ac <USB_SetTurnaroundTime+0x130>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d802      	bhi.n	80086fe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80086f8:	230b      	movs	r3, #11
 80086fa:	617b      	str	r3, [r7, #20]
 80086fc:	e036      	b.n	800876c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	4a2a      	ldr	r2, [pc, #168]	@ (80087ac <USB_SetTurnaroundTime+0x130>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d906      	bls.n	8008714 <USB_SetTurnaroundTime+0x98>
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	4a29      	ldr	r2, [pc, #164]	@ (80087b0 <USB_SetTurnaroundTime+0x134>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d802      	bhi.n	8008714 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800870e:	230a      	movs	r3, #10
 8008710:	617b      	str	r3, [r7, #20]
 8008712:	e02b      	b.n	800876c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	4a26      	ldr	r2, [pc, #152]	@ (80087b0 <USB_SetTurnaroundTime+0x134>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d906      	bls.n	800872a <USB_SetTurnaroundTime+0xae>
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	4a25      	ldr	r2, [pc, #148]	@ (80087b4 <USB_SetTurnaroundTime+0x138>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d202      	bcs.n	800872a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008724:	2309      	movs	r3, #9
 8008726:	617b      	str	r3, [r7, #20]
 8008728:	e020      	b.n	800876c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	4a21      	ldr	r2, [pc, #132]	@ (80087b4 <USB_SetTurnaroundTime+0x138>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d306      	bcc.n	8008740 <USB_SetTurnaroundTime+0xc4>
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	4a20      	ldr	r2, [pc, #128]	@ (80087b8 <USB_SetTurnaroundTime+0x13c>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d802      	bhi.n	8008740 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800873a:	2308      	movs	r3, #8
 800873c:	617b      	str	r3, [r7, #20]
 800873e:	e015      	b.n	800876c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	4a1d      	ldr	r2, [pc, #116]	@ (80087b8 <USB_SetTurnaroundTime+0x13c>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d906      	bls.n	8008756 <USB_SetTurnaroundTime+0xda>
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	4a1c      	ldr	r2, [pc, #112]	@ (80087bc <USB_SetTurnaroundTime+0x140>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d202      	bcs.n	8008756 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008750:	2307      	movs	r3, #7
 8008752:	617b      	str	r3, [r7, #20]
 8008754:	e00a      	b.n	800876c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008756:	2306      	movs	r3, #6
 8008758:	617b      	str	r3, [r7, #20]
 800875a:	e007      	b.n	800876c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800875c:	79fb      	ldrb	r3, [r7, #7]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d102      	bne.n	8008768 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008762:	2309      	movs	r3, #9
 8008764:	617b      	str	r3, [r7, #20]
 8008766:	e001      	b.n	800876c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008768:	2309      	movs	r3, #9
 800876a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	68db      	ldr	r3, [r3, #12]
 8008770:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	68da      	ldr	r2, [r3, #12]
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	029b      	lsls	r3, r3, #10
 8008780:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8008784:	431a      	orrs	r2, r3
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800878a:	2300      	movs	r3, #0
}
 800878c:	4618      	mov	r0, r3
 800878e:	371c      	adds	r7, #28
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr
 8008798:	00d8acbf 	.word	0x00d8acbf
 800879c:	00e4e1c0 	.word	0x00e4e1c0
 80087a0:	00f42400 	.word	0x00f42400
 80087a4:	01067380 	.word	0x01067380
 80087a8:	011a499f 	.word	0x011a499f
 80087ac:	01312cff 	.word	0x01312cff
 80087b0:	014ca43f 	.word	0x014ca43f
 80087b4:	016e3600 	.word	0x016e3600
 80087b8:	01a6ab1f 	.word	0x01a6ab1f
 80087bc:	01e84800 	.word	0x01e84800

080087c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b083      	sub	sp, #12
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	f043 0201 	orr.w	r2, r3, #1
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80087d4:	2300      	movs	r3, #0
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	370c      	adds	r7, #12
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr

080087e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80087e2:	b480      	push	{r7}
 80087e4:	b083      	sub	sp, #12
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	689b      	ldr	r3, [r3, #8]
 80087ee:	f023 0201 	bic.w	r2, r3, #1
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80087f6:	2300      	movs	r3, #0
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	370c      	adds	r7, #12
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr

08008804 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b084      	sub	sp, #16
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	460b      	mov	r3, r1
 800880e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008810:	2300      	movs	r3, #0
 8008812:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	68db      	ldr	r3, [r3, #12]
 8008818:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008820:	78fb      	ldrb	r3, [r7, #3]
 8008822:	2b01      	cmp	r3, #1
 8008824:	d115      	bne.n	8008852 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	68db      	ldr	r3, [r3, #12]
 800882a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008832:	200a      	movs	r0, #10
 8008834:	f7fa f868 	bl	8002908 <HAL_Delay>
      ms += 10U;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	330a      	adds	r3, #10
 800883c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f001 f939 	bl	8009ab6 <USB_GetMode>
 8008844:	4603      	mov	r3, r0
 8008846:	2b01      	cmp	r3, #1
 8008848:	d01e      	beq.n	8008888 <USB_SetCurrentMode+0x84>
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2bc7      	cmp	r3, #199	@ 0xc7
 800884e:	d9f0      	bls.n	8008832 <USB_SetCurrentMode+0x2e>
 8008850:	e01a      	b.n	8008888 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008852:	78fb      	ldrb	r3, [r7, #3]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d115      	bne.n	8008884 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	68db      	ldr	r3, [r3, #12]
 800885c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008864:	200a      	movs	r0, #10
 8008866:	f7fa f84f 	bl	8002908 <HAL_Delay>
      ms += 10U;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	330a      	adds	r3, #10
 800886e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f001 f920 	bl	8009ab6 <USB_GetMode>
 8008876:	4603      	mov	r3, r0
 8008878:	2b00      	cmp	r3, #0
 800887a:	d005      	beq.n	8008888 <USB_SetCurrentMode+0x84>
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2bc7      	cmp	r3, #199	@ 0xc7
 8008880:	d9f0      	bls.n	8008864 <USB_SetCurrentMode+0x60>
 8008882:	e001      	b.n	8008888 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008884:	2301      	movs	r3, #1
 8008886:	e005      	b.n	8008894 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2bc8      	cmp	r3, #200	@ 0xc8
 800888c:	d101      	bne.n	8008892 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800888e:	2301      	movs	r3, #1
 8008890:	e000      	b.n	8008894 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008892:	2300      	movs	r3, #0
}
 8008894:	4618      	mov	r0, r3
 8008896:	3710      	adds	r7, #16
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}

0800889c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800889c:	b084      	sub	sp, #16
 800889e:	b580      	push	{r7, lr}
 80088a0:	b086      	sub	sp, #24
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]
 80088a6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80088aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80088ae:	2300      	movs	r3, #0
 80088b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80088b6:	2300      	movs	r3, #0
 80088b8:	613b      	str	r3, [r7, #16]
 80088ba:	e009      	b.n	80088d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80088bc:	687a      	ldr	r2, [r7, #4]
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	3340      	adds	r3, #64	@ 0x40
 80088c2:	009b      	lsls	r3, r3, #2
 80088c4:	4413      	add	r3, r2
 80088c6:	2200      	movs	r2, #0
 80088c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	3301      	adds	r3, #1
 80088ce:	613b      	str	r3, [r7, #16]
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	2b0e      	cmp	r3, #14
 80088d4:	d9f2      	bls.n	80088bc <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80088d6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d11c      	bne.n	8008918 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	68fa      	ldr	r2, [r7, #12]
 80088e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80088ec:	f043 0302 	orr.w	r3, r3, #2
 80088f0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088f6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	601a      	str	r2, [r3, #0]
 8008916:	e005      	b.n	8008924 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800891c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800892a:	461a      	mov	r2, r3
 800892c:	2300      	movs	r3, #0
 800892e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008930:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8008934:	2b01      	cmp	r3, #1
 8008936:	d10d      	bne.n	8008954 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008938:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800893c:	2b00      	cmp	r3, #0
 800893e:	d104      	bne.n	800894a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008940:	2100      	movs	r1, #0
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f000 f968 	bl	8008c18 <USB_SetDevSpeed>
 8008948:	e008      	b.n	800895c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800894a:	2101      	movs	r1, #1
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f000 f963 	bl	8008c18 <USB_SetDevSpeed>
 8008952:	e003      	b.n	800895c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008954:	2103      	movs	r1, #3
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 f95e 	bl	8008c18 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800895c:	2110      	movs	r1, #16
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 f8fa 	bl	8008b58 <USB_FlushTxFifo>
 8008964:	4603      	mov	r3, r0
 8008966:	2b00      	cmp	r3, #0
 8008968:	d001      	beq.n	800896e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800896a:	2301      	movs	r3, #1
 800896c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 f924 	bl	8008bbc <USB_FlushRxFifo>
 8008974:	4603      	mov	r3, r0
 8008976:	2b00      	cmp	r3, #0
 8008978:	d001      	beq.n	800897e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800897a:	2301      	movs	r3, #1
 800897c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008984:	461a      	mov	r2, r3
 8008986:	2300      	movs	r3, #0
 8008988:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008990:	461a      	mov	r2, r3
 8008992:	2300      	movs	r3, #0
 8008994:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800899c:	461a      	mov	r2, r3
 800899e:	2300      	movs	r3, #0
 80089a0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80089a2:	2300      	movs	r3, #0
 80089a4:	613b      	str	r3, [r7, #16]
 80089a6:	e043      	b.n	8008a30 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	015a      	lsls	r2, r3, #5
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	4413      	add	r3, r2
 80089b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80089ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80089be:	d118      	bne.n	80089f2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d10a      	bne.n	80089dc <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	015a      	lsls	r2, r3, #5
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	4413      	add	r3, r2
 80089ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089d2:	461a      	mov	r2, r3
 80089d4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80089d8:	6013      	str	r3, [r2, #0]
 80089da:	e013      	b.n	8008a04 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	015a      	lsls	r2, r3, #5
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	4413      	add	r3, r2
 80089e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089e8:	461a      	mov	r2, r3
 80089ea:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80089ee:	6013      	str	r3, [r2, #0]
 80089f0:	e008      	b.n	8008a04 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	015a      	lsls	r2, r3, #5
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	4413      	add	r3, r2
 80089fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089fe:	461a      	mov	r2, r3
 8008a00:	2300      	movs	r3, #0
 8008a02:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	015a      	lsls	r2, r3, #5
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	4413      	add	r3, r2
 8008a0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a10:	461a      	mov	r2, r3
 8008a12:	2300      	movs	r3, #0
 8008a14:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	015a      	lsls	r2, r3, #5
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	4413      	add	r3, r2
 8008a1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a22:	461a      	mov	r2, r3
 8008a24:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008a28:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	613b      	str	r3, [r7, #16]
 8008a30:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008a34:	461a      	mov	r2, r3
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d3b5      	bcc.n	80089a8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	613b      	str	r3, [r7, #16]
 8008a40:	e043      	b.n	8008aca <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	015a      	lsls	r2, r3, #5
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	4413      	add	r3, r2
 8008a4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008a54:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008a58:	d118      	bne.n	8008a8c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d10a      	bne.n	8008a76 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	015a      	lsls	r2, r3, #5
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	4413      	add	r3, r2
 8008a68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008a72:	6013      	str	r3, [r2, #0]
 8008a74:	e013      	b.n	8008a9e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	015a      	lsls	r2, r3, #5
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	4413      	add	r3, r2
 8008a7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a82:	461a      	mov	r2, r3
 8008a84:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008a88:	6013      	str	r3, [r2, #0]
 8008a8a:	e008      	b.n	8008a9e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	015a      	lsls	r2, r3, #5
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	4413      	add	r3, r2
 8008a94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a98:	461a      	mov	r2, r3
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	015a      	lsls	r2, r3, #5
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	4413      	add	r3, r2
 8008aa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008aaa:	461a      	mov	r2, r3
 8008aac:	2300      	movs	r3, #0
 8008aae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	015a      	lsls	r2, r3, #5
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	4413      	add	r3, r2
 8008ab8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008abc:	461a      	mov	r2, r3
 8008abe:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008ac2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	613b      	str	r3, [r7, #16]
 8008aca:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008ace:	461a      	mov	r2, r3
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d3b5      	bcc.n	8008a42 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008adc:	691b      	ldr	r3, [r3, #16]
 8008ade:	68fa      	ldr	r2, [r7, #12]
 8008ae0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008ae4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ae8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2200      	movs	r2, #0
 8008aee:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008af6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008af8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d105      	bne.n	8008b0c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	699b      	ldr	r3, [r3, #24]
 8008b04:	f043 0210 	orr.w	r2, r3, #16
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	699a      	ldr	r2, [r3, #24]
 8008b10:	4b10      	ldr	r3, [pc, #64]	@ (8008b54 <USB_DevInit+0x2b8>)
 8008b12:	4313      	orrs	r3, r2
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008b18:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d005      	beq.n	8008b2c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	699b      	ldr	r3, [r3, #24]
 8008b24:	f043 0208 	orr.w	r2, r3, #8
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008b2c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d107      	bne.n	8008b44 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	699b      	ldr	r3, [r3, #24]
 8008b38:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008b3c:	f043 0304 	orr.w	r3, r3, #4
 8008b40:	687a      	ldr	r2, [r7, #4]
 8008b42:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008b44:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3718      	adds	r7, #24
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008b50:	b004      	add	sp, #16
 8008b52:	4770      	bx	lr
 8008b54:	803c3800 	.word	0x803c3800

08008b58 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b085      	sub	sp, #20
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008b62:	2300      	movs	r3, #0
 8008b64:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	3301      	adds	r3, #1
 8008b6a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008b72:	d901      	bls.n	8008b78 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008b74:	2303      	movs	r3, #3
 8008b76:	e01b      	b.n	8008bb0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	691b      	ldr	r3, [r3, #16]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	daf2      	bge.n	8008b66 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008b80:	2300      	movs	r3, #0
 8008b82:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	019b      	lsls	r3, r3, #6
 8008b88:	f043 0220 	orr.w	r2, r3, #32
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	3301      	adds	r3, #1
 8008b94:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008b9c:	d901      	bls.n	8008ba2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008b9e:	2303      	movs	r3, #3
 8008ba0:	e006      	b.n	8008bb0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	691b      	ldr	r3, [r3, #16]
 8008ba6:	f003 0320 	and.w	r3, r3, #32
 8008baa:	2b20      	cmp	r3, #32
 8008bac:	d0f0      	beq.n	8008b90 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008bae:	2300      	movs	r3, #0
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3714      	adds	r7, #20
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr

08008bbc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b085      	sub	sp, #20
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	3301      	adds	r3, #1
 8008bcc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008bd4:	d901      	bls.n	8008bda <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008bd6:	2303      	movs	r3, #3
 8008bd8:	e018      	b.n	8008c0c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	691b      	ldr	r3, [r3, #16]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	daf2      	bge.n	8008bc8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008be2:	2300      	movs	r3, #0
 8008be4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2210      	movs	r2, #16
 8008bea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	3301      	adds	r3, #1
 8008bf0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008bf8:	d901      	bls.n	8008bfe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008bfa:	2303      	movs	r3, #3
 8008bfc:	e006      	b.n	8008c0c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	691b      	ldr	r3, [r3, #16]
 8008c02:	f003 0310 	and.w	r3, r3, #16
 8008c06:	2b10      	cmp	r3, #16
 8008c08:	d0f0      	beq.n	8008bec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008c0a:	2300      	movs	r3, #0
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3714      	adds	r7, #20
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr

08008c18 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b085      	sub	sp, #20
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	460b      	mov	r3, r1
 8008c22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c2e:	681a      	ldr	r2, [r3, #0]
 8008c30:	78fb      	ldrb	r3, [r7, #3]
 8008c32:	68f9      	ldr	r1, [r7, #12]
 8008c34:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008c3c:	2300      	movs	r3, #0
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3714      	adds	r7, #20
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr

08008c4a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8008c4a:	b480      	push	{r7}
 8008c4c:	b087      	sub	sp, #28
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c5c:	689b      	ldr	r3, [r3, #8]
 8008c5e:	f003 0306 	and.w	r3, r3, #6
 8008c62:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d102      	bne.n	8008c70 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	75fb      	strb	r3, [r7, #23]
 8008c6e:	e00a      	b.n	8008c86 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2b02      	cmp	r3, #2
 8008c74:	d002      	beq.n	8008c7c <USB_GetDevSpeed+0x32>
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2b06      	cmp	r3, #6
 8008c7a:	d102      	bne.n	8008c82 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008c7c:	2302      	movs	r3, #2
 8008c7e:	75fb      	strb	r3, [r7, #23]
 8008c80:	e001      	b.n	8008c86 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008c82:	230f      	movs	r3, #15
 8008c84:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008c86:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	371c      	adds	r7, #28
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr

08008c94 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b085      	sub	sp, #20
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	785b      	ldrb	r3, [r3, #1]
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	d13a      	bne.n	8008d26 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008cb6:	69da      	ldr	r2, [r3, #28]
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	781b      	ldrb	r3, [r3, #0]
 8008cbc:	f003 030f 	and.w	r3, r3, #15
 8008cc0:	2101      	movs	r1, #1
 8008cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8008cc6:	b29b      	uxth	r3, r3
 8008cc8:	68f9      	ldr	r1, [r7, #12]
 8008cca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	015a      	lsls	r2, r3, #5
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	4413      	add	r3, r2
 8008cda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d155      	bne.n	8008d94 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	015a      	lsls	r2, r3, #5
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	4413      	add	r3, r2
 8008cf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cf4:	681a      	ldr	r2, [r3, #0]
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	689b      	ldr	r3, [r3, #8]
 8008cfa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	791b      	ldrb	r3, [r3, #4]
 8008d02:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008d04:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	059b      	lsls	r3, r3, #22
 8008d0a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	68ba      	ldr	r2, [r7, #8]
 8008d10:	0151      	lsls	r1, r2, #5
 8008d12:	68fa      	ldr	r2, [r7, #12]
 8008d14:	440a      	add	r2, r1
 8008d16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008d1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d22:	6013      	str	r3, [r2, #0]
 8008d24:	e036      	b.n	8008d94 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d2c:	69da      	ldr	r2, [r3, #28]
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	781b      	ldrb	r3, [r3, #0]
 8008d32:	f003 030f 	and.w	r3, r3, #15
 8008d36:	2101      	movs	r1, #1
 8008d38:	fa01 f303 	lsl.w	r3, r1, r3
 8008d3c:	041b      	lsls	r3, r3, #16
 8008d3e:	68f9      	ldr	r1, [r7, #12]
 8008d40:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008d44:	4313      	orrs	r3, r2
 8008d46:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	015a      	lsls	r2, r3, #5
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	4413      	add	r3, r2
 8008d50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d11a      	bne.n	8008d94 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	015a      	lsls	r2, r3, #5
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	4413      	add	r3, r2
 8008d66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d6a:	681a      	ldr	r2, [r3, #0]
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	689b      	ldr	r3, [r3, #8]
 8008d70:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	791b      	ldrb	r3, [r3, #4]
 8008d78:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008d7a:	430b      	orrs	r3, r1
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	68ba      	ldr	r2, [r7, #8]
 8008d80:	0151      	lsls	r1, r2, #5
 8008d82:	68fa      	ldr	r2, [r7, #12]
 8008d84:	440a      	add	r2, r1
 8008d86:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008d8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d92:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008d94:	2300      	movs	r3, #0
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3714      	adds	r7, #20
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr
	...

08008da4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b085      	sub	sp, #20
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	781b      	ldrb	r3, [r3, #0]
 8008db6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	785b      	ldrb	r3, [r3, #1]
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d161      	bne.n	8008e84 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	015a      	lsls	r2, r3, #5
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	4413      	add	r3, r2
 8008dc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008dd2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008dd6:	d11f      	bne.n	8008e18 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	015a      	lsls	r2, r3, #5
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	4413      	add	r3, r2
 8008de0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	68ba      	ldr	r2, [r7, #8]
 8008de8:	0151      	lsls	r1, r2, #5
 8008dea:	68fa      	ldr	r2, [r7, #12]
 8008dec:	440a      	add	r2, r1
 8008dee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008df2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008df6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	015a      	lsls	r2, r3, #5
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	4413      	add	r3, r2
 8008e00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	68ba      	ldr	r2, [r7, #8]
 8008e08:	0151      	lsls	r1, r2, #5
 8008e0a:	68fa      	ldr	r2, [r7, #12]
 8008e0c:	440a      	add	r2, r1
 8008e0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e12:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008e16:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	f003 030f 	and.w	r3, r3, #15
 8008e28:	2101      	movs	r1, #1
 8008e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	43db      	mvns	r3, r3
 8008e32:	68f9      	ldr	r1, [r7, #12]
 8008e34:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008e38:	4013      	ands	r3, r2
 8008e3a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e42:	69da      	ldr	r2, [r3, #28]
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	781b      	ldrb	r3, [r3, #0]
 8008e48:	f003 030f 	and.w	r3, r3, #15
 8008e4c:	2101      	movs	r1, #1
 8008e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8008e52:	b29b      	uxth	r3, r3
 8008e54:	43db      	mvns	r3, r3
 8008e56:	68f9      	ldr	r1, [r7, #12]
 8008e58:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008e5c:	4013      	ands	r3, r2
 8008e5e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	015a      	lsls	r2, r3, #5
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	4413      	add	r3, r2
 8008e68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e6c:	681a      	ldr	r2, [r3, #0]
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	0159      	lsls	r1, r3, #5
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	440b      	add	r3, r1
 8008e76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	4b35      	ldr	r3, [pc, #212]	@ (8008f54 <USB_DeactivateEndpoint+0x1b0>)
 8008e7e:	4013      	ands	r3, r2
 8008e80:	600b      	str	r3, [r1, #0]
 8008e82:	e060      	b.n	8008f46 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	015a      	lsls	r2, r3, #5
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	4413      	add	r3, r2
 8008e8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008e96:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008e9a:	d11f      	bne.n	8008edc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	015a      	lsls	r2, r3, #5
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	4413      	add	r3, r2
 8008ea4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	68ba      	ldr	r2, [r7, #8]
 8008eac:	0151      	lsls	r1, r2, #5
 8008eae:	68fa      	ldr	r2, [r7, #12]
 8008eb0:	440a      	add	r2, r1
 8008eb2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008eb6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008eba:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	015a      	lsls	r2, r3, #5
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	4413      	add	r3, r2
 8008ec4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	68ba      	ldr	r2, [r7, #8]
 8008ecc:	0151      	lsls	r1, r2, #5
 8008ece:	68fa      	ldr	r2, [r7, #12]
 8008ed0:	440a      	add	r2, r1
 8008ed2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ed6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008eda:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ee2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	781b      	ldrb	r3, [r3, #0]
 8008ee8:	f003 030f 	and.w	r3, r3, #15
 8008eec:	2101      	movs	r1, #1
 8008eee:	fa01 f303 	lsl.w	r3, r1, r3
 8008ef2:	041b      	lsls	r3, r3, #16
 8008ef4:	43db      	mvns	r3, r3
 8008ef6:	68f9      	ldr	r1, [r7, #12]
 8008ef8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008efc:	4013      	ands	r3, r2
 8008efe:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f06:	69da      	ldr	r2, [r3, #28]
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	f003 030f 	and.w	r3, r3, #15
 8008f10:	2101      	movs	r1, #1
 8008f12:	fa01 f303 	lsl.w	r3, r1, r3
 8008f16:	041b      	lsls	r3, r3, #16
 8008f18:	43db      	mvns	r3, r3
 8008f1a:	68f9      	ldr	r1, [r7, #12]
 8008f1c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008f20:	4013      	ands	r3, r2
 8008f22:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	015a      	lsls	r2, r3, #5
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	4413      	add	r3, r2
 8008f2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f30:	681a      	ldr	r2, [r3, #0]
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	0159      	lsls	r1, r3, #5
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	440b      	add	r3, r1
 8008f3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f3e:	4619      	mov	r1, r3
 8008f40:	4b05      	ldr	r3, [pc, #20]	@ (8008f58 <USB_DeactivateEndpoint+0x1b4>)
 8008f42:	4013      	ands	r3, r2
 8008f44:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008f46:	2300      	movs	r3, #0
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3714      	adds	r7, #20
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr
 8008f54:	ec337800 	.word	0xec337800
 8008f58:	eff37800 	.word	0xeff37800

08008f5c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b08a      	sub	sp, #40	@ 0x28
 8008f60:	af02      	add	r7, sp, #8
 8008f62:	60f8      	str	r0, [r7, #12]
 8008f64:	60b9      	str	r1, [r7, #8]
 8008f66:	4613      	mov	r3, r2
 8008f68:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	785b      	ldrb	r3, [r3, #1]
 8008f78:	2b01      	cmp	r3, #1
 8008f7a:	f040 817f 	bne.w	800927c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	691b      	ldr	r3, [r3, #16]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d132      	bne.n	8008fec <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008f86:	69bb      	ldr	r3, [r7, #24]
 8008f88:	015a      	lsls	r2, r3, #5
 8008f8a:	69fb      	ldr	r3, [r7, #28]
 8008f8c:	4413      	add	r3, r2
 8008f8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f92:	691b      	ldr	r3, [r3, #16]
 8008f94:	69ba      	ldr	r2, [r7, #24]
 8008f96:	0151      	lsls	r1, r2, #5
 8008f98:	69fa      	ldr	r2, [r7, #28]
 8008f9a:	440a      	add	r2, r1
 8008f9c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008fa0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008fa4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008fa8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008faa:	69bb      	ldr	r3, [r7, #24]
 8008fac:	015a      	lsls	r2, r3, #5
 8008fae:	69fb      	ldr	r3, [r7, #28]
 8008fb0:	4413      	add	r3, r2
 8008fb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fb6:	691b      	ldr	r3, [r3, #16]
 8008fb8:	69ba      	ldr	r2, [r7, #24]
 8008fba:	0151      	lsls	r1, r2, #5
 8008fbc:	69fa      	ldr	r2, [r7, #28]
 8008fbe:	440a      	add	r2, r1
 8008fc0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008fc4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008fc8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008fca:	69bb      	ldr	r3, [r7, #24]
 8008fcc:	015a      	lsls	r2, r3, #5
 8008fce:	69fb      	ldr	r3, [r7, #28]
 8008fd0:	4413      	add	r3, r2
 8008fd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fd6:	691b      	ldr	r3, [r3, #16]
 8008fd8:	69ba      	ldr	r2, [r7, #24]
 8008fda:	0151      	lsls	r1, r2, #5
 8008fdc:	69fa      	ldr	r2, [r7, #28]
 8008fde:	440a      	add	r2, r1
 8008fe0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008fe4:	0cdb      	lsrs	r3, r3, #19
 8008fe6:	04db      	lsls	r3, r3, #19
 8008fe8:	6113      	str	r3, [r2, #16]
 8008fea:	e097      	b.n	800911c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008fec:	69bb      	ldr	r3, [r7, #24]
 8008fee:	015a      	lsls	r2, r3, #5
 8008ff0:	69fb      	ldr	r3, [r7, #28]
 8008ff2:	4413      	add	r3, r2
 8008ff4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ff8:	691b      	ldr	r3, [r3, #16]
 8008ffa:	69ba      	ldr	r2, [r7, #24]
 8008ffc:	0151      	lsls	r1, r2, #5
 8008ffe:	69fa      	ldr	r2, [r7, #28]
 8009000:	440a      	add	r2, r1
 8009002:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009006:	0cdb      	lsrs	r3, r3, #19
 8009008:	04db      	lsls	r3, r3, #19
 800900a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800900c:	69bb      	ldr	r3, [r7, #24]
 800900e:	015a      	lsls	r2, r3, #5
 8009010:	69fb      	ldr	r3, [r7, #28]
 8009012:	4413      	add	r3, r2
 8009014:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009018:	691b      	ldr	r3, [r3, #16]
 800901a:	69ba      	ldr	r2, [r7, #24]
 800901c:	0151      	lsls	r1, r2, #5
 800901e:	69fa      	ldr	r2, [r7, #28]
 8009020:	440a      	add	r2, r1
 8009022:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009026:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800902a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800902e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8009030:	69bb      	ldr	r3, [r7, #24]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d11a      	bne.n	800906c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	691a      	ldr	r2, [r3, #16]
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	689b      	ldr	r3, [r3, #8]
 800903e:	429a      	cmp	r2, r3
 8009040:	d903      	bls.n	800904a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	689a      	ldr	r2, [r3, #8]
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800904a:	69bb      	ldr	r3, [r7, #24]
 800904c:	015a      	lsls	r2, r3, #5
 800904e:	69fb      	ldr	r3, [r7, #28]
 8009050:	4413      	add	r3, r2
 8009052:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009056:	691b      	ldr	r3, [r3, #16]
 8009058:	69ba      	ldr	r2, [r7, #24]
 800905a:	0151      	lsls	r1, r2, #5
 800905c:	69fa      	ldr	r2, [r7, #28]
 800905e:	440a      	add	r2, r1
 8009060:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009064:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009068:	6113      	str	r3, [r2, #16]
 800906a:	e044      	b.n	80090f6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	691a      	ldr	r2, [r3, #16]
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	689b      	ldr	r3, [r3, #8]
 8009074:	4413      	add	r3, r2
 8009076:	1e5a      	subs	r2, r3, #1
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	689b      	ldr	r3, [r3, #8]
 800907c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009080:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8009082:	69bb      	ldr	r3, [r7, #24]
 8009084:	015a      	lsls	r2, r3, #5
 8009086:	69fb      	ldr	r3, [r7, #28]
 8009088:	4413      	add	r3, r2
 800908a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800908e:	691a      	ldr	r2, [r3, #16]
 8009090:	8afb      	ldrh	r3, [r7, #22]
 8009092:	04d9      	lsls	r1, r3, #19
 8009094:	4ba4      	ldr	r3, [pc, #656]	@ (8009328 <USB_EPStartXfer+0x3cc>)
 8009096:	400b      	ands	r3, r1
 8009098:	69b9      	ldr	r1, [r7, #24]
 800909a:	0148      	lsls	r0, r1, #5
 800909c:	69f9      	ldr	r1, [r7, #28]
 800909e:	4401      	add	r1, r0
 80090a0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80090a4:	4313      	orrs	r3, r2
 80090a6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	791b      	ldrb	r3, [r3, #4]
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d122      	bne.n	80090f6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80090b0:	69bb      	ldr	r3, [r7, #24]
 80090b2:	015a      	lsls	r2, r3, #5
 80090b4:	69fb      	ldr	r3, [r7, #28]
 80090b6:	4413      	add	r3, r2
 80090b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090bc:	691b      	ldr	r3, [r3, #16]
 80090be:	69ba      	ldr	r2, [r7, #24]
 80090c0:	0151      	lsls	r1, r2, #5
 80090c2:	69fa      	ldr	r2, [r7, #28]
 80090c4:	440a      	add	r2, r1
 80090c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80090ca:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80090ce:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80090d0:	69bb      	ldr	r3, [r7, #24]
 80090d2:	015a      	lsls	r2, r3, #5
 80090d4:	69fb      	ldr	r3, [r7, #28]
 80090d6:	4413      	add	r3, r2
 80090d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090dc:	691a      	ldr	r2, [r3, #16]
 80090de:	8afb      	ldrh	r3, [r7, #22]
 80090e0:	075b      	lsls	r3, r3, #29
 80090e2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80090e6:	69b9      	ldr	r1, [r7, #24]
 80090e8:	0148      	lsls	r0, r1, #5
 80090ea:	69f9      	ldr	r1, [r7, #28]
 80090ec:	4401      	add	r1, r0
 80090ee:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80090f2:	4313      	orrs	r3, r2
 80090f4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80090f6:	69bb      	ldr	r3, [r7, #24]
 80090f8:	015a      	lsls	r2, r3, #5
 80090fa:	69fb      	ldr	r3, [r7, #28]
 80090fc:	4413      	add	r3, r2
 80090fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009102:	691a      	ldr	r2, [r3, #16]
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	691b      	ldr	r3, [r3, #16]
 8009108:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800910c:	69b9      	ldr	r1, [r7, #24]
 800910e:	0148      	lsls	r0, r1, #5
 8009110:	69f9      	ldr	r1, [r7, #28]
 8009112:	4401      	add	r1, r0
 8009114:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009118:	4313      	orrs	r3, r2
 800911a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800911c:	79fb      	ldrb	r3, [r7, #7]
 800911e:	2b01      	cmp	r3, #1
 8009120:	d14b      	bne.n	80091ba <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	69db      	ldr	r3, [r3, #28]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d009      	beq.n	800913e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800912a:	69bb      	ldr	r3, [r7, #24]
 800912c:	015a      	lsls	r2, r3, #5
 800912e:	69fb      	ldr	r3, [r7, #28]
 8009130:	4413      	add	r3, r2
 8009132:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009136:	461a      	mov	r2, r3
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	69db      	ldr	r3, [r3, #28]
 800913c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	791b      	ldrb	r3, [r3, #4]
 8009142:	2b01      	cmp	r3, #1
 8009144:	d128      	bne.n	8009198 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009146:	69fb      	ldr	r3, [r7, #28]
 8009148:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800914c:	689b      	ldr	r3, [r3, #8]
 800914e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009152:	2b00      	cmp	r3, #0
 8009154:	d110      	bne.n	8009178 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009156:	69bb      	ldr	r3, [r7, #24]
 8009158:	015a      	lsls	r2, r3, #5
 800915a:	69fb      	ldr	r3, [r7, #28]
 800915c:	4413      	add	r3, r2
 800915e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	69ba      	ldr	r2, [r7, #24]
 8009166:	0151      	lsls	r1, r2, #5
 8009168:	69fa      	ldr	r2, [r7, #28]
 800916a:	440a      	add	r2, r1
 800916c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009170:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009174:	6013      	str	r3, [r2, #0]
 8009176:	e00f      	b.n	8009198 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009178:	69bb      	ldr	r3, [r7, #24]
 800917a:	015a      	lsls	r2, r3, #5
 800917c:	69fb      	ldr	r3, [r7, #28]
 800917e:	4413      	add	r3, r2
 8009180:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	69ba      	ldr	r2, [r7, #24]
 8009188:	0151      	lsls	r1, r2, #5
 800918a:	69fa      	ldr	r2, [r7, #28]
 800918c:	440a      	add	r2, r1
 800918e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009192:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009196:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009198:	69bb      	ldr	r3, [r7, #24]
 800919a:	015a      	lsls	r2, r3, #5
 800919c:	69fb      	ldr	r3, [r7, #28]
 800919e:	4413      	add	r3, r2
 80091a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	69ba      	ldr	r2, [r7, #24]
 80091a8:	0151      	lsls	r1, r2, #5
 80091aa:	69fa      	ldr	r2, [r7, #28]
 80091ac:	440a      	add	r2, r1
 80091ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80091b2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80091b6:	6013      	str	r3, [r2, #0]
 80091b8:	e166      	b.n	8009488 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80091ba:	69bb      	ldr	r3, [r7, #24]
 80091bc:	015a      	lsls	r2, r3, #5
 80091be:	69fb      	ldr	r3, [r7, #28]
 80091c0:	4413      	add	r3, r2
 80091c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	69ba      	ldr	r2, [r7, #24]
 80091ca:	0151      	lsls	r1, r2, #5
 80091cc:	69fa      	ldr	r2, [r7, #28]
 80091ce:	440a      	add	r2, r1
 80091d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80091d4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80091d8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	791b      	ldrb	r3, [r3, #4]
 80091de:	2b01      	cmp	r3, #1
 80091e0:	d015      	beq.n	800920e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	691b      	ldr	r3, [r3, #16]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	f000 814e 	beq.w	8009488 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80091ec:	69fb      	ldr	r3, [r7, #28]
 80091ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	781b      	ldrb	r3, [r3, #0]
 80091f8:	f003 030f 	and.w	r3, r3, #15
 80091fc:	2101      	movs	r1, #1
 80091fe:	fa01 f303 	lsl.w	r3, r1, r3
 8009202:	69f9      	ldr	r1, [r7, #28]
 8009204:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009208:	4313      	orrs	r3, r2
 800920a:	634b      	str	r3, [r1, #52]	@ 0x34
 800920c:	e13c      	b.n	8009488 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800920e:	69fb      	ldr	r3, [r7, #28]
 8009210:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009214:	689b      	ldr	r3, [r3, #8]
 8009216:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800921a:	2b00      	cmp	r3, #0
 800921c:	d110      	bne.n	8009240 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800921e:	69bb      	ldr	r3, [r7, #24]
 8009220:	015a      	lsls	r2, r3, #5
 8009222:	69fb      	ldr	r3, [r7, #28]
 8009224:	4413      	add	r3, r2
 8009226:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	69ba      	ldr	r2, [r7, #24]
 800922e:	0151      	lsls	r1, r2, #5
 8009230:	69fa      	ldr	r2, [r7, #28]
 8009232:	440a      	add	r2, r1
 8009234:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009238:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800923c:	6013      	str	r3, [r2, #0]
 800923e:	e00f      	b.n	8009260 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009240:	69bb      	ldr	r3, [r7, #24]
 8009242:	015a      	lsls	r2, r3, #5
 8009244:	69fb      	ldr	r3, [r7, #28]
 8009246:	4413      	add	r3, r2
 8009248:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	69ba      	ldr	r2, [r7, #24]
 8009250:	0151      	lsls	r1, r2, #5
 8009252:	69fa      	ldr	r2, [r7, #28]
 8009254:	440a      	add	r2, r1
 8009256:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800925a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800925e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	68d9      	ldr	r1, [r3, #12]
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	781a      	ldrb	r2, [r3, #0]
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	691b      	ldr	r3, [r3, #16]
 800926c:	b298      	uxth	r0, r3
 800926e:	79fb      	ldrb	r3, [r7, #7]
 8009270:	9300      	str	r3, [sp, #0]
 8009272:	4603      	mov	r3, r0
 8009274:	68f8      	ldr	r0, [r7, #12]
 8009276:	f000 f9b9 	bl	80095ec <USB_WritePacket>
 800927a:	e105      	b.n	8009488 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800927c:	69bb      	ldr	r3, [r7, #24]
 800927e:	015a      	lsls	r2, r3, #5
 8009280:	69fb      	ldr	r3, [r7, #28]
 8009282:	4413      	add	r3, r2
 8009284:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009288:	691b      	ldr	r3, [r3, #16]
 800928a:	69ba      	ldr	r2, [r7, #24]
 800928c:	0151      	lsls	r1, r2, #5
 800928e:	69fa      	ldr	r2, [r7, #28]
 8009290:	440a      	add	r2, r1
 8009292:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009296:	0cdb      	lsrs	r3, r3, #19
 8009298:	04db      	lsls	r3, r3, #19
 800929a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800929c:	69bb      	ldr	r3, [r7, #24]
 800929e:	015a      	lsls	r2, r3, #5
 80092a0:	69fb      	ldr	r3, [r7, #28]
 80092a2:	4413      	add	r3, r2
 80092a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092a8:	691b      	ldr	r3, [r3, #16]
 80092aa:	69ba      	ldr	r2, [r7, #24]
 80092ac:	0151      	lsls	r1, r2, #5
 80092ae:	69fa      	ldr	r2, [r7, #28]
 80092b0:	440a      	add	r2, r1
 80092b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80092b6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80092ba:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80092be:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80092c0:	69bb      	ldr	r3, [r7, #24]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d132      	bne.n	800932c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	691b      	ldr	r3, [r3, #16]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d003      	beq.n	80092d6 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	689a      	ldr	r2, [r3, #8]
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	689a      	ldr	r2, [r3, #8]
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80092de:	69bb      	ldr	r3, [r7, #24]
 80092e0:	015a      	lsls	r2, r3, #5
 80092e2:	69fb      	ldr	r3, [r7, #28]
 80092e4:	4413      	add	r3, r2
 80092e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092ea:	691a      	ldr	r2, [r3, #16]
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	6a1b      	ldr	r3, [r3, #32]
 80092f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80092f4:	69b9      	ldr	r1, [r7, #24]
 80092f6:	0148      	lsls	r0, r1, #5
 80092f8:	69f9      	ldr	r1, [r7, #28]
 80092fa:	4401      	add	r1, r0
 80092fc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009300:	4313      	orrs	r3, r2
 8009302:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009304:	69bb      	ldr	r3, [r7, #24]
 8009306:	015a      	lsls	r2, r3, #5
 8009308:	69fb      	ldr	r3, [r7, #28]
 800930a:	4413      	add	r3, r2
 800930c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009310:	691b      	ldr	r3, [r3, #16]
 8009312:	69ba      	ldr	r2, [r7, #24]
 8009314:	0151      	lsls	r1, r2, #5
 8009316:	69fa      	ldr	r2, [r7, #28]
 8009318:	440a      	add	r2, r1
 800931a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800931e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009322:	6113      	str	r3, [r2, #16]
 8009324:	e062      	b.n	80093ec <USB_EPStartXfer+0x490>
 8009326:	bf00      	nop
 8009328:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	691b      	ldr	r3, [r3, #16]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d123      	bne.n	800937c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009334:	69bb      	ldr	r3, [r7, #24]
 8009336:	015a      	lsls	r2, r3, #5
 8009338:	69fb      	ldr	r3, [r7, #28]
 800933a:	4413      	add	r3, r2
 800933c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009340:	691a      	ldr	r2, [r3, #16]
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	689b      	ldr	r3, [r3, #8]
 8009346:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800934a:	69b9      	ldr	r1, [r7, #24]
 800934c:	0148      	lsls	r0, r1, #5
 800934e:	69f9      	ldr	r1, [r7, #28]
 8009350:	4401      	add	r1, r0
 8009352:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009356:	4313      	orrs	r3, r2
 8009358:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800935a:	69bb      	ldr	r3, [r7, #24]
 800935c:	015a      	lsls	r2, r3, #5
 800935e:	69fb      	ldr	r3, [r7, #28]
 8009360:	4413      	add	r3, r2
 8009362:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009366:	691b      	ldr	r3, [r3, #16]
 8009368:	69ba      	ldr	r2, [r7, #24]
 800936a:	0151      	lsls	r1, r2, #5
 800936c:	69fa      	ldr	r2, [r7, #28]
 800936e:	440a      	add	r2, r1
 8009370:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009374:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009378:	6113      	str	r3, [r2, #16]
 800937a:	e037      	b.n	80093ec <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	691a      	ldr	r2, [r3, #16]
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	689b      	ldr	r3, [r3, #8]
 8009384:	4413      	add	r3, r2
 8009386:	1e5a      	subs	r2, r3, #1
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	689b      	ldr	r3, [r3, #8]
 800938c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009390:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	689b      	ldr	r3, [r3, #8]
 8009396:	8afa      	ldrh	r2, [r7, #22]
 8009398:	fb03 f202 	mul.w	r2, r3, r2
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80093a0:	69bb      	ldr	r3, [r7, #24]
 80093a2:	015a      	lsls	r2, r3, #5
 80093a4:	69fb      	ldr	r3, [r7, #28]
 80093a6:	4413      	add	r3, r2
 80093a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093ac:	691a      	ldr	r2, [r3, #16]
 80093ae:	8afb      	ldrh	r3, [r7, #22]
 80093b0:	04d9      	lsls	r1, r3, #19
 80093b2:	4b38      	ldr	r3, [pc, #224]	@ (8009494 <USB_EPStartXfer+0x538>)
 80093b4:	400b      	ands	r3, r1
 80093b6:	69b9      	ldr	r1, [r7, #24]
 80093b8:	0148      	lsls	r0, r1, #5
 80093ba:	69f9      	ldr	r1, [r7, #28]
 80093bc:	4401      	add	r1, r0
 80093be:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80093c2:	4313      	orrs	r3, r2
 80093c4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80093c6:	69bb      	ldr	r3, [r7, #24]
 80093c8:	015a      	lsls	r2, r3, #5
 80093ca:	69fb      	ldr	r3, [r7, #28]
 80093cc:	4413      	add	r3, r2
 80093ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093d2:	691a      	ldr	r2, [r3, #16]
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	6a1b      	ldr	r3, [r3, #32]
 80093d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80093dc:	69b9      	ldr	r1, [r7, #24]
 80093de:	0148      	lsls	r0, r1, #5
 80093e0:	69f9      	ldr	r1, [r7, #28]
 80093e2:	4401      	add	r1, r0
 80093e4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80093e8:	4313      	orrs	r3, r2
 80093ea:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80093ec:	79fb      	ldrb	r3, [r7, #7]
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	d10d      	bne.n	800940e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	68db      	ldr	r3, [r3, #12]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d009      	beq.n	800940e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	68d9      	ldr	r1, [r3, #12]
 80093fe:	69bb      	ldr	r3, [r7, #24]
 8009400:	015a      	lsls	r2, r3, #5
 8009402:	69fb      	ldr	r3, [r7, #28]
 8009404:	4413      	add	r3, r2
 8009406:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800940a:	460a      	mov	r2, r1
 800940c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	791b      	ldrb	r3, [r3, #4]
 8009412:	2b01      	cmp	r3, #1
 8009414:	d128      	bne.n	8009468 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009416:	69fb      	ldr	r3, [r7, #28]
 8009418:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800941c:	689b      	ldr	r3, [r3, #8]
 800941e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009422:	2b00      	cmp	r3, #0
 8009424:	d110      	bne.n	8009448 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009426:	69bb      	ldr	r3, [r7, #24]
 8009428:	015a      	lsls	r2, r3, #5
 800942a:	69fb      	ldr	r3, [r7, #28]
 800942c:	4413      	add	r3, r2
 800942e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	69ba      	ldr	r2, [r7, #24]
 8009436:	0151      	lsls	r1, r2, #5
 8009438:	69fa      	ldr	r2, [r7, #28]
 800943a:	440a      	add	r2, r1
 800943c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009440:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009444:	6013      	str	r3, [r2, #0]
 8009446:	e00f      	b.n	8009468 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009448:	69bb      	ldr	r3, [r7, #24]
 800944a:	015a      	lsls	r2, r3, #5
 800944c:	69fb      	ldr	r3, [r7, #28]
 800944e:	4413      	add	r3, r2
 8009450:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	69ba      	ldr	r2, [r7, #24]
 8009458:	0151      	lsls	r1, r2, #5
 800945a:	69fa      	ldr	r2, [r7, #28]
 800945c:	440a      	add	r2, r1
 800945e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009462:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009466:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009468:	69bb      	ldr	r3, [r7, #24]
 800946a:	015a      	lsls	r2, r3, #5
 800946c:	69fb      	ldr	r3, [r7, #28]
 800946e:	4413      	add	r3, r2
 8009470:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	69ba      	ldr	r2, [r7, #24]
 8009478:	0151      	lsls	r1, r2, #5
 800947a:	69fa      	ldr	r2, [r7, #28]
 800947c:	440a      	add	r2, r1
 800947e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009482:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009486:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009488:	2300      	movs	r3, #0
}
 800948a:	4618      	mov	r0, r3
 800948c:	3720      	adds	r7, #32
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}
 8009492:	bf00      	nop
 8009494:	1ff80000 	.word	0x1ff80000

08009498 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009498:	b480      	push	{r7}
 800949a:	b087      	sub	sp, #28
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
 80094a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80094a2:	2300      	movs	r3, #0
 80094a4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80094a6:	2300      	movs	r3, #0
 80094a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	785b      	ldrb	r3, [r3, #1]
 80094b2:	2b01      	cmp	r3, #1
 80094b4:	d14a      	bne.n	800954c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	781b      	ldrb	r3, [r3, #0]
 80094ba:	015a      	lsls	r2, r3, #5
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	4413      	add	r3, r2
 80094c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80094ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80094ce:	f040 8086 	bne.w	80095de <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	781b      	ldrb	r3, [r3, #0]
 80094d6:	015a      	lsls	r2, r3, #5
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	4413      	add	r3, r2
 80094dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	683a      	ldr	r2, [r7, #0]
 80094e4:	7812      	ldrb	r2, [r2, #0]
 80094e6:	0151      	lsls	r1, r2, #5
 80094e8:	693a      	ldr	r2, [r7, #16]
 80094ea:	440a      	add	r2, r1
 80094ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80094f0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80094f4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	781b      	ldrb	r3, [r3, #0]
 80094fa:	015a      	lsls	r2, r3, #5
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	4413      	add	r3, r2
 8009500:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	683a      	ldr	r2, [r7, #0]
 8009508:	7812      	ldrb	r2, [r2, #0]
 800950a:	0151      	lsls	r1, r2, #5
 800950c:	693a      	ldr	r2, [r7, #16]
 800950e:	440a      	add	r2, r1
 8009510:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009514:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009518:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	3301      	adds	r3, #1
 800951e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009526:	4293      	cmp	r3, r2
 8009528:	d902      	bls.n	8009530 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800952a:	2301      	movs	r3, #1
 800952c:	75fb      	strb	r3, [r7, #23]
          break;
 800952e:	e056      	b.n	80095de <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	781b      	ldrb	r3, [r3, #0]
 8009534:	015a      	lsls	r2, r3, #5
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	4413      	add	r3, r2
 800953a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009544:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009548:	d0e7      	beq.n	800951a <USB_EPStopXfer+0x82>
 800954a:	e048      	b.n	80095de <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	781b      	ldrb	r3, [r3, #0]
 8009550:	015a      	lsls	r2, r3, #5
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	4413      	add	r3, r2
 8009556:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009560:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009564:	d13b      	bne.n	80095de <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	781b      	ldrb	r3, [r3, #0]
 800956a:	015a      	lsls	r2, r3, #5
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	4413      	add	r3, r2
 8009570:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	683a      	ldr	r2, [r7, #0]
 8009578:	7812      	ldrb	r2, [r2, #0]
 800957a:	0151      	lsls	r1, r2, #5
 800957c:	693a      	ldr	r2, [r7, #16]
 800957e:	440a      	add	r2, r1
 8009580:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009584:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009588:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	781b      	ldrb	r3, [r3, #0]
 800958e:	015a      	lsls	r2, r3, #5
 8009590:	693b      	ldr	r3, [r7, #16]
 8009592:	4413      	add	r3, r2
 8009594:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	683a      	ldr	r2, [r7, #0]
 800959c:	7812      	ldrb	r2, [r2, #0]
 800959e:	0151      	lsls	r1, r2, #5
 80095a0:	693a      	ldr	r2, [r7, #16]
 80095a2:	440a      	add	r2, r1
 80095a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80095a8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80095ac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	3301      	adds	r3, #1
 80095b2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d902      	bls.n	80095c4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80095be:	2301      	movs	r3, #1
 80095c0:	75fb      	strb	r3, [r7, #23]
          break;
 80095c2:	e00c      	b.n	80095de <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	781b      	ldrb	r3, [r3, #0]
 80095c8:	015a      	lsls	r2, r3, #5
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	4413      	add	r3, r2
 80095ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80095d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80095dc:	d0e7      	beq.n	80095ae <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80095de:	7dfb      	ldrb	r3, [r7, #23]
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	371c      	adds	r7, #28
 80095e4:	46bd      	mov	sp, r7
 80095e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ea:	4770      	bx	lr

080095ec <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b089      	sub	sp, #36	@ 0x24
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	60f8      	str	r0, [r7, #12]
 80095f4:	60b9      	str	r1, [r7, #8]
 80095f6:	4611      	mov	r1, r2
 80095f8:	461a      	mov	r2, r3
 80095fa:	460b      	mov	r3, r1
 80095fc:	71fb      	strb	r3, [r7, #7]
 80095fe:	4613      	mov	r3, r2
 8009600:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800960a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800960e:	2b00      	cmp	r3, #0
 8009610:	d123      	bne.n	800965a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009612:	88bb      	ldrh	r3, [r7, #4]
 8009614:	3303      	adds	r3, #3
 8009616:	089b      	lsrs	r3, r3, #2
 8009618:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800961a:	2300      	movs	r3, #0
 800961c:	61bb      	str	r3, [r7, #24]
 800961e:	e018      	b.n	8009652 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009620:	79fb      	ldrb	r3, [r7, #7]
 8009622:	031a      	lsls	r2, r3, #12
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	4413      	add	r3, r2
 8009628:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800962c:	461a      	mov	r2, r3
 800962e:	69fb      	ldr	r3, [r7, #28]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009634:	69fb      	ldr	r3, [r7, #28]
 8009636:	3301      	adds	r3, #1
 8009638:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800963a:	69fb      	ldr	r3, [r7, #28]
 800963c:	3301      	adds	r3, #1
 800963e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009640:	69fb      	ldr	r3, [r7, #28]
 8009642:	3301      	adds	r3, #1
 8009644:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009646:	69fb      	ldr	r3, [r7, #28]
 8009648:	3301      	adds	r3, #1
 800964a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800964c:	69bb      	ldr	r3, [r7, #24]
 800964e:	3301      	adds	r3, #1
 8009650:	61bb      	str	r3, [r7, #24]
 8009652:	69ba      	ldr	r2, [r7, #24]
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	429a      	cmp	r2, r3
 8009658:	d3e2      	bcc.n	8009620 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800965a:	2300      	movs	r3, #0
}
 800965c:	4618      	mov	r0, r3
 800965e:	3724      	adds	r7, #36	@ 0x24
 8009660:	46bd      	mov	sp, r7
 8009662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009666:	4770      	bx	lr

08009668 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009668:	b480      	push	{r7}
 800966a:	b08b      	sub	sp, #44	@ 0x2c
 800966c:	af00      	add	r7, sp, #0
 800966e:	60f8      	str	r0, [r7, #12]
 8009670:	60b9      	str	r1, [r7, #8]
 8009672:	4613      	mov	r3, r2
 8009674:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800967e:	88fb      	ldrh	r3, [r7, #6]
 8009680:	089b      	lsrs	r3, r3, #2
 8009682:	b29b      	uxth	r3, r3
 8009684:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009686:	88fb      	ldrh	r3, [r7, #6]
 8009688:	f003 0303 	and.w	r3, r3, #3
 800968c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800968e:	2300      	movs	r3, #0
 8009690:	623b      	str	r3, [r7, #32]
 8009692:	e014      	b.n	80096be <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009694:	69bb      	ldr	r3, [r7, #24]
 8009696:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800969a:	681a      	ldr	r2, [r3, #0]
 800969c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800969e:	601a      	str	r2, [r3, #0]
    pDest++;
 80096a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096a2:	3301      	adds	r3, #1
 80096a4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80096a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096a8:	3301      	adds	r3, #1
 80096aa:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80096ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096ae:	3301      	adds	r3, #1
 80096b0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80096b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096b4:	3301      	adds	r3, #1
 80096b6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80096b8:	6a3b      	ldr	r3, [r7, #32]
 80096ba:	3301      	adds	r3, #1
 80096bc:	623b      	str	r3, [r7, #32]
 80096be:	6a3a      	ldr	r2, [r7, #32]
 80096c0:	697b      	ldr	r3, [r7, #20]
 80096c2:	429a      	cmp	r2, r3
 80096c4:	d3e6      	bcc.n	8009694 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80096c6:	8bfb      	ldrh	r3, [r7, #30]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d01e      	beq.n	800970a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80096cc:	2300      	movs	r3, #0
 80096ce:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80096d0:	69bb      	ldr	r3, [r7, #24]
 80096d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80096d6:	461a      	mov	r2, r3
 80096d8:	f107 0310 	add.w	r3, r7, #16
 80096dc:	6812      	ldr	r2, [r2, #0]
 80096de:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80096e0:	693a      	ldr	r2, [r7, #16]
 80096e2:	6a3b      	ldr	r3, [r7, #32]
 80096e4:	b2db      	uxtb	r3, r3
 80096e6:	00db      	lsls	r3, r3, #3
 80096e8:	fa22 f303 	lsr.w	r3, r2, r3
 80096ec:	b2da      	uxtb	r2, r3
 80096ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096f0:	701a      	strb	r2, [r3, #0]
      i++;
 80096f2:	6a3b      	ldr	r3, [r7, #32]
 80096f4:	3301      	adds	r3, #1
 80096f6:	623b      	str	r3, [r7, #32]
      pDest++;
 80096f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096fa:	3301      	adds	r3, #1
 80096fc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80096fe:	8bfb      	ldrh	r3, [r7, #30]
 8009700:	3b01      	subs	r3, #1
 8009702:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009704:	8bfb      	ldrh	r3, [r7, #30]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d1ea      	bne.n	80096e0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800970a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800970c:	4618      	mov	r0, r3
 800970e:	372c      	adds	r7, #44	@ 0x2c
 8009710:	46bd      	mov	sp, r7
 8009712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009716:	4770      	bx	lr

08009718 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009718:	b480      	push	{r7}
 800971a:	b085      	sub	sp, #20
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	781b      	ldrb	r3, [r3, #0]
 800972a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	785b      	ldrb	r3, [r3, #1]
 8009730:	2b01      	cmp	r3, #1
 8009732:	d12c      	bne.n	800978e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	015a      	lsls	r2, r3, #5
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	4413      	add	r3, r2
 800973c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	2b00      	cmp	r3, #0
 8009744:	db12      	blt.n	800976c <USB_EPSetStall+0x54>
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d00f      	beq.n	800976c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	015a      	lsls	r2, r3, #5
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	4413      	add	r3, r2
 8009754:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	68ba      	ldr	r2, [r7, #8]
 800975c:	0151      	lsls	r1, r2, #5
 800975e:	68fa      	ldr	r2, [r7, #12]
 8009760:	440a      	add	r2, r1
 8009762:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009766:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800976a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	015a      	lsls	r2, r3, #5
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	4413      	add	r3, r2
 8009774:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	68ba      	ldr	r2, [r7, #8]
 800977c:	0151      	lsls	r1, r2, #5
 800977e:	68fa      	ldr	r2, [r7, #12]
 8009780:	440a      	add	r2, r1
 8009782:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009786:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800978a:	6013      	str	r3, [r2, #0]
 800978c:	e02b      	b.n	80097e6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	015a      	lsls	r2, r3, #5
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	4413      	add	r3, r2
 8009796:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	2b00      	cmp	r3, #0
 800979e:	db12      	blt.n	80097c6 <USB_EPSetStall+0xae>
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d00f      	beq.n	80097c6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	015a      	lsls	r2, r3, #5
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	4413      	add	r3, r2
 80097ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	68ba      	ldr	r2, [r7, #8]
 80097b6:	0151      	lsls	r1, r2, #5
 80097b8:	68fa      	ldr	r2, [r7, #12]
 80097ba:	440a      	add	r2, r1
 80097bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80097c0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80097c4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	015a      	lsls	r2, r3, #5
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	4413      	add	r3, r2
 80097ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	68ba      	ldr	r2, [r7, #8]
 80097d6:	0151      	lsls	r1, r2, #5
 80097d8:	68fa      	ldr	r2, [r7, #12]
 80097da:	440a      	add	r2, r1
 80097dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80097e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80097e4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80097e6:	2300      	movs	r3, #0
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3714      	adds	r7, #20
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr

080097f4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b085      	sub	sp, #20
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
 80097fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	781b      	ldrb	r3, [r3, #0]
 8009806:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	785b      	ldrb	r3, [r3, #1]
 800980c:	2b01      	cmp	r3, #1
 800980e:	d128      	bne.n	8009862 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	015a      	lsls	r2, r3, #5
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	4413      	add	r3, r2
 8009818:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	68ba      	ldr	r2, [r7, #8]
 8009820:	0151      	lsls	r1, r2, #5
 8009822:	68fa      	ldr	r2, [r7, #12]
 8009824:	440a      	add	r2, r1
 8009826:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800982a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800982e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	791b      	ldrb	r3, [r3, #4]
 8009834:	2b03      	cmp	r3, #3
 8009836:	d003      	beq.n	8009840 <USB_EPClearStall+0x4c>
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	791b      	ldrb	r3, [r3, #4]
 800983c:	2b02      	cmp	r3, #2
 800983e:	d138      	bne.n	80098b2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	015a      	lsls	r2, r3, #5
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	4413      	add	r3, r2
 8009848:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	68ba      	ldr	r2, [r7, #8]
 8009850:	0151      	lsls	r1, r2, #5
 8009852:	68fa      	ldr	r2, [r7, #12]
 8009854:	440a      	add	r2, r1
 8009856:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800985a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800985e:	6013      	str	r3, [r2, #0]
 8009860:	e027      	b.n	80098b2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	015a      	lsls	r2, r3, #5
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	4413      	add	r3, r2
 800986a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	68ba      	ldr	r2, [r7, #8]
 8009872:	0151      	lsls	r1, r2, #5
 8009874:	68fa      	ldr	r2, [r7, #12]
 8009876:	440a      	add	r2, r1
 8009878:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800987c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009880:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	791b      	ldrb	r3, [r3, #4]
 8009886:	2b03      	cmp	r3, #3
 8009888:	d003      	beq.n	8009892 <USB_EPClearStall+0x9e>
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	791b      	ldrb	r3, [r3, #4]
 800988e:	2b02      	cmp	r3, #2
 8009890:	d10f      	bne.n	80098b2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	015a      	lsls	r2, r3, #5
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	4413      	add	r3, r2
 800989a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	68ba      	ldr	r2, [r7, #8]
 80098a2:	0151      	lsls	r1, r2, #5
 80098a4:	68fa      	ldr	r2, [r7, #12]
 80098a6:	440a      	add	r2, r1
 80098a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80098ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80098b0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80098b2:	2300      	movs	r3, #0
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3714      	adds	r7, #20
 80098b8:	46bd      	mov	sp, r7
 80098ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098be:	4770      	bx	lr

080098c0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80098c0:	b480      	push	{r7}
 80098c2:	b085      	sub	sp, #20
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
 80098c8:	460b      	mov	r3, r1
 80098ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	68fa      	ldr	r2, [r7, #12]
 80098da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80098de:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80098e2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098ea:	681a      	ldr	r2, [r3, #0]
 80098ec:	78fb      	ldrb	r3, [r7, #3]
 80098ee:	011b      	lsls	r3, r3, #4
 80098f0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80098f4:	68f9      	ldr	r1, [r7, #12]
 80098f6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80098fa:	4313      	orrs	r3, r2
 80098fc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80098fe:	2300      	movs	r3, #0
}
 8009900:	4618      	mov	r0, r3
 8009902:	3714      	adds	r7, #20
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr

0800990c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800990c:	b480      	push	{r7}
 800990e:	b085      	sub	sp, #20
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	68fa      	ldr	r2, [r7, #12]
 8009922:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009926:	f023 0303 	bic.w	r3, r3, #3
 800992a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009932:	685b      	ldr	r3, [r3, #4]
 8009934:	68fa      	ldr	r2, [r7, #12]
 8009936:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800993a:	f023 0302 	bic.w	r3, r3, #2
 800993e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009940:	2300      	movs	r3, #0
}
 8009942:	4618      	mov	r0, r3
 8009944:	3714      	adds	r7, #20
 8009946:	46bd      	mov	sp, r7
 8009948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994c:	4770      	bx	lr

0800994e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800994e:	b480      	push	{r7}
 8009950:	b085      	sub	sp, #20
 8009952:	af00      	add	r7, sp, #0
 8009954:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	68fa      	ldr	r2, [r7, #12]
 8009964:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009968:	f023 0303 	bic.w	r3, r3, #3
 800996c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009974:	685b      	ldr	r3, [r3, #4]
 8009976:	68fa      	ldr	r2, [r7, #12]
 8009978:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800997c:	f043 0302 	orr.w	r3, r3, #2
 8009980:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009982:	2300      	movs	r3, #0
}
 8009984:	4618      	mov	r0, r3
 8009986:	3714      	adds	r7, #20
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr

08009990 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009990:	b480      	push	{r7}
 8009992:	b085      	sub	sp, #20
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	695b      	ldr	r3, [r3, #20]
 800999c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	699b      	ldr	r3, [r3, #24]
 80099a2:	68fa      	ldr	r2, [r7, #12]
 80099a4:	4013      	ands	r3, r2
 80099a6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80099a8:	68fb      	ldr	r3, [r7, #12]
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3714      	adds	r7, #20
 80099ae:	46bd      	mov	sp, r7
 80099b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b4:	4770      	bx	lr

080099b6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80099b6:	b480      	push	{r7}
 80099b8:	b085      	sub	sp, #20
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099c8:	699b      	ldr	r3, [r3, #24]
 80099ca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099d2:	69db      	ldr	r3, [r3, #28]
 80099d4:	68ba      	ldr	r2, [r7, #8]
 80099d6:	4013      	ands	r3, r2
 80099d8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	0c1b      	lsrs	r3, r3, #16
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3714      	adds	r7, #20
 80099e2:	46bd      	mov	sp, r7
 80099e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e8:	4770      	bx	lr

080099ea <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80099ea:	b480      	push	{r7}
 80099ec:	b085      	sub	sp, #20
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099fc:	699b      	ldr	r3, [r3, #24]
 80099fe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a06:	69db      	ldr	r3, [r3, #28]
 8009a08:	68ba      	ldr	r2, [r7, #8]
 8009a0a:	4013      	ands	r3, r2
 8009a0c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	b29b      	uxth	r3, r3
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3714      	adds	r7, #20
 8009a16:	46bd      	mov	sp, r7
 8009a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1c:	4770      	bx	lr

08009a1e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009a1e:	b480      	push	{r7}
 8009a20:	b085      	sub	sp, #20
 8009a22:	af00      	add	r7, sp, #0
 8009a24:	6078      	str	r0, [r7, #4]
 8009a26:	460b      	mov	r3, r1
 8009a28:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009a2e:	78fb      	ldrb	r3, [r7, #3]
 8009a30:	015a      	lsls	r2, r3, #5
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	4413      	add	r3, r2
 8009a36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a3a:	689b      	ldr	r3, [r3, #8]
 8009a3c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a44:	695b      	ldr	r3, [r3, #20]
 8009a46:	68ba      	ldr	r2, [r7, #8]
 8009a48:	4013      	ands	r3, r2
 8009a4a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009a4c:	68bb      	ldr	r3, [r7, #8]
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3714      	adds	r7, #20
 8009a52:	46bd      	mov	sp, r7
 8009a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a58:	4770      	bx	lr

08009a5a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009a5a:	b480      	push	{r7}
 8009a5c:	b087      	sub	sp, #28
 8009a5e:	af00      	add	r7, sp, #0
 8009a60:	6078      	str	r0, [r7, #4]
 8009a62:	460b      	mov	r3, r1
 8009a64:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009a6a:	697b      	ldr	r3, [r7, #20]
 8009a6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a70:	691b      	ldr	r3, [r3, #16]
 8009a72:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a7c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009a7e:	78fb      	ldrb	r3, [r7, #3]
 8009a80:	f003 030f 	and.w	r3, r3, #15
 8009a84:	68fa      	ldr	r2, [r7, #12]
 8009a86:	fa22 f303 	lsr.w	r3, r2, r3
 8009a8a:	01db      	lsls	r3, r3, #7
 8009a8c:	b2db      	uxtb	r3, r3
 8009a8e:	693a      	ldr	r2, [r7, #16]
 8009a90:	4313      	orrs	r3, r2
 8009a92:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009a94:	78fb      	ldrb	r3, [r7, #3]
 8009a96:	015a      	lsls	r2, r3, #5
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	4413      	add	r3, r2
 8009a9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009aa0:	689b      	ldr	r3, [r3, #8]
 8009aa2:	693a      	ldr	r2, [r7, #16]
 8009aa4:	4013      	ands	r3, r2
 8009aa6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009aa8:	68bb      	ldr	r3, [r7, #8]
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	371c      	adds	r7, #28
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab4:	4770      	bx	lr

08009ab6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009ab6:	b480      	push	{r7}
 8009ab8:	b083      	sub	sp, #12
 8009aba:	af00      	add	r7, sp, #0
 8009abc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	695b      	ldr	r3, [r3, #20]
 8009ac2:	f003 0301 	and.w	r3, r3, #1
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	370c      	adds	r7, #12
 8009aca:	46bd      	mov	sp, r7
 8009acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad0:	4770      	bx	lr

08009ad2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8009ad2:	b480      	push	{r7}
 8009ad4:	b085      	sub	sp, #20
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	68fa      	ldr	r2, [r7, #12]
 8009ae8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009aec:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009af0:	f023 0307 	bic.w	r3, r3, #7
 8009af4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009afc:	685b      	ldr	r3, [r3, #4]
 8009afe:	68fa      	ldr	r2, [r7, #12]
 8009b00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009b04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009b08:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009b0a:	2300      	movs	r3, #0
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	3714      	adds	r7, #20
 8009b10:	46bd      	mov	sp, r7
 8009b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b16:	4770      	bx	lr

08009b18 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b087      	sub	sp, #28
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	60f8      	str	r0, [r7, #12]
 8009b20:	460b      	mov	r3, r1
 8009b22:	607a      	str	r2, [r7, #4]
 8009b24:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	333c      	adds	r3, #60	@ 0x3c
 8009b2e:	3304      	adds	r3, #4
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	4a26      	ldr	r2, [pc, #152]	@ (8009bd0 <USB_EP0_OutStart+0xb8>)
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d90a      	bls.n	8009b52 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009b48:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009b4c:	d101      	bne.n	8009b52 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	e037      	b.n	8009bc2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009b52:	697b      	ldr	r3, [r7, #20]
 8009b54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b58:	461a      	mov	r2, r3
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b64:	691b      	ldr	r3, [r3, #16]
 8009b66:	697a      	ldr	r2, [r7, #20]
 8009b68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b6c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009b70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b78:	691b      	ldr	r3, [r3, #16]
 8009b7a:	697a      	ldr	r2, [r7, #20]
 8009b7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b80:	f043 0318 	orr.w	r3, r3, #24
 8009b84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b8c:	691b      	ldr	r3, [r3, #16]
 8009b8e:	697a      	ldr	r2, [r7, #20]
 8009b90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b94:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8009b98:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009b9a:	7afb      	ldrb	r3, [r7, #11]
 8009b9c:	2b01      	cmp	r3, #1
 8009b9e:	d10f      	bne.n	8009bc0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ba6:	461a      	mov	r2, r3
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	697a      	ldr	r2, [r7, #20]
 8009bb6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009bba:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8009bbe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009bc0:	2300      	movs	r3, #0
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	371c      	adds	r7, #28
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bcc:	4770      	bx	lr
 8009bce:	bf00      	nop
 8009bd0:	4f54300a 	.word	0x4f54300a

08009bd4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b085      	sub	sp, #20
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	3301      	adds	r3, #1
 8009be4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009bec:	d901      	bls.n	8009bf2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009bee:	2303      	movs	r3, #3
 8009bf0:	e01b      	b.n	8009c2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	691b      	ldr	r3, [r3, #16]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	daf2      	bge.n	8009be0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	691b      	ldr	r3, [r3, #16]
 8009c02:	f043 0201 	orr.w	r2, r3, #1
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	3301      	adds	r3, #1
 8009c0e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009c16:	d901      	bls.n	8009c1c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009c18:	2303      	movs	r3, #3
 8009c1a:	e006      	b.n	8009c2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	691b      	ldr	r3, [r3, #16]
 8009c20:	f003 0301 	and.w	r3, r3, #1
 8009c24:	2b01      	cmp	r3, #1
 8009c26:	d0f0      	beq.n	8009c0a <USB_CoreReset+0x36>

  return HAL_OK;
 8009c28:	2300      	movs	r3, #0
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3714      	adds	r7, #20
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c34:	4770      	bx	lr
	...

08009c38 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  USBD_COMPOSITE_Mount_Class();
 8009c3c:	f001 f992 	bl	800af64 <USBD_COMPOSITE_Mount_Class>
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_HS) != USBD_OK)
  {
    Error_Handler();
  }
#else
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_FS) != USBD_OK)
 8009c40:	2200      	movs	r2, #0
 8009c42:	4917      	ldr	r1, [pc, #92]	@ (8009ca0 <MX_USB_DEVICE_Init+0x68>)
 8009c44:	4817      	ldr	r0, [pc, #92]	@ (8009ca4 <MX_USB_DEVICE_Init+0x6c>)
 8009c46:	f001 fda7 	bl	800b798 <USBD_Init>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d001      	beq.n	8009c54 <MX_USB_DEVICE_Init+0x1c>
  {
    Error_Handler();
 8009c50:	f7f8 f97c 	bl	8001f4c <Error_Handler>
  }
#endif
  if (USBD_RegisterClass(&hUsbDevice, &USBD_COMPOSITE) != USBD_OK)
 8009c54:	4914      	ldr	r1, [pc, #80]	@ (8009ca8 <MX_USB_DEVICE_Init+0x70>)
 8009c56:	4813      	ldr	r0, [pc, #76]	@ (8009ca4 <MX_USB_DEVICE_Init+0x6c>)
 8009c58:	f001 fdca 	bl	800b7f0 <USBD_RegisterClass>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d001      	beq.n	8009c66 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8009c62:	f7f8 f973 	bl	8001f4c <Error_Handler>
  }
#if (USBD_USE_CDC_ACM == 1)
  if (USBD_CDC_ACM_RegisterInterface(&hUsbDevice, &USBD_CDC_ACM_fops) != USBD_OK)
 8009c66:	4911      	ldr	r1, [pc, #68]	@ (8009cac <MX_USB_DEVICE_Init+0x74>)
 8009c68:	480e      	ldr	r0, [pc, #56]	@ (8009ca4 <MX_USB_DEVICE_Init+0x6c>)
 8009c6a:	f000 fe55 	bl	800a918 <USBD_CDC_ACM_RegisterInterface>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d001      	beq.n	8009c78 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8009c74:	f7f8 f96a 	bl	8001f4c <Error_Handler>
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDevice, &USBD_CustomHID_fops) != USBD_OK)
 8009c78:	490d      	ldr	r1, [pc, #52]	@ (8009cb0 <MX_USB_DEVICE_Init+0x78>)
 8009c7a:	480a      	ldr	r0, [pc, #40]	@ (8009ca4 <MX_USB_DEVICE_Init+0x6c>)
 8009c7c:	f001 fd3e 	bl	800b6fc <USBD_CUSTOM_HID_RegisterInterface>
 8009c80:	4603      	mov	r3, r0
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d001      	beq.n	8009c8a <MX_USB_DEVICE_Init+0x52>
  {
    Error_Handler();
 8009c86:	f7f8 f961 	bl	8001f4c <Error_Handler>
  if (USBD_PRNT_RegisterInterface(&hUsbDevice, &USBD_PRNT_fops) != USBD_OK)
  {
    Error_Handler();
  }
#endif
  if (USBD_Start(&hUsbDevice) != USBD_OK)
 8009c8a:	4806      	ldr	r0, [pc, #24]	@ (8009ca4 <MX_USB_DEVICE_Init+0x6c>)
 8009c8c:	f001 fdee 	bl	800b86c <USBD_Start>
 8009c90:	4603      	mov	r3, r0
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d001      	beq.n	8009c9a <MX_USB_DEVICE_Init+0x62>
  {
    Error_Handler();
 8009c96:	f7f8 f959 	bl	8001f4c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009c9a:	bf00      	nop
 8009c9c:	bd80      	pop	{r7, pc}
 8009c9e:	bf00      	nop
 8009ca0:	20000024 	.word	0x20000024
 8009ca4:	20000d54 	.word	0x20000d54
 8009ca8:	200001ac 	.word	0x200001ac
 8009cac:	20000010 	.word	0x20000010
 8009cb0:	200000bc 	.word	0x200000bc

08009cb4 <CDC_Init>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init(uint8_t cdc_ch)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b082      	sub	sp, #8
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	4603      	mov	r3, r0
 8009cbc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */

  /* ##-1- Set Application Buffers */
  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, RX_Buffer[cdc_ch]);
 8009cbe:	79fb      	ldrb	r3, [r7, #7]
 8009cc0:	01db      	lsls	r3, r3, #7
 8009cc2:	4a06      	ldr	r2, [pc, #24]	@ (8009cdc <CDC_Init+0x28>)
 8009cc4:	441a      	add	r2, r3
 8009cc6:	79fb      	ldrb	r3, [r7, #7]
 8009cc8:	4905      	ldr	r1, [pc, #20]	@ (8009ce0 <CDC_Init+0x2c>)
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f000 fe5e 	bl	800a98c <USBD_CDC_SetRxBuffer>
  //  {
  //    /* Starting Error */
  //    Error_Handler();
  //  }

  return (USBD_OK);
 8009cd0:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3708      	adds	r7, #8
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}
 8009cda:	bf00      	nop
 8009cdc:	20001070 	.word	0x20001070
 8009ce0:	20000d54 	.word	0x20000d54

08009ce4 <CDC_DeInit>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit(uint8_t cdc_ch)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b083      	sub	sp, #12
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	4603      	mov	r3, r0
 8009cec:	71fb      	strb	r3, [r7, #7]
  //  if (HAL_UART_DeInit(CDC_CH_To_UART_Handle(cdc_ch)) != HAL_OK)
  //  {
  //    /* Initialization Error */
  //    Error_Handler();
  //  }
  return (USBD_OK);
 8009cee:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	370c      	adds	r7, #12
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfa:	4770      	bx	lr

08009cfc <CDC_Control>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control(uint8_t cdc_ch, uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b083      	sub	sp, #12
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	603a      	str	r2, [r7, #0]
 8009d04:	461a      	mov	r2, r3
 8009d06:	4603      	mov	r3, r0
 8009d08:	71fb      	strb	r3, [r7, #7]
 8009d0a:	460b      	mov	r3, r1
 8009d0c:	71bb      	strb	r3, [r7, #6]
 8009d0e:	4613      	mov	r3, r2
 8009d10:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd)
 8009d12:	79bb      	ldrb	r3, [r7, #6]
 8009d14:	2b23      	cmp	r3, #35	@ 0x23
 8009d16:	f200 80b6 	bhi.w	8009e86 <CDC_Control+0x18a>
 8009d1a:	a201      	add	r2, pc, #4	@ (adr r2, 8009d20 <CDC_Control+0x24>)
 8009d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d20:	08009e87 	.word	0x08009e87
 8009d24:	08009e87 	.word	0x08009e87
 8009d28:	08009e87 	.word	0x08009e87
 8009d2c:	08009e87 	.word	0x08009e87
 8009d30:	08009e87 	.word	0x08009e87
 8009d34:	08009e87 	.word	0x08009e87
 8009d38:	08009e87 	.word	0x08009e87
 8009d3c:	08009e87 	.word	0x08009e87
 8009d40:	08009e87 	.word	0x08009e87
 8009d44:	08009e87 	.word	0x08009e87
 8009d48:	08009e87 	.word	0x08009e87
 8009d4c:	08009e87 	.word	0x08009e87
 8009d50:	08009e87 	.word	0x08009e87
 8009d54:	08009e87 	.word	0x08009e87
 8009d58:	08009e87 	.word	0x08009e87
 8009d5c:	08009e87 	.word	0x08009e87
 8009d60:	08009e87 	.word	0x08009e87
 8009d64:	08009e87 	.word	0x08009e87
 8009d68:	08009e87 	.word	0x08009e87
 8009d6c:	08009e87 	.word	0x08009e87
 8009d70:	08009e87 	.word	0x08009e87
 8009d74:	08009e87 	.word	0x08009e87
 8009d78:	08009e87 	.word	0x08009e87
 8009d7c:	08009e87 	.word	0x08009e87
 8009d80:	08009e87 	.word	0x08009e87
 8009d84:	08009e87 	.word	0x08009e87
 8009d88:	08009e87 	.word	0x08009e87
 8009d8c:	08009e87 	.word	0x08009e87
 8009d90:	08009e87 	.word	0x08009e87
 8009d94:	08009e87 	.word	0x08009e87
 8009d98:	08009e87 	.word	0x08009e87
 8009d9c:	08009e87 	.word	0x08009e87
 8009da0:	08009db1 	.word	0x08009db1
 8009da4:	08009e11 	.word	0x08009e11
 8009da8:	08009e87 	.word	0x08009e87
 8009dac:	08009e87 	.word	0x08009e87
    /*                                        3 - Mark                             */
    /*                                        4 - Space                            */
    /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
    /*******************************************************************************/
  case CDC_SET_LINE_CODING:
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	781b      	ldrb	r3, [r3, #0]
 8009db4:	461a      	mov	r2, r3
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	3301      	adds	r3, #1
 8009dba:	781b      	ldrb	r3, [r3, #0]
 8009dbc:	021b      	lsls	r3, r3, #8
 8009dbe:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	3302      	adds	r3, #2
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	041b      	lsls	r3, r3, #16
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8009dc8:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	3303      	adds	r3, #3
 8009dce:	781b      	ldrb	r3, [r3, #0]
 8009dd0:	061b      	lsls	r3, r3, #24
 8009dd2:	431a      	orrs	r2, r3
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8009dd4:	79fb      	ldrb	r3, [r7, #7]
 8009dd6:	4611      	mov	r1, r2
 8009dd8:	4a2f      	ldr	r2, [pc, #188]	@ (8009e98 <CDC_Control+0x19c>)
 8009dda:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    Line_Coding[cdc_ch].format = pbuf[4];
 8009dde:	79fb      	ldrb	r3, [r7, #7]
 8009de0:	683a      	ldr	r2, [r7, #0]
 8009de2:	7911      	ldrb	r1, [r2, #4]
 8009de4:	4a2c      	ldr	r2, [pc, #176]	@ (8009e98 <CDC_Control+0x19c>)
 8009de6:	00db      	lsls	r3, r3, #3
 8009de8:	4413      	add	r3, r2
 8009dea:	460a      	mov	r2, r1
 8009dec:	711a      	strb	r2, [r3, #4]
    Line_Coding[cdc_ch].paritytype = pbuf[5];
 8009dee:	79fb      	ldrb	r3, [r7, #7]
 8009df0:	683a      	ldr	r2, [r7, #0]
 8009df2:	7951      	ldrb	r1, [r2, #5]
 8009df4:	4a28      	ldr	r2, [pc, #160]	@ (8009e98 <CDC_Control+0x19c>)
 8009df6:	00db      	lsls	r3, r3, #3
 8009df8:	4413      	add	r3, r2
 8009dfa:	460a      	mov	r2, r1
 8009dfc:	715a      	strb	r2, [r3, #5]
    Line_Coding[cdc_ch].datatype = pbuf[6];
 8009dfe:	79fb      	ldrb	r3, [r7, #7]
 8009e00:	683a      	ldr	r2, [r7, #0]
 8009e02:	7991      	ldrb	r1, [r2, #6]
 8009e04:	4a24      	ldr	r2, [pc, #144]	@ (8009e98 <CDC_Control+0x19c>)
 8009e06:	00db      	lsls	r3, r3, #3
 8009e08:	4413      	add	r3, r2
 8009e0a:	460a      	mov	r2, r1
 8009e0c:	719a      	strb	r2, [r3, #6]

    //Change_UART_Setting(cdc_ch);
    break;
 8009e0e:	e03b      	b.n	8009e88 <CDC_Control+0x18c>

  case CDC_GET_LINE_CODING:
    pbuf[0] = (uint8_t)(Line_Coding[cdc_ch].bitrate);
 8009e10:	79fb      	ldrb	r3, [r7, #7]
 8009e12:	4a21      	ldr	r2, [pc, #132]	@ (8009e98 <CDC_Control+0x19c>)
 8009e14:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009e18:	b2da      	uxtb	r2, r3
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	701a      	strb	r2, [r3, #0]
    pbuf[1] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 8);
 8009e1e:	79fb      	ldrb	r3, [r7, #7]
 8009e20:	4a1d      	ldr	r2, [pc, #116]	@ (8009e98 <CDC_Control+0x19c>)
 8009e22:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009e26:	0a1a      	lsrs	r2, r3, #8
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	3301      	adds	r3, #1
 8009e2c:	b2d2      	uxtb	r2, r2
 8009e2e:	701a      	strb	r2, [r3, #0]
    pbuf[2] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 16);
 8009e30:	79fb      	ldrb	r3, [r7, #7]
 8009e32:	4a19      	ldr	r2, [pc, #100]	@ (8009e98 <CDC_Control+0x19c>)
 8009e34:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009e38:	0c1a      	lsrs	r2, r3, #16
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	3302      	adds	r3, #2
 8009e3e:	b2d2      	uxtb	r2, r2
 8009e40:	701a      	strb	r2, [r3, #0]
    pbuf[3] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 24);
 8009e42:	79fb      	ldrb	r3, [r7, #7]
 8009e44:	4a14      	ldr	r2, [pc, #80]	@ (8009e98 <CDC_Control+0x19c>)
 8009e46:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009e4a:	0e1a      	lsrs	r2, r3, #24
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	3303      	adds	r3, #3
 8009e50:	b2d2      	uxtb	r2, r2
 8009e52:	701a      	strb	r2, [r3, #0]
    pbuf[4] = Line_Coding[cdc_ch].format;
 8009e54:	79fb      	ldrb	r3, [r7, #7]
 8009e56:	683a      	ldr	r2, [r7, #0]
 8009e58:	3204      	adds	r2, #4
 8009e5a:	490f      	ldr	r1, [pc, #60]	@ (8009e98 <CDC_Control+0x19c>)
 8009e5c:	00db      	lsls	r3, r3, #3
 8009e5e:	440b      	add	r3, r1
 8009e60:	791b      	ldrb	r3, [r3, #4]
 8009e62:	7013      	strb	r3, [r2, #0]
    pbuf[5] = Line_Coding[cdc_ch].paritytype;
 8009e64:	79fb      	ldrb	r3, [r7, #7]
 8009e66:	683a      	ldr	r2, [r7, #0]
 8009e68:	3205      	adds	r2, #5
 8009e6a:	490b      	ldr	r1, [pc, #44]	@ (8009e98 <CDC_Control+0x19c>)
 8009e6c:	00db      	lsls	r3, r3, #3
 8009e6e:	440b      	add	r3, r1
 8009e70:	795b      	ldrb	r3, [r3, #5]
 8009e72:	7013      	strb	r3, [r2, #0]
    pbuf[6] = Line_Coding[cdc_ch].datatype;
 8009e74:	79fb      	ldrb	r3, [r7, #7]
 8009e76:	683a      	ldr	r2, [r7, #0]
 8009e78:	3206      	adds	r2, #6
 8009e7a:	4907      	ldr	r1, [pc, #28]	@ (8009e98 <CDC_Control+0x19c>)
 8009e7c:	00db      	lsls	r3, r3, #3
 8009e7e:	440b      	add	r3, r1
 8009e80:	799b      	ldrb	r3, [r3, #6]
 8009e82:	7013      	strb	r3, [r2, #0]
    break;
 8009e84:	e000      	b.n	8009e88 <CDC_Control+0x18c>
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009e86:	bf00      	nop
  }

  return (USBD_OK);
 8009e88:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	370c      	adds	r7, #12
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e94:	4770      	bx	lr
 8009e96:	bf00      	nop
 8009e98:	200010f0 	.word	0x200010f0

08009e9c <CDC_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b084      	sub	sp, #16
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	60b9      	str	r1, [r7, #8]
 8009ea6:	607a      	str	r2, [r7, #4]
 8009ea8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 6 */
  //HAL_UART_Transmit_DMA(CDC_CH_To_UART_Handle(cdc_ch), Buf, *Len);
	signalTelemetryTask(Buf, *Len);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	4619      	mov	r1, r3
 8009eb0:	68b8      	ldr	r0, [r7, #8]
 8009eb2:	f7f7 fdcf 	bl	8001a54 <signalTelemetryTask>
  CDC_Transmit(cdc_ch, Buf, *Len); // echo back on same channel
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	b29a      	uxth	r2, r3
 8009ebc:	7bfb      	ldrb	r3, [r7, #15]
 8009ebe:	68b9      	ldr	r1, [r7, #8]
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f000 f825 	bl	8009f10 <CDC_Transmit>

  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, &Buf[0]);
 8009ec6:	7bfb      	ldrb	r3, [r7, #15]
 8009ec8:	68ba      	ldr	r2, [r7, #8]
 8009eca:	4907      	ldr	r1, [pc, #28]	@ (8009ee8 <CDC_Receive+0x4c>)
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f000 fd5d 	bl	800a98c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(cdc_ch, &hUsbDevice);
 8009ed2:	7bfb      	ldrb	r3, [r7, #15]
 8009ed4:	4904      	ldr	r1, [pc, #16]	@ (8009ee8 <CDC_Receive+0x4c>)
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f000 fdb8 	bl	800aa4c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009edc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	3710      	adds	r7, #16
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}
 8009ee6:	bf00      	nop
 8009ee8:	20000d54 	.word	0x20000d54

08009eec <CDC_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009eec:	b480      	push	{r7}
 8009eee:	b085      	sub	sp, #20
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	60b9      	str	r1, [r7, #8]
 8009ef4:	607a      	str	r2, [r7, #4]
 8009ef6:	461a      	mov	r2, r3
 8009ef8:	4603      	mov	r3, r0
 8009efa:	73fb      	strb	r3, [r7, #15]
 8009efc:	4613      	mov	r3, r2
 8009efe:	73bb      	strb	r3, [r7, #14]
  return (USBD_OK);
 8009f00:	2300      	movs	r3, #0
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3714      	adds	r7, #20
 8009f06:	46bd      	mov	sp, r7
 8009f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0c:	4770      	bx	lr
	...

08009f10 <CDC_Transmit>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit(uint8_t ch, uint8_t *Buf, uint16_t Len)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b084      	sub	sp, #16
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	4603      	mov	r3, r0
 8009f18:	6039      	str	r1, [r7, #0]
 8009f1a:	71fb      	strb	r3, [r7, #7]
 8009f1c:	4613      	mov	r3, r2
 8009f1e:	80bb      	strh	r3, [r7, #4]
  uint8_t result = USBD_OK;
 8009f20:	2300      	movs	r3, #0
 8009f22:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  extern USBD_CDC_ACM_HandleTypeDef CDC_ACM_Class_Data[];
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8009f24:	2300      	movs	r3, #0
 8009f26:	60bb      	str	r3, [r7, #8]
  hcdc = &CDC_ACM_Class_Data[ch];
 8009f28:	79fb      	ldrb	r3, [r7, #7]
 8009f2a:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009f2e:	fb02 f303 	mul.w	r3, r2, r3
 8009f32:	4a0e      	ldr	r2, [pc, #56]	@ (8009f6c <CDC_Transmit+0x5c>)
 8009f34:	4413      	add	r3, r2
 8009f36:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0)
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d001      	beq.n	8009f46 <CDC_Transmit+0x36>
  {
    return USBD_BUSY;
 8009f42:	2301      	movs	r3, #1
 8009f44:	e00d      	b.n	8009f62 <CDC_Transmit+0x52>
  }
  USBD_CDC_SetTxBuffer(ch, &hUsbDevice, Buf, Len);
 8009f46:	88bb      	ldrh	r3, [r7, #4]
 8009f48:	79f8      	ldrb	r0, [r7, #7]
 8009f4a:	683a      	ldr	r2, [r7, #0]
 8009f4c:	4908      	ldr	r1, [pc, #32]	@ (8009f70 <CDC_Transmit+0x60>)
 8009f4e:	f000 fcf9 	bl	800a944 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(ch, &hUsbDevice);
 8009f52:	79fb      	ldrb	r3, [r7, #7]
 8009f54:	4906      	ldr	r1, [pc, #24]	@ (8009f70 <CDC_Transmit+0x60>)
 8009f56:	4618      	mov	r0, r3
 8009f58:	f000 fd36 	bl	800a9c8 <USBD_CDC_TransmitPacket>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3710      	adds	r7, #16
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}
 8009f6a:	bf00      	nop
 8009f6c:	20001310 	.word	0x20001310
 8009f70:	20000d54 	.word	0x20000d54

08009f74 <USBD_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b083      	sub	sp, #12
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	6039      	str	r1, [r7, #0]
 8009f7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_DeviceDesc);
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	2212      	movs	r2, #18
 8009f84:	801a      	strh	r2, [r3, #0]
  return USBD_DeviceDesc;
 8009f86:	4b03      	ldr	r3, [pc, #12]	@ (8009f94 <USBD_DeviceDescriptor+0x20>)
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	370c      	adds	r7, #12
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f92:	4770      	bx	lr
 8009f94:	20000040 	.word	0x20000040

08009f98 <USBD_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b083      	sub	sp, #12
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	6039      	str	r1, [r7, #0]
 8009fa2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	2204      	movs	r2, #4
 8009fa8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009faa:	4b03      	ldr	r3, [pc, #12]	@ (8009fb8 <USBD_LangIDStrDescriptor+0x20>)
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	370c      	adds	r7, #12
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb6:	4770      	bx	lr
 8009fb8:	20000054 	.word	0x20000054

08009fbc <USBD_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b082      	sub	sp, #8
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	6039      	str	r1, [r7, #0]
 8009fc6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009fc8:	79fb      	ldrb	r3, [r7, #7]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d105      	bne.n	8009fda <USBD_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009fce:	683a      	ldr	r2, [r7, #0]
 8009fd0:	4907      	ldr	r1, [pc, #28]	@ (8009ff0 <USBD_ProductStrDescriptor+0x34>)
 8009fd2:	4808      	ldr	r0, [pc, #32]	@ (8009ff4 <USBD_ProductStrDescriptor+0x38>)
 8009fd4:	f002 fc89 	bl	800c8ea <USBD_GetString>
 8009fd8:	e004      	b.n	8009fe4 <USBD_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009fda:	683a      	ldr	r2, [r7, #0]
 8009fdc:	4904      	ldr	r1, [pc, #16]	@ (8009ff0 <USBD_ProductStrDescriptor+0x34>)
 8009fde:	4805      	ldr	r0, [pc, #20]	@ (8009ff4 <USBD_ProductStrDescriptor+0x38>)
 8009fe0:	f002 fc83 	bl	800c8ea <USBD_GetString>
  }
  return USBD_StrDesc;
 8009fe4:	4b02      	ldr	r3, [pc, #8]	@ (8009ff0 <USBD_ProductStrDescriptor+0x34>)
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3708      	adds	r7, #8
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}
 8009fee:	bf00      	nop
 8009ff0:	200010f8 	.word	0x200010f8
 8009ff4:	08010370 	.word	0x08010370

08009ff8 <USBD_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b082      	sub	sp, #8
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	4603      	mov	r3, r0
 800a000:	6039      	str	r1, [r7, #0]
 800a002:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a004:	683a      	ldr	r2, [r7, #0]
 800a006:	4904      	ldr	r1, [pc, #16]	@ (800a018 <USBD_ManufacturerStrDescriptor+0x20>)
 800a008:	4804      	ldr	r0, [pc, #16]	@ (800a01c <USBD_ManufacturerStrDescriptor+0x24>)
 800a00a:	f002 fc6e 	bl	800c8ea <USBD_GetString>
  return USBD_StrDesc;
 800a00e:	4b02      	ldr	r3, [pc, #8]	@ (800a018 <USBD_ManufacturerStrDescriptor+0x20>)
}
 800a010:	4618      	mov	r0, r3
 800a012:	3708      	adds	r7, #8
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}
 800a018:	200010f8 	.word	0x200010f8
 800a01c:	08010388 	.word	0x08010388

0800a020 <USBD_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b082      	sub	sp, #8
 800a024:	af00      	add	r7, sp, #0
 800a026:	4603      	mov	r3, r0
 800a028:	6039      	str	r1, [r7, #0]
 800a02a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	221a      	movs	r2, #26
 800a030:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a032:	f000 f843 	bl	800a0bc <Get_SerialNum>
  /* USER CODE BEGIN USBD_SerialStrDescriptor */

  /* USER CODE END USBD_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800a036:	4b02      	ldr	r3, [pc, #8]	@ (800a040 <USBD_SerialStrDescriptor+0x20>)
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3708      	adds	r7, #8
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}
 800a040:	20000058 	.word	0x20000058

0800a044 <USBD_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b082      	sub	sp, #8
 800a048:	af00      	add	r7, sp, #0
 800a04a:	4603      	mov	r3, r0
 800a04c:	6039      	str	r1, [r7, #0]
 800a04e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a050:	79fb      	ldrb	r3, [r7, #7]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d105      	bne.n	800a062 <USBD_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a056:	683a      	ldr	r2, [r7, #0]
 800a058:	4907      	ldr	r1, [pc, #28]	@ (800a078 <USBD_ConfigStrDescriptor+0x34>)
 800a05a:	4808      	ldr	r0, [pc, #32]	@ (800a07c <USBD_ConfigStrDescriptor+0x38>)
 800a05c:	f002 fc45 	bl	800c8ea <USBD_GetString>
 800a060:	e004      	b.n	800a06c <USBD_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a062:	683a      	ldr	r2, [r7, #0]
 800a064:	4904      	ldr	r1, [pc, #16]	@ (800a078 <USBD_ConfigStrDescriptor+0x34>)
 800a066:	4805      	ldr	r0, [pc, #20]	@ (800a07c <USBD_ConfigStrDescriptor+0x38>)
 800a068:	f002 fc3f 	bl	800c8ea <USBD_GetString>
  }
  return USBD_StrDesc;
 800a06c:	4b02      	ldr	r3, [pc, #8]	@ (800a078 <USBD_ConfigStrDescriptor+0x34>)
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3708      	adds	r7, #8
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}
 800a076:	bf00      	nop
 800a078:	200010f8 	.word	0x200010f8
 800a07c:	0801039c 	.word	0x0801039c

0800a080 <USBD_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b082      	sub	sp, #8
 800a084:	af00      	add	r7, sp, #0
 800a086:	4603      	mov	r3, r0
 800a088:	6039      	str	r1, [r7, #0]
 800a08a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a08c:	79fb      	ldrb	r3, [r7, #7]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d105      	bne.n	800a09e <USBD_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a092:	683a      	ldr	r2, [r7, #0]
 800a094:	4907      	ldr	r1, [pc, #28]	@ (800a0b4 <USBD_InterfaceStrDescriptor+0x34>)
 800a096:	4808      	ldr	r0, [pc, #32]	@ (800a0b8 <USBD_InterfaceStrDescriptor+0x38>)
 800a098:	f002 fc27 	bl	800c8ea <USBD_GetString>
 800a09c:	e004      	b.n	800a0a8 <USBD_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a09e:	683a      	ldr	r2, [r7, #0]
 800a0a0:	4904      	ldr	r1, [pc, #16]	@ (800a0b4 <USBD_InterfaceStrDescriptor+0x34>)
 800a0a2:	4805      	ldr	r0, [pc, #20]	@ (800a0b8 <USBD_InterfaceStrDescriptor+0x38>)
 800a0a4:	f002 fc21 	bl	800c8ea <USBD_GetString>
  }
  return USBD_StrDesc;
 800a0a8:	4b02      	ldr	r3, [pc, #8]	@ (800a0b4 <USBD_InterfaceStrDescriptor+0x34>)
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3708      	adds	r7, #8
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}
 800a0b2:	bf00      	nop
 800a0b4:	200010f8 	.word	0x200010f8
 800a0b8:	080103ac 	.word	0x080103ac

0800a0bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b084      	sub	sp, #16
 800a0c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a0c2:	4b0f      	ldr	r3, [pc, #60]	@ (800a100 <Get_SerialNum+0x44>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a0c8:	4b0e      	ldr	r3, [pc, #56]	@ (800a104 <Get_SerialNum+0x48>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a0ce:	4b0e      	ldr	r3, [pc, #56]	@ (800a108 <Get_SerialNum+0x4c>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a0d4:	68fa      	ldr	r2, [r7, #12]
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	4413      	add	r3, r2
 800a0da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d009      	beq.n	800a0f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a0e2:	2208      	movs	r2, #8
 800a0e4:	4909      	ldr	r1, [pc, #36]	@ (800a10c <Get_SerialNum+0x50>)
 800a0e6:	68f8      	ldr	r0, [r7, #12]
 800a0e8:	f000 f814 	bl	800a114 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a0ec:	2204      	movs	r2, #4
 800a0ee:	4908      	ldr	r1, [pc, #32]	@ (800a110 <Get_SerialNum+0x54>)
 800a0f0:	68b8      	ldr	r0, [r7, #8]
 800a0f2:	f000 f80f 	bl	800a114 <IntToUnicode>
  }
}
 800a0f6:	bf00      	nop
 800a0f8:	3710      	adds	r7, #16
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}
 800a0fe:	bf00      	nop
 800a100:	1fff7a10 	.word	0x1fff7a10
 800a104:	1fff7a14 	.word	0x1fff7a14
 800a108:	1fff7a18 	.word	0x1fff7a18
 800a10c:	2000005a 	.word	0x2000005a
 800a110:	2000006a 	.word	0x2000006a

0800a114 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a114:	b480      	push	{r7}
 800a116:	b087      	sub	sp, #28
 800a118:	af00      	add	r7, sp, #0
 800a11a:	60f8      	str	r0, [r7, #12]
 800a11c:	60b9      	str	r1, [r7, #8]
 800a11e:	4613      	mov	r3, r2
 800a120:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a122:	2300      	movs	r3, #0
 800a124:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a126:	2300      	movs	r3, #0
 800a128:	75fb      	strb	r3, [r7, #23]
 800a12a:	e027      	b.n	800a17c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	0f1b      	lsrs	r3, r3, #28
 800a130:	2b09      	cmp	r3, #9
 800a132:	d80b      	bhi.n	800a14c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	0f1b      	lsrs	r3, r3, #28
 800a138:	b2da      	uxtb	r2, r3
 800a13a:	7dfb      	ldrb	r3, [r7, #23]
 800a13c:	005b      	lsls	r3, r3, #1
 800a13e:	4619      	mov	r1, r3
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	440b      	add	r3, r1
 800a144:	3230      	adds	r2, #48	@ 0x30
 800a146:	b2d2      	uxtb	r2, r2
 800a148:	701a      	strb	r2, [r3, #0]
 800a14a:	e00a      	b.n	800a162 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	0f1b      	lsrs	r3, r3, #28
 800a150:	b2da      	uxtb	r2, r3
 800a152:	7dfb      	ldrb	r3, [r7, #23]
 800a154:	005b      	lsls	r3, r3, #1
 800a156:	4619      	mov	r1, r3
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	440b      	add	r3, r1
 800a15c:	3237      	adds	r2, #55	@ 0x37
 800a15e:	b2d2      	uxtb	r2, r2
 800a160:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	011b      	lsls	r3, r3, #4
 800a166:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a168:	7dfb      	ldrb	r3, [r7, #23]
 800a16a:	005b      	lsls	r3, r3, #1
 800a16c:	3301      	adds	r3, #1
 800a16e:	68ba      	ldr	r2, [r7, #8]
 800a170:	4413      	add	r3, r2
 800a172:	2200      	movs	r2, #0
 800a174:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a176:	7dfb      	ldrb	r3, [r7, #23]
 800a178:	3301      	adds	r3, #1
 800a17a:	75fb      	strb	r3, [r7, #23]
 800a17c:	7dfa      	ldrb	r2, [r7, #23]
 800a17e:	79fb      	ldrb	r3, [r7, #7]
 800a180:	429a      	cmp	r2, r3
 800a182:	d3d3      	bcc.n	800a12c <IntToUnicode+0x18>
  }
}
 800a184:	bf00      	nop
 800a186:	bf00      	nop
 800a188:	371c      	adds	r7, #28
 800a18a:	46bd      	mov	sp, r7
 800a18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a190:	4770      	bx	lr

0800a192 <CUSTOM_HID_Init>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init(void)
{
 800a192:	b480      	push	{r7}
 800a194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a196:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a198:	4618      	mov	r0, r3
 800a19a:	46bd      	mov	sp, r7
 800a19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a0:	4770      	bx	lr

0800a1a2 <CUSTOM_HID_DeInit>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit(void)
{
 800a1a2:	b480      	push	{r7}
 800a1a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800a1a6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b0:	4770      	bx	lr

0800a1b2 <CUSTOM_HID_OutEvent>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent(uint8_t event_idx, uint8_t state)
{
 800a1b2:	b480      	push	{r7}
 800a1b4:	b083      	sub	sp, #12
 800a1b6:	af00      	add	r7, sp, #0
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	460a      	mov	r2, r1
 800a1bc:	71fb      	strb	r3, [r7, #7]
 800a1be:	4613      	mov	r3, r2
 800a1c0:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  //memcpy(buffer, state, 0x40);
  //USBD_CUSTOM_HID_SendReport(&hUsbDevice, (uint8_t *)buffer, 0x40);
  return (USBD_OK);
 800a1c2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	370c      	adds	r7, #12
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ce:	4770      	bx	lr

0800a1d0 <USBD_CUSTOM_HID_SendCustomReport>:
  * @param  report: The report to be sent
  * @param  len: The report length
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t USBD_CUSTOM_HID_SendCustomReport(uint8_t *report, uint16_t len)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b082      	sub	sp, #8
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
 800a1d8:	460b      	mov	r3, r1
 800a1da:	807b      	strh	r3, [r7, #2]
  return USBD_CUSTOM_HID_SendReport(&hUsbDevice, report, len);
 800a1dc:	887b      	ldrh	r3, [r7, #2]
 800a1de:	461a      	mov	r2, r3
 800a1e0:	6879      	ldr	r1, [r7, #4]
 800a1e2:	4804      	ldr	r0, [pc, #16]	@ (800a1f4 <USBD_CUSTOM_HID_SendCustomReport+0x24>)
 800a1e4:	f001 f9c4 	bl	800b570 <USBD_CUSTOM_HID_SendReport>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	b25b      	sxtb	r3, r3
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3708      	adds	r7, #8
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}
 800a1f4:	20000d54 	.word	0x20000d54

0800a1f8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b084      	sub	sp, #16
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
 800a200:	460b      	mov	r3, r1
 800a202:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800a204:	2300      	movs	r3, #0
 800a206:	60bb      	str	r3, [r7, #8]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800a208:	2300      	movs	r3, #0
 800a20a:	73fb      	strb	r3, [r7, #15]
 800a20c:	e0c6      	b.n	800a39c <USBD_CDC_Init+0x1a4>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 800a20e:	7bfb      	ldrb	r3, [r7, #15]
 800a210:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a214:	fb02 f303 	mul.w	r3, r2, r3
 800a218:	4a65      	ldr	r2, [pc, #404]	@ (800a3b0 <USBD_CDC_Init+0x1b8>)
 800a21a:	4413      	add	r3, r2
 800a21c:	60bb      	str	r3, [r7, #8]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	7c1b      	ldrb	r3, [r3, #16]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d13d      	bne.n	800a2a2 <USBD_CDC_Init+0xaa>
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 800a226:	7bfb      	ldrb	r3, [r7, #15]
 800a228:	4a62      	ldr	r2, [pc, #392]	@ (800a3b4 <USBD_CDC_Init+0x1bc>)
 800a22a:	5cd1      	ldrb	r1, [r2, r3]
 800a22c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a230:	2202      	movs	r2, #2
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f002 fdcb 	bl	800cdce <USBD_LL_OpenEP>
                           CDC_DATA_HS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 800a238:	7bfb      	ldrb	r3, [r7, #15]
 800a23a:	4a5e      	ldr	r2, [pc, #376]	@ (800a3b4 <USBD_CDC_Init+0x1bc>)
 800a23c:	5cd3      	ldrb	r3, [r2, r3]
 800a23e:	f003 020f 	and.w	r2, r3, #15
 800a242:	6879      	ldr	r1, [r7, #4]
 800a244:	4613      	mov	r3, r2
 800a246:	009b      	lsls	r3, r3, #2
 800a248:	4413      	add	r3, r2
 800a24a:	009b      	lsls	r3, r3, #2
 800a24c:	440b      	add	r3, r1
 800a24e:	3324      	adds	r3, #36	@ 0x24
 800a250:	2201      	movs	r2, #1
 800a252:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 800a254:	7bfb      	ldrb	r3, [r7, #15]
 800a256:	4a58      	ldr	r2, [pc, #352]	@ (800a3b8 <USBD_CDC_Init+0x1c0>)
 800a258:	5cd1      	ldrb	r1, [r2, r3]
 800a25a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a25e:	2202      	movs	r2, #2
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f002 fdb4 	bl	800cdce <USBD_LL_OpenEP>
                           CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 800a266:	7bfb      	ldrb	r3, [r7, #15]
 800a268:	4a53      	ldr	r2, [pc, #332]	@ (800a3b8 <USBD_CDC_Init+0x1c0>)
 800a26a:	5cd3      	ldrb	r3, [r2, r3]
 800a26c:	f003 020f 	and.w	r2, r3, #15
 800a270:	6879      	ldr	r1, [r7, #4]
 800a272:	4613      	mov	r3, r2
 800a274:	009b      	lsls	r3, r3, #2
 800a276:	4413      	add	r3, r2
 800a278:	009b      	lsls	r3, r3, #2
 800a27a:	440b      	add	r3, r1
 800a27c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a280:	2201      	movs	r2, #1
 800a282:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a284:	7bfb      	ldrb	r3, [r7, #15]
 800a286:	4a4d      	ldr	r2, [pc, #308]	@ (800a3bc <USBD_CDC_Init+0x1c4>)
 800a288:	5cd3      	ldrb	r3, [r2, r3]
 800a28a:	f003 020f 	and.w	r2, r3, #15
 800a28e:	6879      	ldr	r1, [r7, #4]
 800a290:	4613      	mov	r3, r2
 800a292:	009b      	lsls	r3, r3, #2
 800a294:	4413      	add	r3, r2
 800a296:	009b      	lsls	r3, r3, #2
 800a298:	440b      	add	r3, r1
 800a29a:	3326      	adds	r3, #38	@ 0x26
 800a29c:	2210      	movs	r2, #16
 800a29e:	801a      	strh	r2, [r3, #0]
 800a2a0:	e03a      	b.n	800a318 <USBD_CDC_Init+0x120>
    }
    else
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 800a2a2:	7bfb      	ldrb	r3, [r7, #15]
 800a2a4:	4a43      	ldr	r2, [pc, #268]	@ (800a3b4 <USBD_CDC_Init+0x1bc>)
 800a2a6:	5cd1      	ldrb	r1, [r2, r3]
 800a2a8:	2340      	movs	r3, #64	@ 0x40
 800a2aa:	2202      	movs	r2, #2
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f002 fd8e 	bl	800cdce <USBD_LL_OpenEP>
                           CDC_DATA_FS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 800a2b2:	7bfb      	ldrb	r3, [r7, #15]
 800a2b4:	4a3f      	ldr	r2, [pc, #252]	@ (800a3b4 <USBD_CDC_Init+0x1bc>)
 800a2b6:	5cd3      	ldrb	r3, [r2, r3]
 800a2b8:	f003 020f 	and.w	r2, r3, #15
 800a2bc:	6879      	ldr	r1, [r7, #4]
 800a2be:	4613      	mov	r3, r2
 800a2c0:	009b      	lsls	r3, r3, #2
 800a2c2:	4413      	add	r3, r2
 800a2c4:	009b      	lsls	r3, r3, #2
 800a2c6:	440b      	add	r3, r1
 800a2c8:	3324      	adds	r3, #36	@ 0x24
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 800a2ce:	7bfb      	ldrb	r3, [r7, #15]
 800a2d0:	4a39      	ldr	r2, [pc, #228]	@ (800a3b8 <USBD_CDC_Init+0x1c0>)
 800a2d2:	5cd1      	ldrb	r1, [r2, r3]
 800a2d4:	2340      	movs	r3, #64	@ 0x40
 800a2d6:	2202      	movs	r2, #2
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	f002 fd78 	bl	800cdce <USBD_LL_OpenEP>
                           CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 800a2de:	7bfb      	ldrb	r3, [r7, #15]
 800a2e0:	4a35      	ldr	r2, [pc, #212]	@ (800a3b8 <USBD_CDC_Init+0x1c0>)
 800a2e2:	5cd3      	ldrb	r3, [r2, r3]
 800a2e4:	f003 020f 	and.w	r2, r3, #15
 800a2e8:	6879      	ldr	r1, [r7, #4]
 800a2ea:	4613      	mov	r3, r2
 800a2ec:	009b      	lsls	r3, r3, #2
 800a2ee:	4413      	add	r3, r2
 800a2f0:	009b      	lsls	r3, r3, #2
 800a2f2:	440b      	add	r3, r1
 800a2f4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a2f8:	2201      	movs	r2, #1
 800a2fa:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a2fc:	7bfb      	ldrb	r3, [r7, #15]
 800a2fe:	4a2f      	ldr	r2, [pc, #188]	@ (800a3bc <USBD_CDC_Init+0x1c4>)
 800a300:	5cd3      	ldrb	r3, [r2, r3]
 800a302:	f003 020f 	and.w	r2, r3, #15
 800a306:	6879      	ldr	r1, [r7, #4]
 800a308:	4613      	mov	r3, r2
 800a30a:	009b      	lsls	r3, r3, #2
 800a30c:	4413      	add	r3, r2
 800a30e:	009b      	lsls	r3, r3, #2
 800a310:	440b      	add	r3, r1
 800a312:	3326      	adds	r3, #38	@ 0x26
 800a314:	2210      	movs	r2, #16
 800a316:	801a      	strh	r2, [r3, #0]
    }

    /* Open Command IN EP */
    (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP[i], USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a318:	7bfb      	ldrb	r3, [r7, #15]
 800a31a:	4a28      	ldr	r2, [pc, #160]	@ (800a3bc <USBD_CDC_Init+0x1c4>)
 800a31c:	5cd1      	ldrb	r1, [r2, r3]
 800a31e:	2308      	movs	r3, #8
 800a320:	2203      	movs	r2, #3
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f002 fd53 	bl	800cdce <USBD_LL_OpenEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 1U;
 800a328:	7bfb      	ldrb	r3, [r7, #15]
 800a32a:	4a24      	ldr	r2, [pc, #144]	@ (800a3bc <USBD_CDC_Init+0x1c4>)
 800a32c:	5cd3      	ldrb	r3, [r2, r3]
 800a32e:	f003 020f 	and.w	r2, r3, #15
 800a332:	6879      	ldr	r1, [r7, #4]
 800a334:	4613      	mov	r3, r2
 800a336:	009b      	lsls	r3, r3, #2
 800a338:	4413      	add	r3, r2
 800a33a:	009b      	lsls	r3, r3, #2
 800a33c:	440b      	add	r3, r1
 800a33e:	3324      	adds	r3, #36	@ 0x24
 800a340:	2201      	movs	r2, #1
 800a342:	801a      	strh	r2, [r3, #0]

    /* Init  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Init(i);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	7bfa      	ldrb	r2, [r7, #15]
 800a34e:	4610      	mov	r0, r2
 800a350:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	2200      	movs	r2, #0
 800a356:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	2200      	movs	r2, #0
 800a35e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	7c1b      	ldrb	r3, [r3, #16]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d10b      	bne.n	800a382 <USBD_CDC_Init+0x18a>
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 800a36a:	7bfb      	ldrb	r3, [r7, #15]
 800a36c:	4a12      	ldr	r2, [pc, #72]	@ (800a3b8 <USBD_CDC_Init+0x1c0>)
 800a36e:	5cd1      	ldrb	r1, [r2, r3]
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a376:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f002 fe16 	bl	800cfac <USBD_LL_PrepareReceive>
 800a380:	e009      	b.n	800a396 <USBD_CDC_Init+0x19e>
                                   CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 800a382:	7bfb      	ldrb	r3, [r7, #15]
 800a384:	4a0c      	ldr	r2, [pc, #48]	@ (800a3b8 <USBD_CDC_Init+0x1c0>)
 800a386:	5cd1      	ldrb	r1, [r2, r3]
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a38e:	2340      	movs	r3, #64	@ 0x40
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f002 fe0b 	bl	800cfac <USBD_LL_PrepareReceive>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800a396:	7bfb      	ldrb	r3, [r7, #15]
 800a398:	3301      	adds	r3, #1
 800a39a:	73fb      	strb	r3, [r7, #15]
 800a39c:	7bfb      	ldrb	r3, [r7, #15]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	f43f af35 	beq.w	800a20e <USBD_CDC_Init+0x16>
                                   CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return (uint8_t)USBD_OK;
 800a3a4:	2300      	movs	r3, #0
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	3710      	adds	r7, #16
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}
 800a3ae:	bf00      	nop
 800a3b0:	20001310 	.word	0x20001310
 800a3b4:	200012f8 	.word	0x200012f8
 800a3b8:	200012fc 	.word	0x200012fc
 800a3bc:	20001300 	.word	0x20001300

0800a3c0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b084      	sub	sp, #16
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
 800a3c8:	460b      	mov	r3, r1
 800a3ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	73fb      	strb	r3, [r7, #15]
 800a3d0:	e057      	b.n	800a482 <USBD_CDC_DeInit+0xc2>
  {
    /* Close EP IN */
    (void)USBD_LL_CloseEP(pdev, CDC_IN_EP[i]);
 800a3d2:	7bfb      	ldrb	r3, [r7, #15]
 800a3d4:	4a2f      	ldr	r2, [pc, #188]	@ (800a494 <USBD_CDC_DeInit+0xd4>)
 800a3d6:	5cd3      	ldrb	r3, [r2, r3]
 800a3d8:	4619      	mov	r1, r3
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f002 fd1d 	bl	800ce1a <USBD_LL_CloseEP>
    pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 0U;
 800a3e0:	7bfb      	ldrb	r3, [r7, #15]
 800a3e2:	4a2c      	ldr	r2, [pc, #176]	@ (800a494 <USBD_CDC_DeInit+0xd4>)
 800a3e4:	5cd3      	ldrb	r3, [r2, r3]
 800a3e6:	f003 020f 	and.w	r2, r3, #15
 800a3ea:	6879      	ldr	r1, [r7, #4]
 800a3ec:	4613      	mov	r3, r2
 800a3ee:	009b      	lsls	r3, r3, #2
 800a3f0:	4413      	add	r3, r2
 800a3f2:	009b      	lsls	r3, r3, #2
 800a3f4:	440b      	add	r3, r1
 800a3f6:	3324      	adds	r3, #36	@ 0x24
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	801a      	strh	r2, [r3, #0]

    /* Close EP OUT */
    (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP[i]);
 800a3fc:	7bfb      	ldrb	r3, [r7, #15]
 800a3fe:	4a26      	ldr	r2, [pc, #152]	@ (800a498 <USBD_CDC_DeInit+0xd8>)
 800a400:	5cd3      	ldrb	r3, [r2, r3]
 800a402:	4619      	mov	r1, r3
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f002 fd08 	bl	800ce1a <USBD_LL_CloseEP>
    pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 0U;
 800a40a:	7bfb      	ldrb	r3, [r7, #15]
 800a40c:	4a22      	ldr	r2, [pc, #136]	@ (800a498 <USBD_CDC_DeInit+0xd8>)
 800a40e:	5cd3      	ldrb	r3, [r2, r3]
 800a410:	f003 020f 	and.w	r2, r3, #15
 800a414:	6879      	ldr	r1, [r7, #4]
 800a416:	4613      	mov	r3, r2
 800a418:	009b      	lsls	r3, r3, #2
 800a41a:	4413      	add	r3, r2
 800a41c:	009b      	lsls	r3, r3, #2
 800a41e:	440b      	add	r3, r1
 800a420:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a424:	2200      	movs	r2, #0
 800a426:	801a      	strh	r2, [r3, #0]

    /* Close Command IN EP */
    (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP[i]);
 800a428:	7bfb      	ldrb	r3, [r7, #15]
 800a42a:	4a1c      	ldr	r2, [pc, #112]	@ (800a49c <USBD_CDC_DeInit+0xdc>)
 800a42c:	5cd3      	ldrb	r3, [r2, r3]
 800a42e:	4619      	mov	r1, r3
 800a430:	6878      	ldr	r0, [r7, #4]
 800a432:	f002 fcf2 	bl	800ce1a <USBD_LL_CloseEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 0U;
 800a436:	7bfb      	ldrb	r3, [r7, #15]
 800a438:	4a18      	ldr	r2, [pc, #96]	@ (800a49c <USBD_CDC_DeInit+0xdc>)
 800a43a:	5cd3      	ldrb	r3, [r2, r3]
 800a43c:	f003 020f 	and.w	r2, r3, #15
 800a440:	6879      	ldr	r1, [r7, #4]
 800a442:	4613      	mov	r3, r2
 800a444:	009b      	lsls	r3, r3, #2
 800a446:	4413      	add	r3, r2
 800a448:	009b      	lsls	r3, r3, #2
 800a44a:	440b      	add	r3, r1
 800a44c:	3324      	adds	r3, #36	@ 0x24
 800a44e:	2200      	movs	r2, #0
 800a450:	801a      	strh	r2, [r3, #0]
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = 0U;
 800a452:	7bfb      	ldrb	r3, [r7, #15]
 800a454:	4a11      	ldr	r2, [pc, #68]	@ (800a49c <USBD_CDC_DeInit+0xdc>)
 800a456:	5cd3      	ldrb	r3, [r2, r3]
 800a458:	f003 020f 	and.w	r2, r3, #15
 800a45c:	6879      	ldr	r1, [r7, #4]
 800a45e:	4613      	mov	r3, r2
 800a460:	009b      	lsls	r3, r3, #2
 800a462:	4413      	add	r3, r2
 800a464:	009b      	lsls	r3, r3, #2
 800a466:	440b      	add	r3, r1
 800a468:	3326      	adds	r3, #38	@ 0x26
 800a46a:	2200      	movs	r2, #0
 800a46c:	801a      	strh	r2, [r3, #0]

    /* DeInit  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->DeInit(i);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a474:	685b      	ldr	r3, [r3, #4]
 800a476:	7bfa      	ldrb	r2, [r7, #15]
 800a478:	4610      	mov	r0, r2
 800a47a:	4798      	blx	r3
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800a47c:	7bfb      	ldrb	r3, [r7, #15]
 800a47e:	3301      	adds	r3, #1
 800a480:	73fb      	strb	r3, [r7, #15]
 800a482:	7bfb      	ldrb	r3, [r7, #15]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d0a4      	beq.n	800a3d2 <USBD_CDC_DeInit+0x12>
  }
  return (uint8_t)USBD_OK;
 800a488:	2300      	movs	r3, #0
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3710      	adds	r7, #16
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}
 800a492:	bf00      	nop
 800a494:	200012f8 	.word	0x200012f8
 800a498:	200012fc 	.word	0x200012fc
 800a49c:	20001300 	.word	0x20001300

0800a4a0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a4a0:	b590      	push	{r4, r7, lr}
 800a4a2:	b087      	sub	sp, #28
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
 800a4a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	75fb      	strb	r3, [r7, #23]

  uint8_t windex_to_ch = 0;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	75bb      	strb	r3, [r7, #22]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800a4be:	2300      	movs	r3, #0
 800a4c0:	757b      	strb	r3, [r7, #21]
 800a4c2:	e015      	b.n	800a4f0 <USBD_CDC_Setup+0x50>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	889b      	ldrh	r3, [r3, #4]
 800a4c8:	b2da      	uxtb	r2, r3
 800a4ca:	7d7b      	ldrb	r3, [r7, #21]
 800a4cc:	496d      	ldr	r1, [pc, #436]	@ (800a684 <USBD_CDC_Setup+0x1e4>)
 800a4ce:	5ccb      	ldrb	r3, [r1, r3]
 800a4d0:	429a      	cmp	r2, r3
 800a4d2:	d007      	beq.n	800a4e4 <USBD_CDC_Setup+0x44>
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	889b      	ldrh	r3, [r3, #4]
 800a4d8:	b2da      	uxtb	r2, r3
 800a4da:	7d7b      	ldrb	r3, [r7, #21]
 800a4dc:	496a      	ldr	r1, [pc, #424]	@ (800a688 <USBD_CDC_Setup+0x1e8>)
 800a4de:	5ccb      	ldrb	r3, [r1, r3]
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	d102      	bne.n	800a4ea <USBD_CDC_Setup+0x4a>
    {
      windex_to_ch = i;
 800a4e4:	7d7b      	ldrb	r3, [r7, #21]
 800a4e6:	75bb      	strb	r3, [r7, #22]
      break;
 800a4e8:	e005      	b.n	800a4f6 <USBD_CDC_Setup+0x56>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800a4ea:	7d7b      	ldrb	r3, [r7, #21]
 800a4ec:	3301      	adds	r3, #1
 800a4ee:	757b      	strb	r3, [r7, #21]
 800a4f0:	7d7b      	ldrb	r3, [r7, #21]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d0e6      	beq.n	800a4c4 <USBD_CDC_Setup+0x24>
    }
  }

  hcdc = &CDC_ACM_Class_Data[windex_to_ch];
 800a4f6:	7dbb      	ldrb	r3, [r7, #22]
 800a4f8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a4fc:	fb02 f303 	mul.w	r3, r2, r3
 800a500:	4a62      	ldr	r2, [pc, #392]	@ (800a68c <USBD_CDC_Setup+0x1ec>)
 800a502:	4413      	add	r3, r2
 800a504:	613b      	str	r3, [r7, #16]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	781b      	ldrb	r3, [r3, #0]
 800a50a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d04a      	beq.n	800a5a8 <USBD_CDC_Setup+0x108>
 800a512:	2b20      	cmp	r3, #32
 800a514:	f040 80aa 	bne.w	800a66c <USBD_CDC_Setup+0x1cc>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	88db      	ldrh	r3, [r3, #6]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d038      	beq.n	800a592 <USBD_CDC_Setup+0xf2>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	781b      	ldrb	r3, [r3, #0]
 800a524:	b25b      	sxtb	r3, r3
 800a526:	2b00      	cmp	r3, #0
 800a528:	da1d      	bge.n	800a566 <USBD_CDC_Setup+0xc6>
      {
        ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a530:	689c      	ldr	r4, [r3, #8]
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	7859      	ldrb	r1, [r3, #1]
 800a536:	7dbb      	ldrb	r3, [r7, #22]
 800a538:	025b      	lsls	r3, r3, #9
 800a53a:	693a      	ldr	r2, [r7, #16]
 800a53c:	441a      	add	r2, r3
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	88db      	ldrh	r3, [r3, #6]
 800a542:	7db8      	ldrb	r0, [r7, #22]
 800a544:	47a0      	blx	r4

        len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	88db      	ldrh	r3, [r3, #6]
 800a54a:	2b07      	cmp	r3, #7
 800a54c:	bf28      	it	cs
 800a54e:	2307      	movcs	r3, #7
 800a550:	81fb      	strh	r3, [r7, #14]
        (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data[windex_to_ch], len);
 800a552:	7dbb      	ldrb	r3, [r7, #22]
 800a554:	025b      	lsls	r3, r3, #9
 800a556:	693a      	ldr	r2, [r7, #16]
 800a558:	4413      	add	r3, r2
 800a55a:	89fa      	ldrh	r2, [r7, #14]
 800a55c:	4619      	mov	r1, r3
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f002 fa23 	bl	800c9aa <USBD_CtlSendData>
    }
    else
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
    }
    break;
 800a564:	e089      	b.n	800a67a <USBD_CDC_Setup+0x1da>
        hcdc->CmdOpCode = req->bRequest;
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	785a      	ldrb	r2, [r3, #1]
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	88db      	ldrh	r3, [r3, #6]
 800a574:	b2da      	uxtb	r2, r3
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 800a57c:	7dbb      	ldrb	r3, [r7, #22]
 800a57e:	025b      	lsls	r3, r3, #9
 800a580:	693a      	ldr	r2, [r7, #16]
 800a582:	18d1      	adds	r1, r2, r3
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	88db      	ldrh	r3, [r3, #6]
 800a588:	461a      	mov	r2, r3
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f002 fa39 	bl	800ca02 <USBD_CtlPrepareRx>
    break;
 800a590:	e073      	b.n	800a67a <USBD_CDC_Setup+0x1da>
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a598:	689c      	ldr	r4, [r3, #8]
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	7859      	ldrb	r1, [r3, #1]
 800a59e:	7db8      	ldrb	r0, [r7, #22]
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	683a      	ldr	r2, [r7, #0]
 800a5a4:	47a0      	blx	r4
    break;
 800a5a6:	e068      	b.n	800a67a <USBD_CDC_Setup+0x1da>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	785b      	ldrb	r3, [r3, #1]
 800a5ac:	2b0b      	cmp	r3, #11
 800a5ae:	d852      	bhi.n	800a656 <USBD_CDC_Setup+0x1b6>
 800a5b0:	a201      	add	r2, pc, #4	@ (adr r2, 800a5b8 <USBD_CDC_Setup+0x118>)
 800a5b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5b6:	bf00      	nop
 800a5b8:	0800a5e9 	.word	0x0800a5e9
 800a5bc:	0800a665 	.word	0x0800a665
 800a5c0:	0800a657 	.word	0x0800a657
 800a5c4:	0800a657 	.word	0x0800a657
 800a5c8:	0800a657 	.word	0x0800a657
 800a5cc:	0800a657 	.word	0x0800a657
 800a5d0:	0800a657 	.word	0x0800a657
 800a5d4:	0800a657 	.word	0x0800a657
 800a5d8:	0800a657 	.word	0x0800a657
 800a5dc:	0800a657 	.word	0x0800a657
 800a5e0:	0800a613 	.word	0x0800a613
 800a5e4:	0800a63d 	.word	0x0800a63d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5ee:	b2db      	uxtb	r3, r3
 800a5f0:	2b03      	cmp	r3, #3
 800a5f2:	d107      	bne.n	800a604 <USBD_CDC_Setup+0x164>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a5f4:	f107 030a 	add.w	r3, r7, #10
 800a5f8:	2202      	movs	r2, #2
 800a5fa:	4619      	mov	r1, r3
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f002 f9d4 	bl	800c9aa <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a602:	e032      	b.n	800a66a <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 800a604:	6839      	ldr	r1, [r7, #0]
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f002 f95e 	bl	800c8c8 <USBD_CtlError>
        ret = USBD_FAIL;
 800a60c:	2303      	movs	r3, #3
 800a60e:	75fb      	strb	r3, [r7, #23]
      break;
 800a610:	e02b      	b.n	800a66a <USBD_CDC_Setup+0x1ca>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a618:	b2db      	uxtb	r3, r3
 800a61a:	2b03      	cmp	r3, #3
 800a61c:	d107      	bne.n	800a62e <USBD_CDC_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a61e:	f107 030d 	add.w	r3, r7, #13
 800a622:	2201      	movs	r2, #1
 800a624:	4619      	mov	r1, r3
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f002 f9bf 	bl	800c9aa <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a62c:	e01d      	b.n	800a66a <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 800a62e:	6839      	ldr	r1, [r7, #0]
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f002 f949 	bl	800c8c8 <USBD_CtlError>
        ret = USBD_FAIL;
 800a636:	2303      	movs	r3, #3
 800a638:	75fb      	strb	r3, [r7, #23]
      break;
 800a63a:	e016      	b.n	800a66a <USBD_CDC_Setup+0x1ca>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a642:	b2db      	uxtb	r3, r3
 800a644:	2b03      	cmp	r3, #3
 800a646:	d00f      	beq.n	800a668 <USBD_CDC_Setup+0x1c8>
      {
        USBD_CtlError(pdev, req);
 800a648:	6839      	ldr	r1, [r7, #0]
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f002 f93c 	bl	800c8c8 <USBD_CtlError>
        ret = USBD_FAIL;
 800a650:	2303      	movs	r3, #3
 800a652:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800a654:	e008      	b.n	800a668 <USBD_CDC_Setup+0x1c8>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800a656:	6839      	ldr	r1, [r7, #0]
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f002 f935 	bl	800c8c8 <USBD_CtlError>
      ret = USBD_FAIL;
 800a65e:	2303      	movs	r3, #3
 800a660:	75fb      	strb	r3, [r7, #23]
      break;
 800a662:	e002      	b.n	800a66a <USBD_CDC_Setup+0x1ca>
      break;
 800a664:	bf00      	nop
 800a666:	e008      	b.n	800a67a <USBD_CDC_Setup+0x1da>
      break;
 800a668:	bf00      	nop
    }
    break;
 800a66a:	e006      	b.n	800a67a <USBD_CDC_Setup+0x1da>

  default:
    USBD_CtlError(pdev, req);
 800a66c:	6839      	ldr	r1, [r7, #0]
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f002 f92a 	bl	800c8c8 <USBD_CtlError>
    ret = USBD_FAIL;
 800a674:	2303      	movs	r3, #3
 800a676:	75fb      	strb	r3, [r7, #23]
    break;
 800a678:	bf00      	nop
  }

  return (uint8_t)ret;
 800a67a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	371c      	adds	r7, #28
 800a680:	46bd      	mov	sp, r7
 800a682:	bd90      	pop	{r4, r7, pc}
 800a684:	20001304 	.word	0x20001304
 800a688:	20001308 	.word	0x20001308
 800a68c:	20001310 	.word	0x20001310

0800a690 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a690:	b590      	push	{r4, r7, lr}
 800a692:	b087      	sub	sp, #28
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
 800a698:	460b      	mov	r3, r1
 800a69a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800a69c:	2300      	movs	r3, #0
 800a69e:	613b      	str	r3, [r7, #16]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800a6a6:	60fb      	str	r3, [r7, #12]
  uint8_t ep_to_ch = 0;
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	75fb      	strb	r3, [r7, #23]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	75bb      	strb	r3, [r7, #22]
 800a6b0:	e00d      	b.n	800a6ce <USBD_CDC_DataIn+0x3e>
  {
    if (epnum == (CDC_IN_EP[i] & 0x0F))
 800a6b2:	78fa      	ldrb	r2, [r7, #3]
 800a6b4:	7dbb      	ldrb	r3, [r7, #22]
 800a6b6:	4934      	ldr	r1, [pc, #208]	@ (800a788 <USBD_CDC_DataIn+0xf8>)
 800a6b8:	5ccb      	ldrb	r3, [r1, r3]
 800a6ba:	f003 030f 	and.w	r3, r3, #15
 800a6be:	429a      	cmp	r2, r3
 800a6c0:	d102      	bne.n	800a6c8 <USBD_CDC_DataIn+0x38>
    {
      ep_to_ch = i;
 800a6c2:	7dbb      	ldrb	r3, [r7, #22]
 800a6c4:	75fb      	strb	r3, [r7, #23]
      break;
 800a6c6:	e005      	b.n	800a6d4 <USBD_CDC_DataIn+0x44>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800a6c8:	7dbb      	ldrb	r3, [r7, #22]
 800a6ca:	3301      	adds	r3, #1
 800a6cc:	75bb      	strb	r3, [r7, #22]
 800a6ce:	7dbb      	ldrb	r3, [r7, #22]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d0ee      	beq.n	800a6b2 <USBD_CDC_DataIn+0x22>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 800a6d4:	7dfb      	ldrb	r3, [r7, #23]
 800a6d6:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a6da:	fb02 f303 	mul.w	r3, r2, r3
 800a6de:	4a2b      	ldr	r2, [pc, #172]	@ (800a78c <USBD_CDC_DataIn+0xfc>)
 800a6e0:	4413      	add	r3, r2
 800a6e2:	613b      	str	r3, [r7, #16]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a6e4:	78fa      	ldrb	r2, [r7, #3]
 800a6e6:	6879      	ldr	r1, [r7, #4]
 800a6e8:	4613      	mov	r3, r2
 800a6ea:	009b      	lsls	r3, r3, #2
 800a6ec:	4413      	add	r3, r2
 800a6ee:	009b      	lsls	r3, r3, #2
 800a6f0:	440b      	add	r3, r1
 800a6f2:	3318      	adds	r3, #24
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d029      	beq.n	800a74e <USBD_CDC_DataIn+0xbe>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a6fa:	78fa      	ldrb	r2, [r7, #3]
 800a6fc:	6879      	ldr	r1, [r7, #4]
 800a6fe:	4613      	mov	r3, r2
 800a700:	009b      	lsls	r3, r3, #2
 800a702:	4413      	add	r3, r2
 800a704:	009b      	lsls	r3, r3, #2
 800a706:	440b      	add	r3, r1
 800a708:	3318      	adds	r3, #24
 800a70a:	681a      	ldr	r2, [r3, #0]
 800a70c:	78f9      	ldrb	r1, [r7, #3]
 800a70e:	68f8      	ldr	r0, [r7, #12]
 800a710:	460b      	mov	r3, r1
 800a712:	00db      	lsls	r3, r3, #3
 800a714:	440b      	add	r3, r1
 800a716:	009b      	lsls	r3, r3, #2
 800a718:	4403      	add	r3, r0
 800a71a:	331c      	adds	r3, #28
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	fbb2 f1f3 	udiv	r1, r2, r3
 800a722:	fb01 f303 	mul.w	r3, r1, r3
 800a726:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d110      	bne.n	800a74e <USBD_CDC_DataIn+0xbe>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800a72c:	78fa      	ldrb	r2, [r7, #3]
 800a72e:	6879      	ldr	r1, [r7, #4]
 800a730:	4613      	mov	r3, r2
 800a732:	009b      	lsls	r3, r3, #2
 800a734:	4413      	add	r3, r2
 800a736:	009b      	lsls	r3, r3, #2
 800a738:	440b      	add	r3, r1
 800a73a:	3318      	adds	r3, #24
 800a73c:	2200      	movs	r2, #0
 800a73e:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a740:	78f9      	ldrb	r1, [r7, #3]
 800a742:	2300      	movs	r3, #0
 800a744:	2200      	movs	r2, #0
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f002 fc0f 	bl	800cf6a <USBD_LL_Transmit>
 800a74c:	e016      	b.n	800a77c <USBD_CDC_DataIn+0xec>
  }
  else
  {
    hcdc->TxState = 0U;
 800a74e:	693b      	ldr	r3, [r7, #16]
 800a750:	2200      	movs	r2, #0
 800a752:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt != NULL)
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a75c:	691b      	ldr	r3, [r3, #16]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d00c      	beq.n	800a77c <USBD_CDC_DataIn+0xec>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt(ep_to_ch, hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a768:	691c      	ldr	r4, [r3, #16]
 800a76a:	693b      	ldr	r3, [r7, #16]
 800a76c:	f8d3 1208 	ldr.w	r1, [r3, #520]	@ 0x208
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 800a776:	78fb      	ldrb	r3, [r7, #3]
 800a778:	7df8      	ldrb	r0, [r7, #23]
 800a77a:	47a0      	blx	r4
    }
  }

  return (uint8_t)USBD_OK;
 800a77c:	2300      	movs	r3, #0
}
 800a77e:	4618      	mov	r0, r3
 800a780:	371c      	adds	r7, #28
 800a782:	46bd      	mov	sp, r7
 800a784:	bd90      	pop	{r4, r7, pc}
 800a786:	bf00      	nop
 800a788:	200012f8 	.word	0x200012f8
 800a78c:	20001310 	.word	0x20001310

0800a790 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b084      	sub	sp, #16
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
 800a798:	460b      	mov	r3, r1
 800a79a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800a79c:	2300      	movs	r3, #0
 800a79e:	60bb      	str	r3, [r7, #8]
  uint8_t ep_to_ch = 0;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	73fb      	strb	r3, [r7, #15]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	73bb      	strb	r3, [r7, #14]
 800a7a8:	e00b      	b.n	800a7c2 <USBD_CDC_DataOut+0x32>
  {
    if (epnum == CDC_OUT_EP[i])
 800a7aa:	7bbb      	ldrb	r3, [r7, #14]
 800a7ac:	4a17      	ldr	r2, [pc, #92]	@ (800a80c <USBD_CDC_DataOut+0x7c>)
 800a7ae:	5cd3      	ldrb	r3, [r2, r3]
 800a7b0:	78fa      	ldrb	r2, [r7, #3]
 800a7b2:	429a      	cmp	r2, r3
 800a7b4:	d102      	bne.n	800a7bc <USBD_CDC_DataOut+0x2c>
    {
      ep_to_ch = i;
 800a7b6:	7bbb      	ldrb	r3, [r7, #14]
 800a7b8:	73fb      	strb	r3, [r7, #15]
      break;
 800a7ba:	e005      	b.n	800a7c8 <USBD_CDC_DataOut+0x38>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800a7bc:	7bbb      	ldrb	r3, [r7, #14]
 800a7be:	3301      	adds	r3, #1
 800a7c0:	73bb      	strb	r3, [r7, #14]
 800a7c2:	7bbb      	ldrb	r3, [r7, #14]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d0f0      	beq.n	800a7aa <USBD_CDC_DataOut+0x1a>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 800a7c8:	7bfb      	ldrb	r3, [r7, #15]
 800a7ca:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a7ce:	fb02 f303 	mul.w	r3, r2, r3
 800a7d2:	4a0f      	ldr	r2, [pc, #60]	@ (800a810 <USBD_CDC_DataOut+0x80>)
 800a7d4:	4413      	add	r3, r2
 800a7d6:	60bb      	str	r3, [r7, #8]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a7d8:	78fb      	ldrb	r3, [r7, #3]
 800a7da:	4619      	mov	r1, r3
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f002 fc06 	bl	800cfee <USBD_LL_GetRxDataSize>
 800a7e2:	4602      	mov	r2, r0
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Receive(ep_to_ch, hcdc->RxBuffer, &hcdc->RxLength);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a7f0:	68db      	ldr	r3, [r3, #12]
 800a7f2:	68ba      	ldr	r2, [r7, #8]
 800a7f4:	f8d2 1204 	ldr.w	r1, [r2, #516]	@ 0x204
 800a7f8:	68ba      	ldr	r2, [r7, #8]
 800a7fa:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a7fe:	7bf8      	ldrb	r0, [r7, #15]
 800a800:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a802:	2300      	movs	r3, #0
}
 800a804:	4618      	mov	r0, r3
 800a806:	3710      	adds	r7, #16
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}
 800a80c:	200012fc 	.word	0x200012fc
 800a810:	20001310 	.word	0x20001310

0800a814 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a814:	b590      	push	{r4, r7, lr}
 800a816:	b085      	sub	sp, #20
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800a81c:	2300      	movs	r3, #0
 800a81e:	60bb      	str	r3, [r7, #8]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800a820:	2300      	movs	r3, #0
 800a822:	73fb      	strb	r3, [r7, #15]
 800a824:	e02d      	b.n	800a882 <USBD_CDC_EP0_RxReady+0x6e>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 800a826:	7bfb      	ldrb	r3, [r7, #15]
 800a828:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a82c:	fb02 f303 	mul.w	r3, r2, r3
 800a830:	4a18      	ldr	r2, [pc, #96]	@ (800a894 <USBD_CDC_EP0_RxReady+0x80>)
 800a832:	4413      	add	r3, r2
 800a834:	60bb      	str	r3, [r7, #8]

    if (hcdc == NULL)
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d101      	bne.n	800a840 <USBD_CDC_EP0_RxReady+0x2c>
    {
      return (uint8_t)USBD_FAIL;
 800a83c:	2303      	movs	r3, #3
 800a83e:	e024      	b.n	800a88a <USBD_CDC_EP0_RxReady+0x76>
    }

    if ((pdev->pUserData_CDC_ACM != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a846:	2b00      	cmp	r3, #0
 800a848:	d018      	beq.n	800a87c <USBD_CDC_EP0_RxReady+0x68>
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a850:	2bff      	cmp	r3, #255	@ 0xff
 800a852:	d013      	beq.n	800a87c <USBD_CDC_EP0_RxReady+0x68>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(i, hcdc->CmdOpCode, (uint8_t *)hcdc->data[i], (uint16_t)hcdc->CmdLength);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a85a:	689c      	ldr	r4, [r3, #8]
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	f893 1200 	ldrb.w	r1, [r3, #512]	@ 0x200
 800a862:	7bfb      	ldrb	r3, [r7, #15]
 800a864:	025b      	lsls	r3, r3, #9
 800a866:	68ba      	ldr	r2, [r7, #8]
 800a868:	441a      	add	r2, r3
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800a870:	7bf8      	ldrb	r0, [r7, #15]
 800a872:	47a0      	blx	r4
      hcdc->CmdOpCode = 0xFFU;
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	22ff      	movs	r2, #255	@ 0xff
 800a878:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800a87c:	7bfb      	ldrb	r3, [r7, #15]
 800a87e:	3301      	adds	r3, #1
 800a880:	73fb      	strb	r3, [r7, #15]
 800a882:	7bfb      	ldrb	r3, [r7, #15]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d0ce      	beq.n	800a826 <USBD_CDC_EP0_RxReady+0x12>
    }
  }

  return (uint8_t)USBD_OK;
 800a888:	2300      	movs	r3, #0
}
 800a88a:	4618      	mov	r0, r3
 800a88c:	3714      	adds	r7, #20
 800a88e:	46bd      	mov	sp, r7
 800a890:	bd90      	pop	{r4, r7, pc}
 800a892:	bf00      	nop
 800a894:	20001310 	.word	0x20001310

0800a898 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a898:	b480      	push	{r7}
 800a89a:	b083      	sub	sp, #12
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	224b      	movs	r2, #75	@ 0x4b
 800a8a4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a8a6:	4b03      	ldr	r3, [pc, #12]	@ (800a8b4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	370c      	adds	r7, #12
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b2:	4770      	bx	lr
 800a8b4:	20000160 	.word	0x20000160

0800a8b8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b083      	sub	sp, #12
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	224b      	movs	r2, #75	@ 0x4b
 800a8c4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a8c6:	4b03      	ldr	r3, [pc, #12]	@ (800a8d4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	370c      	adds	r7, #12
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d2:	4770      	bx	lr
 800a8d4:	20000114 	.word	0x20000114

0800a8d8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a8d8:	b480      	push	{r7}
 800a8da:	b083      	sub	sp, #12
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	224b      	movs	r2, #75	@ 0x4b
 800a8e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a8e6:	4b03      	ldr	r3, [pc, #12]	@ (800a8f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	370c      	adds	r7, #12
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f2:	4770      	bx	lr
 800a8f4:	20000160 	.word	0x20000160

0800a8f8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b083      	sub	sp, #12
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	220a      	movs	r2, #10
 800a904:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a906:	4b03      	ldr	r3, [pc, #12]	@ (800a914 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a908:	4618      	mov	r0, r3
 800a90a:	370c      	adds	r7, #12
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr
 800a914:	200000cc 	.word	0x200000cc

0800a918 <USBD_CDC_ACM_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_ACM_RegisterInterface(USBD_HandleTypeDef *pdev,
                                       USBD_CDC_ACM_ItfTypeDef *fops)
{
 800a918:	b480      	push	{r7}
 800a91a:	b083      	sub	sp, #12
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
 800a920:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d101      	bne.n	800a92c <USBD_CDC_ACM_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a928:	2303      	movs	r3, #3
 800a92a:	e004      	b.n	800a936 <USBD_CDC_ACM_RegisterInterface+0x1e>
  }

  pdev->pUserData_CDC_ACM = fops;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	683a      	ldr	r2, [r7, #0]
 800a930:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  return (uint8_t)USBD_OK;
 800a934:	2300      	movs	r3, #0
}
 800a936:	4618      	mov	r0, r3
 800a938:	370c      	adds	r7, #12
 800a93a:	46bd      	mov	sp, r7
 800a93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a940:	4770      	bx	lr
	...

0800a944 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a944:	b480      	push	{r7}
 800a946:	b087      	sub	sp, #28
 800a948:	af00      	add	r7, sp, #0
 800a94a:	60b9      	str	r1, [r7, #8]
 800a94c:	607a      	str	r2, [r7, #4]
 800a94e:	603b      	str	r3, [r7, #0]
 800a950:	4603      	mov	r3, r0
 800a952:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800a954:	2300      	movs	r3, #0
 800a956:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 800a958:	7bfb      	ldrb	r3, [r7, #15]
 800a95a:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a95e:	fb02 f303 	mul.w	r3, r2, r3
 800a962:	4a09      	ldr	r2, [pc, #36]	@ (800a988 <USBD_CDC_SetTxBuffer+0x44>)
 800a964:	4413      	add	r3, r2
 800a966:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a968:	697b      	ldr	r3, [r7, #20]
 800a96a:	687a      	ldr	r2, [r7, #4]
 800a96c:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a970:	697b      	ldr	r3, [r7, #20]
 800a972:	683a      	ldr	r2, [r7, #0]
 800a974:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a978:	2300      	movs	r3, #0
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	371c      	adds	r7, #28
 800a97e:	46bd      	mov	sp, r7
 800a980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a984:	4770      	bx	lr
 800a986:	bf00      	nop
 800a988:	20001310 	.word	0x20001310

0800a98c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a98c:	b480      	push	{r7}
 800a98e:	b087      	sub	sp, #28
 800a990:	af00      	add	r7, sp, #0
 800a992:	4603      	mov	r3, r0
 800a994:	60b9      	str	r1, [r7, #8]
 800a996:	607a      	str	r2, [r7, #4]
 800a998:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800a99a:	2300      	movs	r3, #0
 800a99c:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 800a99e:	7bfb      	ldrb	r3, [r7, #15]
 800a9a0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a9a4:	fb02 f303 	mul.w	r3, r2, r3
 800a9a8:	4a06      	ldr	r2, [pc, #24]	@ (800a9c4 <USBD_CDC_SetRxBuffer+0x38>)
 800a9aa:	4413      	add	r3, r2
 800a9ac:	617b      	str	r3, [r7, #20]

  hcdc->RxBuffer = pbuff;
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	687a      	ldr	r2, [r7, #4]
 800a9b2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a9b6:	2300      	movs	r3, #0
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	371c      	adds	r7, #28
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c2:	4770      	bx	lr
 800a9c4:	20001310 	.word	0x20001310

0800a9c8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b084      	sub	sp, #16
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	6039      	str	r1, [r7, #0]
 800a9d2:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a9d8:	2301      	movs	r3, #1
 800a9da:	73fb      	strb	r3, [r7, #15]

  hcdc = &CDC_ACM_Class_Data[ch];
 800a9dc:	79fb      	ldrb	r3, [r7, #7]
 800a9de:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a9e2:	fb02 f303 	mul.w	r3, r2, r3
 800a9e6:	4a17      	ldr	r2, [pc, #92]	@ (800aa44 <USBD_CDC_TransmitPacket+0x7c>)
 800a9e8:	4413      	add	r3, r2
 800a9ea:	60bb      	str	r3, [r7, #8]

  if (hcdc->TxState == 0U)
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d121      	bne.n	800aa3a <USBD_CDC_TransmitPacket+0x72>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a9f6:	68bb      	ldr	r3, [r7, #8]
 800a9f8:	2201      	movs	r2, #1
 800a9fa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP[ch] & 0xFU].total_length = hcdc->TxLength;
 800a9fe:	79fb      	ldrb	r3, [r7, #7]
 800aa00:	4a11      	ldr	r2, [pc, #68]	@ (800aa48 <USBD_CDC_TransmitPacket+0x80>)
 800aa02:	5cd3      	ldrb	r3, [r2, r3]
 800aa04:	f003 020f 	and.w	r2, r3, #15
 800aa08:	68bb      	ldr	r3, [r7, #8]
 800aa0a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800aa0e:	6838      	ldr	r0, [r7, #0]
 800aa10:	4613      	mov	r3, r2
 800aa12:	009b      	lsls	r3, r3, #2
 800aa14:	4413      	add	r3, r2
 800aa16:	009b      	lsls	r3, r3, #2
 800aa18:	4403      	add	r3, r0
 800aa1a:	3318      	adds	r3, #24
 800aa1c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP[ch], hcdc->TxBuffer, hcdc->TxLength);
 800aa1e:	79fb      	ldrb	r3, [r7, #7]
 800aa20:	4a09      	ldr	r2, [pc, #36]	@ (800aa48 <USBD_CDC_TransmitPacket+0x80>)
 800aa22:	5cd1      	ldrb	r1, [r2, r3]
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800aa30:	6838      	ldr	r0, [r7, #0]
 800aa32:	f002 fa9a 	bl	800cf6a <USBD_LL_Transmit>

    ret = USBD_OK;
 800aa36:	2300      	movs	r3, #0
 800aa38:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800aa3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	3710      	adds	r7, #16
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}
 800aa44:	20001310 	.word	0x20001310
 800aa48:	200012f8 	.word	0x200012f8

0800aa4c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b084      	sub	sp, #16
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	4603      	mov	r3, r0
 800aa54:	6039      	str	r1, [r7, #0]
 800aa56:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	60fb      	str	r3, [r7, #12]

  hcdc = &CDC_ACM_Class_Data[ch];
 800aa5c:	79fb      	ldrb	r3, [r7, #7]
 800aa5e:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800aa62:	fb02 f303 	mul.w	r3, r2, r3
 800aa66:	4a11      	ldr	r2, [pc, #68]	@ (800aaac <USBD_CDC_ReceivePacket+0x60>)
 800aa68:	4413      	add	r3, r2
 800aa6a:	60fb      	str	r3, [r7, #12]

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	7c1b      	ldrb	r3, [r3, #16]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d10b      	bne.n	800aa8c <USBD_CDC_ReceivePacket+0x40>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 800aa74:	79fb      	ldrb	r3, [r7, #7]
 800aa76:	4a0e      	ldr	r2, [pc, #56]	@ (800aab0 <USBD_CDC_ReceivePacket+0x64>)
 800aa78:	5cd1      	ldrb	r1, [r2, r3]
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800aa80:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aa84:	6838      	ldr	r0, [r7, #0]
 800aa86:	f002 fa91 	bl	800cfac <USBD_LL_PrepareReceive>
 800aa8a:	e009      	b.n	800aaa0 <USBD_CDC_ReceivePacket+0x54>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 800aa8c:	79fb      	ldrb	r3, [r7, #7]
 800aa8e:	4a08      	ldr	r2, [pc, #32]	@ (800aab0 <USBD_CDC_ReceivePacket+0x64>)
 800aa90:	5cd1      	ldrb	r1, [r2, r3]
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800aa98:	2340      	movs	r3, #64	@ 0x40
 800aa9a:	6838      	ldr	r0, [r7, #0]
 800aa9c:	f002 fa86 	bl	800cfac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800aaa0:	2300      	movs	r3, #0
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3710      	adds	r7, #16
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}
 800aaaa:	bf00      	nop
 800aaac:	20001310 	.word	0x20001310
 800aab0:	200012fc 	.word	0x200012fc

0800aab4 <USBD_Update_CDC_ACM_DESC>:
                              uint8_t com_itf,
                              uint8_t in_ep,
                              uint8_t cmd_ep,
                              uint8_t out_ep,
                              uint8_t str_idx)
{
 800aab4:	b480      	push	{r7}
 800aab6:	b085      	sub	sp, #20
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
 800aabc:	4608      	mov	r0, r1
 800aabe:	4611      	mov	r1, r2
 800aac0:	461a      	mov	r2, r3
 800aac2:	4603      	mov	r3, r0
 800aac4:	70fb      	strb	r3, [r7, #3]
 800aac6:	460b      	mov	r3, r1
 800aac8:	70bb      	strb	r3, [r7, #2]
 800aaca:	4613      	mov	r3, r2
 800aacc:	707b      	strb	r3, [r7, #1]
  desc += 9;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	3309      	adds	r3, #9
 800aad2:	607b      	str	r3, [r7, #4]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800aad4:	2300      	movs	r3, #0
 800aad6:	73fb      	strb	r3, [r7, #15]
 800aad8:	e05b      	b.n	800ab92 <USBD_Update_CDC_ACM_DESC+0xde>
  {
    desc[2] = cmd_itf;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	3302      	adds	r3, #2
 800aade:	78fa      	ldrb	r2, [r7, #3]
 800aae0:	701a      	strb	r2, [r3, #0]
    desc[16] = str_idx;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	3310      	adds	r3, #16
 800aae6:	f897 2020 	ldrb.w	r2, [r7, #32]
 800aaea:	701a      	strb	r2, [r3, #0]
    desc[10] = cmd_itf;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	330a      	adds	r3, #10
 800aaf0:	78fa      	ldrb	r2, [r7, #3]
 800aaf2:	701a      	strb	r2, [r3, #0]
    desc[26] = com_itf;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	331a      	adds	r3, #26
 800aaf8:	78ba      	ldrb	r2, [r7, #2]
 800aafa:	701a      	strb	r2, [r3, #0]
    desc[34] = cmd_itf;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	3322      	adds	r3, #34	@ 0x22
 800ab00:	78fa      	ldrb	r2, [r7, #3]
 800ab02:	701a      	strb	r2, [r3, #0]
    desc[35] = com_itf;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	3323      	adds	r3, #35	@ 0x23
 800ab08:	78ba      	ldrb	r2, [r7, #2]
 800ab0a:	701a      	strb	r2, [r3, #0]
    desc[38] = cmd_ep;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	3326      	adds	r3, #38	@ 0x26
 800ab10:	7e3a      	ldrb	r2, [r7, #24]
 800ab12:	701a      	strb	r2, [r3, #0]
    desc[45] = com_itf;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	332d      	adds	r3, #45	@ 0x2d
 800ab18:	78ba      	ldrb	r2, [r7, #2]
 800ab1a:	701a      	strb	r2, [r3, #0]
    desc[54] = out_ep;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	3336      	adds	r3, #54	@ 0x36
 800ab20:	7f3a      	ldrb	r2, [r7, #28]
 800ab22:	701a      	strb	r2, [r3, #0]
    desc[61] = in_ep;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	333d      	adds	r3, #61	@ 0x3d
 800ab28:	787a      	ldrb	r2, [r7, #1]
 800ab2a:	701a      	strb	r2, [r3, #0]

    desc += 66;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	3342      	adds	r3, #66	@ 0x42
 800ab30:	607b      	str	r3, [r7, #4]
    CDC_IN_EP[i] = in_ep;
 800ab32:	7bfb      	ldrb	r3, [r7, #15]
 800ab34:	491c      	ldr	r1, [pc, #112]	@ (800aba8 <USBD_Update_CDC_ACM_DESC+0xf4>)
 800ab36:	787a      	ldrb	r2, [r7, #1]
 800ab38:	54ca      	strb	r2, [r1, r3]
    CDC_OUT_EP[i] = out_ep;
 800ab3a:	7bfb      	ldrb	r3, [r7, #15]
 800ab3c:	491b      	ldr	r1, [pc, #108]	@ (800abac <USBD_Update_CDC_ACM_DESC+0xf8>)
 800ab3e:	7f3a      	ldrb	r2, [r7, #28]
 800ab40:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_EP[i] = cmd_ep;
 800ab42:	7bfb      	ldrb	r3, [r7, #15]
 800ab44:	491a      	ldr	r1, [pc, #104]	@ (800abb0 <USBD_Update_CDC_ACM_DESC+0xfc>)
 800ab46:	7e3a      	ldrb	r2, [r7, #24]
 800ab48:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_ITF_NBR[i] = cmd_itf;
 800ab4a:	7bfb      	ldrb	r3, [r7, #15]
 800ab4c:	4919      	ldr	r1, [pc, #100]	@ (800abb4 <USBD_Update_CDC_ACM_DESC+0x100>)
 800ab4e:	78fa      	ldrb	r2, [r7, #3]
 800ab50:	54ca      	strb	r2, [r1, r3]
    CDC_COM_ITF_NBR[i] = com_itf;
 800ab52:	7bfb      	ldrb	r3, [r7, #15]
 800ab54:	4918      	ldr	r1, [pc, #96]	@ (800abb8 <USBD_Update_CDC_ACM_DESC+0x104>)
 800ab56:	78ba      	ldrb	r2, [r7, #2]
 800ab58:	54ca      	strb	r2, [r1, r3]
    CDC_STR_DESC_IDX[i] = str_idx;
 800ab5a:	7bfb      	ldrb	r3, [r7, #15]
 800ab5c:	4917      	ldr	r1, [pc, #92]	@ (800abbc <USBD_Update_CDC_ACM_DESC+0x108>)
 800ab5e:	f897 2020 	ldrb.w	r2, [r7, #32]
 800ab62:	54ca      	strb	r2, [r1, r3]

    in_ep += 2;
 800ab64:	787b      	ldrb	r3, [r7, #1]
 800ab66:	3302      	adds	r3, #2
 800ab68:	707b      	strb	r3, [r7, #1]
    cmd_ep = in_ep + 1;
 800ab6a:	787b      	ldrb	r3, [r7, #1]
 800ab6c:	3301      	adds	r3, #1
 800ab6e:	763b      	strb	r3, [r7, #24]
    out_ep++;
 800ab70:	7f3b      	ldrb	r3, [r7, #28]
 800ab72:	3301      	adds	r3, #1
 800ab74:	773b      	strb	r3, [r7, #28]
    str_idx++;
 800ab76:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ab7a:	3301      	adds	r3, #1
 800ab7c:	f887 3020 	strb.w	r3, [r7, #32]

    cmd_itf += 2;
 800ab80:	78fb      	ldrb	r3, [r7, #3]
 800ab82:	3302      	adds	r3, #2
 800ab84:	70fb      	strb	r3, [r7, #3]
    com_itf = cmd_itf + 1;
 800ab86:	78fb      	ldrb	r3, [r7, #3]
 800ab88:	3301      	adds	r3, #1
 800ab8a:	70bb      	strb	r3, [r7, #2]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800ab8c:	7bfb      	ldrb	r3, [r7, #15]
 800ab8e:	3301      	adds	r3, #1
 800ab90:	73fb      	strb	r3, [r7, #15]
 800ab92:	7bfb      	ldrb	r3, [r7, #15]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d0a0      	beq.n	800aada <USBD_Update_CDC_ACM_DESC+0x26>
  }
}
 800ab98:	bf00      	nop
 800ab9a:	bf00      	nop
 800ab9c:	3714      	adds	r7, #20
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba4:	4770      	bx	lr
 800aba6:	bf00      	nop
 800aba8:	200012f8 	.word	0x200012f8
 800abac:	200012fc 	.word	0x200012fc
 800abb0:	20001300 	.word	0x20001300
 800abb4:	20001304 	.word	0x20001304
 800abb8:	20001308 	.word	0x20001308
 800abbc:	2000130c 	.word	0x2000130c

0800abc0 <USBD_COMPOSITE_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b082      	sub	sp, #8
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
 800abc8:	460b      	mov	r3, r1
 800abca:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.Init(pdev, cfgidx);
 800abcc:	4b08      	ldr	r3, [pc, #32]	@ (800abf0 <USBD_COMPOSITE_Init+0x30>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	78fa      	ldrb	r2, [r7, #3]
 800abd2:	4611      	mov	r1, r2
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	4798      	blx	r3
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.Init(pdev, cfgidx);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.Init(pdev, cfgidx);
 800abd8:	4b06      	ldr	r3, [pc, #24]	@ (800abf4 <USBD_COMPOSITE_Init+0x34>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	78fa      	ldrb	r2, [r7, #3]
 800abde:	4611      	mov	r1, r2
 800abe0:	6878      	ldr	r0, [r7, #4]
 800abe2:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.Init(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 800abe4:	2300      	movs	r3, #0
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	3708      	adds	r7, #8
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}
 800abee:	bf00      	nop
 800abf0:	200000d8 	.word	0x200000d8
 800abf4:	200001f8 	.word	0x200001f8

0800abf8 <USBD_COMPOSITE_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b082      	sub	sp, #8
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
 800ac00:	460b      	mov	r3, r1
 800ac02:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.DeInit(pdev, cfgidx);
 800ac04:	4b08      	ldr	r3, [pc, #32]	@ (800ac28 <USBD_COMPOSITE_DeInit+0x30>)
 800ac06:	685b      	ldr	r3, [r3, #4]
 800ac08:	78fa      	ldrb	r2, [r7, #3]
 800ac0a:	4611      	mov	r1, r2
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	4798      	blx	r3
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.DeInit(pdev, cfgidx);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.DeInit(pdev, cfgidx);
 800ac10:	4b06      	ldr	r3, [pc, #24]	@ (800ac2c <USBD_COMPOSITE_DeInit+0x34>)
 800ac12:	685b      	ldr	r3, [r3, #4]
 800ac14:	78fa      	ldrb	r2, [r7, #3]
 800ac16:	4611      	mov	r1, r2
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.DeInit(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 800ac1c:	2300      	movs	r3, #0
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3708      	adds	r7, #8
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}
 800ac26:	bf00      	nop
 800ac28:	200000d8 	.word	0x200000d8
 800ac2c:	200001f8 	.word	0x200001f8

0800ac30 <USBD_COMPOSITE_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Setup(USBD_HandleTypeDef *pdev,
                                    USBD_SetupReqTypedef *req)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b084      	sub	sp, #16
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
 800ac38:	6039      	str	r1, [r7, #0]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	73fb      	strb	r3, [r7, #15]
 800ac3e:	e019      	b.n	800ac74 <USBD_COMPOSITE_Setup+0x44>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	889b      	ldrh	r3, [r3, #4]
 800ac44:	b2da      	uxtb	r2, r3
 800ac46:	7bfb      	ldrb	r3, [r7, #15]
 800ac48:	4915      	ldr	r1, [pc, #84]	@ (800aca0 <USBD_COMPOSITE_Setup+0x70>)
 800ac4a:	5ccb      	ldrb	r3, [r1, r3]
 800ac4c:	429a      	cmp	r2, r3
 800ac4e:	d007      	beq.n	800ac60 <USBD_COMPOSITE_Setup+0x30>
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	889b      	ldrh	r3, [r3, #4]
 800ac54:	b2da      	uxtb	r2, r3
 800ac56:	7bfb      	ldrb	r3, [r7, #15]
 800ac58:	4912      	ldr	r1, [pc, #72]	@ (800aca4 <USBD_COMPOSITE_Setup+0x74>)
 800ac5a:	5ccb      	ldrb	r3, [r1, r3]
 800ac5c:	429a      	cmp	r2, r3
 800ac5e:	d106      	bne.n	800ac6e <USBD_COMPOSITE_Setup+0x3e>
    {
      return USBD_CDC_ACM.Setup(pdev, req);
 800ac60:	4b11      	ldr	r3, [pc, #68]	@ (800aca8 <USBD_COMPOSITE_Setup+0x78>)
 800ac62:	689b      	ldr	r3, [r3, #8]
 800ac64:	6839      	ldr	r1, [r7, #0]
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	4798      	blx	r3
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	e014      	b.n	800ac98 <USBD_COMPOSITE_Setup+0x68>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800ac6e:	7bfb      	ldrb	r3, [r7, #15]
 800ac70:	3301      	adds	r3, #1
 800ac72:	73fb      	strb	r3, [r7, #15]
 800ac74:	7bfb      	ldrb	r3, [r7, #15]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d0e2      	beq.n	800ac40 <USBD_COMPOSITE_Setup+0x10>
  {
    return USBD_HID_KEYBOARD.Setup(pdev, req);
  }
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (LOBYTE(req->wIndex) == CUSTOM_HID_ITF_NBR)
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	889b      	ldrh	r3, [r3, #4]
 800ac7e:	b2da      	uxtb	r2, r3
 800ac80:	4b0a      	ldr	r3, [pc, #40]	@ (800acac <USBD_COMPOSITE_Setup+0x7c>)
 800ac82:	781b      	ldrb	r3, [r3, #0]
 800ac84:	429a      	cmp	r2, r3
 800ac86:	d106      	bne.n	800ac96 <USBD_COMPOSITE_Setup+0x66>
  {
    return USBD_HID_CUSTOM.Setup(pdev, req);
 800ac88:	4b09      	ldr	r3, [pc, #36]	@ (800acb0 <USBD_COMPOSITE_Setup+0x80>)
 800ac8a:	689b      	ldr	r3, [r3, #8]
 800ac8c:	6839      	ldr	r1, [r7, #0]
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	4798      	blx	r3
 800ac92:	4603      	mov	r3, r0
 800ac94:	e000      	b.n	800ac98 <USBD_COMPOSITE_Setup+0x68>
  {
    USBD_PRNT.Setup(pdev, req);
  }
#endif

  return USBD_FAIL;
 800ac96:	2303      	movs	r3, #3
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3710      	adds	r7, #16
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}
 800aca0:	20001304 	.word	0x20001304
 800aca4:	20001308 	.word	0x20001308
 800aca8:	200000d8 	.word	0x200000d8
 800acac:	20001644 	.word	0x20001644
 800acb0:	200001f8 	.word	0x200001f8

0800acb4 <USBD_COMPOSITE_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b084      	sub	sp, #16
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
 800acbc:	460b      	mov	r3, r1
 800acbe:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800acc0:	2300      	movs	r3, #0
 800acc2:	73fb      	strb	r3, [r7, #15]
 800acc4:	e01a      	b.n	800acfc <USBD_COMPOSITE_DataIn+0x48>
  {
    if (epnum == (CDC_IN_EP[i] & 0x7F) || epnum == (CDC_CMD_EP[i] & 0x7F))
 800acc6:	78fa      	ldrb	r2, [r7, #3]
 800acc8:	7bfb      	ldrb	r3, [r7, #15]
 800acca:	4918      	ldr	r1, [pc, #96]	@ (800ad2c <USBD_COMPOSITE_DataIn+0x78>)
 800accc:	5ccb      	ldrb	r3, [r1, r3]
 800acce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800acd2:	429a      	cmp	r2, r3
 800acd4:	d007      	beq.n	800ace6 <USBD_COMPOSITE_DataIn+0x32>
 800acd6:	78fa      	ldrb	r2, [r7, #3]
 800acd8:	7bfb      	ldrb	r3, [r7, #15]
 800acda:	4915      	ldr	r1, [pc, #84]	@ (800ad30 <USBD_COMPOSITE_DataIn+0x7c>)
 800acdc:	5ccb      	ldrb	r3, [r1, r3]
 800acde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ace2:	429a      	cmp	r2, r3
 800ace4:	d107      	bne.n	800acf6 <USBD_COMPOSITE_DataIn+0x42>
    {
      return USBD_CDC_ACM.DataIn(pdev, epnum);
 800ace6:	4b13      	ldr	r3, [pc, #76]	@ (800ad34 <USBD_COMPOSITE_DataIn+0x80>)
 800ace8:	695b      	ldr	r3, [r3, #20]
 800acea:	78fa      	ldrb	r2, [r7, #3]
 800acec:	4611      	mov	r1, r2
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	4798      	blx	r3
 800acf2:	4603      	mov	r3, r0
 800acf4:	e015      	b.n	800ad22 <USBD_COMPOSITE_DataIn+0x6e>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800acf6:	7bfb      	ldrb	r3, [r7, #15]
 800acf8:	3301      	adds	r3, #1
 800acfa:	73fb      	strb	r3, [r7, #15]
 800acfc:	7bfb      	ldrb	r3, [r7, #15]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d0e1      	beq.n	800acc6 <USBD_COMPOSITE_DataIn+0x12>
  {
    return USBD_HID_KEYBOARD.DataIn(pdev, epnum);
  }
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (epnum == (CUSTOM_HID_IN_EP & 0x7F))
 800ad02:	78fa      	ldrb	r2, [r7, #3]
 800ad04:	4b0c      	ldr	r3, [pc, #48]	@ (800ad38 <USBD_COMPOSITE_DataIn+0x84>)
 800ad06:	781b      	ldrb	r3, [r3, #0]
 800ad08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad0c:	429a      	cmp	r2, r3
 800ad0e:	d107      	bne.n	800ad20 <USBD_COMPOSITE_DataIn+0x6c>
  {
    return USBD_HID_CUSTOM.DataIn(pdev, epnum);
 800ad10:	4b0a      	ldr	r3, [pc, #40]	@ (800ad3c <USBD_COMPOSITE_DataIn+0x88>)
 800ad12:	695b      	ldr	r3, [r3, #20]
 800ad14:	78fa      	ldrb	r2, [r7, #3]
 800ad16:	4611      	mov	r1, r2
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	4798      	blx	r3
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	e000      	b.n	800ad22 <USBD_COMPOSITE_DataIn+0x6e>
  {
    USBD_PRNT.DataIn(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 800ad20:	2303      	movs	r3, #3
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3710      	adds	r7, #16
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}
 800ad2a:	bf00      	nop
 800ad2c:	200012f8 	.word	0x200012f8
 800ad30:	20001300 	.word	0x20001300
 800ad34:	200000d8 	.word	0x200000d8
 800ad38:	200001f6 	.word	0x200001f6
 800ad3c:	200001f8 	.word	0x200001f8

0800ad40 <USBD_COMPOSITE_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b082      	sub	sp, #8
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.EP0_RxReady(pdev);
 800ad48:	4b06      	ldr	r3, [pc, #24]	@ (800ad64 <USBD_COMPOSITE_EP0_RxReady+0x24>)
 800ad4a:	691b      	ldr	r3, [r3, #16]
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	4798      	blx	r3
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.EP0_RxReady(pdev);
 800ad50:	4b05      	ldr	r3, [pc, #20]	@ (800ad68 <USBD_COMPOSITE_EP0_RxReady+0x28>)
 800ad52:	691b      	ldr	r3, [r3, #16]
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	4798      	blx	r3
  USBD_DFU.EP0_RxReady(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800ad58:	2300      	movs	r3, #0
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	3708      	adds	r7, #8
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}
 800ad62:	bf00      	nop
 800ad64:	200000d8 	.word	0x200000d8
 800ad68:	200001f8 	.word	0x200001f8

0800ad6c <USBD_COMPOSITE_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 800ad6c:	b480      	push	{r7}
 800ad6e:	b083      	sub	sp, #12
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
  USBD_DFU.EP0_TxSent(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800ad74:	2300      	movs	r3, #0
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	370c      	adds	r7, #12
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad80:	4770      	bx	lr

0800ad82 <USBD_COMPOSITE_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_SOF(USBD_HandleTypeDef *pdev)
{
 800ad82:	b480      	push	{r7}
 800ad84:	b083      	sub	sp, #12
 800ad86:	af00      	add	r7, sp, #0
 800ad88:	6078      	str	r0, [r7, #4]
  USBD_DFU.SOF(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800ad8a:	2300      	movs	r3, #0
}
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	370c      	adds	r7, #12
 800ad90:	46bd      	mov	sp, r7
 800ad92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad96:	4770      	bx	lr

0800ad98 <USBD_COMPOSITE_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ad98:	b480      	push	{r7}
 800ad9a:	b083      	sub	sp, #12
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
 800ada0:	460b      	mov	r3, r1
 800ada2:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800ada4:	2300      	movs	r3, #0
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	370c      	adds	r7, #12
 800adaa:	46bd      	mov	sp, r7
 800adac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb0:	4770      	bx	lr

0800adb2 <USBD_COMPOSITE_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800adb2:	b480      	push	{r7}
 800adb4:	b083      	sub	sp, #12
 800adb6:	af00      	add	r7, sp, #0
 800adb8:	6078      	str	r0, [r7, #4]
 800adba:	460b      	mov	r3, r1
 800adbc:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800adbe:	2300      	movs	r3, #0
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	370c      	adds	r7, #12
 800adc4:	46bd      	mov	sp, r7
 800adc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adca:	4770      	bx	lr

0800adcc <USBD_COMPOSITE_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b084      	sub	sp, #16
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
 800add4:	460b      	mov	r3, r1
 800add6:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800add8:	2300      	movs	r3, #0
 800adda:	73fb      	strb	r3, [r7, #15]
 800addc:	e010      	b.n	800ae00 <USBD_COMPOSITE_DataOut+0x34>
  {
    if (epnum == CDC_OUT_EP[i])
 800adde:	7bfb      	ldrb	r3, [r7, #15]
 800ade0:	4a12      	ldr	r2, [pc, #72]	@ (800ae2c <USBD_COMPOSITE_DataOut+0x60>)
 800ade2:	5cd3      	ldrb	r3, [r2, r3]
 800ade4:	78fa      	ldrb	r2, [r7, #3]
 800ade6:	429a      	cmp	r2, r3
 800ade8:	d107      	bne.n	800adfa <USBD_COMPOSITE_DataOut+0x2e>
    {
      return USBD_CDC_ACM.DataOut(pdev, epnum);
 800adea:	4b11      	ldr	r3, [pc, #68]	@ (800ae30 <USBD_COMPOSITE_DataOut+0x64>)
 800adec:	699b      	ldr	r3, [r3, #24]
 800adee:	78fa      	ldrb	r2, [r7, #3]
 800adf0:	4611      	mov	r1, r2
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	4798      	blx	r3
 800adf6:	4603      	mov	r3, r0
 800adf8:	e013      	b.n	800ae22 <USBD_COMPOSITE_DataOut+0x56>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800adfa:	7bfb      	ldrb	r3, [r7, #15]
 800adfc:	3301      	adds	r3, #1
 800adfe:	73fb      	strb	r3, [r7, #15]
 800ae00:	7bfb      	ldrb	r3, [r7, #15]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d0eb      	beq.n	800adde <USBD_COMPOSITE_DataOut+0x12>
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (epnum == CUSTOM_HID_OUT_EP)
 800ae06:	4b0b      	ldr	r3, [pc, #44]	@ (800ae34 <USBD_COMPOSITE_DataOut+0x68>)
 800ae08:	781b      	ldrb	r3, [r3, #0]
 800ae0a:	78fa      	ldrb	r2, [r7, #3]
 800ae0c:	429a      	cmp	r2, r3
 800ae0e:	d107      	bne.n	800ae20 <USBD_COMPOSITE_DataOut+0x54>
  {
    return USBD_HID_CUSTOM.DataOut(pdev, epnum);
 800ae10:	4b09      	ldr	r3, [pc, #36]	@ (800ae38 <USBD_COMPOSITE_DataOut+0x6c>)
 800ae12:	699b      	ldr	r3, [r3, #24]
 800ae14:	78fa      	ldrb	r2, [r7, #3]
 800ae16:	4611      	mov	r1, r2
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	4798      	blx	r3
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	e000      	b.n	800ae22 <USBD_COMPOSITE_DataOut+0x56>
  {
    USBD_PRNT.DataOut(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 800ae20:	2303      	movs	r3, #3
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	3710      	adds	r7, #16
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}
 800ae2a:	bf00      	nop
 800ae2c:	200012fc 	.word	0x200012fc
 800ae30:	200000d8 	.word	0x200000d8
 800ae34:	200001f7 	.word	0x200001f7
 800ae38:	200001f8 	.word	0x200001f8

0800ae3c <USBD_COMPOSITE_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetHSCfgDesc(uint16_t *length)
{
 800ae3c:	b480      	push	{r7}
 800ae3e:	b083      	sub	sp, #12
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	226b      	movs	r2, #107	@ 0x6b
 800ae48:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 800ae4a:	4b03      	ldr	r3, [pc, #12]	@ (800ae58 <USBD_COMPOSITE_GetHSCfgDesc+0x1c>)
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	370c      	adds	r7, #12
 800ae50:	46bd      	mov	sp, r7
 800ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae56:	4770      	bx	lr
 800ae58:	20001598 	.word	0x20001598

0800ae5c <USBD_COMPOSITE_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetFSCfgDesc(uint16_t *length)
{
 800ae5c:	b480      	push	{r7}
 800ae5e:	b083      	sub	sp, #12
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	226b      	movs	r2, #107	@ 0x6b
 800ae68:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
 800ae6a:	4b03      	ldr	r3, [pc, #12]	@ (800ae78 <USBD_COMPOSITE_GetFSCfgDesc+0x1c>)
}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	370c      	adds	r7, #12
 800ae70:	46bd      	mov	sp, r7
 800ae72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae76:	4770      	bx	lr
 800ae78:	2000152c 	.word	0x2000152c

0800ae7c <USBD_COMPOSITE_GetOtherSpeedCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ae7c:	b480      	push	{r7}
 800ae7e:	b083      	sub	sp, #12
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
#if (USBD_USE_HS == 1)
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
#else
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	226b      	movs	r2, #107	@ 0x6b
 800ae88:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 800ae8a:	4b03      	ldr	r3, [pc, #12]	@ (800ae98 <USBD_COMPOSITE_GetOtherSpeedCfgDesc+0x1c>)
#endif
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	370c      	adds	r7, #12
 800ae90:	46bd      	mov	sp, r7
 800ae92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae96:	4770      	bx	lr
 800ae98:	20001598 	.word	0x20001598

0800ae9c <USBD_COMPOSITE_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_COMPOSITE_GetDeviceQualifierDesc(uint16_t *length)
{
 800ae9c:	b480      	push	{r7}
 800ae9e:	b083      	sub	sp, #12
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_DeviceQualifierDesc);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	220a      	movs	r2, #10
 800aea8:	801a      	strh	r2, [r3, #0]
  return USBD_COMPOSITE_DeviceQualifierDesc;
 800aeaa:	4b03      	ldr	r3, [pc, #12]	@ (800aeb8 <USBD_COMPOSITE_GetDeviceQualifierDesc+0x1c>)
}
 800aeac:	4618      	mov	r0, r3
 800aeae:	370c      	adds	r7, #12
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb6:	4770      	bx	lr
 800aeb8:	200001ec 	.word	0x200001ec

0800aebc <USBD_COMPOSITE_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_COMPOSITE_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b08a      	sub	sp, #40	@ 0x28
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	60f8      	str	r0, [r7, #12]
 800aec4:	460b      	mov	r3, r1
 800aec6:	607a      	str	r2, [r7, #4]
 800aec8:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[64];

  /* Check if the requested string interface is supported */
  if (index <= USBD_Track_String_Index)
 800aeca:	4b20      	ldr	r3, [pc, #128]	@ (800af4c <USBD_COMPOSITE_GetUsrStringDesc+0x90>)
 800aecc:	781b      	ldrb	r3, [r3, #0]
 800aece:	7afa      	ldrb	r2, [r7, #11]
 800aed0:	429a      	cmp	r2, r3
 800aed2:	d836      	bhi.n	800af42 <USBD_COMPOSITE_GetUsrStringDesc+0x86>
  {
#if (USBD_USE_CDC_ACM == 1)
    char str_buffer[16] = "";
 800aed4:	2300      	movs	r3, #0
 800aed6:	617b      	str	r3, [r7, #20]
 800aed8:	f107 0318 	add.w	r3, r7, #24
 800aedc:	2200      	movs	r2, #0
 800aede:	601a      	str	r2, [r3, #0]
 800aee0:	605a      	str	r2, [r3, #4]
 800aee2:	609a      	str	r2, [r3, #8]
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800aee4:	2300      	movs	r3, #0
 800aee6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800aeea:	e01a      	b.n	800af22 <USBD_COMPOSITE_GetUsrStringDesc+0x66>
    {
      if (index == CDC_STR_DESC_IDX[i])
 800aeec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aef0:	4a17      	ldr	r2, [pc, #92]	@ (800af50 <USBD_COMPOSITE_GetUsrStringDesc+0x94>)
 800aef2:	5cd3      	ldrb	r3, [r2, r3]
 800aef4:	7afa      	ldrb	r2, [r7, #11]
 800aef6:	429a      	cmp	r2, r3
 800aef8:	d10e      	bne.n	800af18 <USBD_COMPOSITE_GetUsrStringDesc+0x5c>
      {
        snprintf(str_buffer, sizeof(str_buffer), CDC_ACM_STR_DESC, i);
 800aefa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aefe:	f107 0014 	add.w	r0, r7, #20
 800af02:	4a14      	ldr	r2, [pc, #80]	@ (800af54 <USBD_COMPOSITE_GetUsrStringDesc+0x98>)
 800af04:	2110      	movs	r1, #16
 800af06:	f004 fd83 	bl	800fa10 <sniprintf>
        USBD_GetString((uint8_t *)str_buffer, USBD_StrDesc, length);
 800af0a:	f107 0314 	add.w	r3, r7, #20
 800af0e:	687a      	ldr	r2, [r7, #4]
 800af10:	4911      	ldr	r1, [pc, #68]	@ (800af58 <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 800af12:	4618      	mov	r0, r3
 800af14:	f001 fce9 	bl	800c8ea <USBD_GetString>
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800af18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800af1c:	3301      	adds	r3, #1
 800af1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800af22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800af26:	2b00      	cmp	r3, #0
 800af28:	d0e0      	beq.n	800aeec <USBD_COMPOSITE_GetUsrStringDesc+0x30>
    {
      USBD_GetString((uint8_t *)HID_KEYBOARD_STR_DESC, USBD_StrDesc, length);
    }
#endif
#if (USBD_USE_HID_CUSTOM == 1)
    if (index == CUSTOM_HID_STR_DESC_IDX)
 800af2a:	4b0c      	ldr	r3, [pc, #48]	@ (800af5c <USBD_COMPOSITE_GetUsrStringDesc+0xa0>)
 800af2c:	781b      	ldrb	r3, [r3, #0]
 800af2e:	7afa      	ldrb	r2, [r7, #11]
 800af30:	429a      	cmp	r2, r3
 800af32:	d104      	bne.n	800af3e <USBD_COMPOSITE_GetUsrStringDesc+0x82>
    {
      USBD_GetString((uint8_t *)CUSTOM_HID_STR_DESC, USBD_StrDesc, length);
 800af34:	687a      	ldr	r2, [r7, #4]
 800af36:	4908      	ldr	r1, [pc, #32]	@ (800af58 <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 800af38:	4809      	ldr	r0, [pc, #36]	@ (800af60 <USBD_COMPOSITE_GetUsrStringDesc+0xa4>)
 800af3a:	f001 fcd6 	bl	800c8ea <USBD_GetString>
    if (index == PRINTER_STR_DESC_IDX)
    {
      USBD_GetString((uint8_t *)PRNT_STR_DESC, USBD_StrDesc, length);
    }
#endif
    return USBD_StrDesc;
 800af3e:	4b06      	ldr	r3, [pc, #24]	@ (800af58 <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 800af40:	e000      	b.n	800af44 <USBD_COMPOSITE_GetUsrStringDesc+0x88>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 800af42:	2300      	movs	r3, #0
  }
}
 800af44:	4618      	mov	r0, r3
 800af46:	3728      	adds	r7, #40	@ 0x28
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}
 800af4c:	200001e8 	.word	0x200001e8
 800af50:	2000130c 	.word	0x2000130c
 800af54:	080103c0 	.word	0x080103c0
 800af58:	20001604 	.word	0x20001604
 800af5c:	20001645 	.word	0x20001645
 800af60:	080103d0 	.word	0x080103d0

0800af64 <USBD_COMPOSITE_Mount_Class>:
#endif

void USBD_COMPOSITE_Mount_Class(void)
{
 800af64:	b590      	push	{r4, r7, lr}
 800af66:	b089      	sub	sp, #36	@ 0x24
 800af68:	af04      	add	r7, sp, #16
  uint16_t len = 0;
 800af6a:	2300      	movs	r3, #0
 800af6c:	80bb      	strh	r3, [r7, #4]
  uint8_t *ptr = NULL;
 800af6e:	2300      	movs	r3, #0
 800af70:	60fb      	str	r3, [r7, #12]

  uint8_t in_ep_track = 0x81;
 800af72:	2381      	movs	r3, #129	@ 0x81
 800af74:	72fb      	strb	r3, [r7, #11]
  uint8_t out_ep_track = 0x01;
 800af76:	2301      	movs	r3, #1
 800af78:	72bb      	strb	r3, [r7, #10]
  uint8_t interface_no_track = 0x00;
 800af7a:	2300      	movs	r3, #0
 800af7c:	727b      	strb	r3, [r7, #9]
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_HID_CUSTOM == 1)
  ptr = USBD_HID_CUSTOM.GetFSConfigDescriptor(&len);
 800af7e:	4b74      	ldr	r3, [pc, #464]	@ (800b150 <USBD_COMPOSITE_Mount_Class+0x1ec>)
 800af80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af82:	1d3a      	adds	r2, r7, #4
 800af84:	4610      	mov	r0, r2
 800af86:	4798      	blx	r3
 800af88:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID_Custom_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 800af8a:	4b72      	ldr	r3, [pc, #456]	@ (800b154 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800af8c:	781b      	ldrb	r3, [r3, #0]
 800af8e:	7ab8      	ldrb	r0, [r7, #10]
 800af90:	7afa      	ldrb	r2, [r7, #11]
 800af92:	7a79      	ldrb	r1, [r7, #9]
 800af94:	9300      	str	r3, [sp, #0]
 800af96:	4603      	mov	r3, r0
 800af98:	68f8      	ldr	r0, [r7, #12]
 800af9a:	f000 fbc5 	bl	800b728 <USBD_Update_HID_Custom_DESC>
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_HID_CUSTOM_DESC, ptr + 0x09, len - 0x09);
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	3309      	adds	r3, #9
 800afa2:	88ba      	ldrh	r2, [r7, #4]
 800afa4:	3a09      	subs	r2, #9
 800afa6:	4619      	mov	r1, r3
 800afa8:	486b      	ldr	r0, [pc, #428]	@ (800b158 <USBD_COMPOSITE_Mount_Class+0x1f4>)
 800afaa:	f004 fdff 	bl	800fbac <memcpy>

  ptr = USBD_HID_CUSTOM.GetHSConfigDescriptor(&len);
 800afae:	4b68      	ldr	r3, [pc, #416]	@ (800b150 <USBD_COMPOSITE_Mount_Class+0x1ec>)
 800afb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afb2:	1d3a      	adds	r2, r7, #4
 800afb4:	4610      	mov	r0, r2
 800afb6:	4798      	blx	r3
 800afb8:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID_Custom_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 800afba:	4b66      	ldr	r3, [pc, #408]	@ (800b154 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800afbc:	781b      	ldrb	r3, [r3, #0]
 800afbe:	7ab8      	ldrb	r0, [r7, #10]
 800afc0:	7afa      	ldrb	r2, [r7, #11]
 800afc2:	7a79      	ldrb	r1, [r7, #9]
 800afc4:	9300      	str	r3, [sp, #0]
 800afc6:	4603      	mov	r3, r0
 800afc8:	68f8      	ldr	r0, [r7, #12]
 800afca:	f000 fbad 	bl	800b728 <USBD_Update_HID_Custom_DESC>
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_HID_CUSTOM_DESC, ptr + 0x09, len - 0x09);
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	3309      	adds	r3, #9
 800afd2:	88ba      	ldrh	r2, [r7, #4]
 800afd4:	3a09      	subs	r2, #9
 800afd6:	4619      	mov	r1, r3
 800afd8:	4860      	ldr	r0, [pc, #384]	@ (800b15c <USBD_COMPOSITE_Mount_Class+0x1f8>)
 800afda:	f004 fde7 	bl	800fbac <memcpy>

  in_ep_track += 1;
 800afde:	7afb      	ldrb	r3, [r7, #11]
 800afe0:	3301      	adds	r3, #1
 800afe2:	72fb      	strb	r3, [r7, #11]
  out_ep_track += 1;
 800afe4:	7abb      	ldrb	r3, [r7, #10]
 800afe6:	3301      	adds	r3, #1
 800afe8:	72bb      	strb	r3, [r7, #10]
  interface_no_track += 1;
 800afea:	7a7b      	ldrb	r3, [r7, #9]
 800afec:	3301      	adds	r3, #1
 800afee:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += 1;
 800aff0:	4b58      	ldr	r3, [pc, #352]	@ (800b154 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800aff2:	781b      	ldrb	r3, [r3, #0]
 800aff4:	3301      	adds	r3, #1
 800aff6:	b2da      	uxtb	r2, r3
 800aff8:	4b56      	ldr	r3, [pc, #344]	@ (800b154 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800affa:	701a      	strb	r2, [r3, #0]
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_CDC_ACM == 1)
  ptr = USBD_CDC_ACM.GetFSConfigDescriptor(&len);
 800affc:	4b58      	ldr	r3, [pc, #352]	@ (800b160 <USBD_COMPOSITE_Mount_Class+0x1fc>)
 800affe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b000:	1d3a      	adds	r2, r7, #4
 800b002:	4610      	mov	r0, r2
 800b004:	4798      	blx	r3
 800b006:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 800b008:	7a7b      	ldrb	r3, [r7, #9]
 800b00a:	3301      	adds	r3, #1
 800b00c:	b2d8      	uxtb	r0, r3
 800b00e:	7afb      	ldrb	r3, [r7, #11]
 800b010:	3301      	adds	r3, #1
 800b012:	b2db      	uxtb	r3, r3
 800b014:	4a4f      	ldr	r2, [pc, #316]	@ (800b154 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800b016:	7812      	ldrb	r2, [r2, #0]
 800b018:	7afc      	ldrb	r4, [r7, #11]
 800b01a:	7a79      	ldrb	r1, [r7, #9]
 800b01c:	9202      	str	r2, [sp, #8]
 800b01e:	7aba      	ldrb	r2, [r7, #10]
 800b020:	9201      	str	r2, [sp, #4]
 800b022:	9300      	str	r3, [sp, #0]
 800b024:	4623      	mov	r3, r4
 800b026:	4602      	mov	r2, r0
 800b028:	68f8      	ldr	r0, [r7, #12]
 800b02a:	f7ff fd43 	bl	800aab4 <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	3309      	adds	r3, #9
 800b032:	88ba      	ldrh	r2, [r7, #4]
 800b034:	3a09      	subs	r2, #9
 800b036:	4619      	mov	r1, r3
 800b038:	484a      	ldr	r0, [pc, #296]	@ (800b164 <USBD_COMPOSITE_Mount_Class+0x200>)
 800b03a:	f004 fdb7 	bl	800fbac <memcpy>

  ptr = USBD_CDC_ACM.GetHSConfigDescriptor(&len);
 800b03e:	4b48      	ldr	r3, [pc, #288]	@ (800b160 <USBD_COMPOSITE_Mount_Class+0x1fc>)
 800b040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b042:	1d3a      	adds	r2, r7, #4
 800b044:	4610      	mov	r0, r2
 800b046:	4798      	blx	r3
 800b048:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 800b04a:	7a7b      	ldrb	r3, [r7, #9]
 800b04c:	3301      	adds	r3, #1
 800b04e:	b2d8      	uxtb	r0, r3
 800b050:	7afb      	ldrb	r3, [r7, #11]
 800b052:	3301      	adds	r3, #1
 800b054:	b2db      	uxtb	r3, r3
 800b056:	4a3f      	ldr	r2, [pc, #252]	@ (800b154 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800b058:	7812      	ldrb	r2, [r2, #0]
 800b05a:	7afc      	ldrb	r4, [r7, #11]
 800b05c:	7a79      	ldrb	r1, [r7, #9]
 800b05e:	9202      	str	r2, [sp, #8]
 800b060:	7aba      	ldrb	r2, [r7, #10]
 800b062:	9201      	str	r2, [sp, #4]
 800b064:	9300      	str	r3, [sp, #0]
 800b066:	4623      	mov	r3, r4
 800b068:	4602      	mov	r2, r0
 800b06a:	68f8      	ldr	r0, [r7, #12]
 800b06c:	f7ff fd22 	bl	800aab4 <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	3309      	adds	r3, #9
 800b074:	88ba      	ldrh	r2, [r7, #4]
 800b076:	3a09      	subs	r2, #9
 800b078:	4619      	mov	r1, r3
 800b07a:	483b      	ldr	r0, [pc, #236]	@ (800b168 <USBD_COMPOSITE_Mount_Class+0x204>)
 800b07c:	f004 fd96 	bl	800fbac <memcpy>

  in_ep_track += 2 * USBD_CDC_ACM_COUNT;
 800b080:	7afb      	ldrb	r3, [r7, #11]
 800b082:	3302      	adds	r3, #2
 800b084:	72fb      	strb	r3, [r7, #11]
  out_ep_track += 1 * USBD_CDC_ACM_COUNT;
 800b086:	7abb      	ldrb	r3, [r7, #10]
 800b088:	3301      	adds	r3, #1
 800b08a:	72bb      	strb	r3, [r7, #10]
  interface_no_track += 2 * USBD_CDC_ACM_COUNT;
 800b08c:	7a7b      	ldrb	r3, [r7, #9]
 800b08e:	3302      	adds	r3, #2
 800b090:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += USBD_CDC_ACM_COUNT;
 800b092:	4b30      	ldr	r3, [pc, #192]	@ (800b154 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800b094:	781b      	ldrb	r3, [r3, #0]
 800b096:	3301      	adds	r3, #1
 800b098:	b2da      	uxtb	r2, r3
 800b09a:	4b2e      	ldr	r3, [pc, #184]	@ (800b154 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800b09c:	701a      	strb	r2, [r3, #0]
#endif

  uint16_t CFG_SIZE = sizeof(USBD_COMPOSITE_CFG_DESC_t);
 800b09e:	236b      	movs	r3, #107	@ 0x6b
 800b0a0:	80fb      	strh	r3, [r7, #6]
  ptr = USBD_COMPOSITE_HSCfgDesc.CONFIG_DESC;
 800b0a2:	4b32      	ldr	r3, [pc, #200]	@ (800b16c <USBD_COMPOSITE_Mount_Class+0x208>)
 800b0a4:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	2209      	movs	r2, #9
 800b0aa:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	3301      	adds	r3, #1
 800b0b0:	2202      	movs	r2, #2
 800b0b2:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	3302      	adds	r3, #2
 800b0b8:	88fa      	ldrh	r2, [r7, #6]
 800b0ba:	b2d2      	uxtb	r2, r2
 800b0bc:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 800b0be:	88fb      	ldrh	r3, [r7, #6]
 800b0c0:	0a1b      	lsrs	r3, r3, #8
 800b0c2:	b29a      	uxth	r2, r3
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	3303      	adds	r3, #3
 800b0c8:	b2d2      	uxtb	r2, r2
 800b0ca:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	3304      	adds	r3, #4
 800b0d0:	7a7a      	ldrb	r2, [r7, #9]
 800b0d2:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	3305      	adds	r3, #5
 800b0d8:	2201      	movs	r2, #1
 800b0da:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	3306      	adds	r3, #6
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	3307      	adds	r3, #7
 800b0e8:	22c0      	movs	r2, #192	@ 0xc0
 800b0ea:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	3308      	adds	r3, #8
 800b0f0:	2232      	movs	r2, #50	@ 0x32
 800b0f2:	701a      	strb	r2, [r3, #0]

  ptr = USBD_COMPOSITE_FSCfgDesc.CONFIG_DESC;
 800b0f4:	4b1e      	ldr	r3, [pc, #120]	@ (800b170 <USBD_COMPOSITE_Mount_Class+0x20c>)
 800b0f6:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	2209      	movs	r2, #9
 800b0fc:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	3301      	adds	r3, #1
 800b102:	2202      	movs	r2, #2
 800b104:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	3302      	adds	r3, #2
 800b10a:	88fa      	ldrh	r2, [r7, #6]
 800b10c:	b2d2      	uxtb	r2, r2
 800b10e:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 800b110:	88fb      	ldrh	r3, [r7, #6]
 800b112:	0a1b      	lsrs	r3, r3, #8
 800b114:	b29a      	uxth	r2, r3
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	3303      	adds	r3, #3
 800b11a:	b2d2      	uxtb	r2, r2
 800b11c:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	3304      	adds	r3, #4
 800b122:	7a7a      	ldrb	r2, [r7, #9]
 800b124:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	3305      	adds	r3, #5
 800b12a:	2201      	movs	r2, #1
 800b12c:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	3306      	adds	r3, #6
 800b132:	2200      	movs	r2, #0
 800b134:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	3307      	adds	r3, #7
 800b13a:	22c0      	movs	r2, #192	@ 0xc0
 800b13c:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	3308      	adds	r3, #8
 800b142:	2232      	movs	r2, #50	@ 0x32
 800b144:	701a      	strb	r2, [r3, #0]

  (void)out_ep_track;
  (void)in_ep_track;
}
 800b146:	bf00      	nop
 800b148:	3714      	adds	r7, #20
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd90      	pop	{r4, r7, pc}
 800b14e:	bf00      	nop
 800b150:	200001f8 	.word	0x200001f8
 800b154:	200001e8 	.word	0x200001e8
 800b158:	20001535 	.word	0x20001535
 800b15c:	200015a1 	.word	0x200015a1
 800b160:	200000d8 	.word	0x200000d8
 800b164:	20001555 	.word	0x20001555
 800b168:	200015c1 	.word	0x200015c1
 800b16c:	20001598 	.word	0x20001598
 800b170:	2000152c 	.word	0x2000152c

0800b174 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b084      	sub	sp, #16
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
 800b17c:	460b      	mov	r3, r1
 800b17e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = &CUSTOM_HID_Instance;
 800b180:	4b43      	ldr	r3, [pc, #268]	@ (800b290 <USBD_CUSTOM_HID_Init+0x11c>)
 800b182:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d105      	bne.n	800b196 <USBD_CUSTOM_HID_Init+0x22>
  {
    pdev->pClassData_HID_Custom = NULL;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2200      	movs	r2, #0
 800b18e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
    return (uint8_t)USBD_EMEM;
 800b192:	2302      	movs	r3, #2
 800b194:	e077      	b.n	800b286 <USBD_CUSTOM_HID_Init+0x112>
  }

  pdev->pClassData_HID_Custom = (void *)hhid;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	68fa      	ldr	r2, [r7, #12]
 800b19a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	7c1b      	ldrb	r3, [r3, #16]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d11b      	bne.n	800b1de <USBD_CUSTOM_HID_Init+0x6a>
  {
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800b1a6:	4b3b      	ldr	r3, [pc, #236]	@ (800b294 <USBD_CUSTOM_HID_Init+0x120>)
 800b1a8:	781b      	ldrb	r3, [r3, #0]
 800b1aa:	f003 020f 	and.w	r2, r3, #15
 800b1ae:	6879      	ldr	r1, [r7, #4]
 800b1b0:	4613      	mov	r3, r2
 800b1b2:	009b      	lsls	r3, r3, #2
 800b1b4:	4413      	add	r3, r2
 800b1b6:	009b      	lsls	r3, r3, #2
 800b1b8:	440b      	add	r3, r1
 800b1ba:	3326      	adds	r3, #38	@ 0x26
 800b1bc:	2205      	movs	r2, #5
 800b1be:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800b1c0:	4b35      	ldr	r3, [pc, #212]	@ (800b298 <USBD_CUSTOM_HID_Init+0x124>)
 800b1c2:	781b      	ldrb	r3, [r3, #0]
 800b1c4:	f003 020f 	and.w	r2, r3, #15
 800b1c8:	6879      	ldr	r1, [r7, #4]
 800b1ca:	4613      	mov	r3, r2
 800b1cc:	009b      	lsls	r3, r3, #2
 800b1ce:	4413      	add	r3, r2
 800b1d0:	009b      	lsls	r3, r3, #2
 800b1d2:	440b      	add	r3, r1
 800b1d4:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800b1d8:	2205      	movs	r2, #5
 800b1da:	801a      	strh	r2, [r3, #0]
 800b1dc:	e01a      	b.n	800b214 <USBD_CUSTOM_HID_Init+0xa0>
  }
  else /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800b1de:	4b2d      	ldr	r3, [pc, #180]	@ (800b294 <USBD_CUSTOM_HID_Init+0x120>)
 800b1e0:	781b      	ldrb	r3, [r3, #0]
 800b1e2:	f003 020f 	and.w	r2, r3, #15
 800b1e6:	6879      	ldr	r1, [r7, #4]
 800b1e8:	4613      	mov	r3, r2
 800b1ea:	009b      	lsls	r3, r3, #2
 800b1ec:	4413      	add	r3, r2
 800b1ee:	009b      	lsls	r3, r3, #2
 800b1f0:	440b      	add	r3, r1
 800b1f2:	3326      	adds	r3, #38	@ 0x26
 800b1f4:	2205      	movs	r2, #5
 800b1f6:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800b1f8:	4b27      	ldr	r3, [pc, #156]	@ (800b298 <USBD_CUSTOM_HID_Init+0x124>)
 800b1fa:	781b      	ldrb	r3, [r3, #0]
 800b1fc:	f003 020f 	and.w	r2, r3, #15
 800b200:	6879      	ldr	r1, [r7, #4]
 800b202:	4613      	mov	r3, r2
 800b204:	009b      	lsls	r3, r3, #2
 800b206:	4413      	add	r3, r2
 800b208:	009b      	lsls	r3, r3, #2
 800b20a:	440b      	add	r3, r1
 800b20c:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800b210:	2205      	movs	r2, #5
 800b212:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_IN_EP, USBD_EP_TYPE_INTR,
 800b214:	4b1f      	ldr	r3, [pc, #124]	@ (800b294 <USBD_CUSTOM_HID_Init+0x120>)
 800b216:	7819      	ldrb	r1, [r3, #0]
 800b218:	2302      	movs	r3, #2
 800b21a:	2203      	movs	r2, #3
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	f001 fdd6 	bl	800cdce <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].is_used = 1U;
 800b222:	4b1c      	ldr	r3, [pc, #112]	@ (800b294 <USBD_CUSTOM_HID_Init+0x120>)
 800b224:	781b      	ldrb	r3, [r3, #0]
 800b226:	f003 020f 	and.w	r2, r3, #15
 800b22a:	6879      	ldr	r1, [r7, #4]
 800b22c:	4613      	mov	r3, r2
 800b22e:	009b      	lsls	r3, r3, #2
 800b230:	4413      	add	r3, r2
 800b232:	009b      	lsls	r3, r3, #2
 800b234:	440b      	add	r3, r1
 800b236:	3324      	adds	r3, #36	@ 0x24
 800b238:	2201      	movs	r2, #1
 800b23a:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_OUT_EP, USBD_EP_TYPE_INTR,
 800b23c:	4b16      	ldr	r3, [pc, #88]	@ (800b298 <USBD_CUSTOM_HID_Init+0x124>)
 800b23e:	7819      	ldrb	r1, [r3, #0]
 800b240:	2302      	movs	r3, #2
 800b242:	2203      	movs	r2, #3
 800b244:	6878      	ldr	r0, [r7, #4]
 800b246:	f001 fdc2 	bl	800cdce <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].is_used = 1U;
 800b24a:	4b13      	ldr	r3, [pc, #76]	@ (800b298 <USBD_CUSTOM_HID_Init+0x124>)
 800b24c:	781b      	ldrb	r3, [r3, #0]
 800b24e:	f003 020f 	and.w	r2, r3, #15
 800b252:	6879      	ldr	r1, [r7, #4]
 800b254:	4613      	mov	r3, r2
 800b256:	009b      	lsls	r3, r3, #2
 800b258:	4413      	add	r3, r2
 800b25a:	009b      	lsls	r3, r3, #2
 800b25c:	440b      	add	r3, r1
 800b25e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b262:	2201      	movs	r2, #1
 800b264:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	2200      	movs	r2, #0
 800b26a:	751a      	strb	r2, [r3, #20]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->Init();
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800b272:	685b      	ldr	r3, [r3, #4]
 800b274:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_OUT_EP, hhid->Report_buf,
 800b276:	4b08      	ldr	r3, [pc, #32]	@ (800b298 <USBD_CUSTOM_HID_Init+0x124>)
 800b278:	7819      	ldrb	r1, [r3, #0]
 800b27a:	68fa      	ldr	r2, [r7, #12]
 800b27c:	2302      	movs	r3, #2
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f001 fe94 	bl	800cfac <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 800b284:	2300      	movs	r3, #0
}
 800b286:	4618      	mov	r0, r3
 800b288:	3710      	adds	r7, #16
 800b28a:	46bd      	mov	sp, r7
 800b28c:	bd80      	pop	{r7, pc}
 800b28e:	bf00      	nop
 800b290:	20001648 	.word	0x20001648
 800b294:	200001f6 	.word	0x200001f6
 800b298:	200001f7 	.word	0x200001f7

0800b29c <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b082      	sub	sp, #8
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
 800b2a4:	460b      	mov	r3, r1
 800b2a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_IN_EP);
 800b2a8:	4b2a      	ldr	r3, [pc, #168]	@ (800b354 <USBD_CUSTOM_HID_DeInit+0xb8>)
 800b2aa:	781b      	ldrb	r3, [r3, #0]
 800b2ac:	4619      	mov	r1, r3
 800b2ae:	6878      	ldr	r0, [r7, #4]
 800b2b0:	f001 fdb3 	bl	800ce1a <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].is_used = 0U;
 800b2b4:	4b27      	ldr	r3, [pc, #156]	@ (800b354 <USBD_CUSTOM_HID_DeInit+0xb8>)
 800b2b6:	781b      	ldrb	r3, [r3, #0]
 800b2b8:	f003 020f 	and.w	r2, r3, #15
 800b2bc:	6879      	ldr	r1, [r7, #4]
 800b2be:	4613      	mov	r3, r2
 800b2c0:	009b      	lsls	r3, r3, #2
 800b2c2:	4413      	add	r3, r2
 800b2c4:	009b      	lsls	r3, r3, #2
 800b2c6:	440b      	add	r3, r1
 800b2c8:	3324      	adds	r3, #36	@ 0x24
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = 0U;
 800b2ce:	4b21      	ldr	r3, [pc, #132]	@ (800b354 <USBD_CUSTOM_HID_DeInit+0xb8>)
 800b2d0:	781b      	ldrb	r3, [r3, #0]
 800b2d2:	f003 020f 	and.w	r2, r3, #15
 800b2d6:	6879      	ldr	r1, [r7, #4]
 800b2d8:	4613      	mov	r3, r2
 800b2da:	009b      	lsls	r3, r3, #2
 800b2dc:	4413      	add	r3, r2
 800b2de:	009b      	lsls	r3, r3, #2
 800b2e0:	440b      	add	r3, r1
 800b2e2:	3326      	adds	r3, #38	@ 0x26
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_OUT_EP);
 800b2e8:	4b1b      	ldr	r3, [pc, #108]	@ (800b358 <USBD_CUSTOM_HID_DeInit+0xbc>)
 800b2ea:	781b      	ldrb	r3, [r3, #0]
 800b2ec:	4619      	mov	r1, r3
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f001 fd93 	bl	800ce1a <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].is_used = 0U;
 800b2f4:	4b18      	ldr	r3, [pc, #96]	@ (800b358 <USBD_CUSTOM_HID_DeInit+0xbc>)
 800b2f6:	781b      	ldrb	r3, [r3, #0]
 800b2f8:	f003 020f 	and.w	r2, r3, #15
 800b2fc:	6879      	ldr	r1, [r7, #4]
 800b2fe:	4613      	mov	r3, r2
 800b300:	009b      	lsls	r3, r3, #2
 800b302:	4413      	add	r3, r2
 800b304:	009b      	lsls	r3, r3, #2
 800b306:	440b      	add	r3, r1
 800b308:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b30c:	2200      	movs	r2, #0
 800b30e:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = 0U;
 800b310:	4b11      	ldr	r3, [pc, #68]	@ (800b358 <USBD_CUSTOM_HID_DeInit+0xbc>)
 800b312:	781b      	ldrb	r3, [r3, #0]
 800b314:	f003 020f 	and.w	r2, r3, #15
 800b318:	6879      	ldr	r1, [r7, #4]
 800b31a:	4613      	mov	r3, r2
 800b31c:	009b      	lsls	r3, r3, #2
 800b31e:	4413      	add	r3, r2
 800b320:	009b      	lsls	r3, r3, #2
 800b322:	440b      	add	r3, r1
 800b324:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800b328:	2200      	movs	r2, #0
 800b32a:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassData_HID_Custom != NULL)
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b332:	2b00      	cmp	r3, #0
 800b334:	d008      	beq.n	800b348 <USBD_CUSTOM_HID_DeInit+0xac>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->DeInit();
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800b33c:	689b      	ldr	r3, [r3, #8]
 800b33e:	4798      	blx	r3
#if (0)
    USBD_free(pdev->pClassData_HID_Custom);
#endif
    pdev->pClassData_HID_Custom = NULL;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2200      	movs	r2, #0
 800b344:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
  }

  return (uint8_t)USBD_OK;
 800b348:	2300      	movs	r3, #0
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	3708      	adds	r7, #8
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}
 800b352:	bf00      	nop
 800b354:	200001f6 	.word	0x200001f6
 800b358:	200001f7 	.word	0x200001f7

0800b35c <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b088      	sub	sp, #32
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
 800b364:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b36c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800b36e:	2300      	movs	r3, #0
 800b370:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 800b372:	2300      	movs	r3, #0
 800b374:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800b376:	2300      	movs	r3, #0
 800b378:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800b37a:	2300      	movs	r3, #0
 800b37c:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 800b37e:	693b      	ldr	r3, [r7, #16]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d101      	bne.n	800b388 <USBD_CUSTOM_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800b384:	2303      	movs	r3, #3
 800b386:	e0ed      	b.n	800b564 <USBD_CUSTOM_HID_Setup+0x208>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	781b      	ldrb	r3, [r3, #0]
 800b38c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b390:	2b00      	cmp	r3, #0
 800b392:	d052      	beq.n	800b43a <USBD_CUSTOM_HID_Setup+0xde>
 800b394:	2b20      	cmp	r3, #32
 800b396:	f040 80dd 	bne.w	800b554 <USBD_CUSTOM_HID_Setup+0x1f8>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	785b      	ldrb	r3, [r3, #1]
 800b39e:	3b02      	subs	r3, #2
 800b3a0:	2b09      	cmp	r3, #9
 800b3a2:	d842      	bhi.n	800b42a <USBD_CUSTOM_HID_Setup+0xce>
 800b3a4:	a201      	add	r2, pc, #4	@ (adr r2, 800b3ac <USBD_CUSTOM_HID_Setup+0x50>)
 800b3a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3aa:	bf00      	nop
 800b3ac:	0800b405 	.word	0x0800b405
 800b3b0:	0800b3e3 	.word	0x0800b3e3
 800b3b4:	0800b42b 	.word	0x0800b42b
 800b3b8:	0800b42b 	.word	0x0800b42b
 800b3bc:	0800b42b 	.word	0x0800b42b
 800b3c0:	0800b42b 	.word	0x0800b42b
 800b3c4:	0800b42b 	.word	0x0800b42b
 800b3c8:	0800b415 	.word	0x0800b415
 800b3cc:	0800b3f3 	.word	0x0800b3f3
 800b3d0:	0800b3d5 	.word	0x0800b3d5
    {
    case CUSTOM_HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	885b      	ldrh	r3, [r3, #2]
 800b3d8:	b2db      	uxtb	r3, r3
 800b3da:	461a      	mov	r2, r3
 800b3dc:	693b      	ldr	r3, [r7, #16]
 800b3de:	605a      	str	r2, [r3, #4]
      break;
 800b3e0:	e02a      	b.n	800b438 <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800b3e2:	693b      	ldr	r3, [r7, #16]
 800b3e4:	3304      	adds	r3, #4
 800b3e6:	2201      	movs	r2, #1
 800b3e8:	4619      	mov	r1, r3
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f001 fadd 	bl	800c9aa <USBD_CtlSendData>
      break;
 800b3f0:	e022      	b.n	800b438 <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	885b      	ldrh	r3, [r3, #2]
 800b3f6:	0a1b      	lsrs	r3, r3, #8
 800b3f8:	b29b      	uxth	r3, r3
 800b3fa:	b2db      	uxtb	r3, r3
 800b3fc:	461a      	mov	r2, r3
 800b3fe:	693b      	ldr	r3, [r7, #16]
 800b400:	609a      	str	r2, [r3, #8]
      break;
 800b402:	e019      	b.n	800b438 <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800b404:	693b      	ldr	r3, [r7, #16]
 800b406:	3308      	adds	r3, #8
 800b408:	2201      	movs	r2, #1
 800b40a:	4619      	mov	r1, r3
 800b40c:	6878      	ldr	r0, [r7, #4]
 800b40e:	f001 facc 	bl	800c9aa <USBD_CtlSendData>
      break;
 800b412:	e011      	b.n	800b438 <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_SET_REPORT:
      hhid->IsReportAvailable = 1U;
 800b414:	693b      	ldr	r3, [r7, #16]
 800b416:	2201      	movs	r2, #1
 800b418:	611a      	str	r2, [r3, #16]
      (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 800b41a:	6939      	ldr	r1, [r7, #16]
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	88db      	ldrh	r3, [r3, #6]
 800b420:	461a      	mov	r2, r3
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f001 faed 	bl	800ca02 <USBD_CtlPrepareRx>
      break;
 800b428:	e006      	b.n	800b438 <USBD_CUSTOM_HID_Setup+0xdc>

    default:
      USBD_CtlError(pdev, req);
 800b42a:	6839      	ldr	r1, [r7, #0]
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	f001 fa4b 	bl	800c8c8 <USBD_CtlError>
      ret = USBD_FAIL;
 800b432:	2303      	movs	r3, #3
 800b434:	75fb      	strb	r3, [r7, #23]
      break;
 800b436:	bf00      	nop
    }
    break;
 800b438:	e093      	b.n	800b562 <USBD_CUSTOM_HID_Setup+0x206>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	785b      	ldrb	r3, [r3, #1]
 800b43e:	2b0b      	cmp	r3, #11
 800b440:	d87f      	bhi.n	800b542 <USBD_CUSTOM_HID_Setup+0x1e6>
 800b442:	a201      	add	r2, pc, #4	@ (adr r2, 800b448 <USBD_CUSTOM_HID_Setup+0xec>)
 800b444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b448:	0800b479 	.word	0x0800b479
 800b44c:	0800b551 	.word	0x0800b551
 800b450:	0800b543 	.word	0x0800b543
 800b454:	0800b543 	.word	0x0800b543
 800b458:	0800b543 	.word	0x0800b543
 800b45c:	0800b543 	.word	0x0800b543
 800b460:	0800b4a3 	.word	0x0800b4a3
 800b464:	0800b543 	.word	0x0800b543
 800b468:	0800b543 	.word	0x0800b543
 800b46c:	0800b543 	.word	0x0800b543
 800b470:	0800b4f1 	.word	0x0800b4f1
 800b474:	0800b51b 	.word	0x0800b51b
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b47e:	b2db      	uxtb	r3, r3
 800b480:	2b03      	cmp	r3, #3
 800b482:	d107      	bne.n	800b494 <USBD_CUSTOM_HID_Setup+0x138>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b484:	f107 030e 	add.w	r3, r7, #14
 800b488:	2202      	movs	r2, #2
 800b48a:	4619      	mov	r1, r3
 800b48c:	6878      	ldr	r0, [r7, #4]
 800b48e:	f001 fa8c 	bl	800c9aa <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b492:	e05e      	b.n	800b552 <USBD_CUSTOM_HID_Setup+0x1f6>
        USBD_CtlError(pdev, req);
 800b494:	6839      	ldr	r1, [r7, #0]
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	f001 fa16 	bl	800c8c8 <USBD_CtlError>
        ret = USBD_FAIL;
 800b49c:	2303      	movs	r3, #3
 800b49e:	75fb      	strb	r3, [r7, #23]
      break;
 800b4a0:	e057      	b.n	800b552 <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	885b      	ldrh	r3, [r3, #2]
 800b4a6:	0a1b      	lsrs	r3, r3, #8
 800b4a8:	b29b      	uxth	r3, r3
 800b4aa:	2b22      	cmp	r3, #34	@ 0x22
 800b4ac:	d10b      	bne.n	800b4c6 <USBD_CUSTOM_HID_Setup+0x16a>
      {
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	88db      	ldrh	r3, [r3, #6]
 800b4b2:	2b46      	cmp	r3, #70	@ 0x46
 800b4b4:	bf28      	it	cs
 800b4b6:	2346      	movcs	r3, #70	@ 0x46
 800b4b8:	83fb      	strh	r3, [r7, #30]
        pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->pReport;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	61bb      	str	r3, [r7, #24]
 800b4c4:	e00d      	b.n	800b4e2 <USBD_CUSTOM_HID_Setup+0x186>
      }
      else
      {
        if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	885b      	ldrh	r3, [r3, #2]
 800b4ca:	0a1b      	lsrs	r3, r3, #8
 800b4cc:	b29b      	uxth	r3, r3
 800b4ce:	2b21      	cmp	r3, #33	@ 0x21
 800b4d0:	d107      	bne.n	800b4e2 <USBD_CUSTOM_HID_Setup+0x186>
        {
          pbuf = USBD_CUSTOM_HID_Desc;
 800b4d2:	4b26      	ldr	r3, [pc, #152]	@ (800b56c <USBD_CUSTOM_HID_Setup+0x210>)
 800b4d4:	61bb      	str	r3, [r7, #24]
          len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	88db      	ldrh	r3, [r3, #6]
 800b4da:	2b09      	cmp	r3, #9
 800b4dc:	bf28      	it	cs
 800b4de:	2309      	movcs	r3, #9
 800b4e0:	83fb      	strh	r3, [r7, #30]
        }
      }

      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b4e2:	8bfb      	ldrh	r3, [r7, #30]
 800b4e4:	461a      	mov	r2, r3
 800b4e6:	69b9      	ldr	r1, [r7, #24]
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f001 fa5e 	bl	800c9aa <USBD_CtlSendData>
      break;
 800b4ee:	e030      	b.n	800b552 <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b4f6:	b2db      	uxtb	r3, r3
 800b4f8:	2b03      	cmp	r3, #3
 800b4fa:	d107      	bne.n	800b50c <USBD_CUSTOM_HID_Setup+0x1b0>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800b4fc:	693b      	ldr	r3, [r7, #16]
 800b4fe:	330c      	adds	r3, #12
 800b500:	2201      	movs	r2, #1
 800b502:	4619      	mov	r1, r3
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f001 fa50 	bl	800c9aa <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b50a:	e022      	b.n	800b552 <USBD_CUSTOM_HID_Setup+0x1f6>
        USBD_CtlError(pdev, req);
 800b50c:	6839      	ldr	r1, [r7, #0]
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f001 f9da 	bl	800c8c8 <USBD_CtlError>
        ret = USBD_FAIL;
 800b514:	2303      	movs	r3, #3
 800b516:	75fb      	strb	r3, [r7, #23]
      break;
 800b518:	e01b      	b.n	800b552 <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b520:	b2db      	uxtb	r3, r3
 800b522:	2b03      	cmp	r3, #3
 800b524:	d106      	bne.n	800b534 <USBD_CUSTOM_HID_Setup+0x1d8>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	885b      	ldrh	r3, [r3, #2]
 800b52a:	b2db      	uxtb	r3, r3
 800b52c:	461a      	mov	r2, r3
 800b52e:	693b      	ldr	r3, [r7, #16]
 800b530:	60da      	str	r2, [r3, #12]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b532:	e00e      	b.n	800b552 <USBD_CUSTOM_HID_Setup+0x1f6>
        USBD_CtlError(pdev, req);
 800b534:	6839      	ldr	r1, [r7, #0]
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f001 f9c6 	bl	800c8c8 <USBD_CtlError>
        ret = USBD_FAIL;
 800b53c:	2303      	movs	r3, #3
 800b53e:	75fb      	strb	r3, [r7, #23]
      break;
 800b540:	e007      	b.n	800b552 <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800b542:	6839      	ldr	r1, [r7, #0]
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f001 f9bf 	bl	800c8c8 <USBD_CtlError>
      ret = USBD_FAIL;
 800b54a:	2303      	movs	r3, #3
 800b54c:	75fb      	strb	r3, [r7, #23]
      break;
 800b54e:	e000      	b.n	800b552 <USBD_CUSTOM_HID_Setup+0x1f6>
      break;
 800b550:	bf00      	nop
    }
    break;
 800b552:	e006      	b.n	800b562 <USBD_CUSTOM_HID_Setup+0x206>

  default:
    USBD_CtlError(pdev, req);
 800b554:	6839      	ldr	r1, [r7, #0]
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f001 f9b6 	bl	800c8c8 <USBD_CtlError>
    ret = USBD_FAIL;
 800b55c:	2303      	movs	r3, #3
 800b55e:	75fb      	strb	r3, [r7, #23]
    break;
 800b560:	bf00      	nop
  }
  return (uint8_t)ret;
 800b562:	7dfb      	ldrb	r3, [r7, #23]
}
 800b564:	4618      	mov	r0, r3
 800b566:	3720      	adds	r7, #32
 800b568:	46bd      	mov	sp, r7
 800b56a:	bd80      	pop	{r7, pc}
 800b56c:	200002b8 	.word	0x200002b8

0800b570 <USBD_CUSTOM_HID_SendReport>:
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b086      	sub	sp, #24
 800b574:	af00      	add	r7, sp, #0
 800b576:	60f8      	str	r0, [r7, #12]
 800b578:	60b9      	str	r1, [r7, #8]
 800b57a:	4613      	mov	r3, r2
 800b57c:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData_HID_Custom == NULL)
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b584:	2b00      	cmp	r3, #0
 800b586:	d101      	bne.n	800b58c <USBD_CUSTOM_HID_SendReport+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800b588:	2303      	movs	r3, #3
 800b58a:	e01b      	b.n	800b5c4 <USBD_CUSTOM_HID_SendReport+0x54>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b592:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b59a:	b2db      	uxtb	r3, r3
 800b59c:	2b03      	cmp	r3, #3
 800b59e:	d110      	bne.n	800b5c2 <USBD_CUSTOM_HID_SendReport+0x52>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 800b5a0:	697b      	ldr	r3, [r7, #20]
 800b5a2:	7d1b      	ldrb	r3, [r3, #20]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d10a      	bne.n	800b5be <USBD_CUSTOM_HID_SendReport+0x4e>
    {
      hhid->state = CUSTOM_HID_BUSY;
 800b5a8:	697b      	ldr	r3, [r7, #20]
 800b5aa:	2201      	movs	r2, #1
 800b5ac:	751a      	strb	r2, [r3, #20]
      (void)USBD_LL_Transmit(pdev, CUSTOM_HID_IN_EP, report, len);
 800b5ae:	4b07      	ldr	r3, [pc, #28]	@ (800b5cc <USBD_CUSTOM_HID_SendReport+0x5c>)
 800b5b0:	7819      	ldrb	r1, [r3, #0]
 800b5b2:	88fb      	ldrh	r3, [r7, #6]
 800b5b4:	68ba      	ldr	r2, [r7, #8]
 800b5b6:	68f8      	ldr	r0, [r7, #12]
 800b5b8:	f001 fcd7 	bl	800cf6a <USBD_LL_Transmit>
 800b5bc:	e001      	b.n	800b5c2 <USBD_CUSTOM_HID_SendReport+0x52>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 800b5be:	2301      	movs	r3, #1
 800b5c0:	e000      	b.n	800b5c4 <USBD_CUSTOM_HID_SendReport+0x54>
    }
  }
  return (uint8_t)USBD_OK;
 800b5c2:	2300      	movs	r3, #0
}
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	3718      	adds	r7, #24
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bd80      	pop	{r7, pc}
 800b5cc:	200001f6 	.word	0x200001f6

0800b5d0 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	b083      	sub	sp, #12
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2229      	movs	r2, #41	@ 0x29
 800b5dc:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgFSDesc;
 800b5de:	4b03      	ldr	r3, [pc, #12]	@ (800b5ec <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	370c      	adds	r7, #12
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ea:	4770      	bx	lr
 800b5ec:	20000234 	.word	0x20000234

0800b5f0 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 800b5f0:	b480      	push	{r7}
 800b5f2:	b083      	sub	sp, #12
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2229      	movs	r2, #41	@ 0x29
 800b5fc:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgHSDesc;
 800b5fe:	4b03      	ldr	r3, [pc, #12]	@ (800b60c <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 800b600:	4618      	mov	r0, r3
 800b602:	370c      	adds	r7, #12
 800b604:	46bd      	mov	sp, r7
 800b606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60a:	4770      	bx	lr
 800b60c:	20000260 	.word	0x20000260

0800b610 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b610:	b480      	push	{r7}
 800b612:	b083      	sub	sp, #12
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2229      	movs	r2, #41	@ 0x29
 800b61c:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 800b61e:	4b03      	ldr	r3, [pc, #12]	@ (800b62c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800b620:	4618      	mov	r0, r3
 800b622:	370c      	adds	r7, #12
 800b624:	46bd      	mov	sp, r7
 800b626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62a:	4770      	bx	lr
 800b62c:	2000028c 	.word	0x2000028c

0800b630 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b630:	b480      	push	{r7}
 800b632:	b083      	sub	sp, #12
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
 800b638:	460b      	mov	r3, r1
 800b63a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom)->state = CUSTOM_HID_IDLE;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b642:	2200      	movs	r2, #0
 800b644:	751a      	strb	r2, [r3, #20]

  return (uint8_t)USBD_OK;
 800b646:	2300      	movs	r3, #0
}
 800b648:	4618      	mov	r0, r3
 800b64a:	370c      	adds	r7, #12
 800b64c:	46bd      	mov	sp, r7
 800b64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b652:	4770      	bx	lr

0800b654 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b084      	sub	sp, #16
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
 800b65c:	460b      	mov	r3, r1
 800b65e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData_HID_Custom == NULL)
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b666:	2b00      	cmp	r3, #0
 800b668:	d101      	bne.n	800b66e <USBD_CUSTOM_HID_DataOut+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800b66a:	2303      	movs	r3, #3
 800b66c:	e00e      	b.n	800b68c <USBD_CUSTOM_HID_DataOut+0x38>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b674:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->OutEvent(hhid->Report_buf[0], hhid->Report_buf[1]);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800b67c:	68db      	ldr	r3, [r3, #12]
 800b67e:	68fa      	ldr	r2, [r7, #12]
 800b680:	7810      	ldrb	r0, [r2, #0]
 800b682:	68fa      	ldr	r2, [r7, #12]
 800b684:	7852      	ldrb	r2, [r2, #1]
 800b686:	4611      	mov	r1, r2
 800b688:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b68a:	2300      	movs	r3, #0
}
 800b68c:	4618      	mov	r0, r3
 800b68e:	3710      	adds	r7, #16
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}

0800b694 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b084      	sub	sp, #16
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b6a2:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d101      	bne.n	800b6ae <USBD_CUSTOM_HID_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800b6aa:	2303      	movs	r3, #3
 800b6ac:	e011      	b.n	800b6d2 <USBD_CUSTOM_HID_EP0_RxReady+0x3e>
  }

  if (hhid->IsReportAvailable == 1U)
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	691b      	ldr	r3, [r3, #16]
 800b6b2:	2b01      	cmp	r3, #1
 800b6b4:	d10c      	bne.n	800b6d0 <USBD_CUSTOM_HID_EP0_RxReady+0x3c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->OutEvent(hhid->Report_buf[0], hhid->Report_buf[1]);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800b6bc:	68db      	ldr	r3, [r3, #12]
 800b6be:	68fa      	ldr	r2, [r7, #12]
 800b6c0:	7810      	ldrb	r0, [r2, #0]
 800b6c2:	68fa      	ldr	r2, [r7, #12]
 800b6c4:	7852      	ldrb	r2, [r2, #1]
 800b6c6:	4611      	mov	r1, r2
 800b6c8:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	611a      	str	r2, [r3, #16]
  }

  return (uint8_t)USBD_OK;
 800b6d0:	2300      	movs	r3, #0
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	3710      	adds	r7, #16
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}
	...

0800b6dc <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800b6dc:	b480      	push	{r7}
 800b6de:	b083      	sub	sp, #12
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	220a      	movs	r2, #10
 800b6e8:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800b6ea:	4b03      	ldr	r3, [pc, #12]	@ (800b6f8 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	370c      	adds	r7, #12
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f6:	4770      	bx	lr
 800b6f8:	200002c4 	.word	0x200002c4

0800b6fc <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800b6fc:	b480      	push	{r7}
 800b6fe:	b083      	sub	sp, #12
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
 800b704:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d101      	bne.n	800b710 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b70c:	2303      	movs	r3, #3
 800b70e:	e004      	b.n	800b71a <USBD_CUSTOM_HID_RegisterInterface+0x1e>
  }

  pdev->pUserData_HID_Custom = fops;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	683a      	ldr	r2, [r7, #0]
 800b714:	f8c3 22dc 	str.w	r2, [r3, #732]	@ 0x2dc

  return (uint8_t)USBD_OK;
 800b718:	2300      	movs	r3, #0
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	370c      	adds	r7, #12
 800b71e:	46bd      	mov	sp, r7
 800b720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b724:	4770      	bx	lr
	...

0800b728 <USBD_Update_HID_Custom_DESC>:

void USBD_Update_HID_Custom_DESC(uint8_t *desc, uint8_t itf_no, uint8_t in_ep, uint8_t out_ep, uint8_t str_idx)
{
 800b728:	b480      	push	{r7}
 800b72a:	b083      	sub	sp, #12
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
 800b730:	4608      	mov	r0, r1
 800b732:	4611      	mov	r1, r2
 800b734:	461a      	mov	r2, r3
 800b736:	4603      	mov	r3, r0
 800b738:	70fb      	strb	r3, [r7, #3]
 800b73a:	460b      	mov	r3, r1
 800b73c:	70bb      	strb	r3, [r7, #2]
 800b73e:	4613      	mov	r3, r2
 800b740:	707b      	strb	r3, [r7, #1]
  desc[11] = itf_no;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	330b      	adds	r3, #11
 800b746:	78fa      	ldrb	r2, [r7, #3]
 800b748:	701a      	strb	r2, [r3, #0]
  desc[17] = str_idx;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	3311      	adds	r3, #17
 800b74e:	7c3a      	ldrb	r2, [r7, #16]
 800b750:	701a      	strb	r2, [r3, #0]
  desc[29] = in_ep;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	331d      	adds	r3, #29
 800b756:	78ba      	ldrb	r2, [r7, #2]
 800b758:	701a      	strb	r2, [r3, #0]
  desc[36] = out_ep;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	3324      	adds	r3, #36	@ 0x24
 800b75e:	787a      	ldrb	r2, [r7, #1]
 800b760:	701a      	strb	r2, [r3, #0]

  CUSTOM_HID_IN_EP = in_ep;
 800b762:	4a09      	ldr	r2, [pc, #36]	@ (800b788 <USBD_Update_HID_Custom_DESC+0x60>)
 800b764:	78bb      	ldrb	r3, [r7, #2]
 800b766:	7013      	strb	r3, [r2, #0]
  CUSTOM_HID_OUT_EP = out_ep;
 800b768:	4a08      	ldr	r2, [pc, #32]	@ (800b78c <USBD_Update_HID_Custom_DESC+0x64>)
 800b76a:	787b      	ldrb	r3, [r7, #1]
 800b76c:	7013      	strb	r3, [r2, #0]
  CUSTOM_HID_ITF_NBR = itf_no;
 800b76e:	4a08      	ldr	r2, [pc, #32]	@ (800b790 <USBD_Update_HID_Custom_DESC+0x68>)
 800b770:	78fb      	ldrb	r3, [r7, #3]
 800b772:	7013      	strb	r3, [r2, #0]
  CUSTOM_HID_STR_DESC_IDX = str_idx;
 800b774:	4a07      	ldr	r2, [pc, #28]	@ (800b794 <USBD_Update_HID_Custom_DESC+0x6c>)
 800b776:	7c3b      	ldrb	r3, [r7, #16]
 800b778:	7013      	strb	r3, [r2, #0]
}
 800b77a:	bf00      	nop
 800b77c:	370c      	adds	r7, #12
 800b77e:	46bd      	mov	sp, r7
 800b780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b784:	4770      	bx	lr
 800b786:	bf00      	nop
 800b788:	200001f6 	.word	0x200001f6
 800b78c:	200001f7 	.word	0x200001f7
 800b790:	20001644 	.word	0x20001644
 800b794:	20001645 	.word	0x20001645

0800b798 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b086      	sub	sp, #24
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	60f8      	str	r0, [r7, #12]
 800b7a0:	60b9      	str	r1, [r7, #8]
 800b7a2:	4613      	mov	r3, r2
 800b7a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d101      	bne.n	800b7b0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b7ac:	2303      	movs	r3, #3
 800b7ae:	e01b      	b.n	800b7e8 <USBD_Init+0x50>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pConfDesc = NULL;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d003      	beq.n	800b7ce <USBD_Init+0x36>
  {
    pdev->pDesc = pdesc;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	68ba      	ldr	r2, [r7, #8]
 800b7ca:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	2201      	movs	r2, #1
 800b7d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	79fa      	ldrb	r2, [r7, #7]
 800b7da:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b7dc:	68f8      	ldr	r0, [r7, #12]
 800b7de:	f001 fa7d 	bl	800ccdc <USBD_LL_Init>
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b7e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	3718      	adds	r7, #24
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}

0800b7f0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b084      	sub	sp, #16
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
 800b7f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d101      	bne.n	800b808 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b804:	2303      	movs	r3, #3
 800b806:	e02d      	b.n	800b864 <USBD_RegisterClass+0x74>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	683a      	ldr	r2, [r7, #0]
 800b80c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  /* Get Device Configuration Descriptor */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	7c1b      	ldrb	r3, [r3, #16]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d112      	bne.n	800b83e <USBD_RegisterClass+0x4e>
  {
	  if (pdev->pClass->GetHSConfigDescriptor != NULL)
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b81e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b820:	2b00      	cmp	r3, #0
 800b822:	d01e      	beq.n	800b862 <USBD_RegisterClass+0x72>
	  {
		  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b82a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b82c:	f107 020e 	add.w	r2, r7, #14
 800b830:	4610      	mov	r0, r2
 800b832:	4798      	blx	r3
 800b834:	4602      	mov	r2, r0
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318
 800b83c:	e011      	b.n	800b862 <USBD_RegisterClass+0x72>
	  }
  }
  else if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b846:	2b00      	cmp	r3, #0
 800b848:	d00b      	beq.n	800b862 <USBD_RegisterClass+0x72>
  {
	  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b852:	f107 020e 	add.w	r2, r7, #14
 800b856:	4610      	mov	r0, r2
 800b858:	4798      	blx	r3
 800b85a:	4602      	mov	r2, r0
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318
  }

  return USBD_OK;
 800b862:	2300      	movs	r3, #0
}
 800b864:	4618      	mov	r0, r3
 800b866:	3710      	adds	r7, #16
 800b868:	46bd      	mov	sp, r7
 800b86a:	bd80      	pop	{r7, pc}

0800b86c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b082      	sub	sp, #8
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	f001 fa8f 	bl	800cd98 <USBD_LL_Start>
 800b87a:	4603      	mov	r3, r0
}
 800b87c:	4618      	mov	r0, r3
 800b87e:	3708      	adds	r7, #8
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}

0800b884 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b884:	b480      	push	{r7}
 800b886:	b083      	sub	sp, #12
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b88c:	2300      	movs	r3, #0
}
 800b88e:	4618      	mov	r0, r3
 800b890:	370c      	adds	r7, #12
 800b892:	46bd      	mov	sp, r7
 800b894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b898:	4770      	bx	lr

0800b89a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b89a:	b580      	push	{r7, lr}
 800b89c:	b084      	sub	sp, #16
 800b89e:	af00      	add	r7, sp, #0
 800b8a0:	6078      	str	r0, [r7, #4]
 800b8a2:	460b      	mov	r3, r1
 800b8a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b8a6:	2303      	movs	r3, #3
 800b8a8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d009      	beq.n	800b8c8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	78fa      	ldrb	r2, [r7, #3]
 800b8be:	4611      	mov	r1, r2
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	4798      	blx	r3
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b8c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	3710      	adds	r7, #16
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}

0800b8d2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b8d2:	b580      	push	{r7, lr}
 800b8d4:	b082      	sub	sp, #8
 800b8d6:	af00      	add	r7, sp, #0
 800b8d8:	6078      	str	r0, [r7, #4]
 800b8da:	460b      	mov	r3, r1
 800b8dc:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d007      	beq.n	800b8f8 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8ee:	685b      	ldr	r3, [r3, #4]
 800b8f0:	78fa      	ldrb	r2, [r7, #3]
 800b8f2:	4611      	mov	r1, r2
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	4798      	blx	r3
  }

  return USBD_OK;
 800b8f8:	2300      	movs	r3, #0
}
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	3708      	adds	r7, #8
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd80      	pop	{r7, pc}

0800b902 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b902:	b580      	push	{r7, lr}
 800b904:	b084      	sub	sp, #16
 800b906:	af00      	add	r7, sp, #0
 800b908:	6078      	str	r0, [r7, #4]
 800b90a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b912:	6839      	ldr	r1, [r7, #0]
 800b914:	4618      	mov	r0, r3
 800b916:	f000 ff9d 	bl	800c854 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2201      	movs	r2, #1
 800b91e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b928:	461a      	mov	r2, r3
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b936:	f003 031f 	and.w	r3, r3, #31
 800b93a:	2b02      	cmp	r3, #2
 800b93c:	d01a      	beq.n	800b974 <USBD_LL_SetupStage+0x72>
 800b93e:	2b02      	cmp	r3, #2
 800b940:	d822      	bhi.n	800b988 <USBD_LL_SetupStage+0x86>
 800b942:	2b00      	cmp	r3, #0
 800b944:	d002      	beq.n	800b94c <USBD_LL_SetupStage+0x4a>
 800b946:	2b01      	cmp	r3, #1
 800b948:	d00a      	beq.n	800b960 <USBD_LL_SetupStage+0x5e>
 800b94a:	e01d      	b.n	800b988 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b952:	4619      	mov	r1, r3
 800b954:	6878      	ldr	r0, [r7, #4]
 800b956:	f000 fa5d 	bl	800be14 <USBD_StdDevReq>
 800b95a:	4603      	mov	r3, r0
 800b95c:	73fb      	strb	r3, [r7, #15]
      break;
 800b95e:	e020      	b.n	800b9a2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b966:	4619      	mov	r1, r3
 800b968:	6878      	ldr	r0, [r7, #4]
 800b96a:	f000 fac1 	bl	800bef0 <USBD_StdItfReq>
 800b96e:	4603      	mov	r3, r0
 800b970:	73fb      	strb	r3, [r7, #15]
      break;
 800b972:	e016      	b.n	800b9a2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b97a:	4619      	mov	r1, r3
 800b97c:	6878      	ldr	r0, [r7, #4]
 800b97e:	f000 fb00 	bl	800bf82 <USBD_StdEPReq>
 800b982:	4603      	mov	r3, r0
 800b984:	73fb      	strb	r3, [r7, #15]
      break;
 800b986:	e00c      	b.n	800b9a2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b98e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b992:	b2db      	uxtb	r3, r3
 800b994:	4619      	mov	r1, r3
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	f001 fa5e 	bl	800ce58 <USBD_LL_StallEP>
 800b99c:	4603      	mov	r3, r0
 800b99e:	73fb      	strb	r3, [r7, #15]
      break;
 800b9a0:	bf00      	nop
  }

  return ret;
 800b9a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	3710      	adds	r7, #16
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	bd80      	pop	{r7, pc}

0800b9ac <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b086      	sub	sp, #24
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	60f8      	str	r0, [r7, #12]
 800b9b4:	460b      	mov	r3, r1
 800b9b6:	607a      	str	r2, [r7, #4]
 800b9b8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b9ba:	7afb      	ldrb	r3, [r7, #11]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d138      	bne.n	800ba32 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b9c6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b9ce:	2b03      	cmp	r3, #3
 800b9d0:	d14a      	bne.n	800ba68 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b9d2:	693b      	ldr	r3, [r7, #16]
 800b9d4:	689a      	ldr	r2, [r3, #8]
 800b9d6:	693b      	ldr	r3, [r7, #16]
 800b9d8:	68db      	ldr	r3, [r3, #12]
 800b9da:	429a      	cmp	r2, r3
 800b9dc:	d913      	bls.n	800ba06 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b9de:	693b      	ldr	r3, [r7, #16]
 800b9e0:	689a      	ldr	r2, [r3, #8]
 800b9e2:	693b      	ldr	r3, [r7, #16]
 800b9e4:	68db      	ldr	r3, [r3, #12]
 800b9e6:	1ad2      	subs	r2, r2, r3
 800b9e8:	693b      	ldr	r3, [r7, #16]
 800b9ea:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b9ec:	693b      	ldr	r3, [r7, #16]
 800b9ee:	68da      	ldr	r2, [r3, #12]
 800b9f0:	693b      	ldr	r3, [r7, #16]
 800b9f2:	689b      	ldr	r3, [r3, #8]
 800b9f4:	4293      	cmp	r3, r2
 800b9f6:	bf28      	it	cs
 800b9f8:	4613      	movcs	r3, r2
 800b9fa:	461a      	mov	r2, r3
 800b9fc:	6879      	ldr	r1, [r7, #4]
 800b9fe:	68f8      	ldr	r0, [r7, #12]
 800ba00:	f001 f81c 	bl	800ca3c <USBD_CtlContinueRx>
 800ba04:	e030      	b.n	800ba68 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba0c:	b2db      	uxtb	r3, r3
 800ba0e:	2b03      	cmp	r3, #3
 800ba10:	d10b      	bne.n	800ba2a <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba18:	691b      	ldr	r3, [r3, #16]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d005      	beq.n	800ba2a <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba24:	691b      	ldr	r3, [r3, #16]
 800ba26:	68f8      	ldr	r0, [r7, #12]
 800ba28:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ba2a:	68f8      	ldr	r0, [r7, #12]
 800ba2c:	f001 f817 	bl	800ca5e <USBD_CtlSendStatus>
 800ba30:	e01a      	b.n	800ba68 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba38:	b2db      	uxtb	r3, r3
 800ba3a:	2b03      	cmp	r3, #3
 800ba3c:	d114      	bne.n	800ba68 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba44:	699b      	ldr	r3, [r3, #24]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d00e      	beq.n	800ba68 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba50:	699b      	ldr	r3, [r3, #24]
 800ba52:	7afa      	ldrb	r2, [r7, #11]
 800ba54:	4611      	mov	r1, r2
 800ba56:	68f8      	ldr	r0, [r7, #12]
 800ba58:	4798      	blx	r3
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ba5e:	7dfb      	ldrb	r3, [r7, #23]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d001      	beq.n	800ba68 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800ba64:	7dfb      	ldrb	r3, [r7, #23]
 800ba66:	e000      	b.n	800ba6a <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800ba68:	2300      	movs	r3, #0
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	3718      	adds	r7, #24
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bd80      	pop	{r7, pc}

0800ba72 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ba72:	b580      	push	{r7, lr}
 800ba74:	b086      	sub	sp, #24
 800ba76:	af00      	add	r7, sp, #0
 800ba78:	60f8      	str	r0, [r7, #12]
 800ba7a:	460b      	mov	r3, r1
 800ba7c:	607a      	str	r2, [r7, #4]
 800ba7e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ba80:	7afb      	ldrb	r3, [r7, #11]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d16b      	bne.n	800bb5e <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	3314      	adds	r3, #20
 800ba8a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ba92:	2b02      	cmp	r3, #2
 800ba94:	d156      	bne.n	800bb44 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800ba96:	693b      	ldr	r3, [r7, #16]
 800ba98:	689a      	ldr	r2, [r3, #8]
 800ba9a:	693b      	ldr	r3, [r7, #16]
 800ba9c:	68db      	ldr	r3, [r3, #12]
 800ba9e:	429a      	cmp	r2, r3
 800baa0:	d914      	bls.n	800bacc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800baa2:	693b      	ldr	r3, [r7, #16]
 800baa4:	689a      	ldr	r2, [r3, #8]
 800baa6:	693b      	ldr	r3, [r7, #16]
 800baa8:	68db      	ldr	r3, [r3, #12]
 800baaa:	1ad2      	subs	r2, r2, r3
 800baac:	693b      	ldr	r3, [r7, #16]
 800baae:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bab0:	693b      	ldr	r3, [r7, #16]
 800bab2:	689b      	ldr	r3, [r3, #8]
 800bab4:	461a      	mov	r2, r3
 800bab6:	6879      	ldr	r1, [r7, #4]
 800bab8:	68f8      	ldr	r0, [r7, #12]
 800baba:	f000 ff91 	bl	800c9e0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800babe:	2300      	movs	r3, #0
 800bac0:	2200      	movs	r2, #0
 800bac2:	2100      	movs	r1, #0
 800bac4:	68f8      	ldr	r0, [r7, #12]
 800bac6:	f001 fa71 	bl	800cfac <USBD_LL_PrepareReceive>
 800baca:	e03b      	b.n	800bb44 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bacc:	693b      	ldr	r3, [r7, #16]
 800bace:	68da      	ldr	r2, [r3, #12]
 800bad0:	693b      	ldr	r3, [r7, #16]
 800bad2:	689b      	ldr	r3, [r3, #8]
 800bad4:	429a      	cmp	r2, r3
 800bad6:	d11c      	bne.n	800bb12 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bad8:	693b      	ldr	r3, [r7, #16]
 800bada:	685a      	ldr	r2, [r3, #4]
 800badc:	693b      	ldr	r3, [r7, #16]
 800bade:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bae0:	429a      	cmp	r2, r3
 800bae2:	d316      	bcc.n	800bb12 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bae4:	693b      	ldr	r3, [r7, #16]
 800bae6:	685a      	ldr	r2, [r3, #4]
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800baee:	429a      	cmp	r2, r3
 800baf0:	d20f      	bcs.n	800bb12 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800baf2:	2200      	movs	r2, #0
 800baf4:	2100      	movs	r1, #0
 800baf6:	68f8      	ldr	r0, [r7, #12]
 800baf8:	f000 ff72 	bl	800c9e0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	2200      	movs	r2, #0
 800bb00:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bb04:	2300      	movs	r3, #0
 800bb06:	2200      	movs	r2, #0
 800bb08:	2100      	movs	r1, #0
 800bb0a:	68f8      	ldr	r0, [r7, #12]
 800bb0c:	f001 fa4e 	bl	800cfac <USBD_LL_PrepareReceive>
 800bb10:	e018      	b.n	800bb44 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb18:	b2db      	uxtb	r3, r3
 800bb1a:	2b03      	cmp	r3, #3
 800bb1c:	d10b      	bne.n	800bb36 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb24:	68db      	ldr	r3, [r3, #12]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d005      	beq.n	800bb36 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb30:	68db      	ldr	r3, [r3, #12]
 800bb32:	68f8      	ldr	r0, [r7, #12]
 800bb34:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bb36:	2180      	movs	r1, #128	@ 0x80
 800bb38:	68f8      	ldr	r0, [r7, #12]
 800bb3a:	f001 f98d 	bl	800ce58 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bb3e:	68f8      	ldr	r0, [r7, #12]
 800bb40:	f000 ffa0 	bl	800ca84 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800bb4a:	2b01      	cmp	r3, #1
 800bb4c:	d122      	bne.n	800bb94 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800bb4e:	68f8      	ldr	r0, [r7, #12]
 800bb50:	f7ff fe98 	bl	800b884 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	2200      	movs	r2, #0
 800bb58:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800bb5c:	e01a      	b.n	800bb94 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb64:	b2db      	uxtb	r3, r3
 800bb66:	2b03      	cmp	r3, #3
 800bb68:	d114      	bne.n	800bb94 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb70:	695b      	ldr	r3, [r3, #20]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d00e      	beq.n	800bb94 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb7c:	695b      	ldr	r3, [r3, #20]
 800bb7e:	7afa      	ldrb	r2, [r7, #11]
 800bb80:	4611      	mov	r1, r2
 800bb82:	68f8      	ldr	r0, [r7, #12]
 800bb84:	4798      	blx	r3
 800bb86:	4603      	mov	r3, r0
 800bb88:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800bb8a:	7dfb      	ldrb	r3, [r7, #23]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d001      	beq.n	800bb94 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800bb90:	7dfb      	ldrb	r3, [r7, #23]
 800bb92:	e000      	b.n	800bb96 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800bb94:	2300      	movs	r3, #0
}
 800bb96:	4618      	mov	r0, r3
 800bb98:	3718      	adds	r7, #24
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	bd80      	pop	{r7, pc}

0800bb9e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bb9e:	b580      	push	{r7, lr}
 800bba0:	b082      	sub	sp, #8
 800bba2:	af00      	add	r7, sp, #0
 800bba4:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	2201      	movs	r2, #1
 800bbaa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	2200      	movs	r2, #0
 800bbba:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d101      	bne.n	800bbd2 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800bbce:	2303      	movs	r3, #3
 800bbd0:	e02a      	b.n	800bc28 <USBD_LL_Reset+0x8a>
  }

	if (pdev->pClass->DeInit != NULL)
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bbd8:	685b      	ldr	r3, [r3, #4]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d009      	beq.n	800bbf2 <USBD_LL_Reset+0x54>
	{
	  (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bbe4:	685b      	ldr	r3, [r3, #4]
 800bbe6:	687a      	ldr	r2, [r7, #4]
 800bbe8:	6852      	ldr	r2, [r2, #4]
 800bbea:	b2d2      	uxtb	r2, r2
 800bbec:	4611      	mov	r1, r2
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	4798      	blx	r3
	}

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bbf2:	2340      	movs	r3, #64	@ 0x40
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	2100      	movs	r1, #0
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	f001 f8e8 	bl	800cdce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2201      	movs	r2, #1
 800bc02:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	2240      	movs	r2, #64	@ 0x40
 800bc0a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bc0e:	2340      	movs	r3, #64	@ 0x40
 800bc10:	2200      	movs	r2, #0
 800bc12:	2180      	movs	r1, #128	@ 0x80
 800bc14:	6878      	ldr	r0, [r7, #4]
 800bc16:	f001 f8da 	bl	800cdce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	2201      	movs	r2, #1
 800bc1e:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2240      	movs	r2, #64	@ 0x40
 800bc24:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800bc26:	2300      	movs	r3, #0
}
 800bc28:	4618      	mov	r0, r3
 800bc2a:	3708      	adds	r7, #8
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}

0800bc30 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bc30:	b480      	push	{r7}
 800bc32:	b083      	sub	sp, #12
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
 800bc38:	460b      	mov	r3, r1
 800bc3a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	78fa      	ldrb	r2, [r7, #3]
 800bc40:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bc42:	2300      	movs	r3, #0
}
 800bc44:	4618      	mov	r0, r3
 800bc46:	370c      	adds	r7, #12
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4e:	4770      	bx	lr

0800bc50 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bc50:	b480      	push	{r7}
 800bc52:	b083      	sub	sp, #12
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc5e:	b2da      	uxtb	r2, r3
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2204      	movs	r2, #4
 800bc6a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800bc6e:	2300      	movs	r3, #0
}
 800bc70:	4618      	mov	r0, r3
 800bc72:	370c      	adds	r7, #12
 800bc74:	46bd      	mov	sp, r7
 800bc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7a:	4770      	bx	lr

0800bc7c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bc7c:	b480      	push	{r7}
 800bc7e:	b083      	sub	sp, #12
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc8a:	b2db      	uxtb	r3, r3
 800bc8c:	2b04      	cmp	r3, #4
 800bc8e:	d106      	bne.n	800bc9e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800bc96:	b2da      	uxtb	r2, r3
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800bc9e:	2300      	movs	r3, #0
}
 800bca0:	4618      	mov	r0, r3
 800bca2:	370c      	adds	r7, #12
 800bca4:	46bd      	mov	sp, r7
 800bca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcaa:	4770      	bx	lr

0800bcac <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b082      	sub	sp, #8
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d101      	bne.n	800bcc2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800bcbe:	2303      	movs	r3, #3
 800bcc0:	e012      	b.n	800bce8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bcc8:	b2db      	uxtb	r3, r3
 800bcca:	2b03      	cmp	r3, #3
 800bccc:	d10b      	bne.n	800bce6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bcd4:	69db      	ldr	r3, [r3, #28]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d005      	beq.n	800bce6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bce0:	69db      	ldr	r3, [r3, #28]
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bce6:	2300      	movs	r3, #0
}
 800bce8:	4618      	mov	r0, r3
 800bcea:	3708      	adds	r7, #8
 800bcec:	46bd      	mov	sp, r7
 800bcee:	bd80      	pop	{r7, pc}

0800bcf0 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b082      	sub	sp, #8
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
 800bcf8:	460b      	mov	r3, r1
 800bcfa:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d101      	bne.n	800bd0a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800bd06:	2303      	movs	r3, #3
 800bd08:	e014      	b.n	800bd34 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd10:	b2db      	uxtb	r3, r3
 800bd12:	2b03      	cmp	r3, #3
 800bd14:	d10d      	bne.n	800bd32 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd1c:	6a1b      	ldr	r3, [r3, #32]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d007      	beq.n	800bd32 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd28:	6a1b      	ldr	r3, [r3, #32]
 800bd2a:	78fa      	ldrb	r2, [r7, #3]
 800bd2c:	4611      	mov	r1, r2
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bd32:	2300      	movs	r3, #0
}
 800bd34:	4618      	mov	r0, r3
 800bd36:	3708      	adds	r7, #8
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd80      	pop	{r7, pc}

0800bd3c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b082      	sub	sp, #8
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
 800bd44:	460b      	mov	r3, r1
 800bd46:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d101      	bne.n	800bd56 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800bd52:	2303      	movs	r3, #3
 800bd54:	e014      	b.n	800bd80 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd5c:	b2db      	uxtb	r3, r3
 800bd5e:	2b03      	cmp	r3, #3
 800bd60:	d10d      	bne.n	800bd7e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d007      	beq.n	800bd7e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd76:	78fa      	ldrb	r2, [r7, #3]
 800bd78:	4611      	mov	r1, r2
 800bd7a:	6878      	ldr	r0, [r7, #4]
 800bd7c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bd7e:	2300      	movs	r3, #0
}
 800bd80:	4618      	mov	r0, r3
 800bd82:	3708      	adds	r7, #8
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}

0800bd88 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bd88:	b480      	push	{r7}
 800bd8a:	b083      	sub	sp, #12
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bd90:	2300      	movs	r3, #0
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	370c      	adds	r7, #12
 800bd96:	46bd      	mov	sp, r7
 800bd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9c:	4770      	bx	lr

0800bd9e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bd9e:	b580      	push	{r7, lr}
 800bda0:	b082      	sub	sp, #8
 800bda2:	af00      	add	r7, sp, #0
 800bda4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2201      	movs	r2, #1
 800bdaa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  if (pdev->pClass != NULL)
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d009      	beq.n	800bdcc <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bdbe:	685b      	ldr	r3, [r3, #4]
 800bdc0:	687a      	ldr	r2, [r7, #4]
 800bdc2:	6852      	ldr	r2, [r2, #4]
 800bdc4:	b2d2      	uxtb	r2, r2
 800bdc6:	4611      	mov	r1, r2
 800bdc8:	6878      	ldr	r0, [r7, #4]
 800bdca:	4798      	blx	r3
  }

  return USBD_OK;
 800bdcc:	2300      	movs	r3, #0
}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	3708      	adds	r7, #8
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}

0800bdd6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bdd6:	b480      	push	{r7}
 800bdd8:	b087      	sub	sp, #28
 800bdda:	af00      	add	r7, sp, #0
 800bddc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bde2:	697b      	ldr	r3, [r7, #20]
 800bde4:	781b      	ldrb	r3, [r3, #0]
 800bde6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bde8:	697b      	ldr	r3, [r7, #20]
 800bdea:	3301      	adds	r3, #1
 800bdec:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bdee:	697b      	ldr	r3, [r7, #20]
 800bdf0:	781b      	ldrb	r3, [r3, #0]
 800bdf2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bdf4:	8a3b      	ldrh	r3, [r7, #16]
 800bdf6:	021b      	lsls	r3, r3, #8
 800bdf8:	b21a      	sxth	r2, r3
 800bdfa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bdfe:	4313      	orrs	r3, r2
 800be00:	b21b      	sxth	r3, r3
 800be02:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800be04:	89fb      	ldrh	r3, [r7, #14]
}
 800be06:	4618      	mov	r0, r3
 800be08:	371c      	adds	r7, #28
 800be0a:	46bd      	mov	sp, r7
 800be0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be10:	4770      	bx	lr
	...

0800be14 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b084      	sub	sp, #16
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
 800be1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800be1e:	2300      	movs	r3, #0
 800be20:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	781b      	ldrb	r3, [r3, #0]
 800be26:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800be2a:	2b40      	cmp	r3, #64	@ 0x40
 800be2c:	d005      	beq.n	800be3a <USBD_StdDevReq+0x26>
 800be2e:	2b40      	cmp	r3, #64	@ 0x40
 800be30:	d853      	bhi.n	800beda <USBD_StdDevReq+0xc6>
 800be32:	2b00      	cmp	r3, #0
 800be34:	d00b      	beq.n	800be4e <USBD_StdDevReq+0x3a>
 800be36:	2b20      	cmp	r3, #32
 800be38:	d14f      	bne.n	800beda <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be40:	689b      	ldr	r3, [r3, #8]
 800be42:	6839      	ldr	r1, [r7, #0]
 800be44:	6878      	ldr	r0, [r7, #4]
 800be46:	4798      	blx	r3
 800be48:	4603      	mov	r3, r0
 800be4a:	73fb      	strb	r3, [r7, #15]
      break;
 800be4c:	e04a      	b.n	800bee4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	785b      	ldrb	r3, [r3, #1]
 800be52:	2b09      	cmp	r3, #9
 800be54:	d83b      	bhi.n	800bece <USBD_StdDevReq+0xba>
 800be56:	a201      	add	r2, pc, #4	@ (adr r2, 800be5c <USBD_StdDevReq+0x48>)
 800be58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be5c:	0800beb1 	.word	0x0800beb1
 800be60:	0800bec5 	.word	0x0800bec5
 800be64:	0800becf 	.word	0x0800becf
 800be68:	0800bebb 	.word	0x0800bebb
 800be6c:	0800becf 	.word	0x0800becf
 800be70:	0800be8f 	.word	0x0800be8f
 800be74:	0800be85 	.word	0x0800be85
 800be78:	0800becf 	.word	0x0800becf
 800be7c:	0800bea7 	.word	0x0800bea7
 800be80:	0800be99 	.word	0x0800be99
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800be84:	6839      	ldr	r1, [r7, #0]
 800be86:	6878      	ldr	r0, [r7, #4]
 800be88:	f000 f9de 	bl	800c248 <USBD_GetDescriptor>
          break;
 800be8c:	e024      	b.n	800bed8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800be8e:	6839      	ldr	r1, [r7, #0]
 800be90:	6878      	ldr	r0, [r7, #4]
 800be92:	f000 fb55 	bl	800c540 <USBD_SetAddress>
          break;
 800be96:	e01f      	b.n	800bed8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800be98:	6839      	ldr	r1, [r7, #0]
 800be9a:	6878      	ldr	r0, [r7, #4]
 800be9c:	f000 fb94 	bl	800c5c8 <USBD_SetConfig>
 800bea0:	4603      	mov	r3, r0
 800bea2:	73fb      	strb	r3, [r7, #15]
          break;
 800bea4:	e018      	b.n	800bed8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bea6:	6839      	ldr	r1, [r7, #0]
 800bea8:	6878      	ldr	r0, [r7, #4]
 800beaa:	f000 fc33 	bl	800c714 <USBD_GetConfig>
          break;
 800beae:	e013      	b.n	800bed8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800beb0:	6839      	ldr	r1, [r7, #0]
 800beb2:	6878      	ldr	r0, [r7, #4]
 800beb4:	f000 fc64 	bl	800c780 <USBD_GetStatus>
          break;
 800beb8:	e00e      	b.n	800bed8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800beba:	6839      	ldr	r1, [r7, #0]
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	f000 fc93 	bl	800c7e8 <USBD_SetFeature>
          break;
 800bec2:	e009      	b.n	800bed8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bec4:	6839      	ldr	r1, [r7, #0]
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f000 fca2 	bl	800c810 <USBD_ClrFeature>
          break;
 800becc:	e004      	b.n	800bed8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800bece:	6839      	ldr	r1, [r7, #0]
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	f000 fcf9 	bl	800c8c8 <USBD_CtlError>
          break;
 800bed6:	bf00      	nop
      }
      break;
 800bed8:	e004      	b.n	800bee4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800beda:	6839      	ldr	r1, [r7, #0]
 800bedc:	6878      	ldr	r0, [r7, #4]
 800bede:	f000 fcf3 	bl	800c8c8 <USBD_CtlError>
      break;
 800bee2:	bf00      	nop
  }

  return ret;
 800bee4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bee6:	4618      	mov	r0, r3
 800bee8:	3710      	adds	r7, #16
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}
 800beee:	bf00      	nop

0800bef0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b084      	sub	sp, #16
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
 800bef8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800befa:	2300      	movs	r3, #0
 800befc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	781b      	ldrb	r3, [r3, #0]
 800bf02:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bf06:	2b40      	cmp	r3, #64	@ 0x40
 800bf08:	d005      	beq.n	800bf16 <USBD_StdItfReq+0x26>
 800bf0a:	2b40      	cmp	r3, #64	@ 0x40
 800bf0c:	d82f      	bhi.n	800bf6e <USBD_StdItfReq+0x7e>
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d001      	beq.n	800bf16 <USBD_StdItfReq+0x26>
 800bf12:	2b20      	cmp	r3, #32
 800bf14:	d12b      	bne.n	800bf6e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf1c:	b2db      	uxtb	r3, r3
 800bf1e:	3b01      	subs	r3, #1
 800bf20:	2b02      	cmp	r3, #2
 800bf22:	d81d      	bhi.n	800bf60 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	889b      	ldrh	r3, [r3, #4]
 800bf28:	b2db      	uxtb	r3, r3
 800bf2a:	2b0f      	cmp	r3, #15
 800bf2c:	d813      	bhi.n	800bf56 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf34:	689b      	ldr	r3, [r3, #8]
 800bf36:	6839      	ldr	r1, [r7, #0]
 800bf38:	6878      	ldr	r0, [r7, #4]
 800bf3a:	4798      	blx	r3
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	88db      	ldrh	r3, [r3, #6]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d110      	bne.n	800bf6a <USBD_StdItfReq+0x7a>
 800bf48:	7bfb      	ldrb	r3, [r7, #15]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d10d      	bne.n	800bf6a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	f000 fd85 	bl	800ca5e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bf54:	e009      	b.n	800bf6a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800bf56:	6839      	ldr	r1, [r7, #0]
 800bf58:	6878      	ldr	r0, [r7, #4]
 800bf5a:	f000 fcb5 	bl	800c8c8 <USBD_CtlError>
          break;
 800bf5e:	e004      	b.n	800bf6a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800bf60:	6839      	ldr	r1, [r7, #0]
 800bf62:	6878      	ldr	r0, [r7, #4]
 800bf64:	f000 fcb0 	bl	800c8c8 <USBD_CtlError>
          break;
 800bf68:	e000      	b.n	800bf6c <USBD_StdItfReq+0x7c>
          break;
 800bf6a:	bf00      	nop
      }
      break;
 800bf6c:	e004      	b.n	800bf78 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800bf6e:	6839      	ldr	r1, [r7, #0]
 800bf70:	6878      	ldr	r0, [r7, #4]
 800bf72:	f000 fca9 	bl	800c8c8 <USBD_CtlError>
      break;
 800bf76:	bf00      	nop
  }

  return ret;
 800bf78:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	3710      	adds	r7, #16
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd80      	pop	{r7, pc}

0800bf82 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf82:	b580      	push	{r7, lr}
 800bf84:	b084      	sub	sp, #16
 800bf86:	af00      	add	r7, sp, #0
 800bf88:	6078      	str	r0, [r7, #4]
 800bf8a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	889b      	ldrh	r3, [r3, #4]
 800bf94:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf96:	683b      	ldr	r3, [r7, #0]
 800bf98:	781b      	ldrb	r3, [r3, #0]
 800bf9a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bf9e:	2b40      	cmp	r3, #64	@ 0x40
 800bfa0:	d007      	beq.n	800bfb2 <USBD_StdEPReq+0x30>
 800bfa2:	2b40      	cmp	r3, #64	@ 0x40
 800bfa4:	f200 8145 	bhi.w	800c232 <USBD_StdEPReq+0x2b0>
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d00c      	beq.n	800bfc6 <USBD_StdEPReq+0x44>
 800bfac:	2b20      	cmp	r3, #32
 800bfae:	f040 8140 	bne.w	800c232 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bfb8:	689b      	ldr	r3, [r3, #8]
 800bfba:	6839      	ldr	r1, [r7, #0]
 800bfbc:	6878      	ldr	r0, [r7, #4]
 800bfbe:	4798      	blx	r3
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	73fb      	strb	r3, [r7, #15]
      break;
 800bfc4:	e13a      	b.n	800c23c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	785b      	ldrb	r3, [r3, #1]
 800bfca:	2b03      	cmp	r3, #3
 800bfcc:	d007      	beq.n	800bfde <USBD_StdEPReq+0x5c>
 800bfce:	2b03      	cmp	r3, #3
 800bfd0:	f300 8129 	bgt.w	800c226 <USBD_StdEPReq+0x2a4>
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d07f      	beq.n	800c0d8 <USBD_StdEPReq+0x156>
 800bfd8:	2b01      	cmp	r3, #1
 800bfda:	d03c      	beq.n	800c056 <USBD_StdEPReq+0xd4>
 800bfdc:	e123      	b.n	800c226 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfe4:	b2db      	uxtb	r3, r3
 800bfe6:	2b02      	cmp	r3, #2
 800bfe8:	d002      	beq.n	800bff0 <USBD_StdEPReq+0x6e>
 800bfea:	2b03      	cmp	r3, #3
 800bfec:	d016      	beq.n	800c01c <USBD_StdEPReq+0x9a>
 800bfee:	e02c      	b.n	800c04a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bff0:	7bbb      	ldrb	r3, [r7, #14]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d00d      	beq.n	800c012 <USBD_StdEPReq+0x90>
 800bff6:	7bbb      	ldrb	r3, [r7, #14]
 800bff8:	2b80      	cmp	r3, #128	@ 0x80
 800bffa:	d00a      	beq.n	800c012 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bffc:	7bbb      	ldrb	r3, [r7, #14]
 800bffe:	4619      	mov	r1, r3
 800c000:	6878      	ldr	r0, [r7, #4]
 800c002:	f000 ff29 	bl	800ce58 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c006:	2180      	movs	r1, #128	@ 0x80
 800c008:	6878      	ldr	r0, [r7, #4]
 800c00a:	f000 ff25 	bl	800ce58 <USBD_LL_StallEP>
 800c00e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c010:	e020      	b.n	800c054 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800c012:	6839      	ldr	r1, [r7, #0]
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	f000 fc57 	bl	800c8c8 <USBD_CtlError>
              break;
 800c01a:	e01b      	b.n	800c054 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	885b      	ldrh	r3, [r3, #2]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d10e      	bne.n	800c042 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c024:	7bbb      	ldrb	r3, [r7, #14]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d00b      	beq.n	800c042 <USBD_StdEPReq+0xc0>
 800c02a:	7bbb      	ldrb	r3, [r7, #14]
 800c02c:	2b80      	cmp	r3, #128	@ 0x80
 800c02e:	d008      	beq.n	800c042 <USBD_StdEPReq+0xc0>
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	88db      	ldrh	r3, [r3, #6]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d104      	bne.n	800c042 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c038:	7bbb      	ldrb	r3, [r7, #14]
 800c03a:	4619      	mov	r1, r3
 800c03c:	6878      	ldr	r0, [r7, #4]
 800c03e:	f000 ff0b 	bl	800ce58 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f000 fd0b 	bl	800ca5e <USBD_CtlSendStatus>

              break;
 800c048:	e004      	b.n	800c054 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800c04a:	6839      	ldr	r1, [r7, #0]
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	f000 fc3b 	bl	800c8c8 <USBD_CtlError>
              break;
 800c052:	bf00      	nop
          }
          break;
 800c054:	e0ec      	b.n	800c230 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c05c:	b2db      	uxtb	r3, r3
 800c05e:	2b02      	cmp	r3, #2
 800c060:	d002      	beq.n	800c068 <USBD_StdEPReq+0xe6>
 800c062:	2b03      	cmp	r3, #3
 800c064:	d016      	beq.n	800c094 <USBD_StdEPReq+0x112>
 800c066:	e030      	b.n	800c0ca <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c068:	7bbb      	ldrb	r3, [r7, #14]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d00d      	beq.n	800c08a <USBD_StdEPReq+0x108>
 800c06e:	7bbb      	ldrb	r3, [r7, #14]
 800c070:	2b80      	cmp	r3, #128	@ 0x80
 800c072:	d00a      	beq.n	800c08a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c074:	7bbb      	ldrb	r3, [r7, #14]
 800c076:	4619      	mov	r1, r3
 800c078:	6878      	ldr	r0, [r7, #4]
 800c07a:	f000 feed 	bl	800ce58 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c07e:	2180      	movs	r1, #128	@ 0x80
 800c080:	6878      	ldr	r0, [r7, #4]
 800c082:	f000 fee9 	bl	800ce58 <USBD_LL_StallEP>
 800c086:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c088:	e025      	b.n	800c0d6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800c08a:	6839      	ldr	r1, [r7, #0]
 800c08c:	6878      	ldr	r0, [r7, #4]
 800c08e:	f000 fc1b 	bl	800c8c8 <USBD_CtlError>
              break;
 800c092:	e020      	b.n	800c0d6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	885b      	ldrh	r3, [r3, #2]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d11b      	bne.n	800c0d4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c09c:	7bbb      	ldrb	r3, [r7, #14]
 800c09e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d004      	beq.n	800c0b0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c0a6:	7bbb      	ldrb	r3, [r7, #14]
 800c0a8:	4619      	mov	r1, r3
 800c0aa:	6878      	ldr	r0, [r7, #4]
 800c0ac:	f000 fef3 	bl	800ce96 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c0b0:	6878      	ldr	r0, [r7, #4]
 800c0b2:	f000 fcd4 	bl	800ca5e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c0bc:	689b      	ldr	r3, [r3, #8]
 800c0be:	6839      	ldr	r1, [r7, #0]
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	4798      	blx	r3
 800c0c4:	4603      	mov	r3, r0
 800c0c6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800c0c8:	e004      	b.n	800c0d4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800c0ca:	6839      	ldr	r1, [r7, #0]
 800c0cc:	6878      	ldr	r0, [r7, #4]
 800c0ce:	f000 fbfb 	bl	800c8c8 <USBD_CtlError>
              break;
 800c0d2:	e000      	b.n	800c0d6 <USBD_StdEPReq+0x154>
              break;
 800c0d4:	bf00      	nop
          }
          break;
 800c0d6:	e0ab      	b.n	800c230 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c0de:	b2db      	uxtb	r3, r3
 800c0e0:	2b02      	cmp	r3, #2
 800c0e2:	d002      	beq.n	800c0ea <USBD_StdEPReq+0x168>
 800c0e4:	2b03      	cmp	r3, #3
 800c0e6:	d032      	beq.n	800c14e <USBD_StdEPReq+0x1cc>
 800c0e8:	e097      	b.n	800c21a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c0ea:	7bbb      	ldrb	r3, [r7, #14]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d007      	beq.n	800c100 <USBD_StdEPReq+0x17e>
 800c0f0:	7bbb      	ldrb	r3, [r7, #14]
 800c0f2:	2b80      	cmp	r3, #128	@ 0x80
 800c0f4:	d004      	beq.n	800c100 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800c0f6:	6839      	ldr	r1, [r7, #0]
 800c0f8:	6878      	ldr	r0, [r7, #4]
 800c0fa:	f000 fbe5 	bl	800c8c8 <USBD_CtlError>
                break;
 800c0fe:	e091      	b.n	800c224 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c100:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c104:	2b00      	cmp	r3, #0
 800c106:	da0b      	bge.n	800c120 <USBD_StdEPReq+0x19e>
 800c108:	7bbb      	ldrb	r3, [r7, #14]
 800c10a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c10e:	4613      	mov	r3, r2
 800c110:	009b      	lsls	r3, r3, #2
 800c112:	4413      	add	r3, r2
 800c114:	009b      	lsls	r3, r3, #2
 800c116:	3310      	adds	r3, #16
 800c118:	687a      	ldr	r2, [r7, #4]
 800c11a:	4413      	add	r3, r2
 800c11c:	3304      	adds	r3, #4
 800c11e:	e00b      	b.n	800c138 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c120:	7bbb      	ldrb	r3, [r7, #14]
 800c122:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c126:	4613      	mov	r3, r2
 800c128:	009b      	lsls	r3, r3, #2
 800c12a:	4413      	add	r3, r2
 800c12c:	009b      	lsls	r3, r3, #2
 800c12e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c132:	687a      	ldr	r2, [r7, #4]
 800c134:	4413      	add	r3, r2
 800c136:	3304      	adds	r3, #4
 800c138:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c13a:	68bb      	ldr	r3, [r7, #8]
 800c13c:	2200      	movs	r2, #0
 800c13e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c140:	68bb      	ldr	r3, [r7, #8]
 800c142:	2202      	movs	r2, #2
 800c144:	4619      	mov	r1, r3
 800c146:	6878      	ldr	r0, [r7, #4]
 800c148:	f000 fc2f 	bl	800c9aa <USBD_CtlSendData>
              break;
 800c14c:	e06a      	b.n	800c224 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c14e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c152:	2b00      	cmp	r3, #0
 800c154:	da11      	bge.n	800c17a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c156:	7bbb      	ldrb	r3, [r7, #14]
 800c158:	f003 020f 	and.w	r2, r3, #15
 800c15c:	6879      	ldr	r1, [r7, #4]
 800c15e:	4613      	mov	r3, r2
 800c160:	009b      	lsls	r3, r3, #2
 800c162:	4413      	add	r3, r2
 800c164:	009b      	lsls	r3, r3, #2
 800c166:	440b      	add	r3, r1
 800c168:	3324      	adds	r3, #36	@ 0x24
 800c16a:	881b      	ldrh	r3, [r3, #0]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d117      	bne.n	800c1a0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c170:	6839      	ldr	r1, [r7, #0]
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f000 fba8 	bl	800c8c8 <USBD_CtlError>
                  break;
 800c178:	e054      	b.n	800c224 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c17a:	7bbb      	ldrb	r3, [r7, #14]
 800c17c:	f003 020f 	and.w	r2, r3, #15
 800c180:	6879      	ldr	r1, [r7, #4]
 800c182:	4613      	mov	r3, r2
 800c184:	009b      	lsls	r3, r3, #2
 800c186:	4413      	add	r3, r2
 800c188:	009b      	lsls	r3, r3, #2
 800c18a:	440b      	add	r3, r1
 800c18c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c190:	881b      	ldrh	r3, [r3, #0]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d104      	bne.n	800c1a0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c196:	6839      	ldr	r1, [r7, #0]
 800c198:	6878      	ldr	r0, [r7, #4]
 800c19a:	f000 fb95 	bl	800c8c8 <USBD_CtlError>
                  break;
 800c19e:	e041      	b.n	800c224 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c1a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	da0b      	bge.n	800c1c0 <USBD_StdEPReq+0x23e>
 800c1a8:	7bbb      	ldrb	r3, [r7, #14]
 800c1aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c1ae:	4613      	mov	r3, r2
 800c1b0:	009b      	lsls	r3, r3, #2
 800c1b2:	4413      	add	r3, r2
 800c1b4:	009b      	lsls	r3, r3, #2
 800c1b6:	3310      	adds	r3, #16
 800c1b8:	687a      	ldr	r2, [r7, #4]
 800c1ba:	4413      	add	r3, r2
 800c1bc:	3304      	adds	r3, #4
 800c1be:	e00b      	b.n	800c1d8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c1c0:	7bbb      	ldrb	r3, [r7, #14]
 800c1c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c1c6:	4613      	mov	r3, r2
 800c1c8:	009b      	lsls	r3, r3, #2
 800c1ca:	4413      	add	r3, r2
 800c1cc:	009b      	lsls	r3, r3, #2
 800c1ce:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c1d2:	687a      	ldr	r2, [r7, #4]
 800c1d4:	4413      	add	r3, r2
 800c1d6:	3304      	adds	r3, #4
 800c1d8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c1da:	7bbb      	ldrb	r3, [r7, #14]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d002      	beq.n	800c1e6 <USBD_StdEPReq+0x264>
 800c1e0:	7bbb      	ldrb	r3, [r7, #14]
 800c1e2:	2b80      	cmp	r3, #128	@ 0x80
 800c1e4:	d103      	bne.n	800c1ee <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800c1e6:	68bb      	ldr	r3, [r7, #8]
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	601a      	str	r2, [r3, #0]
 800c1ec:	e00e      	b.n	800c20c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c1ee:	7bbb      	ldrb	r3, [r7, #14]
 800c1f0:	4619      	mov	r1, r3
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	f000 fe6e 	bl	800ced4 <USBD_LL_IsStallEP>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d003      	beq.n	800c206 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800c1fe:	68bb      	ldr	r3, [r7, #8]
 800c200:	2201      	movs	r2, #1
 800c202:	601a      	str	r2, [r3, #0]
 800c204:	e002      	b.n	800c20c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800c206:	68bb      	ldr	r3, [r7, #8]
 800c208:	2200      	movs	r2, #0
 800c20a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c20c:	68bb      	ldr	r3, [r7, #8]
 800c20e:	2202      	movs	r2, #2
 800c210:	4619      	mov	r1, r3
 800c212:	6878      	ldr	r0, [r7, #4]
 800c214:	f000 fbc9 	bl	800c9aa <USBD_CtlSendData>
              break;
 800c218:	e004      	b.n	800c224 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800c21a:	6839      	ldr	r1, [r7, #0]
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	f000 fb53 	bl	800c8c8 <USBD_CtlError>
              break;
 800c222:	bf00      	nop
          }
          break;
 800c224:	e004      	b.n	800c230 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800c226:	6839      	ldr	r1, [r7, #0]
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	f000 fb4d 	bl	800c8c8 <USBD_CtlError>
          break;
 800c22e:	bf00      	nop
      }
      break;
 800c230:	e004      	b.n	800c23c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800c232:	6839      	ldr	r1, [r7, #0]
 800c234:	6878      	ldr	r0, [r7, #4]
 800c236:	f000 fb47 	bl	800c8c8 <USBD_CtlError>
      break;
 800c23a:	bf00      	nop
  }

  return ret;
 800c23c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c23e:	4618      	mov	r0, r3
 800c240:	3710      	adds	r7, #16
 800c242:	46bd      	mov	sp, r7
 800c244:	bd80      	pop	{r7, pc}
	...

0800c248 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b084      	sub	sp, #16
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
 800c250:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c252:	2300      	movs	r3, #0
 800c254:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c256:	2300      	movs	r3, #0
 800c258:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c25a:	2300      	movs	r3, #0
 800c25c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	885b      	ldrh	r3, [r3, #2]
 800c262:	0a1b      	lsrs	r3, r3, #8
 800c264:	b29b      	uxth	r3, r3
 800c266:	3b01      	subs	r3, #1
 800c268:	2b06      	cmp	r3, #6
 800c26a:	f200 813b 	bhi.w	800c4e4 <USBD_GetDescriptor+0x29c>
 800c26e:	a201      	add	r2, pc, #4	@ (adr r2, 800c274 <USBD_GetDescriptor+0x2c>)
 800c270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c274:	0800c291 	.word	0x0800c291
 800c278:	0800c2a9 	.word	0x0800c2a9
 800c27c:	0800c2e9 	.word	0x0800c2e9
 800c280:	0800c4e5 	.word	0x0800c4e5
 800c284:	0800c4e5 	.word	0x0800c4e5
 800c288:	0800c485 	.word	0x0800c485
 800c28c:	0800c4b1 	.word	0x0800c4b1
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	687a      	ldr	r2, [r7, #4]
 800c29a:	7c12      	ldrb	r2, [r2, #16]
 800c29c:	f107 0108 	add.w	r1, r7, #8
 800c2a0:	4610      	mov	r0, r2
 800c2a2:	4798      	blx	r3
 800c2a4:	60f8      	str	r0, [r7, #12]
      break;
 800c2a6:	e125      	b.n	800c4f4 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	7c1b      	ldrb	r3, [r3, #16]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d10d      	bne.n	800c2cc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c2b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2b8:	f107 0208 	add.w	r2, r7, #8
 800c2bc:	4610      	mov	r0, r2
 800c2be:	4798      	blx	r3
 800c2c0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	3301      	adds	r3, #1
 800c2c6:	2202      	movs	r2, #2
 800c2c8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c2ca:	e113      	b.n	800c4f4 <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c2d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2d4:	f107 0208 	add.w	r2, r7, #8
 800c2d8:	4610      	mov	r0, r2
 800c2da:	4798      	blx	r3
 800c2dc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	3301      	adds	r3, #1
 800c2e2:	2202      	movs	r2, #2
 800c2e4:	701a      	strb	r2, [r3, #0]
      break;
 800c2e6:	e105      	b.n	800c4f4 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	885b      	ldrh	r3, [r3, #2]
 800c2ec:	b2db      	uxtb	r3, r3
 800c2ee:	2b05      	cmp	r3, #5
 800c2f0:	f200 80ac 	bhi.w	800c44c <USBD_GetDescriptor+0x204>
 800c2f4:	a201      	add	r2, pc, #4	@ (adr r2, 800c2fc <USBD_GetDescriptor+0xb4>)
 800c2f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2fa:	bf00      	nop
 800c2fc:	0800c315 	.word	0x0800c315
 800c300:	0800c349 	.word	0x0800c349
 800c304:	0800c37d 	.word	0x0800c37d
 800c308:	0800c3b1 	.word	0x0800c3b1
 800c30c:	0800c3e5 	.word	0x0800c3e5
 800c310:	0800c419 	.word	0x0800c419
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c31a:	685b      	ldr	r3, [r3, #4]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d00b      	beq.n	800c338 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c326:	685b      	ldr	r3, [r3, #4]
 800c328:	687a      	ldr	r2, [r7, #4]
 800c32a:	7c12      	ldrb	r2, [r2, #16]
 800c32c:	f107 0108 	add.w	r1, r7, #8
 800c330:	4610      	mov	r0, r2
 800c332:	4798      	blx	r3
 800c334:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c336:	e0a4      	b.n	800c482 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800c338:	6839      	ldr	r1, [r7, #0]
 800c33a:	6878      	ldr	r0, [r7, #4]
 800c33c:	f000 fac4 	bl	800c8c8 <USBD_CtlError>
            err++;
 800c340:	7afb      	ldrb	r3, [r7, #11]
 800c342:	3301      	adds	r3, #1
 800c344:	72fb      	strb	r3, [r7, #11]
          break;
 800c346:	e09c      	b.n	800c482 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c34e:	689b      	ldr	r3, [r3, #8]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d00b      	beq.n	800c36c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c35a:	689b      	ldr	r3, [r3, #8]
 800c35c:	687a      	ldr	r2, [r7, #4]
 800c35e:	7c12      	ldrb	r2, [r2, #16]
 800c360:	f107 0108 	add.w	r1, r7, #8
 800c364:	4610      	mov	r0, r2
 800c366:	4798      	blx	r3
 800c368:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c36a:	e08a      	b.n	800c482 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800c36c:	6839      	ldr	r1, [r7, #0]
 800c36e:	6878      	ldr	r0, [r7, #4]
 800c370:	f000 faaa 	bl	800c8c8 <USBD_CtlError>
            err++;
 800c374:	7afb      	ldrb	r3, [r7, #11]
 800c376:	3301      	adds	r3, #1
 800c378:	72fb      	strb	r3, [r7, #11]
          break;
 800c37a:	e082      	b.n	800c482 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c382:	68db      	ldr	r3, [r3, #12]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d00b      	beq.n	800c3a0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c38e:	68db      	ldr	r3, [r3, #12]
 800c390:	687a      	ldr	r2, [r7, #4]
 800c392:	7c12      	ldrb	r2, [r2, #16]
 800c394:	f107 0108 	add.w	r1, r7, #8
 800c398:	4610      	mov	r0, r2
 800c39a:	4798      	blx	r3
 800c39c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c39e:	e070      	b.n	800c482 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800c3a0:	6839      	ldr	r1, [r7, #0]
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f000 fa90 	bl	800c8c8 <USBD_CtlError>
            err++;
 800c3a8:	7afb      	ldrb	r3, [r7, #11]
 800c3aa:	3301      	adds	r3, #1
 800c3ac:	72fb      	strb	r3, [r7, #11]
          break;
 800c3ae:	e068      	b.n	800c482 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3b6:	691b      	ldr	r3, [r3, #16]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d00b      	beq.n	800c3d4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3c2:	691b      	ldr	r3, [r3, #16]
 800c3c4:	687a      	ldr	r2, [r7, #4]
 800c3c6:	7c12      	ldrb	r2, [r2, #16]
 800c3c8:	f107 0108 	add.w	r1, r7, #8
 800c3cc:	4610      	mov	r0, r2
 800c3ce:	4798      	blx	r3
 800c3d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3d2:	e056      	b.n	800c482 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800c3d4:	6839      	ldr	r1, [r7, #0]
 800c3d6:	6878      	ldr	r0, [r7, #4]
 800c3d8:	f000 fa76 	bl	800c8c8 <USBD_CtlError>
            err++;
 800c3dc:	7afb      	ldrb	r3, [r7, #11]
 800c3de:	3301      	adds	r3, #1
 800c3e0:	72fb      	strb	r3, [r7, #11]
          break;
 800c3e2:	e04e      	b.n	800c482 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3ea:	695b      	ldr	r3, [r3, #20]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d00b      	beq.n	800c408 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3f6:	695b      	ldr	r3, [r3, #20]
 800c3f8:	687a      	ldr	r2, [r7, #4]
 800c3fa:	7c12      	ldrb	r2, [r2, #16]
 800c3fc:	f107 0108 	add.w	r1, r7, #8
 800c400:	4610      	mov	r0, r2
 800c402:	4798      	blx	r3
 800c404:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c406:	e03c      	b.n	800c482 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800c408:	6839      	ldr	r1, [r7, #0]
 800c40a:	6878      	ldr	r0, [r7, #4]
 800c40c:	f000 fa5c 	bl	800c8c8 <USBD_CtlError>
            err++;
 800c410:	7afb      	ldrb	r3, [r7, #11]
 800c412:	3301      	adds	r3, #1
 800c414:	72fb      	strb	r3, [r7, #11]
          break;
 800c416:	e034      	b.n	800c482 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c41e:	699b      	ldr	r3, [r3, #24]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d00b      	beq.n	800c43c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c42a:	699b      	ldr	r3, [r3, #24]
 800c42c:	687a      	ldr	r2, [r7, #4]
 800c42e:	7c12      	ldrb	r2, [r2, #16]
 800c430:	f107 0108 	add.w	r1, r7, #8
 800c434:	4610      	mov	r0, r2
 800c436:	4798      	blx	r3
 800c438:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c43a:	e022      	b.n	800c482 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800c43c:	6839      	ldr	r1, [r7, #0]
 800c43e:	6878      	ldr	r0, [r7, #4]
 800c440:	f000 fa42 	bl	800c8c8 <USBD_CtlError>
            err++;
 800c444:	7afb      	ldrb	r3, [r7, #11]
 800c446:	3301      	adds	r3, #1
 800c448:	72fb      	strb	r3, [r7, #11]
          break;
 800c44a:	e01a      	b.n	800c482 <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c454:	2b00      	cmp	r3, #0
 800c456:	d00c      	beq.n	800c472 <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c45e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c460:	683a      	ldr	r2, [r7, #0]
 800c462:	8852      	ldrh	r2, [r2, #2]
 800c464:	b2d1      	uxtb	r1, r2
 800c466:	f107 0208 	add.w	r2, r7, #8
 800c46a:	6878      	ldr	r0, [r7, #4]
 800c46c:	4798      	blx	r3
 800c46e:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 800c470:	e006      	b.n	800c480 <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 800c472:	6839      	ldr	r1, [r7, #0]
 800c474:	6878      	ldr	r0, [r7, #4]
 800c476:	f000 fa27 	bl	800c8c8 <USBD_CtlError>
            err++;
 800c47a:	7afb      	ldrb	r3, [r7, #11]
 800c47c:	3301      	adds	r3, #1
 800c47e:	72fb      	strb	r3, [r7, #11]
          break;
 800c480:	bf00      	nop
      }
      break;
 800c482:	e037      	b.n	800c4f4 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	7c1b      	ldrb	r3, [r3, #16]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d109      	bne.n	800c4a0 <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c492:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c494:	f107 0208 	add.w	r2, r7, #8
 800c498:	4610      	mov	r0, r2
 800c49a:	4798      	blx	r3
 800c49c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c49e:	e029      	b.n	800c4f4 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 800c4a0:	6839      	ldr	r1, [r7, #0]
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	f000 fa10 	bl	800c8c8 <USBD_CtlError>
        err++;
 800c4a8:	7afb      	ldrb	r3, [r7, #11]
 800c4aa:	3301      	adds	r3, #1
 800c4ac:	72fb      	strb	r3, [r7, #11]
      break;
 800c4ae:	e021      	b.n	800c4f4 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	7c1b      	ldrb	r3, [r3, #16]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d10d      	bne.n	800c4d4 <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c4be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4c0:	f107 0208 	add.w	r2, r7, #8
 800c4c4:	4610      	mov	r0, r2
 800c4c6:	4798      	blx	r3
 800c4c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	3301      	adds	r3, #1
 800c4ce:	2207      	movs	r2, #7
 800c4d0:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c4d2:	e00f      	b.n	800c4f4 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 800c4d4:	6839      	ldr	r1, [r7, #0]
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f000 f9f6 	bl	800c8c8 <USBD_CtlError>
        err++;
 800c4dc:	7afb      	ldrb	r3, [r7, #11]
 800c4de:	3301      	adds	r3, #1
 800c4e0:	72fb      	strb	r3, [r7, #11]
      break;
 800c4e2:	e007      	b.n	800c4f4 <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 800c4e4:	6839      	ldr	r1, [r7, #0]
 800c4e6:	6878      	ldr	r0, [r7, #4]
 800c4e8:	f000 f9ee 	bl	800c8c8 <USBD_CtlError>
      err++;
 800c4ec:	7afb      	ldrb	r3, [r7, #11]
 800c4ee:	3301      	adds	r3, #1
 800c4f0:	72fb      	strb	r3, [r7, #11]
      break;
 800c4f2:	bf00      	nop
  }

  if (err != 0U)
 800c4f4:	7afb      	ldrb	r3, [r7, #11]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d11e      	bne.n	800c538 <USBD_GetDescriptor+0x2f0>
  {
    return;
  }

  if (req->wLength != 0U)
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	88db      	ldrh	r3, [r3, #6]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d016      	beq.n	800c530 <USBD_GetDescriptor+0x2e8>
  {
    if (len != 0U)
 800c502:	893b      	ldrh	r3, [r7, #8]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d00e      	beq.n	800c526 <USBD_GetDescriptor+0x2de>
    {
      len = MIN(len, req->wLength);
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	88da      	ldrh	r2, [r3, #6]
 800c50c:	893b      	ldrh	r3, [r7, #8]
 800c50e:	4293      	cmp	r3, r2
 800c510:	bf28      	it	cs
 800c512:	4613      	movcs	r3, r2
 800c514:	b29b      	uxth	r3, r3
 800c516:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c518:	893b      	ldrh	r3, [r7, #8]
 800c51a:	461a      	mov	r2, r3
 800c51c:	68f9      	ldr	r1, [r7, #12]
 800c51e:	6878      	ldr	r0, [r7, #4]
 800c520:	f000 fa43 	bl	800c9aa <USBD_CtlSendData>
 800c524:	e009      	b.n	800c53a <USBD_GetDescriptor+0x2f2>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c526:	6839      	ldr	r1, [r7, #0]
 800c528:	6878      	ldr	r0, [r7, #4]
 800c52a:	f000 f9cd 	bl	800c8c8 <USBD_CtlError>
 800c52e:	e004      	b.n	800c53a <USBD_GetDescriptor+0x2f2>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c530:	6878      	ldr	r0, [r7, #4]
 800c532:	f000 fa94 	bl	800ca5e <USBD_CtlSendStatus>
 800c536:	e000      	b.n	800c53a <USBD_GetDescriptor+0x2f2>
    return;
 800c538:	bf00      	nop
  }
}
 800c53a:	3710      	adds	r7, #16
 800c53c:	46bd      	mov	sp, r7
 800c53e:	bd80      	pop	{r7, pc}

0800c540 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b084      	sub	sp, #16
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
 800c548:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	889b      	ldrh	r3, [r3, #4]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d131      	bne.n	800c5b6 <USBD_SetAddress+0x76>
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	88db      	ldrh	r3, [r3, #6]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d12d      	bne.n	800c5b6 <USBD_SetAddress+0x76>
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	885b      	ldrh	r3, [r3, #2]
 800c55e:	2b7f      	cmp	r3, #127	@ 0x7f
 800c560:	d829      	bhi.n	800c5b6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	885b      	ldrh	r3, [r3, #2]
 800c566:	b2db      	uxtb	r3, r3
 800c568:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c56c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c574:	b2db      	uxtb	r3, r3
 800c576:	2b03      	cmp	r3, #3
 800c578:	d104      	bne.n	800c584 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c57a:	6839      	ldr	r1, [r7, #0]
 800c57c:	6878      	ldr	r0, [r7, #4]
 800c57e:	f000 f9a3 	bl	800c8c8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c582:	e01d      	b.n	800c5c0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	7bfa      	ldrb	r2, [r7, #15]
 800c588:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c58c:	7bfb      	ldrb	r3, [r7, #15]
 800c58e:	4619      	mov	r1, r3
 800c590:	6878      	ldr	r0, [r7, #4]
 800c592:	f000 fccb 	bl	800cf2c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	f000 fa61 	bl	800ca5e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c59c:	7bfb      	ldrb	r3, [r7, #15]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d004      	beq.n	800c5ac <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	2202      	movs	r2, #2
 800c5a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5aa:	e009      	b.n	800c5c0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2201      	movs	r2, #1
 800c5b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5b4:	e004      	b.n	800c5c0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c5b6:	6839      	ldr	r1, [r7, #0]
 800c5b8:	6878      	ldr	r0, [r7, #4]
 800c5ba:	f000 f985 	bl	800c8c8 <USBD_CtlError>
  }
}
 800c5be:	bf00      	nop
 800c5c0:	bf00      	nop
 800c5c2:	3710      	adds	r7, #16
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bd80      	pop	{r7, pc}

0800c5c8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b084      	sub	sp, #16
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
 800c5d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	885b      	ldrh	r3, [r3, #2]
 800c5da:	b2da      	uxtb	r2, r3
 800c5dc:	4b4c      	ldr	r3, [pc, #304]	@ (800c710 <USBD_SetConfig+0x148>)
 800c5de:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c5e0:	4b4b      	ldr	r3, [pc, #300]	@ (800c710 <USBD_SetConfig+0x148>)
 800c5e2:	781b      	ldrb	r3, [r3, #0]
 800c5e4:	2b01      	cmp	r3, #1
 800c5e6:	d905      	bls.n	800c5f4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c5e8:	6839      	ldr	r1, [r7, #0]
 800c5ea:	6878      	ldr	r0, [r7, #4]
 800c5ec:	f000 f96c 	bl	800c8c8 <USBD_CtlError>
    return USBD_FAIL;
 800c5f0:	2303      	movs	r3, #3
 800c5f2:	e088      	b.n	800c706 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c5fa:	b2db      	uxtb	r3, r3
 800c5fc:	2b02      	cmp	r3, #2
 800c5fe:	d002      	beq.n	800c606 <USBD_SetConfig+0x3e>
 800c600:	2b03      	cmp	r3, #3
 800c602:	d025      	beq.n	800c650 <USBD_SetConfig+0x88>
 800c604:	e071      	b.n	800c6ea <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c606:	4b42      	ldr	r3, [pc, #264]	@ (800c710 <USBD_SetConfig+0x148>)
 800c608:	781b      	ldrb	r3, [r3, #0]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d01c      	beq.n	800c648 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800c60e:	4b40      	ldr	r3, [pc, #256]	@ (800c710 <USBD_SetConfig+0x148>)
 800c610:	781b      	ldrb	r3, [r3, #0]
 800c612:	461a      	mov	r2, r3
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c618:	4b3d      	ldr	r3, [pc, #244]	@ (800c710 <USBD_SetConfig+0x148>)
 800c61a:	781b      	ldrb	r3, [r3, #0]
 800c61c:	4619      	mov	r1, r3
 800c61e:	6878      	ldr	r0, [r7, #4]
 800c620:	f7ff f93b 	bl	800b89a <USBD_SetClassConfig>
 800c624:	4603      	mov	r3, r0
 800c626:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c628:	7bfb      	ldrb	r3, [r7, #15]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d004      	beq.n	800c638 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800c62e:	6839      	ldr	r1, [r7, #0]
 800c630:	6878      	ldr	r0, [r7, #4]
 800c632:	f000 f949 	bl	800c8c8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c636:	e065      	b.n	800c704 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c638:	6878      	ldr	r0, [r7, #4]
 800c63a:	f000 fa10 	bl	800ca5e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	2203      	movs	r2, #3
 800c642:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c646:	e05d      	b.n	800c704 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c648:	6878      	ldr	r0, [r7, #4]
 800c64a:	f000 fa08 	bl	800ca5e <USBD_CtlSendStatus>
      break;
 800c64e:	e059      	b.n	800c704 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c650:	4b2f      	ldr	r3, [pc, #188]	@ (800c710 <USBD_SetConfig+0x148>)
 800c652:	781b      	ldrb	r3, [r3, #0]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d112      	bne.n	800c67e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2202      	movs	r2, #2
 800c65c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c660:	4b2b      	ldr	r3, [pc, #172]	@ (800c710 <USBD_SetConfig+0x148>)
 800c662:	781b      	ldrb	r3, [r3, #0]
 800c664:	461a      	mov	r2, r3
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c66a:	4b29      	ldr	r3, [pc, #164]	@ (800c710 <USBD_SetConfig+0x148>)
 800c66c:	781b      	ldrb	r3, [r3, #0]
 800c66e:	4619      	mov	r1, r3
 800c670:	6878      	ldr	r0, [r7, #4]
 800c672:	f7ff f92e 	bl	800b8d2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c676:	6878      	ldr	r0, [r7, #4]
 800c678:	f000 f9f1 	bl	800ca5e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c67c:	e042      	b.n	800c704 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800c67e:	4b24      	ldr	r3, [pc, #144]	@ (800c710 <USBD_SetConfig+0x148>)
 800c680:	781b      	ldrb	r3, [r3, #0]
 800c682:	461a      	mov	r2, r3
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	685b      	ldr	r3, [r3, #4]
 800c688:	429a      	cmp	r2, r3
 800c68a:	d02a      	beq.n	800c6e2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	685b      	ldr	r3, [r3, #4]
 800c690:	b2db      	uxtb	r3, r3
 800c692:	4619      	mov	r1, r3
 800c694:	6878      	ldr	r0, [r7, #4]
 800c696:	f7ff f91c 	bl	800b8d2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c69a:	4b1d      	ldr	r3, [pc, #116]	@ (800c710 <USBD_SetConfig+0x148>)
 800c69c:	781b      	ldrb	r3, [r3, #0]
 800c69e:	461a      	mov	r2, r3
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c6a4:	4b1a      	ldr	r3, [pc, #104]	@ (800c710 <USBD_SetConfig+0x148>)
 800c6a6:	781b      	ldrb	r3, [r3, #0]
 800c6a8:	4619      	mov	r1, r3
 800c6aa:	6878      	ldr	r0, [r7, #4]
 800c6ac:	f7ff f8f5 	bl	800b89a <USBD_SetClassConfig>
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c6b4:	7bfb      	ldrb	r3, [r7, #15]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d00f      	beq.n	800c6da <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800c6ba:	6839      	ldr	r1, [r7, #0]
 800c6bc:	6878      	ldr	r0, [r7, #4]
 800c6be:	f000 f903 	bl	800c8c8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	685b      	ldr	r3, [r3, #4]
 800c6c6:	b2db      	uxtb	r3, r3
 800c6c8:	4619      	mov	r1, r3
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	f7ff f901 	bl	800b8d2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2202      	movs	r2, #2
 800c6d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c6d8:	e014      	b.n	800c704 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c6da:	6878      	ldr	r0, [r7, #4]
 800c6dc:	f000 f9bf 	bl	800ca5e <USBD_CtlSendStatus>
      break;
 800c6e0:	e010      	b.n	800c704 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f000 f9bb 	bl	800ca5e <USBD_CtlSendStatus>
      break;
 800c6e8:	e00c      	b.n	800c704 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800c6ea:	6839      	ldr	r1, [r7, #0]
 800c6ec:	6878      	ldr	r0, [r7, #4]
 800c6ee:	f000 f8eb 	bl	800c8c8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c6f2:	4b07      	ldr	r3, [pc, #28]	@ (800c710 <USBD_SetConfig+0x148>)
 800c6f4:	781b      	ldrb	r3, [r3, #0]
 800c6f6:	4619      	mov	r1, r3
 800c6f8:	6878      	ldr	r0, [r7, #4]
 800c6fa:	f7ff f8ea 	bl	800b8d2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c6fe:	2303      	movs	r3, #3
 800c700:	73fb      	strb	r3, [r7, #15]
      break;
 800c702:	bf00      	nop
  }

  return ret;
 800c704:	7bfb      	ldrb	r3, [r7, #15]
}
 800c706:	4618      	mov	r0, r3
 800c708:	3710      	adds	r7, #16
 800c70a:	46bd      	mov	sp, r7
 800c70c:	bd80      	pop	{r7, pc}
 800c70e:	bf00      	nop
 800c710:	20001660 	.word	0x20001660

0800c714 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b082      	sub	sp, #8
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
 800c71c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	88db      	ldrh	r3, [r3, #6]
 800c722:	2b01      	cmp	r3, #1
 800c724:	d004      	beq.n	800c730 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c726:	6839      	ldr	r1, [r7, #0]
 800c728:	6878      	ldr	r0, [r7, #4]
 800c72a:	f000 f8cd 	bl	800c8c8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c72e:	e023      	b.n	800c778 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c736:	b2db      	uxtb	r3, r3
 800c738:	2b02      	cmp	r3, #2
 800c73a:	dc02      	bgt.n	800c742 <USBD_GetConfig+0x2e>
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	dc03      	bgt.n	800c748 <USBD_GetConfig+0x34>
 800c740:	e015      	b.n	800c76e <USBD_GetConfig+0x5a>
 800c742:	2b03      	cmp	r3, #3
 800c744:	d00b      	beq.n	800c75e <USBD_GetConfig+0x4a>
 800c746:	e012      	b.n	800c76e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2200      	movs	r2, #0
 800c74c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	3308      	adds	r3, #8
 800c752:	2201      	movs	r2, #1
 800c754:	4619      	mov	r1, r3
 800c756:	6878      	ldr	r0, [r7, #4]
 800c758:	f000 f927 	bl	800c9aa <USBD_CtlSendData>
        break;
 800c75c:	e00c      	b.n	800c778 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	3304      	adds	r3, #4
 800c762:	2201      	movs	r2, #1
 800c764:	4619      	mov	r1, r3
 800c766:	6878      	ldr	r0, [r7, #4]
 800c768:	f000 f91f 	bl	800c9aa <USBD_CtlSendData>
        break;
 800c76c:	e004      	b.n	800c778 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c76e:	6839      	ldr	r1, [r7, #0]
 800c770:	6878      	ldr	r0, [r7, #4]
 800c772:	f000 f8a9 	bl	800c8c8 <USBD_CtlError>
        break;
 800c776:	bf00      	nop
}
 800c778:	bf00      	nop
 800c77a:	3708      	adds	r7, #8
 800c77c:	46bd      	mov	sp, r7
 800c77e:	bd80      	pop	{r7, pc}

0800c780 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b082      	sub	sp, #8
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
 800c788:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c790:	b2db      	uxtb	r3, r3
 800c792:	3b01      	subs	r3, #1
 800c794:	2b02      	cmp	r3, #2
 800c796:	d81e      	bhi.n	800c7d6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	88db      	ldrh	r3, [r3, #6]
 800c79c:	2b02      	cmp	r3, #2
 800c79e:	d004      	beq.n	800c7aa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c7a0:	6839      	ldr	r1, [r7, #0]
 800c7a2:	6878      	ldr	r0, [r7, #4]
 800c7a4:	f000 f890 	bl	800c8c8 <USBD_CtlError>
        break;
 800c7a8:	e01a      	b.n	800c7e0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	2201      	movs	r2, #1
 800c7ae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d005      	beq.n	800c7c6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	68db      	ldr	r3, [r3, #12]
 800c7be:	f043 0202 	orr.w	r2, r3, #2
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	330c      	adds	r3, #12
 800c7ca:	2202      	movs	r2, #2
 800c7cc:	4619      	mov	r1, r3
 800c7ce:	6878      	ldr	r0, [r7, #4]
 800c7d0:	f000 f8eb 	bl	800c9aa <USBD_CtlSendData>
      break;
 800c7d4:	e004      	b.n	800c7e0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c7d6:	6839      	ldr	r1, [r7, #0]
 800c7d8:	6878      	ldr	r0, [r7, #4]
 800c7da:	f000 f875 	bl	800c8c8 <USBD_CtlError>
      break;
 800c7de:	bf00      	nop
  }
}
 800c7e0:	bf00      	nop
 800c7e2:	3708      	adds	r7, #8
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}

0800c7e8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b082      	sub	sp, #8
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
 800c7f0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	885b      	ldrh	r3, [r3, #2]
 800c7f6:	2b01      	cmp	r3, #1
 800c7f8:	d106      	bne.n	800c808 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	2201      	movs	r2, #1
 800c7fe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c802:	6878      	ldr	r0, [r7, #4]
 800c804:	f000 f92b 	bl	800ca5e <USBD_CtlSendStatus>
  }
}
 800c808:	bf00      	nop
 800c80a:	3708      	adds	r7, #8
 800c80c:	46bd      	mov	sp, r7
 800c80e:	bd80      	pop	{r7, pc}

0800c810 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b082      	sub	sp, #8
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
 800c818:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c820:	b2db      	uxtb	r3, r3
 800c822:	3b01      	subs	r3, #1
 800c824:	2b02      	cmp	r3, #2
 800c826:	d80b      	bhi.n	800c840 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	885b      	ldrh	r3, [r3, #2]
 800c82c:	2b01      	cmp	r3, #1
 800c82e:	d10c      	bne.n	800c84a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	2200      	movs	r2, #0
 800c834:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c838:	6878      	ldr	r0, [r7, #4]
 800c83a:	f000 f910 	bl	800ca5e <USBD_CtlSendStatus>
      }
      break;
 800c83e:	e004      	b.n	800c84a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c840:	6839      	ldr	r1, [r7, #0]
 800c842:	6878      	ldr	r0, [r7, #4]
 800c844:	f000 f840 	bl	800c8c8 <USBD_CtlError>
      break;
 800c848:	e000      	b.n	800c84c <USBD_ClrFeature+0x3c>
      break;
 800c84a:	bf00      	nop
  }
}
 800c84c:	bf00      	nop
 800c84e:	3708      	adds	r7, #8
 800c850:	46bd      	mov	sp, r7
 800c852:	bd80      	pop	{r7, pc}

0800c854 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b084      	sub	sp, #16
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
 800c85c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	781a      	ldrb	r2, [r3, #0]
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	3301      	adds	r3, #1
 800c86e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	781a      	ldrb	r2, [r3, #0]
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	3301      	adds	r3, #1
 800c87c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c87e:	68f8      	ldr	r0, [r7, #12]
 800c880:	f7ff faa9 	bl	800bdd6 <SWAPBYTE>
 800c884:	4603      	mov	r3, r0
 800c886:	461a      	mov	r2, r3
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	3301      	adds	r3, #1
 800c890:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	3301      	adds	r3, #1
 800c896:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c898:	68f8      	ldr	r0, [r7, #12]
 800c89a:	f7ff fa9c 	bl	800bdd6 <SWAPBYTE>
 800c89e:	4603      	mov	r3, r0
 800c8a0:	461a      	mov	r2, r3
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	3301      	adds	r3, #1
 800c8aa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	3301      	adds	r3, #1
 800c8b0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c8b2:	68f8      	ldr	r0, [r7, #12]
 800c8b4:	f7ff fa8f 	bl	800bdd6 <SWAPBYTE>
 800c8b8:	4603      	mov	r3, r0
 800c8ba:	461a      	mov	r2, r3
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	80da      	strh	r2, [r3, #6]
}
 800c8c0:	bf00      	nop
 800c8c2:	3710      	adds	r7, #16
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	bd80      	pop	{r7, pc}

0800c8c8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b082      	sub	sp, #8
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
 800c8d0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c8d2:	2180      	movs	r1, #128	@ 0x80
 800c8d4:	6878      	ldr	r0, [r7, #4]
 800c8d6:	f000 fabf 	bl	800ce58 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c8da:	2100      	movs	r1, #0
 800c8dc:	6878      	ldr	r0, [r7, #4]
 800c8de:	f000 fabb 	bl	800ce58 <USBD_LL_StallEP>
}
 800c8e2:	bf00      	nop
 800c8e4:	3708      	adds	r7, #8
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	bd80      	pop	{r7, pc}

0800c8ea <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c8ea:	b580      	push	{r7, lr}
 800c8ec:	b086      	sub	sp, #24
 800c8ee:	af00      	add	r7, sp, #0
 800c8f0:	60f8      	str	r0, [r7, #12]
 800c8f2:	60b9      	str	r1, [r7, #8]
 800c8f4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d036      	beq.n	800c96e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c904:	6938      	ldr	r0, [r7, #16]
 800c906:	f000 f836 	bl	800c976 <USBD_GetLen>
 800c90a:	4603      	mov	r3, r0
 800c90c:	3301      	adds	r3, #1
 800c90e:	b29b      	uxth	r3, r3
 800c910:	005b      	lsls	r3, r3, #1
 800c912:	b29a      	uxth	r2, r3
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c918:	7dfb      	ldrb	r3, [r7, #23]
 800c91a:	68ba      	ldr	r2, [r7, #8]
 800c91c:	4413      	add	r3, r2
 800c91e:	687a      	ldr	r2, [r7, #4]
 800c920:	7812      	ldrb	r2, [r2, #0]
 800c922:	701a      	strb	r2, [r3, #0]
  idx++;
 800c924:	7dfb      	ldrb	r3, [r7, #23]
 800c926:	3301      	adds	r3, #1
 800c928:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c92a:	7dfb      	ldrb	r3, [r7, #23]
 800c92c:	68ba      	ldr	r2, [r7, #8]
 800c92e:	4413      	add	r3, r2
 800c930:	2203      	movs	r2, #3
 800c932:	701a      	strb	r2, [r3, #0]
  idx++;
 800c934:	7dfb      	ldrb	r3, [r7, #23]
 800c936:	3301      	adds	r3, #1
 800c938:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c93a:	e013      	b.n	800c964 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c93c:	7dfb      	ldrb	r3, [r7, #23]
 800c93e:	68ba      	ldr	r2, [r7, #8]
 800c940:	4413      	add	r3, r2
 800c942:	693a      	ldr	r2, [r7, #16]
 800c944:	7812      	ldrb	r2, [r2, #0]
 800c946:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c948:	693b      	ldr	r3, [r7, #16]
 800c94a:	3301      	adds	r3, #1
 800c94c:	613b      	str	r3, [r7, #16]
    idx++;
 800c94e:	7dfb      	ldrb	r3, [r7, #23]
 800c950:	3301      	adds	r3, #1
 800c952:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c954:	7dfb      	ldrb	r3, [r7, #23]
 800c956:	68ba      	ldr	r2, [r7, #8]
 800c958:	4413      	add	r3, r2
 800c95a:	2200      	movs	r2, #0
 800c95c:	701a      	strb	r2, [r3, #0]
    idx++;
 800c95e:	7dfb      	ldrb	r3, [r7, #23]
 800c960:	3301      	adds	r3, #1
 800c962:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c964:	693b      	ldr	r3, [r7, #16]
 800c966:	781b      	ldrb	r3, [r3, #0]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d1e7      	bne.n	800c93c <USBD_GetString+0x52>
 800c96c:	e000      	b.n	800c970 <USBD_GetString+0x86>
    return;
 800c96e:	bf00      	nop
  }
}
 800c970:	3718      	adds	r7, #24
 800c972:	46bd      	mov	sp, r7
 800c974:	bd80      	pop	{r7, pc}

0800c976 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c976:	b480      	push	{r7}
 800c978:	b085      	sub	sp, #20
 800c97a:	af00      	add	r7, sp, #0
 800c97c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c97e:	2300      	movs	r3, #0
 800c980:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c986:	e005      	b.n	800c994 <USBD_GetLen+0x1e>
  {
    len++;
 800c988:	7bfb      	ldrb	r3, [r7, #15]
 800c98a:	3301      	adds	r3, #1
 800c98c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c98e:	68bb      	ldr	r3, [r7, #8]
 800c990:	3301      	adds	r3, #1
 800c992:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c994:	68bb      	ldr	r3, [r7, #8]
 800c996:	781b      	ldrb	r3, [r3, #0]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d1f5      	bne.n	800c988 <USBD_GetLen+0x12>
  }

  return len;
 800c99c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c99e:	4618      	mov	r0, r3
 800c9a0:	3714      	adds	r7, #20
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a8:	4770      	bx	lr

0800c9aa <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c9aa:	b580      	push	{r7, lr}
 800c9ac:	b084      	sub	sp, #16
 800c9ae:	af00      	add	r7, sp, #0
 800c9b0:	60f8      	str	r0, [r7, #12]
 800c9b2:	60b9      	str	r1, [r7, #8]
 800c9b4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	2202      	movs	r2, #2
 800c9ba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	687a      	ldr	r2, [r7, #4]
 800c9c2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	687a      	ldr	r2, [r7, #4]
 800c9c8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	68ba      	ldr	r2, [r7, #8]
 800c9ce:	2100      	movs	r1, #0
 800c9d0:	68f8      	ldr	r0, [r7, #12]
 800c9d2:	f000 faca 	bl	800cf6a <USBD_LL_Transmit>

  return USBD_OK;
 800c9d6:	2300      	movs	r3, #0
}
 800c9d8:	4618      	mov	r0, r3
 800c9da:	3710      	adds	r7, #16
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	bd80      	pop	{r7, pc}

0800c9e0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b084      	sub	sp, #16
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	60f8      	str	r0, [r7, #12]
 800c9e8:	60b9      	str	r1, [r7, #8]
 800c9ea:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	68ba      	ldr	r2, [r7, #8]
 800c9f0:	2100      	movs	r1, #0
 800c9f2:	68f8      	ldr	r0, [r7, #12]
 800c9f4:	f000 fab9 	bl	800cf6a <USBD_LL_Transmit>

  return USBD_OK;
 800c9f8:	2300      	movs	r3, #0
}
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	3710      	adds	r7, #16
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	bd80      	pop	{r7, pc}

0800ca02 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ca02:	b580      	push	{r7, lr}
 800ca04:	b084      	sub	sp, #16
 800ca06:	af00      	add	r7, sp, #0
 800ca08:	60f8      	str	r0, [r7, #12]
 800ca0a:	60b9      	str	r1, [r7, #8]
 800ca0c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	2203      	movs	r2, #3
 800ca12:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	687a      	ldr	r2, [r7, #4]
 800ca1a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	687a      	ldr	r2, [r7, #4]
 800ca22:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	68ba      	ldr	r2, [r7, #8]
 800ca2a:	2100      	movs	r1, #0
 800ca2c:	68f8      	ldr	r0, [r7, #12]
 800ca2e:	f000 fabd 	bl	800cfac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ca32:	2300      	movs	r3, #0
}
 800ca34:	4618      	mov	r0, r3
 800ca36:	3710      	adds	r7, #16
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	bd80      	pop	{r7, pc}

0800ca3c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b084      	sub	sp, #16
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	60f8      	str	r0, [r7, #12]
 800ca44:	60b9      	str	r1, [r7, #8]
 800ca46:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	68ba      	ldr	r2, [r7, #8]
 800ca4c:	2100      	movs	r1, #0
 800ca4e:	68f8      	ldr	r0, [r7, #12]
 800ca50:	f000 faac 	bl	800cfac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ca54:	2300      	movs	r3, #0
}
 800ca56:	4618      	mov	r0, r3
 800ca58:	3710      	adds	r7, #16
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bd80      	pop	{r7, pc}

0800ca5e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ca5e:	b580      	push	{r7, lr}
 800ca60:	b082      	sub	sp, #8
 800ca62:	af00      	add	r7, sp, #0
 800ca64:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2204      	movs	r2, #4
 800ca6a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ca6e:	2300      	movs	r3, #0
 800ca70:	2200      	movs	r2, #0
 800ca72:	2100      	movs	r1, #0
 800ca74:	6878      	ldr	r0, [r7, #4]
 800ca76:	f000 fa78 	bl	800cf6a <USBD_LL_Transmit>

  return USBD_OK;
 800ca7a:	2300      	movs	r3, #0
}
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	3708      	adds	r7, #8
 800ca80:	46bd      	mov	sp, r7
 800ca82:	bd80      	pop	{r7, pc}

0800ca84 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b082      	sub	sp, #8
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2205      	movs	r2, #5
 800ca90:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ca94:	2300      	movs	r3, #0
 800ca96:	2200      	movs	r2, #0
 800ca98:	2100      	movs	r1, #0
 800ca9a:	6878      	ldr	r0, [r7, #4]
 800ca9c:	f000 fa86 	bl	800cfac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800caa0:	2300      	movs	r3, #0
}
 800caa2:	4618      	mov	r0, r3
 800caa4:	3708      	adds	r7, #8
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bd80      	pop	{r7, pc}

0800caaa <HAL_PCDEx_SetTxFiFoInBytes>:
/* Private functions ---------------------------------------------------------*/

/* USER CODE BEGIN 1 */
#if(!STM32F1_DEVICE)
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFoInBytes(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800caaa:	b580      	push	{r7, lr}
 800caac:	b082      	sub	sp, #8
 800caae:	af00      	add	r7, sp, #0
 800cab0:	6078      	str	r0, [r7, #4]
 800cab2:	460b      	mov	r3, r1
 800cab4:	70fb      	strb	r3, [r7, #3]
 800cab6:	4613      	mov	r3, r2
 800cab8:	803b      	strh	r3, [r7, #0]
	return HAL_PCDEx_SetTxFiFo(hpcd, fifo, (size/4));
 800caba:	883b      	ldrh	r3, [r7, #0]
 800cabc:	089b      	lsrs	r3, r3, #2
 800cabe:	b29a      	uxth	r2, r3
 800cac0:	78fb      	ldrb	r3, [r7, #3]
 800cac2:	4619      	mov	r1, r3
 800cac4:	6878      	ldr	r0, [r7, #4]
 800cac6:	f7f9 fa57 	bl	8005f78 <HAL_PCDEx_SetTxFiFo>
 800caca:	4603      	mov	r3, r0
}
 800cacc:	4618      	mov	r0, r3
 800cace:	3708      	adds	r7, #8
 800cad0:	46bd      	mov	sp, r7
 800cad2:	bd80      	pop	{r7, pc}

0800cad4 <HAL_PCDEx_SetRxFiFoInBytes>:

HAL_StatusTypeDef HAL_PCDEx_SetRxFiFoInBytes(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b082      	sub	sp, #8
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
 800cadc:	460b      	mov	r3, r1
 800cade:	807b      	strh	r3, [r7, #2]
	return HAL_PCDEx_SetRxFiFo(hpcd, (size/4));
 800cae0:	887b      	ldrh	r3, [r7, #2]
 800cae2:	089b      	lsrs	r3, r3, #2
 800cae4:	b29b      	uxth	r3, r3
 800cae6:	4619      	mov	r1, r3
 800cae8:	6878      	ldr	r0, [r7, #4]
 800caea:	f7f9 fa8c 	bl	8006006 <HAL_PCDEx_SetRxFiFo>
 800caee:	4603      	mov	r3, r0
}
 800caf0:	4618      	mov	r0, r3
 800caf2:	3708      	adds	r7, #8
 800caf4:	46bd      	mov	sp, r7
 800caf6:	bd80      	pop	{r7, pc}

0800caf8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b082      	sub	sp, #8
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef *)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800cb0c:	4619      	mov	r1, r3
 800cb0e:	4610      	mov	r0, r2
 800cb10:	f7fe fef7 	bl	800b902 <USBD_LL_SetupStage>
}
 800cb14:	bf00      	nop
 800cb16:	3708      	adds	r7, #8
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	bd80      	pop	{r7, pc}

0800cb1c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b082      	sub	sp, #8
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
 800cb24:	460b      	mov	r3, r1
 800cb26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800cb2e:	78fa      	ldrb	r2, [r7, #3]
 800cb30:	6879      	ldr	r1, [r7, #4]
 800cb32:	4613      	mov	r3, r2
 800cb34:	00db      	lsls	r3, r3, #3
 800cb36:	4413      	add	r3, r2
 800cb38:	009b      	lsls	r3, r3, #2
 800cb3a:	440b      	add	r3, r1
 800cb3c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800cb40:	681a      	ldr	r2, [r3, #0]
 800cb42:	78fb      	ldrb	r3, [r7, #3]
 800cb44:	4619      	mov	r1, r3
 800cb46:	f7fe ff31 	bl	800b9ac <USBD_LL_DataOutStage>
}
 800cb4a:	bf00      	nop
 800cb4c:	3708      	adds	r7, #8
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bd80      	pop	{r7, pc}

0800cb52 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb52:	b580      	push	{r7, lr}
 800cb54:	b082      	sub	sp, #8
 800cb56:	af00      	add	r7, sp, #0
 800cb58:	6078      	str	r0, [r7, #4]
 800cb5a:	460b      	mov	r3, r1
 800cb5c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800cb64:	78fa      	ldrb	r2, [r7, #3]
 800cb66:	6879      	ldr	r1, [r7, #4]
 800cb68:	4613      	mov	r3, r2
 800cb6a:	00db      	lsls	r3, r3, #3
 800cb6c:	4413      	add	r3, r2
 800cb6e:	009b      	lsls	r3, r3, #2
 800cb70:	440b      	add	r3, r1
 800cb72:	3320      	adds	r3, #32
 800cb74:	681a      	ldr	r2, [r3, #0]
 800cb76:	78fb      	ldrb	r3, [r7, #3]
 800cb78:	4619      	mov	r1, r3
 800cb7a:	f7fe ff7a 	bl	800ba72 <USBD_LL_DataInStage>
}
 800cb7e:	bf00      	nop
 800cb80:	3708      	adds	r7, #8
 800cb82:	46bd      	mov	sp, r7
 800cb84:	bd80      	pop	{r7, pc}

0800cb86 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb86:	b580      	push	{r7, lr}
 800cb88:	b082      	sub	sp, #8
 800cb8a:	af00      	add	r7, sp, #0
 800cb8c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef *)hpcd->pData);
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cb94:	4618      	mov	r0, r3
 800cb96:	f7ff f889 	bl	800bcac <USBD_LL_SOF>
}
 800cb9a:	bf00      	nop
 800cb9c:	3708      	adds	r7, #8
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bd80      	pop	{r7, pc}

0800cba2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cba2:	b580      	push	{r7, lr}
 800cba4:	b084      	sub	sp, #16
 800cba6:	af00      	add	r7, sp, #0
 800cba8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cbaa:	2301      	movs	r3, #1
 800cbac:	73fb      	strb	r3, [r7, #15]

  if (hpcd->Init.speed == PCD_SPEED_FULL)
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	79db      	ldrb	r3, [r3, #7]
 800cbb2:	2b02      	cmp	r3, #2
 800cbb4:	d102      	bne.n	800cbbc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_FULL; 
 800cbb6:	2301      	movs	r3, #1
 800cbb8:	73fb      	strb	r3, [r7, #15]
 800cbba:	e008      	b.n	800cbce <HAL_PCD_ResetCallback+0x2c>
  }
  #if(!STM32F1_DEVICE)
  else if (hpcd->Init.speed == PCD_SPEED_HIGH)
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	79db      	ldrb	r3, [r3, #7]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d102      	bne.n	800cbca <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_HIGH;
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	73fb      	strb	r3, [r7, #15]
 800cbc8:	e001      	b.n	800cbce <HAL_PCD_ResetCallback+0x2c>
  }
  #endif
  else
  {
    Error_Handler();
 800cbca:	f7f5 f9bf 	bl	8001f4c <Error_Handler>
  }
  /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef *)hpcd->pData, speed);
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cbd4:	7bfa      	ldrb	r2, [r7, #15]
 800cbd6:	4611      	mov	r1, r2
 800cbd8:	4618      	mov	r0, r3
 800cbda:	f7ff f829 	bl	800bc30 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef *)hpcd->pData);
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	f7fe ffda 	bl	800bb9e <USBD_LL_Reset>
}
 800cbea:	bf00      	nop
 800cbec:	3710      	adds	r7, #16
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bd80      	pop	{r7, pc}
	...

0800cbf4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b082      	sub	sp, #8
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef *)hpcd->pData);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cc02:	4618      	mov	r0, r3
 800cc04:	f7ff f824 	bl	800bc50 <USBD_LL_Suspend>
#if (!STM32F1_DEVICE)
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	687a      	ldr	r2, [r7, #4]
 800cc14:	6812      	ldr	r2, [r2, #0]
 800cc16:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800cc1a:	f043 0301 	orr.w	r3, r3, #1
 800cc1e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	7adb      	ldrb	r3, [r3, #11]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d005      	beq.n	800cc34 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cc28:	4b04      	ldr	r3, [pc, #16]	@ (800cc3c <HAL_PCD_SuspendCallback+0x48>)
 800cc2a:	691b      	ldr	r3, [r3, #16]
 800cc2c:	4a03      	ldr	r2, [pc, #12]	@ (800cc3c <HAL_PCD_SuspendCallback+0x48>)
 800cc2e:	f043 0306 	orr.w	r3, r3, #6
 800cc32:	6113      	str	r3, [r2, #16]
  }
#endif
  /* USER CODE END 2 */
}
 800cc34:	bf00      	nop
 800cc36:	3708      	adds	r7, #8
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	bd80      	pop	{r7, pc}
 800cc3c:	e000ed00 	.word	0xe000ed00

0800cc40 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b082      	sub	sp, #8
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef *)hpcd->pData);
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cc4e:	4618      	mov	r0, r3
 800cc50:	f7ff f814 	bl	800bc7c <USBD_LL_Resume>
}
 800cc54:	bf00      	nop
 800cc56:	3708      	adds	r7, #8
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	bd80      	pop	{r7, pc}

0800cc5c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b082      	sub	sp, #8
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	6078      	str	r0, [r7, #4]
 800cc64:	460b      	mov	r3, r1
 800cc66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cc6e:	78fa      	ldrb	r2, [r7, #3]
 800cc70:	4611      	mov	r1, r2
 800cc72:	4618      	mov	r0, r3
 800cc74:	f7ff f862 	bl	800bd3c <USBD_LL_IsoOUTIncomplete>
}
 800cc78:	bf00      	nop
 800cc7a:	3708      	adds	r7, #8
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	bd80      	pop	{r7, pc}

0800cc80 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b082      	sub	sp, #8
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
 800cc88:	460b      	mov	r3, r1
 800cc8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cc92:	78fa      	ldrb	r2, [r7, #3]
 800cc94:	4611      	mov	r1, r2
 800cc96:	4618      	mov	r0, r3
 800cc98:	f7ff f82a 	bl	800bcf0 <USBD_LL_IsoINIncomplete>
}
 800cc9c:	bf00      	nop
 800cc9e:	3708      	adds	r7, #8
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd80      	pop	{r7, pc}

0800cca4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b082      	sub	sp, #8
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef *)hpcd->pData);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	f7ff f868 	bl	800bd88 <USBD_LL_DevConnected>
}
 800ccb8:	bf00      	nop
 800ccba:	3708      	adds	r7, #8
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	bd80      	pop	{r7, pc}

0800ccc0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b082      	sub	sp, #8
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef *)hpcd->pData);
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ccce:	4618      	mov	r0, r3
 800ccd0:	f7ff f865 	bl	800bd9e <USBD_LL_DevDisconnected>
}
 800ccd4:	bf00      	nop
 800ccd6:	3708      	adds	r7, #8
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	bd80      	pop	{r7, pc}

0800ccdc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b084      	sub	sp, #16
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
#else
  /**FULL SPEED USB */
#if (STM32F1_DEVICE) /** for STM32F1 or similar */
  hpcd_USB_OTG_PTR = &hpcd_USB_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
#else
  hpcd_USB_OTG_PTR = &hpcd_USB_OTG_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
 800cce4:	4b27      	ldr	r3, [pc, #156]	@ (800cd84 <USBD_LL_Init+0xa8>)
 800cce6:	4a28      	ldr	r2, [pc, #160]	@ (800cd88 <USBD_LL_Init+0xac>)
 800cce8:	601a      	str	r2, [r3, #0]
#endif

  if (pdev->id == DEVICE_FS)
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	781b      	ldrb	r3, [r3, #0]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d143      	bne.n	800cd7a <USBD_LL_Init+0x9e>
  {
    /* Link the driver to the stack. */
    hpcd_USB_OTG_PTR->pData = pdev;
 800ccf2:	4b24      	ldr	r3, [pc, #144]	@ (800cd84 <USBD_LL_Init+0xa8>)
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	687a      	ldr	r2, [r7, #4]
 800ccf8:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
    pdev->pData = hpcd_USB_OTG_PTR;
 800ccfc:	4b21      	ldr	r3, [pc, #132]	@ (800cd84 <USBD_LL_Init+0xa8>)
 800ccfe:	681a      	ldr	r2, [r3, #0]
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	f8c3 2310 	str.w	r2, [r3, #784]	@ 0x310
      pma_track += 8;
    }
#endif
#else /** if HAL_PCDEx_SetRxFiFo() is used by HAL driver */

    HAL_PCDEx_SetRxFiFoInBytes(hpcd_USB_OTG_PTR, 512); // ALL OUT EP Buffer
 800cd06:	4b1f      	ldr	r3, [pc, #124]	@ (800cd84 <USBD_LL_Init+0xa8>)
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800cd0e:	4618      	mov	r0, r3
 800cd10:	f7ff fee0 	bl	800cad4 <HAL_PCDEx_SetRxFiFoInBytes>

    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, 0, 64); // EP0 IN
 800cd14:	4b1b      	ldr	r3, [pc, #108]	@ (800cd84 <USBD_LL_Init+0xa8>)
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	2240      	movs	r2, #64	@ 0x40
 800cd1a:	2100      	movs	r1, #0
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	f7ff fec4 	bl	800caaa <HAL_PCDEx_SetTxFiFoInBytes>
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (HID_KEYBOARD_IN_EP & 0x7F), 64);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CUSTOM_HID_IN_EP & 0x7F), 64);
 800cd22:	4b18      	ldr	r3, [pc, #96]	@ (800cd84 <USBD_LL_Init+0xa8>)
 800cd24:	6818      	ldr	r0, [r3, #0]
 800cd26:	4b19      	ldr	r3, [pc, #100]	@ (800cd8c <USBD_LL_Init+0xb0>)
 800cd28:	781b      	ldrb	r3, [r3, #0]
 800cd2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cd2e:	b2db      	uxtb	r3, r3
 800cd30:	2240      	movs	r2, #64	@ 0x40
 800cd32:	4619      	mov	r1, r3
 800cd34:	f7ff feb9 	bl	800caaa <HAL_PCDEx_SetTxFiFoInBytes>
#endif
#if (USBD_USE_PRNTR == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (PRNT_IN_EP & 0x7F), 128);
#endif
#if (USBD_USE_CDC_ACM == 1)
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800cd38:	2300      	movs	r3, #0
 800cd3a:	73fb      	strb	r3, [r7, #15]
 800cd3c:	e01a      	b.n	800cd74 <USBD_LL_Init+0x98>
    {
      HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CDC_IN_EP[i] & 0x7F), 128);
 800cd3e:	4b11      	ldr	r3, [pc, #68]	@ (800cd84 <USBD_LL_Init+0xa8>)
 800cd40:	6818      	ldr	r0, [r3, #0]
 800cd42:	7bfb      	ldrb	r3, [r7, #15]
 800cd44:	4a12      	ldr	r2, [pc, #72]	@ (800cd90 <USBD_LL_Init+0xb4>)
 800cd46:	5cd3      	ldrb	r3, [r2, r3]
 800cd48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cd4c:	b2db      	uxtb	r3, r3
 800cd4e:	2280      	movs	r2, #128	@ 0x80
 800cd50:	4619      	mov	r1, r3
 800cd52:	f7ff feaa 	bl	800caaa <HAL_PCDEx_SetTxFiFoInBytes>
      HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CDC_CMD_EP[i] & 0x7F), 64);
 800cd56:	4b0b      	ldr	r3, [pc, #44]	@ (800cd84 <USBD_LL_Init+0xa8>)
 800cd58:	6818      	ldr	r0, [r3, #0]
 800cd5a:	7bfb      	ldrb	r3, [r7, #15]
 800cd5c:	4a0d      	ldr	r2, [pc, #52]	@ (800cd94 <USBD_LL_Init+0xb8>)
 800cd5e:	5cd3      	ldrb	r3, [r2, r3]
 800cd60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cd64:	b2db      	uxtb	r3, r3
 800cd66:	2240      	movs	r2, #64	@ 0x40
 800cd68:	4619      	mov	r1, r3
 800cd6a:	f7ff fe9e 	bl	800caaa <HAL_PCDEx_SetTxFiFoInBytes>
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800cd6e:	7bfb      	ldrb	r3, [r7, #15]
 800cd70:	3301      	adds	r3, #1
 800cd72:	73fb      	strb	r3, [r7, #15]
 800cd74:	7bfb      	ldrb	r3, [r7, #15]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d0e1      	beq.n	800cd3e <USBD_LL_Init+0x62>
  HAL_PCD_RegisterDataOutStageCallback(hpcd_USB_OTG_PTR, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(hpcd_USB_OTG_PTR, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  return USBD_OK;
 800cd7a:	2300      	movs	r3, #0
}
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	3710      	adds	r7, #16
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}
 800cd84:	20001664 	.word	0x20001664
 800cd88:	2000086c 	.word	0x2000086c
 800cd8c:	200001f6 	.word	0x200001f6
 800cd90:	200012f8 	.word	0x200012f8
 800cd94:	20001300 	.word	0x20001300

0800cd98 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b084      	sub	sp, #16
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cda0:	2300      	movs	r3, #0
 800cda2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cda4:	2300      	movs	r3, #0
 800cda6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800cdae:	4618      	mov	r0, r3
 800cdb0:	f7f7 ffd5 	bl	8004d5e <HAL_PCD_Start>
 800cdb4:	4603      	mov	r3, r0
 800cdb6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800cdb8:	7bfb      	ldrb	r3, [r7, #15]
 800cdba:	4618      	mov	r0, r3
 800cdbc:	f000 f92a 	bl	800d014 <USBD_Get_USB_Status>
 800cdc0:	4603      	mov	r3, r0
 800cdc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cdc4:	7bbb      	ldrb	r3, [r7, #14]
}
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	3710      	adds	r7, #16
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	bd80      	pop	{r7, pc}

0800cdce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cdce:	b580      	push	{r7, lr}
 800cdd0:	b084      	sub	sp, #16
 800cdd2:	af00      	add	r7, sp, #0
 800cdd4:	6078      	str	r0, [r7, #4]
 800cdd6:	4608      	mov	r0, r1
 800cdd8:	4611      	mov	r1, r2
 800cdda:	461a      	mov	r2, r3
 800cddc:	4603      	mov	r3, r0
 800cdde:	70fb      	strb	r3, [r7, #3]
 800cde0:	460b      	mov	r3, r1
 800cde2:	70bb      	strb	r3, [r7, #2]
 800cde4:	4613      	mov	r3, r2
 800cde6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cde8:	2300      	movs	r3, #0
 800cdea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cdec:	2300      	movs	r3, #0
 800cdee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 800cdf6:	78bb      	ldrb	r3, [r7, #2]
 800cdf8:	883a      	ldrh	r2, [r7, #0]
 800cdfa:	78f9      	ldrb	r1, [r7, #3]
 800cdfc:	f7f8 fcd6 	bl	80057ac <HAL_PCD_EP_Open>
 800ce00:	4603      	mov	r3, r0
 800ce02:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800ce04:	7bfb      	ldrb	r3, [r7, #15]
 800ce06:	4618      	mov	r0, r3
 800ce08:	f000 f904 	bl	800d014 <USBD_Get_USB_Status>
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce10:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce12:	4618      	mov	r0, r3
 800ce14:	3710      	adds	r7, #16
 800ce16:	46bd      	mov	sp, r7
 800ce18:	bd80      	pop	{r7, pc}

0800ce1a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce1a:	b580      	push	{r7, lr}
 800ce1c:	b084      	sub	sp, #16
 800ce1e:	af00      	add	r7, sp, #0
 800ce20:	6078      	str	r0, [r7, #4]
 800ce22:	460b      	mov	r3, r1
 800ce24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce26:	2300      	movs	r3, #0
 800ce28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800ce34:	78fa      	ldrb	r2, [r7, #3]
 800ce36:	4611      	mov	r1, r2
 800ce38:	4618      	mov	r0, r3
 800ce3a:	f7f8 fd21 	bl	8005880 <HAL_PCD_EP_Close>
 800ce3e:	4603      	mov	r3, r0
 800ce40:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800ce42:	7bfb      	ldrb	r3, [r7, #15]
 800ce44:	4618      	mov	r0, r3
 800ce46:	f000 f8e5 	bl	800d014 <USBD_Get_USB_Status>
 800ce4a:	4603      	mov	r3, r0
 800ce4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce4e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce50:	4618      	mov	r0, r3
 800ce52:	3710      	adds	r7, #16
 800ce54:	46bd      	mov	sp, r7
 800ce56:	bd80      	pop	{r7, pc}

0800ce58 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b084      	sub	sp, #16
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
 800ce60:	460b      	mov	r3, r1
 800ce62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce64:	2300      	movs	r3, #0
 800ce66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce68:	2300      	movs	r3, #0
 800ce6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800ce72:	78fa      	ldrb	r2, [r7, #3]
 800ce74:	4611      	mov	r1, r2
 800ce76:	4618      	mov	r0, r3
 800ce78:	f7f8 fdd9 	bl	8005a2e <HAL_PCD_EP_SetStall>
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800ce80:	7bfb      	ldrb	r3, [r7, #15]
 800ce82:	4618      	mov	r0, r3
 800ce84:	f000 f8c6 	bl	800d014 <USBD_Get_USB_Status>
 800ce88:	4603      	mov	r3, r0
 800ce8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce8c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce8e:	4618      	mov	r0, r3
 800ce90:	3710      	adds	r7, #16
 800ce92:	46bd      	mov	sp, r7
 800ce94:	bd80      	pop	{r7, pc}

0800ce96 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce96:	b580      	push	{r7, lr}
 800ce98:	b084      	sub	sp, #16
 800ce9a:	af00      	add	r7, sp, #0
 800ce9c:	6078      	str	r0, [r7, #4]
 800ce9e:	460b      	mov	r3, r1
 800cea0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cea2:	2300      	movs	r3, #0
 800cea4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cea6:	2300      	movs	r3, #0
 800cea8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800ceb0:	78fa      	ldrb	r2, [r7, #3]
 800ceb2:	4611      	mov	r1, r2
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	f7f8 fe1d 	bl	8005af4 <HAL_PCD_EP_ClrStall>
 800ceba:	4603      	mov	r3, r0
 800cebc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800cebe:	7bfb      	ldrb	r3, [r7, #15]
 800cec0:	4618      	mov	r0, r3
 800cec2:	f000 f8a7 	bl	800d014 <USBD_Get_USB_Status>
 800cec6:	4603      	mov	r3, r0
 800cec8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ceca:	7bbb      	ldrb	r3, [r7, #14]
}
 800cecc:	4618      	mov	r0, r3
 800cece:	3710      	adds	r7, #16
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}

0800ced4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ced4:	b480      	push	{r7}
 800ced6:	b085      	sub	sp, #20
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
 800cedc:	460b      	mov	r3, r1
 800cede:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800cee6:	60fb      	str	r3, [r7, #12]

  if ((ep_addr & 0x80) == 0x80)
 800cee8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	da0b      	bge.n	800cf08 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cef0:	78fb      	ldrb	r3, [r7, #3]
 800cef2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cef6:	68f9      	ldr	r1, [r7, #12]
 800cef8:	4613      	mov	r3, r2
 800cefa:	00db      	lsls	r3, r3, #3
 800cefc:	4413      	add	r3, r2
 800cefe:	009b      	lsls	r3, r3, #2
 800cf00:	440b      	add	r3, r1
 800cf02:	3316      	adds	r3, #22
 800cf04:	781b      	ldrb	r3, [r3, #0]
 800cf06:	e00b      	b.n	800cf20 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cf08:	78fb      	ldrb	r3, [r7, #3]
 800cf0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cf0e:	68f9      	ldr	r1, [r7, #12]
 800cf10:	4613      	mov	r3, r2
 800cf12:	00db      	lsls	r3, r3, #3
 800cf14:	4413      	add	r3, r2
 800cf16:	009b      	lsls	r3, r3, #2
 800cf18:	440b      	add	r3, r1
 800cf1a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800cf1e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cf20:	4618      	mov	r0, r3
 800cf22:	3714      	adds	r7, #20
 800cf24:	46bd      	mov	sp, r7
 800cf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2a:	4770      	bx	lr

0800cf2c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b084      	sub	sp, #16
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
 800cf34:	460b      	mov	r3, r1
 800cf36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf38:	2300      	movs	r3, #0
 800cf3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800cf46:	78fa      	ldrb	r2, [r7, #3]
 800cf48:	4611      	mov	r1, r2
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	f7f8 fc0a 	bl	8005764 <HAL_PCD_SetAddress>
 800cf50:	4603      	mov	r3, r0
 800cf52:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800cf54:	7bfb      	ldrb	r3, [r7, #15]
 800cf56:	4618      	mov	r0, r3
 800cf58:	f000 f85c 	bl	800d014 <USBD_Get_USB_Status>
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf60:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf62:	4618      	mov	r0, r3
 800cf64:	3710      	adds	r7, #16
 800cf66:	46bd      	mov	sp, r7
 800cf68:	bd80      	pop	{r7, pc}

0800cf6a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cf6a:	b580      	push	{r7, lr}
 800cf6c:	b086      	sub	sp, #24
 800cf6e:	af00      	add	r7, sp, #0
 800cf70:	60f8      	str	r0, [r7, #12]
 800cf72:	607a      	str	r2, [r7, #4]
 800cf74:	603b      	str	r3, [r7, #0]
 800cf76:	460b      	mov	r3, r1
 800cf78:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf7e:	2300      	movs	r3, #0
 800cf80:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 800cf88:	7af9      	ldrb	r1, [r7, #11]
 800cf8a:	683b      	ldr	r3, [r7, #0]
 800cf8c:	687a      	ldr	r2, [r7, #4]
 800cf8e:	f7f8 fd14 	bl	80059ba <HAL_PCD_EP_Transmit>
 800cf92:	4603      	mov	r3, r0
 800cf94:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 800cf96:	7dfb      	ldrb	r3, [r7, #23]
 800cf98:	4618      	mov	r0, r3
 800cf9a:	f000 f83b 	bl	800d014 <USBD_Get_USB_Status>
 800cf9e:	4603      	mov	r3, r0
 800cfa0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cfa2:	7dbb      	ldrb	r3, [r7, #22]
}
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	3718      	adds	r7, #24
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	bd80      	pop	{r7, pc}

0800cfac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cfac:	b580      	push	{r7, lr}
 800cfae:	b086      	sub	sp, #24
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	60f8      	str	r0, [r7, #12]
 800cfb4:	607a      	str	r2, [r7, #4]
 800cfb6:	603b      	str	r3, [r7, #0]
 800cfb8:	460b      	mov	r3, r1
 800cfba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 800cfca:	7af9      	ldrb	r1, [r7, #11]
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	687a      	ldr	r2, [r7, #4]
 800cfd0:	f7f8 fca0 	bl	8005914 <HAL_PCD_EP_Receive>
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 800cfd8:	7dfb      	ldrb	r3, [r7, #23]
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f000 f81a 	bl	800d014 <USBD_Get_USB_Status>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cfe4:	7dbb      	ldrb	r3, [r7, #22]
}
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	3718      	adds	r7, #24
 800cfea:	46bd      	mov	sp, r7
 800cfec:	bd80      	pop	{r7, pc}

0800cfee <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cfee:	b580      	push	{r7, lr}
 800cff0:	b082      	sub	sp, #8
 800cff2:	af00      	add	r7, sp, #0
 800cff4:	6078      	str	r0, [r7, #4]
 800cff6:	460b      	mov	r3, r1
 800cff8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef *)pdev->pData, ep_addr);
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800d000:	78fa      	ldrb	r2, [r7, #3]
 800d002:	4611      	mov	r1, r2
 800d004:	4618      	mov	r0, r3
 800d006:	f7f8 fcc0 	bl	800598a <HAL_PCD_EP_GetRxCount>
 800d00a:	4603      	mov	r3, r0
}
 800d00c:	4618      	mov	r0, r3
 800d00e:	3708      	adds	r7, #8
 800d010:	46bd      	mov	sp, r7
 800d012:	bd80      	pop	{r7, pc}

0800d014 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d014:	b480      	push	{r7}
 800d016:	b085      	sub	sp, #20
 800d018:	af00      	add	r7, sp, #0
 800d01a:	4603      	mov	r3, r0
 800d01c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d01e:	2300      	movs	r3, #0
 800d020:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d022:	79fb      	ldrb	r3, [r7, #7]
 800d024:	2b03      	cmp	r3, #3
 800d026:	d817      	bhi.n	800d058 <USBD_Get_USB_Status+0x44>
 800d028:	a201      	add	r2, pc, #4	@ (adr r2, 800d030 <USBD_Get_USB_Status+0x1c>)
 800d02a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d02e:	bf00      	nop
 800d030:	0800d041 	.word	0x0800d041
 800d034:	0800d047 	.word	0x0800d047
 800d038:	0800d04d 	.word	0x0800d04d
 800d03c:	0800d053 	.word	0x0800d053
  {
  case HAL_OK:
    usb_status = USBD_OK;
 800d040:	2300      	movs	r3, #0
 800d042:	73fb      	strb	r3, [r7, #15]
    break;
 800d044:	e00b      	b.n	800d05e <USBD_Get_USB_Status+0x4a>
  case HAL_ERROR:
    usb_status = USBD_FAIL;
 800d046:	2303      	movs	r3, #3
 800d048:	73fb      	strb	r3, [r7, #15]
    break;
 800d04a:	e008      	b.n	800d05e <USBD_Get_USB_Status+0x4a>
  case HAL_BUSY:
    usb_status = USBD_BUSY;
 800d04c:	2301      	movs	r3, #1
 800d04e:	73fb      	strb	r3, [r7, #15]
    break;
 800d050:	e005      	b.n	800d05e <USBD_Get_USB_Status+0x4a>
  case HAL_TIMEOUT:
    usb_status = USBD_FAIL;
 800d052:	2303      	movs	r3, #3
 800d054:	73fb      	strb	r3, [r7, #15]
    break;
 800d056:	e002      	b.n	800d05e <USBD_Get_USB_Status+0x4a>
  default:
    usb_status = USBD_FAIL;
 800d058:	2303      	movs	r3, #3
 800d05a:	73fb      	strb	r3, [r7, #15]
    break;
 800d05c:	bf00      	nop
  }
  return usb_status;
 800d05e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d060:	4618      	mov	r0, r3
 800d062:	3714      	adds	r7, #20
 800d064:	46bd      	mov	sp, r7
 800d066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06a:	4770      	bx	lr

0800d06c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800d06c:	b480      	push	{r7}
 800d06e:	b085      	sub	sp, #20
 800d070:	af00      	add	r7, sp, #0
 800d072:	4603      	mov	r3, r0
 800d074:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800d076:	2300      	movs	r3, #0
 800d078:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800d07a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d07e:	2b84      	cmp	r3, #132	@ 0x84
 800d080:	d005      	beq.n	800d08e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800d082:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	4413      	add	r3, r2
 800d08a:	3303      	adds	r3, #3
 800d08c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800d08e:	68fb      	ldr	r3, [r7, #12]
}
 800d090:	4618      	mov	r0, r3
 800d092:	3714      	adds	r7, #20
 800d094:	46bd      	mov	sp, r7
 800d096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09a:	4770      	bx	lr

0800d09c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800d09c:	b480      	push	{r7}
 800d09e:	b083      	sub	sp, #12
 800d0a0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d0a2:	f3ef 8305 	mrs	r3, IPSR
 800d0a6:	607b      	str	r3, [r7, #4]
  return(result);
 800d0a8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	bf14      	ite	ne
 800d0ae:	2301      	movne	r3, #1
 800d0b0:	2300      	moveq	r3, #0
 800d0b2:	b2db      	uxtb	r3, r3
}
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	370c      	adds	r7, #12
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0be:	4770      	bx	lr

0800d0c0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800d0c4:	f001 f942 	bl	800e34c <vTaskStartScheduler>
  
  return osOK;
 800d0c8:	2300      	movs	r3, #0
}
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	bd80      	pop	{r7, pc}

0800d0ce <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800d0ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0d0:	b089      	sub	sp, #36	@ 0x24
 800d0d2:	af04      	add	r7, sp, #16
 800d0d4:	6078      	str	r0, [r7, #4]
 800d0d6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	695b      	ldr	r3, [r3, #20]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d020      	beq.n	800d122 <osThreadCreate+0x54>
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	699b      	ldr	r3, [r3, #24]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d01c      	beq.n	800d122 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	685c      	ldr	r4, [r3, #4]
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	691e      	ldr	r6, [r3, #16]
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f7ff ffb6 	bl	800d06c <makeFreeRtosPriority>
 800d100:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	695b      	ldr	r3, [r3, #20]
 800d106:	687a      	ldr	r2, [r7, #4]
 800d108:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d10a:	9202      	str	r2, [sp, #8]
 800d10c:	9301      	str	r3, [sp, #4]
 800d10e:	9100      	str	r1, [sp, #0]
 800d110:	683b      	ldr	r3, [r7, #0]
 800d112:	4632      	mov	r2, r6
 800d114:	4629      	mov	r1, r5
 800d116:	4620      	mov	r0, r4
 800d118:	f000 ff32 	bl	800df80 <xTaskCreateStatic>
 800d11c:	4603      	mov	r3, r0
 800d11e:	60fb      	str	r3, [r7, #12]
 800d120:	e01c      	b.n	800d15c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	685c      	ldr	r4, [r3, #4]
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d12e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d136:	4618      	mov	r0, r3
 800d138:	f7ff ff98 	bl	800d06c <makeFreeRtosPriority>
 800d13c:	4602      	mov	r2, r0
 800d13e:	f107 030c 	add.w	r3, r7, #12
 800d142:	9301      	str	r3, [sp, #4]
 800d144:	9200      	str	r2, [sp, #0]
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	4632      	mov	r2, r6
 800d14a:	4629      	mov	r1, r5
 800d14c:	4620      	mov	r0, r4
 800d14e:	f000 ff77 	bl	800e040 <xTaskCreate>
 800d152:	4603      	mov	r3, r0
 800d154:	2b01      	cmp	r3, #1
 800d156:	d001      	beq.n	800d15c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800d158:	2300      	movs	r3, #0
 800d15a:	e000      	b.n	800d15e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800d15c:	68fb      	ldr	r3, [r7, #12]
}
 800d15e:	4618      	mov	r0, r3
 800d160:	3714      	adds	r7, #20
 800d162:	46bd      	mov	sp, r7
 800d164:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d166 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d166:	b580      	push	{r7, lr}
 800d168:	b084      	sub	sp, #16
 800d16a:	af00      	add	r7, sp, #0
 800d16c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d001      	beq.n	800d17c <osDelay+0x16>
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	e000      	b.n	800d17e <osDelay+0x18>
 800d17c:	2301      	movs	r3, #1
 800d17e:	4618      	mov	r0, r3
 800d180:	f001 f8ae 	bl	800e2e0 <vTaskDelay>
  
  return osOK;
 800d184:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d186:	4618      	mov	r0, r3
 800d188:	3710      	adds	r7, #16
 800d18a:	46bd      	mov	sp, r7
 800d18c:	bd80      	pop	{r7, pc}

0800d18e <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800d18e:	b580      	push	{r7, lr}
 800d190:	b086      	sub	sp, #24
 800d192:	af02      	add	r7, sp, #8
 800d194:	6078      	str	r0, [r7, #4]
 800d196:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	685b      	ldr	r3, [r3, #4]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d00f      	beq.n	800d1c0 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800d1a0:	683b      	ldr	r3, [r7, #0]
 800d1a2:	2b01      	cmp	r3, #1
 800d1a4:	d10a      	bne.n	800d1bc <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	685b      	ldr	r3, [r3, #4]
 800d1aa:	2203      	movs	r2, #3
 800d1ac:	9200      	str	r2, [sp, #0]
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	2100      	movs	r1, #0
 800d1b2:	2001      	movs	r0, #1
 800d1b4:	f000 f9c0 	bl	800d538 <xQueueGenericCreateStatic>
 800d1b8:	4603      	mov	r3, r0
 800d1ba:	e016      	b.n	800d1ea <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800d1bc:	2300      	movs	r3, #0
 800d1be:	e014      	b.n	800d1ea <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800d1c0:	683b      	ldr	r3, [r7, #0]
 800d1c2:	2b01      	cmp	r3, #1
 800d1c4:	d110      	bne.n	800d1e8 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800d1c6:	2203      	movs	r2, #3
 800d1c8:	2100      	movs	r1, #0
 800d1ca:	2001      	movs	r0, #1
 800d1cc:	f000 fa31 	bl	800d632 <xQueueGenericCreate>
 800d1d0:	60f8      	str	r0, [r7, #12]
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d005      	beq.n	800d1e4 <osSemaphoreCreate+0x56>
 800d1d8:	2300      	movs	r3, #0
 800d1da:	2200      	movs	r2, #0
 800d1dc:	2100      	movs	r1, #0
 800d1de:	68f8      	ldr	r0, [r7, #12]
 800d1e0:	f000 fa82 	bl	800d6e8 <xQueueGenericSend>
      return sema;
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	e000      	b.n	800d1ea <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800d1e8:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	3710      	adds	r7, #16
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	bd80      	pop	{r7, pc}
	...

0800d1f4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b084      	sub	sp, #16
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
 800d1fc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800d1fe:	2300      	movs	r3, #0
 800d200:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d101      	bne.n	800d20c <osSemaphoreWait+0x18>
    return osErrorParameter;
 800d208:	2380      	movs	r3, #128	@ 0x80
 800d20a:	e03a      	b.n	800d282 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800d20c:	2300      	movs	r3, #0
 800d20e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800d210:	683b      	ldr	r3, [r7, #0]
 800d212:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d216:	d103      	bne.n	800d220 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800d218:	f04f 33ff 	mov.w	r3, #4294967295
 800d21c:	60fb      	str	r3, [r7, #12]
 800d21e:	e009      	b.n	800d234 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800d220:	683b      	ldr	r3, [r7, #0]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d006      	beq.n	800d234 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800d226:	683b      	ldr	r3, [r7, #0]
 800d228:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d101      	bne.n	800d234 <osSemaphoreWait+0x40>
      ticks = 1;
 800d230:	2301      	movs	r3, #1
 800d232:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800d234:	f7ff ff32 	bl	800d09c <inHandlerMode>
 800d238:	4603      	mov	r3, r0
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d017      	beq.n	800d26e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800d23e:	f107 0308 	add.w	r3, r7, #8
 800d242:	461a      	mov	r2, r3
 800d244:	2100      	movs	r1, #0
 800d246:	6878      	ldr	r0, [r7, #4]
 800d248:	f000 fcf0 	bl	800dc2c <xQueueReceiveFromISR>
 800d24c:	4603      	mov	r3, r0
 800d24e:	2b01      	cmp	r3, #1
 800d250:	d001      	beq.n	800d256 <osSemaphoreWait+0x62>
      return osErrorOS;
 800d252:	23ff      	movs	r3, #255	@ 0xff
 800d254:	e015      	b.n	800d282 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800d256:	68bb      	ldr	r3, [r7, #8]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d011      	beq.n	800d280 <osSemaphoreWait+0x8c>
 800d25c:	4b0b      	ldr	r3, [pc, #44]	@ (800d28c <osSemaphoreWait+0x98>)
 800d25e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d262:	601a      	str	r2, [r3, #0]
 800d264:	f3bf 8f4f 	dsb	sy
 800d268:	f3bf 8f6f 	isb	sy
 800d26c:	e008      	b.n	800d280 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800d26e:	68f9      	ldr	r1, [r7, #12]
 800d270:	6878      	ldr	r0, [r7, #4]
 800d272:	f000 fbcb 	bl	800da0c <xQueueSemaphoreTake>
 800d276:	4603      	mov	r3, r0
 800d278:	2b01      	cmp	r3, #1
 800d27a:	d001      	beq.n	800d280 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800d27c:	23ff      	movs	r3, #255	@ 0xff
 800d27e:	e000      	b.n	800d282 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800d280:	2300      	movs	r3, #0
}
 800d282:	4618      	mov	r0, r3
 800d284:	3710      	adds	r7, #16
 800d286:	46bd      	mov	sp, r7
 800d288:	bd80      	pop	{r7, pc}
 800d28a:	bf00      	nop
 800d28c:	e000ed04 	.word	0xe000ed04

0800d290 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b084      	sub	sp, #16
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800d298:	2300      	movs	r3, #0
 800d29a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800d29c:	2300      	movs	r3, #0
 800d29e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800d2a0:	f7ff fefc 	bl	800d09c <inHandlerMode>
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d016      	beq.n	800d2d8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800d2aa:	f107 0308 	add.w	r3, r7, #8
 800d2ae:	4619      	mov	r1, r3
 800d2b0:	6878      	ldr	r0, [r7, #4]
 800d2b2:	f000 fb1b 	bl	800d8ec <xQueueGiveFromISR>
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	2b01      	cmp	r3, #1
 800d2ba:	d001      	beq.n	800d2c0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800d2bc:	23ff      	movs	r3, #255	@ 0xff
 800d2be:	e017      	b.n	800d2f0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d2c0:	68bb      	ldr	r3, [r7, #8]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d013      	beq.n	800d2ee <osSemaphoreRelease+0x5e>
 800d2c6:	4b0c      	ldr	r3, [pc, #48]	@ (800d2f8 <osSemaphoreRelease+0x68>)
 800d2c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d2cc:	601a      	str	r2, [r3, #0]
 800d2ce:	f3bf 8f4f 	dsb	sy
 800d2d2:	f3bf 8f6f 	isb	sy
 800d2d6:	e00a      	b.n	800d2ee <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800d2d8:	2300      	movs	r3, #0
 800d2da:	2200      	movs	r2, #0
 800d2dc:	2100      	movs	r1, #0
 800d2de:	6878      	ldr	r0, [r7, #4]
 800d2e0:	f000 fa02 	bl	800d6e8 <xQueueGenericSend>
 800d2e4:	4603      	mov	r3, r0
 800d2e6:	2b01      	cmp	r3, #1
 800d2e8:	d001      	beq.n	800d2ee <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800d2ea:	23ff      	movs	r3, #255	@ 0xff
 800d2ec:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800d2ee:	68fb      	ldr	r3, [r7, #12]
}
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	3710      	adds	r7, #16
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	bd80      	pop	{r7, pc}
 800d2f8:	e000ed04 	.word	0xe000ed04

0800d2fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d2fc:	b480      	push	{r7}
 800d2fe:	b083      	sub	sp, #12
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	f103 0208 	add.w	r2, r3, #8
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	f04f 32ff 	mov.w	r2, #4294967295
 800d314:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	f103 0208 	add.w	r2, r3, #8
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	f103 0208 	add.w	r2, r3, #8
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	2200      	movs	r2, #0
 800d32e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d330:	bf00      	nop
 800d332:	370c      	adds	r7, #12
 800d334:	46bd      	mov	sp, r7
 800d336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33a:	4770      	bx	lr

0800d33c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d33c:	b480      	push	{r7}
 800d33e:	b083      	sub	sp, #12
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	2200      	movs	r2, #0
 800d348:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d34a:	bf00      	nop
 800d34c:	370c      	adds	r7, #12
 800d34e:	46bd      	mov	sp, r7
 800d350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d354:	4770      	bx	lr

0800d356 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d356:	b480      	push	{r7}
 800d358:	b085      	sub	sp, #20
 800d35a:	af00      	add	r7, sp, #0
 800d35c:	6078      	str	r0, [r7, #4]
 800d35e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	685b      	ldr	r3, [r3, #4]
 800d364:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d366:	683b      	ldr	r3, [r7, #0]
 800d368:	68fa      	ldr	r2, [r7, #12]
 800d36a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	689a      	ldr	r2, [r3, #8]
 800d370:	683b      	ldr	r3, [r7, #0]
 800d372:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	689b      	ldr	r3, [r3, #8]
 800d378:	683a      	ldr	r2, [r7, #0]
 800d37a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	683a      	ldr	r2, [r7, #0]
 800d380:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	687a      	ldr	r2, [r7, #4]
 800d386:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	1c5a      	adds	r2, r3, #1
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	601a      	str	r2, [r3, #0]
}
 800d392:	bf00      	nop
 800d394:	3714      	adds	r7, #20
 800d396:	46bd      	mov	sp, r7
 800d398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39c:	4770      	bx	lr

0800d39e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d39e:	b480      	push	{r7}
 800d3a0:	b085      	sub	sp, #20
 800d3a2:	af00      	add	r7, sp, #0
 800d3a4:	6078      	str	r0, [r7, #4]
 800d3a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d3ae:	68bb      	ldr	r3, [r7, #8]
 800d3b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3b4:	d103      	bne.n	800d3be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	691b      	ldr	r3, [r3, #16]
 800d3ba:	60fb      	str	r3, [r7, #12]
 800d3bc:	e00c      	b.n	800d3d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	3308      	adds	r3, #8
 800d3c2:	60fb      	str	r3, [r7, #12]
 800d3c4:	e002      	b.n	800d3cc <vListInsert+0x2e>
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	685b      	ldr	r3, [r3, #4]
 800d3ca:	60fb      	str	r3, [r7, #12]
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	685b      	ldr	r3, [r3, #4]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	68ba      	ldr	r2, [r7, #8]
 800d3d4:	429a      	cmp	r2, r3
 800d3d6:	d2f6      	bcs.n	800d3c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	685a      	ldr	r2, [r3, #4]
 800d3dc:	683b      	ldr	r3, [r7, #0]
 800d3de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d3e0:	683b      	ldr	r3, [r7, #0]
 800d3e2:	685b      	ldr	r3, [r3, #4]
 800d3e4:	683a      	ldr	r2, [r7, #0]
 800d3e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	68fa      	ldr	r2, [r7, #12]
 800d3ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	683a      	ldr	r2, [r7, #0]
 800d3f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	687a      	ldr	r2, [r7, #4]
 800d3f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	1c5a      	adds	r2, r3, #1
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	601a      	str	r2, [r3, #0]
}
 800d404:	bf00      	nop
 800d406:	3714      	adds	r7, #20
 800d408:	46bd      	mov	sp, r7
 800d40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40e:	4770      	bx	lr

0800d410 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d410:	b480      	push	{r7}
 800d412:	b085      	sub	sp, #20
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	691b      	ldr	r3, [r3, #16]
 800d41c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	685b      	ldr	r3, [r3, #4]
 800d422:	687a      	ldr	r2, [r7, #4]
 800d424:	6892      	ldr	r2, [r2, #8]
 800d426:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	689b      	ldr	r3, [r3, #8]
 800d42c:	687a      	ldr	r2, [r7, #4]
 800d42e:	6852      	ldr	r2, [r2, #4]
 800d430:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	685b      	ldr	r3, [r3, #4]
 800d436:	687a      	ldr	r2, [r7, #4]
 800d438:	429a      	cmp	r2, r3
 800d43a:	d103      	bne.n	800d444 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	689a      	ldr	r2, [r3, #8]
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	2200      	movs	r2, #0
 800d448:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	1e5a      	subs	r2, r3, #1
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	681b      	ldr	r3, [r3, #0]
}
 800d458:	4618      	mov	r0, r3
 800d45a:	3714      	adds	r7, #20
 800d45c:	46bd      	mov	sp, r7
 800d45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d462:	4770      	bx	lr

0800d464 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d464:	b580      	push	{r7, lr}
 800d466:	b084      	sub	sp, #16
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
 800d46c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d10b      	bne.n	800d490 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d47c:	f383 8811 	msr	BASEPRI, r3
 800d480:	f3bf 8f6f 	isb	sy
 800d484:	f3bf 8f4f 	dsb	sy
 800d488:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d48a:	bf00      	nop
 800d48c:	bf00      	nop
 800d48e:	e7fd      	b.n	800d48c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d490:	f001 fed2 	bl	800f238 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	681a      	ldr	r2, [r3, #0]
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d49c:	68f9      	ldr	r1, [r7, #12]
 800d49e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d4a0:	fb01 f303 	mul.w	r3, r1, r3
 800d4a4:	441a      	add	r2, r3
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	681a      	ldr	r2, [r3, #0]
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	681a      	ldr	r2, [r3, #0]
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d4c0:	3b01      	subs	r3, #1
 800d4c2:	68f9      	ldr	r1, [r7, #12]
 800d4c4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d4c6:	fb01 f303 	mul.w	r3, r1, r3
 800d4ca:	441a      	add	r2, r3
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	22ff      	movs	r2, #255	@ 0xff
 800d4d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	22ff      	movs	r2, #255	@ 0xff
 800d4dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800d4e0:	683b      	ldr	r3, [r7, #0]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d114      	bne.n	800d510 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	691b      	ldr	r3, [r3, #16]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d01a      	beq.n	800d524 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	3310      	adds	r3, #16
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	f001 f984 	bl	800e800 <xTaskRemoveFromEventList>
 800d4f8:	4603      	mov	r3, r0
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d012      	beq.n	800d524 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d4fe:	4b0d      	ldr	r3, [pc, #52]	@ (800d534 <xQueueGenericReset+0xd0>)
 800d500:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d504:	601a      	str	r2, [r3, #0]
 800d506:	f3bf 8f4f 	dsb	sy
 800d50a:	f3bf 8f6f 	isb	sy
 800d50e:	e009      	b.n	800d524 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	3310      	adds	r3, #16
 800d514:	4618      	mov	r0, r3
 800d516:	f7ff fef1 	bl	800d2fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	3324      	adds	r3, #36	@ 0x24
 800d51e:	4618      	mov	r0, r3
 800d520:	f7ff feec 	bl	800d2fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d524:	f001 feba 	bl	800f29c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d528:	2301      	movs	r3, #1
}
 800d52a:	4618      	mov	r0, r3
 800d52c:	3710      	adds	r7, #16
 800d52e:	46bd      	mov	sp, r7
 800d530:	bd80      	pop	{r7, pc}
 800d532:	bf00      	nop
 800d534:	e000ed04 	.word	0xe000ed04

0800d538 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b08e      	sub	sp, #56	@ 0x38
 800d53c:	af02      	add	r7, sp, #8
 800d53e:	60f8      	str	r0, [r7, #12]
 800d540:	60b9      	str	r1, [r7, #8]
 800d542:	607a      	str	r2, [r7, #4]
 800d544:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d10b      	bne.n	800d564 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800d54c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d550:	f383 8811 	msr	BASEPRI, r3
 800d554:	f3bf 8f6f 	isb	sy
 800d558:	f3bf 8f4f 	dsb	sy
 800d55c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d55e:	bf00      	nop
 800d560:	bf00      	nop
 800d562:	e7fd      	b.n	800d560 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d564:	683b      	ldr	r3, [r7, #0]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d10b      	bne.n	800d582 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800d56a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d56e:	f383 8811 	msr	BASEPRI, r3
 800d572:	f3bf 8f6f 	isb	sy
 800d576:	f3bf 8f4f 	dsb	sy
 800d57a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d57c:	bf00      	nop
 800d57e:	bf00      	nop
 800d580:	e7fd      	b.n	800d57e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d002      	beq.n	800d58e <xQueueGenericCreateStatic+0x56>
 800d588:	68bb      	ldr	r3, [r7, #8]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d001      	beq.n	800d592 <xQueueGenericCreateStatic+0x5a>
 800d58e:	2301      	movs	r3, #1
 800d590:	e000      	b.n	800d594 <xQueueGenericCreateStatic+0x5c>
 800d592:	2300      	movs	r3, #0
 800d594:	2b00      	cmp	r3, #0
 800d596:	d10b      	bne.n	800d5b0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800d598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d59c:	f383 8811 	msr	BASEPRI, r3
 800d5a0:	f3bf 8f6f 	isb	sy
 800d5a4:	f3bf 8f4f 	dsb	sy
 800d5a8:	623b      	str	r3, [r7, #32]
}
 800d5aa:	bf00      	nop
 800d5ac:	bf00      	nop
 800d5ae:	e7fd      	b.n	800d5ac <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d102      	bne.n	800d5bc <xQueueGenericCreateStatic+0x84>
 800d5b6:	68bb      	ldr	r3, [r7, #8]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d101      	bne.n	800d5c0 <xQueueGenericCreateStatic+0x88>
 800d5bc:	2301      	movs	r3, #1
 800d5be:	e000      	b.n	800d5c2 <xQueueGenericCreateStatic+0x8a>
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d10b      	bne.n	800d5de <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800d5c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5ca:	f383 8811 	msr	BASEPRI, r3
 800d5ce:	f3bf 8f6f 	isb	sy
 800d5d2:	f3bf 8f4f 	dsb	sy
 800d5d6:	61fb      	str	r3, [r7, #28]
}
 800d5d8:	bf00      	nop
 800d5da:	bf00      	nop
 800d5dc:	e7fd      	b.n	800d5da <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d5de:	2348      	movs	r3, #72	@ 0x48
 800d5e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d5e2:	697b      	ldr	r3, [r7, #20]
 800d5e4:	2b48      	cmp	r3, #72	@ 0x48
 800d5e6:	d00b      	beq.n	800d600 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800d5e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5ec:	f383 8811 	msr	BASEPRI, r3
 800d5f0:	f3bf 8f6f 	isb	sy
 800d5f4:	f3bf 8f4f 	dsb	sy
 800d5f8:	61bb      	str	r3, [r7, #24]
}
 800d5fa:	bf00      	nop
 800d5fc:	bf00      	nop
 800d5fe:	e7fd      	b.n	800d5fc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d600:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d602:	683b      	ldr	r3, [r7, #0]
 800d604:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800d606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d00d      	beq.n	800d628 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d60c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d60e:	2201      	movs	r2, #1
 800d610:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d614:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d61a:	9300      	str	r3, [sp, #0]
 800d61c:	4613      	mov	r3, r2
 800d61e:	687a      	ldr	r2, [r7, #4]
 800d620:	68b9      	ldr	r1, [r7, #8]
 800d622:	68f8      	ldr	r0, [r7, #12]
 800d624:	f000 f840 	bl	800d6a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800d62a:	4618      	mov	r0, r3
 800d62c:	3730      	adds	r7, #48	@ 0x30
 800d62e:	46bd      	mov	sp, r7
 800d630:	bd80      	pop	{r7, pc}

0800d632 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d632:	b580      	push	{r7, lr}
 800d634:	b08a      	sub	sp, #40	@ 0x28
 800d636:	af02      	add	r7, sp, #8
 800d638:	60f8      	str	r0, [r7, #12]
 800d63a:	60b9      	str	r1, [r7, #8]
 800d63c:	4613      	mov	r3, r2
 800d63e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d10b      	bne.n	800d65e <xQueueGenericCreate+0x2c>
	__asm volatile
 800d646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d64a:	f383 8811 	msr	BASEPRI, r3
 800d64e:	f3bf 8f6f 	isb	sy
 800d652:	f3bf 8f4f 	dsb	sy
 800d656:	613b      	str	r3, [r7, #16]
}
 800d658:	bf00      	nop
 800d65a:	bf00      	nop
 800d65c:	e7fd      	b.n	800d65a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	68ba      	ldr	r2, [r7, #8]
 800d662:	fb02 f303 	mul.w	r3, r2, r3
 800d666:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d668:	69fb      	ldr	r3, [r7, #28]
 800d66a:	3348      	adds	r3, #72	@ 0x48
 800d66c:	4618      	mov	r0, r3
 800d66e:	f001 ff05 	bl	800f47c <pvPortMalloc>
 800d672:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d674:	69bb      	ldr	r3, [r7, #24]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d011      	beq.n	800d69e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d67a:	69bb      	ldr	r3, [r7, #24]
 800d67c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d67e:	697b      	ldr	r3, [r7, #20]
 800d680:	3348      	adds	r3, #72	@ 0x48
 800d682:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d684:	69bb      	ldr	r3, [r7, #24]
 800d686:	2200      	movs	r2, #0
 800d688:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d68c:	79fa      	ldrb	r2, [r7, #7]
 800d68e:	69bb      	ldr	r3, [r7, #24]
 800d690:	9300      	str	r3, [sp, #0]
 800d692:	4613      	mov	r3, r2
 800d694:	697a      	ldr	r2, [r7, #20]
 800d696:	68b9      	ldr	r1, [r7, #8]
 800d698:	68f8      	ldr	r0, [r7, #12]
 800d69a:	f000 f805 	bl	800d6a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d69e:	69bb      	ldr	r3, [r7, #24]
	}
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	3720      	adds	r7, #32
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	bd80      	pop	{r7, pc}

0800d6a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b084      	sub	sp, #16
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	60f8      	str	r0, [r7, #12]
 800d6b0:	60b9      	str	r1, [r7, #8]
 800d6b2:	607a      	str	r2, [r7, #4]
 800d6b4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d6b6:	68bb      	ldr	r3, [r7, #8]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d103      	bne.n	800d6c4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d6bc:	69bb      	ldr	r3, [r7, #24]
 800d6be:	69ba      	ldr	r2, [r7, #24]
 800d6c0:	601a      	str	r2, [r3, #0]
 800d6c2:	e002      	b.n	800d6ca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d6c4:	69bb      	ldr	r3, [r7, #24]
 800d6c6:	687a      	ldr	r2, [r7, #4]
 800d6c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d6ca:	69bb      	ldr	r3, [r7, #24]
 800d6cc:	68fa      	ldr	r2, [r7, #12]
 800d6ce:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d6d0:	69bb      	ldr	r3, [r7, #24]
 800d6d2:	68ba      	ldr	r2, [r7, #8]
 800d6d4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d6d6:	2101      	movs	r1, #1
 800d6d8:	69b8      	ldr	r0, [r7, #24]
 800d6da:	f7ff fec3 	bl	800d464 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d6de:	bf00      	nop
 800d6e0:	3710      	adds	r7, #16
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	bd80      	pop	{r7, pc}
	...

0800d6e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b08e      	sub	sp, #56	@ 0x38
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	60f8      	str	r0, [r7, #12]
 800d6f0:	60b9      	str	r1, [r7, #8]
 800d6f2:	607a      	str	r2, [r7, #4]
 800d6f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d6fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d700:	2b00      	cmp	r3, #0
 800d702:	d10b      	bne.n	800d71c <xQueueGenericSend+0x34>
	__asm volatile
 800d704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d708:	f383 8811 	msr	BASEPRI, r3
 800d70c:	f3bf 8f6f 	isb	sy
 800d710:	f3bf 8f4f 	dsb	sy
 800d714:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d716:	bf00      	nop
 800d718:	bf00      	nop
 800d71a:	e7fd      	b.n	800d718 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d71c:	68bb      	ldr	r3, [r7, #8]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d103      	bne.n	800d72a <xQueueGenericSend+0x42>
 800d722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d726:	2b00      	cmp	r3, #0
 800d728:	d101      	bne.n	800d72e <xQueueGenericSend+0x46>
 800d72a:	2301      	movs	r3, #1
 800d72c:	e000      	b.n	800d730 <xQueueGenericSend+0x48>
 800d72e:	2300      	movs	r3, #0
 800d730:	2b00      	cmp	r3, #0
 800d732:	d10b      	bne.n	800d74c <xQueueGenericSend+0x64>
	__asm volatile
 800d734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d738:	f383 8811 	msr	BASEPRI, r3
 800d73c:	f3bf 8f6f 	isb	sy
 800d740:	f3bf 8f4f 	dsb	sy
 800d744:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d746:	bf00      	nop
 800d748:	bf00      	nop
 800d74a:	e7fd      	b.n	800d748 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d74c:	683b      	ldr	r3, [r7, #0]
 800d74e:	2b02      	cmp	r3, #2
 800d750:	d103      	bne.n	800d75a <xQueueGenericSend+0x72>
 800d752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d754:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d756:	2b01      	cmp	r3, #1
 800d758:	d101      	bne.n	800d75e <xQueueGenericSend+0x76>
 800d75a:	2301      	movs	r3, #1
 800d75c:	e000      	b.n	800d760 <xQueueGenericSend+0x78>
 800d75e:	2300      	movs	r3, #0
 800d760:	2b00      	cmp	r3, #0
 800d762:	d10b      	bne.n	800d77c <xQueueGenericSend+0x94>
	__asm volatile
 800d764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d768:	f383 8811 	msr	BASEPRI, r3
 800d76c:	f3bf 8f6f 	isb	sy
 800d770:	f3bf 8f4f 	dsb	sy
 800d774:	623b      	str	r3, [r7, #32]
}
 800d776:	bf00      	nop
 800d778:	bf00      	nop
 800d77a:	e7fd      	b.n	800d778 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d77c:	f001 fa06 	bl	800eb8c <xTaskGetSchedulerState>
 800d780:	4603      	mov	r3, r0
 800d782:	2b00      	cmp	r3, #0
 800d784:	d102      	bne.n	800d78c <xQueueGenericSend+0xa4>
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d101      	bne.n	800d790 <xQueueGenericSend+0xa8>
 800d78c:	2301      	movs	r3, #1
 800d78e:	e000      	b.n	800d792 <xQueueGenericSend+0xaa>
 800d790:	2300      	movs	r3, #0
 800d792:	2b00      	cmp	r3, #0
 800d794:	d10b      	bne.n	800d7ae <xQueueGenericSend+0xc6>
	__asm volatile
 800d796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d79a:	f383 8811 	msr	BASEPRI, r3
 800d79e:	f3bf 8f6f 	isb	sy
 800d7a2:	f3bf 8f4f 	dsb	sy
 800d7a6:	61fb      	str	r3, [r7, #28]
}
 800d7a8:	bf00      	nop
 800d7aa:	bf00      	nop
 800d7ac:	e7fd      	b.n	800d7aa <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d7ae:	f001 fd43 	bl	800f238 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d7b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d7b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d7ba:	429a      	cmp	r2, r3
 800d7bc:	d302      	bcc.n	800d7c4 <xQueueGenericSend+0xdc>
 800d7be:	683b      	ldr	r3, [r7, #0]
 800d7c0:	2b02      	cmp	r3, #2
 800d7c2:	d129      	bne.n	800d818 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d7c4:	683a      	ldr	r2, [r7, #0]
 800d7c6:	68b9      	ldr	r1, [r7, #8]
 800d7c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d7ca:	f000 fac9 	bl	800dd60 <prvCopyDataToQueue>
 800d7ce:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d7d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d010      	beq.n	800d7fa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d7d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7da:	3324      	adds	r3, #36	@ 0x24
 800d7dc:	4618      	mov	r0, r3
 800d7de:	f001 f80f 	bl	800e800 <xTaskRemoveFromEventList>
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d013      	beq.n	800d810 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d7e8:	4b3f      	ldr	r3, [pc, #252]	@ (800d8e8 <xQueueGenericSend+0x200>)
 800d7ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d7ee:	601a      	str	r2, [r3, #0]
 800d7f0:	f3bf 8f4f 	dsb	sy
 800d7f4:	f3bf 8f6f 	isb	sy
 800d7f8:	e00a      	b.n	800d810 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d7fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d007      	beq.n	800d810 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d800:	4b39      	ldr	r3, [pc, #228]	@ (800d8e8 <xQueueGenericSend+0x200>)
 800d802:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d806:	601a      	str	r2, [r3, #0]
 800d808:	f3bf 8f4f 	dsb	sy
 800d80c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d810:	f001 fd44 	bl	800f29c <vPortExitCritical>
				return pdPASS;
 800d814:	2301      	movs	r3, #1
 800d816:	e063      	b.n	800d8e0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d103      	bne.n	800d826 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d81e:	f001 fd3d 	bl	800f29c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d822:	2300      	movs	r3, #0
 800d824:	e05c      	b.n	800d8e0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d826:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d106      	bne.n	800d83a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d82c:	f107 0314 	add.w	r3, r7, #20
 800d830:	4618      	mov	r0, r3
 800d832:	f001 f849 	bl	800e8c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d836:	2301      	movs	r3, #1
 800d838:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d83a:	f001 fd2f 	bl	800f29c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d83e:	f000 fdef 	bl	800e420 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d842:	f001 fcf9 	bl	800f238 <vPortEnterCritical>
 800d846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d848:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d84c:	b25b      	sxtb	r3, r3
 800d84e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d852:	d103      	bne.n	800d85c <xQueueGenericSend+0x174>
 800d854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d856:	2200      	movs	r2, #0
 800d858:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d85c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d85e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d862:	b25b      	sxtb	r3, r3
 800d864:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d868:	d103      	bne.n	800d872 <xQueueGenericSend+0x18a>
 800d86a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d86c:	2200      	movs	r2, #0
 800d86e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d872:	f001 fd13 	bl	800f29c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d876:	1d3a      	adds	r2, r7, #4
 800d878:	f107 0314 	add.w	r3, r7, #20
 800d87c:	4611      	mov	r1, r2
 800d87e:	4618      	mov	r0, r3
 800d880:	f001 f838 	bl	800e8f4 <xTaskCheckForTimeOut>
 800d884:	4603      	mov	r3, r0
 800d886:	2b00      	cmp	r3, #0
 800d888:	d124      	bne.n	800d8d4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d88a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d88c:	f000 fb60 	bl	800df50 <prvIsQueueFull>
 800d890:	4603      	mov	r3, r0
 800d892:	2b00      	cmp	r3, #0
 800d894:	d018      	beq.n	800d8c8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d898:	3310      	adds	r3, #16
 800d89a:	687a      	ldr	r2, [r7, #4]
 800d89c:	4611      	mov	r1, r2
 800d89e:	4618      	mov	r0, r3
 800d8a0:	f000 ff88 	bl	800e7b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d8a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d8a6:	f000 faeb 	bl	800de80 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d8aa:	f000 fdc7 	bl	800e43c <xTaskResumeAll>
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	f47f af7c 	bne.w	800d7ae <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800d8b6:	4b0c      	ldr	r3, [pc, #48]	@ (800d8e8 <xQueueGenericSend+0x200>)
 800d8b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d8bc:	601a      	str	r2, [r3, #0]
 800d8be:	f3bf 8f4f 	dsb	sy
 800d8c2:	f3bf 8f6f 	isb	sy
 800d8c6:	e772      	b.n	800d7ae <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d8c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d8ca:	f000 fad9 	bl	800de80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d8ce:	f000 fdb5 	bl	800e43c <xTaskResumeAll>
 800d8d2:	e76c      	b.n	800d7ae <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d8d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d8d6:	f000 fad3 	bl	800de80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d8da:	f000 fdaf 	bl	800e43c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d8de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	3738      	adds	r7, #56	@ 0x38
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	bd80      	pop	{r7, pc}
 800d8e8:	e000ed04 	.word	0xe000ed04

0800d8ec <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b08e      	sub	sp, #56	@ 0x38
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
 800d8f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d8fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d10b      	bne.n	800d918 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800d900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d904:	f383 8811 	msr	BASEPRI, r3
 800d908:	f3bf 8f6f 	isb	sy
 800d90c:	f3bf 8f4f 	dsb	sy
 800d910:	623b      	str	r3, [r7, #32]
}
 800d912:	bf00      	nop
 800d914:	bf00      	nop
 800d916:	e7fd      	b.n	800d914 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d91a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d00b      	beq.n	800d938 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800d920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d924:	f383 8811 	msr	BASEPRI, r3
 800d928:	f3bf 8f6f 	isb	sy
 800d92c:	f3bf 8f4f 	dsb	sy
 800d930:	61fb      	str	r3, [r7, #28]
}
 800d932:	bf00      	nop
 800d934:	bf00      	nop
 800d936:	e7fd      	b.n	800d934 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d103      	bne.n	800d948 <xQueueGiveFromISR+0x5c>
 800d940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d942:	689b      	ldr	r3, [r3, #8]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d101      	bne.n	800d94c <xQueueGiveFromISR+0x60>
 800d948:	2301      	movs	r3, #1
 800d94a:	e000      	b.n	800d94e <xQueueGiveFromISR+0x62>
 800d94c:	2300      	movs	r3, #0
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d10b      	bne.n	800d96a <xQueueGiveFromISR+0x7e>
	__asm volatile
 800d952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d956:	f383 8811 	msr	BASEPRI, r3
 800d95a:	f3bf 8f6f 	isb	sy
 800d95e:	f3bf 8f4f 	dsb	sy
 800d962:	61bb      	str	r3, [r7, #24]
}
 800d964:	bf00      	nop
 800d966:	bf00      	nop
 800d968:	e7fd      	b.n	800d966 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d96a:	f001 fd45 	bl	800f3f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d96e:	f3ef 8211 	mrs	r2, BASEPRI
 800d972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d976:	f383 8811 	msr	BASEPRI, r3
 800d97a:	f3bf 8f6f 	isb	sy
 800d97e:	f3bf 8f4f 	dsb	sy
 800d982:	617a      	str	r2, [r7, #20]
 800d984:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d986:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d988:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d98a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d98c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d98e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d994:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d996:	429a      	cmp	r2, r3
 800d998:	d22b      	bcs.n	800d9f2 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d99a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d99c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d9a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d9a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9a6:	1c5a      	adds	r2, r3, #1
 800d9a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9aa:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d9ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d9b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9b4:	d112      	bne.n	800d9dc <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d9b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d016      	beq.n	800d9ec <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d9be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9c0:	3324      	adds	r3, #36	@ 0x24
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	f000 ff1c 	bl	800e800 <xTaskRemoveFromEventList>
 800d9c8:	4603      	mov	r3, r0
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d00e      	beq.n	800d9ec <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d9ce:	683b      	ldr	r3, [r7, #0]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d00b      	beq.n	800d9ec <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d9d4:	683b      	ldr	r3, [r7, #0]
 800d9d6:	2201      	movs	r2, #1
 800d9d8:	601a      	str	r2, [r3, #0]
 800d9da:	e007      	b.n	800d9ec <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d9dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d9e0:	3301      	adds	r3, #1
 800d9e2:	b2db      	uxtb	r3, r3
 800d9e4:	b25a      	sxtb	r2, r3
 800d9e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d9ec:	2301      	movs	r3, #1
 800d9ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800d9f0:	e001      	b.n	800d9f6 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800d9f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9f8:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800da00:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800da02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800da04:	4618      	mov	r0, r3
 800da06:	3738      	adds	r7, #56	@ 0x38
 800da08:	46bd      	mov	sp, r7
 800da0a:	bd80      	pop	{r7, pc}

0800da0c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b08e      	sub	sp, #56	@ 0x38
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
 800da14:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800da16:	2300      	movs	r3, #0
 800da18:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800da1e:	2300      	movs	r3, #0
 800da20:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800da22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da24:	2b00      	cmp	r3, #0
 800da26:	d10b      	bne.n	800da40 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800da28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da2c:	f383 8811 	msr	BASEPRI, r3
 800da30:	f3bf 8f6f 	isb	sy
 800da34:	f3bf 8f4f 	dsb	sy
 800da38:	623b      	str	r3, [r7, #32]
}
 800da3a:	bf00      	nop
 800da3c:	bf00      	nop
 800da3e:	e7fd      	b.n	800da3c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800da40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da44:	2b00      	cmp	r3, #0
 800da46:	d00b      	beq.n	800da60 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800da48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da4c:	f383 8811 	msr	BASEPRI, r3
 800da50:	f3bf 8f6f 	isb	sy
 800da54:	f3bf 8f4f 	dsb	sy
 800da58:	61fb      	str	r3, [r7, #28]
}
 800da5a:	bf00      	nop
 800da5c:	bf00      	nop
 800da5e:	e7fd      	b.n	800da5c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800da60:	f001 f894 	bl	800eb8c <xTaskGetSchedulerState>
 800da64:	4603      	mov	r3, r0
 800da66:	2b00      	cmp	r3, #0
 800da68:	d102      	bne.n	800da70 <xQueueSemaphoreTake+0x64>
 800da6a:	683b      	ldr	r3, [r7, #0]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d101      	bne.n	800da74 <xQueueSemaphoreTake+0x68>
 800da70:	2301      	movs	r3, #1
 800da72:	e000      	b.n	800da76 <xQueueSemaphoreTake+0x6a>
 800da74:	2300      	movs	r3, #0
 800da76:	2b00      	cmp	r3, #0
 800da78:	d10b      	bne.n	800da92 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800da7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da7e:	f383 8811 	msr	BASEPRI, r3
 800da82:	f3bf 8f6f 	isb	sy
 800da86:	f3bf 8f4f 	dsb	sy
 800da8a:	61bb      	str	r3, [r7, #24]
}
 800da8c:	bf00      	nop
 800da8e:	bf00      	nop
 800da90:	e7fd      	b.n	800da8e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800da92:	f001 fbd1 	bl	800f238 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800da96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da9a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800da9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d024      	beq.n	800daec <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800daa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800daa4:	1e5a      	subs	r2, r3, #1
 800daa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800daa8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800daaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d104      	bne.n	800dabc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800dab2:	f001 fa17 	bl	800eee4 <pvTaskIncrementMutexHeldCount>
 800dab6:	4602      	mov	r2, r0
 800dab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800daba:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dabc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dabe:	691b      	ldr	r3, [r3, #16]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d00f      	beq.n	800dae4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dac6:	3310      	adds	r3, #16
 800dac8:	4618      	mov	r0, r3
 800daca:	f000 fe99 	bl	800e800 <xTaskRemoveFromEventList>
 800dace:	4603      	mov	r3, r0
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d007      	beq.n	800dae4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dad4:	4b54      	ldr	r3, [pc, #336]	@ (800dc28 <xQueueSemaphoreTake+0x21c>)
 800dad6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dada:	601a      	str	r2, [r3, #0]
 800dadc:	f3bf 8f4f 	dsb	sy
 800dae0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dae4:	f001 fbda 	bl	800f29c <vPortExitCritical>
				return pdPASS;
 800dae8:	2301      	movs	r3, #1
 800daea:	e098      	b.n	800dc1e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800daec:	683b      	ldr	r3, [r7, #0]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d112      	bne.n	800db18 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800daf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d00b      	beq.n	800db10 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800daf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dafc:	f383 8811 	msr	BASEPRI, r3
 800db00:	f3bf 8f6f 	isb	sy
 800db04:	f3bf 8f4f 	dsb	sy
 800db08:	617b      	str	r3, [r7, #20]
}
 800db0a:	bf00      	nop
 800db0c:	bf00      	nop
 800db0e:	e7fd      	b.n	800db0c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800db10:	f001 fbc4 	bl	800f29c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800db14:	2300      	movs	r3, #0
 800db16:	e082      	b.n	800dc1e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800db18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d106      	bne.n	800db2c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800db1e:	f107 030c 	add.w	r3, r7, #12
 800db22:	4618      	mov	r0, r3
 800db24:	f000 fed0 	bl	800e8c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800db28:	2301      	movs	r3, #1
 800db2a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800db2c:	f001 fbb6 	bl	800f29c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800db30:	f000 fc76 	bl	800e420 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800db34:	f001 fb80 	bl	800f238 <vPortEnterCritical>
 800db38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db3a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800db3e:	b25b      	sxtb	r3, r3
 800db40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db44:	d103      	bne.n	800db4e <xQueueSemaphoreTake+0x142>
 800db46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db48:	2200      	movs	r2, #0
 800db4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800db4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db50:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800db54:	b25b      	sxtb	r3, r3
 800db56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db5a:	d103      	bne.n	800db64 <xQueueSemaphoreTake+0x158>
 800db5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db5e:	2200      	movs	r2, #0
 800db60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800db64:	f001 fb9a 	bl	800f29c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800db68:	463a      	mov	r2, r7
 800db6a:	f107 030c 	add.w	r3, r7, #12
 800db6e:	4611      	mov	r1, r2
 800db70:	4618      	mov	r0, r3
 800db72:	f000 febf 	bl	800e8f4 <xTaskCheckForTimeOut>
 800db76:	4603      	mov	r3, r0
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d132      	bne.n	800dbe2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800db7c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800db7e:	f000 f9d1 	bl	800df24 <prvIsQueueEmpty>
 800db82:	4603      	mov	r3, r0
 800db84:	2b00      	cmp	r3, #0
 800db86:	d026      	beq.n	800dbd6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800db88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d109      	bne.n	800dba4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800db90:	f001 fb52 	bl	800f238 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800db94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db96:	689b      	ldr	r3, [r3, #8]
 800db98:	4618      	mov	r0, r3
 800db9a:	f001 f815 	bl	800ebc8 <xTaskPriorityInherit>
 800db9e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800dba0:	f001 fb7c 	bl	800f29c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dba6:	3324      	adds	r3, #36	@ 0x24
 800dba8:	683a      	ldr	r2, [r7, #0]
 800dbaa:	4611      	mov	r1, r2
 800dbac:	4618      	mov	r0, r3
 800dbae:	f000 fe01 	bl	800e7b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dbb2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dbb4:	f000 f964 	bl	800de80 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dbb8:	f000 fc40 	bl	800e43c <xTaskResumeAll>
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	f47f af67 	bne.w	800da92 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800dbc4:	4b18      	ldr	r3, [pc, #96]	@ (800dc28 <xQueueSemaphoreTake+0x21c>)
 800dbc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dbca:	601a      	str	r2, [r3, #0]
 800dbcc:	f3bf 8f4f 	dsb	sy
 800dbd0:	f3bf 8f6f 	isb	sy
 800dbd4:	e75d      	b.n	800da92 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800dbd6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dbd8:	f000 f952 	bl	800de80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dbdc:	f000 fc2e 	bl	800e43c <xTaskResumeAll>
 800dbe0:	e757      	b.n	800da92 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800dbe2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dbe4:	f000 f94c 	bl	800de80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dbe8:	f000 fc28 	bl	800e43c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dbec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dbee:	f000 f999 	bl	800df24 <prvIsQueueEmpty>
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	f43f af4c 	beq.w	800da92 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800dbfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d00d      	beq.n	800dc1c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800dc00:	f001 fb1a 	bl	800f238 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800dc04:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dc06:	f000 f893 	bl	800dd30 <prvGetDisinheritPriorityAfterTimeout>
 800dc0a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800dc0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc0e:	689b      	ldr	r3, [r3, #8]
 800dc10:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800dc12:	4618      	mov	r0, r3
 800dc14:	f001 f8d6 	bl	800edc4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800dc18:	f001 fb40 	bl	800f29c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dc1c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dc1e:	4618      	mov	r0, r3
 800dc20:	3738      	adds	r7, #56	@ 0x38
 800dc22:	46bd      	mov	sp, r7
 800dc24:	bd80      	pop	{r7, pc}
 800dc26:	bf00      	nop
 800dc28:	e000ed04 	.word	0xe000ed04

0800dc2c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b08e      	sub	sp, #56	@ 0x38
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	60f8      	str	r0, [r7, #12]
 800dc34:	60b9      	str	r1, [r7, #8]
 800dc36:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800dc3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d10b      	bne.n	800dc5a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800dc42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc46:	f383 8811 	msr	BASEPRI, r3
 800dc4a:	f3bf 8f6f 	isb	sy
 800dc4e:	f3bf 8f4f 	dsb	sy
 800dc52:	623b      	str	r3, [r7, #32]
}
 800dc54:	bf00      	nop
 800dc56:	bf00      	nop
 800dc58:	e7fd      	b.n	800dc56 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dc5a:	68bb      	ldr	r3, [r7, #8]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d103      	bne.n	800dc68 <xQueueReceiveFromISR+0x3c>
 800dc60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d101      	bne.n	800dc6c <xQueueReceiveFromISR+0x40>
 800dc68:	2301      	movs	r3, #1
 800dc6a:	e000      	b.n	800dc6e <xQueueReceiveFromISR+0x42>
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d10b      	bne.n	800dc8a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800dc72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc76:	f383 8811 	msr	BASEPRI, r3
 800dc7a:	f3bf 8f6f 	isb	sy
 800dc7e:	f3bf 8f4f 	dsb	sy
 800dc82:	61fb      	str	r3, [r7, #28]
}
 800dc84:	bf00      	nop
 800dc86:	bf00      	nop
 800dc88:	e7fd      	b.n	800dc86 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dc8a:	f001 fbb5 	bl	800f3f8 <vPortValidateInterruptPriority>
	__asm volatile
 800dc8e:	f3ef 8211 	mrs	r2, BASEPRI
 800dc92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc96:	f383 8811 	msr	BASEPRI, r3
 800dc9a:	f3bf 8f6f 	isb	sy
 800dc9e:	f3bf 8f4f 	dsb	sy
 800dca2:	61ba      	str	r2, [r7, #24]
 800dca4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800dca6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dcaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dcae:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dcb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d02f      	beq.n	800dd16 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800dcb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcb8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dcbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dcc0:	68b9      	ldr	r1, [r7, #8]
 800dcc2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dcc4:	f000 f8b6 	bl	800de34 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dcc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcca:	1e5a      	subs	r2, r3, #1
 800dccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcce:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800dcd0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800dcd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcd8:	d112      	bne.n	800dd00 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dcda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcdc:	691b      	ldr	r3, [r3, #16]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d016      	beq.n	800dd10 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dce4:	3310      	adds	r3, #16
 800dce6:	4618      	mov	r0, r3
 800dce8:	f000 fd8a 	bl	800e800 <xTaskRemoveFromEventList>
 800dcec:	4603      	mov	r3, r0
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d00e      	beq.n	800dd10 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d00b      	beq.n	800dd10 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	2201      	movs	r2, #1
 800dcfc:	601a      	str	r2, [r3, #0]
 800dcfe:	e007      	b.n	800dd10 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800dd00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dd04:	3301      	adds	r3, #1
 800dd06:	b2db      	uxtb	r3, r3
 800dd08:	b25a      	sxtb	r2, r3
 800dd0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800dd10:	2301      	movs	r3, #1
 800dd12:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd14:	e001      	b.n	800dd1a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800dd16:	2300      	movs	r3, #0
 800dd18:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd1c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800dd1e:	693b      	ldr	r3, [r7, #16]
 800dd20:	f383 8811 	msr	BASEPRI, r3
}
 800dd24:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dd26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800dd28:	4618      	mov	r0, r3
 800dd2a:	3738      	adds	r7, #56	@ 0x38
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	bd80      	pop	{r7, pc}

0800dd30 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800dd30:	b480      	push	{r7}
 800dd32:	b085      	sub	sp, #20
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d006      	beq.n	800dd4e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	f1c3 0307 	rsb	r3, r3, #7
 800dd4a:	60fb      	str	r3, [r7, #12]
 800dd4c:	e001      	b.n	800dd52 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800dd4e:	2300      	movs	r3, #0
 800dd50:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800dd52:	68fb      	ldr	r3, [r7, #12]
	}
 800dd54:	4618      	mov	r0, r3
 800dd56:	3714      	adds	r7, #20
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5e:	4770      	bx	lr

0800dd60 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b086      	sub	sp, #24
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	60f8      	str	r0, [r7, #12]
 800dd68:	60b9      	str	r1, [r7, #8]
 800dd6a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd74:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d10d      	bne.n	800dd9a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d14d      	bne.n	800de22 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	689b      	ldr	r3, [r3, #8]
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	f000 ff92 	bl	800ecb4 <xTaskPriorityDisinherit>
 800dd90:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	2200      	movs	r2, #0
 800dd96:	609a      	str	r2, [r3, #8]
 800dd98:	e043      	b.n	800de22 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d119      	bne.n	800ddd4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	6858      	ldr	r0, [r3, #4]
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dda8:	461a      	mov	r2, r3
 800ddaa:	68b9      	ldr	r1, [r7, #8]
 800ddac:	f001 fefe 	bl	800fbac <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	685a      	ldr	r2, [r3, #4]
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ddb8:	441a      	add	r2, r3
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	685a      	ldr	r2, [r3, #4]
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	689b      	ldr	r3, [r3, #8]
 800ddc6:	429a      	cmp	r2, r3
 800ddc8:	d32b      	bcc.n	800de22 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	681a      	ldr	r2, [r3, #0]
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	605a      	str	r2, [r3, #4]
 800ddd2:	e026      	b.n	800de22 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	68d8      	ldr	r0, [r3, #12]
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dddc:	461a      	mov	r2, r3
 800ddde:	68b9      	ldr	r1, [r7, #8]
 800dde0:	f001 fee4 	bl	800fbac <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	68da      	ldr	r2, [r3, #12]
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ddec:	425b      	negs	r3, r3
 800ddee:	441a      	add	r2, r3
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	68da      	ldr	r2, [r3, #12]
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	429a      	cmp	r2, r3
 800ddfe:	d207      	bcs.n	800de10 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	689a      	ldr	r2, [r3, #8]
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de08:	425b      	negs	r3, r3
 800de0a:	441a      	add	r2, r3
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	2b02      	cmp	r3, #2
 800de14:	d105      	bne.n	800de22 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800de16:	693b      	ldr	r3, [r7, #16]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d002      	beq.n	800de22 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800de1c:	693b      	ldr	r3, [r7, #16]
 800de1e:	3b01      	subs	r3, #1
 800de20:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800de22:	693b      	ldr	r3, [r7, #16]
 800de24:	1c5a      	adds	r2, r3, #1
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800de2a:	697b      	ldr	r3, [r7, #20]
}
 800de2c:	4618      	mov	r0, r3
 800de2e:	3718      	adds	r7, #24
 800de30:	46bd      	mov	sp, r7
 800de32:	bd80      	pop	{r7, pc}

0800de34 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b082      	sub	sp, #8
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
 800de3c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de42:	2b00      	cmp	r3, #0
 800de44:	d018      	beq.n	800de78 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	68da      	ldr	r2, [r3, #12]
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de4e:	441a      	add	r2, r3
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	68da      	ldr	r2, [r3, #12]
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	689b      	ldr	r3, [r3, #8]
 800de5c:	429a      	cmp	r2, r3
 800de5e:	d303      	bcc.n	800de68 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	681a      	ldr	r2, [r3, #0]
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	68d9      	ldr	r1, [r3, #12]
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de70:	461a      	mov	r2, r3
 800de72:	6838      	ldr	r0, [r7, #0]
 800de74:	f001 fe9a 	bl	800fbac <memcpy>
	}
}
 800de78:	bf00      	nop
 800de7a:	3708      	adds	r7, #8
 800de7c:	46bd      	mov	sp, r7
 800de7e:	bd80      	pop	{r7, pc}

0800de80 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800de80:	b580      	push	{r7, lr}
 800de82:	b084      	sub	sp, #16
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800de88:	f001 f9d6 	bl	800f238 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800de92:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800de94:	e011      	b.n	800deba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d012      	beq.n	800dec4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	3324      	adds	r3, #36	@ 0x24
 800dea2:	4618      	mov	r0, r3
 800dea4:	f000 fcac 	bl	800e800 <xTaskRemoveFromEventList>
 800dea8:	4603      	mov	r3, r0
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d001      	beq.n	800deb2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800deae:	f000 fd85 	bl	800e9bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800deb2:	7bfb      	ldrb	r3, [r7, #15]
 800deb4:	3b01      	subs	r3, #1
 800deb6:	b2db      	uxtb	r3, r3
 800deb8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800deba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	dce9      	bgt.n	800de96 <prvUnlockQueue+0x16>
 800dec2:	e000      	b.n	800dec6 <prvUnlockQueue+0x46>
					break;
 800dec4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	22ff      	movs	r2, #255	@ 0xff
 800deca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800dece:	f001 f9e5 	bl	800f29c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ded2:	f001 f9b1 	bl	800f238 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dedc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dede:	e011      	b.n	800df04 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	691b      	ldr	r3, [r3, #16]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d012      	beq.n	800df0e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	3310      	adds	r3, #16
 800deec:	4618      	mov	r0, r3
 800deee:	f000 fc87 	bl	800e800 <xTaskRemoveFromEventList>
 800def2:	4603      	mov	r3, r0
 800def4:	2b00      	cmp	r3, #0
 800def6:	d001      	beq.n	800defc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800def8:	f000 fd60 	bl	800e9bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800defc:	7bbb      	ldrb	r3, [r7, #14]
 800defe:	3b01      	subs	r3, #1
 800df00:	b2db      	uxtb	r3, r3
 800df02:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800df04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	dce9      	bgt.n	800dee0 <prvUnlockQueue+0x60>
 800df0c:	e000      	b.n	800df10 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800df0e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	22ff      	movs	r2, #255	@ 0xff
 800df14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800df18:	f001 f9c0 	bl	800f29c <vPortExitCritical>
}
 800df1c:	bf00      	nop
 800df1e:	3710      	adds	r7, #16
 800df20:	46bd      	mov	sp, r7
 800df22:	bd80      	pop	{r7, pc}

0800df24 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800df24:	b580      	push	{r7, lr}
 800df26:	b084      	sub	sp, #16
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800df2c:	f001 f984 	bl	800f238 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df34:	2b00      	cmp	r3, #0
 800df36:	d102      	bne.n	800df3e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800df38:	2301      	movs	r3, #1
 800df3a:	60fb      	str	r3, [r7, #12]
 800df3c:	e001      	b.n	800df42 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800df3e:	2300      	movs	r3, #0
 800df40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800df42:	f001 f9ab 	bl	800f29c <vPortExitCritical>

	return xReturn;
 800df46:	68fb      	ldr	r3, [r7, #12]
}
 800df48:	4618      	mov	r0, r3
 800df4a:	3710      	adds	r7, #16
 800df4c:	46bd      	mov	sp, r7
 800df4e:	bd80      	pop	{r7, pc}

0800df50 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800df50:	b580      	push	{r7, lr}
 800df52:	b084      	sub	sp, #16
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800df58:	f001 f96e 	bl	800f238 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800df64:	429a      	cmp	r2, r3
 800df66:	d102      	bne.n	800df6e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800df68:	2301      	movs	r3, #1
 800df6a:	60fb      	str	r3, [r7, #12]
 800df6c:	e001      	b.n	800df72 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800df6e:	2300      	movs	r3, #0
 800df70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800df72:	f001 f993 	bl	800f29c <vPortExitCritical>

	return xReturn;
 800df76:	68fb      	ldr	r3, [r7, #12]
}
 800df78:	4618      	mov	r0, r3
 800df7a:	3710      	adds	r7, #16
 800df7c:	46bd      	mov	sp, r7
 800df7e:	bd80      	pop	{r7, pc}

0800df80 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800df80:	b580      	push	{r7, lr}
 800df82:	b08e      	sub	sp, #56	@ 0x38
 800df84:	af04      	add	r7, sp, #16
 800df86:	60f8      	str	r0, [r7, #12]
 800df88:	60b9      	str	r1, [r7, #8]
 800df8a:	607a      	str	r2, [r7, #4]
 800df8c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800df8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df90:	2b00      	cmp	r3, #0
 800df92:	d10b      	bne.n	800dfac <xTaskCreateStatic+0x2c>
	__asm volatile
 800df94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df98:	f383 8811 	msr	BASEPRI, r3
 800df9c:	f3bf 8f6f 	isb	sy
 800dfa0:	f3bf 8f4f 	dsb	sy
 800dfa4:	623b      	str	r3, [r7, #32]
}
 800dfa6:	bf00      	nop
 800dfa8:	bf00      	nop
 800dfaa:	e7fd      	b.n	800dfa8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800dfac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d10b      	bne.n	800dfca <xTaskCreateStatic+0x4a>
	__asm volatile
 800dfb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfb6:	f383 8811 	msr	BASEPRI, r3
 800dfba:	f3bf 8f6f 	isb	sy
 800dfbe:	f3bf 8f4f 	dsb	sy
 800dfc2:	61fb      	str	r3, [r7, #28]
}
 800dfc4:	bf00      	nop
 800dfc6:	bf00      	nop
 800dfc8:	e7fd      	b.n	800dfc6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800dfca:	23a0      	movs	r3, #160	@ 0xa0
 800dfcc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800dfce:	693b      	ldr	r3, [r7, #16]
 800dfd0:	2ba0      	cmp	r3, #160	@ 0xa0
 800dfd2:	d00b      	beq.n	800dfec <xTaskCreateStatic+0x6c>
	__asm volatile
 800dfd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfd8:	f383 8811 	msr	BASEPRI, r3
 800dfdc:	f3bf 8f6f 	isb	sy
 800dfe0:	f3bf 8f4f 	dsb	sy
 800dfe4:	61bb      	str	r3, [r7, #24]
}
 800dfe6:	bf00      	nop
 800dfe8:	bf00      	nop
 800dfea:	e7fd      	b.n	800dfe8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800dfec:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800dfee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d01e      	beq.n	800e032 <xTaskCreateStatic+0xb2>
 800dff4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d01b      	beq.n	800e032 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dffc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800dffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e000:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e002:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e006:	2202      	movs	r2, #2
 800e008:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e00c:	2300      	movs	r3, #0
 800e00e:	9303      	str	r3, [sp, #12]
 800e010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e012:	9302      	str	r3, [sp, #8]
 800e014:	f107 0314 	add.w	r3, r7, #20
 800e018:	9301      	str	r3, [sp, #4]
 800e01a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e01c:	9300      	str	r3, [sp, #0]
 800e01e:	683b      	ldr	r3, [r7, #0]
 800e020:	687a      	ldr	r2, [r7, #4]
 800e022:	68b9      	ldr	r1, [r7, #8]
 800e024:	68f8      	ldr	r0, [r7, #12]
 800e026:	f000 f851 	bl	800e0cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e02a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e02c:	f000 f8ee 	bl	800e20c <prvAddNewTaskToReadyList>
 800e030:	e001      	b.n	800e036 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800e032:	2300      	movs	r3, #0
 800e034:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e036:	697b      	ldr	r3, [r7, #20]
	}
 800e038:	4618      	mov	r0, r3
 800e03a:	3728      	adds	r7, #40	@ 0x28
 800e03c:	46bd      	mov	sp, r7
 800e03e:	bd80      	pop	{r7, pc}

0800e040 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e040:	b580      	push	{r7, lr}
 800e042:	b08c      	sub	sp, #48	@ 0x30
 800e044:	af04      	add	r7, sp, #16
 800e046:	60f8      	str	r0, [r7, #12]
 800e048:	60b9      	str	r1, [r7, #8]
 800e04a:	603b      	str	r3, [r7, #0]
 800e04c:	4613      	mov	r3, r2
 800e04e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e050:	88fb      	ldrh	r3, [r7, #6]
 800e052:	009b      	lsls	r3, r3, #2
 800e054:	4618      	mov	r0, r3
 800e056:	f001 fa11 	bl	800f47c <pvPortMalloc>
 800e05a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e05c:	697b      	ldr	r3, [r7, #20]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d00e      	beq.n	800e080 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e062:	20a0      	movs	r0, #160	@ 0xa0
 800e064:	f001 fa0a 	bl	800f47c <pvPortMalloc>
 800e068:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e06a:	69fb      	ldr	r3, [r7, #28]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d003      	beq.n	800e078 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e070:	69fb      	ldr	r3, [r7, #28]
 800e072:	697a      	ldr	r2, [r7, #20]
 800e074:	631a      	str	r2, [r3, #48]	@ 0x30
 800e076:	e005      	b.n	800e084 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e078:	6978      	ldr	r0, [r7, #20]
 800e07a:	f001 facd 	bl	800f618 <vPortFree>
 800e07e:	e001      	b.n	800e084 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e080:	2300      	movs	r3, #0
 800e082:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e084:	69fb      	ldr	r3, [r7, #28]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d017      	beq.n	800e0ba <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e08a:	69fb      	ldr	r3, [r7, #28]
 800e08c:	2200      	movs	r2, #0
 800e08e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e092:	88fa      	ldrh	r2, [r7, #6]
 800e094:	2300      	movs	r3, #0
 800e096:	9303      	str	r3, [sp, #12]
 800e098:	69fb      	ldr	r3, [r7, #28]
 800e09a:	9302      	str	r3, [sp, #8]
 800e09c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e09e:	9301      	str	r3, [sp, #4]
 800e0a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0a2:	9300      	str	r3, [sp, #0]
 800e0a4:	683b      	ldr	r3, [r7, #0]
 800e0a6:	68b9      	ldr	r1, [r7, #8]
 800e0a8:	68f8      	ldr	r0, [r7, #12]
 800e0aa:	f000 f80f 	bl	800e0cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e0ae:	69f8      	ldr	r0, [r7, #28]
 800e0b0:	f000 f8ac 	bl	800e20c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e0b4:	2301      	movs	r3, #1
 800e0b6:	61bb      	str	r3, [r7, #24]
 800e0b8:	e002      	b.n	800e0c0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e0ba:	f04f 33ff 	mov.w	r3, #4294967295
 800e0be:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e0c0:	69bb      	ldr	r3, [r7, #24]
	}
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	3720      	adds	r7, #32
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	bd80      	pop	{r7, pc}
	...

0800e0cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e0cc:	b580      	push	{r7, lr}
 800e0ce:	b088      	sub	sp, #32
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	60f8      	str	r0, [r7, #12]
 800e0d4:	60b9      	str	r1, [r7, #8]
 800e0d6:	607a      	str	r2, [r7, #4]
 800e0d8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e0da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e0e4:	3b01      	subs	r3, #1
 800e0e6:	009b      	lsls	r3, r3, #2
 800e0e8:	4413      	add	r3, r2
 800e0ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e0ec:	69bb      	ldr	r3, [r7, #24]
 800e0ee:	f023 0307 	bic.w	r3, r3, #7
 800e0f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e0f4:	69bb      	ldr	r3, [r7, #24]
 800e0f6:	f003 0307 	and.w	r3, r3, #7
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d00b      	beq.n	800e116 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800e0fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e102:	f383 8811 	msr	BASEPRI, r3
 800e106:	f3bf 8f6f 	isb	sy
 800e10a:	f3bf 8f4f 	dsb	sy
 800e10e:	617b      	str	r3, [r7, #20]
}
 800e110:	bf00      	nop
 800e112:	bf00      	nop
 800e114:	e7fd      	b.n	800e112 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e116:	68bb      	ldr	r3, [r7, #8]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d01f      	beq.n	800e15c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e11c:	2300      	movs	r3, #0
 800e11e:	61fb      	str	r3, [r7, #28]
 800e120:	e012      	b.n	800e148 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e122:	68ba      	ldr	r2, [r7, #8]
 800e124:	69fb      	ldr	r3, [r7, #28]
 800e126:	4413      	add	r3, r2
 800e128:	7819      	ldrb	r1, [r3, #0]
 800e12a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e12c:	69fb      	ldr	r3, [r7, #28]
 800e12e:	4413      	add	r3, r2
 800e130:	3334      	adds	r3, #52	@ 0x34
 800e132:	460a      	mov	r2, r1
 800e134:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e136:	68ba      	ldr	r2, [r7, #8]
 800e138:	69fb      	ldr	r3, [r7, #28]
 800e13a:	4413      	add	r3, r2
 800e13c:	781b      	ldrb	r3, [r3, #0]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d006      	beq.n	800e150 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e142:	69fb      	ldr	r3, [r7, #28]
 800e144:	3301      	adds	r3, #1
 800e146:	61fb      	str	r3, [r7, #28]
 800e148:	69fb      	ldr	r3, [r7, #28]
 800e14a:	2b0f      	cmp	r3, #15
 800e14c:	d9e9      	bls.n	800e122 <prvInitialiseNewTask+0x56>
 800e14e:	e000      	b.n	800e152 <prvInitialiseNewTask+0x86>
			{
				break;
 800e150:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e154:	2200      	movs	r2, #0
 800e156:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e15a:	e003      	b.n	800e164 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e15c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e15e:	2200      	movs	r2, #0
 800e160:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e166:	2b06      	cmp	r3, #6
 800e168:	d901      	bls.n	800e16e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e16a:	2306      	movs	r3, #6
 800e16c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e16e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e170:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e172:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e176:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e178:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800e17a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e17c:	2200      	movs	r2, #0
 800e17e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e182:	3304      	adds	r3, #4
 800e184:	4618      	mov	r0, r3
 800e186:	f7ff f8d9 	bl	800d33c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e18a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e18c:	3318      	adds	r3, #24
 800e18e:	4618      	mov	r0, r3
 800e190:	f7ff f8d4 	bl	800d33c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e196:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e198:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e19a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e19c:	f1c3 0207 	rsb	r2, r3, #7
 800e1a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1a2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e1a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e1a8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e1aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1ac:	2200      	movs	r2, #0
 800e1ae:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e1b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1b4:	2200      	movs	r2, #0
 800e1b6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e1ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1bc:	334c      	adds	r3, #76	@ 0x4c
 800e1be:	224c      	movs	r2, #76	@ 0x4c
 800e1c0:	2100      	movs	r1, #0
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	f001 fc58 	bl	800fa78 <memset>
 800e1c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1ca:	4a0d      	ldr	r2, [pc, #52]	@ (800e200 <prvInitialiseNewTask+0x134>)
 800e1cc:	651a      	str	r2, [r3, #80]	@ 0x50
 800e1ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1d0:	4a0c      	ldr	r2, [pc, #48]	@ (800e204 <prvInitialiseNewTask+0x138>)
 800e1d2:	655a      	str	r2, [r3, #84]	@ 0x54
 800e1d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1d6:	4a0c      	ldr	r2, [pc, #48]	@ (800e208 <prvInitialiseNewTask+0x13c>)
 800e1d8:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e1da:	683a      	ldr	r2, [r7, #0]
 800e1dc:	68f9      	ldr	r1, [r7, #12]
 800e1de:	69b8      	ldr	r0, [r7, #24]
 800e1e0:	f000 fefa 	bl	800efd8 <pxPortInitialiseStack>
 800e1e4:	4602      	mov	r2, r0
 800e1e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1e8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e1ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d002      	beq.n	800e1f6 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e1f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e1f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e1f6:	bf00      	nop
 800e1f8:	3720      	adds	r7, #32
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	bd80      	pop	{r7, pc}
 800e1fe:	bf00      	nop
 800e200:	200053c4 	.word	0x200053c4
 800e204:	2000542c 	.word	0x2000542c
 800e208:	20005494 	.word	0x20005494

0800e20c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e20c:	b580      	push	{r7, lr}
 800e20e:	b082      	sub	sp, #8
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e214:	f001 f810 	bl	800f238 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e218:	4b2a      	ldr	r3, [pc, #168]	@ (800e2c4 <prvAddNewTaskToReadyList+0xb8>)
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	3301      	adds	r3, #1
 800e21e:	4a29      	ldr	r2, [pc, #164]	@ (800e2c4 <prvAddNewTaskToReadyList+0xb8>)
 800e220:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e222:	4b29      	ldr	r3, [pc, #164]	@ (800e2c8 <prvAddNewTaskToReadyList+0xbc>)
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d109      	bne.n	800e23e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e22a:	4a27      	ldr	r2, [pc, #156]	@ (800e2c8 <prvAddNewTaskToReadyList+0xbc>)
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e230:	4b24      	ldr	r3, [pc, #144]	@ (800e2c4 <prvAddNewTaskToReadyList+0xb8>)
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	2b01      	cmp	r3, #1
 800e236:	d110      	bne.n	800e25a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e238:	f000 fbe4 	bl	800ea04 <prvInitialiseTaskLists>
 800e23c:	e00d      	b.n	800e25a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e23e:	4b23      	ldr	r3, [pc, #140]	@ (800e2cc <prvAddNewTaskToReadyList+0xc0>)
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d109      	bne.n	800e25a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e246:	4b20      	ldr	r3, [pc, #128]	@ (800e2c8 <prvAddNewTaskToReadyList+0xbc>)
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e250:	429a      	cmp	r2, r3
 800e252:	d802      	bhi.n	800e25a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e254:	4a1c      	ldr	r2, [pc, #112]	@ (800e2c8 <prvAddNewTaskToReadyList+0xbc>)
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e25a:	4b1d      	ldr	r3, [pc, #116]	@ (800e2d0 <prvAddNewTaskToReadyList+0xc4>)
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	3301      	adds	r3, #1
 800e260:	4a1b      	ldr	r2, [pc, #108]	@ (800e2d0 <prvAddNewTaskToReadyList+0xc4>)
 800e262:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e268:	2201      	movs	r2, #1
 800e26a:	409a      	lsls	r2, r3
 800e26c:	4b19      	ldr	r3, [pc, #100]	@ (800e2d4 <prvAddNewTaskToReadyList+0xc8>)
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	4313      	orrs	r3, r2
 800e272:	4a18      	ldr	r2, [pc, #96]	@ (800e2d4 <prvAddNewTaskToReadyList+0xc8>)
 800e274:	6013      	str	r3, [r2, #0]
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e27a:	4613      	mov	r3, r2
 800e27c:	009b      	lsls	r3, r3, #2
 800e27e:	4413      	add	r3, r2
 800e280:	009b      	lsls	r3, r3, #2
 800e282:	4a15      	ldr	r2, [pc, #84]	@ (800e2d8 <prvAddNewTaskToReadyList+0xcc>)
 800e284:	441a      	add	r2, r3
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	3304      	adds	r3, #4
 800e28a:	4619      	mov	r1, r3
 800e28c:	4610      	mov	r0, r2
 800e28e:	f7ff f862 	bl	800d356 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e292:	f001 f803 	bl	800f29c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e296:	4b0d      	ldr	r3, [pc, #52]	@ (800e2cc <prvAddNewTaskToReadyList+0xc0>)
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d00e      	beq.n	800e2bc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e29e:	4b0a      	ldr	r3, [pc, #40]	@ (800e2c8 <prvAddNewTaskToReadyList+0xbc>)
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2a8:	429a      	cmp	r2, r3
 800e2aa:	d207      	bcs.n	800e2bc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e2ac:	4b0b      	ldr	r3, [pc, #44]	@ (800e2dc <prvAddNewTaskToReadyList+0xd0>)
 800e2ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e2b2:	601a      	str	r2, [r3, #0]
 800e2b4:	f3bf 8f4f 	dsb	sy
 800e2b8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e2bc:	bf00      	nop
 800e2be:	3708      	adds	r7, #8
 800e2c0:	46bd      	mov	sp, r7
 800e2c2:	bd80      	pop	{r7, pc}
 800e2c4:	20001768 	.word	0x20001768
 800e2c8:	20001668 	.word	0x20001668
 800e2cc:	20001774 	.word	0x20001774
 800e2d0:	20001784 	.word	0x20001784
 800e2d4:	20001770 	.word	0x20001770
 800e2d8:	2000166c 	.word	0x2000166c
 800e2dc:	e000ed04 	.word	0xe000ed04

0800e2e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	b084      	sub	sp, #16
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d018      	beq.n	800e324 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e2f2:	4b14      	ldr	r3, [pc, #80]	@ (800e344 <vTaskDelay+0x64>)
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d00b      	beq.n	800e312 <vTaskDelay+0x32>
	__asm volatile
 800e2fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2fe:	f383 8811 	msr	BASEPRI, r3
 800e302:	f3bf 8f6f 	isb	sy
 800e306:	f3bf 8f4f 	dsb	sy
 800e30a:	60bb      	str	r3, [r7, #8]
}
 800e30c:	bf00      	nop
 800e30e:	bf00      	nop
 800e310:	e7fd      	b.n	800e30e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e312:	f000 f885 	bl	800e420 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e316:	2100      	movs	r1, #0
 800e318:	6878      	ldr	r0, [r7, #4]
 800e31a:	f000 fdf7 	bl	800ef0c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e31e:	f000 f88d 	bl	800e43c <xTaskResumeAll>
 800e322:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d107      	bne.n	800e33a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800e32a:	4b07      	ldr	r3, [pc, #28]	@ (800e348 <vTaskDelay+0x68>)
 800e32c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e330:	601a      	str	r2, [r3, #0]
 800e332:	f3bf 8f4f 	dsb	sy
 800e336:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e33a:	bf00      	nop
 800e33c:	3710      	adds	r7, #16
 800e33e:	46bd      	mov	sp, r7
 800e340:	bd80      	pop	{r7, pc}
 800e342:	bf00      	nop
 800e344:	20001790 	.word	0x20001790
 800e348:	e000ed04 	.word	0xe000ed04

0800e34c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b08a      	sub	sp, #40	@ 0x28
 800e350:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e352:	2300      	movs	r3, #0
 800e354:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e356:	2300      	movs	r3, #0
 800e358:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e35a:	463a      	mov	r2, r7
 800e35c:	1d39      	adds	r1, r7, #4
 800e35e:	f107 0308 	add.w	r3, r7, #8
 800e362:	4618      	mov	r0, r3
 800e364:	f7f2 fefa 	bl	800115c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e368:	6839      	ldr	r1, [r7, #0]
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	68ba      	ldr	r2, [r7, #8]
 800e36e:	9202      	str	r2, [sp, #8]
 800e370:	9301      	str	r3, [sp, #4]
 800e372:	2300      	movs	r3, #0
 800e374:	9300      	str	r3, [sp, #0]
 800e376:	2300      	movs	r3, #0
 800e378:	460a      	mov	r2, r1
 800e37a:	4921      	ldr	r1, [pc, #132]	@ (800e400 <vTaskStartScheduler+0xb4>)
 800e37c:	4821      	ldr	r0, [pc, #132]	@ (800e404 <vTaskStartScheduler+0xb8>)
 800e37e:	f7ff fdff 	bl	800df80 <xTaskCreateStatic>
 800e382:	4603      	mov	r3, r0
 800e384:	4a20      	ldr	r2, [pc, #128]	@ (800e408 <vTaskStartScheduler+0xbc>)
 800e386:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e388:	4b1f      	ldr	r3, [pc, #124]	@ (800e408 <vTaskStartScheduler+0xbc>)
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d002      	beq.n	800e396 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e390:	2301      	movs	r3, #1
 800e392:	617b      	str	r3, [r7, #20]
 800e394:	e001      	b.n	800e39a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e396:	2300      	movs	r3, #0
 800e398:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e39a:	697b      	ldr	r3, [r7, #20]
 800e39c:	2b01      	cmp	r3, #1
 800e39e:	d11b      	bne.n	800e3d8 <vTaskStartScheduler+0x8c>
	__asm volatile
 800e3a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3a4:	f383 8811 	msr	BASEPRI, r3
 800e3a8:	f3bf 8f6f 	isb	sy
 800e3ac:	f3bf 8f4f 	dsb	sy
 800e3b0:	613b      	str	r3, [r7, #16]
}
 800e3b2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e3b4:	4b15      	ldr	r3, [pc, #84]	@ (800e40c <vTaskStartScheduler+0xc0>)
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	334c      	adds	r3, #76	@ 0x4c
 800e3ba:	4a15      	ldr	r2, [pc, #84]	@ (800e410 <vTaskStartScheduler+0xc4>)
 800e3bc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e3be:	4b15      	ldr	r3, [pc, #84]	@ (800e414 <vTaskStartScheduler+0xc8>)
 800e3c0:	f04f 32ff 	mov.w	r2, #4294967295
 800e3c4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e3c6:	4b14      	ldr	r3, [pc, #80]	@ (800e418 <vTaskStartScheduler+0xcc>)
 800e3c8:	2201      	movs	r2, #1
 800e3ca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e3cc:	4b13      	ldr	r3, [pc, #76]	@ (800e41c <vTaskStartScheduler+0xd0>)
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e3d2:	f000 fe8d 	bl	800f0f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e3d6:	e00f      	b.n	800e3f8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e3d8:	697b      	ldr	r3, [r7, #20]
 800e3da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3de:	d10b      	bne.n	800e3f8 <vTaskStartScheduler+0xac>
	__asm volatile
 800e3e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3e4:	f383 8811 	msr	BASEPRI, r3
 800e3e8:	f3bf 8f6f 	isb	sy
 800e3ec:	f3bf 8f4f 	dsb	sy
 800e3f0:	60fb      	str	r3, [r7, #12]
}
 800e3f2:	bf00      	nop
 800e3f4:	bf00      	nop
 800e3f6:	e7fd      	b.n	800e3f4 <vTaskStartScheduler+0xa8>
}
 800e3f8:	bf00      	nop
 800e3fa:	3718      	adds	r7, #24
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	bd80      	pop	{r7, pc}
 800e400:	080103e4 	.word	0x080103e4
 800e404:	0800e9d5 	.word	0x0800e9d5
 800e408:	2000178c 	.word	0x2000178c
 800e40c:	20001668 	.word	0x20001668
 800e410:	200002d4 	.word	0x200002d4
 800e414:	20001788 	.word	0x20001788
 800e418:	20001774 	.word	0x20001774
 800e41c:	2000176c 	.word	0x2000176c

0800e420 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e420:	b480      	push	{r7}
 800e422:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e424:	4b04      	ldr	r3, [pc, #16]	@ (800e438 <vTaskSuspendAll+0x18>)
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	3301      	adds	r3, #1
 800e42a:	4a03      	ldr	r2, [pc, #12]	@ (800e438 <vTaskSuspendAll+0x18>)
 800e42c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e42e:	bf00      	nop
 800e430:	46bd      	mov	sp, r7
 800e432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e436:	4770      	bx	lr
 800e438:	20001790 	.word	0x20001790

0800e43c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b084      	sub	sp, #16
 800e440:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e442:	2300      	movs	r3, #0
 800e444:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e446:	2300      	movs	r3, #0
 800e448:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e44a:	4b42      	ldr	r3, [pc, #264]	@ (800e554 <xTaskResumeAll+0x118>)
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d10b      	bne.n	800e46a <xTaskResumeAll+0x2e>
	__asm volatile
 800e452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e456:	f383 8811 	msr	BASEPRI, r3
 800e45a:	f3bf 8f6f 	isb	sy
 800e45e:	f3bf 8f4f 	dsb	sy
 800e462:	603b      	str	r3, [r7, #0]
}
 800e464:	bf00      	nop
 800e466:	bf00      	nop
 800e468:	e7fd      	b.n	800e466 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e46a:	f000 fee5 	bl	800f238 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e46e:	4b39      	ldr	r3, [pc, #228]	@ (800e554 <xTaskResumeAll+0x118>)
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	3b01      	subs	r3, #1
 800e474:	4a37      	ldr	r2, [pc, #220]	@ (800e554 <xTaskResumeAll+0x118>)
 800e476:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e478:	4b36      	ldr	r3, [pc, #216]	@ (800e554 <xTaskResumeAll+0x118>)
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d161      	bne.n	800e544 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e480:	4b35      	ldr	r3, [pc, #212]	@ (800e558 <xTaskResumeAll+0x11c>)
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d05d      	beq.n	800e544 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e488:	e02e      	b.n	800e4e8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e48a:	4b34      	ldr	r3, [pc, #208]	@ (800e55c <xTaskResumeAll+0x120>)
 800e48c:	68db      	ldr	r3, [r3, #12]
 800e48e:	68db      	ldr	r3, [r3, #12]
 800e490:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	3318      	adds	r3, #24
 800e496:	4618      	mov	r0, r3
 800e498:	f7fe ffba 	bl	800d410 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	3304      	adds	r3, #4
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	f7fe ffb5 	bl	800d410 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4aa:	2201      	movs	r2, #1
 800e4ac:	409a      	lsls	r2, r3
 800e4ae:	4b2c      	ldr	r3, [pc, #176]	@ (800e560 <xTaskResumeAll+0x124>)
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	4313      	orrs	r3, r2
 800e4b4:	4a2a      	ldr	r2, [pc, #168]	@ (800e560 <xTaskResumeAll+0x124>)
 800e4b6:	6013      	str	r3, [r2, #0]
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4bc:	4613      	mov	r3, r2
 800e4be:	009b      	lsls	r3, r3, #2
 800e4c0:	4413      	add	r3, r2
 800e4c2:	009b      	lsls	r3, r3, #2
 800e4c4:	4a27      	ldr	r2, [pc, #156]	@ (800e564 <xTaskResumeAll+0x128>)
 800e4c6:	441a      	add	r2, r3
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	3304      	adds	r3, #4
 800e4cc:	4619      	mov	r1, r3
 800e4ce:	4610      	mov	r0, r2
 800e4d0:	f7fe ff41 	bl	800d356 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4d8:	4b23      	ldr	r3, [pc, #140]	@ (800e568 <xTaskResumeAll+0x12c>)
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4de:	429a      	cmp	r2, r3
 800e4e0:	d302      	bcc.n	800e4e8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e4e2:	4b22      	ldr	r3, [pc, #136]	@ (800e56c <xTaskResumeAll+0x130>)
 800e4e4:	2201      	movs	r2, #1
 800e4e6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e4e8:	4b1c      	ldr	r3, [pc, #112]	@ (800e55c <xTaskResumeAll+0x120>)
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d1cc      	bne.n	800e48a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d001      	beq.n	800e4fa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e4f6:	f000 fb29 	bl	800eb4c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e4fa:	4b1d      	ldr	r3, [pc, #116]	@ (800e570 <xTaskResumeAll+0x134>)
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d010      	beq.n	800e528 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e506:	f000 f837 	bl	800e578 <xTaskIncrementTick>
 800e50a:	4603      	mov	r3, r0
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d002      	beq.n	800e516 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e510:	4b16      	ldr	r3, [pc, #88]	@ (800e56c <xTaskResumeAll+0x130>)
 800e512:	2201      	movs	r2, #1
 800e514:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	3b01      	subs	r3, #1
 800e51a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d1f1      	bne.n	800e506 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e522:	4b13      	ldr	r3, [pc, #76]	@ (800e570 <xTaskResumeAll+0x134>)
 800e524:	2200      	movs	r2, #0
 800e526:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e528:	4b10      	ldr	r3, [pc, #64]	@ (800e56c <xTaskResumeAll+0x130>)
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d009      	beq.n	800e544 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e530:	2301      	movs	r3, #1
 800e532:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e534:	4b0f      	ldr	r3, [pc, #60]	@ (800e574 <xTaskResumeAll+0x138>)
 800e536:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e53a:	601a      	str	r2, [r3, #0]
 800e53c:	f3bf 8f4f 	dsb	sy
 800e540:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e544:	f000 feaa 	bl	800f29c <vPortExitCritical>

	return xAlreadyYielded;
 800e548:	68bb      	ldr	r3, [r7, #8]
}
 800e54a:	4618      	mov	r0, r3
 800e54c:	3710      	adds	r7, #16
 800e54e:	46bd      	mov	sp, r7
 800e550:	bd80      	pop	{r7, pc}
 800e552:	bf00      	nop
 800e554:	20001790 	.word	0x20001790
 800e558:	20001768 	.word	0x20001768
 800e55c:	20001728 	.word	0x20001728
 800e560:	20001770 	.word	0x20001770
 800e564:	2000166c 	.word	0x2000166c
 800e568:	20001668 	.word	0x20001668
 800e56c:	2000177c 	.word	0x2000177c
 800e570:	20001778 	.word	0x20001778
 800e574:	e000ed04 	.word	0xe000ed04

0800e578 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e578:	b580      	push	{r7, lr}
 800e57a:	b086      	sub	sp, #24
 800e57c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e57e:	2300      	movs	r3, #0
 800e580:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e582:	4b4f      	ldr	r3, [pc, #316]	@ (800e6c0 <xTaskIncrementTick+0x148>)
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	2b00      	cmp	r3, #0
 800e588:	f040 808f 	bne.w	800e6aa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e58c:	4b4d      	ldr	r3, [pc, #308]	@ (800e6c4 <xTaskIncrementTick+0x14c>)
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	3301      	adds	r3, #1
 800e592:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e594:	4a4b      	ldr	r2, [pc, #300]	@ (800e6c4 <xTaskIncrementTick+0x14c>)
 800e596:	693b      	ldr	r3, [r7, #16]
 800e598:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e59a:	693b      	ldr	r3, [r7, #16]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d121      	bne.n	800e5e4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e5a0:	4b49      	ldr	r3, [pc, #292]	@ (800e6c8 <xTaskIncrementTick+0x150>)
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d00b      	beq.n	800e5c2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800e5aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5ae:	f383 8811 	msr	BASEPRI, r3
 800e5b2:	f3bf 8f6f 	isb	sy
 800e5b6:	f3bf 8f4f 	dsb	sy
 800e5ba:	603b      	str	r3, [r7, #0]
}
 800e5bc:	bf00      	nop
 800e5be:	bf00      	nop
 800e5c0:	e7fd      	b.n	800e5be <xTaskIncrementTick+0x46>
 800e5c2:	4b41      	ldr	r3, [pc, #260]	@ (800e6c8 <xTaskIncrementTick+0x150>)
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	60fb      	str	r3, [r7, #12]
 800e5c8:	4b40      	ldr	r3, [pc, #256]	@ (800e6cc <xTaskIncrementTick+0x154>)
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	4a3e      	ldr	r2, [pc, #248]	@ (800e6c8 <xTaskIncrementTick+0x150>)
 800e5ce:	6013      	str	r3, [r2, #0]
 800e5d0:	4a3e      	ldr	r2, [pc, #248]	@ (800e6cc <xTaskIncrementTick+0x154>)
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	6013      	str	r3, [r2, #0]
 800e5d6:	4b3e      	ldr	r3, [pc, #248]	@ (800e6d0 <xTaskIncrementTick+0x158>)
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	3301      	adds	r3, #1
 800e5dc:	4a3c      	ldr	r2, [pc, #240]	@ (800e6d0 <xTaskIncrementTick+0x158>)
 800e5de:	6013      	str	r3, [r2, #0]
 800e5e0:	f000 fab4 	bl	800eb4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e5e4:	4b3b      	ldr	r3, [pc, #236]	@ (800e6d4 <xTaskIncrementTick+0x15c>)
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	693a      	ldr	r2, [r7, #16]
 800e5ea:	429a      	cmp	r2, r3
 800e5ec:	d348      	bcc.n	800e680 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e5ee:	4b36      	ldr	r3, [pc, #216]	@ (800e6c8 <xTaskIncrementTick+0x150>)
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d104      	bne.n	800e602 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e5f8:	4b36      	ldr	r3, [pc, #216]	@ (800e6d4 <xTaskIncrementTick+0x15c>)
 800e5fa:	f04f 32ff 	mov.w	r2, #4294967295
 800e5fe:	601a      	str	r2, [r3, #0]
					break;
 800e600:	e03e      	b.n	800e680 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e602:	4b31      	ldr	r3, [pc, #196]	@ (800e6c8 <xTaskIncrementTick+0x150>)
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	68db      	ldr	r3, [r3, #12]
 800e608:	68db      	ldr	r3, [r3, #12]
 800e60a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e60c:	68bb      	ldr	r3, [r7, #8]
 800e60e:	685b      	ldr	r3, [r3, #4]
 800e610:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e612:	693a      	ldr	r2, [r7, #16]
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	429a      	cmp	r2, r3
 800e618:	d203      	bcs.n	800e622 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e61a:	4a2e      	ldr	r2, [pc, #184]	@ (800e6d4 <xTaskIncrementTick+0x15c>)
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e620:	e02e      	b.n	800e680 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e622:	68bb      	ldr	r3, [r7, #8]
 800e624:	3304      	adds	r3, #4
 800e626:	4618      	mov	r0, r3
 800e628:	f7fe fef2 	bl	800d410 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e62c:	68bb      	ldr	r3, [r7, #8]
 800e62e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e630:	2b00      	cmp	r3, #0
 800e632:	d004      	beq.n	800e63e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e634:	68bb      	ldr	r3, [r7, #8]
 800e636:	3318      	adds	r3, #24
 800e638:	4618      	mov	r0, r3
 800e63a:	f7fe fee9 	bl	800d410 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e63e:	68bb      	ldr	r3, [r7, #8]
 800e640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e642:	2201      	movs	r2, #1
 800e644:	409a      	lsls	r2, r3
 800e646:	4b24      	ldr	r3, [pc, #144]	@ (800e6d8 <xTaskIncrementTick+0x160>)
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	4313      	orrs	r3, r2
 800e64c:	4a22      	ldr	r2, [pc, #136]	@ (800e6d8 <xTaskIncrementTick+0x160>)
 800e64e:	6013      	str	r3, [r2, #0]
 800e650:	68bb      	ldr	r3, [r7, #8]
 800e652:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e654:	4613      	mov	r3, r2
 800e656:	009b      	lsls	r3, r3, #2
 800e658:	4413      	add	r3, r2
 800e65a:	009b      	lsls	r3, r3, #2
 800e65c:	4a1f      	ldr	r2, [pc, #124]	@ (800e6dc <xTaskIncrementTick+0x164>)
 800e65e:	441a      	add	r2, r3
 800e660:	68bb      	ldr	r3, [r7, #8]
 800e662:	3304      	adds	r3, #4
 800e664:	4619      	mov	r1, r3
 800e666:	4610      	mov	r0, r2
 800e668:	f7fe fe75 	bl	800d356 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e66c:	68bb      	ldr	r3, [r7, #8]
 800e66e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e670:	4b1b      	ldr	r3, [pc, #108]	@ (800e6e0 <xTaskIncrementTick+0x168>)
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e676:	429a      	cmp	r2, r3
 800e678:	d3b9      	bcc.n	800e5ee <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e67a:	2301      	movs	r3, #1
 800e67c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e67e:	e7b6      	b.n	800e5ee <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e680:	4b17      	ldr	r3, [pc, #92]	@ (800e6e0 <xTaskIncrementTick+0x168>)
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e686:	4915      	ldr	r1, [pc, #84]	@ (800e6dc <xTaskIncrementTick+0x164>)
 800e688:	4613      	mov	r3, r2
 800e68a:	009b      	lsls	r3, r3, #2
 800e68c:	4413      	add	r3, r2
 800e68e:	009b      	lsls	r3, r3, #2
 800e690:	440b      	add	r3, r1
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	2b01      	cmp	r3, #1
 800e696:	d901      	bls.n	800e69c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e698:	2301      	movs	r3, #1
 800e69a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e69c:	4b11      	ldr	r3, [pc, #68]	@ (800e6e4 <xTaskIncrementTick+0x16c>)
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d007      	beq.n	800e6b4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e6a4:	2301      	movs	r3, #1
 800e6a6:	617b      	str	r3, [r7, #20]
 800e6a8:	e004      	b.n	800e6b4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e6aa:	4b0f      	ldr	r3, [pc, #60]	@ (800e6e8 <xTaskIncrementTick+0x170>)
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	3301      	adds	r3, #1
 800e6b0:	4a0d      	ldr	r2, [pc, #52]	@ (800e6e8 <xTaskIncrementTick+0x170>)
 800e6b2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e6b4:	697b      	ldr	r3, [r7, #20]
}
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	3718      	adds	r7, #24
 800e6ba:	46bd      	mov	sp, r7
 800e6bc:	bd80      	pop	{r7, pc}
 800e6be:	bf00      	nop
 800e6c0:	20001790 	.word	0x20001790
 800e6c4:	2000176c 	.word	0x2000176c
 800e6c8:	20001720 	.word	0x20001720
 800e6cc:	20001724 	.word	0x20001724
 800e6d0:	20001780 	.word	0x20001780
 800e6d4:	20001788 	.word	0x20001788
 800e6d8:	20001770 	.word	0x20001770
 800e6dc:	2000166c 	.word	0x2000166c
 800e6e0:	20001668 	.word	0x20001668
 800e6e4:	2000177c 	.word	0x2000177c
 800e6e8:	20001778 	.word	0x20001778

0800e6ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e6ec:	b480      	push	{r7}
 800e6ee:	b087      	sub	sp, #28
 800e6f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e6f2:	4b2a      	ldr	r3, [pc, #168]	@ (800e79c <vTaskSwitchContext+0xb0>)
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d003      	beq.n	800e702 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e6fa:	4b29      	ldr	r3, [pc, #164]	@ (800e7a0 <vTaskSwitchContext+0xb4>)
 800e6fc:	2201      	movs	r2, #1
 800e6fe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e700:	e045      	b.n	800e78e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800e702:	4b27      	ldr	r3, [pc, #156]	@ (800e7a0 <vTaskSwitchContext+0xb4>)
 800e704:	2200      	movs	r2, #0
 800e706:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e708:	4b26      	ldr	r3, [pc, #152]	@ (800e7a4 <vTaskSwitchContext+0xb8>)
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	fab3 f383 	clz	r3, r3
 800e714:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e716:	7afb      	ldrb	r3, [r7, #11]
 800e718:	f1c3 031f 	rsb	r3, r3, #31
 800e71c:	617b      	str	r3, [r7, #20]
 800e71e:	4922      	ldr	r1, [pc, #136]	@ (800e7a8 <vTaskSwitchContext+0xbc>)
 800e720:	697a      	ldr	r2, [r7, #20]
 800e722:	4613      	mov	r3, r2
 800e724:	009b      	lsls	r3, r3, #2
 800e726:	4413      	add	r3, r2
 800e728:	009b      	lsls	r3, r3, #2
 800e72a:	440b      	add	r3, r1
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d10b      	bne.n	800e74a <vTaskSwitchContext+0x5e>
	__asm volatile
 800e732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e736:	f383 8811 	msr	BASEPRI, r3
 800e73a:	f3bf 8f6f 	isb	sy
 800e73e:	f3bf 8f4f 	dsb	sy
 800e742:	607b      	str	r3, [r7, #4]
}
 800e744:	bf00      	nop
 800e746:	bf00      	nop
 800e748:	e7fd      	b.n	800e746 <vTaskSwitchContext+0x5a>
 800e74a:	697a      	ldr	r2, [r7, #20]
 800e74c:	4613      	mov	r3, r2
 800e74e:	009b      	lsls	r3, r3, #2
 800e750:	4413      	add	r3, r2
 800e752:	009b      	lsls	r3, r3, #2
 800e754:	4a14      	ldr	r2, [pc, #80]	@ (800e7a8 <vTaskSwitchContext+0xbc>)
 800e756:	4413      	add	r3, r2
 800e758:	613b      	str	r3, [r7, #16]
 800e75a:	693b      	ldr	r3, [r7, #16]
 800e75c:	685b      	ldr	r3, [r3, #4]
 800e75e:	685a      	ldr	r2, [r3, #4]
 800e760:	693b      	ldr	r3, [r7, #16]
 800e762:	605a      	str	r2, [r3, #4]
 800e764:	693b      	ldr	r3, [r7, #16]
 800e766:	685a      	ldr	r2, [r3, #4]
 800e768:	693b      	ldr	r3, [r7, #16]
 800e76a:	3308      	adds	r3, #8
 800e76c:	429a      	cmp	r2, r3
 800e76e:	d104      	bne.n	800e77a <vTaskSwitchContext+0x8e>
 800e770:	693b      	ldr	r3, [r7, #16]
 800e772:	685b      	ldr	r3, [r3, #4]
 800e774:	685a      	ldr	r2, [r3, #4]
 800e776:	693b      	ldr	r3, [r7, #16]
 800e778:	605a      	str	r2, [r3, #4]
 800e77a:	693b      	ldr	r3, [r7, #16]
 800e77c:	685b      	ldr	r3, [r3, #4]
 800e77e:	68db      	ldr	r3, [r3, #12]
 800e780:	4a0a      	ldr	r2, [pc, #40]	@ (800e7ac <vTaskSwitchContext+0xc0>)
 800e782:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e784:	4b09      	ldr	r3, [pc, #36]	@ (800e7ac <vTaskSwitchContext+0xc0>)
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	334c      	adds	r3, #76	@ 0x4c
 800e78a:	4a09      	ldr	r2, [pc, #36]	@ (800e7b0 <vTaskSwitchContext+0xc4>)
 800e78c:	6013      	str	r3, [r2, #0]
}
 800e78e:	bf00      	nop
 800e790:	371c      	adds	r7, #28
 800e792:	46bd      	mov	sp, r7
 800e794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e798:	4770      	bx	lr
 800e79a:	bf00      	nop
 800e79c:	20001790 	.word	0x20001790
 800e7a0:	2000177c 	.word	0x2000177c
 800e7a4:	20001770 	.word	0x20001770
 800e7a8:	2000166c 	.word	0x2000166c
 800e7ac:	20001668 	.word	0x20001668
 800e7b0:	200002d4 	.word	0x200002d4

0800e7b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b084      	sub	sp, #16
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	6078      	str	r0, [r7, #4]
 800e7bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d10b      	bne.n	800e7dc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800e7c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7c8:	f383 8811 	msr	BASEPRI, r3
 800e7cc:	f3bf 8f6f 	isb	sy
 800e7d0:	f3bf 8f4f 	dsb	sy
 800e7d4:	60fb      	str	r3, [r7, #12]
}
 800e7d6:	bf00      	nop
 800e7d8:	bf00      	nop
 800e7da:	e7fd      	b.n	800e7d8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e7dc:	4b07      	ldr	r3, [pc, #28]	@ (800e7fc <vTaskPlaceOnEventList+0x48>)
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	3318      	adds	r3, #24
 800e7e2:	4619      	mov	r1, r3
 800e7e4:	6878      	ldr	r0, [r7, #4]
 800e7e6:	f7fe fdda 	bl	800d39e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e7ea:	2101      	movs	r1, #1
 800e7ec:	6838      	ldr	r0, [r7, #0]
 800e7ee:	f000 fb8d 	bl	800ef0c <prvAddCurrentTaskToDelayedList>
}
 800e7f2:	bf00      	nop
 800e7f4:	3710      	adds	r7, #16
 800e7f6:	46bd      	mov	sp, r7
 800e7f8:	bd80      	pop	{r7, pc}
 800e7fa:	bf00      	nop
 800e7fc:	20001668 	.word	0x20001668

0800e800 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e800:	b580      	push	{r7, lr}
 800e802:	b086      	sub	sp, #24
 800e804:	af00      	add	r7, sp, #0
 800e806:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	68db      	ldr	r3, [r3, #12]
 800e80c:	68db      	ldr	r3, [r3, #12]
 800e80e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e810:	693b      	ldr	r3, [r7, #16]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d10b      	bne.n	800e82e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800e816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e81a:	f383 8811 	msr	BASEPRI, r3
 800e81e:	f3bf 8f6f 	isb	sy
 800e822:	f3bf 8f4f 	dsb	sy
 800e826:	60fb      	str	r3, [r7, #12]
}
 800e828:	bf00      	nop
 800e82a:	bf00      	nop
 800e82c:	e7fd      	b.n	800e82a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e82e:	693b      	ldr	r3, [r7, #16]
 800e830:	3318      	adds	r3, #24
 800e832:	4618      	mov	r0, r3
 800e834:	f7fe fdec 	bl	800d410 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e838:	4b1d      	ldr	r3, [pc, #116]	@ (800e8b0 <xTaskRemoveFromEventList+0xb0>)
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d11c      	bne.n	800e87a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e840:	693b      	ldr	r3, [r7, #16]
 800e842:	3304      	adds	r3, #4
 800e844:	4618      	mov	r0, r3
 800e846:	f7fe fde3 	bl	800d410 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e84a:	693b      	ldr	r3, [r7, #16]
 800e84c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e84e:	2201      	movs	r2, #1
 800e850:	409a      	lsls	r2, r3
 800e852:	4b18      	ldr	r3, [pc, #96]	@ (800e8b4 <xTaskRemoveFromEventList+0xb4>)
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	4313      	orrs	r3, r2
 800e858:	4a16      	ldr	r2, [pc, #88]	@ (800e8b4 <xTaskRemoveFromEventList+0xb4>)
 800e85a:	6013      	str	r3, [r2, #0]
 800e85c:	693b      	ldr	r3, [r7, #16]
 800e85e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e860:	4613      	mov	r3, r2
 800e862:	009b      	lsls	r3, r3, #2
 800e864:	4413      	add	r3, r2
 800e866:	009b      	lsls	r3, r3, #2
 800e868:	4a13      	ldr	r2, [pc, #76]	@ (800e8b8 <xTaskRemoveFromEventList+0xb8>)
 800e86a:	441a      	add	r2, r3
 800e86c:	693b      	ldr	r3, [r7, #16]
 800e86e:	3304      	adds	r3, #4
 800e870:	4619      	mov	r1, r3
 800e872:	4610      	mov	r0, r2
 800e874:	f7fe fd6f 	bl	800d356 <vListInsertEnd>
 800e878:	e005      	b.n	800e886 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e87a:	693b      	ldr	r3, [r7, #16]
 800e87c:	3318      	adds	r3, #24
 800e87e:	4619      	mov	r1, r3
 800e880:	480e      	ldr	r0, [pc, #56]	@ (800e8bc <xTaskRemoveFromEventList+0xbc>)
 800e882:	f7fe fd68 	bl	800d356 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e886:	693b      	ldr	r3, [r7, #16]
 800e888:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e88a:	4b0d      	ldr	r3, [pc, #52]	@ (800e8c0 <xTaskRemoveFromEventList+0xc0>)
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e890:	429a      	cmp	r2, r3
 800e892:	d905      	bls.n	800e8a0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e894:	2301      	movs	r3, #1
 800e896:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e898:	4b0a      	ldr	r3, [pc, #40]	@ (800e8c4 <xTaskRemoveFromEventList+0xc4>)
 800e89a:	2201      	movs	r2, #1
 800e89c:	601a      	str	r2, [r3, #0]
 800e89e:	e001      	b.n	800e8a4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e8a0:	2300      	movs	r3, #0
 800e8a2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e8a4:	697b      	ldr	r3, [r7, #20]
}
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	3718      	adds	r7, #24
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	bd80      	pop	{r7, pc}
 800e8ae:	bf00      	nop
 800e8b0:	20001790 	.word	0x20001790
 800e8b4:	20001770 	.word	0x20001770
 800e8b8:	2000166c 	.word	0x2000166c
 800e8bc:	20001728 	.word	0x20001728
 800e8c0:	20001668 	.word	0x20001668
 800e8c4:	2000177c 	.word	0x2000177c

0800e8c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e8c8:	b480      	push	{r7}
 800e8ca:	b083      	sub	sp, #12
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e8d0:	4b06      	ldr	r3, [pc, #24]	@ (800e8ec <vTaskInternalSetTimeOutState+0x24>)
 800e8d2:	681a      	ldr	r2, [r3, #0]
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e8d8:	4b05      	ldr	r3, [pc, #20]	@ (800e8f0 <vTaskInternalSetTimeOutState+0x28>)
 800e8da:	681a      	ldr	r2, [r3, #0]
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	605a      	str	r2, [r3, #4]
}
 800e8e0:	bf00      	nop
 800e8e2:	370c      	adds	r7, #12
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ea:	4770      	bx	lr
 800e8ec:	20001780 	.word	0x20001780
 800e8f0:	2000176c 	.word	0x2000176c

0800e8f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	b088      	sub	sp, #32
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	6078      	str	r0, [r7, #4]
 800e8fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d10b      	bne.n	800e91c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800e904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e908:	f383 8811 	msr	BASEPRI, r3
 800e90c:	f3bf 8f6f 	isb	sy
 800e910:	f3bf 8f4f 	dsb	sy
 800e914:	613b      	str	r3, [r7, #16]
}
 800e916:	bf00      	nop
 800e918:	bf00      	nop
 800e91a:	e7fd      	b.n	800e918 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d10b      	bne.n	800e93a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800e922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e926:	f383 8811 	msr	BASEPRI, r3
 800e92a:	f3bf 8f6f 	isb	sy
 800e92e:	f3bf 8f4f 	dsb	sy
 800e932:	60fb      	str	r3, [r7, #12]
}
 800e934:	bf00      	nop
 800e936:	bf00      	nop
 800e938:	e7fd      	b.n	800e936 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800e93a:	f000 fc7d 	bl	800f238 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e93e:	4b1d      	ldr	r3, [pc, #116]	@ (800e9b4 <xTaskCheckForTimeOut+0xc0>)
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	685b      	ldr	r3, [r3, #4]
 800e948:	69ba      	ldr	r2, [r7, #24]
 800e94a:	1ad3      	subs	r3, r2, r3
 800e94c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e94e:	683b      	ldr	r3, [r7, #0]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e956:	d102      	bne.n	800e95e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e958:	2300      	movs	r3, #0
 800e95a:	61fb      	str	r3, [r7, #28]
 800e95c:	e023      	b.n	800e9a6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	681a      	ldr	r2, [r3, #0]
 800e962:	4b15      	ldr	r3, [pc, #84]	@ (800e9b8 <xTaskCheckForTimeOut+0xc4>)
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	429a      	cmp	r2, r3
 800e968:	d007      	beq.n	800e97a <xTaskCheckForTimeOut+0x86>
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	685b      	ldr	r3, [r3, #4]
 800e96e:	69ba      	ldr	r2, [r7, #24]
 800e970:	429a      	cmp	r2, r3
 800e972:	d302      	bcc.n	800e97a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e974:	2301      	movs	r3, #1
 800e976:	61fb      	str	r3, [r7, #28]
 800e978:	e015      	b.n	800e9a6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e97a:	683b      	ldr	r3, [r7, #0]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	697a      	ldr	r2, [r7, #20]
 800e980:	429a      	cmp	r2, r3
 800e982:	d20b      	bcs.n	800e99c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e984:	683b      	ldr	r3, [r7, #0]
 800e986:	681a      	ldr	r2, [r3, #0]
 800e988:	697b      	ldr	r3, [r7, #20]
 800e98a:	1ad2      	subs	r2, r2, r3
 800e98c:	683b      	ldr	r3, [r7, #0]
 800e98e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e990:	6878      	ldr	r0, [r7, #4]
 800e992:	f7ff ff99 	bl	800e8c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e996:	2300      	movs	r3, #0
 800e998:	61fb      	str	r3, [r7, #28]
 800e99a:	e004      	b.n	800e9a6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e99c:	683b      	ldr	r3, [r7, #0]
 800e99e:	2200      	movs	r2, #0
 800e9a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e9a2:	2301      	movs	r3, #1
 800e9a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e9a6:	f000 fc79 	bl	800f29c <vPortExitCritical>

	return xReturn;
 800e9aa:	69fb      	ldr	r3, [r7, #28]
}
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	3720      	adds	r7, #32
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	bd80      	pop	{r7, pc}
 800e9b4:	2000176c 	.word	0x2000176c
 800e9b8:	20001780 	.word	0x20001780

0800e9bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e9bc:	b480      	push	{r7}
 800e9be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e9c0:	4b03      	ldr	r3, [pc, #12]	@ (800e9d0 <vTaskMissedYield+0x14>)
 800e9c2:	2201      	movs	r2, #1
 800e9c4:	601a      	str	r2, [r3, #0]
}
 800e9c6:	bf00      	nop
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ce:	4770      	bx	lr
 800e9d0:	2000177c 	.word	0x2000177c

0800e9d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e9d4:	b580      	push	{r7, lr}
 800e9d6:	b082      	sub	sp, #8
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e9dc:	f000 f852 	bl	800ea84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e9e0:	4b06      	ldr	r3, [pc, #24]	@ (800e9fc <prvIdleTask+0x28>)
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	2b01      	cmp	r3, #1
 800e9e6:	d9f9      	bls.n	800e9dc <prvIdleTask+0x8>
			{
				taskYIELD();
 800e9e8:	4b05      	ldr	r3, [pc, #20]	@ (800ea00 <prvIdleTask+0x2c>)
 800e9ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e9ee:	601a      	str	r2, [r3, #0]
 800e9f0:	f3bf 8f4f 	dsb	sy
 800e9f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e9f8:	e7f0      	b.n	800e9dc <prvIdleTask+0x8>
 800e9fa:	bf00      	nop
 800e9fc:	2000166c 	.word	0x2000166c
 800ea00:	e000ed04 	.word	0xe000ed04

0800ea04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ea04:	b580      	push	{r7, lr}
 800ea06:	b082      	sub	sp, #8
 800ea08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	607b      	str	r3, [r7, #4]
 800ea0e:	e00c      	b.n	800ea2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ea10:	687a      	ldr	r2, [r7, #4]
 800ea12:	4613      	mov	r3, r2
 800ea14:	009b      	lsls	r3, r3, #2
 800ea16:	4413      	add	r3, r2
 800ea18:	009b      	lsls	r3, r3, #2
 800ea1a:	4a12      	ldr	r2, [pc, #72]	@ (800ea64 <prvInitialiseTaskLists+0x60>)
 800ea1c:	4413      	add	r3, r2
 800ea1e:	4618      	mov	r0, r3
 800ea20:	f7fe fc6c 	bl	800d2fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	3301      	adds	r3, #1
 800ea28:	607b      	str	r3, [r7, #4]
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	2b06      	cmp	r3, #6
 800ea2e:	d9ef      	bls.n	800ea10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ea30:	480d      	ldr	r0, [pc, #52]	@ (800ea68 <prvInitialiseTaskLists+0x64>)
 800ea32:	f7fe fc63 	bl	800d2fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ea36:	480d      	ldr	r0, [pc, #52]	@ (800ea6c <prvInitialiseTaskLists+0x68>)
 800ea38:	f7fe fc60 	bl	800d2fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ea3c:	480c      	ldr	r0, [pc, #48]	@ (800ea70 <prvInitialiseTaskLists+0x6c>)
 800ea3e:	f7fe fc5d 	bl	800d2fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ea42:	480c      	ldr	r0, [pc, #48]	@ (800ea74 <prvInitialiseTaskLists+0x70>)
 800ea44:	f7fe fc5a 	bl	800d2fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ea48:	480b      	ldr	r0, [pc, #44]	@ (800ea78 <prvInitialiseTaskLists+0x74>)
 800ea4a:	f7fe fc57 	bl	800d2fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ea4e:	4b0b      	ldr	r3, [pc, #44]	@ (800ea7c <prvInitialiseTaskLists+0x78>)
 800ea50:	4a05      	ldr	r2, [pc, #20]	@ (800ea68 <prvInitialiseTaskLists+0x64>)
 800ea52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ea54:	4b0a      	ldr	r3, [pc, #40]	@ (800ea80 <prvInitialiseTaskLists+0x7c>)
 800ea56:	4a05      	ldr	r2, [pc, #20]	@ (800ea6c <prvInitialiseTaskLists+0x68>)
 800ea58:	601a      	str	r2, [r3, #0]
}
 800ea5a:	bf00      	nop
 800ea5c:	3708      	adds	r7, #8
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	bd80      	pop	{r7, pc}
 800ea62:	bf00      	nop
 800ea64:	2000166c 	.word	0x2000166c
 800ea68:	200016f8 	.word	0x200016f8
 800ea6c:	2000170c 	.word	0x2000170c
 800ea70:	20001728 	.word	0x20001728
 800ea74:	2000173c 	.word	0x2000173c
 800ea78:	20001754 	.word	0x20001754
 800ea7c:	20001720 	.word	0x20001720
 800ea80:	20001724 	.word	0x20001724

0800ea84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b082      	sub	sp, #8
 800ea88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ea8a:	e019      	b.n	800eac0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ea8c:	f000 fbd4 	bl	800f238 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea90:	4b10      	ldr	r3, [pc, #64]	@ (800ead4 <prvCheckTasksWaitingTermination+0x50>)
 800ea92:	68db      	ldr	r3, [r3, #12]
 800ea94:	68db      	ldr	r3, [r3, #12]
 800ea96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	3304      	adds	r3, #4
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	f7fe fcb7 	bl	800d410 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800eaa2:	4b0d      	ldr	r3, [pc, #52]	@ (800ead8 <prvCheckTasksWaitingTermination+0x54>)
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	3b01      	subs	r3, #1
 800eaa8:	4a0b      	ldr	r2, [pc, #44]	@ (800ead8 <prvCheckTasksWaitingTermination+0x54>)
 800eaaa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800eaac:	4b0b      	ldr	r3, [pc, #44]	@ (800eadc <prvCheckTasksWaitingTermination+0x58>)
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	3b01      	subs	r3, #1
 800eab2:	4a0a      	ldr	r2, [pc, #40]	@ (800eadc <prvCheckTasksWaitingTermination+0x58>)
 800eab4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800eab6:	f000 fbf1 	bl	800f29c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800eaba:	6878      	ldr	r0, [r7, #4]
 800eabc:	f000 f810 	bl	800eae0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800eac0:	4b06      	ldr	r3, [pc, #24]	@ (800eadc <prvCheckTasksWaitingTermination+0x58>)
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d1e1      	bne.n	800ea8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800eac8:	bf00      	nop
 800eaca:	bf00      	nop
 800eacc:	3708      	adds	r7, #8
 800eace:	46bd      	mov	sp, r7
 800ead0:	bd80      	pop	{r7, pc}
 800ead2:	bf00      	nop
 800ead4:	2000173c 	.word	0x2000173c
 800ead8:	20001768 	.word	0x20001768
 800eadc:	20001750 	.word	0x20001750

0800eae0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b084      	sub	sp, #16
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	334c      	adds	r3, #76	@ 0x4c
 800eaec:	4618      	mov	r0, r3
 800eaee:	f000 ffcb 	bl	800fa88 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d108      	bne.n	800eb0e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb00:	4618      	mov	r0, r3
 800eb02:	f000 fd89 	bl	800f618 <vPortFree>
				vPortFree( pxTCB );
 800eb06:	6878      	ldr	r0, [r7, #4]
 800eb08:	f000 fd86 	bl	800f618 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800eb0c:	e019      	b.n	800eb42 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800eb14:	2b01      	cmp	r3, #1
 800eb16:	d103      	bne.n	800eb20 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800eb18:	6878      	ldr	r0, [r7, #4]
 800eb1a:	f000 fd7d 	bl	800f618 <vPortFree>
	}
 800eb1e:	e010      	b.n	800eb42 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800eb26:	2b02      	cmp	r3, #2
 800eb28:	d00b      	beq.n	800eb42 <prvDeleteTCB+0x62>
	__asm volatile
 800eb2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb2e:	f383 8811 	msr	BASEPRI, r3
 800eb32:	f3bf 8f6f 	isb	sy
 800eb36:	f3bf 8f4f 	dsb	sy
 800eb3a:	60fb      	str	r3, [r7, #12]
}
 800eb3c:	bf00      	nop
 800eb3e:	bf00      	nop
 800eb40:	e7fd      	b.n	800eb3e <prvDeleteTCB+0x5e>
	}
 800eb42:	bf00      	nop
 800eb44:	3710      	adds	r7, #16
 800eb46:	46bd      	mov	sp, r7
 800eb48:	bd80      	pop	{r7, pc}
	...

0800eb4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800eb4c:	b480      	push	{r7}
 800eb4e:	b083      	sub	sp, #12
 800eb50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eb52:	4b0c      	ldr	r3, [pc, #48]	@ (800eb84 <prvResetNextTaskUnblockTime+0x38>)
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d104      	bne.n	800eb66 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800eb5c:	4b0a      	ldr	r3, [pc, #40]	@ (800eb88 <prvResetNextTaskUnblockTime+0x3c>)
 800eb5e:	f04f 32ff 	mov.w	r2, #4294967295
 800eb62:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800eb64:	e008      	b.n	800eb78 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb66:	4b07      	ldr	r3, [pc, #28]	@ (800eb84 <prvResetNextTaskUnblockTime+0x38>)
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	68db      	ldr	r3, [r3, #12]
 800eb6c:	68db      	ldr	r3, [r3, #12]
 800eb6e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	685b      	ldr	r3, [r3, #4]
 800eb74:	4a04      	ldr	r2, [pc, #16]	@ (800eb88 <prvResetNextTaskUnblockTime+0x3c>)
 800eb76:	6013      	str	r3, [r2, #0]
}
 800eb78:	bf00      	nop
 800eb7a:	370c      	adds	r7, #12
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb82:	4770      	bx	lr
 800eb84:	20001720 	.word	0x20001720
 800eb88:	20001788 	.word	0x20001788

0800eb8c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800eb8c:	b480      	push	{r7}
 800eb8e:	b083      	sub	sp, #12
 800eb90:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800eb92:	4b0b      	ldr	r3, [pc, #44]	@ (800ebc0 <xTaskGetSchedulerState+0x34>)
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d102      	bne.n	800eba0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800eb9a:	2301      	movs	r3, #1
 800eb9c:	607b      	str	r3, [r7, #4]
 800eb9e:	e008      	b.n	800ebb2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eba0:	4b08      	ldr	r3, [pc, #32]	@ (800ebc4 <xTaskGetSchedulerState+0x38>)
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d102      	bne.n	800ebae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800eba8:	2302      	movs	r3, #2
 800ebaa:	607b      	str	r3, [r7, #4]
 800ebac:	e001      	b.n	800ebb2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ebae:	2300      	movs	r3, #0
 800ebb0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ebb2:	687b      	ldr	r3, [r7, #4]
	}
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	370c      	adds	r7, #12
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebbe:	4770      	bx	lr
 800ebc0:	20001774 	.word	0x20001774
 800ebc4:	20001790 	.word	0x20001790

0800ebc8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b084      	sub	sp, #16
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d05e      	beq.n	800ec9c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ebde:	68bb      	ldr	r3, [r7, #8]
 800ebe0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ebe2:	4b31      	ldr	r3, [pc, #196]	@ (800eca8 <xTaskPriorityInherit+0xe0>)
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebe8:	429a      	cmp	r2, r3
 800ebea:	d24e      	bcs.n	800ec8a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ebec:	68bb      	ldr	r3, [r7, #8]
 800ebee:	699b      	ldr	r3, [r3, #24]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	db06      	blt.n	800ec02 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ebf4:	4b2c      	ldr	r3, [pc, #176]	@ (800eca8 <xTaskPriorityInherit+0xe0>)
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebfa:	f1c3 0207 	rsb	r2, r3, #7
 800ebfe:	68bb      	ldr	r3, [r7, #8]
 800ec00:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ec02:	68bb      	ldr	r3, [r7, #8]
 800ec04:	6959      	ldr	r1, [r3, #20]
 800ec06:	68bb      	ldr	r3, [r7, #8]
 800ec08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ec0a:	4613      	mov	r3, r2
 800ec0c:	009b      	lsls	r3, r3, #2
 800ec0e:	4413      	add	r3, r2
 800ec10:	009b      	lsls	r3, r3, #2
 800ec12:	4a26      	ldr	r2, [pc, #152]	@ (800ecac <xTaskPriorityInherit+0xe4>)
 800ec14:	4413      	add	r3, r2
 800ec16:	4299      	cmp	r1, r3
 800ec18:	d12f      	bne.n	800ec7a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ec1a:	68bb      	ldr	r3, [r7, #8]
 800ec1c:	3304      	adds	r3, #4
 800ec1e:	4618      	mov	r0, r3
 800ec20:	f7fe fbf6 	bl	800d410 <uxListRemove>
 800ec24:	4603      	mov	r3, r0
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d10a      	bne.n	800ec40 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800ec2a:	68bb      	ldr	r3, [r7, #8]
 800ec2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec2e:	2201      	movs	r2, #1
 800ec30:	fa02 f303 	lsl.w	r3, r2, r3
 800ec34:	43da      	mvns	r2, r3
 800ec36:	4b1e      	ldr	r3, [pc, #120]	@ (800ecb0 <xTaskPriorityInherit+0xe8>)
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	4013      	ands	r3, r2
 800ec3c:	4a1c      	ldr	r2, [pc, #112]	@ (800ecb0 <xTaskPriorityInherit+0xe8>)
 800ec3e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ec40:	4b19      	ldr	r3, [pc, #100]	@ (800eca8 <xTaskPriorityInherit+0xe0>)
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ec46:	68bb      	ldr	r3, [r7, #8]
 800ec48:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ec4a:	68bb      	ldr	r3, [r7, #8]
 800ec4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec4e:	2201      	movs	r2, #1
 800ec50:	409a      	lsls	r2, r3
 800ec52:	4b17      	ldr	r3, [pc, #92]	@ (800ecb0 <xTaskPriorityInherit+0xe8>)
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	4313      	orrs	r3, r2
 800ec58:	4a15      	ldr	r2, [pc, #84]	@ (800ecb0 <xTaskPriorityInherit+0xe8>)
 800ec5a:	6013      	str	r3, [r2, #0]
 800ec5c:	68bb      	ldr	r3, [r7, #8]
 800ec5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ec60:	4613      	mov	r3, r2
 800ec62:	009b      	lsls	r3, r3, #2
 800ec64:	4413      	add	r3, r2
 800ec66:	009b      	lsls	r3, r3, #2
 800ec68:	4a10      	ldr	r2, [pc, #64]	@ (800ecac <xTaskPriorityInherit+0xe4>)
 800ec6a:	441a      	add	r2, r3
 800ec6c:	68bb      	ldr	r3, [r7, #8]
 800ec6e:	3304      	adds	r3, #4
 800ec70:	4619      	mov	r1, r3
 800ec72:	4610      	mov	r0, r2
 800ec74:	f7fe fb6f 	bl	800d356 <vListInsertEnd>
 800ec78:	e004      	b.n	800ec84 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ec7a:	4b0b      	ldr	r3, [pc, #44]	@ (800eca8 <xTaskPriorityInherit+0xe0>)
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ec80:	68bb      	ldr	r3, [r7, #8]
 800ec82:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ec84:	2301      	movs	r3, #1
 800ec86:	60fb      	str	r3, [r7, #12]
 800ec88:	e008      	b.n	800ec9c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ec8a:	68bb      	ldr	r3, [r7, #8]
 800ec8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ec8e:	4b06      	ldr	r3, [pc, #24]	@ (800eca8 <xTaskPriorityInherit+0xe0>)
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec94:	429a      	cmp	r2, r3
 800ec96:	d201      	bcs.n	800ec9c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ec98:	2301      	movs	r3, #1
 800ec9a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ec9c:	68fb      	ldr	r3, [r7, #12]
	}
 800ec9e:	4618      	mov	r0, r3
 800eca0:	3710      	adds	r7, #16
 800eca2:	46bd      	mov	sp, r7
 800eca4:	bd80      	pop	{r7, pc}
 800eca6:	bf00      	nop
 800eca8:	20001668 	.word	0x20001668
 800ecac:	2000166c 	.word	0x2000166c
 800ecb0:	20001770 	.word	0x20001770

0800ecb4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	b086      	sub	sp, #24
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ecc0:	2300      	movs	r3, #0
 800ecc2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d070      	beq.n	800edac <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ecca:	4b3b      	ldr	r3, [pc, #236]	@ (800edb8 <xTaskPriorityDisinherit+0x104>)
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	693a      	ldr	r2, [r7, #16]
 800ecd0:	429a      	cmp	r2, r3
 800ecd2:	d00b      	beq.n	800ecec <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ecd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecd8:	f383 8811 	msr	BASEPRI, r3
 800ecdc:	f3bf 8f6f 	isb	sy
 800ece0:	f3bf 8f4f 	dsb	sy
 800ece4:	60fb      	str	r3, [r7, #12]
}
 800ece6:	bf00      	nop
 800ece8:	bf00      	nop
 800ecea:	e7fd      	b.n	800ece8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ecec:	693b      	ldr	r3, [r7, #16]
 800ecee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d10b      	bne.n	800ed0c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ecf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecf8:	f383 8811 	msr	BASEPRI, r3
 800ecfc:	f3bf 8f6f 	isb	sy
 800ed00:	f3bf 8f4f 	dsb	sy
 800ed04:	60bb      	str	r3, [r7, #8]
}
 800ed06:	bf00      	nop
 800ed08:	bf00      	nop
 800ed0a:	e7fd      	b.n	800ed08 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ed0c:	693b      	ldr	r3, [r7, #16]
 800ed0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ed10:	1e5a      	subs	r2, r3, #1
 800ed12:	693b      	ldr	r3, [r7, #16]
 800ed14:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ed16:	693b      	ldr	r3, [r7, #16]
 800ed18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed1a:	693b      	ldr	r3, [r7, #16]
 800ed1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ed1e:	429a      	cmp	r2, r3
 800ed20:	d044      	beq.n	800edac <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ed22:	693b      	ldr	r3, [r7, #16]
 800ed24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d140      	bne.n	800edac <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ed2a:	693b      	ldr	r3, [r7, #16]
 800ed2c:	3304      	adds	r3, #4
 800ed2e:	4618      	mov	r0, r3
 800ed30:	f7fe fb6e 	bl	800d410 <uxListRemove>
 800ed34:	4603      	mov	r3, r0
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d115      	bne.n	800ed66 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ed3a:	693b      	ldr	r3, [r7, #16]
 800ed3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed3e:	491f      	ldr	r1, [pc, #124]	@ (800edbc <xTaskPriorityDisinherit+0x108>)
 800ed40:	4613      	mov	r3, r2
 800ed42:	009b      	lsls	r3, r3, #2
 800ed44:	4413      	add	r3, r2
 800ed46:	009b      	lsls	r3, r3, #2
 800ed48:	440b      	add	r3, r1
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d10a      	bne.n	800ed66 <xTaskPriorityDisinherit+0xb2>
 800ed50:	693b      	ldr	r3, [r7, #16]
 800ed52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed54:	2201      	movs	r2, #1
 800ed56:	fa02 f303 	lsl.w	r3, r2, r3
 800ed5a:	43da      	mvns	r2, r3
 800ed5c:	4b18      	ldr	r3, [pc, #96]	@ (800edc0 <xTaskPriorityDisinherit+0x10c>)
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	4013      	ands	r3, r2
 800ed62:	4a17      	ldr	r2, [pc, #92]	@ (800edc0 <xTaskPriorityDisinherit+0x10c>)
 800ed64:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ed66:	693b      	ldr	r3, [r7, #16]
 800ed68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ed6a:	693b      	ldr	r3, [r7, #16]
 800ed6c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed6e:	693b      	ldr	r3, [r7, #16]
 800ed70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed72:	f1c3 0207 	rsb	r2, r3, #7
 800ed76:	693b      	ldr	r3, [r7, #16]
 800ed78:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ed7a:	693b      	ldr	r3, [r7, #16]
 800ed7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed7e:	2201      	movs	r2, #1
 800ed80:	409a      	lsls	r2, r3
 800ed82:	4b0f      	ldr	r3, [pc, #60]	@ (800edc0 <xTaskPriorityDisinherit+0x10c>)
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	4313      	orrs	r3, r2
 800ed88:	4a0d      	ldr	r2, [pc, #52]	@ (800edc0 <xTaskPriorityDisinherit+0x10c>)
 800ed8a:	6013      	str	r3, [r2, #0]
 800ed8c:	693b      	ldr	r3, [r7, #16]
 800ed8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed90:	4613      	mov	r3, r2
 800ed92:	009b      	lsls	r3, r3, #2
 800ed94:	4413      	add	r3, r2
 800ed96:	009b      	lsls	r3, r3, #2
 800ed98:	4a08      	ldr	r2, [pc, #32]	@ (800edbc <xTaskPriorityDisinherit+0x108>)
 800ed9a:	441a      	add	r2, r3
 800ed9c:	693b      	ldr	r3, [r7, #16]
 800ed9e:	3304      	adds	r3, #4
 800eda0:	4619      	mov	r1, r3
 800eda2:	4610      	mov	r0, r2
 800eda4:	f7fe fad7 	bl	800d356 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800eda8:	2301      	movs	r3, #1
 800edaa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800edac:	697b      	ldr	r3, [r7, #20]
	}
 800edae:	4618      	mov	r0, r3
 800edb0:	3718      	adds	r7, #24
 800edb2:	46bd      	mov	sp, r7
 800edb4:	bd80      	pop	{r7, pc}
 800edb6:	bf00      	nop
 800edb8:	20001668 	.word	0x20001668
 800edbc:	2000166c 	.word	0x2000166c
 800edc0:	20001770 	.word	0x20001770

0800edc4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800edc4:	b580      	push	{r7, lr}
 800edc6:	b088      	sub	sp, #32
 800edc8:	af00      	add	r7, sp, #0
 800edca:	6078      	str	r0, [r7, #4]
 800edcc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800edd2:	2301      	movs	r3, #1
 800edd4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d079      	beq.n	800eed0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800eddc:	69bb      	ldr	r3, [r7, #24]
 800edde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d10b      	bne.n	800edfc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800ede4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ede8:	f383 8811 	msr	BASEPRI, r3
 800edec:	f3bf 8f6f 	isb	sy
 800edf0:	f3bf 8f4f 	dsb	sy
 800edf4:	60fb      	str	r3, [r7, #12]
}
 800edf6:	bf00      	nop
 800edf8:	bf00      	nop
 800edfa:	e7fd      	b.n	800edf8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800edfc:	69bb      	ldr	r3, [r7, #24]
 800edfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ee00:	683a      	ldr	r2, [r7, #0]
 800ee02:	429a      	cmp	r2, r3
 800ee04:	d902      	bls.n	800ee0c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ee06:	683b      	ldr	r3, [r7, #0]
 800ee08:	61fb      	str	r3, [r7, #28]
 800ee0a:	e002      	b.n	800ee12 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ee0c:	69bb      	ldr	r3, [r7, #24]
 800ee0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ee10:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ee12:	69bb      	ldr	r3, [r7, #24]
 800ee14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee16:	69fa      	ldr	r2, [r7, #28]
 800ee18:	429a      	cmp	r2, r3
 800ee1a:	d059      	beq.n	800eed0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ee1c:	69bb      	ldr	r3, [r7, #24]
 800ee1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ee20:	697a      	ldr	r2, [r7, #20]
 800ee22:	429a      	cmp	r2, r3
 800ee24:	d154      	bne.n	800eed0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ee26:	4b2c      	ldr	r3, [pc, #176]	@ (800eed8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	69ba      	ldr	r2, [r7, #24]
 800ee2c:	429a      	cmp	r2, r3
 800ee2e:	d10b      	bne.n	800ee48 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800ee30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee34:	f383 8811 	msr	BASEPRI, r3
 800ee38:	f3bf 8f6f 	isb	sy
 800ee3c:	f3bf 8f4f 	dsb	sy
 800ee40:	60bb      	str	r3, [r7, #8]
}
 800ee42:	bf00      	nop
 800ee44:	bf00      	nop
 800ee46:	e7fd      	b.n	800ee44 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ee48:	69bb      	ldr	r3, [r7, #24]
 800ee4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee4c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ee4e:	69bb      	ldr	r3, [r7, #24]
 800ee50:	69fa      	ldr	r2, [r7, #28]
 800ee52:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ee54:	69bb      	ldr	r3, [r7, #24]
 800ee56:	699b      	ldr	r3, [r3, #24]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	db04      	blt.n	800ee66 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee5c:	69fb      	ldr	r3, [r7, #28]
 800ee5e:	f1c3 0207 	rsb	r2, r3, #7
 800ee62:	69bb      	ldr	r3, [r7, #24]
 800ee64:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ee66:	69bb      	ldr	r3, [r7, #24]
 800ee68:	6959      	ldr	r1, [r3, #20]
 800ee6a:	693a      	ldr	r2, [r7, #16]
 800ee6c:	4613      	mov	r3, r2
 800ee6e:	009b      	lsls	r3, r3, #2
 800ee70:	4413      	add	r3, r2
 800ee72:	009b      	lsls	r3, r3, #2
 800ee74:	4a19      	ldr	r2, [pc, #100]	@ (800eedc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ee76:	4413      	add	r3, r2
 800ee78:	4299      	cmp	r1, r3
 800ee7a:	d129      	bne.n	800eed0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ee7c:	69bb      	ldr	r3, [r7, #24]
 800ee7e:	3304      	adds	r3, #4
 800ee80:	4618      	mov	r0, r3
 800ee82:	f7fe fac5 	bl	800d410 <uxListRemove>
 800ee86:	4603      	mov	r3, r0
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d10a      	bne.n	800eea2 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800ee8c:	69bb      	ldr	r3, [r7, #24]
 800ee8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee90:	2201      	movs	r2, #1
 800ee92:	fa02 f303 	lsl.w	r3, r2, r3
 800ee96:	43da      	mvns	r2, r3
 800ee98:	4b11      	ldr	r3, [pc, #68]	@ (800eee0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	4013      	ands	r3, r2
 800ee9e:	4a10      	ldr	r2, [pc, #64]	@ (800eee0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800eea0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800eea2:	69bb      	ldr	r3, [r7, #24]
 800eea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eea6:	2201      	movs	r2, #1
 800eea8:	409a      	lsls	r2, r3
 800eeaa:	4b0d      	ldr	r3, [pc, #52]	@ (800eee0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	4313      	orrs	r3, r2
 800eeb0:	4a0b      	ldr	r2, [pc, #44]	@ (800eee0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800eeb2:	6013      	str	r3, [r2, #0]
 800eeb4:	69bb      	ldr	r3, [r7, #24]
 800eeb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eeb8:	4613      	mov	r3, r2
 800eeba:	009b      	lsls	r3, r3, #2
 800eebc:	4413      	add	r3, r2
 800eebe:	009b      	lsls	r3, r3, #2
 800eec0:	4a06      	ldr	r2, [pc, #24]	@ (800eedc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800eec2:	441a      	add	r2, r3
 800eec4:	69bb      	ldr	r3, [r7, #24]
 800eec6:	3304      	adds	r3, #4
 800eec8:	4619      	mov	r1, r3
 800eeca:	4610      	mov	r0, r2
 800eecc:	f7fe fa43 	bl	800d356 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800eed0:	bf00      	nop
 800eed2:	3720      	adds	r7, #32
 800eed4:	46bd      	mov	sp, r7
 800eed6:	bd80      	pop	{r7, pc}
 800eed8:	20001668 	.word	0x20001668
 800eedc:	2000166c 	.word	0x2000166c
 800eee0:	20001770 	.word	0x20001770

0800eee4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800eee4:	b480      	push	{r7}
 800eee6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800eee8:	4b07      	ldr	r3, [pc, #28]	@ (800ef08 <pvTaskIncrementMutexHeldCount+0x24>)
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d004      	beq.n	800eefa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800eef0:	4b05      	ldr	r3, [pc, #20]	@ (800ef08 <pvTaskIncrementMutexHeldCount+0x24>)
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800eef6:	3201      	adds	r2, #1
 800eef8:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800eefa:	4b03      	ldr	r3, [pc, #12]	@ (800ef08 <pvTaskIncrementMutexHeldCount+0x24>)
 800eefc:	681b      	ldr	r3, [r3, #0]
	}
 800eefe:	4618      	mov	r0, r3
 800ef00:	46bd      	mov	sp, r7
 800ef02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef06:	4770      	bx	lr
 800ef08:	20001668 	.word	0x20001668

0800ef0c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ef0c:	b580      	push	{r7, lr}
 800ef0e:	b084      	sub	sp, #16
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	6078      	str	r0, [r7, #4]
 800ef14:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ef16:	4b29      	ldr	r3, [pc, #164]	@ (800efbc <prvAddCurrentTaskToDelayedList+0xb0>)
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ef1c:	4b28      	ldr	r3, [pc, #160]	@ (800efc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	3304      	adds	r3, #4
 800ef22:	4618      	mov	r0, r3
 800ef24:	f7fe fa74 	bl	800d410 <uxListRemove>
 800ef28:	4603      	mov	r3, r0
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d10b      	bne.n	800ef46 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ef2e:	4b24      	ldr	r3, [pc, #144]	@ (800efc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef34:	2201      	movs	r2, #1
 800ef36:	fa02 f303 	lsl.w	r3, r2, r3
 800ef3a:	43da      	mvns	r2, r3
 800ef3c:	4b21      	ldr	r3, [pc, #132]	@ (800efc4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	4013      	ands	r3, r2
 800ef42:	4a20      	ldr	r2, [pc, #128]	@ (800efc4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ef44:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef4c:	d10a      	bne.n	800ef64 <prvAddCurrentTaskToDelayedList+0x58>
 800ef4e:	683b      	ldr	r3, [r7, #0]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d007      	beq.n	800ef64 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ef54:	4b1a      	ldr	r3, [pc, #104]	@ (800efc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	3304      	adds	r3, #4
 800ef5a:	4619      	mov	r1, r3
 800ef5c:	481a      	ldr	r0, [pc, #104]	@ (800efc8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800ef5e:	f7fe f9fa 	bl	800d356 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ef62:	e026      	b.n	800efb2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ef64:	68fa      	ldr	r2, [r7, #12]
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	4413      	add	r3, r2
 800ef6a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ef6c:	4b14      	ldr	r3, [pc, #80]	@ (800efc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	68ba      	ldr	r2, [r7, #8]
 800ef72:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ef74:	68ba      	ldr	r2, [r7, #8]
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	429a      	cmp	r2, r3
 800ef7a:	d209      	bcs.n	800ef90 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ef7c:	4b13      	ldr	r3, [pc, #76]	@ (800efcc <prvAddCurrentTaskToDelayedList+0xc0>)
 800ef7e:	681a      	ldr	r2, [r3, #0]
 800ef80:	4b0f      	ldr	r3, [pc, #60]	@ (800efc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	3304      	adds	r3, #4
 800ef86:	4619      	mov	r1, r3
 800ef88:	4610      	mov	r0, r2
 800ef8a:	f7fe fa08 	bl	800d39e <vListInsert>
}
 800ef8e:	e010      	b.n	800efb2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ef90:	4b0f      	ldr	r3, [pc, #60]	@ (800efd0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800ef92:	681a      	ldr	r2, [r3, #0]
 800ef94:	4b0a      	ldr	r3, [pc, #40]	@ (800efc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	3304      	adds	r3, #4
 800ef9a:	4619      	mov	r1, r3
 800ef9c:	4610      	mov	r0, r2
 800ef9e:	f7fe f9fe 	bl	800d39e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800efa2:	4b0c      	ldr	r3, [pc, #48]	@ (800efd4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	68ba      	ldr	r2, [r7, #8]
 800efa8:	429a      	cmp	r2, r3
 800efaa:	d202      	bcs.n	800efb2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800efac:	4a09      	ldr	r2, [pc, #36]	@ (800efd4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800efae:	68bb      	ldr	r3, [r7, #8]
 800efb0:	6013      	str	r3, [r2, #0]
}
 800efb2:	bf00      	nop
 800efb4:	3710      	adds	r7, #16
 800efb6:	46bd      	mov	sp, r7
 800efb8:	bd80      	pop	{r7, pc}
 800efba:	bf00      	nop
 800efbc:	2000176c 	.word	0x2000176c
 800efc0:	20001668 	.word	0x20001668
 800efc4:	20001770 	.word	0x20001770
 800efc8:	20001754 	.word	0x20001754
 800efcc:	20001724 	.word	0x20001724
 800efd0:	20001720 	.word	0x20001720
 800efd4:	20001788 	.word	0x20001788

0800efd8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800efd8:	b480      	push	{r7}
 800efda:	b085      	sub	sp, #20
 800efdc:	af00      	add	r7, sp, #0
 800efde:	60f8      	str	r0, [r7, #12]
 800efe0:	60b9      	str	r1, [r7, #8]
 800efe2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	3b04      	subs	r3, #4
 800efe8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800eff0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	3b04      	subs	r3, #4
 800eff6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800eff8:	68bb      	ldr	r3, [r7, #8]
 800effa:	f023 0201 	bic.w	r2, r3, #1
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	3b04      	subs	r3, #4
 800f006:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f008:	4a0c      	ldr	r2, [pc, #48]	@ (800f03c <pxPortInitialiseStack+0x64>)
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	3b14      	subs	r3, #20
 800f012:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f014:	687a      	ldr	r2, [r7, #4]
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	3b04      	subs	r3, #4
 800f01e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	f06f 0202 	mvn.w	r2, #2
 800f026:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	3b20      	subs	r3, #32
 800f02c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f02e:	68fb      	ldr	r3, [r7, #12]
}
 800f030:	4618      	mov	r0, r3
 800f032:	3714      	adds	r7, #20
 800f034:	46bd      	mov	sp, r7
 800f036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f03a:	4770      	bx	lr
 800f03c:	0800f041 	.word	0x0800f041

0800f040 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f040:	b480      	push	{r7}
 800f042:	b085      	sub	sp, #20
 800f044:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f046:	2300      	movs	r3, #0
 800f048:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f04a:	4b13      	ldr	r3, [pc, #76]	@ (800f098 <prvTaskExitError+0x58>)
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f052:	d00b      	beq.n	800f06c <prvTaskExitError+0x2c>
	__asm volatile
 800f054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f058:	f383 8811 	msr	BASEPRI, r3
 800f05c:	f3bf 8f6f 	isb	sy
 800f060:	f3bf 8f4f 	dsb	sy
 800f064:	60fb      	str	r3, [r7, #12]
}
 800f066:	bf00      	nop
 800f068:	bf00      	nop
 800f06a:	e7fd      	b.n	800f068 <prvTaskExitError+0x28>
	__asm volatile
 800f06c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f070:	f383 8811 	msr	BASEPRI, r3
 800f074:	f3bf 8f6f 	isb	sy
 800f078:	f3bf 8f4f 	dsb	sy
 800f07c:	60bb      	str	r3, [r7, #8]
}
 800f07e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f080:	bf00      	nop
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d0fc      	beq.n	800f082 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f088:	bf00      	nop
 800f08a:	bf00      	nop
 800f08c:	3714      	adds	r7, #20
 800f08e:	46bd      	mov	sp, r7
 800f090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f094:	4770      	bx	lr
 800f096:	bf00      	nop
 800f098:	200002d0 	.word	0x200002d0
 800f09c:	00000000 	.word	0x00000000

0800f0a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f0a0:	4b07      	ldr	r3, [pc, #28]	@ (800f0c0 <pxCurrentTCBConst2>)
 800f0a2:	6819      	ldr	r1, [r3, #0]
 800f0a4:	6808      	ldr	r0, [r1, #0]
 800f0a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0aa:	f380 8809 	msr	PSP, r0
 800f0ae:	f3bf 8f6f 	isb	sy
 800f0b2:	f04f 0000 	mov.w	r0, #0
 800f0b6:	f380 8811 	msr	BASEPRI, r0
 800f0ba:	4770      	bx	lr
 800f0bc:	f3af 8000 	nop.w

0800f0c0 <pxCurrentTCBConst2>:
 800f0c0:	20001668 	.word	0x20001668
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f0c4:	bf00      	nop
 800f0c6:	bf00      	nop

0800f0c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f0c8:	4808      	ldr	r0, [pc, #32]	@ (800f0ec <prvPortStartFirstTask+0x24>)
 800f0ca:	6800      	ldr	r0, [r0, #0]
 800f0cc:	6800      	ldr	r0, [r0, #0]
 800f0ce:	f380 8808 	msr	MSP, r0
 800f0d2:	f04f 0000 	mov.w	r0, #0
 800f0d6:	f380 8814 	msr	CONTROL, r0
 800f0da:	b662      	cpsie	i
 800f0dc:	b661      	cpsie	f
 800f0de:	f3bf 8f4f 	dsb	sy
 800f0e2:	f3bf 8f6f 	isb	sy
 800f0e6:	df00      	svc	0
 800f0e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f0ea:	bf00      	nop
 800f0ec:	e000ed08 	.word	0xe000ed08

0800f0f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f0f0:	b580      	push	{r7, lr}
 800f0f2:	b086      	sub	sp, #24
 800f0f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f0f6:	4b47      	ldr	r3, [pc, #284]	@ (800f214 <xPortStartScheduler+0x124>)
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	4a47      	ldr	r2, [pc, #284]	@ (800f218 <xPortStartScheduler+0x128>)
 800f0fc:	4293      	cmp	r3, r2
 800f0fe:	d10b      	bne.n	800f118 <xPortStartScheduler+0x28>
	__asm volatile
 800f100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f104:	f383 8811 	msr	BASEPRI, r3
 800f108:	f3bf 8f6f 	isb	sy
 800f10c:	f3bf 8f4f 	dsb	sy
 800f110:	613b      	str	r3, [r7, #16]
}
 800f112:	bf00      	nop
 800f114:	bf00      	nop
 800f116:	e7fd      	b.n	800f114 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f118:	4b3e      	ldr	r3, [pc, #248]	@ (800f214 <xPortStartScheduler+0x124>)
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	4a3f      	ldr	r2, [pc, #252]	@ (800f21c <xPortStartScheduler+0x12c>)
 800f11e:	4293      	cmp	r3, r2
 800f120:	d10b      	bne.n	800f13a <xPortStartScheduler+0x4a>
	__asm volatile
 800f122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f126:	f383 8811 	msr	BASEPRI, r3
 800f12a:	f3bf 8f6f 	isb	sy
 800f12e:	f3bf 8f4f 	dsb	sy
 800f132:	60fb      	str	r3, [r7, #12]
}
 800f134:	bf00      	nop
 800f136:	bf00      	nop
 800f138:	e7fd      	b.n	800f136 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f13a:	4b39      	ldr	r3, [pc, #228]	@ (800f220 <xPortStartScheduler+0x130>)
 800f13c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f13e:	697b      	ldr	r3, [r7, #20]
 800f140:	781b      	ldrb	r3, [r3, #0]
 800f142:	b2db      	uxtb	r3, r3
 800f144:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f146:	697b      	ldr	r3, [r7, #20]
 800f148:	22ff      	movs	r2, #255	@ 0xff
 800f14a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f14c:	697b      	ldr	r3, [r7, #20]
 800f14e:	781b      	ldrb	r3, [r3, #0]
 800f150:	b2db      	uxtb	r3, r3
 800f152:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f154:	78fb      	ldrb	r3, [r7, #3]
 800f156:	b2db      	uxtb	r3, r3
 800f158:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800f15c:	b2da      	uxtb	r2, r3
 800f15e:	4b31      	ldr	r3, [pc, #196]	@ (800f224 <xPortStartScheduler+0x134>)
 800f160:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f162:	4b31      	ldr	r3, [pc, #196]	@ (800f228 <xPortStartScheduler+0x138>)
 800f164:	2207      	movs	r2, #7
 800f166:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f168:	e009      	b.n	800f17e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800f16a:	4b2f      	ldr	r3, [pc, #188]	@ (800f228 <xPortStartScheduler+0x138>)
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	3b01      	subs	r3, #1
 800f170:	4a2d      	ldr	r2, [pc, #180]	@ (800f228 <xPortStartScheduler+0x138>)
 800f172:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f174:	78fb      	ldrb	r3, [r7, #3]
 800f176:	b2db      	uxtb	r3, r3
 800f178:	005b      	lsls	r3, r3, #1
 800f17a:	b2db      	uxtb	r3, r3
 800f17c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f17e:	78fb      	ldrb	r3, [r7, #3]
 800f180:	b2db      	uxtb	r3, r3
 800f182:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f186:	2b80      	cmp	r3, #128	@ 0x80
 800f188:	d0ef      	beq.n	800f16a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f18a:	4b27      	ldr	r3, [pc, #156]	@ (800f228 <xPortStartScheduler+0x138>)
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	f1c3 0307 	rsb	r3, r3, #7
 800f192:	2b04      	cmp	r3, #4
 800f194:	d00b      	beq.n	800f1ae <xPortStartScheduler+0xbe>
	__asm volatile
 800f196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f19a:	f383 8811 	msr	BASEPRI, r3
 800f19e:	f3bf 8f6f 	isb	sy
 800f1a2:	f3bf 8f4f 	dsb	sy
 800f1a6:	60bb      	str	r3, [r7, #8]
}
 800f1a8:	bf00      	nop
 800f1aa:	bf00      	nop
 800f1ac:	e7fd      	b.n	800f1aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f1ae:	4b1e      	ldr	r3, [pc, #120]	@ (800f228 <xPortStartScheduler+0x138>)
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	021b      	lsls	r3, r3, #8
 800f1b4:	4a1c      	ldr	r2, [pc, #112]	@ (800f228 <xPortStartScheduler+0x138>)
 800f1b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f1b8:	4b1b      	ldr	r3, [pc, #108]	@ (800f228 <xPortStartScheduler+0x138>)
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f1c0:	4a19      	ldr	r2, [pc, #100]	@ (800f228 <xPortStartScheduler+0x138>)
 800f1c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	b2da      	uxtb	r2, r3
 800f1c8:	697b      	ldr	r3, [r7, #20]
 800f1ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f1cc:	4b17      	ldr	r3, [pc, #92]	@ (800f22c <xPortStartScheduler+0x13c>)
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	4a16      	ldr	r2, [pc, #88]	@ (800f22c <xPortStartScheduler+0x13c>)
 800f1d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f1d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f1d8:	4b14      	ldr	r3, [pc, #80]	@ (800f22c <xPortStartScheduler+0x13c>)
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	4a13      	ldr	r2, [pc, #76]	@ (800f22c <xPortStartScheduler+0x13c>)
 800f1de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800f1e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f1e4:	f000 f8da 	bl	800f39c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f1e8:	4b11      	ldr	r3, [pc, #68]	@ (800f230 <xPortStartScheduler+0x140>)
 800f1ea:	2200      	movs	r2, #0
 800f1ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f1ee:	f000 f8f9 	bl	800f3e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f1f2:	4b10      	ldr	r3, [pc, #64]	@ (800f234 <xPortStartScheduler+0x144>)
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	4a0f      	ldr	r2, [pc, #60]	@ (800f234 <xPortStartScheduler+0x144>)
 800f1f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800f1fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f1fe:	f7ff ff63 	bl	800f0c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f202:	f7ff fa73 	bl	800e6ec <vTaskSwitchContext>
	prvTaskExitError();
 800f206:	f7ff ff1b 	bl	800f040 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f20a:	2300      	movs	r3, #0
}
 800f20c:	4618      	mov	r0, r3
 800f20e:	3718      	adds	r7, #24
 800f210:	46bd      	mov	sp, r7
 800f212:	bd80      	pop	{r7, pc}
 800f214:	e000ed00 	.word	0xe000ed00
 800f218:	410fc271 	.word	0x410fc271
 800f21c:	410fc270 	.word	0x410fc270
 800f220:	e000e400 	.word	0xe000e400
 800f224:	20001794 	.word	0x20001794
 800f228:	20001798 	.word	0x20001798
 800f22c:	e000ed20 	.word	0xe000ed20
 800f230:	200002d0 	.word	0x200002d0
 800f234:	e000ef34 	.word	0xe000ef34

0800f238 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f238:	b480      	push	{r7}
 800f23a:	b083      	sub	sp, #12
 800f23c:	af00      	add	r7, sp, #0
	__asm volatile
 800f23e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f242:	f383 8811 	msr	BASEPRI, r3
 800f246:	f3bf 8f6f 	isb	sy
 800f24a:	f3bf 8f4f 	dsb	sy
 800f24e:	607b      	str	r3, [r7, #4]
}
 800f250:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f252:	4b10      	ldr	r3, [pc, #64]	@ (800f294 <vPortEnterCritical+0x5c>)
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	3301      	adds	r3, #1
 800f258:	4a0e      	ldr	r2, [pc, #56]	@ (800f294 <vPortEnterCritical+0x5c>)
 800f25a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f25c:	4b0d      	ldr	r3, [pc, #52]	@ (800f294 <vPortEnterCritical+0x5c>)
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	2b01      	cmp	r3, #1
 800f262:	d110      	bne.n	800f286 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f264:	4b0c      	ldr	r3, [pc, #48]	@ (800f298 <vPortEnterCritical+0x60>)
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	b2db      	uxtb	r3, r3
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d00b      	beq.n	800f286 <vPortEnterCritical+0x4e>
	__asm volatile
 800f26e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f272:	f383 8811 	msr	BASEPRI, r3
 800f276:	f3bf 8f6f 	isb	sy
 800f27a:	f3bf 8f4f 	dsb	sy
 800f27e:	603b      	str	r3, [r7, #0]
}
 800f280:	bf00      	nop
 800f282:	bf00      	nop
 800f284:	e7fd      	b.n	800f282 <vPortEnterCritical+0x4a>
	}
}
 800f286:	bf00      	nop
 800f288:	370c      	adds	r7, #12
 800f28a:	46bd      	mov	sp, r7
 800f28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f290:	4770      	bx	lr
 800f292:	bf00      	nop
 800f294:	200002d0 	.word	0x200002d0
 800f298:	e000ed04 	.word	0xe000ed04

0800f29c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f29c:	b480      	push	{r7}
 800f29e:	b083      	sub	sp, #12
 800f2a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f2a2:	4b12      	ldr	r3, [pc, #72]	@ (800f2ec <vPortExitCritical+0x50>)
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d10b      	bne.n	800f2c2 <vPortExitCritical+0x26>
	__asm volatile
 800f2aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2ae:	f383 8811 	msr	BASEPRI, r3
 800f2b2:	f3bf 8f6f 	isb	sy
 800f2b6:	f3bf 8f4f 	dsb	sy
 800f2ba:	607b      	str	r3, [r7, #4]
}
 800f2bc:	bf00      	nop
 800f2be:	bf00      	nop
 800f2c0:	e7fd      	b.n	800f2be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f2c2:	4b0a      	ldr	r3, [pc, #40]	@ (800f2ec <vPortExitCritical+0x50>)
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	3b01      	subs	r3, #1
 800f2c8:	4a08      	ldr	r2, [pc, #32]	@ (800f2ec <vPortExitCritical+0x50>)
 800f2ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f2cc:	4b07      	ldr	r3, [pc, #28]	@ (800f2ec <vPortExitCritical+0x50>)
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d105      	bne.n	800f2e0 <vPortExitCritical+0x44>
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f2d8:	683b      	ldr	r3, [r7, #0]
 800f2da:	f383 8811 	msr	BASEPRI, r3
}
 800f2de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f2e0:	bf00      	nop
 800f2e2:	370c      	adds	r7, #12
 800f2e4:	46bd      	mov	sp, r7
 800f2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ea:	4770      	bx	lr
 800f2ec:	200002d0 	.word	0x200002d0

0800f2f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f2f0:	f3ef 8009 	mrs	r0, PSP
 800f2f4:	f3bf 8f6f 	isb	sy
 800f2f8:	4b15      	ldr	r3, [pc, #84]	@ (800f350 <pxCurrentTCBConst>)
 800f2fa:	681a      	ldr	r2, [r3, #0]
 800f2fc:	f01e 0f10 	tst.w	lr, #16
 800f300:	bf08      	it	eq
 800f302:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f306:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f30a:	6010      	str	r0, [r2, #0]
 800f30c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f310:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800f314:	f380 8811 	msr	BASEPRI, r0
 800f318:	f3bf 8f4f 	dsb	sy
 800f31c:	f3bf 8f6f 	isb	sy
 800f320:	f7ff f9e4 	bl	800e6ec <vTaskSwitchContext>
 800f324:	f04f 0000 	mov.w	r0, #0
 800f328:	f380 8811 	msr	BASEPRI, r0
 800f32c:	bc09      	pop	{r0, r3}
 800f32e:	6819      	ldr	r1, [r3, #0]
 800f330:	6808      	ldr	r0, [r1, #0]
 800f332:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f336:	f01e 0f10 	tst.w	lr, #16
 800f33a:	bf08      	it	eq
 800f33c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f340:	f380 8809 	msr	PSP, r0
 800f344:	f3bf 8f6f 	isb	sy
 800f348:	4770      	bx	lr
 800f34a:	bf00      	nop
 800f34c:	f3af 8000 	nop.w

0800f350 <pxCurrentTCBConst>:
 800f350:	20001668 	.word	0x20001668
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f354:	bf00      	nop
 800f356:	bf00      	nop

0800f358 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	b082      	sub	sp, #8
 800f35c:	af00      	add	r7, sp, #0
	__asm volatile
 800f35e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f362:	f383 8811 	msr	BASEPRI, r3
 800f366:	f3bf 8f6f 	isb	sy
 800f36a:	f3bf 8f4f 	dsb	sy
 800f36e:	607b      	str	r3, [r7, #4]
}
 800f370:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f372:	f7ff f901 	bl	800e578 <xTaskIncrementTick>
 800f376:	4603      	mov	r3, r0
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d003      	beq.n	800f384 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f37c:	4b06      	ldr	r3, [pc, #24]	@ (800f398 <SysTick_Handler+0x40>)
 800f37e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f382:	601a      	str	r2, [r3, #0]
 800f384:	2300      	movs	r3, #0
 800f386:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f388:	683b      	ldr	r3, [r7, #0]
 800f38a:	f383 8811 	msr	BASEPRI, r3
}
 800f38e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f390:	bf00      	nop
 800f392:	3708      	adds	r7, #8
 800f394:	46bd      	mov	sp, r7
 800f396:	bd80      	pop	{r7, pc}
 800f398:	e000ed04 	.word	0xe000ed04

0800f39c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f39c:	b480      	push	{r7}
 800f39e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f3a0:	4b0b      	ldr	r3, [pc, #44]	@ (800f3d0 <vPortSetupTimerInterrupt+0x34>)
 800f3a2:	2200      	movs	r2, #0
 800f3a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f3a6:	4b0b      	ldr	r3, [pc, #44]	@ (800f3d4 <vPortSetupTimerInterrupt+0x38>)
 800f3a8:	2200      	movs	r2, #0
 800f3aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f3ac:	4b0a      	ldr	r3, [pc, #40]	@ (800f3d8 <vPortSetupTimerInterrupt+0x3c>)
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	4a0a      	ldr	r2, [pc, #40]	@ (800f3dc <vPortSetupTimerInterrupt+0x40>)
 800f3b2:	fba2 2303 	umull	r2, r3, r2, r3
 800f3b6:	099b      	lsrs	r3, r3, #6
 800f3b8:	4a09      	ldr	r2, [pc, #36]	@ (800f3e0 <vPortSetupTimerInterrupt+0x44>)
 800f3ba:	3b01      	subs	r3, #1
 800f3bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f3be:	4b04      	ldr	r3, [pc, #16]	@ (800f3d0 <vPortSetupTimerInterrupt+0x34>)
 800f3c0:	2207      	movs	r2, #7
 800f3c2:	601a      	str	r2, [r3, #0]
}
 800f3c4:	bf00      	nop
 800f3c6:	46bd      	mov	sp, r7
 800f3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3cc:	4770      	bx	lr
 800f3ce:	bf00      	nop
 800f3d0:	e000e010 	.word	0xe000e010
 800f3d4:	e000e018 	.word	0xe000e018
 800f3d8:	20000004 	.word	0x20000004
 800f3dc:	10624dd3 	.word	0x10624dd3
 800f3e0:	e000e014 	.word	0xe000e014

0800f3e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f3e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800f3f4 <vPortEnableVFP+0x10>
 800f3e8:	6801      	ldr	r1, [r0, #0]
 800f3ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800f3ee:	6001      	str	r1, [r0, #0]
 800f3f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f3f2:	bf00      	nop
 800f3f4:	e000ed88 	.word	0xe000ed88

0800f3f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f3f8:	b480      	push	{r7}
 800f3fa:	b085      	sub	sp, #20
 800f3fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f3fe:	f3ef 8305 	mrs	r3, IPSR
 800f402:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	2b0f      	cmp	r3, #15
 800f408:	d915      	bls.n	800f436 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f40a:	4a18      	ldr	r2, [pc, #96]	@ (800f46c <vPortValidateInterruptPriority+0x74>)
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	4413      	add	r3, r2
 800f410:	781b      	ldrb	r3, [r3, #0]
 800f412:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f414:	4b16      	ldr	r3, [pc, #88]	@ (800f470 <vPortValidateInterruptPriority+0x78>)
 800f416:	781b      	ldrb	r3, [r3, #0]
 800f418:	7afa      	ldrb	r2, [r7, #11]
 800f41a:	429a      	cmp	r2, r3
 800f41c:	d20b      	bcs.n	800f436 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800f41e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f422:	f383 8811 	msr	BASEPRI, r3
 800f426:	f3bf 8f6f 	isb	sy
 800f42a:	f3bf 8f4f 	dsb	sy
 800f42e:	607b      	str	r3, [r7, #4]
}
 800f430:	bf00      	nop
 800f432:	bf00      	nop
 800f434:	e7fd      	b.n	800f432 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f436:	4b0f      	ldr	r3, [pc, #60]	@ (800f474 <vPortValidateInterruptPriority+0x7c>)
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800f43e:	4b0e      	ldr	r3, [pc, #56]	@ (800f478 <vPortValidateInterruptPriority+0x80>)
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	429a      	cmp	r2, r3
 800f444:	d90b      	bls.n	800f45e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800f446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f44a:	f383 8811 	msr	BASEPRI, r3
 800f44e:	f3bf 8f6f 	isb	sy
 800f452:	f3bf 8f4f 	dsb	sy
 800f456:	603b      	str	r3, [r7, #0]
}
 800f458:	bf00      	nop
 800f45a:	bf00      	nop
 800f45c:	e7fd      	b.n	800f45a <vPortValidateInterruptPriority+0x62>
	}
 800f45e:	bf00      	nop
 800f460:	3714      	adds	r7, #20
 800f462:	46bd      	mov	sp, r7
 800f464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f468:	4770      	bx	lr
 800f46a:	bf00      	nop
 800f46c:	e000e3f0 	.word	0xe000e3f0
 800f470:	20001794 	.word	0x20001794
 800f474:	e000ed0c 	.word	0xe000ed0c
 800f478:	20001798 	.word	0x20001798

0800f47c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f47c:	b580      	push	{r7, lr}
 800f47e:	b08a      	sub	sp, #40	@ 0x28
 800f480:	af00      	add	r7, sp, #0
 800f482:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f484:	2300      	movs	r3, #0
 800f486:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f488:	f7fe ffca 	bl	800e420 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f48c:	4b5c      	ldr	r3, [pc, #368]	@ (800f600 <pvPortMalloc+0x184>)
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	2b00      	cmp	r3, #0
 800f492:	d101      	bne.n	800f498 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f494:	f000 f924 	bl	800f6e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f498:	4b5a      	ldr	r3, [pc, #360]	@ (800f604 <pvPortMalloc+0x188>)
 800f49a:	681a      	ldr	r2, [r3, #0]
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	4013      	ands	r3, r2
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	f040 8095 	bne.w	800f5d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d01e      	beq.n	800f4ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800f4ac:	2208      	movs	r2, #8
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	4413      	add	r3, r2
 800f4b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	f003 0307 	and.w	r3, r3, #7
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d015      	beq.n	800f4ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	f023 0307 	bic.w	r3, r3, #7
 800f4c4:	3308      	adds	r3, #8
 800f4c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	f003 0307 	and.w	r3, r3, #7
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d00b      	beq.n	800f4ea <pvPortMalloc+0x6e>
	__asm volatile
 800f4d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4d6:	f383 8811 	msr	BASEPRI, r3
 800f4da:	f3bf 8f6f 	isb	sy
 800f4de:	f3bf 8f4f 	dsb	sy
 800f4e2:	617b      	str	r3, [r7, #20]
}
 800f4e4:	bf00      	nop
 800f4e6:	bf00      	nop
 800f4e8:	e7fd      	b.n	800f4e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d06f      	beq.n	800f5d0 <pvPortMalloc+0x154>
 800f4f0:	4b45      	ldr	r3, [pc, #276]	@ (800f608 <pvPortMalloc+0x18c>)
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	687a      	ldr	r2, [r7, #4]
 800f4f6:	429a      	cmp	r2, r3
 800f4f8:	d86a      	bhi.n	800f5d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f4fa:	4b44      	ldr	r3, [pc, #272]	@ (800f60c <pvPortMalloc+0x190>)
 800f4fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f4fe:	4b43      	ldr	r3, [pc, #268]	@ (800f60c <pvPortMalloc+0x190>)
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f504:	e004      	b.n	800f510 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800f506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f508:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f50a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f512:	685b      	ldr	r3, [r3, #4]
 800f514:	687a      	ldr	r2, [r7, #4]
 800f516:	429a      	cmp	r2, r3
 800f518:	d903      	bls.n	800f522 <pvPortMalloc+0xa6>
 800f51a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d1f1      	bne.n	800f506 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f522:	4b37      	ldr	r3, [pc, #220]	@ (800f600 <pvPortMalloc+0x184>)
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f528:	429a      	cmp	r2, r3
 800f52a:	d051      	beq.n	800f5d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f52c:	6a3b      	ldr	r3, [r7, #32]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	2208      	movs	r2, #8
 800f532:	4413      	add	r3, r2
 800f534:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f538:	681a      	ldr	r2, [r3, #0]
 800f53a:	6a3b      	ldr	r3, [r7, #32]
 800f53c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f53e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f540:	685a      	ldr	r2, [r3, #4]
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	1ad2      	subs	r2, r2, r3
 800f546:	2308      	movs	r3, #8
 800f548:	005b      	lsls	r3, r3, #1
 800f54a:	429a      	cmp	r2, r3
 800f54c:	d920      	bls.n	800f590 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f54e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	4413      	add	r3, r2
 800f554:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f556:	69bb      	ldr	r3, [r7, #24]
 800f558:	f003 0307 	and.w	r3, r3, #7
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d00b      	beq.n	800f578 <pvPortMalloc+0xfc>
	__asm volatile
 800f560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f564:	f383 8811 	msr	BASEPRI, r3
 800f568:	f3bf 8f6f 	isb	sy
 800f56c:	f3bf 8f4f 	dsb	sy
 800f570:	613b      	str	r3, [r7, #16]
}
 800f572:	bf00      	nop
 800f574:	bf00      	nop
 800f576:	e7fd      	b.n	800f574 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f57a:	685a      	ldr	r2, [r3, #4]
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	1ad2      	subs	r2, r2, r3
 800f580:	69bb      	ldr	r3, [r7, #24]
 800f582:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f586:	687a      	ldr	r2, [r7, #4]
 800f588:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f58a:	69b8      	ldr	r0, [r7, #24]
 800f58c:	f000 f90a 	bl	800f7a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f590:	4b1d      	ldr	r3, [pc, #116]	@ (800f608 <pvPortMalloc+0x18c>)
 800f592:	681a      	ldr	r2, [r3, #0]
 800f594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f596:	685b      	ldr	r3, [r3, #4]
 800f598:	1ad3      	subs	r3, r2, r3
 800f59a:	4a1b      	ldr	r2, [pc, #108]	@ (800f608 <pvPortMalloc+0x18c>)
 800f59c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f59e:	4b1a      	ldr	r3, [pc, #104]	@ (800f608 <pvPortMalloc+0x18c>)
 800f5a0:	681a      	ldr	r2, [r3, #0]
 800f5a2:	4b1b      	ldr	r3, [pc, #108]	@ (800f610 <pvPortMalloc+0x194>)
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	429a      	cmp	r2, r3
 800f5a8:	d203      	bcs.n	800f5b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f5aa:	4b17      	ldr	r3, [pc, #92]	@ (800f608 <pvPortMalloc+0x18c>)
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	4a18      	ldr	r2, [pc, #96]	@ (800f610 <pvPortMalloc+0x194>)
 800f5b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f5b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5b4:	685a      	ldr	r2, [r3, #4]
 800f5b6:	4b13      	ldr	r3, [pc, #76]	@ (800f604 <pvPortMalloc+0x188>)
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	431a      	orrs	r2, r3
 800f5bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f5c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5c2:	2200      	movs	r2, #0
 800f5c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f5c6:	4b13      	ldr	r3, [pc, #76]	@ (800f614 <pvPortMalloc+0x198>)
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	3301      	adds	r3, #1
 800f5cc:	4a11      	ldr	r2, [pc, #68]	@ (800f614 <pvPortMalloc+0x198>)
 800f5ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f5d0:	f7fe ff34 	bl	800e43c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f5d4:	69fb      	ldr	r3, [r7, #28]
 800f5d6:	f003 0307 	and.w	r3, r3, #7
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d00b      	beq.n	800f5f6 <pvPortMalloc+0x17a>
	__asm volatile
 800f5de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5e2:	f383 8811 	msr	BASEPRI, r3
 800f5e6:	f3bf 8f6f 	isb	sy
 800f5ea:	f3bf 8f4f 	dsb	sy
 800f5ee:	60fb      	str	r3, [r7, #12]
}
 800f5f0:	bf00      	nop
 800f5f2:	bf00      	nop
 800f5f4:	e7fd      	b.n	800f5f2 <pvPortMalloc+0x176>
	return pvReturn;
 800f5f6:	69fb      	ldr	r3, [r7, #28]
}
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	3728      	adds	r7, #40	@ 0x28
 800f5fc:	46bd      	mov	sp, r7
 800f5fe:	bd80      	pop	{r7, pc}
 800f600:	200053a4 	.word	0x200053a4
 800f604:	200053b8 	.word	0x200053b8
 800f608:	200053a8 	.word	0x200053a8
 800f60c:	2000539c 	.word	0x2000539c
 800f610:	200053ac 	.word	0x200053ac
 800f614:	200053b0 	.word	0x200053b0

0800f618 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f618:	b580      	push	{r7, lr}
 800f61a:	b086      	sub	sp, #24
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d04f      	beq.n	800f6ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f62a:	2308      	movs	r3, #8
 800f62c:	425b      	negs	r3, r3
 800f62e:	697a      	ldr	r2, [r7, #20]
 800f630:	4413      	add	r3, r2
 800f632:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f634:	697b      	ldr	r3, [r7, #20]
 800f636:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f638:	693b      	ldr	r3, [r7, #16]
 800f63a:	685a      	ldr	r2, [r3, #4]
 800f63c:	4b25      	ldr	r3, [pc, #148]	@ (800f6d4 <vPortFree+0xbc>)
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	4013      	ands	r3, r2
 800f642:	2b00      	cmp	r3, #0
 800f644:	d10b      	bne.n	800f65e <vPortFree+0x46>
	__asm volatile
 800f646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f64a:	f383 8811 	msr	BASEPRI, r3
 800f64e:	f3bf 8f6f 	isb	sy
 800f652:	f3bf 8f4f 	dsb	sy
 800f656:	60fb      	str	r3, [r7, #12]
}
 800f658:	bf00      	nop
 800f65a:	bf00      	nop
 800f65c:	e7fd      	b.n	800f65a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f65e:	693b      	ldr	r3, [r7, #16]
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d00b      	beq.n	800f67e <vPortFree+0x66>
	__asm volatile
 800f666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f66a:	f383 8811 	msr	BASEPRI, r3
 800f66e:	f3bf 8f6f 	isb	sy
 800f672:	f3bf 8f4f 	dsb	sy
 800f676:	60bb      	str	r3, [r7, #8]
}
 800f678:	bf00      	nop
 800f67a:	bf00      	nop
 800f67c:	e7fd      	b.n	800f67a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f67e:	693b      	ldr	r3, [r7, #16]
 800f680:	685a      	ldr	r2, [r3, #4]
 800f682:	4b14      	ldr	r3, [pc, #80]	@ (800f6d4 <vPortFree+0xbc>)
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	4013      	ands	r3, r2
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d01e      	beq.n	800f6ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f68c:	693b      	ldr	r3, [r7, #16]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	2b00      	cmp	r3, #0
 800f692:	d11a      	bne.n	800f6ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f694:	693b      	ldr	r3, [r7, #16]
 800f696:	685a      	ldr	r2, [r3, #4]
 800f698:	4b0e      	ldr	r3, [pc, #56]	@ (800f6d4 <vPortFree+0xbc>)
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	43db      	mvns	r3, r3
 800f69e:	401a      	ands	r2, r3
 800f6a0:	693b      	ldr	r3, [r7, #16]
 800f6a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f6a4:	f7fe febc 	bl	800e420 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f6a8:	693b      	ldr	r3, [r7, #16]
 800f6aa:	685a      	ldr	r2, [r3, #4]
 800f6ac:	4b0a      	ldr	r3, [pc, #40]	@ (800f6d8 <vPortFree+0xc0>)
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	4413      	add	r3, r2
 800f6b2:	4a09      	ldr	r2, [pc, #36]	@ (800f6d8 <vPortFree+0xc0>)
 800f6b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f6b6:	6938      	ldr	r0, [r7, #16]
 800f6b8:	f000 f874 	bl	800f7a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f6bc:	4b07      	ldr	r3, [pc, #28]	@ (800f6dc <vPortFree+0xc4>)
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	3301      	adds	r3, #1
 800f6c2:	4a06      	ldr	r2, [pc, #24]	@ (800f6dc <vPortFree+0xc4>)
 800f6c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f6c6:	f7fe feb9 	bl	800e43c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f6ca:	bf00      	nop
 800f6cc:	3718      	adds	r7, #24
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	bd80      	pop	{r7, pc}
 800f6d2:	bf00      	nop
 800f6d4:	200053b8 	.word	0x200053b8
 800f6d8:	200053a8 	.word	0x200053a8
 800f6dc:	200053b4 	.word	0x200053b4

0800f6e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f6e0:	b480      	push	{r7}
 800f6e2:	b085      	sub	sp, #20
 800f6e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f6e6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800f6ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f6ec:	4b27      	ldr	r3, [pc, #156]	@ (800f78c <prvHeapInit+0xac>)
 800f6ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	f003 0307 	and.w	r3, r3, #7
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d00c      	beq.n	800f714 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	3307      	adds	r3, #7
 800f6fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	f023 0307 	bic.w	r3, r3, #7
 800f706:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f708:	68ba      	ldr	r2, [r7, #8]
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	1ad3      	subs	r3, r2, r3
 800f70e:	4a1f      	ldr	r2, [pc, #124]	@ (800f78c <prvHeapInit+0xac>)
 800f710:	4413      	add	r3, r2
 800f712:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f718:	4a1d      	ldr	r2, [pc, #116]	@ (800f790 <prvHeapInit+0xb0>)
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f71e:	4b1c      	ldr	r3, [pc, #112]	@ (800f790 <prvHeapInit+0xb0>)
 800f720:	2200      	movs	r2, #0
 800f722:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	68ba      	ldr	r2, [r7, #8]
 800f728:	4413      	add	r3, r2
 800f72a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f72c:	2208      	movs	r2, #8
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	1a9b      	subs	r3, r3, r2
 800f732:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	f023 0307 	bic.w	r3, r3, #7
 800f73a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	4a15      	ldr	r2, [pc, #84]	@ (800f794 <prvHeapInit+0xb4>)
 800f740:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f742:	4b14      	ldr	r3, [pc, #80]	@ (800f794 <prvHeapInit+0xb4>)
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	2200      	movs	r2, #0
 800f748:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f74a:	4b12      	ldr	r3, [pc, #72]	@ (800f794 <prvHeapInit+0xb4>)
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	2200      	movs	r2, #0
 800f750:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f756:	683b      	ldr	r3, [r7, #0]
 800f758:	68fa      	ldr	r2, [r7, #12]
 800f75a:	1ad2      	subs	r2, r2, r3
 800f75c:	683b      	ldr	r3, [r7, #0]
 800f75e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f760:	4b0c      	ldr	r3, [pc, #48]	@ (800f794 <prvHeapInit+0xb4>)
 800f762:	681a      	ldr	r2, [r3, #0]
 800f764:	683b      	ldr	r3, [r7, #0]
 800f766:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f768:	683b      	ldr	r3, [r7, #0]
 800f76a:	685b      	ldr	r3, [r3, #4]
 800f76c:	4a0a      	ldr	r2, [pc, #40]	@ (800f798 <prvHeapInit+0xb8>)
 800f76e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f770:	683b      	ldr	r3, [r7, #0]
 800f772:	685b      	ldr	r3, [r3, #4]
 800f774:	4a09      	ldr	r2, [pc, #36]	@ (800f79c <prvHeapInit+0xbc>)
 800f776:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f778:	4b09      	ldr	r3, [pc, #36]	@ (800f7a0 <prvHeapInit+0xc0>)
 800f77a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800f77e:	601a      	str	r2, [r3, #0]
}
 800f780:	bf00      	nop
 800f782:	3714      	adds	r7, #20
 800f784:	46bd      	mov	sp, r7
 800f786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78a:	4770      	bx	lr
 800f78c:	2000179c 	.word	0x2000179c
 800f790:	2000539c 	.word	0x2000539c
 800f794:	200053a4 	.word	0x200053a4
 800f798:	200053ac 	.word	0x200053ac
 800f79c:	200053a8 	.word	0x200053a8
 800f7a0:	200053b8 	.word	0x200053b8

0800f7a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f7a4:	b480      	push	{r7}
 800f7a6:	b085      	sub	sp, #20
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f7ac:	4b28      	ldr	r3, [pc, #160]	@ (800f850 <prvInsertBlockIntoFreeList+0xac>)
 800f7ae:	60fb      	str	r3, [r7, #12]
 800f7b0:	e002      	b.n	800f7b8 <prvInsertBlockIntoFreeList+0x14>
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	60fb      	str	r3, [r7, #12]
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	687a      	ldr	r2, [r7, #4]
 800f7be:	429a      	cmp	r2, r3
 800f7c0:	d8f7      	bhi.n	800f7b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	685b      	ldr	r3, [r3, #4]
 800f7ca:	68ba      	ldr	r2, [r7, #8]
 800f7cc:	4413      	add	r3, r2
 800f7ce:	687a      	ldr	r2, [r7, #4]
 800f7d0:	429a      	cmp	r2, r3
 800f7d2:	d108      	bne.n	800f7e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	685a      	ldr	r2, [r3, #4]
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	685b      	ldr	r3, [r3, #4]
 800f7dc:	441a      	add	r2, r3
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	685b      	ldr	r3, [r3, #4]
 800f7ee:	68ba      	ldr	r2, [r7, #8]
 800f7f0:	441a      	add	r2, r3
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	429a      	cmp	r2, r3
 800f7f8:	d118      	bne.n	800f82c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	681a      	ldr	r2, [r3, #0]
 800f7fe:	4b15      	ldr	r3, [pc, #84]	@ (800f854 <prvInsertBlockIntoFreeList+0xb0>)
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	429a      	cmp	r2, r3
 800f804:	d00d      	beq.n	800f822 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	685a      	ldr	r2, [r3, #4]
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	685b      	ldr	r3, [r3, #4]
 800f810:	441a      	add	r2, r3
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	681a      	ldr	r2, [r3, #0]
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	601a      	str	r2, [r3, #0]
 800f820:	e008      	b.n	800f834 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f822:	4b0c      	ldr	r3, [pc, #48]	@ (800f854 <prvInsertBlockIntoFreeList+0xb0>)
 800f824:	681a      	ldr	r2, [r3, #0]
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	601a      	str	r2, [r3, #0]
 800f82a:	e003      	b.n	800f834 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	681a      	ldr	r2, [r3, #0]
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f834:	68fa      	ldr	r2, [r7, #12]
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	429a      	cmp	r2, r3
 800f83a:	d002      	beq.n	800f842 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	687a      	ldr	r2, [r7, #4]
 800f840:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f842:	bf00      	nop
 800f844:	3714      	adds	r7, #20
 800f846:	46bd      	mov	sp, r7
 800f848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f84c:	4770      	bx	lr
 800f84e:	bf00      	nop
 800f850:	2000539c 	.word	0x2000539c
 800f854:	200053a4 	.word	0x200053a4

0800f858 <sbrk_aligned>:
 800f858:	b570      	push	{r4, r5, r6, lr}
 800f85a:	4e0f      	ldr	r6, [pc, #60]	@ (800f898 <sbrk_aligned+0x40>)
 800f85c:	460c      	mov	r4, r1
 800f85e:	6831      	ldr	r1, [r6, #0]
 800f860:	4605      	mov	r5, r0
 800f862:	b911      	cbnz	r1, 800f86a <sbrk_aligned+0x12>
 800f864:	f000 f966 	bl	800fb34 <_sbrk_r>
 800f868:	6030      	str	r0, [r6, #0]
 800f86a:	4621      	mov	r1, r4
 800f86c:	4628      	mov	r0, r5
 800f86e:	f000 f961 	bl	800fb34 <_sbrk_r>
 800f872:	1c43      	adds	r3, r0, #1
 800f874:	d103      	bne.n	800f87e <sbrk_aligned+0x26>
 800f876:	f04f 34ff 	mov.w	r4, #4294967295
 800f87a:	4620      	mov	r0, r4
 800f87c:	bd70      	pop	{r4, r5, r6, pc}
 800f87e:	1cc4      	adds	r4, r0, #3
 800f880:	f024 0403 	bic.w	r4, r4, #3
 800f884:	42a0      	cmp	r0, r4
 800f886:	d0f8      	beq.n	800f87a <sbrk_aligned+0x22>
 800f888:	1a21      	subs	r1, r4, r0
 800f88a:	4628      	mov	r0, r5
 800f88c:	f000 f952 	bl	800fb34 <_sbrk_r>
 800f890:	3001      	adds	r0, #1
 800f892:	d1f2      	bne.n	800f87a <sbrk_aligned+0x22>
 800f894:	e7ef      	b.n	800f876 <sbrk_aligned+0x1e>
 800f896:	bf00      	nop
 800f898:	200053bc 	.word	0x200053bc

0800f89c <_malloc_r>:
 800f89c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8a0:	1ccd      	adds	r5, r1, #3
 800f8a2:	f025 0503 	bic.w	r5, r5, #3
 800f8a6:	3508      	adds	r5, #8
 800f8a8:	2d0c      	cmp	r5, #12
 800f8aa:	bf38      	it	cc
 800f8ac:	250c      	movcc	r5, #12
 800f8ae:	2d00      	cmp	r5, #0
 800f8b0:	4606      	mov	r6, r0
 800f8b2:	db01      	blt.n	800f8b8 <_malloc_r+0x1c>
 800f8b4:	42a9      	cmp	r1, r5
 800f8b6:	d904      	bls.n	800f8c2 <_malloc_r+0x26>
 800f8b8:	230c      	movs	r3, #12
 800f8ba:	6033      	str	r3, [r6, #0]
 800f8bc:	2000      	movs	r0, #0
 800f8be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f8c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f998 <_malloc_r+0xfc>
 800f8c6:	f000 f869 	bl	800f99c <__malloc_lock>
 800f8ca:	f8d8 3000 	ldr.w	r3, [r8]
 800f8ce:	461c      	mov	r4, r3
 800f8d0:	bb44      	cbnz	r4, 800f924 <_malloc_r+0x88>
 800f8d2:	4629      	mov	r1, r5
 800f8d4:	4630      	mov	r0, r6
 800f8d6:	f7ff ffbf 	bl	800f858 <sbrk_aligned>
 800f8da:	1c43      	adds	r3, r0, #1
 800f8dc:	4604      	mov	r4, r0
 800f8de:	d158      	bne.n	800f992 <_malloc_r+0xf6>
 800f8e0:	f8d8 4000 	ldr.w	r4, [r8]
 800f8e4:	4627      	mov	r7, r4
 800f8e6:	2f00      	cmp	r7, #0
 800f8e8:	d143      	bne.n	800f972 <_malloc_r+0xd6>
 800f8ea:	2c00      	cmp	r4, #0
 800f8ec:	d04b      	beq.n	800f986 <_malloc_r+0xea>
 800f8ee:	6823      	ldr	r3, [r4, #0]
 800f8f0:	4639      	mov	r1, r7
 800f8f2:	4630      	mov	r0, r6
 800f8f4:	eb04 0903 	add.w	r9, r4, r3
 800f8f8:	f000 f91c 	bl	800fb34 <_sbrk_r>
 800f8fc:	4581      	cmp	r9, r0
 800f8fe:	d142      	bne.n	800f986 <_malloc_r+0xea>
 800f900:	6821      	ldr	r1, [r4, #0]
 800f902:	1a6d      	subs	r5, r5, r1
 800f904:	4629      	mov	r1, r5
 800f906:	4630      	mov	r0, r6
 800f908:	f7ff ffa6 	bl	800f858 <sbrk_aligned>
 800f90c:	3001      	adds	r0, #1
 800f90e:	d03a      	beq.n	800f986 <_malloc_r+0xea>
 800f910:	6823      	ldr	r3, [r4, #0]
 800f912:	442b      	add	r3, r5
 800f914:	6023      	str	r3, [r4, #0]
 800f916:	f8d8 3000 	ldr.w	r3, [r8]
 800f91a:	685a      	ldr	r2, [r3, #4]
 800f91c:	bb62      	cbnz	r2, 800f978 <_malloc_r+0xdc>
 800f91e:	f8c8 7000 	str.w	r7, [r8]
 800f922:	e00f      	b.n	800f944 <_malloc_r+0xa8>
 800f924:	6822      	ldr	r2, [r4, #0]
 800f926:	1b52      	subs	r2, r2, r5
 800f928:	d420      	bmi.n	800f96c <_malloc_r+0xd0>
 800f92a:	2a0b      	cmp	r2, #11
 800f92c:	d917      	bls.n	800f95e <_malloc_r+0xc2>
 800f92e:	1961      	adds	r1, r4, r5
 800f930:	42a3      	cmp	r3, r4
 800f932:	6025      	str	r5, [r4, #0]
 800f934:	bf18      	it	ne
 800f936:	6059      	strne	r1, [r3, #4]
 800f938:	6863      	ldr	r3, [r4, #4]
 800f93a:	bf08      	it	eq
 800f93c:	f8c8 1000 	streq.w	r1, [r8]
 800f940:	5162      	str	r2, [r4, r5]
 800f942:	604b      	str	r3, [r1, #4]
 800f944:	4630      	mov	r0, r6
 800f946:	f000 f82f 	bl	800f9a8 <__malloc_unlock>
 800f94a:	f104 000b 	add.w	r0, r4, #11
 800f94e:	1d23      	adds	r3, r4, #4
 800f950:	f020 0007 	bic.w	r0, r0, #7
 800f954:	1ac2      	subs	r2, r0, r3
 800f956:	bf1c      	itt	ne
 800f958:	1a1b      	subne	r3, r3, r0
 800f95a:	50a3      	strne	r3, [r4, r2]
 800f95c:	e7af      	b.n	800f8be <_malloc_r+0x22>
 800f95e:	6862      	ldr	r2, [r4, #4]
 800f960:	42a3      	cmp	r3, r4
 800f962:	bf0c      	ite	eq
 800f964:	f8c8 2000 	streq.w	r2, [r8]
 800f968:	605a      	strne	r2, [r3, #4]
 800f96a:	e7eb      	b.n	800f944 <_malloc_r+0xa8>
 800f96c:	4623      	mov	r3, r4
 800f96e:	6864      	ldr	r4, [r4, #4]
 800f970:	e7ae      	b.n	800f8d0 <_malloc_r+0x34>
 800f972:	463c      	mov	r4, r7
 800f974:	687f      	ldr	r7, [r7, #4]
 800f976:	e7b6      	b.n	800f8e6 <_malloc_r+0x4a>
 800f978:	461a      	mov	r2, r3
 800f97a:	685b      	ldr	r3, [r3, #4]
 800f97c:	42a3      	cmp	r3, r4
 800f97e:	d1fb      	bne.n	800f978 <_malloc_r+0xdc>
 800f980:	2300      	movs	r3, #0
 800f982:	6053      	str	r3, [r2, #4]
 800f984:	e7de      	b.n	800f944 <_malloc_r+0xa8>
 800f986:	230c      	movs	r3, #12
 800f988:	6033      	str	r3, [r6, #0]
 800f98a:	4630      	mov	r0, r6
 800f98c:	f000 f80c 	bl	800f9a8 <__malloc_unlock>
 800f990:	e794      	b.n	800f8bc <_malloc_r+0x20>
 800f992:	6005      	str	r5, [r0, #0]
 800f994:	e7d6      	b.n	800f944 <_malloc_r+0xa8>
 800f996:	bf00      	nop
 800f998:	200053c0 	.word	0x200053c0

0800f99c <__malloc_lock>:
 800f99c:	4801      	ldr	r0, [pc, #4]	@ (800f9a4 <__malloc_lock+0x8>)
 800f99e:	f000 b903 	b.w	800fba8 <__retarget_lock_acquire_recursive>
 800f9a2:	bf00      	nop
 800f9a4:	20005500 	.word	0x20005500

0800f9a8 <__malloc_unlock>:
 800f9a8:	4801      	ldr	r0, [pc, #4]	@ (800f9b0 <__malloc_unlock+0x8>)
 800f9aa:	f000 b8fe 	b.w	800fbaa <__retarget_lock_release_recursive>
 800f9ae:	bf00      	nop
 800f9b0:	20005500 	.word	0x20005500

0800f9b4 <_realloc_r>:
 800f9b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9b8:	4680      	mov	r8, r0
 800f9ba:	4615      	mov	r5, r2
 800f9bc:	460c      	mov	r4, r1
 800f9be:	b921      	cbnz	r1, 800f9ca <_realloc_r+0x16>
 800f9c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f9c4:	4611      	mov	r1, r2
 800f9c6:	f7ff bf69 	b.w	800f89c <_malloc_r>
 800f9ca:	b92a      	cbnz	r2, 800f9d8 <_realloc_r+0x24>
 800f9cc:	f000 f8fc 	bl	800fbc8 <_free_r>
 800f9d0:	2400      	movs	r4, #0
 800f9d2:	4620      	mov	r0, r4
 800f9d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9d8:	f000 f940 	bl	800fc5c <_malloc_usable_size_r>
 800f9dc:	4285      	cmp	r5, r0
 800f9de:	4606      	mov	r6, r0
 800f9e0:	d802      	bhi.n	800f9e8 <_realloc_r+0x34>
 800f9e2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f9e6:	d8f4      	bhi.n	800f9d2 <_realloc_r+0x1e>
 800f9e8:	4629      	mov	r1, r5
 800f9ea:	4640      	mov	r0, r8
 800f9ec:	f7ff ff56 	bl	800f89c <_malloc_r>
 800f9f0:	4607      	mov	r7, r0
 800f9f2:	2800      	cmp	r0, #0
 800f9f4:	d0ec      	beq.n	800f9d0 <_realloc_r+0x1c>
 800f9f6:	42b5      	cmp	r5, r6
 800f9f8:	462a      	mov	r2, r5
 800f9fa:	4621      	mov	r1, r4
 800f9fc:	bf28      	it	cs
 800f9fe:	4632      	movcs	r2, r6
 800fa00:	f000 f8d4 	bl	800fbac <memcpy>
 800fa04:	4621      	mov	r1, r4
 800fa06:	4640      	mov	r0, r8
 800fa08:	f000 f8de 	bl	800fbc8 <_free_r>
 800fa0c:	463c      	mov	r4, r7
 800fa0e:	e7e0      	b.n	800f9d2 <_realloc_r+0x1e>

0800fa10 <sniprintf>:
 800fa10:	b40c      	push	{r2, r3}
 800fa12:	b530      	push	{r4, r5, lr}
 800fa14:	4b17      	ldr	r3, [pc, #92]	@ (800fa74 <sniprintf+0x64>)
 800fa16:	1e0c      	subs	r4, r1, #0
 800fa18:	681d      	ldr	r5, [r3, #0]
 800fa1a:	b09d      	sub	sp, #116	@ 0x74
 800fa1c:	da08      	bge.n	800fa30 <sniprintf+0x20>
 800fa1e:	238b      	movs	r3, #139	@ 0x8b
 800fa20:	602b      	str	r3, [r5, #0]
 800fa22:	f04f 30ff 	mov.w	r0, #4294967295
 800fa26:	b01d      	add	sp, #116	@ 0x74
 800fa28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fa2c:	b002      	add	sp, #8
 800fa2e:	4770      	bx	lr
 800fa30:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800fa34:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fa38:	bf14      	ite	ne
 800fa3a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800fa3e:	4623      	moveq	r3, r4
 800fa40:	9304      	str	r3, [sp, #16]
 800fa42:	9307      	str	r3, [sp, #28]
 800fa44:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fa48:	9002      	str	r0, [sp, #8]
 800fa4a:	9006      	str	r0, [sp, #24]
 800fa4c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fa50:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800fa52:	ab21      	add	r3, sp, #132	@ 0x84
 800fa54:	a902      	add	r1, sp, #8
 800fa56:	4628      	mov	r0, r5
 800fa58:	9301      	str	r3, [sp, #4]
 800fa5a:	f000 f963 	bl	800fd24 <_svfiprintf_r>
 800fa5e:	1c43      	adds	r3, r0, #1
 800fa60:	bfbc      	itt	lt
 800fa62:	238b      	movlt	r3, #139	@ 0x8b
 800fa64:	602b      	strlt	r3, [r5, #0]
 800fa66:	2c00      	cmp	r4, #0
 800fa68:	d0dd      	beq.n	800fa26 <sniprintf+0x16>
 800fa6a:	9b02      	ldr	r3, [sp, #8]
 800fa6c:	2200      	movs	r2, #0
 800fa6e:	701a      	strb	r2, [r3, #0]
 800fa70:	e7d9      	b.n	800fa26 <sniprintf+0x16>
 800fa72:	bf00      	nop
 800fa74:	200002d4 	.word	0x200002d4

0800fa78 <memset>:
 800fa78:	4402      	add	r2, r0
 800fa7a:	4603      	mov	r3, r0
 800fa7c:	4293      	cmp	r3, r2
 800fa7e:	d100      	bne.n	800fa82 <memset+0xa>
 800fa80:	4770      	bx	lr
 800fa82:	f803 1b01 	strb.w	r1, [r3], #1
 800fa86:	e7f9      	b.n	800fa7c <memset+0x4>

0800fa88 <_reclaim_reent>:
 800fa88:	4b29      	ldr	r3, [pc, #164]	@ (800fb30 <_reclaim_reent+0xa8>)
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	4283      	cmp	r3, r0
 800fa8e:	b570      	push	{r4, r5, r6, lr}
 800fa90:	4604      	mov	r4, r0
 800fa92:	d04b      	beq.n	800fb2c <_reclaim_reent+0xa4>
 800fa94:	69c3      	ldr	r3, [r0, #28]
 800fa96:	b1ab      	cbz	r3, 800fac4 <_reclaim_reent+0x3c>
 800fa98:	68db      	ldr	r3, [r3, #12]
 800fa9a:	b16b      	cbz	r3, 800fab8 <_reclaim_reent+0x30>
 800fa9c:	2500      	movs	r5, #0
 800fa9e:	69e3      	ldr	r3, [r4, #28]
 800faa0:	68db      	ldr	r3, [r3, #12]
 800faa2:	5959      	ldr	r1, [r3, r5]
 800faa4:	2900      	cmp	r1, #0
 800faa6:	d13b      	bne.n	800fb20 <_reclaim_reent+0x98>
 800faa8:	3504      	adds	r5, #4
 800faaa:	2d80      	cmp	r5, #128	@ 0x80
 800faac:	d1f7      	bne.n	800fa9e <_reclaim_reent+0x16>
 800faae:	69e3      	ldr	r3, [r4, #28]
 800fab0:	4620      	mov	r0, r4
 800fab2:	68d9      	ldr	r1, [r3, #12]
 800fab4:	f000 f888 	bl	800fbc8 <_free_r>
 800fab8:	69e3      	ldr	r3, [r4, #28]
 800faba:	6819      	ldr	r1, [r3, #0]
 800fabc:	b111      	cbz	r1, 800fac4 <_reclaim_reent+0x3c>
 800fabe:	4620      	mov	r0, r4
 800fac0:	f000 f882 	bl	800fbc8 <_free_r>
 800fac4:	6961      	ldr	r1, [r4, #20]
 800fac6:	b111      	cbz	r1, 800face <_reclaim_reent+0x46>
 800fac8:	4620      	mov	r0, r4
 800faca:	f000 f87d 	bl	800fbc8 <_free_r>
 800face:	69e1      	ldr	r1, [r4, #28]
 800fad0:	b111      	cbz	r1, 800fad8 <_reclaim_reent+0x50>
 800fad2:	4620      	mov	r0, r4
 800fad4:	f000 f878 	bl	800fbc8 <_free_r>
 800fad8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800fada:	b111      	cbz	r1, 800fae2 <_reclaim_reent+0x5a>
 800fadc:	4620      	mov	r0, r4
 800fade:	f000 f873 	bl	800fbc8 <_free_r>
 800fae2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fae4:	b111      	cbz	r1, 800faec <_reclaim_reent+0x64>
 800fae6:	4620      	mov	r0, r4
 800fae8:	f000 f86e 	bl	800fbc8 <_free_r>
 800faec:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800faee:	b111      	cbz	r1, 800faf6 <_reclaim_reent+0x6e>
 800faf0:	4620      	mov	r0, r4
 800faf2:	f000 f869 	bl	800fbc8 <_free_r>
 800faf6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800faf8:	b111      	cbz	r1, 800fb00 <_reclaim_reent+0x78>
 800fafa:	4620      	mov	r0, r4
 800fafc:	f000 f864 	bl	800fbc8 <_free_r>
 800fb00:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800fb02:	b111      	cbz	r1, 800fb0a <_reclaim_reent+0x82>
 800fb04:	4620      	mov	r0, r4
 800fb06:	f000 f85f 	bl	800fbc8 <_free_r>
 800fb0a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800fb0c:	b111      	cbz	r1, 800fb14 <_reclaim_reent+0x8c>
 800fb0e:	4620      	mov	r0, r4
 800fb10:	f000 f85a 	bl	800fbc8 <_free_r>
 800fb14:	6a23      	ldr	r3, [r4, #32]
 800fb16:	b14b      	cbz	r3, 800fb2c <_reclaim_reent+0xa4>
 800fb18:	4620      	mov	r0, r4
 800fb1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fb1e:	4718      	bx	r3
 800fb20:	680e      	ldr	r6, [r1, #0]
 800fb22:	4620      	mov	r0, r4
 800fb24:	f000 f850 	bl	800fbc8 <_free_r>
 800fb28:	4631      	mov	r1, r6
 800fb2a:	e7bb      	b.n	800faa4 <_reclaim_reent+0x1c>
 800fb2c:	bd70      	pop	{r4, r5, r6, pc}
 800fb2e:	bf00      	nop
 800fb30:	200002d4 	.word	0x200002d4

0800fb34 <_sbrk_r>:
 800fb34:	b538      	push	{r3, r4, r5, lr}
 800fb36:	4d06      	ldr	r5, [pc, #24]	@ (800fb50 <_sbrk_r+0x1c>)
 800fb38:	2300      	movs	r3, #0
 800fb3a:	4604      	mov	r4, r0
 800fb3c:	4608      	mov	r0, r1
 800fb3e:	602b      	str	r3, [r5, #0]
 800fb40:	f7f2 fb78 	bl	8002234 <_sbrk>
 800fb44:	1c43      	adds	r3, r0, #1
 800fb46:	d102      	bne.n	800fb4e <_sbrk_r+0x1a>
 800fb48:	682b      	ldr	r3, [r5, #0]
 800fb4a:	b103      	cbz	r3, 800fb4e <_sbrk_r+0x1a>
 800fb4c:	6023      	str	r3, [r4, #0]
 800fb4e:	bd38      	pop	{r3, r4, r5, pc}
 800fb50:	200054fc 	.word	0x200054fc

0800fb54 <__errno>:
 800fb54:	4b01      	ldr	r3, [pc, #4]	@ (800fb5c <__errno+0x8>)
 800fb56:	6818      	ldr	r0, [r3, #0]
 800fb58:	4770      	bx	lr
 800fb5a:	bf00      	nop
 800fb5c:	200002d4 	.word	0x200002d4

0800fb60 <__libc_init_array>:
 800fb60:	b570      	push	{r4, r5, r6, lr}
 800fb62:	4d0d      	ldr	r5, [pc, #52]	@ (800fb98 <__libc_init_array+0x38>)
 800fb64:	4c0d      	ldr	r4, [pc, #52]	@ (800fb9c <__libc_init_array+0x3c>)
 800fb66:	1b64      	subs	r4, r4, r5
 800fb68:	10a4      	asrs	r4, r4, #2
 800fb6a:	2600      	movs	r6, #0
 800fb6c:	42a6      	cmp	r6, r4
 800fb6e:	d109      	bne.n	800fb84 <__libc_init_array+0x24>
 800fb70:	4d0b      	ldr	r5, [pc, #44]	@ (800fba0 <__libc_init_array+0x40>)
 800fb72:	4c0c      	ldr	r4, [pc, #48]	@ (800fba4 <__libc_init_array+0x44>)
 800fb74:	f000 fb7a 	bl	801026c <_init>
 800fb78:	1b64      	subs	r4, r4, r5
 800fb7a:	10a4      	asrs	r4, r4, #2
 800fb7c:	2600      	movs	r6, #0
 800fb7e:	42a6      	cmp	r6, r4
 800fb80:	d105      	bne.n	800fb8e <__libc_init_array+0x2e>
 800fb82:	bd70      	pop	{r4, r5, r6, pc}
 800fb84:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb88:	4798      	blx	r3
 800fb8a:	3601      	adds	r6, #1
 800fb8c:	e7ee      	b.n	800fb6c <__libc_init_array+0xc>
 800fb8e:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb92:	4798      	blx	r3
 800fb94:	3601      	adds	r6, #1
 800fb96:	e7f2      	b.n	800fb7e <__libc_init_array+0x1e>
 800fb98:	08010448 	.word	0x08010448
 800fb9c:	08010448 	.word	0x08010448
 800fba0:	08010448 	.word	0x08010448
 800fba4:	0801044c 	.word	0x0801044c

0800fba8 <__retarget_lock_acquire_recursive>:
 800fba8:	4770      	bx	lr

0800fbaa <__retarget_lock_release_recursive>:
 800fbaa:	4770      	bx	lr

0800fbac <memcpy>:
 800fbac:	440a      	add	r2, r1
 800fbae:	4291      	cmp	r1, r2
 800fbb0:	f100 33ff 	add.w	r3, r0, #4294967295
 800fbb4:	d100      	bne.n	800fbb8 <memcpy+0xc>
 800fbb6:	4770      	bx	lr
 800fbb8:	b510      	push	{r4, lr}
 800fbba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fbbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fbc2:	4291      	cmp	r1, r2
 800fbc4:	d1f9      	bne.n	800fbba <memcpy+0xe>
 800fbc6:	bd10      	pop	{r4, pc}

0800fbc8 <_free_r>:
 800fbc8:	b538      	push	{r3, r4, r5, lr}
 800fbca:	4605      	mov	r5, r0
 800fbcc:	2900      	cmp	r1, #0
 800fbce:	d041      	beq.n	800fc54 <_free_r+0x8c>
 800fbd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fbd4:	1f0c      	subs	r4, r1, #4
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	bfb8      	it	lt
 800fbda:	18e4      	addlt	r4, r4, r3
 800fbdc:	f7ff fede 	bl	800f99c <__malloc_lock>
 800fbe0:	4a1d      	ldr	r2, [pc, #116]	@ (800fc58 <_free_r+0x90>)
 800fbe2:	6813      	ldr	r3, [r2, #0]
 800fbe4:	b933      	cbnz	r3, 800fbf4 <_free_r+0x2c>
 800fbe6:	6063      	str	r3, [r4, #4]
 800fbe8:	6014      	str	r4, [r2, #0]
 800fbea:	4628      	mov	r0, r5
 800fbec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fbf0:	f7ff beda 	b.w	800f9a8 <__malloc_unlock>
 800fbf4:	42a3      	cmp	r3, r4
 800fbf6:	d908      	bls.n	800fc0a <_free_r+0x42>
 800fbf8:	6820      	ldr	r0, [r4, #0]
 800fbfa:	1821      	adds	r1, r4, r0
 800fbfc:	428b      	cmp	r3, r1
 800fbfe:	bf01      	itttt	eq
 800fc00:	6819      	ldreq	r1, [r3, #0]
 800fc02:	685b      	ldreq	r3, [r3, #4]
 800fc04:	1809      	addeq	r1, r1, r0
 800fc06:	6021      	streq	r1, [r4, #0]
 800fc08:	e7ed      	b.n	800fbe6 <_free_r+0x1e>
 800fc0a:	461a      	mov	r2, r3
 800fc0c:	685b      	ldr	r3, [r3, #4]
 800fc0e:	b10b      	cbz	r3, 800fc14 <_free_r+0x4c>
 800fc10:	42a3      	cmp	r3, r4
 800fc12:	d9fa      	bls.n	800fc0a <_free_r+0x42>
 800fc14:	6811      	ldr	r1, [r2, #0]
 800fc16:	1850      	adds	r0, r2, r1
 800fc18:	42a0      	cmp	r0, r4
 800fc1a:	d10b      	bne.n	800fc34 <_free_r+0x6c>
 800fc1c:	6820      	ldr	r0, [r4, #0]
 800fc1e:	4401      	add	r1, r0
 800fc20:	1850      	adds	r0, r2, r1
 800fc22:	4283      	cmp	r3, r0
 800fc24:	6011      	str	r1, [r2, #0]
 800fc26:	d1e0      	bne.n	800fbea <_free_r+0x22>
 800fc28:	6818      	ldr	r0, [r3, #0]
 800fc2a:	685b      	ldr	r3, [r3, #4]
 800fc2c:	6053      	str	r3, [r2, #4]
 800fc2e:	4408      	add	r0, r1
 800fc30:	6010      	str	r0, [r2, #0]
 800fc32:	e7da      	b.n	800fbea <_free_r+0x22>
 800fc34:	d902      	bls.n	800fc3c <_free_r+0x74>
 800fc36:	230c      	movs	r3, #12
 800fc38:	602b      	str	r3, [r5, #0]
 800fc3a:	e7d6      	b.n	800fbea <_free_r+0x22>
 800fc3c:	6820      	ldr	r0, [r4, #0]
 800fc3e:	1821      	adds	r1, r4, r0
 800fc40:	428b      	cmp	r3, r1
 800fc42:	bf04      	itt	eq
 800fc44:	6819      	ldreq	r1, [r3, #0]
 800fc46:	685b      	ldreq	r3, [r3, #4]
 800fc48:	6063      	str	r3, [r4, #4]
 800fc4a:	bf04      	itt	eq
 800fc4c:	1809      	addeq	r1, r1, r0
 800fc4e:	6021      	streq	r1, [r4, #0]
 800fc50:	6054      	str	r4, [r2, #4]
 800fc52:	e7ca      	b.n	800fbea <_free_r+0x22>
 800fc54:	bd38      	pop	{r3, r4, r5, pc}
 800fc56:	bf00      	nop
 800fc58:	200053c0 	.word	0x200053c0

0800fc5c <_malloc_usable_size_r>:
 800fc5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fc60:	1f18      	subs	r0, r3, #4
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	bfbc      	itt	lt
 800fc66:	580b      	ldrlt	r3, [r1, r0]
 800fc68:	18c0      	addlt	r0, r0, r3
 800fc6a:	4770      	bx	lr

0800fc6c <__ssputs_r>:
 800fc6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc70:	688e      	ldr	r6, [r1, #8]
 800fc72:	461f      	mov	r7, r3
 800fc74:	42be      	cmp	r6, r7
 800fc76:	680b      	ldr	r3, [r1, #0]
 800fc78:	4682      	mov	sl, r0
 800fc7a:	460c      	mov	r4, r1
 800fc7c:	4690      	mov	r8, r2
 800fc7e:	d82d      	bhi.n	800fcdc <__ssputs_r+0x70>
 800fc80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fc84:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800fc88:	d026      	beq.n	800fcd8 <__ssputs_r+0x6c>
 800fc8a:	6965      	ldr	r5, [r4, #20]
 800fc8c:	6909      	ldr	r1, [r1, #16]
 800fc8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fc92:	eba3 0901 	sub.w	r9, r3, r1
 800fc96:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fc9a:	1c7b      	adds	r3, r7, #1
 800fc9c:	444b      	add	r3, r9
 800fc9e:	106d      	asrs	r5, r5, #1
 800fca0:	429d      	cmp	r5, r3
 800fca2:	bf38      	it	cc
 800fca4:	461d      	movcc	r5, r3
 800fca6:	0553      	lsls	r3, r2, #21
 800fca8:	d527      	bpl.n	800fcfa <__ssputs_r+0x8e>
 800fcaa:	4629      	mov	r1, r5
 800fcac:	f7ff fdf6 	bl	800f89c <_malloc_r>
 800fcb0:	4606      	mov	r6, r0
 800fcb2:	b360      	cbz	r0, 800fd0e <__ssputs_r+0xa2>
 800fcb4:	6921      	ldr	r1, [r4, #16]
 800fcb6:	464a      	mov	r2, r9
 800fcb8:	f7ff ff78 	bl	800fbac <memcpy>
 800fcbc:	89a3      	ldrh	r3, [r4, #12]
 800fcbe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800fcc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fcc6:	81a3      	strh	r3, [r4, #12]
 800fcc8:	6126      	str	r6, [r4, #16]
 800fcca:	6165      	str	r5, [r4, #20]
 800fccc:	444e      	add	r6, r9
 800fcce:	eba5 0509 	sub.w	r5, r5, r9
 800fcd2:	6026      	str	r6, [r4, #0]
 800fcd4:	60a5      	str	r5, [r4, #8]
 800fcd6:	463e      	mov	r6, r7
 800fcd8:	42be      	cmp	r6, r7
 800fcda:	d900      	bls.n	800fcde <__ssputs_r+0x72>
 800fcdc:	463e      	mov	r6, r7
 800fcde:	6820      	ldr	r0, [r4, #0]
 800fce0:	4632      	mov	r2, r6
 800fce2:	4641      	mov	r1, r8
 800fce4:	f000 faa8 	bl	8010238 <memmove>
 800fce8:	68a3      	ldr	r3, [r4, #8]
 800fcea:	1b9b      	subs	r3, r3, r6
 800fcec:	60a3      	str	r3, [r4, #8]
 800fcee:	6823      	ldr	r3, [r4, #0]
 800fcf0:	4433      	add	r3, r6
 800fcf2:	6023      	str	r3, [r4, #0]
 800fcf4:	2000      	movs	r0, #0
 800fcf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcfa:	462a      	mov	r2, r5
 800fcfc:	f7ff fe5a 	bl	800f9b4 <_realloc_r>
 800fd00:	4606      	mov	r6, r0
 800fd02:	2800      	cmp	r0, #0
 800fd04:	d1e0      	bne.n	800fcc8 <__ssputs_r+0x5c>
 800fd06:	6921      	ldr	r1, [r4, #16]
 800fd08:	4650      	mov	r0, sl
 800fd0a:	f7ff ff5d 	bl	800fbc8 <_free_r>
 800fd0e:	230c      	movs	r3, #12
 800fd10:	f8ca 3000 	str.w	r3, [sl]
 800fd14:	89a3      	ldrh	r3, [r4, #12]
 800fd16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fd1a:	81a3      	strh	r3, [r4, #12]
 800fd1c:	f04f 30ff 	mov.w	r0, #4294967295
 800fd20:	e7e9      	b.n	800fcf6 <__ssputs_r+0x8a>
	...

0800fd24 <_svfiprintf_r>:
 800fd24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd28:	4698      	mov	r8, r3
 800fd2a:	898b      	ldrh	r3, [r1, #12]
 800fd2c:	061b      	lsls	r3, r3, #24
 800fd2e:	b09d      	sub	sp, #116	@ 0x74
 800fd30:	4607      	mov	r7, r0
 800fd32:	460d      	mov	r5, r1
 800fd34:	4614      	mov	r4, r2
 800fd36:	d510      	bpl.n	800fd5a <_svfiprintf_r+0x36>
 800fd38:	690b      	ldr	r3, [r1, #16]
 800fd3a:	b973      	cbnz	r3, 800fd5a <_svfiprintf_r+0x36>
 800fd3c:	2140      	movs	r1, #64	@ 0x40
 800fd3e:	f7ff fdad 	bl	800f89c <_malloc_r>
 800fd42:	6028      	str	r0, [r5, #0]
 800fd44:	6128      	str	r0, [r5, #16]
 800fd46:	b930      	cbnz	r0, 800fd56 <_svfiprintf_r+0x32>
 800fd48:	230c      	movs	r3, #12
 800fd4a:	603b      	str	r3, [r7, #0]
 800fd4c:	f04f 30ff 	mov.w	r0, #4294967295
 800fd50:	b01d      	add	sp, #116	@ 0x74
 800fd52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd56:	2340      	movs	r3, #64	@ 0x40
 800fd58:	616b      	str	r3, [r5, #20]
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	9309      	str	r3, [sp, #36]	@ 0x24
 800fd5e:	2320      	movs	r3, #32
 800fd60:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fd64:	f8cd 800c 	str.w	r8, [sp, #12]
 800fd68:	2330      	movs	r3, #48	@ 0x30
 800fd6a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ff08 <_svfiprintf_r+0x1e4>
 800fd6e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fd72:	f04f 0901 	mov.w	r9, #1
 800fd76:	4623      	mov	r3, r4
 800fd78:	469a      	mov	sl, r3
 800fd7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fd7e:	b10a      	cbz	r2, 800fd84 <_svfiprintf_r+0x60>
 800fd80:	2a25      	cmp	r2, #37	@ 0x25
 800fd82:	d1f9      	bne.n	800fd78 <_svfiprintf_r+0x54>
 800fd84:	ebba 0b04 	subs.w	fp, sl, r4
 800fd88:	d00b      	beq.n	800fda2 <_svfiprintf_r+0x7e>
 800fd8a:	465b      	mov	r3, fp
 800fd8c:	4622      	mov	r2, r4
 800fd8e:	4629      	mov	r1, r5
 800fd90:	4638      	mov	r0, r7
 800fd92:	f7ff ff6b 	bl	800fc6c <__ssputs_r>
 800fd96:	3001      	adds	r0, #1
 800fd98:	f000 80a7 	beq.w	800feea <_svfiprintf_r+0x1c6>
 800fd9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fd9e:	445a      	add	r2, fp
 800fda0:	9209      	str	r2, [sp, #36]	@ 0x24
 800fda2:	f89a 3000 	ldrb.w	r3, [sl]
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	f000 809f 	beq.w	800feea <_svfiprintf_r+0x1c6>
 800fdac:	2300      	movs	r3, #0
 800fdae:	f04f 32ff 	mov.w	r2, #4294967295
 800fdb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fdb6:	f10a 0a01 	add.w	sl, sl, #1
 800fdba:	9304      	str	r3, [sp, #16]
 800fdbc:	9307      	str	r3, [sp, #28]
 800fdbe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fdc2:	931a      	str	r3, [sp, #104]	@ 0x68
 800fdc4:	4654      	mov	r4, sl
 800fdc6:	2205      	movs	r2, #5
 800fdc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fdcc:	484e      	ldr	r0, [pc, #312]	@ (800ff08 <_svfiprintf_r+0x1e4>)
 800fdce:	f7f0 fa1f 	bl	8000210 <memchr>
 800fdd2:	9a04      	ldr	r2, [sp, #16]
 800fdd4:	b9d8      	cbnz	r0, 800fe0e <_svfiprintf_r+0xea>
 800fdd6:	06d0      	lsls	r0, r2, #27
 800fdd8:	bf44      	itt	mi
 800fdda:	2320      	movmi	r3, #32
 800fddc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fde0:	0711      	lsls	r1, r2, #28
 800fde2:	bf44      	itt	mi
 800fde4:	232b      	movmi	r3, #43	@ 0x2b
 800fde6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fdea:	f89a 3000 	ldrb.w	r3, [sl]
 800fdee:	2b2a      	cmp	r3, #42	@ 0x2a
 800fdf0:	d015      	beq.n	800fe1e <_svfiprintf_r+0xfa>
 800fdf2:	9a07      	ldr	r2, [sp, #28]
 800fdf4:	4654      	mov	r4, sl
 800fdf6:	2000      	movs	r0, #0
 800fdf8:	f04f 0c0a 	mov.w	ip, #10
 800fdfc:	4621      	mov	r1, r4
 800fdfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fe02:	3b30      	subs	r3, #48	@ 0x30
 800fe04:	2b09      	cmp	r3, #9
 800fe06:	d94b      	bls.n	800fea0 <_svfiprintf_r+0x17c>
 800fe08:	b1b0      	cbz	r0, 800fe38 <_svfiprintf_r+0x114>
 800fe0a:	9207      	str	r2, [sp, #28]
 800fe0c:	e014      	b.n	800fe38 <_svfiprintf_r+0x114>
 800fe0e:	eba0 0308 	sub.w	r3, r0, r8
 800fe12:	fa09 f303 	lsl.w	r3, r9, r3
 800fe16:	4313      	orrs	r3, r2
 800fe18:	9304      	str	r3, [sp, #16]
 800fe1a:	46a2      	mov	sl, r4
 800fe1c:	e7d2      	b.n	800fdc4 <_svfiprintf_r+0xa0>
 800fe1e:	9b03      	ldr	r3, [sp, #12]
 800fe20:	1d19      	adds	r1, r3, #4
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	9103      	str	r1, [sp, #12]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	bfbb      	ittet	lt
 800fe2a:	425b      	neglt	r3, r3
 800fe2c:	f042 0202 	orrlt.w	r2, r2, #2
 800fe30:	9307      	strge	r3, [sp, #28]
 800fe32:	9307      	strlt	r3, [sp, #28]
 800fe34:	bfb8      	it	lt
 800fe36:	9204      	strlt	r2, [sp, #16]
 800fe38:	7823      	ldrb	r3, [r4, #0]
 800fe3a:	2b2e      	cmp	r3, #46	@ 0x2e
 800fe3c:	d10a      	bne.n	800fe54 <_svfiprintf_r+0x130>
 800fe3e:	7863      	ldrb	r3, [r4, #1]
 800fe40:	2b2a      	cmp	r3, #42	@ 0x2a
 800fe42:	d132      	bne.n	800feaa <_svfiprintf_r+0x186>
 800fe44:	9b03      	ldr	r3, [sp, #12]
 800fe46:	1d1a      	adds	r2, r3, #4
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	9203      	str	r2, [sp, #12]
 800fe4c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fe50:	3402      	adds	r4, #2
 800fe52:	9305      	str	r3, [sp, #20]
 800fe54:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ff18 <_svfiprintf_r+0x1f4>
 800fe58:	7821      	ldrb	r1, [r4, #0]
 800fe5a:	2203      	movs	r2, #3
 800fe5c:	4650      	mov	r0, sl
 800fe5e:	f7f0 f9d7 	bl	8000210 <memchr>
 800fe62:	b138      	cbz	r0, 800fe74 <_svfiprintf_r+0x150>
 800fe64:	9b04      	ldr	r3, [sp, #16]
 800fe66:	eba0 000a 	sub.w	r0, r0, sl
 800fe6a:	2240      	movs	r2, #64	@ 0x40
 800fe6c:	4082      	lsls	r2, r0
 800fe6e:	4313      	orrs	r3, r2
 800fe70:	3401      	adds	r4, #1
 800fe72:	9304      	str	r3, [sp, #16]
 800fe74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe78:	4824      	ldr	r0, [pc, #144]	@ (800ff0c <_svfiprintf_r+0x1e8>)
 800fe7a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fe7e:	2206      	movs	r2, #6
 800fe80:	f7f0 f9c6 	bl	8000210 <memchr>
 800fe84:	2800      	cmp	r0, #0
 800fe86:	d036      	beq.n	800fef6 <_svfiprintf_r+0x1d2>
 800fe88:	4b21      	ldr	r3, [pc, #132]	@ (800ff10 <_svfiprintf_r+0x1ec>)
 800fe8a:	bb1b      	cbnz	r3, 800fed4 <_svfiprintf_r+0x1b0>
 800fe8c:	9b03      	ldr	r3, [sp, #12]
 800fe8e:	3307      	adds	r3, #7
 800fe90:	f023 0307 	bic.w	r3, r3, #7
 800fe94:	3308      	adds	r3, #8
 800fe96:	9303      	str	r3, [sp, #12]
 800fe98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe9a:	4433      	add	r3, r6
 800fe9c:	9309      	str	r3, [sp, #36]	@ 0x24
 800fe9e:	e76a      	b.n	800fd76 <_svfiprintf_r+0x52>
 800fea0:	fb0c 3202 	mla	r2, ip, r2, r3
 800fea4:	460c      	mov	r4, r1
 800fea6:	2001      	movs	r0, #1
 800fea8:	e7a8      	b.n	800fdfc <_svfiprintf_r+0xd8>
 800feaa:	2300      	movs	r3, #0
 800feac:	3401      	adds	r4, #1
 800feae:	9305      	str	r3, [sp, #20]
 800feb0:	4619      	mov	r1, r3
 800feb2:	f04f 0c0a 	mov.w	ip, #10
 800feb6:	4620      	mov	r0, r4
 800feb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800febc:	3a30      	subs	r2, #48	@ 0x30
 800febe:	2a09      	cmp	r2, #9
 800fec0:	d903      	bls.n	800feca <_svfiprintf_r+0x1a6>
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d0c6      	beq.n	800fe54 <_svfiprintf_r+0x130>
 800fec6:	9105      	str	r1, [sp, #20]
 800fec8:	e7c4      	b.n	800fe54 <_svfiprintf_r+0x130>
 800feca:	fb0c 2101 	mla	r1, ip, r1, r2
 800fece:	4604      	mov	r4, r0
 800fed0:	2301      	movs	r3, #1
 800fed2:	e7f0      	b.n	800feb6 <_svfiprintf_r+0x192>
 800fed4:	ab03      	add	r3, sp, #12
 800fed6:	9300      	str	r3, [sp, #0]
 800fed8:	462a      	mov	r2, r5
 800feda:	4b0e      	ldr	r3, [pc, #56]	@ (800ff14 <_svfiprintf_r+0x1f0>)
 800fedc:	a904      	add	r1, sp, #16
 800fede:	4638      	mov	r0, r7
 800fee0:	f3af 8000 	nop.w
 800fee4:	1c42      	adds	r2, r0, #1
 800fee6:	4606      	mov	r6, r0
 800fee8:	d1d6      	bne.n	800fe98 <_svfiprintf_r+0x174>
 800feea:	89ab      	ldrh	r3, [r5, #12]
 800feec:	065b      	lsls	r3, r3, #25
 800feee:	f53f af2d 	bmi.w	800fd4c <_svfiprintf_r+0x28>
 800fef2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fef4:	e72c      	b.n	800fd50 <_svfiprintf_r+0x2c>
 800fef6:	ab03      	add	r3, sp, #12
 800fef8:	9300      	str	r3, [sp, #0]
 800fefa:	462a      	mov	r2, r5
 800fefc:	4b05      	ldr	r3, [pc, #20]	@ (800ff14 <_svfiprintf_r+0x1f0>)
 800fefe:	a904      	add	r1, sp, #16
 800ff00:	4638      	mov	r0, r7
 800ff02:	f000 f879 	bl	800fff8 <_printf_i>
 800ff06:	e7ed      	b.n	800fee4 <_svfiprintf_r+0x1c0>
 800ff08:	0801040c 	.word	0x0801040c
 800ff0c:	08010416 	.word	0x08010416
 800ff10:	00000000 	.word	0x00000000
 800ff14:	0800fc6d 	.word	0x0800fc6d
 800ff18:	08010412 	.word	0x08010412

0800ff1c <_printf_common>:
 800ff1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff20:	4616      	mov	r6, r2
 800ff22:	4698      	mov	r8, r3
 800ff24:	688a      	ldr	r2, [r1, #8]
 800ff26:	690b      	ldr	r3, [r1, #16]
 800ff28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ff2c:	4293      	cmp	r3, r2
 800ff2e:	bfb8      	it	lt
 800ff30:	4613      	movlt	r3, r2
 800ff32:	6033      	str	r3, [r6, #0]
 800ff34:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ff38:	4607      	mov	r7, r0
 800ff3a:	460c      	mov	r4, r1
 800ff3c:	b10a      	cbz	r2, 800ff42 <_printf_common+0x26>
 800ff3e:	3301      	adds	r3, #1
 800ff40:	6033      	str	r3, [r6, #0]
 800ff42:	6823      	ldr	r3, [r4, #0]
 800ff44:	0699      	lsls	r1, r3, #26
 800ff46:	bf42      	ittt	mi
 800ff48:	6833      	ldrmi	r3, [r6, #0]
 800ff4a:	3302      	addmi	r3, #2
 800ff4c:	6033      	strmi	r3, [r6, #0]
 800ff4e:	6825      	ldr	r5, [r4, #0]
 800ff50:	f015 0506 	ands.w	r5, r5, #6
 800ff54:	d106      	bne.n	800ff64 <_printf_common+0x48>
 800ff56:	f104 0a19 	add.w	sl, r4, #25
 800ff5a:	68e3      	ldr	r3, [r4, #12]
 800ff5c:	6832      	ldr	r2, [r6, #0]
 800ff5e:	1a9b      	subs	r3, r3, r2
 800ff60:	42ab      	cmp	r3, r5
 800ff62:	dc26      	bgt.n	800ffb2 <_printf_common+0x96>
 800ff64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ff68:	6822      	ldr	r2, [r4, #0]
 800ff6a:	3b00      	subs	r3, #0
 800ff6c:	bf18      	it	ne
 800ff6e:	2301      	movne	r3, #1
 800ff70:	0692      	lsls	r2, r2, #26
 800ff72:	d42b      	bmi.n	800ffcc <_printf_common+0xb0>
 800ff74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ff78:	4641      	mov	r1, r8
 800ff7a:	4638      	mov	r0, r7
 800ff7c:	47c8      	blx	r9
 800ff7e:	3001      	adds	r0, #1
 800ff80:	d01e      	beq.n	800ffc0 <_printf_common+0xa4>
 800ff82:	6823      	ldr	r3, [r4, #0]
 800ff84:	6922      	ldr	r2, [r4, #16]
 800ff86:	f003 0306 	and.w	r3, r3, #6
 800ff8a:	2b04      	cmp	r3, #4
 800ff8c:	bf02      	ittt	eq
 800ff8e:	68e5      	ldreq	r5, [r4, #12]
 800ff90:	6833      	ldreq	r3, [r6, #0]
 800ff92:	1aed      	subeq	r5, r5, r3
 800ff94:	68a3      	ldr	r3, [r4, #8]
 800ff96:	bf0c      	ite	eq
 800ff98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ff9c:	2500      	movne	r5, #0
 800ff9e:	4293      	cmp	r3, r2
 800ffa0:	bfc4      	itt	gt
 800ffa2:	1a9b      	subgt	r3, r3, r2
 800ffa4:	18ed      	addgt	r5, r5, r3
 800ffa6:	2600      	movs	r6, #0
 800ffa8:	341a      	adds	r4, #26
 800ffaa:	42b5      	cmp	r5, r6
 800ffac:	d11a      	bne.n	800ffe4 <_printf_common+0xc8>
 800ffae:	2000      	movs	r0, #0
 800ffb0:	e008      	b.n	800ffc4 <_printf_common+0xa8>
 800ffb2:	2301      	movs	r3, #1
 800ffb4:	4652      	mov	r2, sl
 800ffb6:	4641      	mov	r1, r8
 800ffb8:	4638      	mov	r0, r7
 800ffba:	47c8      	blx	r9
 800ffbc:	3001      	adds	r0, #1
 800ffbe:	d103      	bne.n	800ffc8 <_printf_common+0xac>
 800ffc0:	f04f 30ff 	mov.w	r0, #4294967295
 800ffc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ffc8:	3501      	adds	r5, #1
 800ffca:	e7c6      	b.n	800ff5a <_printf_common+0x3e>
 800ffcc:	18e1      	adds	r1, r4, r3
 800ffce:	1c5a      	adds	r2, r3, #1
 800ffd0:	2030      	movs	r0, #48	@ 0x30
 800ffd2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ffd6:	4422      	add	r2, r4
 800ffd8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ffdc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ffe0:	3302      	adds	r3, #2
 800ffe2:	e7c7      	b.n	800ff74 <_printf_common+0x58>
 800ffe4:	2301      	movs	r3, #1
 800ffe6:	4622      	mov	r2, r4
 800ffe8:	4641      	mov	r1, r8
 800ffea:	4638      	mov	r0, r7
 800ffec:	47c8      	blx	r9
 800ffee:	3001      	adds	r0, #1
 800fff0:	d0e6      	beq.n	800ffc0 <_printf_common+0xa4>
 800fff2:	3601      	adds	r6, #1
 800fff4:	e7d9      	b.n	800ffaa <_printf_common+0x8e>
	...

0800fff8 <_printf_i>:
 800fff8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fffc:	7e0f      	ldrb	r7, [r1, #24]
 800fffe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010000:	2f78      	cmp	r7, #120	@ 0x78
 8010002:	4691      	mov	r9, r2
 8010004:	4680      	mov	r8, r0
 8010006:	460c      	mov	r4, r1
 8010008:	469a      	mov	sl, r3
 801000a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801000e:	d807      	bhi.n	8010020 <_printf_i+0x28>
 8010010:	2f62      	cmp	r7, #98	@ 0x62
 8010012:	d80a      	bhi.n	801002a <_printf_i+0x32>
 8010014:	2f00      	cmp	r7, #0
 8010016:	f000 80d2 	beq.w	80101be <_printf_i+0x1c6>
 801001a:	2f58      	cmp	r7, #88	@ 0x58
 801001c:	f000 80b9 	beq.w	8010192 <_printf_i+0x19a>
 8010020:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010024:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010028:	e03a      	b.n	80100a0 <_printf_i+0xa8>
 801002a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801002e:	2b15      	cmp	r3, #21
 8010030:	d8f6      	bhi.n	8010020 <_printf_i+0x28>
 8010032:	a101      	add	r1, pc, #4	@ (adr r1, 8010038 <_printf_i+0x40>)
 8010034:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010038:	08010091 	.word	0x08010091
 801003c:	080100a5 	.word	0x080100a5
 8010040:	08010021 	.word	0x08010021
 8010044:	08010021 	.word	0x08010021
 8010048:	08010021 	.word	0x08010021
 801004c:	08010021 	.word	0x08010021
 8010050:	080100a5 	.word	0x080100a5
 8010054:	08010021 	.word	0x08010021
 8010058:	08010021 	.word	0x08010021
 801005c:	08010021 	.word	0x08010021
 8010060:	08010021 	.word	0x08010021
 8010064:	080101a5 	.word	0x080101a5
 8010068:	080100cf 	.word	0x080100cf
 801006c:	0801015f 	.word	0x0801015f
 8010070:	08010021 	.word	0x08010021
 8010074:	08010021 	.word	0x08010021
 8010078:	080101c7 	.word	0x080101c7
 801007c:	08010021 	.word	0x08010021
 8010080:	080100cf 	.word	0x080100cf
 8010084:	08010021 	.word	0x08010021
 8010088:	08010021 	.word	0x08010021
 801008c:	08010167 	.word	0x08010167
 8010090:	6833      	ldr	r3, [r6, #0]
 8010092:	1d1a      	adds	r2, r3, #4
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	6032      	str	r2, [r6, #0]
 8010098:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801009c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80100a0:	2301      	movs	r3, #1
 80100a2:	e09d      	b.n	80101e0 <_printf_i+0x1e8>
 80100a4:	6833      	ldr	r3, [r6, #0]
 80100a6:	6820      	ldr	r0, [r4, #0]
 80100a8:	1d19      	adds	r1, r3, #4
 80100aa:	6031      	str	r1, [r6, #0]
 80100ac:	0606      	lsls	r6, r0, #24
 80100ae:	d501      	bpl.n	80100b4 <_printf_i+0xbc>
 80100b0:	681d      	ldr	r5, [r3, #0]
 80100b2:	e003      	b.n	80100bc <_printf_i+0xc4>
 80100b4:	0645      	lsls	r5, r0, #25
 80100b6:	d5fb      	bpl.n	80100b0 <_printf_i+0xb8>
 80100b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80100bc:	2d00      	cmp	r5, #0
 80100be:	da03      	bge.n	80100c8 <_printf_i+0xd0>
 80100c0:	232d      	movs	r3, #45	@ 0x2d
 80100c2:	426d      	negs	r5, r5
 80100c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80100c8:	4859      	ldr	r0, [pc, #356]	@ (8010230 <_printf_i+0x238>)
 80100ca:	230a      	movs	r3, #10
 80100cc:	e011      	b.n	80100f2 <_printf_i+0xfa>
 80100ce:	6821      	ldr	r1, [r4, #0]
 80100d0:	6833      	ldr	r3, [r6, #0]
 80100d2:	0608      	lsls	r0, r1, #24
 80100d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80100d8:	d402      	bmi.n	80100e0 <_printf_i+0xe8>
 80100da:	0649      	lsls	r1, r1, #25
 80100dc:	bf48      	it	mi
 80100de:	b2ad      	uxthmi	r5, r5
 80100e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80100e2:	4853      	ldr	r0, [pc, #332]	@ (8010230 <_printf_i+0x238>)
 80100e4:	6033      	str	r3, [r6, #0]
 80100e6:	bf14      	ite	ne
 80100e8:	230a      	movne	r3, #10
 80100ea:	2308      	moveq	r3, #8
 80100ec:	2100      	movs	r1, #0
 80100ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80100f2:	6866      	ldr	r6, [r4, #4]
 80100f4:	60a6      	str	r6, [r4, #8]
 80100f6:	2e00      	cmp	r6, #0
 80100f8:	bfa2      	ittt	ge
 80100fa:	6821      	ldrge	r1, [r4, #0]
 80100fc:	f021 0104 	bicge.w	r1, r1, #4
 8010100:	6021      	strge	r1, [r4, #0]
 8010102:	b90d      	cbnz	r5, 8010108 <_printf_i+0x110>
 8010104:	2e00      	cmp	r6, #0
 8010106:	d04b      	beq.n	80101a0 <_printf_i+0x1a8>
 8010108:	4616      	mov	r6, r2
 801010a:	fbb5 f1f3 	udiv	r1, r5, r3
 801010e:	fb03 5711 	mls	r7, r3, r1, r5
 8010112:	5dc7      	ldrb	r7, [r0, r7]
 8010114:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010118:	462f      	mov	r7, r5
 801011a:	42bb      	cmp	r3, r7
 801011c:	460d      	mov	r5, r1
 801011e:	d9f4      	bls.n	801010a <_printf_i+0x112>
 8010120:	2b08      	cmp	r3, #8
 8010122:	d10b      	bne.n	801013c <_printf_i+0x144>
 8010124:	6823      	ldr	r3, [r4, #0]
 8010126:	07df      	lsls	r7, r3, #31
 8010128:	d508      	bpl.n	801013c <_printf_i+0x144>
 801012a:	6923      	ldr	r3, [r4, #16]
 801012c:	6861      	ldr	r1, [r4, #4]
 801012e:	4299      	cmp	r1, r3
 8010130:	bfde      	ittt	le
 8010132:	2330      	movle	r3, #48	@ 0x30
 8010134:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010138:	f106 36ff 	addle.w	r6, r6, #4294967295
 801013c:	1b92      	subs	r2, r2, r6
 801013e:	6122      	str	r2, [r4, #16]
 8010140:	f8cd a000 	str.w	sl, [sp]
 8010144:	464b      	mov	r3, r9
 8010146:	aa03      	add	r2, sp, #12
 8010148:	4621      	mov	r1, r4
 801014a:	4640      	mov	r0, r8
 801014c:	f7ff fee6 	bl	800ff1c <_printf_common>
 8010150:	3001      	adds	r0, #1
 8010152:	d14a      	bne.n	80101ea <_printf_i+0x1f2>
 8010154:	f04f 30ff 	mov.w	r0, #4294967295
 8010158:	b004      	add	sp, #16
 801015a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801015e:	6823      	ldr	r3, [r4, #0]
 8010160:	f043 0320 	orr.w	r3, r3, #32
 8010164:	6023      	str	r3, [r4, #0]
 8010166:	4833      	ldr	r0, [pc, #204]	@ (8010234 <_printf_i+0x23c>)
 8010168:	2778      	movs	r7, #120	@ 0x78
 801016a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801016e:	6823      	ldr	r3, [r4, #0]
 8010170:	6831      	ldr	r1, [r6, #0]
 8010172:	061f      	lsls	r7, r3, #24
 8010174:	f851 5b04 	ldr.w	r5, [r1], #4
 8010178:	d402      	bmi.n	8010180 <_printf_i+0x188>
 801017a:	065f      	lsls	r7, r3, #25
 801017c:	bf48      	it	mi
 801017e:	b2ad      	uxthmi	r5, r5
 8010180:	6031      	str	r1, [r6, #0]
 8010182:	07d9      	lsls	r1, r3, #31
 8010184:	bf44      	itt	mi
 8010186:	f043 0320 	orrmi.w	r3, r3, #32
 801018a:	6023      	strmi	r3, [r4, #0]
 801018c:	b11d      	cbz	r5, 8010196 <_printf_i+0x19e>
 801018e:	2310      	movs	r3, #16
 8010190:	e7ac      	b.n	80100ec <_printf_i+0xf4>
 8010192:	4827      	ldr	r0, [pc, #156]	@ (8010230 <_printf_i+0x238>)
 8010194:	e7e9      	b.n	801016a <_printf_i+0x172>
 8010196:	6823      	ldr	r3, [r4, #0]
 8010198:	f023 0320 	bic.w	r3, r3, #32
 801019c:	6023      	str	r3, [r4, #0]
 801019e:	e7f6      	b.n	801018e <_printf_i+0x196>
 80101a0:	4616      	mov	r6, r2
 80101a2:	e7bd      	b.n	8010120 <_printf_i+0x128>
 80101a4:	6833      	ldr	r3, [r6, #0]
 80101a6:	6825      	ldr	r5, [r4, #0]
 80101a8:	6961      	ldr	r1, [r4, #20]
 80101aa:	1d18      	adds	r0, r3, #4
 80101ac:	6030      	str	r0, [r6, #0]
 80101ae:	062e      	lsls	r6, r5, #24
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	d501      	bpl.n	80101b8 <_printf_i+0x1c0>
 80101b4:	6019      	str	r1, [r3, #0]
 80101b6:	e002      	b.n	80101be <_printf_i+0x1c6>
 80101b8:	0668      	lsls	r0, r5, #25
 80101ba:	d5fb      	bpl.n	80101b4 <_printf_i+0x1bc>
 80101bc:	8019      	strh	r1, [r3, #0]
 80101be:	2300      	movs	r3, #0
 80101c0:	6123      	str	r3, [r4, #16]
 80101c2:	4616      	mov	r6, r2
 80101c4:	e7bc      	b.n	8010140 <_printf_i+0x148>
 80101c6:	6833      	ldr	r3, [r6, #0]
 80101c8:	1d1a      	adds	r2, r3, #4
 80101ca:	6032      	str	r2, [r6, #0]
 80101cc:	681e      	ldr	r6, [r3, #0]
 80101ce:	6862      	ldr	r2, [r4, #4]
 80101d0:	2100      	movs	r1, #0
 80101d2:	4630      	mov	r0, r6
 80101d4:	f7f0 f81c 	bl	8000210 <memchr>
 80101d8:	b108      	cbz	r0, 80101de <_printf_i+0x1e6>
 80101da:	1b80      	subs	r0, r0, r6
 80101dc:	6060      	str	r0, [r4, #4]
 80101de:	6863      	ldr	r3, [r4, #4]
 80101e0:	6123      	str	r3, [r4, #16]
 80101e2:	2300      	movs	r3, #0
 80101e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80101e8:	e7aa      	b.n	8010140 <_printf_i+0x148>
 80101ea:	6923      	ldr	r3, [r4, #16]
 80101ec:	4632      	mov	r2, r6
 80101ee:	4649      	mov	r1, r9
 80101f0:	4640      	mov	r0, r8
 80101f2:	47d0      	blx	sl
 80101f4:	3001      	adds	r0, #1
 80101f6:	d0ad      	beq.n	8010154 <_printf_i+0x15c>
 80101f8:	6823      	ldr	r3, [r4, #0]
 80101fa:	079b      	lsls	r3, r3, #30
 80101fc:	d413      	bmi.n	8010226 <_printf_i+0x22e>
 80101fe:	68e0      	ldr	r0, [r4, #12]
 8010200:	9b03      	ldr	r3, [sp, #12]
 8010202:	4298      	cmp	r0, r3
 8010204:	bfb8      	it	lt
 8010206:	4618      	movlt	r0, r3
 8010208:	e7a6      	b.n	8010158 <_printf_i+0x160>
 801020a:	2301      	movs	r3, #1
 801020c:	4632      	mov	r2, r6
 801020e:	4649      	mov	r1, r9
 8010210:	4640      	mov	r0, r8
 8010212:	47d0      	blx	sl
 8010214:	3001      	adds	r0, #1
 8010216:	d09d      	beq.n	8010154 <_printf_i+0x15c>
 8010218:	3501      	adds	r5, #1
 801021a:	68e3      	ldr	r3, [r4, #12]
 801021c:	9903      	ldr	r1, [sp, #12]
 801021e:	1a5b      	subs	r3, r3, r1
 8010220:	42ab      	cmp	r3, r5
 8010222:	dcf2      	bgt.n	801020a <_printf_i+0x212>
 8010224:	e7eb      	b.n	80101fe <_printf_i+0x206>
 8010226:	2500      	movs	r5, #0
 8010228:	f104 0619 	add.w	r6, r4, #25
 801022c:	e7f5      	b.n	801021a <_printf_i+0x222>
 801022e:	bf00      	nop
 8010230:	0801041d 	.word	0x0801041d
 8010234:	0801042e 	.word	0x0801042e

08010238 <memmove>:
 8010238:	4288      	cmp	r0, r1
 801023a:	b510      	push	{r4, lr}
 801023c:	eb01 0402 	add.w	r4, r1, r2
 8010240:	d902      	bls.n	8010248 <memmove+0x10>
 8010242:	4284      	cmp	r4, r0
 8010244:	4623      	mov	r3, r4
 8010246:	d807      	bhi.n	8010258 <memmove+0x20>
 8010248:	1e43      	subs	r3, r0, #1
 801024a:	42a1      	cmp	r1, r4
 801024c:	d008      	beq.n	8010260 <memmove+0x28>
 801024e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010252:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010256:	e7f8      	b.n	801024a <memmove+0x12>
 8010258:	4402      	add	r2, r0
 801025a:	4601      	mov	r1, r0
 801025c:	428a      	cmp	r2, r1
 801025e:	d100      	bne.n	8010262 <memmove+0x2a>
 8010260:	bd10      	pop	{r4, pc}
 8010262:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010266:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801026a:	e7f7      	b.n	801025c <memmove+0x24>

0801026c <_init>:
 801026c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801026e:	bf00      	nop
 8010270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010272:	bc08      	pop	{r3}
 8010274:	469e      	mov	lr, r3
 8010276:	4770      	bx	lr

08010278 <_fini>:
 8010278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801027a:	bf00      	nop
 801027c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801027e:	bc08      	pop	{r3}
 8010280:	469e      	mov	lr, r3
 8010282:	4770      	bx	lr
