
stm-wheel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046e8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  080047f4  080047f4  000057f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004964  08004964  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004964  08004964  00005964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800496c  0800496c  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800496c  0800496c  0000596c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004970  08004970  00005970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004974  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  20000068  080049dc  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  080049dc  000062a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c59  00000000  00000000  00006091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c1e  00000000  00000000  0000fcea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000900  00000000  00000000  00011908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006d8  00000000  00000000  00012208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ff2  00000000  00000000  000128e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a6e1  00000000  00000000  0002a8d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008693d  00000000  00000000  00034fb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bb8f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d98  00000000  00000000  000bb934  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000be6cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	080047dc 	.word	0x080047dc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	080047dc 	.word	0x080047dc

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000160:	f000 fd5e 	bl	8000c20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000164:	f000 f844 	bl	80001f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000168:	f000 f8fa 	bl	8000360 <MX_GPIO_Init>
  MX_CAN_Init();
 800016c:	f000 f880 	bl	8000270 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000170:	f000 f8cc 	bl	800030c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan);
 8000174:	481b      	ldr	r0, [pc, #108]	@ (80001e4 <main+0x88>)
 8000176:	f000 ff9d 	bl	80010b4 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 800017a:	2110      	movs	r1, #16
 800017c:	4819      	ldr	r0, [pc, #100]	@ (80001e4 <main+0x88>)
 800017e:	f001 f9cd 	bl	800151c <HAL_CAN_ActivateNotification>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);   // Turn LED off
 8000182:	2201      	movs	r2, #1
 8000184:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000188:	4817      	ldr	r0, [pc, #92]	@ (80001e8 <main+0x8c>)
 800018a:	f001 ff5f 	bl	800204c <HAL_GPIO_WritePin>
	telemetry_data.tRpm = 0;
 800018e:	4b17      	ldr	r3, [pc, #92]	@ (80001ec <main+0x90>)
 8000190:	2200      	movs	r2, #0
 8000192:	601a      	str	r2, [r3, #0]
	telemetry_data.tRpm = 0;
 8000194:	4b15      	ldr	r3, [pc, #84]	@ (80001ec <main+0x90>)
 8000196:	2200      	movs	r2, #0
 8000198:	601a      	str	r2, [r3, #0]
	telemetry_data.tSpeedKmh = 0;
 800019a:	4b14      	ldr	r3, [pc, #80]	@ (80001ec <main+0x90>)
 800019c:	2200      	movs	r2, #0
 800019e:	609a      	str	r2, [r3, #8]
	telemetry_data.tHasDRS = 0;
 80001a0:	4b12      	ldr	r3, [pc, #72]	@ (80001ec <main+0x90>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	60da      	str	r2, [r3, #12]
	telemetry_data.tDrs = 0;
 80001a6:	4b11      	ldr	r3, [pc, #68]	@ (80001ec <main+0x90>)
 80001a8:	2200      	movs	r2, #0
 80001aa:	611a      	str	r2, [r3, #16]
	telemetry_data.tPitLim = 0;
 80001ac:	4b0f      	ldr	r3, [pc, #60]	@ (80001ec <main+0x90>)
 80001ae:	2200      	movs	r2, #0
 80001b0:	615a      	str	r2, [r3, #20]
	telemetry_data.tFuel = 0;
 80001b2:	4b0e      	ldr	r3, [pc, #56]	@ (80001ec <main+0x90>)
 80001b4:	2200      	movs	r2, #0
 80001b6:	619a      	str	r2, [r3, #24]
	telemetry_data.tBrakeBias = 0;
 80001b8:	4b0c      	ldr	r3, [pc, #48]	@ (80001ec <main+0x90>)
 80001ba:	2200      	movs	r2, #0
 80001bc:	61da      	str	r2, [r3, #28]
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);   // Turn LED off
 80001be:	2200      	movs	r2, #0
 80001c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001c4:	4808      	ldr	r0, [pc, #32]	@ (80001e8 <main+0x8c>)
 80001c6:	f001 ff41 	bl	800204c <HAL_GPIO_WritePin>

	  prepareTelemetry();
 80001ca:	f000 f915 	bl	80003f8 <prepareTelemetry>
	  CAN_Transmit();
 80001ce:	f000 fa2b 	bl	8000628 <CAN_Transmit>

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);   // Turn LED off
 80001d2:	2201      	movs	r2, #1
 80001d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <main+0x8c>)
 80001da:	f001 ff37 	bl	800204c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);   // Turn LED off
 80001de:	bf00      	nop
 80001e0:	e7ed      	b.n	80001be <main+0x62>
 80001e2:	bf00      	nop
 80001e4:	200000ac 	.word	0x200000ac
 80001e8:	40011000 	.word	0x40011000
 80001ec:	20000084 	.word	0x20000084

080001f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b090      	sub	sp, #64	@ 0x40
 80001f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f6:	f107 0318 	add.w	r3, r7, #24
 80001fa:	2228      	movs	r2, #40	@ 0x28
 80001fc:	2100      	movs	r1, #0
 80001fe:	4618      	mov	r0, r3
 8000200:	f003 fc56 	bl	8003ab0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000204:	1d3b      	adds	r3, r7, #4
 8000206:	2200      	movs	r2, #0
 8000208:	601a      	str	r2, [r3, #0]
 800020a:	605a      	str	r2, [r3, #4]
 800020c:	609a      	str	r2, [r3, #8]
 800020e:	60da      	str	r2, [r3, #12]
 8000210:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000212:	2302      	movs	r3, #2
 8000214:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000216:	2301      	movs	r3, #1
 8000218:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800021a:	2310      	movs	r3, #16
 800021c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800021e:	2302      	movs	r3, #2
 8000220:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000222:	2300      	movs	r3, #0
 8000224:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000226:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800022a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800022c:	f107 0318 	add.w	r3, r7, #24
 8000230:	4618      	mov	r0, r3
 8000232:	f001 ff23 	bl	800207c <HAL_RCC_OscConfig>
 8000236:	4603      	mov	r3, r0
 8000238:	2b00      	cmp	r3, #0
 800023a:	d001      	beq.n	8000240 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800023c:	f000 face 	bl	80007dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000240:	230f      	movs	r3, #15
 8000242:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000244:	2302      	movs	r3, #2
 8000246:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000248:	2300      	movs	r3, #0
 800024a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800024c:	2300      	movs	r3, #0
 800024e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000250:	2300      	movs	r3, #0
 8000252:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000254:	1d3b      	adds	r3, r7, #4
 8000256:	2101      	movs	r1, #1
 8000258:	4618      	mov	r0, r3
 800025a:	f002 f991 	bl	8002580 <HAL_RCC_ClockConfig>
 800025e:	4603      	mov	r3, r0
 8000260:	2b00      	cmp	r3, #0
 8000262:	d001      	beq.n	8000268 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000264:	f000 faba 	bl	80007dc <Error_Handler>
  }
}
 8000268:	bf00      	nop
 800026a:	3740      	adds	r7, #64	@ 0x40
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}

08000270 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b08a      	sub	sp, #40	@ 0x28
 8000274:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000276:	4b23      	ldr	r3, [pc, #140]	@ (8000304 <MX_CAN_Init+0x94>)
 8000278:	4a23      	ldr	r2, [pc, #140]	@ (8000308 <MX_CAN_Init+0x98>)
 800027a:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 3;
 800027c:	4b21      	ldr	r3, [pc, #132]	@ (8000304 <MX_CAN_Init+0x94>)
 800027e:	2203      	movs	r2, #3
 8000280:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000282:	4b20      	ldr	r3, [pc, #128]	@ (8000304 <MX_CAN_Init+0x94>)
 8000284:	2200      	movs	r2, #0
 8000286:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000288:	4b1e      	ldr	r3, [pc, #120]	@ (8000304 <MX_CAN_Init+0x94>)
 800028a:	2200      	movs	r2, #0
 800028c:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_8TQ;
 800028e:	4b1d      	ldr	r3, [pc, #116]	@ (8000304 <MX_CAN_Init+0x94>)
 8000290:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000294:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000296:	4b1b      	ldr	r3, [pc, #108]	@ (8000304 <MX_CAN_Init+0x94>)
 8000298:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800029c:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800029e:	4b19      	ldr	r3, [pc, #100]	@ (8000304 <MX_CAN_Init+0x94>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80002a4:	4b17      	ldr	r3, [pc, #92]	@ (8000304 <MX_CAN_Init+0x94>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80002aa:	4b16      	ldr	r3, [pc, #88]	@ (8000304 <MX_CAN_Init+0x94>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80002b0:	4b14      	ldr	r3, [pc, #80]	@ (8000304 <MX_CAN_Init+0x94>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80002b6:	4b13      	ldr	r3, [pc, #76]	@ (8000304 <MX_CAN_Init+0x94>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80002bc:	4b11      	ldr	r3, [pc, #68]	@ (8000304 <MX_CAN_Init+0x94>)
 80002be:	2200      	movs	r2, #0
 80002c0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80002c2:	4810      	ldr	r0, [pc, #64]	@ (8000304 <MX_CAN_Init+0x94>)
 80002c4:	f000 fd32 	bl	8000d2c <HAL_CAN_Init>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 80002ce:	f000 fa85 	bl	80007dc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef filterConfig;

  filterConfig.FilterBank = 0;
 80002d2:	2300      	movs	r3, #0
 80002d4:	617b      	str	r3, [r7, #20]
  filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80002d6:	2300      	movs	r3, #0
 80002d8:	61bb      	str	r3, [r7, #24]
  filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80002da:	2301      	movs	r3, #1
 80002dc:	61fb      	str	r3, [r7, #28]
  filterConfig.FilterIdHigh = 0x100 << 5;       // Accept all IDs
 80002de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80002e2:	603b      	str	r3, [r7, #0]
  filterConfig.FilterMaskIdHigh = 0x7FF << 5;;   // Accept all IDs
 80002e4:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80002e8:	60bb      	str	r3, [r7, #8]
  filterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;  // Assign to FIFO 1
 80002ea:	2301      	movs	r3, #1
 80002ec:	613b      	str	r3, [r7, #16]
  filterConfig.FilterActivation = ENABLE;
 80002ee:	2301      	movs	r3, #1
 80002f0:	623b      	str	r3, [r7, #32]

  HAL_CAN_ConfigFilter(&hcan, &filterConfig);
 80002f2:	463b      	mov	r3, r7
 80002f4:	4619      	mov	r1, r3
 80002f6:	4803      	ldr	r0, [pc, #12]	@ (8000304 <MX_CAN_Init+0x94>)
 80002f8:	f000 fe13 	bl	8000f22 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 80002fc:	bf00      	nop
 80002fe:	3728      	adds	r7, #40	@ 0x28
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}
 8000304:	200000ac 	.word	0x200000ac
 8000308:	40006400 	.word	0x40006400

0800030c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000310:	4b11      	ldr	r3, [pc, #68]	@ (8000358 <MX_USART1_UART_Init+0x4c>)
 8000312:	4a12      	ldr	r2, [pc, #72]	@ (800035c <MX_USART1_UART_Init+0x50>)
 8000314:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000316:	4b10      	ldr	r3, [pc, #64]	@ (8000358 <MX_USART1_UART_Init+0x4c>)
 8000318:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800031c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800031e:	4b0e      	ldr	r3, [pc, #56]	@ (8000358 <MX_USART1_UART_Init+0x4c>)
 8000320:	2200      	movs	r2, #0
 8000322:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000324:	4b0c      	ldr	r3, [pc, #48]	@ (8000358 <MX_USART1_UART_Init+0x4c>)
 8000326:	2200      	movs	r2, #0
 8000328:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800032a:	4b0b      	ldr	r3, [pc, #44]	@ (8000358 <MX_USART1_UART_Init+0x4c>)
 800032c:	2200      	movs	r2, #0
 800032e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000330:	4b09      	ldr	r3, [pc, #36]	@ (8000358 <MX_USART1_UART_Init+0x4c>)
 8000332:	220c      	movs	r2, #12
 8000334:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000336:	4b08      	ldr	r3, [pc, #32]	@ (8000358 <MX_USART1_UART_Init+0x4c>)
 8000338:	2200      	movs	r2, #0
 800033a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800033c:	4b06      	ldr	r3, [pc, #24]	@ (8000358 <MX_USART1_UART_Init+0x4c>)
 800033e:	2200      	movs	r2, #0
 8000340:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000342:	4805      	ldr	r0, [pc, #20]	@ (8000358 <MX_USART1_UART_Init+0x4c>)
 8000344:	f002 faaa 	bl	800289c <HAL_UART_Init>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800034e:	f000 fa45 	bl	80007dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	200000d4 	.word	0x200000d4
 800035c:	40013800 	.word	0x40013800

08000360 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b088      	sub	sp, #32
 8000364:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000366:	f107 0310 	add.w	r3, r7, #16
 800036a:	2200      	movs	r2, #0
 800036c:	601a      	str	r2, [r3, #0]
 800036e:	605a      	str	r2, [r3, #4]
 8000370:	609a      	str	r2, [r3, #8]
 8000372:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000374:	4b1e      	ldr	r3, [pc, #120]	@ (80003f0 <MX_GPIO_Init+0x90>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	4a1d      	ldr	r2, [pc, #116]	@ (80003f0 <MX_GPIO_Init+0x90>)
 800037a:	f043 0310 	orr.w	r3, r3, #16
 800037e:	6193      	str	r3, [r2, #24]
 8000380:	4b1b      	ldr	r3, [pc, #108]	@ (80003f0 <MX_GPIO_Init+0x90>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	f003 0310 	and.w	r3, r3, #16
 8000388:	60fb      	str	r3, [r7, #12]
 800038a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800038c:	4b18      	ldr	r3, [pc, #96]	@ (80003f0 <MX_GPIO_Init+0x90>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	4a17      	ldr	r2, [pc, #92]	@ (80003f0 <MX_GPIO_Init+0x90>)
 8000392:	f043 0320 	orr.w	r3, r3, #32
 8000396:	6193      	str	r3, [r2, #24]
 8000398:	4b15      	ldr	r3, [pc, #84]	@ (80003f0 <MX_GPIO_Init+0x90>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	f003 0320 	and.w	r3, r3, #32
 80003a0:	60bb      	str	r3, [r7, #8]
 80003a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a4:	4b12      	ldr	r3, [pc, #72]	@ (80003f0 <MX_GPIO_Init+0x90>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	4a11      	ldr	r2, [pc, #68]	@ (80003f0 <MX_GPIO_Init+0x90>)
 80003aa:	f043 0304 	orr.w	r3, r3, #4
 80003ae:	6193      	str	r3, [r2, #24]
 80003b0:	4b0f      	ldr	r3, [pc, #60]	@ (80003f0 <MX_GPIO_Init+0x90>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	f003 0304 	and.w	r3, r3, #4
 80003b8:	607b      	str	r3, [r7, #4]
 80003ba:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80003bc:	2200      	movs	r2, #0
 80003be:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003c2:	480c      	ldr	r0, [pc, #48]	@ (80003f4 <MX_GPIO_Init+0x94>)
 80003c4:	f001 fe42 	bl	800204c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80003c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ce:	2301      	movs	r3, #1
 80003d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d2:	2300      	movs	r3, #0
 80003d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d6:	2302      	movs	r3, #2
 80003d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003da:	f107 0310 	add.w	r3, r7, #16
 80003de:	4619      	mov	r1, r3
 80003e0:	4804      	ldr	r0, [pc, #16]	@ (80003f4 <MX_GPIO_Init+0x94>)
 80003e2:	f001 fcaf 	bl	8001d44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003e6:	bf00      	nop
 80003e8:	3720      	adds	r7, #32
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	40021000 	.word	0x40021000
 80003f4:	40011000 	.word	0x40011000

080003f8 <prepareTelemetry>:
}

/*
 * NEXTION UART FUNCTIONS
 */
void prepareTelemetry() {
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b088      	sub	sp, #32
 80003fc:	af00      	add	r7, sp, #0
//	int mappedRpm = map_value(telemetry_data.tRpm, 0, telemetry_data.tMaxRpm, 0, 100);
	char *mappedRpm = int_to_string(telemetry_data.tRpm);
 80003fe:	4b1f      	ldr	r3, [pc, #124]	@ (800047c <prepareTelemetry+0x84>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	4618      	mov	r0, r3
 8000404:	f000 f8ea 	bl	80005dc <int_to_string>
 8000408:	61f8      	str	r0, [r7, #28]
	char *mappedGear = map_gear(telemetry_data.tGear);
 800040a:	4b1c      	ldr	r3, [pc, #112]	@ (800047c <prepareTelemetry+0x84>)
 800040c:	685b      	ldr	r3, [r3, #4]
 800040e:	4618      	mov	r0, r3
 8000410:	f000 f876 	bl	8000500 <map_gear>
 8000414:	61b8      	str	r0, [r7, #24]
	char *mappedSpeed = int_to_string(telemetry_data.tSpeedKmh);
 8000416:	4b19      	ldr	r3, [pc, #100]	@ (800047c <prepareTelemetry+0x84>)
 8000418:	689b      	ldr	r3, [r3, #8]
 800041a:	4618      	mov	r0, r3
 800041c:	f000 f8de 	bl	80005dc <int_to_string>
 8000420:	6178      	str	r0, [r7, #20]
	char *mappedHasDrs = int_to_string(telemetry_data.tHasDRS);
 8000422:	4b16      	ldr	r3, [pc, #88]	@ (800047c <prepareTelemetry+0x84>)
 8000424:	68db      	ldr	r3, [r3, #12]
 8000426:	4618      	mov	r0, r3
 8000428:	f000 f8d8 	bl	80005dc <int_to_string>
 800042c:	6138      	str	r0, [r7, #16]
	char *mappedPitLim = int_to_string(telemetry_data.tPitLim);
 800042e:	4b13      	ldr	r3, [pc, #76]	@ (800047c <prepareTelemetry+0x84>)
 8000430:	695b      	ldr	r3, [r3, #20]
 8000432:	4618      	mov	r0, r3
 8000434:	f000 f8d2 	bl	80005dc <int_to_string>
 8000438:	60f8      	str	r0, [r7, #12]
	char *mappedFuel = int_to_string(telemetry_data.tFuel);
 800043a:	4b10      	ldr	r3, [pc, #64]	@ (800047c <prepareTelemetry+0x84>)
 800043c:	699b      	ldr	r3, [r3, #24]
 800043e:	4618      	mov	r0, r3
 8000440:	f000 f8cc 	bl	80005dc <int_to_string>
 8000444:	60b8      	str	r0, [r7, #8]
	char *mappedBrakeBias = int_to_string(telemetry_data.tBrakeBias);
 8000446:	4b0d      	ldr	r3, [pc, #52]	@ (800047c <prepareTelemetry+0x84>)
 8000448:	69db      	ldr	r3, [r3, #28]
 800044a:	4618      	mov	r0, r3
 800044c:	f000 f8c6 	bl	80005dc <int_to_string>
 8000450:	6078      	str	r0, [r7, #4]

//	send_int_to_nextion("rpmbar", mappedRpm);
	send__char_to_nextion("rpm", mappedRpm);
 8000452:	69f9      	ldr	r1, [r7, #28]
 8000454:	480a      	ldr	r0, [pc, #40]	@ (8000480 <prepareTelemetry+0x88>)
 8000456:	f000 f81b 	bl	8000490 <send__char_to_nextion>
	send__char_to_nextion("gear", mappedGear);
 800045a:	69b9      	ldr	r1, [r7, #24]
 800045c:	4809      	ldr	r0, [pc, #36]	@ (8000484 <prepareTelemetry+0x8c>)
 800045e:	f000 f817 	bl	8000490 <send__char_to_nextion>
	send__char_to_nextion("speed", mappedSpeed);
 8000462:	6979      	ldr	r1, [r7, #20]
 8000464:	4808      	ldr	r0, [pc, #32]	@ (8000488 <prepareTelemetry+0x90>)
 8000466:	f000 f813 	bl	8000490 <send__char_to_nextion>
	//send__char_to_nextion("mappedHasDrs", mappedHasDrs);
	//send_to_nextion("pitlim", telemetry_data.tPitLim);
	send__char_to_nextion("fuel", mappedFuel);
 800046a:	68b9      	ldr	r1, [r7, #8]
 800046c:	4807      	ldr	r0, [pc, #28]	@ (800048c <prepareTelemetry+0x94>)
 800046e:	f000 f80f 	bl	8000490 <send__char_to_nextion>
	//send_to_nextion("gear", telemetry_data.tBrakeBias);

}
 8000472:	bf00      	nop
 8000474:	3720      	adds	r7, #32
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	20000084 	.word	0x20000084
 8000480:	080047f4 	.word	0x080047f4
 8000484:	080047f8 	.word	0x080047f8
 8000488:	08004800 	.word	0x08004800
 800048c:	08004808 	.word	0x08004808

08000490 <send__char_to_nextion>:

	uint8_t termination_bytes[3] = {0xFF, 0xFF, 0xFF};
	HAL_UART_Transmit(&huart1, termination_bytes, sizeof(termination_bytes), HAL_MAX_DELAY);
}

void send__char_to_nextion(const char *var_name, char *value) {
 8000490:	b580      	push	{r7, lr}
 8000492:	b08e      	sub	sp, #56	@ 0x38
 8000494:	af02      	add	r7, sp, #8
 8000496:	6078      	str	r0, [r7, #4]
 8000498:	6039      	str	r1, [r7, #0]
	char command[32];
	snprintf(command, sizeof(command), "%s.txt=\"%s\"", var_name, value);
 800049a:	f107 0010 	add.w	r0, r7, #16
 800049e:	683b      	ldr	r3, [r7, #0]
 80004a0:	9300      	str	r3, [sp, #0]
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	4a13      	ldr	r2, [pc, #76]	@ (80004f4 <send__char_to_nextion+0x64>)
 80004a6:	2120      	movs	r1, #32
 80004a8:	f003 f9f6 	bl	8003898 <sniprintf>

	HAL_UART_Transmit(&huart1, (uint8_t *)command, strlen(command), HAL_MAX_DELAY);
 80004ac:	f107 0310 	add.w	r3, r7, #16
 80004b0:	4618      	mov	r0, r3
 80004b2:	f7ff fe4b 	bl	800014c <strlen>
 80004b6:	4603      	mov	r3, r0
 80004b8:	b29a      	uxth	r2, r3
 80004ba:	f107 0110 	add.w	r1, r7, #16
 80004be:	f04f 33ff 	mov.w	r3, #4294967295
 80004c2:	480d      	ldr	r0, [pc, #52]	@ (80004f8 <send__char_to_nextion+0x68>)
 80004c4:	f002 fa3a 	bl	800293c <HAL_UART_Transmit>

	uint8_t termination_bytes[3] = {0xFF, 0xFF, 0xFF};
 80004c8:	4a0c      	ldr	r2, [pc, #48]	@ (80004fc <send__char_to_nextion+0x6c>)
 80004ca:	f107 030c 	add.w	r3, r7, #12
 80004ce:	6812      	ldr	r2, [r2, #0]
 80004d0:	4611      	mov	r1, r2
 80004d2:	8019      	strh	r1, [r3, #0]
 80004d4:	3302      	adds	r3, #2
 80004d6:	0c12      	lsrs	r2, r2, #16
 80004d8:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, termination_bytes, sizeof(termination_bytes), HAL_MAX_DELAY);
 80004da:	f107 010c 	add.w	r1, r7, #12
 80004de:	f04f 33ff 	mov.w	r3, #4294967295
 80004e2:	2203      	movs	r2, #3
 80004e4:	4804      	ldr	r0, [pc, #16]	@ (80004f8 <send__char_to_nextion+0x68>)
 80004e6:	f002 fa29 	bl	800293c <HAL_UART_Transmit>
}
 80004ea:	bf00      	nop
 80004ec:	3730      	adds	r7, #48	@ 0x30
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	08004820 	.word	0x08004820
 80004f8:	200000d4 	.word	0x200000d4
 80004fc:	0800481c 	.word	0x0800481c

08000500 <map_gear>:
    if (input > in_max) input = in_max;

    return (input - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

const char* map_gear(int value)  {
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
    if (value < 0 || value > 13) {
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	2b00      	cmp	r3, #0
 800050c:	db02      	blt.n	8000514 <map_gear+0x14>
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	2b0d      	cmp	r3, #13
 8000512:	dd01      	ble.n	8000518 <map_gear+0x18>
        return "X";
 8000514:	4b22      	ldr	r3, [pc, #136]	@ (80005a0 <map_gear+0xa0>)
 8000516:	e03e      	b.n	8000596 <map_gear+0x96>
    }

    switch (value) {
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	2b0d      	cmp	r3, #13
 800051c:	d83a      	bhi.n	8000594 <map_gear+0x94>
 800051e:	a201      	add	r2, pc, #4	@ (adr r2, 8000524 <map_gear+0x24>)
 8000520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000524:	0800055d 	.word	0x0800055d
 8000528:	08000561 	.word	0x08000561
 800052c:	08000565 	.word	0x08000565
 8000530:	08000569 	.word	0x08000569
 8000534:	0800056d 	.word	0x0800056d
 8000538:	08000571 	.word	0x08000571
 800053c:	08000575 	.word	0x08000575
 8000540:	08000579 	.word	0x08000579
 8000544:	0800057d 	.word	0x0800057d
 8000548:	08000581 	.word	0x08000581
 800054c:	08000585 	.word	0x08000585
 8000550:	08000589 	.word	0x08000589
 8000554:	0800058d 	.word	0x0800058d
 8000558:	08000591 	.word	0x08000591
        case 0: return "R";
 800055c:	4b11      	ldr	r3, [pc, #68]	@ (80005a4 <map_gear+0xa4>)
 800055e:	e01a      	b.n	8000596 <map_gear+0x96>
        case 1: return "N";
 8000560:	4b11      	ldr	r3, [pc, #68]	@ (80005a8 <map_gear+0xa8>)
 8000562:	e018      	b.n	8000596 <map_gear+0x96>
        case 2: return "1";
 8000564:	4b11      	ldr	r3, [pc, #68]	@ (80005ac <map_gear+0xac>)
 8000566:	e016      	b.n	8000596 <map_gear+0x96>
        case 3: return "2";
 8000568:	4b11      	ldr	r3, [pc, #68]	@ (80005b0 <map_gear+0xb0>)
 800056a:	e014      	b.n	8000596 <map_gear+0x96>
        case 4: return "3";
 800056c:	4b11      	ldr	r3, [pc, #68]	@ (80005b4 <map_gear+0xb4>)
 800056e:	e012      	b.n	8000596 <map_gear+0x96>
        case 5: return "4";
 8000570:	4b11      	ldr	r3, [pc, #68]	@ (80005b8 <map_gear+0xb8>)
 8000572:	e010      	b.n	8000596 <map_gear+0x96>
        case 6: return "5";
 8000574:	4b11      	ldr	r3, [pc, #68]	@ (80005bc <map_gear+0xbc>)
 8000576:	e00e      	b.n	8000596 <map_gear+0x96>
        case 7: return "6";
 8000578:	4b11      	ldr	r3, [pc, #68]	@ (80005c0 <map_gear+0xc0>)
 800057a:	e00c      	b.n	8000596 <map_gear+0x96>
        case 8: return "7";
 800057c:	4b11      	ldr	r3, [pc, #68]	@ (80005c4 <map_gear+0xc4>)
 800057e:	e00a      	b.n	8000596 <map_gear+0x96>
        case 9: return "8";
 8000580:	4b11      	ldr	r3, [pc, #68]	@ (80005c8 <map_gear+0xc8>)
 8000582:	e008      	b.n	8000596 <map_gear+0x96>
        case 10: return "9";
 8000584:	4b11      	ldr	r3, [pc, #68]	@ (80005cc <map_gear+0xcc>)
 8000586:	e006      	b.n	8000596 <map_gear+0x96>
        case 11: return "10";
 8000588:	4b11      	ldr	r3, [pc, #68]	@ (80005d0 <map_gear+0xd0>)
 800058a:	e004      	b.n	8000596 <map_gear+0x96>
        case 12: return "11";
 800058c:	4b11      	ldr	r3, [pc, #68]	@ (80005d4 <map_gear+0xd4>)
 800058e:	e002      	b.n	8000596 <map_gear+0x96>
        case 13: return "12";
 8000590:	4b11      	ldr	r3, [pc, #68]	@ (80005d8 <map_gear+0xd8>)
 8000592:	e000      	b.n	8000596 <map_gear+0x96>

        default:
        	return "X";
 8000594:	4b02      	ldr	r3, [pc, #8]	@ (80005a0 <map_gear+0xa0>)
    }
}
 8000596:	4618      	mov	r0, r3
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr
 80005a0:	0800482c 	.word	0x0800482c
 80005a4:	08004830 	.word	0x08004830
 80005a8:	08004834 	.word	0x08004834
 80005ac:	08004838 	.word	0x08004838
 80005b0:	0800483c 	.word	0x0800483c
 80005b4:	08004840 	.word	0x08004840
 80005b8:	08004844 	.word	0x08004844
 80005bc:	08004848 	.word	0x08004848
 80005c0:	0800484c 	.word	0x0800484c
 80005c4:	08004850 	.word	0x08004850
 80005c8:	08004854 	.word	0x08004854
 80005cc:	08004858 	.word	0x08004858
 80005d0:	0800485c 	.word	0x0800485c
 80005d4:	08004860 	.word	0x08004860
 80005d8:	08004864 	.word	0x08004864

080005dc <int_to_string>:

char* int_to_string(int value) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
    int buffer_size = snprintf(NULL, 0, "%d", value) + 1;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	4a0f      	ldr	r2, [pc, #60]	@ (8000624 <int_to_string+0x48>)
 80005e8:	2100      	movs	r1, #0
 80005ea:	2000      	movs	r0, #0
 80005ec:	f003 f954 	bl	8003898 <sniprintf>
 80005f0:	4603      	mov	r3, r0
 80005f2:	3301      	adds	r3, #1
 80005f4:	60fb      	str	r3, [r7, #12]

    char *string = (char*)malloc(buffer_size);
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	4618      	mov	r0, r3
 80005fa:	f002 ff65 	bl	80034c8 <malloc>
 80005fe:	4603      	mov	r3, r0
 8000600:	60bb      	str	r3, [r7, #8]

    if (string == NULL) {
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d101      	bne.n	800060c <int_to_string+0x30>
        return NULL;
 8000608:	2300      	movs	r3, #0
 800060a:	e006      	b.n	800061a <int_to_string+0x3e>
    }

    snprintf(string, buffer_size, "%d", value);
 800060c:	68f9      	ldr	r1, [r7, #12]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	4a04      	ldr	r2, [pc, #16]	@ (8000624 <int_to_string+0x48>)
 8000612:	68b8      	ldr	r0, [r7, #8]
 8000614:	f003 f940 	bl	8003898 <sniprintf>

    return string;
 8000618:	68bb      	ldr	r3, [r7, #8]
}
 800061a:	4618      	mov	r0, r3
 800061c:	3710      	adds	r7, #16
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	08004868 	.word	0x08004868

08000628 <CAN_Transmit>:

/*
 * CAN BUS FUNCTIONS
 */
void CAN_Transmit() {
 8000628:	b580      	push	{r7, lr}
 800062a:	b094      	sub	sp, #80	@ 0x50
 800062c:	af00      	add	r7, sp, #0
	uint32_t currentTime = HAL_GetTick();
 800062e:	f000 fb4f 	bl	8000cd0 <HAL_GetTick>
 8000632:	64b8      	str	r0, [r7, #72]	@ 0x48

	if(currentTime - lastSendTime >= 10) {
 8000634:	4b3c      	ldr	r3, [pc, #240]	@ (8000728 <CAN_Transmit+0x100>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800063a:	1ad3      	subs	r3, r2, r3
 800063c:	2b09      	cmp	r3, #9
 800063e:	d96e      	bls.n	800071e <CAN_Transmit+0xf6>
		CAN_TxHeaderTypeDef TxHeader;
		uint32_t TxMailbox;

		// Create a telemetry_packet instance and initialize its fields
		user_input_data_t dataToSend;
		dataToSend.buttons = 0x0F0F;         // Example: Buttons pressed
 8000640:	f640 730f 	movw	r3, #3855	@ 0xf0f
 8000644:	81bb      	strh	r3, [r7, #12]
		dataToSend.hall_analog_1 = 100;      // Example: Hall sensor 1 value
 8000646:	2364      	movs	r3, #100	@ 0x64
 8000648:	73bb      	strb	r3, [r7, #14]
		dataToSend.hall_analog_2 = 200;      // Example: Hall sensor 2 value
 800064a:	23c8      	movs	r3, #200	@ 0xc8
 800064c:	73fb      	strb	r3, [r7, #15]
		dataToSend.encoder_1 = 1000;         // Example: Encoder 1 value
 800064e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000652:	823b      	strh	r3, [r7, #16]
		dataToSend.encoder_2 = -2000;        // Example: Encoder 2 value
 8000654:	f64f 0330 	movw	r3, #63536	@ 0xf830
 8000658:	827b      	strh	r3, [r7, #18]
		dataToSend.encoder_3 = 5000;         // Example: Encoder 3 value
 800065a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800065e:	82bb      	strh	r3, [r7, #20]

		uint8_t* rawData = (uint8_t*)&dataToSend;
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	647b      	str	r3, [r7, #68]	@ 0x44

		// Initialize CAN Header
		TxHeader.StdId = 0x101;           // CAN ID for the message
 8000666:	f240 1301 	movw	r3, #257	@ 0x101
 800066a:	61fb      	str	r3, [r7, #28]
		TxHeader.ExtId = 0;
 800066c:	2300      	movs	r3, #0
 800066e:	623b      	str	r3, [r7, #32]
		TxHeader.IDE = CAN_ID_STD;        // Use Standard ID
 8000670:	2300      	movs	r3, #0
 8000672:	627b      	str	r3, [r7, #36]	@ 0x24
		TxHeader.RTR = CAN_RTR_DATA;      // Data frame
 8000674:	2300      	movs	r3, #0
 8000676:	62bb      	str	r3, [r7, #40]	@ 0x28
		TxHeader.DLC = 8;                 // Maximum data length for each CAN frame
 8000678:	2308      	movs	r3, #8
 800067a:	62fb      	str	r3, [r7, #44]	@ 0x2c

		uint8_t frameData[8];             // Temporary buffer for each CAN frame

		// Calculate the size of the telemetry_packet struct
		int totalSize = sizeof(user_input_data_t);
 800067c:	230a      	movs	r3, #10
 800067e:	643b      	str	r3, [r7, #64]	@ 0x40

		// Split the telemetry_packet into CAN frames
		for (int i = 0; i < totalSize; i += 8) {
 8000680:	2300      	movs	r3, #0
 8000682:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000684:	e047      	b.n	8000716 <CAN_Transmit+0xee>
			// Calculate the size of the current chunk (for the last frame)
			int chunkSize = (totalSize - i >= 8) ? 8 : (totalSize - i);
 8000686:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000688:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800068a:	1ad3      	subs	r3, r2, r3
 800068c:	2b08      	cmp	r3, #8
 800068e:	bfa8      	it	ge
 8000690:	2308      	movge	r3, #8
 8000692:	63fb      	str	r3, [r7, #60]	@ 0x3c

			// Copy the next chunk of data into the frame buffer
			memcpy(frameData, &rawData[i], chunkSize);
 8000694:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000696:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000698:	18d1      	adds	r1, r2, r3
 800069a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	4618      	mov	r0, r3
 80006a0:	f003 fa91 	bl	8003bc6 <memcpy>

			// Adjust DLC for the last frame
			TxHeader.DLC = chunkSize;
 80006a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80006a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

			HAL_StatusTypeDef status = HAL_CAN_AddTxMessage(&hcan, &TxHeader, frameData, &TxMailbox);
 80006a8:	f107 0318 	add.w	r3, r7, #24
 80006ac:	1d3a      	adds	r2, r7, #4
 80006ae:	f107 011c 	add.w	r1, r7, #28
 80006b2:	481e      	ldr	r0, [pc, #120]	@ (800072c <CAN_Transmit+0x104>)
 80006b4:	f000 fd42 	bl	800113c <HAL_CAN_AddTxMessage>
 80006b8:	4603      	mov	r3, r0
 80006ba:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
			if (status != HAL_OK) {
 80006be:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d01e      	beq.n	8000704 <CAN_Transmit+0xdc>
				// Inspect the error
				if (status == HAL_ERROR) {
 80006c6:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d103      	bne.n	80006d6 <CAN_Transmit+0xae>
					printf("HAL_CAN_AddTxMessage failed: HAL_ERROR\n");
 80006ce:	4818      	ldr	r0, [pc, #96]	@ (8000730 <CAN_Transmit+0x108>)
 80006d0:	f003 f8da 	bl	8003888 <puts>
 80006d4:	e00e      	b.n	80006f4 <CAN_Transmit+0xcc>
				} else if (status == HAL_BUSY) {
 80006d6:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80006da:	2b02      	cmp	r3, #2
 80006dc:	d103      	bne.n	80006e6 <CAN_Transmit+0xbe>
					printf("HAL_CAN_AddTxMessage failed: HAL_BUSY\n");
 80006de:	4815      	ldr	r0, [pc, #84]	@ (8000734 <CAN_Transmit+0x10c>)
 80006e0:	f003 f8d2 	bl	8003888 <puts>
 80006e4:	e006      	b.n	80006f4 <CAN_Transmit+0xcc>
				} else if (status == HAL_TIMEOUT) {
 80006e6:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80006ea:	2b03      	cmp	r3, #3
 80006ec:	d102      	bne.n	80006f4 <CAN_Transmit+0xcc>
					printf("HAL_CAN_AddTxMessage failed: HAL_TIMEOUT\n");
 80006ee:	4812      	ldr	r0, [pc, #72]	@ (8000738 <CAN_Transmit+0x110>)
 80006f0:	f003 f8ca 	bl	8003888 <puts>
				}

				// Optionally log the state of CAN error counters
				uint32_t error = HAL_CAN_GetError(&hcan);
 80006f4:	480d      	ldr	r0, [pc, #52]	@ (800072c <CAN_Transmit+0x104>)
 80006f6:	f001 f959 	bl	80019ac <HAL_CAN_GetError>
 80006fa:	6378      	str	r0, [r7, #52]	@ 0x34
				printf("CAN Error Code: 0x%08lx\n", error); // Only if you decide to stop execution
 80006fc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80006fe:	480f      	ldr	r0, [pc, #60]	@ (800073c <CAN_Transmit+0x114>)
 8000700:	f003 f85a 	bl	80037b8 <iprintf>
			}
			lastSendTime = currentTime;  // Update last transmission time
 8000704:	4a08      	ldr	r2, [pc, #32]	@ (8000728 <CAN_Transmit+0x100>)
 8000706:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000708:	6013      	str	r3, [r2, #0]
			HAL_Delay(1);
 800070a:	2001      	movs	r0, #1
 800070c:	f000 faea 	bl	8000ce4 <HAL_Delay>
		for (int i = 0; i < totalSize; i += 8) {
 8000710:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000712:	3308      	adds	r3, #8
 8000714:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000716:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000718:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800071a:	429a      	cmp	r2, r3
 800071c:	dbb3      	blt.n	8000686 <CAN_Transmit+0x5e>
		}
	}
}
 800071e:	bf00      	nop
 8000720:	3750      	adds	r7, #80	@ 0x50
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	2000011c 	.word	0x2000011c
 800072c:	200000ac 	.word	0x200000ac
 8000730:	0800486c 	.word	0x0800486c
 8000734:	08004894 	.word	0x08004894
 8000738:	080048bc 	.word	0x080048bc
 800073c:	080048e8 	.word	0x080048e8

08000740 <HAL_CAN_RxFifo1MsgPendingCallback>:

// CAN receive interrupt callback
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000740:	b5b0      	push	{r4, r5, r7, lr}
 8000742:	b08c      	sub	sp, #48	@ 0x30
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rxHeader;
    uint8_t rxData[8]; // Max CAN frame size is 8 bytes

    // Receive the message
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &rxHeader, rxData) == HAL_OK) {
 8000748:	f107 0308 	add.w	r3, r7, #8
 800074c:	f107 0210 	add.w	r2, r7, #16
 8000750:	2101      	movs	r1, #1
 8000752:	6878      	ldr	r0, [r7, #4]
 8000754:	f000 fdc1 	bl	80012da <HAL_CAN_GetRxMessage>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d134      	bne.n	80007c8 <HAL_CAN_RxFifo1MsgPendingCallback+0x88>
    	 // Check if the message ID matches 0x100
		if (rxHeader.StdId == 0x100) {
 800075e:	693b      	ldr	r3, [r7, #16]
 8000760:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000764:	d130      	bne.n	80007c8 <HAL_CAN_RxFifo1MsgPendingCallback+0x88>
			static uint8_t buffer[sizeof(telemetry_packet)];
			static uint8_t offset = 0;

			// Copy received data into buffer
			uint8_t bytesToCopy = (rxHeader.DLC < sizeof(telemetry_packet) - offset) ? rxHeader.DLC : sizeof(telemetry_packet) - offset;
 8000766:	4b1a      	ldr	r3, [pc, #104]	@ (80007d0 <HAL_CAN_RxFifo1MsgPendingCallback+0x90>)
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	f1c3 0228 	rsb	r2, r3, #40	@ 0x28
 800076e:	6a3b      	ldr	r3, [r7, #32]
 8000770:	4293      	cmp	r3, r2
 8000772:	bf28      	it	cs
 8000774:	4613      	movcs	r3, r2
 8000776:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			memcpy(&buffer[offset], rxData, bytesToCopy);
 800077a:	4b15      	ldr	r3, [pc, #84]	@ (80007d0 <HAL_CAN_RxFifo1MsgPendingCallback+0x90>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	461a      	mov	r2, r3
 8000780:	4b14      	ldr	r3, [pc, #80]	@ (80007d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x94>)
 8000782:	4413      	add	r3, r2
 8000784:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000788:	f107 0108 	add.w	r1, r7, #8
 800078c:	4618      	mov	r0, r3
 800078e:	f003 fa1a 	bl	8003bc6 <memcpy>
			offset += bytesToCopy;
 8000792:	4b0f      	ldr	r3, [pc, #60]	@ (80007d0 <HAL_CAN_RxFifo1MsgPendingCallback+0x90>)
 8000794:	781a      	ldrb	r2, [r3, #0]
 8000796:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800079a:	4413      	add	r3, r2
 800079c:	b2da      	uxtb	r2, r3
 800079e:	4b0c      	ldr	r3, [pc, #48]	@ (80007d0 <HAL_CAN_RxFifo1MsgPendingCallback+0x90>)
 80007a0:	701a      	strb	r2, [r3, #0]

			// Check if the entire packet has been received
			if (offset >= sizeof(telemetry_packet)) {
 80007a2:	4b0b      	ldr	r3, [pc, #44]	@ (80007d0 <HAL_CAN_RxFifo1MsgPendingCallback+0x90>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	2b27      	cmp	r3, #39	@ 0x27
 80007a8:	d90e      	bls.n	80007c8 <HAL_CAN_RxFifo1MsgPendingCallback+0x88>
				// Copy buffer into the telemetry_packet struct
				memcpy(&telemetry_data, buffer, sizeof(telemetry_packet));
 80007aa:	4a0b      	ldr	r2, [pc, #44]	@ (80007d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x98>)
 80007ac:	4b09      	ldr	r3, [pc, #36]	@ (80007d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x94>)
 80007ae:	4614      	mov	r4, r2
 80007b0:	461d      	mov	r5, r3
 80007b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007ba:	e895 0003 	ldmia.w	r5, {r0, r1}
 80007be:	e884 0003 	stmia.w	r4, {r0, r1}
				offset = 0; // Reset offset for the next packet
 80007c2:	4b03      	ldr	r3, [pc, #12]	@ (80007d0 <HAL_CAN_RxFifo1MsgPendingCallback+0x90>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	701a      	strb	r2, [r3, #0]
			}
		}
    }
}
 80007c8:	bf00      	nop
 80007ca:	3730      	adds	r7, #48	@ 0x30
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bdb0      	pop	{r4, r5, r7, pc}
 80007d0:	20000120 	.word	0x20000120
 80007d4:	20000124 	.word	0x20000124
 80007d8:	20000084 	.word	0x20000084

080007dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e0:	b672      	cpsid	i
}
 80007e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e4:	bf00      	nop
 80007e6:	e7fd      	b.n	80007e4 <Error_Handler+0x8>

080007e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b085      	sub	sp, #20
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007ee:	4b15      	ldr	r3, [pc, #84]	@ (8000844 <HAL_MspInit+0x5c>)
 80007f0:	699b      	ldr	r3, [r3, #24]
 80007f2:	4a14      	ldr	r2, [pc, #80]	@ (8000844 <HAL_MspInit+0x5c>)
 80007f4:	f043 0301 	orr.w	r3, r3, #1
 80007f8:	6193      	str	r3, [r2, #24]
 80007fa:	4b12      	ldr	r3, [pc, #72]	@ (8000844 <HAL_MspInit+0x5c>)
 80007fc:	699b      	ldr	r3, [r3, #24]
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000806:	4b0f      	ldr	r3, [pc, #60]	@ (8000844 <HAL_MspInit+0x5c>)
 8000808:	69db      	ldr	r3, [r3, #28]
 800080a:	4a0e      	ldr	r2, [pc, #56]	@ (8000844 <HAL_MspInit+0x5c>)
 800080c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000810:	61d3      	str	r3, [r2, #28]
 8000812:	4b0c      	ldr	r3, [pc, #48]	@ (8000844 <HAL_MspInit+0x5c>)
 8000814:	69db      	ldr	r3, [r3, #28]
 8000816:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800081e:	4b0a      	ldr	r3, [pc, #40]	@ (8000848 <HAL_MspInit+0x60>)
 8000820:	685b      	ldr	r3, [r3, #4]
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	4a04      	ldr	r2, [pc, #16]	@ (8000848 <HAL_MspInit+0x60>)
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800083a:	bf00      	nop
 800083c:	3714      	adds	r7, #20
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr
 8000844:	40021000 	.word	0x40021000
 8000848:	40010000 	.word	0x40010000

0800084c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b088      	sub	sp, #32
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000854:	f107 0310 	add.w	r3, r7, #16
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4a2c      	ldr	r2, [pc, #176]	@ (8000918 <HAL_CAN_MspInit+0xcc>)
 8000868:	4293      	cmp	r3, r2
 800086a:	d151      	bne.n	8000910 <HAL_CAN_MspInit+0xc4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800086c:	4b2b      	ldr	r3, [pc, #172]	@ (800091c <HAL_CAN_MspInit+0xd0>)
 800086e:	69db      	ldr	r3, [r3, #28]
 8000870:	4a2a      	ldr	r2, [pc, #168]	@ (800091c <HAL_CAN_MspInit+0xd0>)
 8000872:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000876:	61d3      	str	r3, [r2, #28]
 8000878:	4b28      	ldr	r3, [pc, #160]	@ (800091c <HAL_CAN_MspInit+0xd0>)
 800087a:	69db      	ldr	r3, [r3, #28]
 800087c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000884:	4b25      	ldr	r3, [pc, #148]	@ (800091c <HAL_CAN_MspInit+0xd0>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	4a24      	ldr	r2, [pc, #144]	@ (800091c <HAL_CAN_MspInit+0xd0>)
 800088a:	f043 0304 	orr.w	r3, r3, #4
 800088e:	6193      	str	r3, [r2, #24]
 8000890:	4b22      	ldr	r3, [pc, #136]	@ (800091c <HAL_CAN_MspInit+0xd0>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	f003 0304 	and.w	r3, r3, #4
 8000898:	60bb      	str	r3, [r7, #8]
 800089a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800089c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80008a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a2:	2300      	movs	r3, #0
 80008a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008a6:	2301      	movs	r3, #1
 80008a8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008aa:	f107 0310 	add.w	r3, r7, #16
 80008ae:	4619      	mov	r1, r3
 80008b0:	481b      	ldr	r0, [pc, #108]	@ (8000920 <HAL_CAN_MspInit+0xd4>)
 80008b2:	f001 fa47 	bl	8001d44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80008b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008bc:	2302      	movs	r3, #2
 80008be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008c0:	2303      	movs	r3, #3
 80008c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c4:	f107 0310 	add.w	r3, r7, #16
 80008c8:	4619      	mov	r1, r3
 80008ca:	4815      	ldr	r0, [pc, #84]	@ (8000920 <HAL_CAN_MspInit+0xd4>)
 80008cc:	f001 fa3a 	bl	8001d44 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 80008d0:	2200      	movs	r2, #0
 80008d2:	2100      	movs	r1, #0
 80008d4:	2013      	movs	r0, #19
 80008d6:	f001 f94c 	bl	8001b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 80008da:	2013      	movs	r0, #19
 80008dc:	f001 f965 	bl	8001baa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80008e0:	2200      	movs	r2, #0
 80008e2:	2100      	movs	r1, #0
 80008e4:	2014      	movs	r0, #20
 80008e6:	f001 f944 	bl	8001b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80008ea:	2014      	movs	r0, #20
 80008ec:	f001 f95d 	bl	8001baa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80008f0:	2200      	movs	r2, #0
 80008f2:	2100      	movs	r1, #0
 80008f4:	2015      	movs	r0, #21
 80008f6:	f001 f93c 	bl	8001b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80008fa:	2015      	movs	r0, #21
 80008fc:	f001 f955 	bl	8001baa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000900:	2200      	movs	r2, #0
 8000902:	2100      	movs	r1, #0
 8000904:	2016      	movs	r0, #22
 8000906:	f001 f934 	bl	8001b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 800090a:	2016      	movs	r0, #22
 800090c:	f001 f94d 	bl	8001baa <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000910:	bf00      	nop
 8000912:	3720      	adds	r7, #32
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40006400 	.word	0x40006400
 800091c:	40021000 	.word	0x40021000
 8000920:	40010800 	.word	0x40010800

08000924 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b088      	sub	sp, #32
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092c:	f107 0310 	add.w	r3, r7, #16
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4a20      	ldr	r2, [pc, #128]	@ (80009c0 <HAL_UART_MspInit+0x9c>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d139      	bne.n	80009b8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000944:	4b1f      	ldr	r3, [pc, #124]	@ (80009c4 <HAL_UART_MspInit+0xa0>)
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	4a1e      	ldr	r2, [pc, #120]	@ (80009c4 <HAL_UART_MspInit+0xa0>)
 800094a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800094e:	6193      	str	r3, [r2, #24]
 8000950:	4b1c      	ldr	r3, [pc, #112]	@ (80009c4 <HAL_UART_MspInit+0xa0>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095c:	4b19      	ldr	r3, [pc, #100]	@ (80009c4 <HAL_UART_MspInit+0xa0>)
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	4a18      	ldr	r2, [pc, #96]	@ (80009c4 <HAL_UART_MspInit+0xa0>)
 8000962:	f043 0304 	orr.w	r3, r3, #4
 8000966:	6193      	str	r3, [r2, #24]
 8000968:	4b16      	ldr	r3, [pc, #88]	@ (80009c4 <HAL_UART_MspInit+0xa0>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	f003 0304 	and.w	r3, r3, #4
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000974:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000978:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	2302      	movs	r3, #2
 800097c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800097e:	2303      	movs	r3, #3
 8000980:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000982:	f107 0310 	add.w	r3, r7, #16
 8000986:	4619      	mov	r1, r3
 8000988:	480f      	ldr	r0, [pc, #60]	@ (80009c8 <HAL_UART_MspInit+0xa4>)
 800098a:	f001 f9db 	bl	8001d44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800098e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000992:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000994:	2300      	movs	r3, #0
 8000996:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099c:	f107 0310 	add.w	r3, r7, #16
 80009a0:	4619      	mov	r1, r3
 80009a2:	4809      	ldr	r0, [pc, #36]	@ (80009c8 <HAL_UART_MspInit+0xa4>)
 80009a4:	f001 f9ce 	bl	8001d44 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80009a8:	2200      	movs	r2, #0
 80009aa:	2100      	movs	r1, #0
 80009ac:	2025      	movs	r0, #37	@ 0x25
 80009ae:	f001 f8e0 	bl	8001b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009b2:	2025      	movs	r0, #37	@ 0x25
 80009b4:	f001 f8f9 	bl	8001baa <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80009b8:	bf00      	nop
 80009ba:	3720      	adds	r7, #32
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40013800 	.word	0x40013800
 80009c4:	40021000 	.word	0x40021000
 80009c8:	40010800 	.word	0x40010800

080009cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009d0:	bf00      	nop
 80009d2:	e7fd      	b.n	80009d0 <NMI_Handler+0x4>

080009d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d8:	bf00      	nop
 80009da:	e7fd      	b.n	80009d8 <HardFault_Handler+0x4>

080009dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e0:	bf00      	nop
 80009e2:	e7fd      	b.n	80009e0 <MemManage_Handler+0x4>

080009e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e8:	bf00      	nop
 80009ea:	e7fd      	b.n	80009e8 <BusFault_Handler+0x4>

080009ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f0:	bf00      	nop
 80009f2:	e7fd      	b.n	80009f0 <UsageFault_Handler+0x4>

080009f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bc80      	pop	{r7}
 80009fe:	4770      	bx	lr

08000a00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr

08000a0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bc80      	pop	{r7}
 8000a16:	4770      	bx	lr

08000a18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a1c:	f000 f946 	bl	8000cac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000a28:	4802      	ldr	r0, [pc, #8]	@ (8000a34 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8000a2a:	f000 fd9c 	bl	8001566 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	200000ac 	.word	0x200000ac

08000a38 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000a3c:	4802      	ldr	r0, [pc, #8]	@ (8000a48 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000a3e:	f000 fd92 	bl	8001566 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	200000ac 	.word	0x200000ac

08000a4c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000a50:	4802      	ldr	r0, [pc, #8]	@ (8000a5c <CAN1_RX1_IRQHandler+0x10>)
 8000a52:	f000 fd88 	bl	8001566 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	200000ac 	.word	0x200000ac

08000a60 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000a64:	4802      	ldr	r0, [pc, #8]	@ (8000a70 <CAN1_SCE_IRQHandler+0x10>)
 8000a66:	f000 fd7e 	bl	8001566 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	200000ac 	.word	0x200000ac

08000a74 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a78:	4802      	ldr	r0, [pc, #8]	@ (8000a84 <USART1_IRQHandler+0x10>)
 8000a7a:	f001 ffeb 	bl	8002a54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	200000d4 	.word	0x200000d4

08000a88 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a94:	2300      	movs	r3, #0
 8000a96:	617b      	str	r3, [r7, #20]
 8000a98:	e00a      	b.n	8000ab0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a9a:	f3af 8000 	nop.w
 8000a9e:	4601      	mov	r1, r0
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	1c5a      	adds	r2, r3, #1
 8000aa4:	60ba      	str	r2, [r7, #8]
 8000aa6:	b2ca      	uxtb	r2, r1
 8000aa8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	3301      	adds	r3, #1
 8000aae:	617b      	str	r3, [r7, #20]
 8000ab0:	697a      	ldr	r2, [r7, #20]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	dbf0      	blt.n	8000a9a <_read+0x12>
  }

  return len;
 8000ab8:	687b      	ldr	r3, [r7, #4]
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3718      	adds	r7, #24
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b086      	sub	sp, #24
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	60f8      	str	r0, [r7, #12]
 8000aca:	60b9      	str	r1, [r7, #8]
 8000acc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ace:	2300      	movs	r3, #0
 8000ad0:	617b      	str	r3, [r7, #20]
 8000ad2:	e009      	b.n	8000ae8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	1c5a      	adds	r2, r3, #1
 8000ad8:	60ba      	str	r2, [r7, #8]
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	617b      	str	r3, [r7, #20]
 8000ae8:	697a      	ldr	r2, [r7, #20]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	dbf1      	blt.n	8000ad4 <_write+0x12>
  }
  return len;
 8000af0:	687b      	ldr	r3, [r7, #4]
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3718      	adds	r7, #24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <_close>:

int _close(int file)
{
 8000afa:	b480      	push	{r7}
 8000afc:	b083      	sub	sp, #12
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bc80      	pop	{r7}
 8000b0e:	4770      	bx	lr

08000b10 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b20:	605a      	str	r2, [r3, #4]
  return 0;
 8000b22:	2300      	movs	r3, #0
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bc80      	pop	{r7}
 8000b2c:	4770      	bx	lr

08000b2e <_isatty>:

int _isatty(int file)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	b083      	sub	sp, #12
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b36:	2301      	movs	r3, #1
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bc80      	pop	{r7}
 8000b40:	4770      	bx	lr

08000b42 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b42:	b480      	push	{r7}
 8000b44:	b085      	sub	sp, #20
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	60f8      	str	r0, [r7, #12]
 8000b4a:	60b9      	str	r1, [r7, #8]
 8000b4c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b4e:	2300      	movs	r3, #0
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3714      	adds	r7, #20
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bc80      	pop	{r7}
 8000b58:	4770      	bx	lr
	...

08000b5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b64:	4a14      	ldr	r2, [pc, #80]	@ (8000bb8 <_sbrk+0x5c>)
 8000b66:	4b15      	ldr	r3, [pc, #84]	@ (8000bbc <_sbrk+0x60>)
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b70:	4b13      	ldr	r3, [pc, #76]	@ (8000bc0 <_sbrk+0x64>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d102      	bne.n	8000b7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b78:	4b11      	ldr	r3, [pc, #68]	@ (8000bc0 <_sbrk+0x64>)
 8000b7a:	4a12      	ldr	r2, [pc, #72]	@ (8000bc4 <_sbrk+0x68>)
 8000b7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b7e:	4b10      	ldr	r3, [pc, #64]	@ (8000bc0 <_sbrk+0x64>)
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4413      	add	r3, r2
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d207      	bcs.n	8000b9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b8c:	f002 ffee 	bl	8003b6c <__errno>
 8000b90:	4603      	mov	r3, r0
 8000b92:	220c      	movs	r2, #12
 8000b94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b96:	f04f 33ff 	mov.w	r3, #4294967295
 8000b9a:	e009      	b.n	8000bb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b9c:	4b08      	ldr	r3, [pc, #32]	@ (8000bc0 <_sbrk+0x64>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ba2:	4b07      	ldr	r3, [pc, #28]	@ (8000bc0 <_sbrk+0x64>)
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4413      	add	r3, r2
 8000baa:	4a05      	ldr	r2, [pc, #20]	@ (8000bc0 <_sbrk+0x64>)
 8000bac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bae:	68fb      	ldr	r3, [r7, #12]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3718      	adds	r7, #24
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20005000 	.word	0x20005000
 8000bbc:	00000400 	.word	0x00000400
 8000bc0:	2000014c 	.word	0x2000014c
 8000bc4:	200002a0 	.word	0x200002a0

08000bc8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr

08000bd4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bd4:	f7ff fff8 	bl	8000bc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bd8:	480b      	ldr	r0, [pc, #44]	@ (8000c08 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000bda:	490c      	ldr	r1, [pc, #48]	@ (8000c0c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000bdc:	4a0c      	ldr	r2, [pc, #48]	@ (8000c10 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000bde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be0:	e002      	b.n	8000be8 <LoopCopyDataInit>

08000be2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000be2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000be6:	3304      	adds	r3, #4

08000be8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bec:	d3f9      	bcc.n	8000be2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bee:	4a09      	ldr	r2, [pc, #36]	@ (8000c14 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000bf0:	4c09      	ldr	r4, [pc, #36]	@ (8000c18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf4:	e001      	b.n	8000bfa <LoopFillZerobss>

08000bf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf8:	3204      	adds	r2, #4

08000bfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bfc:	d3fb      	bcc.n	8000bf6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bfe:	f002 ffbb 	bl	8003b78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c02:	f7ff faab 	bl	800015c <main>
  bx lr
 8000c06:	4770      	bx	lr
  ldr r0, =_sdata
 8000c08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c0c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c10:	08004974 	.word	0x08004974
  ldr r2, =_sbss
 8000c14:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c18:	200002a0 	.word	0x200002a0

08000c1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c1c:	e7fe      	b.n	8000c1c <ADC1_2_IRQHandler>
	...

08000c20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c24:	4b08      	ldr	r3, [pc, #32]	@ (8000c48 <HAL_Init+0x28>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a07      	ldr	r2, [pc, #28]	@ (8000c48 <HAL_Init+0x28>)
 8000c2a:	f043 0310 	orr.w	r3, r3, #16
 8000c2e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c30:	2003      	movs	r0, #3
 8000c32:	f000 ff93 	bl	8001b5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c36:	200f      	movs	r0, #15
 8000c38:	f000 f808 	bl	8000c4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c3c:	f7ff fdd4 	bl	80007e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c40:	2300      	movs	r3, #0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40022000 	.word	0x40022000

08000c4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c54:	4b12      	ldr	r3, [pc, #72]	@ (8000ca0 <HAL_InitTick+0x54>)
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	4b12      	ldr	r3, [pc, #72]	@ (8000ca4 <HAL_InitTick+0x58>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f000 ffab 	bl	8001bc6 <HAL_SYSTICK_Config>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	e00e      	b.n	8000c98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2b0f      	cmp	r3, #15
 8000c7e:	d80a      	bhi.n	8000c96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c80:	2200      	movs	r2, #0
 8000c82:	6879      	ldr	r1, [r7, #4]
 8000c84:	f04f 30ff 	mov.w	r0, #4294967295
 8000c88:	f000 ff73 	bl	8001b72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c8c:	4a06      	ldr	r2, [pc, #24]	@ (8000ca8 <HAL_InitTick+0x5c>)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c92:	2300      	movs	r3, #0
 8000c94:	e000      	b.n	8000c98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000000 	.word	0x20000000
 8000ca4:	20000008 	.word	0x20000008
 8000ca8:	20000004 	.word	0x20000004

08000cac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cb0:	4b05      	ldr	r3, [pc, #20]	@ (8000cc8 <HAL_IncTick+0x1c>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4b05      	ldr	r3, [pc, #20]	@ (8000ccc <HAL_IncTick+0x20>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4413      	add	r3, r2
 8000cbc:	4a03      	ldr	r2, [pc, #12]	@ (8000ccc <HAL_IncTick+0x20>)
 8000cbe:	6013      	str	r3, [r2, #0]
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr
 8000cc8:	20000008 	.word	0x20000008
 8000ccc:	20000150 	.word	0x20000150

08000cd0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd4:	4b02      	ldr	r3, [pc, #8]	@ (8000ce0 <HAL_GetTick+0x10>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bc80      	pop	{r7}
 8000cde:	4770      	bx	lr
 8000ce0:	20000150 	.word	0x20000150

08000ce4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cec:	f7ff fff0 	bl	8000cd0 <HAL_GetTick>
 8000cf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cfc:	d005      	beq.n	8000d0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8000d28 <HAL_Delay+0x44>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	461a      	mov	r2, r3
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	4413      	add	r3, r2
 8000d08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d0a:	bf00      	nop
 8000d0c:	f7ff ffe0 	bl	8000cd0 <HAL_GetTick>
 8000d10:	4602      	mov	r2, r0
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d8f7      	bhi.n	8000d0c <HAL_Delay+0x28>
  {
  }
}
 8000d1c:	bf00      	nop
 8000d1e:	bf00      	nop
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000008 	.word	0x20000008

08000d2c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d101      	bne.n	8000d3e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e0ed      	b.n	8000f1a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d102      	bne.n	8000d50 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f7ff fd7e 	bl	800084c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f042 0201 	orr.w	r2, r2, #1
 8000d5e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d60:	f7ff ffb6 	bl	8000cd0 <HAL_GetTick>
 8000d64:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d66:	e012      	b.n	8000d8e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d68:	f7ff ffb2 	bl	8000cd0 <HAL_GetTick>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	2b0a      	cmp	r3, #10
 8000d74:	d90b      	bls.n	8000d8e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d7a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2205      	movs	r2, #5
 8000d86:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e0c5      	b.n	8000f1a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f003 0301 	and.w	r3, r3, #1
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d0e5      	beq.n	8000d68 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f022 0202 	bic.w	r2, r2, #2
 8000daa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000dac:	f7ff ff90 	bl	8000cd0 <HAL_GetTick>
 8000db0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000db2:	e012      	b.n	8000dda <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000db4:	f7ff ff8c 	bl	8000cd0 <HAL_GetTick>
 8000db8:	4602      	mov	r2, r0
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	2b0a      	cmp	r3, #10
 8000dc0:	d90b      	bls.n	8000dda <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dc6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2205      	movs	r2, #5
 8000dd2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e09f      	b.n	8000f1a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f003 0302 	and.w	r3, r3, #2
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d1e5      	bne.n	8000db4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	7e1b      	ldrb	r3, [r3, #24]
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d108      	bne.n	8000e02 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	e007      	b.n	8000e12 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000e10:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	7e5b      	ldrb	r3, [r3, #25]
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d108      	bne.n	8000e2c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	e007      	b.n	8000e3c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000e3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	7e9b      	ldrb	r3, [r3, #26]
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d108      	bne.n	8000e56 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f042 0220 	orr.w	r2, r2, #32
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	e007      	b.n	8000e66 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f022 0220 	bic.w	r2, r2, #32
 8000e64:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	7edb      	ldrb	r3, [r3, #27]
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d108      	bne.n	8000e80 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f022 0210 	bic.w	r2, r2, #16
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	e007      	b.n	8000e90 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f042 0210 	orr.w	r2, r2, #16
 8000e8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	7f1b      	ldrb	r3, [r3, #28]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d108      	bne.n	8000eaa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f042 0208 	orr.w	r2, r2, #8
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	e007      	b.n	8000eba <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f022 0208 	bic.w	r2, r2, #8
 8000eb8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	7f5b      	ldrb	r3, [r3, #29]
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d108      	bne.n	8000ed4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f042 0204 	orr.w	r2, r2, #4
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	e007      	b.n	8000ee4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f022 0204 	bic.w	r2, r2, #4
 8000ee2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	689a      	ldr	r2, [r3, #8]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	431a      	orrs	r2, r3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	691b      	ldr	r3, [r3, #16]
 8000ef2:	431a      	orrs	r2, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	695b      	ldr	r3, [r3, #20]
 8000ef8:	ea42 0103 	orr.w	r1, r2, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	1e5a      	subs	r2, r3, #1
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	430a      	orrs	r2, r1
 8000f08:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2201      	movs	r2, #1
 8000f14:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000f22:	b480      	push	{r7}
 8000f24:	b087      	sub	sp, #28
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
 8000f2a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f38:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000f3a:	7cfb      	ldrb	r3, [r7, #19]
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d003      	beq.n	8000f48 <HAL_CAN_ConfigFilter+0x26>
 8000f40:	7cfb      	ldrb	r3, [r7, #19]
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	f040 80aa 	bne.w	800109c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000f4e:	f043 0201 	orr.w	r2, r3, #1
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	695b      	ldr	r3, [r3, #20]
 8000f5c:	f003 031f 	and.w	r3, r3, #31
 8000f60:	2201      	movs	r2, #1
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	43db      	mvns	r3, r3
 8000f72:	401a      	ands	r2, r3
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	69db      	ldr	r3, [r3, #28]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d123      	bne.n	8000fca <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	401a      	ands	r2, r3
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fa0:	683a      	ldr	r2, [r7, #0]
 8000fa2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000fa4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	3248      	adds	r2, #72	@ 0x48
 8000faa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fbe:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fc0:	6979      	ldr	r1, [r7, #20]
 8000fc2:	3348      	adds	r3, #72	@ 0x48
 8000fc4:	00db      	lsls	r3, r3, #3
 8000fc6:	440b      	add	r3, r1
 8000fc8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	69db      	ldr	r3, [r3, #28]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d122      	bne.n	8001018 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	431a      	orrs	r2, r3
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fee:	683a      	ldr	r2, [r7, #0]
 8000ff0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000ff2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	3248      	adds	r2, #72	@ 0x48
 8000ff8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	68db      	ldr	r3, [r3, #12]
 8001006:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800100c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800100e:	6979      	ldr	r1, [r7, #20]
 8001010:	3348      	adds	r3, #72	@ 0x48
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	440b      	add	r3, r1
 8001016:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	699b      	ldr	r3, [r3, #24]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d109      	bne.n	8001034 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	43db      	mvns	r3, r3
 800102a:	401a      	ands	r2, r3
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001032:	e007      	b.n	8001044 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	431a      	orrs	r2, r3
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	691b      	ldr	r3, [r3, #16]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d109      	bne.n	8001060 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	43db      	mvns	r3, r3
 8001056:	401a      	ands	r2, r3
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800105e:	e007      	b.n	8001070 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	431a      	orrs	r2, r3
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	6a1b      	ldr	r3, [r3, #32]
 8001074:	2b01      	cmp	r3, #1
 8001076:	d107      	bne.n	8001088 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	431a      	orrs	r2, r3
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800108e:	f023 0201 	bic.w	r2, r3, #1
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001098:	2300      	movs	r3, #0
 800109a:	e006      	b.n	80010aa <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010a0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
  }
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	371c      	adds	r7, #28
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr

080010b4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d12e      	bne.n	8001126 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2202      	movs	r2, #2
 80010cc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f022 0201 	bic.w	r2, r2, #1
 80010de:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80010e0:	f7ff fdf6 	bl	8000cd0 <HAL_GetTick>
 80010e4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80010e6:	e012      	b.n	800110e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010e8:	f7ff fdf2 	bl	8000cd0 <HAL_GetTick>
 80010ec:	4602      	mov	r2, r0
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	2b0a      	cmp	r3, #10
 80010f4:	d90b      	bls.n	800110e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010fa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2205      	movs	r2, #5
 8001106:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e012      	b.n	8001134 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	2b00      	cmp	r3, #0
 800111a:	d1e5      	bne.n	80010e8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2200      	movs	r2, #0
 8001120:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001122:	2300      	movs	r3, #0
 8001124:	e006      	b.n	8001134 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800112a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
  }
}
 8001134:	4618      	mov	r0, r3
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800113c:	b480      	push	{r7}
 800113e:	b089      	sub	sp, #36	@ 0x24
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
 8001148:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001150:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800115a:	7ffb      	ldrb	r3, [r7, #31]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d003      	beq.n	8001168 <HAL_CAN_AddTxMessage+0x2c>
 8001160:	7ffb      	ldrb	r3, [r7, #31]
 8001162:	2b02      	cmp	r3, #2
 8001164:	f040 80ad 	bne.w	80012c2 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d10a      	bne.n	8001188 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001178:	2b00      	cmp	r3, #0
 800117a:	d105      	bne.n	8001188 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001182:	2b00      	cmp	r3, #0
 8001184:	f000 8095 	beq.w	80012b2 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	0e1b      	lsrs	r3, r3, #24
 800118c:	f003 0303 	and.w	r3, r3, #3
 8001190:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001192:	2201      	movs	r2, #1
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	409a      	lsls	r2, r3
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d10d      	bne.n	80011c0 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80011ae:	68f9      	ldr	r1, [r7, #12]
 80011b0:	6809      	ldr	r1, [r1, #0]
 80011b2:	431a      	orrs	r2, r3
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	3318      	adds	r3, #24
 80011b8:	011b      	lsls	r3, r3, #4
 80011ba:	440b      	add	r3, r1
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	e00f      	b.n	80011e0 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011ca:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011d0:	68f9      	ldr	r1, [r7, #12]
 80011d2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80011d4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	3318      	adds	r3, #24
 80011da:	011b      	lsls	r3, r3, #4
 80011dc:	440b      	add	r3, r1
 80011de:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	6819      	ldr	r1, [r3, #0]
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	691a      	ldr	r2, [r3, #16]
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	3318      	adds	r3, #24
 80011ec:	011b      	lsls	r3, r3, #4
 80011ee:	440b      	add	r3, r1
 80011f0:	3304      	adds	r3, #4
 80011f2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	7d1b      	ldrb	r3, [r3, #20]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d111      	bne.n	8001220 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	3318      	adds	r3, #24
 8001204:	011b      	lsls	r3, r3, #4
 8001206:	4413      	add	r3, r2
 8001208:	3304      	adds	r3, #4
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	68fa      	ldr	r2, [r7, #12]
 800120e:	6811      	ldr	r1, [r2, #0]
 8001210:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	3318      	adds	r3, #24
 8001218:	011b      	lsls	r3, r3, #4
 800121a:	440b      	add	r3, r1
 800121c:	3304      	adds	r3, #4
 800121e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3307      	adds	r3, #7
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	061a      	lsls	r2, r3, #24
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3306      	adds	r3, #6
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	041b      	lsls	r3, r3, #16
 8001230:	431a      	orrs	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	3305      	adds	r3, #5
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	021b      	lsls	r3, r3, #8
 800123a:	4313      	orrs	r3, r2
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	3204      	adds	r2, #4
 8001240:	7812      	ldrb	r2, [r2, #0]
 8001242:	4610      	mov	r0, r2
 8001244:	68fa      	ldr	r2, [r7, #12]
 8001246:	6811      	ldr	r1, [r2, #0]
 8001248:	ea43 0200 	orr.w	r2, r3, r0
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	011b      	lsls	r3, r3, #4
 8001250:	440b      	add	r3, r1
 8001252:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001256:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3303      	adds	r3, #3
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	061a      	lsls	r2, r3, #24
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3302      	adds	r3, #2
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	041b      	lsls	r3, r3, #16
 8001268:	431a      	orrs	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	3301      	adds	r3, #1
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	021b      	lsls	r3, r3, #8
 8001272:	4313      	orrs	r3, r2
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	7812      	ldrb	r2, [r2, #0]
 8001278:	4610      	mov	r0, r2
 800127a:	68fa      	ldr	r2, [r7, #12]
 800127c:	6811      	ldr	r1, [r2, #0]
 800127e:	ea43 0200 	orr.w	r2, r3, r0
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	011b      	lsls	r3, r3, #4
 8001286:	440b      	add	r3, r1
 8001288:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800128c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	3318      	adds	r3, #24
 8001296:	011b      	lsls	r3, r3, #4
 8001298:	4413      	add	r3, r2
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	68fa      	ldr	r2, [r7, #12]
 800129e:	6811      	ldr	r1, [r2, #0]
 80012a0:	f043 0201 	orr.w	r2, r3, #1
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	3318      	adds	r3, #24
 80012a8:	011b      	lsls	r3, r3, #4
 80012aa:	440b      	add	r3, r1
 80012ac:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80012ae:	2300      	movs	r3, #0
 80012b0:	e00e      	b.n	80012d0 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012b6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e006      	b.n	80012d0 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012c6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
  }
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3724      	adds	r7, #36	@ 0x24
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc80      	pop	{r7}
 80012d8:	4770      	bx	lr

080012da <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80012da:	b480      	push	{r7}
 80012dc:	b087      	sub	sp, #28
 80012de:	af00      	add	r7, sp, #0
 80012e0:	60f8      	str	r0, [r7, #12]
 80012e2:	60b9      	str	r1, [r7, #8]
 80012e4:	607a      	str	r2, [r7, #4]
 80012e6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012ee:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80012f0:	7dfb      	ldrb	r3, [r7, #23]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d003      	beq.n	80012fe <HAL_CAN_GetRxMessage+0x24>
 80012f6:	7dfb      	ldrb	r3, [r7, #23]
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	f040 8103 	bne.w	8001504 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d10e      	bne.n	8001322 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	f003 0303 	and.w	r3, r3, #3
 800130e:	2b00      	cmp	r3, #0
 8001310:	d116      	bne.n	8001340 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001316:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e0f7      	b.n	8001512 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	691b      	ldr	r3, [r3, #16]
 8001328:	f003 0303 	and.w	r3, r3, #3
 800132c:	2b00      	cmp	r3, #0
 800132e:	d107      	bne.n	8001340 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001334:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e0e8      	b.n	8001512 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	331b      	adds	r3, #27
 8001348:	011b      	lsls	r3, r3, #4
 800134a:	4413      	add	r3, r2
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0204 	and.w	r2, r3, #4
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d10c      	bne.n	8001378 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	331b      	adds	r3, #27
 8001366:	011b      	lsls	r3, r3, #4
 8001368:	4413      	add	r3, r2
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	0d5b      	lsrs	r3, r3, #21
 800136e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	e00b      	b.n	8001390 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	331b      	adds	r3, #27
 8001380:	011b      	lsls	r3, r3, #4
 8001382:	4413      	add	r3, r2
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	08db      	lsrs	r3, r3, #3
 8001388:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	331b      	adds	r3, #27
 8001398:	011b      	lsls	r3, r3, #4
 800139a:	4413      	add	r3, r2
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0202 	and.w	r2, r3, #2
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	331b      	adds	r3, #27
 80013ae:	011b      	lsls	r3, r3, #4
 80013b0:	4413      	add	r3, r2
 80013b2:	3304      	adds	r3, #4
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0308 	and.w	r3, r3, #8
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d003      	beq.n	80013c6 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2208      	movs	r2, #8
 80013c2:	611a      	str	r2, [r3, #16]
 80013c4:	e00b      	b.n	80013de <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	331b      	adds	r3, #27
 80013ce:	011b      	lsls	r3, r3, #4
 80013d0:	4413      	add	r3, r2
 80013d2:	3304      	adds	r3, #4
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 020f 	and.w	r2, r3, #15
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	331b      	adds	r3, #27
 80013e6:	011b      	lsls	r3, r3, #4
 80013e8:	4413      	add	r3, r2
 80013ea:	3304      	adds	r3, #4
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	0a1b      	lsrs	r3, r3, #8
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	331b      	adds	r3, #27
 80013fe:	011b      	lsls	r3, r3, #4
 8001400:	4413      	add	r3, r2
 8001402:	3304      	adds	r3, #4
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	0c1b      	lsrs	r3, r3, #16
 8001408:	b29a      	uxth	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	011b      	lsls	r3, r3, #4
 8001416:	4413      	add	r3, r2
 8001418:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	b2da      	uxtb	r2, r3
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	011b      	lsls	r3, r3, #4
 800142c:	4413      	add	r3, r2
 800142e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	0a1a      	lsrs	r2, r3, #8
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	3301      	adds	r3, #1
 800143a:	b2d2      	uxtb	r2, r2
 800143c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	011b      	lsls	r3, r3, #4
 8001446:	4413      	add	r3, r2
 8001448:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	0c1a      	lsrs	r2, r3, #16
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	3302      	adds	r3, #2
 8001454:	b2d2      	uxtb	r2, r2
 8001456:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	011b      	lsls	r3, r3, #4
 8001460:	4413      	add	r3, r2
 8001462:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	0e1a      	lsrs	r2, r3, #24
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	3303      	adds	r3, #3
 800146e:	b2d2      	uxtb	r2, r2
 8001470:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	011b      	lsls	r3, r3, #4
 800147a:	4413      	add	r3, r2
 800147c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	3304      	adds	r3, #4
 8001486:	b2d2      	uxtb	r2, r2
 8001488:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	011b      	lsls	r3, r3, #4
 8001492:	4413      	add	r3, r2
 8001494:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	0a1a      	lsrs	r2, r3, #8
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	3305      	adds	r3, #5
 80014a0:	b2d2      	uxtb	r2, r2
 80014a2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	011b      	lsls	r3, r3, #4
 80014ac:	4413      	add	r3, r2
 80014ae:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	0c1a      	lsrs	r2, r3, #16
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	3306      	adds	r3, #6
 80014ba:	b2d2      	uxtb	r2, r2
 80014bc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	011b      	lsls	r3, r3, #4
 80014c6:	4413      	add	r3, r2
 80014c8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	0e1a      	lsrs	r2, r3, #24
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	3307      	adds	r3, #7
 80014d4:	b2d2      	uxtb	r2, r2
 80014d6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d108      	bne.n	80014f0 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	68da      	ldr	r2, [r3, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f042 0220 	orr.w	r2, r2, #32
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	e007      	b.n	8001500 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	691a      	ldr	r2, [r3, #16]
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f042 0220 	orr.w	r2, r2, #32
 80014fe:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001500:	2300      	movs	r3, #0
 8001502:	e006      	b.n	8001512 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001508:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
  }
}
 8001512:	4618      	mov	r0, r3
 8001514:	371c      	adds	r7, #28
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr

0800151c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f893 3020 	ldrb.w	r3, [r3, #32]
 800152c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800152e:	7bfb      	ldrb	r3, [r7, #15]
 8001530:	2b01      	cmp	r3, #1
 8001532:	d002      	beq.n	800153a <HAL_CAN_ActivateNotification+0x1e>
 8001534:	7bfb      	ldrb	r3, [r7, #15]
 8001536:	2b02      	cmp	r3, #2
 8001538:	d109      	bne.n	800154e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	6959      	ldr	r1, [r3, #20]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	430a      	orrs	r2, r1
 8001548:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800154a:	2300      	movs	r3, #0
 800154c:	e006      	b.n	800155c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001552:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
  }
}
 800155c:	4618      	mov	r0, r3
 800155e:	3714      	adds	r7, #20
 8001560:	46bd      	mov	sp, r7
 8001562:	bc80      	pop	{r7}
 8001564:	4770      	bx	lr

08001566 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b08a      	sub	sp, #40	@ 0x28
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800156e:	2300      	movs	r3, #0
 8001570:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	695b      	ldr	r3, [r3, #20]
 8001578:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	691b      	ldr	r3, [r3, #16]
 8001598:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80015a2:	6a3b      	ldr	r3, [r7, #32]
 80015a4:	f003 0301 	and.w	r3, r3, #1
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d07c      	beq.n	80016a6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d023      	beq.n	80015fe <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2201      	movs	r2, #1
 80015bc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d003      	beq.n	80015d0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f000 f983 	bl	80018d4 <HAL_CAN_TxMailbox0CompleteCallback>
 80015ce:	e016      	b.n	80015fe <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	f003 0304 	and.w	r3, r3, #4
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d004      	beq.n	80015e4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80015da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015dc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80015e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80015e2:	e00c      	b.n	80015fe <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	f003 0308 	and.w	r3, r3, #8
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d004      	beq.n	80015f8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80015ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80015f6:	e002      	b.n	80015fe <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f000 f986 	bl	800190a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001604:	2b00      	cmp	r3, #0
 8001606:	d024      	beq.n	8001652 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001610:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001618:	2b00      	cmp	r3, #0
 800161a:	d003      	beq.n	8001624 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f000 f962 	bl	80018e6 <HAL_CAN_TxMailbox1CompleteCallback>
 8001622:	e016      	b.n	8001652 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800162a:	2b00      	cmp	r3, #0
 800162c:	d004      	beq.n	8001638 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800162e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001630:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001634:	627b      	str	r3, [r7, #36]	@ 0x24
 8001636:	e00c      	b.n	8001652 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800163e:	2b00      	cmp	r3, #0
 8001640:	d004      	beq.n	800164c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001644:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001648:	627b      	str	r3, [r7, #36]	@ 0x24
 800164a:	e002      	b.n	8001652 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f000 f965 	bl	800191c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d024      	beq.n	80016a6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001664:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d003      	beq.n	8001678 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f000 f941 	bl	80018f8 <HAL_CAN_TxMailbox2CompleteCallback>
 8001676:	e016      	b.n	80016a6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d004      	beq.n	800168c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001684:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001688:	627b      	str	r3, [r7, #36]	@ 0x24
 800168a:	e00c      	b.n	80016a6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d004      	beq.n	80016a0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001698:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800169c:	627b      	str	r3, [r7, #36]	@ 0x24
 800169e:	e002      	b.n	80016a6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f000 f944 	bl	800192e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80016a6:	6a3b      	ldr	r3, [r7, #32]
 80016a8:	f003 0308 	and.w	r3, r3, #8
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d00c      	beq.n	80016ca <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	f003 0310 	and.w	r3, r3, #16
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d007      	beq.n	80016ca <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80016ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016bc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016c0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2210      	movs	r2, #16
 80016c8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80016ca:	6a3b      	ldr	r3, [r7, #32]
 80016cc:	f003 0304 	and.w	r3, r3, #4
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d00b      	beq.n	80016ec <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	f003 0308 	and.w	r3, r3, #8
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d006      	beq.n	80016ec <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2208      	movs	r2, #8
 80016e4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f000 f933 	bl	8001952 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80016ec:	6a3b      	ldr	r3, [r7, #32]
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d009      	beq.n	800170a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	f003 0303 	and.w	r3, r3, #3
 8001700:	2b00      	cmp	r3, #0
 8001702:	d002      	beq.n	800170a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f000 f91b 	bl	8001940 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800170a:	6a3b      	ldr	r3, [r7, #32]
 800170c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001710:	2b00      	cmp	r3, #0
 8001712:	d00c      	beq.n	800172e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	f003 0310 	and.w	r3, r3, #16
 800171a:	2b00      	cmp	r3, #0
 800171c:	d007      	beq.n	800172e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800171e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001720:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001724:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2210      	movs	r2, #16
 800172c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800172e:	6a3b      	ldr	r3, [r7, #32]
 8001730:	f003 0320 	and.w	r3, r3, #32
 8001734:	2b00      	cmp	r3, #0
 8001736:	d00b      	beq.n	8001750 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	f003 0308 	and.w	r3, r3, #8
 800173e:	2b00      	cmp	r3, #0
 8001740:	d006      	beq.n	8001750 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2208      	movs	r2, #8
 8001748:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f000 f90a 	bl	8001964 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001750:	6a3b      	ldr	r3, [r7, #32]
 8001752:	f003 0310 	and.w	r3, r3, #16
 8001756:	2b00      	cmp	r3, #0
 8001758:	d009      	beq.n	800176e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	691b      	ldr	r3, [r3, #16]
 8001760:	f003 0303 	and.w	r3, r3, #3
 8001764:	2b00      	cmp	r3, #0
 8001766:	d002      	beq.n	800176e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f7fe ffe9 	bl	8000740 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800176e:	6a3b      	ldr	r3, [r7, #32]
 8001770:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d00b      	beq.n	8001790 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	f003 0310 	and.w	r3, r3, #16
 800177e:	2b00      	cmp	r3, #0
 8001780:	d006      	beq.n	8001790 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2210      	movs	r2, #16
 8001788:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f000 f8f3 	bl	8001976 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001790:	6a3b      	ldr	r3, [r7, #32]
 8001792:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d00b      	beq.n	80017b2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	f003 0308 	and.w	r3, r3, #8
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d006      	beq.n	80017b2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2208      	movs	r2, #8
 80017aa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f000 f8eb 	bl	8001988 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80017b2:	6a3b      	ldr	r3, [r7, #32]
 80017b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d07b      	beq.n	80018b4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	f003 0304 	and.w	r3, r3, #4
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d072      	beq.n	80018ac <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80017c6:	6a3b      	ldr	r3, [r7, #32]
 80017c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d008      	beq.n	80017e2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d003      	beq.n	80017e2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80017da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80017e2:	6a3b      	ldr	r3, [r7, #32]
 80017e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d008      	beq.n	80017fe <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d003      	beq.n	80017fe <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80017f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f8:	f043 0302 	orr.w	r3, r3, #2
 80017fc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80017fe:	6a3b      	ldr	r3, [r7, #32]
 8001800:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001804:	2b00      	cmp	r3, #0
 8001806:	d008      	beq.n	800181a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800180e:	2b00      	cmp	r3, #0
 8001810:	d003      	beq.n	800181a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001814:	f043 0304 	orr.w	r3, r3, #4
 8001818:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800181a:	6a3b      	ldr	r3, [r7, #32]
 800181c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001820:	2b00      	cmp	r3, #0
 8001822:	d043      	beq.n	80018ac <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800182a:	2b00      	cmp	r3, #0
 800182c:	d03e      	beq.n	80018ac <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001834:	2b60      	cmp	r3, #96	@ 0x60
 8001836:	d02b      	beq.n	8001890 <HAL_CAN_IRQHandler+0x32a>
 8001838:	2b60      	cmp	r3, #96	@ 0x60
 800183a:	d82e      	bhi.n	800189a <HAL_CAN_IRQHandler+0x334>
 800183c:	2b50      	cmp	r3, #80	@ 0x50
 800183e:	d022      	beq.n	8001886 <HAL_CAN_IRQHandler+0x320>
 8001840:	2b50      	cmp	r3, #80	@ 0x50
 8001842:	d82a      	bhi.n	800189a <HAL_CAN_IRQHandler+0x334>
 8001844:	2b40      	cmp	r3, #64	@ 0x40
 8001846:	d019      	beq.n	800187c <HAL_CAN_IRQHandler+0x316>
 8001848:	2b40      	cmp	r3, #64	@ 0x40
 800184a:	d826      	bhi.n	800189a <HAL_CAN_IRQHandler+0x334>
 800184c:	2b30      	cmp	r3, #48	@ 0x30
 800184e:	d010      	beq.n	8001872 <HAL_CAN_IRQHandler+0x30c>
 8001850:	2b30      	cmp	r3, #48	@ 0x30
 8001852:	d822      	bhi.n	800189a <HAL_CAN_IRQHandler+0x334>
 8001854:	2b10      	cmp	r3, #16
 8001856:	d002      	beq.n	800185e <HAL_CAN_IRQHandler+0x2f8>
 8001858:	2b20      	cmp	r3, #32
 800185a:	d005      	beq.n	8001868 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800185c:	e01d      	b.n	800189a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800185e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001860:	f043 0308 	orr.w	r3, r3, #8
 8001864:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001866:	e019      	b.n	800189c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800186a:	f043 0310 	orr.w	r3, r3, #16
 800186e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001870:	e014      	b.n	800189c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001874:	f043 0320 	orr.w	r3, r3, #32
 8001878:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800187a:	e00f      	b.n	800189c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800187c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800187e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001882:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001884:	e00a      	b.n	800189c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001888:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800188c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800188e:	e005      	b.n	800189c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001892:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001896:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001898:	e000      	b.n	800189c <HAL_CAN_IRQHandler+0x336>
            break;
 800189a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	699a      	ldr	r2, [r3, #24]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80018aa:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2204      	movs	r2, #4
 80018b2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80018b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d008      	beq.n	80018cc <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c0:	431a      	orrs	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f000 f867 	bl	800199a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80018cc:	bf00      	nop
 80018ce:	3728      	adds	r7, #40	@ 0x28
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr

080018e6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b083      	sub	sp, #12
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr

080018f8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	bc80      	pop	{r7}
 8001908:	4770      	bx	lr

0800190a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800190a:	b480      	push	{r7}
 800190c:	b083      	sub	sp, #12
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr

0800191c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	bc80      	pop	{r7}
 800192c:	4770      	bx	lr

0800192e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800192e:	b480      	push	{r7}
 8001930:	b083      	sub	sp, #12
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001936:	bf00      	nop
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr

08001940 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	bc80      	pop	{r7}
 8001950:	4770      	bx	lr

08001952 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001952:	b480      	push	{r7}
 8001954:	b083      	sub	sp, #12
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr

08001964 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr

08001976 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001976:	b480      	push	{r7}
 8001978:	b083      	sub	sp, #12
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr

08001988 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	bc80      	pop	{r7}
 8001998:	4770      	bx	lr

0800199a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800199a:	b480      	push	{r7}
 800199c:	b083      	sub	sp, #12
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80019a2:	bf00      	nop
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr

080019ac <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	bc80      	pop	{r7}
 80019c0:	4770      	bx	lr
	...

080019c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a08 <__NVIC_SetPriorityGrouping+0x44>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019da:	68ba      	ldr	r2, [r7, #8]
 80019dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019e0:	4013      	ands	r3, r2
 80019e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019f6:	4a04      	ldr	r2, [pc, #16]	@ (8001a08 <__NVIC_SetPriorityGrouping+0x44>)
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	60d3      	str	r3, [r2, #12]
}
 80019fc:	bf00      	nop
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bc80      	pop	{r7}
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	e000ed00 	.word	0xe000ed00

08001a0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a10:	4b04      	ldr	r3, [pc, #16]	@ (8001a24 <__NVIC_GetPriorityGrouping+0x18>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	0a1b      	lsrs	r3, r3, #8
 8001a16:	f003 0307 	and.w	r3, r3, #7
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bc80      	pop	{r7}
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	db0b      	blt.n	8001a52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	f003 021f 	and.w	r2, r3, #31
 8001a40:	4906      	ldr	r1, [pc, #24]	@ (8001a5c <__NVIC_EnableIRQ+0x34>)
 8001a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a46:	095b      	lsrs	r3, r3, #5
 8001a48:	2001      	movs	r0, #1
 8001a4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bc80      	pop	{r7}
 8001a5a:	4770      	bx	lr
 8001a5c:	e000e100 	.word	0xe000e100

08001a60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	6039      	str	r1, [r7, #0]
 8001a6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	db0a      	blt.n	8001a8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	490c      	ldr	r1, [pc, #48]	@ (8001aac <__NVIC_SetPriority+0x4c>)
 8001a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7e:	0112      	lsls	r2, r2, #4
 8001a80:	b2d2      	uxtb	r2, r2
 8001a82:	440b      	add	r3, r1
 8001a84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a88:	e00a      	b.n	8001aa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	4908      	ldr	r1, [pc, #32]	@ (8001ab0 <__NVIC_SetPriority+0x50>)
 8001a90:	79fb      	ldrb	r3, [r7, #7]
 8001a92:	f003 030f 	and.w	r3, r3, #15
 8001a96:	3b04      	subs	r3, #4
 8001a98:	0112      	lsls	r2, r2, #4
 8001a9a:	b2d2      	uxtb	r2, r2
 8001a9c:	440b      	add	r3, r1
 8001a9e:	761a      	strb	r2, [r3, #24]
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bc80      	pop	{r7}
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	e000e100 	.word	0xe000e100
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b089      	sub	sp, #36	@ 0x24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	f1c3 0307 	rsb	r3, r3, #7
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	bf28      	it	cs
 8001ad2:	2304      	movcs	r3, #4
 8001ad4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	3304      	adds	r3, #4
 8001ada:	2b06      	cmp	r3, #6
 8001adc:	d902      	bls.n	8001ae4 <NVIC_EncodePriority+0x30>
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	3b03      	subs	r3, #3
 8001ae2:	e000      	b.n	8001ae6 <NVIC_EncodePriority+0x32>
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43da      	mvns	r2, r3
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	401a      	ands	r2, r3
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001afc:	f04f 31ff 	mov.w	r1, #4294967295
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	fa01 f303 	lsl.w	r3, r1, r3
 8001b06:	43d9      	mvns	r1, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b0c:	4313      	orrs	r3, r2
         );
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3724      	adds	r7, #36	@ 0x24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc80      	pop	{r7}
 8001b16:	4770      	bx	lr

08001b18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	3b01      	subs	r3, #1
 8001b24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b28:	d301      	bcc.n	8001b2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e00f      	b.n	8001b4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b58 <SysTick_Config+0x40>)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	3b01      	subs	r3, #1
 8001b34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b36:	210f      	movs	r1, #15
 8001b38:	f04f 30ff 	mov.w	r0, #4294967295
 8001b3c:	f7ff ff90 	bl	8001a60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b40:	4b05      	ldr	r3, [pc, #20]	@ (8001b58 <SysTick_Config+0x40>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b46:	4b04      	ldr	r3, [pc, #16]	@ (8001b58 <SysTick_Config+0x40>)
 8001b48:	2207      	movs	r2, #7
 8001b4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	e000e010 	.word	0xe000e010

08001b5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f7ff ff2d 	bl	80019c4 <__NVIC_SetPriorityGrouping>
}
 8001b6a:	bf00      	nop
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b086      	sub	sp, #24
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	4603      	mov	r3, r0
 8001b7a:	60b9      	str	r1, [r7, #8]
 8001b7c:	607a      	str	r2, [r7, #4]
 8001b7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b84:	f7ff ff42 	bl	8001a0c <__NVIC_GetPriorityGrouping>
 8001b88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	68b9      	ldr	r1, [r7, #8]
 8001b8e:	6978      	ldr	r0, [r7, #20]
 8001b90:	f7ff ff90 	bl	8001ab4 <NVIC_EncodePriority>
 8001b94:	4602      	mov	r2, r0
 8001b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b9a:	4611      	mov	r1, r2
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff ff5f 	bl	8001a60 <__NVIC_SetPriority>
}
 8001ba2:	bf00      	nop
 8001ba4:	3718      	adds	r7, #24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b082      	sub	sp, #8
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff ff35 	bl	8001a28 <__NVIC_EnableIRQ>
}
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b082      	sub	sp, #8
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7ff ffa2 	bl	8001b18 <SysTick_Config>
 8001bd4:	4603      	mov	r3, r0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b085      	sub	sp, #20
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001be6:	2300      	movs	r3, #0
 8001be8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d008      	beq.n	8001c08 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2204      	movs	r2, #4
 8001bfa:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e020      	b.n	8001c4a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f022 020e 	bic.w	r2, r2, #14
 8001c16:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f022 0201 	bic.w	r2, r2, #1
 8001c26:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c30:	2101      	movs	r1, #1
 8001c32:	fa01 f202 	lsl.w	r2, r1, r2
 8001c36:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3714      	adds	r7, #20
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr

08001c54 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d005      	beq.n	8001c78 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2204      	movs	r2, #4
 8001c70:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	73fb      	strb	r3, [r7, #15]
 8001c76:	e051      	b.n	8001d1c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f022 020e 	bic.w	r2, r2, #14
 8001c86:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f022 0201 	bic.w	r2, r2, #1
 8001c96:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a22      	ldr	r2, [pc, #136]	@ (8001d28 <HAL_DMA_Abort_IT+0xd4>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d029      	beq.n	8001cf6 <HAL_DMA_Abort_IT+0xa2>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a21      	ldr	r2, [pc, #132]	@ (8001d2c <HAL_DMA_Abort_IT+0xd8>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d022      	beq.n	8001cf2 <HAL_DMA_Abort_IT+0x9e>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a1f      	ldr	r2, [pc, #124]	@ (8001d30 <HAL_DMA_Abort_IT+0xdc>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d01a      	beq.n	8001cec <HAL_DMA_Abort_IT+0x98>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a1e      	ldr	r2, [pc, #120]	@ (8001d34 <HAL_DMA_Abort_IT+0xe0>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d012      	beq.n	8001ce6 <HAL_DMA_Abort_IT+0x92>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a1c      	ldr	r2, [pc, #112]	@ (8001d38 <HAL_DMA_Abort_IT+0xe4>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d00a      	beq.n	8001ce0 <HAL_DMA_Abort_IT+0x8c>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a1b      	ldr	r2, [pc, #108]	@ (8001d3c <HAL_DMA_Abort_IT+0xe8>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d102      	bne.n	8001cda <HAL_DMA_Abort_IT+0x86>
 8001cd4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001cd8:	e00e      	b.n	8001cf8 <HAL_DMA_Abort_IT+0xa4>
 8001cda:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001cde:	e00b      	b.n	8001cf8 <HAL_DMA_Abort_IT+0xa4>
 8001ce0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ce4:	e008      	b.n	8001cf8 <HAL_DMA_Abort_IT+0xa4>
 8001ce6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cea:	e005      	b.n	8001cf8 <HAL_DMA_Abort_IT+0xa4>
 8001cec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cf0:	e002      	b.n	8001cf8 <HAL_DMA_Abort_IT+0xa4>
 8001cf2:	2310      	movs	r3, #16
 8001cf4:	e000      	b.n	8001cf8 <HAL_DMA_Abort_IT+0xa4>
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	4a11      	ldr	r2, [pc, #68]	@ (8001d40 <HAL_DMA_Abort_IT+0xec>)
 8001cfa:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d003      	beq.n	8001d1c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	4798      	blx	r3
    } 
  }
  return status;
 8001d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40020008 	.word	0x40020008
 8001d2c:	4002001c 	.word	0x4002001c
 8001d30:	40020030 	.word	0x40020030
 8001d34:	40020044 	.word	0x40020044
 8001d38:	40020058 	.word	0x40020058
 8001d3c:	4002006c 	.word	0x4002006c
 8001d40:	40020000 	.word	0x40020000

08001d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b08b      	sub	sp, #44	@ 0x2c
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d52:	2300      	movs	r3, #0
 8001d54:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d56:	e169      	b.n	800202c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d58:	2201      	movs	r2, #1
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	69fa      	ldr	r2, [r7, #28]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	f040 8158 	bne.w	8002026 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	4a9a      	ldr	r2, [pc, #616]	@ (8001fe4 <HAL_GPIO_Init+0x2a0>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d05e      	beq.n	8001e3e <HAL_GPIO_Init+0xfa>
 8001d80:	4a98      	ldr	r2, [pc, #608]	@ (8001fe4 <HAL_GPIO_Init+0x2a0>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d875      	bhi.n	8001e72 <HAL_GPIO_Init+0x12e>
 8001d86:	4a98      	ldr	r2, [pc, #608]	@ (8001fe8 <HAL_GPIO_Init+0x2a4>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d058      	beq.n	8001e3e <HAL_GPIO_Init+0xfa>
 8001d8c:	4a96      	ldr	r2, [pc, #600]	@ (8001fe8 <HAL_GPIO_Init+0x2a4>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d86f      	bhi.n	8001e72 <HAL_GPIO_Init+0x12e>
 8001d92:	4a96      	ldr	r2, [pc, #600]	@ (8001fec <HAL_GPIO_Init+0x2a8>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d052      	beq.n	8001e3e <HAL_GPIO_Init+0xfa>
 8001d98:	4a94      	ldr	r2, [pc, #592]	@ (8001fec <HAL_GPIO_Init+0x2a8>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d869      	bhi.n	8001e72 <HAL_GPIO_Init+0x12e>
 8001d9e:	4a94      	ldr	r2, [pc, #592]	@ (8001ff0 <HAL_GPIO_Init+0x2ac>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d04c      	beq.n	8001e3e <HAL_GPIO_Init+0xfa>
 8001da4:	4a92      	ldr	r2, [pc, #584]	@ (8001ff0 <HAL_GPIO_Init+0x2ac>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d863      	bhi.n	8001e72 <HAL_GPIO_Init+0x12e>
 8001daa:	4a92      	ldr	r2, [pc, #584]	@ (8001ff4 <HAL_GPIO_Init+0x2b0>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d046      	beq.n	8001e3e <HAL_GPIO_Init+0xfa>
 8001db0:	4a90      	ldr	r2, [pc, #576]	@ (8001ff4 <HAL_GPIO_Init+0x2b0>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d85d      	bhi.n	8001e72 <HAL_GPIO_Init+0x12e>
 8001db6:	2b12      	cmp	r3, #18
 8001db8:	d82a      	bhi.n	8001e10 <HAL_GPIO_Init+0xcc>
 8001dba:	2b12      	cmp	r3, #18
 8001dbc:	d859      	bhi.n	8001e72 <HAL_GPIO_Init+0x12e>
 8001dbe:	a201      	add	r2, pc, #4	@ (adr r2, 8001dc4 <HAL_GPIO_Init+0x80>)
 8001dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dc4:	08001e3f 	.word	0x08001e3f
 8001dc8:	08001e19 	.word	0x08001e19
 8001dcc:	08001e2b 	.word	0x08001e2b
 8001dd0:	08001e6d 	.word	0x08001e6d
 8001dd4:	08001e73 	.word	0x08001e73
 8001dd8:	08001e73 	.word	0x08001e73
 8001ddc:	08001e73 	.word	0x08001e73
 8001de0:	08001e73 	.word	0x08001e73
 8001de4:	08001e73 	.word	0x08001e73
 8001de8:	08001e73 	.word	0x08001e73
 8001dec:	08001e73 	.word	0x08001e73
 8001df0:	08001e73 	.word	0x08001e73
 8001df4:	08001e73 	.word	0x08001e73
 8001df8:	08001e73 	.word	0x08001e73
 8001dfc:	08001e73 	.word	0x08001e73
 8001e00:	08001e73 	.word	0x08001e73
 8001e04:	08001e73 	.word	0x08001e73
 8001e08:	08001e21 	.word	0x08001e21
 8001e0c:	08001e35 	.word	0x08001e35
 8001e10:	4a79      	ldr	r2, [pc, #484]	@ (8001ff8 <HAL_GPIO_Init+0x2b4>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d013      	beq.n	8001e3e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e16:	e02c      	b.n	8001e72 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	623b      	str	r3, [r7, #32]
          break;
 8001e1e:	e029      	b.n	8001e74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	3304      	adds	r3, #4
 8001e26:	623b      	str	r3, [r7, #32]
          break;
 8001e28:	e024      	b.n	8001e74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	3308      	adds	r3, #8
 8001e30:	623b      	str	r3, [r7, #32]
          break;
 8001e32:	e01f      	b.n	8001e74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	330c      	adds	r3, #12
 8001e3a:	623b      	str	r3, [r7, #32]
          break;
 8001e3c:	e01a      	b.n	8001e74 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d102      	bne.n	8001e4c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e46:	2304      	movs	r3, #4
 8001e48:	623b      	str	r3, [r7, #32]
          break;
 8001e4a:	e013      	b.n	8001e74 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d105      	bne.n	8001e60 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e54:	2308      	movs	r3, #8
 8001e56:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	69fa      	ldr	r2, [r7, #28]
 8001e5c:	611a      	str	r2, [r3, #16]
          break;
 8001e5e:	e009      	b.n	8001e74 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e60:	2308      	movs	r3, #8
 8001e62:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	69fa      	ldr	r2, [r7, #28]
 8001e68:	615a      	str	r2, [r3, #20]
          break;
 8001e6a:	e003      	b.n	8001e74 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	623b      	str	r3, [r7, #32]
          break;
 8001e70:	e000      	b.n	8001e74 <HAL_GPIO_Init+0x130>
          break;
 8001e72:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	2bff      	cmp	r3, #255	@ 0xff
 8001e78:	d801      	bhi.n	8001e7e <HAL_GPIO_Init+0x13a>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	e001      	b.n	8001e82 <HAL_GPIO_Init+0x13e>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	3304      	adds	r3, #4
 8001e82:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	2bff      	cmp	r3, #255	@ 0xff
 8001e88:	d802      	bhi.n	8001e90 <HAL_GPIO_Init+0x14c>
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	e002      	b.n	8001e96 <HAL_GPIO_Init+0x152>
 8001e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e92:	3b08      	subs	r3, #8
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	210f      	movs	r1, #15
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	401a      	ands	r2, r3
 8001ea8:	6a39      	ldr	r1, [r7, #32]
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f000 80b1 	beq.w	8002026 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ec4:	4b4d      	ldr	r3, [pc, #308]	@ (8001ffc <HAL_GPIO_Init+0x2b8>)
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	4a4c      	ldr	r2, [pc, #304]	@ (8001ffc <HAL_GPIO_Init+0x2b8>)
 8001eca:	f043 0301 	orr.w	r3, r3, #1
 8001ece:	6193      	str	r3, [r2, #24]
 8001ed0:	4b4a      	ldr	r3, [pc, #296]	@ (8001ffc <HAL_GPIO_Init+0x2b8>)
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001edc:	4a48      	ldr	r2, [pc, #288]	@ (8002000 <HAL_GPIO_Init+0x2bc>)
 8001ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee0:	089b      	lsrs	r3, r3, #2
 8001ee2:	3302      	adds	r3, #2
 8001ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eec:	f003 0303 	and.w	r3, r3, #3
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	220f      	movs	r2, #15
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	4013      	ands	r3, r2
 8001efe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a40      	ldr	r2, [pc, #256]	@ (8002004 <HAL_GPIO_Init+0x2c0>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d013      	beq.n	8001f30 <HAL_GPIO_Init+0x1ec>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a3f      	ldr	r2, [pc, #252]	@ (8002008 <HAL_GPIO_Init+0x2c4>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d00d      	beq.n	8001f2c <HAL_GPIO_Init+0x1e8>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a3e      	ldr	r2, [pc, #248]	@ (800200c <HAL_GPIO_Init+0x2c8>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d007      	beq.n	8001f28 <HAL_GPIO_Init+0x1e4>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a3d      	ldr	r2, [pc, #244]	@ (8002010 <HAL_GPIO_Init+0x2cc>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d101      	bne.n	8001f24 <HAL_GPIO_Init+0x1e0>
 8001f20:	2303      	movs	r3, #3
 8001f22:	e006      	b.n	8001f32 <HAL_GPIO_Init+0x1ee>
 8001f24:	2304      	movs	r3, #4
 8001f26:	e004      	b.n	8001f32 <HAL_GPIO_Init+0x1ee>
 8001f28:	2302      	movs	r3, #2
 8001f2a:	e002      	b.n	8001f32 <HAL_GPIO_Init+0x1ee>
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e000      	b.n	8001f32 <HAL_GPIO_Init+0x1ee>
 8001f30:	2300      	movs	r3, #0
 8001f32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f34:	f002 0203 	and.w	r2, r2, #3
 8001f38:	0092      	lsls	r2, r2, #2
 8001f3a:	4093      	lsls	r3, r2
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f42:	492f      	ldr	r1, [pc, #188]	@ (8002000 <HAL_GPIO_Init+0x2bc>)
 8001f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f46:	089b      	lsrs	r3, r3, #2
 8001f48:	3302      	adds	r3, #2
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d006      	beq.n	8001f6a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f5c:	4b2d      	ldr	r3, [pc, #180]	@ (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	492c      	ldr	r1, [pc, #176]	@ (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	608b      	str	r3, [r1, #8]
 8001f68:	e006      	b.n	8001f78 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f6a:	4b2a      	ldr	r3, [pc, #168]	@ (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f6c:	689a      	ldr	r2, [r3, #8]
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	43db      	mvns	r3, r3
 8001f72:	4928      	ldr	r1, [pc, #160]	@ (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f74:	4013      	ands	r3, r2
 8001f76:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d006      	beq.n	8001f92 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f84:	4b23      	ldr	r3, [pc, #140]	@ (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f86:	68da      	ldr	r2, [r3, #12]
 8001f88:	4922      	ldr	r1, [pc, #136]	@ (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	60cb      	str	r3, [r1, #12]
 8001f90:	e006      	b.n	8001fa0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f92:	4b20      	ldr	r3, [pc, #128]	@ (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f94:	68da      	ldr	r2, [r3, #12]
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	491e      	ldr	r1, [pc, #120]	@ (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d006      	beq.n	8001fba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fac:	4b19      	ldr	r3, [pc, #100]	@ (8002014 <HAL_GPIO_Init+0x2d0>)
 8001fae:	685a      	ldr	r2, [r3, #4]
 8001fb0:	4918      	ldr	r1, [pc, #96]	@ (8002014 <HAL_GPIO_Init+0x2d0>)
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	604b      	str	r3, [r1, #4]
 8001fb8:	e006      	b.n	8001fc8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fba:	4b16      	ldr	r3, [pc, #88]	@ (8002014 <HAL_GPIO_Init+0x2d0>)
 8001fbc:	685a      	ldr	r2, [r3, #4]
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	4914      	ldr	r1, [pc, #80]	@ (8002014 <HAL_GPIO_Init+0x2d0>)
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d021      	beq.n	8002018 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fd4:	4b0f      	ldr	r3, [pc, #60]	@ (8002014 <HAL_GPIO_Init+0x2d0>)
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	490e      	ldr	r1, [pc, #56]	@ (8002014 <HAL_GPIO_Init+0x2d0>)
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	600b      	str	r3, [r1, #0]
 8001fe0:	e021      	b.n	8002026 <HAL_GPIO_Init+0x2e2>
 8001fe2:	bf00      	nop
 8001fe4:	10320000 	.word	0x10320000
 8001fe8:	10310000 	.word	0x10310000
 8001fec:	10220000 	.word	0x10220000
 8001ff0:	10210000 	.word	0x10210000
 8001ff4:	10120000 	.word	0x10120000
 8001ff8:	10110000 	.word	0x10110000
 8001ffc:	40021000 	.word	0x40021000
 8002000:	40010000 	.word	0x40010000
 8002004:	40010800 	.word	0x40010800
 8002008:	40010c00 	.word	0x40010c00
 800200c:	40011000 	.word	0x40011000
 8002010:	40011400 	.word	0x40011400
 8002014:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002018:	4b0b      	ldr	r3, [pc, #44]	@ (8002048 <HAL_GPIO_Init+0x304>)
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	43db      	mvns	r3, r3
 8002020:	4909      	ldr	r1, [pc, #36]	@ (8002048 <HAL_GPIO_Init+0x304>)
 8002022:	4013      	ands	r3, r2
 8002024:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002028:	3301      	adds	r3, #1
 800202a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002032:	fa22 f303 	lsr.w	r3, r2, r3
 8002036:	2b00      	cmp	r3, #0
 8002038:	f47f ae8e 	bne.w	8001d58 <HAL_GPIO_Init+0x14>
  }
}
 800203c:	bf00      	nop
 800203e:	bf00      	nop
 8002040:	372c      	adds	r7, #44	@ 0x2c
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr
 8002048:	40010400 	.word	0x40010400

0800204c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	460b      	mov	r3, r1
 8002056:	807b      	strh	r3, [r7, #2]
 8002058:	4613      	mov	r3, r2
 800205a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800205c:	787b      	ldrb	r3, [r7, #1]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002062:	887a      	ldrh	r2, [r7, #2]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002068:	e003      	b.n	8002072 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800206a:	887b      	ldrh	r3, [r7, #2]
 800206c:	041a      	lsls	r2, r3, #16
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	611a      	str	r2, [r3, #16]
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	bc80      	pop	{r7}
 800207a:	4770      	bx	lr

0800207c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e272      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b00      	cmp	r3, #0
 8002098:	f000 8087 	beq.w	80021aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800209c:	4b92      	ldr	r3, [pc, #584]	@ (80022e8 <HAL_RCC_OscConfig+0x26c>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f003 030c 	and.w	r3, r3, #12
 80020a4:	2b04      	cmp	r3, #4
 80020a6:	d00c      	beq.n	80020c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020a8:	4b8f      	ldr	r3, [pc, #572]	@ (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f003 030c 	and.w	r3, r3, #12
 80020b0:	2b08      	cmp	r3, #8
 80020b2:	d112      	bne.n	80020da <HAL_RCC_OscConfig+0x5e>
 80020b4:	4b8c      	ldr	r3, [pc, #560]	@ (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020c0:	d10b      	bne.n	80020da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c2:	4b89      	ldr	r3, [pc, #548]	@ (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d06c      	beq.n	80021a8 <HAL_RCC_OscConfig+0x12c>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d168      	bne.n	80021a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e24c      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020e2:	d106      	bne.n	80020f2 <HAL_RCC_OscConfig+0x76>
 80020e4:	4b80      	ldr	r3, [pc, #512]	@ (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a7f      	ldr	r2, [pc, #508]	@ (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80020ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020ee:	6013      	str	r3, [r2, #0]
 80020f0:	e02e      	b.n	8002150 <HAL_RCC_OscConfig+0xd4>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d10c      	bne.n	8002114 <HAL_RCC_OscConfig+0x98>
 80020fa:	4b7b      	ldr	r3, [pc, #492]	@ (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a7a      	ldr	r2, [pc, #488]	@ (80022e8 <HAL_RCC_OscConfig+0x26c>)
 8002100:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002104:	6013      	str	r3, [r2, #0]
 8002106:	4b78      	ldr	r3, [pc, #480]	@ (80022e8 <HAL_RCC_OscConfig+0x26c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a77      	ldr	r2, [pc, #476]	@ (80022e8 <HAL_RCC_OscConfig+0x26c>)
 800210c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002110:	6013      	str	r3, [r2, #0]
 8002112:	e01d      	b.n	8002150 <HAL_RCC_OscConfig+0xd4>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800211c:	d10c      	bne.n	8002138 <HAL_RCC_OscConfig+0xbc>
 800211e:	4b72      	ldr	r3, [pc, #456]	@ (80022e8 <HAL_RCC_OscConfig+0x26c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a71      	ldr	r2, [pc, #452]	@ (80022e8 <HAL_RCC_OscConfig+0x26c>)
 8002124:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002128:	6013      	str	r3, [r2, #0]
 800212a:	4b6f      	ldr	r3, [pc, #444]	@ (80022e8 <HAL_RCC_OscConfig+0x26c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a6e      	ldr	r2, [pc, #440]	@ (80022e8 <HAL_RCC_OscConfig+0x26c>)
 8002130:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	e00b      	b.n	8002150 <HAL_RCC_OscConfig+0xd4>
 8002138:	4b6b      	ldr	r3, [pc, #428]	@ (80022e8 <HAL_RCC_OscConfig+0x26c>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a6a      	ldr	r2, [pc, #424]	@ (80022e8 <HAL_RCC_OscConfig+0x26c>)
 800213e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002142:	6013      	str	r3, [r2, #0]
 8002144:	4b68      	ldr	r3, [pc, #416]	@ (80022e8 <HAL_RCC_OscConfig+0x26c>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a67      	ldr	r2, [pc, #412]	@ (80022e8 <HAL_RCC_OscConfig+0x26c>)
 800214a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800214e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d013      	beq.n	8002180 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002158:	f7fe fdba 	bl	8000cd0 <HAL_GetTick>
 800215c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215e:	e008      	b.n	8002172 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002160:	f7fe fdb6 	bl	8000cd0 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b64      	cmp	r3, #100	@ 0x64
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e200      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002172:	4b5d      	ldr	r3, [pc, #372]	@ (80022e8 <HAL_RCC_OscConfig+0x26c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d0f0      	beq.n	8002160 <HAL_RCC_OscConfig+0xe4>
 800217e:	e014      	b.n	80021aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002180:	f7fe fda6 	bl	8000cd0 <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002188:	f7fe fda2 	bl	8000cd0 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b64      	cmp	r3, #100	@ 0x64
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e1ec      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800219a:	4b53      	ldr	r3, [pc, #332]	@ (80022e8 <HAL_RCC_OscConfig+0x26c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1f0      	bne.n	8002188 <HAL_RCC_OscConfig+0x10c>
 80021a6:	e000      	b.n	80021aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d063      	beq.n	800227e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021b6:	4b4c      	ldr	r3, [pc, #304]	@ (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f003 030c 	and.w	r3, r3, #12
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00b      	beq.n	80021da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021c2:	4b49      	ldr	r3, [pc, #292]	@ (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f003 030c 	and.w	r3, r3, #12
 80021ca:	2b08      	cmp	r3, #8
 80021cc:	d11c      	bne.n	8002208 <HAL_RCC_OscConfig+0x18c>
 80021ce:	4b46      	ldr	r3, [pc, #280]	@ (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d116      	bne.n	8002208 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021da:	4b43      	ldr	r3, [pc, #268]	@ (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d005      	beq.n	80021f2 <HAL_RCC_OscConfig+0x176>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d001      	beq.n	80021f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e1c0      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021f2:	4b3d      	ldr	r3, [pc, #244]	@ (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	4939      	ldr	r1, [pc, #228]	@ (80022e8 <HAL_RCC_OscConfig+0x26c>)
 8002202:	4313      	orrs	r3, r2
 8002204:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002206:	e03a      	b.n	800227e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d020      	beq.n	8002252 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002210:	4b36      	ldr	r3, [pc, #216]	@ (80022ec <HAL_RCC_OscConfig+0x270>)
 8002212:	2201      	movs	r2, #1
 8002214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002216:	f7fe fd5b 	bl	8000cd0 <HAL_GetTick>
 800221a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800221c:	e008      	b.n	8002230 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800221e:	f7fe fd57 	bl	8000cd0 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e1a1      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002230:	4b2d      	ldr	r3, [pc, #180]	@ (80022e8 <HAL_RCC_OscConfig+0x26c>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0f0      	beq.n	800221e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800223c:	4b2a      	ldr	r3, [pc, #168]	@ (80022e8 <HAL_RCC_OscConfig+0x26c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	695b      	ldr	r3, [r3, #20]
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	4927      	ldr	r1, [pc, #156]	@ (80022e8 <HAL_RCC_OscConfig+0x26c>)
 800224c:	4313      	orrs	r3, r2
 800224e:	600b      	str	r3, [r1, #0]
 8002250:	e015      	b.n	800227e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002252:	4b26      	ldr	r3, [pc, #152]	@ (80022ec <HAL_RCC_OscConfig+0x270>)
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002258:	f7fe fd3a 	bl	8000cd0 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002260:	f7fe fd36 	bl	8000cd0 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e180      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002272:	4b1d      	ldr	r3, [pc, #116]	@ (80022e8 <HAL_RCC_OscConfig+0x26c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1f0      	bne.n	8002260 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0308 	and.w	r3, r3, #8
 8002286:	2b00      	cmp	r3, #0
 8002288:	d03a      	beq.n	8002300 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d019      	beq.n	80022c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002292:	4b17      	ldr	r3, [pc, #92]	@ (80022f0 <HAL_RCC_OscConfig+0x274>)
 8002294:	2201      	movs	r2, #1
 8002296:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002298:	f7fe fd1a 	bl	8000cd0 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022a0:	f7fe fd16 	bl	8000cd0 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e160      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022b2:	4b0d      	ldr	r3, [pc, #52]	@ (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80022b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d0f0      	beq.n	80022a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022be:	2001      	movs	r0, #1
 80022c0:	f000 face 	bl	8002860 <RCC_Delay>
 80022c4:	e01c      	b.n	8002300 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022c6:	4b0a      	ldr	r3, [pc, #40]	@ (80022f0 <HAL_RCC_OscConfig+0x274>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022cc:	f7fe fd00 	bl	8000cd0 <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022d2:	e00f      	b.n	80022f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022d4:	f7fe fcfc 	bl	8000cd0 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d908      	bls.n	80022f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e146      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
 80022e6:	bf00      	nop
 80022e8:	40021000 	.word	0x40021000
 80022ec:	42420000 	.word	0x42420000
 80022f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022f4:	4b92      	ldr	r3, [pc, #584]	@ (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80022f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d1e9      	bne.n	80022d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	2b00      	cmp	r3, #0
 800230a:	f000 80a6 	beq.w	800245a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800230e:	2300      	movs	r3, #0
 8002310:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002312:	4b8b      	ldr	r3, [pc, #556]	@ (8002540 <HAL_RCC_OscConfig+0x4c4>)
 8002314:	69db      	ldr	r3, [r3, #28]
 8002316:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d10d      	bne.n	800233a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800231e:	4b88      	ldr	r3, [pc, #544]	@ (8002540 <HAL_RCC_OscConfig+0x4c4>)
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	4a87      	ldr	r2, [pc, #540]	@ (8002540 <HAL_RCC_OscConfig+0x4c4>)
 8002324:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002328:	61d3      	str	r3, [r2, #28]
 800232a:	4b85      	ldr	r3, [pc, #532]	@ (8002540 <HAL_RCC_OscConfig+0x4c4>)
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002332:	60bb      	str	r3, [r7, #8]
 8002334:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002336:	2301      	movs	r3, #1
 8002338:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800233a:	4b82      	ldr	r3, [pc, #520]	@ (8002544 <HAL_RCC_OscConfig+0x4c8>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002342:	2b00      	cmp	r3, #0
 8002344:	d118      	bne.n	8002378 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002346:	4b7f      	ldr	r3, [pc, #508]	@ (8002544 <HAL_RCC_OscConfig+0x4c8>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a7e      	ldr	r2, [pc, #504]	@ (8002544 <HAL_RCC_OscConfig+0x4c8>)
 800234c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002350:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002352:	f7fe fcbd 	bl	8000cd0 <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002358:	e008      	b.n	800236c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800235a:	f7fe fcb9 	bl	8000cd0 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b64      	cmp	r3, #100	@ 0x64
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e103      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800236c:	4b75      	ldr	r3, [pc, #468]	@ (8002544 <HAL_RCC_OscConfig+0x4c8>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002374:	2b00      	cmp	r3, #0
 8002376:	d0f0      	beq.n	800235a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d106      	bne.n	800238e <HAL_RCC_OscConfig+0x312>
 8002380:	4b6f      	ldr	r3, [pc, #444]	@ (8002540 <HAL_RCC_OscConfig+0x4c4>)
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	4a6e      	ldr	r2, [pc, #440]	@ (8002540 <HAL_RCC_OscConfig+0x4c4>)
 8002386:	f043 0301 	orr.w	r3, r3, #1
 800238a:	6213      	str	r3, [r2, #32]
 800238c:	e02d      	b.n	80023ea <HAL_RCC_OscConfig+0x36e>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10c      	bne.n	80023b0 <HAL_RCC_OscConfig+0x334>
 8002396:	4b6a      	ldr	r3, [pc, #424]	@ (8002540 <HAL_RCC_OscConfig+0x4c4>)
 8002398:	6a1b      	ldr	r3, [r3, #32]
 800239a:	4a69      	ldr	r2, [pc, #420]	@ (8002540 <HAL_RCC_OscConfig+0x4c4>)
 800239c:	f023 0301 	bic.w	r3, r3, #1
 80023a0:	6213      	str	r3, [r2, #32]
 80023a2:	4b67      	ldr	r3, [pc, #412]	@ (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	4a66      	ldr	r2, [pc, #408]	@ (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80023a8:	f023 0304 	bic.w	r3, r3, #4
 80023ac:	6213      	str	r3, [r2, #32]
 80023ae:	e01c      	b.n	80023ea <HAL_RCC_OscConfig+0x36e>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	2b05      	cmp	r3, #5
 80023b6:	d10c      	bne.n	80023d2 <HAL_RCC_OscConfig+0x356>
 80023b8:	4b61      	ldr	r3, [pc, #388]	@ (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	4a60      	ldr	r2, [pc, #384]	@ (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80023be:	f043 0304 	orr.w	r3, r3, #4
 80023c2:	6213      	str	r3, [r2, #32]
 80023c4:	4b5e      	ldr	r3, [pc, #376]	@ (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	4a5d      	ldr	r2, [pc, #372]	@ (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80023ca:	f043 0301 	orr.w	r3, r3, #1
 80023ce:	6213      	str	r3, [r2, #32]
 80023d0:	e00b      	b.n	80023ea <HAL_RCC_OscConfig+0x36e>
 80023d2:	4b5b      	ldr	r3, [pc, #364]	@ (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	4a5a      	ldr	r2, [pc, #360]	@ (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80023d8:	f023 0301 	bic.w	r3, r3, #1
 80023dc:	6213      	str	r3, [r2, #32]
 80023de:	4b58      	ldr	r3, [pc, #352]	@ (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80023e0:	6a1b      	ldr	r3, [r3, #32]
 80023e2:	4a57      	ldr	r2, [pc, #348]	@ (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80023e4:	f023 0304 	bic.w	r3, r3, #4
 80023e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d015      	beq.n	800241e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f2:	f7fe fc6d 	bl	8000cd0 <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f8:	e00a      	b.n	8002410 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023fa:	f7fe fc69 	bl	8000cd0 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002408:	4293      	cmp	r3, r2
 800240a:	d901      	bls.n	8002410 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e0b1      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002410:	4b4b      	ldr	r3, [pc, #300]	@ (8002540 <HAL_RCC_OscConfig+0x4c4>)
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d0ee      	beq.n	80023fa <HAL_RCC_OscConfig+0x37e>
 800241c:	e014      	b.n	8002448 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800241e:	f7fe fc57 	bl	8000cd0 <HAL_GetTick>
 8002422:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002424:	e00a      	b.n	800243c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002426:	f7fe fc53 	bl	8000cd0 <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002434:	4293      	cmp	r3, r2
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e09b      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800243c:	4b40      	ldr	r3, [pc, #256]	@ (8002540 <HAL_RCC_OscConfig+0x4c4>)
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1ee      	bne.n	8002426 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002448:	7dfb      	ldrb	r3, [r7, #23]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d105      	bne.n	800245a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800244e:	4b3c      	ldr	r3, [pc, #240]	@ (8002540 <HAL_RCC_OscConfig+0x4c4>)
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	4a3b      	ldr	r2, [pc, #236]	@ (8002540 <HAL_RCC_OscConfig+0x4c4>)
 8002454:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002458:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	2b00      	cmp	r3, #0
 8002460:	f000 8087 	beq.w	8002572 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002464:	4b36      	ldr	r3, [pc, #216]	@ (8002540 <HAL_RCC_OscConfig+0x4c4>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f003 030c 	and.w	r3, r3, #12
 800246c:	2b08      	cmp	r3, #8
 800246e:	d061      	beq.n	8002534 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	69db      	ldr	r3, [r3, #28]
 8002474:	2b02      	cmp	r3, #2
 8002476:	d146      	bne.n	8002506 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002478:	4b33      	ldr	r3, [pc, #204]	@ (8002548 <HAL_RCC_OscConfig+0x4cc>)
 800247a:	2200      	movs	r2, #0
 800247c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247e:	f7fe fc27 	bl	8000cd0 <HAL_GetTick>
 8002482:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002484:	e008      	b.n	8002498 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002486:	f7fe fc23 	bl	8000cd0 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d901      	bls.n	8002498 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e06d      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002498:	4b29      	ldr	r3, [pc, #164]	@ (8002540 <HAL_RCC_OscConfig+0x4c4>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d1f0      	bne.n	8002486 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024ac:	d108      	bne.n	80024c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024ae:	4b24      	ldr	r3, [pc, #144]	@ (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	4921      	ldr	r1, [pc, #132]	@ (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a19      	ldr	r1, [r3, #32]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d0:	430b      	orrs	r3, r1
 80024d2:	491b      	ldr	r1, [pc, #108]	@ (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002548 <HAL_RCC_OscConfig+0x4cc>)
 80024da:	2201      	movs	r2, #1
 80024dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024de:	f7fe fbf7 	bl	8000cd0 <HAL_GetTick>
 80024e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024e4:	e008      	b.n	80024f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e6:	f7fe fbf3 	bl	8000cd0 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e03d      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024f8:	4b11      	ldr	r3, [pc, #68]	@ (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d0f0      	beq.n	80024e6 <HAL_RCC_OscConfig+0x46a>
 8002504:	e035      	b.n	8002572 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002506:	4b10      	ldr	r3, [pc, #64]	@ (8002548 <HAL_RCC_OscConfig+0x4cc>)
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250c:	f7fe fbe0 	bl	8000cd0 <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002514:	f7fe fbdc 	bl	8000cd0 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e026      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002526:	4b06      	ldr	r3, [pc, #24]	@ (8002540 <HAL_RCC_OscConfig+0x4c4>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1f0      	bne.n	8002514 <HAL_RCC_OscConfig+0x498>
 8002532:	e01e      	b.n	8002572 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	69db      	ldr	r3, [r3, #28]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d107      	bne.n	800254c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e019      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
 8002540:	40021000 	.word	0x40021000
 8002544:	40007000 	.word	0x40007000
 8002548:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800254c:	4b0b      	ldr	r3, [pc, #44]	@ (800257c <HAL_RCC_OscConfig+0x500>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a1b      	ldr	r3, [r3, #32]
 800255c:	429a      	cmp	r2, r3
 800255e:	d106      	bne.n	800256e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800256a:	429a      	cmp	r2, r3
 800256c:	d001      	beq.n	8002572 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e000      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	3718      	adds	r7, #24
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40021000 	.word	0x40021000

08002580 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d101      	bne.n	8002594 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e0d0      	b.n	8002736 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002594:	4b6a      	ldr	r3, [pc, #424]	@ (8002740 <HAL_RCC_ClockConfig+0x1c0>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0307 	and.w	r3, r3, #7
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d910      	bls.n	80025c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025a2:	4b67      	ldr	r3, [pc, #412]	@ (8002740 <HAL_RCC_ClockConfig+0x1c0>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f023 0207 	bic.w	r2, r3, #7
 80025aa:	4965      	ldr	r1, [pc, #404]	@ (8002740 <HAL_RCC_ClockConfig+0x1c0>)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025b2:	4b63      	ldr	r3, [pc, #396]	@ (8002740 <HAL_RCC_ClockConfig+0x1c0>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0307 	and.w	r3, r3, #7
 80025ba:	683a      	ldr	r2, [r7, #0]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d001      	beq.n	80025c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e0b8      	b.n	8002736 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d020      	beq.n	8002612 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0304 	and.w	r3, r3, #4
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d005      	beq.n	80025e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025dc:	4b59      	ldr	r3, [pc, #356]	@ (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	4a58      	ldr	r2, [pc, #352]	@ (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 80025e2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80025e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0308 	and.w	r3, r3, #8
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d005      	beq.n	8002600 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025f4:	4b53      	ldr	r3, [pc, #332]	@ (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	4a52      	ldr	r2, [pc, #328]	@ (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 80025fa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80025fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002600:	4b50      	ldr	r3, [pc, #320]	@ (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	494d      	ldr	r1, [pc, #308]	@ (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 800260e:	4313      	orrs	r3, r2
 8002610:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b00      	cmp	r3, #0
 800261c:	d040      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d107      	bne.n	8002636 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002626:	4b47      	ldr	r3, [pc, #284]	@ (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d115      	bne.n	800265e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e07f      	b.n	8002736 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	2b02      	cmp	r3, #2
 800263c:	d107      	bne.n	800264e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800263e:	4b41      	ldr	r3, [pc, #260]	@ (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d109      	bne.n	800265e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e073      	b.n	8002736 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800264e:	4b3d      	ldr	r3, [pc, #244]	@ (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e06b      	b.n	8002736 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800265e:	4b39      	ldr	r3, [pc, #228]	@ (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f023 0203 	bic.w	r2, r3, #3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	4936      	ldr	r1, [pc, #216]	@ (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 800266c:	4313      	orrs	r3, r2
 800266e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002670:	f7fe fb2e 	bl	8000cd0 <HAL_GetTick>
 8002674:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002676:	e00a      	b.n	800268e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002678:	f7fe fb2a 	bl	8000cd0 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002686:	4293      	cmp	r3, r2
 8002688:	d901      	bls.n	800268e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e053      	b.n	8002736 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800268e:	4b2d      	ldr	r3, [pc, #180]	@ (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f003 020c 	and.w	r2, r3, #12
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	429a      	cmp	r2, r3
 800269e:	d1eb      	bne.n	8002678 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026a0:	4b27      	ldr	r3, [pc, #156]	@ (8002740 <HAL_RCC_ClockConfig+0x1c0>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0307 	and.w	r3, r3, #7
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d210      	bcs.n	80026d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ae:	4b24      	ldr	r3, [pc, #144]	@ (8002740 <HAL_RCC_ClockConfig+0x1c0>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f023 0207 	bic.w	r2, r3, #7
 80026b6:	4922      	ldr	r1, [pc, #136]	@ (8002740 <HAL_RCC_ClockConfig+0x1c0>)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026be:	4b20      	ldr	r3, [pc, #128]	@ (8002740 <HAL_RCC_ClockConfig+0x1c0>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0307 	and.w	r3, r3, #7
 80026c6:	683a      	ldr	r2, [r7, #0]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d001      	beq.n	80026d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e032      	b.n	8002736 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0304 	and.w	r3, r3, #4
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d008      	beq.n	80026ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026dc:	4b19      	ldr	r3, [pc, #100]	@ (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	4916      	ldr	r1, [pc, #88]	@ (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0308 	and.w	r3, r3, #8
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d009      	beq.n	800270e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026fa:	4b12      	ldr	r3, [pc, #72]	@ (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	490e      	ldr	r1, [pc, #56]	@ (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 800270a:	4313      	orrs	r3, r2
 800270c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800270e:	f000 f821 	bl	8002754 <HAL_RCC_GetSysClockFreq>
 8002712:	4602      	mov	r2, r0
 8002714:	4b0b      	ldr	r3, [pc, #44]	@ (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	091b      	lsrs	r3, r3, #4
 800271a:	f003 030f 	and.w	r3, r3, #15
 800271e:	490a      	ldr	r1, [pc, #40]	@ (8002748 <HAL_RCC_ClockConfig+0x1c8>)
 8002720:	5ccb      	ldrb	r3, [r1, r3]
 8002722:	fa22 f303 	lsr.w	r3, r2, r3
 8002726:	4a09      	ldr	r2, [pc, #36]	@ (800274c <HAL_RCC_ClockConfig+0x1cc>)
 8002728:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800272a:	4b09      	ldr	r3, [pc, #36]	@ (8002750 <HAL_RCC_ClockConfig+0x1d0>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4618      	mov	r0, r3
 8002730:	f7fe fa8c 	bl	8000c4c <HAL_InitTick>

  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	40022000 	.word	0x40022000
 8002744:	40021000 	.word	0x40021000
 8002748:	08004904 	.word	0x08004904
 800274c:	20000000 	.word	0x20000000
 8002750:	20000004 	.word	0x20000004

08002754 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002754:	b480      	push	{r7}
 8002756:	b087      	sub	sp, #28
 8002758:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800275a:	2300      	movs	r3, #0
 800275c:	60fb      	str	r3, [r7, #12]
 800275e:	2300      	movs	r3, #0
 8002760:	60bb      	str	r3, [r7, #8]
 8002762:	2300      	movs	r3, #0
 8002764:	617b      	str	r3, [r7, #20]
 8002766:	2300      	movs	r3, #0
 8002768:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800276a:	2300      	movs	r3, #0
 800276c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800276e:	4b1e      	ldr	r3, [pc, #120]	@ (80027e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f003 030c 	and.w	r3, r3, #12
 800277a:	2b04      	cmp	r3, #4
 800277c:	d002      	beq.n	8002784 <HAL_RCC_GetSysClockFreq+0x30>
 800277e:	2b08      	cmp	r3, #8
 8002780:	d003      	beq.n	800278a <HAL_RCC_GetSysClockFreq+0x36>
 8002782:	e027      	b.n	80027d4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002784:	4b19      	ldr	r3, [pc, #100]	@ (80027ec <HAL_RCC_GetSysClockFreq+0x98>)
 8002786:	613b      	str	r3, [r7, #16]
      break;
 8002788:	e027      	b.n	80027da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	0c9b      	lsrs	r3, r3, #18
 800278e:	f003 030f 	and.w	r3, r3, #15
 8002792:	4a17      	ldr	r2, [pc, #92]	@ (80027f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002794:	5cd3      	ldrb	r3, [r2, r3]
 8002796:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d010      	beq.n	80027c4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027a2:	4b11      	ldr	r3, [pc, #68]	@ (80027e8 <HAL_RCC_GetSysClockFreq+0x94>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	0c5b      	lsrs	r3, r3, #17
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	4a11      	ldr	r2, [pc, #68]	@ (80027f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80027ae:	5cd3      	ldrb	r3, [r2, r3]
 80027b0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a0d      	ldr	r2, [pc, #52]	@ (80027ec <HAL_RCC_GetSysClockFreq+0x98>)
 80027b6:	fb03 f202 	mul.w	r2, r3, r2
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c0:	617b      	str	r3, [r7, #20]
 80027c2:	e004      	b.n	80027ce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a0c      	ldr	r2, [pc, #48]	@ (80027f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80027c8:	fb02 f303 	mul.w	r3, r2, r3
 80027cc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	613b      	str	r3, [r7, #16]
      break;
 80027d2:	e002      	b.n	80027da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027d4:	4b05      	ldr	r3, [pc, #20]	@ (80027ec <HAL_RCC_GetSysClockFreq+0x98>)
 80027d6:	613b      	str	r3, [r7, #16]
      break;
 80027d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027da:	693b      	ldr	r3, [r7, #16]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	371c      	adds	r7, #28
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bc80      	pop	{r7}
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	40021000 	.word	0x40021000
 80027ec:	007a1200 	.word	0x007a1200
 80027f0:	0800491c 	.word	0x0800491c
 80027f4:	0800492c 	.word	0x0800492c
 80027f8:	003d0900 	.word	0x003d0900

080027fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002800:	4b02      	ldr	r3, [pc, #8]	@ (800280c <HAL_RCC_GetHCLKFreq+0x10>)
 8002802:	681b      	ldr	r3, [r3, #0]
}
 8002804:	4618      	mov	r0, r3
 8002806:	46bd      	mov	sp, r7
 8002808:	bc80      	pop	{r7}
 800280a:	4770      	bx	lr
 800280c:	20000000 	.word	0x20000000

08002810 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002814:	f7ff fff2 	bl	80027fc <HAL_RCC_GetHCLKFreq>
 8002818:	4602      	mov	r2, r0
 800281a:	4b05      	ldr	r3, [pc, #20]	@ (8002830 <HAL_RCC_GetPCLK1Freq+0x20>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	0a1b      	lsrs	r3, r3, #8
 8002820:	f003 0307 	and.w	r3, r3, #7
 8002824:	4903      	ldr	r1, [pc, #12]	@ (8002834 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002826:	5ccb      	ldrb	r3, [r1, r3]
 8002828:	fa22 f303 	lsr.w	r3, r2, r3
}
 800282c:	4618      	mov	r0, r3
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40021000 	.word	0x40021000
 8002834:	08004914 	.word	0x08004914

08002838 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800283c:	f7ff ffde 	bl	80027fc <HAL_RCC_GetHCLKFreq>
 8002840:	4602      	mov	r2, r0
 8002842:	4b05      	ldr	r3, [pc, #20]	@ (8002858 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	0adb      	lsrs	r3, r3, #11
 8002848:	f003 0307 	and.w	r3, r3, #7
 800284c:	4903      	ldr	r1, [pc, #12]	@ (800285c <HAL_RCC_GetPCLK2Freq+0x24>)
 800284e:	5ccb      	ldrb	r3, [r1, r3]
 8002850:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002854:	4618      	mov	r0, r3
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40021000 	.word	0x40021000
 800285c:	08004914 	.word	0x08004914

08002860 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002868:	4b0a      	ldr	r3, [pc, #40]	@ (8002894 <RCC_Delay+0x34>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a0a      	ldr	r2, [pc, #40]	@ (8002898 <RCC_Delay+0x38>)
 800286e:	fba2 2303 	umull	r2, r3, r2, r3
 8002872:	0a5b      	lsrs	r3, r3, #9
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	fb02 f303 	mul.w	r3, r2, r3
 800287a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800287c:	bf00      	nop
  }
  while (Delay --);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	1e5a      	subs	r2, r3, #1
 8002882:	60fa      	str	r2, [r7, #12]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1f9      	bne.n	800287c <RCC_Delay+0x1c>
}
 8002888:	bf00      	nop
 800288a:	bf00      	nop
 800288c:	3714      	adds	r7, #20
 800288e:	46bd      	mov	sp, r7
 8002890:	bc80      	pop	{r7}
 8002892:	4770      	bx	lr
 8002894:	20000000 	.word	0x20000000
 8002898:	10624dd3 	.word	0x10624dd3

0800289c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e042      	b.n	8002934 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d106      	bne.n	80028c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f7fe f82e 	bl	8000924 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2224      	movs	r2, #36	@ 0x24
 80028cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68da      	ldr	r2, [r3, #12]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80028de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 fd63 	bl	80033ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	691a      	ldr	r2, [r3, #16]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80028f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	695a      	ldr	r2, [r3, #20]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002904:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68da      	ldr	r2, [r3, #12]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002914:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2220      	movs	r2, #32
 8002920:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2220      	movs	r2, #32
 8002928:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3708      	adds	r7, #8
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b08a      	sub	sp, #40	@ 0x28
 8002940:	af02      	add	r7, sp, #8
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	603b      	str	r3, [r7, #0]
 8002948:	4613      	mov	r3, r2
 800294a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800294c:	2300      	movs	r3, #0
 800294e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002956:	b2db      	uxtb	r3, r3
 8002958:	2b20      	cmp	r3, #32
 800295a:	d175      	bne.n	8002a48 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d002      	beq.n	8002968 <HAL_UART_Transmit+0x2c>
 8002962:	88fb      	ldrh	r3, [r7, #6]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e06e      	b.n	8002a4a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2221      	movs	r2, #33	@ 0x21
 8002976:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800297a:	f7fe f9a9 	bl	8000cd0 <HAL_GetTick>
 800297e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	88fa      	ldrh	r2, [r7, #6]
 8002984:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	88fa      	ldrh	r2, [r7, #6]
 800298a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002994:	d108      	bne.n	80029a8 <HAL_UART_Transmit+0x6c>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d104      	bne.n	80029a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800299e:	2300      	movs	r3, #0
 80029a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	61bb      	str	r3, [r7, #24]
 80029a6:	e003      	b.n	80029b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029ac:	2300      	movs	r3, #0
 80029ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80029b0:	e02e      	b.n	8002a10 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	9300      	str	r3, [sp, #0]
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	2200      	movs	r2, #0
 80029ba:	2180      	movs	r1, #128	@ 0x80
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f000 fb01 	bl	8002fc4 <UART_WaitOnFlagUntilTimeout>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d005      	beq.n	80029d4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2220      	movs	r2, #32
 80029cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e03a      	b.n	8002a4a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d10b      	bne.n	80029f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	881b      	ldrh	r3, [r3, #0]
 80029de:	461a      	mov	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	3302      	adds	r3, #2
 80029ee:	61bb      	str	r3, [r7, #24]
 80029f0:	e007      	b.n	8002a02 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	781a      	ldrb	r2, [r3, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	3301      	adds	r3, #1
 8002a00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1cb      	bne.n	80029b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	9300      	str	r3, [sp, #0]
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	2200      	movs	r2, #0
 8002a22:	2140      	movs	r1, #64	@ 0x40
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f000 facd 	bl	8002fc4 <UART_WaitOnFlagUntilTimeout>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d005      	beq.n	8002a3c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2220      	movs	r2, #32
 8002a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e006      	b.n	8002a4a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2220      	movs	r2, #32
 8002a40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002a44:	2300      	movs	r3, #0
 8002a46:	e000      	b.n	8002a4a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002a48:	2302      	movs	r3, #2
  }
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3720      	adds	r7, #32
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
	...

08002a54 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b0ba      	sub	sp, #232	@ 0xe8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002a80:	2300      	movs	r3, #0
 8002a82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a8a:	f003 030f 	and.w	r3, r3, #15
 8002a8e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002a92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10f      	bne.n	8002aba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a9e:	f003 0320 	and.w	r3, r3, #32
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d009      	beq.n	8002aba <HAL_UART_IRQHandler+0x66>
 8002aa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002aaa:	f003 0320 	and.w	r3, r3, #32
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d003      	beq.n	8002aba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 fbbc 	bl	8003230 <UART_Receive_IT>
      return;
 8002ab8:	e25b      	b.n	8002f72 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002aba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f000 80de 	beq.w	8002c80 <HAL_UART_IRQHandler+0x22c>
 8002ac4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d106      	bne.n	8002ade <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002ad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ad4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 80d1 	beq.w	8002c80 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00b      	beq.n	8002b02 <HAL_UART_IRQHandler+0xae>
 8002aea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002aee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d005      	beq.n	8002b02 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002afa:	f043 0201 	orr.w	r2, r3, #1
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b06:	f003 0304 	and.w	r3, r3, #4
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00b      	beq.n	8002b26 <HAL_UART_IRQHandler+0xd2>
 8002b0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d005      	beq.n	8002b26 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b1e:	f043 0202 	orr.w	r2, r3, #2
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00b      	beq.n	8002b4a <HAL_UART_IRQHandler+0xf6>
 8002b32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d005      	beq.n	8002b4a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b42:	f043 0204 	orr.w	r2, r3, #4
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b4e:	f003 0308 	and.w	r3, r3, #8
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d011      	beq.n	8002b7a <HAL_UART_IRQHandler+0x126>
 8002b56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b5a:	f003 0320 	and.w	r3, r3, #32
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d105      	bne.n	8002b6e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002b62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d005      	beq.n	8002b7a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b72:	f043 0208 	orr.w	r2, r3, #8
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f000 81f2 	beq.w	8002f68 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b88:	f003 0320 	and.w	r3, r3, #32
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d008      	beq.n	8002ba2 <HAL_UART_IRQHandler+0x14e>
 8002b90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b94:	f003 0320 	and.w	r3, r3, #32
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d002      	beq.n	8002ba2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f000 fb47 	bl	8003230 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	695b      	ldr	r3, [r3, #20]
 8002ba8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	bf14      	ite	ne
 8002bb0:	2301      	movne	r3, #1
 8002bb2:	2300      	moveq	r3, #0
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bbe:	f003 0308 	and.w	r3, r3, #8
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d103      	bne.n	8002bce <HAL_UART_IRQHandler+0x17a>
 8002bc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d04f      	beq.n	8002c6e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 fa51 	bl	8003076 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d041      	beq.n	8002c66 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	3314      	adds	r3, #20
 8002be8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002bf0:	e853 3f00 	ldrex	r3, [r3]
 8002bf4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002bf8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002bfc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	3314      	adds	r3, #20
 8002c0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002c0e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002c12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002c1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002c1e:	e841 2300 	strex	r3, r2, [r1]
 8002c22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002c26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1d9      	bne.n	8002be2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d013      	beq.n	8002c5e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c3a:	4a7e      	ldr	r2, [pc, #504]	@ (8002e34 <HAL_UART_IRQHandler+0x3e0>)
 8002c3c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7ff f806 	bl	8001c54 <HAL_DMA_Abort_IT>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d016      	beq.n	8002c7c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002c58:	4610      	mov	r0, r2
 8002c5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c5c:	e00e      	b.n	8002c7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 f99c 	bl	8002f9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c64:	e00a      	b.n	8002c7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 f998 	bl	8002f9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c6c:	e006      	b.n	8002c7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 f994 	bl	8002f9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002c7a:	e175      	b.n	8002f68 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c7c:	bf00      	nop
    return;
 8002c7e:	e173      	b.n	8002f68 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	f040 814f 	bne.w	8002f28 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c8e:	f003 0310 	and.w	r3, r3, #16
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f000 8148 	beq.w	8002f28 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c9c:	f003 0310 	and.w	r3, r3, #16
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f000 8141 	beq.w	8002f28 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60bb      	str	r3, [r7, #8]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	60bb      	str	r3, [r7, #8]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f000 80b6 	beq.w	8002e38 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002cd8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f000 8145 	beq.w	8002f6c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002ce6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002cea:	429a      	cmp	r2, r3
 8002cec:	f080 813e 	bcs.w	8002f6c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002cf6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	2b20      	cmp	r3, #32
 8002d00:	f000 8088 	beq.w	8002e14 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	330c      	adds	r3, #12
 8002d0a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d12:	e853 3f00 	ldrex	r3, [r3]
 8002d16:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002d1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d1e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d22:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	330c      	adds	r3, #12
 8002d2c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002d30:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002d34:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d38:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002d3c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002d40:	e841 2300 	strex	r3, r2, [r1]
 8002d44:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002d48:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1d9      	bne.n	8002d04 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	3314      	adds	r3, #20
 8002d56:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d58:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d5a:	e853 3f00 	ldrex	r3, [r3]
 8002d5e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002d60:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d62:	f023 0301 	bic.w	r3, r3, #1
 8002d66:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	3314      	adds	r3, #20
 8002d70:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002d74:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002d78:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d7a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002d7c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002d80:	e841 2300 	strex	r3, r2, [r1]
 8002d84:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002d86:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1e1      	bne.n	8002d50 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	3314      	adds	r3, #20
 8002d92:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d94:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d96:	e853 3f00 	ldrex	r3, [r3]
 8002d9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002d9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002da2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	3314      	adds	r3, #20
 8002dac:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002db0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002db2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002db4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002db6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002db8:	e841 2300 	strex	r3, r2, [r1]
 8002dbc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002dbe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1e3      	bne.n	8002d8c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2220      	movs	r2, #32
 8002dc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	330c      	adds	r3, #12
 8002dd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ddc:	e853 3f00 	ldrex	r3, [r3]
 8002de0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002de2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002de4:	f023 0310 	bic.w	r3, r3, #16
 8002de8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	330c      	adds	r3, #12
 8002df2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002df6:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002df8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dfa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002dfc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002dfe:	e841 2300 	strex	r3, r2, [r1]
 8002e02:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002e04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1e3      	bne.n	8002dd2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7fe fee5 	bl	8001bde <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2202      	movs	r2, #2
 8002e18:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	4619      	mov	r1, r3
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 f8bf 	bl	8002fae <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e30:	e09c      	b.n	8002f6c <HAL_UART_IRQHandler+0x518>
 8002e32:	bf00      	nop
 8002e34:	0800313b 	.word	0x0800313b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f000 808e 	beq.w	8002f70 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002e54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f000 8089 	beq.w	8002f70 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	330c      	adds	r3, #12
 8002e64:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e68:	e853 3f00 	ldrex	r3, [r3]
 8002e6c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002e6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e74:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	330c      	adds	r3, #12
 8002e7e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002e82:	647a      	str	r2, [r7, #68]	@ 0x44
 8002e84:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e86:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002e88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e8a:	e841 2300 	strex	r3, r2, [r1]
 8002e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002e90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1e3      	bne.n	8002e5e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	3314      	adds	r3, #20
 8002e9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea0:	e853 3f00 	ldrex	r3, [r3]
 8002ea4:	623b      	str	r3, [r7, #32]
   return(result);
 8002ea6:	6a3b      	ldr	r3, [r7, #32]
 8002ea8:	f023 0301 	bic.w	r3, r3, #1
 8002eac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	3314      	adds	r3, #20
 8002eb6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002eba:	633a      	str	r2, [r7, #48]	@ 0x30
 8002ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ebe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ec0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ec2:	e841 2300 	strex	r3, r2, [r1]
 8002ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1e3      	bne.n	8002e96 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2220      	movs	r2, #32
 8002ed2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	330c      	adds	r3, #12
 8002ee2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	e853 3f00 	ldrex	r3, [r3]
 8002eea:	60fb      	str	r3, [r7, #12]
   return(result);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f023 0310 	bic.w	r3, r3, #16
 8002ef2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	330c      	adds	r3, #12
 8002efc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002f00:	61fa      	str	r2, [r7, #28]
 8002f02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f04:	69b9      	ldr	r1, [r7, #24]
 8002f06:	69fa      	ldr	r2, [r7, #28]
 8002f08:	e841 2300 	strex	r3, r2, [r1]
 8002f0c:	617b      	str	r3, [r7, #20]
   return(result);
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1e3      	bne.n	8002edc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2202      	movs	r2, #2
 8002f18:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002f1e:	4619      	mov	r1, r3
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f000 f844 	bl	8002fae <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f26:	e023      	b.n	8002f70 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d009      	beq.n	8002f48 <HAL_UART_IRQHandler+0x4f4>
 8002f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d003      	beq.n	8002f48 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 f90e 	bl	8003162 <UART_Transmit_IT>
    return;
 8002f46:	e014      	b.n	8002f72 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00e      	beq.n	8002f72 <HAL_UART_IRQHandler+0x51e>
 8002f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d008      	beq.n	8002f72 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 f94d 	bl	8003200 <UART_EndTransmit_IT>
    return;
 8002f66:	e004      	b.n	8002f72 <HAL_UART_IRQHandler+0x51e>
    return;
 8002f68:	bf00      	nop
 8002f6a:	e002      	b.n	8002f72 <HAL_UART_IRQHandler+0x51e>
      return;
 8002f6c:	bf00      	nop
 8002f6e:	e000      	b.n	8002f72 <HAL_UART_IRQHandler+0x51e>
      return;
 8002f70:	bf00      	nop
  }
}
 8002f72:	37e8      	adds	r7, #232	@ 0xe8
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bc80      	pop	{r7}
 8002f88:	4770      	bx	lr

08002f8a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b083      	sub	sp, #12
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002f92:	bf00      	nop
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr

08002f9c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bc80      	pop	{r7}
 8002fac:	4770      	bx	lr

08002fae <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b083      	sub	sp, #12
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002fba:	bf00      	nop
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bc80      	pop	{r7}
 8002fc2:	4770      	bx	lr

08002fc4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	603b      	str	r3, [r7, #0]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fd4:	e03b      	b.n	800304e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fd6:	6a3b      	ldr	r3, [r7, #32]
 8002fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fdc:	d037      	beq.n	800304e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fde:	f7fd fe77 	bl	8000cd0 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	6a3a      	ldr	r2, [r7, #32]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d302      	bcc.n	8002ff4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002fee:	6a3b      	ldr	r3, [r7, #32]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d101      	bne.n	8002ff8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e03a      	b.n	800306e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	f003 0304 	and.w	r3, r3, #4
 8003002:	2b00      	cmp	r3, #0
 8003004:	d023      	beq.n	800304e <UART_WaitOnFlagUntilTimeout+0x8a>
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	2b80      	cmp	r3, #128	@ 0x80
 800300a:	d020      	beq.n	800304e <UART_WaitOnFlagUntilTimeout+0x8a>
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	2b40      	cmp	r3, #64	@ 0x40
 8003010:	d01d      	beq.n	800304e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0308 	and.w	r3, r3, #8
 800301c:	2b08      	cmp	r3, #8
 800301e:	d116      	bne.n	800304e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003020:	2300      	movs	r3, #0
 8003022:	617b      	str	r3, [r7, #20]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	617b      	str	r3, [r7, #20]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	617b      	str	r3, [r7, #20]
 8003034:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f000 f81d 	bl	8003076 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2208      	movs	r2, #8
 8003040:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e00f      	b.n	800306e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	4013      	ands	r3, r2
 8003058:	68ba      	ldr	r2, [r7, #8]
 800305a:	429a      	cmp	r2, r3
 800305c:	bf0c      	ite	eq
 800305e:	2301      	moveq	r3, #1
 8003060:	2300      	movne	r3, #0
 8003062:	b2db      	uxtb	r3, r3
 8003064:	461a      	mov	r2, r3
 8003066:	79fb      	ldrb	r3, [r7, #7]
 8003068:	429a      	cmp	r2, r3
 800306a:	d0b4      	beq.n	8002fd6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3718      	adds	r7, #24
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003076:	b480      	push	{r7}
 8003078:	b095      	sub	sp, #84	@ 0x54
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	330c      	adds	r3, #12
 8003084:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003086:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003088:	e853 3f00 	ldrex	r3, [r3]
 800308c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800308e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003090:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003094:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	330c      	adds	r3, #12
 800309c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800309e:	643a      	str	r2, [r7, #64]	@ 0x40
 80030a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80030a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80030a6:	e841 2300 	strex	r3, r2, [r1]
 80030aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80030ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1e5      	bne.n	800307e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	3314      	adds	r3, #20
 80030b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ba:	6a3b      	ldr	r3, [r7, #32]
 80030bc:	e853 3f00 	ldrex	r3, [r3]
 80030c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	f023 0301 	bic.w	r3, r3, #1
 80030c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	3314      	adds	r3, #20
 80030d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80030d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80030d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030da:	e841 2300 	strex	r3, r2, [r1]
 80030de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80030e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1e5      	bne.n	80030b2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d119      	bne.n	8003122 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	330c      	adds	r3, #12
 80030f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	e853 3f00 	ldrex	r3, [r3]
 80030fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	f023 0310 	bic.w	r3, r3, #16
 8003104:	647b      	str	r3, [r7, #68]	@ 0x44
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	330c      	adds	r3, #12
 800310c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800310e:	61ba      	str	r2, [r7, #24]
 8003110:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003112:	6979      	ldr	r1, [r7, #20]
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	e841 2300 	strex	r3, r2, [r1]
 800311a:	613b      	str	r3, [r7, #16]
   return(result);
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1e5      	bne.n	80030ee <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2220      	movs	r2, #32
 8003126:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003130:	bf00      	nop
 8003132:	3754      	adds	r7, #84	@ 0x54
 8003134:	46bd      	mov	sp, r7
 8003136:	bc80      	pop	{r7}
 8003138:	4770      	bx	lr

0800313a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800313a:	b580      	push	{r7, lr}
 800313c:	b084      	sub	sp, #16
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003146:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2200      	movs	r2, #0
 800314c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	f7ff ff21 	bl	8002f9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800315a:	bf00      	nop
 800315c:	3710      	adds	r7, #16
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003162:	b480      	push	{r7}
 8003164:	b085      	sub	sp, #20
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b21      	cmp	r3, #33	@ 0x21
 8003174:	d13e      	bne.n	80031f4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800317e:	d114      	bne.n	80031aa <UART_Transmit_IT+0x48>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d110      	bne.n	80031aa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	881b      	ldrh	r3, [r3, #0]
 8003192:	461a      	mov	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800319c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	1c9a      	adds	r2, r3, #2
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	621a      	str	r2, [r3, #32]
 80031a8:	e008      	b.n	80031bc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	1c59      	adds	r1, r3, #1
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	6211      	str	r1, [r2, #32]
 80031b4:	781a      	ldrb	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	3b01      	subs	r3, #1
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	4619      	mov	r1, r3
 80031ca:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d10f      	bne.n	80031f0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68da      	ldr	r2, [r3, #12]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80031de:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68da      	ldr	r2, [r3, #12]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80031ee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80031f0:	2300      	movs	r3, #0
 80031f2:	e000      	b.n	80031f6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80031f4:	2302      	movs	r3, #2
  }
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3714      	adds	r7, #20
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bc80      	pop	{r7}
 80031fe:	4770      	bx	lr

08003200 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68da      	ldr	r2, [r3, #12]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003216:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2220      	movs	r2, #32
 800321c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f7ff fea9 	bl	8002f78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	3708      	adds	r7, #8
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b08c      	sub	sp, #48	@ 0x30
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800323e:	b2db      	uxtb	r3, r3
 8003240:	2b22      	cmp	r3, #34	@ 0x22
 8003242:	f040 80ae 	bne.w	80033a2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800324e:	d117      	bne.n	8003280 <UART_Receive_IT+0x50>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	691b      	ldr	r3, [r3, #16]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d113      	bne.n	8003280 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003258:	2300      	movs	r3, #0
 800325a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003260:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	b29b      	uxth	r3, r3
 800326a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800326e:	b29a      	uxth	r2, r3
 8003270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003272:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003278:	1c9a      	adds	r2, r3, #2
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	629a      	str	r2, [r3, #40]	@ 0x28
 800327e:	e026      	b.n	80032ce <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003284:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003286:	2300      	movs	r3, #0
 8003288:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003292:	d007      	beq.n	80032a4 <UART_Receive_IT+0x74>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d10a      	bne.n	80032b2 <UART_Receive_IT+0x82>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	691b      	ldr	r3, [r3, #16]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d106      	bne.n	80032b2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	b2da      	uxtb	r2, r3
 80032ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032ae:	701a      	strb	r2, [r3, #0]
 80032b0:	e008      	b.n	80032c4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80032be:	b2da      	uxtb	r2, r3
 80032c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032c2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032c8:	1c5a      	adds	r2, r3, #1
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	3b01      	subs	r3, #1
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	4619      	mov	r1, r3
 80032dc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d15d      	bne.n	800339e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68da      	ldr	r2, [r3, #12]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f022 0220 	bic.w	r2, r2, #32
 80032f0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68da      	ldr	r2, [r3, #12]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003300:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	695a      	ldr	r2, [r3, #20]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f022 0201 	bic.w	r2, r2, #1
 8003310:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2220      	movs	r2, #32
 8003316:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003324:	2b01      	cmp	r3, #1
 8003326:	d135      	bne.n	8003394 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	330c      	adds	r3, #12
 8003334:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	e853 3f00 	ldrex	r3, [r3]
 800333c:	613b      	str	r3, [r7, #16]
   return(result);
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	f023 0310 	bic.w	r3, r3, #16
 8003344:	627b      	str	r3, [r7, #36]	@ 0x24
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	330c      	adds	r3, #12
 800334c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800334e:	623a      	str	r2, [r7, #32]
 8003350:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003352:	69f9      	ldr	r1, [r7, #28]
 8003354:	6a3a      	ldr	r2, [r7, #32]
 8003356:	e841 2300 	strex	r3, r2, [r1]
 800335a:	61bb      	str	r3, [r7, #24]
   return(result);
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1e5      	bne.n	800332e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0310 	and.w	r3, r3, #16
 800336c:	2b10      	cmp	r3, #16
 800336e:	d10a      	bne.n	8003386 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003370:	2300      	movs	r3, #0
 8003372:	60fb      	str	r3, [r7, #12]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	60fb      	str	r3, [r7, #12]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	60fb      	str	r3, [r7, #12]
 8003384:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800338a:	4619      	mov	r1, r3
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f7ff fe0e 	bl	8002fae <HAL_UARTEx_RxEventCallback>
 8003392:	e002      	b.n	800339a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f7ff fdf8 	bl	8002f8a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800339a:	2300      	movs	r3, #0
 800339c:	e002      	b.n	80033a4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800339e:	2300      	movs	r3, #0
 80033a0:	e000      	b.n	80033a4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80033a2:	2302      	movs	r3, #2
  }
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3730      	adds	r7, #48	@ 0x30
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	68da      	ldr	r2, [r3, #12]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	689a      	ldr	r2, [r3, #8]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	431a      	orrs	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	4313      	orrs	r3, r2
 80033da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80033e6:	f023 030c 	bic.w	r3, r3, #12
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	6812      	ldr	r2, [r2, #0]
 80033ee:	68b9      	ldr	r1, [r7, #8]
 80033f0:	430b      	orrs	r3, r1
 80033f2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	699a      	ldr	r2, [r3, #24]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	430a      	orrs	r2, r1
 8003408:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a2c      	ldr	r2, [pc, #176]	@ (80034c0 <UART_SetConfig+0x114>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d103      	bne.n	800341c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003414:	f7ff fa10 	bl	8002838 <HAL_RCC_GetPCLK2Freq>
 8003418:	60f8      	str	r0, [r7, #12]
 800341a:	e002      	b.n	8003422 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800341c:	f7ff f9f8 	bl	8002810 <HAL_RCC_GetPCLK1Freq>
 8003420:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	4613      	mov	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	4413      	add	r3, r2
 800342a:	009a      	lsls	r2, r3, #2
 800342c:	441a      	add	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	fbb2 f3f3 	udiv	r3, r2, r3
 8003438:	4a22      	ldr	r2, [pc, #136]	@ (80034c4 <UART_SetConfig+0x118>)
 800343a:	fba2 2303 	umull	r2, r3, r2, r3
 800343e:	095b      	lsrs	r3, r3, #5
 8003440:	0119      	lsls	r1, r3, #4
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	4613      	mov	r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	4413      	add	r3, r2
 800344a:	009a      	lsls	r2, r3, #2
 800344c:	441a      	add	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	fbb2 f2f3 	udiv	r2, r2, r3
 8003458:	4b1a      	ldr	r3, [pc, #104]	@ (80034c4 <UART_SetConfig+0x118>)
 800345a:	fba3 0302 	umull	r0, r3, r3, r2
 800345e:	095b      	lsrs	r3, r3, #5
 8003460:	2064      	movs	r0, #100	@ 0x64
 8003462:	fb00 f303 	mul.w	r3, r0, r3
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	011b      	lsls	r3, r3, #4
 800346a:	3332      	adds	r3, #50	@ 0x32
 800346c:	4a15      	ldr	r2, [pc, #84]	@ (80034c4 <UART_SetConfig+0x118>)
 800346e:	fba2 2303 	umull	r2, r3, r2, r3
 8003472:	095b      	lsrs	r3, r3, #5
 8003474:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003478:	4419      	add	r1, r3
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	4613      	mov	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	4413      	add	r3, r2
 8003482:	009a      	lsls	r2, r3, #2
 8003484:	441a      	add	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003490:	4b0c      	ldr	r3, [pc, #48]	@ (80034c4 <UART_SetConfig+0x118>)
 8003492:	fba3 0302 	umull	r0, r3, r3, r2
 8003496:	095b      	lsrs	r3, r3, #5
 8003498:	2064      	movs	r0, #100	@ 0x64
 800349a:	fb00 f303 	mul.w	r3, r0, r3
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	011b      	lsls	r3, r3, #4
 80034a2:	3332      	adds	r3, #50	@ 0x32
 80034a4:	4a07      	ldr	r2, [pc, #28]	@ (80034c4 <UART_SetConfig+0x118>)
 80034a6:	fba2 2303 	umull	r2, r3, r2, r3
 80034aa:	095b      	lsrs	r3, r3, #5
 80034ac:	f003 020f 	and.w	r2, r3, #15
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	440a      	add	r2, r1
 80034b6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80034b8:	bf00      	nop
 80034ba:	3710      	adds	r7, #16
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	40013800 	.word	0x40013800
 80034c4:	51eb851f 	.word	0x51eb851f

080034c8 <malloc>:
 80034c8:	4b02      	ldr	r3, [pc, #8]	@ (80034d4 <malloc+0xc>)
 80034ca:	4601      	mov	r1, r0
 80034cc:	6818      	ldr	r0, [r3, #0]
 80034ce:	f000 b825 	b.w	800351c <_malloc_r>
 80034d2:	bf00      	nop
 80034d4:	20000018 	.word	0x20000018

080034d8 <sbrk_aligned>:
 80034d8:	b570      	push	{r4, r5, r6, lr}
 80034da:	4e0f      	ldr	r6, [pc, #60]	@ (8003518 <sbrk_aligned+0x40>)
 80034dc:	460c      	mov	r4, r1
 80034de:	6831      	ldr	r1, [r6, #0]
 80034e0:	4605      	mov	r5, r0
 80034e2:	b911      	cbnz	r1, 80034ea <sbrk_aligned+0x12>
 80034e4:	f000 fb20 	bl	8003b28 <_sbrk_r>
 80034e8:	6030      	str	r0, [r6, #0]
 80034ea:	4621      	mov	r1, r4
 80034ec:	4628      	mov	r0, r5
 80034ee:	f000 fb1b 	bl	8003b28 <_sbrk_r>
 80034f2:	1c43      	adds	r3, r0, #1
 80034f4:	d103      	bne.n	80034fe <sbrk_aligned+0x26>
 80034f6:	f04f 34ff 	mov.w	r4, #4294967295
 80034fa:	4620      	mov	r0, r4
 80034fc:	bd70      	pop	{r4, r5, r6, pc}
 80034fe:	1cc4      	adds	r4, r0, #3
 8003500:	f024 0403 	bic.w	r4, r4, #3
 8003504:	42a0      	cmp	r0, r4
 8003506:	d0f8      	beq.n	80034fa <sbrk_aligned+0x22>
 8003508:	1a21      	subs	r1, r4, r0
 800350a:	4628      	mov	r0, r5
 800350c:	f000 fb0c 	bl	8003b28 <_sbrk_r>
 8003510:	3001      	adds	r0, #1
 8003512:	d1f2      	bne.n	80034fa <sbrk_aligned+0x22>
 8003514:	e7ef      	b.n	80034f6 <sbrk_aligned+0x1e>
 8003516:	bf00      	nop
 8003518:	20000154 	.word	0x20000154

0800351c <_malloc_r>:
 800351c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003520:	1ccd      	adds	r5, r1, #3
 8003522:	f025 0503 	bic.w	r5, r5, #3
 8003526:	3508      	adds	r5, #8
 8003528:	2d0c      	cmp	r5, #12
 800352a:	bf38      	it	cc
 800352c:	250c      	movcc	r5, #12
 800352e:	2d00      	cmp	r5, #0
 8003530:	4606      	mov	r6, r0
 8003532:	db01      	blt.n	8003538 <_malloc_r+0x1c>
 8003534:	42a9      	cmp	r1, r5
 8003536:	d904      	bls.n	8003542 <_malloc_r+0x26>
 8003538:	230c      	movs	r3, #12
 800353a:	6033      	str	r3, [r6, #0]
 800353c:	2000      	movs	r0, #0
 800353e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003542:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003618 <_malloc_r+0xfc>
 8003546:	f000 f869 	bl	800361c <__malloc_lock>
 800354a:	f8d8 3000 	ldr.w	r3, [r8]
 800354e:	461c      	mov	r4, r3
 8003550:	bb44      	cbnz	r4, 80035a4 <_malloc_r+0x88>
 8003552:	4629      	mov	r1, r5
 8003554:	4630      	mov	r0, r6
 8003556:	f7ff ffbf 	bl	80034d8 <sbrk_aligned>
 800355a:	1c43      	adds	r3, r0, #1
 800355c:	4604      	mov	r4, r0
 800355e:	d158      	bne.n	8003612 <_malloc_r+0xf6>
 8003560:	f8d8 4000 	ldr.w	r4, [r8]
 8003564:	4627      	mov	r7, r4
 8003566:	2f00      	cmp	r7, #0
 8003568:	d143      	bne.n	80035f2 <_malloc_r+0xd6>
 800356a:	2c00      	cmp	r4, #0
 800356c:	d04b      	beq.n	8003606 <_malloc_r+0xea>
 800356e:	6823      	ldr	r3, [r4, #0]
 8003570:	4639      	mov	r1, r7
 8003572:	4630      	mov	r0, r6
 8003574:	eb04 0903 	add.w	r9, r4, r3
 8003578:	f000 fad6 	bl	8003b28 <_sbrk_r>
 800357c:	4581      	cmp	r9, r0
 800357e:	d142      	bne.n	8003606 <_malloc_r+0xea>
 8003580:	6821      	ldr	r1, [r4, #0]
 8003582:	4630      	mov	r0, r6
 8003584:	1a6d      	subs	r5, r5, r1
 8003586:	4629      	mov	r1, r5
 8003588:	f7ff ffa6 	bl	80034d8 <sbrk_aligned>
 800358c:	3001      	adds	r0, #1
 800358e:	d03a      	beq.n	8003606 <_malloc_r+0xea>
 8003590:	6823      	ldr	r3, [r4, #0]
 8003592:	442b      	add	r3, r5
 8003594:	6023      	str	r3, [r4, #0]
 8003596:	f8d8 3000 	ldr.w	r3, [r8]
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	bb62      	cbnz	r2, 80035f8 <_malloc_r+0xdc>
 800359e:	f8c8 7000 	str.w	r7, [r8]
 80035a2:	e00f      	b.n	80035c4 <_malloc_r+0xa8>
 80035a4:	6822      	ldr	r2, [r4, #0]
 80035a6:	1b52      	subs	r2, r2, r5
 80035a8:	d420      	bmi.n	80035ec <_malloc_r+0xd0>
 80035aa:	2a0b      	cmp	r2, #11
 80035ac:	d917      	bls.n	80035de <_malloc_r+0xc2>
 80035ae:	1961      	adds	r1, r4, r5
 80035b0:	42a3      	cmp	r3, r4
 80035b2:	6025      	str	r5, [r4, #0]
 80035b4:	bf18      	it	ne
 80035b6:	6059      	strne	r1, [r3, #4]
 80035b8:	6863      	ldr	r3, [r4, #4]
 80035ba:	bf08      	it	eq
 80035bc:	f8c8 1000 	streq.w	r1, [r8]
 80035c0:	5162      	str	r2, [r4, r5]
 80035c2:	604b      	str	r3, [r1, #4]
 80035c4:	4630      	mov	r0, r6
 80035c6:	f000 f82f 	bl	8003628 <__malloc_unlock>
 80035ca:	f104 000b 	add.w	r0, r4, #11
 80035ce:	1d23      	adds	r3, r4, #4
 80035d0:	f020 0007 	bic.w	r0, r0, #7
 80035d4:	1ac2      	subs	r2, r0, r3
 80035d6:	bf1c      	itt	ne
 80035d8:	1a1b      	subne	r3, r3, r0
 80035da:	50a3      	strne	r3, [r4, r2]
 80035dc:	e7af      	b.n	800353e <_malloc_r+0x22>
 80035de:	6862      	ldr	r2, [r4, #4]
 80035e0:	42a3      	cmp	r3, r4
 80035e2:	bf0c      	ite	eq
 80035e4:	f8c8 2000 	streq.w	r2, [r8]
 80035e8:	605a      	strne	r2, [r3, #4]
 80035ea:	e7eb      	b.n	80035c4 <_malloc_r+0xa8>
 80035ec:	4623      	mov	r3, r4
 80035ee:	6864      	ldr	r4, [r4, #4]
 80035f0:	e7ae      	b.n	8003550 <_malloc_r+0x34>
 80035f2:	463c      	mov	r4, r7
 80035f4:	687f      	ldr	r7, [r7, #4]
 80035f6:	e7b6      	b.n	8003566 <_malloc_r+0x4a>
 80035f8:	461a      	mov	r2, r3
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	42a3      	cmp	r3, r4
 80035fe:	d1fb      	bne.n	80035f8 <_malloc_r+0xdc>
 8003600:	2300      	movs	r3, #0
 8003602:	6053      	str	r3, [r2, #4]
 8003604:	e7de      	b.n	80035c4 <_malloc_r+0xa8>
 8003606:	230c      	movs	r3, #12
 8003608:	4630      	mov	r0, r6
 800360a:	6033      	str	r3, [r6, #0]
 800360c:	f000 f80c 	bl	8003628 <__malloc_unlock>
 8003610:	e794      	b.n	800353c <_malloc_r+0x20>
 8003612:	6005      	str	r5, [r0, #0]
 8003614:	e7d6      	b.n	80035c4 <_malloc_r+0xa8>
 8003616:	bf00      	nop
 8003618:	20000158 	.word	0x20000158

0800361c <__malloc_lock>:
 800361c:	4801      	ldr	r0, [pc, #4]	@ (8003624 <__malloc_lock+0x8>)
 800361e:	f000 bad0 	b.w	8003bc2 <__retarget_lock_acquire_recursive>
 8003622:	bf00      	nop
 8003624:	2000029c 	.word	0x2000029c

08003628 <__malloc_unlock>:
 8003628:	4801      	ldr	r0, [pc, #4]	@ (8003630 <__malloc_unlock+0x8>)
 800362a:	f000 bacb 	b.w	8003bc4 <__retarget_lock_release_recursive>
 800362e:	bf00      	nop
 8003630:	2000029c 	.word	0x2000029c

08003634 <std>:
 8003634:	2300      	movs	r3, #0
 8003636:	b510      	push	{r4, lr}
 8003638:	4604      	mov	r4, r0
 800363a:	e9c0 3300 	strd	r3, r3, [r0]
 800363e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003642:	6083      	str	r3, [r0, #8]
 8003644:	8181      	strh	r1, [r0, #12]
 8003646:	6643      	str	r3, [r0, #100]	@ 0x64
 8003648:	81c2      	strh	r2, [r0, #14]
 800364a:	6183      	str	r3, [r0, #24]
 800364c:	4619      	mov	r1, r3
 800364e:	2208      	movs	r2, #8
 8003650:	305c      	adds	r0, #92	@ 0x5c
 8003652:	f000 fa2d 	bl	8003ab0 <memset>
 8003656:	4b0d      	ldr	r3, [pc, #52]	@ (800368c <std+0x58>)
 8003658:	6224      	str	r4, [r4, #32]
 800365a:	6263      	str	r3, [r4, #36]	@ 0x24
 800365c:	4b0c      	ldr	r3, [pc, #48]	@ (8003690 <std+0x5c>)
 800365e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003660:	4b0c      	ldr	r3, [pc, #48]	@ (8003694 <std+0x60>)
 8003662:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003664:	4b0c      	ldr	r3, [pc, #48]	@ (8003698 <std+0x64>)
 8003666:	6323      	str	r3, [r4, #48]	@ 0x30
 8003668:	4b0c      	ldr	r3, [pc, #48]	@ (800369c <std+0x68>)
 800366a:	429c      	cmp	r4, r3
 800366c:	d006      	beq.n	800367c <std+0x48>
 800366e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003672:	4294      	cmp	r4, r2
 8003674:	d002      	beq.n	800367c <std+0x48>
 8003676:	33d0      	adds	r3, #208	@ 0xd0
 8003678:	429c      	cmp	r4, r3
 800367a:	d105      	bne.n	8003688 <std+0x54>
 800367c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003684:	f000 ba9c 	b.w	8003bc0 <__retarget_lock_init_recursive>
 8003688:	bd10      	pop	{r4, pc}
 800368a:	bf00      	nop
 800368c:	08003901 	.word	0x08003901
 8003690:	08003923 	.word	0x08003923
 8003694:	0800395b 	.word	0x0800395b
 8003698:	0800397f 	.word	0x0800397f
 800369c:	2000015c 	.word	0x2000015c

080036a0 <stdio_exit_handler>:
 80036a0:	4a02      	ldr	r2, [pc, #8]	@ (80036ac <stdio_exit_handler+0xc>)
 80036a2:	4903      	ldr	r1, [pc, #12]	@ (80036b0 <stdio_exit_handler+0x10>)
 80036a4:	4803      	ldr	r0, [pc, #12]	@ (80036b4 <stdio_exit_handler+0x14>)
 80036a6:	f000 b869 	b.w	800377c <_fwalk_sglue>
 80036aa:	bf00      	nop
 80036ac:	2000000c 	.word	0x2000000c
 80036b0:	080045c9 	.word	0x080045c9
 80036b4:	2000001c 	.word	0x2000001c

080036b8 <cleanup_stdio>:
 80036b8:	6841      	ldr	r1, [r0, #4]
 80036ba:	4b0c      	ldr	r3, [pc, #48]	@ (80036ec <cleanup_stdio+0x34>)
 80036bc:	b510      	push	{r4, lr}
 80036be:	4299      	cmp	r1, r3
 80036c0:	4604      	mov	r4, r0
 80036c2:	d001      	beq.n	80036c8 <cleanup_stdio+0x10>
 80036c4:	f000 ff80 	bl	80045c8 <_fflush_r>
 80036c8:	68a1      	ldr	r1, [r4, #8]
 80036ca:	4b09      	ldr	r3, [pc, #36]	@ (80036f0 <cleanup_stdio+0x38>)
 80036cc:	4299      	cmp	r1, r3
 80036ce:	d002      	beq.n	80036d6 <cleanup_stdio+0x1e>
 80036d0:	4620      	mov	r0, r4
 80036d2:	f000 ff79 	bl	80045c8 <_fflush_r>
 80036d6:	68e1      	ldr	r1, [r4, #12]
 80036d8:	4b06      	ldr	r3, [pc, #24]	@ (80036f4 <cleanup_stdio+0x3c>)
 80036da:	4299      	cmp	r1, r3
 80036dc:	d004      	beq.n	80036e8 <cleanup_stdio+0x30>
 80036de:	4620      	mov	r0, r4
 80036e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036e4:	f000 bf70 	b.w	80045c8 <_fflush_r>
 80036e8:	bd10      	pop	{r4, pc}
 80036ea:	bf00      	nop
 80036ec:	2000015c 	.word	0x2000015c
 80036f0:	200001c4 	.word	0x200001c4
 80036f4:	2000022c 	.word	0x2000022c

080036f8 <global_stdio_init.part.0>:
 80036f8:	b510      	push	{r4, lr}
 80036fa:	4b0b      	ldr	r3, [pc, #44]	@ (8003728 <global_stdio_init.part.0+0x30>)
 80036fc:	4c0b      	ldr	r4, [pc, #44]	@ (800372c <global_stdio_init.part.0+0x34>)
 80036fe:	4a0c      	ldr	r2, [pc, #48]	@ (8003730 <global_stdio_init.part.0+0x38>)
 8003700:	4620      	mov	r0, r4
 8003702:	601a      	str	r2, [r3, #0]
 8003704:	2104      	movs	r1, #4
 8003706:	2200      	movs	r2, #0
 8003708:	f7ff ff94 	bl	8003634 <std>
 800370c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003710:	2201      	movs	r2, #1
 8003712:	2109      	movs	r1, #9
 8003714:	f7ff ff8e 	bl	8003634 <std>
 8003718:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800371c:	2202      	movs	r2, #2
 800371e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003722:	2112      	movs	r1, #18
 8003724:	f7ff bf86 	b.w	8003634 <std>
 8003728:	20000294 	.word	0x20000294
 800372c:	2000015c 	.word	0x2000015c
 8003730:	080036a1 	.word	0x080036a1

08003734 <__sfp_lock_acquire>:
 8003734:	4801      	ldr	r0, [pc, #4]	@ (800373c <__sfp_lock_acquire+0x8>)
 8003736:	f000 ba44 	b.w	8003bc2 <__retarget_lock_acquire_recursive>
 800373a:	bf00      	nop
 800373c:	2000029d 	.word	0x2000029d

08003740 <__sfp_lock_release>:
 8003740:	4801      	ldr	r0, [pc, #4]	@ (8003748 <__sfp_lock_release+0x8>)
 8003742:	f000 ba3f 	b.w	8003bc4 <__retarget_lock_release_recursive>
 8003746:	bf00      	nop
 8003748:	2000029d 	.word	0x2000029d

0800374c <__sinit>:
 800374c:	b510      	push	{r4, lr}
 800374e:	4604      	mov	r4, r0
 8003750:	f7ff fff0 	bl	8003734 <__sfp_lock_acquire>
 8003754:	6a23      	ldr	r3, [r4, #32]
 8003756:	b11b      	cbz	r3, 8003760 <__sinit+0x14>
 8003758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800375c:	f7ff bff0 	b.w	8003740 <__sfp_lock_release>
 8003760:	4b04      	ldr	r3, [pc, #16]	@ (8003774 <__sinit+0x28>)
 8003762:	6223      	str	r3, [r4, #32]
 8003764:	4b04      	ldr	r3, [pc, #16]	@ (8003778 <__sinit+0x2c>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d1f5      	bne.n	8003758 <__sinit+0xc>
 800376c:	f7ff ffc4 	bl	80036f8 <global_stdio_init.part.0>
 8003770:	e7f2      	b.n	8003758 <__sinit+0xc>
 8003772:	bf00      	nop
 8003774:	080036b9 	.word	0x080036b9
 8003778:	20000294 	.word	0x20000294

0800377c <_fwalk_sglue>:
 800377c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003780:	4607      	mov	r7, r0
 8003782:	4688      	mov	r8, r1
 8003784:	4614      	mov	r4, r2
 8003786:	2600      	movs	r6, #0
 8003788:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800378c:	f1b9 0901 	subs.w	r9, r9, #1
 8003790:	d505      	bpl.n	800379e <_fwalk_sglue+0x22>
 8003792:	6824      	ldr	r4, [r4, #0]
 8003794:	2c00      	cmp	r4, #0
 8003796:	d1f7      	bne.n	8003788 <_fwalk_sglue+0xc>
 8003798:	4630      	mov	r0, r6
 800379a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800379e:	89ab      	ldrh	r3, [r5, #12]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d907      	bls.n	80037b4 <_fwalk_sglue+0x38>
 80037a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80037a8:	3301      	adds	r3, #1
 80037aa:	d003      	beq.n	80037b4 <_fwalk_sglue+0x38>
 80037ac:	4629      	mov	r1, r5
 80037ae:	4638      	mov	r0, r7
 80037b0:	47c0      	blx	r8
 80037b2:	4306      	orrs	r6, r0
 80037b4:	3568      	adds	r5, #104	@ 0x68
 80037b6:	e7e9      	b.n	800378c <_fwalk_sglue+0x10>

080037b8 <iprintf>:
 80037b8:	b40f      	push	{r0, r1, r2, r3}
 80037ba:	b507      	push	{r0, r1, r2, lr}
 80037bc:	4906      	ldr	r1, [pc, #24]	@ (80037d8 <iprintf+0x20>)
 80037be:	ab04      	add	r3, sp, #16
 80037c0:	6808      	ldr	r0, [r1, #0]
 80037c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80037c6:	6881      	ldr	r1, [r0, #8]
 80037c8:	9301      	str	r3, [sp, #4]
 80037ca:	f000 fbd3 	bl	8003f74 <_vfiprintf_r>
 80037ce:	b003      	add	sp, #12
 80037d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80037d4:	b004      	add	sp, #16
 80037d6:	4770      	bx	lr
 80037d8:	20000018 	.word	0x20000018

080037dc <_puts_r>:
 80037dc:	6a03      	ldr	r3, [r0, #32]
 80037de:	b570      	push	{r4, r5, r6, lr}
 80037e0:	4605      	mov	r5, r0
 80037e2:	460e      	mov	r6, r1
 80037e4:	6884      	ldr	r4, [r0, #8]
 80037e6:	b90b      	cbnz	r3, 80037ec <_puts_r+0x10>
 80037e8:	f7ff ffb0 	bl	800374c <__sinit>
 80037ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80037ee:	07db      	lsls	r3, r3, #31
 80037f0:	d405      	bmi.n	80037fe <_puts_r+0x22>
 80037f2:	89a3      	ldrh	r3, [r4, #12]
 80037f4:	0598      	lsls	r0, r3, #22
 80037f6:	d402      	bmi.n	80037fe <_puts_r+0x22>
 80037f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80037fa:	f000 f9e2 	bl	8003bc2 <__retarget_lock_acquire_recursive>
 80037fe:	89a3      	ldrh	r3, [r4, #12]
 8003800:	0719      	lsls	r1, r3, #28
 8003802:	d502      	bpl.n	800380a <_puts_r+0x2e>
 8003804:	6923      	ldr	r3, [r4, #16]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d135      	bne.n	8003876 <_puts_r+0x9a>
 800380a:	4621      	mov	r1, r4
 800380c:	4628      	mov	r0, r5
 800380e:	f000 f8f9 	bl	8003a04 <__swsetup_r>
 8003812:	b380      	cbz	r0, 8003876 <_puts_r+0x9a>
 8003814:	f04f 35ff 	mov.w	r5, #4294967295
 8003818:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800381a:	07da      	lsls	r2, r3, #31
 800381c:	d405      	bmi.n	800382a <_puts_r+0x4e>
 800381e:	89a3      	ldrh	r3, [r4, #12]
 8003820:	059b      	lsls	r3, r3, #22
 8003822:	d402      	bmi.n	800382a <_puts_r+0x4e>
 8003824:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003826:	f000 f9cd 	bl	8003bc4 <__retarget_lock_release_recursive>
 800382a:	4628      	mov	r0, r5
 800382c:	bd70      	pop	{r4, r5, r6, pc}
 800382e:	2b00      	cmp	r3, #0
 8003830:	da04      	bge.n	800383c <_puts_r+0x60>
 8003832:	69a2      	ldr	r2, [r4, #24]
 8003834:	429a      	cmp	r2, r3
 8003836:	dc17      	bgt.n	8003868 <_puts_r+0x8c>
 8003838:	290a      	cmp	r1, #10
 800383a:	d015      	beq.n	8003868 <_puts_r+0x8c>
 800383c:	6823      	ldr	r3, [r4, #0]
 800383e:	1c5a      	adds	r2, r3, #1
 8003840:	6022      	str	r2, [r4, #0]
 8003842:	7019      	strb	r1, [r3, #0]
 8003844:	68a3      	ldr	r3, [r4, #8]
 8003846:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800384a:	3b01      	subs	r3, #1
 800384c:	60a3      	str	r3, [r4, #8]
 800384e:	2900      	cmp	r1, #0
 8003850:	d1ed      	bne.n	800382e <_puts_r+0x52>
 8003852:	2b00      	cmp	r3, #0
 8003854:	da11      	bge.n	800387a <_puts_r+0x9e>
 8003856:	4622      	mov	r2, r4
 8003858:	210a      	movs	r1, #10
 800385a:	4628      	mov	r0, r5
 800385c:	f000 f893 	bl	8003986 <__swbuf_r>
 8003860:	3001      	adds	r0, #1
 8003862:	d0d7      	beq.n	8003814 <_puts_r+0x38>
 8003864:	250a      	movs	r5, #10
 8003866:	e7d7      	b.n	8003818 <_puts_r+0x3c>
 8003868:	4622      	mov	r2, r4
 800386a:	4628      	mov	r0, r5
 800386c:	f000 f88b 	bl	8003986 <__swbuf_r>
 8003870:	3001      	adds	r0, #1
 8003872:	d1e7      	bne.n	8003844 <_puts_r+0x68>
 8003874:	e7ce      	b.n	8003814 <_puts_r+0x38>
 8003876:	3e01      	subs	r6, #1
 8003878:	e7e4      	b.n	8003844 <_puts_r+0x68>
 800387a:	6823      	ldr	r3, [r4, #0]
 800387c:	1c5a      	adds	r2, r3, #1
 800387e:	6022      	str	r2, [r4, #0]
 8003880:	220a      	movs	r2, #10
 8003882:	701a      	strb	r2, [r3, #0]
 8003884:	e7ee      	b.n	8003864 <_puts_r+0x88>
	...

08003888 <puts>:
 8003888:	4b02      	ldr	r3, [pc, #8]	@ (8003894 <puts+0xc>)
 800388a:	4601      	mov	r1, r0
 800388c:	6818      	ldr	r0, [r3, #0]
 800388e:	f7ff bfa5 	b.w	80037dc <_puts_r>
 8003892:	bf00      	nop
 8003894:	20000018 	.word	0x20000018

08003898 <sniprintf>:
 8003898:	b40c      	push	{r2, r3}
 800389a:	b530      	push	{r4, r5, lr}
 800389c:	4b17      	ldr	r3, [pc, #92]	@ (80038fc <sniprintf+0x64>)
 800389e:	1e0c      	subs	r4, r1, #0
 80038a0:	681d      	ldr	r5, [r3, #0]
 80038a2:	b09d      	sub	sp, #116	@ 0x74
 80038a4:	da08      	bge.n	80038b8 <sniprintf+0x20>
 80038a6:	238b      	movs	r3, #139	@ 0x8b
 80038a8:	f04f 30ff 	mov.w	r0, #4294967295
 80038ac:	602b      	str	r3, [r5, #0]
 80038ae:	b01d      	add	sp, #116	@ 0x74
 80038b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80038b4:	b002      	add	sp, #8
 80038b6:	4770      	bx	lr
 80038b8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80038bc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80038c0:	bf0c      	ite	eq
 80038c2:	4623      	moveq	r3, r4
 80038c4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80038c8:	9304      	str	r3, [sp, #16]
 80038ca:	9307      	str	r3, [sp, #28]
 80038cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80038d0:	9002      	str	r0, [sp, #8]
 80038d2:	9006      	str	r0, [sp, #24]
 80038d4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80038d8:	4628      	mov	r0, r5
 80038da:	ab21      	add	r3, sp, #132	@ 0x84
 80038dc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80038de:	a902      	add	r1, sp, #8
 80038e0:	9301      	str	r3, [sp, #4]
 80038e2:	f000 fa23 	bl	8003d2c <_svfiprintf_r>
 80038e6:	1c43      	adds	r3, r0, #1
 80038e8:	bfbc      	itt	lt
 80038ea:	238b      	movlt	r3, #139	@ 0x8b
 80038ec:	602b      	strlt	r3, [r5, #0]
 80038ee:	2c00      	cmp	r4, #0
 80038f0:	d0dd      	beq.n	80038ae <sniprintf+0x16>
 80038f2:	2200      	movs	r2, #0
 80038f4:	9b02      	ldr	r3, [sp, #8]
 80038f6:	701a      	strb	r2, [r3, #0]
 80038f8:	e7d9      	b.n	80038ae <sniprintf+0x16>
 80038fa:	bf00      	nop
 80038fc:	20000018 	.word	0x20000018

08003900 <__sread>:
 8003900:	b510      	push	{r4, lr}
 8003902:	460c      	mov	r4, r1
 8003904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003908:	f000 f8fc 	bl	8003b04 <_read_r>
 800390c:	2800      	cmp	r0, #0
 800390e:	bfab      	itete	ge
 8003910:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003912:	89a3      	ldrhlt	r3, [r4, #12]
 8003914:	181b      	addge	r3, r3, r0
 8003916:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800391a:	bfac      	ite	ge
 800391c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800391e:	81a3      	strhlt	r3, [r4, #12]
 8003920:	bd10      	pop	{r4, pc}

08003922 <__swrite>:
 8003922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003926:	461f      	mov	r7, r3
 8003928:	898b      	ldrh	r3, [r1, #12]
 800392a:	4605      	mov	r5, r0
 800392c:	05db      	lsls	r3, r3, #23
 800392e:	460c      	mov	r4, r1
 8003930:	4616      	mov	r6, r2
 8003932:	d505      	bpl.n	8003940 <__swrite+0x1e>
 8003934:	2302      	movs	r3, #2
 8003936:	2200      	movs	r2, #0
 8003938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800393c:	f000 f8d0 	bl	8003ae0 <_lseek_r>
 8003940:	89a3      	ldrh	r3, [r4, #12]
 8003942:	4632      	mov	r2, r6
 8003944:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003948:	81a3      	strh	r3, [r4, #12]
 800394a:	4628      	mov	r0, r5
 800394c:	463b      	mov	r3, r7
 800394e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003952:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003956:	f000 b8f7 	b.w	8003b48 <_write_r>

0800395a <__sseek>:
 800395a:	b510      	push	{r4, lr}
 800395c:	460c      	mov	r4, r1
 800395e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003962:	f000 f8bd 	bl	8003ae0 <_lseek_r>
 8003966:	1c43      	adds	r3, r0, #1
 8003968:	89a3      	ldrh	r3, [r4, #12]
 800396a:	bf15      	itete	ne
 800396c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800396e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003972:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003976:	81a3      	strheq	r3, [r4, #12]
 8003978:	bf18      	it	ne
 800397a:	81a3      	strhne	r3, [r4, #12]
 800397c:	bd10      	pop	{r4, pc}

0800397e <__sclose>:
 800397e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003982:	f000 b89d 	b.w	8003ac0 <_close_r>

08003986 <__swbuf_r>:
 8003986:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003988:	460e      	mov	r6, r1
 800398a:	4614      	mov	r4, r2
 800398c:	4605      	mov	r5, r0
 800398e:	b118      	cbz	r0, 8003998 <__swbuf_r+0x12>
 8003990:	6a03      	ldr	r3, [r0, #32]
 8003992:	b90b      	cbnz	r3, 8003998 <__swbuf_r+0x12>
 8003994:	f7ff feda 	bl	800374c <__sinit>
 8003998:	69a3      	ldr	r3, [r4, #24]
 800399a:	60a3      	str	r3, [r4, #8]
 800399c:	89a3      	ldrh	r3, [r4, #12]
 800399e:	071a      	lsls	r2, r3, #28
 80039a0:	d501      	bpl.n	80039a6 <__swbuf_r+0x20>
 80039a2:	6923      	ldr	r3, [r4, #16]
 80039a4:	b943      	cbnz	r3, 80039b8 <__swbuf_r+0x32>
 80039a6:	4621      	mov	r1, r4
 80039a8:	4628      	mov	r0, r5
 80039aa:	f000 f82b 	bl	8003a04 <__swsetup_r>
 80039ae:	b118      	cbz	r0, 80039b8 <__swbuf_r+0x32>
 80039b0:	f04f 37ff 	mov.w	r7, #4294967295
 80039b4:	4638      	mov	r0, r7
 80039b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039b8:	6823      	ldr	r3, [r4, #0]
 80039ba:	6922      	ldr	r2, [r4, #16]
 80039bc:	b2f6      	uxtb	r6, r6
 80039be:	1a98      	subs	r0, r3, r2
 80039c0:	6963      	ldr	r3, [r4, #20]
 80039c2:	4637      	mov	r7, r6
 80039c4:	4283      	cmp	r3, r0
 80039c6:	dc05      	bgt.n	80039d4 <__swbuf_r+0x4e>
 80039c8:	4621      	mov	r1, r4
 80039ca:	4628      	mov	r0, r5
 80039cc:	f000 fdfc 	bl	80045c8 <_fflush_r>
 80039d0:	2800      	cmp	r0, #0
 80039d2:	d1ed      	bne.n	80039b0 <__swbuf_r+0x2a>
 80039d4:	68a3      	ldr	r3, [r4, #8]
 80039d6:	3b01      	subs	r3, #1
 80039d8:	60a3      	str	r3, [r4, #8]
 80039da:	6823      	ldr	r3, [r4, #0]
 80039dc:	1c5a      	adds	r2, r3, #1
 80039de:	6022      	str	r2, [r4, #0]
 80039e0:	701e      	strb	r6, [r3, #0]
 80039e2:	6962      	ldr	r2, [r4, #20]
 80039e4:	1c43      	adds	r3, r0, #1
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d004      	beq.n	80039f4 <__swbuf_r+0x6e>
 80039ea:	89a3      	ldrh	r3, [r4, #12]
 80039ec:	07db      	lsls	r3, r3, #31
 80039ee:	d5e1      	bpl.n	80039b4 <__swbuf_r+0x2e>
 80039f0:	2e0a      	cmp	r6, #10
 80039f2:	d1df      	bne.n	80039b4 <__swbuf_r+0x2e>
 80039f4:	4621      	mov	r1, r4
 80039f6:	4628      	mov	r0, r5
 80039f8:	f000 fde6 	bl	80045c8 <_fflush_r>
 80039fc:	2800      	cmp	r0, #0
 80039fe:	d0d9      	beq.n	80039b4 <__swbuf_r+0x2e>
 8003a00:	e7d6      	b.n	80039b0 <__swbuf_r+0x2a>
	...

08003a04 <__swsetup_r>:
 8003a04:	b538      	push	{r3, r4, r5, lr}
 8003a06:	4b29      	ldr	r3, [pc, #164]	@ (8003aac <__swsetup_r+0xa8>)
 8003a08:	4605      	mov	r5, r0
 8003a0a:	6818      	ldr	r0, [r3, #0]
 8003a0c:	460c      	mov	r4, r1
 8003a0e:	b118      	cbz	r0, 8003a18 <__swsetup_r+0x14>
 8003a10:	6a03      	ldr	r3, [r0, #32]
 8003a12:	b90b      	cbnz	r3, 8003a18 <__swsetup_r+0x14>
 8003a14:	f7ff fe9a 	bl	800374c <__sinit>
 8003a18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a1c:	0719      	lsls	r1, r3, #28
 8003a1e:	d422      	bmi.n	8003a66 <__swsetup_r+0x62>
 8003a20:	06da      	lsls	r2, r3, #27
 8003a22:	d407      	bmi.n	8003a34 <__swsetup_r+0x30>
 8003a24:	2209      	movs	r2, #9
 8003a26:	602a      	str	r2, [r5, #0]
 8003a28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a30:	81a3      	strh	r3, [r4, #12]
 8003a32:	e033      	b.n	8003a9c <__swsetup_r+0x98>
 8003a34:	0758      	lsls	r0, r3, #29
 8003a36:	d512      	bpl.n	8003a5e <__swsetup_r+0x5a>
 8003a38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003a3a:	b141      	cbz	r1, 8003a4e <__swsetup_r+0x4a>
 8003a3c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003a40:	4299      	cmp	r1, r3
 8003a42:	d002      	beq.n	8003a4a <__swsetup_r+0x46>
 8003a44:	4628      	mov	r0, r5
 8003a46:	f000 f8cd 	bl	8003be4 <_free_r>
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	6363      	str	r3, [r4, #52]	@ 0x34
 8003a4e:	89a3      	ldrh	r3, [r4, #12]
 8003a50:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003a54:	81a3      	strh	r3, [r4, #12]
 8003a56:	2300      	movs	r3, #0
 8003a58:	6063      	str	r3, [r4, #4]
 8003a5a:	6923      	ldr	r3, [r4, #16]
 8003a5c:	6023      	str	r3, [r4, #0]
 8003a5e:	89a3      	ldrh	r3, [r4, #12]
 8003a60:	f043 0308 	orr.w	r3, r3, #8
 8003a64:	81a3      	strh	r3, [r4, #12]
 8003a66:	6923      	ldr	r3, [r4, #16]
 8003a68:	b94b      	cbnz	r3, 8003a7e <__swsetup_r+0x7a>
 8003a6a:	89a3      	ldrh	r3, [r4, #12]
 8003a6c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003a70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a74:	d003      	beq.n	8003a7e <__swsetup_r+0x7a>
 8003a76:	4621      	mov	r1, r4
 8003a78:	4628      	mov	r0, r5
 8003a7a:	f000 fdf2 	bl	8004662 <__smakebuf_r>
 8003a7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a82:	f013 0201 	ands.w	r2, r3, #1
 8003a86:	d00a      	beq.n	8003a9e <__swsetup_r+0x9a>
 8003a88:	2200      	movs	r2, #0
 8003a8a:	60a2      	str	r2, [r4, #8]
 8003a8c:	6962      	ldr	r2, [r4, #20]
 8003a8e:	4252      	negs	r2, r2
 8003a90:	61a2      	str	r2, [r4, #24]
 8003a92:	6922      	ldr	r2, [r4, #16]
 8003a94:	b942      	cbnz	r2, 8003aa8 <__swsetup_r+0xa4>
 8003a96:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003a9a:	d1c5      	bne.n	8003a28 <__swsetup_r+0x24>
 8003a9c:	bd38      	pop	{r3, r4, r5, pc}
 8003a9e:	0799      	lsls	r1, r3, #30
 8003aa0:	bf58      	it	pl
 8003aa2:	6962      	ldrpl	r2, [r4, #20]
 8003aa4:	60a2      	str	r2, [r4, #8]
 8003aa6:	e7f4      	b.n	8003a92 <__swsetup_r+0x8e>
 8003aa8:	2000      	movs	r0, #0
 8003aaa:	e7f7      	b.n	8003a9c <__swsetup_r+0x98>
 8003aac:	20000018 	.word	0x20000018

08003ab0 <memset>:
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	4402      	add	r2, r0
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d100      	bne.n	8003aba <memset+0xa>
 8003ab8:	4770      	bx	lr
 8003aba:	f803 1b01 	strb.w	r1, [r3], #1
 8003abe:	e7f9      	b.n	8003ab4 <memset+0x4>

08003ac0 <_close_r>:
 8003ac0:	b538      	push	{r3, r4, r5, lr}
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	4d05      	ldr	r5, [pc, #20]	@ (8003adc <_close_r+0x1c>)
 8003ac6:	4604      	mov	r4, r0
 8003ac8:	4608      	mov	r0, r1
 8003aca:	602b      	str	r3, [r5, #0]
 8003acc:	f7fd f815 	bl	8000afa <_close>
 8003ad0:	1c43      	adds	r3, r0, #1
 8003ad2:	d102      	bne.n	8003ada <_close_r+0x1a>
 8003ad4:	682b      	ldr	r3, [r5, #0]
 8003ad6:	b103      	cbz	r3, 8003ada <_close_r+0x1a>
 8003ad8:	6023      	str	r3, [r4, #0]
 8003ada:	bd38      	pop	{r3, r4, r5, pc}
 8003adc:	20000298 	.word	0x20000298

08003ae0 <_lseek_r>:
 8003ae0:	b538      	push	{r3, r4, r5, lr}
 8003ae2:	4604      	mov	r4, r0
 8003ae4:	4608      	mov	r0, r1
 8003ae6:	4611      	mov	r1, r2
 8003ae8:	2200      	movs	r2, #0
 8003aea:	4d05      	ldr	r5, [pc, #20]	@ (8003b00 <_lseek_r+0x20>)
 8003aec:	602a      	str	r2, [r5, #0]
 8003aee:	461a      	mov	r2, r3
 8003af0:	f7fd f827 	bl	8000b42 <_lseek>
 8003af4:	1c43      	adds	r3, r0, #1
 8003af6:	d102      	bne.n	8003afe <_lseek_r+0x1e>
 8003af8:	682b      	ldr	r3, [r5, #0]
 8003afa:	b103      	cbz	r3, 8003afe <_lseek_r+0x1e>
 8003afc:	6023      	str	r3, [r4, #0]
 8003afe:	bd38      	pop	{r3, r4, r5, pc}
 8003b00:	20000298 	.word	0x20000298

08003b04 <_read_r>:
 8003b04:	b538      	push	{r3, r4, r5, lr}
 8003b06:	4604      	mov	r4, r0
 8003b08:	4608      	mov	r0, r1
 8003b0a:	4611      	mov	r1, r2
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	4d05      	ldr	r5, [pc, #20]	@ (8003b24 <_read_r+0x20>)
 8003b10:	602a      	str	r2, [r5, #0]
 8003b12:	461a      	mov	r2, r3
 8003b14:	f7fc ffb8 	bl	8000a88 <_read>
 8003b18:	1c43      	adds	r3, r0, #1
 8003b1a:	d102      	bne.n	8003b22 <_read_r+0x1e>
 8003b1c:	682b      	ldr	r3, [r5, #0]
 8003b1e:	b103      	cbz	r3, 8003b22 <_read_r+0x1e>
 8003b20:	6023      	str	r3, [r4, #0]
 8003b22:	bd38      	pop	{r3, r4, r5, pc}
 8003b24:	20000298 	.word	0x20000298

08003b28 <_sbrk_r>:
 8003b28:	b538      	push	{r3, r4, r5, lr}
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	4d05      	ldr	r5, [pc, #20]	@ (8003b44 <_sbrk_r+0x1c>)
 8003b2e:	4604      	mov	r4, r0
 8003b30:	4608      	mov	r0, r1
 8003b32:	602b      	str	r3, [r5, #0]
 8003b34:	f7fd f812 	bl	8000b5c <_sbrk>
 8003b38:	1c43      	adds	r3, r0, #1
 8003b3a:	d102      	bne.n	8003b42 <_sbrk_r+0x1a>
 8003b3c:	682b      	ldr	r3, [r5, #0]
 8003b3e:	b103      	cbz	r3, 8003b42 <_sbrk_r+0x1a>
 8003b40:	6023      	str	r3, [r4, #0]
 8003b42:	bd38      	pop	{r3, r4, r5, pc}
 8003b44:	20000298 	.word	0x20000298

08003b48 <_write_r>:
 8003b48:	b538      	push	{r3, r4, r5, lr}
 8003b4a:	4604      	mov	r4, r0
 8003b4c:	4608      	mov	r0, r1
 8003b4e:	4611      	mov	r1, r2
 8003b50:	2200      	movs	r2, #0
 8003b52:	4d05      	ldr	r5, [pc, #20]	@ (8003b68 <_write_r+0x20>)
 8003b54:	602a      	str	r2, [r5, #0]
 8003b56:	461a      	mov	r2, r3
 8003b58:	f7fc ffb3 	bl	8000ac2 <_write>
 8003b5c:	1c43      	adds	r3, r0, #1
 8003b5e:	d102      	bne.n	8003b66 <_write_r+0x1e>
 8003b60:	682b      	ldr	r3, [r5, #0]
 8003b62:	b103      	cbz	r3, 8003b66 <_write_r+0x1e>
 8003b64:	6023      	str	r3, [r4, #0]
 8003b66:	bd38      	pop	{r3, r4, r5, pc}
 8003b68:	20000298 	.word	0x20000298

08003b6c <__errno>:
 8003b6c:	4b01      	ldr	r3, [pc, #4]	@ (8003b74 <__errno+0x8>)
 8003b6e:	6818      	ldr	r0, [r3, #0]
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	20000018 	.word	0x20000018

08003b78 <__libc_init_array>:
 8003b78:	b570      	push	{r4, r5, r6, lr}
 8003b7a:	2600      	movs	r6, #0
 8003b7c:	4d0c      	ldr	r5, [pc, #48]	@ (8003bb0 <__libc_init_array+0x38>)
 8003b7e:	4c0d      	ldr	r4, [pc, #52]	@ (8003bb4 <__libc_init_array+0x3c>)
 8003b80:	1b64      	subs	r4, r4, r5
 8003b82:	10a4      	asrs	r4, r4, #2
 8003b84:	42a6      	cmp	r6, r4
 8003b86:	d109      	bne.n	8003b9c <__libc_init_array+0x24>
 8003b88:	f000 fe28 	bl	80047dc <_init>
 8003b8c:	2600      	movs	r6, #0
 8003b8e:	4d0a      	ldr	r5, [pc, #40]	@ (8003bb8 <__libc_init_array+0x40>)
 8003b90:	4c0a      	ldr	r4, [pc, #40]	@ (8003bbc <__libc_init_array+0x44>)
 8003b92:	1b64      	subs	r4, r4, r5
 8003b94:	10a4      	asrs	r4, r4, #2
 8003b96:	42a6      	cmp	r6, r4
 8003b98:	d105      	bne.n	8003ba6 <__libc_init_array+0x2e>
 8003b9a:	bd70      	pop	{r4, r5, r6, pc}
 8003b9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ba0:	4798      	blx	r3
 8003ba2:	3601      	adds	r6, #1
 8003ba4:	e7ee      	b.n	8003b84 <__libc_init_array+0xc>
 8003ba6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003baa:	4798      	blx	r3
 8003bac:	3601      	adds	r6, #1
 8003bae:	e7f2      	b.n	8003b96 <__libc_init_array+0x1e>
 8003bb0:	0800496c 	.word	0x0800496c
 8003bb4:	0800496c 	.word	0x0800496c
 8003bb8:	0800496c 	.word	0x0800496c
 8003bbc:	08004970 	.word	0x08004970

08003bc0 <__retarget_lock_init_recursive>:
 8003bc0:	4770      	bx	lr

08003bc2 <__retarget_lock_acquire_recursive>:
 8003bc2:	4770      	bx	lr

08003bc4 <__retarget_lock_release_recursive>:
 8003bc4:	4770      	bx	lr

08003bc6 <memcpy>:
 8003bc6:	440a      	add	r2, r1
 8003bc8:	4291      	cmp	r1, r2
 8003bca:	f100 33ff 	add.w	r3, r0, #4294967295
 8003bce:	d100      	bne.n	8003bd2 <memcpy+0xc>
 8003bd0:	4770      	bx	lr
 8003bd2:	b510      	push	{r4, lr}
 8003bd4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003bd8:	4291      	cmp	r1, r2
 8003bda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003bde:	d1f9      	bne.n	8003bd4 <memcpy+0xe>
 8003be0:	bd10      	pop	{r4, pc}
	...

08003be4 <_free_r>:
 8003be4:	b538      	push	{r3, r4, r5, lr}
 8003be6:	4605      	mov	r5, r0
 8003be8:	2900      	cmp	r1, #0
 8003bea:	d040      	beq.n	8003c6e <_free_r+0x8a>
 8003bec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bf0:	1f0c      	subs	r4, r1, #4
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	bfb8      	it	lt
 8003bf6:	18e4      	addlt	r4, r4, r3
 8003bf8:	f7ff fd10 	bl	800361c <__malloc_lock>
 8003bfc:	4a1c      	ldr	r2, [pc, #112]	@ (8003c70 <_free_r+0x8c>)
 8003bfe:	6813      	ldr	r3, [r2, #0]
 8003c00:	b933      	cbnz	r3, 8003c10 <_free_r+0x2c>
 8003c02:	6063      	str	r3, [r4, #4]
 8003c04:	6014      	str	r4, [r2, #0]
 8003c06:	4628      	mov	r0, r5
 8003c08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c0c:	f7ff bd0c 	b.w	8003628 <__malloc_unlock>
 8003c10:	42a3      	cmp	r3, r4
 8003c12:	d908      	bls.n	8003c26 <_free_r+0x42>
 8003c14:	6820      	ldr	r0, [r4, #0]
 8003c16:	1821      	adds	r1, r4, r0
 8003c18:	428b      	cmp	r3, r1
 8003c1a:	bf01      	itttt	eq
 8003c1c:	6819      	ldreq	r1, [r3, #0]
 8003c1e:	685b      	ldreq	r3, [r3, #4]
 8003c20:	1809      	addeq	r1, r1, r0
 8003c22:	6021      	streq	r1, [r4, #0]
 8003c24:	e7ed      	b.n	8003c02 <_free_r+0x1e>
 8003c26:	461a      	mov	r2, r3
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	b10b      	cbz	r3, 8003c30 <_free_r+0x4c>
 8003c2c:	42a3      	cmp	r3, r4
 8003c2e:	d9fa      	bls.n	8003c26 <_free_r+0x42>
 8003c30:	6811      	ldr	r1, [r2, #0]
 8003c32:	1850      	adds	r0, r2, r1
 8003c34:	42a0      	cmp	r0, r4
 8003c36:	d10b      	bne.n	8003c50 <_free_r+0x6c>
 8003c38:	6820      	ldr	r0, [r4, #0]
 8003c3a:	4401      	add	r1, r0
 8003c3c:	1850      	adds	r0, r2, r1
 8003c3e:	4283      	cmp	r3, r0
 8003c40:	6011      	str	r1, [r2, #0]
 8003c42:	d1e0      	bne.n	8003c06 <_free_r+0x22>
 8003c44:	6818      	ldr	r0, [r3, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	4408      	add	r0, r1
 8003c4a:	6010      	str	r0, [r2, #0]
 8003c4c:	6053      	str	r3, [r2, #4]
 8003c4e:	e7da      	b.n	8003c06 <_free_r+0x22>
 8003c50:	d902      	bls.n	8003c58 <_free_r+0x74>
 8003c52:	230c      	movs	r3, #12
 8003c54:	602b      	str	r3, [r5, #0]
 8003c56:	e7d6      	b.n	8003c06 <_free_r+0x22>
 8003c58:	6820      	ldr	r0, [r4, #0]
 8003c5a:	1821      	adds	r1, r4, r0
 8003c5c:	428b      	cmp	r3, r1
 8003c5e:	bf01      	itttt	eq
 8003c60:	6819      	ldreq	r1, [r3, #0]
 8003c62:	685b      	ldreq	r3, [r3, #4]
 8003c64:	1809      	addeq	r1, r1, r0
 8003c66:	6021      	streq	r1, [r4, #0]
 8003c68:	6063      	str	r3, [r4, #4]
 8003c6a:	6054      	str	r4, [r2, #4]
 8003c6c:	e7cb      	b.n	8003c06 <_free_r+0x22>
 8003c6e:	bd38      	pop	{r3, r4, r5, pc}
 8003c70:	20000158 	.word	0x20000158

08003c74 <__ssputs_r>:
 8003c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c78:	461f      	mov	r7, r3
 8003c7a:	688e      	ldr	r6, [r1, #8]
 8003c7c:	4682      	mov	sl, r0
 8003c7e:	42be      	cmp	r6, r7
 8003c80:	460c      	mov	r4, r1
 8003c82:	4690      	mov	r8, r2
 8003c84:	680b      	ldr	r3, [r1, #0]
 8003c86:	d82d      	bhi.n	8003ce4 <__ssputs_r+0x70>
 8003c88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003c8c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003c90:	d026      	beq.n	8003ce0 <__ssputs_r+0x6c>
 8003c92:	6965      	ldr	r5, [r4, #20]
 8003c94:	6909      	ldr	r1, [r1, #16]
 8003c96:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c9a:	eba3 0901 	sub.w	r9, r3, r1
 8003c9e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003ca2:	1c7b      	adds	r3, r7, #1
 8003ca4:	444b      	add	r3, r9
 8003ca6:	106d      	asrs	r5, r5, #1
 8003ca8:	429d      	cmp	r5, r3
 8003caa:	bf38      	it	cc
 8003cac:	461d      	movcc	r5, r3
 8003cae:	0553      	lsls	r3, r2, #21
 8003cb0:	d527      	bpl.n	8003d02 <__ssputs_r+0x8e>
 8003cb2:	4629      	mov	r1, r5
 8003cb4:	f7ff fc32 	bl	800351c <_malloc_r>
 8003cb8:	4606      	mov	r6, r0
 8003cba:	b360      	cbz	r0, 8003d16 <__ssputs_r+0xa2>
 8003cbc:	464a      	mov	r2, r9
 8003cbe:	6921      	ldr	r1, [r4, #16]
 8003cc0:	f7ff ff81 	bl	8003bc6 <memcpy>
 8003cc4:	89a3      	ldrh	r3, [r4, #12]
 8003cc6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003cca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cce:	81a3      	strh	r3, [r4, #12]
 8003cd0:	6126      	str	r6, [r4, #16]
 8003cd2:	444e      	add	r6, r9
 8003cd4:	6026      	str	r6, [r4, #0]
 8003cd6:	463e      	mov	r6, r7
 8003cd8:	6165      	str	r5, [r4, #20]
 8003cda:	eba5 0509 	sub.w	r5, r5, r9
 8003cde:	60a5      	str	r5, [r4, #8]
 8003ce0:	42be      	cmp	r6, r7
 8003ce2:	d900      	bls.n	8003ce6 <__ssputs_r+0x72>
 8003ce4:	463e      	mov	r6, r7
 8003ce6:	4632      	mov	r2, r6
 8003ce8:	4641      	mov	r1, r8
 8003cea:	6820      	ldr	r0, [r4, #0]
 8003cec:	f000 fcf5 	bl	80046da <memmove>
 8003cf0:	2000      	movs	r0, #0
 8003cf2:	68a3      	ldr	r3, [r4, #8]
 8003cf4:	1b9b      	subs	r3, r3, r6
 8003cf6:	60a3      	str	r3, [r4, #8]
 8003cf8:	6823      	ldr	r3, [r4, #0]
 8003cfa:	4433      	add	r3, r6
 8003cfc:	6023      	str	r3, [r4, #0]
 8003cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d02:	462a      	mov	r2, r5
 8003d04:	f000 fd34 	bl	8004770 <_realloc_r>
 8003d08:	4606      	mov	r6, r0
 8003d0a:	2800      	cmp	r0, #0
 8003d0c:	d1e0      	bne.n	8003cd0 <__ssputs_r+0x5c>
 8003d0e:	4650      	mov	r0, sl
 8003d10:	6921      	ldr	r1, [r4, #16]
 8003d12:	f7ff ff67 	bl	8003be4 <_free_r>
 8003d16:	230c      	movs	r3, #12
 8003d18:	f8ca 3000 	str.w	r3, [sl]
 8003d1c:	89a3      	ldrh	r3, [r4, #12]
 8003d1e:	f04f 30ff 	mov.w	r0, #4294967295
 8003d22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d26:	81a3      	strh	r3, [r4, #12]
 8003d28:	e7e9      	b.n	8003cfe <__ssputs_r+0x8a>
	...

08003d2c <_svfiprintf_r>:
 8003d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d30:	4698      	mov	r8, r3
 8003d32:	898b      	ldrh	r3, [r1, #12]
 8003d34:	4607      	mov	r7, r0
 8003d36:	061b      	lsls	r3, r3, #24
 8003d38:	460d      	mov	r5, r1
 8003d3a:	4614      	mov	r4, r2
 8003d3c:	b09d      	sub	sp, #116	@ 0x74
 8003d3e:	d510      	bpl.n	8003d62 <_svfiprintf_r+0x36>
 8003d40:	690b      	ldr	r3, [r1, #16]
 8003d42:	b973      	cbnz	r3, 8003d62 <_svfiprintf_r+0x36>
 8003d44:	2140      	movs	r1, #64	@ 0x40
 8003d46:	f7ff fbe9 	bl	800351c <_malloc_r>
 8003d4a:	6028      	str	r0, [r5, #0]
 8003d4c:	6128      	str	r0, [r5, #16]
 8003d4e:	b930      	cbnz	r0, 8003d5e <_svfiprintf_r+0x32>
 8003d50:	230c      	movs	r3, #12
 8003d52:	603b      	str	r3, [r7, #0]
 8003d54:	f04f 30ff 	mov.w	r0, #4294967295
 8003d58:	b01d      	add	sp, #116	@ 0x74
 8003d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d5e:	2340      	movs	r3, #64	@ 0x40
 8003d60:	616b      	str	r3, [r5, #20]
 8003d62:	2300      	movs	r3, #0
 8003d64:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d66:	2320      	movs	r3, #32
 8003d68:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003d6c:	2330      	movs	r3, #48	@ 0x30
 8003d6e:	f04f 0901 	mov.w	r9, #1
 8003d72:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d76:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003f10 <_svfiprintf_r+0x1e4>
 8003d7a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003d7e:	4623      	mov	r3, r4
 8003d80:	469a      	mov	sl, r3
 8003d82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d86:	b10a      	cbz	r2, 8003d8c <_svfiprintf_r+0x60>
 8003d88:	2a25      	cmp	r2, #37	@ 0x25
 8003d8a:	d1f9      	bne.n	8003d80 <_svfiprintf_r+0x54>
 8003d8c:	ebba 0b04 	subs.w	fp, sl, r4
 8003d90:	d00b      	beq.n	8003daa <_svfiprintf_r+0x7e>
 8003d92:	465b      	mov	r3, fp
 8003d94:	4622      	mov	r2, r4
 8003d96:	4629      	mov	r1, r5
 8003d98:	4638      	mov	r0, r7
 8003d9a:	f7ff ff6b 	bl	8003c74 <__ssputs_r>
 8003d9e:	3001      	adds	r0, #1
 8003da0:	f000 80a7 	beq.w	8003ef2 <_svfiprintf_r+0x1c6>
 8003da4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003da6:	445a      	add	r2, fp
 8003da8:	9209      	str	r2, [sp, #36]	@ 0x24
 8003daa:	f89a 3000 	ldrb.w	r3, [sl]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	f000 809f 	beq.w	8003ef2 <_svfiprintf_r+0x1c6>
 8003db4:	2300      	movs	r3, #0
 8003db6:	f04f 32ff 	mov.w	r2, #4294967295
 8003dba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003dbe:	f10a 0a01 	add.w	sl, sl, #1
 8003dc2:	9304      	str	r3, [sp, #16]
 8003dc4:	9307      	str	r3, [sp, #28]
 8003dc6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003dca:	931a      	str	r3, [sp, #104]	@ 0x68
 8003dcc:	4654      	mov	r4, sl
 8003dce:	2205      	movs	r2, #5
 8003dd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dd4:	484e      	ldr	r0, [pc, #312]	@ (8003f10 <_svfiprintf_r+0x1e4>)
 8003dd6:	f000 fcbd 	bl	8004754 <memchr>
 8003dda:	9a04      	ldr	r2, [sp, #16]
 8003ddc:	b9d8      	cbnz	r0, 8003e16 <_svfiprintf_r+0xea>
 8003dde:	06d0      	lsls	r0, r2, #27
 8003de0:	bf44      	itt	mi
 8003de2:	2320      	movmi	r3, #32
 8003de4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003de8:	0711      	lsls	r1, r2, #28
 8003dea:	bf44      	itt	mi
 8003dec:	232b      	movmi	r3, #43	@ 0x2b
 8003dee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003df2:	f89a 3000 	ldrb.w	r3, [sl]
 8003df6:	2b2a      	cmp	r3, #42	@ 0x2a
 8003df8:	d015      	beq.n	8003e26 <_svfiprintf_r+0xfa>
 8003dfa:	4654      	mov	r4, sl
 8003dfc:	2000      	movs	r0, #0
 8003dfe:	f04f 0c0a 	mov.w	ip, #10
 8003e02:	9a07      	ldr	r2, [sp, #28]
 8003e04:	4621      	mov	r1, r4
 8003e06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e0a:	3b30      	subs	r3, #48	@ 0x30
 8003e0c:	2b09      	cmp	r3, #9
 8003e0e:	d94b      	bls.n	8003ea8 <_svfiprintf_r+0x17c>
 8003e10:	b1b0      	cbz	r0, 8003e40 <_svfiprintf_r+0x114>
 8003e12:	9207      	str	r2, [sp, #28]
 8003e14:	e014      	b.n	8003e40 <_svfiprintf_r+0x114>
 8003e16:	eba0 0308 	sub.w	r3, r0, r8
 8003e1a:	fa09 f303 	lsl.w	r3, r9, r3
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	46a2      	mov	sl, r4
 8003e22:	9304      	str	r3, [sp, #16]
 8003e24:	e7d2      	b.n	8003dcc <_svfiprintf_r+0xa0>
 8003e26:	9b03      	ldr	r3, [sp, #12]
 8003e28:	1d19      	adds	r1, r3, #4
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	9103      	str	r1, [sp, #12]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	bfbb      	ittet	lt
 8003e32:	425b      	neglt	r3, r3
 8003e34:	f042 0202 	orrlt.w	r2, r2, #2
 8003e38:	9307      	strge	r3, [sp, #28]
 8003e3a:	9307      	strlt	r3, [sp, #28]
 8003e3c:	bfb8      	it	lt
 8003e3e:	9204      	strlt	r2, [sp, #16]
 8003e40:	7823      	ldrb	r3, [r4, #0]
 8003e42:	2b2e      	cmp	r3, #46	@ 0x2e
 8003e44:	d10a      	bne.n	8003e5c <_svfiprintf_r+0x130>
 8003e46:	7863      	ldrb	r3, [r4, #1]
 8003e48:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e4a:	d132      	bne.n	8003eb2 <_svfiprintf_r+0x186>
 8003e4c:	9b03      	ldr	r3, [sp, #12]
 8003e4e:	3402      	adds	r4, #2
 8003e50:	1d1a      	adds	r2, r3, #4
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	9203      	str	r2, [sp, #12]
 8003e56:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003e5a:	9305      	str	r3, [sp, #20]
 8003e5c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003f14 <_svfiprintf_r+0x1e8>
 8003e60:	2203      	movs	r2, #3
 8003e62:	4650      	mov	r0, sl
 8003e64:	7821      	ldrb	r1, [r4, #0]
 8003e66:	f000 fc75 	bl	8004754 <memchr>
 8003e6a:	b138      	cbz	r0, 8003e7c <_svfiprintf_r+0x150>
 8003e6c:	2240      	movs	r2, #64	@ 0x40
 8003e6e:	9b04      	ldr	r3, [sp, #16]
 8003e70:	eba0 000a 	sub.w	r0, r0, sl
 8003e74:	4082      	lsls	r2, r0
 8003e76:	4313      	orrs	r3, r2
 8003e78:	3401      	adds	r4, #1
 8003e7a:	9304      	str	r3, [sp, #16]
 8003e7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e80:	2206      	movs	r2, #6
 8003e82:	4825      	ldr	r0, [pc, #148]	@ (8003f18 <_svfiprintf_r+0x1ec>)
 8003e84:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003e88:	f000 fc64 	bl	8004754 <memchr>
 8003e8c:	2800      	cmp	r0, #0
 8003e8e:	d036      	beq.n	8003efe <_svfiprintf_r+0x1d2>
 8003e90:	4b22      	ldr	r3, [pc, #136]	@ (8003f1c <_svfiprintf_r+0x1f0>)
 8003e92:	bb1b      	cbnz	r3, 8003edc <_svfiprintf_r+0x1b0>
 8003e94:	9b03      	ldr	r3, [sp, #12]
 8003e96:	3307      	adds	r3, #7
 8003e98:	f023 0307 	bic.w	r3, r3, #7
 8003e9c:	3308      	adds	r3, #8
 8003e9e:	9303      	str	r3, [sp, #12]
 8003ea0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ea2:	4433      	add	r3, r6
 8003ea4:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ea6:	e76a      	b.n	8003d7e <_svfiprintf_r+0x52>
 8003ea8:	460c      	mov	r4, r1
 8003eaa:	2001      	movs	r0, #1
 8003eac:	fb0c 3202 	mla	r2, ip, r2, r3
 8003eb0:	e7a8      	b.n	8003e04 <_svfiprintf_r+0xd8>
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	f04f 0c0a 	mov.w	ip, #10
 8003eb8:	4619      	mov	r1, r3
 8003eba:	3401      	adds	r4, #1
 8003ebc:	9305      	str	r3, [sp, #20]
 8003ebe:	4620      	mov	r0, r4
 8003ec0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ec4:	3a30      	subs	r2, #48	@ 0x30
 8003ec6:	2a09      	cmp	r2, #9
 8003ec8:	d903      	bls.n	8003ed2 <_svfiprintf_r+0x1a6>
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d0c6      	beq.n	8003e5c <_svfiprintf_r+0x130>
 8003ece:	9105      	str	r1, [sp, #20]
 8003ed0:	e7c4      	b.n	8003e5c <_svfiprintf_r+0x130>
 8003ed2:	4604      	mov	r4, r0
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	fb0c 2101 	mla	r1, ip, r1, r2
 8003eda:	e7f0      	b.n	8003ebe <_svfiprintf_r+0x192>
 8003edc:	ab03      	add	r3, sp, #12
 8003ede:	9300      	str	r3, [sp, #0]
 8003ee0:	462a      	mov	r2, r5
 8003ee2:	4638      	mov	r0, r7
 8003ee4:	4b0e      	ldr	r3, [pc, #56]	@ (8003f20 <_svfiprintf_r+0x1f4>)
 8003ee6:	a904      	add	r1, sp, #16
 8003ee8:	f3af 8000 	nop.w
 8003eec:	1c42      	adds	r2, r0, #1
 8003eee:	4606      	mov	r6, r0
 8003ef0:	d1d6      	bne.n	8003ea0 <_svfiprintf_r+0x174>
 8003ef2:	89ab      	ldrh	r3, [r5, #12]
 8003ef4:	065b      	lsls	r3, r3, #25
 8003ef6:	f53f af2d 	bmi.w	8003d54 <_svfiprintf_r+0x28>
 8003efa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003efc:	e72c      	b.n	8003d58 <_svfiprintf_r+0x2c>
 8003efe:	ab03      	add	r3, sp, #12
 8003f00:	9300      	str	r3, [sp, #0]
 8003f02:	462a      	mov	r2, r5
 8003f04:	4638      	mov	r0, r7
 8003f06:	4b06      	ldr	r3, [pc, #24]	@ (8003f20 <_svfiprintf_r+0x1f4>)
 8003f08:	a904      	add	r1, sp, #16
 8003f0a:	f000 f9bd 	bl	8004288 <_printf_i>
 8003f0e:	e7ed      	b.n	8003eec <_svfiprintf_r+0x1c0>
 8003f10:	0800492e 	.word	0x0800492e
 8003f14:	08004934 	.word	0x08004934
 8003f18:	08004938 	.word	0x08004938
 8003f1c:	00000000 	.word	0x00000000
 8003f20:	08003c75 	.word	0x08003c75

08003f24 <__sfputc_r>:
 8003f24:	6893      	ldr	r3, [r2, #8]
 8003f26:	b410      	push	{r4}
 8003f28:	3b01      	subs	r3, #1
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	6093      	str	r3, [r2, #8]
 8003f2e:	da07      	bge.n	8003f40 <__sfputc_r+0x1c>
 8003f30:	6994      	ldr	r4, [r2, #24]
 8003f32:	42a3      	cmp	r3, r4
 8003f34:	db01      	blt.n	8003f3a <__sfputc_r+0x16>
 8003f36:	290a      	cmp	r1, #10
 8003f38:	d102      	bne.n	8003f40 <__sfputc_r+0x1c>
 8003f3a:	bc10      	pop	{r4}
 8003f3c:	f7ff bd23 	b.w	8003986 <__swbuf_r>
 8003f40:	6813      	ldr	r3, [r2, #0]
 8003f42:	1c58      	adds	r0, r3, #1
 8003f44:	6010      	str	r0, [r2, #0]
 8003f46:	7019      	strb	r1, [r3, #0]
 8003f48:	4608      	mov	r0, r1
 8003f4a:	bc10      	pop	{r4}
 8003f4c:	4770      	bx	lr

08003f4e <__sfputs_r>:
 8003f4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f50:	4606      	mov	r6, r0
 8003f52:	460f      	mov	r7, r1
 8003f54:	4614      	mov	r4, r2
 8003f56:	18d5      	adds	r5, r2, r3
 8003f58:	42ac      	cmp	r4, r5
 8003f5a:	d101      	bne.n	8003f60 <__sfputs_r+0x12>
 8003f5c:	2000      	movs	r0, #0
 8003f5e:	e007      	b.n	8003f70 <__sfputs_r+0x22>
 8003f60:	463a      	mov	r2, r7
 8003f62:	4630      	mov	r0, r6
 8003f64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f68:	f7ff ffdc 	bl	8003f24 <__sfputc_r>
 8003f6c:	1c43      	adds	r3, r0, #1
 8003f6e:	d1f3      	bne.n	8003f58 <__sfputs_r+0xa>
 8003f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003f74 <_vfiprintf_r>:
 8003f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f78:	460d      	mov	r5, r1
 8003f7a:	4614      	mov	r4, r2
 8003f7c:	4698      	mov	r8, r3
 8003f7e:	4606      	mov	r6, r0
 8003f80:	b09d      	sub	sp, #116	@ 0x74
 8003f82:	b118      	cbz	r0, 8003f8c <_vfiprintf_r+0x18>
 8003f84:	6a03      	ldr	r3, [r0, #32]
 8003f86:	b90b      	cbnz	r3, 8003f8c <_vfiprintf_r+0x18>
 8003f88:	f7ff fbe0 	bl	800374c <__sinit>
 8003f8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003f8e:	07d9      	lsls	r1, r3, #31
 8003f90:	d405      	bmi.n	8003f9e <_vfiprintf_r+0x2a>
 8003f92:	89ab      	ldrh	r3, [r5, #12]
 8003f94:	059a      	lsls	r2, r3, #22
 8003f96:	d402      	bmi.n	8003f9e <_vfiprintf_r+0x2a>
 8003f98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003f9a:	f7ff fe12 	bl	8003bc2 <__retarget_lock_acquire_recursive>
 8003f9e:	89ab      	ldrh	r3, [r5, #12]
 8003fa0:	071b      	lsls	r3, r3, #28
 8003fa2:	d501      	bpl.n	8003fa8 <_vfiprintf_r+0x34>
 8003fa4:	692b      	ldr	r3, [r5, #16]
 8003fa6:	b99b      	cbnz	r3, 8003fd0 <_vfiprintf_r+0x5c>
 8003fa8:	4629      	mov	r1, r5
 8003faa:	4630      	mov	r0, r6
 8003fac:	f7ff fd2a 	bl	8003a04 <__swsetup_r>
 8003fb0:	b170      	cbz	r0, 8003fd0 <_vfiprintf_r+0x5c>
 8003fb2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003fb4:	07dc      	lsls	r4, r3, #31
 8003fb6:	d504      	bpl.n	8003fc2 <_vfiprintf_r+0x4e>
 8003fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8003fbc:	b01d      	add	sp, #116	@ 0x74
 8003fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fc2:	89ab      	ldrh	r3, [r5, #12]
 8003fc4:	0598      	lsls	r0, r3, #22
 8003fc6:	d4f7      	bmi.n	8003fb8 <_vfiprintf_r+0x44>
 8003fc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003fca:	f7ff fdfb 	bl	8003bc4 <__retarget_lock_release_recursive>
 8003fce:	e7f3      	b.n	8003fb8 <_vfiprintf_r+0x44>
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	9309      	str	r3, [sp, #36]	@ 0x24
 8003fd4:	2320      	movs	r3, #32
 8003fd6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003fda:	2330      	movs	r3, #48	@ 0x30
 8003fdc:	f04f 0901 	mov.w	r9, #1
 8003fe0:	f8cd 800c 	str.w	r8, [sp, #12]
 8003fe4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8004190 <_vfiprintf_r+0x21c>
 8003fe8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003fec:	4623      	mov	r3, r4
 8003fee:	469a      	mov	sl, r3
 8003ff0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ff4:	b10a      	cbz	r2, 8003ffa <_vfiprintf_r+0x86>
 8003ff6:	2a25      	cmp	r2, #37	@ 0x25
 8003ff8:	d1f9      	bne.n	8003fee <_vfiprintf_r+0x7a>
 8003ffa:	ebba 0b04 	subs.w	fp, sl, r4
 8003ffe:	d00b      	beq.n	8004018 <_vfiprintf_r+0xa4>
 8004000:	465b      	mov	r3, fp
 8004002:	4622      	mov	r2, r4
 8004004:	4629      	mov	r1, r5
 8004006:	4630      	mov	r0, r6
 8004008:	f7ff ffa1 	bl	8003f4e <__sfputs_r>
 800400c:	3001      	adds	r0, #1
 800400e:	f000 80a7 	beq.w	8004160 <_vfiprintf_r+0x1ec>
 8004012:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004014:	445a      	add	r2, fp
 8004016:	9209      	str	r2, [sp, #36]	@ 0x24
 8004018:	f89a 3000 	ldrb.w	r3, [sl]
 800401c:	2b00      	cmp	r3, #0
 800401e:	f000 809f 	beq.w	8004160 <_vfiprintf_r+0x1ec>
 8004022:	2300      	movs	r3, #0
 8004024:	f04f 32ff 	mov.w	r2, #4294967295
 8004028:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800402c:	f10a 0a01 	add.w	sl, sl, #1
 8004030:	9304      	str	r3, [sp, #16]
 8004032:	9307      	str	r3, [sp, #28]
 8004034:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004038:	931a      	str	r3, [sp, #104]	@ 0x68
 800403a:	4654      	mov	r4, sl
 800403c:	2205      	movs	r2, #5
 800403e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004042:	4853      	ldr	r0, [pc, #332]	@ (8004190 <_vfiprintf_r+0x21c>)
 8004044:	f000 fb86 	bl	8004754 <memchr>
 8004048:	9a04      	ldr	r2, [sp, #16]
 800404a:	b9d8      	cbnz	r0, 8004084 <_vfiprintf_r+0x110>
 800404c:	06d1      	lsls	r1, r2, #27
 800404e:	bf44      	itt	mi
 8004050:	2320      	movmi	r3, #32
 8004052:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004056:	0713      	lsls	r3, r2, #28
 8004058:	bf44      	itt	mi
 800405a:	232b      	movmi	r3, #43	@ 0x2b
 800405c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004060:	f89a 3000 	ldrb.w	r3, [sl]
 8004064:	2b2a      	cmp	r3, #42	@ 0x2a
 8004066:	d015      	beq.n	8004094 <_vfiprintf_r+0x120>
 8004068:	4654      	mov	r4, sl
 800406a:	2000      	movs	r0, #0
 800406c:	f04f 0c0a 	mov.w	ip, #10
 8004070:	9a07      	ldr	r2, [sp, #28]
 8004072:	4621      	mov	r1, r4
 8004074:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004078:	3b30      	subs	r3, #48	@ 0x30
 800407a:	2b09      	cmp	r3, #9
 800407c:	d94b      	bls.n	8004116 <_vfiprintf_r+0x1a2>
 800407e:	b1b0      	cbz	r0, 80040ae <_vfiprintf_r+0x13a>
 8004080:	9207      	str	r2, [sp, #28]
 8004082:	e014      	b.n	80040ae <_vfiprintf_r+0x13a>
 8004084:	eba0 0308 	sub.w	r3, r0, r8
 8004088:	fa09 f303 	lsl.w	r3, r9, r3
 800408c:	4313      	orrs	r3, r2
 800408e:	46a2      	mov	sl, r4
 8004090:	9304      	str	r3, [sp, #16]
 8004092:	e7d2      	b.n	800403a <_vfiprintf_r+0xc6>
 8004094:	9b03      	ldr	r3, [sp, #12]
 8004096:	1d19      	adds	r1, r3, #4
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	9103      	str	r1, [sp, #12]
 800409c:	2b00      	cmp	r3, #0
 800409e:	bfbb      	ittet	lt
 80040a0:	425b      	neglt	r3, r3
 80040a2:	f042 0202 	orrlt.w	r2, r2, #2
 80040a6:	9307      	strge	r3, [sp, #28]
 80040a8:	9307      	strlt	r3, [sp, #28]
 80040aa:	bfb8      	it	lt
 80040ac:	9204      	strlt	r2, [sp, #16]
 80040ae:	7823      	ldrb	r3, [r4, #0]
 80040b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80040b2:	d10a      	bne.n	80040ca <_vfiprintf_r+0x156>
 80040b4:	7863      	ldrb	r3, [r4, #1]
 80040b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80040b8:	d132      	bne.n	8004120 <_vfiprintf_r+0x1ac>
 80040ba:	9b03      	ldr	r3, [sp, #12]
 80040bc:	3402      	adds	r4, #2
 80040be:	1d1a      	adds	r2, r3, #4
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	9203      	str	r2, [sp, #12]
 80040c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80040c8:	9305      	str	r3, [sp, #20]
 80040ca:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8004194 <_vfiprintf_r+0x220>
 80040ce:	2203      	movs	r2, #3
 80040d0:	4650      	mov	r0, sl
 80040d2:	7821      	ldrb	r1, [r4, #0]
 80040d4:	f000 fb3e 	bl	8004754 <memchr>
 80040d8:	b138      	cbz	r0, 80040ea <_vfiprintf_r+0x176>
 80040da:	2240      	movs	r2, #64	@ 0x40
 80040dc:	9b04      	ldr	r3, [sp, #16]
 80040de:	eba0 000a 	sub.w	r0, r0, sl
 80040e2:	4082      	lsls	r2, r0
 80040e4:	4313      	orrs	r3, r2
 80040e6:	3401      	adds	r4, #1
 80040e8:	9304      	str	r3, [sp, #16]
 80040ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040ee:	2206      	movs	r2, #6
 80040f0:	4829      	ldr	r0, [pc, #164]	@ (8004198 <_vfiprintf_r+0x224>)
 80040f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80040f6:	f000 fb2d 	bl	8004754 <memchr>
 80040fa:	2800      	cmp	r0, #0
 80040fc:	d03f      	beq.n	800417e <_vfiprintf_r+0x20a>
 80040fe:	4b27      	ldr	r3, [pc, #156]	@ (800419c <_vfiprintf_r+0x228>)
 8004100:	bb1b      	cbnz	r3, 800414a <_vfiprintf_r+0x1d6>
 8004102:	9b03      	ldr	r3, [sp, #12]
 8004104:	3307      	adds	r3, #7
 8004106:	f023 0307 	bic.w	r3, r3, #7
 800410a:	3308      	adds	r3, #8
 800410c:	9303      	str	r3, [sp, #12]
 800410e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004110:	443b      	add	r3, r7
 8004112:	9309      	str	r3, [sp, #36]	@ 0x24
 8004114:	e76a      	b.n	8003fec <_vfiprintf_r+0x78>
 8004116:	460c      	mov	r4, r1
 8004118:	2001      	movs	r0, #1
 800411a:	fb0c 3202 	mla	r2, ip, r2, r3
 800411e:	e7a8      	b.n	8004072 <_vfiprintf_r+0xfe>
 8004120:	2300      	movs	r3, #0
 8004122:	f04f 0c0a 	mov.w	ip, #10
 8004126:	4619      	mov	r1, r3
 8004128:	3401      	adds	r4, #1
 800412a:	9305      	str	r3, [sp, #20]
 800412c:	4620      	mov	r0, r4
 800412e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004132:	3a30      	subs	r2, #48	@ 0x30
 8004134:	2a09      	cmp	r2, #9
 8004136:	d903      	bls.n	8004140 <_vfiprintf_r+0x1cc>
 8004138:	2b00      	cmp	r3, #0
 800413a:	d0c6      	beq.n	80040ca <_vfiprintf_r+0x156>
 800413c:	9105      	str	r1, [sp, #20]
 800413e:	e7c4      	b.n	80040ca <_vfiprintf_r+0x156>
 8004140:	4604      	mov	r4, r0
 8004142:	2301      	movs	r3, #1
 8004144:	fb0c 2101 	mla	r1, ip, r1, r2
 8004148:	e7f0      	b.n	800412c <_vfiprintf_r+0x1b8>
 800414a:	ab03      	add	r3, sp, #12
 800414c:	9300      	str	r3, [sp, #0]
 800414e:	462a      	mov	r2, r5
 8004150:	4630      	mov	r0, r6
 8004152:	4b13      	ldr	r3, [pc, #76]	@ (80041a0 <_vfiprintf_r+0x22c>)
 8004154:	a904      	add	r1, sp, #16
 8004156:	f3af 8000 	nop.w
 800415a:	4607      	mov	r7, r0
 800415c:	1c78      	adds	r0, r7, #1
 800415e:	d1d6      	bne.n	800410e <_vfiprintf_r+0x19a>
 8004160:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004162:	07d9      	lsls	r1, r3, #31
 8004164:	d405      	bmi.n	8004172 <_vfiprintf_r+0x1fe>
 8004166:	89ab      	ldrh	r3, [r5, #12]
 8004168:	059a      	lsls	r2, r3, #22
 800416a:	d402      	bmi.n	8004172 <_vfiprintf_r+0x1fe>
 800416c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800416e:	f7ff fd29 	bl	8003bc4 <__retarget_lock_release_recursive>
 8004172:	89ab      	ldrh	r3, [r5, #12]
 8004174:	065b      	lsls	r3, r3, #25
 8004176:	f53f af1f 	bmi.w	8003fb8 <_vfiprintf_r+0x44>
 800417a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800417c:	e71e      	b.n	8003fbc <_vfiprintf_r+0x48>
 800417e:	ab03      	add	r3, sp, #12
 8004180:	9300      	str	r3, [sp, #0]
 8004182:	462a      	mov	r2, r5
 8004184:	4630      	mov	r0, r6
 8004186:	4b06      	ldr	r3, [pc, #24]	@ (80041a0 <_vfiprintf_r+0x22c>)
 8004188:	a904      	add	r1, sp, #16
 800418a:	f000 f87d 	bl	8004288 <_printf_i>
 800418e:	e7e4      	b.n	800415a <_vfiprintf_r+0x1e6>
 8004190:	0800492e 	.word	0x0800492e
 8004194:	08004934 	.word	0x08004934
 8004198:	08004938 	.word	0x08004938
 800419c:	00000000 	.word	0x00000000
 80041a0:	08003f4f 	.word	0x08003f4f

080041a4 <_printf_common>:
 80041a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041a8:	4616      	mov	r6, r2
 80041aa:	4698      	mov	r8, r3
 80041ac:	688a      	ldr	r2, [r1, #8]
 80041ae:	690b      	ldr	r3, [r1, #16]
 80041b0:	4607      	mov	r7, r0
 80041b2:	4293      	cmp	r3, r2
 80041b4:	bfb8      	it	lt
 80041b6:	4613      	movlt	r3, r2
 80041b8:	6033      	str	r3, [r6, #0]
 80041ba:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80041be:	460c      	mov	r4, r1
 80041c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80041c4:	b10a      	cbz	r2, 80041ca <_printf_common+0x26>
 80041c6:	3301      	adds	r3, #1
 80041c8:	6033      	str	r3, [r6, #0]
 80041ca:	6823      	ldr	r3, [r4, #0]
 80041cc:	0699      	lsls	r1, r3, #26
 80041ce:	bf42      	ittt	mi
 80041d0:	6833      	ldrmi	r3, [r6, #0]
 80041d2:	3302      	addmi	r3, #2
 80041d4:	6033      	strmi	r3, [r6, #0]
 80041d6:	6825      	ldr	r5, [r4, #0]
 80041d8:	f015 0506 	ands.w	r5, r5, #6
 80041dc:	d106      	bne.n	80041ec <_printf_common+0x48>
 80041de:	f104 0a19 	add.w	sl, r4, #25
 80041e2:	68e3      	ldr	r3, [r4, #12]
 80041e4:	6832      	ldr	r2, [r6, #0]
 80041e6:	1a9b      	subs	r3, r3, r2
 80041e8:	42ab      	cmp	r3, r5
 80041ea:	dc2b      	bgt.n	8004244 <_printf_common+0xa0>
 80041ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80041f0:	6822      	ldr	r2, [r4, #0]
 80041f2:	3b00      	subs	r3, #0
 80041f4:	bf18      	it	ne
 80041f6:	2301      	movne	r3, #1
 80041f8:	0692      	lsls	r2, r2, #26
 80041fa:	d430      	bmi.n	800425e <_printf_common+0xba>
 80041fc:	4641      	mov	r1, r8
 80041fe:	4638      	mov	r0, r7
 8004200:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004204:	47c8      	blx	r9
 8004206:	3001      	adds	r0, #1
 8004208:	d023      	beq.n	8004252 <_printf_common+0xae>
 800420a:	6823      	ldr	r3, [r4, #0]
 800420c:	6922      	ldr	r2, [r4, #16]
 800420e:	f003 0306 	and.w	r3, r3, #6
 8004212:	2b04      	cmp	r3, #4
 8004214:	bf14      	ite	ne
 8004216:	2500      	movne	r5, #0
 8004218:	6833      	ldreq	r3, [r6, #0]
 800421a:	f04f 0600 	mov.w	r6, #0
 800421e:	bf08      	it	eq
 8004220:	68e5      	ldreq	r5, [r4, #12]
 8004222:	f104 041a 	add.w	r4, r4, #26
 8004226:	bf08      	it	eq
 8004228:	1aed      	subeq	r5, r5, r3
 800422a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800422e:	bf08      	it	eq
 8004230:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004234:	4293      	cmp	r3, r2
 8004236:	bfc4      	itt	gt
 8004238:	1a9b      	subgt	r3, r3, r2
 800423a:	18ed      	addgt	r5, r5, r3
 800423c:	42b5      	cmp	r5, r6
 800423e:	d11a      	bne.n	8004276 <_printf_common+0xd2>
 8004240:	2000      	movs	r0, #0
 8004242:	e008      	b.n	8004256 <_printf_common+0xb2>
 8004244:	2301      	movs	r3, #1
 8004246:	4652      	mov	r2, sl
 8004248:	4641      	mov	r1, r8
 800424a:	4638      	mov	r0, r7
 800424c:	47c8      	blx	r9
 800424e:	3001      	adds	r0, #1
 8004250:	d103      	bne.n	800425a <_printf_common+0xb6>
 8004252:	f04f 30ff 	mov.w	r0, #4294967295
 8004256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800425a:	3501      	adds	r5, #1
 800425c:	e7c1      	b.n	80041e2 <_printf_common+0x3e>
 800425e:	2030      	movs	r0, #48	@ 0x30
 8004260:	18e1      	adds	r1, r4, r3
 8004262:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004266:	1c5a      	adds	r2, r3, #1
 8004268:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800426c:	4422      	add	r2, r4
 800426e:	3302      	adds	r3, #2
 8004270:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004274:	e7c2      	b.n	80041fc <_printf_common+0x58>
 8004276:	2301      	movs	r3, #1
 8004278:	4622      	mov	r2, r4
 800427a:	4641      	mov	r1, r8
 800427c:	4638      	mov	r0, r7
 800427e:	47c8      	blx	r9
 8004280:	3001      	adds	r0, #1
 8004282:	d0e6      	beq.n	8004252 <_printf_common+0xae>
 8004284:	3601      	adds	r6, #1
 8004286:	e7d9      	b.n	800423c <_printf_common+0x98>

08004288 <_printf_i>:
 8004288:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800428c:	7e0f      	ldrb	r7, [r1, #24]
 800428e:	4691      	mov	r9, r2
 8004290:	2f78      	cmp	r7, #120	@ 0x78
 8004292:	4680      	mov	r8, r0
 8004294:	460c      	mov	r4, r1
 8004296:	469a      	mov	sl, r3
 8004298:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800429a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800429e:	d807      	bhi.n	80042b0 <_printf_i+0x28>
 80042a0:	2f62      	cmp	r7, #98	@ 0x62
 80042a2:	d80a      	bhi.n	80042ba <_printf_i+0x32>
 80042a4:	2f00      	cmp	r7, #0
 80042a6:	f000 80d3 	beq.w	8004450 <_printf_i+0x1c8>
 80042aa:	2f58      	cmp	r7, #88	@ 0x58
 80042ac:	f000 80ba 	beq.w	8004424 <_printf_i+0x19c>
 80042b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80042b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80042b8:	e03a      	b.n	8004330 <_printf_i+0xa8>
 80042ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80042be:	2b15      	cmp	r3, #21
 80042c0:	d8f6      	bhi.n	80042b0 <_printf_i+0x28>
 80042c2:	a101      	add	r1, pc, #4	@ (adr r1, 80042c8 <_printf_i+0x40>)
 80042c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80042c8:	08004321 	.word	0x08004321
 80042cc:	08004335 	.word	0x08004335
 80042d0:	080042b1 	.word	0x080042b1
 80042d4:	080042b1 	.word	0x080042b1
 80042d8:	080042b1 	.word	0x080042b1
 80042dc:	080042b1 	.word	0x080042b1
 80042e0:	08004335 	.word	0x08004335
 80042e4:	080042b1 	.word	0x080042b1
 80042e8:	080042b1 	.word	0x080042b1
 80042ec:	080042b1 	.word	0x080042b1
 80042f0:	080042b1 	.word	0x080042b1
 80042f4:	08004437 	.word	0x08004437
 80042f8:	0800435f 	.word	0x0800435f
 80042fc:	080043f1 	.word	0x080043f1
 8004300:	080042b1 	.word	0x080042b1
 8004304:	080042b1 	.word	0x080042b1
 8004308:	08004459 	.word	0x08004459
 800430c:	080042b1 	.word	0x080042b1
 8004310:	0800435f 	.word	0x0800435f
 8004314:	080042b1 	.word	0x080042b1
 8004318:	080042b1 	.word	0x080042b1
 800431c:	080043f9 	.word	0x080043f9
 8004320:	6833      	ldr	r3, [r6, #0]
 8004322:	1d1a      	adds	r2, r3, #4
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	6032      	str	r2, [r6, #0]
 8004328:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800432c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004330:	2301      	movs	r3, #1
 8004332:	e09e      	b.n	8004472 <_printf_i+0x1ea>
 8004334:	6833      	ldr	r3, [r6, #0]
 8004336:	6820      	ldr	r0, [r4, #0]
 8004338:	1d19      	adds	r1, r3, #4
 800433a:	6031      	str	r1, [r6, #0]
 800433c:	0606      	lsls	r6, r0, #24
 800433e:	d501      	bpl.n	8004344 <_printf_i+0xbc>
 8004340:	681d      	ldr	r5, [r3, #0]
 8004342:	e003      	b.n	800434c <_printf_i+0xc4>
 8004344:	0645      	lsls	r5, r0, #25
 8004346:	d5fb      	bpl.n	8004340 <_printf_i+0xb8>
 8004348:	f9b3 5000 	ldrsh.w	r5, [r3]
 800434c:	2d00      	cmp	r5, #0
 800434e:	da03      	bge.n	8004358 <_printf_i+0xd0>
 8004350:	232d      	movs	r3, #45	@ 0x2d
 8004352:	426d      	negs	r5, r5
 8004354:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004358:	230a      	movs	r3, #10
 800435a:	4859      	ldr	r0, [pc, #356]	@ (80044c0 <_printf_i+0x238>)
 800435c:	e011      	b.n	8004382 <_printf_i+0xfa>
 800435e:	6821      	ldr	r1, [r4, #0]
 8004360:	6833      	ldr	r3, [r6, #0]
 8004362:	0608      	lsls	r0, r1, #24
 8004364:	f853 5b04 	ldr.w	r5, [r3], #4
 8004368:	d402      	bmi.n	8004370 <_printf_i+0xe8>
 800436a:	0649      	lsls	r1, r1, #25
 800436c:	bf48      	it	mi
 800436e:	b2ad      	uxthmi	r5, r5
 8004370:	2f6f      	cmp	r7, #111	@ 0x6f
 8004372:	6033      	str	r3, [r6, #0]
 8004374:	bf14      	ite	ne
 8004376:	230a      	movne	r3, #10
 8004378:	2308      	moveq	r3, #8
 800437a:	4851      	ldr	r0, [pc, #324]	@ (80044c0 <_printf_i+0x238>)
 800437c:	2100      	movs	r1, #0
 800437e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004382:	6866      	ldr	r6, [r4, #4]
 8004384:	2e00      	cmp	r6, #0
 8004386:	bfa8      	it	ge
 8004388:	6821      	ldrge	r1, [r4, #0]
 800438a:	60a6      	str	r6, [r4, #8]
 800438c:	bfa4      	itt	ge
 800438e:	f021 0104 	bicge.w	r1, r1, #4
 8004392:	6021      	strge	r1, [r4, #0]
 8004394:	b90d      	cbnz	r5, 800439a <_printf_i+0x112>
 8004396:	2e00      	cmp	r6, #0
 8004398:	d04b      	beq.n	8004432 <_printf_i+0x1aa>
 800439a:	4616      	mov	r6, r2
 800439c:	fbb5 f1f3 	udiv	r1, r5, r3
 80043a0:	fb03 5711 	mls	r7, r3, r1, r5
 80043a4:	5dc7      	ldrb	r7, [r0, r7]
 80043a6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80043aa:	462f      	mov	r7, r5
 80043ac:	42bb      	cmp	r3, r7
 80043ae:	460d      	mov	r5, r1
 80043b0:	d9f4      	bls.n	800439c <_printf_i+0x114>
 80043b2:	2b08      	cmp	r3, #8
 80043b4:	d10b      	bne.n	80043ce <_printf_i+0x146>
 80043b6:	6823      	ldr	r3, [r4, #0]
 80043b8:	07df      	lsls	r7, r3, #31
 80043ba:	d508      	bpl.n	80043ce <_printf_i+0x146>
 80043bc:	6923      	ldr	r3, [r4, #16]
 80043be:	6861      	ldr	r1, [r4, #4]
 80043c0:	4299      	cmp	r1, r3
 80043c2:	bfde      	ittt	le
 80043c4:	2330      	movle	r3, #48	@ 0x30
 80043c6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80043ca:	f106 36ff 	addle.w	r6, r6, #4294967295
 80043ce:	1b92      	subs	r2, r2, r6
 80043d0:	6122      	str	r2, [r4, #16]
 80043d2:	464b      	mov	r3, r9
 80043d4:	4621      	mov	r1, r4
 80043d6:	4640      	mov	r0, r8
 80043d8:	f8cd a000 	str.w	sl, [sp]
 80043dc:	aa03      	add	r2, sp, #12
 80043de:	f7ff fee1 	bl	80041a4 <_printf_common>
 80043e2:	3001      	adds	r0, #1
 80043e4:	d14a      	bne.n	800447c <_printf_i+0x1f4>
 80043e6:	f04f 30ff 	mov.w	r0, #4294967295
 80043ea:	b004      	add	sp, #16
 80043ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043f0:	6823      	ldr	r3, [r4, #0]
 80043f2:	f043 0320 	orr.w	r3, r3, #32
 80043f6:	6023      	str	r3, [r4, #0]
 80043f8:	2778      	movs	r7, #120	@ 0x78
 80043fa:	4832      	ldr	r0, [pc, #200]	@ (80044c4 <_printf_i+0x23c>)
 80043fc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004400:	6823      	ldr	r3, [r4, #0]
 8004402:	6831      	ldr	r1, [r6, #0]
 8004404:	061f      	lsls	r7, r3, #24
 8004406:	f851 5b04 	ldr.w	r5, [r1], #4
 800440a:	d402      	bmi.n	8004412 <_printf_i+0x18a>
 800440c:	065f      	lsls	r7, r3, #25
 800440e:	bf48      	it	mi
 8004410:	b2ad      	uxthmi	r5, r5
 8004412:	6031      	str	r1, [r6, #0]
 8004414:	07d9      	lsls	r1, r3, #31
 8004416:	bf44      	itt	mi
 8004418:	f043 0320 	orrmi.w	r3, r3, #32
 800441c:	6023      	strmi	r3, [r4, #0]
 800441e:	b11d      	cbz	r5, 8004428 <_printf_i+0x1a0>
 8004420:	2310      	movs	r3, #16
 8004422:	e7ab      	b.n	800437c <_printf_i+0xf4>
 8004424:	4826      	ldr	r0, [pc, #152]	@ (80044c0 <_printf_i+0x238>)
 8004426:	e7e9      	b.n	80043fc <_printf_i+0x174>
 8004428:	6823      	ldr	r3, [r4, #0]
 800442a:	f023 0320 	bic.w	r3, r3, #32
 800442e:	6023      	str	r3, [r4, #0]
 8004430:	e7f6      	b.n	8004420 <_printf_i+0x198>
 8004432:	4616      	mov	r6, r2
 8004434:	e7bd      	b.n	80043b2 <_printf_i+0x12a>
 8004436:	6833      	ldr	r3, [r6, #0]
 8004438:	6825      	ldr	r5, [r4, #0]
 800443a:	1d18      	adds	r0, r3, #4
 800443c:	6961      	ldr	r1, [r4, #20]
 800443e:	6030      	str	r0, [r6, #0]
 8004440:	062e      	lsls	r6, r5, #24
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	d501      	bpl.n	800444a <_printf_i+0x1c2>
 8004446:	6019      	str	r1, [r3, #0]
 8004448:	e002      	b.n	8004450 <_printf_i+0x1c8>
 800444a:	0668      	lsls	r0, r5, #25
 800444c:	d5fb      	bpl.n	8004446 <_printf_i+0x1be>
 800444e:	8019      	strh	r1, [r3, #0]
 8004450:	2300      	movs	r3, #0
 8004452:	4616      	mov	r6, r2
 8004454:	6123      	str	r3, [r4, #16]
 8004456:	e7bc      	b.n	80043d2 <_printf_i+0x14a>
 8004458:	6833      	ldr	r3, [r6, #0]
 800445a:	2100      	movs	r1, #0
 800445c:	1d1a      	adds	r2, r3, #4
 800445e:	6032      	str	r2, [r6, #0]
 8004460:	681e      	ldr	r6, [r3, #0]
 8004462:	6862      	ldr	r2, [r4, #4]
 8004464:	4630      	mov	r0, r6
 8004466:	f000 f975 	bl	8004754 <memchr>
 800446a:	b108      	cbz	r0, 8004470 <_printf_i+0x1e8>
 800446c:	1b80      	subs	r0, r0, r6
 800446e:	6060      	str	r0, [r4, #4]
 8004470:	6863      	ldr	r3, [r4, #4]
 8004472:	6123      	str	r3, [r4, #16]
 8004474:	2300      	movs	r3, #0
 8004476:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800447a:	e7aa      	b.n	80043d2 <_printf_i+0x14a>
 800447c:	4632      	mov	r2, r6
 800447e:	4649      	mov	r1, r9
 8004480:	4640      	mov	r0, r8
 8004482:	6923      	ldr	r3, [r4, #16]
 8004484:	47d0      	blx	sl
 8004486:	3001      	adds	r0, #1
 8004488:	d0ad      	beq.n	80043e6 <_printf_i+0x15e>
 800448a:	6823      	ldr	r3, [r4, #0]
 800448c:	079b      	lsls	r3, r3, #30
 800448e:	d413      	bmi.n	80044b8 <_printf_i+0x230>
 8004490:	68e0      	ldr	r0, [r4, #12]
 8004492:	9b03      	ldr	r3, [sp, #12]
 8004494:	4298      	cmp	r0, r3
 8004496:	bfb8      	it	lt
 8004498:	4618      	movlt	r0, r3
 800449a:	e7a6      	b.n	80043ea <_printf_i+0x162>
 800449c:	2301      	movs	r3, #1
 800449e:	4632      	mov	r2, r6
 80044a0:	4649      	mov	r1, r9
 80044a2:	4640      	mov	r0, r8
 80044a4:	47d0      	blx	sl
 80044a6:	3001      	adds	r0, #1
 80044a8:	d09d      	beq.n	80043e6 <_printf_i+0x15e>
 80044aa:	3501      	adds	r5, #1
 80044ac:	68e3      	ldr	r3, [r4, #12]
 80044ae:	9903      	ldr	r1, [sp, #12]
 80044b0:	1a5b      	subs	r3, r3, r1
 80044b2:	42ab      	cmp	r3, r5
 80044b4:	dcf2      	bgt.n	800449c <_printf_i+0x214>
 80044b6:	e7eb      	b.n	8004490 <_printf_i+0x208>
 80044b8:	2500      	movs	r5, #0
 80044ba:	f104 0619 	add.w	r6, r4, #25
 80044be:	e7f5      	b.n	80044ac <_printf_i+0x224>
 80044c0:	0800493f 	.word	0x0800493f
 80044c4:	08004950 	.word	0x08004950

080044c8 <__sflush_r>:
 80044c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80044cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ce:	0716      	lsls	r6, r2, #28
 80044d0:	4605      	mov	r5, r0
 80044d2:	460c      	mov	r4, r1
 80044d4:	d454      	bmi.n	8004580 <__sflush_r+0xb8>
 80044d6:	684b      	ldr	r3, [r1, #4]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	dc02      	bgt.n	80044e2 <__sflush_r+0x1a>
 80044dc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80044de:	2b00      	cmp	r3, #0
 80044e0:	dd48      	ble.n	8004574 <__sflush_r+0xac>
 80044e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80044e4:	2e00      	cmp	r6, #0
 80044e6:	d045      	beq.n	8004574 <__sflush_r+0xac>
 80044e8:	2300      	movs	r3, #0
 80044ea:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80044ee:	682f      	ldr	r7, [r5, #0]
 80044f0:	6a21      	ldr	r1, [r4, #32]
 80044f2:	602b      	str	r3, [r5, #0]
 80044f4:	d030      	beq.n	8004558 <__sflush_r+0x90>
 80044f6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80044f8:	89a3      	ldrh	r3, [r4, #12]
 80044fa:	0759      	lsls	r1, r3, #29
 80044fc:	d505      	bpl.n	800450a <__sflush_r+0x42>
 80044fe:	6863      	ldr	r3, [r4, #4]
 8004500:	1ad2      	subs	r2, r2, r3
 8004502:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004504:	b10b      	cbz	r3, 800450a <__sflush_r+0x42>
 8004506:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004508:	1ad2      	subs	r2, r2, r3
 800450a:	2300      	movs	r3, #0
 800450c:	4628      	mov	r0, r5
 800450e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004510:	6a21      	ldr	r1, [r4, #32]
 8004512:	47b0      	blx	r6
 8004514:	1c43      	adds	r3, r0, #1
 8004516:	89a3      	ldrh	r3, [r4, #12]
 8004518:	d106      	bne.n	8004528 <__sflush_r+0x60>
 800451a:	6829      	ldr	r1, [r5, #0]
 800451c:	291d      	cmp	r1, #29
 800451e:	d82b      	bhi.n	8004578 <__sflush_r+0xb0>
 8004520:	4a28      	ldr	r2, [pc, #160]	@ (80045c4 <__sflush_r+0xfc>)
 8004522:	410a      	asrs	r2, r1
 8004524:	07d6      	lsls	r6, r2, #31
 8004526:	d427      	bmi.n	8004578 <__sflush_r+0xb0>
 8004528:	2200      	movs	r2, #0
 800452a:	6062      	str	r2, [r4, #4]
 800452c:	6922      	ldr	r2, [r4, #16]
 800452e:	04d9      	lsls	r1, r3, #19
 8004530:	6022      	str	r2, [r4, #0]
 8004532:	d504      	bpl.n	800453e <__sflush_r+0x76>
 8004534:	1c42      	adds	r2, r0, #1
 8004536:	d101      	bne.n	800453c <__sflush_r+0x74>
 8004538:	682b      	ldr	r3, [r5, #0]
 800453a:	b903      	cbnz	r3, 800453e <__sflush_r+0x76>
 800453c:	6560      	str	r0, [r4, #84]	@ 0x54
 800453e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004540:	602f      	str	r7, [r5, #0]
 8004542:	b1b9      	cbz	r1, 8004574 <__sflush_r+0xac>
 8004544:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004548:	4299      	cmp	r1, r3
 800454a:	d002      	beq.n	8004552 <__sflush_r+0x8a>
 800454c:	4628      	mov	r0, r5
 800454e:	f7ff fb49 	bl	8003be4 <_free_r>
 8004552:	2300      	movs	r3, #0
 8004554:	6363      	str	r3, [r4, #52]	@ 0x34
 8004556:	e00d      	b.n	8004574 <__sflush_r+0xac>
 8004558:	2301      	movs	r3, #1
 800455a:	4628      	mov	r0, r5
 800455c:	47b0      	blx	r6
 800455e:	4602      	mov	r2, r0
 8004560:	1c50      	adds	r0, r2, #1
 8004562:	d1c9      	bne.n	80044f8 <__sflush_r+0x30>
 8004564:	682b      	ldr	r3, [r5, #0]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d0c6      	beq.n	80044f8 <__sflush_r+0x30>
 800456a:	2b1d      	cmp	r3, #29
 800456c:	d001      	beq.n	8004572 <__sflush_r+0xaa>
 800456e:	2b16      	cmp	r3, #22
 8004570:	d11d      	bne.n	80045ae <__sflush_r+0xe6>
 8004572:	602f      	str	r7, [r5, #0]
 8004574:	2000      	movs	r0, #0
 8004576:	e021      	b.n	80045bc <__sflush_r+0xf4>
 8004578:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800457c:	b21b      	sxth	r3, r3
 800457e:	e01a      	b.n	80045b6 <__sflush_r+0xee>
 8004580:	690f      	ldr	r7, [r1, #16]
 8004582:	2f00      	cmp	r7, #0
 8004584:	d0f6      	beq.n	8004574 <__sflush_r+0xac>
 8004586:	0793      	lsls	r3, r2, #30
 8004588:	bf18      	it	ne
 800458a:	2300      	movne	r3, #0
 800458c:	680e      	ldr	r6, [r1, #0]
 800458e:	bf08      	it	eq
 8004590:	694b      	ldreq	r3, [r1, #20]
 8004592:	1bf6      	subs	r6, r6, r7
 8004594:	600f      	str	r7, [r1, #0]
 8004596:	608b      	str	r3, [r1, #8]
 8004598:	2e00      	cmp	r6, #0
 800459a:	ddeb      	ble.n	8004574 <__sflush_r+0xac>
 800459c:	4633      	mov	r3, r6
 800459e:	463a      	mov	r2, r7
 80045a0:	4628      	mov	r0, r5
 80045a2:	6a21      	ldr	r1, [r4, #32]
 80045a4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80045a8:	47e0      	blx	ip
 80045aa:	2800      	cmp	r0, #0
 80045ac:	dc07      	bgt.n	80045be <__sflush_r+0xf6>
 80045ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045b6:	f04f 30ff 	mov.w	r0, #4294967295
 80045ba:	81a3      	strh	r3, [r4, #12]
 80045bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045be:	4407      	add	r7, r0
 80045c0:	1a36      	subs	r6, r6, r0
 80045c2:	e7e9      	b.n	8004598 <__sflush_r+0xd0>
 80045c4:	dfbffffe 	.word	0xdfbffffe

080045c8 <_fflush_r>:
 80045c8:	b538      	push	{r3, r4, r5, lr}
 80045ca:	690b      	ldr	r3, [r1, #16]
 80045cc:	4605      	mov	r5, r0
 80045ce:	460c      	mov	r4, r1
 80045d0:	b913      	cbnz	r3, 80045d8 <_fflush_r+0x10>
 80045d2:	2500      	movs	r5, #0
 80045d4:	4628      	mov	r0, r5
 80045d6:	bd38      	pop	{r3, r4, r5, pc}
 80045d8:	b118      	cbz	r0, 80045e2 <_fflush_r+0x1a>
 80045da:	6a03      	ldr	r3, [r0, #32]
 80045dc:	b90b      	cbnz	r3, 80045e2 <_fflush_r+0x1a>
 80045de:	f7ff f8b5 	bl	800374c <__sinit>
 80045e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d0f3      	beq.n	80045d2 <_fflush_r+0xa>
 80045ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80045ec:	07d0      	lsls	r0, r2, #31
 80045ee:	d404      	bmi.n	80045fa <_fflush_r+0x32>
 80045f0:	0599      	lsls	r1, r3, #22
 80045f2:	d402      	bmi.n	80045fa <_fflush_r+0x32>
 80045f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80045f6:	f7ff fae4 	bl	8003bc2 <__retarget_lock_acquire_recursive>
 80045fa:	4628      	mov	r0, r5
 80045fc:	4621      	mov	r1, r4
 80045fe:	f7ff ff63 	bl	80044c8 <__sflush_r>
 8004602:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004604:	4605      	mov	r5, r0
 8004606:	07da      	lsls	r2, r3, #31
 8004608:	d4e4      	bmi.n	80045d4 <_fflush_r+0xc>
 800460a:	89a3      	ldrh	r3, [r4, #12]
 800460c:	059b      	lsls	r3, r3, #22
 800460e:	d4e1      	bmi.n	80045d4 <_fflush_r+0xc>
 8004610:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004612:	f7ff fad7 	bl	8003bc4 <__retarget_lock_release_recursive>
 8004616:	e7dd      	b.n	80045d4 <_fflush_r+0xc>

08004618 <__swhatbuf_r>:
 8004618:	b570      	push	{r4, r5, r6, lr}
 800461a:	460c      	mov	r4, r1
 800461c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004620:	4615      	mov	r5, r2
 8004622:	2900      	cmp	r1, #0
 8004624:	461e      	mov	r6, r3
 8004626:	b096      	sub	sp, #88	@ 0x58
 8004628:	da0c      	bge.n	8004644 <__swhatbuf_r+0x2c>
 800462a:	89a3      	ldrh	r3, [r4, #12]
 800462c:	2100      	movs	r1, #0
 800462e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004632:	bf14      	ite	ne
 8004634:	2340      	movne	r3, #64	@ 0x40
 8004636:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800463a:	2000      	movs	r0, #0
 800463c:	6031      	str	r1, [r6, #0]
 800463e:	602b      	str	r3, [r5, #0]
 8004640:	b016      	add	sp, #88	@ 0x58
 8004642:	bd70      	pop	{r4, r5, r6, pc}
 8004644:	466a      	mov	r2, sp
 8004646:	f000 f863 	bl	8004710 <_fstat_r>
 800464a:	2800      	cmp	r0, #0
 800464c:	dbed      	blt.n	800462a <__swhatbuf_r+0x12>
 800464e:	9901      	ldr	r1, [sp, #4]
 8004650:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004654:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004658:	4259      	negs	r1, r3
 800465a:	4159      	adcs	r1, r3
 800465c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004660:	e7eb      	b.n	800463a <__swhatbuf_r+0x22>

08004662 <__smakebuf_r>:
 8004662:	898b      	ldrh	r3, [r1, #12]
 8004664:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004666:	079d      	lsls	r5, r3, #30
 8004668:	4606      	mov	r6, r0
 800466a:	460c      	mov	r4, r1
 800466c:	d507      	bpl.n	800467e <__smakebuf_r+0x1c>
 800466e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004672:	6023      	str	r3, [r4, #0]
 8004674:	6123      	str	r3, [r4, #16]
 8004676:	2301      	movs	r3, #1
 8004678:	6163      	str	r3, [r4, #20]
 800467a:	b003      	add	sp, #12
 800467c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800467e:	466a      	mov	r2, sp
 8004680:	ab01      	add	r3, sp, #4
 8004682:	f7ff ffc9 	bl	8004618 <__swhatbuf_r>
 8004686:	9f00      	ldr	r7, [sp, #0]
 8004688:	4605      	mov	r5, r0
 800468a:	4639      	mov	r1, r7
 800468c:	4630      	mov	r0, r6
 800468e:	f7fe ff45 	bl	800351c <_malloc_r>
 8004692:	b948      	cbnz	r0, 80046a8 <__smakebuf_r+0x46>
 8004694:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004698:	059a      	lsls	r2, r3, #22
 800469a:	d4ee      	bmi.n	800467a <__smakebuf_r+0x18>
 800469c:	f023 0303 	bic.w	r3, r3, #3
 80046a0:	f043 0302 	orr.w	r3, r3, #2
 80046a4:	81a3      	strh	r3, [r4, #12]
 80046a6:	e7e2      	b.n	800466e <__smakebuf_r+0xc>
 80046a8:	89a3      	ldrh	r3, [r4, #12]
 80046aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80046ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046b2:	81a3      	strh	r3, [r4, #12]
 80046b4:	9b01      	ldr	r3, [sp, #4]
 80046b6:	6020      	str	r0, [r4, #0]
 80046b8:	b15b      	cbz	r3, 80046d2 <__smakebuf_r+0x70>
 80046ba:	4630      	mov	r0, r6
 80046bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046c0:	f000 f838 	bl	8004734 <_isatty_r>
 80046c4:	b128      	cbz	r0, 80046d2 <__smakebuf_r+0x70>
 80046c6:	89a3      	ldrh	r3, [r4, #12]
 80046c8:	f023 0303 	bic.w	r3, r3, #3
 80046cc:	f043 0301 	orr.w	r3, r3, #1
 80046d0:	81a3      	strh	r3, [r4, #12]
 80046d2:	89a3      	ldrh	r3, [r4, #12]
 80046d4:	431d      	orrs	r5, r3
 80046d6:	81a5      	strh	r5, [r4, #12]
 80046d8:	e7cf      	b.n	800467a <__smakebuf_r+0x18>

080046da <memmove>:
 80046da:	4288      	cmp	r0, r1
 80046dc:	b510      	push	{r4, lr}
 80046de:	eb01 0402 	add.w	r4, r1, r2
 80046e2:	d902      	bls.n	80046ea <memmove+0x10>
 80046e4:	4284      	cmp	r4, r0
 80046e6:	4623      	mov	r3, r4
 80046e8:	d807      	bhi.n	80046fa <memmove+0x20>
 80046ea:	1e43      	subs	r3, r0, #1
 80046ec:	42a1      	cmp	r1, r4
 80046ee:	d008      	beq.n	8004702 <memmove+0x28>
 80046f0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80046f4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80046f8:	e7f8      	b.n	80046ec <memmove+0x12>
 80046fa:	4601      	mov	r1, r0
 80046fc:	4402      	add	r2, r0
 80046fe:	428a      	cmp	r2, r1
 8004700:	d100      	bne.n	8004704 <memmove+0x2a>
 8004702:	bd10      	pop	{r4, pc}
 8004704:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004708:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800470c:	e7f7      	b.n	80046fe <memmove+0x24>
	...

08004710 <_fstat_r>:
 8004710:	b538      	push	{r3, r4, r5, lr}
 8004712:	2300      	movs	r3, #0
 8004714:	4d06      	ldr	r5, [pc, #24]	@ (8004730 <_fstat_r+0x20>)
 8004716:	4604      	mov	r4, r0
 8004718:	4608      	mov	r0, r1
 800471a:	4611      	mov	r1, r2
 800471c:	602b      	str	r3, [r5, #0]
 800471e:	f7fc f9f7 	bl	8000b10 <_fstat>
 8004722:	1c43      	adds	r3, r0, #1
 8004724:	d102      	bne.n	800472c <_fstat_r+0x1c>
 8004726:	682b      	ldr	r3, [r5, #0]
 8004728:	b103      	cbz	r3, 800472c <_fstat_r+0x1c>
 800472a:	6023      	str	r3, [r4, #0]
 800472c:	bd38      	pop	{r3, r4, r5, pc}
 800472e:	bf00      	nop
 8004730:	20000298 	.word	0x20000298

08004734 <_isatty_r>:
 8004734:	b538      	push	{r3, r4, r5, lr}
 8004736:	2300      	movs	r3, #0
 8004738:	4d05      	ldr	r5, [pc, #20]	@ (8004750 <_isatty_r+0x1c>)
 800473a:	4604      	mov	r4, r0
 800473c:	4608      	mov	r0, r1
 800473e:	602b      	str	r3, [r5, #0]
 8004740:	f7fc f9f5 	bl	8000b2e <_isatty>
 8004744:	1c43      	adds	r3, r0, #1
 8004746:	d102      	bne.n	800474e <_isatty_r+0x1a>
 8004748:	682b      	ldr	r3, [r5, #0]
 800474a:	b103      	cbz	r3, 800474e <_isatty_r+0x1a>
 800474c:	6023      	str	r3, [r4, #0]
 800474e:	bd38      	pop	{r3, r4, r5, pc}
 8004750:	20000298 	.word	0x20000298

08004754 <memchr>:
 8004754:	4603      	mov	r3, r0
 8004756:	b510      	push	{r4, lr}
 8004758:	b2c9      	uxtb	r1, r1
 800475a:	4402      	add	r2, r0
 800475c:	4293      	cmp	r3, r2
 800475e:	4618      	mov	r0, r3
 8004760:	d101      	bne.n	8004766 <memchr+0x12>
 8004762:	2000      	movs	r0, #0
 8004764:	e003      	b.n	800476e <memchr+0x1a>
 8004766:	7804      	ldrb	r4, [r0, #0]
 8004768:	3301      	adds	r3, #1
 800476a:	428c      	cmp	r4, r1
 800476c:	d1f6      	bne.n	800475c <memchr+0x8>
 800476e:	bd10      	pop	{r4, pc}

08004770 <_realloc_r>:
 8004770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004774:	4680      	mov	r8, r0
 8004776:	4615      	mov	r5, r2
 8004778:	460c      	mov	r4, r1
 800477a:	b921      	cbnz	r1, 8004786 <_realloc_r+0x16>
 800477c:	4611      	mov	r1, r2
 800477e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004782:	f7fe becb 	b.w	800351c <_malloc_r>
 8004786:	b92a      	cbnz	r2, 8004794 <_realloc_r+0x24>
 8004788:	f7ff fa2c 	bl	8003be4 <_free_r>
 800478c:	2400      	movs	r4, #0
 800478e:	4620      	mov	r0, r4
 8004790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004794:	f000 f81a 	bl	80047cc <_malloc_usable_size_r>
 8004798:	4285      	cmp	r5, r0
 800479a:	4606      	mov	r6, r0
 800479c:	d802      	bhi.n	80047a4 <_realloc_r+0x34>
 800479e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80047a2:	d8f4      	bhi.n	800478e <_realloc_r+0x1e>
 80047a4:	4629      	mov	r1, r5
 80047a6:	4640      	mov	r0, r8
 80047a8:	f7fe feb8 	bl	800351c <_malloc_r>
 80047ac:	4607      	mov	r7, r0
 80047ae:	2800      	cmp	r0, #0
 80047b0:	d0ec      	beq.n	800478c <_realloc_r+0x1c>
 80047b2:	42b5      	cmp	r5, r6
 80047b4:	462a      	mov	r2, r5
 80047b6:	4621      	mov	r1, r4
 80047b8:	bf28      	it	cs
 80047ba:	4632      	movcs	r2, r6
 80047bc:	f7ff fa03 	bl	8003bc6 <memcpy>
 80047c0:	4621      	mov	r1, r4
 80047c2:	4640      	mov	r0, r8
 80047c4:	f7ff fa0e 	bl	8003be4 <_free_r>
 80047c8:	463c      	mov	r4, r7
 80047ca:	e7e0      	b.n	800478e <_realloc_r+0x1e>

080047cc <_malloc_usable_size_r>:
 80047cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047d0:	1f18      	subs	r0, r3, #4
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	bfbc      	itt	lt
 80047d6:	580b      	ldrlt	r3, [r1, r0]
 80047d8:	18c0      	addlt	r0, r0, r3
 80047da:	4770      	bx	lr

080047dc <_init>:
 80047dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047de:	bf00      	nop
 80047e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047e2:	bc08      	pop	{r3}
 80047e4:	469e      	mov	lr, r3
 80047e6:	4770      	bx	lr

080047e8 <_fini>:
 80047e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ea:	bf00      	nop
 80047ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ee:	bc08      	pop	{r3}
 80047f0:	469e      	mov	lr, r3
 80047f2:	4770      	bx	lr
