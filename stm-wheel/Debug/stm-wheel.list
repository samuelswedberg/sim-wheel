
stm-wheel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080e4  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  080081f4  080081f4  000091f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008348  08008348  0000a060  2**0
                  CONTENTS
  4 .ARM          00000008  08008348  08008348  00009348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008350  08008350  0000a060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008350  08008350  00009350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008354  08008354  00009354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08008358  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001580  20000060  080083b8  0000a060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200015e0  080083b8  0000a5e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017225  00000000  00000000  0000a089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003724  00000000  00000000  000212ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001488  00000000  00000000  000249d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fed  00000000  00000000  00025e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ac0a  00000000  00000000  00026e4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001737c  00000000  00000000  00041a57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b1d8  00000000  00000000  00058dd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f3fab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005aec  00000000  00000000  000f3ff0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000f9adc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	080081dc 	.word	0x080081dc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	080081dc 	.word	0x080081dc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_frsub>:
 8000160:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__addsf3>
 8000166:	bf00      	nop

08000168 <__aeabi_fsub>:
 8000168:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800016c <__addsf3>:
 800016c:	0042      	lsls	r2, r0, #1
 800016e:	bf1f      	itttt	ne
 8000170:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000174:	ea92 0f03 	teqne	r2, r3
 8000178:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800017c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000180:	d06a      	beq.n	8000258 <__addsf3+0xec>
 8000182:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000186:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800018a:	bfc1      	itttt	gt
 800018c:	18d2      	addgt	r2, r2, r3
 800018e:	4041      	eorgt	r1, r0
 8000190:	4048      	eorgt	r0, r1
 8000192:	4041      	eorgt	r1, r0
 8000194:	bfb8      	it	lt
 8000196:	425b      	neglt	r3, r3
 8000198:	2b19      	cmp	r3, #25
 800019a:	bf88      	it	hi
 800019c:	4770      	bxhi	lr
 800019e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80001a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001a6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4240      	negne	r0, r0
 80001ae:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001b6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4249      	negne	r1, r1
 80001be:	ea92 0f03 	teq	r2, r3
 80001c2:	d03f      	beq.n	8000244 <__addsf3+0xd8>
 80001c4:	f1a2 0201 	sub.w	r2, r2, #1
 80001c8:	fa41 fc03 	asr.w	ip, r1, r3
 80001cc:	eb10 000c 	adds.w	r0, r0, ip
 80001d0:	f1c3 0320 	rsb	r3, r3, #32
 80001d4:	fa01 f103 	lsl.w	r1, r1, r3
 80001d8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001dc:	d502      	bpl.n	80001e4 <__addsf3+0x78>
 80001de:	4249      	negs	r1, r1
 80001e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001e8:	d313      	bcc.n	8000212 <__addsf3+0xa6>
 80001ea:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001ee:	d306      	bcc.n	80001fe <__addsf3+0x92>
 80001f0:	0840      	lsrs	r0, r0, #1
 80001f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f6:	f102 0201 	add.w	r2, r2, #1
 80001fa:	2afe      	cmp	r2, #254	@ 0xfe
 80001fc:	d251      	bcs.n	80002a2 <__addsf3+0x136>
 80001fe:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000202:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000206:	bf08      	it	eq
 8000208:	f020 0001 	biceq.w	r0, r0, #1
 800020c:	ea40 0003 	orr.w	r0, r0, r3
 8000210:	4770      	bx	lr
 8000212:	0049      	lsls	r1, r1, #1
 8000214:	eb40 0000 	adc.w	r0, r0, r0
 8000218:	3a01      	subs	r2, #1
 800021a:	bf28      	it	cs
 800021c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000220:	d2ed      	bcs.n	80001fe <__addsf3+0x92>
 8000222:	fab0 fc80 	clz	ip, r0
 8000226:	f1ac 0c08 	sub.w	ip, ip, #8
 800022a:	ebb2 020c 	subs.w	r2, r2, ip
 800022e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000232:	bfaa      	itet	ge
 8000234:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000238:	4252      	neglt	r2, r2
 800023a:	4318      	orrge	r0, r3
 800023c:	bfbc      	itt	lt
 800023e:	40d0      	lsrlt	r0, r2
 8000240:	4318      	orrlt	r0, r3
 8000242:	4770      	bx	lr
 8000244:	f092 0f00 	teq	r2, #0
 8000248:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800024c:	bf06      	itte	eq
 800024e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000252:	3201      	addeq	r2, #1
 8000254:	3b01      	subne	r3, #1
 8000256:	e7b5      	b.n	80001c4 <__addsf3+0x58>
 8000258:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800025c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000260:	bf18      	it	ne
 8000262:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000266:	d021      	beq.n	80002ac <__addsf3+0x140>
 8000268:	ea92 0f03 	teq	r2, r3
 800026c:	d004      	beq.n	8000278 <__addsf3+0x10c>
 800026e:	f092 0f00 	teq	r2, #0
 8000272:	bf08      	it	eq
 8000274:	4608      	moveq	r0, r1
 8000276:	4770      	bx	lr
 8000278:	ea90 0f01 	teq	r0, r1
 800027c:	bf1c      	itt	ne
 800027e:	2000      	movne	r0, #0
 8000280:	4770      	bxne	lr
 8000282:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000286:	d104      	bne.n	8000292 <__addsf3+0x126>
 8000288:	0040      	lsls	r0, r0, #1
 800028a:	bf28      	it	cs
 800028c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000290:	4770      	bx	lr
 8000292:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000296:	bf3c      	itt	cc
 8000298:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 800029c:	4770      	bxcc	lr
 800029e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80002a2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002a6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002aa:	4770      	bx	lr
 80002ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002b0:	bf16      	itet	ne
 80002b2:	4608      	movne	r0, r1
 80002b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b8:	4601      	movne	r1, r0
 80002ba:	0242      	lsls	r2, r0, #9
 80002bc:	bf06      	itte	eq
 80002be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002c2:	ea90 0f01 	teqeq	r0, r1
 80002c6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002ca:	4770      	bx	lr

080002cc <__aeabi_ui2f>:
 80002cc:	f04f 0300 	mov.w	r3, #0
 80002d0:	e004      	b.n	80002dc <__aeabi_i2f+0x8>
 80002d2:	bf00      	nop

080002d4 <__aeabi_i2f>:
 80002d4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002d8:	bf48      	it	mi
 80002da:	4240      	negmi	r0, r0
 80002dc:	ea5f 0c00 	movs.w	ip, r0
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002e8:	4601      	mov	r1, r0
 80002ea:	f04f 0000 	mov.w	r0, #0
 80002ee:	e01c      	b.n	800032a <__aeabi_l2f+0x2a>

080002f0 <__aeabi_ul2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f04f 0300 	mov.w	r3, #0
 80002fc:	e00a      	b.n	8000314 <__aeabi_l2f+0x14>
 80002fe:	bf00      	nop

08000300 <__aeabi_l2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800030c:	d502      	bpl.n	8000314 <__aeabi_l2f+0x14>
 800030e:	4240      	negs	r0, r0
 8000310:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000314:	ea5f 0c01 	movs.w	ip, r1
 8000318:	bf02      	ittt	eq
 800031a:	4684      	moveq	ip, r0
 800031c:	4601      	moveq	r1, r0
 800031e:	2000      	moveq	r0, #0
 8000320:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000324:	bf08      	it	eq
 8000326:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800032a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800032e:	fabc f28c 	clz	r2, ip
 8000332:	3a08      	subs	r2, #8
 8000334:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000338:	db10      	blt.n	800035c <__aeabi_l2f+0x5c>
 800033a:	fa01 fc02 	lsl.w	ip, r1, r2
 800033e:	4463      	add	r3, ip
 8000340:	fa00 fc02 	lsl.w	ip, r0, r2
 8000344:	f1c2 0220 	rsb	r2, r2, #32
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	fa20 f202 	lsr.w	r2, r0, r2
 8000350:	eb43 0002 	adc.w	r0, r3, r2
 8000354:	bf08      	it	eq
 8000356:	f020 0001 	biceq.w	r0, r0, #1
 800035a:	4770      	bx	lr
 800035c:	f102 0220 	add.w	r2, r2, #32
 8000360:	fa01 fc02 	lsl.w	ip, r1, r2
 8000364:	f1c2 0220 	rsb	r2, r2, #32
 8000368:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800036c:	fa21 f202 	lsr.w	r2, r1, r2
 8000370:	eb43 0002 	adc.w	r0, r3, r2
 8000374:	bf08      	it	eq
 8000376:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800037a:	4770      	bx	lr

0800037c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800037c:	b480      	push	{r7}
 800037e:	b085      	sub	sp, #20
 8000380:	af00      	add	r7, sp, #0
 8000382:	60f8      	str	r0, [r7, #12]
 8000384:	60b9      	str	r1, [r7, #8]
 8000386:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	4a06      	ldr	r2, [pc, #24]	@ (80003a4 <vApplicationGetIdleTaskMemory+0x28>)
 800038c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800038e:	68bb      	ldr	r3, [r7, #8]
 8000390:	4a05      	ldr	r2, [pc, #20]	@ (80003a8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000392:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	2280      	movs	r2, #128	@ 0x80
 8000398:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800039a:	bf00      	nop
 800039c:	3714      	adds	r7, #20
 800039e:	46bd      	mov	sp, r7
 80003a0:	bc80      	pop	{r7}
 80003a2:	4770      	bx	lr
 80003a4:	2000007c 	.word	0x2000007c
 80003a8:	2000011c 	.word	0x2000011c

080003ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003ac:	b5b0      	push	{r4, r5, r7, lr}
 80003ae:	b096      	sub	sp, #88	@ 0x58
 80003b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003b2:	f001 fb99 	bl	8001ae8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003b6:	f000 f881 	bl	80004bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003ba:	f000 fa5d 	bl	8000878 <MX_GPIO_Init>
  MX_DMA_Init();
 80003be:	f000 fa35 	bl	800082c <MX_DMA_Init>
  MX_CAN_Init();
 80003c2:	f000 f939 	bl	8000638 <MX_CAN_Init>
  MX_USART1_UART_Init();
 80003c6:	f000 fa07 	bl	80007d8 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80003ca:	f000 f8cb 	bl	8000564 <MX_ADC1_Init>
  MX_TIM1_Init();
 80003ce:	f000 f981 	bl	80006d4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan);
 80003d2:	4831      	ldr	r0, [pc, #196]	@ (8000498 <main+0xec>)
 80003d4:	f002 f963 	bl	800269e <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 80003d8:	2110      	movs	r1, #16
 80003da:	482f      	ldr	r0, [pc, #188]	@ (8000498 <main+0xec>)
 80003dc:	f002 fc03 	bl	8002be6 <HAL_CAN_ActivateNotification>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80003e0:	4b2e      	ldr	r3, [pc, #184]	@ (800049c <main+0xf0>)
 80003e2:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80003e6:	461d      	mov	r5, r3
 80003e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80003f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80003f4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80003f8:	2100      	movs	r1, #0
 80003fa:	4618      	mov	r0, r3
 80003fc:	f005 ffc0 	bl	8006380 <osThreadCreate>
 8000400:	4603      	mov	r3, r0
 8000402:	4a27      	ldr	r2, [pc, #156]	@ (80004a0 <main+0xf4>)
 8000404:	6013      	str	r3, [r2, #0]

  /* definition and creation of nextionTask */
  osThreadDef(nextionTask, startNextionTask, osPriorityAboveNormal, 0, 192);
 8000406:	4b27      	ldr	r3, [pc, #156]	@ (80004a4 <main+0xf8>)
 8000408:	f107 0420 	add.w	r4, r7, #32
 800040c:	461d      	mov	r5, r3
 800040e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000410:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000412:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000416:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  nextionTaskHandle = osThreadCreate(osThread(nextionTask), NULL);
 800041a:	f107 0320 	add.w	r3, r7, #32
 800041e:	2100      	movs	r1, #0
 8000420:	4618      	mov	r0, r3
 8000422:	f005 ffad 	bl	8006380 <osThreadCreate>
 8000426:	4603      	mov	r3, r0
 8000428:	4a1f      	ldr	r2, [pc, #124]	@ (80004a8 <main+0xfc>)
 800042a:	6013      	str	r3, [r2, #0]

  /* definition and creation of canTask */
  osThreadDef(canTask, startCanTask, osPriorityHigh, 0, 192);
 800042c:	4b1f      	ldr	r3, [pc, #124]	@ (80004ac <main+0x100>)
 800042e:	1d3c      	adds	r4, r7, #4
 8000430:	461d      	mov	r5, r3
 8000432:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000434:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000436:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800043a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  canTaskHandle = osThreadCreate(osThread(canTask), NULL);
 800043e:	1d3b      	adds	r3, r7, #4
 8000440:	2100      	movs	r1, #0
 8000442:	4618      	mov	r0, r3
 8000444:	f005 ff9c 	bl	8006380 <osThreadCreate>
 8000448:	4603      	mov	r3, r0
 800044a:	4a19      	ldr	r2, [pc, #100]	@ (80004b0 <main+0x104>)
 800044c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800044e:	f005 ff90 	bl	8006372 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  vTaskStartScheduler();
 8000452:	f006 fa89 	bl	8006968 <vTaskStartScheduler>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);   // Turn LED off
 8000456:	2201      	movs	r2, #1
 8000458:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800045c:	4815      	ldr	r0, [pc, #84]	@ (80004b4 <main+0x108>)
 800045e:	f003 fb3e 	bl	8003ade <HAL_GPIO_WritePin>
	telemetry_data.tRpm = 0;
 8000462:	4b15      	ldr	r3, [pc, #84]	@ (80004b8 <main+0x10c>)
 8000464:	2200      	movs	r2, #0
 8000466:	601a      	str	r2, [r3, #0]
	telemetry_data.tRpm = 0;
 8000468:	4b13      	ldr	r3, [pc, #76]	@ (80004b8 <main+0x10c>)
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]
	telemetry_data.tSpeedKmh = 0;
 800046e:	4b12      	ldr	r3, [pc, #72]	@ (80004b8 <main+0x10c>)
 8000470:	2200      	movs	r2, #0
 8000472:	609a      	str	r2, [r3, #8]
	telemetry_data.tHasDRS = 0;
 8000474:	4b10      	ldr	r3, [pc, #64]	@ (80004b8 <main+0x10c>)
 8000476:	2200      	movs	r2, #0
 8000478:	60da      	str	r2, [r3, #12]
	telemetry_data.tDrs = 0;
 800047a:	4b0f      	ldr	r3, [pc, #60]	@ (80004b8 <main+0x10c>)
 800047c:	2200      	movs	r2, #0
 800047e:	611a      	str	r2, [r3, #16]
	telemetry_data.tPitLim = 0;
 8000480:	4b0d      	ldr	r3, [pc, #52]	@ (80004b8 <main+0x10c>)
 8000482:	2200      	movs	r2, #0
 8000484:	615a      	str	r2, [r3, #20]
	telemetry_data.tFuel = 0;
 8000486:	4b0c      	ldr	r3, [pc, #48]	@ (80004b8 <main+0x10c>)
 8000488:	2200      	movs	r2, #0
 800048a:	619a      	str	r2, [r3, #24]
	telemetry_data.tBrakeBias = 0;
 800048c:	4b0a      	ldr	r3, [pc, #40]	@ (80004b8 <main+0x10c>)
 800048e:	2200      	movs	r2, #0
 8000490:	61da      	str	r2, [r3, #28]


  while (1)
 8000492:	bf00      	nop
 8000494:	e7fd      	b.n	8000492 <main+0xe6>
 8000496:	bf00      	nop
 8000498:	200003c0 	.word	0x200003c0
 800049c:	08008200 	.word	0x08008200
 80004a0:	200004bc 	.word	0x200004bc
 80004a4:	08008228 	.word	0x08008228
 80004a8:	200004c0 	.word	0x200004c0
 80004ac:	0800824c 	.word	0x0800824c
 80004b0:	200004c4 	.word	0x200004c4
 80004b4:	40011000 	.word	0x40011000
 80004b8:	2000031c 	.word	0x2000031c

080004bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b094      	sub	sp, #80	@ 0x50
 80004c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80004c6:	2228      	movs	r2, #40	@ 0x28
 80004c8:	2100      	movs	r1, #0
 80004ca:	4618      	mov	r0, r3
 80004cc:	f007 fa4e 	bl	800796c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004d0:	f107 0314 	add.w	r3, r7, #20
 80004d4:	2200      	movs	r2, #0
 80004d6:	601a      	str	r2, [r3, #0]
 80004d8:	605a      	str	r2, [r3, #4]
 80004da:	609a      	str	r2, [r3, #8]
 80004dc:	60da      	str	r2, [r3, #12]
 80004de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004e0:	1d3b      	adds	r3, r7, #4
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004ec:	2302      	movs	r3, #2
 80004ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004f0:	2301      	movs	r3, #1
 80004f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004f4:	2310      	movs	r3, #16
 80004f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004f8:	2302      	movs	r3, #2
 80004fa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80004fc:	2300      	movs	r3, #0
 80004fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000500:	2300      	movs	r3, #0
 8000502:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000504:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000508:	4618      	mov	r0, r3
 800050a:	f003 fb19 	bl	8003b40 <HAL_RCC_OscConfig>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000514:	f000 fed2 	bl	80012bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000518:	230f      	movs	r3, #15
 800051a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800051c:	2302      	movs	r3, #2
 800051e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000520:	2300      	movs	r3, #0
 8000522:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000524:	2300      	movs	r3, #0
 8000526:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000528:	2300      	movs	r3, #0
 800052a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800052c:	f107 0314 	add.w	r3, r7, #20
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f003 fd86 	bl	8004044 <HAL_RCC_ClockConfig>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800053e:	f000 febd 	bl	80012bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000542:	2302      	movs	r3, #2
 8000544:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000546:	2300      	movs	r3, #0
 8000548:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800054a:	1d3b      	adds	r3, r7, #4
 800054c:	4618      	mov	r0, r3
 800054e:	f003 ff37 	bl	80043c0 <HAL_RCCEx_PeriphCLKConfig>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000558:	f000 feb0 	bl	80012bc <Error_Handler>
  }
}
 800055c:	bf00      	nop
 800055e:	3750      	adds	r7, #80	@ 0x50
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}

08000564 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800056a:	1d3b      	adds	r3, r7, #4
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000574:	4b2e      	ldr	r3, [pc, #184]	@ (8000630 <MX_ADC1_Init+0xcc>)
 8000576:	4a2f      	ldr	r2, [pc, #188]	@ (8000634 <MX_ADC1_Init+0xd0>)
 8000578:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800057a:	4b2d      	ldr	r3, [pc, #180]	@ (8000630 <MX_ADC1_Init+0xcc>)
 800057c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000580:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000582:	4b2b      	ldr	r3, [pc, #172]	@ (8000630 <MX_ADC1_Init+0xcc>)
 8000584:	2201      	movs	r2, #1
 8000586:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000588:	4b29      	ldr	r3, [pc, #164]	@ (8000630 <MX_ADC1_Init+0xcc>)
 800058a:	2200      	movs	r2, #0
 800058c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800058e:	4b28      	ldr	r3, [pc, #160]	@ (8000630 <MX_ADC1_Init+0xcc>)
 8000590:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000594:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000596:	4b26      	ldr	r3, [pc, #152]	@ (8000630 <MX_ADC1_Init+0xcc>)
 8000598:	2200      	movs	r2, #0
 800059a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 800059c:	4b24      	ldr	r3, [pc, #144]	@ (8000630 <MX_ADC1_Init+0xcc>)
 800059e:	2204      	movs	r2, #4
 80005a0:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005a2:	4823      	ldr	r0, [pc, #140]	@ (8000630 <MX_ADC1_Init+0xcc>)
 80005a4:	f001 faf6 	bl	8001b94 <HAL_ADC_Init>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80005ae:	f000 fe85 	bl	80012bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005b6:	2301      	movs	r3, #1
 80005b8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80005ba:	2305      	movs	r3, #5
 80005bc:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	4619      	mov	r1, r3
 80005c2:	481b      	ldr	r0, [pc, #108]	@ (8000630 <MX_ADC1_Init+0xcc>)
 80005c4:	f001 fcae 	bl	8001f24 <HAL_ADC_ConfigChannel>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80005ce:	f000 fe75 	bl	80012bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005d2:	2301      	movs	r3, #1
 80005d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005d6:	2302      	movs	r3, #2
 80005d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	4619      	mov	r1, r3
 80005de:	4814      	ldr	r0, [pc, #80]	@ (8000630 <MX_ADC1_Init+0xcc>)
 80005e0:	f001 fca0 	bl	8001f24 <HAL_ADC_ConfigChannel>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80005ea:	f000 fe67 	bl	80012bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80005ee:	2302      	movs	r3, #2
 80005f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80005f2:	2303      	movs	r3, #3
 80005f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	4619      	mov	r1, r3
 80005fa:	480d      	ldr	r0, [pc, #52]	@ (8000630 <MX_ADC1_Init+0xcc>)
 80005fc:	f001 fc92 	bl	8001f24 <HAL_ADC_ConfigChannel>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000606:	f000 fe59 	bl	80012bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800060a:	2303      	movs	r3, #3
 800060c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800060e:	2304      	movs	r3, #4
 8000610:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	4619      	mov	r1, r3
 8000616:	4806      	ldr	r0, [pc, #24]	@ (8000630 <MX_ADC1_Init+0xcc>)
 8000618:	f001 fc84 	bl	8001f24 <HAL_ADC_ConfigChannel>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000622:	f000 fe4b 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000626:	bf00      	nop
 8000628:	3710      	adds	r7, #16
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	2000034c 	.word	0x2000034c
 8000634:	40012400 	.word	0x40012400

08000638 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b08a      	sub	sp, #40	@ 0x28
 800063c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800063e:	4b23      	ldr	r3, [pc, #140]	@ (80006cc <MX_CAN_Init+0x94>)
 8000640:	4a23      	ldr	r2, [pc, #140]	@ (80006d0 <MX_CAN_Init+0x98>)
 8000642:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 1;
 8000644:	4b21      	ldr	r3, [pc, #132]	@ (80006cc <MX_CAN_Init+0x94>)
 8000646:	2201      	movs	r2, #1
 8000648:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800064a:	4b20      	ldr	r3, [pc, #128]	@ (80006cc <MX_CAN_Init+0x94>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000650:	4b1e      	ldr	r3, [pc, #120]	@ (80006cc <MX_CAN_Init+0x94>)
 8000652:	2200      	movs	r2, #0
 8000654:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_5TQ;
 8000656:	4b1d      	ldr	r3, [pc, #116]	@ (80006cc <MX_CAN_Init+0x94>)
 8000658:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800065c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800065e:	4b1b      	ldr	r3, [pc, #108]	@ (80006cc <MX_CAN_Init+0x94>)
 8000660:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000664:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000666:	4b19      	ldr	r3, [pc, #100]	@ (80006cc <MX_CAN_Init+0x94>)
 8000668:	2200      	movs	r2, #0
 800066a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800066c:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <MX_CAN_Init+0x94>)
 800066e:	2200      	movs	r2, #0
 8000670:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000672:	4b16      	ldr	r3, [pc, #88]	@ (80006cc <MX_CAN_Init+0x94>)
 8000674:	2200      	movs	r2, #0
 8000676:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000678:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <MX_CAN_Init+0x94>)
 800067a:	2200      	movs	r2, #0
 800067c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800067e:	4b13      	ldr	r3, [pc, #76]	@ (80006cc <MX_CAN_Init+0x94>)
 8000680:	2200      	movs	r2, #0
 8000682:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000684:	4b11      	ldr	r3, [pc, #68]	@ (80006cc <MX_CAN_Init+0x94>)
 8000686:	2200      	movs	r2, #0
 8000688:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800068a:	4810      	ldr	r0, [pc, #64]	@ (80006cc <MX_CAN_Init+0x94>)
 800068c:	f001 fe43 	bl	8002316 <HAL_CAN_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000696:	f000 fe11 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef filterConfig;

  filterConfig.FilterBank = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	617b      	str	r3, [r7, #20]
  filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800069e:	2300      	movs	r3, #0
 80006a0:	61bb      	str	r3, [r7, #24]
  filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80006a2:	2301      	movs	r3, #1
 80006a4:	61fb      	str	r3, [r7, #28]
  filterConfig.FilterIdHigh = 0x100 << 5;       // Accept all IDs
 80006a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006aa:	603b      	str	r3, [r7, #0]
  filterConfig.FilterMaskIdHigh = 0x700 << 5;;   // Accept all IDs
 80006ac:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80006b0:	60bb      	str	r3, [r7, #8]
  filterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;  // Assign to FIFO 1
 80006b2:	2301      	movs	r3, #1
 80006b4:	613b      	str	r3, [r7, #16]
  filterConfig.FilterActivation = ENABLE;
 80006b6:	2301      	movs	r3, #1
 80006b8:	623b      	str	r3, [r7, #32]

  HAL_CAN_ConfigFilter(&hcan, &filterConfig);
 80006ba:	463b      	mov	r3, r7
 80006bc:	4619      	mov	r1, r3
 80006be:	4803      	ldr	r0, [pc, #12]	@ (80006cc <MX_CAN_Init+0x94>)
 80006c0:	f001 ff24 	bl	800250c <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 80006c4:	bf00      	nop
 80006c6:	3728      	adds	r7, #40	@ 0x28
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	200003c0 	.word	0x200003c0
 80006d0:	40006400 	.word	0x40006400

080006d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b092      	sub	sp, #72	@ 0x48
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006da:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]
 80006f4:	615a      	str	r2, [r3, #20]
 80006f6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	2220      	movs	r2, #32
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f007 f934 	bl	800796c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000704:	4b32      	ldr	r3, [pc, #200]	@ (80007d0 <MX_TIM1_Init+0xfc>)
 8000706:	4a33      	ldr	r2, [pc, #204]	@ (80007d4 <MX_TIM1_Init+0x100>)
 8000708:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800070a:	4b31      	ldr	r3, [pc, #196]	@ (80007d0 <MX_TIM1_Init+0xfc>)
 800070c:	2200      	movs	r2, #0
 800070e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000710:	4b2f      	ldr	r3, [pc, #188]	@ (80007d0 <MX_TIM1_Init+0xfc>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9;
 8000716:	4b2e      	ldr	r3, [pc, #184]	@ (80007d0 <MX_TIM1_Init+0xfc>)
 8000718:	2209      	movs	r2, #9
 800071a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800071c:	4b2c      	ldr	r3, [pc, #176]	@ (80007d0 <MX_TIM1_Init+0xfc>)
 800071e:	2200      	movs	r2, #0
 8000720:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000722:	4b2b      	ldr	r3, [pc, #172]	@ (80007d0 <MX_TIM1_Init+0xfc>)
 8000724:	2200      	movs	r2, #0
 8000726:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000728:	4b29      	ldr	r3, [pc, #164]	@ (80007d0 <MX_TIM1_Init+0xfc>)
 800072a:	2200      	movs	r2, #0
 800072c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800072e:	4828      	ldr	r0, [pc, #160]	@ (80007d0 <MX_TIM1_Init+0xfc>)
 8000730:	f003 ffa6 	bl	8004680 <HAL_TIM_PWM_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 800073a:	f000 fdbf 	bl	80012bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800073e:	2300      	movs	r3, #0
 8000740:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000742:	2300      	movs	r3, #0
 8000744:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000746:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800074a:	4619      	mov	r1, r3
 800074c:	4820      	ldr	r0, [pc, #128]	@ (80007d0 <MX_TIM1_Init+0xfc>)
 800074e:	f004 ff23 	bl	8005598 <HAL_TIMEx_MasterConfigSynchronization>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8000758:	f000 fdb0 	bl	80012bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800075c:	2360      	movs	r3, #96	@ 0x60
 800075e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 1;
 8000760:	2301      	movs	r3, #1
 8000762:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000764:	2300      	movs	r3, #0
 8000766:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000768:	2300      	movs	r3, #0
 800076a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800076c:	2304      	movs	r3, #4
 800076e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000770:	2300      	movs	r3, #0
 8000772:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000774:	2300      	movs	r3, #0
 8000776:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000778:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800077c:	2200      	movs	r2, #0
 800077e:	4619      	mov	r1, r3
 8000780:	4813      	ldr	r0, [pc, #76]	@ (80007d0 <MX_TIM1_Init+0xfc>)
 8000782:	f004 fb25 	bl	8004dd0 <HAL_TIM_PWM_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 800078c:	f000 fd96 	bl	80012bc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000790:	2300      	movs	r3, #0
 8000792:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000794:	2300      	movs	r3, #0
 8000796:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000798:	2300      	movs	r3, #0
 800079a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800079c:	2300      	movs	r3, #0
 800079e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007a8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007aa:	2300      	movs	r3, #0
 80007ac:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	4619      	mov	r1, r3
 80007b2:	4807      	ldr	r0, [pc, #28]	@ (80007d0 <MX_TIM1_Init+0xfc>)
 80007b4:	f004 ff4e 	bl	8005654 <HAL_TIMEx_ConfigBreakDeadTime>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 80007be:	f000 fd7d 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007c2:	4803      	ldr	r0, [pc, #12]	@ (80007d0 <MX_TIM1_Init+0xfc>)
 80007c4:	f000 ffac 	bl	8001720 <HAL_TIM_MspPostInit>

}
 80007c8:	bf00      	nop
 80007ca:	3748      	adds	r7, #72	@ 0x48
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	200003e8 	.word	0x200003e8
 80007d4:	40012c00 	.word	0x40012c00

080007d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007dc:	4b11      	ldr	r3, [pc, #68]	@ (8000824 <MX_USART1_UART_Init+0x4c>)
 80007de:	4a12      	ldr	r2, [pc, #72]	@ (8000828 <MX_USART1_UART_Init+0x50>)
 80007e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80007e2:	4b10      	ldr	r3, [pc, #64]	@ (8000824 <MX_USART1_UART_Init+0x4c>)
 80007e4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80007e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000824 <MX_USART1_UART_Init+0x4c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000824 <MX_USART1_UART_Init+0x4c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000824 <MX_USART1_UART_Init+0x4c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007fc:	4b09      	ldr	r3, [pc, #36]	@ (8000824 <MX_USART1_UART_Init+0x4c>)
 80007fe:	220c      	movs	r2, #12
 8000800:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000802:	4b08      	ldr	r3, [pc, #32]	@ (8000824 <MX_USART1_UART_Init+0x4c>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000808:	4b06      	ldr	r3, [pc, #24]	@ (8000824 <MX_USART1_UART_Init+0x4c>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800080e:	4805      	ldr	r0, [pc, #20]	@ (8000824 <MX_USART1_UART_Init+0x4c>)
 8000810:	f004 ff83 	bl	800571a <HAL_UART_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800081a:	f000 fd4f 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000474 	.word	0x20000474
 8000828:	40013800 	.word	0x40013800

0800082c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000832:	4b10      	ldr	r3, [pc, #64]	@ (8000874 <MX_DMA_Init+0x48>)
 8000834:	695b      	ldr	r3, [r3, #20]
 8000836:	4a0f      	ldr	r2, [pc, #60]	@ (8000874 <MX_DMA_Init+0x48>)
 8000838:	f043 0301 	orr.w	r3, r3, #1
 800083c:	6153      	str	r3, [r2, #20]
 800083e:	4b0d      	ldr	r3, [pc, #52]	@ (8000874 <MX_DMA_Init+0x48>)
 8000840:	695b      	ldr	r3, [r3, #20]
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800084a:	2200      	movs	r2, #0
 800084c:	2105      	movs	r1, #5
 800084e:	200b      	movs	r0, #11
 8000850:	f002 fcd1 	bl	80031f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000854:	200b      	movs	r0, #11
 8000856:	f002 fcea 	bl	800322e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 800085a:	2200      	movs	r2, #0
 800085c:	2105      	movs	r1, #5
 800085e:	200c      	movs	r0, #12
 8000860:	f002 fcc9 	bl	80031f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000864:	200c      	movs	r0, #12
 8000866:	f002 fce2 	bl	800322e <HAL_NVIC_EnableIRQ>

}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40021000 	.word	0x40021000

08000878 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b088      	sub	sp, #32
 800087c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087e:	f107 0310 	add.w	r3, r7, #16
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800088c:	4b3f      	ldr	r3, [pc, #252]	@ (800098c <MX_GPIO_Init+0x114>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	4a3e      	ldr	r2, [pc, #248]	@ (800098c <MX_GPIO_Init+0x114>)
 8000892:	f043 0310 	orr.w	r3, r3, #16
 8000896:	6193      	str	r3, [r2, #24]
 8000898:	4b3c      	ldr	r3, [pc, #240]	@ (800098c <MX_GPIO_Init+0x114>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	f003 0310 	and.w	r3, r3, #16
 80008a0:	60fb      	str	r3, [r7, #12]
 80008a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008a4:	4b39      	ldr	r3, [pc, #228]	@ (800098c <MX_GPIO_Init+0x114>)
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	4a38      	ldr	r2, [pc, #224]	@ (800098c <MX_GPIO_Init+0x114>)
 80008aa:	f043 0320 	orr.w	r3, r3, #32
 80008ae:	6193      	str	r3, [r2, #24]
 80008b0:	4b36      	ldr	r3, [pc, #216]	@ (800098c <MX_GPIO_Init+0x114>)
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	f003 0320 	and.w	r3, r3, #32
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008bc:	4b33      	ldr	r3, [pc, #204]	@ (800098c <MX_GPIO_Init+0x114>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	4a32      	ldr	r2, [pc, #200]	@ (800098c <MX_GPIO_Init+0x114>)
 80008c2:	f043 0304 	orr.w	r3, r3, #4
 80008c6:	6193      	str	r3, [r2, #24]
 80008c8:	4b30      	ldr	r3, [pc, #192]	@ (800098c <MX_GPIO_Init+0x114>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	f003 0304 	and.w	r3, r3, #4
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d4:	4b2d      	ldr	r3, [pc, #180]	@ (800098c <MX_GPIO_Init+0x114>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	4a2c      	ldr	r2, [pc, #176]	@ (800098c <MX_GPIO_Init+0x114>)
 80008da:	f043 0308 	orr.w	r3, r3, #8
 80008de:	6193      	str	r3, [r2, #24]
 80008e0:	4b2a      	ldr	r3, [pc, #168]	@ (800098c <MX_GPIO_Init+0x114>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	f003 0308 	and.w	r3, r3, #8
 80008e8:	603b      	str	r3, [r7, #0]
 80008ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80008ec:	2200      	movs	r2, #0
 80008ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008f2:	4827      	ldr	r0, [pc, #156]	@ (8000990 <MX_GPIO_Init+0x118>)
 80008f4:	f003 f8f3 	bl	8003ade <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fe:	2301      	movs	r3, #1
 8000900:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2302      	movs	r3, #2
 8000908:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800090a:	f107 0310 	add.w	r3, r7, #16
 800090e:	4619      	mov	r1, r3
 8000910:	481f      	ldr	r0, [pc, #124]	@ (8000990 <MX_GPIO_Init+0x118>)
 8000912:	f002 ff49 	bl	80037a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8000916:	f248 03f0 	movw	r3, #33008	@ 0x80f0
 800091a:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000920:	2301      	movs	r3, #1
 8000922:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000924:	f107 0310 	add.w	r3, r7, #16
 8000928:	4619      	mov	r1, r3
 800092a:	481a      	ldr	r0, [pc, #104]	@ (8000994 <MX_GPIO_Init+0x11c>)
 800092c:	f002 ff3c 	bl	80037a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB4 PB6 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000930:	f640 7357 	movw	r3, #3927	@ 0xf57
 8000934:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000936:	2300      	movs	r3, #0
 8000938:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800093a:	2301      	movs	r3, #1
 800093c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093e:	f107 0310 	add.w	r3, r7, #16
 8000942:	4619      	mov	r1, r3
 8000944:	4814      	ldr	r0, [pc, #80]	@ (8000998 <MX_GPIO_Init+0x120>)
 8000946:	f002 ff2f 	bl	80037a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_7;
 800094a:	23a8      	movs	r3, #168	@ 0xa8
 800094c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800094e:	4b13      	ldr	r3, [pc, #76]	@ (800099c <MX_GPIO_Init+0x124>)
 8000950:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000952:	2301      	movs	r3, #1
 8000954:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000956:	f107 0310 	add.w	r3, r7, #16
 800095a:	4619      	mov	r1, r3
 800095c:	480e      	ldr	r0, [pc, #56]	@ (8000998 <MX_GPIO_Init+0x120>)
 800095e:	f002 ff23 	bl	80037a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8000962:	2200      	movs	r2, #0
 8000964:	2105      	movs	r1, #5
 8000966:	2009      	movs	r0, #9
 8000968:	f002 fc45 	bl	80031f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800096c:	2009      	movs	r0, #9
 800096e:	f002 fc5e 	bl	800322e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000972:	2200      	movs	r2, #0
 8000974:	2105      	movs	r1, #5
 8000976:	2017      	movs	r0, #23
 8000978:	f002 fc3d 	bl	80031f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800097c:	2017      	movs	r0, #23
 800097e:	f002 fc56 	bl	800322e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000982:	bf00      	nop
 8000984:	3720      	adds	r7, #32
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40021000 	.word	0x40021000
 8000990:	40011000 	.word	0x40011000
 8000994:	40010800 	.word	0x40010800
 8000998:	40010c00 	.word	0x40010c00
 800099c:	10110000 	.word	0x10110000

080009a0 <updateTelemetry>:
}

/*
 * NEXTION UART FUNCTIONS
 */
void updateTelemetry() {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b088      	sub	sp, #32
 80009a4:	af00      	add	r7, sp, #0
//	int mappedRpm = map_value(telemetry_data.tRpm, 0, telemetry_data.tMaxRpm, 0, 100);
	char *mappedRpm = int_to_string(telemetry_data.tRpm);
 80009a6:	4b31      	ldr	r3, [pc, #196]	@ (8000a6c <updateTelemetry+0xcc>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4618      	mov	r0, r3
 80009ac:	f000 f90e 	bl	8000bcc <int_to_string>
 80009b0:	61f8      	str	r0, [r7, #28]
	char *mappedGear = map_gear(telemetry_data.tGear);
 80009b2:	4b2e      	ldr	r3, [pc, #184]	@ (8000a6c <updateTelemetry+0xcc>)
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	4618      	mov	r0, r3
 80009b8:	f000 f89a 	bl	8000af0 <map_gear>
 80009bc:	61b8      	str	r0, [r7, #24]
	char *mappedSpeed = int_to_string(telemetry_data.tSpeedKmh);
 80009be:	4b2b      	ldr	r3, [pc, #172]	@ (8000a6c <updateTelemetry+0xcc>)
 80009c0:	689b      	ldr	r3, [r3, #8]
 80009c2:	4618      	mov	r0, r3
 80009c4:	f000 f902 	bl	8000bcc <int_to_string>
 80009c8:	6178      	str	r0, [r7, #20]
	char *mappedHasDrs = int_to_string(telemetry_data.tHasDRS);
 80009ca:	4b28      	ldr	r3, [pc, #160]	@ (8000a6c <updateTelemetry+0xcc>)
 80009cc:	68db      	ldr	r3, [r3, #12]
 80009ce:	4618      	mov	r0, r3
 80009d0:	f000 f8fc 	bl	8000bcc <int_to_string>
 80009d4:	6138      	str	r0, [r7, #16]
	char *mappedPitLim = int_to_string(telemetry_data.tPitLim);
 80009d6:	4b25      	ldr	r3, [pc, #148]	@ (8000a6c <updateTelemetry+0xcc>)
 80009d8:	695b      	ldr	r3, [r3, #20]
 80009da:	4618      	mov	r0, r3
 80009dc:	f000 f8f6 	bl	8000bcc <int_to_string>
 80009e0:	60f8      	str	r0, [r7, #12]
	char *mappedFuel = int_to_string(telemetry_data.tFuel);
 80009e2:	4b22      	ldr	r3, [pc, #136]	@ (8000a6c <updateTelemetry+0xcc>)
 80009e4:	699b      	ldr	r3, [r3, #24]
 80009e6:	4618      	mov	r0, r3
 80009e8:	f000 f8f0 	bl	8000bcc <int_to_string>
 80009ec:	60b8      	str	r0, [r7, #8]
	char *mappedBrakeBias = int_to_string(telemetry_data.tBrakeBias);
 80009ee:	4b1f      	ldr	r3, [pc, #124]	@ (8000a6c <updateTelemetry+0xcc>)
 80009f0:	69db      	ldr	r3, [r3, #28]
 80009f2:	4618      	mov	r0, r3
 80009f4:	f000 f8ea 	bl	8000bcc <int_to_string>
 80009f8:	6078      	str	r0, [r7, #4]

//	send_int_to_nextion("rpmbar", mappedRpm);
	send__char_to_nextion("rpm", mappedRpm);
 80009fa:	69f9      	ldr	r1, [r7, #28]
 80009fc:	481c      	ldr	r0, [pc, #112]	@ (8000a70 <updateTelemetry+0xd0>)
 80009fe:	f000 f83f 	bl	8000a80 <send__char_to_nextion>
	send__char_to_nextion("gear", mappedGear);
 8000a02:	69b9      	ldr	r1, [r7, #24]
 8000a04:	481b      	ldr	r0, [pc, #108]	@ (8000a74 <updateTelemetry+0xd4>)
 8000a06:	f000 f83b 	bl	8000a80 <send__char_to_nextion>
	send__char_to_nextion("speed", mappedSpeed);
 8000a0a:	6979      	ldr	r1, [r7, #20]
 8000a0c:	481a      	ldr	r0, [pc, #104]	@ (8000a78 <updateTelemetry+0xd8>)
 8000a0e:	f000 f837 	bl	8000a80 <send__char_to_nextion>
	//send__char_to_nextion("mappedHasDrs", mappedHasDrs);
	//send_to_nextion("pitlim", telemetry_data.tPitLim);
	send__char_to_nextion("fuel", mappedFuel);
 8000a12:	68b9      	ldr	r1, [r7, #8]
 8000a14:	4819      	ldr	r0, [pc, #100]	@ (8000a7c <updateTelemetry+0xdc>)
 8000a16:	f000 f833 	bl	8000a80 <send__char_to_nextion>
	//send_to_nextion("gear", telemetry_data.tBrakeBias);

	if(mappedRpm) {
 8000a1a:	69fb      	ldr	r3, [r7, #28]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d002      	beq.n	8000a26 <updateTelemetry+0x86>
		free(mappedRpm);
 8000a20:	69f8      	ldr	r0, [r7, #28]
 8000a22:	f006 feb9 	bl	8007798 <free>
	}
	// dont do gear since thats not int to string
	if(mappedSpeed) {
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d002      	beq.n	8000a32 <updateTelemetry+0x92>
		free(mappedSpeed);
 8000a2c:	6978      	ldr	r0, [r7, #20]
 8000a2e:	f006 feb3 	bl	8007798 <free>
	}
	if(mappedHasDrs) {
 8000a32:	693b      	ldr	r3, [r7, #16]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d002      	beq.n	8000a3e <updateTelemetry+0x9e>
		free(mappedHasDrs);
 8000a38:	6938      	ldr	r0, [r7, #16]
 8000a3a:	f006 fead 	bl	8007798 <free>
	}
	if(mappedPitLim) {
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d002      	beq.n	8000a4a <updateTelemetry+0xaa>
		free(mappedPitLim);
 8000a44:	68f8      	ldr	r0, [r7, #12]
 8000a46:	f006 fea7 	bl	8007798 <free>
	}
	if(mappedFuel) {
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d002      	beq.n	8000a56 <updateTelemetry+0xb6>
		free(mappedFuel);
 8000a50:	68b8      	ldr	r0, [r7, #8]
 8000a52:	f006 fea1 	bl	8007798 <free>
	}
	if(mappedBrakeBias) {
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d002      	beq.n	8000a62 <updateTelemetry+0xc2>
		free(mappedBrakeBias);
 8000a5c:	6878      	ldr	r0, [r7, #4]
 8000a5e:	f006 fe9b 	bl	8007798 <free>
	}

}
 8000a62:	bf00      	nop
 8000a64:	3720      	adds	r7, #32
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	2000031c 	.word	0x2000031c
 8000a70:	08008268 	.word	0x08008268
 8000a74:	0800826c 	.word	0x0800826c
 8000a78:	08008274 	.word	0x08008274
 8000a7c:	0800827c 	.word	0x0800827c

08000a80 <send__char_to_nextion>:

	uint8_t termination_bytes[3] = {0xFF, 0xFF, 0xFF};
	HAL_UART_Transmit(&huart1, termination_bytes, sizeof(termination_bytes), HAL_MAX_DELAY);
}

void send__char_to_nextion(const char *var_name, char *value) {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08e      	sub	sp, #56	@ 0x38
 8000a84:	af02      	add	r7, sp, #8
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	6039      	str	r1, [r7, #0]
	char command[32];
	snprintf(command, sizeof(command), "%s.txt=\"%s\"", var_name, value);
 8000a8a:	f107 0010 	add.w	r0, r7, #16
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	9300      	str	r3, [sp, #0]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4a13      	ldr	r2, [pc, #76]	@ (8000ae4 <send__char_to_nextion+0x64>)
 8000a96:	2120      	movs	r1, #32
 8000a98:	f006 ff34 	bl	8007904 <sniprintf>

	HAL_UART_Transmit(&huart1, (uint8_t *)command, strlen(command), HAL_MAX_DELAY);
 8000a9c:	f107 0310 	add.w	r3, r7, #16
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff fb55 	bl	8000150 <strlen>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	b29a      	uxth	r2, r3
 8000aaa:	f107 0110 	add.w	r1, r7, #16
 8000aae:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab2:	480d      	ldr	r0, [pc, #52]	@ (8000ae8 <send__char_to_nextion+0x68>)
 8000ab4:	f004 fe81 	bl	80057ba <HAL_UART_Transmit>

	uint8_t termination_bytes[3] = {0xFF, 0xFF, 0xFF};
 8000ab8:	4a0c      	ldr	r2, [pc, #48]	@ (8000aec <send__char_to_nextion+0x6c>)
 8000aba:	f107 030c 	add.w	r3, r7, #12
 8000abe:	6812      	ldr	r2, [r2, #0]
 8000ac0:	4611      	mov	r1, r2
 8000ac2:	8019      	strh	r1, [r3, #0]
 8000ac4:	3302      	adds	r3, #2
 8000ac6:	0c12      	lsrs	r2, r2, #16
 8000ac8:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, termination_bytes, sizeof(termination_bytes), HAL_MAX_DELAY);
 8000aca:	f107 010c 	add.w	r1, r7, #12
 8000ace:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad2:	2203      	movs	r2, #3
 8000ad4:	4804      	ldr	r0, [pc, #16]	@ (8000ae8 <send__char_to_nextion+0x68>)
 8000ad6:	f004 fe70 	bl	80057ba <HAL_UART_Transmit>
}
 8000ada:	bf00      	nop
 8000adc:	3730      	adds	r7, #48	@ 0x30
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	08008294 	.word	0x08008294
 8000ae8:	20000474 	.word	0x20000474
 8000aec:	08008290 	.word	0x08008290

08000af0 <map_gear>:
    if (input > in_max) input = in_max;

    return (input - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

const char* map_gear(int value)  {
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
    if (value < 0 || value > 13) {
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	db02      	blt.n	8000b04 <map_gear+0x14>
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	2b0d      	cmp	r3, #13
 8000b02:	dd01      	ble.n	8000b08 <map_gear+0x18>
        return "X";
 8000b04:	4b22      	ldr	r3, [pc, #136]	@ (8000b90 <map_gear+0xa0>)
 8000b06:	e03e      	b.n	8000b86 <map_gear+0x96>
    }

    switch (value) {
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2b0d      	cmp	r3, #13
 8000b0c:	d83a      	bhi.n	8000b84 <map_gear+0x94>
 8000b0e:	a201      	add	r2, pc, #4	@ (adr r2, 8000b14 <map_gear+0x24>)
 8000b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b14:	08000b4d 	.word	0x08000b4d
 8000b18:	08000b51 	.word	0x08000b51
 8000b1c:	08000b55 	.word	0x08000b55
 8000b20:	08000b59 	.word	0x08000b59
 8000b24:	08000b5d 	.word	0x08000b5d
 8000b28:	08000b61 	.word	0x08000b61
 8000b2c:	08000b65 	.word	0x08000b65
 8000b30:	08000b69 	.word	0x08000b69
 8000b34:	08000b6d 	.word	0x08000b6d
 8000b38:	08000b71 	.word	0x08000b71
 8000b3c:	08000b75 	.word	0x08000b75
 8000b40:	08000b79 	.word	0x08000b79
 8000b44:	08000b7d 	.word	0x08000b7d
 8000b48:	08000b81 	.word	0x08000b81
        case 0: return "R";
 8000b4c:	4b11      	ldr	r3, [pc, #68]	@ (8000b94 <map_gear+0xa4>)
 8000b4e:	e01a      	b.n	8000b86 <map_gear+0x96>
        case 1: return "N";
 8000b50:	4b11      	ldr	r3, [pc, #68]	@ (8000b98 <map_gear+0xa8>)
 8000b52:	e018      	b.n	8000b86 <map_gear+0x96>
        case 2: return "1";
 8000b54:	4b11      	ldr	r3, [pc, #68]	@ (8000b9c <map_gear+0xac>)
 8000b56:	e016      	b.n	8000b86 <map_gear+0x96>
        case 3: return "2";
 8000b58:	4b11      	ldr	r3, [pc, #68]	@ (8000ba0 <map_gear+0xb0>)
 8000b5a:	e014      	b.n	8000b86 <map_gear+0x96>
        case 4: return "3";
 8000b5c:	4b11      	ldr	r3, [pc, #68]	@ (8000ba4 <map_gear+0xb4>)
 8000b5e:	e012      	b.n	8000b86 <map_gear+0x96>
        case 5: return "4";
 8000b60:	4b11      	ldr	r3, [pc, #68]	@ (8000ba8 <map_gear+0xb8>)
 8000b62:	e010      	b.n	8000b86 <map_gear+0x96>
        case 6: return "5";
 8000b64:	4b11      	ldr	r3, [pc, #68]	@ (8000bac <map_gear+0xbc>)
 8000b66:	e00e      	b.n	8000b86 <map_gear+0x96>
        case 7: return "6";
 8000b68:	4b11      	ldr	r3, [pc, #68]	@ (8000bb0 <map_gear+0xc0>)
 8000b6a:	e00c      	b.n	8000b86 <map_gear+0x96>
        case 8: return "7";
 8000b6c:	4b11      	ldr	r3, [pc, #68]	@ (8000bb4 <map_gear+0xc4>)
 8000b6e:	e00a      	b.n	8000b86 <map_gear+0x96>
        case 9: return "8";
 8000b70:	4b11      	ldr	r3, [pc, #68]	@ (8000bb8 <map_gear+0xc8>)
 8000b72:	e008      	b.n	8000b86 <map_gear+0x96>
        case 10: return "9";
 8000b74:	4b11      	ldr	r3, [pc, #68]	@ (8000bbc <map_gear+0xcc>)
 8000b76:	e006      	b.n	8000b86 <map_gear+0x96>
        case 11: return "10";
 8000b78:	4b11      	ldr	r3, [pc, #68]	@ (8000bc0 <map_gear+0xd0>)
 8000b7a:	e004      	b.n	8000b86 <map_gear+0x96>
        case 12: return "11";
 8000b7c:	4b11      	ldr	r3, [pc, #68]	@ (8000bc4 <map_gear+0xd4>)
 8000b7e:	e002      	b.n	8000b86 <map_gear+0x96>
        case 13: return "12";
 8000b80:	4b11      	ldr	r3, [pc, #68]	@ (8000bc8 <map_gear+0xd8>)
 8000b82:	e000      	b.n	8000b86 <map_gear+0x96>

        default:
        	return "X";
 8000b84:	4b02      	ldr	r3, [pc, #8]	@ (8000b90 <map_gear+0xa0>)
    }
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc80      	pop	{r7}
 8000b8e:	4770      	bx	lr
 8000b90:	080082a0 	.word	0x080082a0
 8000b94:	080082a4 	.word	0x080082a4
 8000b98:	080082a8 	.word	0x080082a8
 8000b9c:	080082ac 	.word	0x080082ac
 8000ba0:	080082b0 	.word	0x080082b0
 8000ba4:	080082b4 	.word	0x080082b4
 8000ba8:	080082b8 	.word	0x080082b8
 8000bac:	080082bc 	.word	0x080082bc
 8000bb0:	080082c0 	.word	0x080082c0
 8000bb4:	080082c4 	.word	0x080082c4
 8000bb8:	080082c8 	.word	0x080082c8
 8000bbc:	080082cc 	.word	0x080082cc
 8000bc0:	080082d0 	.word	0x080082d0
 8000bc4:	080082d4 	.word	0x080082d4
 8000bc8:	080082d8 	.word	0x080082d8

08000bcc <int_to_string>:

char* int_to_string(int value) {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
    // Determine required buffer size (including null terminator)
    size_t buffer_size = snprintf(NULL, 0, "%d", value) + 1;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4a0e      	ldr	r2, [pc, #56]	@ (8000c10 <int_to_string+0x44>)
 8000bd8:	2100      	movs	r1, #0
 8000bda:	2000      	movs	r0, #0
 8000bdc:	f006 fe92 	bl	8007904 <sniprintf>
 8000be0:	4603      	mov	r3, r0
 8000be2:	3301      	adds	r3, #1
 8000be4:	60fb      	str	r3, [r7, #12]

    // Allocate memory
    char *string = (char*)malloc(buffer_size);
 8000be6:	68f8      	ldr	r0, [r7, #12]
 8000be8:	f006 fdce 	bl	8007788 <malloc>
 8000bec:	4603      	mov	r3, r0
 8000bee:	60bb      	str	r3, [r7, #8]
    if (!string) {
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d101      	bne.n	8000bfa <int_to_string+0x2e>
        return NULL;  // Return NULL if allocation fails
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	e006      	b.n	8000c08 <int_to_string+0x3c>
    }

    // Format the integer into the allocated string
    snprintf(string, buffer_size, "%d", value);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4a04      	ldr	r2, [pc, #16]	@ (8000c10 <int_to_string+0x44>)
 8000bfe:	68f9      	ldr	r1, [r7, #12]
 8000c00:	68b8      	ldr	r0, [r7, #8]
 8000c02:	f006 fe7f 	bl	8007904 <sniprintf>

    return string;  // Caller must free() this memory
 8000c06:	68bb      	ldr	r3, [r7, #8]
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3710      	adds	r7, #16
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	080082dc 	.word	0x080082dc

08000c14 <updateUserInput>:
    }

    neopixel_show();
}

void updateUserInput() {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
	uint32_t now = HAL_GetTick();
 8000c1a:	f000 ff8d 	bl	8001b38 <HAL_GetTick>
 8000c1e:	6078      	str	r0, [r7, #4]
	user_input_data.buttons = 0; // Clear all bits initially
 8000c20:	4b7b      	ldr	r3, [pc, #492]	@ (8000e10 <updateUserInput+0x1fc>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
	user_input_data.hall_analog_1 = 0;
 8000c26:	4b7a      	ldr	r3, [pc, #488]	@ (8000e10 <updateUserInput+0x1fc>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	711a      	strb	r2, [r3, #4]
	user_input_data.hall_analog_2 = 0;
 8000c2c:	4b78      	ldr	r3, [pc, #480]	@ (8000e10 <updateUserInput+0x1fc>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	715a      	strb	r2, [r3, #5]
	// Buttons
	if (!HAL_GPIO_ReadPin(GPIOA, BUTTON_1_PIN)) user_input_data.buttons |= (1 << 0);
 8000c32:	2110      	movs	r1, #16
 8000c34:	4877      	ldr	r0, [pc, #476]	@ (8000e14 <updateUserInput+0x200>)
 8000c36:	f002 ff3b 	bl	8003ab0 <HAL_GPIO_ReadPin>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d105      	bne.n	8000c4c <updateUserInput+0x38>
 8000c40:	4b73      	ldr	r3, [pc, #460]	@ (8000e10 <updateUserInput+0x1fc>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	4a71      	ldr	r2, [pc, #452]	@ (8000e10 <updateUserInput+0x1fc>)
 8000c4a:	6013      	str	r3, [r2, #0]
	if (!HAL_GPIO_ReadPin(GPIOA, BUTTON_2_PIN)) user_input_data.buttons |= (1 << 1);
 8000c4c:	2120      	movs	r1, #32
 8000c4e:	4871      	ldr	r0, [pc, #452]	@ (8000e14 <updateUserInput+0x200>)
 8000c50:	f002 ff2e 	bl	8003ab0 <HAL_GPIO_ReadPin>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d105      	bne.n	8000c66 <updateUserInput+0x52>
 8000c5a:	4b6d      	ldr	r3, [pc, #436]	@ (8000e10 <updateUserInput+0x1fc>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f043 0302 	orr.w	r3, r3, #2
 8000c62:	4a6b      	ldr	r2, [pc, #428]	@ (8000e10 <updateUserInput+0x1fc>)
 8000c64:	6013      	str	r3, [r2, #0]
	if (!HAL_GPIO_ReadPin(GPIOA, BUTTON_3_PIN)) user_input_data.buttons |= (1 << 2);
 8000c66:	2140      	movs	r1, #64	@ 0x40
 8000c68:	486a      	ldr	r0, [pc, #424]	@ (8000e14 <updateUserInput+0x200>)
 8000c6a:	f002 ff21 	bl	8003ab0 <HAL_GPIO_ReadPin>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d105      	bne.n	8000c80 <updateUserInput+0x6c>
 8000c74:	4b66      	ldr	r3, [pc, #408]	@ (8000e10 <updateUserInput+0x1fc>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f043 0304 	orr.w	r3, r3, #4
 8000c7c:	4a64      	ldr	r2, [pc, #400]	@ (8000e10 <updateUserInput+0x1fc>)
 8000c7e:	6013      	str	r3, [r2, #0]
	if (!HAL_GPIO_ReadPin(GPIOA, BUTTON_4_PIN)) user_input_data.buttons |= (1 << 3);
 8000c80:	2180      	movs	r1, #128	@ 0x80
 8000c82:	4864      	ldr	r0, [pc, #400]	@ (8000e14 <updateUserInput+0x200>)
 8000c84:	f002 ff14 	bl	8003ab0 <HAL_GPIO_ReadPin>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d105      	bne.n	8000c9a <updateUserInput+0x86>
 8000c8e:	4b60      	ldr	r3, [pc, #384]	@ (8000e10 <updateUserInput+0x1fc>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f043 0308 	orr.w	r3, r3, #8
 8000c96:	4a5e      	ldr	r2, [pc, #376]	@ (8000e10 <updateUserInput+0x1fc>)
 8000c98:	6013      	str	r3, [r2, #0]
	if (!HAL_GPIO_ReadPin(GPIOB, BUTTON_5_PIN)) user_input_data.buttons |= (1 << 4);
 8000c9a:	2101      	movs	r1, #1
 8000c9c:	485e      	ldr	r0, [pc, #376]	@ (8000e18 <updateUserInput+0x204>)
 8000c9e:	f002 ff07 	bl	8003ab0 <HAL_GPIO_ReadPin>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d105      	bne.n	8000cb4 <updateUserInput+0xa0>
 8000ca8:	4b59      	ldr	r3, [pc, #356]	@ (8000e10 <updateUserInput+0x1fc>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f043 0310 	orr.w	r3, r3, #16
 8000cb0:	4a57      	ldr	r2, [pc, #348]	@ (8000e10 <updateUserInput+0x1fc>)
 8000cb2:	6013      	str	r3, [r2, #0]
	if (!HAL_GPIO_ReadPin(GPIOB, BUTTON_6_PIN)) user_input_data.buttons |= (1 << 5);
 8000cb4:	2102      	movs	r1, #2
 8000cb6:	4858      	ldr	r0, [pc, #352]	@ (8000e18 <updateUserInput+0x204>)
 8000cb8:	f002 fefa 	bl	8003ab0 <HAL_GPIO_ReadPin>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d105      	bne.n	8000cce <updateUserInput+0xba>
 8000cc2:	4b53      	ldr	r3, [pc, #332]	@ (8000e10 <updateUserInput+0x1fc>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f043 0320 	orr.w	r3, r3, #32
 8000cca:	4a51      	ldr	r2, [pc, #324]	@ (8000e10 <updateUserInput+0x1fc>)
 8000ccc:	6013      	str	r3, [r2, #0]
	if (!HAL_GPIO_ReadPin(GPIOB, BUTTON_7_PIN)) user_input_data.buttons |= (1 << 6);
 8000cce:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000cd2:	4851      	ldr	r0, [pc, #324]	@ (8000e18 <updateUserInput+0x204>)
 8000cd4:	f002 feec 	bl	8003ab0 <HAL_GPIO_ReadPin>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d105      	bne.n	8000cea <updateUserInput+0xd6>
 8000cde:	4b4c      	ldr	r3, [pc, #304]	@ (8000e10 <updateUserInput+0x1fc>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ce6:	4a4a      	ldr	r2, [pc, #296]	@ (8000e10 <updateUserInput+0x1fc>)
 8000ce8:	6013      	str	r3, [r2, #0]
	if (!HAL_GPIO_ReadPin(GPIOB, BUTTON_8_PIN)) user_input_data.buttons |= (1 << 7);
 8000cea:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000cee:	484a      	ldr	r0, [pc, #296]	@ (8000e18 <updateUserInput+0x204>)
 8000cf0:	f002 fede 	bl	8003ab0 <HAL_GPIO_ReadPin>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d105      	bne.n	8000d06 <updateUserInput+0xf2>
 8000cfa:	4b45      	ldr	r3, [pc, #276]	@ (8000e10 <updateUserInput+0x1fc>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d02:	4a43      	ldr	r2, [pc, #268]	@ (8000e10 <updateUserInput+0x1fc>)
 8000d04:	6013      	str	r3, [r2, #0]
	if (!HAL_GPIO_ReadPin(GPIOB, BUTTON_9_PIN)) user_input_data.buttons |= (1 << 8);
 8000d06:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d0a:	4843      	ldr	r0, [pc, #268]	@ (8000e18 <updateUserInput+0x204>)
 8000d0c:	f002 fed0 	bl	8003ab0 <HAL_GPIO_ReadPin>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d105      	bne.n	8000d22 <updateUserInput+0x10e>
 8000d16:	4b3e      	ldr	r3, [pc, #248]	@ (8000e10 <updateUserInput+0x1fc>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d1e:	4a3c      	ldr	r2, [pc, #240]	@ (8000e10 <updateUserInput+0x1fc>)
 8000d20:	6013      	str	r3, [r2, #0]
	if (!HAL_GPIO_ReadPin(GPIOB, BUTTON_10_PIN)) user_input_data.buttons |= (1 << 9);
 8000d22:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d26:	483c      	ldr	r0, [pc, #240]	@ (8000e18 <updateUserInput+0x204>)
 8000d28:	f002 fec2 	bl	8003ab0 <HAL_GPIO_ReadPin>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d105      	bne.n	8000d3e <updateUserInput+0x12a>
 8000d32:	4b37      	ldr	r3, [pc, #220]	@ (8000e10 <updateUserInput+0x1fc>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d3a:	4a35      	ldr	r2, [pc, #212]	@ (8000e10 <updateUserInput+0x1fc>)
 8000d3c:	6013      	str	r3, [r2, #0]

	if(adc_data_ready) {
 8000d3e:	4b37      	ldr	r3, [pc, #220]	@ (8000e1c <updateUserInput+0x208>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <updateUserInput+0x138>
		processADC();
 8000d48:	f000 f89a 	bl	8000e80 <processADC>
	}

	if (enc_l_flag == 1) user_input_data.buttons |= (1 << 12);
 8000d4c:	4b34      	ldr	r3, [pc, #208]	@ (8000e20 <updateUserInput+0x20c>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d105      	bne.n	8000d60 <updateUserInput+0x14c>
 8000d54:	4b2e      	ldr	r3, [pc, #184]	@ (8000e10 <updateUserInput+0x1fc>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d5c:	4a2c      	ldr	r2, [pc, #176]	@ (8000e10 <updateUserInput+0x1fc>)
 8000d5e:	6013      	str	r3, [r2, #0]
	if (enc_l_flag == -1) user_input_data.buttons |= (1 << 13);
 8000d60:	4b2f      	ldr	r3, [pc, #188]	@ (8000e20 <updateUserInput+0x20c>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d68:	d105      	bne.n	8000d76 <updateUserInput+0x162>
 8000d6a:	4b29      	ldr	r3, [pc, #164]	@ (8000e10 <updateUserInput+0x1fc>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000d72:	4a27      	ldr	r2, [pc, #156]	@ (8000e10 <updateUserInput+0x1fc>)
 8000d74:	6013      	str	r3, [r2, #0]
	if (enc_c_flag == 1) user_input_data.buttons |= (1 << 14);
 8000d76:	4b2b      	ldr	r3, [pc, #172]	@ (8000e24 <updateUserInput+0x210>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d105      	bne.n	8000d8a <updateUserInput+0x176>
 8000d7e:	4b24      	ldr	r3, [pc, #144]	@ (8000e10 <updateUserInput+0x1fc>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d86:	4a22      	ldr	r2, [pc, #136]	@ (8000e10 <updateUserInput+0x1fc>)
 8000d88:	6013      	str	r3, [r2, #0]
	if (enc_c_flag == -1) user_input_data.buttons |= (1 << 15);
 8000d8a:	4b26      	ldr	r3, [pc, #152]	@ (8000e24 <updateUserInput+0x210>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d92:	d105      	bne.n	8000da0 <updateUserInput+0x18c>
 8000d94:	4b1e      	ldr	r3, [pc, #120]	@ (8000e10 <updateUserInput+0x1fc>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d9c:	4a1c      	ldr	r2, [pc, #112]	@ (8000e10 <updateUserInput+0x1fc>)
 8000d9e:	6013      	str	r3, [r2, #0]
	if (enc_r_flag == 1) user_input_data.buttons |= (1 << 16);
 8000da0:	4b21      	ldr	r3, [pc, #132]	@ (8000e28 <updateUserInput+0x214>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d105      	bne.n	8000db4 <updateUserInput+0x1a0>
 8000da8:	4b19      	ldr	r3, [pc, #100]	@ (8000e10 <updateUserInput+0x1fc>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000db0:	4a17      	ldr	r2, [pc, #92]	@ (8000e10 <updateUserInput+0x1fc>)
 8000db2:	6013      	str	r3, [r2, #0]
	if (enc_r_flag == -1) user_input_data.buttons |= (1 << 17);
 8000db4:	4b1c      	ldr	r3, [pc, #112]	@ (8000e28 <updateUserInput+0x214>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dbc:	d105      	bne.n	8000dca <updateUserInput+0x1b6>
 8000dbe:	4b14      	ldr	r3, [pc, #80]	@ (8000e10 <updateUserInput+0x1fc>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dc6:	4a12      	ldr	r2, [pc, #72]	@ (8000e10 <updateUserInput+0x1fc>)
 8000dc8:	6013      	str	r3, [r2, #0]

	if (now - enc_l_time > ENCODER_HOLD_DURATION) enc_l_flag = 0;
 8000dca:	4b18      	ldr	r3, [pc, #96]	@ (8000e2c <updateUserInput+0x218>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	687a      	ldr	r2, [r7, #4]
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000dd6:	d902      	bls.n	8000dde <updateUserInput+0x1ca>
 8000dd8:	4b11      	ldr	r3, [pc, #68]	@ (8000e20 <updateUserInput+0x20c>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
	if (now - enc_c_time > ENCODER_HOLD_DURATION) enc_c_flag = 0;
 8000dde:	4b14      	ldr	r3, [pc, #80]	@ (8000e30 <updateUserInput+0x21c>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000dea:	d902      	bls.n	8000df2 <updateUserInput+0x1de>
 8000dec:	4b0d      	ldr	r3, [pc, #52]	@ (8000e24 <updateUserInput+0x210>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
	if (now - enc_r_time > ENCODER_HOLD_DURATION) enc_r_flag = 0;
 8000df2:	4b10      	ldr	r3, [pc, #64]	@ (8000e34 <updateUserInput+0x220>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000dfe:	d902      	bls.n	8000e06 <updateUserInput+0x1f2>
 8000e00:	4b09      	ldr	r3, [pc, #36]	@ (8000e28 <updateUserInput+0x214>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
}
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000344 	.word	0x20000344
 8000e14:	40010800 	.word	0x40010800
 8000e18:	40010c00 	.word	0x40010c00
 8000e1c:	200004f4 	.word	0x200004f4
 8000e20:	200004c8 	.word	0x200004c8
 8000e24:	200004cc 	.word	0x200004cc
 8000e28:	200004d0 	.word	0x200004d0
 8000e2c:	200004d4 	.word	0x200004d4
 8000e30:	200004d8 	.word	0x200004d8
 8000e34:	200004dc 	.word	0x200004dc

08000e38 <Start_ADC_DMA>:

void Start_ADC_DMA() {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_values, ADC_CHANNEL_COUNT);
 8000e3c:	2204      	movs	r2, #4
 8000e3e:	4903      	ldr	r1, [pc, #12]	@ (8000e4c <Start_ADC_DMA+0x14>)
 8000e40:	4803      	ldr	r0, [pc, #12]	@ (8000e50 <Start_ADC_DMA+0x18>)
 8000e42:	f000 ff7f 	bl	8001d44 <HAL_ADC_Start_DMA>
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	200004ec 	.word	0x200004ec
 8000e50:	2000034c 	.word	0x2000034c

08000e54 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1) {
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a05      	ldr	r2, [pc, #20]	@ (8000e78 <HAL_ADC_ConvCpltCallback+0x24>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d102      	bne.n	8000e6c <HAL_ADC_ConvCpltCallback+0x18>
        adc_data_ready = 1;  // Set flag (do NOT process here)
 8000e66:	4b05      	ldr	r3, [pc, #20]	@ (8000e7c <HAL_ADC_ConvCpltCallback+0x28>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	701a      	strb	r2, [r3, #0]
    }
}
 8000e6c:	bf00      	nop
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bc80      	pop	{r7}
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	40012400 	.word	0x40012400
 8000e7c:	200004f4 	.word	0x200004f4

08000e80 <processADC>:

void processADC() {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
	adc_data_ready = 0;
 8000e86:	4b25      	ldr	r3, [pc, #148]	@ (8000f1c <processADC+0x9c>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	701a      	strb	r2, [r3, #0]

	int paddleThreshold = 125;
 8000e8c:	237d      	movs	r3, #125	@ 0x7d
 8000e8e:	607b      	str	r3, [r7, #4]

	// Convert ADC values to 8-bit format
	user_input_data.hall_analog_1 = map_hall_sensor(adc_values[2]);
 8000e90:	4b23      	ldr	r3, [pc, #140]	@ (8000f20 <processADC+0xa0>)
 8000e92:	889b      	ldrh	r3, [r3, #4]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f000 f84b 	bl	8000f30 <map_hall_sensor>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	4b21      	ldr	r3, [pc, #132]	@ (8000f24 <processADC+0xa4>)
 8000ea0:	711a      	strb	r2, [r3, #4]
	user_input_data.hall_analog_2 = map_hall_sensor(adc_values[3]);
 8000ea2:	4b1f      	ldr	r3, [pc, #124]	@ (8000f20 <processADC+0xa0>)
 8000ea4:	88db      	ldrh	r3, [r3, #6]
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f000 f842 	bl	8000f30 <map_hall_sensor>
 8000eac:	4603      	mov	r3, r0
 8000eae:	461a      	mov	r2, r3
 8000eb0:	4b1c      	ldr	r3, [pc, #112]	@ (8000f24 <processADC+0xa4>)
 8000eb2:	715a      	strb	r2, [r3, #5]

	if (shift_paddle_l == 0 && shift_paddle_r == 0)
 8000eb4:	4b1c      	ldr	r3, [pc, #112]	@ (8000f28 <processADC+0xa8>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d10e      	bne.n	8000eda <processADC+0x5a>
 8000ebc:	4b1b      	ldr	r3, [pc, #108]	@ (8000f2c <processADC+0xac>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d10a      	bne.n	8000eda <processADC+0x5a>
	{
		shift_paddle_l = adc_values[0];
 8000ec4:	4b16      	ldr	r3, [pc, #88]	@ (8000f20 <processADC+0xa0>)
 8000ec6:	881b      	ldrh	r3, [r3, #0]
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4b17      	ldr	r3, [pc, #92]	@ (8000f28 <processADC+0xa8>)
 8000ecc:	601a      	str	r2, [r3, #0]
		shift_paddle_r = adc_values[1];
 8000ece:	4b14      	ldr	r3, [pc, #80]	@ (8000f20 <processADC+0xa0>)
 8000ed0:	885b      	ldrh	r3, [r3, #2]
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	4b15      	ldr	r3, [pc, #84]	@ (8000f2c <processADC+0xac>)
 8000ed6:	601a      	str	r2, [r3, #0]
		if (shift_paddle_r - adc_values[0] > paddleThreshold) user_input_data.buttons |= (1 << 10);
	//	if (adc_values[0] > 2200) user_input_data.buttons |= (1 << 10);
	//	if (adc_values[1] > 2200) user_input_data.buttons |= (1 << 11);
	}

}
 8000ed8:	e01b      	b.n	8000f12 <processADC+0x92>
		if (shift_paddle_l - adc_values[1] > paddleThreshold) user_input_data.buttons |= (1 << 11);
 8000eda:	4b13      	ldr	r3, [pc, #76]	@ (8000f28 <processADC+0xa8>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a10      	ldr	r2, [pc, #64]	@ (8000f20 <processADC+0xa0>)
 8000ee0:	8852      	ldrh	r2, [r2, #2]
 8000ee2:	1a9b      	subs	r3, r3, r2
 8000ee4:	687a      	ldr	r2, [r7, #4]
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	da05      	bge.n	8000ef6 <processADC+0x76>
 8000eea:	4b0e      	ldr	r3, [pc, #56]	@ (8000f24 <processADC+0xa4>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000ef2:	4a0c      	ldr	r2, [pc, #48]	@ (8000f24 <processADC+0xa4>)
 8000ef4:	6013      	str	r3, [r2, #0]
		if (shift_paddle_r - adc_values[0] > paddleThreshold) user_input_data.buttons |= (1 << 10);
 8000ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8000f2c <processADC+0xac>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a09      	ldr	r2, [pc, #36]	@ (8000f20 <processADC+0xa0>)
 8000efc:	8812      	ldrh	r2, [r2, #0]
 8000efe:	1a9b      	subs	r3, r3, r2
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	429a      	cmp	r2, r3
 8000f04:	da05      	bge.n	8000f12 <processADC+0x92>
 8000f06:	4b07      	ldr	r3, [pc, #28]	@ (8000f24 <processADC+0xa4>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f0e:	4a05      	ldr	r2, [pc, #20]	@ (8000f24 <processADC+0xa4>)
 8000f10:	6013      	str	r3, [r2, #0]
}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	200004f4 	.word	0x200004f4
 8000f20:	200004ec 	.word	0x200004ec
 8000f24:	20000344 	.word	0x20000344
 8000f28:	200004e0 	.word	0x200004e0
 8000f2c:	200004e4 	.word	0x200004e4

08000f30 <map_hall_sensor>:
uint8_t map_hall_sensor(uint16_t adc_value) {
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	80fb      	strh	r3, [r7, #6]
    if (adc_value < ADC_REST) adc_value = ADC_REST;
 8000f3a:	88fb      	ldrh	r3, [r7, #6]
 8000f3c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000f40:	d202      	bcs.n	8000f48 <map_hall_sensor+0x18>
 8000f42:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000f46:	80fb      	strh	r3, [r7, #6]
    if (adc_value > ADC_MAX) adc_value = ADC_MAX;
 8000f48:	88fb      	ldrh	r3, [r7, #6]
 8000f4a:	f5b3 6f2f 	cmp.w	r3, #2800	@ 0xaf0
 8000f4e:	d902      	bls.n	8000f56 <map_hall_sensor+0x26>
 8000f50:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 8000f54:	80fb      	strh	r3, [r7, #6]

    return (uint8_t)(((adc_value - ADC_REST) * 255) / (ADC_MAX - ADC_REST));
 8000f56:	88fb      	ldrh	r3, [r7, #6]
 8000f58:	f5a3 62fa 	sub.w	r2, r3, #2000	@ 0x7d0
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	021b      	lsls	r3, r3, #8
 8000f60:	1a9b      	subs	r3, r3, r2
 8000f62:	4a06      	ldr	r2, [pc, #24]	@ (8000f7c <map_hall_sensor+0x4c>)
 8000f64:	fb82 1203 	smull	r1, r2, r2, r3
 8000f68:	1212      	asrs	r2, r2, #8
 8000f6a:	17db      	asrs	r3, r3, #31
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	b2db      	uxtb	r3, r3
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bc80      	pop	{r7}
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	51eb851f 	.word	0x51eb851f

08000f80 <CAN_Transmit>:

/*
 * CAN BUS FUNCTIONS
 */
void CAN_Transmit() {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
	uint32_t currentTime = HAL_GetTick();
 8000f86:	f000 fdd7 	bl	8001b38 <HAL_GetTick>
 8000f8a:	6078      	str	r0, [r7, #4]

	if(currentTime - lastSendTime >= 2) {
 8000f8c:	4b12      	ldr	r3, [pc, #72]	@ (8000fd8 <CAN_Transmit+0x58>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	1ad3      	subs	r3, r2, r3
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d91a      	bls.n	8000fce <CAN_Transmit+0x4e>
		sendCANMessage(0x200, (int32_t)user_input_data.buttons);
 8000f98:	4b10      	ldr	r3, [pc, #64]	@ (8000fdc <CAN_Transmit+0x5c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000fa2:	f000 f81d 	bl	8000fe0 <sendCANMessage>
		sendCANMessage(0x201, (int32_t)user_input_data.hall_analog_1 & 0xFF);
 8000fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8000fdc <CAN_Transmit+0x5c>)
 8000fa8:	791b      	ldrb	r3, [r3, #4]
 8000faa:	4619      	mov	r1, r3
 8000fac:	f240 2001 	movw	r0, #513	@ 0x201
 8000fb0:	f000 f816 	bl	8000fe0 <sendCANMessage>
		sendCANMessage(0x202, (int32_t)user_input_data.hall_analog_2 & 0xFF);
 8000fb4:	4b09      	ldr	r3, [pc, #36]	@ (8000fdc <CAN_Transmit+0x5c>)
 8000fb6:	795b      	ldrb	r3, [r3, #5]
 8000fb8:	4619      	mov	r1, r3
 8000fba:	f240 2002 	movw	r0, #514	@ 0x202
 8000fbe:	f000 f80f 	bl	8000fe0 <sendCANMessage>

		lastSendTime = currentTime;  // Update last transmission time
 8000fc2:	4a05      	ldr	r2, [pc, #20]	@ (8000fd8 <CAN_Transmit+0x58>)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6013      	str	r3, [r2, #0]
		HAL_Delay(1);
 8000fc8:	2001      	movs	r0, #1
 8000fca:	f000 fdbf 	bl	8001b4c <HAL_Delay>
	}
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	200004e8 	.word	0x200004e8
 8000fdc:	20000344 	.word	0x20000344

08000fe0 <sendCANMessage>:


void sendCANMessage(uint16_t canID, int32_t value) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08c      	sub	sp, #48	@ 0x30
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	6039      	str	r1, [r7, #0]
 8000fea:	80fb      	strh	r3, [r7, #6]
    CAN_TxHeaderTypeDef TxHeader;
    uint8_t TxData[4];  // 4-byte buffer

    // Ensure correct byte order in CAN message
    TxData[0] = (uint8_t)(value & 0xFF);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	743b      	strb	r3, [r7, #16]
    TxData[1] = (uint8_t)((value >> 8) & 0xFF);
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	121b      	asrs	r3, r3, #8
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	747b      	strb	r3, [r7, #17]
    TxData[2] = (uint8_t)((value >> 16) & 0xFF);
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	141b      	asrs	r3, r3, #16
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	74bb      	strb	r3, [r7, #18]
    TxData[3] = (uint8_t)((value >> 24) & 0xFF);
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	161b      	asrs	r3, r3, #24
 8001006:	b2db      	uxtb	r3, r3
 8001008:	74fb      	strb	r3, [r7, #19]

    uint32_t TxMailbox;

    // Configure the CAN header
    TxHeader.StdId = canID;  // Set the ID
 800100a:	88fb      	ldrh	r3, [r7, #6]
 800100c:	617b      	str	r3, [r7, #20]
    TxHeader.IDE = CAN_ID_STD;  // Standard 11-bit ID
 800100e:	2300      	movs	r3, #0
 8001010:	61fb      	str	r3, [r7, #28]
    TxHeader.RTR = CAN_RTR_DATA;  // Data frame, not remote request
 8001012:	2300      	movs	r3, #0
 8001014:	623b      	str	r3, [r7, #32]
    TxHeader.DLC = sizeof(value);  // Data Length = 4 bytes
 8001016:	2304      	movs	r3, #4
 8001018:	627b      	str	r3, [r7, #36]	@ 0x24

    // Copy integer value into TxData buffer (ensure correct byte order)
    memcpy(TxData, &value, sizeof(value));
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	613b      	str	r3, [r7, #16]

    // Send the CAN message
    if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
 800101e:	f107 030c 	add.w	r3, r7, #12
 8001022:	f107 0210 	add.w	r2, r7, #16
 8001026:	f107 0114 	add.w	r1, r7, #20
 800102a:	480c      	ldr	r0, [pc, #48]	@ (800105c <sendCANMessage+0x7c>)
 800102c:	f001 fbc4 	bl	80027b8 <HAL_CAN_AddTxMessage>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d00d      	beq.n	8001052 <sendCANMessage+0x72>
    	 // Optionally log the state of CAN error counters
		uint32_t error = HAL_CAN_GetError(&hcan);
 8001036:	4809      	ldr	r0, [pc, #36]	@ (800105c <sendCANMessage+0x7c>)
 8001038:	f002 f81d 	bl	8003076 <HAL_CAN_GetError>
 800103c:	62f8      	str	r0, [r7, #44]	@ 0x2c
		HAL_CAN_Stop(&hcan);  // Stop CAN
 800103e:	4807      	ldr	r0, [pc, #28]	@ (800105c <sendCANMessage+0x7c>)
 8001040:	f001 fb71 	bl	8002726 <HAL_CAN_Stop>
		HAL_CAN_Start(&hcan); // Restart CAN
 8001044:	4805      	ldr	r0, [pc, #20]	@ (800105c <sendCANMessage+0x7c>)
 8001046:	f001 fb2a 	bl	800269e <HAL_CAN_Start>
		// Optional: Clear error flags
		__HAL_CAN_CLEAR_FLAG(&hcan, CAN_FLAG_ERRI);
 800104a:	4b04      	ldr	r3, [pc, #16]	@ (800105c <sendCANMessage+0x7c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2204      	movs	r2, #4
 8001050:	605a      	str	r2, [r3, #4]
    }
}
 8001052:	bf00      	nop
 8001054:	3730      	adds	r7, #48	@ 0x30
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	200003c0 	.word	0x200003c0

08001060 <HAL_CAN_RxFifo1MsgPendingCallback>:

// CAN receive interrupt callback
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b08c      	sub	sp, #48	@ 0x30
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];

	while (HAL_CAN_GetRxFifoFillLevel(hcan, CAN_RX_FIFO1) > 0) {
 8001068:	e053      	b.n	8001112 <HAL_CAN_RxFifo1MsgPendingCallback+0xb2>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 800106a:	f107 030c 	add.w	r3, r7, #12
 800106e:	f107 0214 	add.w	r2, r7, #20
 8001072:	2101      	movs	r1, #1
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f001 fc6e 	bl	8002956 <HAL_CAN_GetRxMessage>

		int32_t value;
		memcpy(&value, RxData, sizeof(value));
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	60bb      	str	r3, [r7, #8]

		switch (RxHeader.StdId) {
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001084:	2b09      	cmp	r3, #9
 8001086:	d843      	bhi.n	8001110 <HAL_CAN_RxFifo1MsgPendingCallback+0xb0>
 8001088:	a201      	add	r2, pc, #4	@ (adr r2, 8001090 <HAL_CAN_RxFifo1MsgPendingCallback+0x30>)
 800108a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800108e:	bf00      	nop
 8001090:	080010b9 	.word	0x080010b9
 8001094:	080010c1 	.word	0x080010c1
 8001098:	080010c9 	.word	0x080010c9
 800109c:	080010d1 	.word	0x080010d1
 80010a0:	080010d9 	.word	0x080010d9
 80010a4:	080010e1 	.word	0x080010e1
 80010a8:	080010e9 	.word	0x080010e9
 80010ac:	080010f1 	.word	0x080010f1
 80010b0:	080010f9 	.word	0x080010f9
 80010b4:	08001101 	.word	0x08001101
			// Wheelbase
			case 0x100: telemetry_data.tRpm = value; break;
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	4a1c      	ldr	r2, [pc, #112]	@ (800112c <HAL_CAN_RxFifo1MsgPendingCallback+0xcc>)
 80010bc:	6013      	str	r3, [r2, #0]
 80010be:	e028      	b.n	8001112 <HAL_CAN_RxFifo1MsgPendingCallback+0xb2>
			case 0x101: telemetry_data.tGear = value; break;
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	4a1a      	ldr	r2, [pc, #104]	@ (800112c <HAL_CAN_RxFifo1MsgPendingCallback+0xcc>)
 80010c4:	6053      	str	r3, [r2, #4]
 80010c6:	e024      	b.n	8001112 <HAL_CAN_RxFifo1MsgPendingCallback+0xb2>
			case 0x102: telemetry_data.tSpeedKmh = value; break;
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	4a18      	ldr	r2, [pc, #96]	@ (800112c <HAL_CAN_RxFifo1MsgPendingCallback+0xcc>)
 80010cc:	6093      	str	r3, [r2, #8]
 80010ce:	e020      	b.n	8001112 <HAL_CAN_RxFifo1MsgPendingCallback+0xb2>
			case 0x103: telemetry_data.tHasDRS = value; break;
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	4a16      	ldr	r2, [pc, #88]	@ (800112c <HAL_CAN_RxFifo1MsgPendingCallback+0xcc>)
 80010d4:	60d3      	str	r3, [r2, #12]
 80010d6:	e01c      	b.n	8001112 <HAL_CAN_RxFifo1MsgPendingCallback+0xb2>
			case 0x104: telemetry_data.tDrs = value; break;
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	4a14      	ldr	r2, [pc, #80]	@ (800112c <HAL_CAN_RxFifo1MsgPendingCallback+0xcc>)
 80010dc:	6113      	str	r3, [r2, #16]
 80010de:	e018      	b.n	8001112 <HAL_CAN_RxFifo1MsgPendingCallback+0xb2>
			case 0x105: telemetry_data.tPitLim = value; break;
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	4a12      	ldr	r2, [pc, #72]	@ (800112c <HAL_CAN_RxFifo1MsgPendingCallback+0xcc>)
 80010e4:	6153      	str	r3, [r2, #20]
 80010e6:	e014      	b.n	8001112 <HAL_CAN_RxFifo1MsgPendingCallback+0xb2>
			case 0x106: telemetry_data.tFuel = value; break;
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	4a10      	ldr	r2, [pc, #64]	@ (800112c <HAL_CAN_RxFifo1MsgPendingCallback+0xcc>)
 80010ec:	6193      	str	r3, [r2, #24]
 80010ee:	e010      	b.n	8001112 <HAL_CAN_RxFifo1MsgPendingCallback+0xb2>
			case 0x107: telemetry_data.tBrakeBias = value; break;
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	4a0e      	ldr	r2, [pc, #56]	@ (800112c <HAL_CAN_RxFifo1MsgPendingCallback+0xcc>)
 80010f4:	61d3      	str	r3, [r2, #28]
 80010f6:	e00c      	b.n	8001112 <HAL_CAN_RxFifo1MsgPendingCallback+0xb2>
			case 0x108: telemetry_data.tMaxRpm = value; break;
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	4a0c      	ldr	r2, [pc, #48]	@ (800112c <HAL_CAN_RxFifo1MsgPendingCallback+0xcc>)
 80010fc:	6213      	str	r3, [r2, #32]
 80010fe:	e008      	b.n	8001112 <HAL_CAN_RxFifo1MsgPendingCallback+0xb2>
			case 0x109: telemetry_data.tForceFB = value; break;
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff f8e6 	bl	80002d4 <__aeabi_i2f>
 8001108:	4603      	mov	r3, r0
 800110a:	4a08      	ldr	r2, [pc, #32]	@ (800112c <HAL_CAN_RxFifo1MsgPendingCallback+0xcc>)
 800110c:	6253      	str	r3, [r2, #36]	@ 0x24
 800110e:	e000      	b.n	8001112 <HAL_CAN_RxFifo1MsgPendingCallback+0xb2>
			default: break;
 8001110:	bf00      	nop
	while (HAL_CAN_GetRxFifoFillLevel(hcan, CAN_RX_FIFO1) > 0) {
 8001112:	2101      	movs	r1, #1
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f001 fd3f 	bl	8002b98 <HAL_CAN_GetRxFifoFillLevel>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d1a4      	bne.n	800106a <HAL_CAN_RxFifo1MsgPendingCallback+0xa>
		}
	}
}
 8001120:	bf00      	nop
 8001122:	bf00      	nop
 8001124:	3730      	adds	r7, #48	@ 0x30
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	2000031c 	.word	0x2000031c

08001130 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	80fb      	strh	r3, [r7, #6]
	uint32_t current_time = HAL_GetTick();  // Get system time in ms
 800113a:	f000 fcfd 	bl	8001b38 <HAL_GetTick>
 800113e:	60f8      	str	r0, [r7, #12]
	if (current_time - last_enc_interrupt_time < 250) return;  // Debounce (5ms)
 8001140:	4b26      	ldr	r3, [pc, #152]	@ (80011dc <HAL_GPIO_EXTI_Callback+0xac>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	68fa      	ldr	r2, [r7, #12]
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	2bf9      	cmp	r3, #249	@ 0xf9
 800114a:	d943      	bls.n	80011d4 <HAL_GPIO_EXTI_Callback+0xa4>
	last_enc_interrupt_time = current_time;
 800114c:	4a23      	ldr	r2, [pc, #140]	@ (80011dc <HAL_GPIO_EXTI_Callback+0xac>)
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	6013      	str	r3, [r2, #0]
    if (GPIO_Pin == L_ENC_PIN_CLK) {
 8001152:	88fb      	ldrh	r3, [r7, #6]
 8001154:	2b80      	cmp	r3, #128	@ 0x80
 8001156:	d111      	bne.n	800117c <HAL_GPIO_EXTI_Callback+0x4c>
        if (HAL_GPIO_ReadPin(GPIOB, L_ENC_PIN_DT) == GPIO_PIN_SET) {
 8001158:	2140      	movs	r1, #64	@ 0x40
 800115a:	4821      	ldr	r0, [pc, #132]	@ (80011e0 <HAL_GPIO_EXTI_Callback+0xb0>)
 800115c:	f002 fca8 	bl	8003ab0 <HAL_GPIO_ReadPin>
 8001160:	4603      	mov	r3, r0
 8001162:	2b01      	cmp	r3, #1
 8001164:	d103      	bne.n	800116e <HAL_GPIO_EXTI_Callback+0x3e>
        	enc_l_flag = 1;
 8001166:	4b1f      	ldr	r3, [pc, #124]	@ (80011e4 <HAL_GPIO_EXTI_Callback+0xb4>)
 8001168:	2201      	movs	r2, #1
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	e003      	b.n	8001176 <HAL_GPIO_EXTI_Callback+0x46>
        } else {
        	enc_l_flag = -1;
 800116e:	4b1d      	ldr	r3, [pc, #116]	@ (80011e4 <HAL_GPIO_EXTI_Callback+0xb4>)
 8001170:	f04f 32ff 	mov.w	r2, #4294967295
 8001174:	601a      	str	r2, [r3, #0]
        }
        enc_l_time = current_time;
 8001176:	4a1c      	ldr	r2, [pc, #112]	@ (80011e8 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	6013      	str	r3, [r2, #0]
    }
    if (GPIO_Pin == C_ENC_PIN_CLK) {
 800117c:	88fb      	ldrh	r3, [r7, #6]
 800117e:	2b20      	cmp	r3, #32
 8001180:	d111      	bne.n	80011a6 <HAL_GPIO_EXTI_Callback+0x76>
		if (HAL_GPIO_ReadPin(GPIOB, C_ENC_PIN_DT) == GPIO_PIN_SET) {
 8001182:	2110      	movs	r1, #16
 8001184:	4816      	ldr	r0, [pc, #88]	@ (80011e0 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001186:	f002 fc93 	bl	8003ab0 <HAL_GPIO_ReadPin>
 800118a:	4603      	mov	r3, r0
 800118c:	2b01      	cmp	r3, #1
 800118e:	d103      	bne.n	8001198 <HAL_GPIO_EXTI_Callback+0x68>
			enc_c_flag = 1;
 8001190:	4b16      	ldr	r3, [pc, #88]	@ (80011ec <HAL_GPIO_EXTI_Callback+0xbc>)
 8001192:	2201      	movs	r2, #1
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	e003      	b.n	80011a0 <HAL_GPIO_EXTI_Callback+0x70>
		} else {
			enc_c_flag = -1;
 8001198:	4b14      	ldr	r3, [pc, #80]	@ (80011ec <HAL_GPIO_EXTI_Callback+0xbc>)
 800119a:	f04f 32ff 	mov.w	r2, #4294967295
 800119e:	601a      	str	r2, [r3, #0]
		}
		enc_c_time = current_time;
 80011a0:	4a13      	ldr	r2, [pc, #76]	@ (80011f0 <HAL_GPIO_EXTI_Callback+0xc0>)
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	6013      	str	r3, [r2, #0]
	}
    if (GPIO_Pin == R_ENC_PIN_CLK) {
 80011a6:	88fb      	ldrh	r3, [r7, #6]
 80011a8:	2b08      	cmp	r3, #8
 80011aa:	d114      	bne.n	80011d6 <HAL_GPIO_EXTI_Callback+0xa6>
		if (HAL_GPIO_ReadPin(GPIOA, R_ENC_PIN_DT) == GPIO_PIN_SET) {
 80011ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011b0:	4810      	ldr	r0, [pc, #64]	@ (80011f4 <HAL_GPIO_EXTI_Callback+0xc4>)
 80011b2:	f002 fc7d 	bl	8003ab0 <HAL_GPIO_ReadPin>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d103      	bne.n	80011c4 <HAL_GPIO_EXTI_Callback+0x94>
			enc_r_flag = 1;
 80011bc:	4b0e      	ldr	r3, [pc, #56]	@ (80011f8 <HAL_GPIO_EXTI_Callback+0xc8>)
 80011be:	2201      	movs	r2, #1
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	e003      	b.n	80011cc <HAL_GPIO_EXTI_Callback+0x9c>
		} else {
			enc_r_flag = -1;
 80011c4:	4b0c      	ldr	r3, [pc, #48]	@ (80011f8 <HAL_GPIO_EXTI_Callback+0xc8>)
 80011c6:	f04f 32ff 	mov.w	r2, #4294967295
 80011ca:	601a      	str	r2, [r3, #0]
		}
		enc_r_time = current_time;
 80011cc:	4a0b      	ldr	r2, [pc, #44]	@ (80011fc <HAL_GPIO_EXTI_Callback+0xcc>)
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	6013      	str	r3, [r2, #0]
 80011d2:	e000      	b.n	80011d6 <HAL_GPIO_EXTI_Callback+0xa6>
	if (current_time - last_enc_interrupt_time < 250) return;  // Debounce (5ms)
 80011d4:	bf00      	nop
	}
}
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	200004f8 	.word	0x200004f8
 80011e0:	40010c00 	.word	0x40010c00
 80011e4:	200004c8 	.word	0x200004c8
 80011e8:	200004d4 	.word	0x200004d4
 80011ec:	200004cc 	.word	0x200004cc
 80011f0:	200004d8 	.word	0x200004d8
 80011f4:	40010800 	.word	0x40010800
 80011f8:	200004d0 	.word	0x200004d0
 80011fc:	200004dc 	.word	0x200004dc

08001200 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);   // Turn LED off
 8001208:	2200      	movs	r2, #0
 800120a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800120e:	4807      	ldr	r0, [pc, #28]	@ (800122c <StartDefaultTask+0x2c>)
 8001210:	f002 fc65 	bl	8003ade <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);   // Turn LED off
 8001214:	2201      	movs	r2, #1
 8001216:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800121a:	4804      	ldr	r0, [pc, #16]	@ (800122c <StartDefaultTask+0x2c>)
 800121c:	f002 fc5f 	bl	8003ade <HAL_GPIO_WritePin>
	  osDelay(5);
 8001220:	2005      	movs	r0, #5
 8001222:	f005 f8f9 	bl	8006418 <osDelay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);   // Turn LED off
 8001226:	bf00      	nop
 8001228:	e7ee      	b.n	8001208 <StartDefaultTask+0x8>
 800122a:	bf00      	nop
 800122c:	40011000 	.word	0x40011000

08001230 <startNextionTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startNextionTask */
void startNextionTask(void const * argument)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
//	neopixel_show();
//	osDelay(10);

  for(;;)
  {
	  updateTelemetry();
 8001238:	f7ff fbb2 	bl	80009a0 <updateTelemetry>
/*	  updateNeopixels();*/
	  neopixel_set(0, 255, 0, 0); // RED
 800123c:	2300      	movs	r3, #0
 800123e:	2200      	movs	r2, #0
 8001240:	21ff      	movs	r1, #255	@ 0xff
 8001242:	2000      	movs	r0, #0
 8001244:	f000 f840 	bl	80012c8 <neopixel_set>
	  neopixel_set(1, 0, 255, 0); // GREEN
 8001248:	2300      	movs	r3, #0
 800124a:	22ff      	movs	r2, #255	@ 0xff
 800124c:	2100      	movs	r1, #0
 800124e:	2001      	movs	r0, #1
 8001250:	f000 f83a 	bl	80012c8 <neopixel_set>
	  neopixel_set(2, 0, 0, 255); // BLUE
 8001254:	23ff      	movs	r3, #255	@ 0xff
 8001256:	2200      	movs	r2, #0
 8001258:	2100      	movs	r1, #0
 800125a:	2002      	movs	r0, #2
 800125c:	f000 f834 	bl	80012c8 <neopixel_set>
	  neopixel_set(3, 255, 255, 255); // WHITE
 8001260:	23ff      	movs	r3, #255	@ 0xff
 8001262:	22ff      	movs	r2, #255	@ 0xff
 8001264:	21ff      	movs	r1, #255	@ 0xff
 8001266:	2003      	movs	r0, #3
 8001268:	f000 f82e 	bl	80012c8 <neopixel_set>
	  neopixel_show();
 800126c:	f000 f888 	bl	8001380 <neopixel_show>

	  osDelay(5);
 8001270:	2005      	movs	r0, #5
 8001272:	f005 f8d1 	bl	8006418 <osDelay>
	  updateTelemetry();
 8001276:	bf00      	nop
 8001278:	e7de      	b.n	8001238 <startNextionTask+0x8>

0800127a <startCanTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startCanTask */
void startCanTask(void const * argument)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b082      	sub	sp, #8
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startCanTask */
  /* Infinite loop */
	Start_ADC_DMA();
 8001282:	f7ff fdd9 	bl	8000e38 <Start_ADC_DMA>
  for(;;)
  {
	  updateUserInput();
 8001286:	f7ff fcc5 	bl	8000c14 <updateUserInput>
	  CAN_Transmit();
 800128a:	f7ff fe79 	bl	8000f80 <CAN_Transmit>
	  osDelay(5);
 800128e:	2005      	movs	r0, #5
 8001290:	f005 f8c2 	bl	8006418 <osDelay>
	  updateUserInput();
 8001294:	bf00      	nop
 8001296:	e7f6      	b.n	8001286 <startCanTask+0xc>

08001298 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a04      	ldr	r2, [pc, #16]	@ (80012b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d101      	bne.n	80012ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012aa:	f000 fc33 	bl	8001b14 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40000800 	.word	0x40000800

080012bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012c0:	b672      	cpsid	i
}
 80012c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012c4:	bf00      	nop
 80012c6:	e7fd      	b.n	80012c4 <Error_Handler+0x8>

080012c8 <neopixel_set>:
static led_t leds[NUM_LEDS];

extern TIM_HandleTypeDef htim1; // You need to enable TIM1 in CubeMX
extern DMA_HandleTypeDef hdma_tim1_ch1;

void neopixel_set(uint16_t index, uint8_t r, uint8_t g, uint8_t b) {
 80012c8:	b490      	push	{r4, r7}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4604      	mov	r4, r0
 80012d0:	4608      	mov	r0, r1
 80012d2:	4611      	mov	r1, r2
 80012d4:	461a      	mov	r2, r3
 80012d6:	4623      	mov	r3, r4
 80012d8:	80fb      	strh	r3, [r7, #6]
 80012da:	4603      	mov	r3, r0
 80012dc:	717b      	strb	r3, [r7, #5]
 80012de:	460b      	mov	r3, r1
 80012e0:	713b      	strb	r3, [r7, #4]
 80012e2:	4613      	mov	r3, r2
 80012e4:	70fb      	strb	r3, [r7, #3]
    if (index >= NUM_LEDS) return;
 80012e6:	88fb      	ldrh	r3, [r7, #6]
 80012e8:	2b07      	cmp	r3, #7
 80012ea:	d81a      	bhi.n	8001322 <neopixel_set+0x5a>
    leds[index].r = r;
 80012ec:	88fa      	ldrh	r2, [r7, #6]
 80012ee:	490f      	ldr	r1, [pc, #60]	@ (800132c <neopixel_set+0x64>)
 80012f0:	4613      	mov	r3, r2
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	4413      	add	r3, r2
 80012f6:	440b      	add	r3, r1
 80012f8:	3301      	adds	r3, #1
 80012fa:	797a      	ldrb	r2, [r7, #5]
 80012fc:	701a      	strb	r2, [r3, #0]
    leds[index].g = g;
 80012fe:	88fa      	ldrh	r2, [r7, #6]
 8001300:	490a      	ldr	r1, [pc, #40]	@ (800132c <neopixel_set+0x64>)
 8001302:	4613      	mov	r3, r2
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	4413      	add	r3, r2
 8001308:	440b      	add	r3, r1
 800130a:	793a      	ldrb	r2, [r7, #4]
 800130c:	701a      	strb	r2, [r3, #0]
    leds[index].b = b;
 800130e:	88fa      	ldrh	r2, [r7, #6]
 8001310:	4906      	ldr	r1, [pc, #24]	@ (800132c <neopixel_set+0x64>)
 8001312:	4613      	mov	r3, r2
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	4413      	add	r3, r2
 8001318:	440b      	add	r3, r1
 800131a:	3302      	adds	r3, #2
 800131c:	78fa      	ldrb	r2, [r7, #3]
 800131e:	701a      	strb	r2, [r3, #0]
 8001320:	e000      	b.n	8001324 <neopixel_set+0x5c>
    if (index >= NUM_LEDS) return;
 8001322:	bf00      	nop
}
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bc90      	pop	{r4, r7}
 800132a:	4770      	bx	lr
 800132c:	200006dc 	.word	0x200006dc

08001330 <encode_byte>:
    for (int i = 0; i < NUM_LEDS; i++) {
        neopixel_set(i, 0, 0, 0);
    }
}

static void encode_byte(uint8_t byte, uint16_t *buf) {
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	6039      	str	r1, [r7, #0]
 800133a:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 8; i++) {
 800133c:	2300      	movs	r3, #0
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	e015      	b.n	800136e <encode_byte+0x3e>
        buf[i] = (byte & (1 << (7 - i))) ? HIGH_DUTY : LOW_DUTY;
 8001342:	79fa      	ldrb	r2, [r7, #7]
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f1c3 0307 	rsb	r3, r3, #7
 800134a:	fa42 f303 	asr.w	r3, r2, r3
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <encode_byte+0x2a>
 8001356:	2107      	movs	r1, #7
 8001358:	e000      	b.n	800135c <encode_byte+0x2c>
 800135a:	2103      	movs	r1, #3
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	683a      	ldr	r2, [r7, #0]
 8001362:	4413      	add	r3, r2
 8001364:	460a      	mov	r2, r1
 8001366:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < 8; i++) {
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	3301      	adds	r3, #1
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	2b07      	cmp	r3, #7
 8001372:	dde6      	ble.n	8001342 <encode_byte+0x12>
    }
}
 8001374:	bf00      	nop
 8001376:	bf00      	nop
 8001378:	3714      	adds	r7, #20
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr

08001380 <neopixel_show>:

void neopixel_show(void) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
    uint16_t i = 0;
 8001386:	2300      	movs	r3, #0
 8001388:	81fb      	strh	r3, [r7, #14]
    for (uint16_t led = 0; led < NUM_LEDS; led++) {
 800138a:	2300      	movs	r3, #0
 800138c:	81bb      	strh	r3, [r7, #12]
 800138e:	e03a      	b.n	8001406 <neopixel_show+0x86>
        encode_byte(leds[led].g, &pwm_buffer[i]); i += 8;
 8001390:	89ba      	ldrh	r2, [r7, #12]
 8001392:	4933      	ldr	r1, [pc, #204]	@ (8001460 <neopixel_show+0xe0>)
 8001394:	4613      	mov	r3, r2
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	4413      	add	r3, r2
 800139a:	440b      	add	r3, r1
 800139c:	781a      	ldrb	r2, [r3, #0]
 800139e:	89fb      	ldrh	r3, [r7, #14]
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	4930      	ldr	r1, [pc, #192]	@ (8001464 <neopixel_show+0xe4>)
 80013a4:	440b      	add	r3, r1
 80013a6:	4619      	mov	r1, r3
 80013a8:	4610      	mov	r0, r2
 80013aa:	f7ff ffc1 	bl	8001330 <encode_byte>
 80013ae:	89fb      	ldrh	r3, [r7, #14]
 80013b0:	3308      	adds	r3, #8
 80013b2:	81fb      	strh	r3, [r7, #14]
        encode_byte(leds[led].r, &pwm_buffer[i]); i += 8;
 80013b4:	89ba      	ldrh	r2, [r7, #12]
 80013b6:	492a      	ldr	r1, [pc, #168]	@ (8001460 <neopixel_show+0xe0>)
 80013b8:	4613      	mov	r3, r2
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	4413      	add	r3, r2
 80013be:	440b      	add	r3, r1
 80013c0:	3301      	adds	r3, #1
 80013c2:	781a      	ldrb	r2, [r3, #0]
 80013c4:	89fb      	ldrh	r3, [r7, #14]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	4926      	ldr	r1, [pc, #152]	@ (8001464 <neopixel_show+0xe4>)
 80013ca:	440b      	add	r3, r1
 80013cc:	4619      	mov	r1, r3
 80013ce:	4610      	mov	r0, r2
 80013d0:	f7ff ffae 	bl	8001330 <encode_byte>
 80013d4:	89fb      	ldrh	r3, [r7, #14]
 80013d6:	3308      	adds	r3, #8
 80013d8:	81fb      	strh	r3, [r7, #14]
        encode_byte(leds[led].b, &pwm_buffer[i]); i += 8;
 80013da:	89ba      	ldrh	r2, [r7, #12]
 80013dc:	4920      	ldr	r1, [pc, #128]	@ (8001460 <neopixel_show+0xe0>)
 80013de:	4613      	mov	r3, r2
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	4413      	add	r3, r2
 80013e4:	440b      	add	r3, r1
 80013e6:	3302      	adds	r3, #2
 80013e8:	781a      	ldrb	r2, [r3, #0]
 80013ea:	89fb      	ldrh	r3, [r7, #14]
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	491d      	ldr	r1, [pc, #116]	@ (8001464 <neopixel_show+0xe4>)
 80013f0:	440b      	add	r3, r1
 80013f2:	4619      	mov	r1, r3
 80013f4:	4610      	mov	r0, r2
 80013f6:	f7ff ff9b 	bl	8001330 <encode_byte>
 80013fa:	89fb      	ldrh	r3, [r7, #14]
 80013fc:	3308      	adds	r3, #8
 80013fe:	81fb      	strh	r3, [r7, #14]
    for (uint16_t led = 0; led < NUM_LEDS; led++) {
 8001400:	89bb      	ldrh	r3, [r7, #12]
 8001402:	3301      	adds	r3, #1
 8001404:	81bb      	strh	r3, [r7, #12]
 8001406:	89bb      	ldrh	r3, [r7, #12]
 8001408:	2b07      	cmp	r3, #7
 800140a:	d9c1      	bls.n	8001390 <neopixel_show+0x10>
    }

    // Clear reset slot
    for (; i < BUFFER_SIZE; i++) {
 800140c:	e007      	b.n	800141e <neopixel_show+0x9e>
        pwm_buffer[i] = 0;
 800140e:	89fb      	ldrh	r3, [r7, #14]
 8001410:	4a14      	ldr	r2, [pc, #80]	@ (8001464 <neopixel_show+0xe4>)
 8001412:	2100      	movs	r1, #0
 8001414:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (; i < BUFFER_SIZE; i++) {
 8001418:	89fb      	ldrh	r3, [r7, #14]
 800141a:	3301      	adds	r3, #1
 800141c:	81fb      	strh	r3, [r7, #14]
 800141e:	89fb      	ldrh	r3, [r7, #14]
 8001420:	2bef      	cmp	r3, #239	@ 0xef
 8001422:	d9f4      	bls.n	800140e <neopixel_show+0x8e>
    }

//    HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t*)pwm_buffer, BUFFER_SIZE);
//    while (HAL_DMA_GetState(&hdma_tim1_ch1) != HAL_DMA_STATE_READY); // Wait for complete
    uint32_t start = HAL_GetTick();
 8001424:	f000 fb88 	bl	8001b38 <HAL_GetTick>
 8001428:	60b8      	str	r0, [r7, #8]
    HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t*)pwm_buffer, BUFFER_SIZE);
 800142a:	23f0      	movs	r3, #240	@ 0xf0
 800142c:	4a0d      	ldr	r2, [pc, #52]	@ (8001464 <neopixel_show+0xe4>)
 800142e:	2100      	movs	r1, #0
 8001430:	480d      	ldr	r0, [pc, #52]	@ (8001468 <neopixel_show+0xe8>)
 8001432:	f003 f975 	bl	8004720 <HAL_TIM_PWM_Start_DMA>
    while (HAL_DMA_GetState(&hdma_tim1_ch1) != HAL_DMA_STATE_READY);
 8001436:	bf00      	nop
 8001438:	480c      	ldr	r0, [pc, #48]	@ (800146c <neopixel_show+0xec>)
 800143a:	f002 f97b 	bl	8003734 <HAL_DMA_GetState>
 800143e:	4603      	mov	r3, r0
 8001440:	2b01      	cmp	r3, #1
 8001442:	d1f9      	bne.n	8001438 <neopixel_show+0xb8>
    uint32_t elapsed = HAL_GetTick() - start;
 8001444:	f000 fb78 	bl	8001b38 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	607b      	str	r3, [r7, #4]
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8001450:	2100      	movs	r1, #0
 8001452:	4805      	ldr	r0, [pc, #20]	@ (8001468 <neopixel_show+0xe8>)
 8001454:	f003 fb06 	bl	8004a64 <HAL_TIM_PWM_Stop_DMA>
}
 8001458:	bf00      	nop
 800145a:	3710      	adds	r7, #16
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	200006dc 	.word	0x200006dc
 8001464:	200004fc 	.word	0x200004fc
 8001468:	200003e8 	.word	0x200003e8
 800146c:	20000430 	.word	0x20000430

08001470 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001476:	4b18      	ldr	r3, [pc, #96]	@ (80014d8 <HAL_MspInit+0x68>)
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	4a17      	ldr	r2, [pc, #92]	@ (80014d8 <HAL_MspInit+0x68>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	6193      	str	r3, [r2, #24]
 8001482:	4b15      	ldr	r3, [pc, #84]	@ (80014d8 <HAL_MspInit+0x68>)
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	60bb      	str	r3, [r7, #8]
 800148c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800148e:	4b12      	ldr	r3, [pc, #72]	@ (80014d8 <HAL_MspInit+0x68>)
 8001490:	69db      	ldr	r3, [r3, #28]
 8001492:	4a11      	ldr	r2, [pc, #68]	@ (80014d8 <HAL_MspInit+0x68>)
 8001494:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001498:	61d3      	str	r3, [r2, #28]
 800149a:	4b0f      	ldr	r3, [pc, #60]	@ (80014d8 <HAL_MspInit+0x68>)
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	210f      	movs	r1, #15
 80014aa:	f06f 0001 	mvn.w	r0, #1
 80014ae:	f001 fea2 	bl	80031f6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014b2:	4b0a      	ldr	r3, [pc, #40]	@ (80014dc <HAL_MspInit+0x6c>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	4a04      	ldr	r2, [pc, #16]	@ (80014dc <HAL_MspInit+0x6c>)
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ce:	bf00      	nop
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40021000 	.word	0x40021000
 80014dc:	40010000 	.word	0x40010000

080014e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b088      	sub	sp, #32
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e8:	f107 0310 	add.w	r3, r7, #16
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a29      	ldr	r2, [pc, #164]	@ (80015a0 <HAL_ADC_MspInit+0xc0>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d14a      	bne.n	8001596 <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001500:	4b28      	ldr	r3, [pc, #160]	@ (80015a4 <HAL_ADC_MspInit+0xc4>)
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	4a27      	ldr	r2, [pc, #156]	@ (80015a4 <HAL_ADC_MspInit+0xc4>)
 8001506:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800150a:	6193      	str	r3, [r2, #24]
 800150c:	4b25      	ldr	r3, [pc, #148]	@ (80015a4 <HAL_ADC_MspInit+0xc4>)
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001518:	4b22      	ldr	r3, [pc, #136]	@ (80015a4 <HAL_ADC_MspInit+0xc4>)
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	4a21      	ldr	r2, [pc, #132]	@ (80015a4 <HAL_ADC_MspInit+0xc4>)
 800151e:	f043 0304 	orr.w	r3, r3, #4
 8001522:	6193      	str	r3, [r2, #24]
 8001524:	4b1f      	ldr	r3, [pc, #124]	@ (80015a4 <HAL_ADC_MspInit+0xc4>)
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	f003 0304 	and.w	r3, r3, #4
 800152c:	60bb      	str	r3, [r7, #8]
 800152e:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001530:	230f      	movs	r3, #15
 8001532:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001534:	2303      	movs	r3, #3
 8001536:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001538:	f107 0310 	add.w	r3, r7, #16
 800153c:	4619      	mov	r1, r3
 800153e:	481a      	ldr	r0, [pc, #104]	@ (80015a8 <HAL_ADC_MspInit+0xc8>)
 8001540:	f002 f932 	bl	80037a8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001544:	4b19      	ldr	r3, [pc, #100]	@ (80015ac <HAL_ADC_MspInit+0xcc>)
 8001546:	4a1a      	ldr	r2, [pc, #104]	@ (80015b0 <HAL_ADC_MspInit+0xd0>)
 8001548:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800154a:	4b18      	ldr	r3, [pc, #96]	@ (80015ac <HAL_ADC_MspInit+0xcc>)
 800154c:	2200      	movs	r2, #0
 800154e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001550:	4b16      	ldr	r3, [pc, #88]	@ (80015ac <HAL_ADC_MspInit+0xcc>)
 8001552:	2200      	movs	r2, #0
 8001554:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001556:	4b15      	ldr	r3, [pc, #84]	@ (80015ac <HAL_ADC_MspInit+0xcc>)
 8001558:	2280      	movs	r2, #128	@ 0x80
 800155a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800155c:	4b13      	ldr	r3, [pc, #76]	@ (80015ac <HAL_ADC_MspInit+0xcc>)
 800155e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001562:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001564:	4b11      	ldr	r3, [pc, #68]	@ (80015ac <HAL_ADC_MspInit+0xcc>)
 8001566:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800156a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800156c:	4b0f      	ldr	r3, [pc, #60]	@ (80015ac <HAL_ADC_MspInit+0xcc>)
 800156e:	2220      	movs	r2, #32
 8001570:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001572:	4b0e      	ldr	r3, [pc, #56]	@ (80015ac <HAL_ADC_MspInit+0xcc>)
 8001574:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001578:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800157a:	480c      	ldr	r0, [pc, #48]	@ (80015ac <HAL_ADC_MspInit+0xcc>)
 800157c:	f001 fe66 	bl	800324c <HAL_DMA_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 8001586:	f7ff fe99 	bl	80012bc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a07      	ldr	r2, [pc, #28]	@ (80015ac <HAL_ADC_MspInit+0xcc>)
 800158e:	621a      	str	r2, [r3, #32]
 8001590:	4a06      	ldr	r2, [pc, #24]	@ (80015ac <HAL_ADC_MspInit+0xcc>)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001596:	bf00      	nop
 8001598:	3720      	adds	r7, #32
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40012400 	.word	0x40012400
 80015a4:	40021000 	.word	0x40021000
 80015a8:	40010800 	.word	0x40010800
 80015ac:	2000037c 	.word	0x2000037c
 80015b0:	40020008 	.word	0x40020008

080015b4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b088      	sub	sp, #32
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 0310 	add.w	r3, r7, #16
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a2c      	ldr	r2, [pc, #176]	@ (8001680 <HAL_CAN_MspInit+0xcc>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d151      	bne.n	8001678 <HAL_CAN_MspInit+0xc4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80015d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001684 <HAL_CAN_MspInit+0xd0>)
 80015d6:	69db      	ldr	r3, [r3, #28]
 80015d8:	4a2a      	ldr	r2, [pc, #168]	@ (8001684 <HAL_CAN_MspInit+0xd0>)
 80015da:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80015de:	61d3      	str	r3, [r2, #28]
 80015e0:	4b28      	ldr	r3, [pc, #160]	@ (8001684 <HAL_CAN_MspInit+0xd0>)
 80015e2:	69db      	ldr	r3, [r3, #28]
 80015e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ec:	4b25      	ldr	r3, [pc, #148]	@ (8001684 <HAL_CAN_MspInit+0xd0>)
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	4a24      	ldr	r2, [pc, #144]	@ (8001684 <HAL_CAN_MspInit+0xd0>)
 80015f2:	f043 0304 	orr.w	r3, r3, #4
 80015f6:	6193      	str	r3, [r2, #24]
 80015f8:	4b22      	ldr	r3, [pc, #136]	@ (8001684 <HAL_CAN_MspInit+0xd0>)
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	f003 0304 	and.w	r3, r3, #4
 8001600:	60bb      	str	r3, [r7, #8]
 8001602:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001604:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001608:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800160a:	2300      	movs	r3, #0
 800160c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800160e:	2301      	movs	r3, #1
 8001610:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001612:	f107 0310 	add.w	r3, r7, #16
 8001616:	4619      	mov	r1, r3
 8001618:	481b      	ldr	r0, [pc, #108]	@ (8001688 <HAL_CAN_MspInit+0xd4>)
 800161a:	f002 f8c5 	bl	80037a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800161e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001622:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001624:	2302      	movs	r3, #2
 8001626:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001628:	2303      	movs	r3, #3
 800162a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162c:	f107 0310 	add.w	r3, r7, #16
 8001630:	4619      	mov	r1, r3
 8001632:	4815      	ldr	r0, [pc, #84]	@ (8001688 <HAL_CAN_MspInit+0xd4>)
 8001634:	f002 f8b8 	bl	80037a8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 5, 0);
 8001638:	2200      	movs	r2, #0
 800163a:	2105      	movs	r1, #5
 800163c:	2013      	movs	r0, #19
 800163e:	f001 fdda 	bl	80031f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8001642:	2013      	movs	r0, #19
 8001644:	f001 fdf3 	bl	800322e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8001648:	2200      	movs	r2, #0
 800164a:	2105      	movs	r1, #5
 800164c:	2014      	movs	r0, #20
 800164e:	f001 fdd2 	bl	80031f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001652:	2014      	movs	r0, #20
 8001654:	f001 fdeb 	bl	800322e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8001658:	2200      	movs	r2, #0
 800165a:	2105      	movs	r1, #5
 800165c:	2015      	movs	r0, #21
 800165e:	f001 fdca 	bl	80031f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001662:	2015      	movs	r0, #21
 8001664:	f001 fde3 	bl	800322e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 5, 0);
 8001668:	2200      	movs	r2, #0
 800166a:	2105      	movs	r1, #5
 800166c:	2016      	movs	r0, #22
 800166e:	f001 fdc2 	bl	80031f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8001672:	2016      	movs	r0, #22
 8001674:	f001 fddb 	bl	800322e <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001678:	bf00      	nop
 800167a:	3720      	adds	r7, #32
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40006400 	.word	0x40006400
 8001684:	40021000 	.word	0x40021000
 8001688:	40010800 	.word	0x40010800

0800168c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a1d      	ldr	r2, [pc, #116]	@ (8001710 <HAL_TIM_PWM_MspInit+0x84>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d134      	bne.n	8001708 <HAL_TIM_PWM_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800169e:	4b1d      	ldr	r3, [pc, #116]	@ (8001714 <HAL_TIM_PWM_MspInit+0x88>)
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	4a1c      	ldr	r2, [pc, #112]	@ (8001714 <HAL_TIM_PWM_MspInit+0x88>)
 80016a4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80016a8:	6193      	str	r3, [r2, #24]
 80016aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001714 <HAL_TIM_PWM_MspInit+0x88>)
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 80016b6:	4b18      	ldr	r3, [pc, #96]	@ (8001718 <HAL_TIM_PWM_MspInit+0x8c>)
 80016b8:	4a18      	ldr	r2, [pc, #96]	@ (800171c <HAL_TIM_PWM_MspInit+0x90>)
 80016ba:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016bc:	4b16      	ldr	r3, [pc, #88]	@ (8001718 <HAL_TIM_PWM_MspInit+0x8c>)
 80016be:	2210      	movs	r2, #16
 80016c0:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016c2:	4b15      	ldr	r3, [pc, #84]	@ (8001718 <HAL_TIM_PWM_MspInit+0x8c>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80016c8:	4b13      	ldr	r3, [pc, #76]	@ (8001718 <HAL_TIM_PWM_MspInit+0x8c>)
 80016ca:	2280      	movs	r2, #128	@ 0x80
 80016cc:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016ce:	4b12      	ldr	r3, [pc, #72]	@ (8001718 <HAL_TIM_PWM_MspInit+0x8c>)
 80016d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016d4:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016d6:	4b10      	ldr	r3, [pc, #64]	@ (8001718 <HAL_TIM_PWM_MspInit+0x8c>)
 80016d8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016dc:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80016de:	4b0e      	ldr	r3, [pc, #56]	@ (8001718 <HAL_TIM_PWM_MspInit+0x8c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80016e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001718 <HAL_TIM_PWM_MspInit+0x8c>)
 80016e6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016ea:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80016ec:	480a      	ldr	r0, [pc, #40]	@ (8001718 <HAL_TIM_PWM_MspInit+0x8c>)
 80016ee:	f001 fdad 	bl	800324c <HAL_DMA_Init>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <HAL_TIM_PWM_MspInit+0x70>
    {
      Error_Handler();
 80016f8:	f7ff fde0 	bl	80012bc <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	4a06      	ldr	r2, [pc, #24]	@ (8001718 <HAL_TIM_PWM_MspInit+0x8c>)
 8001700:	625a      	str	r2, [r3, #36]	@ 0x24
 8001702:	4a05      	ldr	r2, [pc, #20]	@ (8001718 <HAL_TIM_PWM_MspInit+0x8c>)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001708:	bf00      	nop
 800170a:	3710      	adds	r7, #16
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40012c00 	.word	0x40012c00
 8001714:	40021000 	.word	0x40021000
 8001718:	20000430 	.word	0x20000430
 800171c:	4002001c 	.word	0x4002001c

08001720 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b088      	sub	sp, #32
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001728:	f107 0310 	add.w	r3, r7, #16
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a10      	ldr	r2, [pc, #64]	@ (800177c <HAL_TIM_MspPostInit+0x5c>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d118      	bne.n	8001772 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001740:	4b0f      	ldr	r3, [pc, #60]	@ (8001780 <HAL_TIM_MspPostInit+0x60>)
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	4a0e      	ldr	r2, [pc, #56]	@ (8001780 <HAL_TIM_MspPostInit+0x60>)
 8001746:	f043 0304 	orr.w	r3, r3, #4
 800174a:	6193      	str	r3, [r2, #24]
 800174c:	4b0c      	ldr	r3, [pc, #48]	@ (8001780 <HAL_TIM_MspPostInit+0x60>)
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	f003 0304 	and.w	r3, r3, #4
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001758:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800175c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175e:	2302      	movs	r3, #2
 8001760:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001762:	2302      	movs	r3, #2
 8001764:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001766:	f107 0310 	add.w	r3, r7, #16
 800176a:	4619      	mov	r1, r3
 800176c:	4805      	ldr	r0, [pc, #20]	@ (8001784 <HAL_TIM_MspPostInit+0x64>)
 800176e:	f002 f81b 	bl	80037a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001772:	bf00      	nop
 8001774:	3720      	adds	r7, #32
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40012c00 	.word	0x40012c00
 8001780:	40021000 	.word	0x40021000
 8001784:	40010800 	.word	0x40010800

08001788 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b088      	sub	sp, #32
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001790:	f107 0310 	add.w	r3, r7, #16
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a20      	ldr	r2, [pc, #128]	@ (8001824 <HAL_UART_MspInit+0x9c>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d139      	bne.n	800181c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001828 <HAL_UART_MspInit+0xa0>)
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	4a1e      	ldr	r2, [pc, #120]	@ (8001828 <HAL_UART_MspInit+0xa0>)
 80017ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017b2:	6193      	str	r3, [r2, #24]
 80017b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001828 <HAL_UART_MspInit+0xa0>)
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c0:	4b19      	ldr	r3, [pc, #100]	@ (8001828 <HAL_UART_MspInit+0xa0>)
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	4a18      	ldr	r2, [pc, #96]	@ (8001828 <HAL_UART_MspInit+0xa0>)
 80017c6:	f043 0304 	orr.w	r3, r3, #4
 80017ca:	6193      	str	r3, [r2, #24]
 80017cc:	4b16      	ldr	r3, [pc, #88]	@ (8001828 <HAL_UART_MspInit+0xa0>)
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	f003 0304 	and.w	r3, r3, #4
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017de:	2302      	movs	r3, #2
 80017e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017e2:	2303      	movs	r3, #3
 80017e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e6:	f107 0310 	add.w	r3, r7, #16
 80017ea:	4619      	mov	r1, r3
 80017ec:	480f      	ldr	r0, [pc, #60]	@ (800182c <HAL_UART_MspInit+0xa4>)
 80017ee:	f001 ffdb 	bl	80037a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001800:	f107 0310 	add.w	r3, r7, #16
 8001804:	4619      	mov	r1, r3
 8001806:	4809      	ldr	r0, [pc, #36]	@ (800182c <HAL_UART_MspInit+0xa4>)
 8001808:	f001 ffce 	bl	80037a8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800180c:	2200      	movs	r2, #0
 800180e:	2105      	movs	r1, #5
 8001810:	2025      	movs	r0, #37	@ 0x25
 8001812:	f001 fcf0 	bl	80031f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001816:	2025      	movs	r0, #37	@ 0x25
 8001818:	f001 fd09 	bl	800322e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800181c:	bf00      	nop
 800181e:	3720      	adds	r7, #32
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40013800 	.word	0x40013800
 8001828:	40021000 	.word	0x40021000
 800182c:	40010800 	.word	0x40010800

08001830 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08e      	sub	sp, #56	@ 0x38
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001838:	2300      	movs	r3, #0
 800183a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800183c:	2300      	movs	r3, #0
 800183e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001840:	2300      	movs	r3, #0
 8001842:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001846:	4b34      	ldr	r3, [pc, #208]	@ (8001918 <HAL_InitTick+0xe8>)
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	4a33      	ldr	r2, [pc, #204]	@ (8001918 <HAL_InitTick+0xe8>)
 800184c:	f043 0304 	orr.w	r3, r3, #4
 8001850:	61d3      	str	r3, [r2, #28]
 8001852:	4b31      	ldr	r3, [pc, #196]	@ (8001918 <HAL_InitTick+0xe8>)
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	f003 0304 	and.w	r3, r3, #4
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800185e:	f107 0210 	add.w	r2, r7, #16
 8001862:	f107 0314 	add.w	r3, r7, #20
 8001866:	4611      	mov	r1, r2
 8001868:	4618      	mov	r0, r3
 800186a:	f002 fd5b 	bl	8004324 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800186e:	6a3b      	ldr	r3, [r7, #32]
 8001870:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001874:	2b00      	cmp	r3, #0
 8001876:	d103      	bne.n	8001880 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001878:	f002 fd2c 	bl	80042d4 <HAL_RCC_GetPCLK1Freq>
 800187c:	6378      	str	r0, [r7, #52]	@ 0x34
 800187e:	e004      	b.n	800188a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001880:	f002 fd28 	bl	80042d4 <HAL_RCC_GetPCLK1Freq>
 8001884:	4603      	mov	r3, r0
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800188a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800188c:	4a23      	ldr	r2, [pc, #140]	@ (800191c <HAL_InitTick+0xec>)
 800188e:	fba2 2303 	umull	r2, r3, r2, r3
 8001892:	0c9b      	lsrs	r3, r3, #18
 8001894:	3b01      	subs	r3, #1
 8001896:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001898:	4b21      	ldr	r3, [pc, #132]	@ (8001920 <HAL_InitTick+0xf0>)
 800189a:	4a22      	ldr	r2, [pc, #136]	@ (8001924 <HAL_InitTick+0xf4>)
 800189c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800189e:	4b20      	ldr	r3, [pc, #128]	@ (8001920 <HAL_InitTick+0xf0>)
 80018a0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80018a4:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80018a6:	4a1e      	ldr	r2, [pc, #120]	@ (8001920 <HAL_InitTick+0xf0>)
 80018a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018aa:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80018ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001920 <HAL_InitTick+0xf0>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001920 <HAL_InitTick+0xf0>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018b8:	4b19      	ldr	r3, [pc, #100]	@ (8001920 <HAL_InitTick+0xf0>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80018be:	4818      	ldr	r0, [pc, #96]	@ (8001920 <HAL_InitTick+0xf0>)
 80018c0:	f002 fe34 	bl	800452c <HAL_TIM_Base_Init>
 80018c4:	4603      	mov	r3, r0
 80018c6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80018ca:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d11b      	bne.n	800190a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80018d2:	4813      	ldr	r0, [pc, #76]	@ (8001920 <HAL_InitTick+0xf0>)
 80018d4:	f002 fe82 	bl	80045dc <HAL_TIM_Base_Start_IT>
 80018d8:	4603      	mov	r3, r0
 80018da:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80018de:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d111      	bne.n	800190a <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80018e6:	201e      	movs	r0, #30
 80018e8:	f001 fca1 	bl	800322e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b0f      	cmp	r3, #15
 80018f0:	d808      	bhi.n	8001904 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80018f2:	2200      	movs	r2, #0
 80018f4:	6879      	ldr	r1, [r7, #4]
 80018f6:	201e      	movs	r0, #30
 80018f8:	f001 fc7d 	bl	80031f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018fc:	4a0a      	ldr	r2, [pc, #40]	@ (8001928 <HAL_InitTick+0xf8>)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6013      	str	r3, [r2, #0]
 8001902:	e002      	b.n	800190a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800190a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800190e:	4618      	mov	r0, r3
 8001910:	3738      	adds	r7, #56	@ 0x38
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40021000 	.word	0x40021000
 800191c:	431bde83 	.word	0x431bde83
 8001920:	200006f4 	.word	0x200006f4
 8001924:	40000800 	.word	0x40000800
 8001928:	20000004 	.word	0x20000004

0800192c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001930:	bf00      	nop
 8001932:	e7fd      	b.n	8001930 <NMI_Handler+0x4>

08001934 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001938:	bf00      	nop
 800193a:	e7fd      	b.n	8001938 <HardFault_Handler+0x4>

0800193c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001940:	bf00      	nop
 8001942:	e7fd      	b.n	8001940 <MemManage_Handler+0x4>

08001944 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001948:	bf00      	nop
 800194a:	e7fd      	b.n	8001948 <BusFault_Handler+0x4>

0800194c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001950:	bf00      	nop
 8001952:	e7fd      	b.n	8001950 <UsageFault_Handler+0x4>

08001954 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr

08001960 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001964:	2008      	movs	r0, #8
 8001966:	f002 f8d3 	bl	8003b10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
	...

08001970 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001974:	4802      	ldr	r0, [pc, #8]	@ (8001980 <DMA1_Channel1_IRQHandler+0x10>)
 8001976:	f001 fdd7 	bl	8003528 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	2000037c 	.word	0x2000037c

08001984 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001988:	4802      	ldr	r0, [pc, #8]	@ (8001994 <DMA1_Channel2_IRQHandler+0x10>)
 800198a:	f001 fdcd 	bl	8003528 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20000430 	.word	0x20000430

08001998 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800199c:	4802      	ldr	r0, [pc, #8]	@ (80019a8 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 800199e:	f001 f947 	bl	8002c30 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	200003c0 	.word	0x200003c0

080019ac <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80019b0:	4802      	ldr	r0, [pc, #8]	@ (80019bc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80019b2:	f001 f93d 	bl	8002c30 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	200003c0 	.word	0x200003c0

080019c0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80019c4:	4802      	ldr	r0, [pc, #8]	@ (80019d0 <CAN1_RX1_IRQHandler+0x10>)
 80019c6:	f001 f933 	bl	8002c30 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	200003c0 	.word	0x200003c0

080019d4 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80019d8:	4802      	ldr	r0, [pc, #8]	@ (80019e4 <CAN1_SCE_IRQHandler+0x10>)
 80019da:	f001 f929 	bl	8002c30 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	200003c0 	.word	0x200003c0

080019e8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80019ec:	2020      	movs	r0, #32
 80019ee:	f002 f88f 	bl	8003b10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80019f2:	2080      	movs	r0, #128	@ 0x80
 80019f4:	f002 f88c 	bl	8003b10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80019f8:	bf00      	nop
 80019fa:	bd80      	pop	{r7, pc}

080019fc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001a00:	4802      	ldr	r0, [pc, #8]	@ (8001a0c <TIM4_IRQHandler+0x10>)
 8001a02:	f003 f8f5 	bl	8004bf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	200006f4 	.word	0x200006f4

08001a10 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a14:	4802      	ldr	r0, [pc, #8]	@ (8001a20 <USART1_IRQHandler+0x10>)
 8001a16:	f003 ff5b 	bl	80058d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000474 	.word	0x20000474

08001a24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a2c:	4a14      	ldr	r2, [pc, #80]	@ (8001a80 <_sbrk+0x5c>)
 8001a2e:	4b15      	ldr	r3, [pc, #84]	@ (8001a84 <_sbrk+0x60>)
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a38:	4b13      	ldr	r3, [pc, #76]	@ (8001a88 <_sbrk+0x64>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d102      	bne.n	8001a46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a40:	4b11      	ldr	r3, [pc, #68]	@ (8001a88 <_sbrk+0x64>)
 8001a42:	4a12      	ldr	r2, [pc, #72]	@ (8001a8c <_sbrk+0x68>)
 8001a44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a46:	4b10      	ldr	r3, [pc, #64]	@ (8001a88 <_sbrk+0x64>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d207      	bcs.n	8001a64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a54:	f005 fff8 	bl	8007a48 <__errno>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	220c      	movs	r2, #12
 8001a5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a62:	e009      	b.n	8001a78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a64:	4b08      	ldr	r3, [pc, #32]	@ (8001a88 <_sbrk+0x64>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a6a:	4b07      	ldr	r3, [pc, #28]	@ (8001a88 <_sbrk+0x64>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4413      	add	r3, r2
 8001a72:	4a05      	ldr	r2, [pc, #20]	@ (8001a88 <_sbrk+0x64>)
 8001a74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a76:	68fb      	ldr	r3, [r7, #12]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20005000 	.word	0x20005000
 8001a84:	00000400 	.word	0x00000400
 8001a88:	2000073c 	.word	0x2000073c
 8001a8c:	200015e0 	.word	0x200015e0

08001a90 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr

08001a9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a9c:	f7ff fff8 	bl	8001a90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001aa0:	480b      	ldr	r0, [pc, #44]	@ (8001ad0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001aa2:	490c      	ldr	r1, [pc, #48]	@ (8001ad4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001aa4:	4a0c      	ldr	r2, [pc, #48]	@ (8001ad8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001aa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aa8:	e002      	b.n	8001ab0 <LoopCopyDataInit>

08001aaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aae:	3304      	adds	r3, #4

08001ab0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ab0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ab2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ab4:	d3f9      	bcc.n	8001aaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ab6:	4a09      	ldr	r2, [pc, #36]	@ (8001adc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001ab8:	4c09      	ldr	r4, [pc, #36]	@ (8001ae0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001aba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001abc:	e001      	b.n	8001ac2 <LoopFillZerobss>

08001abe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001abe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ac0:	3204      	adds	r2, #4

08001ac2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ac2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ac4:	d3fb      	bcc.n	8001abe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ac6:	f005 ffc5 	bl	8007a54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001aca:	f7fe fc6f 	bl	80003ac <main>
  bx lr
 8001ace:	4770      	bx	lr
  ldr r0, =_sdata
 8001ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ad4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001ad8:	08008358 	.word	0x08008358
  ldr r2, =_sbss
 8001adc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001ae0:	200015e0 	.word	0x200015e0

08001ae4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ae4:	e7fe      	b.n	8001ae4 <ADC1_2_IRQHandler>
	...

08001ae8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aec:	4b08      	ldr	r3, [pc, #32]	@ (8001b10 <HAL_Init+0x28>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a07      	ldr	r2, [pc, #28]	@ (8001b10 <HAL_Init+0x28>)
 8001af2:	f043 0310 	orr.w	r3, r3, #16
 8001af6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001af8:	2003      	movs	r0, #3
 8001afa:	f001 fb71 	bl	80031e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001afe:	200f      	movs	r0, #15
 8001b00:	f7ff fe96 	bl	8001830 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b04:	f7ff fcb4 	bl	8001470 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40022000 	.word	0x40022000

08001b14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b18:	4b05      	ldr	r3, [pc, #20]	@ (8001b30 <HAL_IncTick+0x1c>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	4b05      	ldr	r3, [pc, #20]	@ (8001b34 <HAL_IncTick+0x20>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4413      	add	r3, r2
 8001b24:	4a03      	ldr	r2, [pc, #12]	@ (8001b34 <HAL_IncTick+0x20>)
 8001b26:	6013      	str	r3, [r2, #0]
}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr
 8001b30:	20000008 	.word	0x20000008
 8001b34:	20000740 	.word	0x20000740

08001b38 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b3c:	4b02      	ldr	r3, [pc, #8]	@ (8001b48 <HAL_GetTick+0x10>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr
 8001b48:	20000740 	.word	0x20000740

08001b4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b54:	f7ff fff0 	bl	8001b38 <HAL_GetTick>
 8001b58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b64:	d005      	beq.n	8001b72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b66:	4b0a      	ldr	r3, [pc, #40]	@ (8001b90 <HAL_Delay+0x44>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	4413      	add	r3, r2
 8001b70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b72:	bf00      	nop
 8001b74:	f7ff ffe0 	bl	8001b38 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	68fa      	ldr	r2, [r7, #12]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d8f7      	bhi.n	8001b74 <HAL_Delay+0x28>
  {
  }
}
 8001b84:	bf00      	nop
 8001b86:	bf00      	nop
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20000008 	.word	0x20000008

08001b94 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d101      	bne.n	8001bb6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e0be      	b.n	8001d34 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d109      	bne.n	8001bd8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7ff fc84 	bl	80014e0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f000 faf5 	bl	80021c8 <ADC_ConversionStop_Disable>
 8001bde:	4603      	mov	r3, r0
 8001be0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001be6:	f003 0310 	and.w	r3, r3, #16
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	f040 8099 	bne.w	8001d22 <HAL_ADC_Init+0x18e>
 8001bf0:	7dfb      	ldrb	r3, [r7, #23]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f040 8095 	bne.w	8001d22 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bfc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001c00:	f023 0302 	bic.w	r3, r3, #2
 8001c04:	f043 0202 	orr.w	r2, r3, #2
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c14:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	7b1b      	ldrb	r3, [r3, #12]
 8001c1a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001c1c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c1e:	68ba      	ldr	r2, [r7, #8]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c2c:	d003      	beq.n	8001c36 <HAL_ADC_Init+0xa2>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d102      	bne.n	8001c3c <HAL_ADC_Init+0xa8>
 8001c36:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c3a:	e000      	b.n	8001c3e <HAL_ADC_Init+0xaa>
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	7d1b      	ldrb	r3, [r3, #20]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d119      	bne.n	8001c80 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	7b1b      	ldrb	r3, [r3, #12]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d109      	bne.n	8001c68 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	035a      	lsls	r2, r3, #13
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c64:	613b      	str	r3, [r7, #16]
 8001c66:	e00b      	b.n	8001c80 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c6c:	f043 0220 	orr.w	r2, r3, #32
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c78:	f043 0201 	orr.w	r2, r3, #1
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	430a      	orrs	r2, r1
 8001c92:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	689a      	ldr	r2, [r3, #8]
 8001c9a:	4b28      	ldr	r3, [pc, #160]	@ (8001d3c <HAL_ADC_Init+0x1a8>)
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	6812      	ldr	r2, [r2, #0]
 8001ca2:	68b9      	ldr	r1, [r7, #8]
 8001ca4:	430b      	orrs	r3, r1
 8001ca6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001cb0:	d003      	beq.n	8001cba <HAL_ADC_Init+0x126>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d104      	bne.n	8001cc4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	051b      	lsls	r3, r3, #20
 8001cc2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cca:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	689a      	ldr	r2, [r3, #8]
 8001cde:	4b18      	ldr	r3, [pc, #96]	@ (8001d40 <HAL_ADC_Init+0x1ac>)
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	68ba      	ldr	r2, [r7, #8]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d10b      	bne.n	8001d00 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cf2:	f023 0303 	bic.w	r3, r3, #3
 8001cf6:	f043 0201 	orr.w	r2, r3, #1
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001cfe:	e018      	b.n	8001d32 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d04:	f023 0312 	bic.w	r3, r3, #18
 8001d08:	f043 0210 	orr.w	r2, r3, #16
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d14:	f043 0201 	orr.w	r2, r3, #1
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d20:	e007      	b.n	8001d32 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d26:	f043 0210 	orr.w	r2, r3, #16
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001d32:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3718      	adds	r7, #24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	ffe1f7fd 	.word	0xffe1f7fd
 8001d40:	ff1f0efe 	.word	0xff1f0efe

08001d44 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d50:	2300      	movs	r3, #0
 8001d52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a64      	ldr	r2, [pc, #400]	@ (8001eec <HAL_ADC_Start_DMA+0x1a8>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d004      	beq.n	8001d68 <HAL_ADC_Start_DMA+0x24>
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a63      	ldr	r2, [pc, #396]	@ (8001ef0 <HAL_ADC_Start_DMA+0x1ac>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d106      	bne.n	8001d76 <HAL_ADC_Start_DMA+0x32>
 8001d68:	4b60      	ldr	r3, [pc, #384]	@ (8001eec <HAL_ADC_Start_DMA+0x1a8>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f040 80b3 	bne.w	8001edc <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d101      	bne.n	8001d84 <HAL_ADC_Start_DMA+0x40>
 8001d80:	2302      	movs	r3, #2
 8001d82:	e0ae      	b.n	8001ee2 <HAL_ADC_Start_DMA+0x19e>
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f000 f9c1 	bl	8002114 <ADC_Enable>
 8001d92:	4603      	mov	r3, r0
 8001d94:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001d96:	7dfb      	ldrb	r3, [r7, #23]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f040 809a 	bne.w	8001ed2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001da2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001da6:	f023 0301 	bic.w	r3, r3, #1
 8001daa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a4e      	ldr	r2, [pc, #312]	@ (8001ef0 <HAL_ADC_Start_DMA+0x1ac>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d105      	bne.n	8001dc8 <HAL_ADC_Start_DMA+0x84>
 8001dbc:	4b4b      	ldr	r3, [pc, #300]	@ (8001eec <HAL_ADC_Start_DMA+0x1a8>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d115      	bne.n	8001df4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dcc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d026      	beq.n	8001e30 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001de6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001dea:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001df2:	e01d      	b.n	8001e30 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001df8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a39      	ldr	r2, [pc, #228]	@ (8001eec <HAL_ADC_Start_DMA+0x1a8>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d004      	beq.n	8001e14 <HAL_ADC_Start_DMA+0xd0>
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a38      	ldr	r2, [pc, #224]	@ (8001ef0 <HAL_ADC_Start_DMA+0x1ac>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d10d      	bne.n	8001e30 <HAL_ADC_Start_DMA+0xec>
 8001e14:	4b35      	ldr	r3, [pc, #212]	@ (8001eec <HAL_ADC_Start_DMA+0x1a8>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d007      	beq.n	8001e30 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e24:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001e28:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d006      	beq.n	8001e4a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e40:	f023 0206 	bic.w	r2, r3, #6
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001e48:	e002      	b.n	8001e50 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
 8001e5c:	4a25      	ldr	r2, [pc, #148]	@ (8001ef4 <HAL_ADC_Start_DMA+0x1b0>)
 8001e5e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	4a24      	ldr	r2, [pc, #144]	@ (8001ef8 <HAL_ADC_Start_DMA+0x1b4>)
 8001e66:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6a1b      	ldr	r3, [r3, #32]
 8001e6c:	4a23      	ldr	r2, [pc, #140]	@ (8001efc <HAL_ADC_Start_DMA+0x1b8>)
 8001e6e:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f06f 0202 	mvn.w	r2, #2
 8001e78:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e88:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6a18      	ldr	r0, [r3, #32]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	334c      	adds	r3, #76	@ 0x4c
 8001e94:	4619      	mov	r1, r3
 8001e96:	68ba      	ldr	r2, [r7, #8]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f001 fa31 	bl	8003300 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001ea8:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001eac:	d108      	bne.n	8001ec0 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	689a      	ldr	r2, [r3, #8]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001ebc:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001ebe:	e00f      	b.n	8001ee0 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	689a      	ldr	r2, [r3, #8]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001ece:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001ed0:	e006      	b.n	8001ee0 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8001eda:	e001      	b.n	8001ee0 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001ee0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3718      	adds	r7, #24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40012400 	.word	0x40012400
 8001ef0:	40012800 	.word	0x40012800
 8001ef4:	0800224b 	.word	0x0800224b
 8001ef8:	080022c7 	.word	0x080022c7
 8001efc:	080022e3 	.word	0x080022e3

08001f00 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bc80      	pop	{r7}
 8001f10:	4770      	bx	lr

08001f12 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b083      	sub	sp, #12
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bc80      	pop	{r7}
 8001f22:	4770      	bx	lr

08001f24 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001f32:	2300      	movs	r3, #0
 8001f34:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d101      	bne.n	8001f44 <HAL_ADC_ConfigChannel+0x20>
 8001f40:	2302      	movs	r3, #2
 8001f42:	e0dc      	b.n	80020fe <HAL_ADC_ConfigChannel+0x1da>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	2b06      	cmp	r3, #6
 8001f52:	d81c      	bhi.n	8001f8e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685a      	ldr	r2, [r3, #4]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	4413      	add	r3, r2
 8001f64:	3b05      	subs	r3, #5
 8001f66:	221f      	movs	r2, #31
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	4019      	ands	r1, r3
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	6818      	ldr	r0, [r3, #0]
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4413      	add	r3, r2
 8001f7e:	3b05      	subs	r3, #5
 8001f80:	fa00 f203 	lsl.w	r2, r0, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f8c:	e03c      	b.n	8002008 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2b0c      	cmp	r3, #12
 8001f94:	d81c      	bhi.n	8001fd0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685a      	ldr	r2, [r3, #4]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4413      	add	r3, r2
 8001fa6:	3b23      	subs	r3, #35	@ 0x23
 8001fa8:	221f      	movs	r2, #31
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	4019      	ands	r1, r3
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	6818      	ldr	r0, [r3, #0]
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4413      	add	r3, r2
 8001fc0:	3b23      	subs	r3, #35	@ 0x23
 8001fc2:	fa00 f203 	lsl.w	r2, r0, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	631a      	str	r2, [r3, #48]	@ 0x30
 8001fce:	e01b      	b.n	8002008 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685a      	ldr	r2, [r3, #4]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	4413      	add	r3, r2
 8001fe0:	3b41      	subs	r3, #65	@ 0x41
 8001fe2:	221f      	movs	r2, #31
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	4019      	ands	r1, r3
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	6818      	ldr	r0, [r3, #0]
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4413      	add	r3, r2
 8001ffa:	3b41      	subs	r3, #65	@ 0x41
 8001ffc:	fa00 f203 	lsl.w	r2, r0, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	430a      	orrs	r2, r1
 8002006:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2b09      	cmp	r3, #9
 800200e:	d91c      	bls.n	800204a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68d9      	ldr	r1, [r3, #12]
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	4613      	mov	r3, r2
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	4413      	add	r3, r2
 8002020:	3b1e      	subs	r3, #30
 8002022:	2207      	movs	r2, #7
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	43db      	mvns	r3, r3
 800202a:	4019      	ands	r1, r3
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	6898      	ldr	r0, [r3, #8]
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	4613      	mov	r3, r2
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	4413      	add	r3, r2
 800203a:	3b1e      	subs	r3, #30
 800203c:	fa00 f203 	lsl.w	r2, r0, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	430a      	orrs	r2, r1
 8002046:	60da      	str	r2, [r3, #12]
 8002048:	e019      	b.n	800207e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6919      	ldr	r1, [r3, #16]
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	4613      	mov	r3, r2
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	4413      	add	r3, r2
 800205a:	2207      	movs	r2, #7
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	4019      	ands	r1, r3
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	6898      	ldr	r0, [r3, #8]
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	4613      	mov	r3, r2
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	4413      	add	r3, r2
 8002072:	fa00 f203 	lsl.w	r2, r0, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	430a      	orrs	r2, r1
 800207c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2b10      	cmp	r3, #16
 8002084:	d003      	beq.n	800208e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800208a:	2b11      	cmp	r3, #17
 800208c:	d132      	bne.n	80020f4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a1d      	ldr	r2, [pc, #116]	@ (8002108 <HAL_ADC_ConfigChannel+0x1e4>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d125      	bne.n	80020e4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d126      	bne.n	80020f4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	689a      	ldr	r2, [r3, #8]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80020b4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2b10      	cmp	r3, #16
 80020bc:	d11a      	bne.n	80020f4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020be:	4b13      	ldr	r3, [pc, #76]	@ (800210c <HAL_ADC_ConfigChannel+0x1e8>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a13      	ldr	r2, [pc, #76]	@ (8002110 <HAL_ADC_ConfigChannel+0x1ec>)
 80020c4:	fba2 2303 	umull	r2, r3, r2, r3
 80020c8:	0c9a      	lsrs	r2, r3, #18
 80020ca:	4613      	mov	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	4413      	add	r3, r2
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80020d4:	e002      	b.n	80020dc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	3b01      	subs	r3, #1
 80020da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1f9      	bne.n	80020d6 <HAL_ADC_ConfigChannel+0x1b2>
 80020e2:	e007      	b.n	80020f4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e8:	f043 0220 	orr.w	r2, r3, #32
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80020fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3714      	adds	r7, #20
 8002102:	46bd      	mov	sp, r7
 8002104:	bc80      	pop	{r7}
 8002106:	4770      	bx	lr
 8002108:	40012400 	.word	0x40012400
 800210c:	20000000 	.word	0x20000000
 8002110:	431bde83 	.word	0x431bde83

08002114 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800211c:	2300      	movs	r3, #0
 800211e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002120:	2300      	movs	r3, #0
 8002122:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b01      	cmp	r3, #1
 8002130:	d040      	beq.n	80021b4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f042 0201 	orr.w	r2, r2, #1
 8002140:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002142:	4b1f      	ldr	r3, [pc, #124]	@ (80021c0 <ADC_Enable+0xac>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a1f      	ldr	r2, [pc, #124]	@ (80021c4 <ADC_Enable+0xb0>)
 8002148:	fba2 2303 	umull	r2, r3, r2, r3
 800214c:	0c9b      	lsrs	r3, r3, #18
 800214e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002150:	e002      	b.n	8002158 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	3b01      	subs	r3, #1
 8002156:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d1f9      	bne.n	8002152 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800215e:	f7ff fceb 	bl	8001b38 <HAL_GetTick>
 8002162:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002164:	e01f      	b.n	80021a6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002166:	f7ff fce7 	bl	8001b38 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d918      	bls.n	80021a6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b01      	cmp	r3, #1
 8002180:	d011      	beq.n	80021a6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002186:	f043 0210 	orr.w	r2, r3, #16
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002192:	f043 0201 	orr.w	r2, r3, #1
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e007      	b.n	80021b6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f003 0301 	and.w	r3, r3, #1
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d1d8      	bne.n	8002166 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	20000000 	.word	0x20000000
 80021c4:	431bde83 	.word	0x431bde83

080021c8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021d0:	2300      	movs	r3, #0
 80021d2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d12e      	bne.n	8002240 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	689a      	ldr	r2, [r3, #8]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f022 0201 	bic.w	r2, r2, #1
 80021f0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80021f2:	f7ff fca1 	bl	8001b38 <HAL_GetTick>
 80021f6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80021f8:	e01b      	b.n	8002232 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80021fa:	f7ff fc9d 	bl	8001b38 <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	2b02      	cmp	r3, #2
 8002206:	d914      	bls.n	8002232 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b01      	cmp	r3, #1
 8002214:	d10d      	bne.n	8002232 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800221a:	f043 0210 	orr.w	r2, r3, #16
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002226:	f043 0201 	orr.w	r2, r3, #1
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e007      	b.n	8002242 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f003 0301 	and.w	r3, r3, #1
 800223c:	2b01      	cmp	r3, #1
 800223e:	d0dc      	beq.n	80021fa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b084      	sub	sp, #16
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002256:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800225c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002260:	2b00      	cmp	r3, #0
 8002262:	d127      	bne.n	80022b4 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002268:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800227a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800227e:	d115      	bne.n	80022ac <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002284:	2b00      	cmp	r3, #0
 8002286:	d111      	bne.n	80022ac <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800228c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002298:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d105      	bne.n	80022ac <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022a4:	f043 0201 	orr.w	r2, r3, #1
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	f7fe fdd1 	bl	8000e54 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80022b2:	e004      	b.n	80022be <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	4798      	blx	r3
}
 80022be:	bf00      	nop
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b084      	sub	sp, #16
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80022d4:	68f8      	ldr	r0, [r7, #12]
 80022d6:	f7ff fe13 	bl	8001f00 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022da:	bf00      	nop
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b084      	sub	sp, #16
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ee:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022f4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002300:	f043 0204 	orr.w	r2, r3, #4
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002308:	68f8      	ldr	r0, [r7, #12]
 800230a:	f7ff fe02 	bl	8001f12 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800230e:	bf00      	nop
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b084      	sub	sp, #16
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d101      	bne.n	8002328 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e0ed      	b.n	8002504 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800232e:	b2db      	uxtb	r3, r3
 8002330:	2b00      	cmp	r3, #0
 8002332:	d102      	bne.n	800233a <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f7ff f93d 	bl	80015b4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f042 0201 	orr.w	r2, r2, #1
 8002348:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800234a:	f7ff fbf5 	bl	8001b38 <HAL_GetTick>
 800234e:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002350:	e012      	b.n	8002378 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002352:	f7ff fbf1 	bl	8001b38 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b0a      	cmp	r3, #10
 800235e:	d90b      	bls.n	8002378 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002364:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2205      	movs	r2, #5
 8002370:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e0c5      	b.n	8002504 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	2b00      	cmp	r3, #0
 8002384:	d0e5      	beq.n	8002352 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f022 0202 	bic.w	r2, r2, #2
 8002394:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002396:	f7ff fbcf 	bl	8001b38 <HAL_GetTick>
 800239a:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800239c:	e012      	b.n	80023c4 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800239e:	f7ff fbcb 	bl	8001b38 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b0a      	cmp	r3, #10
 80023aa:	d90b      	bls.n	80023c4 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2205      	movs	r2, #5
 80023bc:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e09f      	b.n	8002504 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1e5      	bne.n	800239e <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	7e1b      	ldrb	r3, [r3, #24]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d108      	bne.n	80023ec <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	e007      	b.n	80023fc <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80023fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	7e5b      	ldrb	r3, [r3, #25]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d108      	bne.n	8002416 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	e007      	b.n	8002426 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002424:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	7e9b      	ldrb	r3, [r3, #26]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d108      	bne.n	8002440 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f042 0220 	orr.w	r2, r2, #32
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	e007      	b.n	8002450 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f022 0220 	bic.w	r2, r2, #32
 800244e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	7edb      	ldrb	r3, [r3, #27]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d108      	bne.n	800246a <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f022 0210 	bic.w	r2, r2, #16
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	e007      	b.n	800247a <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f042 0210 	orr.w	r2, r2, #16
 8002478:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	7f1b      	ldrb	r3, [r3, #28]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d108      	bne.n	8002494 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f042 0208 	orr.w	r2, r2, #8
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	e007      	b.n	80024a4 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f022 0208 	bic.w	r2, r2, #8
 80024a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	7f5b      	ldrb	r3, [r3, #29]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d108      	bne.n	80024be <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f042 0204 	orr.w	r2, r2, #4
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	e007      	b.n	80024ce <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f022 0204 	bic.w	r2, r2, #4
 80024cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	689a      	ldr	r2, [r3, #8]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	431a      	orrs	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	431a      	orrs	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	ea42 0103 	orr.w	r1, r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	1e5a      	subs	r2, r3, #1
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	430a      	orrs	r2, r1
 80024f2:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	3710      	adds	r7, #16
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800250c:	b480      	push	{r7}
 800250e:	b087      	sub	sp, #28
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002522:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002524:	7cfb      	ldrb	r3, [r7, #19]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d003      	beq.n	8002532 <HAL_CAN_ConfigFilter+0x26>
 800252a:	7cfb      	ldrb	r3, [r7, #19]
 800252c:	2b02      	cmp	r3, #2
 800252e:	f040 80aa 	bne.w	8002686 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002538:	f043 0201 	orr.w	r2, r3, #1
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	f003 031f 	and.w	r3, r3, #31
 800254a:	2201      	movs	r2, #1
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	43db      	mvns	r3, r3
 800255c:	401a      	ands	r2, r3
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	69db      	ldr	r3, [r3, #28]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d123      	bne.n	80025b4 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	43db      	mvns	r3, r3
 8002576:	401a      	ands	r2, r3
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800258a:	683a      	ldr	r2, [r7, #0]
 800258c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800258e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	3248      	adds	r2, #72	@ 0x48
 8002594:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80025a8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80025aa:	6979      	ldr	r1, [r7, #20]
 80025ac:	3348      	adds	r3, #72	@ 0x48
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	440b      	add	r3, r1
 80025b2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	69db      	ldr	r3, [r3, #28]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d122      	bne.n	8002602 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	431a      	orrs	r2, r3
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80025dc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	3248      	adds	r2, #72	@ 0x48
 80025e2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80025f6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80025f8:	6979      	ldr	r1, [r7, #20]
 80025fa:	3348      	adds	r3, #72	@ 0x48
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	440b      	add	r3, r1
 8002600:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d109      	bne.n	800261e <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	43db      	mvns	r3, r3
 8002614:	401a      	ands	r2, r3
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800261c:	e007      	b.n	800262e <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	431a      	orrs	r2, r3
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d109      	bne.n	800264a <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	43db      	mvns	r3, r3
 8002640:	401a      	ands	r2, r3
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002648:	e007      	b.n	800265a <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	431a      	orrs	r2, r3
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d107      	bne.n	8002672 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	431a      	orrs	r2, r3
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002678:	f023 0201 	bic.w	r2, r3, #1
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002682:	2300      	movs	r3, #0
 8002684:	e006      	b.n	8002694 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800268a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
  }
}
 8002694:	4618      	mov	r0, r3
 8002696:	371c      	adds	r7, #28
 8002698:	46bd      	mov	sp, r7
 800269a:	bc80      	pop	{r7}
 800269c:	4770      	bx	lr

0800269e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b084      	sub	sp, #16
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d12e      	bne.n	8002710 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2202      	movs	r2, #2
 80026b6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f022 0201 	bic.w	r2, r2, #1
 80026c8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80026ca:	f7ff fa35 	bl	8001b38 <HAL_GetTick>
 80026ce:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80026d0:	e012      	b.n	80026f8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80026d2:	f7ff fa31 	bl	8001b38 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b0a      	cmp	r3, #10
 80026de:	d90b      	bls.n	80026f8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2205      	movs	r2, #5
 80026f0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e012      	b.n	800271e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1e5      	bne.n	80026d2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800270c:	2300      	movs	r3, #0
 800270e:	e006      	b.n	800271e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002714:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
  }
}
 800271e:	4618      	mov	r0, r3
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8002726:	b580      	push	{r7, lr}
 8002728:	b084      	sub	sp, #16
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d133      	bne.n	80027a2 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f042 0201 	orr.w	r2, r2, #1
 8002748:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800274a:	f7ff f9f5 	bl	8001b38 <HAL_GetTick>
 800274e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002750:	e012      	b.n	8002778 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002752:	f7ff f9f1 	bl	8001b38 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b0a      	cmp	r3, #10
 800275e:	d90b      	bls.n	8002778 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002764:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2205      	movs	r2, #5
 8002770:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e01b      	b.n	80027b0 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b00      	cmp	r3, #0
 8002784:	d0e5      	beq.n	8002752 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 0202 	bic.w	r2, r2, #2
 8002794:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2201      	movs	r2, #1
 800279a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 800279e:	2300      	movs	r3, #0
 80027a0:	e006      	b.n	80027b0 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
  }
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3710      	adds	r7, #16
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b089      	sub	sp, #36	@ 0x24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
 80027c4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027cc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80027d6:	7ffb      	ldrb	r3, [r7, #31]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d003      	beq.n	80027e4 <HAL_CAN_AddTxMessage+0x2c>
 80027dc:	7ffb      	ldrb	r3, [r7, #31]
 80027de:	2b02      	cmp	r3, #2
 80027e0:	f040 80ad 	bne.w	800293e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d10a      	bne.n	8002804 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d105      	bne.n	8002804 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80027fe:	2b00      	cmp	r3, #0
 8002800:	f000 8095 	beq.w	800292e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	0e1b      	lsrs	r3, r3, #24
 8002808:	f003 0303 	and.w	r3, r3, #3
 800280c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800280e:	2201      	movs	r2, #1
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	409a      	lsls	r2, r3
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d10d      	bne.n	800283c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800282a:	68f9      	ldr	r1, [r7, #12]
 800282c:	6809      	ldr	r1, [r1, #0]
 800282e:	431a      	orrs	r2, r3
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	3318      	adds	r3, #24
 8002834:	011b      	lsls	r3, r3, #4
 8002836:	440b      	add	r3, r1
 8002838:	601a      	str	r2, [r3, #0]
 800283a:	e00f      	b.n	800285c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002846:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800284c:	68f9      	ldr	r1, [r7, #12]
 800284e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002850:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	3318      	adds	r3, #24
 8002856:	011b      	lsls	r3, r3, #4
 8002858:	440b      	add	r3, r1
 800285a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6819      	ldr	r1, [r3, #0]
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	691a      	ldr	r2, [r3, #16]
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	3318      	adds	r3, #24
 8002868:	011b      	lsls	r3, r3, #4
 800286a:	440b      	add	r3, r1
 800286c:	3304      	adds	r3, #4
 800286e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	7d1b      	ldrb	r3, [r3, #20]
 8002874:	2b01      	cmp	r3, #1
 8002876:	d111      	bne.n	800289c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	3318      	adds	r3, #24
 8002880:	011b      	lsls	r3, r3, #4
 8002882:	4413      	add	r3, r2
 8002884:	3304      	adds	r3, #4
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	6811      	ldr	r1, [r2, #0]
 800288c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	3318      	adds	r3, #24
 8002894:	011b      	lsls	r3, r3, #4
 8002896:	440b      	add	r3, r1
 8002898:	3304      	adds	r3, #4
 800289a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3307      	adds	r3, #7
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	061a      	lsls	r2, r3, #24
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	3306      	adds	r3, #6
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	041b      	lsls	r3, r3, #16
 80028ac:	431a      	orrs	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	3305      	adds	r3, #5
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	021b      	lsls	r3, r3, #8
 80028b6:	4313      	orrs	r3, r2
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	3204      	adds	r2, #4
 80028bc:	7812      	ldrb	r2, [r2, #0]
 80028be:	4610      	mov	r0, r2
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	6811      	ldr	r1, [r2, #0]
 80028c4:	ea43 0200 	orr.w	r2, r3, r0
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	011b      	lsls	r3, r3, #4
 80028cc:	440b      	add	r3, r1
 80028ce:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80028d2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	3303      	adds	r3, #3
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	061a      	lsls	r2, r3, #24
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	3302      	adds	r3, #2
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	041b      	lsls	r3, r3, #16
 80028e4:	431a      	orrs	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	3301      	adds	r3, #1
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	021b      	lsls	r3, r3, #8
 80028ee:	4313      	orrs	r3, r2
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	7812      	ldrb	r2, [r2, #0]
 80028f4:	4610      	mov	r0, r2
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	6811      	ldr	r1, [r2, #0]
 80028fa:	ea43 0200 	orr.w	r2, r3, r0
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	011b      	lsls	r3, r3, #4
 8002902:	440b      	add	r3, r1
 8002904:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002908:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	3318      	adds	r3, #24
 8002912:	011b      	lsls	r3, r3, #4
 8002914:	4413      	add	r3, r2
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	6811      	ldr	r1, [r2, #0]
 800291c:	f043 0201 	orr.w	r2, r3, #1
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	3318      	adds	r3, #24
 8002924:	011b      	lsls	r3, r3, #4
 8002926:	440b      	add	r3, r1
 8002928:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800292a:	2300      	movs	r3, #0
 800292c:	e00e      	b.n	800294c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002932:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e006      	b.n	800294c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002942:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
  }
}
 800294c:	4618      	mov	r0, r3
 800294e:	3724      	adds	r7, #36	@ 0x24
 8002950:	46bd      	mov	sp, r7
 8002952:	bc80      	pop	{r7}
 8002954:	4770      	bx	lr

08002956 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002956:	b480      	push	{r7}
 8002958:	b087      	sub	sp, #28
 800295a:	af00      	add	r7, sp, #0
 800295c:	60f8      	str	r0, [r7, #12]
 800295e:	60b9      	str	r1, [r7, #8]
 8002960:	607a      	str	r2, [r7, #4]
 8002962:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f893 3020 	ldrb.w	r3, [r3, #32]
 800296a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800296c:	7dfb      	ldrb	r3, [r7, #23]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d003      	beq.n	800297a <HAL_CAN_GetRxMessage+0x24>
 8002972:	7dfb      	ldrb	r3, [r7, #23]
 8002974:	2b02      	cmp	r3, #2
 8002976:	f040 8103 	bne.w	8002b80 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d10e      	bne.n	800299e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	f003 0303 	and.w	r3, r3, #3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d116      	bne.n	80029bc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002992:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e0f7      	b.n	8002b8e <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	f003 0303 	and.w	r3, r3, #3
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d107      	bne.n	80029bc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e0e8      	b.n	8002b8e <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	331b      	adds	r3, #27
 80029c4:	011b      	lsls	r3, r3, #4
 80029c6:	4413      	add	r3, r2
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0204 	and.w	r2, r3, #4
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d10c      	bne.n	80029f4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	331b      	adds	r3, #27
 80029e2:	011b      	lsls	r3, r3, #4
 80029e4:	4413      	add	r3, r2
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	0d5b      	lsrs	r3, r3, #21
 80029ea:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	e00b      	b.n	8002a0c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	331b      	adds	r3, #27
 80029fc:	011b      	lsls	r3, r3, #4
 80029fe:	4413      	add	r3, r2
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	08db      	lsrs	r3, r3, #3
 8002a04:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	331b      	adds	r3, #27
 8002a14:	011b      	lsls	r3, r3, #4
 8002a16:	4413      	add	r3, r2
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0202 	and.w	r2, r3, #2
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	331b      	adds	r3, #27
 8002a2a:	011b      	lsls	r3, r3, #4
 8002a2c:	4413      	add	r3, r2
 8002a2e:	3304      	adds	r3, #4
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0308 	and.w	r3, r3, #8
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2208      	movs	r2, #8
 8002a3e:	611a      	str	r2, [r3, #16]
 8002a40:	e00b      	b.n	8002a5a <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	331b      	adds	r3, #27
 8002a4a:	011b      	lsls	r3, r3, #4
 8002a4c:	4413      	add	r3, r2
 8002a4e:	3304      	adds	r3, #4
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 020f 	and.w	r2, r3, #15
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	331b      	adds	r3, #27
 8002a62:	011b      	lsls	r3, r3, #4
 8002a64:	4413      	add	r3, r2
 8002a66:	3304      	adds	r3, #4
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	0a1b      	lsrs	r3, r3, #8
 8002a6c:	b2da      	uxtb	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	331b      	adds	r3, #27
 8002a7a:	011b      	lsls	r3, r3, #4
 8002a7c:	4413      	add	r3, r2
 8002a7e:	3304      	adds	r3, #4
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	0c1b      	lsrs	r3, r3, #16
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	011b      	lsls	r3, r3, #4
 8002a92:	4413      	add	r3, r2
 8002a94:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	b2da      	uxtb	r2, r3
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	011b      	lsls	r3, r3, #4
 8002aa8:	4413      	add	r3, r2
 8002aaa:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	0a1a      	lsrs	r2, r3, #8
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	b2d2      	uxtb	r2, r2
 8002ab8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	011b      	lsls	r3, r3, #4
 8002ac2:	4413      	add	r3, r2
 8002ac4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	0c1a      	lsrs	r2, r3, #16
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	3302      	adds	r3, #2
 8002ad0:	b2d2      	uxtb	r2, r2
 8002ad2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	011b      	lsls	r3, r3, #4
 8002adc:	4413      	add	r3, r2
 8002ade:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	0e1a      	lsrs	r2, r3, #24
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	3303      	adds	r3, #3
 8002aea:	b2d2      	uxtb	r2, r2
 8002aec:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	011b      	lsls	r3, r3, #4
 8002af6:	4413      	add	r3, r2
 8002af8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	3304      	adds	r3, #4
 8002b02:	b2d2      	uxtb	r2, r2
 8002b04:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	011b      	lsls	r3, r3, #4
 8002b0e:	4413      	add	r3, r2
 8002b10:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	0a1a      	lsrs	r2, r3, #8
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	3305      	adds	r3, #5
 8002b1c:	b2d2      	uxtb	r2, r2
 8002b1e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	011b      	lsls	r3, r3, #4
 8002b28:	4413      	add	r3, r2
 8002b2a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	0c1a      	lsrs	r2, r3, #16
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	3306      	adds	r3, #6
 8002b36:	b2d2      	uxtb	r2, r2
 8002b38:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	011b      	lsls	r3, r3, #4
 8002b42:	4413      	add	r3, r2
 8002b44:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	0e1a      	lsrs	r2, r3, #24
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	3307      	adds	r3, #7
 8002b50:	b2d2      	uxtb	r2, r2
 8002b52:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d108      	bne.n	8002b6c <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68da      	ldr	r2, [r3, #12]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f042 0220 	orr.w	r2, r2, #32
 8002b68:	60da      	str	r2, [r3, #12]
 8002b6a:	e007      	b.n	8002b7c <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	691a      	ldr	r2, [r3, #16]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f042 0220 	orr.w	r2, r2, #32
 8002b7a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	e006      	b.n	8002b8e <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b84:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
  }
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	371c      	adds	r7, #28
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr

08002b98 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bac:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002bae:	7afb      	ldrb	r3, [r7, #11]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d002      	beq.n	8002bba <HAL_CAN_GetRxFifoFillLevel+0x22>
 8002bb4:	7afb      	ldrb	r3, [r7, #11]
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d10f      	bne.n	8002bda <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d106      	bne.n	8002bce <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	f003 0303 	and.w	r3, r3, #3
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	e005      	b.n	8002bda <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	f003 0303 	and.w	r3, r3, #3
 8002bd8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8002bda:	68fb      	ldr	r3, [r7, #12]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3714      	adds	r7, #20
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bc80      	pop	{r7}
 8002be4:	4770      	bx	lr

08002be6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b085      	sub	sp, #20
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
 8002bee:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bf6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002bf8:	7bfb      	ldrb	r3, [r7, #15]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d002      	beq.n	8002c04 <HAL_CAN_ActivateNotification+0x1e>
 8002bfe:	7bfb      	ldrb	r3, [r7, #15]
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d109      	bne.n	8002c18 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6959      	ldr	r1, [r3, #20]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	430a      	orrs	r2, r1
 8002c12:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002c14:	2300      	movs	r3, #0
 8002c16:	e006      	b.n	8002c26 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
  }
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3714      	adds	r7, #20
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bc80      	pop	{r7}
 8002c2e:	4770      	bx	lr

08002c30 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b08a      	sub	sp, #40	@ 0x28
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002c6c:	6a3b      	ldr	r3, [r7, #32]
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d07c      	beq.n	8002d70 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	f003 0301 	and.w	r3, r3, #1
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d023      	beq.n	8002cc8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2201      	movs	r2, #1
 8002c86:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d003      	beq.n	8002c9a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 f983 	bl	8002f9e <HAL_CAN_TxMailbox0CompleteCallback>
 8002c98:	e016      	b.n	8002cc8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d004      	beq.n	8002cae <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002caa:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cac:	e00c      	b.n	8002cc8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	f003 0308 	and.w	r3, r3, #8
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d004      	beq.n	8002cc2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cba:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002cbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cc0:	e002      	b.n	8002cc8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 f986 	bl	8002fd4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d024      	beq.n	8002d1c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002cda:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 f962 	bl	8002fb0 <HAL_CAN_TxMailbox1CompleteCallback>
 8002cec:	e016      	b.n	8002d1c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d004      	beq.n	8002d02 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002cfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d00:	e00c      	b.n	8002d1c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d004      	beq.n	8002d16 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d12:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d14:	e002      	b.n	8002d1c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 f965 	bl	8002fe6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d024      	beq.n	8002d70 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002d2e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 f941 	bl	8002fc2 <HAL_CAN_TxMailbox2CompleteCallback>
 8002d40:	e016      	b.n	8002d70 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d004      	beq.n	8002d56 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d52:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d54:	e00c      	b.n	8002d70 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d004      	beq.n	8002d6a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d66:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d68:	e002      	b.n	8002d70 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 f944 	bl	8002ff8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002d70:	6a3b      	ldr	r3, [r7, #32]
 8002d72:	f003 0308 	and.w	r3, r3, #8
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00c      	beq.n	8002d94 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	f003 0310 	and.w	r3, r3, #16
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d007      	beq.n	8002d94 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d8a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2210      	movs	r2, #16
 8002d92:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002d94:	6a3b      	ldr	r3, [r7, #32]
 8002d96:	f003 0304 	and.w	r3, r3, #4
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00b      	beq.n	8002db6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	f003 0308 	and.w	r3, r3, #8
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d006      	beq.n	8002db6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2208      	movs	r2, #8
 8002dae:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 f933 	bl	800301c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002db6:	6a3b      	ldr	r3, [r7, #32]
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d009      	beq.n	8002dd4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	f003 0303 	and.w	r3, r3, #3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d002      	beq.n	8002dd4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 f91b 	bl	800300a <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002dd4:	6a3b      	ldr	r3, [r7, #32]
 8002dd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00c      	beq.n	8002df8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	f003 0310 	and.w	r3, r3, #16
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d007      	beq.n	8002df8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002dee:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2210      	movs	r2, #16
 8002df6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002df8:	6a3b      	ldr	r3, [r7, #32]
 8002dfa:	f003 0320 	and.w	r3, r3, #32
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00b      	beq.n	8002e1a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	f003 0308 	and.w	r3, r3, #8
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d006      	beq.n	8002e1a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2208      	movs	r2, #8
 8002e12:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 f90a 	bl	800302e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002e1a:	6a3b      	ldr	r3, [r7, #32]
 8002e1c:	f003 0310 	and.w	r3, r3, #16
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d009      	beq.n	8002e38 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	f003 0303 	and.w	r3, r3, #3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d002      	beq.n	8002e38 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f7fe f914 	bl	8001060 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002e38:	6a3b      	ldr	r3, [r7, #32]
 8002e3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00b      	beq.n	8002e5a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	f003 0310 	and.w	r3, r3, #16
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d006      	beq.n	8002e5a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2210      	movs	r2, #16
 8002e52:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 f8f3 	bl	8003040 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002e5a:	6a3b      	ldr	r3, [r7, #32]
 8002e5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00b      	beq.n	8002e7c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	f003 0308 	and.w	r3, r3, #8
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d006      	beq.n	8002e7c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2208      	movs	r2, #8
 8002e74:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 f8eb 	bl	8003052 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002e7c:	6a3b      	ldr	r3, [r7, #32]
 8002e7e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d07b      	beq.n	8002f7e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	f003 0304 	and.w	r3, r3, #4
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d072      	beq.n	8002f76 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002e90:	6a3b      	ldr	r3, [r7, #32]
 8002e92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d008      	beq.n	8002eac <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d003      	beq.n	8002eac <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea6:	f043 0301 	orr.w	r3, r3, #1
 8002eaa:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002eac:	6a3b      	ldr	r3, [r7, #32]
 8002eae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d008      	beq.n	8002ec8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d003      	beq.n	8002ec8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec2:	f043 0302 	orr.w	r3, r3, #2
 8002ec6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002ec8:	6a3b      	ldr	r3, [r7, #32]
 8002eca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d008      	beq.n	8002ee4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d003      	beq.n	8002ee4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ede:	f043 0304 	orr.w	r3, r3, #4
 8002ee2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002ee4:	6a3b      	ldr	r3, [r7, #32]
 8002ee6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d043      	beq.n	8002f76 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d03e      	beq.n	8002f76 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002efe:	2b60      	cmp	r3, #96	@ 0x60
 8002f00:	d02b      	beq.n	8002f5a <HAL_CAN_IRQHandler+0x32a>
 8002f02:	2b60      	cmp	r3, #96	@ 0x60
 8002f04:	d82e      	bhi.n	8002f64 <HAL_CAN_IRQHandler+0x334>
 8002f06:	2b50      	cmp	r3, #80	@ 0x50
 8002f08:	d022      	beq.n	8002f50 <HAL_CAN_IRQHandler+0x320>
 8002f0a:	2b50      	cmp	r3, #80	@ 0x50
 8002f0c:	d82a      	bhi.n	8002f64 <HAL_CAN_IRQHandler+0x334>
 8002f0e:	2b40      	cmp	r3, #64	@ 0x40
 8002f10:	d019      	beq.n	8002f46 <HAL_CAN_IRQHandler+0x316>
 8002f12:	2b40      	cmp	r3, #64	@ 0x40
 8002f14:	d826      	bhi.n	8002f64 <HAL_CAN_IRQHandler+0x334>
 8002f16:	2b30      	cmp	r3, #48	@ 0x30
 8002f18:	d010      	beq.n	8002f3c <HAL_CAN_IRQHandler+0x30c>
 8002f1a:	2b30      	cmp	r3, #48	@ 0x30
 8002f1c:	d822      	bhi.n	8002f64 <HAL_CAN_IRQHandler+0x334>
 8002f1e:	2b10      	cmp	r3, #16
 8002f20:	d002      	beq.n	8002f28 <HAL_CAN_IRQHandler+0x2f8>
 8002f22:	2b20      	cmp	r3, #32
 8002f24:	d005      	beq.n	8002f32 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002f26:	e01d      	b.n	8002f64 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f2a:	f043 0308 	orr.w	r3, r3, #8
 8002f2e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002f30:	e019      	b.n	8002f66 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f34:	f043 0310 	orr.w	r3, r3, #16
 8002f38:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002f3a:	e014      	b.n	8002f66 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f3e:	f043 0320 	orr.w	r3, r3, #32
 8002f42:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002f44:	e00f      	b.n	8002f66 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f4c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002f4e:	e00a      	b.n	8002f66 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f56:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002f58:	e005      	b.n	8002f66 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f60:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002f62:	e000      	b.n	8002f66 <HAL_CAN_IRQHandler+0x336>
            break;
 8002f64:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	699a      	ldr	r2, [r3, #24]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002f74:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2204      	movs	r2, #4
 8002f7c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d008      	beq.n	8002f96 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 f867 	bl	8003064 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002f96:	bf00      	nop
 8002f98:	3728      	adds	r7, #40	@ 0x28
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	b083      	sub	sp, #12
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002fa6:	bf00      	nop
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bc80      	pop	{r7}
 8002fae:	4770      	bx	lr

08002fb0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bc80      	pop	{r7}
 8002fc0:	4770      	bx	lr

08002fc2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	b083      	sub	sp, #12
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002fca:	bf00      	nop
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bc80      	pop	{r7}
 8002fd2:	4770      	bx	lr

08002fd4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bc80      	pop	{r7}
 8002fe4:	4770      	bx	lr

08002fe6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	b083      	sub	sp, #12
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002fee:	bf00      	nop
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bc80      	pop	{r7}
 8002ff6:	4770      	bx	lr

08002ff8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	bc80      	pop	{r7}
 8003008:	4770      	bx	lr

0800300a <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800300a:	b480      	push	{r7}
 800300c:	b083      	sub	sp, #12
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8003012:	bf00      	nop
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	bc80      	pop	{r7}
 800301a:	4770      	bx	lr

0800301c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003024:	bf00      	nop
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	bc80      	pop	{r7}
 800302c:	4770      	bx	lr

0800302e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800302e:	b480      	push	{r7}
 8003030:	b083      	sub	sp, #12
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003036:	bf00      	nop
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	bc80      	pop	{r7}
 800303e:	4770      	bx	lr

08003040 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	bc80      	pop	{r7}
 8003050:	4770      	bx	lr

08003052 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003052:	b480      	push	{r7}
 8003054:	b083      	sub	sp, #12
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800305a:	bf00      	nop
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	bc80      	pop	{r7}
 8003062:	4770      	bx	lr

08003064 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	bc80      	pop	{r7}
 8003074:	4770      	bx	lr

08003076 <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
 8003076:	b480      	push	{r7}
 8003078:	b083      	sub	sp, #12
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8003082:	4618      	mov	r0, r3
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	bc80      	pop	{r7}
 800308a:	4770      	bx	lr

0800308c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f003 0307 	and.w	r3, r3, #7
 800309a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800309c:	4b0c      	ldr	r3, [pc, #48]	@ (80030d0 <__NVIC_SetPriorityGrouping+0x44>)
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030a2:	68ba      	ldr	r2, [r7, #8]
 80030a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80030a8:	4013      	ands	r3, r2
 80030aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80030b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030be:	4a04      	ldr	r2, [pc, #16]	@ (80030d0 <__NVIC_SetPriorityGrouping+0x44>)
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	60d3      	str	r3, [r2, #12]
}
 80030c4:	bf00      	nop
 80030c6:	3714      	adds	r7, #20
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bc80      	pop	{r7}
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	e000ed00 	.word	0xe000ed00

080030d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030d8:	4b04      	ldr	r3, [pc, #16]	@ (80030ec <__NVIC_GetPriorityGrouping+0x18>)
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	0a1b      	lsrs	r3, r3, #8
 80030de:	f003 0307 	and.w	r3, r3, #7
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bc80      	pop	{r7}
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	e000ed00 	.word	0xe000ed00

080030f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	4603      	mov	r3, r0
 80030f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	db0b      	blt.n	800311a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003102:	79fb      	ldrb	r3, [r7, #7]
 8003104:	f003 021f 	and.w	r2, r3, #31
 8003108:	4906      	ldr	r1, [pc, #24]	@ (8003124 <__NVIC_EnableIRQ+0x34>)
 800310a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800310e:	095b      	lsrs	r3, r3, #5
 8003110:	2001      	movs	r0, #1
 8003112:	fa00 f202 	lsl.w	r2, r0, r2
 8003116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800311a:	bf00      	nop
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	bc80      	pop	{r7}
 8003122:	4770      	bx	lr
 8003124:	e000e100 	.word	0xe000e100

08003128 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	4603      	mov	r3, r0
 8003130:	6039      	str	r1, [r7, #0]
 8003132:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003138:	2b00      	cmp	r3, #0
 800313a:	db0a      	blt.n	8003152 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	b2da      	uxtb	r2, r3
 8003140:	490c      	ldr	r1, [pc, #48]	@ (8003174 <__NVIC_SetPriority+0x4c>)
 8003142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003146:	0112      	lsls	r2, r2, #4
 8003148:	b2d2      	uxtb	r2, r2
 800314a:	440b      	add	r3, r1
 800314c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003150:	e00a      	b.n	8003168 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	b2da      	uxtb	r2, r3
 8003156:	4908      	ldr	r1, [pc, #32]	@ (8003178 <__NVIC_SetPriority+0x50>)
 8003158:	79fb      	ldrb	r3, [r7, #7]
 800315a:	f003 030f 	and.w	r3, r3, #15
 800315e:	3b04      	subs	r3, #4
 8003160:	0112      	lsls	r2, r2, #4
 8003162:	b2d2      	uxtb	r2, r2
 8003164:	440b      	add	r3, r1
 8003166:	761a      	strb	r2, [r3, #24]
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	bc80      	pop	{r7}
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	e000e100 	.word	0xe000e100
 8003178:	e000ed00 	.word	0xe000ed00

0800317c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800317c:	b480      	push	{r7}
 800317e:	b089      	sub	sp, #36	@ 0x24
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f003 0307 	and.w	r3, r3, #7
 800318e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	f1c3 0307 	rsb	r3, r3, #7
 8003196:	2b04      	cmp	r3, #4
 8003198:	bf28      	it	cs
 800319a:	2304      	movcs	r3, #4
 800319c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	3304      	adds	r3, #4
 80031a2:	2b06      	cmp	r3, #6
 80031a4:	d902      	bls.n	80031ac <NVIC_EncodePriority+0x30>
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	3b03      	subs	r3, #3
 80031aa:	e000      	b.n	80031ae <NVIC_EncodePriority+0x32>
 80031ac:	2300      	movs	r3, #0
 80031ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031b0:	f04f 32ff 	mov.w	r2, #4294967295
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ba:	43da      	mvns	r2, r3
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	401a      	ands	r2, r3
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031c4:	f04f 31ff 	mov.w	r1, #4294967295
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	fa01 f303 	lsl.w	r3, r1, r3
 80031ce:	43d9      	mvns	r1, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031d4:	4313      	orrs	r3, r2
         );
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3724      	adds	r7, #36	@ 0x24
 80031da:	46bd      	mov	sp, r7
 80031dc:	bc80      	pop	{r7}
 80031de:	4770      	bx	lr

080031e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f7ff ff4f 	bl	800308c <__NVIC_SetPriorityGrouping>
}
 80031ee:	bf00      	nop
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b086      	sub	sp, #24
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	4603      	mov	r3, r0
 80031fe:	60b9      	str	r1, [r7, #8]
 8003200:	607a      	str	r2, [r7, #4]
 8003202:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003204:	2300      	movs	r3, #0
 8003206:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003208:	f7ff ff64 	bl	80030d4 <__NVIC_GetPriorityGrouping>
 800320c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	68b9      	ldr	r1, [r7, #8]
 8003212:	6978      	ldr	r0, [r7, #20]
 8003214:	f7ff ffb2 	bl	800317c <NVIC_EncodePriority>
 8003218:	4602      	mov	r2, r0
 800321a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800321e:	4611      	mov	r1, r2
 8003220:	4618      	mov	r0, r3
 8003222:	f7ff ff81 	bl	8003128 <__NVIC_SetPriority>
}
 8003226:	bf00      	nop
 8003228:	3718      	adds	r7, #24
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b082      	sub	sp, #8
 8003232:	af00      	add	r7, sp, #0
 8003234:	4603      	mov	r3, r0
 8003236:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800323c:	4618      	mov	r0, r3
 800323e:	f7ff ff57 	bl	80030f0 <__NVIC_EnableIRQ>
}
 8003242:	bf00      	nop
 8003244:	3708      	adds	r7, #8
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
	...

0800324c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003254:	2300      	movs	r3, #0
 8003256:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e043      	b.n	80032ea <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	461a      	mov	r2, r3
 8003268:	4b22      	ldr	r3, [pc, #136]	@ (80032f4 <HAL_DMA_Init+0xa8>)
 800326a:	4413      	add	r3, r2
 800326c:	4a22      	ldr	r2, [pc, #136]	@ (80032f8 <HAL_DMA_Init+0xac>)
 800326e:	fba2 2303 	umull	r2, r3, r2, r3
 8003272:	091b      	lsrs	r3, r3, #4
 8003274:	009a      	lsls	r2, r3, #2
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a1f      	ldr	r2, [pc, #124]	@ (80032fc <HAL_DMA_Init+0xb0>)
 800327e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2202      	movs	r2, #2
 8003284:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003296:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800329a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80032a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	69db      	ldr	r3, [r3, #28]
 80032c2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3714      	adds	r7, #20
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bc80      	pop	{r7}
 80032f2:	4770      	bx	lr
 80032f4:	bffdfff8 	.word	0xbffdfff8
 80032f8:	cccccccd 	.word	0xcccccccd
 80032fc:	40020000 	.word	0x40020000

08003300 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
 800330c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800330e:	2300      	movs	r3, #0
 8003310:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003318:	2b01      	cmp	r3, #1
 800331a:	d101      	bne.n	8003320 <HAL_DMA_Start_IT+0x20>
 800331c:	2302      	movs	r3, #2
 800331e:	e04b      	b.n	80033b8 <HAL_DMA_Start_IT+0xb8>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2b01      	cmp	r3, #1
 8003332:	d13a      	bne.n	80033aa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2202      	movs	r2, #2
 8003338:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 0201 	bic.w	r2, r2, #1
 8003350:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	68b9      	ldr	r1, [r7, #8]
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	f000 f9f8 	bl	800374e <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003362:	2b00      	cmp	r3, #0
 8003364:	d008      	beq.n	8003378 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f042 020e 	orr.w	r2, r2, #14
 8003374:	601a      	str	r2, [r3, #0]
 8003376:	e00f      	b.n	8003398 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f022 0204 	bic.w	r2, r2, #4
 8003386:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f042 020a 	orr.w	r2, r2, #10
 8003396:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f042 0201 	orr.w	r2, r2, #1
 80033a6:	601a      	str	r2, [r3, #0]
 80033a8:	e005      	b.n	80033b6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80033b2:	2302      	movs	r3, #2
 80033b4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80033b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3718      	adds	r7, #24
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033c8:	2300      	movs	r3, #0
 80033ca:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d008      	beq.n	80033ea <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2204      	movs	r2, #4
 80033dc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e020      	b.n	800342c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f022 020e 	bic.w	r2, r2, #14
 80033f8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f022 0201 	bic.w	r2, r2, #1
 8003408:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003412:	2101      	movs	r1, #1
 8003414:	fa01 f202 	lsl.w	r2, r1, r2
 8003418:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2201      	movs	r2, #1
 800341e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800342a:	7bfb      	ldrb	r3, [r7, #15]
}
 800342c:	4618      	mov	r0, r3
 800342e:	3714      	adds	r7, #20
 8003430:	46bd      	mov	sp, r7
 8003432:	bc80      	pop	{r7}
 8003434:	4770      	bx	lr
	...

08003438 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003440:	2300      	movs	r3, #0
 8003442:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d005      	beq.n	800345c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2204      	movs	r2, #4
 8003454:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	73fb      	strb	r3, [r7, #15]
 800345a:	e051      	b.n	8003500 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f022 020e 	bic.w	r2, r2, #14
 800346a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 0201 	bic.w	r2, r2, #1
 800347a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a22      	ldr	r2, [pc, #136]	@ (800350c <HAL_DMA_Abort_IT+0xd4>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d029      	beq.n	80034da <HAL_DMA_Abort_IT+0xa2>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a21      	ldr	r2, [pc, #132]	@ (8003510 <HAL_DMA_Abort_IT+0xd8>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d022      	beq.n	80034d6 <HAL_DMA_Abort_IT+0x9e>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a1f      	ldr	r2, [pc, #124]	@ (8003514 <HAL_DMA_Abort_IT+0xdc>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d01a      	beq.n	80034d0 <HAL_DMA_Abort_IT+0x98>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a1e      	ldr	r2, [pc, #120]	@ (8003518 <HAL_DMA_Abort_IT+0xe0>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d012      	beq.n	80034ca <HAL_DMA_Abort_IT+0x92>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a1c      	ldr	r2, [pc, #112]	@ (800351c <HAL_DMA_Abort_IT+0xe4>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d00a      	beq.n	80034c4 <HAL_DMA_Abort_IT+0x8c>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a1b      	ldr	r2, [pc, #108]	@ (8003520 <HAL_DMA_Abort_IT+0xe8>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d102      	bne.n	80034be <HAL_DMA_Abort_IT+0x86>
 80034b8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80034bc:	e00e      	b.n	80034dc <HAL_DMA_Abort_IT+0xa4>
 80034be:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80034c2:	e00b      	b.n	80034dc <HAL_DMA_Abort_IT+0xa4>
 80034c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80034c8:	e008      	b.n	80034dc <HAL_DMA_Abort_IT+0xa4>
 80034ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034ce:	e005      	b.n	80034dc <HAL_DMA_Abort_IT+0xa4>
 80034d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80034d4:	e002      	b.n	80034dc <HAL_DMA_Abort_IT+0xa4>
 80034d6:	2310      	movs	r3, #16
 80034d8:	e000      	b.n	80034dc <HAL_DMA_Abort_IT+0xa4>
 80034da:	2301      	movs	r3, #1
 80034dc:	4a11      	ldr	r2, [pc, #68]	@ (8003524 <HAL_DMA_Abort_IT+0xec>)
 80034de:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d003      	beq.n	8003500 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	4798      	blx	r3
    } 
  }
  return status;
 8003500:	7bfb      	ldrb	r3, [r7, #15]
}
 8003502:	4618      	mov	r0, r3
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	40020008 	.word	0x40020008
 8003510:	4002001c 	.word	0x4002001c
 8003514:	40020030 	.word	0x40020030
 8003518:	40020044 	.word	0x40020044
 800351c:	40020058 	.word	0x40020058
 8003520:	4002006c 	.word	0x4002006c
 8003524:	40020000 	.word	0x40020000

08003528 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003544:	2204      	movs	r2, #4
 8003546:	409a      	lsls	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	4013      	ands	r3, r2
 800354c:	2b00      	cmp	r3, #0
 800354e:	d04f      	beq.n	80035f0 <HAL_DMA_IRQHandler+0xc8>
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	f003 0304 	and.w	r3, r3, #4
 8003556:	2b00      	cmp	r3, #0
 8003558:	d04a      	beq.n	80035f0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0320 	and.w	r3, r3, #32
 8003564:	2b00      	cmp	r3, #0
 8003566:	d107      	bne.n	8003578 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 0204 	bic.w	r2, r2, #4
 8003576:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a66      	ldr	r2, [pc, #408]	@ (8003718 <HAL_DMA_IRQHandler+0x1f0>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d029      	beq.n	80035d6 <HAL_DMA_IRQHandler+0xae>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a65      	ldr	r2, [pc, #404]	@ (800371c <HAL_DMA_IRQHandler+0x1f4>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d022      	beq.n	80035d2 <HAL_DMA_IRQHandler+0xaa>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a63      	ldr	r2, [pc, #396]	@ (8003720 <HAL_DMA_IRQHandler+0x1f8>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d01a      	beq.n	80035cc <HAL_DMA_IRQHandler+0xa4>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a62      	ldr	r2, [pc, #392]	@ (8003724 <HAL_DMA_IRQHandler+0x1fc>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d012      	beq.n	80035c6 <HAL_DMA_IRQHandler+0x9e>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a60      	ldr	r2, [pc, #384]	@ (8003728 <HAL_DMA_IRQHandler+0x200>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d00a      	beq.n	80035c0 <HAL_DMA_IRQHandler+0x98>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a5f      	ldr	r2, [pc, #380]	@ (800372c <HAL_DMA_IRQHandler+0x204>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d102      	bne.n	80035ba <HAL_DMA_IRQHandler+0x92>
 80035b4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80035b8:	e00e      	b.n	80035d8 <HAL_DMA_IRQHandler+0xb0>
 80035ba:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80035be:	e00b      	b.n	80035d8 <HAL_DMA_IRQHandler+0xb0>
 80035c0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80035c4:	e008      	b.n	80035d8 <HAL_DMA_IRQHandler+0xb0>
 80035c6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80035ca:	e005      	b.n	80035d8 <HAL_DMA_IRQHandler+0xb0>
 80035cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80035d0:	e002      	b.n	80035d8 <HAL_DMA_IRQHandler+0xb0>
 80035d2:	2340      	movs	r3, #64	@ 0x40
 80035d4:	e000      	b.n	80035d8 <HAL_DMA_IRQHandler+0xb0>
 80035d6:	2304      	movs	r3, #4
 80035d8:	4a55      	ldr	r2, [pc, #340]	@ (8003730 <HAL_DMA_IRQHandler+0x208>)
 80035da:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f000 8094 	beq.w	800370e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80035ee:	e08e      	b.n	800370e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f4:	2202      	movs	r2, #2
 80035f6:	409a      	lsls	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	4013      	ands	r3, r2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d056      	beq.n	80036ae <HAL_DMA_IRQHandler+0x186>
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d051      	beq.n	80036ae <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0320 	and.w	r3, r3, #32
 8003614:	2b00      	cmp	r3, #0
 8003616:	d10b      	bne.n	8003630 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f022 020a 	bic.w	r2, r2, #10
 8003626:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a38      	ldr	r2, [pc, #224]	@ (8003718 <HAL_DMA_IRQHandler+0x1f0>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d029      	beq.n	800368e <HAL_DMA_IRQHandler+0x166>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a37      	ldr	r2, [pc, #220]	@ (800371c <HAL_DMA_IRQHandler+0x1f4>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d022      	beq.n	800368a <HAL_DMA_IRQHandler+0x162>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a35      	ldr	r2, [pc, #212]	@ (8003720 <HAL_DMA_IRQHandler+0x1f8>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d01a      	beq.n	8003684 <HAL_DMA_IRQHandler+0x15c>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a34      	ldr	r2, [pc, #208]	@ (8003724 <HAL_DMA_IRQHandler+0x1fc>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d012      	beq.n	800367e <HAL_DMA_IRQHandler+0x156>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a32      	ldr	r2, [pc, #200]	@ (8003728 <HAL_DMA_IRQHandler+0x200>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d00a      	beq.n	8003678 <HAL_DMA_IRQHandler+0x150>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a31      	ldr	r2, [pc, #196]	@ (800372c <HAL_DMA_IRQHandler+0x204>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d102      	bne.n	8003672 <HAL_DMA_IRQHandler+0x14a>
 800366c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003670:	e00e      	b.n	8003690 <HAL_DMA_IRQHandler+0x168>
 8003672:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003676:	e00b      	b.n	8003690 <HAL_DMA_IRQHandler+0x168>
 8003678:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800367c:	e008      	b.n	8003690 <HAL_DMA_IRQHandler+0x168>
 800367e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003682:	e005      	b.n	8003690 <HAL_DMA_IRQHandler+0x168>
 8003684:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003688:	e002      	b.n	8003690 <HAL_DMA_IRQHandler+0x168>
 800368a:	2320      	movs	r3, #32
 800368c:	e000      	b.n	8003690 <HAL_DMA_IRQHandler+0x168>
 800368e:	2302      	movs	r3, #2
 8003690:	4a27      	ldr	r2, [pc, #156]	@ (8003730 <HAL_DMA_IRQHandler+0x208>)
 8003692:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d034      	beq.n	800370e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80036ac:	e02f      	b.n	800370e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b2:	2208      	movs	r2, #8
 80036b4:	409a      	lsls	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	4013      	ands	r3, r2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d028      	beq.n	8003710 <HAL_DMA_IRQHandler+0x1e8>
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	f003 0308 	and.w	r3, r3, #8
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d023      	beq.n	8003710 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f022 020e 	bic.w	r2, r2, #14
 80036d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036e0:	2101      	movs	r1, #1
 80036e2:	fa01 f202 	lsl.w	r2, r1, r2
 80036e6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003702:	2b00      	cmp	r3, #0
 8003704:	d004      	beq.n	8003710 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	4798      	blx	r3
    }
  }
  return;
 800370e:	bf00      	nop
 8003710:	bf00      	nop
}
 8003712:	3710      	adds	r7, #16
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	40020008 	.word	0x40020008
 800371c:	4002001c 	.word	0x4002001c
 8003720:	40020030 	.word	0x40020030
 8003724:	40020044 	.word	0x40020044
 8003728:	40020058 	.word	0x40020058
 800372c:	4002006c 	.word	0x4002006c
 8003730:	40020000 	.word	0x40020000

08003734 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003742:	b2db      	uxtb	r3, r3
}
 8003744:	4618      	mov	r0, r3
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	bc80      	pop	{r7}
 800374c:	4770      	bx	lr

0800374e <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800374e:	b480      	push	{r7}
 8003750:	b085      	sub	sp, #20
 8003752:	af00      	add	r7, sp, #0
 8003754:	60f8      	str	r0, [r7, #12]
 8003756:	60b9      	str	r1, [r7, #8]
 8003758:	607a      	str	r2, [r7, #4]
 800375a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003764:	2101      	movs	r1, #1
 8003766:	fa01 f202 	lsl.w	r2, r1, r2
 800376a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	2b10      	cmp	r3, #16
 800377a:	d108      	bne.n	800378e <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68ba      	ldr	r2, [r7, #8]
 800378a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800378c:	e007      	b.n	800379e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68ba      	ldr	r2, [r7, #8]
 8003794:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	60da      	str	r2, [r3, #12]
}
 800379e:	bf00      	nop
 80037a0:	3714      	adds	r7, #20
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bc80      	pop	{r7}
 80037a6:	4770      	bx	lr

080037a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b08b      	sub	sp, #44	@ 0x2c
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037b2:	2300      	movs	r3, #0
 80037b4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80037b6:	2300      	movs	r3, #0
 80037b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037ba:	e169      	b.n	8003a90 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80037bc:	2201      	movs	r2, #1
 80037be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c0:	fa02 f303 	lsl.w	r3, r2, r3
 80037c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	69fa      	ldr	r2, [r7, #28]
 80037cc:	4013      	ands	r3, r2
 80037ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	f040 8158 	bne.w	8003a8a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	4a9a      	ldr	r2, [pc, #616]	@ (8003a48 <HAL_GPIO_Init+0x2a0>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d05e      	beq.n	80038a2 <HAL_GPIO_Init+0xfa>
 80037e4:	4a98      	ldr	r2, [pc, #608]	@ (8003a48 <HAL_GPIO_Init+0x2a0>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d875      	bhi.n	80038d6 <HAL_GPIO_Init+0x12e>
 80037ea:	4a98      	ldr	r2, [pc, #608]	@ (8003a4c <HAL_GPIO_Init+0x2a4>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d058      	beq.n	80038a2 <HAL_GPIO_Init+0xfa>
 80037f0:	4a96      	ldr	r2, [pc, #600]	@ (8003a4c <HAL_GPIO_Init+0x2a4>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d86f      	bhi.n	80038d6 <HAL_GPIO_Init+0x12e>
 80037f6:	4a96      	ldr	r2, [pc, #600]	@ (8003a50 <HAL_GPIO_Init+0x2a8>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d052      	beq.n	80038a2 <HAL_GPIO_Init+0xfa>
 80037fc:	4a94      	ldr	r2, [pc, #592]	@ (8003a50 <HAL_GPIO_Init+0x2a8>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d869      	bhi.n	80038d6 <HAL_GPIO_Init+0x12e>
 8003802:	4a94      	ldr	r2, [pc, #592]	@ (8003a54 <HAL_GPIO_Init+0x2ac>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d04c      	beq.n	80038a2 <HAL_GPIO_Init+0xfa>
 8003808:	4a92      	ldr	r2, [pc, #584]	@ (8003a54 <HAL_GPIO_Init+0x2ac>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d863      	bhi.n	80038d6 <HAL_GPIO_Init+0x12e>
 800380e:	4a92      	ldr	r2, [pc, #584]	@ (8003a58 <HAL_GPIO_Init+0x2b0>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d046      	beq.n	80038a2 <HAL_GPIO_Init+0xfa>
 8003814:	4a90      	ldr	r2, [pc, #576]	@ (8003a58 <HAL_GPIO_Init+0x2b0>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d85d      	bhi.n	80038d6 <HAL_GPIO_Init+0x12e>
 800381a:	2b12      	cmp	r3, #18
 800381c:	d82a      	bhi.n	8003874 <HAL_GPIO_Init+0xcc>
 800381e:	2b12      	cmp	r3, #18
 8003820:	d859      	bhi.n	80038d6 <HAL_GPIO_Init+0x12e>
 8003822:	a201      	add	r2, pc, #4	@ (adr r2, 8003828 <HAL_GPIO_Init+0x80>)
 8003824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003828:	080038a3 	.word	0x080038a3
 800382c:	0800387d 	.word	0x0800387d
 8003830:	0800388f 	.word	0x0800388f
 8003834:	080038d1 	.word	0x080038d1
 8003838:	080038d7 	.word	0x080038d7
 800383c:	080038d7 	.word	0x080038d7
 8003840:	080038d7 	.word	0x080038d7
 8003844:	080038d7 	.word	0x080038d7
 8003848:	080038d7 	.word	0x080038d7
 800384c:	080038d7 	.word	0x080038d7
 8003850:	080038d7 	.word	0x080038d7
 8003854:	080038d7 	.word	0x080038d7
 8003858:	080038d7 	.word	0x080038d7
 800385c:	080038d7 	.word	0x080038d7
 8003860:	080038d7 	.word	0x080038d7
 8003864:	080038d7 	.word	0x080038d7
 8003868:	080038d7 	.word	0x080038d7
 800386c:	08003885 	.word	0x08003885
 8003870:	08003899 	.word	0x08003899
 8003874:	4a79      	ldr	r2, [pc, #484]	@ (8003a5c <HAL_GPIO_Init+0x2b4>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d013      	beq.n	80038a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800387a:	e02c      	b.n	80038d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	623b      	str	r3, [r7, #32]
          break;
 8003882:	e029      	b.n	80038d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	3304      	adds	r3, #4
 800388a:	623b      	str	r3, [r7, #32]
          break;
 800388c:	e024      	b.n	80038d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	3308      	adds	r3, #8
 8003894:	623b      	str	r3, [r7, #32]
          break;
 8003896:	e01f      	b.n	80038d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	330c      	adds	r3, #12
 800389e:	623b      	str	r3, [r7, #32]
          break;
 80038a0:	e01a      	b.n	80038d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d102      	bne.n	80038b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80038aa:	2304      	movs	r3, #4
 80038ac:	623b      	str	r3, [r7, #32]
          break;
 80038ae:	e013      	b.n	80038d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d105      	bne.n	80038c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80038b8:	2308      	movs	r3, #8
 80038ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	69fa      	ldr	r2, [r7, #28]
 80038c0:	611a      	str	r2, [r3, #16]
          break;
 80038c2:	e009      	b.n	80038d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80038c4:	2308      	movs	r3, #8
 80038c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	69fa      	ldr	r2, [r7, #28]
 80038cc:	615a      	str	r2, [r3, #20]
          break;
 80038ce:	e003      	b.n	80038d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80038d0:	2300      	movs	r3, #0
 80038d2:	623b      	str	r3, [r7, #32]
          break;
 80038d4:	e000      	b.n	80038d8 <HAL_GPIO_Init+0x130>
          break;
 80038d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	2bff      	cmp	r3, #255	@ 0xff
 80038dc:	d801      	bhi.n	80038e2 <HAL_GPIO_Init+0x13a>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	e001      	b.n	80038e6 <HAL_GPIO_Init+0x13e>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	3304      	adds	r3, #4
 80038e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	2bff      	cmp	r3, #255	@ 0xff
 80038ec:	d802      	bhi.n	80038f4 <HAL_GPIO_Init+0x14c>
 80038ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	e002      	b.n	80038fa <HAL_GPIO_Init+0x152>
 80038f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f6:	3b08      	subs	r3, #8
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	210f      	movs	r1, #15
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	fa01 f303 	lsl.w	r3, r1, r3
 8003908:	43db      	mvns	r3, r3
 800390a:	401a      	ands	r2, r3
 800390c:	6a39      	ldr	r1, [r7, #32]
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	fa01 f303 	lsl.w	r3, r1, r3
 8003914:	431a      	orrs	r2, r3
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003922:	2b00      	cmp	r3, #0
 8003924:	f000 80b1 	beq.w	8003a8a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003928:	4b4d      	ldr	r3, [pc, #308]	@ (8003a60 <HAL_GPIO_Init+0x2b8>)
 800392a:	699b      	ldr	r3, [r3, #24]
 800392c:	4a4c      	ldr	r2, [pc, #304]	@ (8003a60 <HAL_GPIO_Init+0x2b8>)
 800392e:	f043 0301 	orr.w	r3, r3, #1
 8003932:	6193      	str	r3, [r2, #24]
 8003934:	4b4a      	ldr	r3, [pc, #296]	@ (8003a60 <HAL_GPIO_Init+0x2b8>)
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	f003 0301 	and.w	r3, r3, #1
 800393c:	60bb      	str	r3, [r7, #8]
 800393e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003940:	4a48      	ldr	r2, [pc, #288]	@ (8003a64 <HAL_GPIO_Init+0x2bc>)
 8003942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003944:	089b      	lsrs	r3, r3, #2
 8003946:	3302      	adds	r3, #2
 8003948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800394c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800394e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003950:	f003 0303 	and.w	r3, r3, #3
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	220f      	movs	r2, #15
 8003958:	fa02 f303 	lsl.w	r3, r2, r3
 800395c:	43db      	mvns	r3, r3
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	4013      	ands	r3, r2
 8003962:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a40      	ldr	r2, [pc, #256]	@ (8003a68 <HAL_GPIO_Init+0x2c0>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d013      	beq.n	8003994 <HAL_GPIO_Init+0x1ec>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a3f      	ldr	r2, [pc, #252]	@ (8003a6c <HAL_GPIO_Init+0x2c4>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d00d      	beq.n	8003990 <HAL_GPIO_Init+0x1e8>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a3e      	ldr	r2, [pc, #248]	@ (8003a70 <HAL_GPIO_Init+0x2c8>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d007      	beq.n	800398c <HAL_GPIO_Init+0x1e4>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a3d      	ldr	r2, [pc, #244]	@ (8003a74 <HAL_GPIO_Init+0x2cc>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d101      	bne.n	8003988 <HAL_GPIO_Init+0x1e0>
 8003984:	2303      	movs	r3, #3
 8003986:	e006      	b.n	8003996 <HAL_GPIO_Init+0x1ee>
 8003988:	2304      	movs	r3, #4
 800398a:	e004      	b.n	8003996 <HAL_GPIO_Init+0x1ee>
 800398c:	2302      	movs	r3, #2
 800398e:	e002      	b.n	8003996 <HAL_GPIO_Init+0x1ee>
 8003990:	2301      	movs	r3, #1
 8003992:	e000      	b.n	8003996 <HAL_GPIO_Init+0x1ee>
 8003994:	2300      	movs	r3, #0
 8003996:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003998:	f002 0203 	and.w	r2, r2, #3
 800399c:	0092      	lsls	r2, r2, #2
 800399e:	4093      	lsls	r3, r2
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80039a6:	492f      	ldr	r1, [pc, #188]	@ (8003a64 <HAL_GPIO_Init+0x2bc>)
 80039a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039aa:	089b      	lsrs	r3, r3, #2
 80039ac:	3302      	adds	r3, #2
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d006      	beq.n	80039ce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80039c0:	4b2d      	ldr	r3, [pc, #180]	@ (8003a78 <HAL_GPIO_Init+0x2d0>)
 80039c2:	689a      	ldr	r2, [r3, #8]
 80039c4:	492c      	ldr	r1, [pc, #176]	@ (8003a78 <HAL_GPIO_Init+0x2d0>)
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	608b      	str	r3, [r1, #8]
 80039cc:	e006      	b.n	80039dc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80039ce:	4b2a      	ldr	r3, [pc, #168]	@ (8003a78 <HAL_GPIO_Init+0x2d0>)
 80039d0:	689a      	ldr	r2, [r3, #8]
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	43db      	mvns	r3, r3
 80039d6:	4928      	ldr	r1, [pc, #160]	@ (8003a78 <HAL_GPIO_Init+0x2d0>)
 80039d8:	4013      	ands	r3, r2
 80039da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d006      	beq.n	80039f6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80039e8:	4b23      	ldr	r3, [pc, #140]	@ (8003a78 <HAL_GPIO_Init+0x2d0>)
 80039ea:	68da      	ldr	r2, [r3, #12]
 80039ec:	4922      	ldr	r1, [pc, #136]	@ (8003a78 <HAL_GPIO_Init+0x2d0>)
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	60cb      	str	r3, [r1, #12]
 80039f4:	e006      	b.n	8003a04 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80039f6:	4b20      	ldr	r3, [pc, #128]	@ (8003a78 <HAL_GPIO_Init+0x2d0>)
 80039f8:	68da      	ldr	r2, [r3, #12]
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	43db      	mvns	r3, r3
 80039fe:	491e      	ldr	r1, [pc, #120]	@ (8003a78 <HAL_GPIO_Init+0x2d0>)
 8003a00:	4013      	ands	r3, r2
 8003a02:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d006      	beq.n	8003a1e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003a10:	4b19      	ldr	r3, [pc, #100]	@ (8003a78 <HAL_GPIO_Init+0x2d0>)
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	4918      	ldr	r1, [pc, #96]	@ (8003a78 <HAL_GPIO_Init+0x2d0>)
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	604b      	str	r3, [r1, #4]
 8003a1c:	e006      	b.n	8003a2c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003a1e:	4b16      	ldr	r3, [pc, #88]	@ (8003a78 <HAL_GPIO_Init+0x2d0>)
 8003a20:	685a      	ldr	r2, [r3, #4]
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	43db      	mvns	r3, r3
 8003a26:	4914      	ldr	r1, [pc, #80]	@ (8003a78 <HAL_GPIO_Init+0x2d0>)
 8003a28:	4013      	ands	r3, r2
 8003a2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d021      	beq.n	8003a7c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003a38:	4b0f      	ldr	r3, [pc, #60]	@ (8003a78 <HAL_GPIO_Init+0x2d0>)
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	490e      	ldr	r1, [pc, #56]	@ (8003a78 <HAL_GPIO_Init+0x2d0>)
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	600b      	str	r3, [r1, #0]
 8003a44:	e021      	b.n	8003a8a <HAL_GPIO_Init+0x2e2>
 8003a46:	bf00      	nop
 8003a48:	10320000 	.word	0x10320000
 8003a4c:	10310000 	.word	0x10310000
 8003a50:	10220000 	.word	0x10220000
 8003a54:	10210000 	.word	0x10210000
 8003a58:	10120000 	.word	0x10120000
 8003a5c:	10110000 	.word	0x10110000
 8003a60:	40021000 	.word	0x40021000
 8003a64:	40010000 	.word	0x40010000
 8003a68:	40010800 	.word	0x40010800
 8003a6c:	40010c00 	.word	0x40010c00
 8003a70:	40011000 	.word	0x40011000
 8003a74:	40011400 	.word	0x40011400
 8003a78:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8003aac <HAL_GPIO_Init+0x304>)
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	43db      	mvns	r3, r3
 8003a84:	4909      	ldr	r1, [pc, #36]	@ (8003aac <HAL_GPIO_Init+0x304>)
 8003a86:	4013      	ands	r3, r2
 8003a88:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a96:	fa22 f303 	lsr.w	r3, r2, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f47f ae8e 	bne.w	80037bc <HAL_GPIO_Init+0x14>
  }
}
 8003aa0:	bf00      	nop
 8003aa2:	bf00      	nop
 8003aa4:	372c      	adds	r7, #44	@ 0x2c
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bc80      	pop	{r7}
 8003aaa:	4770      	bx	lr
 8003aac:	40010400 	.word	0x40010400

08003ab0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	460b      	mov	r3, r1
 8003aba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689a      	ldr	r2, [r3, #8]
 8003ac0:	887b      	ldrh	r3, [r7, #2]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d002      	beq.n	8003ace <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	73fb      	strb	r3, [r7, #15]
 8003acc:	e001      	b.n	8003ad2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3714      	adds	r7, #20
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bc80      	pop	{r7}
 8003adc:	4770      	bx	lr

08003ade <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ade:	b480      	push	{r7}
 8003ae0:	b083      	sub	sp, #12
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
 8003ae6:	460b      	mov	r3, r1
 8003ae8:	807b      	strh	r3, [r7, #2]
 8003aea:	4613      	mov	r3, r2
 8003aec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003aee:	787b      	ldrb	r3, [r7, #1]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d003      	beq.n	8003afc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003af4:	887a      	ldrh	r2, [r7, #2]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003afa:	e003      	b.n	8003b04 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003afc:	887b      	ldrh	r3, [r7, #2]
 8003afe:	041a      	lsls	r2, r3, #16
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	611a      	str	r2, [r3, #16]
}
 8003b04:	bf00      	nop
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bc80      	pop	{r7}
 8003b0c:	4770      	bx	lr
	...

08003b10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	4603      	mov	r3, r0
 8003b18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003b1a:	4b08      	ldr	r3, [pc, #32]	@ (8003b3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b1c:	695a      	ldr	r2, [r3, #20]
 8003b1e:	88fb      	ldrh	r3, [r7, #6]
 8003b20:	4013      	ands	r3, r2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d006      	beq.n	8003b34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b26:	4a05      	ldr	r2, [pc, #20]	@ (8003b3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b28:	88fb      	ldrh	r3, [r7, #6]
 8003b2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b2c:	88fb      	ldrh	r3, [r7, #6]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7fd fafe 	bl	8001130 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b34:	bf00      	nop
 8003b36:	3708      	adds	r7, #8
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	40010400 	.word	0x40010400

08003b40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e272      	b.n	8004038 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	f000 8087 	beq.w	8003c6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b60:	4b92      	ldr	r3, [pc, #584]	@ (8003dac <HAL_RCC_OscConfig+0x26c>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f003 030c 	and.w	r3, r3, #12
 8003b68:	2b04      	cmp	r3, #4
 8003b6a:	d00c      	beq.n	8003b86 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b6c:	4b8f      	ldr	r3, [pc, #572]	@ (8003dac <HAL_RCC_OscConfig+0x26c>)
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f003 030c 	and.w	r3, r3, #12
 8003b74:	2b08      	cmp	r3, #8
 8003b76:	d112      	bne.n	8003b9e <HAL_RCC_OscConfig+0x5e>
 8003b78:	4b8c      	ldr	r3, [pc, #560]	@ (8003dac <HAL_RCC_OscConfig+0x26c>)
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b84:	d10b      	bne.n	8003b9e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b86:	4b89      	ldr	r3, [pc, #548]	@ (8003dac <HAL_RCC_OscConfig+0x26c>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d06c      	beq.n	8003c6c <HAL_RCC_OscConfig+0x12c>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d168      	bne.n	8003c6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e24c      	b.n	8004038 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ba6:	d106      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x76>
 8003ba8:	4b80      	ldr	r3, [pc, #512]	@ (8003dac <HAL_RCC_OscConfig+0x26c>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a7f      	ldr	r2, [pc, #508]	@ (8003dac <HAL_RCC_OscConfig+0x26c>)
 8003bae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bb2:	6013      	str	r3, [r2, #0]
 8003bb4:	e02e      	b.n	8003c14 <HAL_RCC_OscConfig+0xd4>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10c      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x98>
 8003bbe:	4b7b      	ldr	r3, [pc, #492]	@ (8003dac <HAL_RCC_OscConfig+0x26c>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a7a      	ldr	r2, [pc, #488]	@ (8003dac <HAL_RCC_OscConfig+0x26c>)
 8003bc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bc8:	6013      	str	r3, [r2, #0]
 8003bca:	4b78      	ldr	r3, [pc, #480]	@ (8003dac <HAL_RCC_OscConfig+0x26c>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a77      	ldr	r2, [pc, #476]	@ (8003dac <HAL_RCC_OscConfig+0x26c>)
 8003bd0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bd4:	6013      	str	r3, [r2, #0]
 8003bd6:	e01d      	b.n	8003c14 <HAL_RCC_OscConfig+0xd4>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003be0:	d10c      	bne.n	8003bfc <HAL_RCC_OscConfig+0xbc>
 8003be2:	4b72      	ldr	r3, [pc, #456]	@ (8003dac <HAL_RCC_OscConfig+0x26c>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a71      	ldr	r2, [pc, #452]	@ (8003dac <HAL_RCC_OscConfig+0x26c>)
 8003be8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003bec:	6013      	str	r3, [r2, #0]
 8003bee:	4b6f      	ldr	r3, [pc, #444]	@ (8003dac <HAL_RCC_OscConfig+0x26c>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a6e      	ldr	r2, [pc, #440]	@ (8003dac <HAL_RCC_OscConfig+0x26c>)
 8003bf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bf8:	6013      	str	r3, [r2, #0]
 8003bfa:	e00b      	b.n	8003c14 <HAL_RCC_OscConfig+0xd4>
 8003bfc:	4b6b      	ldr	r3, [pc, #428]	@ (8003dac <HAL_RCC_OscConfig+0x26c>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a6a      	ldr	r2, [pc, #424]	@ (8003dac <HAL_RCC_OscConfig+0x26c>)
 8003c02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c06:	6013      	str	r3, [r2, #0]
 8003c08:	4b68      	ldr	r3, [pc, #416]	@ (8003dac <HAL_RCC_OscConfig+0x26c>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a67      	ldr	r2, [pc, #412]	@ (8003dac <HAL_RCC_OscConfig+0x26c>)
 8003c0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c12:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d013      	beq.n	8003c44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c1c:	f7fd ff8c 	bl	8001b38 <HAL_GetTick>
 8003c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c22:	e008      	b.n	8003c36 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c24:	f7fd ff88 	bl	8001b38 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b64      	cmp	r3, #100	@ 0x64
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e200      	b.n	8004038 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c36:	4b5d      	ldr	r3, [pc, #372]	@ (8003dac <HAL_RCC_OscConfig+0x26c>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d0f0      	beq.n	8003c24 <HAL_RCC_OscConfig+0xe4>
 8003c42:	e014      	b.n	8003c6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c44:	f7fd ff78 	bl	8001b38 <HAL_GetTick>
 8003c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c4a:	e008      	b.n	8003c5e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c4c:	f7fd ff74 	bl	8001b38 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	2b64      	cmp	r3, #100	@ 0x64
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e1ec      	b.n	8004038 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c5e:	4b53      	ldr	r3, [pc, #332]	@ (8003dac <HAL_RCC_OscConfig+0x26c>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1f0      	bne.n	8003c4c <HAL_RCC_OscConfig+0x10c>
 8003c6a:	e000      	b.n	8003c6e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d063      	beq.n	8003d42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c7a:	4b4c      	ldr	r3, [pc, #304]	@ (8003dac <HAL_RCC_OscConfig+0x26c>)
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f003 030c 	and.w	r3, r3, #12
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00b      	beq.n	8003c9e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003c86:	4b49      	ldr	r3, [pc, #292]	@ (8003dac <HAL_RCC_OscConfig+0x26c>)
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f003 030c 	and.w	r3, r3, #12
 8003c8e:	2b08      	cmp	r3, #8
 8003c90:	d11c      	bne.n	8003ccc <HAL_RCC_OscConfig+0x18c>
 8003c92:	4b46      	ldr	r3, [pc, #280]	@ (8003dac <HAL_RCC_OscConfig+0x26c>)
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d116      	bne.n	8003ccc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c9e:	4b43      	ldr	r3, [pc, #268]	@ (8003dac <HAL_RCC_OscConfig+0x26c>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d005      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x176>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d001      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e1c0      	b.n	8004038 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cb6:	4b3d      	ldr	r3, [pc, #244]	@ (8003dac <HAL_RCC_OscConfig+0x26c>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	00db      	lsls	r3, r3, #3
 8003cc4:	4939      	ldr	r1, [pc, #228]	@ (8003dac <HAL_RCC_OscConfig+0x26c>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cca:	e03a      	b.n	8003d42 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d020      	beq.n	8003d16 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cd4:	4b36      	ldr	r3, [pc, #216]	@ (8003db0 <HAL_RCC_OscConfig+0x270>)
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cda:	f7fd ff2d 	bl	8001b38 <HAL_GetTick>
 8003cde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ce0:	e008      	b.n	8003cf4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ce2:	f7fd ff29 	bl	8001b38 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d901      	bls.n	8003cf4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e1a1      	b.n	8004038 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cf4:	4b2d      	ldr	r3, [pc, #180]	@ (8003dac <HAL_RCC_OscConfig+0x26c>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0302 	and.w	r3, r3, #2
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d0f0      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d00:	4b2a      	ldr	r3, [pc, #168]	@ (8003dac <HAL_RCC_OscConfig+0x26c>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	695b      	ldr	r3, [r3, #20]
 8003d0c:	00db      	lsls	r3, r3, #3
 8003d0e:	4927      	ldr	r1, [pc, #156]	@ (8003dac <HAL_RCC_OscConfig+0x26c>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	600b      	str	r3, [r1, #0]
 8003d14:	e015      	b.n	8003d42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d16:	4b26      	ldr	r3, [pc, #152]	@ (8003db0 <HAL_RCC_OscConfig+0x270>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d1c:	f7fd ff0c 	bl	8001b38 <HAL_GetTick>
 8003d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d22:	e008      	b.n	8003d36 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d24:	f7fd ff08 	bl	8001b38 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e180      	b.n	8004038 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d36:	4b1d      	ldr	r3, [pc, #116]	@ (8003dac <HAL_RCC_OscConfig+0x26c>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1f0      	bne.n	8003d24 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0308 	and.w	r3, r3, #8
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d03a      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d019      	beq.n	8003d8a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d56:	4b17      	ldr	r3, [pc, #92]	@ (8003db4 <HAL_RCC_OscConfig+0x274>)
 8003d58:	2201      	movs	r2, #1
 8003d5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d5c:	f7fd feec 	bl	8001b38 <HAL_GetTick>
 8003d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d62:	e008      	b.n	8003d76 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d64:	f7fd fee8 	bl	8001b38 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e160      	b.n	8004038 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d76:	4b0d      	ldr	r3, [pc, #52]	@ (8003dac <HAL_RCC_OscConfig+0x26c>)
 8003d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d0f0      	beq.n	8003d64 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003d82:	2001      	movs	r0, #1
 8003d84:	f000 fafe 	bl	8004384 <RCC_Delay>
 8003d88:	e01c      	b.n	8003dc4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d8a:	4b0a      	ldr	r3, [pc, #40]	@ (8003db4 <HAL_RCC_OscConfig+0x274>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d90:	f7fd fed2 	bl	8001b38 <HAL_GetTick>
 8003d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d96:	e00f      	b.n	8003db8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d98:	f7fd fece 	bl	8001b38 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d908      	bls.n	8003db8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e146      	b.n	8004038 <HAL_RCC_OscConfig+0x4f8>
 8003daa:	bf00      	nop
 8003dac:	40021000 	.word	0x40021000
 8003db0:	42420000 	.word	0x42420000
 8003db4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003db8:	4b92      	ldr	r3, [pc, #584]	@ (8004004 <HAL_RCC_OscConfig+0x4c4>)
 8003dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dbc:	f003 0302 	and.w	r3, r3, #2
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d1e9      	bne.n	8003d98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0304 	and.w	r3, r3, #4
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f000 80a6 	beq.w	8003f1e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dd6:	4b8b      	ldr	r3, [pc, #556]	@ (8004004 <HAL_RCC_OscConfig+0x4c4>)
 8003dd8:	69db      	ldr	r3, [r3, #28]
 8003dda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10d      	bne.n	8003dfe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003de2:	4b88      	ldr	r3, [pc, #544]	@ (8004004 <HAL_RCC_OscConfig+0x4c4>)
 8003de4:	69db      	ldr	r3, [r3, #28]
 8003de6:	4a87      	ldr	r2, [pc, #540]	@ (8004004 <HAL_RCC_OscConfig+0x4c4>)
 8003de8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dec:	61d3      	str	r3, [r2, #28]
 8003dee:	4b85      	ldr	r3, [pc, #532]	@ (8004004 <HAL_RCC_OscConfig+0x4c4>)
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003df6:	60bb      	str	r3, [r7, #8]
 8003df8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dfe:	4b82      	ldr	r3, [pc, #520]	@ (8004008 <HAL_RCC_OscConfig+0x4c8>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d118      	bne.n	8003e3c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e0a:	4b7f      	ldr	r3, [pc, #508]	@ (8004008 <HAL_RCC_OscConfig+0x4c8>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a7e      	ldr	r2, [pc, #504]	@ (8004008 <HAL_RCC_OscConfig+0x4c8>)
 8003e10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e16:	f7fd fe8f 	bl	8001b38 <HAL_GetTick>
 8003e1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e1c:	e008      	b.n	8003e30 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e1e:	f7fd fe8b 	bl	8001b38 <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	2b64      	cmp	r3, #100	@ 0x64
 8003e2a:	d901      	bls.n	8003e30 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e103      	b.n	8004038 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e30:	4b75      	ldr	r3, [pc, #468]	@ (8004008 <HAL_RCC_OscConfig+0x4c8>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d0f0      	beq.n	8003e1e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d106      	bne.n	8003e52 <HAL_RCC_OscConfig+0x312>
 8003e44:	4b6f      	ldr	r3, [pc, #444]	@ (8004004 <HAL_RCC_OscConfig+0x4c4>)
 8003e46:	6a1b      	ldr	r3, [r3, #32]
 8003e48:	4a6e      	ldr	r2, [pc, #440]	@ (8004004 <HAL_RCC_OscConfig+0x4c4>)
 8003e4a:	f043 0301 	orr.w	r3, r3, #1
 8003e4e:	6213      	str	r3, [r2, #32]
 8003e50:	e02d      	b.n	8003eae <HAL_RCC_OscConfig+0x36e>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10c      	bne.n	8003e74 <HAL_RCC_OscConfig+0x334>
 8003e5a:	4b6a      	ldr	r3, [pc, #424]	@ (8004004 <HAL_RCC_OscConfig+0x4c4>)
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	4a69      	ldr	r2, [pc, #420]	@ (8004004 <HAL_RCC_OscConfig+0x4c4>)
 8003e60:	f023 0301 	bic.w	r3, r3, #1
 8003e64:	6213      	str	r3, [r2, #32]
 8003e66:	4b67      	ldr	r3, [pc, #412]	@ (8004004 <HAL_RCC_OscConfig+0x4c4>)
 8003e68:	6a1b      	ldr	r3, [r3, #32]
 8003e6a:	4a66      	ldr	r2, [pc, #408]	@ (8004004 <HAL_RCC_OscConfig+0x4c4>)
 8003e6c:	f023 0304 	bic.w	r3, r3, #4
 8003e70:	6213      	str	r3, [r2, #32]
 8003e72:	e01c      	b.n	8003eae <HAL_RCC_OscConfig+0x36e>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	2b05      	cmp	r3, #5
 8003e7a:	d10c      	bne.n	8003e96 <HAL_RCC_OscConfig+0x356>
 8003e7c:	4b61      	ldr	r3, [pc, #388]	@ (8004004 <HAL_RCC_OscConfig+0x4c4>)
 8003e7e:	6a1b      	ldr	r3, [r3, #32]
 8003e80:	4a60      	ldr	r2, [pc, #384]	@ (8004004 <HAL_RCC_OscConfig+0x4c4>)
 8003e82:	f043 0304 	orr.w	r3, r3, #4
 8003e86:	6213      	str	r3, [r2, #32]
 8003e88:	4b5e      	ldr	r3, [pc, #376]	@ (8004004 <HAL_RCC_OscConfig+0x4c4>)
 8003e8a:	6a1b      	ldr	r3, [r3, #32]
 8003e8c:	4a5d      	ldr	r2, [pc, #372]	@ (8004004 <HAL_RCC_OscConfig+0x4c4>)
 8003e8e:	f043 0301 	orr.w	r3, r3, #1
 8003e92:	6213      	str	r3, [r2, #32]
 8003e94:	e00b      	b.n	8003eae <HAL_RCC_OscConfig+0x36e>
 8003e96:	4b5b      	ldr	r3, [pc, #364]	@ (8004004 <HAL_RCC_OscConfig+0x4c4>)
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	4a5a      	ldr	r2, [pc, #360]	@ (8004004 <HAL_RCC_OscConfig+0x4c4>)
 8003e9c:	f023 0301 	bic.w	r3, r3, #1
 8003ea0:	6213      	str	r3, [r2, #32]
 8003ea2:	4b58      	ldr	r3, [pc, #352]	@ (8004004 <HAL_RCC_OscConfig+0x4c4>)
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	4a57      	ldr	r2, [pc, #348]	@ (8004004 <HAL_RCC_OscConfig+0x4c4>)
 8003ea8:	f023 0304 	bic.w	r3, r3, #4
 8003eac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d015      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eb6:	f7fd fe3f 	bl	8001b38 <HAL_GetTick>
 8003eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ebc:	e00a      	b.n	8003ed4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ebe:	f7fd fe3b 	bl	8001b38 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d901      	bls.n	8003ed4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e0b1      	b.n	8004038 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ed4:	4b4b      	ldr	r3, [pc, #300]	@ (8004004 <HAL_RCC_OscConfig+0x4c4>)
 8003ed6:	6a1b      	ldr	r3, [r3, #32]
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d0ee      	beq.n	8003ebe <HAL_RCC_OscConfig+0x37e>
 8003ee0:	e014      	b.n	8003f0c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ee2:	f7fd fe29 	bl	8001b38 <HAL_GetTick>
 8003ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ee8:	e00a      	b.n	8003f00 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eea:	f7fd fe25 	bl	8001b38 <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d901      	bls.n	8003f00 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e09b      	b.n	8004038 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f00:	4b40      	ldr	r3, [pc, #256]	@ (8004004 <HAL_RCC_OscConfig+0x4c4>)
 8003f02:	6a1b      	ldr	r3, [r3, #32]
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1ee      	bne.n	8003eea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f0c:	7dfb      	ldrb	r3, [r7, #23]
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d105      	bne.n	8003f1e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f12:	4b3c      	ldr	r3, [pc, #240]	@ (8004004 <HAL_RCC_OscConfig+0x4c4>)
 8003f14:	69db      	ldr	r3, [r3, #28]
 8003f16:	4a3b      	ldr	r2, [pc, #236]	@ (8004004 <HAL_RCC_OscConfig+0x4c4>)
 8003f18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f1c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	f000 8087 	beq.w	8004036 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f28:	4b36      	ldr	r3, [pc, #216]	@ (8004004 <HAL_RCC_OscConfig+0x4c4>)
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f003 030c 	and.w	r3, r3, #12
 8003f30:	2b08      	cmp	r3, #8
 8003f32:	d061      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	69db      	ldr	r3, [r3, #28]
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d146      	bne.n	8003fca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f3c:	4b33      	ldr	r3, [pc, #204]	@ (800400c <HAL_RCC_OscConfig+0x4cc>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f42:	f7fd fdf9 	bl	8001b38 <HAL_GetTick>
 8003f46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f48:	e008      	b.n	8003f5c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f4a:	f7fd fdf5 	bl	8001b38 <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d901      	bls.n	8003f5c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e06d      	b.n	8004038 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f5c:	4b29      	ldr	r3, [pc, #164]	@ (8004004 <HAL_RCC_OscConfig+0x4c4>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1f0      	bne.n	8003f4a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a1b      	ldr	r3, [r3, #32]
 8003f6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f70:	d108      	bne.n	8003f84 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003f72:	4b24      	ldr	r3, [pc, #144]	@ (8004004 <HAL_RCC_OscConfig+0x4c4>)
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	4921      	ldr	r1, [pc, #132]	@ (8004004 <HAL_RCC_OscConfig+0x4c4>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f84:	4b1f      	ldr	r3, [pc, #124]	@ (8004004 <HAL_RCC_OscConfig+0x4c4>)
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a19      	ldr	r1, [r3, #32]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f94:	430b      	orrs	r3, r1
 8003f96:	491b      	ldr	r1, [pc, #108]	@ (8004004 <HAL_RCC_OscConfig+0x4c4>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f9c:	4b1b      	ldr	r3, [pc, #108]	@ (800400c <HAL_RCC_OscConfig+0x4cc>)
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa2:	f7fd fdc9 	bl	8001b38 <HAL_GetTick>
 8003fa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fa8:	e008      	b.n	8003fbc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003faa:	f7fd fdc5 	bl	8001b38 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d901      	bls.n	8003fbc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e03d      	b.n	8004038 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fbc:	4b11      	ldr	r3, [pc, #68]	@ (8004004 <HAL_RCC_OscConfig+0x4c4>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d0f0      	beq.n	8003faa <HAL_RCC_OscConfig+0x46a>
 8003fc8:	e035      	b.n	8004036 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fca:	4b10      	ldr	r3, [pc, #64]	@ (800400c <HAL_RCC_OscConfig+0x4cc>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd0:	f7fd fdb2 	bl	8001b38 <HAL_GetTick>
 8003fd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fd6:	e008      	b.n	8003fea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fd8:	f7fd fdae 	bl	8001b38 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e026      	b.n	8004038 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fea:	4b06      	ldr	r3, [pc, #24]	@ (8004004 <HAL_RCC_OscConfig+0x4c4>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1f0      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x498>
 8003ff6:	e01e      	b.n	8004036 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	69db      	ldr	r3, [r3, #28]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d107      	bne.n	8004010 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e019      	b.n	8004038 <HAL_RCC_OscConfig+0x4f8>
 8004004:	40021000 	.word	0x40021000
 8004008:	40007000 	.word	0x40007000
 800400c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004010:	4b0b      	ldr	r3, [pc, #44]	@ (8004040 <HAL_RCC_OscConfig+0x500>)
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a1b      	ldr	r3, [r3, #32]
 8004020:	429a      	cmp	r2, r3
 8004022:	d106      	bne.n	8004032 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800402e:	429a      	cmp	r2, r3
 8004030:	d001      	beq.n	8004036 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e000      	b.n	8004038 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3718      	adds	r7, #24
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	40021000 	.word	0x40021000

08004044 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d101      	bne.n	8004058 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e0d0      	b.n	80041fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004058:	4b6a      	ldr	r3, [pc, #424]	@ (8004204 <HAL_RCC_ClockConfig+0x1c0>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0307 	and.w	r3, r3, #7
 8004060:	683a      	ldr	r2, [r7, #0]
 8004062:	429a      	cmp	r2, r3
 8004064:	d910      	bls.n	8004088 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004066:	4b67      	ldr	r3, [pc, #412]	@ (8004204 <HAL_RCC_ClockConfig+0x1c0>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f023 0207 	bic.w	r2, r3, #7
 800406e:	4965      	ldr	r1, [pc, #404]	@ (8004204 <HAL_RCC_ClockConfig+0x1c0>)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	4313      	orrs	r3, r2
 8004074:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004076:	4b63      	ldr	r3, [pc, #396]	@ (8004204 <HAL_RCC_ClockConfig+0x1c0>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0307 	and.w	r3, r3, #7
 800407e:	683a      	ldr	r2, [r7, #0]
 8004080:	429a      	cmp	r2, r3
 8004082:	d001      	beq.n	8004088 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e0b8      	b.n	80041fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0302 	and.w	r3, r3, #2
 8004090:	2b00      	cmp	r3, #0
 8004092:	d020      	beq.n	80040d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0304 	and.w	r3, r3, #4
 800409c:	2b00      	cmp	r3, #0
 800409e:	d005      	beq.n	80040ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040a0:	4b59      	ldr	r3, [pc, #356]	@ (8004208 <HAL_RCC_ClockConfig+0x1c4>)
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	4a58      	ldr	r2, [pc, #352]	@ (8004208 <HAL_RCC_ClockConfig+0x1c4>)
 80040a6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80040aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0308 	and.w	r3, r3, #8
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d005      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040b8:	4b53      	ldr	r3, [pc, #332]	@ (8004208 <HAL_RCC_ClockConfig+0x1c4>)
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	4a52      	ldr	r2, [pc, #328]	@ (8004208 <HAL_RCC_ClockConfig+0x1c4>)
 80040be:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80040c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040c4:	4b50      	ldr	r3, [pc, #320]	@ (8004208 <HAL_RCC_ClockConfig+0x1c4>)
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	494d      	ldr	r1, [pc, #308]	@ (8004208 <HAL_RCC_ClockConfig+0x1c4>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d040      	beq.n	8004164 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d107      	bne.n	80040fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ea:	4b47      	ldr	r3, [pc, #284]	@ (8004208 <HAL_RCC_ClockConfig+0x1c4>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d115      	bne.n	8004122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e07f      	b.n	80041fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d107      	bne.n	8004112 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004102:	4b41      	ldr	r3, [pc, #260]	@ (8004208 <HAL_RCC_ClockConfig+0x1c4>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d109      	bne.n	8004122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e073      	b.n	80041fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004112:	4b3d      	ldr	r3, [pc, #244]	@ (8004208 <HAL_RCC_ClockConfig+0x1c4>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	2b00      	cmp	r3, #0
 800411c:	d101      	bne.n	8004122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e06b      	b.n	80041fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004122:	4b39      	ldr	r3, [pc, #228]	@ (8004208 <HAL_RCC_ClockConfig+0x1c4>)
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f023 0203 	bic.w	r2, r3, #3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	4936      	ldr	r1, [pc, #216]	@ (8004208 <HAL_RCC_ClockConfig+0x1c4>)
 8004130:	4313      	orrs	r3, r2
 8004132:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004134:	f7fd fd00 	bl	8001b38 <HAL_GetTick>
 8004138:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800413a:	e00a      	b.n	8004152 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800413c:	f7fd fcfc 	bl	8001b38 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	f241 3288 	movw	r2, #5000	@ 0x1388
 800414a:	4293      	cmp	r3, r2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e053      	b.n	80041fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004152:	4b2d      	ldr	r3, [pc, #180]	@ (8004208 <HAL_RCC_ClockConfig+0x1c4>)
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f003 020c 	and.w	r2, r3, #12
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	429a      	cmp	r2, r3
 8004162:	d1eb      	bne.n	800413c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004164:	4b27      	ldr	r3, [pc, #156]	@ (8004204 <HAL_RCC_ClockConfig+0x1c0>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0307 	and.w	r3, r3, #7
 800416c:	683a      	ldr	r2, [r7, #0]
 800416e:	429a      	cmp	r2, r3
 8004170:	d210      	bcs.n	8004194 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004172:	4b24      	ldr	r3, [pc, #144]	@ (8004204 <HAL_RCC_ClockConfig+0x1c0>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f023 0207 	bic.w	r2, r3, #7
 800417a:	4922      	ldr	r1, [pc, #136]	@ (8004204 <HAL_RCC_ClockConfig+0x1c0>)
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	4313      	orrs	r3, r2
 8004180:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004182:	4b20      	ldr	r3, [pc, #128]	@ (8004204 <HAL_RCC_ClockConfig+0x1c0>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0307 	and.w	r3, r3, #7
 800418a:	683a      	ldr	r2, [r7, #0]
 800418c:	429a      	cmp	r2, r3
 800418e:	d001      	beq.n	8004194 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e032      	b.n	80041fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0304 	and.w	r3, r3, #4
 800419c:	2b00      	cmp	r3, #0
 800419e:	d008      	beq.n	80041b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041a0:	4b19      	ldr	r3, [pc, #100]	@ (8004208 <HAL_RCC_ClockConfig+0x1c4>)
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	4916      	ldr	r1, [pc, #88]	@ (8004208 <HAL_RCC_ClockConfig+0x1c4>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0308 	and.w	r3, r3, #8
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d009      	beq.n	80041d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80041be:	4b12      	ldr	r3, [pc, #72]	@ (8004208 <HAL_RCC_ClockConfig+0x1c4>)
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	00db      	lsls	r3, r3, #3
 80041cc:	490e      	ldr	r1, [pc, #56]	@ (8004208 <HAL_RCC_ClockConfig+0x1c4>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80041d2:	f000 f821 	bl	8004218 <HAL_RCC_GetSysClockFreq>
 80041d6:	4602      	mov	r2, r0
 80041d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004208 <HAL_RCC_ClockConfig+0x1c4>)
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	091b      	lsrs	r3, r3, #4
 80041de:	f003 030f 	and.w	r3, r3, #15
 80041e2:	490a      	ldr	r1, [pc, #40]	@ (800420c <HAL_RCC_ClockConfig+0x1c8>)
 80041e4:	5ccb      	ldrb	r3, [r1, r3]
 80041e6:	fa22 f303 	lsr.w	r3, r2, r3
 80041ea:	4a09      	ldr	r2, [pc, #36]	@ (8004210 <HAL_RCC_ClockConfig+0x1cc>)
 80041ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80041ee:	4b09      	ldr	r3, [pc, #36]	@ (8004214 <HAL_RCC_ClockConfig+0x1d0>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7fd fb1c 	bl	8001830 <HAL_InitTick>

  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	40022000 	.word	0x40022000
 8004208:	40021000 	.word	0x40021000
 800420c:	080082e8 	.word	0x080082e8
 8004210:	20000000 	.word	0x20000000
 8004214:	20000004 	.word	0x20000004

08004218 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004218:	b480      	push	{r7}
 800421a:	b087      	sub	sp, #28
 800421c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800421e:	2300      	movs	r3, #0
 8004220:	60fb      	str	r3, [r7, #12]
 8004222:	2300      	movs	r3, #0
 8004224:	60bb      	str	r3, [r7, #8]
 8004226:	2300      	movs	r3, #0
 8004228:	617b      	str	r3, [r7, #20]
 800422a:	2300      	movs	r3, #0
 800422c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800422e:	2300      	movs	r3, #0
 8004230:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004232:	4b1e      	ldr	r3, [pc, #120]	@ (80042ac <HAL_RCC_GetSysClockFreq+0x94>)
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f003 030c 	and.w	r3, r3, #12
 800423e:	2b04      	cmp	r3, #4
 8004240:	d002      	beq.n	8004248 <HAL_RCC_GetSysClockFreq+0x30>
 8004242:	2b08      	cmp	r3, #8
 8004244:	d003      	beq.n	800424e <HAL_RCC_GetSysClockFreq+0x36>
 8004246:	e027      	b.n	8004298 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004248:	4b19      	ldr	r3, [pc, #100]	@ (80042b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800424a:	613b      	str	r3, [r7, #16]
      break;
 800424c:	e027      	b.n	800429e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	0c9b      	lsrs	r3, r3, #18
 8004252:	f003 030f 	and.w	r3, r3, #15
 8004256:	4a17      	ldr	r2, [pc, #92]	@ (80042b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004258:	5cd3      	ldrb	r3, [r2, r3]
 800425a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d010      	beq.n	8004288 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004266:	4b11      	ldr	r3, [pc, #68]	@ (80042ac <HAL_RCC_GetSysClockFreq+0x94>)
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	0c5b      	lsrs	r3, r3, #17
 800426c:	f003 0301 	and.w	r3, r3, #1
 8004270:	4a11      	ldr	r2, [pc, #68]	@ (80042b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004272:	5cd3      	ldrb	r3, [r2, r3]
 8004274:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a0d      	ldr	r2, [pc, #52]	@ (80042b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800427a:	fb03 f202 	mul.w	r2, r3, r2
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	fbb2 f3f3 	udiv	r3, r2, r3
 8004284:	617b      	str	r3, [r7, #20]
 8004286:	e004      	b.n	8004292 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a0c      	ldr	r2, [pc, #48]	@ (80042bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800428c:	fb02 f303 	mul.w	r3, r2, r3
 8004290:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	613b      	str	r3, [r7, #16]
      break;
 8004296:	e002      	b.n	800429e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004298:	4b05      	ldr	r3, [pc, #20]	@ (80042b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800429a:	613b      	str	r3, [r7, #16]
      break;
 800429c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800429e:	693b      	ldr	r3, [r7, #16]
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	371c      	adds	r7, #28
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bc80      	pop	{r7}
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	40021000 	.word	0x40021000
 80042b0:	007a1200 	.word	0x007a1200
 80042b4:	08008300 	.word	0x08008300
 80042b8:	08008310 	.word	0x08008310
 80042bc:	003d0900 	.word	0x003d0900

080042c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042c0:	b480      	push	{r7}
 80042c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042c4:	4b02      	ldr	r3, [pc, #8]	@ (80042d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80042c6:	681b      	ldr	r3, [r3, #0]
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bc80      	pop	{r7}
 80042ce:	4770      	bx	lr
 80042d0:	20000000 	.word	0x20000000

080042d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80042d8:	f7ff fff2 	bl	80042c0 <HAL_RCC_GetHCLKFreq>
 80042dc:	4602      	mov	r2, r0
 80042de:	4b05      	ldr	r3, [pc, #20]	@ (80042f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	0a1b      	lsrs	r3, r3, #8
 80042e4:	f003 0307 	and.w	r3, r3, #7
 80042e8:	4903      	ldr	r1, [pc, #12]	@ (80042f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042ea:	5ccb      	ldrb	r3, [r1, r3]
 80042ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	40021000 	.word	0x40021000
 80042f8:	080082f8 	.word	0x080082f8

080042fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004300:	f7ff ffde 	bl	80042c0 <HAL_RCC_GetHCLKFreq>
 8004304:	4602      	mov	r2, r0
 8004306:	4b05      	ldr	r3, [pc, #20]	@ (800431c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	0adb      	lsrs	r3, r3, #11
 800430c:	f003 0307 	and.w	r3, r3, #7
 8004310:	4903      	ldr	r1, [pc, #12]	@ (8004320 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004312:	5ccb      	ldrb	r3, [r1, r3]
 8004314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004318:	4618      	mov	r0, r3
 800431a:	bd80      	pop	{r7, pc}
 800431c:	40021000 	.word	0x40021000
 8004320:	080082f8 	.word	0x080082f8

08004324 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	220f      	movs	r2, #15
 8004332:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004334:	4b11      	ldr	r3, [pc, #68]	@ (800437c <HAL_RCC_GetClockConfig+0x58>)
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f003 0203 	and.w	r2, r3, #3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004340:	4b0e      	ldr	r3, [pc, #56]	@ (800437c <HAL_RCC_GetClockConfig+0x58>)
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800434c:	4b0b      	ldr	r3, [pc, #44]	@ (800437c <HAL_RCC_GetClockConfig+0x58>)
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004358:	4b08      	ldr	r3, [pc, #32]	@ (800437c <HAL_RCC_GetClockConfig+0x58>)
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	08db      	lsrs	r3, r3, #3
 800435e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004366:	4b06      	ldr	r3, [pc, #24]	@ (8004380 <HAL_RCC_GetClockConfig+0x5c>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0207 	and.w	r2, r3, #7
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004372:	bf00      	nop
 8004374:	370c      	adds	r7, #12
 8004376:	46bd      	mov	sp, r7
 8004378:	bc80      	pop	{r7}
 800437a:	4770      	bx	lr
 800437c:	40021000 	.word	0x40021000
 8004380:	40022000 	.word	0x40022000

08004384 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800438c:	4b0a      	ldr	r3, [pc, #40]	@ (80043b8 <RCC_Delay+0x34>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a0a      	ldr	r2, [pc, #40]	@ (80043bc <RCC_Delay+0x38>)
 8004392:	fba2 2303 	umull	r2, r3, r2, r3
 8004396:	0a5b      	lsrs	r3, r3, #9
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	fb02 f303 	mul.w	r3, r2, r3
 800439e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80043a0:	bf00      	nop
  }
  while (Delay --);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	1e5a      	subs	r2, r3, #1
 80043a6:	60fa      	str	r2, [r7, #12]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d1f9      	bne.n	80043a0 <RCC_Delay+0x1c>
}
 80043ac:	bf00      	nop
 80043ae:	bf00      	nop
 80043b0:	3714      	adds	r7, #20
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bc80      	pop	{r7}
 80043b6:	4770      	bx	lr
 80043b8:	20000000 	.word	0x20000000
 80043bc:	10624dd3 	.word	0x10624dd3

080043c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b086      	sub	sp, #24
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80043c8:	2300      	movs	r3, #0
 80043ca:	613b      	str	r3, [r7, #16]
 80043cc:	2300      	movs	r3, #0
 80043ce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0301 	and.w	r3, r3, #1
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d07d      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80043dc:	2300      	movs	r3, #0
 80043de:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043e0:	4b4f      	ldr	r3, [pc, #316]	@ (8004520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043e2:	69db      	ldr	r3, [r3, #28]
 80043e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d10d      	bne.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043ec:	4b4c      	ldr	r3, [pc, #304]	@ (8004520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043ee:	69db      	ldr	r3, [r3, #28]
 80043f0:	4a4b      	ldr	r2, [pc, #300]	@ (8004520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043f6:	61d3      	str	r3, [r2, #28]
 80043f8:	4b49      	ldr	r3, [pc, #292]	@ (8004520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043fa:	69db      	ldr	r3, [r3, #28]
 80043fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004400:	60bb      	str	r3, [r7, #8]
 8004402:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004404:	2301      	movs	r3, #1
 8004406:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004408:	4b46      	ldr	r3, [pc, #280]	@ (8004524 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004410:	2b00      	cmp	r3, #0
 8004412:	d118      	bne.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004414:	4b43      	ldr	r3, [pc, #268]	@ (8004524 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a42      	ldr	r2, [pc, #264]	@ (8004524 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800441a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800441e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004420:	f7fd fb8a 	bl	8001b38 <HAL_GetTick>
 8004424:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004426:	e008      	b.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004428:	f7fd fb86 	bl	8001b38 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b64      	cmp	r3, #100	@ 0x64
 8004434:	d901      	bls.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e06d      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800443a:	4b3a      	ldr	r3, [pc, #232]	@ (8004524 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004442:	2b00      	cmp	r3, #0
 8004444:	d0f0      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004446:	4b36      	ldr	r3, [pc, #216]	@ (8004520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800444e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d02e      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	429a      	cmp	r2, r3
 8004462:	d027      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004464:	4b2e      	ldr	r3, [pc, #184]	@ (8004520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004466:	6a1b      	ldr	r3, [r3, #32]
 8004468:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800446c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800446e:	4b2e      	ldr	r3, [pc, #184]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004470:	2201      	movs	r2, #1
 8004472:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004474:	4b2c      	ldr	r3, [pc, #176]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004476:	2200      	movs	r2, #0
 8004478:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800447a:	4a29      	ldr	r2, [pc, #164]	@ (8004520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b00      	cmp	r3, #0
 8004488:	d014      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800448a:	f7fd fb55 	bl	8001b38 <HAL_GetTick>
 800448e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004490:	e00a      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004492:	f7fd fb51 	bl	8001b38 <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d901      	bls.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e036      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044a8:	4b1d      	ldr	r3, [pc, #116]	@ (8004520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044aa:	6a1b      	ldr	r3, [r3, #32]
 80044ac:	f003 0302 	and.w	r3, r3, #2
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d0ee      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044b4:	4b1a      	ldr	r3, [pc, #104]	@ (8004520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044b6:	6a1b      	ldr	r3, [r3, #32]
 80044b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	4917      	ldr	r1, [pc, #92]	@ (8004520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80044c6:	7dfb      	ldrb	r3, [r7, #23]
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d105      	bne.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044cc:	4b14      	ldr	r3, [pc, #80]	@ (8004520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ce:	69db      	ldr	r3, [r3, #28]
 80044d0:	4a13      	ldr	r2, [pc, #76]	@ (8004520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044d6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d008      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044e4:	4b0e      	ldr	r3, [pc, #56]	@ (8004520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	490b      	ldr	r1, [pc, #44]	@ (8004520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0310 	and.w	r3, r3, #16
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d008      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004502:	4b07      	ldr	r3, [pc, #28]	@ (8004520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	4904      	ldr	r1, [pc, #16]	@ (8004520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004510:	4313      	orrs	r3, r2
 8004512:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3718      	adds	r7, #24
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	40021000 	.word	0x40021000
 8004524:	40007000 	.word	0x40007000
 8004528:	42420440 	.word	0x42420440

0800452c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d101      	bne.n	800453e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e041      	b.n	80045c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004544:	b2db      	uxtb	r3, r3
 8004546:	2b00      	cmp	r3, #0
 8004548:	d106      	bne.n	8004558 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 f839 	bl	80045ca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2202      	movs	r2, #2
 800455c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	3304      	adds	r3, #4
 8004568:	4619      	mov	r1, r3
 800456a:	4610      	mov	r0, r2
 800456c:	f000 fdfa 	bl	8005164 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3708      	adds	r7, #8
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80045ca:	b480      	push	{r7}
 80045cc:	b083      	sub	sp, #12
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80045d2:	bf00      	nop
 80045d4:	370c      	adds	r7, #12
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bc80      	pop	{r7}
 80045da:	4770      	bx	lr

080045dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d001      	beq.n	80045f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e03a      	b.n	800466a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2202      	movs	r2, #2
 80045f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68da      	ldr	r2, [r3, #12]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f042 0201 	orr.w	r2, r2, #1
 800460a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a18      	ldr	r2, [pc, #96]	@ (8004674 <HAL_TIM_Base_Start_IT+0x98>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d00e      	beq.n	8004634 <HAL_TIM_Base_Start_IT+0x58>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800461e:	d009      	beq.n	8004634 <HAL_TIM_Base_Start_IT+0x58>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a14      	ldr	r2, [pc, #80]	@ (8004678 <HAL_TIM_Base_Start_IT+0x9c>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d004      	beq.n	8004634 <HAL_TIM_Base_Start_IT+0x58>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a13      	ldr	r2, [pc, #76]	@ (800467c <HAL_TIM_Base_Start_IT+0xa0>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d111      	bne.n	8004658 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f003 0307 	and.w	r3, r3, #7
 800463e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2b06      	cmp	r3, #6
 8004644:	d010      	beq.n	8004668 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f042 0201 	orr.w	r2, r2, #1
 8004654:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004656:	e007      	b.n	8004668 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f042 0201 	orr.w	r2, r2, #1
 8004666:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3714      	adds	r7, #20
 800466e:	46bd      	mov	sp, r7
 8004670:	bc80      	pop	{r7}
 8004672:	4770      	bx	lr
 8004674:	40012c00 	.word	0x40012c00
 8004678:	40000400 	.word	0x40000400
 800467c:	40000800 	.word	0x40000800

08004680 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d101      	bne.n	8004692 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e041      	b.n	8004716 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2b00      	cmp	r3, #0
 800469c:	d106      	bne.n	80046ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f7fc fff0 	bl	800168c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2202      	movs	r2, #2
 80046b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	3304      	adds	r3, #4
 80046bc:	4619      	mov	r1, r3
 80046be:	4610      	mov	r0, r2
 80046c0:	f000 fd50 	bl	8005164 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3708      	adds	r7, #8
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
	...

08004720 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b086      	sub	sp, #24
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
 800472c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800472e:	2300      	movs	r3, #0
 8004730:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d109      	bne.n	800474c <HAL_TIM_PWM_Start_DMA+0x2c>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2b02      	cmp	r3, #2
 8004742:	bf0c      	ite	eq
 8004744:	2301      	moveq	r3, #1
 8004746:	2300      	movne	r3, #0
 8004748:	b2db      	uxtb	r3, r3
 800474a:	e022      	b.n	8004792 <HAL_TIM_PWM_Start_DMA+0x72>
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	2b04      	cmp	r3, #4
 8004750:	d109      	bne.n	8004766 <HAL_TIM_PWM_Start_DMA+0x46>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004758:	b2db      	uxtb	r3, r3
 800475a:	2b02      	cmp	r3, #2
 800475c:	bf0c      	ite	eq
 800475e:	2301      	moveq	r3, #1
 8004760:	2300      	movne	r3, #0
 8004762:	b2db      	uxtb	r3, r3
 8004764:	e015      	b.n	8004792 <HAL_TIM_PWM_Start_DMA+0x72>
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	2b08      	cmp	r3, #8
 800476a:	d109      	bne.n	8004780 <HAL_TIM_PWM_Start_DMA+0x60>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004772:	b2db      	uxtb	r3, r3
 8004774:	2b02      	cmp	r3, #2
 8004776:	bf0c      	ite	eq
 8004778:	2301      	moveq	r3, #1
 800477a:	2300      	movne	r3, #0
 800477c:	b2db      	uxtb	r3, r3
 800477e:	e008      	b.n	8004792 <HAL_TIM_PWM_Start_DMA+0x72>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004786:	b2db      	uxtb	r3, r3
 8004788:	2b02      	cmp	r3, #2
 800478a:	bf0c      	ite	eq
 800478c:	2301      	moveq	r3, #1
 800478e:	2300      	movne	r3, #0
 8004790:	b2db      	uxtb	r3, r3
 8004792:	2b00      	cmp	r3, #0
 8004794:	d001      	beq.n	800479a <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8004796:	2302      	movs	r3, #2
 8004798:	e153      	b.n	8004a42 <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d109      	bne.n	80047b4 <HAL_TIM_PWM_Start_DMA+0x94>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	bf0c      	ite	eq
 80047ac:	2301      	moveq	r3, #1
 80047ae:	2300      	movne	r3, #0
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	e022      	b.n	80047fa <HAL_TIM_PWM_Start_DMA+0xda>
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	2b04      	cmp	r3, #4
 80047b8:	d109      	bne.n	80047ce <HAL_TIM_PWM_Start_DMA+0xae>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	bf0c      	ite	eq
 80047c6:	2301      	moveq	r3, #1
 80047c8:	2300      	movne	r3, #0
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	e015      	b.n	80047fa <HAL_TIM_PWM_Start_DMA+0xda>
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	2b08      	cmp	r3, #8
 80047d2:	d109      	bne.n	80047e8 <HAL_TIM_PWM_Start_DMA+0xc8>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	2b01      	cmp	r3, #1
 80047de:	bf0c      	ite	eq
 80047e0:	2301      	moveq	r3, #1
 80047e2:	2300      	movne	r3, #0
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	e008      	b.n	80047fa <HAL_TIM_PWM_Start_DMA+0xda>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	bf0c      	ite	eq
 80047f4:	2301      	moveq	r3, #1
 80047f6:	2300      	movne	r3, #0
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d024      	beq.n	8004848 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d002      	beq.n	800480a <HAL_TIM_PWM_Start_DMA+0xea>
 8004804:	887b      	ldrh	r3, [r7, #2]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d101      	bne.n	800480e <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e119      	b.n	8004a42 <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d104      	bne.n	800481e <HAL_TIM_PWM_Start_DMA+0xfe>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2202      	movs	r2, #2
 8004818:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800481c:	e016      	b.n	800484c <HAL_TIM_PWM_Start_DMA+0x12c>
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	2b04      	cmp	r3, #4
 8004822:	d104      	bne.n	800482e <HAL_TIM_PWM_Start_DMA+0x10e>
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2202      	movs	r2, #2
 8004828:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800482c:	e00e      	b.n	800484c <HAL_TIM_PWM_Start_DMA+0x12c>
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	2b08      	cmp	r3, #8
 8004832:	d104      	bne.n	800483e <HAL_TIM_PWM_Start_DMA+0x11e>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2202      	movs	r2, #2
 8004838:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800483c:	e006      	b.n	800484c <HAL_TIM_PWM_Start_DMA+0x12c>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2202      	movs	r2, #2
 8004842:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004846:	e001      	b.n	800484c <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e0fa      	b.n	8004a42 <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	2b0c      	cmp	r3, #12
 8004850:	f200 80ae 	bhi.w	80049b0 <HAL_TIM_PWM_Start_DMA+0x290>
 8004854:	a201      	add	r2, pc, #4	@ (adr r2, 800485c <HAL_TIM_PWM_Start_DMA+0x13c>)
 8004856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800485a:	bf00      	nop
 800485c:	08004891 	.word	0x08004891
 8004860:	080049b1 	.word	0x080049b1
 8004864:	080049b1 	.word	0x080049b1
 8004868:	080049b1 	.word	0x080049b1
 800486c:	080048d9 	.word	0x080048d9
 8004870:	080049b1 	.word	0x080049b1
 8004874:	080049b1 	.word	0x080049b1
 8004878:	080049b1 	.word	0x080049b1
 800487c:	08004921 	.word	0x08004921
 8004880:	080049b1 	.word	0x080049b1
 8004884:	080049b1 	.word	0x080049b1
 8004888:	080049b1 	.word	0x080049b1
 800488c:	08004969 	.word	0x08004969
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004894:	4a6d      	ldr	r2, [pc, #436]	@ (8004a4c <HAL_TIM_PWM_Start_DMA+0x32c>)
 8004896:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800489c:	4a6c      	ldr	r2, [pc, #432]	@ (8004a50 <HAL_TIM_PWM_Start_DMA+0x330>)
 800489e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a4:	4a6b      	ldr	r2, [pc, #428]	@ (8004a54 <HAL_TIM_PWM_Start_DMA+0x334>)
 80048a6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80048ac:	6879      	ldr	r1, [r7, #4]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	3334      	adds	r3, #52	@ 0x34
 80048b4:	461a      	mov	r2, r3
 80048b6:	887b      	ldrh	r3, [r7, #2]
 80048b8:	f7fe fd22 	bl	8003300 <HAL_DMA_Start_IT>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d001      	beq.n	80048c6 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e0bd      	b.n	8004a42 <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68da      	ldr	r2, [r3, #12]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048d4:	60da      	str	r2, [r3, #12]
      break;
 80048d6:	e06e      	b.n	80049b6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048dc:	4a5b      	ldr	r2, [pc, #364]	@ (8004a4c <HAL_TIM_PWM_Start_DMA+0x32c>)
 80048de:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048e4:	4a5a      	ldr	r2, [pc, #360]	@ (8004a50 <HAL_TIM_PWM_Start_DMA+0x330>)
 80048e6:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ec:	4a59      	ldr	r2, [pc, #356]	@ (8004a54 <HAL_TIM_PWM_Start_DMA+0x334>)
 80048ee:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80048f4:	6879      	ldr	r1, [r7, #4]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	3338      	adds	r3, #56	@ 0x38
 80048fc:	461a      	mov	r2, r3
 80048fe:	887b      	ldrh	r3, [r7, #2]
 8004900:	f7fe fcfe 	bl	8003300 <HAL_DMA_Start_IT>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d001      	beq.n	800490e <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e099      	b.n	8004a42 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68da      	ldr	r2, [r3, #12]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800491c:	60da      	str	r2, [r3, #12]
      break;
 800491e:	e04a      	b.n	80049b6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004924:	4a49      	ldr	r2, [pc, #292]	@ (8004a4c <HAL_TIM_PWM_Start_DMA+0x32c>)
 8004926:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800492c:	4a48      	ldr	r2, [pc, #288]	@ (8004a50 <HAL_TIM_PWM_Start_DMA+0x330>)
 800492e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004934:	4a47      	ldr	r2, [pc, #284]	@ (8004a54 <HAL_TIM_PWM_Start_DMA+0x334>)
 8004936:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800493c:	6879      	ldr	r1, [r7, #4]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	333c      	adds	r3, #60	@ 0x3c
 8004944:	461a      	mov	r2, r3
 8004946:	887b      	ldrh	r3, [r7, #2]
 8004948:	f7fe fcda 	bl	8003300 <HAL_DMA_Start_IT>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d001      	beq.n	8004956 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e075      	b.n	8004a42 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68da      	ldr	r2, [r3, #12]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004964:	60da      	str	r2, [r3, #12]
      break;
 8004966:	e026      	b.n	80049b6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800496c:	4a37      	ldr	r2, [pc, #220]	@ (8004a4c <HAL_TIM_PWM_Start_DMA+0x32c>)
 800496e:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004974:	4a36      	ldr	r2, [pc, #216]	@ (8004a50 <HAL_TIM_PWM_Start_DMA+0x330>)
 8004976:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800497c:	4a35      	ldr	r2, [pc, #212]	@ (8004a54 <HAL_TIM_PWM_Start_DMA+0x334>)
 800497e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004984:	6879      	ldr	r1, [r7, #4]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	3340      	adds	r3, #64	@ 0x40
 800498c:	461a      	mov	r2, r3
 800498e:	887b      	ldrh	r3, [r7, #2]
 8004990:	f7fe fcb6 	bl	8003300 <HAL_DMA_Start_IT>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d001      	beq.n	800499e <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e051      	b.n	8004a42 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68da      	ldr	r2, [r3, #12]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80049ac:	60da      	str	r2, [r3, #12]
      break;
 80049ae:	e002      	b.n	80049b6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	75fb      	strb	r3, [r7, #23]
      break;
 80049b4:	bf00      	nop
  }

  if (status == HAL_OK)
 80049b6:	7dfb      	ldrb	r3, [r7, #23]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d141      	bne.n	8004a40 <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2201      	movs	r2, #1
 80049c2:	68b9      	ldr	r1, [r7, #8]
 80049c4:	4618      	mov	r0, r3
 80049c6:	f000 fdc3 	bl	8005550 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a22      	ldr	r2, [pc, #136]	@ (8004a58 <HAL_TIM_PWM_Start_DMA+0x338>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d107      	bne.n	80049e4 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80049e2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a1b      	ldr	r2, [pc, #108]	@ (8004a58 <HAL_TIM_PWM_Start_DMA+0x338>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d00e      	beq.n	8004a0c <HAL_TIM_PWM_Start_DMA+0x2ec>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049f6:	d009      	beq.n	8004a0c <HAL_TIM_PWM_Start_DMA+0x2ec>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a17      	ldr	r2, [pc, #92]	@ (8004a5c <HAL_TIM_PWM_Start_DMA+0x33c>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d004      	beq.n	8004a0c <HAL_TIM_PWM_Start_DMA+0x2ec>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a16      	ldr	r2, [pc, #88]	@ (8004a60 <HAL_TIM_PWM_Start_DMA+0x340>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d111      	bne.n	8004a30 <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f003 0307 	and.w	r3, r3, #7
 8004a16:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	2b06      	cmp	r3, #6
 8004a1c:	d010      	beq.n	8004a40 <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f042 0201 	orr.w	r2, r2, #1
 8004a2c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a2e:	e007      	b.n	8004a40 <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f042 0201 	orr.w	r2, r2, #1
 8004a3e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004a40:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3718      	adds	r7, #24
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	08005053 	.word	0x08005053
 8004a50:	080050fb 	.word	0x080050fb
 8004a54:	08004fc1 	.word	0x08004fc1
 8004a58:	40012c00 	.word	0x40012c00
 8004a5c:	40000400 	.word	0x40000400
 8004a60:	40000800 	.word	0x40000800

08004a64 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	2b0c      	cmp	r3, #12
 8004a76:	d855      	bhi.n	8004b24 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8004a78:	a201      	add	r2, pc, #4	@ (adr r2, 8004a80 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8004a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a7e:	bf00      	nop
 8004a80:	08004ab5 	.word	0x08004ab5
 8004a84:	08004b25 	.word	0x08004b25
 8004a88:	08004b25 	.word	0x08004b25
 8004a8c:	08004b25 	.word	0x08004b25
 8004a90:	08004ad1 	.word	0x08004ad1
 8004a94:	08004b25 	.word	0x08004b25
 8004a98:	08004b25 	.word	0x08004b25
 8004a9c:	08004b25 	.word	0x08004b25
 8004aa0:	08004aed 	.word	0x08004aed
 8004aa4:	08004b25 	.word	0x08004b25
 8004aa8:	08004b25 	.word	0x08004b25
 8004aac:	08004b25 	.word	0x08004b25
 8004ab0:	08004b09 	.word	0x08004b09
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68da      	ldr	r2, [r3, #12]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004ac2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f7fe fcb5 	bl	8003438 <HAL_DMA_Abort_IT>
      break;
 8004ace:	e02c      	b.n	8004b2a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68da      	ldr	r2, [r3, #12]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ade:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f7fe fca7 	bl	8003438 <HAL_DMA_Abort_IT>
      break;
 8004aea:	e01e      	b.n	8004b2a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68da      	ldr	r2, [r3, #12]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004afa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b00:	4618      	mov	r0, r3
 8004b02:	f7fe fc99 	bl	8003438 <HAL_DMA_Abort_IT>
      break;
 8004b06:	e010      	b.n	8004b2a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68da      	ldr	r2, [r3, #12]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004b16:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f7fe fc8b 	bl	8003438 <HAL_DMA_Abort_IT>
      break;
 8004b22:	e002      	b.n	8004b2a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	73fb      	strb	r3, [r7, #15]
      break;
 8004b28:	bf00      	nop
  }

  if (status == HAL_OK)
 8004b2a:	7bfb      	ldrb	r3, [r7, #15]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d157      	bne.n	8004be0 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2200      	movs	r2, #0
 8004b36:	6839      	ldr	r1, [r7, #0]
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f000 fd09 	bl	8005550 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a2a      	ldr	r2, [pc, #168]	@ (8004bec <HAL_TIM_PWM_Stop_DMA+0x188>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d117      	bne.n	8004b78 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6a1a      	ldr	r2, [r3, #32]
 8004b4e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004b52:	4013      	ands	r3, r2
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d10f      	bne.n	8004b78 <HAL_TIM_PWM_Stop_DMA+0x114>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	6a1a      	ldr	r2, [r3, #32]
 8004b5e:	f240 4344 	movw	r3, #1092	@ 0x444
 8004b62:	4013      	ands	r3, r2
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d107      	bne.n	8004b78 <HAL_TIM_PWM_Stop_DMA+0x114>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004b76:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	6a1a      	ldr	r2, [r3, #32]
 8004b7e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004b82:	4013      	ands	r3, r2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d10f      	bne.n	8004ba8 <HAL_TIM_PWM_Stop_DMA+0x144>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	6a1a      	ldr	r2, [r3, #32]
 8004b8e:	f240 4344 	movw	r3, #1092	@ 0x444
 8004b92:	4013      	ands	r3, r2
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d107      	bne.n	8004ba8 <HAL_TIM_PWM_Stop_DMA+0x144>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f022 0201 	bic.w	r2, r2, #1
 8004ba6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d104      	bne.n	8004bb8 <HAL_TIM_PWM_Stop_DMA+0x154>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004bb6:	e013      	b.n	8004be0 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	2b04      	cmp	r3, #4
 8004bbc:	d104      	bne.n	8004bc8 <HAL_TIM_PWM_Stop_DMA+0x164>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004bc6:	e00b      	b.n	8004be0 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	2b08      	cmp	r3, #8
 8004bcc:	d104      	bne.n	8004bd8 <HAL_TIM_PWM_Stop_DMA+0x174>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004bd6:	e003      	b.n	8004be0 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8004be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3710      	adds	r7, #16
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	40012c00 	.word	0x40012c00

08004bf0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d020      	beq.n	8004c54 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f003 0302 	and.w	r3, r3, #2
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d01b      	beq.n	8004c54 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f06f 0202 	mvn.w	r2, #2
 8004c24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	f003 0303 	and.w	r3, r3, #3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d003      	beq.n	8004c42 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 f993 	bl	8004f66 <HAL_TIM_IC_CaptureCallback>
 8004c40:	e005      	b.n	8004c4e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 f986 	bl	8004f54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 f995 	bl	8004f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	f003 0304 	and.w	r3, r3, #4
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d020      	beq.n	8004ca0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f003 0304 	and.w	r3, r3, #4
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d01b      	beq.n	8004ca0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f06f 0204 	mvn.w	r2, #4
 8004c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2202      	movs	r2, #2
 8004c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d003      	beq.n	8004c8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 f96d 	bl	8004f66 <HAL_TIM_IC_CaptureCallback>
 8004c8c:	e005      	b.n	8004c9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 f960 	bl	8004f54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 f96f 	bl	8004f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	f003 0308 	and.w	r3, r3, #8
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d020      	beq.n	8004cec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f003 0308 	and.w	r3, r3, #8
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d01b      	beq.n	8004cec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f06f 0208 	mvn.w	r2, #8
 8004cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2204      	movs	r2, #4
 8004cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	69db      	ldr	r3, [r3, #28]
 8004cca:	f003 0303 	and.w	r3, r3, #3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d003      	beq.n	8004cda <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 f947 	bl	8004f66 <HAL_TIM_IC_CaptureCallback>
 8004cd8:	e005      	b.n	8004ce6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 f93a 	bl	8004f54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f000 f949 	bl	8004f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	f003 0310 	and.w	r3, r3, #16
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d020      	beq.n	8004d38 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f003 0310 	and.w	r3, r3, #16
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d01b      	beq.n	8004d38 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f06f 0210 	mvn.w	r2, #16
 8004d08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2208      	movs	r2, #8
 8004d0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	69db      	ldr	r3, [r3, #28]
 8004d16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d003      	beq.n	8004d26 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 f921 	bl	8004f66 <HAL_TIM_IC_CaptureCallback>
 8004d24:	e005      	b.n	8004d32 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 f914 	bl	8004f54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 f923 	bl	8004f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	f003 0301 	and.w	r3, r3, #1
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00c      	beq.n	8004d5c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f003 0301 	and.w	r3, r3, #1
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d007      	beq.n	8004d5c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f06f 0201 	mvn.w	r2, #1
 8004d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f7fc fa9e 	bl	8001298 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00c      	beq.n	8004d80 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d007      	beq.n	8004d80 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 fcc4 	bl	8005708 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00c      	beq.n	8004da4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d007      	beq.n	8004da4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 f8fc 	bl	8004f9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	f003 0320 	and.w	r3, r3, #32
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00c      	beq.n	8004dc8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f003 0320 	and.w	r3, r3, #32
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d007      	beq.n	8004dc8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f06f 0220 	mvn.w	r2, #32
 8004dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 fc97 	bl	80056f6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004dc8:	bf00      	nop
 8004dca:	3710      	adds	r7, #16
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b086      	sub	sp, #24
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d101      	bne.n	8004dee <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004dea:	2302      	movs	r3, #2
 8004dec:	e0ae      	b.n	8004f4c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2201      	movs	r2, #1
 8004df2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2b0c      	cmp	r3, #12
 8004dfa:	f200 809f 	bhi.w	8004f3c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004dfe:	a201      	add	r2, pc, #4	@ (adr r2, 8004e04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e04:	08004e39 	.word	0x08004e39
 8004e08:	08004f3d 	.word	0x08004f3d
 8004e0c:	08004f3d 	.word	0x08004f3d
 8004e10:	08004f3d 	.word	0x08004f3d
 8004e14:	08004e79 	.word	0x08004e79
 8004e18:	08004f3d 	.word	0x08004f3d
 8004e1c:	08004f3d 	.word	0x08004f3d
 8004e20:	08004f3d 	.word	0x08004f3d
 8004e24:	08004ebb 	.word	0x08004ebb
 8004e28:	08004f3d 	.word	0x08004f3d
 8004e2c:	08004f3d 	.word	0x08004f3d
 8004e30:	08004f3d 	.word	0x08004f3d
 8004e34:	08004efb 	.word	0x08004efb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68b9      	ldr	r1, [r7, #8]
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f000 f9fe 	bl	8005240 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	699a      	ldr	r2, [r3, #24]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f042 0208 	orr.w	r2, r2, #8
 8004e52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	699a      	ldr	r2, [r3, #24]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f022 0204 	bic.w	r2, r2, #4
 8004e62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	6999      	ldr	r1, [r3, #24]
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	691a      	ldr	r2, [r3, #16]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	430a      	orrs	r2, r1
 8004e74:	619a      	str	r2, [r3, #24]
      break;
 8004e76:	e064      	b.n	8004f42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68b9      	ldr	r1, [r7, #8]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f000 fa44 	bl	800530c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	699a      	ldr	r2, [r3, #24]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	699a      	ldr	r2, [r3, #24]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ea2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	6999      	ldr	r1, [r3, #24]
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	021a      	lsls	r2, r3, #8
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	619a      	str	r2, [r3, #24]
      break;
 8004eb8:	e043      	b.n	8004f42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68b9      	ldr	r1, [r7, #8]
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f000 fa8d 	bl	80053e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	69da      	ldr	r2, [r3, #28]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f042 0208 	orr.w	r2, r2, #8
 8004ed4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	69da      	ldr	r2, [r3, #28]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f022 0204 	bic.w	r2, r2, #4
 8004ee4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	69d9      	ldr	r1, [r3, #28]
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	691a      	ldr	r2, [r3, #16]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	61da      	str	r2, [r3, #28]
      break;
 8004ef8:	e023      	b.n	8004f42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68b9      	ldr	r1, [r7, #8]
 8004f00:	4618      	mov	r0, r3
 8004f02:	f000 fad7 	bl	80054b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	69da      	ldr	r2, [r3, #28]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	69da      	ldr	r2, [r3, #28]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	69d9      	ldr	r1, [r3, #28]
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	021a      	lsls	r2, r3, #8
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	430a      	orrs	r2, r1
 8004f38:	61da      	str	r2, [r3, #28]
      break;
 8004f3a:	e002      	b.n	8004f42 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	75fb      	strb	r3, [r7, #23]
      break;
 8004f40:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3718      	adds	r7, #24
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bc80      	pop	{r7}
 8004f64:	4770      	bx	lr

08004f66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f66:	b480      	push	{r7}
 8004f68:	b083      	sub	sp, #12
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f6e:	bf00      	nop
 8004f70:	370c      	adds	r7, #12
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bc80      	pop	{r7}
 8004f76:	4770      	bx	lr

08004f78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f80:	bf00      	nop
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bc80      	pop	{r7}
 8004f88:	4770      	bx	lr

08004f8a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	b083      	sub	sp, #12
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004f92:	bf00      	nop
 8004f94:	370c      	adds	r7, #12
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bc80      	pop	{r7}
 8004f9a:	4770      	bx	lr

08004f9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fa4:	bf00      	nop
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bc80      	pop	{r7}
 8004fac:	4770      	bx	lr

08004fae <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004fae:	b480      	push	{r7}
 8004fb0:	b083      	sub	sp, #12
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004fb6:	bf00      	nop
 8004fb8:	370c      	adds	r7, #12
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bc80      	pop	{r7}
 8004fbe:	4770      	bx	lr

08004fc0 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fcc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d107      	bne.n	8004fe8 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fe6:	e02a      	b.n	800503e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d107      	bne.n	8005002 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2202      	movs	r2, #2
 8004ff6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005000:	e01d      	b.n	800503e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	429a      	cmp	r2, r3
 800500a:	d107      	bne.n	800501c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2204      	movs	r2, #4
 8005010:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2201      	movs	r2, #1
 8005016:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800501a:	e010      	b.n	800503e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	429a      	cmp	r2, r3
 8005024:	d107      	bne.n	8005036 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2208      	movs	r2, #8
 800502a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005034:	e003      	b.n	800503e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2201      	movs	r2, #1
 800503a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800503e:	68f8      	ldr	r0, [r7, #12]
 8005040:	f7ff ffb5 	bl	8004fae <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2200      	movs	r2, #0
 8005048:	771a      	strb	r2, [r3, #28]
}
 800504a:	bf00      	nop
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005052:	b580      	push	{r7, lr}
 8005054:	b084      	sub	sp, #16
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800505e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	429a      	cmp	r2, r3
 8005068:	d10b      	bne.n	8005082 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2201      	movs	r2, #1
 800506e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	699b      	ldr	r3, [r3, #24]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d136      	bne.n	80050e6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005080:	e031      	b.n	80050e6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	429a      	cmp	r2, r3
 800508a:	d10b      	bne.n	80050a4 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2202      	movs	r2, #2
 8005090:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	699b      	ldr	r3, [r3, #24]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d125      	bne.n	80050e6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2201      	movs	r2, #1
 800509e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050a2:	e020      	b.n	80050e6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d10b      	bne.n	80050c6 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2204      	movs	r2, #4
 80050b2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	699b      	ldr	r3, [r3, #24]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d114      	bne.n	80050e6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050c4:	e00f      	b.n	80050e6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d10a      	bne.n	80050e6 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2208      	movs	r2, #8
 80050d4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d103      	bne.n	80050e6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050e6:	68f8      	ldr	r0, [r7, #12]
 80050e8:	f7ff ff46 	bl	8004f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	771a      	strb	r2, [r3, #28]
}
 80050f2:	bf00      	nop
 80050f4:	3710      	adds	r7, #16
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}

080050fa <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80050fa:	b580      	push	{r7, lr}
 80050fc:	b084      	sub	sp, #16
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005106:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	429a      	cmp	r2, r3
 8005110:	d103      	bne.n	800511a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2201      	movs	r2, #1
 8005116:	771a      	strb	r2, [r3, #28]
 8005118:	e019      	b.n	800514e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	429a      	cmp	r2, r3
 8005122:	d103      	bne.n	800512c <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2202      	movs	r2, #2
 8005128:	771a      	strb	r2, [r3, #28]
 800512a:	e010      	b.n	800514e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	429a      	cmp	r2, r3
 8005134:	d103      	bne.n	800513e <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2204      	movs	r2, #4
 800513a:	771a      	strb	r2, [r3, #28]
 800513c:	e007      	b.n	800514e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	429a      	cmp	r2, r3
 8005146:	d102      	bne.n	800514e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2208      	movs	r2, #8
 800514c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800514e:	68f8      	ldr	r0, [r7, #12]
 8005150:	f7ff ff1b 	bl	8004f8a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2200      	movs	r2, #0
 8005158:	771a      	strb	r2, [r3, #28]
}
 800515a:	bf00      	nop
 800515c:	3710      	adds	r7, #16
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
	...

08005164 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005164:	b480      	push	{r7}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a2f      	ldr	r2, [pc, #188]	@ (8005234 <TIM_Base_SetConfig+0xd0>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d00b      	beq.n	8005194 <TIM_Base_SetConfig+0x30>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005182:	d007      	beq.n	8005194 <TIM_Base_SetConfig+0x30>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a2c      	ldr	r2, [pc, #176]	@ (8005238 <TIM_Base_SetConfig+0xd4>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d003      	beq.n	8005194 <TIM_Base_SetConfig+0x30>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a2b      	ldr	r2, [pc, #172]	@ (800523c <TIM_Base_SetConfig+0xd8>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d108      	bne.n	80051a6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800519a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a22      	ldr	r2, [pc, #136]	@ (8005234 <TIM_Base_SetConfig+0xd0>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d00b      	beq.n	80051c6 <TIM_Base_SetConfig+0x62>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051b4:	d007      	beq.n	80051c6 <TIM_Base_SetConfig+0x62>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a1f      	ldr	r2, [pc, #124]	@ (8005238 <TIM_Base_SetConfig+0xd4>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d003      	beq.n	80051c6 <TIM_Base_SetConfig+0x62>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a1e      	ldr	r2, [pc, #120]	@ (800523c <TIM_Base_SetConfig+0xd8>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d108      	bne.n	80051d8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	695b      	ldr	r3, [r3, #20]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	68fa      	ldr	r2, [r7, #12]
 80051ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	689a      	ldr	r2, [r3, #8]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a0d      	ldr	r2, [pc, #52]	@ (8005234 <TIM_Base_SetConfig+0xd0>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d103      	bne.n	800520c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	691a      	ldr	r2, [r3, #16]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	f003 0301 	and.w	r3, r3, #1
 800521a:	2b00      	cmp	r3, #0
 800521c:	d005      	beq.n	800522a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	f023 0201 	bic.w	r2, r3, #1
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	611a      	str	r2, [r3, #16]
  }
}
 800522a:	bf00      	nop
 800522c:	3714      	adds	r7, #20
 800522e:	46bd      	mov	sp, r7
 8005230:	bc80      	pop	{r7}
 8005232:	4770      	bx	lr
 8005234:	40012c00 	.word	0x40012c00
 8005238:	40000400 	.word	0x40000400
 800523c:	40000800 	.word	0x40000800

08005240 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005240:	b480      	push	{r7}
 8005242:	b087      	sub	sp, #28
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a1b      	ldr	r3, [r3, #32]
 800524e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a1b      	ldr	r3, [r3, #32]
 8005254:	f023 0201 	bic.w	r2, r3, #1
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800526e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f023 0303 	bic.w	r3, r3, #3
 8005276:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	4313      	orrs	r3, r2
 8005280:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	f023 0302 	bic.w	r3, r3, #2
 8005288:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	4313      	orrs	r3, r2
 8005292:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a1c      	ldr	r2, [pc, #112]	@ (8005308 <TIM_OC1_SetConfig+0xc8>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d10c      	bne.n	80052b6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	f023 0308 	bic.w	r3, r3, #8
 80052a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	697a      	ldr	r2, [r7, #20]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	f023 0304 	bic.w	r3, r3, #4
 80052b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a13      	ldr	r2, [pc, #76]	@ (8005308 <TIM_OC1_SetConfig+0xc8>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d111      	bne.n	80052e2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80052cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	693a      	ldr	r2, [r7, #16]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	699b      	ldr	r3, [r3, #24]
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	4313      	orrs	r3, r2
 80052e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	685a      	ldr	r2, [r3, #4]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	697a      	ldr	r2, [r7, #20]
 80052fa:	621a      	str	r2, [r3, #32]
}
 80052fc:	bf00      	nop
 80052fe:	371c      	adds	r7, #28
 8005300:	46bd      	mov	sp, r7
 8005302:	bc80      	pop	{r7}
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop
 8005308:	40012c00 	.word	0x40012c00

0800530c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800530c:	b480      	push	{r7}
 800530e:	b087      	sub	sp, #28
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a1b      	ldr	r3, [r3, #32]
 800531a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a1b      	ldr	r3, [r3, #32]
 8005320:	f023 0210 	bic.w	r2, r3, #16
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	699b      	ldr	r3, [r3, #24]
 8005332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800533a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005342:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	021b      	lsls	r3, r3, #8
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	4313      	orrs	r3, r2
 800534e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	f023 0320 	bic.w	r3, r3, #32
 8005356:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	011b      	lsls	r3, r3, #4
 800535e:	697a      	ldr	r2, [r7, #20]
 8005360:	4313      	orrs	r3, r2
 8005362:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a1d      	ldr	r2, [pc, #116]	@ (80053dc <TIM_OC2_SetConfig+0xd0>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d10d      	bne.n	8005388 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005372:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	011b      	lsls	r3, r3, #4
 800537a:	697a      	ldr	r2, [r7, #20]
 800537c:	4313      	orrs	r3, r2
 800537e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005386:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a14      	ldr	r2, [pc, #80]	@ (80053dc <TIM_OC2_SetConfig+0xd0>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d113      	bne.n	80053b8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005396:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800539e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	695b      	ldr	r3, [r3, #20]
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	693a      	ldr	r2, [r7, #16]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	693a      	ldr	r2, [r7, #16]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	685a      	ldr	r2, [r3, #4]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	621a      	str	r2, [r3, #32]
}
 80053d2:	bf00      	nop
 80053d4:	371c      	adds	r7, #28
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bc80      	pop	{r7}
 80053da:	4770      	bx	lr
 80053dc:	40012c00 	.word	0x40012c00

080053e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b087      	sub	sp, #28
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a1b      	ldr	r3, [r3, #32]
 80053ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6a1b      	ldr	r3, [r3, #32]
 80053f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	69db      	ldr	r3, [r3, #28]
 8005406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800540e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f023 0303 	bic.w	r3, r3, #3
 8005416:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68fa      	ldr	r2, [r7, #12]
 800541e:	4313      	orrs	r3, r2
 8005420:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005428:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	021b      	lsls	r3, r3, #8
 8005430:	697a      	ldr	r2, [r7, #20]
 8005432:	4313      	orrs	r3, r2
 8005434:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a1d      	ldr	r2, [pc, #116]	@ (80054b0 <TIM_OC3_SetConfig+0xd0>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d10d      	bne.n	800545a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005444:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	021b      	lsls	r3, r3, #8
 800544c:	697a      	ldr	r2, [r7, #20]
 800544e:	4313      	orrs	r3, r2
 8005450:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005458:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a14      	ldr	r2, [pc, #80]	@ (80054b0 <TIM_OC3_SetConfig+0xd0>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d113      	bne.n	800548a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005468:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005470:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	011b      	lsls	r3, r3, #4
 8005478:	693a      	ldr	r2, [r7, #16]
 800547a:	4313      	orrs	r3, r2
 800547c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	011b      	lsls	r3, r3, #4
 8005484:	693a      	ldr	r2, [r7, #16]
 8005486:	4313      	orrs	r3, r2
 8005488:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	693a      	ldr	r2, [r7, #16]
 800548e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	685a      	ldr	r2, [r3, #4]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	621a      	str	r2, [r3, #32]
}
 80054a4:	bf00      	nop
 80054a6:	371c      	adds	r7, #28
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bc80      	pop	{r7}
 80054ac:	4770      	bx	lr
 80054ae:	bf00      	nop
 80054b0:	40012c00 	.word	0x40012c00

080054b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b087      	sub	sp, #28
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a1b      	ldr	r3, [r3, #32]
 80054c8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	69db      	ldr	r3, [r3, #28]
 80054da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	021b      	lsls	r3, r3, #8
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80054fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	031b      	lsls	r3, r3, #12
 8005506:	693a      	ldr	r2, [r7, #16]
 8005508:	4313      	orrs	r3, r2
 800550a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a0f      	ldr	r2, [pc, #60]	@ (800554c <TIM_OC4_SetConfig+0x98>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d109      	bne.n	8005528 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800551a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	695b      	ldr	r3, [r3, #20]
 8005520:	019b      	lsls	r3, r3, #6
 8005522:	697a      	ldr	r2, [r7, #20]
 8005524:	4313      	orrs	r3, r2
 8005526:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	697a      	ldr	r2, [r7, #20]
 800552c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	685a      	ldr	r2, [r3, #4]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	621a      	str	r2, [r3, #32]
}
 8005542:	bf00      	nop
 8005544:	371c      	adds	r7, #28
 8005546:	46bd      	mov	sp, r7
 8005548:	bc80      	pop	{r7}
 800554a:	4770      	bx	lr
 800554c:	40012c00 	.word	0x40012c00

08005550 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005550:	b480      	push	{r7}
 8005552:	b087      	sub	sp, #28
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	f003 031f 	and.w	r3, r3, #31
 8005562:	2201      	movs	r2, #1
 8005564:	fa02 f303 	lsl.w	r3, r2, r3
 8005568:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6a1a      	ldr	r2, [r3, #32]
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	43db      	mvns	r3, r3
 8005572:	401a      	ands	r2, r3
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6a1a      	ldr	r2, [r3, #32]
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	f003 031f 	and.w	r3, r3, #31
 8005582:	6879      	ldr	r1, [r7, #4]
 8005584:	fa01 f303 	lsl.w	r3, r1, r3
 8005588:	431a      	orrs	r2, r3
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	621a      	str	r2, [r3, #32]
}
 800558e:	bf00      	nop
 8005590:	371c      	adds	r7, #28
 8005592:	46bd      	mov	sp, r7
 8005594:	bc80      	pop	{r7}
 8005596:	4770      	bx	lr

08005598 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d101      	bne.n	80055b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055ac:	2302      	movs	r3, #2
 80055ae:	e046      	b.n	800563e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2202      	movs	r2, #2
 80055bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	4313      	orrs	r3, r2
 80055e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a16      	ldr	r2, [pc, #88]	@ (8005648 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d00e      	beq.n	8005612 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055fc:	d009      	beq.n	8005612 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a12      	ldr	r2, [pc, #72]	@ (800564c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d004      	beq.n	8005612 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a10      	ldr	r2, [pc, #64]	@ (8005650 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d10c      	bne.n	800562c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005618:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	68ba      	ldr	r2, [r7, #8]
 8005620:	4313      	orrs	r3, r2
 8005622:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68ba      	ldr	r2, [r7, #8]
 800562a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800563c:	2300      	movs	r3, #0
}
 800563e:	4618      	mov	r0, r3
 8005640:	3714      	adds	r7, #20
 8005642:	46bd      	mov	sp, r7
 8005644:	bc80      	pop	{r7}
 8005646:	4770      	bx	lr
 8005648:	40012c00 	.word	0x40012c00
 800564c:	40000400 	.word	0x40000400
 8005650:	40000800 	.word	0x40000800

08005654 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800565e:	2300      	movs	r3, #0
 8005660:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005668:	2b01      	cmp	r3, #1
 800566a:	d101      	bne.n	8005670 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800566c:	2302      	movs	r3, #2
 800566e:	e03d      	b.n	80056ec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	4313      	orrs	r3, r2
 8005684:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	4313      	orrs	r3, r2
 8005692:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	4313      	orrs	r3, r2
 80056a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	695b      	ldr	r3, [r3, #20]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	69db      	ldr	r3, [r3, #28]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80056ea:	2300      	movs	r3, #0
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3714      	adds	r7, #20
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bc80      	pop	{r7}
 80056f4:	4770      	bx	lr

080056f6 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056f6:	b480      	push	{r7}
 80056f8:	b083      	sub	sp, #12
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056fe:	bf00      	nop
 8005700:	370c      	adds	r7, #12
 8005702:	46bd      	mov	sp, r7
 8005704:	bc80      	pop	{r7}
 8005706:	4770      	bx	lr

08005708 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005710:	bf00      	nop
 8005712:	370c      	adds	r7, #12
 8005714:	46bd      	mov	sp, r7
 8005716:	bc80      	pop	{r7}
 8005718:	4770      	bx	lr

0800571a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800571a:	b580      	push	{r7, lr}
 800571c:	b082      	sub	sp, #8
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d101      	bne.n	800572c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e042      	b.n	80057b2 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005732:	b2db      	uxtb	r3, r3
 8005734:	2b00      	cmp	r3, #0
 8005736:	d106      	bne.n	8005746 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f7fc f821 	bl	8001788 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2224      	movs	r2, #36	@ 0x24
 800574a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68da      	ldr	r2, [r3, #12]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800575c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 fd62 	bl	8006228 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	691a      	ldr	r2, [r3, #16]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005772:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	695a      	ldr	r2, [r3, #20]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005782:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68da      	ldr	r2, [r3, #12]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005792:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2220      	movs	r2, #32
 800579e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2220      	movs	r2, #32
 80057a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3708      	adds	r7, #8
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}

080057ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057ba:	b580      	push	{r7, lr}
 80057bc:	b08a      	sub	sp, #40	@ 0x28
 80057be:	af02      	add	r7, sp, #8
 80057c0:	60f8      	str	r0, [r7, #12]
 80057c2:	60b9      	str	r1, [r7, #8]
 80057c4:	603b      	str	r3, [r7, #0]
 80057c6:	4613      	mov	r3, r2
 80057c8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80057ca:	2300      	movs	r3, #0
 80057cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	2b20      	cmp	r3, #32
 80057d8:	d175      	bne.n	80058c6 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d002      	beq.n	80057e6 <HAL_UART_Transmit+0x2c>
 80057e0:	88fb      	ldrh	r3, [r7, #6]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d101      	bne.n	80057ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e06e      	b.n	80058c8 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2200      	movs	r2, #0
 80057ee:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2221      	movs	r2, #33	@ 0x21
 80057f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057f8:	f7fc f99e 	bl	8001b38 <HAL_GetTick>
 80057fc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	88fa      	ldrh	r2, [r7, #6]
 8005802:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	88fa      	ldrh	r2, [r7, #6]
 8005808:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005812:	d108      	bne.n	8005826 <HAL_UART_Transmit+0x6c>
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	691b      	ldr	r3, [r3, #16]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d104      	bne.n	8005826 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800581c:	2300      	movs	r3, #0
 800581e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	61bb      	str	r3, [r7, #24]
 8005824:	e003      	b.n	800582e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800582a:	2300      	movs	r3, #0
 800582c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800582e:	e02e      	b.n	800588e <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	9300      	str	r3, [sp, #0]
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	2200      	movs	r2, #0
 8005838:	2180      	movs	r1, #128	@ 0x80
 800583a:	68f8      	ldr	r0, [r7, #12]
 800583c:	f000 fb00 	bl	8005e40 <UART_WaitOnFlagUntilTimeout>
 8005840:	4603      	mov	r3, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d005      	beq.n	8005852 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2220      	movs	r2, #32
 800584a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e03a      	b.n	80058c8 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d10b      	bne.n	8005870 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	881b      	ldrh	r3, [r3, #0]
 800585c:	461a      	mov	r2, r3
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005866:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	3302      	adds	r3, #2
 800586c:	61bb      	str	r3, [r7, #24]
 800586e:	e007      	b.n	8005880 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	781a      	ldrb	r2, [r3, #0]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	3301      	adds	r3, #1
 800587e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005884:	b29b      	uxth	r3, r3
 8005886:	3b01      	subs	r3, #1
 8005888:	b29a      	uxth	r2, r3
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005892:	b29b      	uxth	r3, r3
 8005894:	2b00      	cmp	r3, #0
 8005896:	d1cb      	bne.n	8005830 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	9300      	str	r3, [sp, #0]
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	2200      	movs	r2, #0
 80058a0:	2140      	movs	r1, #64	@ 0x40
 80058a2:	68f8      	ldr	r0, [r7, #12]
 80058a4:	f000 facc 	bl	8005e40 <UART_WaitOnFlagUntilTimeout>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d005      	beq.n	80058ba <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2220      	movs	r2, #32
 80058b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	e006      	b.n	80058c8 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2220      	movs	r2, #32
 80058be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80058c2:	2300      	movs	r3, #0
 80058c4:	e000      	b.n	80058c8 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80058c6:	2302      	movs	r3, #2
  }
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3720      	adds	r7, #32
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b0ba      	sub	sp, #232	@ 0xe8
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	695b      	ldr	r3, [r3, #20]
 80058f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80058f6:	2300      	movs	r3, #0
 80058f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80058fc:	2300      	movs	r3, #0
 80058fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005906:	f003 030f 	and.w	r3, r3, #15
 800590a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800590e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005912:	2b00      	cmp	r3, #0
 8005914:	d10f      	bne.n	8005936 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800591a:	f003 0320 	and.w	r3, r3, #32
 800591e:	2b00      	cmp	r3, #0
 8005920:	d009      	beq.n	8005936 <HAL_UART_IRQHandler+0x66>
 8005922:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005926:	f003 0320 	and.w	r3, r3, #32
 800592a:	2b00      	cmp	r3, #0
 800592c:	d003      	beq.n	8005936 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 fbbc 	bl	80060ac <UART_Receive_IT>
      return;
 8005934:	e25b      	b.n	8005dee <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005936:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800593a:	2b00      	cmp	r3, #0
 800593c:	f000 80de 	beq.w	8005afc <HAL_UART_IRQHandler+0x22c>
 8005940:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005944:	f003 0301 	and.w	r3, r3, #1
 8005948:	2b00      	cmp	r3, #0
 800594a:	d106      	bne.n	800595a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800594c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005950:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005954:	2b00      	cmp	r3, #0
 8005956:	f000 80d1 	beq.w	8005afc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800595a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800595e:	f003 0301 	and.w	r3, r3, #1
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00b      	beq.n	800597e <HAL_UART_IRQHandler+0xae>
 8005966:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800596a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800596e:	2b00      	cmp	r3, #0
 8005970:	d005      	beq.n	800597e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005976:	f043 0201 	orr.w	r2, r3, #1
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800597e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005982:	f003 0304 	and.w	r3, r3, #4
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00b      	beq.n	80059a2 <HAL_UART_IRQHandler+0xd2>
 800598a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800598e:	f003 0301 	and.w	r3, r3, #1
 8005992:	2b00      	cmp	r3, #0
 8005994:	d005      	beq.n	80059a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800599a:	f043 0202 	orr.w	r2, r3, #2
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059a6:	f003 0302 	and.w	r3, r3, #2
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00b      	beq.n	80059c6 <HAL_UART_IRQHandler+0xf6>
 80059ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059b2:	f003 0301 	and.w	r3, r3, #1
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d005      	beq.n	80059c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059be:	f043 0204 	orr.w	r2, r3, #4
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80059c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059ca:	f003 0308 	and.w	r3, r3, #8
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d011      	beq.n	80059f6 <HAL_UART_IRQHandler+0x126>
 80059d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059d6:	f003 0320 	and.w	r3, r3, #32
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d105      	bne.n	80059ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80059de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059e2:	f003 0301 	and.w	r3, r3, #1
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d005      	beq.n	80059f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059ee:	f043 0208 	orr.w	r2, r3, #8
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	f000 81f2 	beq.w	8005de4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a04:	f003 0320 	and.w	r3, r3, #32
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d008      	beq.n	8005a1e <HAL_UART_IRQHandler+0x14e>
 8005a0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a10:	f003 0320 	and.w	r3, r3, #32
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d002      	beq.n	8005a1e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 fb47 	bl	80060ac <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	695b      	ldr	r3, [r3, #20]
 8005a24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	bf14      	ite	ne
 8005a2c:	2301      	movne	r3, #1
 8005a2e:	2300      	moveq	r3, #0
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a3a:	f003 0308 	and.w	r3, r3, #8
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d103      	bne.n	8005a4a <HAL_UART_IRQHandler+0x17a>
 8005a42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d04f      	beq.n	8005aea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 fa51 	bl	8005ef2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	695b      	ldr	r3, [r3, #20]
 8005a56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d041      	beq.n	8005ae2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	3314      	adds	r3, #20
 8005a64:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a68:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005a6c:	e853 3f00 	ldrex	r3, [r3]
 8005a70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005a74:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005a78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	3314      	adds	r3, #20
 8005a86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005a8a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005a8e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005a96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005a9a:	e841 2300 	strex	r3, r2, [r1]
 8005a9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005aa2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d1d9      	bne.n	8005a5e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d013      	beq.n	8005ada <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ab6:	4a7e      	ldr	r2, [pc, #504]	@ (8005cb0 <HAL_UART_IRQHandler+0x3e0>)
 8005ab8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f7fd fcba 	bl	8003438 <HAL_DMA_Abort_IT>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d016      	beq.n	8005af8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ace:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005ad4:	4610      	mov	r0, r2
 8005ad6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ad8:	e00e      	b.n	8005af8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 f99c 	bl	8005e18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ae0:	e00a      	b.n	8005af8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 f998 	bl	8005e18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ae8:	e006      	b.n	8005af8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 f994 	bl	8005e18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005af6:	e175      	b.n	8005de4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005af8:	bf00      	nop
    return;
 8005afa:	e173      	b.n	8005de4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	f040 814f 	bne.w	8005da4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b0a:	f003 0310 	and.w	r3, r3, #16
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	f000 8148 	beq.w	8005da4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005b14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b18:	f003 0310 	and.w	r3, r3, #16
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	f000 8141 	beq.w	8005da4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b22:	2300      	movs	r3, #0
 8005b24:	60bb      	str	r3, [r7, #8]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	60bb      	str	r3, [r7, #8]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	60bb      	str	r3, [r7, #8]
 8005b36:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	f000 80b6 	beq.w	8005cb4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b54:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	f000 8145 	beq.w	8005de8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005b62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005b66:	429a      	cmp	r2, r3
 8005b68:	f080 813e 	bcs.w	8005de8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005b72:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	2b20      	cmp	r3, #32
 8005b7c:	f000 8088 	beq.w	8005c90 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	330c      	adds	r3, #12
 8005b86:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005b8e:	e853 3f00 	ldrex	r3, [r3]
 8005b92:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005b96:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005b9a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b9e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	330c      	adds	r3, #12
 8005ba8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005bac:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005bb0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005bb8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005bbc:	e841 2300 	strex	r3, r2, [r1]
 8005bc0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005bc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1d9      	bne.n	8005b80 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	3314      	adds	r3, #20
 8005bd2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005bd6:	e853 3f00 	ldrex	r3, [r3]
 8005bda:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005bdc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005bde:	f023 0301 	bic.w	r3, r3, #1
 8005be2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	3314      	adds	r3, #20
 8005bec:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005bf0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005bf4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005bf8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005bfc:	e841 2300 	strex	r3, r2, [r1]
 8005c00:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005c02:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d1e1      	bne.n	8005bcc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	3314      	adds	r3, #20
 8005c0e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c10:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005c12:	e853 3f00 	ldrex	r3, [r3]
 8005c16:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005c18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	3314      	adds	r3, #20
 8005c28:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005c2c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005c2e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c30:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005c32:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005c34:	e841 2300 	strex	r3, r2, [r1]
 8005c38:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005c3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d1e3      	bne.n	8005c08 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2220      	movs	r2, #32
 8005c44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	330c      	adds	r3, #12
 8005c54:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c58:	e853 3f00 	ldrex	r3, [r3]
 8005c5c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005c5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c60:	f023 0310 	bic.w	r3, r3, #16
 8005c64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	330c      	adds	r3, #12
 8005c6e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005c72:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005c74:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c76:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005c78:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005c7a:	e841 2300 	strex	r3, r2, [r1]
 8005c7e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005c80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d1e3      	bne.n	8005c4e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f7fd fb98 	bl	80033c0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2202      	movs	r2, #2
 8005c94:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f000 f8bf 	bl	8005e2a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005cac:	e09c      	b.n	8005de8 <HAL_UART_IRQHandler+0x518>
 8005cae:	bf00      	nop
 8005cb0:	08005fb7 	.word	0x08005fb7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	f000 808e 	beq.w	8005dec <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005cd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	f000 8089 	beq.w	8005dec <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	330c      	adds	r3, #12
 8005ce0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ce4:	e853 3f00 	ldrex	r3, [r3]
 8005ce8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005cea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005cf0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	330c      	adds	r3, #12
 8005cfa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005cfe:	647a      	str	r2, [r7, #68]	@ 0x44
 8005d00:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d02:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d04:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d06:	e841 2300 	strex	r3, r2, [r1]
 8005d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d1e3      	bne.n	8005cda <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	3314      	adds	r3, #20
 8005d18:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d1c:	e853 3f00 	ldrex	r3, [r3]
 8005d20:	623b      	str	r3, [r7, #32]
   return(result);
 8005d22:	6a3b      	ldr	r3, [r7, #32]
 8005d24:	f023 0301 	bic.w	r3, r3, #1
 8005d28:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	3314      	adds	r3, #20
 8005d32:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005d36:	633a      	str	r2, [r7, #48]	@ 0x30
 8005d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d3e:	e841 2300 	strex	r3, r2, [r1]
 8005d42:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d1e3      	bne.n	8005d12 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2220      	movs	r2, #32
 8005d4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	330c      	adds	r3, #12
 8005d5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	e853 3f00 	ldrex	r3, [r3]
 8005d66:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f023 0310 	bic.w	r3, r3, #16
 8005d6e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	330c      	adds	r3, #12
 8005d78:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005d7c:	61fa      	str	r2, [r7, #28]
 8005d7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d80:	69b9      	ldr	r1, [r7, #24]
 8005d82:	69fa      	ldr	r2, [r7, #28]
 8005d84:	e841 2300 	strex	r3, r2, [r1]
 8005d88:	617b      	str	r3, [r7, #20]
   return(result);
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d1e3      	bne.n	8005d58 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2202      	movs	r2, #2
 8005d94:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d96:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005d9a:	4619      	mov	r1, r3
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 f844 	bl	8005e2a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005da2:	e023      	b.n	8005dec <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005da4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005da8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d009      	beq.n	8005dc4 <HAL_UART_IRQHandler+0x4f4>
 8005db0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005db4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d003      	beq.n	8005dc4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 f90e 	bl	8005fde <UART_Transmit_IT>
    return;
 8005dc2:	e014      	b.n	8005dee <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005dc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d00e      	beq.n	8005dee <HAL_UART_IRQHandler+0x51e>
 8005dd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d008      	beq.n	8005dee <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f000 f94d 	bl	800607c <UART_EndTransmit_IT>
    return;
 8005de2:	e004      	b.n	8005dee <HAL_UART_IRQHandler+0x51e>
    return;
 8005de4:	bf00      	nop
 8005de6:	e002      	b.n	8005dee <HAL_UART_IRQHandler+0x51e>
      return;
 8005de8:	bf00      	nop
 8005dea:	e000      	b.n	8005dee <HAL_UART_IRQHandler+0x51e>
      return;
 8005dec:	bf00      	nop
  }
}
 8005dee:	37e8      	adds	r7, #232	@ 0xe8
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005dfc:	bf00      	nop
 8005dfe:	370c      	adds	r7, #12
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bc80      	pop	{r7}
 8005e04:	4770      	bx	lr

08005e06 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e06:	b480      	push	{r7}
 8005e08:	b083      	sub	sp, #12
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005e0e:	bf00      	nop
 8005e10:	370c      	adds	r7, #12
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bc80      	pop	{r7}
 8005e16:	4770      	bx	lr

08005e18 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005e20:	bf00      	nop
 8005e22:	370c      	adds	r7, #12
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bc80      	pop	{r7}
 8005e28:	4770      	bx	lr

08005e2a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	b083      	sub	sp, #12
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
 8005e32:	460b      	mov	r3, r1
 8005e34:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e36:	bf00      	nop
 8005e38:	370c      	adds	r7, #12
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bc80      	pop	{r7}
 8005e3e:	4770      	bx	lr

08005e40 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b086      	sub	sp, #24
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	60b9      	str	r1, [r7, #8]
 8005e4a:	603b      	str	r3, [r7, #0]
 8005e4c:	4613      	mov	r3, r2
 8005e4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e50:	e03b      	b.n	8005eca <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e52:	6a3b      	ldr	r3, [r7, #32]
 8005e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e58:	d037      	beq.n	8005eca <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e5a:	f7fb fe6d 	bl	8001b38 <HAL_GetTick>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	1ad3      	subs	r3, r2, r3
 8005e64:	6a3a      	ldr	r2, [r7, #32]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d302      	bcc.n	8005e70 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e6a:	6a3b      	ldr	r3, [r7, #32]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d101      	bne.n	8005e74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005e70:	2303      	movs	r3, #3
 8005e72:	e03a      	b.n	8005eea <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	f003 0304 	and.w	r3, r3, #4
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d023      	beq.n	8005eca <UART_WaitOnFlagUntilTimeout+0x8a>
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	2b80      	cmp	r3, #128	@ 0x80
 8005e86:	d020      	beq.n	8005eca <UART_WaitOnFlagUntilTimeout+0x8a>
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	2b40      	cmp	r3, #64	@ 0x40
 8005e8c:	d01d      	beq.n	8005eca <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 0308 	and.w	r3, r3, #8
 8005e98:	2b08      	cmp	r3, #8
 8005e9a:	d116      	bne.n	8005eca <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	617b      	str	r3, [r7, #20]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	617b      	str	r3, [r7, #20]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	617b      	str	r3, [r7, #20]
 8005eb0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005eb2:	68f8      	ldr	r0, [r7, #12]
 8005eb4:	f000 f81d 	bl	8005ef2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2208      	movs	r2, #8
 8005ebc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e00f      	b.n	8005eea <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	68ba      	ldr	r2, [r7, #8]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	bf0c      	ite	eq
 8005eda:	2301      	moveq	r3, #1
 8005edc:	2300      	movne	r3, #0
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	79fb      	ldrb	r3, [r7, #7]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d0b4      	beq.n	8005e52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3718      	adds	r7, #24
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}

08005ef2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ef2:	b480      	push	{r7}
 8005ef4:	b095      	sub	sp, #84	@ 0x54
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	330c      	adds	r3, #12
 8005f00:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f04:	e853 3f00 	ldrex	r3, [r3]
 8005f08:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	330c      	adds	r3, #12
 8005f18:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005f1a:	643a      	str	r2, [r7, #64]	@ 0x40
 8005f1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f1e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005f20:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f22:	e841 2300 	strex	r3, r2, [r1]
 8005f26:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1e5      	bne.n	8005efa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	3314      	adds	r3, #20
 8005f34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f36:	6a3b      	ldr	r3, [r7, #32]
 8005f38:	e853 3f00 	ldrex	r3, [r3]
 8005f3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	f023 0301 	bic.w	r3, r3, #1
 8005f44:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	3314      	adds	r3, #20
 8005f4c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f50:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f52:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f56:	e841 2300 	strex	r3, r2, [r1]
 8005f5a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d1e5      	bne.n	8005f2e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d119      	bne.n	8005f9e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	330c      	adds	r3, #12
 8005f70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	e853 3f00 	ldrex	r3, [r3]
 8005f78:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	f023 0310 	bic.w	r3, r3, #16
 8005f80:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	330c      	adds	r3, #12
 8005f88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f8a:	61ba      	str	r2, [r7, #24]
 8005f8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f8e:	6979      	ldr	r1, [r7, #20]
 8005f90:	69ba      	ldr	r2, [r7, #24]
 8005f92:	e841 2300 	strex	r3, r2, [r1]
 8005f96:	613b      	str	r3, [r7, #16]
   return(result);
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d1e5      	bne.n	8005f6a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2220      	movs	r2, #32
 8005fa2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005fac:	bf00      	nop
 8005fae:	3754      	adds	r7, #84	@ 0x54
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bc80      	pop	{r7}
 8005fb4:	4770      	bx	lr

08005fb6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005fb6:	b580      	push	{r7, lr}
 8005fb8:	b084      	sub	sp, #16
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fc2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005fd0:	68f8      	ldr	r0, [r7, #12]
 8005fd2:	f7ff ff21 	bl	8005e18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fd6:	bf00      	nop
 8005fd8:	3710      	adds	r7, #16
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}

08005fde <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005fde:	b480      	push	{r7}
 8005fe0:	b085      	sub	sp, #20
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	2b21      	cmp	r3, #33	@ 0x21
 8005ff0:	d13e      	bne.n	8006070 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ffa:	d114      	bne.n	8006026 <UART_Transmit_IT+0x48>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d110      	bne.n	8006026 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6a1b      	ldr	r3, [r3, #32]
 8006008:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	881b      	ldrh	r3, [r3, #0]
 800600e:	461a      	mov	r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006018:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a1b      	ldr	r3, [r3, #32]
 800601e:	1c9a      	adds	r2, r3, #2
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	621a      	str	r2, [r3, #32]
 8006024:	e008      	b.n	8006038 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	1c59      	adds	r1, r3, #1
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	6211      	str	r1, [r2, #32]
 8006030:	781a      	ldrb	r2, [r3, #0]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800603c:	b29b      	uxth	r3, r3
 800603e:	3b01      	subs	r3, #1
 8006040:	b29b      	uxth	r3, r3
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	4619      	mov	r1, r3
 8006046:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006048:	2b00      	cmp	r3, #0
 800604a:	d10f      	bne.n	800606c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	68da      	ldr	r2, [r3, #12]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800605a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68da      	ldr	r2, [r3, #12]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800606a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800606c:	2300      	movs	r3, #0
 800606e:	e000      	b.n	8006072 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006070:	2302      	movs	r3, #2
  }
}
 8006072:	4618      	mov	r0, r3
 8006074:	3714      	adds	r7, #20
 8006076:	46bd      	mov	sp, r7
 8006078:	bc80      	pop	{r7}
 800607a:	4770      	bx	lr

0800607c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b082      	sub	sp, #8
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68da      	ldr	r2, [r3, #12]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006092:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2220      	movs	r2, #32
 8006098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f7ff fea9 	bl	8005df4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3708      	adds	r7, #8
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b08c      	sub	sp, #48	@ 0x30
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	2b22      	cmp	r3, #34	@ 0x22
 80060be:	f040 80ae 	bne.w	800621e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060ca:	d117      	bne.n	80060fc <UART_Receive_IT+0x50>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d113      	bne.n	80060fc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80060d4:	2300      	movs	r3, #0
 80060d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060dc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060ea:	b29a      	uxth	r2, r3
 80060ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ee:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060f4:	1c9a      	adds	r2, r3, #2
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	629a      	str	r2, [r3, #40]	@ 0x28
 80060fa:	e026      	b.n	800614a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006100:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006102:	2300      	movs	r3, #0
 8006104:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800610e:	d007      	beq.n	8006120 <UART_Receive_IT+0x74>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d10a      	bne.n	800612e <UART_Receive_IT+0x82>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	691b      	ldr	r3, [r3, #16]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d106      	bne.n	800612e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	b2da      	uxtb	r2, r3
 8006128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800612a:	701a      	strb	r2, [r3, #0]
 800612c:	e008      	b.n	8006140 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	b2db      	uxtb	r3, r3
 8006136:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800613a:	b2da      	uxtb	r2, r3
 800613c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800613e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006144:	1c5a      	adds	r2, r3, #1
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800614e:	b29b      	uxth	r3, r3
 8006150:	3b01      	subs	r3, #1
 8006152:	b29b      	uxth	r3, r3
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	4619      	mov	r1, r3
 8006158:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800615a:	2b00      	cmp	r3, #0
 800615c:	d15d      	bne.n	800621a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	68da      	ldr	r2, [r3, #12]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f022 0220 	bic.w	r2, r2, #32
 800616c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	68da      	ldr	r2, [r3, #12]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800617c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	695a      	ldr	r2, [r3, #20]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f022 0201 	bic.w	r2, r2, #1
 800618c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2220      	movs	r2, #32
 8006192:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d135      	bne.n	8006210 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	330c      	adds	r3, #12
 80061b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	e853 3f00 	ldrex	r3, [r3]
 80061b8:	613b      	str	r3, [r7, #16]
   return(result);
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	f023 0310 	bic.w	r3, r3, #16
 80061c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	330c      	adds	r3, #12
 80061c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061ca:	623a      	str	r2, [r7, #32]
 80061cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ce:	69f9      	ldr	r1, [r7, #28]
 80061d0:	6a3a      	ldr	r2, [r7, #32]
 80061d2:	e841 2300 	strex	r3, r2, [r1]
 80061d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d1e5      	bne.n	80061aa <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 0310 	and.w	r3, r3, #16
 80061e8:	2b10      	cmp	r3, #16
 80061ea:	d10a      	bne.n	8006202 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80061ec:	2300      	movs	r3, #0
 80061ee:	60fb      	str	r3, [r7, #12]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	60fb      	str	r3, [r7, #12]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	60fb      	str	r3, [r7, #12]
 8006200:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006206:	4619      	mov	r1, r3
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f7ff fe0e 	bl	8005e2a <HAL_UARTEx_RxEventCallback>
 800620e:	e002      	b.n	8006216 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f7ff fdf8 	bl	8005e06 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006216:	2300      	movs	r3, #0
 8006218:	e002      	b.n	8006220 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800621a:	2300      	movs	r3, #0
 800621c:	e000      	b.n	8006220 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800621e:	2302      	movs	r3, #2
  }
}
 8006220:	4618      	mov	r0, r3
 8006222:	3730      	adds	r7, #48	@ 0x30
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	68da      	ldr	r2, [r3, #12]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	430a      	orrs	r2, r1
 8006244:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	689a      	ldr	r2, [r3, #8]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	431a      	orrs	r2, r3
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	695b      	ldr	r3, [r3, #20]
 8006254:	4313      	orrs	r3, r2
 8006256:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006262:	f023 030c 	bic.w	r3, r3, #12
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	6812      	ldr	r2, [r2, #0]
 800626a:	68b9      	ldr	r1, [r7, #8]
 800626c:	430b      	orrs	r3, r1
 800626e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	695b      	ldr	r3, [r3, #20]
 8006276:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	699a      	ldr	r2, [r3, #24]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	430a      	orrs	r2, r1
 8006284:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a2c      	ldr	r2, [pc, #176]	@ (800633c <UART_SetConfig+0x114>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d103      	bne.n	8006298 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006290:	f7fe f834 	bl	80042fc <HAL_RCC_GetPCLK2Freq>
 8006294:	60f8      	str	r0, [r7, #12]
 8006296:	e002      	b.n	800629e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006298:	f7fe f81c 	bl	80042d4 <HAL_RCC_GetPCLK1Freq>
 800629c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	4613      	mov	r3, r2
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	4413      	add	r3, r2
 80062a6:	009a      	lsls	r2, r3, #2
 80062a8:	441a      	add	r2, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062b4:	4a22      	ldr	r2, [pc, #136]	@ (8006340 <UART_SetConfig+0x118>)
 80062b6:	fba2 2303 	umull	r2, r3, r2, r3
 80062ba:	095b      	lsrs	r3, r3, #5
 80062bc:	0119      	lsls	r1, r3, #4
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	4613      	mov	r3, r2
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	4413      	add	r3, r2
 80062c6:	009a      	lsls	r2, r3, #2
 80062c8:	441a      	add	r2, r3
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80062d4:	4b1a      	ldr	r3, [pc, #104]	@ (8006340 <UART_SetConfig+0x118>)
 80062d6:	fba3 0302 	umull	r0, r3, r3, r2
 80062da:	095b      	lsrs	r3, r3, #5
 80062dc:	2064      	movs	r0, #100	@ 0x64
 80062de:	fb00 f303 	mul.w	r3, r0, r3
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	011b      	lsls	r3, r3, #4
 80062e6:	3332      	adds	r3, #50	@ 0x32
 80062e8:	4a15      	ldr	r2, [pc, #84]	@ (8006340 <UART_SetConfig+0x118>)
 80062ea:	fba2 2303 	umull	r2, r3, r2, r3
 80062ee:	095b      	lsrs	r3, r3, #5
 80062f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80062f4:	4419      	add	r1, r3
 80062f6:	68fa      	ldr	r2, [r7, #12]
 80062f8:	4613      	mov	r3, r2
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	4413      	add	r3, r2
 80062fe:	009a      	lsls	r2, r3, #2
 8006300:	441a      	add	r2, r3
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	fbb2 f2f3 	udiv	r2, r2, r3
 800630c:	4b0c      	ldr	r3, [pc, #48]	@ (8006340 <UART_SetConfig+0x118>)
 800630e:	fba3 0302 	umull	r0, r3, r3, r2
 8006312:	095b      	lsrs	r3, r3, #5
 8006314:	2064      	movs	r0, #100	@ 0x64
 8006316:	fb00 f303 	mul.w	r3, r0, r3
 800631a:	1ad3      	subs	r3, r2, r3
 800631c:	011b      	lsls	r3, r3, #4
 800631e:	3332      	adds	r3, #50	@ 0x32
 8006320:	4a07      	ldr	r2, [pc, #28]	@ (8006340 <UART_SetConfig+0x118>)
 8006322:	fba2 2303 	umull	r2, r3, r2, r3
 8006326:	095b      	lsrs	r3, r3, #5
 8006328:	f003 020f 	and.w	r2, r3, #15
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	440a      	add	r2, r1
 8006332:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006334:	bf00      	nop
 8006336:	3710      	adds	r7, #16
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}
 800633c:	40013800 	.word	0x40013800
 8006340:	51eb851f 	.word	0x51eb851f

08006344 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006344:	b480      	push	{r7}
 8006346:	b085      	sub	sp, #20
 8006348:	af00      	add	r7, sp, #0
 800634a:	4603      	mov	r3, r0
 800634c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800634e:	2300      	movs	r3, #0
 8006350:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006352:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006356:	2b84      	cmp	r3, #132	@ 0x84
 8006358:	d005      	beq.n	8006366 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800635a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	4413      	add	r3, r2
 8006362:	3303      	adds	r3, #3
 8006364:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006366:	68fb      	ldr	r3, [r7, #12]
}
 8006368:	4618      	mov	r0, r3
 800636a:	3714      	adds	r7, #20
 800636c:	46bd      	mov	sp, r7
 800636e:	bc80      	pop	{r7}
 8006370:	4770      	bx	lr

08006372 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006372:	b580      	push	{r7, lr}
 8006374:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006376:	f000 faf7 	bl	8006968 <vTaskStartScheduler>
  
  return osOK;
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	bd80      	pop	{r7, pc}

08006380 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006382:	b089      	sub	sp, #36	@ 0x24
 8006384:	af04      	add	r7, sp, #16
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	695b      	ldr	r3, [r3, #20]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d020      	beq.n	80063d4 <osThreadCreate+0x54>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	699b      	ldr	r3, [r3, #24]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d01c      	beq.n	80063d4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	685c      	ldr	r4, [r3, #4]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	691e      	ldr	r6, [r3, #16]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80063ac:	4618      	mov	r0, r3
 80063ae:	f7ff ffc9 	bl	8006344 <makeFreeRtosPriority>
 80063b2:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	695b      	ldr	r3, [r3, #20]
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80063bc:	9202      	str	r2, [sp, #8]
 80063be:	9301      	str	r3, [sp, #4]
 80063c0:	9100      	str	r1, [sp, #0]
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	4632      	mov	r2, r6
 80063c6:	4629      	mov	r1, r5
 80063c8:	4620      	mov	r0, r4
 80063ca:	f000 f8e8 	bl	800659e <xTaskCreateStatic>
 80063ce:	4603      	mov	r3, r0
 80063d0:	60fb      	str	r3, [r7, #12]
 80063d2:	e01c      	b.n	800640e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	685c      	ldr	r4, [r3, #4]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80063e0:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80063e8:	4618      	mov	r0, r3
 80063ea:	f7ff ffab 	bl	8006344 <makeFreeRtosPriority>
 80063ee:	4602      	mov	r2, r0
 80063f0:	f107 030c 	add.w	r3, r7, #12
 80063f4:	9301      	str	r3, [sp, #4]
 80063f6:	9200      	str	r2, [sp, #0]
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	4632      	mov	r2, r6
 80063fc:	4629      	mov	r1, r5
 80063fe:	4620      	mov	r0, r4
 8006400:	f000 f92d 	bl	800665e <xTaskCreate>
 8006404:	4603      	mov	r3, r0
 8006406:	2b01      	cmp	r3, #1
 8006408:	d001      	beq.n	800640e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800640a:	2300      	movs	r3, #0
 800640c:	e000      	b.n	8006410 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800640e:	68fb      	ldr	r3, [r7, #12]
}
 8006410:	4618      	mov	r0, r3
 8006412:	3714      	adds	r7, #20
 8006414:	46bd      	mov	sp, r7
 8006416:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006418 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d001      	beq.n	800642e <osDelay+0x16>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	e000      	b.n	8006430 <osDelay+0x18>
 800642e:	2301      	movs	r3, #1
 8006430:	4618      	mov	r0, r3
 8006432:	f000 fa63 	bl	80068fc <vTaskDelay>
  
  return osOK;
 8006436:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006438:	4618      	mov	r0, r3
 800643a:	3710      	adds	r7, #16
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f103 0208 	add.w	r2, r3, #8
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f04f 32ff 	mov.w	r2, #4294967295
 8006458:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f103 0208 	add.w	r2, r3, #8
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f103 0208 	add.w	r2, r3, #8
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006474:	bf00      	nop
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	bc80      	pop	{r7}
 800647c:	4770      	bx	lr

0800647e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800647e:	b480      	push	{r7}
 8006480:	b083      	sub	sp, #12
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800648c:	bf00      	nop
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	bc80      	pop	{r7}
 8006494:	4770      	bx	lr

08006496 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006496:	b480      	push	{r7}
 8006498:	b085      	sub	sp, #20
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
 800649e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	689a      	ldr	r2, [r3, #8]
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	683a      	ldr	r2, [r7, #0]
 80064ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	683a      	ldr	r2, [r7, #0]
 80064c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	1c5a      	adds	r2, r3, #1
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	601a      	str	r2, [r3, #0]
}
 80064d2:	bf00      	nop
 80064d4:	3714      	adds	r7, #20
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bc80      	pop	{r7}
 80064da:	4770      	bx	lr

080064dc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80064dc:	b480      	push	{r7}
 80064de:	b085      	sub	sp, #20
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064f2:	d103      	bne.n	80064fc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	691b      	ldr	r3, [r3, #16]
 80064f8:	60fb      	str	r3, [r7, #12]
 80064fa:	e00c      	b.n	8006516 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	3308      	adds	r3, #8
 8006500:	60fb      	str	r3, [r7, #12]
 8006502:	e002      	b.n	800650a <vListInsert+0x2e>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	60fb      	str	r3, [r7, #12]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	68ba      	ldr	r2, [r7, #8]
 8006512:	429a      	cmp	r2, r3
 8006514:	d2f6      	bcs.n	8006504 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	685a      	ldr	r2, [r3, #4]
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	683a      	ldr	r2, [r7, #0]
 8006524:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	68fa      	ldr	r2, [r7, #12]
 800652a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	683a      	ldr	r2, [r7, #0]
 8006530:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	1c5a      	adds	r2, r3, #1
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	601a      	str	r2, [r3, #0]
}
 8006542:	bf00      	nop
 8006544:	3714      	adds	r7, #20
 8006546:	46bd      	mov	sp, r7
 8006548:	bc80      	pop	{r7}
 800654a:	4770      	bx	lr

0800654c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800654c:	b480      	push	{r7}
 800654e:	b085      	sub	sp, #20
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	691b      	ldr	r3, [r3, #16]
 8006558:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	6892      	ldr	r2, [r2, #8]
 8006562:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	6852      	ldr	r2, [r2, #4]
 800656c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	429a      	cmp	r2, r3
 8006576:	d103      	bne.n	8006580 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	689a      	ldr	r2, [r3, #8]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	1e5a      	subs	r2, r3, #1
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
}
 8006594:	4618      	mov	r0, r3
 8006596:	3714      	adds	r7, #20
 8006598:	46bd      	mov	sp, r7
 800659a:	bc80      	pop	{r7}
 800659c:	4770      	bx	lr

0800659e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800659e:	b580      	push	{r7, lr}
 80065a0:	b08e      	sub	sp, #56	@ 0x38
 80065a2:	af04      	add	r7, sp, #16
 80065a4:	60f8      	str	r0, [r7, #12]
 80065a6:	60b9      	str	r1, [r7, #8]
 80065a8:	607a      	str	r2, [r7, #4]
 80065aa:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80065ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d10b      	bne.n	80065ca <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80065b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065b6:	f383 8811 	msr	BASEPRI, r3
 80065ba:	f3bf 8f6f 	isb	sy
 80065be:	f3bf 8f4f 	dsb	sy
 80065c2:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80065c4:	bf00      	nop
 80065c6:	bf00      	nop
 80065c8:	e7fd      	b.n	80065c6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80065ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d10b      	bne.n	80065e8 <xTaskCreateStatic+0x4a>
	__asm volatile
 80065d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065d4:	f383 8811 	msr	BASEPRI, r3
 80065d8:	f3bf 8f6f 	isb	sy
 80065dc:	f3bf 8f4f 	dsb	sy
 80065e0:	61fb      	str	r3, [r7, #28]
}
 80065e2:	bf00      	nop
 80065e4:	bf00      	nop
 80065e6:	e7fd      	b.n	80065e4 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80065e8:	23a0      	movs	r3, #160	@ 0xa0
 80065ea:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	2ba0      	cmp	r3, #160	@ 0xa0
 80065f0:	d00b      	beq.n	800660a <xTaskCreateStatic+0x6c>
	__asm volatile
 80065f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065f6:	f383 8811 	msr	BASEPRI, r3
 80065fa:	f3bf 8f6f 	isb	sy
 80065fe:	f3bf 8f4f 	dsb	sy
 8006602:	61bb      	str	r3, [r7, #24]
}
 8006604:	bf00      	nop
 8006606:	bf00      	nop
 8006608:	e7fd      	b.n	8006606 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800660a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800660c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800660e:	2b00      	cmp	r3, #0
 8006610:	d01e      	beq.n	8006650 <xTaskCreateStatic+0xb2>
 8006612:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006614:	2b00      	cmp	r3, #0
 8006616:	d01b      	beq.n	8006650 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800661a:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800661c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800661e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006620:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006624:	2202      	movs	r2, #2
 8006626:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800662a:	2300      	movs	r3, #0
 800662c:	9303      	str	r3, [sp, #12]
 800662e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006630:	9302      	str	r3, [sp, #8]
 8006632:	f107 0314 	add.w	r3, r7, #20
 8006636:	9301      	str	r3, [sp, #4]
 8006638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800663a:	9300      	str	r3, [sp, #0]
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	68b9      	ldr	r1, [r7, #8]
 8006642:	68f8      	ldr	r0, [r7, #12]
 8006644:	f000 f850 	bl	80066e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006648:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800664a:	f000 f8ed 	bl	8006828 <prvAddNewTaskToReadyList>
 800664e:	e001      	b.n	8006654 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006650:	2300      	movs	r3, #0
 8006652:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006654:	697b      	ldr	r3, [r7, #20]
	}
 8006656:	4618      	mov	r0, r3
 8006658:	3728      	adds	r7, #40	@ 0x28
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}

0800665e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800665e:	b580      	push	{r7, lr}
 8006660:	b08c      	sub	sp, #48	@ 0x30
 8006662:	af04      	add	r7, sp, #16
 8006664:	60f8      	str	r0, [r7, #12]
 8006666:	60b9      	str	r1, [r7, #8]
 8006668:	603b      	str	r3, [r7, #0]
 800666a:	4613      	mov	r3, r2
 800666c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800666e:	88fb      	ldrh	r3, [r7, #6]
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	4618      	mov	r0, r3
 8006674:	f000 fe9c 	bl	80073b0 <pvPortMalloc>
 8006678:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d00e      	beq.n	800669e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006680:	20a0      	movs	r0, #160	@ 0xa0
 8006682:	f000 fe95 	bl	80073b0 <pvPortMalloc>
 8006686:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d003      	beq.n	8006696 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	697a      	ldr	r2, [r7, #20]
 8006692:	631a      	str	r2, [r3, #48]	@ 0x30
 8006694:	e005      	b.n	80066a2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006696:	6978      	ldr	r0, [r7, #20]
 8006698:	f000 ff58 	bl	800754c <vPortFree>
 800669c:	e001      	b.n	80066a2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800669e:	2300      	movs	r3, #0
 80066a0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d017      	beq.n	80066d8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80066b0:	88fa      	ldrh	r2, [r7, #6]
 80066b2:	2300      	movs	r3, #0
 80066b4:	9303      	str	r3, [sp, #12]
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	9302      	str	r3, [sp, #8]
 80066ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066bc:	9301      	str	r3, [sp, #4]
 80066be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066c0:	9300      	str	r3, [sp, #0]
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	68b9      	ldr	r1, [r7, #8]
 80066c6:	68f8      	ldr	r0, [r7, #12]
 80066c8:	f000 f80e 	bl	80066e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80066cc:	69f8      	ldr	r0, [r7, #28]
 80066ce:	f000 f8ab 	bl	8006828 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80066d2:	2301      	movs	r3, #1
 80066d4:	61bb      	str	r3, [r7, #24]
 80066d6:	e002      	b.n	80066de <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80066d8:	f04f 33ff 	mov.w	r3, #4294967295
 80066dc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80066de:	69bb      	ldr	r3, [r7, #24]
	}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3720      	adds	r7, #32
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b088      	sub	sp, #32
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	607a      	str	r2, [r7, #4]
 80066f4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80066f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006700:	3b01      	subs	r3, #1
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	4413      	add	r3, r2
 8006706:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	f023 0307 	bic.w	r3, r3, #7
 800670e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	f003 0307 	and.w	r3, r3, #7
 8006716:	2b00      	cmp	r3, #0
 8006718:	d00b      	beq.n	8006732 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800671a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800671e:	f383 8811 	msr	BASEPRI, r3
 8006722:	f3bf 8f6f 	isb	sy
 8006726:	f3bf 8f4f 	dsb	sy
 800672a:	617b      	str	r3, [r7, #20]
}
 800672c:	bf00      	nop
 800672e:	bf00      	nop
 8006730:	e7fd      	b.n	800672e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d01f      	beq.n	8006778 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006738:	2300      	movs	r3, #0
 800673a:	61fb      	str	r3, [r7, #28]
 800673c:	e012      	b.n	8006764 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800673e:	68ba      	ldr	r2, [r7, #8]
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	4413      	add	r3, r2
 8006744:	7819      	ldrb	r1, [r3, #0]
 8006746:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	4413      	add	r3, r2
 800674c:	3334      	adds	r3, #52	@ 0x34
 800674e:	460a      	mov	r2, r1
 8006750:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006752:	68ba      	ldr	r2, [r7, #8]
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	4413      	add	r3, r2
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d006      	beq.n	800676c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800675e:	69fb      	ldr	r3, [r7, #28]
 8006760:	3301      	adds	r3, #1
 8006762:	61fb      	str	r3, [r7, #28]
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	2b0f      	cmp	r3, #15
 8006768:	d9e9      	bls.n	800673e <prvInitialiseNewTask+0x56>
 800676a:	e000      	b.n	800676e <prvInitialiseNewTask+0x86>
			{
				break;
 800676c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800676e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006770:	2200      	movs	r2, #0
 8006772:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006776:	e003      	b.n	8006780 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800677a:	2200      	movs	r2, #0
 800677c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006782:	2b06      	cmp	r3, #6
 8006784:	d901      	bls.n	800678a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006786:	2306      	movs	r3, #6
 8006788:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800678a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800678c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800678e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006792:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006794:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006798:	2200      	movs	r2, #0
 800679a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800679c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800679e:	3304      	adds	r3, #4
 80067a0:	4618      	mov	r0, r3
 80067a2:	f7ff fe6c 	bl	800647e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80067a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067a8:	3318      	adds	r3, #24
 80067aa:	4618      	mov	r0, r3
 80067ac:	f7ff fe67 	bl	800647e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80067b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067b4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067b8:	f1c3 0207 	rsb	r2, r3, #7
 80067bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067be:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80067c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067c4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80067c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c8:	2200      	movs	r2, #0
 80067ca:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80067ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80067d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067d8:	334c      	adds	r3, #76	@ 0x4c
 80067da:	224c      	movs	r2, #76	@ 0x4c
 80067dc:	2100      	movs	r1, #0
 80067de:	4618      	mov	r0, r3
 80067e0:	f001 f8c4 	bl	800796c <memset>
 80067e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e6:	4a0d      	ldr	r2, [pc, #52]	@ (800681c <prvInitialiseNewTask+0x134>)
 80067e8:	651a      	str	r2, [r3, #80]	@ 0x50
 80067ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ec:	4a0c      	ldr	r2, [pc, #48]	@ (8006820 <prvInitialiseNewTask+0x138>)
 80067ee:	655a      	str	r2, [r3, #84]	@ 0x54
 80067f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f2:	4a0c      	ldr	r2, [pc, #48]	@ (8006824 <prvInitialiseNewTask+0x13c>)
 80067f4:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80067f6:	683a      	ldr	r2, [r7, #0]
 80067f8:	68f9      	ldr	r1, [r7, #12]
 80067fa:	69b8      	ldr	r0, [r7, #24]
 80067fc:	f000 fc28 	bl	8007050 <pxPortInitialiseStack>
 8006800:	4602      	mov	r2, r0
 8006802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006804:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006808:	2b00      	cmp	r3, #0
 800680a:	d002      	beq.n	8006812 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800680c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800680e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006810:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006812:	bf00      	nop
 8006814:	3720      	adds	r7, #32
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	200014a0 	.word	0x200014a0
 8006820:	20001508 	.word	0x20001508
 8006824:	20001570 	.word	0x20001570

08006828 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b082      	sub	sp, #8
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006830:	f000 fcfc 	bl	800722c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006834:	4b2a      	ldr	r3, [pc, #168]	@ (80068e0 <prvAddNewTaskToReadyList+0xb8>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	3301      	adds	r3, #1
 800683a:	4a29      	ldr	r2, [pc, #164]	@ (80068e0 <prvAddNewTaskToReadyList+0xb8>)
 800683c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800683e:	4b29      	ldr	r3, [pc, #164]	@ (80068e4 <prvAddNewTaskToReadyList+0xbc>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d109      	bne.n	800685a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006846:	4a27      	ldr	r2, [pc, #156]	@ (80068e4 <prvAddNewTaskToReadyList+0xbc>)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800684c:	4b24      	ldr	r3, [pc, #144]	@ (80068e0 <prvAddNewTaskToReadyList+0xb8>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	2b01      	cmp	r3, #1
 8006852:	d110      	bne.n	8006876 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006854:	f000 fad2 	bl	8006dfc <prvInitialiseTaskLists>
 8006858:	e00d      	b.n	8006876 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800685a:	4b23      	ldr	r3, [pc, #140]	@ (80068e8 <prvAddNewTaskToReadyList+0xc0>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d109      	bne.n	8006876 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006862:	4b20      	ldr	r3, [pc, #128]	@ (80068e4 <prvAddNewTaskToReadyList+0xbc>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800686c:	429a      	cmp	r2, r3
 800686e:	d802      	bhi.n	8006876 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006870:	4a1c      	ldr	r2, [pc, #112]	@ (80068e4 <prvAddNewTaskToReadyList+0xbc>)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006876:	4b1d      	ldr	r3, [pc, #116]	@ (80068ec <prvAddNewTaskToReadyList+0xc4>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	3301      	adds	r3, #1
 800687c:	4a1b      	ldr	r2, [pc, #108]	@ (80068ec <prvAddNewTaskToReadyList+0xc4>)
 800687e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006884:	2201      	movs	r2, #1
 8006886:	409a      	lsls	r2, r3
 8006888:	4b19      	ldr	r3, [pc, #100]	@ (80068f0 <prvAddNewTaskToReadyList+0xc8>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4313      	orrs	r3, r2
 800688e:	4a18      	ldr	r2, [pc, #96]	@ (80068f0 <prvAddNewTaskToReadyList+0xc8>)
 8006890:	6013      	str	r3, [r2, #0]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006896:	4613      	mov	r3, r2
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	4413      	add	r3, r2
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	4a15      	ldr	r2, [pc, #84]	@ (80068f4 <prvAddNewTaskToReadyList+0xcc>)
 80068a0:	441a      	add	r2, r3
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	3304      	adds	r3, #4
 80068a6:	4619      	mov	r1, r3
 80068a8:	4610      	mov	r0, r2
 80068aa:	f7ff fdf4 	bl	8006496 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80068ae:	f000 fced 	bl	800728c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80068b2:	4b0d      	ldr	r3, [pc, #52]	@ (80068e8 <prvAddNewTaskToReadyList+0xc0>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d00e      	beq.n	80068d8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80068ba:	4b0a      	ldr	r3, [pc, #40]	@ (80068e4 <prvAddNewTaskToReadyList+0xbc>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d207      	bcs.n	80068d8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80068c8:	4b0b      	ldr	r3, [pc, #44]	@ (80068f8 <prvAddNewTaskToReadyList+0xd0>)
 80068ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068ce:	601a      	str	r2, [r3, #0]
 80068d0:	f3bf 8f4f 	dsb	sy
 80068d4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068d8:	bf00      	nop
 80068da:	3708      	adds	r7, #8
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}
 80068e0:	20000844 	.word	0x20000844
 80068e4:	20000744 	.word	0x20000744
 80068e8:	20000850 	.word	0x20000850
 80068ec:	20000860 	.word	0x20000860
 80068f0:	2000084c 	.word	0x2000084c
 80068f4:	20000748 	.word	0x20000748
 80068f8:	e000ed04 	.word	0xe000ed04

080068fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006904:	2300      	movs	r3, #0
 8006906:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d018      	beq.n	8006940 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800690e:	4b14      	ldr	r3, [pc, #80]	@ (8006960 <vTaskDelay+0x64>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00b      	beq.n	800692e <vTaskDelay+0x32>
	__asm volatile
 8006916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800691a:	f383 8811 	msr	BASEPRI, r3
 800691e:	f3bf 8f6f 	isb	sy
 8006922:	f3bf 8f4f 	dsb	sy
 8006926:	60bb      	str	r3, [r7, #8]
}
 8006928:	bf00      	nop
 800692a:	bf00      	nop
 800692c:	e7fd      	b.n	800692a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800692e:	f000 f885 	bl	8006a3c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006932:	2100      	movs	r1, #0
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 fb25 	bl	8006f84 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800693a:	f000 f88d 	bl	8006a58 <xTaskResumeAll>
 800693e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d107      	bne.n	8006956 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006946:	4b07      	ldr	r3, [pc, #28]	@ (8006964 <vTaskDelay+0x68>)
 8006948:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800694c:	601a      	str	r2, [r3, #0]
 800694e:	f3bf 8f4f 	dsb	sy
 8006952:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006956:	bf00      	nop
 8006958:	3710      	adds	r7, #16
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	2000086c 	.word	0x2000086c
 8006964:	e000ed04 	.word	0xe000ed04

08006968 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b08a      	sub	sp, #40	@ 0x28
 800696c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800696e:	2300      	movs	r3, #0
 8006970:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006972:	2300      	movs	r3, #0
 8006974:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006976:	463a      	mov	r2, r7
 8006978:	1d39      	adds	r1, r7, #4
 800697a:	f107 0308 	add.w	r3, r7, #8
 800697e:	4618      	mov	r0, r3
 8006980:	f7f9 fcfc 	bl	800037c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006984:	6839      	ldr	r1, [r7, #0]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	68ba      	ldr	r2, [r7, #8]
 800698a:	9202      	str	r2, [sp, #8]
 800698c:	9301      	str	r3, [sp, #4]
 800698e:	2300      	movs	r3, #0
 8006990:	9300      	str	r3, [sp, #0]
 8006992:	2300      	movs	r3, #0
 8006994:	460a      	mov	r2, r1
 8006996:	4921      	ldr	r1, [pc, #132]	@ (8006a1c <vTaskStartScheduler+0xb4>)
 8006998:	4821      	ldr	r0, [pc, #132]	@ (8006a20 <vTaskStartScheduler+0xb8>)
 800699a:	f7ff fe00 	bl	800659e <xTaskCreateStatic>
 800699e:	4603      	mov	r3, r0
 80069a0:	4a20      	ldr	r2, [pc, #128]	@ (8006a24 <vTaskStartScheduler+0xbc>)
 80069a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80069a4:	4b1f      	ldr	r3, [pc, #124]	@ (8006a24 <vTaskStartScheduler+0xbc>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d002      	beq.n	80069b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80069ac:	2301      	movs	r3, #1
 80069ae:	617b      	str	r3, [r7, #20]
 80069b0:	e001      	b.n	80069b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80069b2:	2300      	movs	r3, #0
 80069b4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d11b      	bne.n	80069f4 <vTaskStartScheduler+0x8c>
	__asm volatile
 80069bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069c0:	f383 8811 	msr	BASEPRI, r3
 80069c4:	f3bf 8f6f 	isb	sy
 80069c8:	f3bf 8f4f 	dsb	sy
 80069cc:	613b      	str	r3, [r7, #16]
}
 80069ce:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80069d0:	4b15      	ldr	r3, [pc, #84]	@ (8006a28 <vTaskStartScheduler+0xc0>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	334c      	adds	r3, #76	@ 0x4c
 80069d6:	4a15      	ldr	r2, [pc, #84]	@ (8006a2c <vTaskStartScheduler+0xc4>)
 80069d8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80069da:	4b15      	ldr	r3, [pc, #84]	@ (8006a30 <vTaskStartScheduler+0xc8>)
 80069dc:	f04f 32ff 	mov.w	r2, #4294967295
 80069e0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80069e2:	4b14      	ldr	r3, [pc, #80]	@ (8006a34 <vTaskStartScheduler+0xcc>)
 80069e4:	2201      	movs	r2, #1
 80069e6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80069e8:	4b13      	ldr	r3, [pc, #76]	@ (8006a38 <vTaskStartScheduler+0xd0>)
 80069ea:	2200      	movs	r2, #0
 80069ec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80069ee:	f000 fbab 	bl	8007148 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80069f2:	e00f      	b.n	8006a14 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069fa:	d10b      	bne.n	8006a14 <vTaskStartScheduler+0xac>
	__asm volatile
 80069fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a00:	f383 8811 	msr	BASEPRI, r3
 8006a04:	f3bf 8f6f 	isb	sy
 8006a08:	f3bf 8f4f 	dsb	sy
 8006a0c:	60fb      	str	r3, [r7, #12]
}
 8006a0e:	bf00      	nop
 8006a10:	bf00      	nop
 8006a12:	e7fd      	b.n	8006a10 <vTaskStartScheduler+0xa8>
}
 8006a14:	bf00      	nop
 8006a16:	3718      	adds	r7, #24
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	080082e0 	.word	0x080082e0
 8006a20:	08006dcd 	.word	0x08006dcd
 8006a24:	20000868 	.word	0x20000868
 8006a28:	20000744 	.word	0x20000744
 8006a2c:	20000010 	.word	0x20000010
 8006a30:	20000864 	.word	0x20000864
 8006a34:	20000850 	.word	0x20000850
 8006a38:	20000848 	.word	0x20000848

08006a3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006a40:	4b04      	ldr	r3, [pc, #16]	@ (8006a54 <vTaskSuspendAll+0x18>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	3301      	adds	r3, #1
 8006a46:	4a03      	ldr	r2, [pc, #12]	@ (8006a54 <vTaskSuspendAll+0x18>)
 8006a48:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006a4a:	bf00      	nop
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bc80      	pop	{r7}
 8006a50:	4770      	bx	lr
 8006a52:	bf00      	nop
 8006a54:	2000086c 	.word	0x2000086c

08006a58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006a62:	2300      	movs	r3, #0
 8006a64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006a66:	4b42      	ldr	r3, [pc, #264]	@ (8006b70 <xTaskResumeAll+0x118>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d10b      	bne.n	8006a86 <xTaskResumeAll+0x2e>
	__asm volatile
 8006a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a72:	f383 8811 	msr	BASEPRI, r3
 8006a76:	f3bf 8f6f 	isb	sy
 8006a7a:	f3bf 8f4f 	dsb	sy
 8006a7e:	603b      	str	r3, [r7, #0]
}
 8006a80:	bf00      	nop
 8006a82:	bf00      	nop
 8006a84:	e7fd      	b.n	8006a82 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006a86:	f000 fbd1 	bl	800722c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006a8a:	4b39      	ldr	r3, [pc, #228]	@ (8006b70 <xTaskResumeAll+0x118>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	3b01      	subs	r3, #1
 8006a90:	4a37      	ldr	r2, [pc, #220]	@ (8006b70 <xTaskResumeAll+0x118>)
 8006a92:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a94:	4b36      	ldr	r3, [pc, #216]	@ (8006b70 <xTaskResumeAll+0x118>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d161      	bne.n	8006b60 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006a9c:	4b35      	ldr	r3, [pc, #212]	@ (8006b74 <xTaskResumeAll+0x11c>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d05d      	beq.n	8006b60 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006aa4:	e02e      	b.n	8006b04 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006aa6:	4b34      	ldr	r3, [pc, #208]	@ (8006b78 <xTaskResumeAll+0x120>)
 8006aa8:	68db      	ldr	r3, [r3, #12]
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	3318      	adds	r3, #24
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f7ff fd4a 	bl	800654c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	3304      	adds	r3, #4
 8006abc:	4618      	mov	r0, r3
 8006abe:	f7ff fd45 	bl	800654c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	409a      	lsls	r2, r3
 8006aca:	4b2c      	ldr	r3, [pc, #176]	@ (8006b7c <xTaskResumeAll+0x124>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	4a2a      	ldr	r2, [pc, #168]	@ (8006b7c <xTaskResumeAll+0x124>)
 8006ad2:	6013      	str	r3, [r2, #0]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ad8:	4613      	mov	r3, r2
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	4413      	add	r3, r2
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	4a27      	ldr	r2, [pc, #156]	@ (8006b80 <xTaskResumeAll+0x128>)
 8006ae2:	441a      	add	r2, r3
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	3304      	adds	r3, #4
 8006ae8:	4619      	mov	r1, r3
 8006aea:	4610      	mov	r0, r2
 8006aec:	f7ff fcd3 	bl	8006496 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006af4:	4b23      	ldr	r3, [pc, #140]	@ (8006b84 <xTaskResumeAll+0x12c>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d302      	bcc.n	8006b04 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006afe:	4b22      	ldr	r3, [pc, #136]	@ (8006b88 <xTaskResumeAll+0x130>)
 8006b00:	2201      	movs	r2, #1
 8006b02:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b04:	4b1c      	ldr	r3, [pc, #112]	@ (8006b78 <xTaskResumeAll+0x120>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d1cc      	bne.n	8006aa6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d001      	beq.n	8006b16 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006b12:	f000 fa17 	bl	8006f44 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006b16:	4b1d      	ldr	r3, [pc, #116]	@ (8006b8c <xTaskResumeAll+0x134>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d010      	beq.n	8006b44 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006b22:	f000 f837 	bl	8006b94 <xTaskIncrementTick>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d002      	beq.n	8006b32 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006b2c:	4b16      	ldr	r3, [pc, #88]	@ (8006b88 <xTaskResumeAll+0x130>)
 8006b2e:	2201      	movs	r2, #1
 8006b30:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	3b01      	subs	r3, #1
 8006b36:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d1f1      	bne.n	8006b22 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006b3e:	4b13      	ldr	r3, [pc, #76]	@ (8006b8c <xTaskResumeAll+0x134>)
 8006b40:	2200      	movs	r2, #0
 8006b42:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006b44:	4b10      	ldr	r3, [pc, #64]	@ (8006b88 <xTaskResumeAll+0x130>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d009      	beq.n	8006b60 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006b50:	4b0f      	ldr	r3, [pc, #60]	@ (8006b90 <xTaskResumeAll+0x138>)
 8006b52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b56:	601a      	str	r2, [r3, #0]
 8006b58:	f3bf 8f4f 	dsb	sy
 8006b5c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b60:	f000 fb94 	bl	800728c <vPortExitCritical>

	return xAlreadyYielded;
 8006b64:	68bb      	ldr	r3, [r7, #8]
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3710      	adds	r7, #16
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	2000086c 	.word	0x2000086c
 8006b74:	20000844 	.word	0x20000844
 8006b78:	20000804 	.word	0x20000804
 8006b7c:	2000084c 	.word	0x2000084c
 8006b80:	20000748 	.word	0x20000748
 8006b84:	20000744 	.word	0x20000744
 8006b88:	20000858 	.word	0x20000858
 8006b8c:	20000854 	.word	0x20000854
 8006b90:	e000ed04 	.word	0xe000ed04

08006b94 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b086      	sub	sp, #24
 8006b98:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b9e:	4b4f      	ldr	r3, [pc, #316]	@ (8006cdc <xTaskIncrementTick+0x148>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	f040 808f 	bne.w	8006cc6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006ba8:	4b4d      	ldr	r3, [pc, #308]	@ (8006ce0 <xTaskIncrementTick+0x14c>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	3301      	adds	r3, #1
 8006bae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006bb0:	4a4b      	ldr	r2, [pc, #300]	@ (8006ce0 <xTaskIncrementTick+0x14c>)
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d121      	bne.n	8006c00 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006bbc:	4b49      	ldr	r3, [pc, #292]	@ (8006ce4 <xTaskIncrementTick+0x150>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d00b      	beq.n	8006bde <xTaskIncrementTick+0x4a>
	__asm volatile
 8006bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bca:	f383 8811 	msr	BASEPRI, r3
 8006bce:	f3bf 8f6f 	isb	sy
 8006bd2:	f3bf 8f4f 	dsb	sy
 8006bd6:	603b      	str	r3, [r7, #0]
}
 8006bd8:	bf00      	nop
 8006bda:	bf00      	nop
 8006bdc:	e7fd      	b.n	8006bda <xTaskIncrementTick+0x46>
 8006bde:	4b41      	ldr	r3, [pc, #260]	@ (8006ce4 <xTaskIncrementTick+0x150>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	60fb      	str	r3, [r7, #12]
 8006be4:	4b40      	ldr	r3, [pc, #256]	@ (8006ce8 <xTaskIncrementTick+0x154>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a3e      	ldr	r2, [pc, #248]	@ (8006ce4 <xTaskIncrementTick+0x150>)
 8006bea:	6013      	str	r3, [r2, #0]
 8006bec:	4a3e      	ldr	r2, [pc, #248]	@ (8006ce8 <xTaskIncrementTick+0x154>)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	6013      	str	r3, [r2, #0]
 8006bf2:	4b3e      	ldr	r3, [pc, #248]	@ (8006cec <xTaskIncrementTick+0x158>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	4a3c      	ldr	r2, [pc, #240]	@ (8006cec <xTaskIncrementTick+0x158>)
 8006bfa:	6013      	str	r3, [r2, #0]
 8006bfc:	f000 f9a2 	bl	8006f44 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006c00:	4b3b      	ldr	r3, [pc, #236]	@ (8006cf0 <xTaskIncrementTick+0x15c>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	693a      	ldr	r2, [r7, #16]
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d348      	bcc.n	8006c9c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c0a:	4b36      	ldr	r3, [pc, #216]	@ (8006ce4 <xTaskIncrementTick+0x150>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d104      	bne.n	8006c1e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c14:	4b36      	ldr	r3, [pc, #216]	@ (8006cf0 <xTaskIncrementTick+0x15c>)
 8006c16:	f04f 32ff 	mov.w	r2, #4294967295
 8006c1a:	601a      	str	r2, [r3, #0]
					break;
 8006c1c:	e03e      	b.n	8006c9c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c1e:	4b31      	ldr	r3, [pc, #196]	@ (8006ce4 <xTaskIncrementTick+0x150>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006c2e:	693a      	ldr	r2, [r7, #16]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d203      	bcs.n	8006c3e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006c36:	4a2e      	ldr	r2, [pc, #184]	@ (8006cf0 <xTaskIncrementTick+0x15c>)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006c3c:	e02e      	b.n	8006c9c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	3304      	adds	r3, #4
 8006c42:	4618      	mov	r0, r3
 8006c44:	f7ff fc82 	bl	800654c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d004      	beq.n	8006c5a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	3318      	adds	r3, #24
 8006c54:	4618      	mov	r0, r3
 8006c56:	f7ff fc79 	bl	800654c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c5e:	2201      	movs	r2, #1
 8006c60:	409a      	lsls	r2, r3
 8006c62:	4b24      	ldr	r3, [pc, #144]	@ (8006cf4 <xTaskIncrementTick+0x160>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4313      	orrs	r3, r2
 8006c68:	4a22      	ldr	r2, [pc, #136]	@ (8006cf4 <xTaskIncrementTick+0x160>)
 8006c6a:	6013      	str	r3, [r2, #0]
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c70:	4613      	mov	r3, r2
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	4413      	add	r3, r2
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	4a1f      	ldr	r2, [pc, #124]	@ (8006cf8 <xTaskIncrementTick+0x164>)
 8006c7a:	441a      	add	r2, r3
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	3304      	adds	r3, #4
 8006c80:	4619      	mov	r1, r3
 8006c82:	4610      	mov	r0, r2
 8006c84:	f7ff fc07 	bl	8006496 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c8c:	4b1b      	ldr	r3, [pc, #108]	@ (8006cfc <xTaskIncrementTick+0x168>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d3b9      	bcc.n	8006c0a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006c96:	2301      	movs	r3, #1
 8006c98:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c9a:	e7b6      	b.n	8006c0a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006c9c:	4b17      	ldr	r3, [pc, #92]	@ (8006cfc <xTaskIncrementTick+0x168>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ca2:	4915      	ldr	r1, [pc, #84]	@ (8006cf8 <xTaskIncrementTick+0x164>)
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	4413      	add	r3, r2
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	440b      	add	r3, r1
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d901      	bls.n	8006cb8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006cb8:	4b11      	ldr	r3, [pc, #68]	@ (8006d00 <xTaskIncrementTick+0x16c>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d007      	beq.n	8006cd0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	617b      	str	r3, [r7, #20]
 8006cc4:	e004      	b.n	8006cd0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8006d04 <xTaskIncrementTick+0x170>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	3301      	adds	r3, #1
 8006ccc:	4a0d      	ldr	r2, [pc, #52]	@ (8006d04 <xTaskIncrementTick+0x170>)
 8006cce:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006cd0:	697b      	ldr	r3, [r7, #20]
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3718      	adds	r7, #24
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	2000086c 	.word	0x2000086c
 8006ce0:	20000848 	.word	0x20000848
 8006ce4:	200007fc 	.word	0x200007fc
 8006ce8:	20000800 	.word	0x20000800
 8006cec:	2000085c 	.word	0x2000085c
 8006cf0:	20000864 	.word	0x20000864
 8006cf4:	2000084c 	.word	0x2000084c
 8006cf8:	20000748 	.word	0x20000748
 8006cfc:	20000744 	.word	0x20000744
 8006d00:	20000858 	.word	0x20000858
 8006d04:	20000854 	.word	0x20000854

08006d08 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b087      	sub	sp, #28
 8006d0c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006d0e:	4b29      	ldr	r3, [pc, #164]	@ (8006db4 <vTaskSwitchContext+0xac>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d003      	beq.n	8006d1e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006d16:	4b28      	ldr	r3, [pc, #160]	@ (8006db8 <vTaskSwitchContext+0xb0>)
 8006d18:	2201      	movs	r2, #1
 8006d1a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006d1c:	e045      	b.n	8006daa <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8006d1e:	4b26      	ldr	r3, [pc, #152]	@ (8006db8 <vTaskSwitchContext+0xb0>)
 8006d20:	2200      	movs	r2, #0
 8006d22:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d24:	4b25      	ldr	r3, [pc, #148]	@ (8006dbc <vTaskSwitchContext+0xb4>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	fab3 f383 	clz	r3, r3
 8006d30:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006d32:	7afb      	ldrb	r3, [r7, #11]
 8006d34:	f1c3 031f 	rsb	r3, r3, #31
 8006d38:	617b      	str	r3, [r7, #20]
 8006d3a:	4921      	ldr	r1, [pc, #132]	@ (8006dc0 <vTaskSwitchContext+0xb8>)
 8006d3c:	697a      	ldr	r2, [r7, #20]
 8006d3e:	4613      	mov	r3, r2
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	4413      	add	r3, r2
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	440b      	add	r3, r1
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d10b      	bne.n	8006d66 <vTaskSwitchContext+0x5e>
	__asm volatile
 8006d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d52:	f383 8811 	msr	BASEPRI, r3
 8006d56:	f3bf 8f6f 	isb	sy
 8006d5a:	f3bf 8f4f 	dsb	sy
 8006d5e:	607b      	str	r3, [r7, #4]
}
 8006d60:	bf00      	nop
 8006d62:	bf00      	nop
 8006d64:	e7fd      	b.n	8006d62 <vTaskSwitchContext+0x5a>
 8006d66:	697a      	ldr	r2, [r7, #20]
 8006d68:	4613      	mov	r3, r2
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	4413      	add	r3, r2
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	4a13      	ldr	r2, [pc, #76]	@ (8006dc0 <vTaskSwitchContext+0xb8>)
 8006d72:	4413      	add	r3, r2
 8006d74:	613b      	str	r3, [r7, #16]
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	685a      	ldr	r2, [r3, #4]
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	605a      	str	r2, [r3, #4]
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	685a      	ldr	r2, [r3, #4]
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	3308      	adds	r3, #8
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d104      	bne.n	8006d96 <vTaskSwitchContext+0x8e>
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	685a      	ldr	r2, [r3, #4]
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	605a      	str	r2, [r3, #4]
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	4a09      	ldr	r2, [pc, #36]	@ (8006dc4 <vTaskSwitchContext+0xbc>)
 8006d9e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006da0:	4b08      	ldr	r3, [pc, #32]	@ (8006dc4 <vTaskSwitchContext+0xbc>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	334c      	adds	r3, #76	@ 0x4c
 8006da6:	4a08      	ldr	r2, [pc, #32]	@ (8006dc8 <vTaskSwitchContext+0xc0>)
 8006da8:	6013      	str	r3, [r2, #0]
}
 8006daa:	bf00      	nop
 8006dac:	371c      	adds	r7, #28
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bc80      	pop	{r7}
 8006db2:	4770      	bx	lr
 8006db4:	2000086c 	.word	0x2000086c
 8006db8:	20000858 	.word	0x20000858
 8006dbc:	2000084c 	.word	0x2000084c
 8006dc0:	20000748 	.word	0x20000748
 8006dc4:	20000744 	.word	0x20000744
 8006dc8:	20000010 	.word	0x20000010

08006dcc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b082      	sub	sp, #8
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006dd4:	f000 f852 	bl	8006e7c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006dd8:	4b06      	ldr	r3, [pc, #24]	@ (8006df4 <prvIdleTask+0x28>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d9f9      	bls.n	8006dd4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006de0:	4b05      	ldr	r3, [pc, #20]	@ (8006df8 <prvIdleTask+0x2c>)
 8006de2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006de6:	601a      	str	r2, [r3, #0]
 8006de8:	f3bf 8f4f 	dsb	sy
 8006dec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006df0:	e7f0      	b.n	8006dd4 <prvIdleTask+0x8>
 8006df2:	bf00      	nop
 8006df4:	20000748 	.word	0x20000748
 8006df8:	e000ed04 	.word	0xe000ed04

08006dfc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e02:	2300      	movs	r3, #0
 8006e04:	607b      	str	r3, [r7, #4]
 8006e06:	e00c      	b.n	8006e22 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	4413      	add	r3, r2
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	4a12      	ldr	r2, [pc, #72]	@ (8006e5c <prvInitialiseTaskLists+0x60>)
 8006e14:	4413      	add	r3, r2
 8006e16:	4618      	mov	r0, r3
 8006e18:	f7ff fb12 	bl	8006440 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	3301      	adds	r3, #1
 8006e20:	607b      	str	r3, [r7, #4]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2b06      	cmp	r3, #6
 8006e26:	d9ef      	bls.n	8006e08 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006e28:	480d      	ldr	r0, [pc, #52]	@ (8006e60 <prvInitialiseTaskLists+0x64>)
 8006e2a:	f7ff fb09 	bl	8006440 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006e2e:	480d      	ldr	r0, [pc, #52]	@ (8006e64 <prvInitialiseTaskLists+0x68>)
 8006e30:	f7ff fb06 	bl	8006440 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006e34:	480c      	ldr	r0, [pc, #48]	@ (8006e68 <prvInitialiseTaskLists+0x6c>)
 8006e36:	f7ff fb03 	bl	8006440 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006e3a:	480c      	ldr	r0, [pc, #48]	@ (8006e6c <prvInitialiseTaskLists+0x70>)
 8006e3c:	f7ff fb00 	bl	8006440 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006e40:	480b      	ldr	r0, [pc, #44]	@ (8006e70 <prvInitialiseTaskLists+0x74>)
 8006e42:	f7ff fafd 	bl	8006440 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006e46:	4b0b      	ldr	r3, [pc, #44]	@ (8006e74 <prvInitialiseTaskLists+0x78>)
 8006e48:	4a05      	ldr	r2, [pc, #20]	@ (8006e60 <prvInitialiseTaskLists+0x64>)
 8006e4a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006e4c:	4b0a      	ldr	r3, [pc, #40]	@ (8006e78 <prvInitialiseTaskLists+0x7c>)
 8006e4e:	4a05      	ldr	r2, [pc, #20]	@ (8006e64 <prvInitialiseTaskLists+0x68>)
 8006e50:	601a      	str	r2, [r3, #0]
}
 8006e52:	bf00      	nop
 8006e54:	3708      	adds	r7, #8
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	20000748 	.word	0x20000748
 8006e60:	200007d4 	.word	0x200007d4
 8006e64:	200007e8 	.word	0x200007e8
 8006e68:	20000804 	.word	0x20000804
 8006e6c:	20000818 	.word	0x20000818
 8006e70:	20000830 	.word	0x20000830
 8006e74:	200007fc 	.word	0x200007fc
 8006e78:	20000800 	.word	0x20000800

08006e7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b082      	sub	sp, #8
 8006e80:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e82:	e019      	b.n	8006eb8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006e84:	f000 f9d2 	bl	800722c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e88:	4b10      	ldr	r3, [pc, #64]	@ (8006ecc <prvCheckTasksWaitingTermination+0x50>)
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	68db      	ldr	r3, [r3, #12]
 8006e8e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	3304      	adds	r3, #4
 8006e94:	4618      	mov	r0, r3
 8006e96:	f7ff fb59 	bl	800654c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ed0 <prvCheckTasksWaitingTermination+0x54>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	4a0b      	ldr	r2, [pc, #44]	@ (8006ed0 <prvCheckTasksWaitingTermination+0x54>)
 8006ea2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8006ed4 <prvCheckTasksWaitingTermination+0x58>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	3b01      	subs	r3, #1
 8006eaa:	4a0a      	ldr	r2, [pc, #40]	@ (8006ed4 <prvCheckTasksWaitingTermination+0x58>)
 8006eac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006eae:	f000 f9ed 	bl	800728c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 f810 	bl	8006ed8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006eb8:	4b06      	ldr	r3, [pc, #24]	@ (8006ed4 <prvCheckTasksWaitingTermination+0x58>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d1e1      	bne.n	8006e84 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006ec0:	bf00      	nop
 8006ec2:	bf00      	nop
 8006ec4:	3708      	adds	r7, #8
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	20000818 	.word	0x20000818
 8006ed0:	20000844 	.word	0x20000844
 8006ed4:	2000082c 	.word	0x2000082c

08006ed8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b084      	sub	sp, #16
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	334c      	adds	r3, #76	@ 0x4c
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f000 fd49 	bl	800797c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d108      	bne.n	8006f06 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f000 fb27 	bl	800754c <vPortFree>
				vPortFree( pxTCB );
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 fb24 	bl	800754c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006f04:	e019      	b.n	8006f3a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d103      	bne.n	8006f18 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 fb1b 	bl	800754c <vPortFree>
	}
 8006f16:	e010      	b.n	8006f3a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006f1e:	2b02      	cmp	r3, #2
 8006f20:	d00b      	beq.n	8006f3a <prvDeleteTCB+0x62>
	__asm volatile
 8006f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f26:	f383 8811 	msr	BASEPRI, r3
 8006f2a:	f3bf 8f6f 	isb	sy
 8006f2e:	f3bf 8f4f 	dsb	sy
 8006f32:	60fb      	str	r3, [r7, #12]
}
 8006f34:	bf00      	nop
 8006f36:	bf00      	nop
 8006f38:	e7fd      	b.n	8006f36 <prvDeleteTCB+0x5e>
	}
 8006f3a:	bf00      	nop
 8006f3c:	3710      	adds	r7, #16
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
	...

08006f44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8006f7c <prvResetNextTaskUnblockTime+0x38>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d104      	bne.n	8006f5e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006f54:	4b0a      	ldr	r3, [pc, #40]	@ (8006f80 <prvResetNextTaskUnblockTime+0x3c>)
 8006f56:	f04f 32ff 	mov.w	r2, #4294967295
 8006f5a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006f5c:	e008      	b.n	8006f70 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f5e:	4b07      	ldr	r3, [pc, #28]	@ (8006f7c <prvResetNextTaskUnblockTime+0x38>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	68db      	ldr	r3, [r3, #12]
 8006f66:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	4a04      	ldr	r2, [pc, #16]	@ (8006f80 <prvResetNextTaskUnblockTime+0x3c>)
 8006f6e:	6013      	str	r3, [r2, #0]
}
 8006f70:	bf00      	nop
 8006f72:	370c      	adds	r7, #12
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bc80      	pop	{r7}
 8006f78:	4770      	bx	lr
 8006f7a:	bf00      	nop
 8006f7c:	200007fc 	.word	0x200007fc
 8006f80:	20000864 	.word	0x20000864

08006f84 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006f8e:	4b29      	ldr	r3, [pc, #164]	@ (8007034 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f94:	4b28      	ldr	r3, [pc, #160]	@ (8007038 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	3304      	adds	r3, #4
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f7ff fad6 	bl	800654c <uxListRemove>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d10b      	bne.n	8006fbe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006fa6:	4b24      	ldr	r3, [pc, #144]	@ (8007038 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fac:	2201      	movs	r2, #1
 8006fae:	fa02 f303 	lsl.w	r3, r2, r3
 8006fb2:	43da      	mvns	r2, r3
 8006fb4:	4b21      	ldr	r3, [pc, #132]	@ (800703c <prvAddCurrentTaskToDelayedList+0xb8>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4013      	ands	r3, r2
 8006fba:	4a20      	ldr	r2, [pc, #128]	@ (800703c <prvAddCurrentTaskToDelayedList+0xb8>)
 8006fbc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc4:	d10a      	bne.n	8006fdc <prvAddCurrentTaskToDelayedList+0x58>
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d007      	beq.n	8006fdc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fcc:	4b1a      	ldr	r3, [pc, #104]	@ (8007038 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	3304      	adds	r3, #4
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	481a      	ldr	r0, [pc, #104]	@ (8007040 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006fd6:	f7ff fa5e 	bl	8006496 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006fda:	e026      	b.n	800702a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006fdc:	68fa      	ldr	r2, [r7, #12]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006fe4:	4b14      	ldr	r3, [pc, #80]	@ (8007038 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	68ba      	ldr	r2, [r7, #8]
 8006fea:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006fec:	68ba      	ldr	r2, [r7, #8]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d209      	bcs.n	8007008 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ff4:	4b13      	ldr	r3, [pc, #76]	@ (8007044 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	4b0f      	ldr	r3, [pc, #60]	@ (8007038 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	3304      	adds	r3, #4
 8006ffe:	4619      	mov	r1, r3
 8007000:	4610      	mov	r0, r2
 8007002:	f7ff fa6b 	bl	80064dc <vListInsert>
}
 8007006:	e010      	b.n	800702a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007008:	4b0f      	ldr	r3, [pc, #60]	@ (8007048 <prvAddCurrentTaskToDelayedList+0xc4>)
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	4b0a      	ldr	r3, [pc, #40]	@ (8007038 <prvAddCurrentTaskToDelayedList+0xb4>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	3304      	adds	r3, #4
 8007012:	4619      	mov	r1, r3
 8007014:	4610      	mov	r0, r2
 8007016:	f7ff fa61 	bl	80064dc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800701a:	4b0c      	ldr	r3, [pc, #48]	@ (800704c <prvAddCurrentTaskToDelayedList+0xc8>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	68ba      	ldr	r2, [r7, #8]
 8007020:	429a      	cmp	r2, r3
 8007022:	d202      	bcs.n	800702a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007024:	4a09      	ldr	r2, [pc, #36]	@ (800704c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	6013      	str	r3, [r2, #0]
}
 800702a:	bf00      	nop
 800702c:	3710      	adds	r7, #16
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	20000848 	.word	0x20000848
 8007038:	20000744 	.word	0x20000744
 800703c:	2000084c 	.word	0x2000084c
 8007040:	20000830 	.word	0x20000830
 8007044:	20000800 	.word	0x20000800
 8007048:	200007fc 	.word	0x200007fc
 800704c:	20000864 	.word	0x20000864

08007050 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007050:	b480      	push	{r7}
 8007052:	b085      	sub	sp, #20
 8007054:	af00      	add	r7, sp, #0
 8007056:	60f8      	str	r0, [r7, #12]
 8007058:	60b9      	str	r1, [r7, #8]
 800705a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	3b04      	subs	r3, #4
 8007060:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007068:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	3b04      	subs	r3, #4
 800706e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	f023 0201 	bic.w	r2, r3, #1
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	3b04      	subs	r3, #4
 800707e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007080:	4a08      	ldr	r2, [pc, #32]	@ (80070a4 <pxPortInitialiseStack+0x54>)
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	3b14      	subs	r3, #20
 800708a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	3b20      	subs	r3, #32
 8007096:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007098:	68fb      	ldr	r3, [r7, #12]
}
 800709a:	4618      	mov	r0, r3
 800709c:	3714      	adds	r7, #20
 800709e:	46bd      	mov	sp, r7
 80070a0:	bc80      	pop	{r7}
 80070a2:	4770      	bx	lr
 80070a4:	080070a9 	.word	0x080070a9

080070a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80070a8:	b480      	push	{r7}
 80070aa:	b085      	sub	sp, #20
 80070ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80070ae:	2300      	movs	r3, #0
 80070b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80070b2:	4b12      	ldr	r3, [pc, #72]	@ (80070fc <prvTaskExitError+0x54>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ba:	d00b      	beq.n	80070d4 <prvTaskExitError+0x2c>
	__asm volatile
 80070bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070c0:	f383 8811 	msr	BASEPRI, r3
 80070c4:	f3bf 8f6f 	isb	sy
 80070c8:	f3bf 8f4f 	dsb	sy
 80070cc:	60fb      	str	r3, [r7, #12]
}
 80070ce:	bf00      	nop
 80070d0:	bf00      	nop
 80070d2:	e7fd      	b.n	80070d0 <prvTaskExitError+0x28>
	__asm volatile
 80070d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070d8:	f383 8811 	msr	BASEPRI, r3
 80070dc:	f3bf 8f6f 	isb	sy
 80070e0:	f3bf 8f4f 	dsb	sy
 80070e4:	60bb      	str	r3, [r7, #8]
}
 80070e6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80070e8:	bf00      	nop
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d0fc      	beq.n	80070ea <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80070f0:	bf00      	nop
 80070f2:	bf00      	nop
 80070f4:	3714      	adds	r7, #20
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bc80      	pop	{r7}
 80070fa:	4770      	bx	lr
 80070fc:	2000000c 	.word	0x2000000c

08007100 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007100:	4b07      	ldr	r3, [pc, #28]	@ (8007120 <pxCurrentTCBConst2>)
 8007102:	6819      	ldr	r1, [r3, #0]
 8007104:	6808      	ldr	r0, [r1, #0]
 8007106:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800710a:	f380 8809 	msr	PSP, r0
 800710e:	f3bf 8f6f 	isb	sy
 8007112:	f04f 0000 	mov.w	r0, #0
 8007116:	f380 8811 	msr	BASEPRI, r0
 800711a:	f04e 0e0d 	orr.w	lr, lr, #13
 800711e:	4770      	bx	lr

08007120 <pxCurrentTCBConst2>:
 8007120:	20000744 	.word	0x20000744
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007124:	bf00      	nop
 8007126:	bf00      	nop

08007128 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007128:	4806      	ldr	r0, [pc, #24]	@ (8007144 <prvPortStartFirstTask+0x1c>)
 800712a:	6800      	ldr	r0, [r0, #0]
 800712c:	6800      	ldr	r0, [r0, #0]
 800712e:	f380 8808 	msr	MSP, r0
 8007132:	b662      	cpsie	i
 8007134:	b661      	cpsie	f
 8007136:	f3bf 8f4f 	dsb	sy
 800713a:	f3bf 8f6f 	isb	sy
 800713e:	df00      	svc	0
 8007140:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007142:	bf00      	nop
 8007144:	e000ed08 	.word	0xe000ed08

08007148 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b084      	sub	sp, #16
 800714c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800714e:	4b32      	ldr	r3, [pc, #200]	@ (8007218 <xPortStartScheduler+0xd0>)
 8007150:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	b2db      	uxtb	r3, r3
 8007158:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	22ff      	movs	r2, #255	@ 0xff
 800715e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	b2db      	uxtb	r3, r3
 8007166:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007168:	78fb      	ldrb	r3, [r7, #3]
 800716a:	b2db      	uxtb	r3, r3
 800716c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007170:	b2da      	uxtb	r2, r3
 8007172:	4b2a      	ldr	r3, [pc, #168]	@ (800721c <xPortStartScheduler+0xd4>)
 8007174:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007176:	4b2a      	ldr	r3, [pc, #168]	@ (8007220 <xPortStartScheduler+0xd8>)
 8007178:	2207      	movs	r2, #7
 800717a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800717c:	e009      	b.n	8007192 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800717e:	4b28      	ldr	r3, [pc, #160]	@ (8007220 <xPortStartScheduler+0xd8>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	3b01      	subs	r3, #1
 8007184:	4a26      	ldr	r2, [pc, #152]	@ (8007220 <xPortStartScheduler+0xd8>)
 8007186:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007188:	78fb      	ldrb	r3, [r7, #3]
 800718a:	b2db      	uxtb	r3, r3
 800718c:	005b      	lsls	r3, r3, #1
 800718e:	b2db      	uxtb	r3, r3
 8007190:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007192:	78fb      	ldrb	r3, [r7, #3]
 8007194:	b2db      	uxtb	r3, r3
 8007196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800719a:	2b80      	cmp	r3, #128	@ 0x80
 800719c:	d0ef      	beq.n	800717e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800719e:	4b20      	ldr	r3, [pc, #128]	@ (8007220 <xPortStartScheduler+0xd8>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f1c3 0307 	rsb	r3, r3, #7
 80071a6:	2b04      	cmp	r3, #4
 80071a8:	d00b      	beq.n	80071c2 <xPortStartScheduler+0x7a>
	__asm volatile
 80071aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071ae:	f383 8811 	msr	BASEPRI, r3
 80071b2:	f3bf 8f6f 	isb	sy
 80071b6:	f3bf 8f4f 	dsb	sy
 80071ba:	60bb      	str	r3, [r7, #8]
}
 80071bc:	bf00      	nop
 80071be:	bf00      	nop
 80071c0:	e7fd      	b.n	80071be <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80071c2:	4b17      	ldr	r3, [pc, #92]	@ (8007220 <xPortStartScheduler+0xd8>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	021b      	lsls	r3, r3, #8
 80071c8:	4a15      	ldr	r2, [pc, #84]	@ (8007220 <xPortStartScheduler+0xd8>)
 80071ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80071cc:	4b14      	ldr	r3, [pc, #80]	@ (8007220 <xPortStartScheduler+0xd8>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80071d4:	4a12      	ldr	r2, [pc, #72]	@ (8007220 <xPortStartScheduler+0xd8>)
 80071d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	b2da      	uxtb	r2, r3
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80071e0:	4b10      	ldr	r3, [pc, #64]	@ (8007224 <xPortStartScheduler+0xdc>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a0f      	ldr	r2, [pc, #60]	@ (8007224 <xPortStartScheduler+0xdc>)
 80071e6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80071ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80071ec:	4b0d      	ldr	r3, [pc, #52]	@ (8007224 <xPortStartScheduler+0xdc>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a0c      	ldr	r2, [pc, #48]	@ (8007224 <xPortStartScheduler+0xdc>)
 80071f2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80071f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80071f8:	f000 f8b8 	bl	800736c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80071fc:	4b0a      	ldr	r3, [pc, #40]	@ (8007228 <xPortStartScheduler+0xe0>)
 80071fe:	2200      	movs	r2, #0
 8007200:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007202:	f7ff ff91 	bl	8007128 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007206:	f7ff fd7f 	bl	8006d08 <vTaskSwitchContext>
	prvTaskExitError();
 800720a:	f7ff ff4d 	bl	80070a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800720e:	2300      	movs	r3, #0
}
 8007210:	4618      	mov	r0, r3
 8007212:	3710      	adds	r7, #16
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}
 8007218:	e000e400 	.word	0xe000e400
 800721c:	20000870 	.word	0x20000870
 8007220:	20000874 	.word	0x20000874
 8007224:	e000ed20 	.word	0xe000ed20
 8007228:	2000000c 	.word	0x2000000c

0800722c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
	__asm volatile
 8007232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007236:	f383 8811 	msr	BASEPRI, r3
 800723a:	f3bf 8f6f 	isb	sy
 800723e:	f3bf 8f4f 	dsb	sy
 8007242:	607b      	str	r3, [r7, #4]
}
 8007244:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007246:	4b0f      	ldr	r3, [pc, #60]	@ (8007284 <vPortEnterCritical+0x58>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	3301      	adds	r3, #1
 800724c:	4a0d      	ldr	r2, [pc, #52]	@ (8007284 <vPortEnterCritical+0x58>)
 800724e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007250:	4b0c      	ldr	r3, [pc, #48]	@ (8007284 <vPortEnterCritical+0x58>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	2b01      	cmp	r3, #1
 8007256:	d110      	bne.n	800727a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007258:	4b0b      	ldr	r3, [pc, #44]	@ (8007288 <vPortEnterCritical+0x5c>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	b2db      	uxtb	r3, r3
 800725e:	2b00      	cmp	r3, #0
 8007260:	d00b      	beq.n	800727a <vPortEnterCritical+0x4e>
	__asm volatile
 8007262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007266:	f383 8811 	msr	BASEPRI, r3
 800726a:	f3bf 8f6f 	isb	sy
 800726e:	f3bf 8f4f 	dsb	sy
 8007272:	603b      	str	r3, [r7, #0]
}
 8007274:	bf00      	nop
 8007276:	bf00      	nop
 8007278:	e7fd      	b.n	8007276 <vPortEnterCritical+0x4a>
	}
}
 800727a:	bf00      	nop
 800727c:	370c      	adds	r7, #12
 800727e:	46bd      	mov	sp, r7
 8007280:	bc80      	pop	{r7}
 8007282:	4770      	bx	lr
 8007284:	2000000c 	.word	0x2000000c
 8007288:	e000ed04 	.word	0xe000ed04

0800728c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800728c:	b480      	push	{r7}
 800728e:	b083      	sub	sp, #12
 8007290:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007292:	4b12      	ldr	r3, [pc, #72]	@ (80072dc <vPortExitCritical+0x50>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d10b      	bne.n	80072b2 <vPortExitCritical+0x26>
	__asm volatile
 800729a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800729e:	f383 8811 	msr	BASEPRI, r3
 80072a2:	f3bf 8f6f 	isb	sy
 80072a6:	f3bf 8f4f 	dsb	sy
 80072aa:	607b      	str	r3, [r7, #4]
}
 80072ac:	bf00      	nop
 80072ae:	bf00      	nop
 80072b0:	e7fd      	b.n	80072ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80072b2:	4b0a      	ldr	r3, [pc, #40]	@ (80072dc <vPortExitCritical+0x50>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	3b01      	subs	r3, #1
 80072b8:	4a08      	ldr	r2, [pc, #32]	@ (80072dc <vPortExitCritical+0x50>)
 80072ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80072bc:	4b07      	ldr	r3, [pc, #28]	@ (80072dc <vPortExitCritical+0x50>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d105      	bne.n	80072d0 <vPortExitCritical+0x44>
 80072c4:	2300      	movs	r3, #0
 80072c6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80072ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80072d0:	bf00      	nop
 80072d2:	370c      	adds	r7, #12
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bc80      	pop	{r7}
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop
 80072dc:	2000000c 	.word	0x2000000c

080072e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80072e0:	f3ef 8009 	mrs	r0, PSP
 80072e4:	f3bf 8f6f 	isb	sy
 80072e8:	4b0d      	ldr	r3, [pc, #52]	@ (8007320 <pxCurrentTCBConst>)
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80072f0:	6010      	str	r0, [r2, #0]
 80072f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80072f6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80072fa:	f380 8811 	msr	BASEPRI, r0
 80072fe:	f7ff fd03 	bl	8006d08 <vTaskSwitchContext>
 8007302:	f04f 0000 	mov.w	r0, #0
 8007306:	f380 8811 	msr	BASEPRI, r0
 800730a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800730e:	6819      	ldr	r1, [r3, #0]
 8007310:	6808      	ldr	r0, [r1, #0]
 8007312:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007316:	f380 8809 	msr	PSP, r0
 800731a:	f3bf 8f6f 	isb	sy
 800731e:	4770      	bx	lr

08007320 <pxCurrentTCBConst>:
 8007320:	20000744 	.word	0x20000744
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007324:	bf00      	nop
 8007326:	bf00      	nop

08007328 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
	__asm volatile
 800732e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007332:	f383 8811 	msr	BASEPRI, r3
 8007336:	f3bf 8f6f 	isb	sy
 800733a:	f3bf 8f4f 	dsb	sy
 800733e:	607b      	str	r3, [r7, #4]
}
 8007340:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007342:	f7ff fc27 	bl	8006b94 <xTaskIncrementTick>
 8007346:	4603      	mov	r3, r0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d003      	beq.n	8007354 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800734c:	4b06      	ldr	r3, [pc, #24]	@ (8007368 <SysTick_Handler+0x40>)
 800734e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007352:	601a      	str	r2, [r3, #0]
 8007354:	2300      	movs	r3, #0
 8007356:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	f383 8811 	msr	BASEPRI, r3
}
 800735e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007360:	bf00      	nop
 8007362:	3708      	adds	r7, #8
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}
 8007368:	e000ed04 	.word	0xe000ed04

0800736c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800736c:	b480      	push	{r7}
 800736e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007370:	4b0a      	ldr	r3, [pc, #40]	@ (800739c <vPortSetupTimerInterrupt+0x30>)
 8007372:	2200      	movs	r2, #0
 8007374:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007376:	4b0a      	ldr	r3, [pc, #40]	@ (80073a0 <vPortSetupTimerInterrupt+0x34>)
 8007378:	2200      	movs	r2, #0
 800737a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800737c:	4b09      	ldr	r3, [pc, #36]	@ (80073a4 <vPortSetupTimerInterrupt+0x38>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a09      	ldr	r2, [pc, #36]	@ (80073a8 <vPortSetupTimerInterrupt+0x3c>)
 8007382:	fba2 2303 	umull	r2, r3, r2, r3
 8007386:	099b      	lsrs	r3, r3, #6
 8007388:	4a08      	ldr	r2, [pc, #32]	@ (80073ac <vPortSetupTimerInterrupt+0x40>)
 800738a:	3b01      	subs	r3, #1
 800738c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800738e:	4b03      	ldr	r3, [pc, #12]	@ (800739c <vPortSetupTimerInterrupt+0x30>)
 8007390:	2207      	movs	r2, #7
 8007392:	601a      	str	r2, [r3, #0]
}
 8007394:	bf00      	nop
 8007396:	46bd      	mov	sp, r7
 8007398:	bc80      	pop	{r7}
 800739a:	4770      	bx	lr
 800739c:	e000e010 	.word	0xe000e010
 80073a0:	e000e018 	.word	0xe000e018
 80073a4:	20000000 	.word	0x20000000
 80073a8:	10624dd3 	.word	0x10624dd3
 80073ac:	e000e014 	.word	0xe000e014

080073b0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b08a      	sub	sp, #40	@ 0x28
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80073b8:	2300      	movs	r3, #0
 80073ba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80073bc:	f7ff fb3e 	bl	8006a3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80073c0:	4b5c      	ldr	r3, [pc, #368]	@ (8007534 <pvPortMalloc+0x184>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d101      	bne.n	80073cc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80073c8:	f000 f924 	bl	8007614 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80073cc:	4b5a      	ldr	r3, [pc, #360]	@ (8007538 <pvPortMalloc+0x188>)
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	4013      	ands	r3, r2
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	f040 8095 	bne.w	8007504 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d01e      	beq.n	800741e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80073e0:	2208      	movs	r2, #8
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	4413      	add	r3, r2
 80073e6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f003 0307 	and.w	r3, r3, #7
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d015      	beq.n	800741e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f023 0307 	bic.w	r3, r3, #7
 80073f8:	3308      	adds	r3, #8
 80073fa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f003 0307 	and.w	r3, r3, #7
 8007402:	2b00      	cmp	r3, #0
 8007404:	d00b      	beq.n	800741e <pvPortMalloc+0x6e>
	__asm volatile
 8007406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800740a:	f383 8811 	msr	BASEPRI, r3
 800740e:	f3bf 8f6f 	isb	sy
 8007412:	f3bf 8f4f 	dsb	sy
 8007416:	617b      	str	r3, [r7, #20]
}
 8007418:	bf00      	nop
 800741a:	bf00      	nop
 800741c:	e7fd      	b.n	800741a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d06f      	beq.n	8007504 <pvPortMalloc+0x154>
 8007424:	4b45      	ldr	r3, [pc, #276]	@ (800753c <pvPortMalloc+0x18c>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	429a      	cmp	r2, r3
 800742c:	d86a      	bhi.n	8007504 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800742e:	4b44      	ldr	r3, [pc, #272]	@ (8007540 <pvPortMalloc+0x190>)
 8007430:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007432:	4b43      	ldr	r3, [pc, #268]	@ (8007540 <pvPortMalloc+0x190>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007438:	e004      	b.n	8007444 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800743a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800743c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800743e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	429a      	cmp	r2, r3
 800744c:	d903      	bls.n	8007456 <pvPortMalloc+0xa6>
 800744e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d1f1      	bne.n	800743a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007456:	4b37      	ldr	r3, [pc, #220]	@ (8007534 <pvPortMalloc+0x184>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800745c:	429a      	cmp	r2, r3
 800745e:	d051      	beq.n	8007504 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007460:	6a3b      	ldr	r3, [r7, #32]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	2208      	movs	r2, #8
 8007466:	4413      	add	r3, r2
 8007468:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800746a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	6a3b      	ldr	r3, [r7, #32]
 8007470:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007474:	685a      	ldr	r2, [r3, #4]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	1ad2      	subs	r2, r2, r3
 800747a:	2308      	movs	r3, #8
 800747c:	005b      	lsls	r3, r3, #1
 800747e:	429a      	cmp	r2, r3
 8007480:	d920      	bls.n	80074c4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007482:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	4413      	add	r3, r2
 8007488:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800748a:	69bb      	ldr	r3, [r7, #24]
 800748c:	f003 0307 	and.w	r3, r3, #7
 8007490:	2b00      	cmp	r3, #0
 8007492:	d00b      	beq.n	80074ac <pvPortMalloc+0xfc>
	__asm volatile
 8007494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007498:	f383 8811 	msr	BASEPRI, r3
 800749c:	f3bf 8f6f 	isb	sy
 80074a0:	f3bf 8f4f 	dsb	sy
 80074a4:	613b      	str	r3, [r7, #16]
}
 80074a6:	bf00      	nop
 80074a8:	bf00      	nop
 80074aa:	e7fd      	b.n	80074a8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80074ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ae:	685a      	ldr	r2, [r3, #4]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	1ad2      	subs	r2, r2, r3
 80074b4:	69bb      	ldr	r3, [r7, #24]
 80074b6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80074b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80074be:	69b8      	ldr	r0, [r7, #24]
 80074c0:	f000 f90a 	bl	80076d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80074c4:	4b1d      	ldr	r3, [pc, #116]	@ (800753c <pvPortMalloc+0x18c>)
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	1ad3      	subs	r3, r2, r3
 80074ce:	4a1b      	ldr	r2, [pc, #108]	@ (800753c <pvPortMalloc+0x18c>)
 80074d0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80074d2:	4b1a      	ldr	r3, [pc, #104]	@ (800753c <pvPortMalloc+0x18c>)
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	4b1b      	ldr	r3, [pc, #108]	@ (8007544 <pvPortMalloc+0x194>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	429a      	cmp	r2, r3
 80074dc:	d203      	bcs.n	80074e6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80074de:	4b17      	ldr	r3, [pc, #92]	@ (800753c <pvPortMalloc+0x18c>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a18      	ldr	r2, [pc, #96]	@ (8007544 <pvPortMalloc+0x194>)
 80074e4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80074e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e8:	685a      	ldr	r2, [r3, #4]
 80074ea:	4b13      	ldr	r3, [pc, #76]	@ (8007538 <pvPortMalloc+0x188>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	431a      	orrs	r2, r3
 80074f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80074f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f6:	2200      	movs	r2, #0
 80074f8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80074fa:	4b13      	ldr	r3, [pc, #76]	@ (8007548 <pvPortMalloc+0x198>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	3301      	adds	r3, #1
 8007500:	4a11      	ldr	r2, [pc, #68]	@ (8007548 <pvPortMalloc+0x198>)
 8007502:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007504:	f7ff faa8 	bl	8006a58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007508:	69fb      	ldr	r3, [r7, #28]
 800750a:	f003 0307 	and.w	r3, r3, #7
 800750e:	2b00      	cmp	r3, #0
 8007510:	d00b      	beq.n	800752a <pvPortMalloc+0x17a>
	__asm volatile
 8007512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007516:	f383 8811 	msr	BASEPRI, r3
 800751a:	f3bf 8f6f 	isb	sy
 800751e:	f3bf 8f4f 	dsb	sy
 8007522:	60fb      	str	r3, [r7, #12]
}
 8007524:	bf00      	nop
 8007526:	bf00      	nop
 8007528:	e7fd      	b.n	8007526 <pvPortMalloc+0x176>
	return pvReturn;
 800752a:	69fb      	ldr	r3, [r7, #28]
}
 800752c:	4618      	mov	r0, r3
 800752e:	3728      	adds	r7, #40	@ 0x28
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}
 8007534:	20001480 	.word	0x20001480
 8007538:	20001494 	.word	0x20001494
 800753c:	20001484 	.word	0x20001484
 8007540:	20001478 	.word	0x20001478
 8007544:	20001488 	.word	0x20001488
 8007548:	2000148c 	.word	0x2000148c

0800754c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b086      	sub	sp, #24
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d04f      	beq.n	80075fe <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800755e:	2308      	movs	r3, #8
 8007560:	425b      	negs	r3, r3
 8007562:	697a      	ldr	r2, [r7, #20]
 8007564:	4413      	add	r3, r2
 8007566:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	685a      	ldr	r2, [r3, #4]
 8007570:	4b25      	ldr	r3, [pc, #148]	@ (8007608 <vPortFree+0xbc>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4013      	ands	r3, r2
 8007576:	2b00      	cmp	r3, #0
 8007578:	d10b      	bne.n	8007592 <vPortFree+0x46>
	__asm volatile
 800757a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800757e:	f383 8811 	msr	BASEPRI, r3
 8007582:	f3bf 8f6f 	isb	sy
 8007586:	f3bf 8f4f 	dsb	sy
 800758a:	60fb      	str	r3, [r7, #12]
}
 800758c:	bf00      	nop
 800758e:	bf00      	nop
 8007590:	e7fd      	b.n	800758e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d00b      	beq.n	80075b2 <vPortFree+0x66>
	__asm volatile
 800759a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800759e:	f383 8811 	msr	BASEPRI, r3
 80075a2:	f3bf 8f6f 	isb	sy
 80075a6:	f3bf 8f4f 	dsb	sy
 80075aa:	60bb      	str	r3, [r7, #8]
}
 80075ac:	bf00      	nop
 80075ae:	bf00      	nop
 80075b0:	e7fd      	b.n	80075ae <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	685a      	ldr	r2, [r3, #4]
 80075b6:	4b14      	ldr	r3, [pc, #80]	@ (8007608 <vPortFree+0xbc>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4013      	ands	r3, r2
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d01e      	beq.n	80075fe <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d11a      	bne.n	80075fe <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	685a      	ldr	r2, [r3, #4]
 80075cc:	4b0e      	ldr	r3, [pc, #56]	@ (8007608 <vPortFree+0xbc>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	43db      	mvns	r3, r3
 80075d2:	401a      	ands	r2, r3
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80075d8:	f7ff fa30 	bl	8006a3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	685a      	ldr	r2, [r3, #4]
 80075e0:	4b0a      	ldr	r3, [pc, #40]	@ (800760c <vPortFree+0xc0>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4413      	add	r3, r2
 80075e6:	4a09      	ldr	r2, [pc, #36]	@ (800760c <vPortFree+0xc0>)
 80075e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80075ea:	6938      	ldr	r0, [r7, #16]
 80075ec:	f000 f874 	bl	80076d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80075f0:	4b07      	ldr	r3, [pc, #28]	@ (8007610 <vPortFree+0xc4>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	3301      	adds	r3, #1
 80075f6:	4a06      	ldr	r2, [pc, #24]	@ (8007610 <vPortFree+0xc4>)
 80075f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80075fa:	f7ff fa2d 	bl	8006a58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80075fe:	bf00      	nop
 8007600:	3718      	adds	r7, #24
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop
 8007608:	20001494 	.word	0x20001494
 800760c:	20001484 	.word	0x20001484
 8007610:	20001490 	.word	0x20001490

08007614 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007614:	b480      	push	{r7}
 8007616:	b085      	sub	sp, #20
 8007618:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800761a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800761e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007620:	4b27      	ldr	r3, [pc, #156]	@ (80076c0 <prvHeapInit+0xac>)
 8007622:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f003 0307 	and.w	r3, r3, #7
 800762a:	2b00      	cmp	r3, #0
 800762c:	d00c      	beq.n	8007648 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	3307      	adds	r3, #7
 8007632:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f023 0307 	bic.w	r3, r3, #7
 800763a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800763c:	68ba      	ldr	r2, [r7, #8]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	1ad3      	subs	r3, r2, r3
 8007642:	4a1f      	ldr	r2, [pc, #124]	@ (80076c0 <prvHeapInit+0xac>)
 8007644:	4413      	add	r3, r2
 8007646:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800764c:	4a1d      	ldr	r2, [pc, #116]	@ (80076c4 <prvHeapInit+0xb0>)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007652:	4b1c      	ldr	r3, [pc, #112]	@ (80076c4 <prvHeapInit+0xb0>)
 8007654:	2200      	movs	r2, #0
 8007656:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	68ba      	ldr	r2, [r7, #8]
 800765c:	4413      	add	r3, r2
 800765e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007660:	2208      	movs	r2, #8
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	1a9b      	subs	r3, r3, r2
 8007666:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f023 0307 	bic.w	r3, r3, #7
 800766e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	4a15      	ldr	r2, [pc, #84]	@ (80076c8 <prvHeapInit+0xb4>)
 8007674:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007676:	4b14      	ldr	r3, [pc, #80]	@ (80076c8 <prvHeapInit+0xb4>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	2200      	movs	r2, #0
 800767c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800767e:	4b12      	ldr	r3, [pc, #72]	@ (80076c8 <prvHeapInit+0xb4>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	2200      	movs	r2, #0
 8007684:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	68fa      	ldr	r2, [r7, #12]
 800768e:	1ad2      	subs	r2, r2, r3
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007694:	4b0c      	ldr	r3, [pc, #48]	@ (80076c8 <prvHeapInit+0xb4>)
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	4a0a      	ldr	r2, [pc, #40]	@ (80076cc <prvHeapInit+0xb8>)
 80076a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	4a09      	ldr	r2, [pc, #36]	@ (80076d0 <prvHeapInit+0xbc>)
 80076aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80076ac:	4b09      	ldr	r3, [pc, #36]	@ (80076d4 <prvHeapInit+0xc0>)
 80076ae:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80076b2:	601a      	str	r2, [r3, #0]
}
 80076b4:	bf00      	nop
 80076b6:	3714      	adds	r7, #20
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bc80      	pop	{r7}
 80076bc:	4770      	bx	lr
 80076be:	bf00      	nop
 80076c0:	20000878 	.word	0x20000878
 80076c4:	20001478 	.word	0x20001478
 80076c8:	20001480 	.word	0x20001480
 80076cc:	20001488 	.word	0x20001488
 80076d0:	20001484 	.word	0x20001484
 80076d4:	20001494 	.word	0x20001494

080076d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80076d8:	b480      	push	{r7}
 80076da:	b085      	sub	sp, #20
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80076e0:	4b27      	ldr	r3, [pc, #156]	@ (8007780 <prvInsertBlockIntoFreeList+0xa8>)
 80076e2:	60fb      	str	r3, [r7, #12]
 80076e4:	e002      	b.n	80076ec <prvInsertBlockIntoFreeList+0x14>
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	60fb      	str	r3, [r7, #12]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d8f7      	bhi.n	80076e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	68ba      	ldr	r2, [r7, #8]
 8007700:	4413      	add	r3, r2
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	429a      	cmp	r2, r3
 8007706:	d108      	bne.n	800771a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	685a      	ldr	r2, [r3, #4]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	441a      	add	r2, r3
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	68ba      	ldr	r2, [r7, #8]
 8007724:	441a      	add	r2, r3
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	429a      	cmp	r2, r3
 800772c:	d118      	bne.n	8007760 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	4b14      	ldr	r3, [pc, #80]	@ (8007784 <prvInsertBlockIntoFreeList+0xac>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	429a      	cmp	r2, r3
 8007738:	d00d      	beq.n	8007756 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	685a      	ldr	r2, [r3, #4]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	441a      	add	r2, r3
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	601a      	str	r2, [r3, #0]
 8007754:	e008      	b.n	8007768 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007756:	4b0b      	ldr	r3, [pc, #44]	@ (8007784 <prvInsertBlockIntoFreeList+0xac>)
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	601a      	str	r2, [r3, #0]
 800775e:	e003      	b.n	8007768 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007768:	68fa      	ldr	r2, [r7, #12]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	429a      	cmp	r2, r3
 800776e:	d002      	beq.n	8007776 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007776:	bf00      	nop
 8007778:	3714      	adds	r7, #20
 800777a:	46bd      	mov	sp, r7
 800777c:	bc80      	pop	{r7}
 800777e:	4770      	bx	lr
 8007780:	20001478 	.word	0x20001478
 8007784:	20001480 	.word	0x20001480

08007788 <malloc>:
 8007788:	4b02      	ldr	r3, [pc, #8]	@ (8007794 <malloc+0xc>)
 800778a:	4601      	mov	r1, r0
 800778c:	6818      	ldr	r0, [r3, #0]
 800778e:	f000 b82d 	b.w	80077ec <_malloc_r>
 8007792:	bf00      	nop
 8007794:	20000010 	.word	0x20000010

08007798 <free>:
 8007798:	4b02      	ldr	r3, [pc, #8]	@ (80077a4 <free+0xc>)
 800779a:	4601      	mov	r1, r0
 800779c:	6818      	ldr	r0, [r3, #0]
 800779e:	f000 b98d 	b.w	8007abc <_free_r>
 80077a2:	bf00      	nop
 80077a4:	20000010 	.word	0x20000010

080077a8 <sbrk_aligned>:
 80077a8:	b570      	push	{r4, r5, r6, lr}
 80077aa:	4e0f      	ldr	r6, [pc, #60]	@ (80077e8 <sbrk_aligned+0x40>)
 80077ac:	460c      	mov	r4, r1
 80077ae:	6831      	ldr	r1, [r6, #0]
 80077b0:	4605      	mov	r5, r0
 80077b2:	b911      	cbnz	r1, 80077ba <sbrk_aligned+0x12>
 80077b4:	f000 f938 	bl	8007a28 <_sbrk_r>
 80077b8:	6030      	str	r0, [r6, #0]
 80077ba:	4621      	mov	r1, r4
 80077bc:	4628      	mov	r0, r5
 80077be:	f000 f933 	bl	8007a28 <_sbrk_r>
 80077c2:	1c43      	adds	r3, r0, #1
 80077c4:	d103      	bne.n	80077ce <sbrk_aligned+0x26>
 80077c6:	f04f 34ff 	mov.w	r4, #4294967295
 80077ca:	4620      	mov	r0, r4
 80077cc:	bd70      	pop	{r4, r5, r6, pc}
 80077ce:	1cc4      	adds	r4, r0, #3
 80077d0:	f024 0403 	bic.w	r4, r4, #3
 80077d4:	42a0      	cmp	r0, r4
 80077d6:	d0f8      	beq.n	80077ca <sbrk_aligned+0x22>
 80077d8:	1a21      	subs	r1, r4, r0
 80077da:	4628      	mov	r0, r5
 80077dc:	f000 f924 	bl	8007a28 <_sbrk_r>
 80077e0:	3001      	adds	r0, #1
 80077e2:	d1f2      	bne.n	80077ca <sbrk_aligned+0x22>
 80077e4:	e7ef      	b.n	80077c6 <sbrk_aligned+0x1e>
 80077e6:	bf00      	nop
 80077e8:	20001498 	.word	0x20001498

080077ec <_malloc_r>:
 80077ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077f0:	1ccd      	adds	r5, r1, #3
 80077f2:	f025 0503 	bic.w	r5, r5, #3
 80077f6:	3508      	adds	r5, #8
 80077f8:	2d0c      	cmp	r5, #12
 80077fa:	bf38      	it	cc
 80077fc:	250c      	movcc	r5, #12
 80077fe:	2d00      	cmp	r5, #0
 8007800:	4606      	mov	r6, r0
 8007802:	db01      	blt.n	8007808 <_malloc_r+0x1c>
 8007804:	42a9      	cmp	r1, r5
 8007806:	d904      	bls.n	8007812 <_malloc_r+0x26>
 8007808:	230c      	movs	r3, #12
 800780a:	6033      	str	r3, [r6, #0]
 800780c:	2000      	movs	r0, #0
 800780e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007812:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80078e8 <_malloc_r+0xfc>
 8007816:	f000 f869 	bl	80078ec <__malloc_lock>
 800781a:	f8d8 3000 	ldr.w	r3, [r8]
 800781e:	461c      	mov	r4, r3
 8007820:	bb44      	cbnz	r4, 8007874 <_malloc_r+0x88>
 8007822:	4629      	mov	r1, r5
 8007824:	4630      	mov	r0, r6
 8007826:	f7ff ffbf 	bl	80077a8 <sbrk_aligned>
 800782a:	1c43      	adds	r3, r0, #1
 800782c:	4604      	mov	r4, r0
 800782e:	d158      	bne.n	80078e2 <_malloc_r+0xf6>
 8007830:	f8d8 4000 	ldr.w	r4, [r8]
 8007834:	4627      	mov	r7, r4
 8007836:	2f00      	cmp	r7, #0
 8007838:	d143      	bne.n	80078c2 <_malloc_r+0xd6>
 800783a:	2c00      	cmp	r4, #0
 800783c:	d04b      	beq.n	80078d6 <_malloc_r+0xea>
 800783e:	6823      	ldr	r3, [r4, #0]
 8007840:	4639      	mov	r1, r7
 8007842:	4630      	mov	r0, r6
 8007844:	eb04 0903 	add.w	r9, r4, r3
 8007848:	f000 f8ee 	bl	8007a28 <_sbrk_r>
 800784c:	4581      	cmp	r9, r0
 800784e:	d142      	bne.n	80078d6 <_malloc_r+0xea>
 8007850:	6821      	ldr	r1, [r4, #0]
 8007852:	4630      	mov	r0, r6
 8007854:	1a6d      	subs	r5, r5, r1
 8007856:	4629      	mov	r1, r5
 8007858:	f7ff ffa6 	bl	80077a8 <sbrk_aligned>
 800785c:	3001      	adds	r0, #1
 800785e:	d03a      	beq.n	80078d6 <_malloc_r+0xea>
 8007860:	6823      	ldr	r3, [r4, #0]
 8007862:	442b      	add	r3, r5
 8007864:	6023      	str	r3, [r4, #0]
 8007866:	f8d8 3000 	ldr.w	r3, [r8]
 800786a:	685a      	ldr	r2, [r3, #4]
 800786c:	bb62      	cbnz	r2, 80078c8 <_malloc_r+0xdc>
 800786e:	f8c8 7000 	str.w	r7, [r8]
 8007872:	e00f      	b.n	8007894 <_malloc_r+0xa8>
 8007874:	6822      	ldr	r2, [r4, #0]
 8007876:	1b52      	subs	r2, r2, r5
 8007878:	d420      	bmi.n	80078bc <_malloc_r+0xd0>
 800787a:	2a0b      	cmp	r2, #11
 800787c:	d917      	bls.n	80078ae <_malloc_r+0xc2>
 800787e:	1961      	adds	r1, r4, r5
 8007880:	42a3      	cmp	r3, r4
 8007882:	6025      	str	r5, [r4, #0]
 8007884:	bf18      	it	ne
 8007886:	6059      	strne	r1, [r3, #4]
 8007888:	6863      	ldr	r3, [r4, #4]
 800788a:	bf08      	it	eq
 800788c:	f8c8 1000 	streq.w	r1, [r8]
 8007890:	5162      	str	r2, [r4, r5]
 8007892:	604b      	str	r3, [r1, #4]
 8007894:	4630      	mov	r0, r6
 8007896:	f000 f82f 	bl	80078f8 <__malloc_unlock>
 800789a:	f104 000b 	add.w	r0, r4, #11
 800789e:	1d23      	adds	r3, r4, #4
 80078a0:	f020 0007 	bic.w	r0, r0, #7
 80078a4:	1ac2      	subs	r2, r0, r3
 80078a6:	bf1c      	itt	ne
 80078a8:	1a1b      	subne	r3, r3, r0
 80078aa:	50a3      	strne	r3, [r4, r2]
 80078ac:	e7af      	b.n	800780e <_malloc_r+0x22>
 80078ae:	6862      	ldr	r2, [r4, #4]
 80078b0:	42a3      	cmp	r3, r4
 80078b2:	bf0c      	ite	eq
 80078b4:	f8c8 2000 	streq.w	r2, [r8]
 80078b8:	605a      	strne	r2, [r3, #4]
 80078ba:	e7eb      	b.n	8007894 <_malloc_r+0xa8>
 80078bc:	4623      	mov	r3, r4
 80078be:	6864      	ldr	r4, [r4, #4]
 80078c0:	e7ae      	b.n	8007820 <_malloc_r+0x34>
 80078c2:	463c      	mov	r4, r7
 80078c4:	687f      	ldr	r7, [r7, #4]
 80078c6:	e7b6      	b.n	8007836 <_malloc_r+0x4a>
 80078c8:	461a      	mov	r2, r3
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	42a3      	cmp	r3, r4
 80078ce:	d1fb      	bne.n	80078c8 <_malloc_r+0xdc>
 80078d0:	2300      	movs	r3, #0
 80078d2:	6053      	str	r3, [r2, #4]
 80078d4:	e7de      	b.n	8007894 <_malloc_r+0xa8>
 80078d6:	230c      	movs	r3, #12
 80078d8:	4630      	mov	r0, r6
 80078da:	6033      	str	r3, [r6, #0]
 80078dc:	f000 f80c 	bl	80078f8 <__malloc_unlock>
 80078e0:	e794      	b.n	800780c <_malloc_r+0x20>
 80078e2:	6005      	str	r5, [r0, #0]
 80078e4:	e7d6      	b.n	8007894 <_malloc_r+0xa8>
 80078e6:	bf00      	nop
 80078e8:	2000149c 	.word	0x2000149c

080078ec <__malloc_lock>:
 80078ec:	4801      	ldr	r0, [pc, #4]	@ (80078f4 <__malloc_lock+0x8>)
 80078ee:	f000 b8d5 	b.w	8007a9c <__retarget_lock_acquire_recursive>
 80078f2:	bf00      	nop
 80078f4:	200015dc 	.word	0x200015dc

080078f8 <__malloc_unlock>:
 80078f8:	4801      	ldr	r0, [pc, #4]	@ (8007900 <__malloc_unlock+0x8>)
 80078fa:	f000 b8d0 	b.w	8007a9e <__retarget_lock_release_recursive>
 80078fe:	bf00      	nop
 8007900:	200015dc 	.word	0x200015dc

08007904 <sniprintf>:
 8007904:	b40c      	push	{r2, r3}
 8007906:	b530      	push	{r4, r5, lr}
 8007908:	4b17      	ldr	r3, [pc, #92]	@ (8007968 <sniprintf+0x64>)
 800790a:	1e0c      	subs	r4, r1, #0
 800790c:	681d      	ldr	r5, [r3, #0]
 800790e:	b09d      	sub	sp, #116	@ 0x74
 8007910:	da08      	bge.n	8007924 <sniprintf+0x20>
 8007912:	238b      	movs	r3, #139	@ 0x8b
 8007914:	f04f 30ff 	mov.w	r0, #4294967295
 8007918:	602b      	str	r3, [r5, #0]
 800791a:	b01d      	add	sp, #116	@ 0x74
 800791c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007920:	b002      	add	sp, #8
 8007922:	4770      	bx	lr
 8007924:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007928:	f8ad 3014 	strh.w	r3, [sp, #20]
 800792c:	bf0c      	ite	eq
 800792e:	4623      	moveq	r3, r4
 8007930:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007934:	9304      	str	r3, [sp, #16]
 8007936:	9307      	str	r3, [sp, #28]
 8007938:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800793c:	9002      	str	r0, [sp, #8]
 800793e:	9006      	str	r0, [sp, #24]
 8007940:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007944:	4628      	mov	r0, r5
 8007946:	ab21      	add	r3, sp, #132	@ 0x84
 8007948:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800794a:	a902      	add	r1, sp, #8
 800794c:	9301      	str	r3, [sp, #4]
 800794e:	f000 f959 	bl	8007c04 <_svfiprintf_r>
 8007952:	1c43      	adds	r3, r0, #1
 8007954:	bfbc      	itt	lt
 8007956:	238b      	movlt	r3, #139	@ 0x8b
 8007958:	602b      	strlt	r3, [r5, #0]
 800795a:	2c00      	cmp	r4, #0
 800795c:	d0dd      	beq.n	800791a <sniprintf+0x16>
 800795e:	2200      	movs	r2, #0
 8007960:	9b02      	ldr	r3, [sp, #8]
 8007962:	701a      	strb	r2, [r3, #0]
 8007964:	e7d9      	b.n	800791a <sniprintf+0x16>
 8007966:	bf00      	nop
 8007968:	20000010 	.word	0x20000010

0800796c <memset>:
 800796c:	4603      	mov	r3, r0
 800796e:	4402      	add	r2, r0
 8007970:	4293      	cmp	r3, r2
 8007972:	d100      	bne.n	8007976 <memset+0xa>
 8007974:	4770      	bx	lr
 8007976:	f803 1b01 	strb.w	r1, [r3], #1
 800797a:	e7f9      	b.n	8007970 <memset+0x4>

0800797c <_reclaim_reent>:
 800797c:	4b29      	ldr	r3, [pc, #164]	@ (8007a24 <_reclaim_reent+0xa8>)
 800797e:	b570      	push	{r4, r5, r6, lr}
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4604      	mov	r4, r0
 8007984:	4283      	cmp	r3, r0
 8007986:	d04b      	beq.n	8007a20 <_reclaim_reent+0xa4>
 8007988:	69c3      	ldr	r3, [r0, #28]
 800798a:	b1ab      	cbz	r3, 80079b8 <_reclaim_reent+0x3c>
 800798c:	68db      	ldr	r3, [r3, #12]
 800798e:	b16b      	cbz	r3, 80079ac <_reclaim_reent+0x30>
 8007990:	2500      	movs	r5, #0
 8007992:	69e3      	ldr	r3, [r4, #28]
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	5959      	ldr	r1, [r3, r5]
 8007998:	2900      	cmp	r1, #0
 800799a:	d13b      	bne.n	8007a14 <_reclaim_reent+0x98>
 800799c:	3504      	adds	r5, #4
 800799e:	2d80      	cmp	r5, #128	@ 0x80
 80079a0:	d1f7      	bne.n	8007992 <_reclaim_reent+0x16>
 80079a2:	69e3      	ldr	r3, [r4, #28]
 80079a4:	4620      	mov	r0, r4
 80079a6:	68d9      	ldr	r1, [r3, #12]
 80079a8:	f000 f888 	bl	8007abc <_free_r>
 80079ac:	69e3      	ldr	r3, [r4, #28]
 80079ae:	6819      	ldr	r1, [r3, #0]
 80079b0:	b111      	cbz	r1, 80079b8 <_reclaim_reent+0x3c>
 80079b2:	4620      	mov	r0, r4
 80079b4:	f000 f882 	bl	8007abc <_free_r>
 80079b8:	6961      	ldr	r1, [r4, #20]
 80079ba:	b111      	cbz	r1, 80079c2 <_reclaim_reent+0x46>
 80079bc:	4620      	mov	r0, r4
 80079be:	f000 f87d 	bl	8007abc <_free_r>
 80079c2:	69e1      	ldr	r1, [r4, #28]
 80079c4:	b111      	cbz	r1, 80079cc <_reclaim_reent+0x50>
 80079c6:	4620      	mov	r0, r4
 80079c8:	f000 f878 	bl	8007abc <_free_r>
 80079cc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80079ce:	b111      	cbz	r1, 80079d6 <_reclaim_reent+0x5a>
 80079d0:	4620      	mov	r0, r4
 80079d2:	f000 f873 	bl	8007abc <_free_r>
 80079d6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80079d8:	b111      	cbz	r1, 80079e0 <_reclaim_reent+0x64>
 80079da:	4620      	mov	r0, r4
 80079dc:	f000 f86e 	bl	8007abc <_free_r>
 80079e0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80079e2:	b111      	cbz	r1, 80079ea <_reclaim_reent+0x6e>
 80079e4:	4620      	mov	r0, r4
 80079e6:	f000 f869 	bl	8007abc <_free_r>
 80079ea:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80079ec:	b111      	cbz	r1, 80079f4 <_reclaim_reent+0x78>
 80079ee:	4620      	mov	r0, r4
 80079f0:	f000 f864 	bl	8007abc <_free_r>
 80079f4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80079f6:	b111      	cbz	r1, 80079fe <_reclaim_reent+0x82>
 80079f8:	4620      	mov	r0, r4
 80079fa:	f000 f85f 	bl	8007abc <_free_r>
 80079fe:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007a00:	b111      	cbz	r1, 8007a08 <_reclaim_reent+0x8c>
 8007a02:	4620      	mov	r0, r4
 8007a04:	f000 f85a 	bl	8007abc <_free_r>
 8007a08:	6a23      	ldr	r3, [r4, #32]
 8007a0a:	b14b      	cbz	r3, 8007a20 <_reclaim_reent+0xa4>
 8007a0c:	4620      	mov	r0, r4
 8007a0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007a12:	4718      	bx	r3
 8007a14:	680e      	ldr	r6, [r1, #0]
 8007a16:	4620      	mov	r0, r4
 8007a18:	f000 f850 	bl	8007abc <_free_r>
 8007a1c:	4631      	mov	r1, r6
 8007a1e:	e7bb      	b.n	8007998 <_reclaim_reent+0x1c>
 8007a20:	bd70      	pop	{r4, r5, r6, pc}
 8007a22:	bf00      	nop
 8007a24:	20000010 	.word	0x20000010

08007a28 <_sbrk_r>:
 8007a28:	b538      	push	{r3, r4, r5, lr}
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	4d05      	ldr	r5, [pc, #20]	@ (8007a44 <_sbrk_r+0x1c>)
 8007a2e:	4604      	mov	r4, r0
 8007a30:	4608      	mov	r0, r1
 8007a32:	602b      	str	r3, [r5, #0]
 8007a34:	f7f9 fff6 	bl	8001a24 <_sbrk>
 8007a38:	1c43      	adds	r3, r0, #1
 8007a3a:	d102      	bne.n	8007a42 <_sbrk_r+0x1a>
 8007a3c:	682b      	ldr	r3, [r5, #0]
 8007a3e:	b103      	cbz	r3, 8007a42 <_sbrk_r+0x1a>
 8007a40:	6023      	str	r3, [r4, #0]
 8007a42:	bd38      	pop	{r3, r4, r5, pc}
 8007a44:	200015d8 	.word	0x200015d8

08007a48 <__errno>:
 8007a48:	4b01      	ldr	r3, [pc, #4]	@ (8007a50 <__errno+0x8>)
 8007a4a:	6818      	ldr	r0, [r3, #0]
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop
 8007a50:	20000010 	.word	0x20000010

08007a54 <__libc_init_array>:
 8007a54:	b570      	push	{r4, r5, r6, lr}
 8007a56:	2600      	movs	r6, #0
 8007a58:	4d0c      	ldr	r5, [pc, #48]	@ (8007a8c <__libc_init_array+0x38>)
 8007a5a:	4c0d      	ldr	r4, [pc, #52]	@ (8007a90 <__libc_init_array+0x3c>)
 8007a5c:	1b64      	subs	r4, r4, r5
 8007a5e:	10a4      	asrs	r4, r4, #2
 8007a60:	42a6      	cmp	r6, r4
 8007a62:	d109      	bne.n	8007a78 <__libc_init_array+0x24>
 8007a64:	f000 fbba 	bl	80081dc <_init>
 8007a68:	2600      	movs	r6, #0
 8007a6a:	4d0a      	ldr	r5, [pc, #40]	@ (8007a94 <__libc_init_array+0x40>)
 8007a6c:	4c0a      	ldr	r4, [pc, #40]	@ (8007a98 <__libc_init_array+0x44>)
 8007a6e:	1b64      	subs	r4, r4, r5
 8007a70:	10a4      	asrs	r4, r4, #2
 8007a72:	42a6      	cmp	r6, r4
 8007a74:	d105      	bne.n	8007a82 <__libc_init_array+0x2e>
 8007a76:	bd70      	pop	{r4, r5, r6, pc}
 8007a78:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a7c:	4798      	blx	r3
 8007a7e:	3601      	adds	r6, #1
 8007a80:	e7ee      	b.n	8007a60 <__libc_init_array+0xc>
 8007a82:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a86:	4798      	blx	r3
 8007a88:	3601      	adds	r6, #1
 8007a8a:	e7f2      	b.n	8007a72 <__libc_init_array+0x1e>
 8007a8c:	08008350 	.word	0x08008350
 8007a90:	08008350 	.word	0x08008350
 8007a94:	08008350 	.word	0x08008350
 8007a98:	08008354 	.word	0x08008354

08007a9c <__retarget_lock_acquire_recursive>:
 8007a9c:	4770      	bx	lr

08007a9e <__retarget_lock_release_recursive>:
 8007a9e:	4770      	bx	lr

08007aa0 <memcpy>:
 8007aa0:	440a      	add	r2, r1
 8007aa2:	4291      	cmp	r1, r2
 8007aa4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007aa8:	d100      	bne.n	8007aac <memcpy+0xc>
 8007aaa:	4770      	bx	lr
 8007aac:	b510      	push	{r4, lr}
 8007aae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ab2:	4291      	cmp	r1, r2
 8007ab4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ab8:	d1f9      	bne.n	8007aae <memcpy+0xe>
 8007aba:	bd10      	pop	{r4, pc}

08007abc <_free_r>:
 8007abc:	b538      	push	{r3, r4, r5, lr}
 8007abe:	4605      	mov	r5, r0
 8007ac0:	2900      	cmp	r1, #0
 8007ac2:	d040      	beq.n	8007b46 <_free_r+0x8a>
 8007ac4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ac8:	1f0c      	subs	r4, r1, #4
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	bfb8      	it	lt
 8007ace:	18e4      	addlt	r4, r4, r3
 8007ad0:	f7ff ff0c 	bl	80078ec <__malloc_lock>
 8007ad4:	4a1c      	ldr	r2, [pc, #112]	@ (8007b48 <_free_r+0x8c>)
 8007ad6:	6813      	ldr	r3, [r2, #0]
 8007ad8:	b933      	cbnz	r3, 8007ae8 <_free_r+0x2c>
 8007ada:	6063      	str	r3, [r4, #4]
 8007adc:	6014      	str	r4, [r2, #0]
 8007ade:	4628      	mov	r0, r5
 8007ae0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ae4:	f7ff bf08 	b.w	80078f8 <__malloc_unlock>
 8007ae8:	42a3      	cmp	r3, r4
 8007aea:	d908      	bls.n	8007afe <_free_r+0x42>
 8007aec:	6820      	ldr	r0, [r4, #0]
 8007aee:	1821      	adds	r1, r4, r0
 8007af0:	428b      	cmp	r3, r1
 8007af2:	bf01      	itttt	eq
 8007af4:	6819      	ldreq	r1, [r3, #0]
 8007af6:	685b      	ldreq	r3, [r3, #4]
 8007af8:	1809      	addeq	r1, r1, r0
 8007afa:	6021      	streq	r1, [r4, #0]
 8007afc:	e7ed      	b.n	8007ada <_free_r+0x1e>
 8007afe:	461a      	mov	r2, r3
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	b10b      	cbz	r3, 8007b08 <_free_r+0x4c>
 8007b04:	42a3      	cmp	r3, r4
 8007b06:	d9fa      	bls.n	8007afe <_free_r+0x42>
 8007b08:	6811      	ldr	r1, [r2, #0]
 8007b0a:	1850      	adds	r0, r2, r1
 8007b0c:	42a0      	cmp	r0, r4
 8007b0e:	d10b      	bne.n	8007b28 <_free_r+0x6c>
 8007b10:	6820      	ldr	r0, [r4, #0]
 8007b12:	4401      	add	r1, r0
 8007b14:	1850      	adds	r0, r2, r1
 8007b16:	4283      	cmp	r3, r0
 8007b18:	6011      	str	r1, [r2, #0]
 8007b1a:	d1e0      	bne.n	8007ade <_free_r+0x22>
 8007b1c:	6818      	ldr	r0, [r3, #0]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	4408      	add	r0, r1
 8007b22:	6010      	str	r0, [r2, #0]
 8007b24:	6053      	str	r3, [r2, #4]
 8007b26:	e7da      	b.n	8007ade <_free_r+0x22>
 8007b28:	d902      	bls.n	8007b30 <_free_r+0x74>
 8007b2a:	230c      	movs	r3, #12
 8007b2c:	602b      	str	r3, [r5, #0]
 8007b2e:	e7d6      	b.n	8007ade <_free_r+0x22>
 8007b30:	6820      	ldr	r0, [r4, #0]
 8007b32:	1821      	adds	r1, r4, r0
 8007b34:	428b      	cmp	r3, r1
 8007b36:	bf01      	itttt	eq
 8007b38:	6819      	ldreq	r1, [r3, #0]
 8007b3a:	685b      	ldreq	r3, [r3, #4]
 8007b3c:	1809      	addeq	r1, r1, r0
 8007b3e:	6021      	streq	r1, [r4, #0]
 8007b40:	6063      	str	r3, [r4, #4]
 8007b42:	6054      	str	r4, [r2, #4]
 8007b44:	e7cb      	b.n	8007ade <_free_r+0x22>
 8007b46:	bd38      	pop	{r3, r4, r5, pc}
 8007b48:	2000149c 	.word	0x2000149c

08007b4c <__ssputs_r>:
 8007b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b50:	461f      	mov	r7, r3
 8007b52:	688e      	ldr	r6, [r1, #8]
 8007b54:	4682      	mov	sl, r0
 8007b56:	42be      	cmp	r6, r7
 8007b58:	460c      	mov	r4, r1
 8007b5a:	4690      	mov	r8, r2
 8007b5c:	680b      	ldr	r3, [r1, #0]
 8007b5e:	d82d      	bhi.n	8007bbc <__ssputs_r+0x70>
 8007b60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007b64:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007b68:	d026      	beq.n	8007bb8 <__ssputs_r+0x6c>
 8007b6a:	6965      	ldr	r5, [r4, #20]
 8007b6c:	6909      	ldr	r1, [r1, #16]
 8007b6e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b72:	eba3 0901 	sub.w	r9, r3, r1
 8007b76:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b7a:	1c7b      	adds	r3, r7, #1
 8007b7c:	444b      	add	r3, r9
 8007b7e:	106d      	asrs	r5, r5, #1
 8007b80:	429d      	cmp	r5, r3
 8007b82:	bf38      	it	cc
 8007b84:	461d      	movcc	r5, r3
 8007b86:	0553      	lsls	r3, r2, #21
 8007b88:	d527      	bpl.n	8007bda <__ssputs_r+0x8e>
 8007b8a:	4629      	mov	r1, r5
 8007b8c:	f7ff fe2e 	bl	80077ec <_malloc_r>
 8007b90:	4606      	mov	r6, r0
 8007b92:	b360      	cbz	r0, 8007bee <__ssputs_r+0xa2>
 8007b94:	464a      	mov	r2, r9
 8007b96:	6921      	ldr	r1, [r4, #16]
 8007b98:	f7ff ff82 	bl	8007aa0 <memcpy>
 8007b9c:	89a3      	ldrh	r3, [r4, #12]
 8007b9e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007ba2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ba6:	81a3      	strh	r3, [r4, #12]
 8007ba8:	6126      	str	r6, [r4, #16]
 8007baa:	444e      	add	r6, r9
 8007bac:	6026      	str	r6, [r4, #0]
 8007bae:	463e      	mov	r6, r7
 8007bb0:	6165      	str	r5, [r4, #20]
 8007bb2:	eba5 0509 	sub.w	r5, r5, r9
 8007bb6:	60a5      	str	r5, [r4, #8]
 8007bb8:	42be      	cmp	r6, r7
 8007bba:	d900      	bls.n	8007bbe <__ssputs_r+0x72>
 8007bbc:	463e      	mov	r6, r7
 8007bbe:	4632      	mov	r2, r6
 8007bc0:	4641      	mov	r1, r8
 8007bc2:	6820      	ldr	r0, [r4, #0]
 8007bc4:	f000 faac 	bl	8008120 <memmove>
 8007bc8:	2000      	movs	r0, #0
 8007bca:	68a3      	ldr	r3, [r4, #8]
 8007bcc:	1b9b      	subs	r3, r3, r6
 8007bce:	60a3      	str	r3, [r4, #8]
 8007bd0:	6823      	ldr	r3, [r4, #0]
 8007bd2:	4433      	add	r3, r6
 8007bd4:	6023      	str	r3, [r4, #0]
 8007bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bda:	462a      	mov	r2, r5
 8007bdc:	f000 fac8 	bl	8008170 <_realloc_r>
 8007be0:	4606      	mov	r6, r0
 8007be2:	2800      	cmp	r0, #0
 8007be4:	d1e0      	bne.n	8007ba8 <__ssputs_r+0x5c>
 8007be6:	4650      	mov	r0, sl
 8007be8:	6921      	ldr	r1, [r4, #16]
 8007bea:	f7ff ff67 	bl	8007abc <_free_r>
 8007bee:	230c      	movs	r3, #12
 8007bf0:	f8ca 3000 	str.w	r3, [sl]
 8007bf4:	89a3      	ldrh	r3, [r4, #12]
 8007bf6:	f04f 30ff 	mov.w	r0, #4294967295
 8007bfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007bfe:	81a3      	strh	r3, [r4, #12]
 8007c00:	e7e9      	b.n	8007bd6 <__ssputs_r+0x8a>
	...

08007c04 <_svfiprintf_r>:
 8007c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c08:	4698      	mov	r8, r3
 8007c0a:	898b      	ldrh	r3, [r1, #12]
 8007c0c:	4607      	mov	r7, r0
 8007c0e:	061b      	lsls	r3, r3, #24
 8007c10:	460d      	mov	r5, r1
 8007c12:	4614      	mov	r4, r2
 8007c14:	b09d      	sub	sp, #116	@ 0x74
 8007c16:	d510      	bpl.n	8007c3a <_svfiprintf_r+0x36>
 8007c18:	690b      	ldr	r3, [r1, #16]
 8007c1a:	b973      	cbnz	r3, 8007c3a <_svfiprintf_r+0x36>
 8007c1c:	2140      	movs	r1, #64	@ 0x40
 8007c1e:	f7ff fde5 	bl	80077ec <_malloc_r>
 8007c22:	6028      	str	r0, [r5, #0]
 8007c24:	6128      	str	r0, [r5, #16]
 8007c26:	b930      	cbnz	r0, 8007c36 <_svfiprintf_r+0x32>
 8007c28:	230c      	movs	r3, #12
 8007c2a:	603b      	str	r3, [r7, #0]
 8007c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c30:	b01d      	add	sp, #116	@ 0x74
 8007c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c36:	2340      	movs	r3, #64	@ 0x40
 8007c38:	616b      	str	r3, [r5, #20]
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c3e:	2320      	movs	r3, #32
 8007c40:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007c44:	2330      	movs	r3, #48	@ 0x30
 8007c46:	f04f 0901 	mov.w	r9, #1
 8007c4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c4e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007de8 <_svfiprintf_r+0x1e4>
 8007c52:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007c56:	4623      	mov	r3, r4
 8007c58:	469a      	mov	sl, r3
 8007c5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c5e:	b10a      	cbz	r2, 8007c64 <_svfiprintf_r+0x60>
 8007c60:	2a25      	cmp	r2, #37	@ 0x25
 8007c62:	d1f9      	bne.n	8007c58 <_svfiprintf_r+0x54>
 8007c64:	ebba 0b04 	subs.w	fp, sl, r4
 8007c68:	d00b      	beq.n	8007c82 <_svfiprintf_r+0x7e>
 8007c6a:	465b      	mov	r3, fp
 8007c6c:	4622      	mov	r2, r4
 8007c6e:	4629      	mov	r1, r5
 8007c70:	4638      	mov	r0, r7
 8007c72:	f7ff ff6b 	bl	8007b4c <__ssputs_r>
 8007c76:	3001      	adds	r0, #1
 8007c78:	f000 80a7 	beq.w	8007dca <_svfiprintf_r+0x1c6>
 8007c7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c7e:	445a      	add	r2, fp
 8007c80:	9209      	str	r2, [sp, #36]	@ 0x24
 8007c82:	f89a 3000 	ldrb.w	r3, [sl]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	f000 809f 	beq.w	8007dca <_svfiprintf_r+0x1c6>
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	f04f 32ff 	mov.w	r2, #4294967295
 8007c92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c96:	f10a 0a01 	add.w	sl, sl, #1
 8007c9a:	9304      	str	r3, [sp, #16]
 8007c9c:	9307      	str	r3, [sp, #28]
 8007c9e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007ca2:	931a      	str	r3, [sp, #104]	@ 0x68
 8007ca4:	4654      	mov	r4, sl
 8007ca6:	2205      	movs	r2, #5
 8007ca8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cac:	484e      	ldr	r0, [pc, #312]	@ (8007de8 <_svfiprintf_r+0x1e4>)
 8007cae:	f000 fa51 	bl	8008154 <memchr>
 8007cb2:	9a04      	ldr	r2, [sp, #16]
 8007cb4:	b9d8      	cbnz	r0, 8007cee <_svfiprintf_r+0xea>
 8007cb6:	06d0      	lsls	r0, r2, #27
 8007cb8:	bf44      	itt	mi
 8007cba:	2320      	movmi	r3, #32
 8007cbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007cc0:	0711      	lsls	r1, r2, #28
 8007cc2:	bf44      	itt	mi
 8007cc4:	232b      	movmi	r3, #43	@ 0x2b
 8007cc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007cca:	f89a 3000 	ldrb.w	r3, [sl]
 8007cce:	2b2a      	cmp	r3, #42	@ 0x2a
 8007cd0:	d015      	beq.n	8007cfe <_svfiprintf_r+0xfa>
 8007cd2:	4654      	mov	r4, sl
 8007cd4:	2000      	movs	r0, #0
 8007cd6:	f04f 0c0a 	mov.w	ip, #10
 8007cda:	9a07      	ldr	r2, [sp, #28]
 8007cdc:	4621      	mov	r1, r4
 8007cde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ce2:	3b30      	subs	r3, #48	@ 0x30
 8007ce4:	2b09      	cmp	r3, #9
 8007ce6:	d94b      	bls.n	8007d80 <_svfiprintf_r+0x17c>
 8007ce8:	b1b0      	cbz	r0, 8007d18 <_svfiprintf_r+0x114>
 8007cea:	9207      	str	r2, [sp, #28]
 8007cec:	e014      	b.n	8007d18 <_svfiprintf_r+0x114>
 8007cee:	eba0 0308 	sub.w	r3, r0, r8
 8007cf2:	fa09 f303 	lsl.w	r3, r9, r3
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	46a2      	mov	sl, r4
 8007cfa:	9304      	str	r3, [sp, #16]
 8007cfc:	e7d2      	b.n	8007ca4 <_svfiprintf_r+0xa0>
 8007cfe:	9b03      	ldr	r3, [sp, #12]
 8007d00:	1d19      	adds	r1, r3, #4
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	9103      	str	r1, [sp, #12]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	bfbb      	ittet	lt
 8007d0a:	425b      	neglt	r3, r3
 8007d0c:	f042 0202 	orrlt.w	r2, r2, #2
 8007d10:	9307      	strge	r3, [sp, #28]
 8007d12:	9307      	strlt	r3, [sp, #28]
 8007d14:	bfb8      	it	lt
 8007d16:	9204      	strlt	r2, [sp, #16]
 8007d18:	7823      	ldrb	r3, [r4, #0]
 8007d1a:	2b2e      	cmp	r3, #46	@ 0x2e
 8007d1c:	d10a      	bne.n	8007d34 <_svfiprintf_r+0x130>
 8007d1e:	7863      	ldrb	r3, [r4, #1]
 8007d20:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d22:	d132      	bne.n	8007d8a <_svfiprintf_r+0x186>
 8007d24:	9b03      	ldr	r3, [sp, #12]
 8007d26:	3402      	adds	r4, #2
 8007d28:	1d1a      	adds	r2, r3, #4
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	9203      	str	r2, [sp, #12]
 8007d2e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007d32:	9305      	str	r3, [sp, #20]
 8007d34:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007dec <_svfiprintf_r+0x1e8>
 8007d38:	2203      	movs	r2, #3
 8007d3a:	4650      	mov	r0, sl
 8007d3c:	7821      	ldrb	r1, [r4, #0]
 8007d3e:	f000 fa09 	bl	8008154 <memchr>
 8007d42:	b138      	cbz	r0, 8007d54 <_svfiprintf_r+0x150>
 8007d44:	2240      	movs	r2, #64	@ 0x40
 8007d46:	9b04      	ldr	r3, [sp, #16]
 8007d48:	eba0 000a 	sub.w	r0, r0, sl
 8007d4c:	4082      	lsls	r2, r0
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	3401      	adds	r4, #1
 8007d52:	9304      	str	r3, [sp, #16]
 8007d54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d58:	2206      	movs	r2, #6
 8007d5a:	4825      	ldr	r0, [pc, #148]	@ (8007df0 <_svfiprintf_r+0x1ec>)
 8007d5c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007d60:	f000 f9f8 	bl	8008154 <memchr>
 8007d64:	2800      	cmp	r0, #0
 8007d66:	d036      	beq.n	8007dd6 <_svfiprintf_r+0x1d2>
 8007d68:	4b22      	ldr	r3, [pc, #136]	@ (8007df4 <_svfiprintf_r+0x1f0>)
 8007d6a:	bb1b      	cbnz	r3, 8007db4 <_svfiprintf_r+0x1b0>
 8007d6c:	9b03      	ldr	r3, [sp, #12]
 8007d6e:	3307      	adds	r3, #7
 8007d70:	f023 0307 	bic.w	r3, r3, #7
 8007d74:	3308      	adds	r3, #8
 8007d76:	9303      	str	r3, [sp, #12]
 8007d78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d7a:	4433      	add	r3, r6
 8007d7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d7e:	e76a      	b.n	8007c56 <_svfiprintf_r+0x52>
 8007d80:	460c      	mov	r4, r1
 8007d82:	2001      	movs	r0, #1
 8007d84:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d88:	e7a8      	b.n	8007cdc <_svfiprintf_r+0xd8>
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	f04f 0c0a 	mov.w	ip, #10
 8007d90:	4619      	mov	r1, r3
 8007d92:	3401      	adds	r4, #1
 8007d94:	9305      	str	r3, [sp, #20]
 8007d96:	4620      	mov	r0, r4
 8007d98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d9c:	3a30      	subs	r2, #48	@ 0x30
 8007d9e:	2a09      	cmp	r2, #9
 8007da0:	d903      	bls.n	8007daa <_svfiprintf_r+0x1a6>
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d0c6      	beq.n	8007d34 <_svfiprintf_r+0x130>
 8007da6:	9105      	str	r1, [sp, #20]
 8007da8:	e7c4      	b.n	8007d34 <_svfiprintf_r+0x130>
 8007daa:	4604      	mov	r4, r0
 8007dac:	2301      	movs	r3, #1
 8007dae:	fb0c 2101 	mla	r1, ip, r1, r2
 8007db2:	e7f0      	b.n	8007d96 <_svfiprintf_r+0x192>
 8007db4:	ab03      	add	r3, sp, #12
 8007db6:	9300      	str	r3, [sp, #0]
 8007db8:	462a      	mov	r2, r5
 8007dba:	4638      	mov	r0, r7
 8007dbc:	4b0e      	ldr	r3, [pc, #56]	@ (8007df8 <_svfiprintf_r+0x1f4>)
 8007dbe:	a904      	add	r1, sp, #16
 8007dc0:	f3af 8000 	nop.w
 8007dc4:	1c42      	adds	r2, r0, #1
 8007dc6:	4606      	mov	r6, r0
 8007dc8:	d1d6      	bne.n	8007d78 <_svfiprintf_r+0x174>
 8007dca:	89ab      	ldrh	r3, [r5, #12]
 8007dcc:	065b      	lsls	r3, r3, #25
 8007dce:	f53f af2d 	bmi.w	8007c2c <_svfiprintf_r+0x28>
 8007dd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007dd4:	e72c      	b.n	8007c30 <_svfiprintf_r+0x2c>
 8007dd6:	ab03      	add	r3, sp, #12
 8007dd8:	9300      	str	r3, [sp, #0]
 8007dda:	462a      	mov	r2, r5
 8007ddc:	4638      	mov	r0, r7
 8007dde:	4b06      	ldr	r3, [pc, #24]	@ (8007df8 <_svfiprintf_r+0x1f4>)
 8007de0:	a904      	add	r1, sp, #16
 8007de2:	f000 f87d 	bl	8007ee0 <_printf_i>
 8007de6:	e7ed      	b.n	8007dc4 <_svfiprintf_r+0x1c0>
 8007de8:	08008312 	.word	0x08008312
 8007dec:	08008318 	.word	0x08008318
 8007df0:	0800831c 	.word	0x0800831c
 8007df4:	00000000 	.word	0x00000000
 8007df8:	08007b4d 	.word	0x08007b4d

08007dfc <_printf_common>:
 8007dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e00:	4616      	mov	r6, r2
 8007e02:	4698      	mov	r8, r3
 8007e04:	688a      	ldr	r2, [r1, #8]
 8007e06:	690b      	ldr	r3, [r1, #16]
 8007e08:	4607      	mov	r7, r0
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	bfb8      	it	lt
 8007e0e:	4613      	movlt	r3, r2
 8007e10:	6033      	str	r3, [r6, #0]
 8007e12:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007e16:	460c      	mov	r4, r1
 8007e18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007e1c:	b10a      	cbz	r2, 8007e22 <_printf_common+0x26>
 8007e1e:	3301      	adds	r3, #1
 8007e20:	6033      	str	r3, [r6, #0]
 8007e22:	6823      	ldr	r3, [r4, #0]
 8007e24:	0699      	lsls	r1, r3, #26
 8007e26:	bf42      	ittt	mi
 8007e28:	6833      	ldrmi	r3, [r6, #0]
 8007e2a:	3302      	addmi	r3, #2
 8007e2c:	6033      	strmi	r3, [r6, #0]
 8007e2e:	6825      	ldr	r5, [r4, #0]
 8007e30:	f015 0506 	ands.w	r5, r5, #6
 8007e34:	d106      	bne.n	8007e44 <_printf_common+0x48>
 8007e36:	f104 0a19 	add.w	sl, r4, #25
 8007e3a:	68e3      	ldr	r3, [r4, #12]
 8007e3c:	6832      	ldr	r2, [r6, #0]
 8007e3e:	1a9b      	subs	r3, r3, r2
 8007e40:	42ab      	cmp	r3, r5
 8007e42:	dc2b      	bgt.n	8007e9c <_printf_common+0xa0>
 8007e44:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007e48:	6822      	ldr	r2, [r4, #0]
 8007e4a:	3b00      	subs	r3, #0
 8007e4c:	bf18      	it	ne
 8007e4e:	2301      	movne	r3, #1
 8007e50:	0692      	lsls	r2, r2, #26
 8007e52:	d430      	bmi.n	8007eb6 <_printf_common+0xba>
 8007e54:	4641      	mov	r1, r8
 8007e56:	4638      	mov	r0, r7
 8007e58:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007e5c:	47c8      	blx	r9
 8007e5e:	3001      	adds	r0, #1
 8007e60:	d023      	beq.n	8007eaa <_printf_common+0xae>
 8007e62:	6823      	ldr	r3, [r4, #0]
 8007e64:	6922      	ldr	r2, [r4, #16]
 8007e66:	f003 0306 	and.w	r3, r3, #6
 8007e6a:	2b04      	cmp	r3, #4
 8007e6c:	bf14      	ite	ne
 8007e6e:	2500      	movne	r5, #0
 8007e70:	6833      	ldreq	r3, [r6, #0]
 8007e72:	f04f 0600 	mov.w	r6, #0
 8007e76:	bf08      	it	eq
 8007e78:	68e5      	ldreq	r5, [r4, #12]
 8007e7a:	f104 041a 	add.w	r4, r4, #26
 8007e7e:	bf08      	it	eq
 8007e80:	1aed      	subeq	r5, r5, r3
 8007e82:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007e86:	bf08      	it	eq
 8007e88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	bfc4      	itt	gt
 8007e90:	1a9b      	subgt	r3, r3, r2
 8007e92:	18ed      	addgt	r5, r5, r3
 8007e94:	42b5      	cmp	r5, r6
 8007e96:	d11a      	bne.n	8007ece <_printf_common+0xd2>
 8007e98:	2000      	movs	r0, #0
 8007e9a:	e008      	b.n	8007eae <_printf_common+0xb2>
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	4652      	mov	r2, sl
 8007ea0:	4641      	mov	r1, r8
 8007ea2:	4638      	mov	r0, r7
 8007ea4:	47c8      	blx	r9
 8007ea6:	3001      	adds	r0, #1
 8007ea8:	d103      	bne.n	8007eb2 <_printf_common+0xb6>
 8007eaa:	f04f 30ff 	mov.w	r0, #4294967295
 8007eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eb2:	3501      	adds	r5, #1
 8007eb4:	e7c1      	b.n	8007e3a <_printf_common+0x3e>
 8007eb6:	2030      	movs	r0, #48	@ 0x30
 8007eb8:	18e1      	adds	r1, r4, r3
 8007eba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007ebe:	1c5a      	adds	r2, r3, #1
 8007ec0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007ec4:	4422      	add	r2, r4
 8007ec6:	3302      	adds	r3, #2
 8007ec8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007ecc:	e7c2      	b.n	8007e54 <_printf_common+0x58>
 8007ece:	2301      	movs	r3, #1
 8007ed0:	4622      	mov	r2, r4
 8007ed2:	4641      	mov	r1, r8
 8007ed4:	4638      	mov	r0, r7
 8007ed6:	47c8      	blx	r9
 8007ed8:	3001      	adds	r0, #1
 8007eda:	d0e6      	beq.n	8007eaa <_printf_common+0xae>
 8007edc:	3601      	adds	r6, #1
 8007ede:	e7d9      	b.n	8007e94 <_printf_common+0x98>

08007ee0 <_printf_i>:
 8007ee0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ee4:	7e0f      	ldrb	r7, [r1, #24]
 8007ee6:	4691      	mov	r9, r2
 8007ee8:	2f78      	cmp	r7, #120	@ 0x78
 8007eea:	4680      	mov	r8, r0
 8007eec:	460c      	mov	r4, r1
 8007eee:	469a      	mov	sl, r3
 8007ef0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007ef2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007ef6:	d807      	bhi.n	8007f08 <_printf_i+0x28>
 8007ef8:	2f62      	cmp	r7, #98	@ 0x62
 8007efa:	d80a      	bhi.n	8007f12 <_printf_i+0x32>
 8007efc:	2f00      	cmp	r7, #0
 8007efe:	f000 80d3 	beq.w	80080a8 <_printf_i+0x1c8>
 8007f02:	2f58      	cmp	r7, #88	@ 0x58
 8007f04:	f000 80ba 	beq.w	800807c <_printf_i+0x19c>
 8007f08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007f10:	e03a      	b.n	8007f88 <_printf_i+0xa8>
 8007f12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007f16:	2b15      	cmp	r3, #21
 8007f18:	d8f6      	bhi.n	8007f08 <_printf_i+0x28>
 8007f1a:	a101      	add	r1, pc, #4	@ (adr r1, 8007f20 <_printf_i+0x40>)
 8007f1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f20:	08007f79 	.word	0x08007f79
 8007f24:	08007f8d 	.word	0x08007f8d
 8007f28:	08007f09 	.word	0x08007f09
 8007f2c:	08007f09 	.word	0x08007f09
 8007f30:	08007f09 	.word	0x08007f09
 8007f34:	08007f09 	.word	0x08007f09
 8007f38:	08007f8d 	.word	0x08007f8d
 8007f3c:	08007f09 	.word	0x08007f09
 8007f40:	08007f09 	.word	0x08007f09
 8007f44:	08007f09 	.word	0x08007f09
 8007f48:	08007f09 	.word	0x08007f09
 8007f4c:	0800808f 	.word	0x0800808f
 8007f50:	08007fb7 	.word	0x08007fb7
 8007f54:	08008049 	.word	0x08008049
 8007f58:	08007f09 	.word	0x08007f09
 8007f5c:	08007f09 	.word	0x08007f09
 8007f60:	080080b1 	.word	0x080080b1
 8007f64:	08007f09 	.word	0x08007f09
 8007f68:	08007fb7 	.word	0x08007fb7
 8007f6c:	08007f09 	.word	0x08007f09
 8007f70:	08007f09 	.word	0x08007f09
 8007f74:	08008051 	.word	0x08008051
 8007f78:	6833      	ldr	r3, [r6, #0]
 8007f7a:	1d1a      	adds	r2, r3, #4
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	6032      	str	r2, [r6, #0]
 8007f80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007f88:	2301      	movs	r3, #1
 8007f8a:	e09e      	b.n	80080ca <_printf_i+0x1ea>
 8007f8c:	6833      	ldr	r3, [r6, #0]
 8007f8e:	6820      	ldr	r0, [r4, #0]
 8007f90:	1d19      	adds	r1, r3, #4
 8007f92:	6031      	str	r1, [r6, #0]
 8007f94:	0606      	lsls	r6, r0, #24
 8007f96:	d501      	bpl.n	8007f9c <_printf_i+0xbc>
 8007f98:	681d      	ldr	r5, [r3, #0]
 8007f9a:	e003      	b.n	8007fa4 <_printf_i+0xc4>
 8007f9c:	0645      	lsls	r5, r0, #25
 8007f9e:	d5fb      	bpl.n	8007f98 <_printf_i+0xb8>
 8007fa0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007fa4:	2d00      	cmp	r5, #0
 8007fa6:	da03      	bge.n	8007fb0 <_printf_i+0xd0>
 8007fa8:	232d      	movs	r3, #45	@ 0x2d
 8007faa:	426d      	negs	r5, r5
 8007fac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007fb0:	230a      	movs	r3, #10
 8007fb2:	4859      	ldr	r0, [pc, #356]	@ (8008118 <_printf_i+0x238>)
 8007fb4:	e011      	b.n	8007fda <_printf_i+0xfa>
 8007fb6:	6821      	ldr	r1, [r4, #0]
 8007fb8:	6833      	ldr	r3, [r6, #0]
 8007fba:	0608      	lsls	r0, r1, #24
 8007fbc:	f853 5b04 	ldr.w	r5, [r3], #4
 8007fc0:	d402      	bmi.n	8007fc8 <_printf_i+0xe8>
 8007fc2:	0649      	lsls	r1, r1, #25
 8007fc4:	bf48      	it	mi
 8007fc6:	b2ad      	uxthmi	r5, r5
 8007fc8:	2f6f      	cmp	r7, #111	@ 0x6f
 8007fca:	6033      	str	r3, [r6, #0]
 8007fcc:	bf14      	ite	ne
 8007fce:	230a      	movne	r3, #10
 8007fd0:	2308      	moveq	r3, #8
 8007fd2:	4851      	ldr	r0, [pc, #324]	@ (8008118 <_printf_i+0x238>)
 8007fd4:	2100      	movs	r1, #0
 8007fd6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007fda:	6866      	ldr	r6, [r4, #4]
 8007fdc:	2e00      	cmp	r6, #0
 8007fde:	bfa8      	it	ge
 8007fe0:	6821      	ldrge	r1, [r4, #0]
 8007fe2:	60a6      	str	r6, [r4, #8]
 8007fe4:	bfa4      	itt	ge
 8007fe6:	f021 0104 	bicge.w	r1, r1, #4
 8007fea:	6021      	strge	r1, [r4, #0]
 8007fec:	b90d      	cbnz	r5, 8007ff2 <_printf_i+0x112>
 8007fee:	2e00      	cmp	r6, #0
 8007ff0:	d04b      	beq.n	800808a <_printf_i+0x1aa>
 8007ff2:	4616      	mov	r6, r2
 8007ff4:	fbb5 f1f3 	udiv	r1, r5, r3
 8007ff8:	fb03 5711 	mls	r7, r3, r1, r5
 8007ffc:	5dc7      	ldrb	r7, [r0, r7]
 8007ffe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008002:	462f      	mov	r7, r5
 8008004:	42bb      	cmp	r3, r7
 8008006:	460d      	mov	r5, r1
 8008008:	d9f4      	bls.n	8007ff4 <_printf_i+0x114>
 800800a:	2b08      	cmp	r3, #8
 800800c:	d10b      	bne.n	8008026 <_printf_i+0x146>
 800800e:	6823      	ldr	r3, [r4, #0]
 8008010:	07df      	lsls	r7, r3, #31
 8008012:	d508      	bpl.n	8008026 <_printf_i+0x146>
 8008014:	6923      	ldr	r3, [r4, #16]
 8008016:	6861      	ldr	r1, [r4, #4]
 8008018:	4299      	cmp	r1, r3
 800801a:	bfde      	ittt	le
 800801c:	2330      	movle	r3, #48	@ 0x30
 800801e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008022:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008026:	1b92      	subs	r2, r2, r6
 8008028:	6122      	str	r2, [r4, #16]
 800802a:	464b      	mov	r3, r9
 800802c:	4621      	mov	r1, r4
 800802e:	4640      	mov	r0, r8
 8008030:	f8cd a000 	str.w	sl, [sp]
 8008034:	aa03      	add	r2, sp, #12
 8008036:	f7ff fee1 	bl	8007dfc <_printf_common>
 800803a:	3001      	adds	r0, #1
 800803c:	d14a      	bne.n	80080d4 <_printf_i+0x1f4>
 800803e:	f04f 30ff 	mov.w	r0, #4294967295
 8008042:	b004      	add	sp, #16
 8008044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008048:	6823      	ldr	r3, [r4, #0]
 800804a:	f043 0320 	orr.w	r3, r3, #32
 800804e:	6023      	str	r3, [r4, #0]
 8008050:	2778      	movs	r7, #120	@ 0x78
 8008052:	4832      	ldr	r0, [pc, #200]	@ (800811c <_printf_i+0x23c>)
 8008054:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008058:	6823      	ldr	r3, [r4, #0]
 800805a:	6831      	ldr	r1, [r6, #0]
 800805c:	061f      	lsls	r7, r3, #24
 800805e:	f851 5b04 	ldr.w	r5, [r1], #4
 8008062:	d402      	bmi.n	800806a <_printf_i+0x18a>
 8008064:	065f      	lsls	r7, r3, #25
 8008066:	bf48      	it	mi
 8008068:	b2ad      	uxthmi	r5, r5
 800806a:	6031      	str	r1, [r6, #0]
 800806c:	07d9      	lsls	r1, r3, #31
 800806e:	bf44      	itt	mi
 8008070:	f043 0320 	orrmi.w	r3, r3, #32
 8008074:	6023      	strmi	r3, [r4, #0]
 8008076:	b11d      	cbz	r5, 8008080 <_printf_i+0x1a0>
 8008078:	2310      	movs	r3, #16
 800807a:	e7ab      	b.n	8007fd4 <_printf_i+0xf4>
 800807c:	4826      	ldr	r0, [pc, #152]	@ (8008118 <_printf_i+0x238>)
 800807e:	e7e9      	b.n	8008054 <_printf_i+0x174>
 8008080:	6823      	ldr	r3, [r4, #0]
 8008082:	f023 0320 	bic.w	r3, r3, #32
 8008086:	6023      	str	r3, [r4, #0]
 8008088:	e7f6      	b.n	8008078 <_printf_i+0x198>
 800808a:	4616      	mov	r6, r2
 800808c:	e7bd      	b.n	800800a <_printf_i+0x12a>
 800808e:	6833      	ldr	r3, [r6, #0]
 8008090:	6825      	ldr	r5, [r4, #0]
 8008092:	1d18      	adds	r0, r3, #4
 8008094:	6961      	ldr	r1, [r4, #20]
 8008096:	6030      	str	r0, [r6, #0]
 8008098:	062e      	lsls	r6, r5, #24
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	d501      	bpl.n	80080a2 <_printf_i+0x1c2>
 800809e:	6019      	str	r1, [r3, #0]
 80080a0:	e002      	b.n	80080a8 <_printf_i+0x1c8>
 80080a2:	0668      	lsls	r0, r5, #25
 80080a4:	d5fb      	bpl.n	800809e <_printf_i+0x1be>
 80080a6:	8019      	strh	r1, [r3, #0]
 80080a8:	2300      	movs	r3, #0
 80080aa:	4616      	mov	r6, r2
 80080ac:	6123      	str	r3, [r4, #16]
 80080ae:	e7bc      	b.n	800802a <_printf_i+0x14a>
 80080b0:	6833      	ldr	r3, [r6, #0]
 80080b2:	2100      	movs	r1, #0
 80080b4:	1d1a      	adds	r2, r3, #4
 80080b6:	6032      	str	r2, [r6, #0]
 80080b8:	681e      	ldr	r6, [r3, #0]
 80080ba:	6862      	ldr	r2, [r4, #4]
 80080bc:	4630      	mov	r0, r6
 80080be:	f000 f849 	bl	8008154 <memchr>
 80080c2:	b108      	cbz	r0, 80080c8 <_printf_i+0x1e8>
 80080c4:	1b80      	subs	r0, r0, r6
 80080c6:	6060      	str	r0, [r4, #4]
 80080c8:	6863      	ldr	r3, [r4, #4]
 80080ca:	6123      	str	r3, [r4, #16]
 80080cc:	2300      	movs	r3, #0
 80080ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80080d2:	e7aa      	b.n	800802a <_printf_i+0x14a>
 80080d4:	4632      	mov	r2, r6
 80080d6:	4649      	mov	r1, r9
 80080d8:	4640      	mov	r0, r8
 80080da:	6923      	ldr	r3, [r4, #16]
 80080dc:	47d0      	blx	sl
 80080de:	3001      	adds	r0, #1
 80080e0:	d0ad      	beq.n	800803e <_printf_i+0x15e>
 80080e2:	6823      	ldr	r3, [r4, #0]
 80080e4:	079b      	lsls	r3, r3, #30
 80080e6:	d413      	bmi.n	8008110 <_printf_i+0x230>
 80080e8:	68e0      	ldr	r0, [r4, #12]
 80080ea:	9b03      	ldr	r3, [sp, #12]
 80080ec:	4298      	cmp	r0, r3
 80080ee:	bfb8      	it	lt
 80080f0:	4618      	movlt	r0, r3
 80080f2:	e7a6      	b.n	8008042 <_printf_i+0x162>
 80080f4:	2301      	movs	r3, #1
 80080f6:	4632      	mov	r2, r6
 80080f8:	4649      	mov	r1, r9
 80080fa:	4640      	mov	r0, r8
 80080fc:	47d0      	blx	sl
 80080fe:	3001      	adds	r0, #1
 8008100:	d09d      	beq.n	800803e <_printf_i+0x15e>
 8008102:	3501      	adds	r5, #1
 8008104:	68e3      	ldr	r3, [r4, #12]
 8008106:	9903      	ldr	r1, [sp, #12]
 8008108:	1a5b      	subs	r3, r3, r1
 800810a:	42ab      	cmp	r3, r5
 800810c:	dcf2      	bgt.n	80080f4 <_printf_i+0x214>
 800810e:	e7eb      	b.n	80080e8 <_printf_i+0x208>
 8008110:	2500      	movs	r5, #0
 8008112:	f104 0619 	add.w	r6, r4, #25
 8008116:	e7f5      	b.n	8008104 <_printf_i+0x224>
 8008118:	08008323 	.word	0x08008323
 800811c:	08008334 	.word	0x08008334

08008120 <memmove>:
 8008120:	4288      	cmp	r0, r1
 8008122:	b510      	push	{r4, lr}
 8008124:	eb01 0402 	add.w	r4, r1, r2
 8008128:	d902      	bls.n	8008130 <memmove+0x10>
 800812a:	4284      	cmp	r4, r0
 800812c:	4623      	mov	r3, r4
 800812e:	d807      	bhi.n	8008140 <memmove+0x20>
 8008130:	1e43      	subs	r3, r0, #1
 8008132:	42a1      	cmp	r1, r4
 8008134:	d008      	beq.n	8008148 <memmove+0x28>
 8008136:	f811 2b01 	ldrb.w	r2, [r1], #1
 800813a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800813e:	e7f8      	b.n	8008132 <memmove+0x12>
 8008140:	4601      	mov	r1, r0
 8008142:	4402      	add	r2, r0
 8008144:	428a      	cmp	r2, r1
 8008146:	d100      	bne.n	800814a <memmove+0x2a>
 8008148:	bd10      	pop	{r4, pc}
 800814a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800814e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008152:	e7f7      	b.n	8008144 <memmove+0x24>

08008154 <memchr>:
 8008154:	4603      	mov	r3, r0
 8008156:	b510      	push	{r4, lr}
 8008158:	b2c9      	uxtb	r1, r1
 800815a:	4402      	add	r2, r0
 800815c:	4293      	cmp	r3, r2
 800815e:	4618      	mov	r0, r3
 8008160:	d101      	bne.n	8008166 <memchr+0x12>
 8008162:	2000      	movs	r0, #0
 8008164:	e003      	b.n	800816e <memchr+0x1a>
 8008166:	7804      	ldrb	r4, [r0, #0]
 8008168:	3301      	adds	r3, #1
 800816a:	428c      	cmp	r4, r1
 800816c:	d1f6      	bne.n	800815c <memchr+0x8>
 800816e:	bd10      	pop	{r4, pc}

08008170 <_realloc_r>:
 8008170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008174:	4680      	mov	r8, r0
 8008176:	4615      	mov	r5, r2
 8008178:	460c      	mov	r4, r1
 800817a:	b921      	cbnz	r1, 8008186 <_realloc_r+0x16>
 800817c:	4611      	mov	r1, r2
 800817e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008182:	f7ff bb33 	b.w	80077ec <_malloc_r>
 8008186:	b92a      	cbnz	r2, 8008194 <_realloc_r+0x24>
 8008188:	f7ff fc98 	bl	8007abc <_free_r>
 800818c:	2400      	movs	r4, #0
 800818e:	4620      	mov	r0, r4
 8008190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008194:	f000 f81a 	bl	80081cc <_malloc_usable_size_r>
 8008198:	4285      	cmp	r5, r0
 800819a:	4606      	mov	r6, r0
 800819c:	d802      	bhi.n	80081a4 <_realloc_r+0x34>
 800819e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80081a2:	d8f4      	bhi.n	800818e <_realloc_r+0x1e>
 80081a4:	4629      	mov	r1, r5
 80081a6:	4640      	mov	r0, r8
 80081a8:	f7ff fb20 	bl	80077ec <_malloc_r>
 80081ac:	4607      	mov	r7, r0
 80081ae:	2800      	cmp	r0, #0
 80081b0:	d0ec      	beq.n	800818c <_realloc_r+0x1c>
 80081b2:	42b5      	cmp	r5, r6
 80081b4:	462a      	mov	r2, r5
 80081b6:	4621      	mov	r1, r4
 80081b8:	bf28      	it	cs
 80081ba:	4632      	movcs	r2, r6
 80081bc:	f7ff fc70 	bl	8007aa0 <memcpy>
 80081c0:	4621      	mov	r1, r4
 80081c2:	4640      	mov	r0, r8
 80081c4:	f7ff fc7a 	bl	8007abc <_free_r>
 80081c8:	463c      	mov	r4, r7
 80081ca:	e7e0      	b.n	800818e <_realloc_r+0x1e>

080081cc <_malloc_usable_size_r>:
 80081cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081d0:	1f18      	subs	r0, r3, #4
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	bfbc      	itt	lt
 80081d6:	580b      	ldrlt	r3, [r1, r0]
 80081d8:	18c0      	addlt	r0, r0, r3
 80081da:	4770      	bx	lr

080081dc <_init>:
 80081dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081de:	bf00      	nop
 80081e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081e2:	bc08      	pop	{r3}
 80081e4:	469e      	mov	lr, r3
 80081e6:	4770      	bx	lr

080081e8 <_fini>:
 80081e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ea:	bf00      	nop
 80081ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081ee:	bc08      	pop	{r3}
 80081f0:	469e      	mov	lr, r3
 80081f2:	4770      	bx	lr
