
stm-wheel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005748  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08005854  08005854  00006854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059cc  080059cc  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  080059cc  080059cc  000069cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059d4  080059d4  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059d4  080059d4  000069d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080059d8  080059d8  000069d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080059dc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c8  20000068  08005a44  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  08005a44  00007330  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b5c9  00000000  00000000  00007091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002080  00000000  00000000  0001265a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a70  00000000  00000000  000146e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007f4  00000000  00000000  00015150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018afe  00000000  00000000  00015944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c574  00000000  00000000  0002e442  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bc0f  00000000  00000000  0003a9b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c65c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003260  00000000  00000000  000c6608  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000c9868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	0800583c 	.word	0x0800583c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	0800583c 	.word	0x0800583c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000160:	f001 f810 	bl	8001184 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000164:	f000 f84c 	bl	8000200 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000168:	f000 f99e 	bl	80004a8 <MX_GPIO_Init>
  MX_DMA_Init();
 800016c:	f000 f97e 	bl	800046c <MX_DMA_Init>
  MX_CAN_Init();
 8000170:	f000 f904 	bl	800037c <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000174:	f000 f950 	bl	8000418 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000178:	f000 f896 	bl	80002a8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan);
 800017c:	481d      	ldr	r0, [pc, #116]	@ (80001f4 <main+0x98>)
 800017e:	f001 fe0c 	bl	8001d9a <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 8000182:	2110      	movs	r1, #16
 8000184:	481b      	ldr	r0, [pc, #108]	@ (80001f4 <main+0x98>)
 8000186:	f002 f885 	bl	8002294 <HAL_CAN_ActivateNotification>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);   // Turn LED off
 800018a:	2201      	movs	r2, #1
 800018c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000190:	4819      	ldr	r0, [pc, #100]	@ (80001f8 <main+0x9c>)
 8000192:	f003 f81e 	bl	80031d2 <HAL_GPIO_WritePin>
	telemetry_data.tRpm = 0;
 8000196:	4b19      	ldr	r3, [pc, #100]	@ (80001fc <main+0xa0>)
 8000198:	2200      	movs	r2, #0
 800019a:	601a      	str	r2, [r3, #0]
	telemetry_data.tRpm = 0;
 800019c:	4b17      	ldr	r3, [pc, #92]	@ (80001fc <main+0xa0>)
 800019e:	2200      	movs	r2, #0
 80001a0:	601a      	str	r2, [r3, #0]
	telemetry_data.tSpeedKmh = 0;
 80001a2:	4b16      	ldr	r3, [pc, #88]	@ (80001fc <main+0xa0>)
 80001a4:	2200      	movs	r2, #0
 80001a6:	609a      	str	r2, [r3, #8]
	telemetry_data.tHasDRS = 0;
 80001a8:	4b14      	ldr	r3, [pc, #80]	@ (80001fc <main+0xa0>)
 80001aa:	2200      	movs	r2, #0
 80001ac:	60da      	str	r2, [r3, #12]
	telemetry_data.tDrs = 0;
 80001ae:	4b13      	ldr	r3, [pc, #76]	@ (80001fc <main+0xa0>)
 80001b0:	2200      	movs	r2, #0
 80001b2:	611a      	str	r2, [r3, #16]
	telemetry_data.tPitLim = 0;
 80001b4:	4b11      	ldr	r3, [pc, #68]	@ (80001fc <main+0xa0>)
 80001b6:	2200      	movs	r2, #0
 80001b8:	615a      	str	r2, [r3, #20]
	telemetry_data.tFuel = 0;
 80001ba:	4b10      	ldr	r3, [pc, #64]	@ (80001fc <main+0xa0>)
 80001bc:	2200      	movs	r2, #0
 80001be:	619a      	str	r2, [r3, #24]
	telemetry_data.tBrakeBias = 0;
 80001c0:	4b0e      	ldr	r3, [pc, #56]	@ (80001fc <main+0xa0>)
 80001c2:	2200      	movs	r2, #0
 80001c4:	61da      	str	r2, [r3, #28]

	Start_ADC_DMA();
 80001c6:	f000 fbd3 	bl	8000970 <Start_ADC_DMA>
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);   // Turn LED off
 80001ca:	2200      	movs	r2, #0
 80001cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001d0:	4809      	ldr	r0, [pc, #36]	@ (80001f8 <main+0x9c>)
 80001d2:	f002 fffe 	bl	80031d2 <HAL_GPIO_WritePin>

	  updateTelemetry();
 80001d6:	f000 f9db 	bl	8000590 <updateTelemetry>
	  updateUserInput();
 80001da:	f000 fb13 	bl	8000804 <updateUserInput>

	  CAN_Transmit();
 80001de:	f000 fc4d 	bl	8000a7c <CAN_Transmit>

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);   // Turn LED off
 80001e2:	2201      	movs	r2, #1
 80001e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <main+0x9c>)
 80001ea:	f002 fff2 	bl	80031d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);   // Turn LED off
 80001ee:	bf00      	nop
 80001f0:	e7eb      	b.n	80001ca <main+0x6e>
 80001f2:	bf00      	nop
 80001f4:	2000012c 	.word	0x2000012c
 80001f8:	40011000 	.word	0x40011000
 80001fc:	20000084 	.word	0x20000084

08000200 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b094      	sub	sp, #80	@ 0x50
 8000204:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000206:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800020a:	2228      	movs	r2, #40	@ 0x28
 800020c:	2100      	movs	r1, #0
 800020e:	4618      	mov	r0, r3
 8000210:	f004 fdbe 	bl	8004d90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000214:	f107 0314 	add.w	r3, r7, #20
 8000218:	2200      	movs	r2, #0
 800021a:	601a      	str	r2, [r3, #0]
 800021c:	605a      	str	r2, [r3, #4]
 800021e:	609a      	str	r2, [r3, #8]
 8000220:	60da      	str	r2, [r3, #12]
 8000222:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000224:	1d3b      	adds	r3, r7, #4
 8000226:	2200      	movs	r2, #0
 8000228:	601a      	str	r2, [r3, #0]
 800022a:	605a      	str	r2, [r3, #4]
 800022c:	609a      	str	r2, [r3, #8]
 800022e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000230:	2302      	movs	r3, #2
 8000232:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000234:	2301      	movs	r3, #1
 8000236:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000238:	2310      	movs	r3, #16
 800023a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800023c:	2302      	movs	r3, #2
 800023e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000240:	2300      	movs	r3, #0
 8000242:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000244:	2300      	movs	r3, #0
 8000246:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000248:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800024c:	4618      	mov	r0, r3
 800024e:	f002 ffd9 	bl	8003204 <HAL_RCC_OscConfig>
 8000252:	4603      	mov	r3, r0
 8000254:	2b00      	cmp	r3, #0
 8000256:	d001      	beq.n	800025c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000258:	f000 fcfe 	bl	8000c58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800025c:	230f      	movs	r3, #15
 800025e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000260:	2302      	movs	r3, #2
 8000262:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000264:	2300      	movs	r3, #0
 8000266:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000268:	2300      	movs	r3, #0
 800026a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800026c:	2300      	movs	r3, #0
 800026e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000270:	f107 0314 	add.w	r3, r7, #20
 8000274:	2100      	movs	r1, #0
 8000276:	4618      	mov	r0, r3
 8000278:	f003 fa46 	bl	8003708 <HAL_RCC_ClockConfig>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000282:	f000 fce9 	bl	8000c58 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000286:	2302      	movs	r3, #2
 8000288:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800028a:	2300      	movs	r3, #0
 800028c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800028e:	1d3b      	adds	r3, r7, #4
 8000290:	4618      	mov	r0, r3
 8000292:	f003 fbc7 	bl	8003a24 <HAL_RCCEx_PeriphCLKConfig>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d001      	beq.n	80002a0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800029c:	f000 fcdc 	bl	8000c58 <Error_Handler>
  }
}
 80002a0:	bf00      	nop
 80002a2:	3750      	adds	r7, #80	@ 0x50
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}

080002a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b084      	sub	sp, #16
 80002ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002ae:	1d3b      	adds	r3, r7, #4
 80002b0:	2200      	movs	r2, #0
 80002b2:	601a      	str	r2, [r3, #0]
 80002b4:	605a      	str	r2, [r3, #4]
 80002b6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002b8:	4b2e      	ldr	r3, [pc, #184]	@ (8000374 <MX_ADC1_Init+0xcc>)
 80002ba:	4a2f      	ldr	r2, [pc, #188]	@ (8000378 <MX_ADC1_Init+0xd0>)
 80002bc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80002be:	4b2d      	ldr	r3, [pc, #180]	@ (8000374 <MX_ADC1_Init+0xcc>)
 80002c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80002c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80002c6:	4b2b      	ldr	r3, [pc, #172]	@ (8000374 <MX_ADC1_Init+0xcc>)
 80002c8:	2201      	movs	r2, #1
 80002ca:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002cc:	4b29      	ldr	r3, [pc, #164]	@ (8000374 <MX_ADC1_Init+0xcc>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002d2:	4b28      	ldr	r3, [pc, #160]	@ (8000374 <MX_ADC1_Init+0xcc>)
 80002d4:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80002d8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002da:	4b26      	ldr	r3, [pc, #152]	@ (8000374 <MX_ADC1_Init+0xcc>)
 80002dc:	2200      	movs	r2, #0
 80002de:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 80002e0:	4b24      	ldr	r3, [pc, #144]	@ (8000374 <MX_ADC1_Init+0xcc>)
 80002e2:	2204      	movs	r2, #4
 80002e4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002e6:	4823      	ldr	r0, [pc, #140]	@ (8000374 <MX_ADC1_Init+0xcc>)
 80002e8:	f000 ffd2 	bl	8001290 <HAL_ADC_Init>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80002f2:	f000 fcb1 	bl	8000c58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80002f6:	2300      	movs	r3, #0
 80002f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002fa:	2301      	movs	r3, #1
 80002fc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80002fe:	2305      	movs	r3, #5
 8000300:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	4619      	mov	r1, r3
 8000306:	481b      	ldr	r0, [pc, #108]	@ (8000374 <MX_ADC1_Init+0xcc>)
 8000308:	f001 f98a 	bl	8001620 <HAL_ADC_ConfigChannel>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000312:	f000 fca1 	bl	8000c58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000316:	2301      	movs	r3, #1
 8000318:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800031a:	2302      	movs	r3, #2
 800031c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800031e:	1d3b      	adds	r3, r7, #4
 8000320:	4619      	mov	r1, r3
 8000322:	4814      	ldr	r0, [pc, #80]	@ (8000374 <MX_ADC1_Init+0xcc>)
 8000324:	f001 f97c 	bl	8001620 <HAL_ADC_ConfigChannel>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800032e:	f000 fc93 	bl	8000c58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000332:	2302      	movs	r3, #2
 8000334:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000336:	2303      	movs	r3, #3
 8000338:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800033a:	1d3b      	adds	r3, r7, #4
 800033c:	4619      	mov	r1, r3
 800033e:	480d      	ldr	r0, [pc, #52]	@ (8000374 <MX_ADC1_Init+0xcc>)
 8000340:	f001 f96e 	bl	8001620 <HAL_ADC_ConfigChannel>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800034a:	f000 fc85 	bl	8000c58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800034e:	2303      	movs	r3, #3
 8000350:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000352:	2304      	movs	r3, #4
 8000354:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000356:	1d3b      	adds	r3, r7, #4
 8000358:	4619      	mov	r1, r3
 800035a:	4806      	ldr	r0, [pc, #24]	@ (8000374 <MX_ADC1_Init+0xcc>)
 800035c:	f001 f960 	bl	8001620 <HAL_ADC_ConfigChannel>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000366:	f000 fc77 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800036a:	bf00      	nop
 800036c:	3710      	adds	r7, #16
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	200000b8 	.word	0x200000b8
 8000378:	40012400 	.word	0x40012400

0800037c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b08a      	sub	sp, #40	@ 0x28
 8000380:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000382:	4b23      	ldr	r3, [pc, #140]	@ (8000410 <MX_CAN_Init+0x94>)
 8000384:	4a23      	ldr	r2, [pc, #140]	@ (8000414 <MX_CAN_Init+0x98>)
 8000386:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 1;
 8000388:	4b21      	ldr	r3, [pc, #132]	@ (8000410 <MX_CAN_Init+0x94>)
 800038a:	2201      	movs	r2, #1
 800038c:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800038e:	4b20      	ldr	r3, [pc, #128]	@ (8000410 <MX_CAN_Init+0x94>)
 8000390:	2200      	movs	r2, #0
 8000392:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000394:	4b1e      	ldr	r3, [pc, #120]	@ (8000410 <MX_CAN_Init+0x94>)
 8000396:	2200      	movs	r2, #0
 8000398:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_5TQ;
 800039a:	4b1d      	ldr	r3, [pc, #116]	@ (8000410 <MX_CAN_Init+0x94>)
 800039c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80003a0:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80003a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000410 <MX_CAN_Init+0x94>)
 80003a4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80003a8:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80003aa:	4b19      	ldr	r3, [pc, #100]	@ (8000410 <MX_CAN_Init+0x94>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80003b0:	4b17      	ldr	r3, [pc, #92]	@ (8000410 <MX_CAN_Init+0x94>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80003b6:	4b16      	ldr	r3, [pc, #88]	@ (8000410 <MX_CAN_Init+0x94>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80003bc:	4b14      	ldr	r3, [pc, #80]	@ (8000410 <MX_CAN_Init+0x94>)
 80003be:	2200      	movs	r2, #0
 80003c0:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80003c2:	4b13      	ldr	r3, [pc, #76]	@ (8000410 <MX_CAN_Init+0x94>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80003c8:	4b11      	ldr	r3, [pc, #68]	@ (8000410 <MX_CAN_Init+0x94>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80003ce:	4810      	ldr	r0, [pc, #64]	@ (8000410 <MX_CAN_Init+0x94>)
 80003d0:	f001 fb1f 	bl	8001a12 <HAL_CAN_Init>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <MX_CAN_Init+0x62>
  {
    Error_Handler();
 80003da:	f000 fc3d 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef filterConfig;

  filterConfig.FilterBank = 0;
 80003de:	2300      	movs	r3, #0
 80003e0:	617b      	str	r3, [r7, #20]
  filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80003e2:	2300      	movs	r3, #0
 80003e4:	61bb      	str	r3, [r7, #24]
  filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80003e6:	2301      	movs	r3, #1
 80003e8:	61fb      	str	r3, [r7, #28]
  filterConfig.FilterIdHigh = 0x100 << 5;       // Accept all IDs
 80003ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003ee:	603b      	str	r3, [r7, #0]
  filterConfig.FilterMaskIdHigh = 0x7FF << 5;;   // Accept all IDs
 80003f0:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80003f4:	60bb      	str	r3, [r7, #8]
  filterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;  // Assign to FIFO 1
 80003f6:	2301      	movs	r3, #1
 80003f8:	613b      	str	r3, [r7, #16]
  filterConfig.FilterActivation = ENABLE;
 80003fa:	2301      	movs	r3, #1
 80003fc:	623b      	str	r3, [r7, #32]

  HAL_CAN_ConfigFilter(&hcan, &filterConfig);
 80003fe:	463b      	mov	r3, r7
 8000400:	4619      	mov	r1, r3
 8000402:	4803      	ldr	r0, [pc, #12]	@ (8000410 <MX_CAN_Init+0x94>)
 8000404:	f001 fc00 	bl	8001c08 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 8000408:	bf00      	nop
 800040a:	3728      	adds	r7, #40	@ 0x28
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	2000012c 	.word	0x2000012c
 8000414:	40006400 	.word	0x40006400

08000418 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800041c:	4b11      	ldr	r3, [pc, #68]	@ (8000464 <MX_USART1_UART_Init+0x4c>)
 800041e:	4a12      	ldr	r2, [pc, #72]	@ (8000468 <MX_USART1_UART_Init+0x50>)
 8000420:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000422:	4b10      	ldr	r3, [pc, #64]	@ (8000464 <MX_USART1_UART_Init+0x4c>)
 8000424:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000428:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800042a:	4b0e      	ldr	r3, [pc, #56]	@ (8000464 <MX_USART1_UART_Init+0x4c>)
 800042c:	2200      	movs	r2, #0
 800042e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000430:	4b0c      	ldr	r3, [pc, #48]	@ (8000464 <MX_USART1_UART_Init+0x4c>)
 8000432:	2200      	movs	r2, #0
 8000434:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000436:	4b0b      	ldr	r3, [pc, #44]	@ (8000464 <MX_USART1_UART_Init+0x4c>)
 8000438:	2200      	movs	r2, #0
 800043a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800043c:	4b09      	ldr	r3, [pc, #36]	@ (8000464 <MX_USART1_UART_Init+0x4c>)
 800043e:	220c      	movs	r2, #12
 8000440:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000442:	4b08      	ldr	r3, [pc, #32]	@ (8000464 <MX_USART1_UART_Init+0x4c>)
 8000444:	2200      	movs	r2, #0
 8000446:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000448:	4b06      	ldr	r3, [pc, #24]	@ (8000464 <MX_USART1_UART_Init+0x4c>)
 800044a:	2200      	movs	r2, #0
 800044c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800044e:	4805      	ldr	r0, [pc, #20]	@ (8000464 <MX_USART1_UART_Init+0x4c>)
 8000450:	f003 fb9e 	bl	8003b90 <HAL_UART_Init>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800045a:	f000 fbfd 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800045e:	bf00      	nop
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	20000154 	.word	0x20000154
 8000468:	40013800 	.word	0x40013800

0800046c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000472:	4b0c      	ldr	r3, [pc, #48]	@ (80004a4 <MX_DMA_Init+0x38>)
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	4a0b      	ldr	r2, [pc, #44]	@ (80004a4 <MX_DMA_Init+0x38>)
 8000478:	f043 0301 	orr.w	r3, r3, #1
 800047c:	6153      	str	r3, [r2, #20]
 800047e:	4b09      	ldr	r3, [pc, #36]	@ (80004a4 <MX_DMA_Init+0x38>)
 8000480:	695b      	ldr	r3, [r3, #20]
 8000482:	f003 0301 	and.w	r3, r3, #1
 8000486:	607b      	str	r3, [r7, #4]
 8000488:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800048a:	2200      	movs	r2, #0
 800048c:	2100      	movs	r1, #0
 800048e:	200b      	movs	r0, #11
 8000490:	f002 fa2b 	bl	80028ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000494:	200b      	movs	r0, #11
 8000496:	f002 fa44 	bl	8002922 <HAL_NVIC_EnableIRQ>

}
 800049a:	bf00      	nop
 800049c:	3708      	adds	r7, #8
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	40021000 	.word	0x40021000

080004a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b088      	sub	sp, #32
 80004ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ae:	f107 0310 	add.w	r3, r7, #16
 80004b2:	2200      	movs	r2, #0
 80004b4:	601a      	str	r2, [r3, #0]
 80004b6:	605a      	str	r2, [r3, #4]
 80004b8:	609a      	str	r2, [r3, #8]
 80004ba:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004bc:	4b30      	ldr	r3, [pc, #192]	@ (8000580 <MX_GPIO_Init+0xd8>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	4a2f      	ldr	r2, [pc, #188]	@ (8000580 <MX_GPIO_Init+0xd8>)
 80004c2:	f043 0310 	orr.w	r3, r3, #16
 80004c6:	6193      	str	r3, [r2, #24]
 80004c8:	4b2d      	ldr	r3, [pc, #180]	@ (8000580 <MX_GPIO_Init+0xd8>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	f003 0310 	and.w	r3, r3, #16
 80004d0:	60fb      	str	r3, [r7, #12]
 80004d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004d4:	4b2a      	ldr	r3, [pc, #168]	@ (8000580 <MX_GPIO_Init+0xd8>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	4a29      	ldr	r2, [pc, #164]	@ (8000580 <MX_GPIO_Init+0xd8>)
 80004da:	f043 0320 	orr.w	r3, r3, #32
 80004de:	6193      	str	r3, [r2, #24]
 80004e0:	4b27      	ldr	r3, [pc, #156]	@ (8000580 <MX_GPIO_Init+0xd8>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	f003 0320 	and.w	r3, r3, #32
 80004e8:	60bb      	str	r3, [r7, #8]
 80004ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ec:	4b24      	ldr	r3, [pc, #144]	@ (8000580 <MX_GPIO_Init+0xd8>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	4a23      	ldr	r2, [pc, #140]	@ (8000580 <MX_GPIO_Init+0xd8>)
 80004f2:	f043 0304 	orr.w	r3, r3, #4
 80004f6:	6193      	str	r3, [r2, #24]
 80004f8:	4b21      	ldr	r3, [pc, #132]	@ (8000580 <MX_GPIO_Init+0xd8>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	f003 0304 	and.w	r3, r3, #4
 8000500:	607b      	str	r3, [r7, #4]
 8000502:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000504:	4b1e      	ldr	r3, [pc, #120]	@ (8000580 <MX_GPIO_Init+0xd8>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	4a1d      	ldr	r2, [pc, #116]	@ (8000580 <MX_GPIO_Init+0xd8>)
 800050a:	f043 0308 	orr.w	r3, r3, #8
 800050e:	6193      	str	r3, [r2, #24]
 8000510:	4b1b      	ldr	r3, [pc, #108]	@ (8000580 <MX_GPIO_Init+0xd8>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	f003 0308 	and.w	r3, r3, #8
 8000518:	603b      	str	r3, [r7, #0]
 800051a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800051c:	2200      	movs	r2, #0
 800051e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000522:	4818      	ldr	r0, [pc, #96]	@ (8000584 <MX_GPIO_Init+0xdc>)
 8000524:	f002 fe55 	bl	80031d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000528:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800052c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800052e:	2301      	movs	r3, #1
 8000530:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000532:	2300      	movs	r3, #0
 8000534:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000536:	2302      	movs	r3, #2
 8000538:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800053a:	f107 0310 	add.w	r3, r7, #16
 800053e:	4619      	mov	r1, r3
 8000540:	4810      	ldr	r0, [pc, #64]	@ (8000584 <MX_GPIO_Init+0xdc>)
 8000542:	f002 fcab 	bl	8002e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000546:	23f0      	movs	r3, #240	@ 0xf0
 8000548:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800054a:	2300      	movs	r3, #0
 800054c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800054e:	2301      	movs	r3, #1
 8000550:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000552:	f107 0310 	add.w	r3, r7, #16
 8000556:	4619      	mov	r1, r3
 8000558:	480b      	ldr	r0, [pc, #44]	@ (8000588 <MX_GPIO_Init+0xe0>)
 800055a:	f002 fc9f 	bl	8002e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800055e:	f640 7307 	movw	r3, #3847	@ 0xf07
 8000562:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000564:	2300      	movs	r3, #0
 8000566:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000568:	2301      	movs	r3, #1
 800056a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800056c:	f107 0310 	add.w	r3, r7, #16
 8000570:	4619      	mov	r1, r3
 8000572:	4806      	ldr	r0, [pc, #24]	@ (800058c <MX_GPIO_Init+0xe4>)
 8000574:	f002 fc92 	bl	8002e9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000578:	bf00      	nop
 800057a:	3720      	adds	r7, #32
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40021000 	.word	0x40021000
 8000584:	40011000 	.word	0x40011000
 8000588:	40010800 	.word	0x40010800
 800058c:	40010c00 	.word	0x40010c00

08000590 <updateTelemetry>:
}

/*
 * NEXTION UART FUNCTIONS
 */
void updateTelemetry() {
 8000590:	b580      	push	{r7, lr}
 8000592:	b088      	sub	sp, #32
 8000594:	af00      	add	r7, sp, #0
//	int mappedRpm = map_value(telemetry_data.tRpm, 0, telemetry_data.tMaxRpm, 0, 100);
	char *mappedRpm = int_to_string(telemetry_data.tRpm);
 8000596:	4b31      	ldr	r3, [pc, #196]	@ (800065c <updateTelemetry+0xcc>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4618      	mov	r0, r3
 800059c:	f000 f90e 	bl	80007bc <int_to_string>
 80005a0:	61f8      	str	r0, [r7, #28]
	char *mappedGear = map_gear(telemetry_data.tGear);
 80005a2:	4b2e      	ldr	r3, [pc, #184]	@ (800065c <updateTelemetry+0xcc>)
 80005a4:	685b      	ldr	r3, [r3, #4]
 80005a6:	4618      	mov	r0, r3
 80005a8:	f000 f89a 	bl	80006e0 <map_gear>
 80005ac:	61b8      	str	r0, [r7, #24]
	char *mappedSpeed = int_to_string(telemetry_data.tSpeedKmh);
 80005ae:	4b2b      	ldr	r3, [pc, #172]	@ (800065c <updateTelemetry+0xcc>)
 80005b0:	689b      	ldr	r3, [r3, #8]
 80005b2:	4618      	mov	r0, r3
 80005b4:	f000 f902 	bl	80007bc <int_to_string>
 80005b8:	6178      	str	r0, [r7, #20]
	char *mappedHasDrs = int_to_string(telemetry_data.tHasDRS);
 80005ba:	4b28      	ldr	r3, [pc, #160]	@ (800065c <updateTelemetry+0xcc>)
 80005bc:	68db      	ldr	r3, [r3, #12]
 80005be:	4618      	mov	r0, r3
 80005c0:	f000 f8fc 	bl	80007bc <int_to_string>
 80005c4:	6138      	str	r0, [r7, #16]
	char *mappedPitLim = int_to_string(telemetry_data.tPitLim);
 80005c6:	4b25      	ldr	r3, [pc, #148]	@ (800065c <updateTelemetry+0xcc>)
 80005c8:	695b      	ldr	r3, [r3, #20]
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 f8f6 	bl	80007bc <int_to_string>
 80005d0:	60f8      	str	r0, [r7, #12]
	char *mappedFuel = int_to_string(telemetry_data.tFuel);
 80005d2:	4b22      	ldr	r3, [pc, #136]	@ (800065c <updateTelemetry+0xcc>)
 80005d4:	699b      	ldr	r3, [r3, #24]
 80005d6:	4618      	mov	r0, r3
 80005d8:	f000 f8f0 	bl	80007bc <int_to_string>
 80005dc:	60b8      	str	r0, [r7, #8]
	char *mappedBrakeBias = int_to_string(telemetry_data.tBrakeBias);
 80005de:	4b1f      	ldr	r3, [pc, #124]	@ (800065c <updateTelemetry+0xcc>)
 80005e0:	69db      	ldr	r3, [r3, #28]
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 f8ea 	bl	80007bc <int_to_string>
 80005e8:	6078      	str	r0, [r7, #4]

//	send_int_to_nextion("rpmbar", mappedRpm);
	send__char_to_nextion("rpm", mappedRpm);
 80005ea:	69f9      	ldr	r1, [r7, #28]
 80005ec:	481c      	ldr	r0, [pc, #112]	@ (8000660 <updateTelemetry+0xd0>)
 80005ee:	f000 f83f 	bl	8000670 <send__char_to_nextion>
	send__char_to_nextion("gear", mappedGear);
 80005f2:	69b9      	ldr	r1, [r7, #24]
 80005f4:	481b      	ldr	r0, [pc, #108]	@ (8000664 <updateTelemetry+0xd4>)
 80005f6:	f000 f83b 	bl	8000670 <send__char_to_nextion>
	send__char_to_nextion("speed", mappedSpeed);
 80005fa:	6979      	ldr	r1, [r7, #20]
 80005fc:	481a      	ldr	r0, [pc, #104]	@ (8000668 <updateTelemetry+0xd8>)
 80005fe:	f000 f837 	bl	8000670 <send__char_to_nextion>
	//send__char_to_nextion("mappedHasDrs", mappedHasDrs);
	//send_to_nextion("pitlim", telemetry_data.tPitLim);
	send__char_to_nextion("fuel", mappedFuel);
 8000602:	68b9      	ldr	r1, [r7, #8]
 8000604:	4819      	ldr	r0, [pc, #100]	@ (800066c <updateTelemetry+0xdc>)
 8000606:	f000 f833 	bl	8000670 <send__char_to_nextion>
	//send_to_nextion("gear", telemetry_data.tBrakeBias);

	if(mappedRpm) {
 800060a:	69fb      	ldr	r3, [r7, #28]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d002      	beq.n	8000616 <updateTelemetry+0x86>
		free(mappedRpm);
 8000610:	69f8      	ldr	r0, [r7, #28]
 8000612:	f004 f8db 	bl	80047cc <free>
	}
	// dont do gear since thats not int to string
	if(mappedSpeed) {
 8000616:	697b      	ldr	r3, [r7, #20]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d002      	beq.n	8000622 <updateTelemetry+0x92>
		free(mappedSpeed);
 800061c:	6978      	ldr	r0, [r7, #20]
 800061e:	f004 f8d5 	bl	80047cc <free>
	}
	if(mappedHasDrs) {
 8000622:	693b      	ldr	r3, [r7, #16]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d002      	beq.n	800062e <updateTelemetry+0x9e>
		free(mappedHasDrs);
 8000628:	6938      	ldr	r0, [r7, #16]
 800062a:	f004 f8cf 	bl	80047cc <free>
	}
	if(mappedPitLim) {
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d002      	beq.n	800063a <updateTelemetry+0xaa>
		free(mappedPitLim);
 8000634:	68f8      	ldr	r0, [r7, #12]
 8000636:	f004 f8c9 	bl	80047cc <free>
	}
	if(mappedFuel) {
 800063a:	68bb      	ldr	r3, [r7, #8]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d002      	beq.n	8000646 <updateTelemetry+0xb6>
		free(mappedFuel);
 8000640:	68b8      	ldr	r0, [r7, #8]
 8000642:	f004 f8c3 	bl	80047cc <free>
	}
	if(mappedBrakeBias) {
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d002      	beq.n	8000652 <updateTelemetry+0xc2>
		free(mappedBrakeBias);
 800064c:	6878      	ldr	r0, [r7, #4]
 800064e:	f004 f8bd 	bl	80047cc <free>
	}

}
 8000652:	bf00      	nop
 8000654:	3720      	adds	r7, #32
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	20000084 	.word	0x20000084
 8000660:	08005854 	.word	0x08005854
 8000664:	08005858 	.word	0x08005858
 8000668:	08005860 	.word	0x08005860
 800066c:	08005868 	.word	0x08005868

08000670 <send__char_to_nextion>:

	uint8_t termination_bytes[3] = {0xFF, 0xFF, 0xFF};
	HAL_UART_Transmit(&huart1, termination_bytes, sizeof(termination_bytes), HAL_MAX_DELAY);
}

void send__char_to_nextion(const char *var_name, char *value) {
 8000670:	b580      	push	{r7, lr}
 8000672:	b08e      	sub	sp, #56	@ 0x38
 8000674:	af02      	add	r7, sp, #8
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	6039      	str	r1, [r7, #0]
	char command[32];
	snprintf(command, sizeof(command), "%s.txt=\"%s\"", var_name, value);
 800067a:	f107 0010 	add.w	r0, r7, #16
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	9300      	str	r3, [sp, #0]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4a13      	ldr	r2, [pc, #76]	@ (80006d4 <send__char_to_nextion+0x64>)
 8000686:	2120      	movs	r1, #32
 8000688:	f004 fa76 	bl	8004b78 <sniprintf>

	HAL_UART_Transmit(&huart1, (uint8_t *)command, strlen(command), HAL_MAX_DELAY);
 800068c:	f107 0310 	add.w	r3, r7, #16
 8000690:	4618      	mov	r0, r3
 8000692:	f7ff fd5b 	bl	800014c <strlen>
 8000696:	4603      	mov	r3, r0
 8000698:	b29a      	uxth	r2, r3
 800069a:	f107 0110 	add.w	r1, r7, #16
 800069e:	f04f 33ff 	mov.w	r3, #4294967295
 80006a2:	480d      	ldr	r0, [pc, #52]	@ (80006d8 <send__char_to_nextion+0x68>)
 80006a4:	f003 fac4 	bl	8003c30 <HAL_UART_Transmit>

	uint8_t termination_bytes[3] = {0xFF, 0xFF, 0xFF};
 80006a8:	4a0c      	ldr	r2, [pc, #48]	@ (80006dc <send__char_to_nextion+0x6c>)
 80006aa:	f107 030c 	add.w	r3, r7, #12
 80006ae:	6812      	ldr	r2, [r2, #0]
 80006b0:	4611      	mov	r1, r2
 80006b2:	8019      	strh	r1, [r3, #0]
 80006b4:	3302      	adds	r3, #2
 80006b6:	0c12      	lsrs	r2, r2, #16
 80006b8:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, termination_bytes, sizeof(termination_bytes), HAL_MAX_DELAY);
 80006ba:	f107 010c 	add.w	r1, r7, #12
 80006be:	f04f 33ff 	mov.w	r3, #4294967295
 80006c2:	2203      	movs	r2, #3
 80006c4:	4804      	ldr	r0, [pc, #16]	@ (80006d8 <send__char_to_nextion+0x68>)
 80006c6:	f003 fab3 	bl	8003c30 <HAL_UART_Transmit>
}
 80006ca:	bf00      	nop
 80006cc:	3730      	adds	r7, #48	@ 0x30
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	08005880 	.word	0x08005880
 80006d8:	20000154 	.word	0x20000154
 80006dc:	0800587c 	.word	0x0800587c

080006e0 <map_gear>:
    if (input > in_max) input = in_max;

    return (input - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

const char* map_gear(int value)  {
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
    if (value < 0 || value > 13) {
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	db02      	blt.n	80006f4 <map_gear+0x14>
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	2b0d      	cmp	r3, #13
 80006f2:	dd01      	ble.n	80006f8 <map_gear+0x18>
        return "X";
 80006f4:	4b22      	ldr	r3, [pc, #136]	@ (8000780 <map_gear+0xa0>)
 80006f6:	e03e      	b.n	8000776 <map_gear+0x96>
    }

    switch (value) {
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2b0d      	cmp	r3, #13
 80006fc:	d83a      	bhi.n	8000774 <map_gear+0x94>
 80006fe:	a201      	add	r2, pc, #4	@ (adr r2, 8000704 <map_gear+0x24>)
 8000700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000704:	0800073d 	.word	0x0800073d
 8000708:	08000741 	.word	0x08000741
 800070c:	08000745 	.word	0x08000745
 8000710:	08000749 	.word	0x08000749
 8000714:	0800074d 	.word	0x0800074d
 8000718:	08000751 	.word	0x08000751
 800071c:	08000755 	.word	0x08000755
 8000720:	08000759 	.word	0x08000759
 8000724:	0800075d 	.word	0x0800075d
 8000728:	08000761 	.word	0x08000761
 800072c:	08000765 	.word	0x08000765
 8000730:	08000769 	.word	0x08000769
 8000734:	0800076d 	.word	0x0800076d
 8000738:	08000771 	.word	0x08000771
        case 0: return "R";
 800073c:	4b11      	ldr	r3, [pc, #68]	@ (8000784 <map_gear+0xa4>)
 800073e:	e01a      	b.n	8000776 <map_gear+0x96>
        case 1: return "N";
 8000740:	4b11      	ldr	r3, [pc, #68]	@ (8000788 <map_gear+0xa8>)
 8000742:	e018      	b.n	8000776 <map_gear+0x96>
        case 2: return "1";
 8000744:	4b11      	ldr	r3, [pc, #68]	@ (800078c <map_gear+0xac>)
 8000746:	e016      	b.n	8000776 <map_gear+0x96>
        case 3: return "2";
 8000748:	4b11      	ldr	r3, [pc, #68]	@ (8000790 <map_gear+0xb0>)
 800074a:	e014      	b.n	8000776 <map_gear+0x96>
        case 4: return "3";
 800074c:	4b11      	ldr	r3, [pc, #68]	@ (8000794 <map_gear+0xb4>)
 800074e:	e012      	b.n	8000776 <map_gear+0x96>
        case 5: return "4";
 8000750:	4b11      	ldr	r3, [pc, #68]	@ (8000798 <map_gear+0xb8>)
 8000752:	e010      	b.n	8000776 <map_gear+0x96>
        case 6: return "5";
 8000754:	4b11      	ldr	r3, [pc, #68]	@ (800079c <map_gear+0xbc>)
 8000756:	e00e      	b.n	8000776 <map_gear+0x96>
        case 7: return "6";
 8000758:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <map_gear+0xc0>)
 800075a:	e00c      	b.n	8000776 <map_gear+0x96>
        case 8: return "7";
 800075c:	4b11      	ldr	r3, [pc, #68]	@ (80007a4 <map_gear+0xc4>)
 800075e:	e00a      	b.n	8000776 <map_gear+0x96>
        case 9: return "8";
 8000760:	4b11      	ldr	r3, [pc, #68]	@ (80007a8 <map_gear+0xc8>)
 8000762:	e008      	b.n	8000776 <map_gear+0x96>
        case 10: return "9";
 8000764:	4b11      	ldr	r3, [pc, #68]	@ (80007ac <map_gear+0xcc>)
 8000766:	e006      	b.n	8000776 <map_gear+0x96>
        case 11: return "10";
 8000768:	4b11      	ldr	r3, [pc, #68]	@ (80007b0 <map_gear+0xd0>)
 800076a:	e004      	b.n	8000776 <map_gear+0x96>
        case 12: return "11";
 800076c:	4b11      	ldr	r3, [pc, #68]	@ (80007b4 <map_gear+0xd4>)
 800076e:	e002      	b.n	8000776 <map_gear+0x96>
        case 13: return "12";
 8000770:	4b11      	ldr	r3, [pc, #68]	@ (80007b8 <map_gear+0xd8>)
 8000772:	e000      	b.n	8000776 <map_gear+0x96>

        default:
        	return "X";
 8000774:	4b02      	ldr	r3, [pc, #8]	@ (8000780 <map_gear+0xa0>)
    }
}
 8000776:	4618      	mov	r0, r3
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	bc80      	pop	{r7}
 800077e:	4770      	bx	lr
 8000780:	0800588c 	.word	0x0800588c
 8000784:	08005890 	.word	0x08005890
 8000788:	08005894 	.word	0x08005894
 800078c:	08005898 	.word	0x08005898
 8000790:	0800589c 	.word	0x0800589c
 8000794:	080058a0 	.word	0x080058a0
 8000798:	080058a4 	.word	0x080058a4
 800079c:	080058a8 	.word	0x080058a8
 80007a0:	080058ac 	.word	0x080058ac
 80007a4:	080058b0 	.word	0x080058b0
 80007a8:	080058b4 	.word	0x080058b4
 80007ac:	080058b8 	.word	0x080058b8
 80007b0:	080058bc 	.word	0x080058bc
 80007b4:	080058c0 	.word	0x080058c0
 80007b8:	080058c4 	.word	0x080058c4

080007bc <int_to_string>:

char* int_to_string(int value) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
    // Determine required buffer size (including null terminator)
    size_t buffer_size = snprintf(NULL, 0, "%d", value) + 1;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	4a0e      	ldr	r2, [pc, #56]	@ (8000800 <int_to_string+0x44>)
 80007c8:	2100      	movs	r1, #0
 80007ca:	2000      	movs	r0, #0
 80007cc:	f004 f9d4 	bl	8004b78 <sniprintf>
 80007d0:	4603      	mov	r3, r0
 80007d2:	3301      	adds	r3, #1
 80007d4:	60fb      	str	r3, [r7, #12]

    // Allocate memory
    char *string = (char*)malloc(buffer_size);
 80007d6:	68f8      	ldr	r0, [r7, #12]
 80007d8:	f003 fff0 	bl	80047bc <malloc>
 80007dc:	4603      	mov	r3, r0
 80007de:	60bb      	str	r3, [r7, #8]
    if (!string) {
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d101      	bne.n	80007ea <int_to_string+0x2e>
        return NULL;  // Return NULL if allocation fails
 80007e6:	2300      	movs	r3, #0
 80007e8:	e006      	b.n	80007f8 <int_to_string+0x3c>
    }

    // Format the integer into the allocated string
    snprintf(string, buffer_size, "%d", value);
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	4a04      	ldr	r2, [pc, #16]	@ (8000800 <int_to_string+0x44>)
 80007ee:	68f9      	ldr	r1, [r7, #12]
 80007f0:	68b8      	ldr	r0, [r7, #8]
 80007f2:	f004 f9c1 	bl	8004b78 <sniprintf>

    return string;  // Caller must free() this memory
 80007f6:	68bb      	ldr	r3, [r7, #8]
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3710      	adds	r7, #16
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	080058c8 	.word	0x080058c8

08000804 <updateUserInput>:

void updateUserInput() {
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
	user_input_data.buttons = 0; // Clear all bits initially
 8000808:	4b55      	ldr	r3, [pc, #340]	@ (8000960 <updateUserInput+0x15c>)
 800080a:	2200      	movs	r2, #0
 800080c:	801a      	strh	r2, [r3, #0]
	user_input_data.encoder_1 = 0;
 800080e:	4b54      	ldr	r3, [pc, #336]	@ (8000960 <updateUserInput+0x15c>)
 8000810:	2200      	movs	r2, #0
 8000812:	809a      	strh	r2, [r3, #4]
	user_input_data.encoder_2 = 0;
 8000814:	4b52      	ldr	r3, [pc, #328]	@ (8000960 <updateUserInput+0x15c>)
 8000816:	2200      	movs	r2, #0
 8000818:	80da      	strh	r2, [r3, #6]
	user_input_data.encoder_3 = 0;
 800081a:	4b51      	ldr	r3, [pc, #324]	@ (8000960 <updateUserInput+0x15c>)
 800081c:	2200      	movs	r2, #0
 800081e:	811a      	strh	r2, [r3, #8]
	user_input_data.hall_analog_1 = 0;
 8000820:	4b4f      	ldr	r3, [pc, #316]	@ (8000960 <updateUserInput+0x15c>)
 8000822:	2200      	movs	r2, #0
 8000824:	709a      	strb	r2, [r3, #2]
	user_input_data.hall_analog_2 = 0;
 8000826:	4b4e      	ldr	r3, [pc, #312]	@ (8000960 <updateUserInput+0x15c>)
 8000828:	2200      	movs	r2, #0
 800082a:	70da      	strb	r2, [r3, #3]
	// Buttons
	if (!HAL_GPIO_ReadPin(GPIOA, BUTTON_1_PIN)) user_input_data.buttons |= (1 << 0);
 800082c:	2110      	movs	r1, #16
 800082e:	484d      	ldr	r0, [pc, #308]	@ (8000964 <updateUserInput+0x160>)
 8000830:	f002 fcb8 	bl	80031a4 <HAL_GPIO_ReadPin>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d106      	bne.n	8000848 <updateUserInput+0x44>
 800083a:	4b49      	ldr	r3, [pc, #292]	@ (8000960 <updateUserInput+0x15c>)
 800083c:	881b      	ldrh	r3, [r3, #0]
 800083e:	f043 0301 	orr.w	r3, r3, #1
 8000842:	b29a      	uxth	r2, r3
 8000844:	4b46      	ldr	r3, [pc, #280]	@ (8000960 <updateUserInput+0x15c>)
 8000846:	801a      	strh	r2, [r3, #0]
	if (!HAL_GPIO_ReadPin(GPIOA, BUTTON_2_PIN)) user_input_data.buttons |= (1 << 1);
 8000848:	2120      	movs	r1, #32
 800084a:	4846      	ldr	r0, [pc, #280]	@ (8000964 <updateUserInput+0x160>)
 800084c:	f002 fcaa 	bl	80031a4 <HAL_GPIO_ReadPin>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d106      	bne.n	8000864 <updateUserInput+0x60>
 8000856:	4b42      	ldr	r3, [pc, #264]	@ (8000960 <updateUserInput+0x15c>)
 8000858:	881b      	ldrh	r3, [r3, #0]
 800085a:	f043 0302 	orr.w	r3, r3, #2
 800085e:	b29a      	uxth	r2, r3
 8000860:	4b3f      	ldr	r3, [pc, #252]	@ (8000960 <updateUserInput+0x15c>)
 8000862:	801a      	strh	r2, [r3, #0]
	if (!HAL_GPIO_ReadPin(GPIOA, BUTTON_3_PIN)) user_input_data.buttons |= (1 << 2);
 8000864:	2140      	movs	r1, #64	@ 0x40
 8000866:	483f      	ldr	r0, [pc, #252]	@ (8000964 <updateUserInput+0x160>)
 8000868:	f002 fc9c 	bl	80031a4 <HAL_GPIO_ReadPin>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d106      	bne.n	8000880 <updateUserInput+0x7c>
 8000872:	4b3b      	ldr	r3, [pc, #236]	@ (8000960 <updateUserInput+0x15c>)
 8000874:	881b      	ldrh	r3, [r3, #0]
 8000876:	f043 0304 	orr.w	r3, r3, #4
 800087a:	b29a      	uxth	r2, r3
 800087c:	4b38      	ldr	r3, [pc, #224]	@ (8000960 <updateUserInput+0x15c>)
 800087e:	801a      	strh	r2, [r3, #0]
	if (!HAL_GPIO_ReadPin(GPIOA, BUTTON_4_PIN)) user_input_data.buttons |= (1 << 3);
 8000880:	2180      	movs	r1, #128	@ 0x80
 8000882:	4838      	ldr	r0, [pc, #224]	@ (8000964 <updateUserInput+0x160>)
 8000884:	f002 fc8e 	bl	80031a4 <HAL_GPIO_ReadPin>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d106      	bne.n	800089c <updateUserInput+0x98>
 800088e:	4b34      	ldr	r3, [pc, #208]	@ (8000960 <updateUserInput+0x15c>)
 8000890:	881b      	ldrh	r3, [r3, #0]
 8000892:	f043 0308 	orr.w	r3, r3, #8
 8000896:	b29a      	uxth	r2, r3
 8000898:	4b31      	ldr	r3, [pc, #196]	@ (8000960 <updateUserInput+0x15c>)
 800089a:	801a      	strh	r2, [r3, #0]
	if (!HAL_GPIO_ReadPin(GPIOB, BUTTON_5_PIN)) user_input_data.buttons |= (1 << 4);
 800089c:	2101      	movs	r1, #1
 800089e:	4832      	ldr	r0, [pc, #200]	@ (8000968 <updateUserInput+0x164>)
 80008a0:	f002 fc80 	bl	80031a4 <HAL_GPIO_ReadPin>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d106      	bne.n	80008b8 <updateUserInput+0xb4>
 80008aa:	4b2d      	ldr	r3, [pc, #180]	@ (8000960 <updateUserInput+0x15c>)
 80008ac:	881b      	ldrh	r3, [r3, #0]
 80008ae:	f043 0310 	orr.w	r3, r3, #16
 80008b2:	b29a      	uxth	r2, r3
 80008b4:	4b2a      	ldr	r3, [pc, #168]	@ (8000960 <updateUserInput+0x15c>)
 80008b6:	801a      	strh	r2, [r3, #0]
	if (!HAL_GPIO_ReadPin(GPIOB, BUTTON_6_PIN)) user_input_data.buttons |= (1 << 5);
 80008b8:	2102      	movs	r1, #2
 80008ba:	482b      	ldr	r0, [pc, #172]	@ (8000968 <updateUserInput+0x164>)
 80008bc:	f002 fc72 	bl	80031a4 <HAL_GPIO_ReadPin>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d106      	bne.n	80008d4 <updateUserInput+0xd0>
 80008c6:	4b26      	ldr	r3, [pc, #152]	@ (8000960 <updateUserInput+0x15c>)
 80008c8:	881b      	ldrh	r3, [r3, #0]
 80008ca:	f043 0320 	orr.w	r3, r3, #32
 80008ce:	b29a      	uxth	r2, r3
 80008d0:	4b23      	ldr	r3, [pc, #140]	@ (8000960 <updateUserInput+0x15c>)
 80008d2:	801a      	strh	r2, [r3, #0]
	if (!HAL_GPIO_ReadPin(GPIOB, BUTTON_7_PIN)) user_input_data.buttons |= (1 << 6);
 80008d4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008d8:	4823      	ldr	r0, [pc, #140]	@ (8000968 <updateUserInput+0x164>)
 80008da:	f002 fc63 	bl	80031a4 <HAL_GPIO_ReadPin>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d106      	bne.n	80008f2 <updateUserInput+0xee>
 80008e4:	4b1e      	ldr	r3, [pc, #120]	@ (8000960 <updateUserInput+0x15c>)
 80008e6:	881b      	ldrh	r3, [r3, #0]
 80008e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008ec:	b29a      	uxth	r2, r3
 80008ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000960 <updateUserInput+0x15c>)
 80008f0:	801a      	strh	r2, [r3, #0]
	if (!HAL_GPIO_ReadPin(GPIOB, BUTTON_8_PIN)) user_input_data.buttons |= (1 << 7);
 80008f2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80008f6:	481c      	ldr	r0, [pc, #112]	@ (8000968 <updateUserInput+0x164>)
 80008f8:	f002 fc54 	bl	80031a4 <HAL_GPIO_ReadPin>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d106      	bne.n	8000910 <updateUserInput+0x10c>
 8000902:	4b17      	ldr	r3, [pc, #92]	@ (8000960 <updateUserInput+0x15c>)
 8000904:	881b      	ldrh	r3, [r3, #0]
 8000906:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800090a:	b29a      	uxth	r2, r3
 800090c:	4b14      	ldr	r3, [pc, #80]	@ (8000960 <updateUserInput+0x15c>)
 800090e:	801a      	strh	r2, [r3, #0]
	if (!HAL_GPIO_ReadPin(GPIOB, BUTTON_9_PIN)) user_input_data.buttons |= (1 << 8);
 8000910:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000914:	4814      	ldr	r0, [pc, #80]	@ (8000968 <updateUserInput+0x164>)
 8000916:	f002 fc45 	bl	80031a4 <HAL_GPIO_ReadPin>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d106      	bne.n	800092e <updateUserInput+0x12a>
 8000920:	4b0f      	ldr	r3, [pc, #60]	@ (8000960 <updateUserInput+0x15c>)
 8000922:	881b      	ldrh	r3, [r3, #0]
 8000924:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000928:	b29a      	uxth	r2, r3
 800092a:	4b0d      	ldr	r3, [pc, #52]	@ (8000960 <updateUserInput+0x15c>)
 800092c:	801a      	strh	r2, [r3, #0]
	if (!HAL_GPIO_ReadPin(GPIOB, BUTTON_10_PIN)) user_input_data.buttons |= (1 << 9);
 800092e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000932:	480d      	ldr	r0, [pc, #52]	@ (8000968 <updateUserInput+0x164>)
 8000934:	f002 fc36 	bl	80031a4 <HAL_GPIO_ReadPin>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d106      	bne.n	800094c <updateUserInput+0x148>
 800093e:	4b08      	ldr	r3, [pc, #32]	@ (8000960 <updateUserInput+0x15c>)
 8000940:	881b      	ldrh	r3, [r3, #0]
 8000942:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000946:	b29a      	uxth	r2, r3
 8000948:	4b05      	ldr	r3, [pc, #20]	@ (8000960 <updateUserInput+0x15c>)
 800094a:	801a      	strh	r2, [r3, #0]

	if(adc_data_ready) {
 800094c:	4b07      	ldr	r3, [pc, #28]	@ (800096c <updateUserInput+0x168>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	b2db      	uxtb	r3, r3
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <updateUserInput+0x156>
		processADC();
 8000956:	f000 f82f 	bl	80009b8 <processADC>
//	if (HAL_GPIO_ReadPin(GPIOB, L_ENC_PIN_B)) user_input_data.buttons |= (1 << 11);
//	if (HAL_GPIO_ReadPin(GPIOB, C_ENC_PIN_A)) user_input_data.buttons |= (1 << 11);
//	if (HAL_GPIO_ReadPin(GPIOB, C_ENC_PIN_B)) user_input_data.buttons |= (1 << 10);
//	if (HAL_GPIO_ReadPin(GPIOB, R_ENC_PIN_A)) user_input_data.buttons |= (1 << 11);
//	if (HAL_GPIO_ReadPin(GPIOB, R_ENC_PIN_B)) user_input_data.buttons |= (1 << 11);
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	200000ac 	.word	0x200000ac
 8000964:	40010800 	.word	0x40010800
 8000968:	40010c00 	.word	0x40010c00
 800096c:	200001a8 	.word	0x200001a8

08000970 <Start_ADC_DMA>:

void Start_ADC_DMA() {
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_values, ADC_CHANNEL_COUNT);
 8000974:	2204      	movs	r2, #4
 8000976:	4903      	ldr	r1, [pc, #12]	@ (8000984 <Start_ADC_DMA+0x14>)
 8000978:	4803      	ldr	r0, [pc, #12]	@ (8000988 <Start_ADC_DMA+0x18>)
 800097a:	f000 fd61 	bl	8001440 <HAL_ADC_Start_DMA>
}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	200001a0 	.word	0x200001a0
 8000988:	200000b8 	.word	0x200000b8

0800098c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1) {
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a05      	ldr	r2, [pc, #20]	@ (80009b0 <HAL_ADC_ConvCpltCallback+0x24>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d102      	bne.n	80009a4 <HAL_ADC_ConvCpltCallback+0x18>
        adc_data_ready = 1;  // Set flag (do NOT process here)
 800099e:	4b05      	ldr	r3, [pc, #20]	@ (80009b4 <HAL_ADC_ConvCpltCallback+0x28>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	701a      	strb	r2, [r3, #0]
    }
}
 80009a4:	bf00      	nop
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bc80      	pop	{r7}
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	40012400 	.word	0x40012400
 80009b4:	200001a8 	.word	0x200001a8

080009b8 <processADC>:

void processADC() {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
	adc_data_ready = 0;
 80009bc:	4b18      	ldr	r3, [pc, #96]	@ (8000a20 <processADC+0x68>)
 80009be:	2200      	movs	r2, #0
 80009c0:	701a      	strb	r2, [r3, #0]

	// Convert ADC values to 8-bit format
	user_input_data.hall_analog_1 = map_hall_sensor(adc_values[2]);
 80009c2:	4b18      	ldr	r3, [pc, #96]	@ (8000a24 <processADC+0x6c>)
 80009c4:	889b      	ldrh	r3, [r3, #4]
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 f830 	bl	8000a2c <map_hall_sensor>
 80009cc:	4603      	mov	r3, r0
 80009ce:	461a      	mov	r2, r3
 80009d0:	4b15      	ldr	r3, [pc, #84]	@ (8000a28 <processADC+0x70>)
 80009d2:	709a      	strb	r2, [r3, #2]
	user_input_data.hall_analog_2 = map_hall_sensor(adc_values[3]);
 80009d4:	4b13      	ldr	r3, [pc, #76]	@ (8000a24 <processADC+0x6c>)
 80009d6:	88db      	ldrh	r3, [r3, #6]
 80009d8:	4618      	mov	r0, r3
 80009da:	f000 f827 	bl	8000a2c <map_hall_sensor>
 80009de:	4603      	mov	r3, r0
 80009e0:	461a      	mov	r2, r3
 80009e2:	4b11      	ldr	r3, [pc, #68]	@ (8000a28 <processADC+0x70>)
 80009e4:	70da      	strb	r2, [r3, #3]

	// Process hall button thresholds
	if (adc_values[0] > 2200) user_input_data.buttons |= (1 << 10);
 80009e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a24 <processADC+0x6c>)
 80009e8:	881b      	ldrh	r3, [r3, #0]
 80009ea:	f640 0298 	movw	r2, #2200	@ 0x898
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d906      	bls.n	8000a00 <processADC+0x48>
 80009f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000a28 <processADC+0x70>)
 80009f4:	881b      	ldrh	r3, [r3, #0]
 80009f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009fa:	b29a      	uxth	r2, r3
 80009fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000a28 <processADC+0x70>)
 80009fe:	801a      	strh	r2, [r3, #0]
	if (adc_values[1] > 2200) user_input_data.buttons |= (1 << 11);
 8000a00:	4b08      	ldr	r3, [pc, #32]	@ (8000a24 <processADC+0x6c>)
 8000a02:	885b      	ldrh	r3, [r3, #2]
 8000a04:	f640 0298 	movw	r2, #2200	@ 0x898
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d906      	bls.n	8000a1a <processADC+0x62>
 8000a0c:	4b06      	ldr	r3, [pc, #24]	@ (8000a28 <processADC+0x70>)
 8000a0e:	881b      	ldrh	r3, [r3, #0]
 8000a10:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000a14:	b29a      	uxth	r2, r3
 8000a16:	4b04      	ldr	r3, [pc, #16]	@ (8000a28 <processADC+0x70>)
 8000a18:	801a      	strh	r2, [r3, #0]
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	200001a8 	.word	0x200001a8
 8000a24:	200001a0 	.word	0x200001a0
 8000a28:	200000ac 	.word	0x200000ac

08000a2c <map_hall_sensor>:
uint8_t map_hall_sensor(uint16_t adc_value) {
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	80fb      	strh	r3, [r7, #6]
    if (adc_value < ADC_REST) adc_value = ADC_REST;
 8000a36:	88fb      	ldrh	r3, [r7, #6]
 8000a38:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000a3c:	d202      	bcs.n	8000a44 <map_hall_sensor+0x18>
 8000a3e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000a42:	80fb      	strh	r3, [r7, #6]
    if (adc_value > ADC_MAX) adc_value = ADC_MAX;
 8000a44:	88fb      	ldrh	r3, [r7, #6]
 8000a46:	f5b3 6f2f 	cmp.w	r3, #2800	@ 0xaf0
 8000a4a:	d902      	bls.n	8000a52 <map_hall_sensor+0x26>
 8000a4c:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 8000a50:	80fb      	strh	r3, [r7, #6]

    return (uint8_t)(((adc_value - ADC_REST) * 255) / (ADC_MAX - ADC_REST));
 8000a52:	88fb      	ldrh	r3, [r7, #6]
 8000a54:	f5a3 62fa 	sub.w	r2, r3, #2000	@ 0x7d0
 8000a58:	4613      	mov	r3, r2
 8000a5a:	021b      	lsls	r3, r3, #8
 8000a5c:	1a9b      	subs	r3, r3, r2
 8000a5e:	4a06      	ldr	r2, [pc, #24]	@ (8000a78 <map_hall_sensor+0x4c>)
 8000a60:	fb82 1203 	smull	r1, r2, r2, r3
 8000a64:	1212      	asrs	r2, r2, #8
 8000a66:	17db      	asrs	r3, r3, #31
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	b2db      	uxtb	r3, r3
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bc80      	pop	{r7}
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	51eb851f 	.word	0x51eb851f

08000a7c <CAN_Transmit>:

/*
 * CAN BUS FUNCTIONS
 */
void CAN_Transmit() {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b094      	sub	sp, #80	@ 0x50
 8000a80:	af00      	add	r7, sp, #0
	uint32_t currentTime = HAL_GetTick();
 8000a82:	f000 fbd7 	bl	8001234 <HAL_GetTick>
 8000a86:	64b8      	str	r0, [r7, #72]	@ 0x48

	if(currentTime - lastSendTime >= 20) {
 8000a88:	4b3a      	ldr	r3, [pc, #232]	@ (8000b74 <CAN_Transmit+0xf8>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000a8e:	1ad3      	subs	r3, r2, r3
 8000a90:	2b13      	cmp	r3, #19
 8000a92:	d96a      	bls.n	8000b6a <CAN_Transmit+0xee>
		CAN_TxHeaderTypeDef TxHeader;
		uint32_t TxMailbox;

		// Create a telemetry_packet instance and initialize its fields
		user_input_data_t dataToSend = user_input_data;
 8000a94:	4a38      	ldr	r2, [pc, #224]	@ (8000b78 <CAN_Transmit+0xfc>)
 8000a96:	f107 030c 	add.w	r3, r7, #12
 8000a9a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a9c:	c303      	stmia	r3!, {r0, r1}
 8000a9e:	801a      	strh	r2, [r3, #0]
//		dataToSend.hall_analog_2 = 200;      // Example: Hall sensor 2 value
//		dataToSend.encoder_1 = 1000;         // Example: Encoder 1 value
//		dataToSend.encoder_2 = -2000;        // Example: Encoder 2 value
//		dataToSend.encoder_3 = 5000;         // Example: Encoder 3 value

		uint8_t* rawData = (uint8_t*)&dataToSend;
 8000aa0:	f107 030c 	add.w	r3, r7, #12
 8000aa4:	647b      	str	r3, [r7, #68]	@ 0x44

		// Initialize CAN Header
		TxHeader.StdId = 0x101;           // CAN ID for the message
 8000aa6:	f240 1301 	movw	r3, #257	@ 0x101
 8000aaa:	61fb      	str	r3, [r7, #28]
		TxHeader.ExtId = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	623b      	str	r3, [r7, #32]
		TxHeader.IDE = CAN_ID_STD;        // Use Standard ID
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	627b      	str	r3, [r7, #36]	@ 0x24
		TxHeader.RTR = CAN_RTR_DATA;      // Data frame
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
		TxHeader.DLC = 8;                 // Maximum data length for each CAN frame
 8000ab8:	2308      	movs	r3, #8
 8000aba:	62fb      	str	r3, [r7, #44]	@ 0x2c

		uint8_t frameData[8];             // Temporary buffer for each CAN frame

		// Calculate the size of the telemetry_packet struct
		int totalSize = sizeof(user_input_data_t);
 8000abc:	230a      	movs	r3, #10
 8000abe:	643b      	str	r3, [r7, #64]	@ 0x40

		// Split the telemetry_packet into CAN frames
		for (int i = 0; i < totalSize; i += 8) {
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000ac4:	e04d      	b.n	8000b62 <CAN_Transmit+0xe6>
			// Calculate the size of the current chunk (for the last frame)
			int chunkSize = (totalSize - i >= 8) ? 8 : (totalSize - i);
 8000ac6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000ac8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000aca:	1ad3      	subs	r3, r2, r3
 8000acc:	2b08      	cmp	r3, #8
 8000ace:	bfa8      	it	ge
 8000ad0:	2308      	movge	r3, #8
 8000ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c

			// Copy the next chunk of data into the frame buffer
			memcpy(frameData, &rawData[i], chunkSize);
 8000ad4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000ad6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000ad8:	18d1      	adds	r1, r2, r3
 8000ada:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f004 f9e1 	bl	8004ea6 <memcpy>

			// Adjust DLC for the last frame
			TxHeader.DLC = chunkSize;
 8000ae4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c

			HAL_StatusTypeDef status = HAL_CAN_AddTxMessage(&hcan, &TxHeader, frameData, &TxMailbox);
 8000ae8:	f107 0318 	add.w	r3, r7, #24
 8000aec:	1d3a      	adds	r2, r7, #4
 8000aee:	f107 011c 	add.w	r1, r7, #28
 8000af2:	4822      	ldr	r0, [pc, #136]	@ (8000b7c <CAN_Transmit+0x100>)
 8000af4:	f001 f9de 	bl	8001eb4 <HAL_CAN_AddTxMessage>
 8000af8:	4603      	mov	r3, r0
 8000afa:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
			if (status != HAL_OK) {
 8000afe:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d024      	beq.n	8000b50 <CAN_Transmit+0xd4>
				// Inspect the error
				if (status == HAL_ERROR) {
 8000b06:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d103      	bne.n	8000b16 <CAN_Transmit+0x9a>
					printf("HAL_CAN_AddTxMessage failed: HAL_ERROR\n");
 8000b0e:	481c      	ldr	r0, [pc, #112]	@ (8000b80 <CAN_Transmit+0x104>)
 8000b10:	f004 f82a 	bl	8004b68 <puts>
 8000b14:	e00e      	b.n	8000b34 <CAN_Transmit+0xb8>
				} else if (status == HAL_BUSY) {
 8000b16:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000b1a:	2b02      	cmp	r3, #2
 8000b1c:	d103      	bne.n	8000b26 <CAN_Transmit+0xaa>
					printf("HAL_CAN_AddTxMessage failed: HAL_BUSY\n");
 8000b1e:	4819      	ldr	r0, [pc, #100]	@ (8000b84 <CAN_Transmit+0x108>)
 8000b20:	f004 f822 	bl	8004b68 <puts>
 8000b24:	e006      	b.n	8000b34 <CAN_Transmit+0xb8>
				} else if (status == HAL_TIMEOUT) {
 8000b26:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000b2a:	2b03      	cmp	r3, #3
 8000b2c:	d102      	bne.n	8000b34 <CAN_Transmit+0xb8>
					printf("HAL_CAN_AddTxMessage failed: HAL_TIMEOUT\n");
 8000b2e:	4816      	ldr	r0, [pc, #88]	@ (8000b88 <CAN_Transmit+0x10c>)
 8000b30:	f004 f81a 	bl	8004b68 <puts>
				}

				// Optionally log the state of CAN error counters
				uint32_t error = HAL_CAN_GetError(&hcan);
 8000b34:	4811      	ldr	r0, [pc, #68]	@ (8000b7c <CAN_Transmit+0x100>)
 8000b36:	f001 fdf5 	bl	8002724 <HAL_CAN_GetError>
 8000b3a:	6378      	str	r0, [r7, #52]	@ 0x34
		        HAL_CAN_Stop(&hcan);  // Stop CAN
 8000b3c:	480f      	ldr	r0, [pc, #60]	@ (8000b7c <CAN_Transmit+0x100>)
 8000b3e:	f001 f970 	bl	8001e22 <HAL_CAN_Stop>
		        HAL_CAN_Start(&hcan); // Restart CAN
 8000b42:	480e      	ldr	r0, [pc, #56]	@ (8000b7c <CAN_Transmit+0x100>)
 8000b44:	f001 f929 	bl	8001d9a <HAL_CAN_Start>

		        // Optional: Clear error flags
		        __HAL_CAN_CLEAR_FLAG(&hcan, CAN_FLAG_ERRI);
 8000b48:	4b0c      	ldr	r3, [pc, #48]	@ (8000b7c <CAN_Transmit+0x100>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2204      	movs	r2, #4
 8000b4e:	605a      	str	r2, [r3, #4]
			}
			lastSendTime = currentTime;  // Update last transmission time
 8000b50:	4a08      	ldr	r2, [pc, #32]	@ (8000b74 <CAN_Transmit+0xf8>)
 8000b52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000b54:	6013      	str	r3, [r2, #0]
			HAL_Delay(1);
 8000b56:	2001      	movs	r0, #1
 8000b58:	f000 fb76 	bl	8001248 <HAL_Delay>
		for (int i = 0; i < totalSize; i += 8) {
 8000b5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000b5e:	3308      	adds	r3, #8
 8000b60:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000b62:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000b64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b66:	429a      	cmp	r2, r3
 8000b68:	dbad      	blt.n	8000ac6 <CAN_Transmit+0x4a>
		}
	}
}
 8000b6a:	bf00      	nop
 8000b6c:	3750      	adds	r7, #80	@ 0x50
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	2000019c 	.word	0x2000019c
 8000b78:	200000ac 	.word	0x200000ac
 8000b7c:	2000012c 	.word	0x2000012c
 8000b80:	080058cc 	.word	0x080058cc
 8000b84:	080058f4 	.word	0x080058f4
 8000b88:	0800591c 	.word	0x0800591c

08000b8c <HAL_CAN_RxFifo1MsgPendingCallback>:

// CAN receive interrupt callback
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000b8c:	b5b0      	push	{r4, r5, r7, lr}
 8000b8e:	b08c      	sub	sp, #48	@ 0x30
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rxHeader;
    uint8_t rxData[8]; // Max CAN frame size is 8 bytes
    static uint32_t last_receive_time_1 = 0;
    // Receive the message
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &rxHeader, rxData) == HAL_OK) {
 8000b94:	f107 0308 	add.w	r3, r7, #8
 8000b98:	f107 0210 	add.w	r2, r7, #16
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	6878      	ldr	r0, [r7, #4]
 8000ba0:	f001 fa57 	bl	8002052 <HAL_CAN_GetRxMessage>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d148      	bne.n	8000c3c <HAL_CAN_RxFifo1MsgPendingCallback+0xb0>
    	 // Check if the message ID matches 0x100
		if (rxHeader.StdId == 0x100) {
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000bb0:	d144      	bne.n	8000c3c <HAL_CAN_RxFifo1MsgPendingCallback+0xb0>
			static uint8_t buffer[sizeof(telemetry_packet)];
			static uint8_t offset = 0;
			last_receive_time_1 = HAL_GetTick();
 8000bb2:	f000 fb3f 	bl	8001234 <HAL_GetTick>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	4a22      	ldr	r2, [pc, #136]	@ (8000c44 <HAL_CAN_RxFifo1MsgPendingCallback+0xb8>)
 8000bba:	6013      	str	r3, [r2, #0]
			// Copy received data into buffer
			uint8_t bytesToCopy = (rxHeader.DLC < sizeof(telemetry_packet) - offset) ? rxHeader.DLC : sizeof(telemetry_packet) - offset;
 8000bbc:	4b22      	ldr	r3, [pc, #136]	@ (8000c48 <HAL_CAN_RxFifo1MsgPendingCallback+0xbc>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	f1c3 0228 	rsb	r2, r3, #40	@ 0x28
 8000bc4:	6a3b      	ldr	r3, [r7, #32]
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	bf28      	it	cs
 8000bca:	4613      	movcs	r3, r2
 8000bcc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			memcpy(&buffer[offset], rxData, bytesToCopy);
 8000bd0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c48 <HAL_CAN_RxFifo1MsgPendingCallback+0xbc>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	4b1d      	ldr	r3, [pc, #116]	@ (8000c4c <HAL_CAN_RxFifo1MsgPendingCallback+0xc0>)
 8000bd8:	4413      	add	r3, r2
 8000bda:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000bde:	f107 0108 	add.w	r1, r7, #8
 8000be2:	4618      	mov	r0, r3
 8000be4:	f004 f95f 	bl	8004ea6 <memcpy>
			offset += bytesToCopy;
 8000be8:	4b17      	ldr	r3, [pc, #92]	@ (8000c48 <HAL_CAN_RxFifo1MsgPendingCallback+0xbc>)
 8000bea:	781a      	ldrb	r2, [r3, #0]
 8000bec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bf0:	4413      	add	r3, r2
 8000bf2:	b2da      	uxtb	r2, r3
 8000bf4:	4b14      	ldr	r3, [pc, #80]	@ (8000c48 <HAL_CAN_RxFifo1MsgPendingCallback+0xbc>)
 8000bf6:	701a      	strb	r2, [r3, #0]

			// Check if the entire packet has been received
			if (offset >= sizeof(telemetry_packet)) {
 8000bf8:	4b13      	ldr	r3, [pc, #76]	@ (8000c48 <HAL_CAN_RxFifo1MsgPendingCallback+0xbc>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b27      	cmp	r3, #39	@ 0x27
 8000bfe:	d90e      	bls.n	8000c1e <HAL_CAN_RxFifo1MsgPendingCallback+0x92>
				// Copy buffer into the telemetry_packet struct
				memcpy(&telemetry_data, buffer, sizeof(telemetry_packet));
 8000c00:	4a13      	ldr	r2, [pc, #76]	@ (8000c50 <HAL_CAN_RxFifo1MsgPendingCallback+0xc4>)
 8000c02:	4b12      	ldr	r3, [pc, #72]	@ (8000c4c <HAL_CAN_RxFifo1MsgPendingCallback+0xc0>)
 8000c04:	4614      	mov	r4, r2
 8000c06:	461d      	mov	r5, r3
 8000c08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c10:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c14:	e884 0003 	stmia.w	r4, {r0, r1}
				offset = 0; // Reset offset for the next packet
 8000c18:	4b0b      	ldr	r3, [pc, #44]	@ (8000c48 <HAL_CAN_RxFifo1MsgPendingCallback+0xbc>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	701a      	strb	r2, [r3, #0]
			}
			if (HAL_GetTick() - last_receive_time_1 > 500) {
 8000c1e:	f000 fb09 	bl	8001234 <HAL_GetTick>
 8000c22:	4602      	mov	r2, r0
 8000c24:	4b07      	ldr	r3, [pc, #28]	@ (8000c44 <HAL_CAN_RxFifo1MsgPendingCallback+0xb8>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	1ad3      	subs	r3, r2, r3
 8000c2a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000c2e:	d905      	bls.n	8000c3c <HAL_CAN_RxFifo1MsgPendingCallback+0xb0>
				printf("CAN data timeout: Resetting buffer!\n");
 8000c30:	4808      	ldr	r0, [pc, #32]	@ (8000c54 <HAL_CAN_RxFifo1MsgPendingCallback+0xc8>)
 8000c32:	f003 ff99 	bl	8004b68 <puts>
				offset = 0;  // Prevent infinite accumulation
 8000c36:	4b04      	ldr	r3, [pc, #16]	@ (8000c48 <HAL_CAN_RxFifo1MsgPendingCallback+0xbc>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	701a      	strb	r2, [r3, #0]
			}
		}
    }
}
 8000c3c:	bf00      	nop
 8000c3e:	3730      	adds	r7, #48	@ 0x30
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bdb0      	pop	{r4, r5, r7, pc}
 8000c44:	200001ac 	.word	0x200001ac
 8000c48:	200001b0 	.word	0x200001b0
 8000c4c:	200001b4 	.word	0x200001b4
 8000c50:	20000084 	.word	0x20000084
 8000c54:	08005948 	.word	0x08005948

08000c58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c5c:	b672      	cpsid	i
}
 8000c5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c60:	bf00      	nop
 8000c62:	e7fd      	b.n	8000c60 <Error_Handler+0x8>

08000c64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c6a:	4b15      	ldr	r3, [pc, #84]	@ (8000cc0 <HAL_MspInit+0x5c>)
 8000c6c:	699b      	ldr	r3, [r3, #24]
 8000c6e:	4a14      	ldr	r2, [pc, #80]	@ (8000cc0 <HAL_MspInit+0x5c>)
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	6193      	str	r3, [r2, #24]
 8000c76:	4b12      	ldr	r3, [pc, #72]	@ (8000cc0 <HAL_MspInit+0x5c>)
 8000c78:	699b      	ldr	r3, [r3, #24]
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	60bb      	str	r3, [r7, #8]
 8000c80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c82:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc0 <HAL_MspInit+0x5c>)
 8000c84:	69db      	ldr	r3, [r3, #28]
 8000c86:	4a0e      	ldr	r2, [pc, #56]	@ (8000cc0 <HAL_MspInit+0x5c>)
 8000c88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c8c:	61d3      	str	r3, [r2, #28]
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc0 <HAL_MspInit+0x5c>)
 8000c90:	69db      	ldr	r3, [r3, #28]
 8000c92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc4 <HAL_MspInit+0x60>)
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	4a04      	ldr	r2, [pc, #16]	@ (8000cc4 <HAL_MspInit+0x60>)
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	3714      	adds	r7, #20
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bc80      	pop	{r7}
 8000cbe:	4770      	bx	lr
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	40010000 	.word	0x40010000

08000cc8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b088      	sub	sp, #32
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd0:	f107 0310 	add.w	r3, r7, #16
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a29      	ldr	r2, [pc, #164]	@ (8000d88 <HAL_ADC_MspInit+0xc0>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d14a      	bne.n	8000d7e <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ce8:	4b28      	ldr	r3, [pc, #160]	@ (8000d8c <HAL_ADC_MspInit+0xc4>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	4a27      	ldr	r2, [pc, #156]	@ (8000d8c <HAL_ADC_MspInit+0xc4>)
 8000cee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cf2:	6193      	str	r3, [r2, #24]
 8000cf4:	4b25      	ldr	r3, [pc, #148]	@ (8000d8c <HAL_ADC_MspInit+0xc4>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d00:	4b22      	ldr	r3, [pc, #136]	@ (8000d8c <HAL_ADC_MspInit+0xc4>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	4a21      	ldr	r2, [pc, #132]	@ (8000d8c <HAL_ADC_MspInit+0xc4>)
 8000d06:	f043 0304 	orr.w	r3, r3, #4
 8000d0a:	6193      	str	r3, [r2, #24]
 8000d0c:	4b1f      	ldr	r3, [pc, #124]	@ (8000d8c <HAL_ADC_MspInit+0xc4>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	f003 0304 	and.w	r3, r3, #4
 8000d14:	60bb      	str	r3, [r7, #8]
 8000d16:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000d18:	230f      	movs	r3, #15
 8000d1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d20:	f107 0310 	add.w	r3, r7, #16
 8000d24:	4619      	mov	r1, r3
 8000d26:	481a      	ldr	r0, [pc, #104]	@ (8000d90 <HAL_ADC_MspInit+0xc8>)
 8000d28:	f002 f8b8 	bl	8002e9c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000d2c:	4b19      	ldr	r3, [pc, #100]	@ (8000d94 <HAL_ADC_MspInit+0xcc>)
 8000d2e:	4a1a      	ldr	r2, [pc, #104]	@ (8000d98 <HAL_ADC_MspInit+0xd0>)
 8000d30:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d32:	4b18      	ldr	r3, [pc, #96]	@ (8000d94 <HAL_ADC_MspInit+0xcc>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d38:	4b16      	ldr	r3, [pc, #88]	@ (8000d94 <HAL_ADC_MspInit+0xcc>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d3e:	4b15      	ldr	r3, [pc, #84]	@ (8000d94 <HAL_ADC_MspInit+0xcc>)
 8000d40:	2280      	movs	r2, #128	@ 0x80
 8000d42:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d44:	4b13      	ldr	r3, [pc, #76]	@ (8000d94 <HAL_ADC_MspInit+0xcc>)
 8000d46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d4a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d4c:	4b11      	ldr	r3, [pc, #68]	@ (8000d94 <HAL_ADC_MspInit+0xcc>)
 8000d4e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d52:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d54:	4b0f      	ldr	r3, [pc, #60]	@ (8000d94 <HAL_ADC_MspInit+0xcc>)
 8000d56:	2220      	movs	r2, #32
 8000d58:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d94 <HAL_ADC_MspInit+0xcc>)
 8000d5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d60:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d62:	480c      	ldr	r0, [pc, #48]	@ (8000d94 <HAL_ADC_MspInit+0xcc>)
 8000d64:	f001 fdf8 	bl	8002958 <HAL_DMA_Init>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 8000d6e:	f7ff ff73 	bl	8000c58 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a07      	ldr	r2, [pc, #28]	@ (8000d94 <HAL_ADC_MspInit+0xcc>)
 8000d76:	621a      	str	r2, [r3, #32]
 8000d78:	4a06      	ldr	r2, [pc, #24]	@ (8000d94 <HAL_ADC_MspInit+0xcc>)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000d7e:	bf00      	nop
 8000d80:	3720      	adds	r7, #32
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40012400 	.word	0x40012400
 8000d8c:	40021000 	.word	0x40021000
 8000d90:	40010800 	.word	0x40010800
 8000d94:	200000e8 	.word	0x200000e8
 8000d98:	40020008 	.word	0x40020008

08000d9c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b088      	sub	sp, #32
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da4:	f107 0310 	add.w	r3, r7, #16
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a2c      	ldr	r2, [pc, #176]	@ (8000e68 <HAL_CAN_MspInit+0xcc>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d151      	bne.n	8000e60 <HAL_CAN_MspInit+0xc4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000dbc:	4b2b      	ldr	r3, [pc, #172]	@ (8000e6c <HAL_CAN_MspInit+0xd0>)
 8000dbe:	69db      	ldr	r3, [r3, #28]
 8000dc0:	4a2a      	ldr	r2, [pc, #168]	@ (8000e6c <HAL_CAN_MspInit+0xd0>)
 8000dc2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000dc6:	61d3      	str	r3, [r2, #28]
 8000dc8:	4b28      	ldr	r3, [pc, #160]	@ (8000e6c <HAL_CAN_MspInit+0xd0>)
 8000dca:	69db      	ldr	r3, [r3, #28]
 8000dcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd4:	4b25      	ldr	r3, [pc, #148]	@ (8000e6c <HAL_CAN_MspInit+0xd0>)
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	4a24      	ldr	r2, [pc, #144]	@ (8000e6c <HAL_CAN_MspInit+0xd0>)
 8000dda:	f043 0304 	orr.w	r3, r3, #4
 8000dde:	6193      	str	r3, [r2, #24]
 8000de0:	4b22      	ldr	r3, [pc, #136]	@ (8000e6c <HAL_CAN_MspInit+0xd0>)
 8000de2:	699b      	ldr	r3, [r3, #24]
 8000de4:	f003 0304 	and.w	r3, r3, #4
 8000de8:	60bb      	str	r3, [r7, #8]
 8000dea:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000dec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000df0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000df6:	2301      	movs	r3, #1
 8000df8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfa:	f107 0310 	add.w	r3, r7, #16
 8000dfe:	4619      	mov	r1, r3
 8000e00:	481b      	ldr	r0, [pc, #108]	@ (8000e70 <HAL_CAN_MspInit+0xd4>)
 8000e02:	f002 f84b 	bl	8002e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e10:	2303      	movs	r3, #3
 8000e12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e14:	f107 0310 	add.w	r3, r7, #16
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4815      	ldr	r0, [pc, #84]	@ (8000e70 <HAL_CAN_MspInit+0xd4>)
 8000e1c:	f002 f83e 	bl	8002e9c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8000e20:	2200      	movs	r2, #0
 8000e22:	2100      	movs	r1, #0
 8000e24:	2013      	movs	r0, #19
 8000e26:	f001 fd60 	bl	80028ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8000e2a:	2013      	movs	r0, #19
 8000e2c:	f001 fd79 	bl	8002922 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000e30:	2200      	movs	r2, #0
 8000e32:	2100      	movs	r1, #0
 8000e34:	2014      	movs	r0, #20
 8000e36:	f001 fd58 	bl	80028ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000e3a:	2014      	movs	r0, #20
 8000e3c:	f001 fd71 	bl	8002922 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000e40:	2200      	movs	r2, #0
 8000e42:	2100      	movs	r1, #0
 8000e44:	2015      	movs	r0, #21
 8000e46:	f001 fd50 	bl	80028ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000e4a:	2015      	movs	r0, #21
 8000e4c:	f001 fd69 	bl	8002922 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000e50:	2200      	movs	r2, #0
 8000e52:	2100      	movs	r1, #0
 8000e54:	2016      	movs	r0, #22
 8000e56:	f001 fd48 	bl	80028ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000e5a:	2016      	movs	r0, #22
 8000e5c:	f001 fd61 	bl	8002922 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000e60:	bf00      	nop
 8000e62:	3720      	adds	r7, #32
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40006400 	.word	0x40006400
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	40010800 	.word	0x40010800

08000e74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b088      	sub	sp, #32
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7c:	f107 0310 	add.w	r3, r7, #16
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a20      	ldr	r2, [pc, #128]	@ (8000f10 <HAL_UART_MspInit+0x9c>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d139      	bne.n	8000f08 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e94:	4b1f      	ldr	r3, [pc, #124]	@ (8000f14 <HAL_UART_MspInit+0xa0>)
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	4a1e      	ldr	r2, [pc, #120]	@ (8000f14 <HAL_UART_MspInit+0xa0>)
 8000e9a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e9e:	6193      	str	r3, [r2, #24]
 8000ea0:	4b1c      	ldr	r3, [pc, #112]	@ (8000f14 <HAL_UART_MspInit+0xa0>)
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eac:	4b19      	ldr	r3, [pc, #100]	@ (8000f14 <HAL_UART_MspInit+0xa0>)
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	4a18      	ldr	r2, [pc, #96]	@ (8000f14 <HAL_UART_MspInit+0xa0>)
 8000eb2:	f043 0304 	orr.w	r3, r3, #4
 8000eb6:	6193      	str	r3, [r2, #24]
 8000eb8:	4b16      	ldr	r3, [pc, #88]	@ (8000f14 <HAL_UART_MspInit+0xa0>)
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	f003 0304 	and.w	r3, r3, #4
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ec4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ec8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed2:	f107 0310 	add.w	r3, r7, #16
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	480f      	ldr	r0, [pc, #60]	@ (8000f18 <HAL_UART_MspInit+0xa4>)
 8000eda:	f001 ffdf 	bl	8002e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ede:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ee2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eec:	f107 0310 	add.w	r3, r7, #16
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4809      	ldr	r0, [pc, #36]	@ (8000f18 <HAL_UART_MspInit+0xa4>)
 8000ef4:	f001 ffd2 	bl	8002e9c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2100      	movs	r1, #0
 8000efc:	2025      	movs	r0, #37	@ 0x25
 8000efe:	f001 fcf4 	bl	80028ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f02:	2025      	movs	r0, #37	@ 0x25
 8000f04:	f001 fd0d 	bl	8002922 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000f08:	bf00      	nop
 8000f0a:	3720      	adds	r7, #32
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40013800 	.word	0x40013800
 8000f14:	40021000 	.word	0x40021000
 8000f18:	40010800 	.word	0x40010800

08000f1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f20:	bf00      	nop
 8000f22:	e7fd      	b.n	8000f20 <NMI_Handler+0x4>

08000f24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f28:	bf00      	nop
 8000f2a:	e7fd      	b.n	8000f28 <HardFault_Handler+0x4>

08000f2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f30:	bf00      	nop
 8000f32:	e7fd      	b.n	8000f30 <MemManage_Handler+0x4>

08000f34 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f38:	bf00      	nop
 8000f3a:	e7fd      	b.n	8000f38 <BusFault_Handler+0x4>

08000f3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f40:	bf00      	nop
 8000f42:	e7fd      	b.n	8000f40 <UsageFault_Handler+0x4>

08000f44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bc80      	pop	{r7}
 8000f4e:	4770      	bx	lr

08000f50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bc80      	pop	{r7}
 8000f5a:	4770      	bx	lr

08000f5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr

08000f68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f6c:	f000 f950 	bl	8001210 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f70:	bf00      	nop
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f78:	4802      	ldr	r0, [pc, #8]	@ (8000f84 <DMA1_Channel1_IRQHandler+0x10>)
 8000f7a:	f001 fe5b 	bl	8002c34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	200000e8 	.word	0x200000e8

08000f88 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000f8c:	4802      	ldr	r0, [pc, #8]	@ (8000f98 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8000f8e:	f001 f9a6 	bl	80022de <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	2000012c 	.word	0x2000012c

08000f9c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000fa0:	4802      	ldr	r0, [pc, #8]	@ (8000fac <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000fa2:	f001 f99c 	bl	80022de <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	2000012c 	.word	0x2000012c

08000fb0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000fb4:	4802      	ldr	r0, [pc, #8]	@ (8000fc0 <CAN1_RX1_IRQHandler+0x10>)
 8000fb6:	f001 f992 	bl	80022de <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	2000012c 	.word	0x2000012c

08000fc4 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000fc8:	4802      	ldr	r0, [pc, #8]	@ (8000fd4 <CAN1_SCE_IRQHandler+0x10>)
 8000fca:	f001 f988 	bl	80022de <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	2000012c 	.word	0x2000012c

08000fd8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000fdc:	4802      	ldr	r0, [pc, #8]	@ (8000fe8 <USART1_IRQHandler+0x10>)
 8000fde:	f002 feb3 	bl	8003d48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000154 	.word	0x20000154

08000fec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
 8000ffc:	e00a      	b.n	8001014 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ffe:	f3af 8000 	nop.w
 8001002:	4601      	mov	r1, r0
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	1c5a      	adds	r2, r3, #1
 8001008:	60ba      	str	r2, [r7, #8]
 800100a:	b2ca      	uxtb	r2, r1
 800100c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	3301      	adds	r3, #1
 8001012:	617b      	str	r3, [r7, #20]
 8001014:	697a      	ldr	r2, [r7, #20]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	429a      	cmp	r2, r3
 800101a:	dbf0      	blt.n	8000ffe <_read+0x12>
  }

  return len;
 800101c:	687b      	ldr	r3, [r7, #4]
}
 800101e:	4618      	mov	r0, r3
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b086      	sub	sp, #24
 800102a:	af00      	add	r7, sp, #0
 800102c:	60f8      	str	r0, [r7, #12]
 800102e:	60b9      	str	r1, [r7, #8]
 8001030:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
 8001036:	e009      	b.n	800104c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	1c5a      	adds	r2, r3, #1
 800103c:	60ba      	str	r2, [r7, #8]
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	4618      	mov	r0, r3
 8001042:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	3301      	adds	r3, #1
 800104a:	617b      	str	r3, [r7, #20]
 800104c:	697a      	ldr	r2, [r7, #20]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	429a      	cmp	r2, r3
 8001052:	dbf1      	blt.n	8001038 <_write+0x12>
  }
  return len;
 8001054:	687b      	ldr	r3, [r7, #4]
}
 8001056:	4618      	mov	r0, r3
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <_close>:

int _close(int file)
{
 800105e:	b480      	push	{r7}
 8001060:	b083      	sub	sp, #12
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001066:	f04f 33ff 	mov.w	r3, #4294967295
}
 800106a:	4618      	mov	r0, r3
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr

08001074 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001084:	605a      	str	r2, [r3, #4]
  return 0;
 8001086:	2300      	movs	r3, #0
}
 8001088:	4618      	mov	r0, r3
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	bc80      	pop	{r7}
 8001090:	4770      	bx	lr

08001092 <_isatty>:

int _isatty(int file)
{
 8001092:	b480      	push	{r7}
 8001094:	b083      	sub	sp, #12
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800109a:	2301      	movs	r3, #1
}
 800109c:	4618      	mov	r0, r3
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bc80      	pop	{r7}
 80010a4:	4770      	bx	lr

080010a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010a6:	b480      	push	{r7}
 80010a8:	b085      	sub	sp, #20
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	60f8      	str	r0, [r7, #12]
 80010ae:	60b9      	str	r1, [r7, #8]
 80010b0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010b2:	2300      	movs	r3, #0
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bc80      	pop	{r7}
 80010bc:	4770      	bx	lr
	...

080010c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010c8:	4a14      	ldr	r2, [pc, #80]	@ (800111c <_sbrk+0x5c>)
 80010ca:	4b15      	ldr	r3, [pc, #84]	@ (8001120 <_sbrk+0x60>)
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010d4:	4b13      	ldr	r3, [pc, #76]	@ (8001124 <_sbrk+0x64>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d102      	bne.n	80010e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010dc:	4b11      	ldr	r3, [pc, #68]	@ (8001124 <_sbrk+0x64>)
 80010de:	4a12      	ldr	r2, [pc, #72]	@ (8001128 <_sbrk+0x68>)
 80010e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010e2:	4b10      	ldr	r3, [pc, #64]	@ (8001124 <_sbrk+0x64>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4413      	add	r3, r2
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d207      	bcs.n	8001100 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010f0:	f003 feac 	bl	8004e4c <__errno>
 80010f4:	4603      	mov	r3, r0
 80010f6:	220c      	movs	r2, #12
 80010f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010fa:	f04f 33ff 	mov.w	r3, #4294967295
 80010fe:	e009      	b.n	8001114 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001100:	4b08      	ldr	r3, [pc, #32]	@ (8001124 <_sbrk+0x64>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001106:	4b07      	ldr	r3, [pc, #28]	@ (8001124 <_sbrk+0x64>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4413      	add	r3, r2
 800110e:	4a05      	ldr	r2, [pc, #20]	@ (8001124 <_sbrk+0x64>)
 8001110:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001112:	68fb      	ldr	r3, [r7, #12]
}
 8001114:	4618      	mov	r0, r3
 8001116:	3718      	adds	r7, #24
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	20005000 	.word	0x20005000
 8001120:	00000400 	.word	0x00000400
 8001124:	200001dc 	.word	0x200001dc
 8001128:	20000330 	.word	0x20000330

0800112c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr

08001138 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001138:	f7ff fff8 	bl	800112c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800113c:	480b      	ldr	r0, [pc, #44]	@ (800116c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800113e:	490c      	ldr	r1, [pc, #48]	@ (8001170 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001140:	4a0c      	ldr	r2, [pc, #48]	@ (8001174 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001142:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001144:	e002      	b.n	800114c <LoopCopyDataInit>

08001146 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001146:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001148:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800114a:	3304      	adds	r3, #4

0800114c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800114c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800114e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001150:	d3f9      	bcc.n	8001146 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001152:	4a09      	ldr	r2, [pc, #36]	@ (8001178 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001154:	4c09      	ldr	r4, [pc, #36]	@ (800117c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001156:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001158:	e001      	b.n	800115e <LoopFillZerobss>

0800115a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800115a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800115c:	3204      	adds	r2, #4

0800115e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800115e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001160:	d3fb      	bcc.n	800115a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001162:	f003 fe79 	bl	8004e58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001166:	f7fe fff9 	bl	800015c <main>
  bx lr
 800116a:	4770      	bx	lr
  ldr r0, =_sdata
 800116c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001170:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001174:	080059dc 	.word	0x080059dc
  ldr r2, =_sbss
 8001178:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800117c:	20000330 	.word	0x20000330

08001180 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001180:	e7fe      	b.n	8001180 <ADC1_2_IRQHandler>
	...

08001184 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001188:	4b08      	ldr	r3, [pc, #32]	@ (80011ac <HAL_Init+0x28>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a07      	ldr	r2, [pc, #28]	@ (80011ac <HAL_Init+0x28>)
 800118e:	f043 0310 	orr.w	r3, r3, #16
 8001192:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001194:	2003      	movs	r0, #3
 8001196:	f001 fb9d 	bl	80028d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800119a:	200f      	movs	r0, #15
 800119c:	f000 f808 	bl	80011b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011a0:	f7ff fd60 	bl	8000c64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40022000 	.word	0x40022000

080011b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011b8:	4b12      	ldr	r3, [pc, #72]	@ (8001204 <HAL_InitTick+0x54>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	4b12      	ldr	r3, [pc, #72]	@ (8001208 <HAL_InitTick+0x58>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	4619      	mov	r1, r3
 80011c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ce:	4618      	mov	r0, r3
 80011d0:	f001 fbb5 	bl	800293e <HAL_SYSTICK_Config>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e00e      	b.n	80011fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b0f      	cmp	r3, #15
 80011e2:	d80a      	bhi.n	80011fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e4:	2200      	movs	r2, #0
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ec:	f001 fb7d 	bl	80028ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011f0:	4a06      	ldr	r2, [pc, #24]	@ (800120c <HAL_InitTick+0x5c>)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011f6:	2300      	movs	r3, #0
 80011f8:	e000      	b.n	80011fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20000000 	.word	0x20000000
 8001208:	20000008 	.word	0x20000008
 800120c:	20000004 	.word	0x20000004

08001210 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001214:	4b05      	ldr	r3, [pc, #20]	@ (800122c <HAL_IncTick+0x1c>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	461a      	mov	r2, r3
 800121a:	4b05      	ldr	r3, [pc, #20]	@ (8001230 <HAL_IncTick+0x20>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4413      	add	r3, r2
 8001220:	4a03      	ldr	r2, [pc, #12]	@ (8001230 <HAL_IncTick+0x20>)
 8001222:	6013      	str	r3, [r2, #0]
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr
 800122c:	20000008 	.word	0x20000008
 8001230:	200001e0 	.word	0x200001e0

08001234 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  return uwTick;
 8001238:	4b02      	ldr	r3, [pc, #8]	@ (8001244 <HAL_GetTick+0x10>)
 800123a:	681b      	ldr	r3, [r3, #0]
}
 800123c:	4618      	mov	r0, r3
 800123e:	46bd      	mov	sp, r7
 8001240:	bc80      	pop	{r7}
 8001242:	4770      	bx	lr
 8001244:	200001e0 	.word	0x200001e0

08001248 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001250:	f7ff fff0 	bl	8001234 <HAL_GetTick>
 8001254:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001260:	d005      	beq.n	800126e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001262:	4b0a      	ldr	r3, [pc, #40]	@ (800128c <HAL_Delay+0x44>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	461a      	mov	r2, r3
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	4413      	add	r3, r2
 800126c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800126e:	bf00      	nop
 8001270:	f7ff ffe0 	bl	8001234 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	68fa      	ldr	r2, [r7, #12]
 800127c:	429a      	cmp	r2, r3
 800127e:	d8f7      	bhi.n	8001270 <HAL_Delay+0x28>
  {
  }
}
 8001280:	bf00      	nop
 8001282:	bf00      	nop
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20000008 	.word	0x20000008

08001290 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001298:	2300      	movs	r3, #0
 800129a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800129c:	2300      	movs	r3, #0
 800129e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80012a0:	2300      	movs	r3, #0
 80012a2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80012a4:	2300      	movs	r3, #0
 80012a6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d101      	bne.n	80012b2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e0be      	b.n	8001430 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d109      	bne.n	80012d4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2200      	movs	r2, #0
 80012c4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2200      	movs	r2, #0
 80012ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff fcfa 	bl	8000cc8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f000 faf5 	bl	80018c4 <ADC_ConversionStop_Disable>
 80012da:	4603      	mov	r3, r0
 80012dc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012e2:	f003 0310 	and.w	r3, r3, #16
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f040 8099 	bne.w	800141e <HAL_ADC_Init+0x18e>
 80012ec:	7dfb      	ldrb	r3, [r7, #23]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f040 8095 	bne.w	800141e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012f8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80012fc:	f023 0302 	bic.w	r3, r3, #2
 8001300:	f043 0202 	orr.w	r2, r3, #2
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001310:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	7b1b      	ldrb	r3, [r3, #12]
 8001316:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001318:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800131a:	68ba      	ldr	r2, [r7, #8]
 800131c:	4313      	orrs	r3, r2
 800131e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001328:	d003      	beq.n	8001332 <HAL_ADC_Init+0xa2>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d102      	bne.n	8001338 <HAL_ADC_Init+0xa8>
 8001332:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001336:	e000      	b.n	800133a <HAL_ADC_Init+0xaa>
 8001338:	2300      	movs	r3, #0
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	4313      	orrs	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	7d1b      	ldrb	r3, [r3, #20]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d119      	bne.n	800137c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	7b1b      	ldrb	r3, [r3, #12]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d109      	bne.n	8001364 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	3b01      	subs	r3, #1
 8001356:	035a      	lsls	r2, r3, #13
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	4313      	orrs	r3, r2
 800135c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001360:	613b      	str	r3, [r7, #16]
 8001362:	e00b      	b.n	800137c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001368:	f043 0220 	orr.w	r2, r3, #32
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001374:	f043 0201 	orr.w	r2, r3, #1
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	430a      	orrs	r2, r1
 800138e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	689a      	ldr	r2, [r3, #8]
 8001396:	4b28      	ldr	r3, [pc, #160]	@ (8001438 <HAL_ADC_Init+0x1a8>)
 8001398:	4013      	ands	r3, r2
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	6812      	ldr	r2, [r2, #0]
 800139e:	68b9      	ldr	r1, [r7, #8]
 80013a0:	430b      	orrs	r3, r1
 80013a2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80013ac:	d003      	beq.n	80013b6 <HAL_ADC_Init+0x126>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d104      	bne.n	80013c0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	691b      	ldr	r3, [r3, #16]
 80013ba:	3b01      	subs	r3, #1
 80013bc:	051b      	lsls	r3, r3, #20
 80013be:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013c6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	68fa      	ldr	r2, [r7, #12]
 80013d0:	430a      	orrs	r2, r1
 80013d2:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	689a      	ldr	r2, [r3, #8]
 80013da:	4b18      	ldr	r3, [pc, #96]	@ (800143c <HAL_ADC_Init+0x1ac>)
 80013dc:	4013      	ands	r3, r2
 80013de:	68ba      	ldr	r2, [r7, #8]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d10b      	bne.n	80013fc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2200      	movs	r2, #0
 80013e8:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013ee:	f023 0303 	bic.w	r3, r3, #3
 80013f2:	f043 0201 	orr.w	r2, r3, #1
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80013fa:	e018      	b.n	800142e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001400:	f023 0312 	bic.w	r3, r3, #18
 8001404:	f043 0210 	orr.w	r2, r3, #16
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001410:	f043 0201 	orr.w	r2, r3, #1
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800141c:	e007      	b.n	800142e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001422:	f043 0210 	orr.w	r2, r3, #16
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800142e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001430:	4618      	mov	r0, r3
 8001432:	3718      	adds	r7, #24
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	ffe1f7fd 	.word	0xffe1f7fd
 800143c:	ff1f0efe 	.word	0xff1f0efe

08001440 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800144c:	2300      	movs	r3, #0
 800144e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a64      	ldr	r2, [pc, #400]	@ (80015e8 <HAL_ADC_Start_DMA+0x1a8>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d004      	beq.n	8001464 <HAL_ADC_Start_DMA+0x24>
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a63      	ldr	r2, [pc, #396]	@ (80015ec <HAL_ADC_Start_DMA+0x1ac>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d106      	bne.n	8001472 <HAL_ADC_Start_DMA+0x32>
 8001464:	4b60      	ldr	r3, [pc, #384]	@ (80015e8 <HAL_ADC_Start_DMA+0x1a8>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800146c:	2b00      	cmp	r3, #0
 800146e:	f040 80b3 	bne.w	80015d8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001478:	2b01      	cmp	r3, #1
 800147a:	d101      	bne.n	8001480 <HAL_ADC_Start_DMA+0x40>
 800147c:	2302      	movs	r3, #2
 800147e:	e0ae      	b.n	80015de <HAL_ADC_Start_DMA+0x19e>
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2201      	movs	r2, #1
 8001484:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001488:	68f8      	ldr	r0, [r7, #12]
 800148a:	f000 f9c1 	bl	8001810 <ADC_Enable>
 800148e:	4603      	mov	r3, r0
 8001490:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001492:	7dfb      	ldrb	r3, [r7, #23]
 8001494:	2b00      	cmp	r3, #0
 8001496:	f040 809a 	bne.w	80015ce <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800149e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80014a2:	f023 0301 	bic.w	r3, r3, #1
 80014a6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a4e      	ldr	r2, [pc, #312]	@ (80015ec <HAL_ADC_Start_DMA+0x1ac>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d105      	bne.n	80014c4 <HAL_ADC_Start_DMA+0x84>
 80014b8:	4b4b      	ldr	r3, [pc, #300]	@ (80015e8 <HAL_ADC_Start_DMA+0x1a8>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d115      	bne.n	80014f0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014c8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d026      	beq.n	800152c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014e2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80014e6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014ee:	e01d      	b.n	800152c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014f4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a39      	ldr	r2, [pc, #228]	@ (80015e8 <HAL_ADC_Start_DMA+0x1a8>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d004      	beq.n	8001510 <HAL_ADC_Start_DMA+0xd0>
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a38      	ldr	r2, [pc, #224]	@ (80015ec <HAL_ADC_Start_DMA+0x1ac>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d10d      	bne.n	800152c <HAL_ADC_Start_DMA+0xec>
 8001510:	4b35      	ldr	r3, [pc, #212]	@ (80015e8 <HAL_ADC_Start_DMA+0x1a8>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001518:	2b00      	cmp	r3, #0
 800151a:	d007      	beq.n	800152c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001520:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001524:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001530:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d006      	beq.n	8001546 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800153c:	f023 0206 	bic.w	r2, r3, #6
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001544:	e002      	b.n	800154c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	2200      	movs	r2, #0
 800154a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2200      	movs	r2, #0
 8001550:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	6a1b      	ldr	r3, [r3, #32]
 8001558:	4a25      	ldr	r2, [pc, #148]	@ (80015f0 <HAL_ADC_Start_DMA+0x1b0>)
 800155a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	6a1b      	ldr	r3, [r3, #32]
 8001560:	4a24      	ldr	r2, [pc, #144]	@ (80015f4 <HAL_ADC_Start_DMA+0x1b4>)
 8001562:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	6a1b      	ldr	r3, [r3, #32]
 8001568:	4a23      	ldr	r2, [pc, #140]	@ (80015f8 <HAL_ADC_Start_DMA+0x1b8>)
 800156a:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f06f 0202 	mvn.w	r2, #2
 8001574:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	689a      	ldr	r2, [r3, #8]
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001584:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	6a18      	ldr	r0, [r3, #32]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	334c      	adds	r3, #76	@ 0x4c
 8001590:	4619      	mov	r1, r3
 8001592:	68ba      	ldr	r2, [r7, #8]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f001 fa39 	bl	8002a0c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80015a4:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80015a8:	d108      	bne.n	80015bc <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	689a      	ldr	r2, [r3, #8]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80015b8:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80015ba:	e00f      	b.n	80015dc <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	689a      	ldr	r2, [r3, #8]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80015ca:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80015cc:	e006      	b.n	80015dc <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 80015d6:	e001      	b.n	80015dc <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80015dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3718      	adds	r7, #24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40012400 	.word	0x40012400
 80015ec:	40012800 	.word	0x40012800
 80015f0:	08001947 	.word	0x08001947
 80015f4:	080019c3 	.word	0x080019c3
 80015f8:	080019df 	.word	0x080019df

080015fc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	bc80      	pop	{r7}
 800160c:	4770      	bx	lr

0800160e <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800160e:	b480      	push	{r7}
 8001610:	b083      	sub	sp, #12
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr

08001620 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800162a:	2300      	movs	r3, #0
 800162c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800162e:	2300      	movs	r3, #0
 8001630:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001638:	2b01      	cmp	r3, #1
 800163a:	d101      	bne.n	8001640 <HAL_ADC_ConfigChannel+0x20>
 800163c:	2302      	movs	r3, #2
 800163e:	e0dc      	b.n	80017fa <HAL_ADC_ConfigChannel+0x1da>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2201      	movs	r2, #1
 8001644:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	2b06      	cmp	r3, #6
 800164e:	d81c      	bhi.n	800168a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685a      	ldr	r2, [r3, #4]
 800165a:	4613      	mov	r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4413      	add	r3, r2
 8001660:	3b05      	subs	r3, #5
 8001662:	221f      	movs	r2, #31
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	43db      	mvns	r3, r3
 800166a:	4019      	ands	r1, r3
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	6818      	ldr	r0, [r3, #0]
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685a      	ldr	r2, [r3, #4]
 8001674:	4613      	mov	r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	4413      	add	r3, r2
 800167a:	3b05      	subs	r3, #5
 800167c:	fa00 f203 	lsl.w	r2, r0, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	430a      	orrs	r2, r1
 8001686:	635a      	str	r2, [r3, #52]	@ 0x34
 8001688:	e03c      	b.n	8001704 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	2b0c      	cmp	r3, #12
 8001690:	d81c      	bhi.n	80016cc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685a      	ldr	r2, [r3, #4]
 800169c:	4613      	mov	r3, r2
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	4413      	add	r3, r2
 80016a2:	3b23      	subs	r3, #35	@ 0x23
 80016a4:	221f      	movs	r2, #31
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43db      	mvns	r3, r3
 80016ac:	4019      	ands	r1, r3
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	6818      	ldr	r0, [r3, #0]
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685a      	ldr	r2, [r3, #4]
 80016b6:	4613      	mov	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	4413      	add	r3, r2
 80016bc:	3b23      	subs	r3, #35	@ 0x23
 80016be:	fa00 f203 	lsl.w	r2, r0, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	430a      	orrs	r2, r1
 80016c8:	631a      	str	r2, [r3, #48]	@ 0x30
 80016ca:	e01b      	b.n	8001704 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685a      	ldr	r2, [r3, #4]
 80016d6:	4613      	mov	r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	4413      	add	r3, r2
 80016dc:	3b41      	subs	r3, #65	@ 0x41
 80016de:	221f      	movs	r2, #31
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	43db      	mvns	r3, r3
 80016e6:	4019      	ands	r1, r3
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	6818      	ldr	r0, [r3, #0]
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685a      	ldr	r2, [r3, #4]
 80016f0:	4613      	mov	r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4413      	add	r3, r2
 80016f6:	3b41      	subs	r3, #65	@ 0x41
 80016f8:	fa00 f203 	lsl.w	r2, r0, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	430a      	orrs	r2, r1
 8001702:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2b09      	cmp	r3, #9
 800170a:	d91c      	bls.n	8001746 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	68d9      	ldr	r1, [r3, #12]
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	4613      	mov	r3, r2
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	4413      	add	r3, r2
 800171c:	3b1e      	subs	r3, #30
 800171e:	2207      	movs	r2, #7
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	43db      	mvns	r3, r3
 8001726:	4019      	ands	r1, r3
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	6898      	ldr	r0, [r3, #8]
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4613      	mov	r3, r2
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	4413      	add	r3, r2
 8001736:	3b1e      	subs	r3, #30
 8001738:	fa00 f203 	lsl.w	r2, r0, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	430a      	orrs	r2, r1
 8001742:	60da      	str	r2, [r3, #12]
 8001744:	e019      	b.n	800177a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	6919      	ldr	r1, [r3, #16]
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	4613      	mov	r3, r2
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	4413      	add	r3, r2
 8001756:	2207      	movs	r2, #7
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	43db      	mvns	r3, r3
 800175e:	4019      	ands	r1, r3
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	6898      	ldr	r0, [r3, #8]
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	4613      	mov	r3, r2
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	4413      	add	r3, r2
 800176e:	fa00 f203 	lsl.w	r2, r0, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	430a      	orrs	r2, r1
 8001778:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2b10      	cmp	r3, #16
 8001780:	d003      	beq.n	800178a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001786:	2b11      	cmp	r3, #17
 8001788:	d132      	bne.n	80017f0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a1d      	ldr	r2, [pc, #116]	@ (8001804 <HAL_ADC_ConfigChannel+0x1e4>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d125      	bne.n	80017e0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d126      	bne.n	80017f0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	689a      	ldr	r2, [r3, #8]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80017b0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2b10      	cmp	r3, #16
 80017b8:	d11a      	bne.n	80017f0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017ba:	4b13      	ldr	r3, [pc, #76]	@ (8001808 <HAL_ADC_ConfigChannel+0x1e8>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a13      	ldr	r2, [pc, #76]	@ (800180c <HAL_ADC_ConfigChannel+0x1ec>)
 80017c0:	fba2 2303 	umull	r2, r3, r2, r3
 80017c4:	0c9a      	lsrs	r2, r3, #18
 80017c6:	4613      	mov	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017d0:	e002      	b.n	80017d8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	3b01      	subs	r3, #1
 80017d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1f9      	bne.n	80017d2 <HAL_ADC_ConfigChannel+0x1b2>
 80017de:	e007      	b.n	80017f0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017e4:	f043 0220 	orr.w	r2, r3, #32
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3714      	adds	r7, #20
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr
 8001804:	40012400 	.word	0x40012400
 8001808:	20000000 	.word	0x20000000
 800180c:	431bde83 	.word	0x431bde83

08001810 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001818:	2300      	movs	r3, #0
 800181a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800181c:	2300      	movs	r3, #0
 800181e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b01      	cmp	r3, #1
 800182c:	d040      	beq.n	80018b0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f042 0201 	orr.w	r2, r2, #1
 800183c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800183e:	4b1f      	ldr	r3, [pc, #124]	@ (80018bc <ADC_Enable+0xac>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a1f      	ldr	r2, [pc, #124]	@ (80018c0 <ADC_Enable+0xb0>)
 8001844:	fba2 2303 	umull	r2, r3, r2, r3
 8001848:	0c9b      	lsrs	r3, r3, #18
 800184a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800184c:	e002      	b.n	8001854 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	3b01      	subs	r3, #1
 8001852:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d1f9      	bne.n	800184e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800185a:	f7ff fceb 	bl	8001234 <HAL_GetTick>
 800185e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001860:	e01f      	b.n	80018a2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001862:	f7ff fce7 	bl	8001234 <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d918      	bls.n	80018a2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	2b01      	cmp	r3, #1
 800187c:	d011      	beq.n	80018a2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001882:	f043 0210 	orr.w	r2, r3, #16
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800188e:	f043 0201 	orr.w	r2, r3, #1
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e007      	b.n	80018b2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d1d8      	bne.n	8001862 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20000000 	.word	0x20000000
 80018c0:	431bde83 	.word	0x431bde83

080018c4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018cc:	2300      	movs	r3, #0
 80018ce:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d12e      	bne.n	800193c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	689a      	ldr	r2, [r3, #8]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f022 0201 	bic.w	r2, r2, #1
 80018ec:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80018ee:	f7ff fca1 	bl	8001234 <HAL_GetTick>
 80018f2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80018f4:	e01b      	b.n	800192e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80018f6:	f7ff fc9d 	bl	8001234 <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	2b02      	cmp	r3, #2
 8001902:	d914      	bls.n	800192e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	2b01      	cmp	r3, #1
 8001910:	d10d      	bne.n	800192e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001916:	f043 0210 	orr.w	r2, r3, #16
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001922:	f043 0201 	orr.w	r2, r3, #1
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e007      	b.n	800193e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f003 0301 	and.w	r3, r3, #1
 8001938:	2b01      	cmp	r3, #1
 800193a:	d0dc      	beq.n	80018f6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b084      	sub	sp, #16
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001952:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001958:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800195c:	2b00      	cmp	r3, #0
 800195e:	d127      	bne.n	80019b0 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001964:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001976:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800197a:	d115      	bne.n	80019a8 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001980:	2b00      	cmp	r3, #0
 8001982:	d111      	bne.n	80019a8 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001988:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001994:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d105      	bne.n	80019a8 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019a0:	f043 0201 	orr.w	r2, r3, #1
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80019a8:	68f8      	ldr	r0, [r7, #12]
 80019aa:	f7fe ffef 	bl	800098c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80019ae:	e004      	b.n	80019ba <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	6a1b      	ldr	r3, [r3, #32]
 80019b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	4798      	blx	r3
}
 80019ba:	bf00      	nop
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b084      	sub	sp, #16
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ce:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80019d0:	68f8      	ldr	r0, [r7, #12]
 80019d2:	f7ff fe13 	bl	80015fc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80019d6:	bf00      	nop
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b084      	sub	sp, #16
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ea:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019f0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019fc:	f043 0204 	orr.w	r2, r3, #4
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001a04:	68f8      	ldr	r0, [r7, #12]
 8001a06:	f7ff fe02 	bl	800160e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a0a:	bf00      	nop
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b084      	sub	sp, #16
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d101      	bne.n	8001a24 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e0ed      	b.n	8001c00 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d102      	bne.n	8001a36 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f7ff f9b3 	bl	8000d9c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f042 0201 	orr.w	r2, r2, #1
 8001a44:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a46:	f7ff fbf5 	bl	8001234 <HAL_GetTick>
 8001a4a:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a4c:	e012      	b.n	8001a74 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a4e:	f7ff fbf1 	bl	8001234 <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	2b0a      	cmp	r3, #10
 8001a5a:	d90b      	bls.n	8001a74 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a60:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2205      	movs	r2, #5
 8001a6c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e0c5      	b.n	8001c00 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0e5      	beq.n	8001a4e <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f022 0202 	bic.w	r2, r2, #2
 8001a90:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a92:	f7ff fbcf 	bl	8001234 <HAL_GetTick>
 8001a96:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a98:	e012      	b.n	8001ac0 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a9a:	f7ff fbcb 	bl	8001234 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b0a      	cmp	r3, #10
 8001aa6:	d90b      	bls.n	8001ac0 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aac:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2205      	movs	r2, #5
 8001ab8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e09f      	b.n	8001c00 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1e5      	bne.n	8001a9a <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	7e1b      	ldrb	r3, [r3, #24]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d108      	bne.n	8001ae8 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	e007      	b.n	8001af8 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001af6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	7e5b      	ldrb	r3, [r3, #25]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d108      	bne.n	8001b12 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	e007      	b.n	8001b22 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001b20:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	7e9b      	ldrb	r3, [r3, #26]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d108      	bne.n	8001b3c <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f042 0220 	orr.w	r2, r2, #32
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	e007      	b.n	8001b4c <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f022 0220 	bic.w	r2, r2, #32
 8001b4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	7edb      	ldrb	r3, [r3, #27]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d108      	bne.n	8001b66 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f022 0210 	bic.w	r2, r2, #16
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	e007      	b.n	8001b76 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f042 0210 	orr.w	r2, r2, #16
 8001b74:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	7f1b      	ldrb	r3, [r3, #28]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d108      	bne.n	8001b90 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f042 0208 	orr.w	r2, r2, #8
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	e007      	b.n	8001ba0 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f022 0208 	bic.w	r2, r2, #8
 8001b9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	7f5b      	ldrb	r3, [r3, #29]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d108      	bne.n	8001bba <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f042 0204 	orr.w	r2, r2, #4
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	e007      	b.n	8001bca <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f022 0204 	bic.w	r2, r2, #4
 8001bc8:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	689a      	ldr	r2, [r3, #8]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	431a      	orrs	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	691b      	ldr	r3, [r3, #16]
 8001bd8:	431a      	orrs	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	695b      	ldr	r3, [r3, #20]
 8001bde:	ea42 0103 	orr.w	r1, r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	1e5a      	subs	r2, r3, #1
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	430a      	orrs	r2, r1
 8001bee:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3710      	adds	r7, #16
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b087      	sub	sp, #28
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c1e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001c20:	7cfb      	ldrb	r3, [r7, #19]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d003      	beq.n	8001c2e <HAL_CAN_ConfigFilter+0x26>
 8001c26:	7cfb      	ldrb	r3, [r7, #19]
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	f040 80aa 	bne.w	8001d82 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001c34:	f043 0201 	orr.w	r2, r3, #1
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	f003 031f 	and.w	r3, r3, #31
 8001c46:	2201      	movs	r2, #1
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	43db      	mvns	r3, r3
 8001c58:	401a      	ands	r2, r3
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	69db      	ldr	r3, [r3, #28]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d123      	bne.n	8001cb0 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	43db      	mvns	r3, r3
 8001c72:	401a      	ands	r2, r3
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c86:	683a      	ldr	r2, [r7, #0]
 8001c88:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001c8a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	3248      	adds	r2, #72	@ 0x48
 8001c90:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ca4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ca6:	6979      	ldr	r1, [r7, #20]
 8001ca8:	3348      	adds	r3, #72	@ 0x48
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	440b      	add	r3, r1
 8001cae:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	69db      	ldr	r3, [r3, #28]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d122      	bne.n	8001cfe <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	431a      	orrs	r2, r3
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001cd8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	3248      	adds	r2, #72	@ 0x48
 8001cde:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001cf2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001cf4:	6979      	ldr	r1, [r7, #20]
 8001cf6:	3348      	adds	r3, #72	@ 0x48
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	440b      	add	r3, r1
 8001cfc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d109      	bne.n	8001d1a <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	401a      	ands	r2, r3
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001d18:	e007      	b.n	8001d2a <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	431a      	orrs	r2, r3
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d109      	bne.n	8001d46 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	401a      	ands	r2, r3
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001d44:	e007      	b.n	8001d56 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	431a      	orrs	r2, r3
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	6a1b      	ldr	r3, [r3, #32]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d107      	bne.n	8001d6e <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	431a      	orrs	r2, r3
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001d74:	f023 0201 	bic.w	r2, r3, #1
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	e006      	b.n	8001d90 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d86:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
  }
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	371c      	adds	r7, #28
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bc80      	pop	{r7}
 8001d98:	4770      	bx	lr

08001d9a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b084      	sub	sp, #16
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d12e      	bne.n	8001e0c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2202      	movs	r2, #2
 8001db2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f022 0201 	bic.w	r2, r2, #1
 8001dc4:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001dc6:	f7ff fa35 	bl	8001234 <HAL_GetTick>
 8001dca:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001dcc:	e012      	b.n	8001df4 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001dce:	f7ff fa31 	bl	8001234 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b0a      	cmp	r3, #10
 8001dda:	d90b      	bls.n	8001df4 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2205      	movs	r2, #5
 8001dec:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e012      	b.n	8001e1a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1e5      	bne.n	8001dce <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	e006      	b.n	8001e1a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e10:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
  }
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b084      	sub	sp, #16
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d133      	bne.n	8001e9e <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f042 0201 	orr.w	r2, r2, #1
 8001e44:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001e46:	f7ff f9f5 	bl	8001234 <HAL_GetTick>
 8001e4a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e4c:	e012      	b.n	8001e74 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e4e:	f7ff f9f1 	bl	8001234 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b0a      	cmp	r3, #10
 8001e5a:	d90b      	bls.n	8001e74 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e60:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2205      	movs	r2, #5
 8001e6c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e01b      	b.n	8001eac <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d0e5      	beq.n	8001e4e <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f022 0202 	bic.w	r2, r2, #2
 8001e90:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2201      	movs	r2, #1
 8001e96:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	e006      	b.n	8001eac <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
  }
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b089      	sub	sp, #36	@ 0x24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
 8001ec0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ec8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ed2:	7ffb      	ldrb	r3, [r7, #31]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d003      	beq.n	8001ee0 <HAL_CAN_AddTxMessage+0x2c>
 8001ed8:	7ffb      	ldrb	r3, [r7, #31]
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	f040 80ad 	bne.w	800203a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d10a      	bne.n	8001f00 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d105      	bne.n	8001f00 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f000 8095 	beq.w	800202a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	0e1b      	lsrs	r3, r3, #24
 8001f04:	f003 0303 	and.w	r3, r3, #3
 8001f08:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	409a      	lsls	r2, r3
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d10d      	bne.n	8001f38 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001f26:	68f9      	ldr	r1, [r7, #12]
 8001f28:	6809      	ldr	r1, [r1, #0]
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	3318      	adds	r3, #24
 8001f30:	011b      	lsls	r3, r3, #4
 8001f32:	440b      	add	r3, r1
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	e00f      	b.n	8001f58 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f42:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f48:	68f9      	ldr	r1, [r7, #12]
 8001f4a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001f4c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	3318      	adds	r3, #24
 8001f52:	011b      	lsls	r3, r3, #4
 8001f54:	440b      	add	r3, r1
 8001f56:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6819      	ldr	r1, [r3, #0]
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	691a      	ldr	r2, [r3, #16]
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	3318      	adds	r3, #24
 8001f64:	011b      	lsls	r3, r3, #4
 8001f66:	440b      	add	r3, r1
 8001f68:	3304      	adds	r3, #4
 8001f6a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	7d1b      	ldrb	r3, [r3, #20]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d111      	bne.n	8001f98 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	3318      	adds	r3, #24
 8001f7c:	011b      	lsls	r3, r3, #4
 8001f7e:	4413      	add	r3, r2
 8001f80:	3304      	adds	r3, #4
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	6811      	ldr	r1, [r2, #0]
 8001f88:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	3318      	adds	r3, #24
 8001f90:	011b      	lsls	r3, r3, #4
 8001f92:	440b      	add	r3, r1
 8001f94:	3304      	adds	r3, #4
 8001f96:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3307      	adds	r3, #7
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	061a      	lsls	r2, r3, #24
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3306      	adds	r3, #6
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	041b      	lsls	r3, r3, #16
 8001fa8:	431a      	orrs	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	3305      	adds	r3, #5
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	021b      	lsls	r3, r3, #8
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	3204      	adds	r2, #4
 8001fb8:	7812      	ldrb	r2, [r2, #0]
 8001fba:	4610      	mov	r0, r2
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	6811      	ldr	r1, [r2, #0]
 8001fc0:	ea43 0200 	orr.w	r2, r3, r0
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	011b      	lsls	r3, r3, #4
 8001fc8:	440b      	add	r3, r1
 8001fca:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001fce:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3303      	adds	r3, #3
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	061a      	lsls	r2, r3, #24
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3302      	adds	r3, #2
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	041b      	lsls	r3, r3, #16
 8001fe0:	431a      	orrs	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	021b      	lsls	r3, r3, #8
 8001fea:	4313      	orrs	r3, r2
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	7812      	ldrb	r2, [r2, #0]
 8001ff0:	4610      	mov	r0, r2
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	6811      	ldr	r1, [r2, #0]
 8001ff6:	ea43 0200 	orr.w	r2, r3, r0
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	011b      	lsls	r3, r3, #4
 8001ffe:	440b      	add	r3, r1
 8002000:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002004:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	3318      	adds	r3, #24
 800200e:	011b      	lsls	r3, r3, #4
 8002010:	4413      	add	r3, r2
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	6811      	ldr	r1, [r2, #0]
 8002018:	f043 0201 	orr.w	r2, r3, #1
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	3318      	adds	r3, #24
 8002020:	011b      	lsls	r3, r3, #4
 8002022:	440b      	add	r3, r1
 8002024:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002026:	2300      	movs	r3, #0
 8002028:	e00e      	b.n	8002048 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800202e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e006      	b.n	8002048 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800203e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
  }
}
 8002048:	4618      	mov	r0, r3
 800204a:	3724      	adds	r7, #36	@ 0x24
 800204c:	46bd      	mov	sp, r7
 800204e:	bc80      	pop	{r7}
 8002050:	4770      	bx	lr

08002052 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002052:	b480      	push	{r7}
 8002054:	b087      	sub	sp, #28
 8002056:	af00      	add	r7, sp, #0
 8002058:	60f8      	str	r0, [r7, #12]
 800205a:	60b9      	str	r1, [r7, #8]
 800205c:	607a      	str	r2, [r7, #4]
 800205e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002066:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002068:	7dfb      	ldrb	r3, [r7, #23]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d003      	beq.n	8002076 <HAL_CAN_GetRxMessage+0x24>
 800206e:	7dfb      	ldrb	r3, [r7, #23]
 8002070:	2b02      	cmp	r3, #2
 8002072:	f040 8103 	bne.w	800227c <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d10e      	bne.n	800209a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	f003 0303 	and.w	r3, r3, #3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d116      	bne.n	80020b8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800208e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e0f7      	b.n	800228a <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	f003 0303 	and.w	r3, r3, #3
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d107      	bne.n	80020b8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ac:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e0e8      	b.n	800228a <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	331b      	adds	r3, #27
 80020c0:	011b      	lsls	r3, r3, #4
 80020c2:	4413      	add	r3, r2
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0204 	and.w	r2, r3, #4
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d10c      	bne.n	80020f0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	331b      	adds	r3, #27
 80020de:	011b      	lsls	r3, r3, #4
 80020e0:	4413      	add	r3, r2
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	0d5b      	lsrs	r3, r3, #21
 80020e6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	e00b      	b.n	8002108 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	331b      	adds	r3, #27
 80020f8:	011b      	lsls	r3, r3, #4
 80020fa:	4413      	add	r3, r2
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	08db      	lsrs	r3, r3, #3
 8002100:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	331b      	adds	r3, #27
 8002110:	011b      	lsls	r3, r3, #4
 8002112:	4413      	add	r3, r2
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0202 	and.w	r2, r3, #2
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	331b      	adds	r3, #27
 8002126:	011b      	lsls	r3, r3, #4
 8002128:	4413      	add	r3, r2
 800212a:	3304      	adds	r3, #4
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0308 	and.w	r3, r3, #8
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2208      	movs	r2, #8
 800213a:	611a      	str	r2, [r3, #16]
 800213c:	e00b      	b.n	8002156 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	331b      	adds	r3, #27
 8002146:	011b      	lsls	r3, r3, #4
 8002148:	4413      	add	r3, r2
 800214a:	3304      	adds	r3, #4
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 020f 	and.w	r2, r3, #15
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	331b      	adds	r3, #27
 800215e:	011b      	lsls	r3, r3, #4
 8002160:	4413      	add	r3, r2
 8002162:	3304      	adds	r3, #4
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	0a1b      	lsrs	r3, r3, #8
 8002168:	b2da      	uxtb	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	331b      	adds	r3, #27
 8002176:	011b      	lsls	r3, r3, #4
 8002178:	4413      	add	r3, r2
 800217a:	3304      	adds	r3, #4
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	0c1b      	lsrs	r3, r3, #16
 8002180:	b29a      	uxth	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	011b      	lsls	r3, r3, #4
 800218e:	4413      	add	r3, r2
 8002190:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	b2da      	uxtb	r2, r3
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	011b      	lsls	r3, r3, #4
 80021a4:	4413      	add	r3, r2
 80021a6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	0a1a      	lsrs	r2, r3, #8
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	3301      	adds	r3, #1
 80021b2:	b2d2      	uxtb	r2, r2
 80021b4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	011b      	lsls	r3, r3, #4
 80021be:	4413      	add	r3, r2
 80021c0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	0c1a      	lsrs	r2, r3, #16
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	3302      	adds	r3, #2
 80021cc:	b2d2      	uxtb	r2, r2
 80021ce:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	011b      	lsls	r3, r3, #4
 80021d8:	4413      	add	r3, r2
 80021da:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	0e1a      	lsrs	r2, r3, #24
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	3303      	adds	r3, #3
 80021e6:	b2d2      	uxtb	r2, r2
 80021e8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	011b      	lsls	r3, r3, #4
 80021f2:	4413      	add	r3, r2
 80021f4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	3304      	adds	r3, #4
 80021fe:	b2d2      	uxtb	r2, r2
 8002200:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	011b      	lsls	r3, r3, #4
 800220a:	4413      	add	r3, r2
 800220c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	0a1a      	lsrs	r2, r3, #8
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	3305      	adds	r3, #5
 8002218:	b2d2      	uxtb	r2, r2
 800221a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	011b      	lsls	r3, r3, #4
 8002224:	4413      	add	r3, r2
 8002226:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	0c1a      	lsrs	r2, r3, #16
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	3306      	adds	r3, #6
 8002232:	b2d2      	uxtb	r2, r2
 8002234:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	011b      	lsls	r3, r3, #4
 800223e:	4413      	add	r3, r2
 8002240:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	0e1a      	lsrs	r2, r3, #24
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	3307      	adds	r3, #7
 800224c:	b2d2      	uxtb	r2, r2
 800224e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d108      	bne.n	8002268 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68da      	ldr	r2, [r3, #12]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f042 0220 	orr.w	r2, r2, #32
 8002264:	60da      	str	r2, [r3, #12]
 8002266:	e007      	b.n	8002278 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	691a      	ldr	r2, [r3, #16]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f042 0220 	orr.w	r2, r2, #32
 8002276:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002278:	2300      	movs	r3, #0
 800227a:	e006      	b.n	800228a <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002280:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
  }
}
 800228a:	4618      	mov	r0, r3
 800228c:	371c      	adds	r7, #28
 800228e:	46bd      	mov	sp, r7
 8002290:	bc80      	pop	{r7}
 8002292:	4770      	bx	lr

08002294 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022a4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80022a6:	7bfb      	ldrb	r3, [r7, #15]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d002      	beq.n	80022b2 <HAL_CAN_ActivateNotification+0x1e>
 80022ac:	7bfb      	ldrb	r3, [r7, #15]
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d109      	bne.n	80022c6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	6959      	ldr	r1, [r3, #20]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	430a      	orrs	r2, r1
 80022c0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80022c2:	2300      	movs	r3, #0
 80022c4:	e006      	b.n	80022d4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ca:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
  }
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3714      	adds	r7, #20
 80022d8:	46bd      	mov	sp, r7
 80022da:	bc80      	pop	{r7}
 80022dc:	4770      	bx	lr

080022de <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b08a      	sub	sp, #40	@ 0x28
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80022e6:	2300      	movs	r3, #0
 80022e8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	695b      	ldr	r3, [r3, #20]
 80022f0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800231a:	6a3b      	ldr	r3, [r7, #32]
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	2b00      	cmp	r3, #0
 8002322:	d07c      	beq.n	800241e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b00      	cmp	r3, #0
 800232c:	d023      	beq.n	8002376 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2201      	movs	r2, #1
 8002334:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d003      	beq.n	8002348 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 f983 	bl	800264c <HAL_CAN_TxMailbox0CompleteCallback>
 8002346:	e016      	b.n	8002376 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	f003 0304 	and.w	r3, r3, #4
 800234e:	2b00      	cmp	r3, #0
 8002350:	d004      	beq.n	800235c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002354:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002358:	627b      	str	r3, [r7, #36]	@ 0x24
 800235a:	e00c      	b.n	8002376 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	f003 0308 	and.w	r3, r3, #8
 8002362:	2b00      	cmp	r3, #0
 8002364:	d004      	beq.n	8002370 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002368:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800236c:	627b      	str	r3, [r7, #36]	@ 0x24
 800236e:	e002      	b.n	8002376 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 f986 	bl	8002682 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800237c:	2b00      	cmp	r3, #0
 800237e:	d024      	beq.n	80023ca <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002388:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002390:	2b00      	cmp	r3, #0
 8002392:	d003      	beq.n	800239c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f000 f962 	bl	800265e <HAL_CAN_TxMailbox1CompleteCallback>
 800239a:	e016      	b.n	80023ca <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d004      	beq.n	80023b0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80023a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80023ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80023ae:	e00c      	b.n	80023ca <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d004      	beq.n	80023c4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80023ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80023c2:	e002      	b.n	80023ca <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f000 f965 	bl	8002694 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d024      	beq.n	800241e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80023dc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d003      	beq.n	80023f0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f000 f941 	bl	8002670 <HAL_CAN_TxMailbox2CompleteCallback>
 80023ee:	e016      	b.n	800241e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d004      	beq.n	8002404 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80023fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002400:	627b      	str	r3, [r7, #36]	@ 0x24
 8002402:	e00c      	b.n	800241e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d004      	beq.n	8002418 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800240e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002410:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002414:	627b      	str	r3, [r7, #36]	@ 0x24
 8002416:	e002      	b.n	800241e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f000 f944 	bl	80026a6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800241e:	6a3b      	ldr	r3, [r7, #32]
 8002420:	f003 0308 	and.w	r3, r3, #8
 8002424:	2b00      	cmp	r3, #0
 8002426:	d00c      	beq.n	8002442 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	f003 0310 	and.w	r3, r3, #16
 800242e:	2b00      	cmp	r3, #0
 8002430:	d007      	beq.n	8002442 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002434:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002438:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2210      	movs	r2, #16
 8002440:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002442:	6a3b      	ldr	r3, [r7, #32]
 8002444:	f003 0304 	and.w	r3, r3, #4
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00b      	beq.n	8002464 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	f003 0308 	and.w	r3, r3, #8
 8002452:	2b00      	cmp	r3, #0
 8002454:	d006      	beq.n	8002464 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2208      	movs	r2, #8
 800245c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 f933 	bl	80026ca <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002464:	6a3b      	ldr	r3, [r7, #32]
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d009      	beq.n	8002482 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	f003 0303 	and.w	r3, r3, #3
 8002478:	2b00      	cmp	r3, #0
 800247a:	d002      	beq.n	8002482 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f000 f91b 	bl	80026b8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002482:	6a3b      	ldr	r3, [r7, #32]
 8002484:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002488:	2b00      	cmp	r3, #0
 800248a:	d00c      	beq.n	80024a6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	f003 0310 	and.w	r3, r3, #16
 8002492:	2b00      	cmp	r3, #0
 8002494:	d007      	beq.n	80024a6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002498:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800249c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2210      	movs	r2, #16
 80024a4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80024a6:	6a3b      	ldr	r3, [r7, #32]
 80024a8:	f003 0320 	and.w	r3, r3, #32
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00b      	beq.n	80024c8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	f003 0308 	and.w	r3, r3, #8
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d006      	beq.n	80024c8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2208      	movs	r2, #8
 80024c0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 f90a 	bl	80026dc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80024c8:	6a3b      	ldr	r3, [r7, #32]
 80024ca:	f003 0310 	and.w	r3, r3, #16
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d009      	beq.n	80024e6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	f003 0303 	and.w	r3, r3, #3
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d002      	beq.n	80024e6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f7fe fb53 	bl	8000b8c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80024e6:	6a3b      	ldr	r3, [r7, #32]
 80024e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d00b      	beq.n	8002508 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	f003 0310 	and.w	r3, r3, #16
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d006      	beq.n	8002508 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2210      	movs	r2, #16
 8002500:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 f8f3 	bl	80026ee <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002508:	6a3b      	ldr	r3, [r7, #32]
 800250a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00b      	beq.n	800252a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	f003 0308 	and.w	r3, r3, #8
 8002518:	2b00      	cmp	r3, #0
 800251a:	d006      	beq.n	800252a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2208      	movs	r2, #8
 8002522:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f000 f8eb 	bl	8002700 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800252a:	6a3b      	ldr	r3, [r7, #32]
 800252c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d07b      	beq.n	800262c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	f003 0304 	and.w	r3, r3, #4
 800253a:	2b00      	cmp	r3, #0
 800253c:	d072      	beq.n	8002624 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800253e:	6a3b      	ldr	r3, [r7, #32]
 8002540:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002544:	2b00      	cmp	r3, #0
 8002546:	d008      	beq.n	800255a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800255a:	6a3b      	ldr	r3, [r7, #32]
 800255c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002560:	2b00      	cmp	r3, #0
 8002562:	d008      	beq.n	8002576 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800256e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002570:	f043 0302 	orr.w	r3, r3, #2
 8002574:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002576:	6a3b      	ldr	r3, [r7, #32]
 8002578:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800257c:	2b00      	cmp	r3, #0
 800257e:	d008      	beq.n	8002592 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800258a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800258c:	f043 0304 	orr.w	r3, r3, #4
 8002590:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002592:	6a3b      	ldr	r3, [r7, #32]
 8002594:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002598:	2b00      	cmp	r3, #0
 800259a:	d043      	beq.n	8002624 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d03e      	beq.n	8002624 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80025ac:	2b60      	cmp	r3, #96	@ 0x60
 80025ae:	d02b      	beq.n	8002608 <HAL_CAN_IRQHandler+0x32a>
 80025b0:	2b60      	cmp	r3, #96	@ 0x60
 80025b2:	d82e      	bhi.n	8002612 <HAL_CAN_IRQHandler+0x334>
 80025b4:	2b50      	cmp	r3, #80	@ 0x50
 80025b6:	d022      	beq.n	80025fe <HAL_CAN_IRQHandler+0x320>
 80025b8:	2b50      	cmp	r3, #80	@ 0x50
 80025ba:	d82a      	bhi.n	8002612 <HAL_CAN_IRQHandler+0x334>
 80025bc:	2b40      	cmp	r3, #64	@ 0x40
 80025be:	d019      	beq.n	80025f4 <HAL_CAN_IRQHandler+0x316>
 80025c0:	2b40      	cmp	r3, #64	@ 0x40
 80025c2:	d826      	bhi.n	8002612 <HAL_CAN_IRQHandler+0x334>
 80025c4:	2b30      	cmp	r3, #48	@ 0x30
 80025c6:	d010      	beq.n	80025ea <HAL_CAN_IRQHandler+0x30c>
 80025c8:	2b30      	cmp	r3, #48	@ 0x30
 80025ca:	d822      	bhi.n	8002612 <HAL_CAN_IRQHandler+0x334>
 80025cc:	2b10      	cmp	r3, #16
 80025ce:	d002      	beq.n	80025d6 <HAL_CAN_IRQHandler+0x2f8>
 80025d0:	2b20      	cmp	r3, #32
 80025d2:	d005      	beq.n	80025e0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80025d4:	e01d      	b.n	8002612 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80025d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d8:	f043 0308 	orr.w	r3, r3, #8
 80025dc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80025de:	e019      	b.n	8002614 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80025e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e2:	f043 0310 	orr.w	r3, r3, #16
 80025e6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80025e8:	e014      	b.n	8002614 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80025ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ec:	f043 0320 	orr.w	r3, r3, #32
 80025f0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80025f2:	e00f      	b.n	8002614 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80025f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80025fa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80025fc:	e00a      	b.n	8002614 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80025fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002600:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002604:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002606:	e005      	b.n	8002614 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800260e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002610:	e000      	b.n	8002614 <HAL_CAN_IRQHandler+0x336>
            break;
 8002612:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	699a      	ldr	r2, [r3, #24]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002622:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2204      	movs	r2, #4
 800262a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800262c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800262e:	2b00      	cmp	r3, #0
 8002630:	d008      	beq.n	8002644 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002638:	431a      	orrs	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 f867 	bl	8002712 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002644:	bf00      	nop
 8002646:	3728      	adds	r7, #40	@ 0x28
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	bc80      	pop	{r7}
 800265c:	4770      	bx	lr

0800265e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800265e:	b480      	push	{r7}
 8002660:	b083      	sub	sp, #12
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002666:	bf00      	nop
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	bc80      	pop	{r7}
 800266e:	4770      	bx	lr

08002670 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	bc80      	pop	{r7}
 8002680:	4770      	bx	lr

08002682 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002682:	b480      	push	{r7}
 8002684:	b083      	sub	sp, #12
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800268a:	bf00      	nop
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	bc80      	pop	{r7}
 8002692:	4770      	bx	lr

08002694 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bc80      	pop	{r7}
 80026a4:	4770      	bx	lr

080026a6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr

080026b8 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bc80      	pop	{r7}
 80026c8:	4770      	bx	lr

080026ca <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80026ca:	b480      	push	{r7}
 80026cc:	b083      	sub	sp, #12
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bc80      	pop	{r7}
 80026da:	4770      	bx	lr

080026dc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bc80      	pop	{r7}
 80026ec:	4770      	bx	lr

080026ee <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80026ee:	b480      	push	{r7}
 80026f0:	b083      	sub	sp, #12
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80026f6:	bf00      	nop
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bc80      	pop	{r7}
 80026fe:	4770      	bx	lr

08002700 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	bc80      	pop	{r7}
 8002710:	4770      	bx	lr

08002712 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002712:	b480      	push	{r7}
 8002714:	b083      	sub	sp, #12
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800271a:	bf00      	nop
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	bc80      	pop	{r7}
 8002722:	4770      	bx	lr

08002724 <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8002730:	4618      	mov	r0, r3
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	bc80      	pop	{r7}
 8002738:	4770      	bx	lr
	...

0800273c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800274c:	4b0c      	ldr	r3, [pc, #48]	@ (8002780 <__NVIC_SetPriorityGrouping+0x44>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002752:	68ba      	ldr	r2, [r7, #8]
 8002754:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002758:	4013      	ands	r3, r2
 800275a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002764:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002768:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800276c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800276e:	4a04      	ldr	r2, [pc, #16]	@ (8002780 <__NVIC_SetPriorityGrouping+0x44>)
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	60d3      	str	r3, [r2, #12]
}
 8002774:	bf00      	nop
 8002776:	3714      	adds	r7, #20
 8002778:	46bd      	mov	sp, r7
 800277a:	bc80      	pop	{r7}
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	e000ed00 	.word	0xe000ed00

08002784 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002788:	4b04      	ldr	r3, [pc, #16]	@ (800279c <__NVIC_GetPriorityGrouping+0x18>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	0a1b      	lsrs	r3, r3, #8
 800278e:	f003 0307 	and.w	r3, r3, #7
}
 8002792:	4618      	mov	r0, r3
 8002794:	46bd      	mov	sp, r7
 8002796:	bc80      	pop	{r7}
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	e000ed00 	.word	0xe000ed00

080027a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	4603      	mov	r3, r0
 80027a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	db0b      	blt.n	80027ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027b2:	79fb      	ldrb	r3, [r7, #7]
 80027b4:	f003 021f 	and.w	r2, r3, #31
 80027b8:	4906      	ldr	r1, [pc, #24]	@ (80027d4 <__NVIC_EnableIRQ+0x34>)
 80027ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027be:	095b      	lsrs	r3, r3, #5
 80027c0:	2001      	movs	r0, #1
 80027c2:	fa00 f202 	lsl.w	r2, r0, r2
 80027c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027ca:	bf00      	nop
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bc80      	pop	{r7}
 80027d2:	4770      	bx	lr
 80027d4:	e000e100 	.word	0xe000e100

080027d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	4603      	mov	r3, r0
 80027e0:	6039      	str	r1, [r7, #0]
 80027e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	db0a      	blt.n	8002802 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	b2da      	uxtb	r2, r3
 80027f0:	490c      	ldr	r1, [pc, #48]	@ (8002824 <__NVIC_SetPriority+0x4c>)
 80027f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f6:	0112      	lsls	r2, r2, #4
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	440b      	add	r3, r1
 80027fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002800:	e00a      	b.n	8002818 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	b2da      	uxtb	r2, r3
 8002806:	4908      	ldr	r1, [pc, #32]	@ (8002828 <__NVIC_SetPriority+0x50>)
 8002808:	79fb      	ldrb	r3, [r7, #7]
 800280a:	f003 030f 	and.w	r3, r3, #15
 800280e:	3b04      	subs	r3, #4
 8002810:	0112      	lsls	r2, r2, #4
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	440b      	add	r3, r1
 8002816:	761a      	strb	r2, [r3, #24]
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	bc80      	pop	{r7}
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	e000e100 	.word	0xe000e100
 8002828:	e000ed00 	.word	0xe000ed00

0800282c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800282c:	b480      	push	{r7}
 800282e:	b089      	sub	sp, #36	@ 0x24
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f003 0307 	and.w	r3, r3, #7
 800283e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	f1c3 0307 	rsb	r3, r3, #7
 8002846:	2b04      	cmp	r3, #4
 8002848:	bf28      	it	cs
 800284a:	2304      	movcs	r3, #4
 800284c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	3304      	adds	r3, #4
 8002852:	2b06      	cmp	r3, #6
 8002854:	d902      	bls.n	800285c <NVIC_EncodePriority+0x30>
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	3b03      	subs	r3, #3
 800285a:	e000      	b.n	800285e <NVIC_EncodePriority+0x32>
 800285c:	2300      	movs	r3, #0
 800285e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002860:	f04f 32ff 	mov.w	r2, #4294967295
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	43da      	mvns	r2, r3
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	401a      	ands	r2, r3
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002874:	f04f 31ff 	mov.w	r1, #4294967295
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	fa01 f303 	lsl.w	r3, r1, r3
 800287e:	43d9      	mvns	r1, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002884:	4313      	orrs	r3, r2
         );
}
 8002886:	4618      	mov	r0, r3
 8002888:	3724      	adds	r7, #36	@ 0x24
 800288a:	46bd      	mov	sp, r7
 800288c:	bc80      	pop	{r7}
 800288e:	4770      	bx	lr

08002890 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	3b01      	subs	r3, #1
 800289c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028a0:	d301      	bcc.n	80028a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028a2:	2301      	movs	r3, #1
 80028a4:	e00f      	b.n	80028c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028a6:	4a0a      	ldr	r2, [pc, #40]	@ (80028d0 <SysTick_Config+0x40>)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	3b01      	subs	r3, #1
 80028ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028ae:	210f      	movs	r1, #15
 80028b0:	f04f 30ff 	mov.w	r0, #4294967295
 80028b4:	f7ff ff90 	bl	80027d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028b8:	4b05      	ldr	r3, [pc, #20]	@ (80028d0 <SysTick_Config+0x40>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028be:	4b04      	ldr	r3, [pc, #16]	@ (80028d0 <SysTick_Config+0x40>)
 80028c0:	2207      	movs	r2, #7
 80028c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	e000e010 	.word	0xe000e010

080028d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f7ff ff2d 	bl	800273c <__NVIC_SetPriorityGrouping>
}
 80028e2:	bf00      	nop
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b086      	sub	sp, #24
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	4603      	mov	r3, r0
 80028f2:	60b9      	str	r1, [r7, #8]
 80028f4:	607a      	str	r2, [r7, #4]
 80028f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028f8:	2300      	movs	r3, #0
 80028fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028fc:	f7ff ff42 	bl	8002784 <__NVIC_GetPriorityGrouping>
 8002900:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	68b9      	ldr	r1, [r7, #8]
 8002906:	6978      	ldr	r0, [r7, #20]
 8002908:	f7ff ff90 	bl	800282c <NVIC_EncodePriority>
 800290c:	4602      	mov	r2, r0
 800290e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002912:	4611      	mov	r1, r2
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff ff5f 	bl	80027d8 <__NVIC_SetPriority>
}
 800291a:	bf00      	nop
 800291c:	3718      	adds	r7, #24
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	b082      	sub	sp, #8
 8002926:	af00      	add	r7, sp, #0
 8002928:	4603      	mov	r3, r0
 800292a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800292c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff ff35 	bl	80027a0 <__NVIC_EnableIRQ>
}
 8002936:	bf00      	nop
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b082      	sub	sp, #8
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7ff ffa2 	bl	8002890 <SysTick_Config>
 800294c:	4603      	mov	r3, r0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
	...

08002958 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002960:	2300      	movs	r3, #0
 8002962:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e043      	b.n	80029f6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	461a      	mov	r2, r3
 8002974:	4b22      	ldr	r3, [pc, #136]	@ (8002a00 <HAL_DMA_Init+0xa8>)
 8002976:	4413      	add	r3, r2
 8002978:	4a22      	ldr	r2, [pc, #136]	@ (8002a04 <HAL_DMA_Init+0xac>)
 800297a:	fba2 2303 	umull	r2, r3, r2, r3
 800297e:	091b      	lsrs	r3, r3, #4
 8002980:	009a      	lsls	r2, r3, #2
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a1f      	ldr	r2, [pc, #124]	@ (8002a08 <HAL_DMA_Init+0xb0>)
 800298a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2202      	movs	r2, #2
 8002990:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80029a2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80029a6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80029b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	69db      	ldr	r3, [r3, #28]
 80029ce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3714      	adds	r7, #20
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr
 8002a00:	bffdfff8 	.word	0xbffdfff8
 8002a04:	cccccccd 	.word	0xcccccccd
 8002a08:	40020000 	.word	0x40020000

08002a0c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
 8002a18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d101      	bne.n	8002a2c <HAL_DMA_Start_IT+0x20>
 8002a28:	2302      	movs	r3, #2
 8002a2a:	e04b      	b.n	8002ac4 <HAL_DMA_Start_IT+0xb8>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d13a      	bne.n	8002ab6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2202      	movs	r2, #2
 8002a44:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f022 0201 	bic.w	r2, r2, #1
 8002a5c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	68b9      	ldr	r1, [r7, #8]
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f000 f9eb 	bl	8002e40 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d008      	beq.n	8002a84 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f042 020e 	orr.w	r2, r2, #14
 8002a80:	601a      	str	r2, [r3, #0]
 8002a82:	e00f      	b.n	8002aa4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f022 0204 	bic.w	r2, r2, #4
 8002a92:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f042 020a 	orr.w	r2, r2, #10
 8002aa2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f042 0201 	orr.w	r2, r2, #1
 8002ab2:	601a      	str	r2, [r3, #0]
 8002ab4:	e005      	b.n	8002ac2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002abe:	2302      	movs	r3, #2
 8002ac0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002ac2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3718      	adds	r7, #24
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d008      	beq.n	8002af6 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2204      	movs	r2, #4
 8002ae8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e020      	b.n	8002b38 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f022 020e 	bic.w	r2, r2, #14
 8002b04:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f022 0201 	bic.w	r2, r2, #1
 8002b14:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b1e:	2101      	movs	r1, #1
 8002b20:	fa01 f202 	lsl.w	r2, r1, r2
 8002b24:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bc80      	pop	{r7}
 8002b40:	4770      	bx	lr
	...

08002b44 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d005      	beq.n	8002b68 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2204      	movs	r2, #4
 8002b60:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	73fb      	strb	r3, [r7, #15]
 8002b66:	e051      	b.n	8002c0c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f022 020e 	bic.w	r2, r2, #14
 8002b76:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f022 0201 	bic.w	r2, r2, #1
 8002b86:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a22      	ldr	r2, [pc, #136]	@ (8002c18 <HAL_DMA_Abort_IT+0xd4>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d029      	beq.n	8002be6 <HAL_DMA_Abort_IT+0xa2>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a21      	ldr	r2, [pc, #132]	@ (8002c1c <HAL_DMA_Abort_IT+0xd8>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d022      	beq.n	8002be2 <HAL_DMA_Abort_IT+0x9e>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a1f      	ldr	r2, [pc, #124]	@ (8002c20 <HAL_DMA_Abort_IT+0xdc>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d01a      	beq.n	8002bdc <HAL_DMA_Abort_IT+0x98>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a1e      	ldr	r2, [pc, #120]	@ (8002c24 <HAL_DMA_Abort_IT+0xe0>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d012      	beq.n	8002bd6 <HAL_DMA_Abort_IT+0x92>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a1c      	ldr	r2, [pc, #112]	@ (8002c28 <HAL_DMA_Abort_IT+0xe4>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d00a      	beq.n	8002bd0 <HAL_DMA_Abort_IT+0x8c>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a1b      	ldr	r2, [pc, #108]	@ (8002c2c <HAL_DMA_Abort_IT+0xe8>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d102      	bne.n	8002bca <HAL_DMA_Abort_IT+0x86>
 8002bc4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002bc8:	e00e      	b.n	8002be8 <HAL_DMA_Abort_IT+0xa4>
 8002bca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002bce:	e00b      	b.n	8002be8 <HAL_DMA_Abort_IT+0xa4>
 8002bd0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002bd4:	e008      	b.n	8002be8 <HAL_DMA_Abort_IT+0xa4>
 8002bd6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bda:	e005      	b.n	8002be8 <HAL_DMA_Abort_IT+0xa4>
 8002bdc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002be0:	e002      	b.n	8002be8 <HAL_DMA_Abort_IT+0xa4>
 8002be2:	2310      	movs	r3, #16
 8002be4:	e000      	b.n	8002be8 <HAL_DMA_Abort_IT+0xa4>
 8002be6:	2301      	movs	r3, #1
 8002be8:	4a11      	ldr	r2, [pc, #68]	@ (8002c30 <HAL_DMA_Abort_IT+0xec>)
 8002bea:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d003      	beq.n	8002c0c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	4798      	blx	r3
    } 
  }
  return status;
 8002c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	40020008 	.word	0x40020008
 8002c1c:	4002001c 	.word	0x4002001c
 8002c20:	40020030 	.word	0x40020030
 8002c24:	40020044 	.word	0x40020044
 8002c28:	40020058 	.word	0x40020058
 8002c2c:	4002006c 	.word	0x4002006c
 8002c30:	40020000 	.word	0x40020000

08002c34 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c50:	2204      	movs	r2, #4
 8002c52:	409a      	lsls	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	4013      	ands	r3, r2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d04f      	beq.n	8002cfc <HAL_DMA_IRQHandler+0xc8>
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	f003 0304 	and.w	r3, r3, #4
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d04a      	beq.n	8002cfc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0320 	and.w	r3, r3, #32
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d107      	bne.n	8002c84 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f022 0204 	bic.w	r2, r2, #4
 8002c82:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a66      	ldr	r2, [pc, #408]	@ (8002e24 <HAL_DMA_IRQHandler+0x1f0>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d029      	beq.n	8002ce2 <HAL_DMA_IRQHandler+0xae>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a65      	ldr	r2, [pc, #404]	@ (8002e28 <HAL_DMA_IRQHandler+0x1f4>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d022      	beq.n	8002cde <HAL_DMA_IRQHandler+0xaa>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a63      	ldr	r2, [pc, #396]	@ (8002e2c <HAL_DMA_IRQHandler+0x1f8>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d01a      	beq.n	8002cd8 <HAL_DMA_IRQHandler+0xa4>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a62      	ldr	r2, [pc, #392]	@ (8002e30 <HAL_DMA_IRQHandler+0x1fc>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d012      	beq.n	8002cd2 <HAL_DMA_IRQHandler+0x9e>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a60      	ldr	r2, [pc, #384]	@ (8002e34 <HAL_DMA_IRQHandler+0x200>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d00a      	beq.n	8002ccc <HAL_DMA_IRQHandler+0x98>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a5f      	ldr	r2, [pc, #380]	@ (8002e38 <HAL_DMA_IRQHandler+0x204>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d102      	bne.n	8002cc6 <HAL_DMA_IRQHandler+0x92>
 8002cc0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002cc4:	e00e      	b.n	8002ce4 <HAL_DMA_IRQHandler+0xb0>
 8002cc6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002cca:	e00b      	b.n	8002ce4 <HAL_DMA_IRQHandler+0xb0>
 8002ccc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002cd0:	e008      	b.n	8002ce4 <HAL_DMA_IRQHandler+0xb0>
 8002cd2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002cd6:	e005      	b.n	8002ce4 <HAL_DMA_IRQHandler+0xb0>
 8002cd8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002cdc:	e002      	b.n	8002ce4 <HAL_DMA_IRQHandler+0xb0>
 8002cde:	2340      	movs	r3, #64	@ 0x40
 8002ce0:	e000      	b.n	8002ce4 <HAL_DMA_IRQHandler+0xb0>
 8002ce2:	2304      	movs	r3, #4
 8002ce4:	4a55      	ldr	r2, [pc, #340]	@ (8002e3c <HAL_DMA_IRQHandler+0x208>)
 8002ce6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f000 8094 	beq.w	8002e1a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002cfa:	e08e      	b.n	8002e1a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d00:	2202      	movs	r2, #2
 8002d02:	409a      	lsls	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	4013      	ands	r3, r2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d056      	beq.n	8002dba <HAL_DMA_IRQHandler+0x186>
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d051      	beq.n	8002dba <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0320 	and.w	r3, r3, #32
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10b      	bne.n	8002d3c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 020a 	bic.w	r2, r2, #10
 8002d32:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a38      	ldr	r2, [pc, #224]	@ (8002e24 <HAL_DMA_IRQHandler+0x1f0>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d029      	beq.n	8002d9a <HAL_DMA_IRQHandler+0x166>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a37      	ldr	r2, [pc, #220]	@ (8002e28 <HAL_DMA_IRQHandler+0x1f4>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d022      	beq.n	8002d96 <HAL_DMA_IRQHandler+0x162>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a35      	ldr	r2, [pc, #212]	@ (8002e2c <HAL_DMA_IRQHandler+0x1f8>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d01a      	beq.n	8002d90 <HAL_DMA_IRQHandler+0x15c>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a34      	ldr	r2, [pc, #208]	@ (8002e30 <HAL_DMA_IRQHandler+0x1fc>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d012      	beq.n	8002d8a <HAL_DMA_IRQHandler+0x156>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a32      	ldr	r2, [pc, #200]	@ (8002e34 <HAL_DMA_IRQHandler+0x200>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d00a      	beq.n	8002d84 <HAL_DMA_IRQHandler+0x150>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a31      	ldr	r2, [pc, #196]	@ (8002e38 <HAL_DMA_IRQHandler+0x204>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d102      	bne.n	8002d7e <HAL_DMA_IRQHandler+0x14a>
 8002d78:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002d7c:	e00e      	b.n	8002d9c <HAL_DMA_IRQHandler+0x168>
 8002d7e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d82:	e00b      	b.n	8002d9c <HAL_DMA_IRQHandler+0x168>
 8002d84:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d88:	e008      	b.n	8002d9c <HAL_DMA_IRQHandler+0x168>
 8002d8a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d8e:	e005      	b.n	8002d9c <HAL_DMA_IRQHandler+0x168>
 8002d90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d94:	e002      	b.n	8002d9c <HAL_DMA_IRQHandler+0x168>
 8002d96:	2320      	movs	r3, #32
 8002d98:	e000      	b.n	8002d9c <HAL_DMA_IRQHandler+0x168>
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	4a27      	ldr	r2, [pc, #156]	@ (8002e3c <HAL_DMA_IRQHandler+0x208>)
 8002d9e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d034      	beq.n	8002e1a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002db8:	e02f      	b.n	8002e1a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dbe:	2208      	movs	r2, #8
 8002dc0:	409a      	lsls	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d028      	beq.n	8002e1c <HAL_DMA_IRQHandler+0x1e8>
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	f003 0308 	and.w	r3, r3, #8
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d023      	beq.n	8002e1c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 020e 	bic.w	r2, r2, #14
 8002de2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dec:	2101      	movs	r1, #1
 8002dee:	fa01 f202 	lsl.w	r2, r1, r2
 8002df2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d004      	beq.n	8002e1c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	4798      	blx	r3
    }
  }
  return;
 8002e1a:	bf00      	nop
 8002e1c:	bf00      	nop
}
 8002e1e:	3710      	adds	r7, #16
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40020008 	.word	0x40020008
 8002e28:	4002001c 	.word	0x4002001c
 8002e2c:	40020030 	.word	0x40020030
 8002e30:	40020044 	.word	0x40020044
 8002e34:	40020058 	.word	0x40020058
 8002e38:	4002006c 	.word	0x4002006c
 8002e3c:	40020000 	.word	0x40020000

08002e40 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
 8002e4c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e56:	2101      	movs	r1, #1
 8002e58:	fa01 f202 	lsl.w	r2, r1, r2
 8002e5c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	683a      	ldr	r2, [r7, #0]
 8002e64:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	2b10      	cmp	r3, #16
 8002e6c:	d108      	bne.n	8002e80 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68ba      	ldr	r2, [r7, #8]
 8002e7c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002e7e:	e007      	b.n	8002e90 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68ba      	ldr	r2, [r7, #8]
 8002e86:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	60da      	str	r2, [r3, #12]
}
 8002e90:	bf00      	nop
 8002e92:	3714      	adds	r7, #20
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bc80      	pop	{r7}
 8002e98:	4770      	bx	lr
	...

08002e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b08b      	sub	sp, #44	@ 0x2c
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002eae:	e169      	b.n	8003184 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	69fa      	ldr	r2, [r7, #28]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	f040 8158 	bne.w	800317e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	4a9a      	ldr	r2, [pc, #616]	@ (800313c <HAL_GPIO_Init+0x2a0>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d05e      	beq.n	8002f96 <HAL_GPIO_Init+0xfa>
 8002ed8:	4a98      	ldr	r2, [pc, #608]	@ (800313c <HAL_GPIO_Init+0x2a0>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d875      	bhi.n	8002fca <HAL_GPIO_Init+0x12e>
 8002ede:	4a98      	ldr	r2, [pc, #608]	@ (8003140 <HAL_GPIO_Init+0x2a4>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d058      	beq.n	8002f96 <HAL_GPIO_Init+0xfa>
 8002ee4:	4a96      	ldr	r2, [pc, #600]	@ (8003140 <HAL_GPIO_Init+0x2a4>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d86f      	bhi.n	8002fca <HAL_GPIO_Init+0x12e>
 8002eea:	4a96      	ldr	r2, [pc, #600]	@ (8003144 <HAL_GPIO_Init+0x2a8>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d052      	beq.n	8002f96 <HAL_GPIO_Init+0xfa>
 8002ef0:	4a94      	ldr	r2, [pc, #592]	@ (8003144 <HAL_GPIO_Init+0x2a8>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d869      	bhi.n	8002fca <HAL_GPIO_Init+0x12e>
 8002ef6:	4a94      	ldr	r2, [pc, #592]	@ (8003148 <HAL_GPIO_Init+0x2ac>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d04c      	beq.n	8002f96 <HAL_GPIO_Init+0xfa>
 8002efc:	4a92      	ldr	r2, [pc, #584]	@ (8003148 <HAL_GPIO_Init+0x2ac>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d863      	bhi.n	8002fca <HAL_GPIO_Init+0x12e>
 8002f02:	4a92      	ldr	r2, [pc, #584]	@ (800314c <HAL_GPIO_Init+0x2b0>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d046      	beq.n	8002f96 <HAL_GPIO_Init+0xfa>
 8002f08:	4a90      	ldr	r2, [pc, #576]	@ (800314c <HAL_GPIO_Init+0x2b0>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d85d      	bhi.n	8002fca <HAL_GPIO_Init+0x12e>
 8002f0e:	2b12      	cmp	r3, #18
 8002f10:	d82a      	bhi.n	8002f68 <HAL_GPIO_Init+0xcc>
 8002f12:	2b12      	cmp	r3, #18
 8002f14:	d859      	bhi.n	8002fca <HAL_GPIO_Init+0x12e>
 8002f16:	a201      	add	r2, pc, #4	@ (adr r2, 8002f1c <HAL_GPIO_Init+0x80>)
 8002f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f1c:	08002f97 	.word	0x08002f97
 8002f20:	08002f71 	.word	0x08002f71
 8002f24:	08002f83 	.word	0x08002f83
 8002f28:	08002fc5 	.word	0x08002fc5
 8002f2c:	08002fcb 	.word	0x08002fcb
 8002f30:	08002fcb 	.word	0x08002fcb
 8002f34:	08002fcb 	.word	0x08002fcb
 8002f38:	08002fcb 	.word	0x08002fcb
 8002f3c:	08002fcb 	.word	0x08002fcb
 8002f40:	08002fcb 	.word	0x08002fcb
 8002f44:	08002fcb 	.word	0x08002fcb
 8002f48:	08002fcb 	.word	0x08002fcb
 8002f4c:	08002fcb 	.word	0x08002fcb
 8002f50:	08002fcb 	.word	0x08002fcb
 8002f54:	08002fcb 	.word	0x08002fcb
 8002f58:	08002fcb 	.word	0x08002fcb
 8002f5c:	08002fcb 	.word	0x08002fcb
 8002f60:	08002f79 	.word	0x08002f79
 8002f64:	08002f8d 	.word	0x08002f8d
 8002f68:	4a79      	ldr	r2, [pc, #484]	@ (8003150 <HAL_GPIO_Init+0x2b4>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d013      	beq.n	8002f96 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f6e:	e02c      	b.n	8002fca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	623b      	str	r3, [r7, #32]
          break;
 8002f76:	e029      	b.n	8002fcc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	3304      	adds	r3, #4
 8002f7e:	623b      	str	r3, [r7, #32]
          break;
 8002f80:	e024      	b.n	8002fcc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	3308      	adds	r3, #8
 8002f88:	623b      	str	r3, [r7, #32]
          break;
 8002f8a:	e01f      	b.n	8002fcc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	330c      	adds	r3, #12
 8002f92:	623b      	str	r3, [r7, #32]
          break;
 8002f94:	e01a      	b.n	8002fcc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d102      	bne.n	8002fa4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f9e:	2304      	movs	r3, #4
 8002fa0:	623b      	str	r3, [r7, #32]
          break;
 8002fa2:	e013      	b.n	8002fcc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d105      	bne.n	8002fb8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fac:	2308      	movs	r3, #8
 8002fae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	69fa      	ldr	r2, [r7, #28]
 8002fb4:	611a      	str	r2, [r3, #16]
          break;
 8002fb6:	e009      	b.n	8002fcc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fb8:	2308      	movs	r3, #8
 8002fba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	69fa      	ldr	r2, [r7, #28]
 8002fc0:	615a      	str	r2, [r3, #20]
          break;
 8002fc2:	e003      	b.n	8002fcc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	623b      	str	r3, [r7, #32]
          break;
 8002fc8:	e000      	b.n	8002fcc <HAL_GPIO_Init+0x130>
          break;
 8002fca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	2bff      	cmp	r3, #255	@ 0xff
 8002fd0:	d801      	bhi.n	8002fd6 <HAL_GPIO_Init+0x13a>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	e001      	b.n	8002fda <HAL_GPIO_Init+0x13e>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	3304      	adds	r3, #4
 8002fda:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	2bff      	cmp	r3, #255	@ 0xff
 8002fe0:	d802      	bhi.n	8002fe8 <HAL_GPIO_Init+0x14c>
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	e002      	b.n	8002fee <HAL_GPIO_Init+0x152>
 8002fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fea:	3b08      	subs	r3, #8
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	210f      	movs	r1, #15
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ffc:	43db      	mvns	r3, r3
 8002ffe:	401a      	ands	r2, r3
 8003000:	6a39      	ldr	r1, [r7, #32]
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	fa01 f303 	lsl.w	r3, r1, r3
 8003008:	431a      	orrs	r2, r3
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003016:	2b00      	cmp	r3, #0
 8003018:	f000 80b1 	beq.w	800317e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800301c:	4b4d      	ldr	r3, [pc, #308]	@ (8003154 <HAL_GPIO_Init+0x2b8>)
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	4a4c      	ldr	r2, [pc, #304]	@ (8003154 <HAL_GPIO_Init+0x2b8>)
 8003022:	f043 0301 	orr.w	r3, r3, #1
 8003026:	6193      	str	r3, [r2, #24]
 8003028:	4b4a      	ldr	r3, [pc, #296]	@ (8003154 <HAL_GPIO_Init+0x2b8>)
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	f003 0301 	and.w	r3, r3, #1
 8003030:	60bb      	str	r3, [r7, #8]
 8003032:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003034:	4a48      	ldr	r2, [pc, #288]	@ (8003158 <HAL_GPIO_Init+0x2bc>)
 8003036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003038:	089b      	lsrs	r3, r3, #2
 800303a:	3302      	adds	r3, #2
 800303c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003040:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003044:	f003 0303 	and.w	r3, r3, #3
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	220f      	movs	r2, #15
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	43db      	mvns	r3, r3
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	4013      	ands	r3, r2
 8003056:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a40      	ldr	r2, [pc, #256]	@ (800315c <HAL_GPIO_Init+0x2c0>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d013      	beq.n	8003088 <HAL_GPIO_Init+0x1ec>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a3f      	ldr	r2, [pc, #252]	@ (8003160 <HAL_GPIO_Init+0x2c4>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d00d      	beq.n	8003084 <HAL_GPIO_Init+0x1e8>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a3e      	ldr	r2, [pc, #248]	@ (8003164 <HAL_GPIO_Init+0x2c8>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d007      	beq.n	8003080 <HAL_GPIO_Init+0x1e4>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a3d      	ldr	r2, [pc, #244]	@ (8003168 <HAL_GPIO_Init+0x2cc>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d101      	bne.n	800307c <HAL_GPIO_Init+0x1e0>
 8003078:	2303      	movs	r3, #3
 800307a:	e006      	b.n	800308a <HAL_GPIO_Init+0x1ee>
 800307c:	2304      	movs	r3, #4
 800307e:	e004      	b.n	800308a <HAL_GPIO_Init+0x1ee>
 8003080:	2302      	movs	r3, #2
 8003082:	e002      	b.n	800308a <HAL_GPIO_Init+0x1ee>
 8003084:	2301      	movs	r3, #1
 8003086:	e000      	b.n	800308a <HAL_GPIO_Init+0x1ee>
 8003088:	2300      	movs	r3, #0
 800308a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800308c:	f002 0203 	and.w	r2, r2, #3
 8003090:	0092      	lsls	r2, r2, #2
 8003092:	4093      	lsls	r3, r2
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	4313      	orrs	r3, r2
 8003098:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800309a:	492f      	ldr	r1, [pc, #188]	@ (8003158 <HAL_GPIO_Init+0x2bc>)
 800309c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800309e:	089b      	lsrs	r3, r3, #2
 80030a0:	3302      	adds	r3, #2
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d006      	beq.n	80030c2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80030b4:	4b2d      	ldr	r3, [pc, #180]	@ (800316c <HAL_GPIO_Init+0x2d0>)
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	492c      	ldr	r1, [pc, #176]	@ (800316c <HAL_GPIO_Init+0x2d0>)
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	4313      	orrs	r3, r2
 80030be:	608b      	str	r3, [r1, #8]
 80030c0:	e006      	b.n	80030d0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80030c2:	4b2a      	ldr	r3, [pc, #168]	@ (800316c <HAL_GPIO_Init+0x2d0>)
 80030c4:	689a      	ldr	r2, [r3, #8]
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	43db      	mvns	r3, r3
 80030ca:	4928      	ldr	r1, [pc, #160]	@ (800316c <HAL_GPIO_Init+0x2d0>)
 80030cc:	4013      	ands	r3, r2
 80030ce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d006      	beq.n	80030ea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80030dc:	4b23      	ldr	r3, [pc, #140]	@ (800316c <HAL_GPIO_Init+0x2d0>)
 80030de:	68da      	ldr	r2, [r3, #12]
 80030e0:	4922      	ldr	r1, [pc, #136]	@ (800316c <HAL_GPIO_Init+0x2d0>)
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	60cb      	str	r3, [r1, #12]
 80030e8:	e006      	b.n	80030f8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80030ea:	4b20      	ldr	r3, [pc, #128]	@ (800316c <HAL_GPIO_Init+0x2d0>)
 80030ec:	68da      	ldr	r2, [r3, #12]
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	43db      	mvns	r3, r3
 80030f2:	491e      	ldr	r1, [pc, #120]	@ (800316c <HAL_GPIO_Init+0x2d0>)
 80030f4:	4013      	ands	r3, r2
 80030f6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d006      	beq.n	8003112 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003104:	4b19      	ldr	r3, [pc, #100]	@ (800316c <HAL_GPIO_Init+0x2d0>)
 8003106:	685a      	ldr	r2, [r3, #4]
 8003108:	4918      	ldr	r1, [pc, #96]	@ (800316c <HAL_GPIO_Init+0x2d0>)
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	4313      	orrs	r3, r2
 800310e:	604b      	str	r3, [r1, #4]
 8003110:	e006      	b.n	8003120 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003112:	4b16      	ldr	r3, [pc, #88]	@ (800316c <HAL_GPIO_Init+0x2d0>)
 8003114:	685a      	ldr	r2, [r3, #4]
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	43db      	mvns	r3, r3
 800311a:	4914      	ldr	r1, [pc, #80]	@ (800316c <HAL_GPIO_Init+0x2d0>)
 800311c:	4013      	ands	r3, r2
 800311e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d021      	beq.n	8003170 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800312c:	4b0f      	ldr	r3, [pc, #60]	@ (800316c <HAL_GPIO_Init+0x2d0>)
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	490e      	ldr	r1, [pc, #56]	@ (800316c <HAL_GPIO_Init+0x2d0>)
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	4313      	orrs	r3, r2
 8003136:	600b      	str	r3, [r1, #0]
 8003138:	e021      	b.n	800317e <HAL_GPIO_Init+0x2e2>
 800313a:	bf00      	nop
 800313c:	10320000 	.word	0x10320000
 8003140:	10310000 	.word	0x10310000
 8003144:	10220000 	.word	0x10220000
 8003148:	10210000 	.word	0x10210000
 800314c:	10120000 	.word	0x10120000
 8003150:	10110000 	.word	0x10110000
 8003154:	40021000 	.word	0x40021000
 8003158:	40010000 	.word	0x40010000
 800315c:	40010800 	.word	0x40010800
 8003160:	40010c00 	.word	0x40010c00
 8003164:	40011000 	.word	0x40011000
 8003168:	40011400 	.word	0x40011400
 800316c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003170:	4b0b      	ldr	r3, [pc, #44]	@ (80031a0 <HAL_GPIO_Init+0x304>)
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	43db      	mvns	r3, r3
 8003178:	4909      	ldr	r1, [pc, #36]	@ (80031a0 <HAL_GPIO_Init+0x304>)
 800317a:	4013      	ands	r3, r2
 800317c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800317e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003180:	3301      	adds	r3, #1
 8003182:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800318a:	fa22 f303 	lsr.w	r3, r2, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	f47f ae8e 	bne.w	8002eb0 <HAL_GPIO_Init+0x14>
  }
}
 8003194:	bf00      	nop
 8003196:	bf00      	nop
 8003198:	372c      	adds	r7, #44	@ 0x2c
 800319a:	46bd      	mov	sp, r7
 800319c:	bc80      	pop	{r7}
 800319e:	4770      	bx	lr
 80031a0:	40010400 	.word	0x40010400

080031a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	460b      	mov	r3, r1
 80031ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689a      	ldr	r2, [r3, #8]
 80031b4:	887b      	ldrh	r3, [r7, #2]
 80031b6:	4013      	ands	r3, r2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d002      	beq.n	80031c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80031bc:	2301      	movs	r3, #1
 80031be:	73fb      	strb	r3, [r7, #15]
 80031c0:	e001      	b.n	80031c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031c2:	2300      	movs	r3, #0
 80031c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80031c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3714      	adds	r7, #20
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bc80      	pop	{r7}
 80031d0:	4770      	bx	lr

080031d2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031d2:	b480      	push	{r7}
 80031d4:	b083      	sub	sp, #12
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
 80031da:	460b      	mov	r3, r1
 80031dc:	807b      	strh	r3, [r7, #2]
 80031de:	4613      	mov	r3, r2
 80031e0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031e2:	787b      	ldrb	r3, [r7, #1]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d003      	beq.n	80031f0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031e8:	887a      	ldrh	r2, [r7, #2]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80031ee:	e003      	b.n	80031f8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80031f0:	887b      	ldrh	r3, [r7, #2]
 80031f2:	041a      	lsls	r2, r3, #16
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	611a      	str	r2, [r3, #16]
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bc80      	pop	{r7}
 8003200:	4770      	bx	lr
	...

08003204 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e272      	b.n	80036fc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b00      	cmp	r3, #0
 8003220:	f000 8087 	beq.w	8003332 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003224:	4b92      	ldr	r3, [pc, #584]	@ (8003470 <HAL_RCC_OscConfig+0x26c>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f003 030c 	and.w	r3, r3, #12
 800322c:	2b04      	cmp	r3, #4
 800322e:	d00c      	beq.n	800324a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003230:	4b8f      	ldr	r3, [pc, #572]	@ (8003470 <HAL_RCC_OscConfig+0x26c>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f003 030c 	and.w	r3, r3, #12
 8003238:	2b08      	cmp	r3, #8
 800323a:	d112      	bne.n	8003262 <HAL_RCC_OscConfig+0x5e>
 800323c:	4b8c      	ldr	r3, [pc, #560]	@ (8003470 <HAL_RCC_OscConfig+0x26c>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003244:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003248:	d10b      	bne.n	8003262 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800324a:	4b89      	ldr	r3, [pc, #548]	@ (8003470 <HAL_RCC_OscConfig+0x26c>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d06c      	beq.n	8003330 <HAL_RCC_OscConfig+0x12c>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d168      	bne.n	8003330 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e24c      	b.n	80036fc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800326a:	d106      	bne.n	800327a <HAL_RCC_OscConfig+0x76>
 800326c:	4b80      	ldr	r3, [pc, #512]	@ (8003470 <HAL_RCC_OscConfig+0x26c>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a7f      	ldr	r2, [pc, #508]	@ (8003470 <HAL_RCC_OscConfig+0x26c>)
 8003272:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003276:	6013      	str	r3, [r2, #0]
 8003278:	e02e      	b.n	80032d8 <HAL_RCC_OscConfig+0xd4>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10c      	bne.n	800329c <HAL_RCC_OscConfig+0x98>
 8003282:	4b7b      	ldr	r3, [pc, #492]	@ (8003470 <HAL_RCC_OscConfig+0x26c>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a7a      	ldr	r2, [pc, #488]	@ (8003470 <HAL_RCC_OscConfig+0x26c>)
 8003288:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800328c:	6013      	str	r3, [r2, #0]
 800328e:	4b78      	ldr	r3, [pc, #480]	@ (8003470 <HAL_RCC_OscConfig+0x26c>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a77      	ldr	r2, [pc, #476]	@ (8003470 <HAL_RCC_OscConfig+0x26c>)
 8003294:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003298:	6013      	str	r3, [r2, #0]
 800329a:	e01d      	b.n	80032d8 <HAL_RCC_OscConfig+0xd4>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032a4:	d10c      	bne.n	80032c0 <HAL_RCC_OscConfig+0xbc>
 80032a6:	4b72      	ldr	r3, [pc, #456]	@ (8003470 <HAL_RCC_OscConfig+0x26c>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a71      	ldr	r2, [pc, #452]	@ (8003470 <HAL_RCC_OscConfig+0x26c>)
 80032ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032b0:	6013      	str	r3, [r2, #0]
 80032b2:	4b6f      	ldr	r3, [pc, #444]	@ (8003470 <HAL_RCC_OscConfig+0x26c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a6e      	ldr	r2, [pc, #440]	@ (8003470 <HAL_RCC_OscConfig+0x26c>)
 80032b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032bc:	6013      	str	r3, [r2, #0]
 80032be:	e00b      	b.n	80032d8 <HAL_RCC_OscConfig+0xd4>
 80032c0:	4b6b      	ldr	r3, [pc, #428]	@ (8003470 <HAL_RCC_OscConfig+0x26c>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a6a      	ldr	r2, [pc, #424]	@ (8003470 <HAL_RCC_OscConfig+0x26c>)
 80032c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032ca:	6013      	str	r3, [r2, #0]
 80032cc:	4b68      	ldr	r3, [pc, #416]	@ (8003470 <HAL_RCC_OscConfig+0x26c>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a67      	ldr	r2, [pc, #412]	@ (8003470 <HAL_RCC_OscConfig+0x26c>)
 80032d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d013      	beq.n	8003308 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e0:	f7fd ffa8 	bl	8001234 <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032e8:	f7fd ffa4 	bl	8001234 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b64      	cmp	r3, #100	@ 0x64
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e200      	b.n	80036fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032fa:	4b5d      	ldr	r3, [pc, #372]	@ (8003470 <HAL_RCC_OscConfig+0x26c>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d0f0      	beq.n	80032e8 <HAL_RCC_OscConfig+0xe4>
 8003306:	e014      	b.n	8003332 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003308:	f7fd ff94 	bl	8001234 <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003310:	f7fd ff90 	bl	8001234 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b64      	cmp	r3, #100	@ 0x64
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e1ec      	b.n	80036fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003322:	4b53      	ldr	r3, [pc, #332]	@ (8003470 <HAL_RCC_OscConfig+0x26c>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1f0      	bne.n	8003310 <HAL_RCC_OscConfig+0x10c>
 800332e:	e000      	b.n	8003332 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003330:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d063      	beq.n	8003406 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800333e:	4b4c      	ldr	r3, [pc, #304]	@ (8003470 <HAL_RCC_OscConfig+0x26c>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f003 030c 	and.w	r3, r3, #12
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00b      	beq.n	8003362 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800334a:	4b49      	ldr	r3, [pc, #292]	@ (8003470 <HAL_RCC_OscConfig+0x26c>)
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f003 030c 	and.w	r3, r3, #12
 8003352:	2b08      	cmp	r3, #8
 8003354:	d11c      	bne.n	8003390 <HAL_RCC_OscConfig+0x18c>
 8003356:	4b46      	ldr	r3, [pc, #280]	@ (8003470 <HAL_RCC_OscConfig+0x26c>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d116      	bne.n	8003390 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003362:	4b43      	ldr	r3, [pc, #268]	@ (8003470 <HAL_RCC_OscConfig+0x26c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d005      	beq.n	800337a <HAL_RCC_OscConfig+0x176>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d001      	beq.n	800337a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e1c0      	b.n	80036fc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800337a:	4b3d      	ldr	r3, [pc, #244]	@ (8003470 <HAL_RCC_OscConfig+0x26c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	00db      	lsls	r3, r3, #3
 8003388:	4939      	ldr	r1, [pc, #228]	@ (8003470 <HAL_RCC_OscConfig+0x26c>)
 800338a:	4313      	orrs	r3, r2
 800338c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800338e:	e03a      	b.n	8003406 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d020      	beq.n	80033da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003398:	4b36      	ldr	r3, [pc, #216]	@ (8003474 <HAL_RCC_OscConfig+0x270>)
 800339a:	2201      	movs	r2, #1
 800339c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800339e:	f7fd ff49 	bl	8001234 <HAL_GetTick>
 80033a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033a4:	e008      	b.n	80033b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033a6:	f7fd ff45 	bl	8001234 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d901      	bls.n	80033b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e1a1      	b.n	80036fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033b8:	4b2d      	ldr	r3, [pc, #180]	@ (8003470 <HAL_RCC_OscConfig+0x26c>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d0f0      	beq.n	80033a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033c4:	4b2a      	ldr	r3, [pc, #168]	@ (8003470 <HAL_RCC_OscConfig+0x26c>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	695b      	ldr	r3, [r3, #20]
 80033d0:	00db      	lsls	r3, r3, #3
 80033d2:	4927      	ldr	r1, [pc, #156]	@ (8003470 <HAL_RCC_OscConfig+0x26c>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	600b      	str	r3, [r1, #0]
 80033d8:	e015      	b.n	8003406 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033da:	4b26      	ldr	r3, [pc, #152]	@ (8003474 <HAL_RCC_OscConfig+0x270>)
 80033dc:	2200      	movs	r2, #0
 80033de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e0:	f7fd ff28 	bl	8001234 <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033e6:	e008      	b.n	80033fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033e8:	f7fd ff24 	bl	8001234 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e180      	b.n	80036fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033fa:	4b1d      	ldr	r3, [pc, #116]	@ (8003470 <HAL_RCC_OscConfig+0x26c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1f0      	bne.n	80033e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0308 	and.w	r3, r3, #8
 800340e:	2b00      	cmp	r3, #0
 8003410:	d03a      	beq.n	8003488 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d019      	beq.n	800344e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800341a:	4b17      	ldr	r3, [pc, #92]	@ (8003478 <HAL_RCC_OscConfig+0x274>)
 800341c:	2201      	movs	r2, #1
 800341e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003420:	f7fd ff08 	bl	8001234 <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003426:	e008      	b.n	800343a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003428:	f7fd ff04 	bl	8001234 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b02      	cmp	r3, #2
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e160      	b.n	80036fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800343a:	4b0d      	ldr	r3, [pc, #52]	@ (8003470 <HAL_RCC_OscConfig+0x26c>)
 800343c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d0f0      	beq.n	8003428 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003446:	2001      	movs	r0, #1
 8003448:	f000 face 	bl	80039e8 <RCC_Delay>
 800344c:	e01c      	b.n	8003488 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800344e:	4b0a      	ldr	r3, [pc, #40]	@ (8003478 <HAL_RCC_OscConfig+0x274>)
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003454:	f7fd feee 	bl	8001234 <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800345a:	e00f      	b.n	800347c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800345c:	f7fd feea 	bl	8001234 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d908      	bls.n	800347c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e146      	b.n	80036fc <HAL_RCC_OscConfig+0x4f8>
 800346e:	bf00      	nop
 8003470:	40021000 	.word	0x40021000
 8003474:	42420000 	.word	0x42420000
 8003478:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800347c:	4b92      	ldr	r3, [pc, #584]	@ (80036c8 <HAL_RCC_OscConfig+0x4c4>)
 800347e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d1e9      	bne.n	800345c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0304 	and.w	r3, r3, #4
 8003490:	2b00      	cmp	r3, #0
 8003492:	f000 80a6 	beq.w	80035e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003496:	2300      	movs	r3, #0
 8003498:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800349a:	4b8b      	ldr	r3, [pc, #556]	@ (80036c8 <HAL_RCC_OscConfig+0x4c4>)
 800349c:	69db      	ldr	r3, [r3, #28]
 800349e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10d      	bne.n	80034c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034a6:	4b88      	ldr	r3, [pc, #544]	@ (80036c8 <HAL_RCC_OscConfig+0x4c4>)
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	4a87      	ldr	r2, [pc, #540]	@ (80036c8 <HAL_RCC_OscConfig+0x4c4>)
 80034ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034b0:	61d3      	str	r3, [r2, #28]
 80034b2:	4b85      	ldr	r3, [pc, #532]	@ (80036c8 <HAL_RCC_OscConfig+0x4c4>)
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034ba:	60bb      	str	r3, [r7, #8]
 80034bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034be:	2301      	movs	r3, #1
 80034c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c2:	4b82      	ldr	r3, [pc, #520]	@ (80036cc <HAL_RCC_OscConfig+0x4c8>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d118      	bne.n	8003500 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034ce:	4b7f      	ldr	r3, [pc, #508]	@ (80036cc <HAL_RCC_OscConfig+0x4c8>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a7e      	ldr	r2, [pc, #504]	@ (80036cc <HAL_RCC_OscConfig+0x4c8>)
 80034d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034da:	f7fd feab 	bl	8001234 <HAL_GetTick>
 80034de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e0:	e008      	b.n	80034f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034e2:	f7fd fea7 	bl	8001234 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b64      	cmp	r3, #100	@ 0x64
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e103      	b.n	80036fc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034f4:	4b75      	ldr	r3, [pc, #468]	@ (80036cc <HAL_RCC_OscConfig+0x4c8>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d0f0      	beq.n	80034e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d106      	bne.n	8003516 <HAL_RCC_OscConfig+0x312>
 8003508:	4b6f      	ldr	r3, [pc, #444]	@ (80036c8 <HAL_RCC_OscConfig+0x4c4>)
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	4a6e      	ldr	r2, [pc, #440]	@ (80036c8 <HAL_RCC_OscConfig+0x4c4>)
 800350e:	f043 0301 	orr.w	r3, r3, #1
 8003512:	6213      	str	r3, [r2, #32]
 8003514:	e02d      	b.n	8003572 <HAL_RCC_OscConfig+0x36e>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10c      	bne.n	8003538 <HAL_RCC_OscConfig+0x334>
 800351e:	4b6a      	ldr	r3, [pc, #424]	@ (80036c8 <HAL_RCC_OscConfig+0x4c4>)
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	4a69      	ldr	r2, [pc, #420]	@ (80036c8 <HAL_RCC_OscConfig+0x4c4>)
 8003524:	f023 0301 	bic.w	r3, r3, #1
 8003528:	6213      	str	r3, [r2, #32]
 800352a:	4b67      	ldr	r3, [pc, #412]	@ (80036c8 <HAL_RCC_OscConfig+0x4c4>)
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	4a66      	ldr	r2, [pc, #408]	@ (80036c8 <HAL_RCC_OscConfig+0x4c4>)
 8003530:	f023 0304 	bic.w	r3, r3, #4
 8003534:	6213      	str	r3, [r2, #32]
 8003536:	e01c      	b.n	8003572 <HAL_RCC_OscConfig+0x36e>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	2b05      	cmp	r3, #5
 800353e:	d10c      	bne.n	800355a <HAL_RCC_OscConfig+0x356>
 8003540:	4b61      	ldr	r3, [pc, #388]	@ (80036c8 <HAL_RCC_OscConfig+0x4c4>)
 8003542:	6a1b      	ldr	r3, [r3, #32]
 8003544:	4a60      	ldr	r2, [pc, #384]	@ (80036c8 <HAL_RCC_OscConfig+0x4c4>)
 8003546:	f043 0304 	orr.w	r3, r3, #4
 800354a:	6213      	str	r3, [r2, #32]
 800354c:	4b5e      	ldr	r3, [pc, #376]	@ (80036c8 <HAL_RCC_OscConfig+0x4c4>)
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	4a5d      	ldr	r2, [pc, #372]	@ (80036c8 <HAL_RCC_OscConfig+0x4c4>)
 8003552:	f043 0301 	orr.w	r3, r3, #1
 8003556:	6213      	str	r3, [r2, #32]
 8003558:	e00b      	b.n	8003572 <HAL_RCC_OscConfig+0x36e>
 800355a:	4b5b      	ldr	r3, [pc, #364]	@ (80036c8 <HAL_RCC_OscConfig+0x4c4>)
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	4a5a      	ldr	r2, [pc, #360]	@ (80036c8 <HAL_RCC_OscConfig+0x4c4>)
 8003560:	f023 0301 	bic.w	r3, r3, #1
 8003564:	6213      	str	r3, [r2, #32]
 8003566:	4b58      	ldr	r3, [pc, #352]	@ (80036c8 <HAL_RCC_OscConfig+0x4c4>)
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	4a57      	ldr	r2, [pc, #348]	@ (80036c8 <HAL_RCC_OscConfig+0x4c4>)
 800356c:	f023 0304 	bic.w	r3, r3, #4
 8003570:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d015      	beq.n	80035a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800357a:	f7fd fe5b 	bl	8001234 <HAL_GetTick>
 800357e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003580:	e00a      	b.n	8003598 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003582:	f7fd fe57 	bl	8001234 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003590:	4293      	cmp	r3, r2
 8003592:	d901      	bls.n	8003598 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e0b1      	b.n	80036fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003598:	4b4b      	ldr	r3, [pc, #300]	@ (80036c8 <HAL_RCC_OscConfig+0x4c4>)
 800359a:	6a1b      	ldr	r3, [r3, #32]
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d0ee      	beq.n	8003582 <HAL_RCC_OscConfig+0x37e>
 80035a4:	e014      	b.n	80035d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035a6:	f7fd fe45 	bl	8001234 <HAL_GetTick>
 80035aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035ac:	e00a      	b.n	80035c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ae:	f7fd fe41 	bl	8001234 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035bc:	4293      	cmp	r3, r2
 80035be:	d901      	bls.n	80035c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e09b      	b.n	80036fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035c4:	4b40      	ldr	r3, [pc, #256]	@ (80036c8 <HAL_RCC_OscConfig+0x4c4>)
 80035c6:	6a1b      	ldr	r3, [r3, #32]
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1ee      	bne.n	80035ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035d0:	7dfb      	ldrb	r3, [r7, #23]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d105      	bne.n	80035e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035d6:	4b3c      	ldr	r3, [pc, #240]	@ (80036c8 <HAL_RCC_OscConfig+0x4c4>)
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	4a3b      	ldr	r2, [pc, #236]	@ (80036c8 <HAL_RCC_OscConfig+0x4c4>)
 80035dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f000 8087 	beq.w	80036fa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035ec:	4b36      	ldr	r3, [pc, #216]	@ (80036c8 <HAL_RCC_OscConfig+0x4c4>)
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f003 030c 	and.w	r3, r3, #12
 80035f4:	2b08      	cmp	r3, #8
 80035f6:	d061      	beq.n	80036bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	69db      	ldr	r3, [r3, #28]
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d146      	bne.n	800368e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003600:	4b33      	ldr	r3, [pc, #204]	@ (80036d0 <HAL_RCC_OscConfig+0x4cc>)
 8003602:	2200      	movs	r2, #0
 8003604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003606:	f7fd fe15 	bl	8001234 <HAL_GetTick>
 800360a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800360c:	e008      	b.n	8003620 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800360e:	f7fd fe11 	bl	8001234 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b02      	cmp	r3, #2
 800361a:	d901      	bls.n	8003620 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e06d      	b.n	80036fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003620:	4b29      	ldr	r3, [pc, #164]	@ (80036c8 <HAL_RCC_OscConfig+0x4c4>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d1f0      	bne.n	800360e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a1b      	ldr	r3, [r3, #32]
 8003630:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003634:	d108      	bne.n	8003648 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003636:	4b24      	ldr	r3, [pc, #144]	@ (80036c8 <HAL_RCC_OscConfig+0x4c4>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	4921      	ldr	r1, [pc, #132]	@ (80036c8 <HAL_RCC_OscConfig+0x4c4>)
 8003644:	4313      	orrs	r3, r2
 8003646:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003648:	4b1f      	ldr	r3, [pc, #124]	@ (80036c8 <HAL_RCC_OscConfig+0x4c4>)
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a19      	ldr	r1, [r3, #32]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003658:	430b      	orrs	r3, r1
 800365a:	491b      	ldr	r1, [pc, #108]	@ (80036c8 <HAL_RCC_OscConfig+0x4c4>)
 800365c:	4313      	orrs	r3, r2
 800365e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003660:	4b1b      	ldr	r3, [pc, #108]	@ (80036d0 <HAL_RCC_OscConfig+0x4cc>)
 8003662:	2201      	movs	r2, #1
 8003664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003666:	f7fd fde5 	bl	8001234 <HAL_GetTick>
 800366a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800366c:	e008      	b.n	8003680 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800366e:	f7fd fde1 	bl	8001234 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d901      	bls.n	8003680 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e03d      	b.n	80036fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003680:	4b11      	ldr	r3, [pc, #68]	@ (80036c8 <HAL_RCC_OscConfig+0x4c4>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d0f0      	beq.n	800366e <HAL_RCC_OscConfig+0x46a>
 800368c:	e035      	b.n	80036fa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800368e:	4b10      	ldr	r3, [pc, #64]	@ (80036d0 <HAL_RCC_OscConfig+0x4cc>)
 8003690:	2200      	movs	r2, #0
 8003692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003694:	f7fd fdce 	bl	8001234 <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800369a:	e008      	b.n	80036ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800369c:	f7fd fdca 	bl	8001234 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e026      	b.n	80036fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036ae:	4b06      	ldr	r3, [pc, #24]	@ (80036c8 <HAL_RCC_OscConfig+0x4c4>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1f0      	bne.n	800369c <HAL_RCC_OscConfig+0x498>
 80036ba:	e01e      	b.n	80036fa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	69db      	ldr	r3, [r3, #28]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d107      	bne.n	80036d4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e019      	b.n	80036fc <HAL_RCC_OscConfig+0x4f8>
 80036c8:	40021000 	.word	0x40021000
 80036cc:	40007000 	.word	0x40007000
 80036d0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003704 <HAL_RCC_OscConfig+0x500>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a1b      	ldr	r3, [r3, #32]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d106      	bne.n	80036f6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d001      	beq.n	80036fa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e000      	b.n	80036fc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3718      	adds	r7, #24
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	40021000 	.word	0x40021000

08003708 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d101      	bne.n	800371c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e0d0      	b.n	80038be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800371c:	4b6a      	ldr	r3, [pc, #424]	@ (80038c8 <HAL_RCC_ClockConfig+0x1c0>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0307 	and.w	r3, r3, #7
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	429a      	cmp	r2, r3
 8003728:	d910      	bls.n	800374c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800372a:	4b67      	ldr	r3, [pc, #412]	@ (80038c8 <HAL_RCC_ClockConfig+0x1c0>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f023 0207 	bic.w	r2, r3, #7
 8003732:	4965      	ldr	r1, [pc, #404]	@ (80038c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	4313      	orrs	r3, r2
 8003738:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800373a:	4b63      	ldr	r3, [pc, #396]	@ (80038c8 <HAL_RCC_ClockConfig+0x1c0>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0307 	and.w	r3, r3, #7
 8003742:	683a      	ldr	r2, [r7, #0]
 8003744:	429a      	cmp	r2, r3
 8003746:	d001      	beq.n	800374c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e0b8      	b.n	80038be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d020      	beq.n	800379a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0304 	and.w	r3, r3, #4
 8003760:	2b00      	cmp	r3, #0
 8003762:	d005      	beq.n	8003770 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003764:	4b59      	ldr	r3, [pc, #356]	@ (80038cc <HAL_RCC_ClockConfig+0x1c4>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	4a58      	ldr	r2, [pc, #352]	@ (80038cc <HAL_RCC_ClockConfig+0x1c4>)
 800376a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800376e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0308 	and.w	r3, r3, #8
 8003778:	2b00      	cmp	r3, #0
 800377a:	d005      	beq.n	8003788 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800377c:	4b53      	ldr	r3, [pc, #332]	@ (80038cc <HAL_RCC_ClockConfig+0x1c4>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	4a52      	ldr	r2, [pc, #328]	@ (80038cc <HAL_RCC_ClockConfig+0x1c4>)
 8003782:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003786:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003788:	4b50      	ldr	r3, [pc, #320]	@ (80038cc <HAL_RCC_ClockConfig+0x1c4>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	494d      	ldr	r1, [pc, #308]	@ (80038cc <HAL_RCC_ClockConfig+0x1c4>)
 8003796:	4313      	orrs	r3, r2
 8003798:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d040      	beq.n	8003828 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d107      	bne.n	80037be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ae:	4b47      	ldr	r3, [pc, #284]	@ (80038cc <HAL_RCC_ClockConfig+0x1c4>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d115      	bne.n	80037e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e07f      	b.n	80038be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d107      	bne.n	80037d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037c6:	4b41      	ldr	r3, [pc, #260]	@ (80038cc <HAL_RCC_ClockConfig+0x1c4>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d109      	bne.n	80037e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e073      	b.n	80038be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037d6:	4b3d      	ldr	r3, [pc, #244]	@ (80038cc <HAL_RCC_ClockConfig+0x1c4>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e06b      	b.n	80038be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037e6:	4b39      	ldr	r3, [pc, #228]	@ (80038cc <HAL_RCC_ClockConfig+0x1c4>)
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f023 0203 	bic.w	r2, r3, #3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	4936      	ldr	r1, [pc, #216]	@ (80038cc <HAL_RCC_ClockConfig+0x1c4>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037f8:	f7fd fd1c 	bl	8001234 <HAL_GetTick>
 80037fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037fe:	e00a      	b.n	8003816 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003800:	f7fd fd18 	bl	8001234 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800380e:	4293      	cmp	r3, r2
 8003810:	d901      	bls.n	8003816 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e053      	b.n	80038be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003816:	4b2d      	ldr	r3, [pc, #180]	@ (80038cc <HAL_RCC_ClockConfig+0x1c4>)
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f003 020c 	and.w	r2, r3, #12
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	429a      	cmp	r2, r3
 8003826:	d1eb      	bne.n	8003800 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003828:	4b27      	ldr	r3, [pc, #156]	@ (80038c8 <HAL_RCC_ClockConfig+0x1c0>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0307 	and.w	r3, r3, #7
 8003830:	683a      	ldr	r2, [r7, #0]
 8003832:	429a      	cmp	r2, r3
 8003834:	d210      	bcs.n	8003858 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003836:	4b24      	ldr	r3, [pc, #144]	@ (80038c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f023 0207 	bic.w	r2, r3, #7
 800383e:	4922      	ldr	r1, [pc, #136]	@ (80038c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	4313      	orrs	r3, r2
 8003844:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003846:	4b20      	ldr	r3, [pc, #128]	@ (80038c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0307 	and.w	r3, r3, #7
 800384e:	683a      	ldr	r2, [r7, #0]
 8003850:	429a      	cmp	r2, r3
 8003852:	d001      	beq.n	8003858 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e032      	b.n	80038be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0304 	and.w	r3, r3, #4
 8003860:	2b00      	cmp	r3, #0
 8003862:	d008      	beq.n	8003876 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003864:	4b19      	ldr	r3, [pc, #100]	@ (80038cc <HAL_RCC_ClockConfig+0x1c4>)
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	4916      	ldr	r1, [pc, #88]	@ (80038cc <HAL_RCC_ClockConfig+0x1c4>)
 8003872:	4313      	orrs	r3, r2
 8003874:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0308 	and.w	r3, r3, #8
 800387e:	2b00      	cmp	r3, #0
 8003880:	d009      	beq.n	8003896 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003882:	4b12      	ldr	r3, [pc, #72]	@ (80038cc <HAL_RCC_ClockConfig+0x1c4>)
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	00db      	lsls	r3, r3, #3
 8003890:	490e      	ldr	r1, [pc, #56]	@ (80038cc <HAL_RCC_ClockConfig+0x1c4>)
 8003892:	4313      	orrs	r3, r2
 8003894:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003896:	f000 f821 	bl	80038dc <HAL_RCC_GetSysClockFreq>
 800389a:	4602      	mov	r2, r0
 800389c:	4b0b      	ldr	r3, [pc, #44]	@ (80038cc <HAL_RCC_ClockConfig+0x1c4>)
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	091b      	lsrs	r3, r3, #4
 80038a2:	f003 030f 	and.w	r3, r3, #15
 80038a6:	490a      	ldr	r1, [pc, #40]	@ (80038d0 <HAL_RCC_ClockConfig+0x1c8>)
 80038a8:	5ccb      	ldrb	r3, [r1, r3]
 80038aa:	fa22 f303 	lsr.w	r3, r2, r3
 80038ae:	4a09      	ldr	r2, [pc, #36]	@ (80038d4 <HAL_RCC_ClockConfig+0x1cc>)
 80038b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038b2:	4b09      	ldr	r3, [pc, #36]	@ (80038d8 <HAL_RCC_ClockConfig+0x1d0>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7fd fc7a 	bl	80011b0 <HAL_InitTick>

  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	40022000 	.word	0x40022000
 80038cc:	40021000 	.word	0x40021000
 80038d0:	0800596c 	.word	0x0800596c
 80038d4:	20000000 	.word	0x20000000
 80038d8:	20000004 	.word	0x20000004

080038dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	b087      	sub	sp, #28
 80038e0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038e2:	2300      	movs	r3, #0
 80038e4:	60fb      	str	r3, [r7, #12]
 80038e6:	2300      	movs	r3, #0
 80038e8:	60bb      	str	r3, [r7, #8]
 80038ea:	2300      	movs	r3, #0
 80038ec:	617b      	str	r3, [r7, #20]
 80038ee:	2300      	movs	r3, #0
 80038f0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80038f2:	2300      	movs	r3, #0
 80038f4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80038f6:	4b1e      	ldr	r3, [pc, #120]	@ (8003970 <HAL_RCC_GetSysClockFreq+0x94>)
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f003 030c 	and.w	r3, r3, #12
 8003902:	2b04      	cmp	r3, #4
 8003904:	d002      	beq.n	800390c <HAL_RCC_GetSysClockFreq+0x30>
 8003906:	2b08      	cmp	r3, #8
 8003908:	d003      	beq.n	8003912 <HAL_RCC_GetSysClockFreq+0x36>
 800390a:	e027      	b.n	800395c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800390c:	4b19      	ldr	r3, [pc, #100]	@ (8003974 <HAL_RCC_GetSysClockFreq+0x98>)
 800390e:	613b      	str	r3, [r7, #16]
      break;
 8003910:	e027      	b.n	8003962 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	0c9b      	lsrs	r3, r3, #18
 8003916:	f003 030f 	and.w	r3, r3, #15
 800391a:	4a17      	ldr	r2, [pc, #92]	@ (8003978 <HAL_RCC_GetSysClockFreq+0x9c>)
 800391c:	5cd3      	ldrb	r3, [r2, r3]
 800391e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d010      	beq.n	800394c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800392a:	4b11      	ldr	r3, [pc, #68]	@ (8003970 <HAL_RCC_GetSysClockFreq+0x94>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	0c5b      	lsrs	r3, r3, #17
 8003930:	f003 0301 	and.w	r3, r3, #1
 8003934:	4a11      	ldr	r2, [pc, #68]	@ (800397c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003936:	5cd3      	ldrb	r3, [r2, r3]
 8003938:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a0d      	ldr	r2, [pc, #52]	@ (8003974 <HAL_RCC_GetSysClockFreq+0x98>)
 800393e:	fb03 f202 	mul.w	r2, r3, r2
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	fbb2 f3f3 	udiv	r3, r2, r3
 8003948:	617b      	str	r3, [r7, #20]
 800394a:	e004      	b.n	8003956 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a0c      	ldr	r2, [pc, #48]	@ (8003980 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003950:	fb02 f303 	mul.w	r3, r2, r3
 8003954:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	613b      	str	r3, [r7, #16]
      break;
 800395a:	e002      	b.n	8003962 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800395c:	4b05      	ldr	r3, [pc, #20]	@ (8003974 <HAL_RCC_GetSysClockFreq+0x98>)
 800395e:	613b      	str	r3, [r7, #16]
      break;
 8003960:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003962:	693b      	ldr	r3, [r7, #16]
}
 8003964:	4618      	mov	r0, r3
 8003966:	371c      	adds	r7, #28
 8003968:	46bd      	mov	sp, r7
 800396a:	bc80      	pop	{r7}
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	40021000 	.word	0x40021000
 8003974:	007a1200 	.word	0x007a1200
 8003978:	08005984 	.word	0x08005984
 800397c:	08005994 	.word	0x08005994
 8003980:	003d0900 	.word	0x003d0900

08003984 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003988:	4b02      	ldr	r3, [pc, #8]	@ (8003994 <HAL_RCC_GetHCLKFreq+0x10>)
 800398a:	681b      	ldr	r3, [r3, #0]
}
 800398c:	4618      	mov	r0, r3
 800398e:	46bd      	mov	sp, r7
 8003990:	bc80      	pop	{r7}
 8003992:	4770      	bx	lr
 8003994:	20000000 	.word	0x20000000

08003998 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800399c:	f7ff fff2 	bl	8003984 <HAL_RCC_GetHCLKFreq>
 80039a0:	4602      	mov	r2, r0
 80039a2:	4b05      	ldr	r3, [pc, #20]	@ (80039b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	0a1b      	lsrs	r3, r3, #8
 80039a8:	f003 0307 	and.w	r3, r3, #7
 80039ac:	4903      	ldr	r1, [pc, #12]	@ (80039bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80039ae:	5ccb      	ldrb	r3, [r1, r3]
 80039b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	40021000 	.word	0x40021000
 80039bc:	0800597c 	.word	0x0800597c

080039c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039c4:	f7ff ffde 	bl	8003984 <HAL_RCC_GetHCLKFreq>
 80039c8:	4602      	mov	r2, r0
 80039ca:	4b05      	ldr	r3, [pc, #20]	@ (80039e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	0adb      	lsrs	r3, r3, #11
 80039d0:	f003 0307 	and.w	r3, r3, #7
 80039d4:	4903      	ldr	r1, [pc, #12]	@ (80039e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039d6:	5ccb      	ldrb	r3, [r1, r3]
 80039d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039dc:	4618      	mov	r0, r3
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	40021000 	.word	0x40021000
 80039e4:	0800597c 	.word	0x0800597c

080039e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80039f0:	4b0a      	ldr	r3, [pc, #40]	@ (8003a1c <RCC_Delay+0x34>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a0a      	ldr	r2, [pc, #40]	@ (8003a20 <RCC_Delay+0x38>)
 80039f6:	fba2 2303 	umull	r2, r3, r2, r3
 80039fa:	0a5b      	lsrs	r3, r3, #9
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	fb02 f303 	mul.w	r3, r2, r3
 8003a02:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a04:	bf00      	nop
  }
  while (Delay --);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	1e5a      	subs	r2, r3, #1
 8003a0a:	60fa      	str	r2, [r7, #12]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1f9      	bne.n	8003a04 <RCC_Delay+0x1c>
}
 8003a10:	bf00      	nop
 8003a12:	bf00      	nop
 8003a14:	3714      	adds	r7, #20
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bc80      	pop	{r7}
 8003a1a:	4770      	bx	lr
 8003a1c:	20000000 	.word	0x20000000
 8003a20:	10624dd3 	.word	0x10624dd3

08003a24 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	613b      	str	r3, [r7, #16]
 8003a30:	2300      	movs	r3, #0
 8003a32:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0301 	and.w	r3, r3, #1
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d07d      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003a40:	2300      	movs	r3, #0
 8003a42:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a44:	4b4f      	ldr	r3, [pc, #316]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a46:	69db      	ldr	r3, [r3, #28]
 8003a48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d10d      	bne.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a50:	4b4c      	ldr	r3, [pc, #304]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a52:	69db      	ldr	r3, [r3, #28]
 8003a54:	4a4b      	ldr	r2, [pc, #300]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a5a:	61d3      	str	r3, [r2, #28]
 8003a5c:	4b49      	ldr	r3, [pc, #292]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a5e:	69db      	ldr	r3, [r3, #28]
 8003a60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a64:	60bb      	str	r3, [r7, #8]
 8003a66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a6c:	4b46      	ldr	r3, [pc, #280]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d118      	bne.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a78:	4b43      	ldr	r3, [pc, #268]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a42      	ldr	r2, [pc, #264]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a82:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a84:	f7fd fbd6 	bl	8001234 <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a8a:	e008      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a8c:	f7fd fbd2 	bl	8001234 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b64      	cmp	r3, #100	@ 0x64
 8003a98:	d901      	bls.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e06d      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a9e:	4b3a      	ldr	r3, [pc, #232]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d0f0      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003aaa:	4b36      	ldr	r3, [pc, #216]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ab2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d02e      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d027      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ac8:	4b2e      	ldr	r3, [pc, #184]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aca:	6a1b      	ldr	r3, [r3, #32]
 8003acc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ad0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ad2:	4b2e      	ldr	r3, [pc, #184]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ad8:	4b2c      	ldr	r3, [pc, #176]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003ade:	4a29      	ldr	r2, [pc, #164]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d014      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aee:	f7fd fba1 	bl	8001234 <HAL_GetTick>
 8003af2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af4:	e00a      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003af6:	f7fd fb9d 	bl	8001234 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d901      	bls.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e036      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b0c:	4b1d      	ldr	r3, [pc, #116]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	f003 0302 	and.w	r3, r3, #2
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d0ee      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b18:	4b1a      	ldr	r3, [pc, #104]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b1a:	6a1b      	ldr	r3, [r3, #32]
 8003b1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	4917      	ldr	r1, [pc, #92]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b2a:	7dfb      	ldrb	r3, [r7, #23]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d105      	bne.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b30:	4b14      	ldr	r3, [pc, #80]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b32:	69db      	ldr	r3, [r3, #28]
 8003b34:	4a13      	ldr	r2, [pc, #76]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b3a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d008      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b48:	4b0e      	ldr	r3, [pc, #56]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	490b      	ldr	r1, [pc, #44]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0310 	and.w	r3, r3, #16
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d008      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b66:	4b07      	ldr	r3, [pc, #28]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	4904      	ldr	r1, [pc, #16]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3718      	adds	r7, #24
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	40021000 	.word	0x40021000
 8003b88:	40007000 	.word	0x40007000
 8003b8c:	42420440 	.word	0x42420440

08003b90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e042      	b.n	8003c28 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d106      	bne.n	8003bbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f7fd f95c 	bl	8000e74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2224      	movs	r2, #36	@ 0x24
 8003bc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68da      	ldr	r2, [r3, #12]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003bd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 fd63 	bl	80046a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	691a      	ldr	r2, [r3, #16]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003be8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	695a      	ldr	r2, [r3, #20]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003bf8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68da      	ldr	r2, [r3, #12]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2220      	movs	r2, #32
 8003c14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2220      	movs	r2, #32
 8003c1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3708      	adds	r7, #8
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b08a      	sub	sp, #40	@ 0x28
 8003c34:	af02      	add	r7, sp, #8
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	603b      	str	r3, [r7, #0]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c40:	2300      	movs	r3, #0
 8003c42:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	2b20      	cmp	r3, #32
 8003c4e:	d175      	bne.n	8003d3c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d002      	beq.n	8003c5c <HAL_UART_Transmit+0x2c>
 8003c56:	88fb      	ldrh	r3, [r7, #6]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d101      	bne.n	8003c60 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e06e      	b.n	8003d3e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2221      	movs	r2, #33	@ 0x21
 8003c6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c6e:	f7fd fae1 	bl	8001234 <HAL_GetTick>
 8003c72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	88fa      	ldrh	r2, [r7, #6]
 8003c78:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	88fa      	ldrh	r2, [r7, #6]
 8003c7e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c88:	d108      	bne.n	8003c9c <HAL_UART_Transmit+0x6c>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d104      	bne.n	8003c9c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003c92:	2300      	movs	r3, #0
 8003c94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	61bb      	str	r3, [r7, #24]
 8003c9a:	e003      	b.n	8003ca4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ca4:	e02e      	b.n	8003d04 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	9300      	str	r3, [sp, #0]
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	2200      	movs	r2, #0
 8003cae:	2180      	movs	r1, #128	@ 0x80
 8003cb0:	68f8      	ldr	r0, [r7, #12]
 8003cb2:	f000 fb01 	bl	80042b8 <UART_WaitOnFlagUntilTimeout>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d005      	beq.n	8003cc8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2220      	movs	r2, #32
 8003cc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e03a      	b.n	8003d3e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d10b      	bne.n	8003ce6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	881b      	ldrh	r3, [r3, #0]
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cdc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	3302      	adds	r3, #2
 8003ce2:	61bb      	str	r3, [r7, #24]
 8003ce4:	e007      	b.n	8003cf6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	781a      	ldrb	r2, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1cb      	bne.n	8003ca6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	9300      	str	r3, [sp, #0]
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	2200      	movs	r2, #0
 8003d16:	2140      	movs	r1, #64	@ 0x40
 8003d18:	68f8      	ldr	r0, [r7, #12]
 8003d1a:	f000 facd 	bl	80042b8 <UART_WaitOnFlagUntilTimeout>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d005      	beq.n	8003d30 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2220      	movs	r2, #32
 8003d28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e006      	b.n	8003d3e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2220      	movs	r2, #32
 8003d34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	e000      	b.n	8003d3e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003d3c:	2302      	movs	r3, #2
  }
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3720      	adds	r7, #32
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
	...

08003d48 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b0ba      	sub	sp, #232	@ 0xe8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003d74:	2300      	movs	r3, #0
 8003d76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d7e:	f003 030f 	and.w	r3, r3, #15
 8003d82:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003d86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10f      	bne.n	8003dae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d92:	f003 0320 	and.w	r3, r3, #32
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d009      	beq.n	8003dae <HAL_UART_IRQHandler+0x66>
 8003d9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d9e:	f003 0320 	and.w	r3, r3, #32
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d003      	beq.n	8003dae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 fbbc 	bl	8004524 <UART_Receive_IT>
      return;
 8003dac:	e25b      	b.n	8004266 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003dae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	f000 80de 	beq.w	8003f74 <HAL_UART_IRQHandler+0x22c>
 8003db8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d106      	bne.n	8003dd2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003dc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dc8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f000 80d1 	beq.w	8003f74 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00b      	beq.n	8003df6 <HAL_UART_IRQHandler+0xae>
 8003dde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003de2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d005      	beq.n	8003df6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dee:	f043 0201 	orr.w	r2, r3, #1
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dfa:	f003 0304 	and.w	r3, r3, #4
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00b      	beq.n	8003e1a <HAL_UART_IRQHandler+0xd2>
 8003e02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d005      	beq.n	8003e1a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e12:	f043 0202 	orr.w	r2, r3, #2
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00b      	beq.n	8003e3e <HAL_UART_IRQHandler+0xf6>
 8003e26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e2a:	f003 0301 	and.w	r3, r3, #1
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d005      	beq.n	8003e3e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e36:	f043 0204 	orr.w	r2, r3, #4
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e42:	f003 0308 	and.w	r3, r3, #8
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d011      	beq.n	8003e6e <HAL_UART_IRQHandler+0x126>
 8003e4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e4e:	f003 0320 	and.w	r3, r3, #32
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d105      	bne.n	8003e62 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e5a:	f003 0301 	and.w	r3, r3, #1
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d005      	beq.n	8003e6e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e66:	f043 0208 	orr.w	r2, r3, #8
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f000 81f2 	beq.w	800425c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e7c:	f003 0320 	and.w	r3, r3, #32
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d008      	beq.n	8003e96 <HAL_UART_IRQHandler+0x14e>
 8003e84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e88:	f003 0320 	and.w	r3, r3, #32
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d002      	beq.n	8003e96 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 fb47 	bl	8004524 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	695b      	ldr	r3, [r3, #20]
 8003e9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	bf14      	ite	ne
 8003ea4:	2301      	movne	r3, #1
 8003ea6:	2300      	moveq	r3, #0
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eb2:	f003 0308 	and.w	r3, r3, #8
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d103      	bne.n	8003ec2 <HAL_UART_IRQHandler+0x17a>
 8003eba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d04f      	beq.n	8003f62 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 fa51 	bl	800436a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d041      	beq.n	8003f5a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	3314      	adds	r3, #20
 8003edc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003ee4:	e853 3f00 	ldrex	r3, [r3]
 8003ee8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003eec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003ef0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ef4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	3314      	adds	r3, #20
 8003efe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003f02:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003f06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003f0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003f12:	e841 2300 	strex	r3, r2, [r1]
 8003f16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003f1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1d9      	bne.n	8003ed6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d013      	beq.n	8003f52 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f2e:	4a7e      	ldr	r2, [pc, #504]	@ (8004128 <HAL_UART_IRQHandler+0x3e0>)
 8003f30:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7fe fe04 	bl	8002b44 <HAL_DMA_Abort_IT>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d016      	beq.n	8003f70 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003f4c:	4610      	mov	r0, r2
 8003f4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f50:	e00e      	b.n	8003f70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 f99c 	bl	8004290 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f58:	e00a      	b.n	8003f70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 f998 	bl	8004290 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f60:	e006      	b.n	8003f70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 f994 	bl	8004290 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003f6e:	e175      	b.n	800425c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f70:	bf00      	nop
    return;
 8003f72:	e173      	b.n	800425c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	f040 814f 	bne.w	800421c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f82:	f003 0310 	and.w	r3, r3, #16
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	f000 8148 	beq.w	800421c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f90:	f003 0310 	and.w	r3, r3, #16
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f000 8141 	beq.w	800421c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	60bb      	str	r3, [r7, #8]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	60bb      	str	r3, [r7, #8]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	60bb      	str	r3, [r7, #8]
 8003fae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f000 80b6 	beq.w	800412c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003fcc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f000 8145 	beq.w	8004260 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003fda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	f080 813e 	bcs.w	8004260 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003fea:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	2b20      	cmp	r3, #32
 8003ff4:	f000 8088 	beq.w	8004108 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	330c      	adds	r3, #12
 8003ffe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004002:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004006:	e853 3f00 	ldrex	r3, [r3]
 800400a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800400e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004012:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004016:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	330c      	adds	r3, #12
 8004020:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004024:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004028:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800402c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004030:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004034:	e841 2300 	strex	r3, r2, [r1]
 8004038:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800403c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1d9      	bne.n	8003ff8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	3314      	adds	r3, #20
 800404a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800404e:	e853 3f00 	ldrex	r3, [r3]
 8004052:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004054:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004056:	f023 0301 	bic.w	r3, r3, #1
 800405a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	3314      	adds	r3, #20
 8004064:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004068:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800406c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004070:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004074:	e841 2300 	strex	r3, r2, [r1]
 8004078:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800407a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1e1      	bne.n	8004044 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	3314      	adds	r3, #20
 8004086:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004088:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800408a:	e853 3f00 	ldrex	r3, [r3]
 800408e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004090:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004092:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004096:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	3314      	adds	r3, #20
 80040a0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80040a4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80040a6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80040aa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80040ac:	e841 2300 	strex	r3, r2, [r1]
 80040b0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80040b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1e3      	bne.n	8004080 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2220      	movs	r2, #32
 80040bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	330c      	adds	r3, #12
 80040cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040d0:	e853 3f00 	ldrex	r3, [r3]
 80040d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80040d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040d8:	f023 0310 	bic.w	r3, r3, #16
 80040dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	330c      	adds	r3, #12
 80040e6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80040ea:	65ba      	str	r2, [r7, #88]	@ 0x58
 80040ec:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80040f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80040f2:	e841 2300 	strex	r3, r2, [r1]
 80040f6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80040f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1e3      	bne.n	80040c6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004102:	4618      	mov	r0, r3
 8004104:	f7fe fce2 	bl	8002acc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2202      	movs	r2, #2
 800410c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004116:	b29b      	uxth	r3, r3
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	b29b      	uxth	r3, r3
 800411c:	4619      	mov	r1, r3
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 f8bf 	bl	80042a2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004124:	e09c      	b.n	8004260 <HAL_UART_IRQHandler+0x518>
 8004126:	bf00      	nop
 8004128:	0800442f 	.word	0x0800442f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004134:	b29b      	uxth	r3, r3
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004140:	b29b      	uxth	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	f000 808e 	beq.w	8004264 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004148:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800414c:	2b00      	cmp	r3, #0
 800414e:	f000 8089 	beq.w	8004264 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	330c      	adds	r3, #12
 8004158:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800415c:	e853 3f00 	ldrex	r3, [r3]
 8004160:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004162:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004164:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004168:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	330c      	adds	r3, #12
 8004172:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004176:	647a      	str	r2, [r7, #68]	@ 0x44
 8004178:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800417c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800417e:	e841 2300 	strex	r3, r2, [r1]
 8004182:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004184:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1e3      	bne.n	8004152 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	3314      	adds	r3, #20
 8004190:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004194:	e853 3f00 	ldrex	r3, [r3]
 8004198:	623b      	str	r3, [r7, #32]
   return(result);
 800419a:	6a3b      	ldr	r3, [r7, #32]
 800419c:	f023 0301 	bic.w	r3, r3, #1
 80041a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	3314      	adds	r3, #20
 80041aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80041ae:	633a      	str	r2, [r7, #48]	@ 0x30
 80041b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041b6:	e841 2300 	strex	r3, r2, [r1]
 80041ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80041bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d1e3      	bne.n	800418a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2220      	movs	r2, #32
 80041c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	330c      	adds	r3, #12
 80041d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	e853 3f00 	ldrex	r3, [r3]
 80041de:	60fb      	str	r3, [r7, #12]
   return(result);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f023 0310 	bic.w	r3, r3, #16
 80041e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	330c      	adds	r3, #12
 80041f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80041f4:	61fa      	str	r2, [r7, #28]
 80041f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f8:	69b9      	ldr	r1, [r7, #24]
 80041fa:	69fa      	ldr	r2, [r7, #28]
 80041fc:	e841 2300 	strex	r3, r2, [r1]
 8004200:	617b      	str	r3, [r7, #20]
   return(result);
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1e3      	bne.n	80041d0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2202      	movs	r2, #2
 800420c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800420e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004212:	4619      	mov	r1, r3
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 f844 	bl	80042a2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800421a:	e023      	b.n	8004264 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800421c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004220:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004224:	2b00      	cmp	r3, #0
 8004226:	d009      	beq.n	800423c <HAL_UART_IRQHandler+0x4f4>
 8004228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800422c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004230:	2b00      	cmp	r3, #0
 8004232:	d003      	beq.n	800423c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 f90e 	bl	8004456 <UART_Transmit_IT>
    return;
 800423a:	e014      	b.n	8004266 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800423c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004240:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00e      	beq.n	8004266 <HAL_UART_IRQHandler+0x51e>
 8004248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800424c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004250:	2b00      	cmp	r3, #0
 8004252:	d008      	beq.n	8004266 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 f94d 	bl	80044f4 <UART_EndTransmit_IT>
    return;
 800425a:	e004      	b.n	8004266 <HAL_UART_IRQHandler+0x51e>
    return;
 800425c:	bf00      	nop
 800425e:	e002      	b.n	8004266 <HAL_UART_IRQHandler+0x51e>
      return;
 8004260:	bf00      	nop
 8004262:	e000      	b.n	8004266 <HAL_UART_IRQHandler+0x51e>
      return;
 8004264:	bf00      	nop
  }
}
 8004266:	37e8      	adds	r7, #232	@ 0xe8
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004274:	bf00      	nop
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	bc80      	pop	{r7}
 800427c:	4770      	bx	lr

0800427e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800427e:	b480      	push	{r7}
 8004280:	b083      	sub	sp, #12
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004286:	bf00      	nop
 8004288:	370c      	adds	r7, #12
 800428a:	46bd      	mov	sp, r7
 800428c:	bc80      	pop	{r7}
 800428e:	4770      	bx	lr

08004290 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004298:	bf00      	nop
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	bc80      	pop	{r7}
 80042a0:	4770      	bx	lr

080042a2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042a2:	b480      	push	{r7}
 80042a4:	b083      	sub	sp, #12
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
 80042aa:	460b      	mov	r3, r1
 80042ac:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80042ae:	bf00      	nop
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bc80      	pop	{r7}
 80042b6:	4770      	bx	lr

080042b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b086      	sub	sp, #24
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	603b      	str	r3, [r7, #0]
 80042c4:	4613      	mov	r3, r2
 80042c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042c8:	e03b      	b.n	8004342 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ca:	6a3b      	ldr	r3, [r7, #32]
 80042cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d0:	d037      	beq.n	8004342 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042d2:	f7fc ffaf 	bl	8001234 <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	6a3a      	ldr	r2, [r7, #32]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d302      	bcc.n	80042e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80042e2:	6a3b      	ldr	r3, [r7, #32]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d101      	bne.n	80042ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e03a      	b.n	8004362 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	f003 0304 	and.w	r3, r3, #4
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d023      	beq.n	8004342 <UART_WaitOnFlagUntilTimeout+0x8a>
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	2b80      	cmp	r3, #128	@ 0x80
 80042fe:	d020      	beq.n	8004342 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	2b40      	cmp	r3, #64	@ 0x40
 8004304:	d01d      	beq.n	8004342 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0308 	and.w	r3, r3, #8
 8004310:	2b08      	cmp	r3, #8
 8004312:	d116      	bne.n	8004342 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004314:	2300      	movs	r3, #0
 8004316:	617b      	str	r3, [r7, #20]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	617b      	str	r3, [r7, #20]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	617b      	str	r3, [r7, #20]
 8004328:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	f000 f81d 	bl	800436a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2208      	movs	r2, #8
 8004334:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e00f      	b.n	8004362 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	4013      	ands	r3, r2
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	429a      	cmp	r2, r3
 8004350:	bf0c      	ite	eq
 8004352:	2301      	moveq	r3, #1
 8004354:	2300      	movne	r3, #0
 8004356:	b2db      	uxtb	r3, r3
 8004358:	461a      	mov	r2, r3
 800435a:	79fb      	ldrb	r3, [r7, #7]
 800435c:	429a      	cmp	r2, r3
 800435e:	d0b4      	beq.n	80042ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3718      	adds	r7, #24
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800436a:	b480      	push	{r7}
 800436c:	b095      	sub	sp, #84	@ 0x54
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	330c      	adds	r3, #12
 8004378:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800437a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800437c:	e853 3f00 	ldrex	r3, [r3]
 8004380:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004384:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004388:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	330c      	adds	r3, #12
 8004390:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004392:	643a      	str	r2, [r7, #64]	@ 0x40
 8004394:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004396:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004398:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800439a:	e841 2300 	strex	r3, r2, [r1]
 800439e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80043a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1e5      	bne.n	8004372 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	3314      	adds	r3, #20
 80043ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ae:	6a3b      	ldr	r3, [r7, #32]
 80043b0:	e853 3f00 	ldrex	r3, [r3]
 80043b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	f023 0301 	bic.w	r3, r3, #1
 80043bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	3314      	adds	r3, #20
 80043c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80043c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043ce:	e841 2300 	strex	r3, r2, [r1]
 80043d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80043d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1e5      	bne.n	80043a6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d119      	bne.n	8004416 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	330c      	adds	r3, #12
 80043e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	e853 3f00 	ldrex	r3, [r3]
 80043f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	f023 0310 	bic.w	r3, r3, #16
 80043f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	330c      	adds	r3, #12
 8004400:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004402:	61ba      	str	r2, [r7, #24]
 8004404:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004406:	6979      	ldr	r1, [r7, #20]
 8004408:	69ba      	ldr	r2, [r7, #24]
 800440a:	e841 2300 	strex	r3, r2, [r1]
 800440e:	613b      	str	r3, [r7, #16]
   return(result);
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1e5      	bne.n	80043e2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2220      	movs	r2, #32
 800441a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004424:	bf00      	nop
 8004426:	3754      	adds	r7, #84	@ 0x54
 8004428:	46bd      	mov	sp, r7
 800442a:	bc80      	pop	{r7}
 800442c:	4770      	bx	lr

0800442e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800442e:	b580      	push	{r7, lr}
 8004430:	b084      	sub	sp, #16
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800443a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004448:	68f8      	ldr	r0, [r7, #12]
 800444a:	f7ff ff21 	bl	8004290 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800444e:	bf00      	nop
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}

08004456 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004456:	b480      	push	{r7}
 8004458:	b085      	sub	sp, #20
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b21      	cmp	r3, #33	@ 0x21
 8004468:	d13e      	bne.n	80044e8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004472:	d114      	bne.n	800449e <UART_Transmit_IT+0x48>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d110      	bne.n	800449e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a1b      	ldr	r3, [r3, #32]
 8004480:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	881b      	ldrh	r3, [r3, #0]
 8004486:	461a      	mov	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004490:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a1b      	ldr	r3, [r3, #32]
 8004496:	1c9a      	adds	r2, r3, #2
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	621a      	str	r2, [r3, #32]
 800449c:	e008      	b.n	80044b0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	1c59      	adds	r1, r3, #1
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	6211      	str	r1, [r2, #32]
 80044a8:	781a      	ldrb	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	3b01      	subs	r3, #1
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	4619      	mov	r1, r3
 80044be:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d10f      	bne.n	80044e4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68da      	ldr	r2, [r3, #12]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80044d2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68da      	ldr	r2, [r3, #12]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80044e2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80044e4:	2300      	movs	r3, #0
 80044e6:	e000      	b.n	80044ea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80044e8:	2302      	movs	r3, #2
  }
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3714      	adds	r7, #20
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bc80      	pop	{r7}
 80044f2:	4770      	bx	lr

080044f4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68da      	ldr	r2, [r3, #12]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800450a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2220      	movs	r2, #32
 8004510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f7ff fea9 	bl	800426c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	3708      	adds	r7, #8
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b08c      	sub	sp, #48	@ 0x30
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004532:	b2db      	uxtb	r3, r3
 8004534:	2b22      	cmp	r3, #34	@ 0x22
 8004536:	f040 80ae 	bne.w	8004696 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004542:	d117      	bne.n	8004574 <UART_Receive_IT+0x50>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d113      	bne.n	8004574 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800454c:	2300      	movs	r3, #0
 800454e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004554:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	b29b      	uxth	r3, r3
 800455e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004562:	b29a      	uxth	r2, r3
 8004564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004566:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800456c:	1c9a      	adds	r2, r3, #2
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	629a      	str	r2, [r3, #40]	@ 0x28
 8004572:	e026      	b.n	80045c2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004578:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800457a:	2300      	movs	r3, #0
 800457c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004586:	d007      	beq.n	8004598 <UART_Receive_IT+0x74>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10a      	bne.n	80045a6 <UART_Receive_IT+0x82>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d106      	bne.n	80045a6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	b2da      	uxtb	r2, r3
 80045a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045a2:	701a      	strb	r2, [r3, #0]
 80045a4:	e008      	b.n	80045b8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045b2:	b2da      	uxtb	r2, r3
 80045b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045b6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045bc:	1c5a      	adds	r2, r3, #1
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	3b01      	subs	r3, #1
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	4619      	mov	r1, r3
 80045d0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d15d      	bne.n	8004692 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68da      	ldr	r2, [r3, #12]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f022 0220 	bic.w	r2, r2, #32
 80045e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68da      	ldr	r2, [r3, #12]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80045f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	695a      	ldr	r2, [r3, #20]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f022 0201 	bic.w	r2, r2, #1
 8004604:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2220      	movs	r2, #32
 800460a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004618:	2b01      	cmp	r3, #1
 800461a:	d135      	bne.n	8004688 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	330c      	adds	r3, #12
 8004628:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	e853 3f00 	ldrex	r3, [r3]
 8004630:	613b      	str	r3, [r7, #16]
   return(result);
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	f023 0310 	bic.w	r3, r3, #16
 8004638:	627b      	str	r3, [r7, #36]	@ 0x24
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	330c      	adds	r3, #12
 8004640:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004642:	623a      	str	r2, [r7, #32]
 8004644:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004646:	69f9      	ldr	r1, [r7, #28]
 8004648:	6a3a      	ldr	r2, [r7, #32]
 800464a:	e841 2300 	strex	r3, r2, [r1]
 800464e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1e5      	bne.n	8004622 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0310 	and.w	r3, r3, #16
 8004660:	2b10      	cmp	r3, #16
 8004662:	d10a      	bne.n	800467a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004664:	2300      	movs	r3, #0
 8004666:	60fb      	str	r3, [r7, #12]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	60fb      	str	r3, [r7, #12]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	60fb      	str	r3, [r7, #12]
 8004678:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800467e:	4619      	mov	r1, r3
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f7ff fe0e 	bl	80042a2 <HAL_UARTEx_RxEventCallback>
 8004686:	e002      	b.n	800468e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f7ff fdf8 	bl	800427e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800468e:	2300      	movs	r3, #0
 8004690:	e002      	b.n	8004698 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004692:	2300      	movs	r3, #0
 8004694:	e000      	b.n	8004698 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004696:	2302      	movs	r3, #2
  }
}
 8004698:	4618      	mov	r0, r3
 800469a:	3730      	adds	r7, #48	@ 0x30
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	68da      	ldr	r2, [r3, #12]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	689a      	ldr	r2, [r3, #8]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	431a      	orrs	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	695b      	ldr	r3, [r3, #20]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80046da:	f023 030c 	bic.w	r3, r3, #12
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	6812      	ldr	r2, [r2, #0]
 80046e2:	68b9      	ldr	r1, [r7, #8]
 80046e4:	430b      	orrs	r3, r1
 80046e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	699a      	ldr	r2, [r3, #24]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	430a      	orrs	r2, r1
 80046fc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a2c      	ldr	r2, [pc, #176]	@ (80047b4 <UART_SetConfig+0x114>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d103      	bne.n	8004710 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004708:	f7ff f95a 	bl	80039c0 <HAL_RCC_GetPCLK2Freq>
 800470c:	60f8      	str	r0, [r7, #12]
 800470e:	e002      	b.n	8004716 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004710:	f7ff f942 	bl	8003998 <HAL_RCC_GetPCLK1Freq>
 8004714:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	4613      	mov	r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	4413      	add	r3, r2
 800471e:	009a      	lsls	r2, r3, #2
 8004720:	441a      	add	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	fbb2 f3f3 	udiv	r3, r2, r3
 800472c:	4a22      	ldr	r2, [pc, #136]	@ (80047b8 <UART_SetConfig+0x118>)
 800472e:	fba2 2303 	umull	r2, r3, r2, r3
 8004732:	095b      	lsrs	r3, r3, #5
 8004734:	0119      	lsls	r1, r3, #4
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	4613      	mov	r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	4413      	add	r3, r2
 800473e:	009a      	lsls	r2, r3, #2
 8004740:	441a      	add	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	fbb2 f2f3 	udiv	r2, r2, r3
 800474c:	4b1a      	ldr	r3, [pc, #104]	@ (80047b8 <UART_SetConfig+0x118>)
 800474e:	fba3 0302 	umull	r0, r3, r3, r2
 8004752:	095b      	lsrs	r3, r3, #5
 8004754:	2064      	movs	r0, #100	@ 0x64
 8004756:	fb00 f303 	mul.w	r3, r0, r3
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	011b      	lsls	r3, r3, #4
 800475e:	3332      	adds	r3, #50	@ 0x32
 8004760:	4a15      	ldr	r2, [pc, #84]	@ (80047b8 <UART_SetConfig+0x118>)
 8004762:	fba2 2303 	umull	r2, r3, r2, r3
 8004766:	095b      	lsrs	r3, r3, #5
 8004768:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800476c:	4419      	add	r1, r3
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	4613      	mov	r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	4413      	add	r3, r2
 8004776:	009a      	lsls	r2, r3, #2
 8004778:	441a      	add	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	fbb2 f2f3 	udiv	r2, r2, r3
 8004784:	4b0c      	ldr	r3, [pc, #48]	@ (80047b8 <UART_SetConfig+0x118>)
 8004786:	fba3 0302 	umull	r0, r3, r3, r2
 800478a:	095b      	lsrs	r3, r3, #5
 800478c:	2064      	movs	r0, #100	@ 0x64
 800478e:	fb00 f303 	mul.w	r3, r0, r3
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	011b      	lsls	r3, r3, #4
 8004796:	3332      	adds	r3, #50	@ 0x32
 8004798:	4a07      	ldr	r2, [pc, #28]	@ (80047b8 <UART_SetConfig+0x118>)
 800479a:	fba2 2303 	umull	r2, r3, r2, r3
 800479e:	095b      	lsrs	r3, r3, #5
 80047a0:	f003 020f 	and.w	r2, r3, #15
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	440a      	add	r2, r1
 80047aa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80047ac:	bf00      	nop
 80047ae:	3710      	adds	r7, #16
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	40013800 	.word	0x40013800
 80047b8:	51eb851f 	.word	0x51eb851f

080047bc <malloc>:
 80047bc:	4b02      	ldr	r3, [pc, #8]	@ (80047c8 <malloc+0xc>)
 80047be:	4601      	mov	r1, r0
 80047c0:	6818      	ldr	r0, [r3, #0]
 80047c2:	f000 b82d 	b.w	8004820 <_malloc_r>
 80047c6:	bf00      	nop
 80047c8:	20000018 	.word	0x20000018

080047cc <free>:
 80047cc:	4b02      	ldr	r3, [pc, #8]	@ (80047d8 <free+0xc>)
 80047ce:	4601      	mov	r1, r0
 80047d0:	6818      	ldr	r0, [r3, #0]
 80047d2:	f000 bb77 	b.w	8004ec4 <_free_r>
 80047d6:	bf00      	nop
 80047d8:	20000018 	.word	0x20000018

080047dc <sbrk_aligned>:
 80047dc:	b570      	push	{r4, r5, r6, lr}
 80047de:	4e0f      	ldr	r6, [pc, #60]	@ (800481c <sbrk_aligned+0x40>)
 80047e0:	460c      	mov	r4, r1
 80047e2:	6831      	ldr	r1, [r6, #0]
 80047e4:	4605      	mov	r5, r0
 80047e6:	b911      	cbnz	r1, 80047ee <sbrk_aligned+0x12>
 80047e8:	f000 fb0e 	bl	8004e08 <_sbrk_r>
 80047ec:	6030      	str	r0, [r6, #0]
 80047ee:	4621      	mov	r1, r4
 80047f0:	4628      	mov	r0, r5
 80047f2:	f000 fb09 	bl	8004e08 <_sbrk_r>
 80047f6:	1c43      	adds	r3, r0, #1
 80047f8:	d103      	bne.n	8004802 <sbrk_aligned+0x26>
 80047fa:	f04f 34ff 	mov.w	r4, #4294967295
 80047fe:	4620      	mov	r0, r4
 8004800:	bd70      	pop	{r4, r5, r6, pc}
 8004802:	1cc4      	adds	r4, r0, #3
 8004804:	f024 0403 	bic.w	r4, r4, #3
 8004808:	42a0      	cmp	r0, r4
 800480a:	d0f8      	beq.n	80047fe <sbrk_aligned+0x22>
 800480c:	1a21      	subs	r1, r4, r0
 800480e:	4628      	mov	r0, r5
 8004810:	f000 fafa 	bl	8004e08 <_sbrk_r>
 8004814:	3001      	adds	r0, #1
 8004816:	d1f2      	bne.n	80047fe <sbrk_aligned+0x22>
 8004818:	e7ef      	b.n	80047fa <sbrk_aligned+0x1e>
 800481a:	bf00      	nop
 800481c:	200001e4 	.word	0x200001e4

08004820 <_malloc_r>:
 8004820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004824:	1ccd      	adds	r5, r1, #3
 8004826:	f025 0503 	bic.w	r5, r5, #3
 800482a:	3508      	adds	r5, #8
 800482c:	2d0c      	cmp	r5, #12
 800482e:	bf38      	it	cc
 8004830:	250c      	movcc	r5, #12
 8004832:	2d00      	cmp	r5, #0
 8004834:	4606      	mov	r6, r0
 8004836:	db01      	blt.n	800483c <_malloc_r+0x1c>
 8004838:	42a9      	cmp	r1, r5
 800483a:	d904      	bls.n	8004846 <_malloc_r+0x26>
 800483c:	230c      	movs	r3, #12
 800483e:	6033      	str	r3, [r6, #0]
 8004840:	2000      	movs	r0, #0
 8004842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004846:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800491c <_malloc_r+0xfc>
 800484a:	f000 f869 	bl	8004920 <__malloc_lock>
 800484e:	f8d8 3000 	ldr.w	r3, [r8]
 8004852:	461c      	mov	r4, r3
 8004854:	bb44      	cbnz	r4, 80048a8 <_malloc_r+0x88>
 8004856:	4629      	mov	r1, r5
 8004858:	4630      	mov	r0, r6
 800485a:	f7ff ffbf 	bl	80047dc <sbrk_aligned>
 800485e:	1c43      	adds	r3, r0, #1
 8004860:	4604      	mov	r4, r0
 8004862:	d158      	bne.n	8004916 <_malloc_r+0xf6>
 8004864:	f8d8 4000 	ldr.w	r4, [r8]
 8004868:	4627      	mov	r7, r4
 800486a:	2f00      	cmp	r7, #0
 800486c:	d143      	bne.n	80048f6 <_malloc_r+0xd6>
 800486e:	2c00      	cmp	r4, #0
 8004870:	d04b      	beq.n	800490a <_malloc_r+0xea>
 8004872:	6823      	ldr	r3, [r4, #0]
 8004874:	4639      	mov	r1, r7
 8004876:	4630      	mov	r0, r6
 8004878:	eb04 0903 	add.w	r9, r4, r3
 800487c:	f000 fac4 	bl	8004e08 <_sbrk_r>
 8004880:	4581      	cmp	r9, r0
 8004882:	d142      	bne.n	800490a <_malloc_r+0xea>
 8004884:	6821      	ldr	r1, [r4, #0]
 8004886:	4630      	mov	r0, r6
 8004888:	1a6d      	subs	r5, r5, r1
 800488a:	4629      	mov	r1, r5
 800488c:	f7ff ffa6 	bl	80047dc <sbrk_aligned>
 8004890:	3001      	adds	r0, #1
 8004892:	d03a      	beq.n	800490a <_malloc_r+0xea>
 8004894:	6823      	ldr	r3, [r4, #0]
 8004896:	442b      	add	r3, r5
 8004898:	6023      	str	r3, [r4, #0]
 800489a:	f8d8 3000 	ldr.w	r3, [r8]
 800489e:	685a      	ldr	r2, [r3, #4]
 80048a0:	bb62      	cbnz	r2, 80048fc <_malloc_r+0xdc>
 80048a2:	f8c8 7000 	str.w	r7, [r8]
 80048a6:	e00f      	b.n	80048c8 <_malloc_r+0xa8>
 80048a8:	6822      	ldr	r2, [r4, #0]
 80048aa:	1b52      	subs	r2, r2, r5
 80048ac:	d420      	bmi.n	80048f0 <_malloc_r+0xd0>
 80048ae:	2a0b      	cmp	r2, #11
 80048b0:	d917      	bls.n	80048e2 <_malloc_r+0xc2>
 80048b2:	1961      	adds	r1, r4, r5
 80048b4:	42a3      	cmp	r3, r4
 80048b6:	6025      	str	r5, [r4, #0]
 80048b8:	bf18      	it	ne
 80048ba:	6059      	strne	r1, [r3, #4]
 80048bc:	6863      	ldr	r3, [r4, #4]
 80048be:	bf08      	it	eq
 80048c0:	f8c8 1000 	streq.w	r1, [r8]
 80048c4:	5162      	str	r2, [r4, r5]
 80048c6:	604b      	str	r3, [r1, #4]
 80048c8:	4630      	mov	r0, r6
 80048ca:	f000 f82f 	bl	800492c <__malloc_unlock>
 80048ce:	f104 000b 	add.w	r0, r4, #11
 80048d2:	1d23      	adds	r3, r4, #4
 80048d4:	f020 0007 	bic.w	r0, r0, #7
 80048d8:	1ac2      	subs	r2, r0, r3
 80048da:	bf1c      	itt	ne
 80048dc:	1a1b      	subne	r3, r3, r0
 80048de:	50a3      	strne	r3, [r4, r2]
 80048e0:	e7af      	b.n	8004842 <_malloc_r+0x22>
 80048e2:	6862      	ldr	r2, [r4, #4]
 80048e4:	42a3      	cmp	r3, r4
 80048e6:	bf0c      	ite	eq
 80048e8:	f8c8 2000 	streq.w	r2, [r8]
 80048ec:	605a      	strne	r2, [r3, #4]
 80048ee:	e7eb      	b.n	80048c8 <_malloc_r+0xa8>
 80048f0:	4623      	mov	r3, r4
 80048f2:	6864      	ldr	r4, [r4, #4]
 80048f4:	e7ae      	b.n	8004854 <_malloc_r+0x34>
 80048f6:	463c      	mov	r4, r7
 80048f8:	687f      	ldr	r7, [r7, #4]
 80048fa:	e7b6      	b.n	800486a <_malloc_r+0x4a>
 80048fc:	461a      	mov	r2, r3
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	42a3      	cmp	r3, r4
 8004902:	d1fb      	bne.n	80048fc <_malloc_r+0xdc>
 8004904:	2300      	movs	r3, #0
 8004906:	6053      	str	r3, [r2, #4]
 8004908:	e7de      	b.n	80048c8 <_malloc_r+0xa8>
 800490a:	230c      	movs	r3, #12
 800490c:	4630      	mov	r0, r6
 800490e:	6033      	str	r3, [r6, #0]
 8004910:	f000 f80c 	bl	800492c <__malloc_unlock>
 8004914:	e794      	b.n	8004840 <_malloc_r+0x20>
 8004916:	6005      	str	r5, [r0, #0]
 8004918:	e7d6      	b.n	80048c8 <_malloc_r+0xa8>
 800491a:	bf00      	nop
 800491c:	200001e8 	.word	0x200001e8

08004920 <__malloc_lock>:
 8004920:	4801      	ldr	r0, [pc, #4]	@ (8004928 <__malloc_lock+0x8>)
 8004922:	f000 babe 	b.w	8004ea2 <__retarget_lock_acquire_recursive>
 8004926:	bf00      	nop
 8004928:	2000032c 	.word	0x2000032c

0800492c <__malloc_unlock>:
 800492c:	4801      	ldr	r0, [pc, #4]	@ (8004934 <__malloc_unlock+0x8>)
 800492e:	f000 bab9 	b.w	8004ea4 <__retarget_lock_release_recursive>
 8004932:	bf00      	nop
 8004934:	2000032c 	.word	0x2000032c

08004938 <std>:
 8004938:	2300      	movs	r3, #0
 800493a:	b510      	push	{r4, lr}
 800493c:	4604      	mov	r4, r0
 800493e:	e9c0 3300 	strd	r3, r3, [r0]
 8004942:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004946:	6083      	str	r3, [r0, #8]
 8004948:	8181      	strh	r1, [r0, #12]
 800494a:	6643      	str	r3, [r0, #100]	@ 0x64
 800494c:	81c2      	strh	r2, [r0, #14]
 800494e:	6183      	str	r3, [r0, #24]
 8004950:	4619      	mov	r1, r3
 8004952:	2208      	movs	r2, #8
 8004954:	305c      	adds	r0, #92	@ 0x5c
 8004956:	f000 fa1b 	bl	8004d90 <memset>
 800495a:	4b0d      	ldr	r3, [pc, #52]	@ (8004990 <std+0x58>)
 800495c:	6224      	str	r4, [r4, #32]
 800495e:	6263      	str	r3, [r4, #36]	@ 0x24
 8004960:	4b0c      	ldr	r3, [pc, #48]	@ (8004994 <std+0x5c>)
 8004962:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004964:	4b0c      	ldr	r3, [pc, #48]	@ (8004998 <std+0x60>)
 8004966:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004968:	4b0c      	ldr	r3, [pc, #48]	@ (800499c <std+0x64>)
 800496a:	6323      	str	r3, [r4, #48]	@ 0x30
 800496c:	4b0c      	ldr	r3, [pc, #48]	@ (80049a0 <std+0x68>)
 800496e:	429c      	cmp	r4, r3
 8004970:	d006      	beq.n	8004980 <std+0x48>
 8004972:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004976:	4294      	cmp	r4, r2
 8004978:	d002      	beq.n	8004980 <std+0x48>
 800497a:	33d0      	adds	r3, #208	@ 0xd0
 800497c:	429c      	cmp	r4, r3
 800497e:	d105      	bne.n	800498c <std+0x54>
 8004980:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004988:	f000 ba8a 	b.w	8004ea0 <__retarget_lock_init_recursive>
 800498c:	bd10      	pop	{r4, pc}
 800498e:	bf00      	nop
 8004990:	08004be1 	.word	0x08004be1
 8004994:	08004c03 	.word	0x08004c03
 8004998:	08004c3b 	.word	0x08004c3b
 800499c:	08004c5f 	.word	0x08004c5f
 80049a0:	200001ec 	.word	0x200001ec

080049a4 <stdio_exit_handler>:
 80049a4:	4a02      	ldr	r2, [pc, #8]	@ (80049b0 <stdio_exit_handler+0xc>)
 80049a6:	4903      	ldr	r1, [pc, #12]	@ (80049b4 <stdio_exit_handler+0x10>)
 80049a8:	4803      	ldr	r0, [pc, #12]	@ (80049b8 <stdio_exit_handler+0x14>)
 80049aa:	f000 b869 	b.w	8004a80 <_fwalk_sglue>
 80049ae:	bf00      	nop
 80049b0:	2000000c 	.word	0x2000000c
 80049b4:	08005629 	.word	0x08005629
 80049b8:	2000001c 	.word	0x2000001c

080049bc <cleanup_stdio>:
 80049bc:	6841      	ldr	r1, [r0, #4]
 80049be:	4b0c      	ldr	r3, [pc, #48]	@ (80049f0 <cleanup_stdio+0x34>)
 80049c0:	b510      	push	{r4, lr}
 80049c2:	4299      	cmp	r1, r3
 80049c4:	4604      	mov	r4, r0
 80049c6:	d001      	beq.n	80049cc <cleanup_stdio+0x10>
 80049c8:	f000 fe2e 	bl	8005628 <_fflush_r>
 80049cc:	68a1      	ldr	r1, [r4, #8]
 80049ce:	4b09      	ldr	r3, [pc, #36]	@ (80049f4 <cleanup_stdio+0x38>)
 80049d0:	4299      	cmp	r1, r3
 80049d2:	d002      	beq.n	80049da <cleanup_stdio+0x1e>
 80049d4:	4620      	mov	r0, r4
 80049d6:	f000 fe27 	bl	8005628 <_fflush_r>
 80049da:	68e1      	ldr	r1, [r4, #12]
 80049dc:	4b06      	ldr	r3, [pc, #24]	@ (80049f8 <cleanup_stdio+0x3c>)
 80049de:	4299      	cmp	r1, r3
 80049e0:	d004      	beq.n	80049ec <cleanup_stdio+0x30>
 80049e2:	4620      	mov	r0, r4
 80049e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049e8:	f000 be1e 	b.w	8005628 <_fflush_r>
 80049ec:	bd10      	pop	{r4, pc}
 80049ee:	bf00      	nop
 80049f0:	200001ec 	.word	0x200001ec
 80049f4:	20000254 	.word	0x20000254
 80049f8:	200002bc 	.word	0x200002bc

080049fc <global_stdio_init.part.0>:
 80049fc:	b510      	push	{r4, lr}
 80049fe:	4b0b      	ldr	r3, [pc, #44]	@ (8004a2c <global_stdio_init.part.0+0x30>)
 8004a00:	4c0b      	ldr	r4, [pc, #44]	@ (8004a30 <global_stdio_init.part.0+0x34>)
 8004a02:	4a0c      	ldr	r2, [pc, #48]	@ (8004a34 <global_stdio_init.part.0+0x38>)
 8004a04:	4620      	mov	r0, r4
 8004a06:	601a      	str	r2, [r3, #0]
 8004a08:	2104      	movs	r1, #4
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f7ff ff94 	bl	8004938 <std>
 8004a10:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004a14:	2201      	movs	r2, #1
 8004a16:	2109      	movs	r1, #9
 8004a18:	f7ff ff8e 	bl	8004938 <std>
 8004a1c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004a20:	2202      	movs	r2, #2
 8004a22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a26:	2112      	movs	r1, #18
 8004a28:	f7ff bf86 	b.w	8004938 <std>
 8004a2c:	20000324 	.word	0x20000324
 8004a30:	200001ec 	.word	0x200001ec
 8004a34:	080049a5 	.word	0x080049a5

08004a38 <__sfp_lock_acquire>:
 8004a38:	4801      	ldr	r0, [pc, #4]	@ (8004a40 <__sfp_lock_acquire+0x8>)
 8004a3a:	f000 ba32 	b.w	8004ea2 <__retarget_lock_acquire_recursive>
 8004a3e:	bf00      	nop
 8004a40:	2000032d 	.word	0x2000032d

08004a44 <__sfp_lock_release>:
 8004a44:	4801      	ldr	r0, [pc, #4]	@ (8004a4c <__sfp_lock_release+0x8>)
 8004a46:	f000 ba2d 	b.w	8004ea4 <__retarget_lock_release_recursive>
 8004a4a:	bf00      	nop
 8004a4c:	2000032d 	.word	0x2000032d

08004a50 <__sinit>:
 8004a50:	b510      	push	{r4, lr}
 8004a52:	4604      	mov	r4, r0
 8004a54:	f7ff fff0 	bl	8004a38 <__sfp_lock_acquire>
 8004a58:	6a23      	ldr	r3, [r4, #32]
 8004a5a:	b11b      	cbz	r3, 8004a64 <__sinit+0x14>
 8004a5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a60:	f7ff bff0 	b.w	8004a44 <__sfp_lock_release>
 8004a64:	4b04      	ldr	r3, [pc, #16]	@ (8004a78 <__sinit+0x28>)
 8004a66:	6223      	str	r3, [r4, #32]
 8004a68:	4b04      	ldr	r3, [pc, #16]	@ (8004a7c <__sinit+0x2c>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d1f5      	bne.n	8004a5c <__sinit+0xc>
 8004a70:	f7ff ffc4 	bl	80049fc <global_stdio_init.part.0>
 8004a74:	e7f2      	b.n	8004a5c <__sinit+0xc>
 8004a76:	bf00      	nop
 8004a78:	080049bd 	.word	0x080049bd
 8004a7c:	20000324 	.word	0x20000324

08004a80 <_fwalk_sglue>:
 8004a80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a84:	4607      	mov	r7, r0
 8004a86:	4688      	mov	r8, r1
 8004a88:	4614      	mov	r4, r2
 8004a8a:	2600      	movs	r6, #0
 8004a8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004a90:	f1b9 0901 	subs.w	r9, r9, #1
 8004a94:	d505      	bpl.n	8004aa2 <_fwalk_sglue+0x22>
 8004a96:	6824      	ldr	r4, [r4, #0]
 8004a98:	2c00      	cmp	r4, #0
 8004a9a:	d1f7      	bne.n	8004a8c <_fwalk_sglue+0xc>
 8004a9c:	4630      	mov	r0, r6
 8004a9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004aa2:	89ab      	ldrh	r3, [r5, #12]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d907      	bls.n	8004ab8 <_fwalk_sglue+0x38>
 8004aa8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004aac:	3301      	adds	r3, #1
 8004aae:	d003      	beq.n	8004ab8 <_fwalk_sglue+0x38>
 8004ab0:	4629      	mov	r1, r5
 8004ab2:	4638      	mov	r0, r7
 8004ab4:	47c0      	blx	r8
 8004ab6:	4306      	orrs	r6, r0
 8004ab8:	3568      	adds	r5, #104	@ 0x68
 8004aba:	e7e9      	b.n	8004a90 <_fwalk_sglue+0x10>

08004abc <_puts_r>:
 8004abc:	6a03      	ldr	r3, [r0, #32]
 8004abe:	b570      	push	{r4, r5, r6, lr}
 8004ac0:	4605      	mov	r5, r0
 8004ac2:	460e      	mov	r6, r1
 8004ac4:	6884      	ldr	r4, [r0, #8]
 8004ac6:	b90b      	cbnz	r3, 8004acc <_puts_r+0x10>
 8004ac8:	f7ff ffc2 	bl	8004a50 <__sinit>
 8004acc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004ace:	07db      	lsls	r3, r3, #31
 8004ad0:	d405      	bmi.n	8004ade <_puts_r+0x22>
 8004ad2:	89a3      	ldrh	r3, [r4, #12]
 8004ad4:	0598      	lsls	r0, r3, #22
 8004ad6:	d402      	bmi.n	8004ade <_puts_r+0x22>
 8004ad8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004ada:	f000 f9e2 	bl	8004ea2 <__retarget_lock_acquire_recursive>
 8004ade:	89a3      	ldrh	r3, [r4, #12]
 8004ae0:	0719      	lsls	r1, r3, #28
 8004ae2:	d502      	bpl.n	8004aea <_puts_r+0x2e>
 8004ae4:	6923      	ldr	r3, [r4, #16]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d135      	bne.n	8004b56 <_puts_r+0x9a>
 8004aea:	4621      	mov	r1, r4
 8004aec:	4628      	mov	r0, r5
 8004aee:	f000 f8f9 	bl	8004ce4 <__swsetup_r>
 8004af2:	b380      	cbz	r0, 8004b56 <_puts_r+0x9a>
 8004af4:	f04f 35ff 	mov.w	r5, #4294967295
 8004af8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004afa:	07da      	lsls	r2, r3, #31
 8004afc:	d405      	bmi.n	8004b0a <_puts_r+0x4e>
 8004afe:	89a3      	ldrh	r3, [r4, #12]
 8004b00:	059b      	lsls	r3, r3, #22
 8004b02:	d402      	bmi.n	8004b0a <_puts_r+0x4e>
 8004b04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b06:	f000 f9cd 	bl	8004ea4 <__retarget_lock_release_recursive>
 8004b0a:	4628      	mov	r0, r5
 8004b0c:	bd70      	pop	{r4, r5, r6, pc}
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	da04      	bge.n	8004b1c <_puts_r+0x60>
 8004b12:	69a2      	ldr	r2, [r4, #24]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	dc17      	bgt.n	8004b48 <_puts_r+0x8c>
 8004b18:	290a      	cmp	r1, #10
 8004b1a:	d015      	beq.n	8004b48 <_puts_r+0x8c>
 8004b1c:	6823      	ldr	r3, [r4, #0]
 8004b1e:	1c5a      	adds	r2, r3, #1
 8004b20:	6022      	str	r2, [r4, #0]
 8004b22:	7019      	strb	r1, [r3, #0]
 8004b24:	68a3      	ldr	r3, [r4, #8]
 8004b26:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	60a3      	str	r3, [r4, #8]
 8004b2e:	2900      	cmp	r1, #0
 8004b30:	d1ed      	bne.n	8004b0e <_puts_r+0x52>
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	da11      	bge.n	8004b5a <_puts_r+0x9e>
 8004b36:	4622      	mov	r2, r4
 8004b38:	210a      	movs	r1, #10
 8004b3a:	4628      	mov	r0, r5
 8004b3c:	f000 f893 	bl	8004c66 <__swbuf_r>
 8004b40:	3001      	adds	r0, #1
 8004b42:	d0d7      	beq.n	8004af4 <_puts_r+0x38>
 8004b44:	250a      	movs	r5, #10
 8004b46:	e7d7      	b.n	8004af8 <_puts_r+0x3c>
 8004b48:	4622      	mov	r2, r4
 8004b4a:	4628      	mov	r0, r5
 8004b4c:	f000 f88b 	bl	8004c66 <__swbuf_r>
 8004b50:	3001      	adds	r0, #1
 8004b52:	d1e7      	bne.n	8004b24 <_puts_r+0x68>
 8004b54:	e7ce      	b.n	8004af4 <_puts_r+0x38>
 8004b56:	3e01      	subs	r6, #1
 8004b58:	e7e4      	b.n	8004b24 <_puts_r+0x68>
 8004b5a:	6823      	ldr	r3, [r4, #0]
 8004b5c:	1c5a      	adds	r2, r3, #1
 8004b5e:	6022      	str	r2, [r4, #0]
 8004b60:	220a      	movs	r2, #10
 8004b62:	701a      	strb	r2, [r3, #0]
 8004b64:	e7ee      	b.n	8004b44 <_puts_r+0x88>
	...

08004b68 <puts>:
 8004b68:	4b02      	ldr	r3, [pc, #8]	@ (8004b74 <puts+0xc>)
 8004b6a:	4601      	mov	r1, r0
 8004b6c:	6818      	ldr	r0, [r3, #0]
 8004b6e:	f7ff bfa5 	b.w	8004abc <_puts_r>
 8004b72:	bf00      	nop
 8004b74:	20000018 	.word	0x20000018

08004b78 <sniprintf>:
 8004b78:	b40c      	push	{r2, r3}
 8004b7a:	b530      	push	{r4, r5, lr}
 8004b7c:	4b17      	ldr	r3, [pc, #92]	@ (8004bdc <sniprintf+0x64>)
 8004b7e:	1e0c      	subs	r4, r1, #0
 8004b80:	681d      	ldr	r5, [r3, #0]
 8004b82:	b09d      	sub	sp, #116	@ 0x74
 8004b84:	da08      	bge.n	8004b98 <sniprintf+0x20>
 8004b86:	238b      	movs	r3, #139	@ 0x8b
 8004b88:	f04f 30ff 	mov.w	r0, #4294967295
 8004b8c:	602b      	str	r3, [r5, #0]
 8004b8e:	b01d      	add	sp, #116	@ 0x74
 8004b90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b94:	b002      	add	sp, #8
 8004b96:	4770      	bx	lr
 8004b98:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004b9c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004ba0:	bf0c      	ite	eq
 8004ba2:	4623      	moveq	r3, r4
 8004ba4:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004ba8:	9304      	str	r3, [sp, #16]
 8004baa:	9307      	str	r3, [sp, #28]
 8004bac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004bb0:	9002      	str	r0, [sp, #8]
 8004bb2:	9006      	str	r0, [sp, #24]
 8004bb4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004bb8:	4628      	mov	r0, r5
 8004bba:	ab21      	add	r3, sp, #132	@ 0x84
 8004bbc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004bbe:	a902      	add	r1, sp, #8
 8004bc0:	9301      	str	r3, [sp, #4]
 8004bc2:	f000 fa23 	bl	800500c <_svfiprintf_r>
 8004bc6:	1c43      	adds	r3, r0, #1
 8004bc8:	bfbc      	itt	lt
 8004bca:	238b      	movlt	r3, #139	@ 0x8b
 8004bcc:	602b      	strlt	r3, [r5, #0]
 8004bce:	2c00      	cmp	r4, #0
 8004bd0:	d0dd      	beq.n	8004b8e <sniprintf+0x16>
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	9b02      	ldr	r3, [sp, #8]
 8004bd6:	701a      	strb	r2, [r3, #0]
 8004bd8:	e7d9      	b.n	8004b8e <sniprintf+0x16>
 8004bda:	bf00      	nop
 8004bdc:	20000018 	.word	0x20000018

08004be0 <__sread>:
 8004be0:	b510      	push	{r4, lr}
 8004be2:	460c      	mov	r4, r1
 8004be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004be8:	f000 f8fc 	bl	8004de4 <_read_r>
 8004bec:	2800      	cmp	r0, #0
 8004bee:	bfab      	itete	ge
 8004bf0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004bf2:	89a3      	ldrhlt	r3, [r4, #12]
 8004bf4:	181b      	addge	r3, r3, r0
 8004bf6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004bfa:	bfac      	ite	ge
 8004bfc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004bfe:	81a3      	strhlt	r3, [r4, #12]
 8004c00:	bd10      	pop	{r4, pc}

08004c02 <__swrite>:
 8004c02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c06:	461f      	mov	r7, r3
 8004c08:	898b      	ldrh	r3, [r1, #12]
 8004c0a:	4605      	mov	r5, r0
 8004c0c:	05db      	lsls	r3, r3, #23
 8004c0e:	460c      	mov	r4, r1
 8004c10:	4616      	mov	r6, r2
 8004c12:	d505      	bpl.n	8004c20 <__swrite+0x1e>
 8004c14:	2302      	movs	r3, #2
 8004c16:	2200      	movs	r2, #0
 8004c18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c1c:	f000 f8d0 	bl	8004dc0 <_lseek_r>
 8004c20:	89a3      	ldrh	r3, [r4, #12]
 8004c22:	4632      	mov	r2, r6
 8004c24:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004c28:	81a3      	strh	r3, [r4, #12]
 8004c2a:	4628      	mov	r0, r5
 8004c2c:	463b      	mov	r3, r7
 8004c2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c36:	f000 b8f7 	b.w	8004e28 <_write_r>

08004c3a <__sseek>:
 8004c3a:	b510      	push	{r4, lr}
 8004c3c:	460c      	mov	r4, r1
 8004c3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c42:	f000 f8bd 	bl	8004dc0 <_lseek_r>
 8004c46:	1c43      	adds	r3, r0, #1
 8004c48:	89a3      	ldrh	r3, [r4, #12]
 8004c4a:	bf15      	itete	ne
 8004c4c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004c4e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004c52:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004c56:	81a3      	strheq	r3, [r4, #12]
 8004c58:	bf18      	it	ne
 8004c5a:	81a3      	strhne	r3, [r4, #12]
 8004c5c:	bd10      	pop	{r4, pc}

08004c5e <__sclose>:
 8004c5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c62:	f000 b89d 	b.w	8004da0 <_close_r>

08004c66 <__swbuf_r>:
 8004c66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c68:	460e      	mov	r6, r1
 8004c6a:	4614      	mov	r4, r2
 8004c6c:	4605      	mov	r5, r0
 8004c6e:	b118      	cbz	r0, 8004c78 <__swbuf_r+0x12>
 8004c70:	6a03      	ldr	r3, [r0, #32]
 8004c72:	b90b      	cbnz	r3, 8004c78 <__swbuf_r+0x12>
 8004c74:	f7ff feec 	bl	8004a50 <__sinit>
 8004c78:	69a3      	ldr	r3, [r4, #24]
 8004c7a:	60a3      	str	r3, [r4, #8]
 8004c7c:	89a3      	ldrh	r3, [r4, #12]
 8004c7e:	071a      	lsls	r2, r3, #28
 8004c80:	d501      	bpl.n	8004c86 <__swbuf_r+0x20>
 8004c82:	6923      	ldr	r3, [r4, #16]
 8004c84:	b943      	cbnz	r3, 8004c98 <__swbuf_r+0x32>
 8004c86:	4621      	mov	r1, r4
 8004c88:	4628      	mov	r0, r5
 8004c8a:	f000 f82b 	bl	8004ce4 <__swsetup_r>
 8004c8e:	b118      	cbz	r0, 8004c98 <__swbuf_r+0x32>
 8004c90:	f04f 37ff 	mov.w	r7, #4294967295
 8004c94:	4638      	mov	r0, r7
 8004c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c98:	6823      	ldr	r3, [r4, #0]
 8004c9a:	6922      	ldr	r2, [r4, #16]
 8004c9c:	b2f6      	uxtb	r6, r6
 8004c9e:	1a98      	subs	r0, r3, r2
 8004ca0:	6963      	ldr	r3, [r4, #20]
 8004ca2:	4637      	mov	r7, r6
 8004ca4:	4283      	cmp	r3, r0
 8004ca6:	dc05      	bgt.n	8004cb4 <__swbuf_r+0x4e>
 8004ca8:	4621      	mov	r1, r4
 8004caa:	4628      	mov	r0, r5
 8004cac:	f000 fcbc 	bl	8005628 <_fflush_r>
 8004cb0:	2800      	cmp	r0, #0
 8004cb2:	d1ed      	bne.n	8004c90 <__swbuf_r+0x2a>
 8004cb4:	68a3      	ldr	r3, [r4, #8]
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	60a3      	str	r3, [r4, #8]
 8004cba:	6823      	ldr	r3, [r4, #0]
 8004cbc:	1c5a      	adds	r2, r3, #1
 8004cbe:	6022      	str	r2, [r4, #0]
 8004cc0:	701e      	strb	r6, [r3, #0]
 8004cc2:	6962      	ldr	r2, [r4, #20]
 8004cc4:	1c43      	adds	r3, r0, #1
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d004      	beq.n	8004cd4 <__swbuf_r+0x6e>
 8004cca:	89a3      	ldrh	r3, [r4, #12]
 8004ccc:	07db      	lsls	r3, r3, #31
 8004cce:	d5e1      	bpl.n	8004c94 <__swbuf_r+0x2e>
 8004cd0:	2e0a      	cmp	r6, #10
 8004cd2:	d1df      	bne.n	8004c94 <__swbuf_r+0x2e>
 8004cd4:	4621      	mov	r1, r4
 8004cd6:	4628      	mov	r0, r5
 8004cd8:	f000 fca6 	bl	8005628 <_fflush_r>
 8004cdc:	2800      	cmp	r0, #0
 8004cde:	d0d9      	beq.n	8004c94 <__swbuf_r+0x2e>
 8004ce0:	e7d6      	b.n	8004c90 <__swbuf_r+0x2a>
	...

08004ce4 <__swsetup_r>:
 8004ce4:	b538      	push	{r3, r4, r5, lr}
 8004ce6:	4b29      	ldr	r3, [pc, #164]	@ (8004d8c <__swsetup_r+0xa8>)
 8004ce8:	4605      	mov	r5, r0
 8004cea:	6818      	ldr	r0, [r3, #0]
 8004cec:	460c      	mov	r4, r1
 8004cee:	b118      	cbz	r0, 8004cf8 <__swsetup_r+0x14>
 8004cf0:	6a03      	ldr	r3, [r0, #32]
 8004cf2:	b90b      	cbnz	r3, 8004cf8 <__swsetup_r+0x14>
 8004cf4:	f7ff feac 	bl	8004a50 <__sinit>
 8004cf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cfc:	0719      	lsls	r1, r3, #28
 8004cfe:	d422      	bmi.n	8004d46 <__swsetup_r+0x62>
 8004d00:	06da      	lsls	r2, r3, #27
 8004d02:	d407      	bmi.n	8004d14 <__swsetup_r+0x30>
 8004d04:	2209      	movs	r2, #9
 8004d06:	602a      	str	r2, [r5, #0]
 8004d08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d10:	81a3      	strh	r3, [r4, #12]
 8004d12:	e033      	b.n	8004d7c <__swsetup_r+0x98>
 8004d14:	0758      	lsls	r0, r3, #29
 8004d16:	d512      	bpl.n	8004d3e <__swsetup_r+0x5a>
 8004d18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004d1a:	b141      	cbz	r1, 8004d2e <__swsetup_r+0x4a>
 8004d1c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004d20:	4299      	cmp	r1, r3
 8004d22:	d002      	beq.n	8004d2a <__swsetup_r+0x46>
 8004d24:	4628      	mov	r0, r5
 8004d26:	f000 f8cd 	bl	8004ec4 <_free_r>
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	6363      	str	r3, [r4, #52]	@ 0x34
 8004d2e:	89a3      	ldrh	r3, [r4, #12]
 8004d30:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004d34:	81a3      	strh	r3, [r4, #12]
 8004d36:	2300      	movs	r3, #0
 8004d38:	6063      	str	r3, [r4, #4]
 8004d3a:	6923      	ldr	r3, [r4, #16]
 8004d3c:	6023      	str	r3, [r4, #0]
 8004d3e:	89a3      	ldrh	r3, [r4, #12]
 8004d40:	f043 0308 	orr.w	r3, r3, #8
 8004d44:	81a3      	strh	r3, [r4, #12]
 8004d46:	6923      	ldr	r3, [r4, #16]
 8004d48:	b94b      	cbnz	r3, 8004d5e <__swsetup_r+0x7a>
 8004d4a:	89a3      	ldrh	r3, [r4, #12]
 8004d4c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004d50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d54:	d003      	beq.n	8004d5e <__swsetup_r+0x7a>
 8004d56:	4621      	mov	r1, r4
 8004d58:	4628      	mov	r0, r5
 8004d5a:	f000 fcb2 	bl	80056c2 <__smakebuf_r>
 8004d5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d62:	f013 0201 	ands.w	r2, r3, #1
 8004d66:	d00a      	beq.n	8004d7e <__swsetup_r+0x9a>
 8004d68:	2200      	movs	r2, #0
 8004d6a:	60a2      	str	r2, [r4, #8]
 8004d6c:	6962      	ldr	r2, [r4, #20]
 8004d6e:	4252      	negs	r2, r2
 8004d70:	61a2      	str	r2, [r4, #24]
 8004d72:	6922      	ldr	r2, [r4, #16]
 8004d74:	b942      	cbnz	r2, 8004d88 <__swsetup_r+0xa4>
 8004d76:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004d7a:	d1c5      	bne.n	8004d08 <__swsetup_r+0x24>
 8004d7c:	bd38      	pop	{r3, r4, r5, pc}
 8004d7e:	0799      	lsls	r1, r3, #30
 8004d80:	bf58      	it	pl
 8004d82:	6962      	ldrpl	r2, [r4, #20]
 8004d84:	60a2      	str	r2, [r4, #8]
 8004d86:	e7f4      	b.n	8004d72 <__swsetup_r+0x8e>
 8004d88:	2000      	movs	r0, #0
 8004d8a:	e7f7      	b.n	8004d7c <__swsetup_r+0x98>
 8004d8c:	20000018 	.word	0x20000018

08004d90 <memset>:
 8004d90:	4603      	mov	r3, r0
 8004d92:	4402      	add	r2, r0
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d100      	bne.n	8004d9a <memset+0xa>
 8004d98:	4770      	bx	lr
 8004d9a:	f803 1b01 	strb.w	r1, [r3], #1
 8004d9e:	e7f9      	b.n	8004d94 <memset+0x4>

08004da0 <_close_r>:
 8004da0:	b538      	push	{r3, r4, r5, lr}
 8004da2:	2300      	movs	r3, #0
 8004da4:	4d05      	ldr	r5, [pc, #20]	@ (8004dbc <_close_r+0x1c>)
 8004da6:	4604      	mov	r4, r0
 8004da8:	4608      	mov	r0, r1
 8004daa:	602b      	str	r3, [r5, #0]
 8004dac:	f7fc f957 	bl	800105e <_close>
 8004db0:	1c43      	adds	r3, r0, #1
 8004db2:	d102      	bne.n	8004dba <_close_r+0x1a>
 8004db4:	682b      	ldr	r3, [r5, #0]
 8004db6:	b103      	cbz	r3, 8004dba <_close_r+0x1a>
 8004db8:	6023      	str	r3, [r4, #0]
 8004dba:	bd38      	pop	{r3, r4, r5, pc}
 8004dbc:	20000328 	.word	0x20000328

08004dc0 <_lseek_r>:
 8004dc0:	b538      	push	{r3, r4, r5, lr}
 8004dc2:	4604      	mov	r4, r0
 8004dc4:	4608      	mov	r0, r1
 8004dc6:	4611      	mov	r1, r2
 8004dc8:	2200      	movs	r2, #0
 8004dca:	4d05      	ldr	r5, [pc, #20]	@ (8004de0 <_lseek_r+0x20>)
 8004dcc:	602a      	str	r2, [r5, #0]
 8004dce:	461a      	mov	r2, r3
 8004dd0:	f7fc f969 	bl	80010a6 <_lseek>
 8004dd4:	1c43      	adds	r3, r0, #1
 8004dd6:	d102      	bne.n	8004dde <_lseek_r+0x1e>
 8004dd8:	682b      	ldr	r3, [r5, #0]
 8004dda:	b103      	cbz	r3, 8004dde <_lseek_r+0x1e>
 8004ddc:	6023      	str	r3, [r4, #0]
 8004dde:	bd38      	pop	{r3, r4, r5, pc}
 8004de0:	20000328 	.word	0x20000328

08004de4 <_read_r>:
 8004de4:	b538      	push	{r3, r4, r5, lr}
 8004de6:	4604      	mov	r4, r0
 8004de8:	4608      	mov	r0, r1
 8004dea:	4611      	mov	r1, r2
 8004dec:	2200      	movs	r2, #0
 8004dee:	4d05      	ldr	r5, [pc, #20]	@ (8004e04 <_read_r+0x20>)
 8004df0:	602a      	str	r2, [r5, #0]
 8004df2:	461a      	mov	r2, r3
 8004df4:	f7fc f8fa 	bl	8000fec <_read>
 8004df8:	1c43      	adds	r3, r0, #1
 8004dfa:	d102      	bne.n	8004e02 <_read_r+0x1e>
 8004dfc:	682b      	ldr	r3, [r5, #0]
 8004dfe:	b103      	cbz	r3, 8004e02 <_read_r+0x1e>
 8004e00:	6023      	str	r3, [r4, #0]
 8004e02:	bd38      	pop	{r3, r4, r5, pc}
 8004e04:	20000328 	.word	0x20000328

08004e08 <_sbrk_r>:
 8004e08:	b538      	push	{r3, r4, r5, lr}
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	4d05      	ldr	r5, [pc, #20]	@ (8004e24 <_sbrk_r+0x1c>)
 8004e0e:	4604      	mov	r4, r0
 8004e10:	4608      	mov	r0, r1
 8004e12:	602b      	str	r3, [r5, #0]
 8004e14:	f7fc f954 	bl	80010c0 <_sbrk>
 8004e18:	1c43      	adds	r3, r0, #1
 8004e1a:	d102      	bne.n	8004e22 <_sbrk_r+0x1a>
 8004e1c:	682b      	ldr	r3, [r5, #0]
 8004e1e:	b103      	cbz	r3, 8004e22 <_sbrk_r+0x1a>
 8004e20:	6023      	str	r3, [r4, #0]
 8004e22:	bd38      	pop	{r3, r4, r5, pc}
 8004e24:	20000328 	.word	0x20000328

08004e28 <_write_r>:
 8004e28:	b538      	push	{r3, r4, r5, lr}
 8004e2a:	4604      	mov	r4, r0
 8004e2c:	4608      	mov	r0, r1
 8004e2e:	4611      	mov	r1, r2
 8004e30:	2200      	movs	r2, #0
 8004e32:	4d05      	ldr	r5, [pc, #20]	@ (8004e48 <_write_r+0x20>)
 8004e34:	602a      	str	r2, [r5, #0]
 8004e36:	461a      	mov	r2, r3
 8004e38:	f7fc f8f5 	bl	8001026 <_write>
 8004e3c:	1c43      	adds	r3, r0, #1
 8004e3e:	d102      	bne.n	8004e46 <_write_r+0x1e>
 8004e40:	682b      	ldr	r3, [r5, #0]
 8004e42:	b103      	cbz	r3, 8004e46 <_write_r+0x1e>
 8004e44:	6023      	str	r3, [r4, #0]
 8004e46:	bd38      	pop	{r3, r4, r5, pc}
 8004e48:	20000328 	.word	0x20000328

08004e4c <__errno>:
 8004e4c:	4b01      	ldr	r3, [pc, #4]	@ (8004e54 <__errno+0x8>)
 8004e4e:	6818      	ldr	r0, [r3, #0]
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	20000018 	.word	0x20000018

08004e58 <__libc_init_array>:
 8004e58:	b570      	push	{r4, r5, r6, lr}
 8004e5a:	2600      	movs	r6, #0
 8004e5c:	4d0c      	ldr	r5, [pc, #48]	@ (8004e90 <__libc_init_array+0x38>)
 8004e5e:	4c0d      	ldr	r4, [pc, #52]	@ (8004e94 <__libc_init_array+0x3c>)
 8004e60:	1b64      	subs	r4, r4, r5
 8004e62:	10a4      	asrs	r4, r4, #2
 8004e64:	42a6      	cmp	r6, r4
 8004e66:	d109      	bne.n	8004e7c <__libc_init_array+0x24>
 8004e68:	f000 fce8 	bl	800583c <_init>
 8004e6c:	2600      	movs	r6, #0
 8004e6e:	4d0a      	ldr	r5, [pc, #40]	@ (8004e98 <__libc_init_array+0x40>)
 8004e70:	4c0a      	ldr	r4, [pc, #40]	@ (8004e9c <__libc_init_array+0x44>)
 8004e72:	1b64      	subs	r4, r4, r5
 8004e74:	10a4      	asrs	r4, r4, #2
 8004e76:	42a6      	cmp	r6, r4
 8004e78:	d105      	bne.n	8004e86 <__libc_init_array+0x2e>
 8004e7a:	bd70      	pop	{r4, r5, r6, pc}
 8004e7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e80:	4798      	blx	r3
 8004e82:	3601      	adds	r6, #1
 8004e84:	e7ee      	b.n	8004e64 <__libc_init_array+0xc>
 8004e86:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e8a:	4798      	blx	r3
 8004e8c:	3601      	adds	r6, #1
 8004e8e:	e7f2      	b.n	8004e76 <__libc_init_array+0x1e>
 8004e90:	080059d4 	.word	0x080059d4
 8004e94:	080059d4 	.word	0x080059d4
 8004e98:	080059d4 	.word	0x080059d4
 8004e9c:	080059d8 	.word	0x080059d8

08004ea0 <__retarget_lock_init_recursive>:
 8004ea0:	4770      	bx	lr

08004ea2 <__retarget_lock_acquire_recursive>:
 8004ea2:	4770      	bx	lr

08004ea4 <__retarget_lock_release_recursive>:
 8004ea4:	4770      	bx	lr

08004ea6 <memcpy>:
 8004ea6:	440a      	add	r2, r1
 8004ea8:	4291      	cmp	r1, r2
 8004eaa:	f100 33ff 	add.w	r3, r0, #4294967295
 8004eae:	d100      	bne.n	8004eb2 <memcpy+0xc>
 8004eb0:	4770      	bx	lr
 8004eb2:	b510      	push	{r4, lr}
 8004eb4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004eb8:	4291      	cmp	r1, r2
 8004eba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ebe:	d1f9      	bne.n	8004eb4 <memcpy+0xe>
 8004ec0:	bd10      	pop	{r4, pc}
	...

08004ec4 <_free_r>:
 8004ec4:	b538      	push	{r3, r4, r5, lr}
 8004ec6:	4605      	mov	r5, r0
 8004ec8:	2900      	cmp	r1, #0
 8004eca:	d040      	beq.n	8004f4e <_free_r+0x8a>
 8004ecc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ed0:	1f0c      	subs	r4, r1, #4
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	bfb8      	it	lt
 8004ed6:	18e4      	addlt	r4, r4, r3
 8004ed8:	f7ff fd22 	bl	8004920 <__malloc_lock>
 8004edc:	4a1c      	ldr	r2, [pc, #112]	@ (8004f50 <_free_r+0x8c>)
 8004ede:	6813      	ldr	r3, [r2, #0]
 8004ee0:	b933      	cbnz	r3, 8004ef0 <_free_r+0x2c>
 8004ee2:	6063      	str	r3, [r4, #4]
 8004ee4:	6014      	str	r4, [r2, #0]
 8004ee6:	4628      	mov	r0, r5
 8004ee8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004eec:	f7ff bd1e 	b.w	800492c <__malloc_unlock>
 8004ef0:	42a3      	cmp	r3, r4
 8004ef2:	d908      	bls.n	8004f06 <_free_r+0x42>
 8004ef4:	6820      	ldr	r0, [r4, #0]
 8004ef6:	1821      	adds	r1, r4, r0
 8004ef8:	428b      	cmp	r3, r1
 8004efa:	bf01      	itttt	eq
 8004efc:	6819      	ldreq	r1, [r3, #0]
 8004efe:	685b      	ldreq	r3, [r3, #4]
 8004f00:	1809      	addeq	r1, r1, r0
 8004f02:	6021      	streq	r1, [r4, #0]
 8004f04:	e7ed      	b.n	8004ee2 <_free_r+0x1e>
 8004f06:	461a      	mov	r2, r3
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	b10b      	cbz	r3, 8004f10 <_free_r+0x4c>
 8004f0c:	42a3      	cmp	r3, r4
 8004f0e:	d9fa      	bls.n	8004f06 <_free_r+0x42>
 8004f10:	6811      	ldr	r1, [r2, #0]
 8004f12:	1850      	adds	r0, r2, r1
 8004f14:	42a0      	cmp	r0, r4
 8004f16:	d10b      	bne.n	8004f30 <_free_r+0x6c>
 8004f18:	6820      	ldr	r0, [r4, #0]
 8004f1a:	4401      	add	r1, r0
 8004f1c:	1850      	adds	r0, r2, r1
 8004f1e:	4283      	cmp	r3, r0
 8004f20:	6011      	str	r1, [r2, #0]
 8004f22:	d1e0      	bne.n	8004ee6 <_free_r+0x22>
 8004f24:	6818      	ldr	r0, [r3, #0]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	4408      	add	r0, r1
 8004f2a:	6010      	str	r0, [r2, #0]
 8004f2c:	6053      	str	r3, [r2, #4]
 8004f2e:	e7da      	b.n	8004ee6 <_free_r+0x22>
 8004f30:	d902      	bls.n	8004f38 <_free_r+0x74>
 8004f32:	230c      	movs	r3, #12
 8004f34:	602b      	str	r3, [r5, #0]
 8004f36:	e7d6      	b.n	8004ee6 <_free_r+0x22>
 8004f38:	6820      	ldr	r0, [r4, #0]
 8004f3a:	1821      	adds	r1, r4, r0
 8004f3c:	428b      	cmp	r3, r1
 8004f3e:	bf01      	itttt	eq
 8004f40:	6819      	ldreq	r1, [r3, #0]
 8004f42:	685b      	ldreq	r3, [r3, #4]
 8004f44:	1809      	addeq	r1, r1, r0
 8004f46:	6021      	streq	r1, [r4, #0]
 8004f48:	6063      	str	r3, [r4, #4]
 8004f4a:	6054      	str	r4, [r2, #4]
 8004f4c:	e7cb      	b.n	8004ee6 <_free_r+0x22>
 8004f4e:	bd38      	pop	{r3, r4, r5, pc}
 8004f50:	200001e8 	.word	0x200001e8

08004f54 <__ssputs_r>:
 8004f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f58:	461f      	mov	r7, r3
 8004f5a:	688e      	ldr	r6, [r1, #8]
 8004f5c:	4682      	mov	sl, r0
 8004f5e:	42be      	cmp	r6, r7
 8004f60:	460c      	mov	r4, r1
 8004f62:	4690      	mov	r8, r2
 8004f64:	680b      	ldr	r3, [r1, #0]
 8004f66:	d82d      	bhi.n	8004fc4 <__ssputs_r+0x70>
 8004f68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004f6c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004f70:	d026      	beq.n	8004fc0 <__ssputs_r+0x6c>
 8004f72:	6965      	ldr	r5, [r4, #20]
 8004f74:	6909      	ldr	r1, [r1, #16]
 8004f76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f7a:	eba3 0901 	sub.w	r9, r3, r1
 8004f7e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004f82:	1c7b      	adds	r3, r7, #1
 8004f84:	444b      	add	r3, r9
 8004f86:	106d      	asrs	r5, r5, #1
 8004f88:	429d      	cmp	r5, r3
 8004f8a:	bf38      	it	cc
 8004f8c:	461d      	movcc	r5, r3
 8004f8e:	0553      	lsls	r3, r2, #21
 8004f90:	d527      	bpl.n	8004fe2 <__ssputs_r+0x8e>
 8004f92:	4629      	mov	r1, r5
 8004f94:	f7ff fc44 	bl	8004820 <_malloc_r>
 8004f98:	4606      	mov	r6, r0
 8004f9a:	b360      	cbz	r0, 8004ff6 <__ssputs_r+0xa2>
 8004f9c:	464a      	mov	r2, r9
 8004f9e:	6921      	ldr	r1, [r4, #16]
 8004fa0:	f7ff ff81 	bl	8004ea6 <memcpy>
 8004fa4:	89a3      	ldrh	r3, [r4, #12]
 8004fa6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004faa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fae:	81a3      	strh	r3, [r4, #12]
 8004fb0:	6126      	str	r6, [r4, #16]
 8004fb2:	444e      	add	r6, r9
 8004fb4:	6026      	str	r6, [r4, #0]
 8004fb6:	463e      	mov	r6, r7
 8004fb8:	6165      	str	r5, [r4, #20]
 8004fba:	eba5 0509 	sub.w	r5, r5, r9
 8004fbe:	60a5      	str	r5, [r4, #8]
 8004fc0:	42be      	cmp	r6, r7
 8004fc2:	d900      	bls.n	8004fc6 <__ssputs_r+0x72>
 8004fc4:	463e      	mov	r6, r7
 8004fc6:	4632      	mov	r2, r6
 8004fc8:	4641      	mov	r1, r8
 8004fca:	6820      	ldr	r0, [r4, #0]
 8004fcc:	f000 fbb5 	bl	800573a <memmove>
 8004fd0:	2000      	movs	r0, #0
 8004fd2:	68a3      	ldr	r3, [r4, #8]
 8004fd4:	1b9b      	subs	r3, r3, r6
 8004fd6:	60a3      	str	r3, [r4, #8]
 8004fd8:	6823      	ldr	r3, [r4, #0]
 8004fda:	4433      	add	r3, r6
 8004fdc:	6023      	str	r3, [r4, #0]
 8004fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fe2:	462a      	mov	r2, r5
 8004fe4:	f000 fbf4 	bl	80057d0 <_realloc_r>
 8004fe8:	4606      	mov	r6, r0
 8004fea:	2800      	cmp	r0, #0
 8004fec:	d1e0      	bne.n	8004fb0 <__ssputs_r+0x5c>
 8004fee:	4650      	mov	r0, sl
 8004ff0:	6921      	ldr	r1, [r4, #16]
 8004ff2:	f7ff ff67 	bl	8004ec4 <_free_r>
 8004ff6:	230c      	movs	r3, #12
 8004ff8:	f8ca 3000 	str.w	r3, [sl]
 8004ffc:	89a3      	ldrh	r3, [r4, #12]
 8004ffe:	f04f 30ff 	mov.w	r0, #4294967295
 8005002:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005006:	81a3      	strh	r3, [r4, #12]
 8005008:	e7e9      	b.n	8004fde <__ssputs_r+0x8a>
	...

0800500c <_svfiprintf_r>:
 800500c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005010:	4698      	mov	r8, r3
 8005012:	898b      	ldrh	r3, [r1, #12]
 8005014:	4607      	mov	r7, r0
 8005016:	061b      	lsls	r3, r3, #24
 8005018:	460d      	mov	r5, r1
 800501a:	4614      	mov	r4, r2
 800501c:	b09d      	sub	sp, #116	@ 0x74
 800501e:	d510      	bpl.n	8005042 <_svfiprintf_r+0x36>
 8005020:	690b      	ldr	r3, [r1, #16]
 8005022:	b973      	cbnz	r3, 8005042 <_svfiprintf_r+0x36>
 8005024:	2140      	movs	r1, #64	@ 0x40
 8005026:	f7ff fbfb 	bl	8004820 <_malloc_r>
 800502a:	6028      	str	r0, [r5, #0]
 800502c:	6128      	str	r0, [r5, #16]
 800502e:	b930      	cbnz	r0, 800503e <_svfiprintf_r+0x32>
 8005030:	230c      	movs	r3, #12
 8005032:	603b      	str	r3, [r7, #0]
 8005034:	f04f 30ff 	mov.w	r0, #4294967295
 8005038:	b01d      	add	sp, #116	@ 0x74
 800503a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800503e:	2340      	movs	r3, #64	@ 0x40
 8005040:	616b      	str	r3, [r5, #20]
 8005042:	2300      	movs	r3, #0
 8005044:	9309      	str	r3, [sp, #36]	@ 0x24
 8005046:	2320      	movs	r3, #32
 8005048:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800504c:	2330      	movs	r3, #48	@ 0x30
 800504e:	f04f 0901 	mov.w	r9, #1
 8005052:	f8cd 800c 	str.w	r8, [sp, #12]
 8005056:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80051f0 <_svfiprintf_r+0x1e4>
 800505a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800505e:	4623      	mov	r3, r4
 8005060:	469a      	mov	sl, r3
 8005062:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005066:	b10a      	cbz	r2, 800506c <_svfiprintf_r+0x60>
 8005068:	2a25      	cmp	r2, #37	@ 0x25
 800506a:	d1f9      	bne.n	8005060 <_svfiprintf_r+0x54>
 800506c:	ebba 0b04 	subs.w	fp, sl, r4
 8005070:	d00b      	beq.n	800508a <_svfiprintf_r+0x7e>
 8005072:	465b      	mov	r3, fp
 8005074:	4622      	mov	r2, r4
 8005076:	4629      	mov	r1, r5
 8005078:	4638      	mov	r0, r7
 800507a:	f7ff ff6b 	bl	8004f54 <__ssputs_r>
 800507e:	3001      	adds	r0, #1
 8005080:	f000 80a7 	beq.w	80051d2 <_svfiprintf_r+0x1c6>
 8005084:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005086:	445a      	add	r2, fp
 8005088:	9209      	str	r2, [sp, #36]	@ 0x24
 800508a:	f89a 3000 	ldrb.w	r3, [sl]
 800508e:	2b00      	cmp	r3, #0
 8005090:	f000 809f 	beq.w	80051d2 <_svfiprintf_r+0x1c6>
 8005094:	2300      	movs	r3, #0
 8005096:	f04f 32ff 	mov.w	r2, #4294967295
 800509a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800509e:	f10a 0a01 	add.w	sl, sl, #1
 80050a2:	9304      	str	r3, [sp, #16]
 80050a4:	9307      	str	r3, [sp, #28]
 80050a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80050aa:	931a      	str	r3, [sp, #104]	@ 0x68
 80050ac:	4654      	mov	r4, sl
 80050ae:	2205      	movs	r2, #5
 80050b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050b4:	484e      	ldr	r0, [pc, #312]	@ (80051f0 <_svfiprintf_r+0x1e4>)
 80050b6:	f000 fb7d 	bl	80057b4 <memchr>
 80050ba:	9a04      	ldr	r2, [sp, #16]
 80050bc:	b9d8      	cbnz	r0, 80050f6 <_svfiprintf_r+0xea>
 80050be:	06d0      	lsls	r0, r2, #27
 80050c0:	bf44      	itt	mi
 80050c2:	2320      	movmi	r3, #32
 80050c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80050c8:	0711      	lsls	r1, r2, #28
 80050ca:	bf44      	itt	mi
 80050cc:	232b      	movmi	r3, #43	@ 0x2b
 80050ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80050d2:	f89a 3000 	ldrb.w	r3, [sl]
 80050d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80050d8:	d015      	beq.n	8005106 <_svfiprintf_r+0xfa>
 80050da:	4654      	mov	r4, sl
 80050dc:	2000      	movs	r0, #0
 80050de:	f04f 0c0a 	mov.w	ip, #10
 80050e2:	9a07      	ldr	r2, [sp, #28]
 80050e4:	4621      	mov	r1, r4
 80050e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050ea:	3b30      	subs	r3, #48	@ 0x30
 80050ec:	2b09      	cmp	r3, #9
 80050ee:	d94b      	bls.n	8005188 <_svfiprintf_r+0x17c>
 80050f0:	b1b0      	cbz	r0, 8005120 <_svfiprintf_r+0x114>
 80050f2:	9207      	str	r2, [sp, #28]
 80050f4:	e014      	b.n	8005120 <_svfiprintf_r+0x114>
 80050f6:	eba0 0308 	sub.w	r3, r0, r8
 80050fa:	fa09 f303 	lsl.w	r3, r9, r3
 80050fe:	4313      	orrs	r3, r2
 8005100:	46a2      	mov	sl, r4
 8005102:	9304      	str	r3, [sp, #16]
 8005104:	e7d2      	b.n	80050ac <_svfiprintf_r+0xa0>
 8005106:	9b03      	ldr	r3, [sp, #12]
 8005108:	1d19      	adds	r1, r3, #4
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	9103      	str	r1, [sp, #12]
 800510e:	2b00      	cmp	r3, #0
 8005110:	bfbb      	ittet	lt
 8005112:	425b      	neglt	r3, r3
 8005114:	f042 0202 	orrlt.w	r2, r2, #2
 8005118:	9307      	strge	r3, [sp, #28]
 800511a:	9307      	strlt	r3, [sp, #28]
 800511c:	bfb8      	it	lt
 800511e:	9204      	strlt	r2, [sp, #16]
 8005120:	7823      	ldrb	r3, [r4, #0]
 8005122:	2b2e      	cmp	r3, #46	@ 0x2e
 8005124:	d10a      	bne.n	800513c <_svfiprintf_r+0x130>
 8005126:	7863      	ldrb	r3, [r4, #1]
 8005128:	2b2a      	cmp	r3, #42	@ 0x2a
 800512a:	d132      	bne.n	8005192 <_svfiprintf_r+0x186>
 800512c:	9b03      	ldr	r3, [sp, #12]
 800512e:	3402      	adds	r4, #2
 8005130:	1d1a      	adds	r2, r3, #4
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	9203      	str	r2, [sp, #12]
 8005136:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800513a:	9305      	str	r3, [sp, #20]
 800513c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80051f4 <_svfiprintf_r+0x1e8>
 8005140:	2203      	movs	r2, #3
 8005142:	4650      	mov	r0, sl
 8005144:	7821      	ldrb	r1, [r4, #0]
 8005146:	f000 fb35 	bl	80057b4 <memchr>
 800514a:	b138      	cbz	r0, 800515c <_svfiprintf_r+0x150>
 800514c:	2240      	movs	r2, #64	@ 0x40
 800514e:	9b04      	ldr	r3, [sp, #16]
 8005150:	eba0 000a 	sub.w	r0, r0, sl
 8005154:	4082      	lsls	r2, r0
 8005156:	4313      	orrs	r3, r2
 8005158:	3401      	adds	r4, #1
 800515a:	9304      	str	r3, [sp, #16]
 800515c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005160:	2206      	movs	r2, #6
 8005162:	4825      	ldr	r0, [pc, #148]	@ (80051f8 <_svfiprintf_r+0x1ec>)
 8005164:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005168:	f000 fb24 	bl	80057b4 <memchr>
 800516c:	2800      	cmp	r0, #0
 800516e:	d036      	beq.n	80051de <_svfiprintf_r+0x1d2>
 8005170:	4b22      	ldr	r3, [pc, #136]	@ (80051fc <_svfiprintf_r+0x1f0>)
 8005172:	bb1b      	cbnz	r3, 80051bc <_svfiprintf_r+0x1b0>
 8005174:	9b03      	ldr	r3, [sp, #12]
 8005176:	3307      	adds	r3, #7
 8005178:	f023 0307 	bic.w	r3, r3, #7
 800517c:	3308      	adds	r3, #8
 800517e:	9303      	str	r3, [sp, #12]
 8005180:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005182:	4433      	add	r3, r6
 8005184:	9309      	str	r3, [sp, #36]	@ 0x24
 8005186:	e76a      	b.n	800505e <_svfiprintf_r+0x52>
 8005188:	460c      	mov	r4, r1
 800518a:	2001      	movs	r0, #1
 800518c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005190:	e7a8      	b.n	80050e4 <_svfiprintf_r+0xd8>
 8005192:	2300      	movs	r3, #0
 8005194:	f04f 0c0a 	mov.w	ip, #10
 8005198:	4619      	mov	r1, r3
 800519a:	3401      	adds	r4, #1
 800519c:	9305      	str	r3, [sp, #20]
 800519e:	4620      	mov	r0, r4
 80051a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051a4:	3a30      	subs	r2, #48	@ 0x30
 80051a6:	2a09      	cmp	r2, #9
 80051a8:	d903      	bls.n	80051b2 <_svfiprintf_r+0x1a6>
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d0c6      	beq.n	800513c <_svfiprintf_r+0x130>
 80051ae:	9105      	str	r1, [sp, #20]
 80051b0:	e7c4      	b.n	800513c <_svfiprintf_r+0x130>
 80051b2:	4604      	mov	r4, r0
 80051b4:	2301      	movs	r3, #1
 80051b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80051ba:	e7f0      	b.n	800519e <_svfiprintf_r+0x192>
 80051bc:	ab03      	add	r3, sp, #12
 80051be:	9300      	str	r3, [sp, #0]
 80051c0:	462a      	mov	r2, r5
 80051c2:	4638      	mov	r0, r7
 80051c4:	4b0e      	ldr	r3, [pc, #56]	@ (8005200 <_svfiprintf_r+0x1f4>)
 80051c6:	a904      	add	r1, sp, #16
 80051c8:	f3af 8000 	nop.w
 80051cc:	1c42      	adds	r2, r0, #1
 80051ce:	4606      	mov	r6, r0
 80051d0:	d1d6      	bne.n	8005180 <_svfiprintf_r+0x174>
 80051d2:	89ab      	ldrh	r3, [r5, #12]
 80051d4:	065b      	lsls	r3, r3, #25
 80051d6:	f53f af2d 	bmi.w	8005034 <_svfiprintf_r+0x28>
 80051da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80051dc:	e72c      	b.n	8005038 <_svfiprintf_r+0x2c>
 80051de:	ab03      	add	r3, sp, #12
 80051e0:	9300      	str	r3, [sp, #0]
 80051e2:	462a      	mov	r2, r5
 80051e4:	4638      	mov	r0, r7
 80051e6:	4b06      	ldr	r3, [pc, #24]	@ (8005200 <_svfiprintf_r+0x1f4>)
 80051e8:	a904      	add	r1, sp, #16
 80051ea:	f000 f87d 	bl	80052e8 <_printf_i>
 80051ee:	e7ed      	b.n	80051cc <_svfiprintf_r+0x1c0>
 80051f0:	08005996 	.word	0x08005996
 80051f4:	0800599c 	.word	0x0800599c
 80051f8:	080059a0 	.word	0x080059a0
 80051fc:	00000000 	.word	0x00000000
 8005200:	08004f55 	.word	0x08004f55

08005204 <_printf_common>:
 8005204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005208:	4616      	mov	r6, r2
 800520a:	4698      	mov	r8, r3
 800520c:	688a      	ldr	r2, [r1, #8]
 800520e:	690b      	ldr	r3, [r1, #16]
 8005210:	4607      	mov	r7, r0
 8005212:	4293      	cmp	r3, r2
 8005214:	bfb8      	it	lt
 8005216:	4613      	movlt	r3, r2
 8005218:	6033      	str	r3, [r6, #0]
 800521a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800521e:	460c      	mov	r4, r1
 8005220:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005224:	b10a      	cbz	r2, 800522a <_printf_common+0x26>
 8005226:	3301      	adds	r3, #1
 8005228:	6033      	str	r3, [r6, #0]
 800522a:	6823      	ldr	r3, [r4, #0]
 800522c:	0699      	lsls	r1, r3, #26
 800522e:	bf42      	ittt	mi
 8005230:	6833      	ldrmi	r3, [r6, #0]
 8005232:	3302      	addmi	r3, #2
 8005234:	6033      	strmi	r3, [r6, #0]
 8005236:	6825      	ldr	r5, [r4, #0]
 8005238:	f015 0506 	ands.w	r5, r5, #6
 800523c:	d106      	bne.n	800524c <_printf_common+0x48>
 800523e:	f104 0a19 	add.w	sl, r4, #25
 8005242:	68e3      	ldr	r3, [r4, #12]
 8005244:	6832      	ldr	r2, [r6, #0]
 8005246:	1a9b      	subs	r3, r3, r2
 8005248:	42ab      	cmp	r3, r5
 800524a:	dc2b      	bgt.n	80052a4 <_printf_common+0xa0>
 800524c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005250:	6822      	ldr	r2, [r4, #0]
 8005252:	3b00      	subs	r3, #0
 8005254:	bf18      	it	ne
 8005256:	2301      	movne	r3, #1
 8005258:	0692      	lsls	r2, r2, #26
 800525a:	d430      	bmi.n	80052be <_printf_common+0xba>
 800525c:	4641      	mov	r1, r8
 800525e:	4638      	mov	r0, r7
 8005260:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005264:	47c8      	blx	r9
 8005266:	3001      	adds	r0, #1
 8005268:	d023      	beq.n	80052b2 <_printf_common+0xae>
 800526a:	6823      	ldr	r3, [r4, #0]
 800526c:	6922      	ldr	r2, [r4, #16]
 800526e:	f003 0306 	and.w	r3, r3, #6
 8005272:	2b04      	cmp	r3, #4
 8005274:	bf14      	ite	ne
 8005276:	2500      	movne	r5, #0
 8005278:	6833      	ldreq	r3, [r6, #0]
 800527a:	f04f 0600 	mov.w	r6, #0
 800527e:	bf08      	it	eq
 8005280:	68e5      	ldreq	r5, [r4, #12]
 8005282:	f104 041a 	add.w	r4, r4, #26
 8005286:	bf08      	it	eq
 8005288:	1aed      	subeq	r5, r5, r3
 800528a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800528e:	bf08      	it	eq
 8005290:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005294:	4293      	cmp	r3, r2
 8005296:	bfc4      	itt	gt
 8005298:	1a9b      	subgt	r3, r3, r2
 800529a:	18ed      	addgt	r5, r5, r3
 800529c:	42b5      	cmp	r5, r6
 800529e:	d11a      	bne.n	80052d6 <_printf_common+0xd2>
 80052a0:	2000      	movs	r0, #0
 80052a2:	e008      	b.n	80052b6 <_printf_common+0xb2>
 80052a4:	2301      	movs	r3, #1
 80052a6:	4652      	mov	r2, sl
 80052a8:	4641      	mov	r1, r8
 80052aa:	4638      	mov	r0, r7
 80052ac:	47c8      	blx	r9
 80052ae:	3001      	adds	r0, #1
 80052b0:	d103      	bne.n	80052ba <_printf_common+0xb6>
 80052b2:	f04f 30ff 	mov.w	r0, #4294967295
 80052b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052ba:	3501      	adds	r5, #1
 80052bc:	e7c1      	b.n	8005242 <_printf_common+0x3e>
 80052be:	2030      	movs	r0, #48	@ 0x30
 80052c0:	18e1      	adds	r1, r4, r3
 80052c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80052c6:	1c5a      	adds	r2, r3, #1
 80052c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80052cc:	4422      	add	r2, r4
 80052ce:	3302      	adds	r3, #2
 80052d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80052d4:	e7c2      	b.n	800525c <_printf_common+0x58>
 80052d6:	2301      	movs	r3, #1
 80052d8:	4622      	mov	r2, r4
 80052da:	4641      	mov	r1, r8
 80052dc:	4638      	mov	r0, r7
 80052de:	47c8      	blx	r9
 80052e0:	3001      	adds	r0, #1
 80052e2:	d0e6      	beq.n	80052b2 <_printf_common+0xae>
 80052e4:	3601      	adds	r6, #1
 80052e6:	e7d9      	b.n	800529c <_printf_common+0x98>

080052e8 <_printf_i>:
 80052e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052ec:	7e0f      	ldrb	r7, [r1, #24]
 80052ee:	4691      	mov	r9, r2
 80052f0:	2f78      	cmp	r7, #120	@ 0x78
 80052f2:	4680      	mov	r8, r0
 80052f4:	460c      	mov	r4, r1
 80052f6:	469a      	mov	sl, r3
 80052f8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80052fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80052fe:	d807      	bhi.n	8005310 <_printf_i+0x28>
 8005300:	2f62      	cmp	r7, #98	@ 0x62
 8005302:	d80a      	bhi.n	800531a <_printf_i+0x32>
 8005304:	2f00      	cmp	r7, #0
 8005306:	f000 80d3 	beq.w	80054b0 <_printf_i+0x1c8>
 800530a:	2f58      	cmp	r7, #88	@ 0x58
 800530c:	f000 80ba 	beq.w	8005484 <_printf_i+0x19c>
 8005310:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005314:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005318:	e03a      	b.n	8005390 <_printf_i+0xa8>
 800531a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800531e:	2b15      	cmp	r3, #21
 8005320:	d8f6      	bhi.n	8005310 <_printf_i+0x28>
 8005322:	a101      	add	r1, pc, #4	@ (adr r1, 8005328 <_printf_i+0x40>)
 8005324:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005328:	08005381 	.word	0x08005381
 800532c:	08005395 	.word	0x08005395
 8005330:	08005311 	.word	0x08005311
 8005334:	08005311 	.word	0x08005311
 8005338:	08005311 	.word	0x08005311
 800533c:	08005311 	.word	0x08005311
 8005340:	08005395 	.word	0x08005395
 8005344:	08005311 	.word	0x08005311
 8005348:	08005311 	.word	0x08005311
 800534c:	08005311 	.word	0x08005311
 8005350:	08005311 	.word	0x08005311
 8005354:	08005497 	.word	0x08005497
 8005358:	080053bf 	.word	0x080053bf
 800535c:	08005451 	.word	0x08005451
 8005360:	08005311 	.word	0x08005311
 8005364:	08005311 	.word	0x08005311
 8005368:	080054b9 	.word	0x080054b9
 800536c:	08005311 	.word	0x08005311
 8005370:	080053bf 	.word	0x080053bf
 8005374:	08005311 	.word	0x08005311
 8005378:	08005311 	.word	0x08005311
 800537c:	08005459 	.word	0x08005459
 8005380:	6833      	ldr	r3, [r6, #0]
 8005382:	1d1a      	adds	r2, r3, #4
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	6032      	str	r2, [r6, #0]
 8005388:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800538c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005390:	2301      	movs	r3, #1
 8005392:	e09e      	b.n	80054d2 <_printf_i+0x1ea>
 8005394:	6833      	ldr	r3, [r6, #0]
 8005396:	6820      	ldr	r0, [r4, #0]
 8005398:	1d19      	adds	r1, r3, #4
 800539a:	6031      	str	r1, [r6, #0]
 800539c:	0606      	lsls	r6, r0, #24
 800539e:	d501      	bpl.n	80053a4 <_printf_i+0xbc>
 80053a0:	681d      	ldr	r5, [r3, #0]
 80053a2:	e003      	b.n	80053ac <_printf_i+0xc4>
 80053a4:	0645      	lsls	r5, r0, #25
 80053a6:	d5fb      	bpl.n	80053a0 <_printf_i+0xb8>
 80053a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80053ac:	2d00      	cmp	r5, #0
 80053ae:	da03      	bge.n	80053b8 <_printf_i+0xd0>
 80053b0:	232d      	movs	r3, #45	@ 0x2d
 80053b2:	426d      	negs	r5, r5
 80053b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053b8:	230a      	movs	r3, #10
 80053ba:	4859      	ldr	r0, [pc, #356]	@ (8005520 <_printf_i+0x238>)
 80053bc:	e011      	b.n	80053e2 <_printf_i+0xfa>
 80053be:	6821      	ldr	r1, [r4, #0]
 80053c0:	6833      	ldr	r3, [r6, #0]
 80053c2:	0608      	lsls	r0, r1, #24
 80053c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80053c8:	d402      	bmi.n	80053d0 <_printf_i+0xe8>
 80053ca:	0649      	lsls	r1, r1, #25
 80053cc:	bf48      	it	mi
 80053ce:	b2ad      	uxthmi	r5, r5
 80053d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80053d2:	6033      	str	r3, [r6, #0]
 80053d4:	bf14      	ite	ne
 80053d6:	230a      	movne	r3, #10
 80053d8:	2308      	moveq	r3, #8
 80053da:	4851      	ldr	r0, [pc, #324]	@ (8005520 <_printf_i+0x238>)
 80053dc:	2100      	movs	r1, #0
 80053de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80053e2:	6866      	ldr	r6, [r4, #4]
 80053e4:	2e00      	cmp	r6, #0
 80053e6:	bfa8      	it	ge
 80053e8:	6821      	ldrge	r1, [r4, #0]
 80053ea:	60a6      	str	r6, [r4, #8]
 80053ec:	bfa4      	itt	ge
 80053ee:	f021 0104 	bicge.w	r1, r1, #4
 80053f2:	6021      	strge	r1, [r4, #0]
 80053f4:	b90d      	cbnz	r5, 80053fa <_printf_i+0x112>
 80053f6:	2e00      	cmp	r6, #0
 80053f8:	d04b      	beq.n	8005492 <_printf_i+0x1aa>
 80053fa:	4616      	mov	r6, r2
 80053fc:	fbb5 f1f3 	udiv	r1, r5, r3
 8005400:	fb03 5711 	mls	r7, r3, r1, r5
 8005404:	5dc7      	ldrb	r7, [r0, r7]
 8005406:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800540a:	462f      	mov	r7, r5
 800540c:	42bb      	cmp	r3, r7
 800540e:	460d      	mov	r5, r1
 8005410:	d9f4      	bls.n	80053fc <_printf_i+0x114>
 8005412:	2b08      	cmp	r3, #8
 8005414:	d10b      	bne.n	800542e <_printf_i+0x146>
 8005416:	6823      	ldr	r3, [r4, #0]
 8005418:	07df      	lsls	r7, r3, #31
 800541a:	d508      	bpl.n	800542e <_printf_i+0x146>
 800541c:	6923      	ldr	r3, [r4, #16]
 800541e:	6861      	ldr	r1, [r4, #4]
 8005420:	4299      	cmp	r1, r3
 8005422:	bfde      	ittt	le
 8005424:	2330      	movle	r3, #48	@ 0x30
 8005426:	f806 3c01 	strble.w	r3, [r6, #-1]
 800542a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800542e:	1b92      	subs	r2, r2, r6
 8005430:	6122      	str	r2, [r4, #16]
 8005432:	464b      	mov	r3, r9
 8005434:	4621      	mov	r1, r4
 8005436:	4640      	mov	r0, r8
 8005438:	f8cd a000 	str.w	sl, [sp]
 800543c:	aa03      	add	r2, sp, #12
 800543e:	f7ff fee1 	bl	8005204 <_printf_common>
 8005442:	3001      	adds	r0, #1
 8005444:	d14a      	bne.n	80054dc <_printf_i+0x1f4>
 8005446:	f04f 30ff 	mov.w	r0, #4294967295
 800544a:	b004      	add	sp, #16
 800544c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005450:	6823      	ldr	r3, [r4, #0]
 8005452:	f043 0320 	orr.w	r3, r3, #32
 8005456:	6023      	str	r3, [r4, #0]
 8005458:	2778      	movs	r7, #120	@ 0x78
 800545a:	4832      	ldr	r0, [pc, #200]	@ (8005524 <_printf_i+0x23c>)
 800545c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005460:	6823      	ldr	r3, [r4, #0]
 8005462:	6831      	ldr	r1, [r6, #0]
 8005464:	061f      	lsls	r7, r3, #24
 8005466:	f851 5b04 	ldr.w	r5, [r1], #4
 800546a:	d402      	bmi.n	8005472 <_printf_i+0x18a>
 800546c:	065f      	lsls	r7, r3, #25
 800546e:	bf48      	it	mi
 8005470:	b2ad      	uxthmi	r5, r5
 8005472:	6031      	str	r1, [r6, #0]
 8005474:	07d9      	lsls	r1, r3, #31
 8005476:	bf44      	itt	mi
 8005478:	f043 0320 	orrmi.w	r3, r3, #32
 800547c:	6023      	strmi	r3, [r4, #0]
 800547e:	b11d      	cbz	r5, 8005488 <_printf_i+0x1a0>
 8005480:	2310      	movs	r3, #16
 8005482:	e7ab      	b.n	80053dc <_printf_i+0xf4>
 8005484:	4826      	ldr	r0, [pc, #152]	@ (8005520 <_printf_i+0x238>)
 8005486:	e7e9      	b.n	800545c <_printf_i+0x174>
 8005488:	6823      	ldr	r3, [r4, #0]
 800548a:	f023 0320 	bic.w	r3, r3, #32
 800548e:	6023      	str	r3, [r4, #0]
 8005490:	e7f6      	b.n	8005480 <_printf_i+0x198>
 8005492:	4616      	mov	r6, r2
 8005494:	e7bd      	b.n	8005412 <_printf_i+0x12a>
 8005496:	6833      	ldr	r3, [r6, #0]
 8005498:	6825      	ldr	r5, [r4, #0]
 800549a:	1d18      	adds	r0, r3, #4
 800549c:	6961      	ldr	r1, [r4, #20]
 800549e:	6030      	str	r0, [r6, #0]
 80054a0:	062e      	lsls	r6, r5, #24
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	d501      	bpl.n	80054aa <_printf_i+0x1c2>
 80054a6:	6019      	str	r1, [r3, #0]
 80054a8:	e002      	b.n	80054b0 <_printf_i+0x1c8>
 80054aa:	0668      	lsls	r0, r5, #25
 80054ac:	d5fb      	bpl.n	80054a6 <_printf_i+0x1be>
 80054ae:	8019      	strh	r1, [r3, #0]
 80054b0:	2300      	movs	r3, #0
 80054b2:	4616      	mov	r6, r2
 80054b4:	6123      	str	r3, [r4, #16]
 80054b6:	e7bc      	b.n	8005432 <_printf_i+0x14a>
 80054b8:	6833      	ldr	r3, [r6, #0]
 80054ba:	2100      	movs	r1, #0
 80054bc:	1d1a      	adds	r2, r3, #4
 80054be:	6032      	str	r2, [r6, #0]
 80054c0:	681e      	ldr	r6, [r3, #0]
 80054c2:	6862      	ldr	r2, [r4, #4]
 80054c4:	4630      	mov	r0, r6
 80054c6:	f000 f975 	bl	80057b4 <memchr>
 80054ca:	b108      	cbz	r0, 80054d0 <_printf_i+0x1e8>
 80054cc:	1b80      	subs	r0, r0, r6
 80054ce:	6060      	str	r0, [r4, #4]
 80054d0:	6863      	ldr	r3, [r4, #4]
 80054d2:	6123      	str	r3, [r4, #16]
 80054d4:	2300      	movs	r3, #0
 80054d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054da:	e7aa      	b.n	8005432 <_printf_i+0x14a>
 80054dc:	4632      	mov	r2, r6
 80054de:	4649      	mov	r1, r9
 80054e0:	4640      	mov	r0, r8
 80054e2:	6923      	ldr	r3, [r4, #16]
 80054e4:	47d0      	blx	sl
 80054e6:	3001      	adds	r0, #1
 80054e8:	d0ad      	beq.n	8005446 <_printf_i+0x15e>
 80054ea:	6823      	ldr	r3, [r4, #0]
 80054ec:	079b      	lsls	r3, r3, #30
 80054ee:	d413      	bmi.n	8005518 <_printf_i+0x230>
 80054f0:	68e0      	ldr	r0, [r4, #12]
 80054f2:	9b03      	ldr	r3, [sp, #12]
 80054f4:	4298      	cmp	r0, r3
 80054f6:	bfb8      	it	lt
 80054f8:	4618      	movlt	r0, r3
 80054fa:	e7a6      	b.n	800544a <_printf_i+0x162>
 80054fc:	2301      	movs	r3, #1
 80054fe:	4632      	mov	r2, r6
 8005500:	4649      	mov	r1, r9
 8005502:	4640      	mov	r0, r8
 8005504:	47d0      	blx	sl
 8005506:	3001      	adds	r0, #1
 8005508:	d09d      	beq.n	8005446 <_printf_i+0x15e>
 800550a:	3501      	adds	r5, #1
 800550c:	68e3      	ldr	r3, [r4, #12]
 800550e:	9903      	ldr	r1, [sp, #12]
 8005510:	1a5b      	subs	r3, r3, r1
 8005512:	42ab      	cmp	r3, r5
 8005514:	dcf2      	bgt.n	80054fc <_printf_i+0x214>
 8005516:	e7eb      	b.n	80054f0 <_printf_i+0x208>
 8005518:	2500      	movs	r5, #0
 800551a:	f104 0619 	add.w	r6, r4, #25
 800551e:	e7f5      	b.n	800550c <_printf_i+0x224>
 8005520:	080059a7 	.word	0x080059a7
 8005524:	080059b8 	.word	0x080059b8

08005528 <__sflush_r>:
 8005528:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800552c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800552e:	0716      	lsls	r6, r2, #28
 8005530:	4605      	mov	r5, r0
 8005532:	460c      	mov	r4, r1
 8005534:	d454      	bmi.n	80055e0 <__sflush_r+0xb8>
 8005536:	684b      	ldr	r3, [r1, #4]
 8005538:	2b00      	cmp	r3, #0
 800553a:	dc02      	bgt.n	8005542 <__sflush_r+0x1a>
 800553c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800553e:	2b00      	cmp	r3, #0
 8005540:	dd48      	ble.n	80055d4 <__sflush_r+0xac>
 8005542:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005544:	2e00      	cmp	r6, #0
 8005546:	d045      	beq.n	80055d4 <__sflush_r+0xac>
 8005548:	2300      	movs	r3, #0
 800554a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800554e:	682f      	ldr	r7, [r5, #0]
 8005550:	6a21      	ldr	r1, [r4, #32]
 8005552:	602b      	str	r3, [r5, #0]
 8005554:	d030      	beq.n	80055b8 <__sflush_r+0x90>
 8005556:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005558:	89a3      	ldrh	r3, [r4, #12]
 800555a:	0759      	lsls	r1, r3, #29
 800555c:	d505      	bpl.n	800556a <__sflush_r+0x42>
 800555e:	6863      	ldr	r3, [r4, #4]
 8005560:	1ad2      	subs	r2, r2, r3
 8005562:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005564:	b10b      	cbz	r3, 800556a <__sflush_r+0x42>
 8005566:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005568:	1ad2      	subs	r2, r2, r3
 800556a:	2300      	movs	r3, #0
 800556c:	4628      	mov	r0, r5
 800556e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005570:	6a21      	ldr	r1, [r4, #32]
 8005572:	47b0      	blx	r6
 8005574:	1c43      	adds	r3, r0, #1
 8005576:	89a3      	ldrh	r3, [r4, #12]
 8005578:	d106      	bne.n	8005588 <__sflush_r+0x60>
 800557a:	6829      	ldr	r1, [r5, #0]
 800557c:	291d      	cmp	r1, #29
 800557e:	d82b      	bhi.n	80055d8 <__sflush_r+0xb0>
 8005580:	4a28      	ldr	r2, [pc, #160]	@ (8005624 <__sflush_r+0xfc>)
 8005582:	410a      	asrs	r2, r1
 8005584:	07d6      	lsls	r6, r2, #31
 8005586:	d427      	bmi.n	80055d8 <__sflush_r+0xb0>
 8005588:	2200      	movs	r2, #0
 800558a:	6062      	str	r2, [r4, #4]
 800558c:	6922      	ldr	r2, [r4, #16]
 800558e:	04d9      	lsls	r1, r3, #19
 8005590:	6022      	str	r2, [r4, #0]
 8005592:	d504      	bpl.n	800559e <__sflush_r+0x76>
 8005594:	1c42      	adds	r2, r0, #1
 8005596:	d101      	bne.n	800559c <__sflush_r+0x74>
 8005598:	682b      	ldr	r3, [r5, #0]
 800559a:	b903      	cbnz	r3, 800559e <__sflush_r+0x76>
 800559c:	6560      	str	r0, [r4, #84]	@ 0x54
 800559e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80055a0:	602f      	str	r7, [r5, #0]
 80055a2:	b1b9      	cbz	r1, 80055d4 <__sflush_r+0xac>
 80055a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80055a8:	4299      	cmp	r1, r3
 80055aa:	d002      	beq.n	80055b2 <__sflush_r+0x8a>
 80055ac:	4628      	mov	r0, r5
 80055ae:	f7ff fc89 	bl	8004ec4 <_free_r>
 80055b2:	2300      	movs	r3, #0
 80055b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80055b6:	e00d      	b.n	80055d4 <__sflush_r+0xac>
 80055b8:	2301      	movs	r3, #1
 80055ba:	4628      	mov	r0, r5
 80055bc:	47b0      	blx	r6
 80055be:	4602      	mov	r2, r0
 80055c0:	1c50      	adds	r0, r2, #1
 80055c2:	d1c9      	bne.n	8005558 <__sflush_r+0x30>
 80055c4:	682b      	ldr	r3, [r5, #0]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d0c6      	beq.n	8005558 <__sflush_r+0x30>
 80055ca:	2b1d      	cmp	r3, #29
 80055cc:	d001      	beq.n	80055d2 <__sflush_r+0xaa>
 80055ce:	2b16      	cmp	r3, #22
 80055d0:	d11d      	bne.n	800560e <__sflush_r+0xe6>
 80055d2:	602f      	str	r7, [r5, #0]
 80055d4:	2000      	movs	r0, #0
 80055d6:	e021      	b.n	800561c <__sflush_r+0xf4>
 80055d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80055dc:	b21b      	sxth	r3, r3
 80055de:	e01a      	b.n	8005616 <__sflush_r+0xee>
 80055e0:	690f      	ldr	r7, [r1, #16]
 80055e2:	2f00      	cmp	r7, #0
 80055e4:	d0f6      	beq.n	80055d4 <__sflush_r+0xac>
 80055e6:	0793      	lsls	r3, r2, #30
 80055e8:	bf18      	it	ne
 80055ea:	2300      	movne	r3, #0
 80055ec:	680e      	ldr	r6, [r1, #0]
 80055ee:	bf08      	it	eq
 80055f0:	694b      	ldreq	r3, [r1, #20]
 80055f2:	1bf6      	subs	r6, r6, r7
 80055f4:	600f      	str	r7, [r1, #0]
 80055f6:	608b      	str	r3, [r1, #8]
 80055f8:	2e00      	cmp	r6, #0
 80055fa:	ddeb      	ble.n	80055d4 <__sflush_r+0xac>
 80055fc:	4633      	mov	r3, r6
 80055fe:	463a      	mov	r2, r7
 8005600:	4628      	mov	r0, r5
 8005602:	6a21      	ldr	r1, [r4, #32]
 8005604:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005608:	47e0      	blx	ip
 800560a:	2800      	cmp	r0, #0
 800560c:	dc07      	bgt.n	800561e <__sflush_r+0xf6>
 800560e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005612:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005616:	f04f 30ff 	mov.w	r0, #4294967295
 800561a:	81a3      	strh	r3, [r4, #12]
 800561c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800561e:	4407      	add	r7, r0
 8005620:	1a36      	subs	r6, r6, r0
 8005622:	e7e9      	b.n	80055f8 <__sflush_r+0xd0>
 8005624:	dfbffffe 	.word	0xdfbffffe

08005628 <_fflush_r>:
 8005628:	b538      	push	{r3, r4, r5, lr}
 800562a:	690b      	ldr	r3, [r1, #16]
 800562c:	4605      	mov	r5, r0
 800562e:	460c      	mov	r4, r1
 8005630:	b913      	cbnz	r3, 8005638 <_fflush_r+0x10>
 8005632:	2500      	movs	r5, #0
 8005634:	4628      	mov	r0, r5
 8005636:	bd38      	pop	{r3, r4, r5, pc}
 8005638:	b118      	cbz	r0, 8005642 <_fflush_r+0x1a>
 800563a:	6a03      	ldr	r3, [r0, #32]
 800563c:	b90b      	cbnz	r3, 8005642 <_fflush_r+0x1a>
 800563e:	f7ff fa07 	bl	8004a50 <__sinit>
 8005642:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d0f3      	beq.n	8005632 <_fflush_r+0xa>
 800564a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800564c:	07d0      	lsls	r0, r2, #31
 800564e:	d404      	bmi.n	800565a <_fflush_r+0x32>
 8005650:	0599      	lsls	r1, r3, #22
 8005652:	d402      	bmi.n	800565a <_fflush_r+0x32>
 8005654:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005656:	f7ff fc24 	bl	8004ea2 <__retarget_lock_acquire_recursive>
 800565a:	4628      	mov	r0, r5
 800565c:	4621      	mov	r1, r4
 800565e:	f7ff ff63 	bl	8005528 <__sflush_r>
 8005662:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005664:	4605      	mov	r5, r0
 8005666:	07da      	lsls	r2, r3, #31
 8005668:	d4e4      	bmi.n	8005634 <_fflush_r+0xc>
 800566a:	89a3      	ldrh	r3, [r4, #12]
 800566c:	059b      	lsls	r3, r3, #22
 800566e:	d4e1      	bmi.n	8005634 <_fflush_r+0xc>
 8005670:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005672:	f7ff fc17 	bl	8004ea4 <__retarget_lock_release_recursive>
 8005676:	e7dd      	b.n	8005634 <_fflush_r+0xc>

08005678 <__swhatbuf_r>:
 8005678:	b570      	push	{r4, r5, r6, lr}
 800567a:	460c      	mov	r4, r1
 800567c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005680:	4615      	mov	r5, r2
 8005682:	2900      	cmp	r1, #0
 8005684:	461e      	mov	r6, r3
 8005686:	b096      	sub	sp, #88	@ 0x58
 8005688:	da0c      	bge.n	80056a4 <__swhatbuf_r+0x2c>
 800568a:	89a3      	ldrh	r3, [r4, #12]
 800568c:	2100      	movs	r1, #0
 800568e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005692:	bf14      	ite	ne
 8005694:	2340      	movne	r3, #64	@ 0x40
 8005696:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800569a:	2000      	movs	r0, #0
 800569c:	6031      	str	r1, [r6, #0]
 800569e:	602b      	str	r3, [r5, #0]
 80056a0:	b016      	add	sp, #88	@ 0x58
 80056a2:	bd70      	pop	{r4, r5, r6, pc}
 80056a4:	466a      	mov	r2, sp
 80056a6:	f000 f863 	bl	8005770 <_fstat_r>
 80056aa:	2800      	cmp	r0, #0
 80056ac:	dbed      	blt.n	800568a <__swhatbuf_r+0x12>
 80056ae:	9901      	ldr	r1, [sp, #4]
 80056b0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80056b4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80056b8:	4259      	negs	r1, r3
 80056ba:	4159      	adcs	r1, r3
 80056bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80056c0:	e7eb      	b.n	800569a <__swhatbuf_r+0x22>

080056c2 <__smakebuf_r>:
 80056c2:	898b      	ldrh	r3, [r1, #12]
 80056c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056c6:	079d      	lsls	r5, r3, #30
 80056c8:	4606      	mov	r6, r0
 80056ca:	460c      	mov	r4, r1
 80056cc:	d507      	bpl.n	80056de <__smakebuf_r+0x1c>
 80056ce:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80056d2:	6023      	str	r3, [r4, #0]
 80056d4:	6123      	str	r3, [r4, #16]
 80056d6:	2301      	movs	r3, #1
 80056d8:	6163      	str	r3, [r4, #20]
 80056da:	b003      	add	sp, #12
 80056dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056de:	466a      	mov	r2, sp
 80056e0:	ab01      	add	r3, sp, #4
 80056e2:	f7ff ffc9 	bl	8005678 <__swhatbuf_r>
 80056e6:	9f00      	ldr	r7, [sp, #0]
 80056e8:	4605      	mov	r5, r0
 80056ea:	4639      	mov	r1, r7
 80056ec:	4630      	mov	r0, r6
 80056ee:	f7ff f897 	bl	8004820 <_malloc_r>
 80056f2:	b948      	cbnz	r0, 8005708 <__smakebuf_r+0x46>
 80056f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056f8:	059a      	lsls	r2, r3, #22
 80056fa:	d4ee      	bmi.n	80056da <__smakebuf_r+0x18>
 80056fc:	f023 0303 	bic.w	r3, r3, #3
 8005700:	f043 0302 	orr.w	r3, r3, #2
 8005704:	81a3      	strh	r3, [r4, #12]
 8005706:	e7e2      	b.n	80056ce <__smakebuf_r+0xc>
 8005708:	89a3      	ldrh	r3, [r4, #12]
 800570a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800570e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005712:	81a3      	strh	r3, [r4, #12]
 8005714:	9b01      	ldr	r3, [sp, #4]
 8005716:	6020      	str	r0, [r4, #0]
 8005718:	b15b      	cbz	r3, 8005732 <__smakebuf_r+0x70>
 800571a:	4630      	mov	r0, r6
 800571c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005720:	f000 f838 	bl	8005794 <_isatty_r>
 8005724:	b128      	cbz	r0, 8005732 <__smakebuf_r+0x70>
 8005726:	89a3      	ldrh	r3, [r4, #12]
 8005728:	f023 0303 	bic.w	r3, r3, #3
 800572c:	f043 0301 	orr.w	r3, r3, #1
 8005730:	81a3      	strh	r3, [r4, #12]
 8005732:	89a3      	ldrh	r3, [r4, #12]
 8005734:	431d      	orrs	r5, r3
 8005736:	81a5      	strh	r5, [r4, #12]
 8005738:	e7cf      	b.n	80056da <__smakebuf_r+0x18>

0800573a <memmove>:
 800573a:	4288      	cmp	r0, r1
 800573c:	b510      	push	{r4, lr}
 800573e:	eb01 0402 	add.w	r4, r1, r2
 8005742:	d902      	bls.n	800574a <memmove+0x10>
 8005744:	4284      	cmp	r4, r0
 8005746:	4623      	mov	r3, r4
 8005748:	d807      	bhi.n	800575a <memmove+0x20>
 800574a:	1e43      	subs	r3, r0, #1
 800574c:	42a1      	cmp	r1, r4
 800574e:	d008      	beq.n	8005762 <memmove+0x28>
 8005750:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005754:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005758:	e7f8      	b.n	800574c <memmove+0x12>
 800575a:	4601      	mov	r1, r0
 800575c:	4402      	add	r2, r0
 800575e:	428a      	cmp	r2, r1
 8005760:	d100      	bne.n	8005764 <memmove+0x2a>
 8005762:	bd10      	pop	{r4, pc}
 8005764:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005768:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800576c:	e7f7      	b.n	800575e <memmove+0x24>
	...

08005770 <_fstat_r>:
 8005770:	b538      	push	{r3, r4, r5, lr}
 8005772:	2300      	movs	r3, #0
 8005774:	4d06      	ldr	r5, [pc, #24]	@ (8005790 <_fstat_r+0x20>)
 8005776:	4604      	mov	r4, r0
 8005778:	4608      	mov	r0, r1
 800577a:	4611      	mov	r1, r2
 800577c:	602b      	str	r3, [r5, #0]
 800577e:	f7fb fc79 	bl	8001074 <_fstat>
 8005782:	1c43      	adds	r3, r0, #1
 8005784:	d102      	bne.n	800578c <_fstat_r+0x1c>
 8005786:	682b      	ldr	r3, [r5, #0]
 8005788:	b103      	cbz	r3, 800578c <_fstat_r+0x1c>
 800578a:	6023      	str	r3, [r4, #0]
 800578c:	bd38      	pop	{r3, r4, r5, pc}
 800578e:	bf00      	nop
 8005790:	20000328 	.word	0x20000328

08005794 <_isatty_r>:
 8005794:	b538      	push	{r3, r4, r5, lr}
 8005796:	2300      	movs	r3, #0
 8005798:	4d05      	ldr	r5, [pc, #20]	@ (80057b0 <_isatty_r+0x1c>)
 800579a:	4604      	mov	r4, r0
 800579c:	4608      	mov	r0, r1
 800579e:	602b      	str	r3, [r5, #0]
 80057a0:	f7fb fc77 	bl	8001092 <_isatty>
 80057a4:	1c43      	adds	r3, r0, #1
 80057a6:	d102      	bne.n	80057ae <_isatty_r+0x1a>
 80057a8:	682b      	ldr	r3, [r5, #0]
 80057aa:	b103      	cbz	r3, 80057ae <_isatty_r+0x1a>
 80057ac:	6023      	str	r3, [r4, #0]
 80057ae:	bd38      	pop	{r3, r4, r5, pc}
 80057b0:	20000328 	.word	0x20000328

080057b4 <memchr>:
 80057b4:	4603      	mov	r3, r0
 80057b6:	b510      	push	{r4, lr}
 80057b8:	b2c9      	uxtb	r1, r1
 80057ba:	4402      	add	r2, r0
 80057bc:	4293      	cmp	r3, r2
 80057be:	4618      	mov	r0, r3
 80057c0:	d101      	bne.n	80057c6 <memchr+0x12>
 80057c2:	2000      	movs	r0, #0
 80057c4:	e003      	b.n	80057ce <memchr+0x1a>
 80057c6:	7804      	ldrb	r4, [r0, #0]
 80057c8:	3301      	adds	r3, #1
 80057ca:	428c      	cmp	r4, r1
 80057cc:	d1f6      	bne.n	80057bc <memchr+0x8>
 80057ce:	bd10      	pop	{r4, pc}

080057d0 <_realloc_r>:
 80057d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057d4:	4680      	mov	r8, r0
 80057d6:	4615      	mov	r5, r2
 80057d8:	460c      	mov	r4, r1
 80057da:	b921      	cbnz	r1, 80057e6 <_realloc_r+0x16>
 80057dc:	4611      	mov	r1, r2
 80057de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057e2:	f7ff b81d 	b.w	8004820 <_malloc_r>
 80057e6:	b92a      	cbnz	r2, 80057f4 <_realloc_r+0x24>
 80057e8:	f7ff fb6c 	bl	8004ec4 <_free_r>
 80057ec:	2400      	movs	r4, #0
 80057ee:	4620      	mov	r0, r4
 80057f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057f4:	f000 f81a 	bl	800582c <_malloc_usable_size_r>
 80057f8:	4285      	cmp	r5, r0
 80057fa:	4606      	mov	r6, r0
 80057fc:	d802      	bhi.n	8005804 <_realloc_r+0x34>
 80057fe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005802:	d8f4      	bhi.n	80057ee <_realloc_r+0x1e>
 8005804:	4629      	mov	r1, r5
 8005806:	4640      	mov	r0, r8
 8005808:	f7ff f80a 	bl	8004820 <_malloc_r>
 800580c:	4607      	mov	r7, r0
 800580e:	2800      	cmp	r0, #0
 8005810:	d0ec      	beq.n	80057ec <_realloc_r+0x1c>
 8005812:	42b5      	cmp	r5, r6
 8005814:	462a      	mov	r2, r5
 8005816:	4621      	mov	r1, r4
 8005818:	bf28      	it	cs
 800581a:	4632      	movcs	r2, r6
 800581c:	f7ff fb43 	bl	8004ea6 <memcpy>
 8005820:	4621      	mov	r1, r4
 8005822:	4640      	mov	r0, r8
 8005824:	f7ff fb4e 	bl	8004ec4 <_free_r>
 8005828:	463c      	mov	r4, r7
 800582a:	e7e0      	b.n	80057ee <_realloc_r+0x1e>

0800582c <_malloc_usable_size_r>:
 800582c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005830:	1f18      	subs	r0, r3, #4
 8005832:	2b00      	cmp	r3, #0
 8005834:	bfbc      	itt	lt
 8005836:	580b      	ldrlt	r3, [r1, r0]
 8005838:	18c0      	addlt	r0, r0, r3
 800583a:	4770      	bx	lr

0800583c <_init>:
 800583c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800583e:	bf00      	nop
 8005840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005842:	bc08      	pop	{r3}
 8005844:	469e      	mov	lr, r3
 8005846:	4770      	bx	lr

08005848 <_fini>:
 8005848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800584a:	bf00      	nop
 800584c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800584e:	bc08      	pop	{r3}
 8005850:	469e      	mov	lr, r3
 8005852:	4770      	bx	lr
