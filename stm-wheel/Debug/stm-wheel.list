
stm-wheel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049d8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08004ae4  08004ae4  00005ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c54  08004c54  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004c54  08004c54  00005c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c5c  08004c5c  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c5c  08004c5c  00005c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c60  08004c60  00005c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004c64  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  20000068  08004ccc  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  08004ccc  000062ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009ca5  00000000  00000000  00006091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c23  00000000  00000000  0000fd36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000908  00000000  00000000  00011960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006df  00000000  00000000  00012268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018070  00000000  00000000  00012947  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a8ae  00000000  00000000  0002a9b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086b65  00000000  00000000  00035265  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bbdca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002db4  00000000  00000000  000bbe10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000bebc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08004acc 	.word	0x08004acc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08004acc 	.word	0x08004acc

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000160:	f000 febe 	bl	8000ee0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000164:	f000 f846 	bl	80001f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000168:	f000 f8fc 	bl	8000364 <MX_GPIO_Init>
  MX_CAN_Init();
 800016c:	f000 f882 	bl	8000274 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000170:	f000 f8ce 	bl	8000310 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan);
 8000174:	481c      	ldr	r0, [pc, #112]	@ (80001e8 <main+0x8c>)
 8000176:	f001 f8fd 	bl	8001374 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 800017a:	2110      	movs	r1, #16
 800017c:	481a      	ldr	r0, [pc, #104]	@ (80001e8 <main+0x8c>)
 800017e:	f001 fb2d 	bl	80017dc <HAL_CAN_ActivateNotification>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);   // Turn LED off
 8000182:	2201      	movs	r2, #1
 8000184:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000188:	4818      	ldr	r0, [pc, #96]	@ (80001ec <main+0x90>)
 800018a:	f002 f8d6 	bl	800233a <HAL_GPIO_WritePin>
	telemetry_data.tRpm = 0;
 800018e:	4b18      	ldr	r3, [pc, #96]	@ (80001f0 <main+0x94>)
 8000190:	2200      	movs	r2, #0
 8000192:	601a      	str	r2, [r3, #0]
	telemetry_data.tRpm = 0;
 8000194:	4b16      	ldr	r3, [pc, #88]	@ (80001f0 <main+0x94>)
 8000196:	2200      	movs	r2, #0
 8000198:	601a      	str	r2, [r3, #0]
	telemetry_data.tSpeedKmh = 0;
 800019a:	4b15      	ldr	r3, [pc, #84]	@ (80001f0 <main+0x94>)
 800019c:	2200      	movs	r2, #0
 800019e:	609a      	str	r2, [r3, #8]
	telemetry_data.tHasDRS = 0;
 80001a0:	4b13      	ldr	r3, [pc, #76]	@ (80001f0 <main+0x94>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	60da      	str	r2, [r3, #12]
	telemetry_data.tDrs = 0;
 80001a6:	4b12      	ldr	r3, [pc, #72]	@ (80001f0 <main+0x94>)
 80001a8:	2200      	movs	r2, #0
 80001aa:	611a      	str	r2, [r3, #16]
	telemetry_data.tPitLim = 0;
 80001ac:	4b10      	ldr	r3, [pc, #64]	@ (80001f0 <main+0x94>)
 80001ae:	2200      	movs	r2, #0
 80001b0:	615a      	str	r2, [r3, #20]
	telemetry_data.tFuel = 0;
 80001b2:	4b0f      	ldr	r3, [pc, #60]	@ (80001f0 <main+0x94>)
 80001b4:	2200      	movs	r2, #0
 80001b6:	619a      	str	r2, [r3, #24]
	telemetry_data.tBrakeBias = 0;
 80001b8:	4b0d      	ldr	r3, [pc, #52]	@ (80001f0 <main+0x94>)
 80001ba:	2200      	movs	r2, #0
 80001bc:	61da      	str	r2, [r3, #28]
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);   // Turn LED off
 80001be:	2200      	movs	r2, #0
 80001c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001c4:	4809      	ldr	r0, [pc, #36]	@ (80001ec <main+0x90>)
 80001c6:	f002 f8b8 	bl	800233a <HAL_GPIO_WritePin>

	  updateTelemetry();
 80001ca:	f000 f94b 	bl	8000464 <updateTelemetry>
	  updateButtons();
 80001ce:	f000 fa61 	bl	8000694 <updateButtons>

	  CAN_Transmit();
 80001d2:	f000 fb89 	bl	80008e8 <CAN_Transmit>

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);   // Turn LED off
 80001d6:	2201      	movs	r2, #1
 80001d8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <main+0x90>)
 80001de:	f002 f8ac 	bl	800233a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);   // Turn LED off
 80001e2:	bf00      	nop
 80001e4:	e7eb      	b.n	80001be <main+0x62>
 80001e6:	bf00      	nop
 80001e8:	200000b8 	.word	0x200000b8
 80001ec:	40011000 	.word	0x40011000
 80001f0:	20000084 	.word	0x20000084

080001f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b090      	sub	sp, #64	@ 0x40
 80001f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fa:	f107 0318 	add.w	r3, r7, #24
 80001fe:	2228      	movs	r2, #40	@ 0x28
 8000200:	2100      	movs	r1, #0
 8000202:	4618      	mov	r0, r3
 8000204:	f003 fdcc 	bl	8003da0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000208:	1d3b      	adds	r3, r7, #4
 800020a:	2200      	movs	r2, #0
 800020c:	601a      	str	r2, [r3, #0]
 800020e:	605a      	str	r2, [r3, #4]
 8000210:	609a      	str	r2, [r3, #8]
 8000212:	60da      	str	r2, [r3, #12]
 8000214:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000216:	2302      	movs	r3, #2
 8000218:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800021a:	2301      	movs	r3, #1
 800021c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800021e:	2310      	movs	r3, #16
 8000220:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000222:	2302      	movs	r3, #2
 8000224:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000226:	2300      	movs	r3, #0
 8000228:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800022a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800022e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000230:	f107 0318 	add.w	r3, r7, #24
 8000234:	4618      	mov	r0, r3
 8000236:	f002 f899 	bl	800236c <HAL_RCC_OscConfig>
 800023a:	4603      	mov	r3, r0
 800023c:	2b00      	cmp	r3, #0
 800023e:	d001      	beq.n	8000244 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000240:	f000 fc2c 	bl	8000a9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000244:	230f      	movs	r3, #15
 8000246:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000248:	2302      	movs	r3, #2
 800024a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800024c:	2300      	movs	r3, #0
 800024e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000250:	2300      	movs	r3, #0
 8000252:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000254:	2300      	movs	r3, #0
 8000256:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000258:	1d3b      	adds	r3, r7, #4
 800025a:	2101      	movs	r1, #1
 800025c:	4618      	mov	r0, r3
 800025e:	f002 fb07 	bl	8002870 <HAL_RCC_ClockConfig>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	d001      	beq.n	800026c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000268:	f000 fc18 	bl	8000a9c <Error_Handler>
  }
}
 800026c:	bf00      	nop
 800026e:	3740      	adds	r7, #64	@ 0x40
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}

08000274 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b08a      	sub	sp, #40	@ 0x28
 8000278:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800027a:	4b23      	ldr	r3, [pc, #140]	@ (8000308 <MX_CAN_Init+0x94>)
 800027c:	4a23      	ldr	r2, [pc, #140]	@ (800030c <MX_CAN_Init+0x98>)
 800027e:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 3;
 8000280:	4b21      	ldr	r3, [pc, #132]	@ (8000308 <MX_CAN_Init+0x94>)
 8000282:	2203      	movs	r2, #3
 8000284:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000286:	4b20      	ldr	r3, [pc, #128]	@ (8000308 <MX_CAN_Init+0x94>)
 8000288:	2200      	movs	r2, #0
 800028a:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800028c:	4b1e      	ldr	r3, [pc, #120]	@ (8000308 <MX_CAN_Init+0x94>)
 800028e:	2200      	movs	r2, #0
 8000290:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000292:	4b1d      	ldr	r3, [pc, #116]	@ (8000308 <MX_CAN_Init+0x94>)
 8000294:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000298:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 800029a:	4b1b      	ldr	r3, [pc, #108]	@ (8000308 <MX_CAN_Init+0x94>)
 800029c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80002a0:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80002a2:	4b19      	ldr	r3, [pc, #100]	@ (8000308 <MX_CAN_Init+0x94>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80002a8:	4b17      	ldr	r3, [pc, #92]	@ (8000308 <MX_CAN_Init+0x94>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80002ae:	4b16      	ldr	r3, [pc, #88]	@ (8000308 <MX_CAN_Init+0x94>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80002b4:	4b14      	ldr	r3, [pc, #80]	@ (8000308 <MX_CAN_Init+0x94>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80002ba:	4b13      	ldr	r3, [pc, #76]	@ (8000308 <MX_CAN_Init+0x94>)
 80002bc:	2200      	movs	r2, #0
 80002be:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80002c0:	4b11      	ldr	r3, [pc, #68]	@ (8000308 <MX_CAN_Init+0x94>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80002c6:	4810      	ldr	r0, [pc, #64]	@ (8000308 <MX_CAN_Init+0x94>)
 80002c8:	f000 fe90 	bl	8000fec <HAL_CAN_Init>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 80002d2:	f000 fbe3 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef filterConfig;

  filterConfig.FilterBank = 0;
 80002d6:	2300      	movs	r3, #0
 80002d8:	617b      	str	r3, [r7, #20]
  filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80002da:	2300      	movs	r3, #0
 80002dc:	61bb      	str	r3, [r7, #24]
  filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80002de:	2301      	movs	r3, #1
 80002e0:	61fb      	str	r3, [r7, #28]
  filterConfig.FilterIdHigh = 0x100 << 5;       // Accept all IDs
 80002e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80002e6:	603b      	str	r3, [r7, #0]
  filterConfig.FilterMaskIdHigh = 0x7FF << 5;;   // Accept all IDs
 80002e8:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80002ec:	60bb      	str	r3, [r7, #8]
  filterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;  // Assign to FIFO 1
 80002ee:	2301      	movs	r3, #1
 80002f0:	613b      	str	r3, [r7, #16]
  filterConfig.FilterActivation = ENABLE;
 80002f2:	2301      	movs	r3, #1
 80002f4:	623b      	str	r3, [r7, #32]

  HAL_CAN_ConfigFilter(&hcan, &filterConfig);
 80002f6:	463b      	mov	r3, r7
 80002f8:	4619      	mov	r1, r3
 80002fa:	4803      	ldr	r0, [pc, #12]	@ (8000308 <MX_CAN_Init+0x94>)
 80002fc:	f000 ff71 	bl	80011e2 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 8000300:	bf00      	nop
 8000302:	3728      	adds	r7, #40	@ 0x28
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}
 8000308:	200000b8 	.word	0x200000b8
 800030c:	40006400 	.word	0x40006400

08000310 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000314:	4b11      	ldr	r3, [pc, #68]	@ (800035c <MX_USART1_UART_Init+0x4c>)
 8000316:	4a12      	ldr	r2, [pc, #72]	@ (8000360 <MX_USART1_UART_Init+0x50>)
 8000318:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800031a:	4b10      	ldr	r3, [pc, #64]	@ (800035c <MX_USART1_UART_Init+0x4c>)
 800031c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000320:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000322:	4b0e      	ldr	r3, [pc, #56]	@ (800035c <MX_USART1_UART_Init+0x4c>)
 8000324:	2200      	movs	r2, #0
 8000326:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000328:	4b0c      	ldr	r3, [pc, #48]	@ (800035c <MX_USART1_UART_Init+0x4c>)
 800032a:	2200      	movs	r2, #0
 800032c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800032e:	4b0b      	ldr	r3, [pc, #44]	@ (800035c <MX_USART1_UART_Init+0x4c>)
 8000330:	2200      	movs	r2, #0
 8000332:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000334:	4b09      	ldr	r3, [pc, #36]	@ (800035c <MX_USART1_UART_Init+0x4c>)
 8000336:	220c      	movs	r2, #12
 8000338:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800033a:	4b08      	ldr	r3, [pc, #32]	@ (800035c <MX_USART1_UART_Init+0x4c>)
 800033c:	2200      	movs	r2, #0
 800033e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000340:	4b06      	ldr	r3, [pc, #24]	@ (800035c <MX_USART1_UART_Init+0x4c>)
 8000342:	2200      	movs	r2, #0
 8000344:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000346:	4805      	ldr	r0, [pc, #20]	@ (800035c <MX_USART1_UART_Init+0x4c>)
 8000348:	f002 fc20 	bl	8002b8c <HAL_UART_Init>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000352:	f000 fba3 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000356:	bf00      	nop
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	200000e0 	.word	0x200000e0
 8000360:	40013800 	.word	0x40013800

08000364 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b088      	sub	sp, #32
 8000368:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800036a:	f107 0310 	add.w	r3, r7, #16
 800036e:	2200      	movs	r2, #0
 8000370:	601a      	str	r2, [r3, #0]
 8000372:	605a      	str	r2, [r3, #4]
 8000374:	609a      	str	r2, [r3, #8]
 8000376:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000378:	4b36      	ldr	r3, [pc, #216]	@ (8000454 <MX_GPIO_Init+0xf0>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	4a35      	ldr	r2, [pc, #212]	@ (8000454 <MX_GPIO_Init+0xf0>)
 800037e:	f043 0310 	orr.w	r3, r3, #16
 8000382:	6193      	str	r3, [r2, #24]
 8000384:	4b33      	ldr	r3, [pc, #204]	@ (8000454 <MX_GPIO_Init+0xf0>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	f003 0310 	and.w	r3, r3, #16
 800038c:	60fb      	str	r3, [r7, #12]
 800038e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000390:	4b30      	ldr	r3, [pc, #192]	@ (8000454 <MX_GPIO_Init+0xf0>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	4a2f      	ldr	r2, [pc, #188]	@ (8000454 <MX_GPIO_Init+0xf0>)
 8000396:	f043 0320 	orr.w	r3, r3, #32
 800039a:	6193      	str	r3, [r2, #24]
 800039c:	4b2d      	ldr	r3, [pc, #180]	@ (8000454 <MX_GPIO_Init+0xf0>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	f003 0320 	and.w	r3, r3, #32
 80003a4:	60bb      	str	r3, [r7, #8]
 80003a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a8:	4b2a      	ldr	r3, [pc, #168]	@ (8000454 <MX_GPIO_Init+0xf0>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	4a29      	ldr	r2, [pc, #164]	@ (8000454 <MX_GPIO_Init+0xf0>)
 80003ae:	f043 0304 	orr.w	r3, r3, #4
 80003b2:	6193      	str	r3, [r2, #24]
 80003b4:	4b27      	ldr	r3, [pc, #156]	@ (8000454 <MX_GPIO_Init+0xf0>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	f003 0304 	and.w	r3, r3, #4
 80003bc:	607b      	str	r3, [r7, #4]
 80003be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003c0:	4b24      	ldr	r3, [pc, #144]	@ (8000454 <MX_GPIO_Init+0xf0>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	4a23      	ldr	r2, [pc, #140]	@ (8000454 <MX_GPIO_Init+0xf0>)
 80003c6:	f043 0308 	orr.w	r3, r3, #8
 80003ca:	6193      	str	r3, [r2, #24]
 80003cc:	4b21      	ldr	r3, [pc, #132]	@ (8000454 <MX_GPIO_Init+0xf0>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	f003 0308 	and.w	r3, r3, #8
 80003d4:	603b      	str	r3, [r7, #0]
 80003d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80003d8:	2200      	movs	r2, #0
 80003da:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003de:	481e      	ldr	r0, [pc, #120]	@ (8000458 <MX_GPIO_Init+0xf4>)
 80003e0:	f001 ffab 	bl	800233a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80003e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ea:	2301      	movs	r3, #1
 80003ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ee:	2300      	movs	r3, #0
 80003f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f2:	2302      	movs	r3, #2
 80003f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003f6:	f107 0310 	add.w	r3, r7, #16
 80003fa:	4619      	mov	r1, r3
 80003fc:	4816      	ldr	r0, [pc, #88]	@ (8000458 <MX_GPIO_Init+0xf4>)
 80003fe:	f001 fe01 	bl	8002004 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000402:	f248 13ff 	movw	r3, #33279	@ 0x81ff
 8000406:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000408:	2300      	movs	r3, #0
 800040a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040c:	2300      	movs	r3, #0
 800040e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000410:	f107 0310 	add.w	r3, r7, #16
 8000414:	4619      	mov	r1, r3
 8000416:	4811      	ldr	r0, [pc, #68]	@ (800045c <MX_GPIO_Init+0xf8>)
 8000418:	f001 fdf4 	bl	8002004 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB3 PB4
                           PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 800041c:	23fb      	movs	r3, #251	@ 0xfb
 800041e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000420:	2300      	movs	r3, #0
 8000422:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000424:	2300      	movs	r3, #0
 8000426:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000428:	f107 0310 	add.w	r3, r7, #16
 800042c:	4619      	mov	r1, r3
 800042e:	480c      	ldr	r0, [pc, #48]	@ (8000460 <MX_GPIO_Init+0xfc>)
 8000430:	f001 fde8 	bl	8002004 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9;
 8000434:	f44f 4343 	mov.w	r3, #49920	@ 0xc300
 8000438:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800043a:	2303      	movs	r3, #3
 800043c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800043e:	f107 0310 	add.w	r3, r7, #16
 8000442:	4619      	mov	r1, r3
 8000444:	4806      	ldr	r0, [pc, #24]	@ (8000460 <MX_GPIO_Init+0xfc>)
 8000446:	f001 fddd 	bl	8002004 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800044a:	bf00      	nop
 800044c:	3720      	adds	r7, #32
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	40021000 	.word	0x40021000
 8000458:	40011000 	.word	0x40011000
 800045c:	40010800 	.word	0x40010800
 8000460:	40010c00 	.word	0x40010c00

08000464 <updateTelemetry>:
}

/*
 * NEXTION UART FUNCTIONS
 */
void updateTelemetry() {
 8000464:	b580      	push	{r7, lr}
 8000466:	b088      	sub	sp, #32
 8000468:	af00      	add	r7, sp, #0
//	int mappedRpm = map_value(telemetry_data.tRpm, 0, telemetry_data.tMaxRpm, 0, 100);
	char *mappedRpm = int_to_string(telemetry_data.tRpm);
 800046a:	4b1f      	ldr	r3, [pc, #124]	@ (80004e8 <updateTelemetry+0x84>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	4618      	mov	r0, r3
 8000470:	f000 f8ea 	bl	8000648 <int_to_string>
 8000474:	61f8      	str	r0, [r7, #28]
	char *mappedGear = map_gear(telemetry_data.tGear);
 8000476:	4b1c      	ldr	r3, [pc, #112]	@ (80004e8 <updateTelemetry+0x84>)
 8000478:	685b      	ldr	r3, [r3, #4]
 800047a:	4618      	mov	r0, r3
 800047c:	f000 f876 	bl	800056c <map_gear>
 8000480:	61b8      	str	r0, [r7, #24]
	char *mappedSpeed = int_to_string(telemetry_data.tSpeedKmh);
 8000482:	4b19      	ldr	r3, [pc, #100]	@ (80004e8 <updateTelemetry+0x84>)
 8000484:	689b      	ldr	r3, [r3, #8]
 8000486:	4618      	mov	r0, r3
 8000488:	f000 f8de 	bl	8000648 <int_to_string>
 800048c:	6178      	str	r0, [r7, #20]
	char *mappedHasDrs = int_to_string(telemetry_data.tHasDRS);
 800048e:	4b16      	ldr	r3, [pc, #88]	@ (80004e8 <updateTelemetry+0x84>)
 8000490:	68db      	ldr	r3, [r3, #12]
 8000492:	4618      	mov	r0, r3
 8000494:	f000 f8d8 	bl	8000648 <int_to_string>
 8000498:	6138      	str	r0, [r7, #16]
	char *mappedPitLim = int_to_string(telemetry_data.tPitLim);
 800049a:	4b13      	ldr	r3, [pc, #76]	@ (80004e8 <updateTelemetry+0x84>)
 800049c:	695b      	ldr	r3, [r3, #20]
 800049e:	4618      	mov	r0, r3
 80004a0:	f000 f8d2 	bl	8000648 <int_to_string>
 80004a4:	60f8      	str	r0, [r7, #12]
	char *mappedFuel = int_to_string(telemetry_data.tFuel);
 80004a6:	4b10      	ldr	r3, [pc, #64]	@ (80004e8 <updateTelemetry+0x84>)
 80004a8:	699b      	ldr	r3, [r3, #24]
 80004aa:	4618      	mov	r0, r3
 80004ac:	f000 f8cc 	bl	8000648 <int_to_string>
 80004b0:	60b8      	str	r0, [r7, #8]
	char *mappedBrakeBias = int_to_string(telemetry_data.tBrakeBias);
 80004b2:	4b0d      	ldr	r3, [pc, #52]	@ (80004e8 <updateTelemetry+0x84>)
 80004b4:	69db      	ldr	r3, [r3, #28]
 80004b6:	4618      	mov	r0, r3
 80004b8:	f000 f8c6 	bl	8000648 <int_to_string>
 80004bc:	6078      	str	r0, [r7, #4]

//	send_int_to_nextion("rpmbar", mappedRpm);
	send__char_to_nextion("rpm", mappedRpm);
 80004be:	69f9      	ldr	r1, [r7, #28]
 80004c0:	480a      	ldr	r0, [pc, #40]	@ (80004ec <updateTelemetry+0x88>)
 80004c2:	f000 f81b 	bl	80004fc <send__char_to_nextion>
	send__char_to_nextion("gear", mappedGear);
 80004c6:	69b9      	ldr	r1, [r7, #24]
 80004c8:	4809      	ldr	r0, [pc, #36]	@ (80004f0 <updateTelemetry+0x8c>)
 80004ca:	f000 f817 	bl	80004fc <send__char_to_nextion>
	send__char_to_nextion("speed", mappedSpeed);
 80004ce:	6979      	ldr	r1, [r7, #20]
 80004d0:	4808      	ldr	r0, [pc, #32]	@ (80004f4 <updateTelemetry+0x90>)
 80004d2:	f000 f813 	bl	80004fc <send__char_to_nextion>
	//send__char_to_nextion("mappedHasDrs", mappedHasDrs);
	//send_to_nextion("pitlim", telemetry_data.tPitLim);
	send__char_to_nextion("fuel", mappedFuel);
 80004d6:	68b9      	ldr	r1, [r7, #8]
 80004d8:	4807      	ldr	r0, [pc, #28]	@ (80004f8 <updateTelemetry+0x94>)
 80004da:	f000 f80f 	bl	80004fc <send__char_to_nextion>
	//send_to_nextion("gear", telemetry_data.tBrakeBias);

}
 80004de:	bf00      	nop
 80004e0:	3720      	adds	r7, #32
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	20000084 	.word	0x20000084
 80004ec:	08004ae4 	.word	0x08004ae4
 80004f0:	08004ae8 	.word	0x08004ae8
 80004f4:	08004af0 	.word	0x08004af0
 80004f8:	08004af8 	.word	0x08004af8

080004fc <send__char_to_nextion>:

	uint8_t termination_bytes[3] = {0xFF, 0xFF, 0xFF};
	HAL_UART_Transmit(&huart1, termination_bytes, sizeof(termination_bytes), HAL_MAX_DELAY);
}

void send__char_to_nextion(const char *var_name, char *value) {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b08e      	sub	sp, #56	@ 0x38
 8000500:	af02      	add	r7, sp, #8
 8000502:	6078      	str	r0, [r7, #4]
 8000504:	6039      	str	r1, [r7, #0]
	char command[32];
	snprintf(command, sizeof(command), "%s.txt=\"%s\"", var_name, value);
 8000506:	f107 0010 	add.w	r0, r7, #16
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	9300      	str	r3, [sp, #0]
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	4a13      	ldr	r2, [pc, #76]	@ (8000560 <send__char_to_nextion+0x64>)
 8000512:	2120      	movs	r1, #32
 8000514:	f003 fb38 	bl	8003b88 <sniprintf>

	HAL_UART_Transmit(&huart1, (uint8_t *)command, strlen(command), HAL_MAX_DELAY);
 8000518:	f107 0310 	add.w	r3, r7, #16
 800051c:	4618      	mov	r0, r3
 800051e:	f7ff fe15 	bl	800014c <strlen>
 8000522:	4603      	mov	r3, r0
 8000524:	b29a      	uxth	r2, r3
 8000526:	f107 0110 	add.w	r1, r7, #16
 800052a:	f04f 33ff 	mov.w	r3, #4294967295
 800052e:	480d      	ldr	r0, [pc, #52]	@ (8000564 <send__char_to_nextion+0x68>)
 8000530:	f002 fb7c 	bl	8002c2c <HAL_UART_Transmit>

	uint8_t termination_bytes[3] = {0xFF, 0xFF, 0xFF};
 8000534:	4a0c      	ldr	r2, [pc, #48]	@ (8000568 <send__char_to_nextion+0x6c>)
 8000536:	f107 030c 	add.w	r3, r7, #12
 800053a:	6812      	ldr	r2, [r2, #0]
 800053c:	4611      	mov	r1, r2
 800053e:	8019      	strh	r1, [r3, #0]
 8000540:	3302      	adds	r3, #2
 8000542:	0c12      	lsrs	r2, r2, #16
 8000544:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, termination_bytes, sizeof(termination_bytes), HAL_MAX_DELAY);
 8000546:	f107 010c 	add.w	r1, r7, #12
 800054a:	f04f 33ff 	mov.w	r3, #4294967295
 800054e:	2203      	movs	r2, #3
 8000550:	4804      	ldr	r0, [pc, #16]	@ (8000564 <send__char_to_nextion+0x68>)
 8000552:	f002 fb6b 	bl	8002c2c <HAL_UART_Transmit>
}
 8000556:	bf00      	nop
 8000558:	3730      	adds	r7, #48	@ 0x30
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	08004b10 	.word	0x08004b10
 8000564:	200000e0 	.word	0x200000e0
 8000568:	08004b0c 	.word	0x08004b0c

0800056c <map_gear>:
    if (input > in_max) input = in_max;

    return (input - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

const char* map_gear(int value)  {
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
    if (value < 0 || value > 13) {
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	2b00      	cmp	r3, #0
 8000578:	db02      	blt.n	8000580 <map_gear+0x14>
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	2b0d      	cmp	r3, #13
 800057e:	dd01      	ble.n	8000584 <map_gear+0x18>
        return "X";
 8000580:	4b22      	ldr	r3, [pc, #136]	@ (800060c <map_gear+0xa0>)
 8000582:	e03e      	b.n	8000602 <map_gear+0x96>
    }

    switch (value) {
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	2b0d      	cmp	r3, #13
 8000588:	d83a      	bhi.n	8000600 <map_gear+0x94>
 800058a:	a201      	add	r2, pc, #4	@ (adr r2, 8000590 <map_gear+0x24>)
 800058c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000590:	080005c9 	.word	0x080005c9
 8000594:	080005cd 	.word	0x080005cd
 8000598:	080005d1 	.word	0x080005d1
 800059c:	080005d5 	.word	0x080005d5
 80005a0:	080005d9 	.word	0x080005d9
 80005a4:	080005dd 	.word	0x080005dd
 80005a8:	080005e1 	.word	0x080005e1
 80005ac:	080005e5 	.word	0x080005e5
 80005b0:	080005e9 	.word	0x080005e9
 80005b4:	080005ed 	.word	0x080005ed
 80005b8:	080005f1 	.word	0x080005f1
 80005bc:	080005f5 	.word	0x080005f5
 80005c0:	080005f9 	.word	0x080005f9
 80005c4:	080005fd 	.word	0x080005fd
        case 0: return "R";
 80005c8:	4b11      	ldr	r3, [pc, #68]	@ (8000610 <map_gear+0xa4>)
 80005ca:	e01a      	b.n	8000602 <map_gear+0x96>
        case 1: return "N";
 80005cc:	4b11      	ldr	r3, [pc, #68]	@ (8000614 <map_gear+0xa8>)
 80005ce:	e018      	b.n	8000602 <map_gear+0x96>
        case 2: return "1";
 80005d0:	4b11      	ldr	r3, [pc, #68]	@ (8000618 <map_gear+0xac>)
 80005d2:	e016      	b.n	8000602 <map_gear+0x96>
        case 3: return "2";
 80005d4:	4b11      	ldr	r3, [pc, #68]	@ (800061c <map_gear+0xb0>)
 80005d6:	e014      	b.n	8000602 <map_gear+0x96>
        case 4: return "3";
 80005d8:	4b11      	ldr	r3, [pc, #68]	@ (8000620 <map_gear+0xb4>)
 80005da:	e012      	b.n	8000602 <map_gear+0x96>
        case 5: return "4";
 80005dc:	4b11      	ldr	r3, [pc, #68]	@ (8000624 <map_gear+0xb8>)
 80005de:	e010      	b.n	8000602 <map_gear+0x96>
        case 6: return "5";
 80005e0:	4b11      	ldr	r3, [pc, #68]	@ (8000628 <map_gear+0xbc>)
 80005e2:	e00e      	b.n	8000602 <map_gear+0x96>
        case 7: return "6";
 80005e4:	4b11      	ldr	r3, [pc, #68]	@ (800062c <map_gear+0xc0>)
 80005e6:	e00c      	b.n	8000602 <map_gear+0x96>
        case 8: return "7";
 80005e8:	4b11      	ldr	r3, [pc, #68]	@ (8000630 <map_gear+0xc4>)
 80005ea:	e00a      	b.n	8000602 <map_gear+0x96>
        case 9: return "8";
 80005ec:	4b11      	ldr	r3, [pc, #68]	@ (8000634 <map_gear+0xc8>)
 80005ee:	e008      	b.n	8000602 <map_gear+0x96>
        case 10: return "9";
 80005f0:	4b11      	ldr	r3, [pc, #68]	@ (8000638 <map_gear+0xcc>)
 80005f2:	e006      	b.n	8000602 <map_gear+0x96>
        case 11: return "10";
 80005f4:	4b11      	ldr	r3, [pc, #68]	@ (800063c <map_gear+0xd0>)
 80005f6:	e004      	b.n	8000602 <map_gear+0x96>
        case 12: return "11";
 80005f8:	4b11      	ldr	r3, [pc, #68]	@ (8000640 <map_gear+0xd4>)
 80005fa:	e002      	b.n	8000602 <map_gear+0x96>
        case 13: return "12";
 80005fc:	4b11      	ldr	r3, [pc, #68]	@ (8000644 <map_gear+0xd8>)
 80005fe:	e000      	b.n	8000602 <map_gear+0x96>

        default:
        	return "X";
 8000600:	4b02      	ldr	r3, [pc, #8]	@ (800060c <map_gear+0xa0>)
    }
}
 8000602:	4618      	mov	r0, r3
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	bc80      	pop	{r7}
 800060a:	4770      	bx	lr
 800060c:	08004b1c 	.word	0x08004b1c
 8000610:	08004b20 	.word	0x08004b20
 8000614:	08004b24 	.word	0x08004b24
 8000618:	08004b28 	.word	0x08004b28
 800061c:	08004b2c 	.word	0x08004b2c
 8000620:	08004b30 	.word	0x08004b30
 8000624:	08004b34 	.word	0x08004b34
 8000628:	08004b38 	.word	0x08004b38
 800062c:	08004b3c 	.word	0x08004b3c
 8000630:	08004b40 	.word	0x08004b40
 8000634:	08004b44 	.word	0x08004b44
 8000638:	08004b48 	.word	0x08004b48
 800063c:	08004b4c 	.word	0x08004b4c
 8000640:	08004b50 	.word	0x08004b50
 8000644:	08004b54 	.word	0x08004b54

08000648 <int_to_string>:

char* int_to_string(int value) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
    int buffer_size = snprintf(NULL, 0, "%d", value) + 1;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	4a0f      	ldr	r2, [pc, #60]	@ (8000690 <int_to_string+0x48>)
 8000654:	2100      	movs	r1, #0
 8000656:	2000      	movs	r0, #0
 8000658:	f003 fa96 	bl	8003b88 <sniprintf>
 800065c:	4603      	mov	r3, r0
 800065e:	3301      	adds	r3, #1
 8000660:	60fb      	str	r3, [r7, #12]

    char *string = (char*)malloc(buffer_size);
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	4618      	mov	r0, r3
 8000666:	f003 f8a7 	bl	80037b8 <malloc>
 800066a:	4603      	mov	r3, r0
 800066c:	60bb      	str	r3, [r7, #8]

    if (string == NULL) {
 800066e:	68bb      	ldr	r3, [r7, #8]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d101      	bne.n	8000678 <int_to_string+0x30>
        return NULL;
 8000674:	2300      	movs	r3, #0
 8000676:	e006      	b.n	8000686 <int_to_string+0x3e>
    }

    snprintf(string, buffer_size, "%d", value);
 8000678:	68f9      	ldr	r1, [r7, #12]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	4a04      	ldr	r2, [pc, #16]	@ (8000690 <int_to_string+0x48>)
 800067e:	68b8      	ldr	r0, [r7, #8]
 8000680:	f003 fa82 	bl	8003b88 <sniprintf>

    return string;
 8000684:	68bb      	ldr	r3, [r7, #8]
}
 8000686:	4618      	mov	r0, r3
 8000688:	3710      	adds	r7, #16
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	08004b58 	.word	0x08004b58

08000694 <updateButtons>:

void updateButtons() {
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
	user_input_data.buttons = 0; // Clear all bits initially
 8000698:	4b90      	ldr	r3, [pc, #576]	@ (80008dc <updateButtons+0x248>)
 800069a:	2200      	movs	r2, #0
 800069c:	801a      	strh	r2, [r3, #0]

	// Buttons
	if (HAL_GPIO_ReadPin(GPIOA, BUTTON_1_PIN)) user_input_data.buttons |= (1 << 0);
 800069e:	2101      	movs	r1, #1
 80006a0:	488f      	ldr	r0, [pc, #572]	@ (80008e0 <updateButtons+0x24c>)
 80006a2:	f001 fe33 	bl	800230c <HAL_GPIO_ReadPin>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d006      	beq.n	80006ba <updateButtons+0x26>
 80006ac:	4b8b      	ldr	r3, [pc, #556]	@ (80008dc <updateButtons+0x248>)
 80006ae:	881b      	ldrh	r3, [r3, #0]
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	b29a      	uxth	r2, r3
 80006b6:	4b89      	ldr	r3, [pc, #548]	@ (80008dc <updateButtons+0x248>)
 80006b8:	801a      	strh	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(GPIOA, BUTTON_2_PIN)) user_input_data.buttons |= (1 << 1);
 80006ba:	2102      	movs	r1, #2
 80006bc:	4888      	ldr	r0, [pc, #544]	@ (80008e0 <updateButtons+0x24c>)
 80006be:	f001 fe25 	bl	800230c <HAL_GPIO_ReadPin>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d006      	beq.n	80006d6 <updateButtons+0x42>
 80006c8:	4b84      	ldr	r3, [pc, #528]	@ (80008dc <updateButtons+0x248>)
 80006ca:	881b      	ldrh	r3, [r3, #0]
 80006cc:	f043 0302 	orr.w	r3, r3, #2
 80006d0:	b29a      	uxth	r2, r3
 80006d2:	4b82      	ldr	r3, [pc, #520]	@ (80008dc <updateButtons+0x248>)
 80006d4:	801a      	strh	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(GPIOA, BUTTON_3_PIN)) user_input_data.buttons |= (1 << 2);
 80006d6:	2104      	movs	r1, #4
 80006d8:	4881      	ldr	r0, [pc, #516]	@ (80008e0 <updateButtons+0x24c>)
 80006da:	f001 fe17 	bl	800230c <HAL_GPIO_ReadPin>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d006      	beq.n	80006f2 <updateButtons+0x5e>
 80006e4:	4b7d      	ldr	r3, [pc, #500]	@ (80008dc <updateButtons+0x248>)
 80006e6:	881b      	ldrh	r3, [r3, #0]
 80006e8:	f043 0304 	orr.w	r3, r3, #4
 80006ec:	b29a      	uxth	r2, r3
 80006ee:	4b7b      	ldr	r3, [pc, #492]	@ (80008dc <updateButtons+0x248>)
 80006f0:	801a      	strh	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(GPIOA, BUTTON_4_PIN)) user_input_data.buttons |= (1 << 3);
 80006f2:	2108      	movs	r1, #8
 80006f4:	487a      	ldr	r0, [pc, #488]	@ (80008e0 <updateButtons+0x24c>)
 80006f6:	f001 fe09 	bl	800230c <HAL_GPIO_ReadPin>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d006      	beq.n	800070e <updateButtons+0x7a>
 8000700:	4b76      	ldr	r3, [pc, #472]	@ (80008dc <updateButtons+0x248>)
 8000702:	881b      	ldrh	r3, [r3, #0]
 8000704:	f043 0308 	orr.w	r3, r3, #8
 8000708:	b29a      	uxth	r2, r3
 800070a:	4b74      	ldr	r3, [pc, #464]	@ (80008dc <updateButtons+0x248>)
 800070c:	801a      	strh	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(GPIOA, BUTTON_5_PIN)) user_input_data.buttons |= (1 << 4);
 800070e:	2110      	movs	r1, #16
 8000710:	4873      	ldr	r0, [pc, #460]	@ (80008e0 <updateButtons+0x24c>)
 8000712:	f001 fdfb 	bl	800230c <HAL_GPIO_ReadPin>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d006      	beq.n	800072a <updateButtons+0x96>
 800071c:	4b6f      	ldr	r3, [pc, #444]	@ (80008dc <updateButtons+0x248>)
 800071e:	881b      	ldrh	r3, [r3, #0]
 8000720:	f043 0310 	orr.w	r3, r3, #16
 8000724:	b29a      	uxth	r2, r3
 8000726:	4b6d      	ldr	r3, [pc, #436]	@ (80008dc <updateButtons+0x248>)
 8000728:	801a      	strh	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(GPIOA, BUTTON_6_PIN)) user_input_data.buttons |= (1 << 5);
 800072a:	2120      	movs	r1, #32
 800072c:	486c      	ldr	r0, [pc, #432]	@ (80008e0 <updateButtons+0x24c>)
 800072e:	f001 fded 	bl	800230c <HAL_GPIO_ReadPin>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d006      	beq.n	8000746 <updateButtons+0xb2>
 8000738:	4b68      	ldr	r3, [pc, #416]	@ (80008dc <updateButtons+0x248>)
 800073a:	881b      	ldrh	r3, [r3, #0]
 800073c:	f043 0320 	orr.w	r3, r3, #32
 8000740:	b29a      	uxth	r2, r3
 8000742:	4b66      	ldr	r3, [pc, #408]	@ (80008dc <updateButtons+0x248>)
 8000744:	801a      	strh	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(GPIOA, BUTTON_7_PIN)) user_input_data.buttons |= (1 << 6);
 8000746:	2140      	movs	r1, #64	@ 0x40
 8000748:	4865      	ldr	r0, [pc, #404]	@ (80008e0 <updateButtons+0x24c>)
 800074a:	f001 fddf 	bl	800230c <HAL_GPIO_ReadPin>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d006      	beq.n	8000762 <updateButtons+0xce>
 8000754:	4b61      	ldr	r3, [pc, #388]	@ (80008dc <updateButtons+0x248>)
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800075c:	b29a      	uxth	r2, r3
 800075e:	4b5f      	ldr	r3, [pc, #380]	@ (80008dc <updateButtons+0x248>)
 8000760:	801a      	strh	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(GPIOB, BUTTON_8_PIN)) user_input_data.buttons |= (1 << 7);
 8000762:	2180      	movs	r1, #128	@ 0x80
 8000764:	485f      	ldr	r0, [pc, #380]	@ (80008e4 <updateButtons+0x250>)
 8000766:	f001 fdd1 	bl	800230c <HAL_GPIO_ReadPin>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d006      	beq.n	800077e <updateButtons+0xea>
 8000770:	4b5a      	ldr	r3, [pc, #360]	@ (80008dc <updateButtons+0x248>)
 8000772:	881b      	ldrh	r3, [r3, #0]
 8000774:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000778:	b29a      	uxth	r2, r3
 800077a:	4b58      	ldr	r3, [pc, #352]	@ (80008dc <updateButtons+0x248>)
 800077c:	801a      	strh	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(GPIOB, BUTTON_9_PIN)) user_input_data.buttons |= (1 << 8);
 800077e:	2101      	movs	r1, #1
 8000780:	4858      	ldr	r0, [pc, #352]	@ (80008e4 <updateButtons+0x250>)
 8000782:	f001 fdc3 	bl	800230c <HAL_GPIO_ReadPin>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d006      	beq.n	800079a <updateButtons+0x106>
 800078c:	4b53      	ldr	r3, [pc, #332]	@ (80008dc <updateButtons+0x248>)
 800078e:	881b      	ldrh	r3, [r3, #0]
 8000790:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000794:	b29a      	uxth	r2, r3
 8000796:	4b51      	ldr	r3, [pc, #324]	@ (80008dc <updateButtons+0x248>)
 8000798:	801a      	strh	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(GPIOB, BUTTON_10_PIN)) user_input_data.buttons |= (1 << 9);
 800079a:	2102      	movs	r1, #2
 800079c:	4851      	ldr	r0, [pc, #324]	@ (80008e4 <updateButtons+0x250>)
 800079e:	f001 fdb5 	bl	800230c <HAL_GPIO_ReadPin>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d006      	beq.n	80007b6 <updateButtons+0x122>
 80007a8:	4b4c      	ldr	r3, [pc, #304]	@ (80008dc <updateButtons+0x248>)
 80007aa:	881b      	ldrh	r3, [r3, #0]
 80007ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80007b0:	b29a      	uxth	r2, r3
 80007b2:	4b4a      	ldr	r3, [pc, #296]	@ (80008dc <updateButtons+0x248>)
 80007b4:	801a      	strh	r2, [r3, #0]

	// Hall Buttons
	if (HAL_GPIO_ReadPin(GPIOB, HALL_BUTTON_1_PIN)) user_input_data.buttons |= (1 << 10);
 80007b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007ba:	484a      	ldr	r0, [pc, #296]	@ (80008e4 <updateButtons+0x250>)
 80007bc:	f001 fda6 	bl	800230c <HAL_GPIO_ReadPin>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d006      	beq.n	80007d4 <updateButtons+0x140>
 80007c6:	4b45      	ldr	r3, [pc, #276]	@ (80008dc <updateButtons+0x248>)
 80007c8:	881b      	ldrh	r3, [r3, #0]
 80007ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80007ce:	b29a      	uxth	r2, r3
 80007d0:	4b42      	ldr	r3, [pc, #264]	@ (80008dc <updateButtons+0x248>)
 80007d2:	801a      	strh	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(GPIOB, HALL_BUTTON_2_PIN)) user_input_data.buttons |= (1 << 11);
 80007d4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007d8:	4842      	ldr	r0, [pc, #264]	@ (80008e4 <updateButtons+0x250>)
 80007da:	f001 fd97 	bl	800230c <HAL_GPIO_ReadPin>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d006      	beq.n	80007f2 <updateButtons+0x15e>
 80007e4:	4b3d      	ldr	r3, [pc, #244]	@ (80008dc <updateButtons+0x248>)
 80007e6:	881b      	ldrh	r3, [r3, #0]
 80007e8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80007ec:	b29a      	uxth	r2, r3
 80007ee:	4b3b      	ldr	r3, [pc, #236]	@ (80008dc <updateButtons+0x248>)
 80007f0:	801a      	strh	r2, [r3, #0]


	// TODO: Change these bottom values, top is good for buttons

	// Hall Clutch Analog
	if (HAL_GPIO_ReadPin(GPIOA, HALL_ANALOG_1_PIN)) user_input_data.buttons |= (1 << 10);
 80007f2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007f6:	483a      	ldr	r0, [pc, #232]	@ (80008e0 <updateButtons+0x24c>)
 80007f8:	f001 fd88 	bl	800230c <HAL_GPIO_ReadPin>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d006      	beq.n	8000810 <updateButtons+0x17c>
 8000802:	4b36      	ldr	r3, [pc, #216]	@ (80008dc <updateButtons+0x248>)
 8000804:	881b      	ldrh	r3, [r3, #0]
 8000806:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800080a:	b29a      	uxth	r2, r3
 800080c:	4b33      	ldr	r3, [pc, #204]	@ (80008dc <updateButtons+0x248>)
 800080e:	801a      	strh	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(GPIOA, HALL_ANALOG_2_PIN)) user_input_data.buttons |= (1 << 11);
 8000810:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000814:	4832      	ldr	r0, [pc, #200]	@ (80008e0 <updateButtons+0x24c>)
 8000816:	f001 fd79 	bl	800230c <HAL_GPIO_ReadPin>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d006      	beq.n	800082e <updateButtons+0x19a>
 8000820:	4b2e      	ldr	r3, [pc, #184]	@ (80008dc <updateButtons+0x248>)
 8000822:	881b      	ldrh	r3, [r3, #0]
 8000824:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000828:	b29a      	uxth	r2, r3
 800082a:	4b2c      	ldr	r3, [pc, #176]	@ (80008dc <updateButtons+0x248>)
 800082c:	801a      	strh	r2, [r3, #0]

	// Encoders
	if (HAL_GPIO_ReadPin(GPIOB, L_ENC_PIN_A)) user_input_data.buttons |= (1 << 10);
 800082e:	2180      	movs	r1, #128	@ 0x80
 8000830:	482c      	ldr	r0, [pc, #176]	@ (80008e4 <updateButtons+0x250>)
 8000832:	f001 fd6b 	bl	800230c <HAL_GPIO_ReadPin>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d006      	beq.n	800084a <updateButtons+0x1b6>
 800083c:	4b27      	ldr	r3, [pc, #156]	@ (80008dc <updateButtons+0x248>)
 800083e:	881b      	ldrh	r3, [r3, #0]
 8000840:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000844:	b29a      	uxth	r2, r3
 8000846:	4b25      	ldr	r3, [pc, #148]	@ (80008dc <updateButtons+0x248>)
 8000848:	801a      	strh	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(GPIOB, L_ENC_PIN_B)) user_input_data.buttons |= (1 << 11);
 800084a:	2140      	movs	r1, #64	@ 0x40
 800084c:	4825      	ldr	r0, [pc, #148]	@ (80008e4 <updateButtons+0x250>)
 800084e:	f001 fd5d 	bl	800230c <HAL_GPIO_ReadPin>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d006      	beq.n	8000866 <updateButtons+0x1d2>
 8000858:	4b20      	ldr	r3, [pc, #128]	@ (80008dc <updateButtons+0x248>)
 800085a:	881b      	ldrh	r3, [r3, #0]
 800085c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000860:	b29a      	uxth	r2, r3
 8000862:	4b1e      	ldr	r3, [pc, #120]	@ (80008dc <updateButtons+0x248>)
 8000864:	801a      	strh	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(GPIOB, C_ENC_PIN_A)) user_input_data.buttons |= (1 << 11);
 8000866:	2110      	movs	r1, #16
 8000868:	481e      	ldr	r0, [pc, #120]	@ (80008e4 <updateButtons+0x250>)
 800086a:	f001 fd4f 	bl	800230c <HAL_GPIO_ReadPin>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d006      	beq.n	8000882 <updateButtons+0x1ee>
 8000874:	4b19      	ldr	r3, [pc, #100]	@ (80008dc <updateButtons+0x248>)
 8000876:	881b      	ldrh	r3, [r3, #0]
 8000878:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800087c:	b29a      	uxth	r2, r3
 800087e:	4b17      	ldr	r3, [pc, #92]	@ (80008dc <updateButtons+0x248>)
 8000880:	801a      	strh	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(GPIOB, C_ENC_PIN_B)) user_input_data.buttons |= (1 << 10);
 8000882:	2120      	movs	r1, #32
 8000884:	4817      	ldr	r0, [pc, #92]	@ (80008e4 <updateButtons+0x250>)
 8000886:	f001 fd41 	bl	800230c <HAL_GPIO_ReadPin>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d006      	beq.n	800089e <updateButtons+0x20a>
 8000890:	4b12      	ldr	r3, [pc, #72]	@ (80008dc <updateButtons+0x248>)
 8000892:	881b      	ldrh	r3, [r3, #0]
 8000894:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000898:	b29a      	uxth	r2, r3
 800089a:	4b10      	ldr	r3, [pc, #64]	@ (80008dc <updateButtons+0x248>)
 800089c:	801a      	strh	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(GPIOB, R_ENC_PIN_A)) user_input_data.buttons |= (1 << 11);
 800089e:	2108      	movs	r1, #8
 80008a0:	4810      	ldr	r0, [pc, #64]	@ (80008e4 <updateButtons+0x250>)
 80008a2:	f001 fd33 	bl	800230c <HAL_GPIO_ReadPin>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d006      	beq.n	80008ba <updateButtons+0x226>
 80008ac:	4b0b      	ldr	r3, [pc, #44]	@ (80008dc <updateButtons+0x248>)
 80008ae:	881b      	ldrh	r3, [r3, #0]
 80008b0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80008b4:	b29a      	uxth	r2, r3
 80008b6:	4b09      	ldr	r3, [pc, #36]	@ (80008dc <updateButtons+0x248>)
 80008b8:	801a      	strh	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(GPIOB, R_ENC_PIN_B)) user_input_data.buttons |= (1 << 11);
 80008ba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008be:	4809      	ldr	r0, [pc, #36]	@ (80008e4 <updateButtons+0x250>)
 80008c0:	f001 fd24 	bl	800230c <HAL_GPIO_ReadPin>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d006      	beq.n	80008d8 <updateButtons+0x244>
 80008ca:	4b04      	ldr	r3, [pc, #16]	@ (80008dc <updateButtons+0x248>)
 80008cc:	881b      	ldrh	r3, [r3, #0]
 80008ce:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80008d2:	b29a      	uxth	r2, r3
 80008d4:	4b01      	ldr	r3, [pc, #4]	@ (80008dc <updateButtons+0x248>)
 80008d6:	801a      	strh	r2, [r3, #0]
}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	200000ac 	.word	0x200000ac
 80008e0:	40010800 	.word	0x40010800
 80008e4:	40010c00 	.word	0x40010c00

080008e8 <CAN_Transmit>:

/*
 * CAN BUS FUNCTIONS
 */
void CAN_Transmit() {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b094      	sub	sp, #80	@ 0x50
 80008ec:	af00      	add	r7, sp, #0
	uint32_t currentTime = HAL_GetTick();
 80008ee:	f000 fb4f 	bl	8000f90 <HAL_GetTick>
 80008f2:	64b8      	str	r0, [r7, #72]	@ 0x48

	if(currentTime - lastSendTime >= 10) {
 80008f4:	4b3c      	ldr	r3, [pc, #240]	@ (80009e8 <CAN_Transmit+0x100>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80008fa:	1ad3      	subs	r3, r2, r3
 80008fc:	2b09      	cmp	r3, #9
 80008fe:	d96e      	bls.n	80009de <CAN_Transmit+0xf6>
		CAN_TxHeaderTypeDef TxHeader;
		uint32_t TxMailbox;

		// Create a telemetry_packet instance and initialize its fields
		user_input_data_t dataToSend;
		dataToSend.buttons = 0x0F0F;         // Example: Buttons pressed
 8000900:	f640 730f 	movw	r3, #3855	@ 0xf0f
 8000904:	81bb      	strh	r3, [r7, #12]
		dataToSend.hall_analog_1 = 100;      // Example: Hall sensor 1 value
 8000906:	2364      	movs	r3, #100	@ 0x64
 8000908:	73bb      	strb	r3, [r7, #14]
		dataToSend.hall_analog_2 = 200;      // Example: Hall sensor 2 value
 800090a:	23c8      	movs	r3, #200	@ 0xc8
 800090c:	73fb      	strb	r3, [r7, #15]
		dataToSend.encoder_1 = 1000;         // Example: Encoder 1 value
 800090e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000912:	823b      	strh	r3, [r7, #16]
		dataToSend.encoder_2 = -2000;        // Example: Encoder 2 value
 8000914:	f64f 0330 	movw	r3, #63536	@ 0xf830
 8000918:	827b      	strh	r3, [r7, #18]
		dataToSend.encoder_3 = 5000;         // Example: Encoder 3 value
 800091a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800091e:	82bb      	strh	r3, [r7, #20]

		uint8_t* rawData = (uint8_t*)&dataToSend;
 8000920:	f107 030c 	add.w	r3, r7, #12
 8000924:	647b      	str	r3, [r7, #68]	@ 0x44

		// Initialize CAN Header
		TxHeader.StdId = 0x101;           // CAN ID for the message
 8000926:	f240 1301 	movw	r3, #257	@ 0x101
 800092a:	61fb      	str	r3, [r7, #28]
		TxHeader.ExtId = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	623b      	str	r3, [r7, #32]
		TxHeader.IDE = CAN_ID_STD;        // Use Standard ID
 8000930:	2300      	movs	r3, #0
 8000932:	627b      	str	r3, [r7, #36]	@ 0x24
		TxHeader.RTR = CAN_RTR_DATA;      // Data frame
 8000934:	2300      	movs	r3, #0
 8000936:	62bb      	str	r3, [r7, #40]	@ 0x28
		TxHeader.DLC = 8;                 // Maximum data length for each CAN frame
 8000938:	2308      	movs	r3, #8
 800093a:	62fb      	str	r3, [r7, #44]	@ 0x2c

		uint8_t frameData[8];             // Temporary buffer for each CAN frame

		// Calculate the size of the telemetry_packet struct
		int totalSize = sizeof(user_input_data_t);
 800093c:	230a      	movs	r3, #10
 800093e:	643b      	str	r3, [r7, #64]	@ 0x40

		// Split the telemetry_packet into CAN frames
		for (int i = 0; i < totalSize; i += 8) {
 8000940:	2300      	movs	r3, #0
 8000942:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000944:	e047      	b.n	80009d6 <CAN_Transmit+0xee>
			// Calculate the size of the current chunk (for the last frame)
			int chunkSize = (totalSize - i >= 8) ? 8 : (totalSize - i);
 8000946:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000948:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800094a:	1ad3      	subs	r3, r2, r3
 800094c:	2b08      	cmp	r3, #8
 800094e:	bfa8      	it	ge
 8000950:	2308      	movge	r3, #8
 8000952:	63fb      	str	r3, [r7, #60]	@ 0x3c

			// Copy the next chunk of data into the frame buffer
			memcpy(frameData, &rawData[i], chunkSize);
 8000954:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000956:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000958:	18d1      	adds	r1, r2, r3
 800095a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	4618      	mov	r0, r3
 8000960:	f003 faa9 	bl	8003eb6 <memcpy>

			// Adjust DLC for the last frame
			TxHeader.DLC = chunkSize;
 8000964:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000966:	62fb      	str	r3, [r7, #44]	@ 0x2c

			HAL_StatusTypeDef status = HAL_CAN_AddTxMessage(&hcan, &TxHeader, frameData, &TxMailbox);
 8000968:	f107 0318 	add.w	r3, r7, #24
 800096c:	1d3a      	adds	r2, r7, #4
 800096e:	f107 011c 	add.w	r1, r7, #28
 8000972:	481e      	ldr	r0, [pc, #120]	@ (80009ec <CAN_Transmit+0x104>)
 8000974:	f000 fd42 	bl	80013fc <HAL_CAN_AddTxMessage>
 8000978:	4603      	mov	r3, r0
 800097a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
			if (status != HAL_OK) {
 800097e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000982:	2b00      	cmp	r3, #0
 8000984:	d01e      	beq.n	80009c4 <CAN_Transmit+0xdc>
				// Inspect the error
				if (status == HAL_ERROR) {
 8000986:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800098a:	2b01      	cmp	r3, #1
 800098c:	d103      	bne.n	8000996 <CAN_Transmit+0xae>
					printf("HAL_CAN_AddTxMessage failed: HAL_ERROR\n");
 800098e:	4818      	ldr	r0, [pc, #96]	@ (80009f0 <CAN_Transmit+0x108>)
 8000990:	f003 f8f2 	bl	8003b78 <puts>
 8000994:	e00e      	b.n	80009b4 <CAN_Transmit+0xcc>
				} else if (status == HAL_BUSY) {
 8000996:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800099a:	2b02      	cmp	r3, #2
 800099c:	d103      	bne.n	80009a6 <CAN_Transmit+0xbe>
					printf("HAL_CAN_AddTxMessage failed: HAL_BUSY\n");
 800099e:	4815      	ldr	r0, [pc, #84]	@ (80009f4 <CAN_Transmit+0x10c>)
 80009a0:	f003 f8ea 	bl	8003b78 <puts>
 80009a4:	e006      	b.n	80009b4 <CAN_Transmit+0xcc>
				} else if (status == HAL_TIMEOUT) {
 80009a6:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80009aa:	2b03      	cmp	r3, #3
 80009ac:	d102      	bne.n	80009b4 <CAN_Transmit+0xcc>
					printf("HAL_CAN_AddTxMessage failed: HAL_TIMEOUT\n");
 80009ae:	4812      	ldr	r0, [pc, #72]	@ (80009f8 <CAN_Transmit+0x110>)
 80009b0:	f003 f8e2 	bl	8003b78 <puts>
				}

				// Optionally log the state of CAN error counters
				uint32_t error = HAL_CAN_GetError(&hcan);
 80009b4:	480d      	ldr	r0, [pc, #52]	@ (80009ec <CAN_Transmit+0x104>)
 80009b6:	f001 f959 	bl	8001c6c <HAL_CAN_GetError>
 80009ba:	6378      	str	r0, [r7, #52]	@ 0x34
				printf("CAN Error Code: 0x%08lx\n", error); // Only if you decide to stop execution
 80009bc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80009be:	480f      	ldr	r0, [pc, #60]	@ (80009fc <CAN_Transmit+0x114>)
 80009c0:	f003 f872 	bl	8003aa8 <iprintf>
			}
			lastSendTime = currentTime;  // Update last transmission time
 80009c4:	4a08      	ldr	r2, [pc, #32]	@ (80009e8 <CAN_Transmit+0x100>)
 80009c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80009c8:	6013      	str	r3, [r2, #0]
			HAL_Delay(1);
 80009ca:	2001      	movs	r0, #1
 80009cc:	f000 faea 	bl	8000fa4 <HAL_Delay>
		for (int i = 0; i < totalSize; i += 8) {
 80009d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80009d2:	3308      	adds	r3, #8
 80009d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80009d6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80009d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80009da:	429a      	cmp	r2, r3
 80009dc:	dbb3      	blt.n	8000946 <CAN_Transmit+0x5e>
		}
	}
}
 80009de:	bf00      	nop
 80009e0:	3750      	adds	r7, #80	@ 0x50
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000128 	.word	0x20000128
 80009ec:	200000b8 	.word	0x200000b8
 80009f0:	08004b5c 	.word	0x08004b5c
 80009f4:	08004b84 	.word	0x08004b84
 80009f8:	08004bac 	.word	0x08004bac
 80009fc:	08004bd8 	.word	0x08004bd8

08000a00 <HAL_CAN_RxFifo1MsgPendingCallback>:

// CAN receive interrupt callback
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000a00:	b5b0      	push	{r4, r5, r7, lr}
 8000a02:	b08c      	sub	sp, #48	@ 0x30
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rxHeader;
    uint8_t rxData[8]; // Max CAN frame size is 8 bytes

    // Receive the message
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &rxHeader, rxData) == HAL_OK) {
 8000a08:	f107 0308 	add.w	r3, r7, #8
 8000a0c:	f107 0210 	add.w	r2, r7, #16
 8000a10:	2101      	movs	r1, #1
 8000a12:	6878      	ldr	r0, [r7, #4]
 8000a14:	f000 fdc1 	bl	800159a <HAL_CAN_GetRxMessage>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d134      	bne.n	8000a88 <HAL_CAN_RxFifo1MsgPendingCallback+0x88>
    	 // Check if the message ID matches 0x100
		if (rxHeader.StdId == 0x100) {
 8000a1e:	693b      	ldr	r3, [r7, #16]
 8000a20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000a24:	d130      	bne.n	8000a88 <HAL_CAN_RxFifo1MsgPendingCallback+0x88>
			static uint8_t buffer[sizeof(telemetry_packet)];
			static uint8_t offset = 0;

			// Copy received data into buffer
			uint8_t bytesToCopy = (rxHeader.DLC < sizeof(telemetry_packet) - offset) ? rxHeader.DLC : sizeof(telemetry_packet) - offset;
 8000a26:	4b1a      	ldr	r3, [pc, #104]	@ (8000a90 <HAL_CAN_RxFifo1MsgPendingCallback+0x90>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	f1c3 0228 	rsb	r2, r3, #40	@ 0x28
 8000a2e:	6a3b      	ldr	r3, [r7, #32]
 8000a30:	4293      	cmp	r3, r2
 8000a32:	bf28      	it	cs
 8000a34:	4613      	movcs	r3, r2
 8000a36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			memcpy(&buffer[offset], rxData, bytesToCopy);
 8000a3a:	4b15      	ldr	r3, [pc, #84]	@ (8000a90 <HAL_CAN_RxFifo1MsgPendingCallback+0x90>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	461a      	mov	r2, r3
 8000a40:	4b14      	ldr	r3, [pc, #80]	@ (8000a94 <HAL_CAN_RxFifo1MsgPendingCallback+0x94>)
 8000a42:	4413      	add	r3, r2
 8000a44:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000a48:	f107 0108 	add.w	r1, r7, #8
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f003 fa32 	bl	8003eb6 <memcpy>
			offset += bytesToCopy;
 8000a52:	4b0f      	ldr	r3, [pc, #60]	@ (8000a90 <HAL_CAN_RxFifo1MsgPendingCallback+0x90>)
 8000a54:	781a      	ldrb	r2, [r3, #0]
 8000a56:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a5a:	4413      	add	r3, r2
 8000a5c:	b2da      	uxtb	r2, r3
 8000a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a90 <HAL_CAN_RxFifo1MsgPendingCallback+0x90>)
 8000a60:	701a      	strb	r2, [r3, #0]

			// Check if the entire packet has been received
			if (offset >= sizeof(telemetry_packet)) {
 8000a62:	4b0b      	ldr	r3, [pc, #44]	@ (8000a90 <HAL_CAN_RxFifo1MsgPendingCallback+0x90>)
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	2b27      	cmp	r3, #39	@ 0x27
 8000a68:	d90e      	bls.n	8000a88 <HAL_CAN_RxFifo1MsgPendingCallback+0x88>
				// Copy buffer into the telemetry_packet struct
				memcpy(&telemetry_data, buffer, sizeof(telemetry_packet));
 8000a6a:	4a0b      	ldr	r2, [pc, #44]	@ (8000a98 <HAL_CAN_RxFifo1MsgPendingCallback+0x98>)
 8000a6c:	4b09      	ldr	r3, [pc, #36]	@ (8000a94 <HAL_CAN_RxFifo1MsgPendingCallback+0x94>)
 8000a6e:	4614      	mov	r4, r2
 8000a70:	461d      	mov	r5, r3
 8000a72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a7a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000a7e:	e884 0003 	stmia.w	r4, {r0, r1}
				offset = 0; // Reset offset for the next packet
 8000a82:	4b03      	ldr	r3, [pc, #12]	@ (8000a90 <HAL_CAN_RxFifo1MsgPendingCallback+0x90>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	701a      	strb	r2, [r3, #0]
			}
		}
    }
}
 8000a88:	bf00      	nop
 8000a8a:	3730      	adds	r7, #48	@ 0x30
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bdb0      	pop	{r4, r5, r7, pc}
 8000a90:	2000012c 	.word	0x2000012c
 8000a94:	20000130 	.word	0x20000130
 8000a98:	20000084 	.word	0x20000084

08000a9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa0:	b672      	cpsid	i
}
 8000aa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa4:	bf00      	nop
 8000aa6:	e7fd      	b.n	8000aa4 <Error_Handler+0x8>

08000aa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000aae:	4b15      	ldr	r3, [pc, #84]	@ (8000b04 <HAL_MspInit+0x5c>)
 8000ab0:	699b      	ldr	r3, [r3, #24]
 8000ab2:	4a14      	ldr	r2, [pc, #80]	@ (8000b04 <HAL_MspInit+0x5c>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	6193      	str	r3, [r2, #24]
 8000aba:	4b12      	ldr	r3, [pc, #72]	@ (8000b04 <HAL_MspInit+0x5c>)
 8000abc:	699b      	ldr	r3, [r3, #24]
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	60bb      	str	r3, [r7, #8]
 8000ac4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac6:	4b0f      	ldr	r3, [pc, #60]	@ (8000b04 <HAL_MspInit+0x5c>)
 8000ac8:	69db      	ldr	r3, [r3, #28]
 8000aca:	4a0e      	ldr	r2, [pc, #56]	@ (8000b04 <HAL_MspInit+0x5c>)
 8000acc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ad0:	61d3      	str	r3, [r2, #28]
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8000b04 <HAL_MspInit+0x5c>)
 8000ad4:	69db      	ldr	r3, [r3, #28]
 8000ad6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ade:	4b0a      	ldr	r3, [pc, #40]	@ (8000b08 <HAL_MspInit+0x60>)
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	4a04      	ldr	r2, [pc, #16]	@ (8000b08 <HAL_MspInit+0x60>)
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afa:	bf00      	nop
 8000afc:	3714      	adds	r7, #20
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr
 8000b04:	40021000 	.word	0x40021000
 8000b08:	40010000 	.word	0x40010000

08000b0c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b088      	sub	sp, #32
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	f107 0310 	add.w	r3, r7, #16
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a2c      	ldr	r2, [pc, #176]	@ (8000bd8 <HAL_CAN_MspInit+0xcc>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d151      	bne.n	8000bd0 <HAL_CAN_MspInit+0xc4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000b2c:	4b2b      	ldr	r3, [pc, #172]	@ (8000bdc <HAL_CAN_MspInit+0xd0>)
 8000b2e:	69db      	ldr	r3, [r3, #28]
 8000b30:	4a2a      	ldr	r2, [pc, #168]	@ (8000bdc <HAL_CAN_MspInit+0xd0>)
 8000b32:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b36:	61d3      	str	r3, [r2, #28]
 8000b38:	4b28      	ldr	r3, [pc, #160]	@ (8000bdc <HAL_CAN_MspInit+0xd0>)
 8000b3a:	69db      	ldr	r3, [r3, #28]
 8000b3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b44:	4b25      	ldr	r3, [pc, #148]	@ (8000bdc <HAL_CAN_MspInit+0xd0>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	4a24      	ldr	r2, [pc, #144]	@ (8000bdc <HAL_CAN_MspInit+0xd0>)
 8000b4a:	f043 0304 	orr.w	r3, r3, #4
 8000b4e:	6193      	str	r3, [r2, #24]
 8000b50:	4b22      	ldr	r3, [pc, #136]	@ (8000bdc <HAL_CAN_MspInit+0xd0>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	f003 0304 	and.w	r3, r3, #4
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000b5c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000b60:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b62:	2300      	movs	r3, #0
 8000b64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b66:	2301      	movs	r3, #1
 8000b68:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6a:	f107 0310 	add.w	r3, r7, #16
 8000b6e:	4619      	mov	r1, r3
 8000b70:	481b      	ldr	r0, [pc, #108]	@ (8000be0 <HAL_CAN_MspInit+0xd4>)
 8000b72:	f001 fa47 	bl	8002004 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b80:	2303      	movs	r3, #3
 8000b82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b84:	f107 0310 	add.w	r3, r7, #16
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4815      	ldr	r0, [pc, #84]	@ (8000be0 <HAL_CAN_MspInit+0xd4>)
 8000b8c:	f001 fa3a 	bl	8002004 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8000b90:	2200      	movs	r2, #0
 8000b92:	2100      	movs	r1, #0
 8000b94:	2013      	movs	r0, #19
 8000b96:	f001 f94c 	bl	8001e32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8000b9a:	2013      	movs	r0, #19
 8000b9c:	f001 f965 	bl	8001e6a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	2014      	movs	r0, #20
 8000ba6:	f001 f944 	bl	8001e32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000baa:	2014      	movs	r0, #20
 8000bac:	f001 f95d 	bl	8001e6a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	2015      	movs	r0, #21
 8000bb6:	f001 f93c 	bl	8001e32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000bba:	2015      	movs	r0, #21
 8000bbc:	f001 f955 	bl	8001e6a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	2016      	movs	r0, #22
 8000bc6:	f001 f934 	bl	8001e32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000bca:	2016      	movs	r0, #22
 8000bcc:	f001 f94d 	bl	8001e6a <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000bd0:	bf00      	nop
 8000bd2:	3720      	adds	r7, #32
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40006400 	.word	0x40006400
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	40010800 	.word	0x40010800

08000be4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b088      	sub	sp, #32
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0310 	add.w	r3, r7, #16
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a20      	ldr	r2, [pc, #128]	@ (8000c80 <HAL_UART_MspInit+0x9c>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d139      	bne.n	8000c78 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c04:	4b1f      	ldr	r3, [pc, #124]	@ (8000c84 <HAL_UART_MspInit+0xa0>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	4a1e      	ldr	r2, [pc, #120]	@ (8000c84 <HAL_UART_MspInit+0xa0>)
 8000c0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c0e:	6193      	str	r3, [r2, #24]
 8000c10:	4b1c      	ldr	r3, [pc, #112]	@ (8000c84 <HAL_UART_MspInit+0xa0>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1c:	4b19      	ldr	r3, [pc, #100]	@ (8000c84 <HAL_UART_MspInit+0xa0>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	4a18      	ldr	r2, [pc, #96]	@ (8000c84 <HAL_UART_MspInit+0xa0>)
 8000c22:	f043 0304 	orr.w	r3, r3, #4
 8000c26:	6193      	str	r3, [r2, #24]
 8000c28:	4b16      	ldr	r3, [pc, #88]	@ (8000c84 <HAL_UART_MspInit+0xa0>)
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	f003 0304 	and.w	r3, r3, #4
 8000c30:	60bb      	str	r3, [r7, #8]
 8000c32:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c34:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c42:	f107 0310 	add.w	r3, r7, #16
 8000c46:	4619      	mov	r1, r3
 8000c48:	480f      	ldr	r0, [pc, #60]	@ (8000c88 <HAL_UART_MspInit+0xa4>)
 8000c4a:	f001 f9db 	bl	8002004 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5c:	f107 0310 	add.w	r3, r7, #16
 8000c60:	4619      	mov	r1, r3
 8000c62:	4809      	ldr	r0, [pc, #36]	@ (8000c88 <HAL_UART_MspInit+0xa4>)
 8000c64:	f001 f9ce 	bl	8002004 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	2025      	movs	r0, #37	@ 0x25
 8000c6e:	f001 f8e0 	bl	8001e32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c72:	2025      	movs	r0, #37	@ 0x25
 8000c74:	f001 f8f9 	bl	8001e6a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000c78:	bf00      	nop
 8000c7a:	3720      	adds	r7, #32
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40013800 	.word	0x40013800
 8000c84:	40021000 	.word	0x40021000
 8000c88:	40010800 	.word	0x40010800

08000c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c90:	bf00      	nop
 8000c92:	e7fd      	b.n	8000c90 <NMI_Handler+0x4>

08000c94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c98:	bf00      	nop
 8000c9a:	e7fd      	b.n	8000c98 <HardFault_Handler+0x4>

08000c9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca0:	bf00      	nop
 8000ca2:	e7fd      	b.n	8000ca0 <MemManage_Handler+0x4>

08000ca4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca8:	bf00      	nop
 8000caa:	e7fd      	b.n	8000ca8 <BusFault_Handler+0x4>

08000cac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb0:	bf00      	nop
 8000cb2:	e7fd      	b.n	8000cb0 <UsageFault_Handler+0x4>

08000cb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bc80      	pop	{r7}
 8000cbe:	4770      	bx	lr

08000cc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr

08000ccc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bc80      	pop	{r7}
 8000cd6:	4770      	bx	lr

08000cd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cdc:	f000 f946 	bl	8000f6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000ce8:	4802      	ldr	r0, [pc, #8]	@ (8000cf4 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8000cea:	f000 fd9c 	bl	8001826 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	200000b8 	.word	0x200000b8

08000cf8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000cfc:	4802      	ldr	r0, [pc, #8]	@ (8000d08 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000cfe:	f000 fd92 	bl	8001826 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	200000b8 	.word	0x200000b8

08000d0c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000d10:	4802      	ldr	r0, [pc, #8]	@ (8000d1c <CAN1_RX1_IRQHandler+0x10>)
 8000d12:	f000 fd88 	bl	8001826 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	200000b8 	.word	0x200000b8

08000d20 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000d24:	4802      	ldr	r0, [pc, #8]	@ (8000d30 <CAN1_SCE_IRQHandler+0x10>)
 8000d26:	f000 fd7e 	bl	8001826 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	200000b8 	.word	0x200000b8

08000d34 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d38:	4802      	ldr	r0, [pc, #8]	@ (8000d44 <USART1_IRQHandler+0x10>)
 8000d3a:	f002 f803 	bl	8002d44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	200000e0 	.word	0x200000e0

08000d48 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
 8000d58:	e00a      	b.n	8000d70 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d5a:	f3af 8000 	nop.w
 8000d5e:	4601      	mov	r1, r0
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	1c5a      	adds	r2, r3, #1
 8000d64:	60ba      	str	r2, [r7, #8]
 8000d66:	b2ca      	uxtb	r2, r1
 8000d68:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	617b      	str	r3, [r7, #20]
 8000d70:	697a      	ldr	r2, [r7, #20]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	dbf0      	blt.n	8000d5a <_read+0x12>
  }

  return len;
 8000d78:	687b      	ldr	r3, [r7, #4]
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3718      	adds	r7, #24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b086      	sub	sp, #24
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	60f8      	str	r0, [r7, #12]
 8000d8a:	60b9      	str	r1, [r7, #8]
 8000d8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
 8000d92:	e009      	b.n	8000da8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	1c5a      	adds	r2, r3, #1
 8000d98:	60ba      	str	r2, [r7, #8]
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	3301      	adds	r3, #1
 8000da6:	617b      	str	r3, [r7, #20]
 8000da8:	697a      	ldr	r2, [r7, #20]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	dbf1      	blt.n	8000d94 <_write+0x12>
  }
  return len;
 8000db0:	687b      	ldr	r3, [r7, #4]
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3718      	adds	r7, #24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <_close>:

int _close(int file)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	b083      	sub	sp, #12
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bc80      	pop	{r7}
 8000dce:	4770      	bx	lr

08000dd0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000de0:	605a      	str	r2, [r3, #4]
  return 0;
 8000de2:	2300      	movs	r3, #0
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bc80      	pop	{r7}
 8000dec:	4770      	bx	lr

08000dee <_isatty>:

int _isatty(int file)
{
 8000dee:	b480      	push	{r7}
 8000df0:	b083      	sub	sp, #12
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000df6:	2301      	movs	r3, #1
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bc80      	pop	{r7}
 8000e00:	4770      	bx	lr

08000e02 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e02:	b480      	push	{r7}
 8000e04:	b085      	sub	sp, #20
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	60f8      	str	r0, [r7, #12]
 8000e0a:	60b9      	str	r1, [r7, #8]
 8000e0c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e0e:	2300      	movs	r3, #0
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3714      	adds	r7, #20
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bc80      	pop	{r7}
 8000e18:	4770      	bx	lr
	...

08000e1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e24:	4a14      	ldr	r2, [pc, #80]	@ (8000e78 <_sbrk+0x5c>)
 8000e26:	4b15      	ldr	r3, [pc, #84]	@ (8000e7c <_sbrk+0x60>)
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e30:	4b13      	ldr	r3, [pc, #76]	@ (8000e80 <_sbrk+0x64>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d102      	bne.n	8000e3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e38:	4b11      	ldr	r3, [pc, #68]	@ (8000e80 <_sbrk+0x64>)
 8000e3a:	4a12      	ldr	r2, [pc, #72]	@ (8000e84 <_sbrk+0x68>)
 8000e3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e3e:	4b10      	ldr	r3, [pc, #64]	@ (8000e80 <_sbrk+0x64>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4413      	add	r3, r2
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d207      	bcs.n	8000e5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e4c:	f003 f806 	bl	8003e5c <__errno>
 8000e50:	4603      	mov	r3, r0
 8000e52:	220c      	movs	r2, #12
 8000e54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e56:	f04f 33ff 	mov.w	r3, #4294967295
 8000e5a:	e009      	b.n	8000e70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e5c:	4b08      	ldr	r3, [pc, #32]	@ (8000e80 <_sbrk+0x64>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e62:	4b07      	ldr	r3, [pc, #28]	@ (8000e80 <_sbrk+0x64>)
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4413      	add	r3, r2
 8000e6a:	4a05      	ldr	r2, [pc, #20]	@ (8000e80 <_sbrk+0x64>)
 8000e6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3718      	adds	r7, #24
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20005000 	.word	0x20005000
 8000e7c:	00000400 	.word	0x00000400
 8000e80:	20000158 	.word	0x20000158
 8000e84:	200002b0 	.word	0x200002b0

08000e88 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc80      	pop	{r7}
 8000e92:	4770      	bx	lr

08000e94 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e94:	f7ff fff8 	bl	8000e88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e98:	480b      	ldr	r0, [pc, #44]	@ (8000ec8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e9a:	490c      	ldr	r1, [pc, #48]	@ (8000ecc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e9c:	4a0c      	ldr	r2, [pc, #48]	@ (8000ed0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ea0:	e002      	b.n	8000ea8 <LoopCopyDataInit>

08000ea2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ea2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ea6:	3304      	adds	r3, #4

08000ea8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eac:	d3f9      	bcc.n	8000ea2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eae:	4a09      	ldr	r2, [pc, #36]	@ (8000ed4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000eb0:	4c09      	ldr	r4, [pc, #36]	@ (8000ed8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb4:	e001      	b.n	8000eba <LoopFillZerobss>

08000eb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb8:	3204      	adds	r2, #4

08000eba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ebc:	d3fb      	bcc.n	8000eb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ebe:	f002 ffd3 	bl	8003e68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ec2:	f7ff f94b 	bl	800015c <main>
  bx lr
 8000ec6:	4770      	bx	lr
  ldr r0, =_sdata
 8000ec8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ecc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ed0:	08004c64 	.word	0x08004c64
  ldr r2, =_sbss
 8000ed4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ed8:	200002ac 	.word	0x200002ac

08000edc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000edc:	e7fe      	b.n	8000edc <ADC1_2_IRQHandler>
	...

08000ee0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee4:	4b08      	ldr	r3, [pc, #32]	@ (8000f08 <HAL_Init+0x28>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a07      	ldr	r2, [pc, #28]	@ (8000f08 <HAL_Init+0x28>)
 8000eea:	f043 0310 	orr.w	r3, r3, #16
 8000eee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef0:	2003      	movs	r0, #3
 8000ef2:	f000 ff93 	bl	8001e1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ef6:	200f      	movs	r0, #15
 8000ef8:	f000 f808 	bl	8000f0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000efc:	f7ff fdd4 	bl	8000aa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40022000 	.word	0x40022000

08000f0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f14:	4b12      	ldr	r3, [pc, #72]	@ (8000f60 <HAL_InitTick+0x54>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	4b12      	ldr	r3, [pc, #72]	@ (8000f64 <HAL_InitTick+0x58>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 ffab 	bl	8001e86 <HAL_SYSTICK_Config>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e00e      	b.n	8000f58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2b0f      	cmp	r3, #15
 8000f3e:	d80a      	bhi.n	8000f56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f40:	2200      	movs	r2, #0
 8000f42:	6879      	ldr	r1, [r7, #4]
 8000f44:	f04f 30ff 	mov.w	r0, #4294967295
 8000f48:	f000 ff73 	bl	8001e32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f4c:	4a06      	ldr	r2, [pc, #24]	@ (8000f68 <HAL_InitTick+0x5c>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f52:	2300      	movs	r3, #0
 8000f54:	e000      	b.n	8000f58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000000 	.word	0x20000000
 8000f64:	20000008 	.word	0x20000008
 8000f68:	20000004 	.word	0x20000004

08000f6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f70:	4b05      	ldr	r3, [pc, #20]	@ (8000f88 <HAL_IncTick+0x1c>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	461a      	mov	r2, r3
 8000f76:	4b05      	ldr	r3, [pc, #20]	@ (8000f8c <HAL_IncTick+0x20>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	4a03      	ldr	r2, [pc, #12]	@ (8000f8c <HAL_IncTick+0x20>)
 8000f7e:	6013      	str	r3, [r2, #0]
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr
 8000f88:	20000008 	.word	0x20000008
 8000f8c:	2000015c 	.word	0x2000015c

08000f90 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  return uwTick;
 8000f94:	4b02      	ldr	r3, [pc, #8]	@ (8000fa0 <HAL_GetTick+0x10>)
 8000f96:	681b      	ldr	r3, [r3, #0]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bc80      	pop	{r7}
 8000f9e:	4770      	bx	lr
 8000fa0:	2000015c 	.word	0x2000015c

08000fa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fac:	f7ff fff0 	bl	8000f90 <HAL_GetTick>
 8000fb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fbc:	d005      	beq.n	8000fca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe8 <HAL_Delay+0x44>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fca:	bf00      	nop
 8000fcc:	f7ff ffe0 	bl	8000f90 <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	68fa      	ldr	r2, [r7, #12]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d8f7      	bhi.n	8000fcc <HAL_Delay+0x28>
  {
  }
}
 8000fdc:	bf00      	nop
 8000fde:	bf00      	nop
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000008 	.word	0x20000008

08000fec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d101      	bne.n	8000ffe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e0ed      	b.n	80011da <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001004:	b2db      	uxtb	r3, r3
 8001006:	2b00      	cmp	r3, #0
 8001008:	d102      	bne.n	8001010 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff fd7e 	bl	8000b0c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f042 0201 	orr.w	r2, r2, #1
 800101e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001020:	f7ff ffb6 	bl	8000f90 <HAL_GetTick>
 8001024:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001026:	e012      	b.n	800104e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001028:	f7ff ffb2 	bl	8000f90 <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	2b0a      	cmp	r3, #10
 8001034:	d90b      	bls.n	800104e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800103a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2205      	movs	r2, #5
 8001046:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e0c5      	b.n	80011da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f003 0301 	and.w	r3, r3, #1
 8001058:	2b00      	cmp	r3, #0
 800105a:	d0e5      	beq.n	8001028 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f022 0202 	bic.w	r2, r2, #2
 800106a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800106c:	f7ff ff90 	bl	8000f90 <HAL_GetTick>
 8001070:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001072:	e012      	b.n	800109a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001074:	f7ff ff8c 	bl	8000f90 <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	2b0a      	cmp	r3, #10
 8001080:	d90b      	bls.n	800109a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001086:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2205      	movs	r2, #5
 8001092:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e09f      	b.n	80011da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f003 0302 	and.w	r3, r3, #2
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d1e5      	bne.n	8001074 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	7e1b      	ldrb	r3, [r3, #24]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d108      	bne.n	80010c2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	e007      	b.n	80010d2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80010d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	7e5b      	ldrb	r3, [r3, #25]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d108      	bne.n	80010ec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	e007      	b.n	80010fc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80010fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	7e9b      	ldrb	r3, [r3, #26]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d108      	bne.n	8001116 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f042 0220 	orr.w	r2, r2, #32
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	e007      	b.n	8001126 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f022 0220 	bic.w	r2, r2, #32
 8001124:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	7edb      	ldrb	r3, [r3, #27]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d108      	bne.n	8001140 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f022 0210 	bic.w	r2, r2, #16
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	e007      	b.n	8001150 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f042 0210 	orr.w	r2, r2, #16
 800114e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	7f1b      	ldrb	r3, [r3, #28]
 8001154:	2b01      	cmp	r3, #1
 8001156:	d108      	bne.n	800116a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f042 0208 	orr.w	r2, r2, #8
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	e007      	b.n	800117a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f022 0208 	bic.w	r2, r2, #8
 8001178:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	7f5b      	ldrb	r3, [r3, #29]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d108      	bne.n	8001194 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f042 0204 	orr.w	r2, r2, #4
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	e007      	b.n	80011a4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f022 0204 	bic.w	r2, r2, #4
 80011a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	689a      	ldr	r2, [r3, #8]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	431a      	orrs	r2, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	691b      	ldr	r3, [r3, #16]
 80011b2:	431a      	orrs	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	695b      	ldr	r3, [r3, #20]
 80011b8:	ea42 0103 	orr.w	r1, r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	1e5a      	subs	r2, r3, #1
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	430a      	orrs	r2, r1
 80011c8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2201      	movs	r2, #1
 80011d4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b087      	sub	sp, #28
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
 80011ea:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011f8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80011fa:	7cfb      	ldrb	r3, [r7, #19]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d003      	beq.n	8001208 <HAL_CAN_ConfigFilter+0x26>
 8001200:	7cfb      	ldrb	r3, [r7, #19]
 8001202:	2b02      	cmp	r3, #2
 8001204:	f040 80aa 	bne.w	800135c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800120e:	f043 0201 	orr.w	r2, r3, #1
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	695b      	ldr	r3, [r3, #20]
 800121c:	f003 031f 	and.w	r3, r3, #31
 8001220:	2201      	movs	r2, #1
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	43db      	mvns	r3, r3
 8001232:	401a      	ands	r2, r3
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d123      	bne.n	800128a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	43db      	mvns	r3, r3
 800124c:	401a      	ands	r2, r3
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001264:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	3248      	adds	r2, #72	@ 0x48
 800126a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800127e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001280:	6979      	ldr	r1, [r7, #20]
 8001282:	3348      	adds	r3, #72	@ 0x48
 8001284:	00db      	lsls	r3, r3, #3
 8001286:	440b      	add	r3, r1
 8001288:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	69db      	ldr	r3, [r3, #28]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d122      	bne.n	80012d8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	431a      	orrs	r2, r3
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012ae:	683a      	ldr	r2, [r7, #0]
 80012b0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80012b2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	3248      	adds	r2, #72	@ 0x48
 80012b8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012cc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012ce:	6979      	ldr	r1, [r7, #20]
 80012d0:	3348      	adds	r3, #72	@ 0x48
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	440b      	add	r3, r1
 80012d6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d109      	bne.n	80012f4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	43db      	mvns	r3, r3
 80012ea:	401a      	ands	r2, r3
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80012f2:	e007      	b.n	8001304 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	431a      	orrs	r2, r3
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	691b      	ldr	r3, [r3, #16]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d109      	bne.n	8001320 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	43db      	mvns	r3, r3
 8001316:	401a      	ands	r2, r3
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800131e:	e007      	b.n	8001330 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	431a      	orrs	r2, r3
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	6a1b      	ldr	r3, [r3, #32]
 8001334:	2b01      	cmp	r3, #1
 8001336:	d107      	bne.n	8001348 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	431a      	orrs	r2, r3
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800134e:	f023 0201 	bic.w	r2, r3, #1
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001358:	2300      	movs	r3, #0
 800135a:	e006      	b.n	800136a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001360:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
  }
}
 800136a:	4618      	mov	r0, r3
 800136c:	371c      	adds	r7, #28
 800136e:	46bd      	mov	sp, r7
 8001370:	bc80      	pop	{r7}
 8001372:	4770      	bx	lr

08001374 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001382:	b2db      	uxtb	r3, r3
 8001384:	2b01      	cmp	r3, #1
 8001386:	d12e      	bne.n	80013e6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2202      	movs	r2, #2
 800138c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f022 0201 	bic.w	r2, r2, #1
 800139e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80013a0:	f7ff fdf6 	bl	8000f90 <HAL_GetTick>
 80013a4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80013a6:	e012      	b.n	80013ce <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013a8:	f7ff fdf2 	bl	8000f90 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b0a      	cmp	r3, #10
 80013b4:	d90b      	bls.n	80013ce <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ba:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2205      	movs	r2, #5
 80013c6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e012      	b.n	80013f4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f003 0301 	and.w	r3, r3, #1
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d1e5      	bne.n	80013a8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80013e2:	2300      	movs	r3, #0
 80013e4:	e006      	b.n	80013f4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ea:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
  }
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b089      	sub	sp, #36	@ 0x24
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
 8001408:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001410:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800141a:	7ffb      	ldrb	r3, [r7, #31]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d003      	beq.n	8001428 <HAL_CAN_AddTxMessage+0x2c>
 8001420:	7ffb      	ldrb	r3, [r7, #31]
 8001422:	2b02      	cmp	r3, #2
 8001424:	f040 80ad 	bne.w	8001582 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d10a      	bne.n	8001448 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001438:	2b00      	cmp	r3, #0
 800143a:	d105      	bne.n	8001448 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001442:	2b00      	cmp	r3, #0
 8001444:	f000 8095 	beq.w	8001572 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	0e1b      	lsrs	r3, r3, #24
 800144c:	f003 0303 	and.w	r3, r3, #3
 8001450:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001452:	2201      	movs	r2, #1
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	409a      	lsls	r2, r3
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d10d      	bne.n	8001480 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800146e:	68f9      	ldr	r1, [r7, #12]
 8001470:	6809      	ldr	r1, [r1, #0]
 8001472:	431a      	orrs	r2, r3
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	3318      	adds	r3, #24
 8001478:	011b      	lsls	r3, r3, #4
 800147a:	440b      	add	r3, r1
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	e00f      	b.n	80014a0 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800148a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001490:	68f9      	ldr	r1, [r7, #12]
 8001492:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001494:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	3318      	adds	r3, #24
 800149a:	011b      	lsls	r3, r3, #4
 800149c:	440b      	add	r3, r1
 800149e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	6819      	ldr	r1, [r3, #0]
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	691a      	ldr	r2, [r3, #16]
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	3318      	adds	r3, #24
 80014ac:	011b      	lsls	r3, r3, #4
 80014ae:	440b      	add	r3, r1
 80014b0:	3304      	adds	r3, #4
 80014b2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	7d1b      	ldrb	r3, [r3, #20]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d111      	bne.n	80014e0 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	3318      	adds	r3, #24
 80014c4:	011b      	lsls	r3, r3, #4
 80014c6:	4413      	add	r3, r2
 80014c8:	3304      	adds	r3, #4
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	68fa      	ldr	r2, [r7, #12]
 80014ce:	6811      	ldr	r1, [r2, #0]
 80014d0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	3318      	adds	r3, #24
 80014d8:	011b      	lsls	r3, r3, #4
 80014da:	440b      	add	r3, r1
 80014dc:	3304      	adds	r3, #4
 80014de:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3307      	adds	r3, #7
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	061a      	lsls	r2, r3, #24
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3306      	adds	r3, #6
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	041b      	lsls	r3, r3, #16
 80014f0:	431a      	orrs	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	3305      	adds	r3, #5
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	021b      	lsls	r3, r3, #8
 80014fa:	4313      	orrs	r3, r2
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	3204      	adds	r2, #4
 8001500:	7812      	ldrb	r2, [r2, #0]
 8001502:	4610      	mov	r0, r2
 8001504:	68fa      	ldr	r2, [r7, #12]
 8001506:	6811      	ldr	r1, [r2, #0]
 8001508:	ea43 0200 	orr.w	r2, r3, r0
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	011b      	lsls	r3, r3, #4
 8001510:	440b      	add	r3, r1
 8001512:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001516:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3303      	adds	r3, #3
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	061a      	lsls	r2, r3, #24
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	3302      	adds	r3, #2
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	041b      	lsls	r3, r3, #16
 8001528:	431a      	orrs	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	3301      	adds	r3, #1
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	021b      	lsls	r3, r3, #8
 8001532:	4313      	orrs	r3, r2
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	7812      	ldrb	r2, [r2, #0]
 8001538:	4610      	mov	r0, r2
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	6811      	ldr	r1, [r2, #0]
 800153e:	ea43 0200 	orr.w	r2, r3, r0
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	011b      	lsls	r3, r3, #4
 8001546:	440b      	add	r3, r1
 8001548:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800154c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	3318      	adds	r3, #24
 8001556:	011b      	lsls	r3, r3, #4
 8001558:	4413      	add	r3, r2
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	68fa      	ldr	r2, [r7, #12]
 800155e:	6811      	ldr	r1, [r2, #0]
 8001560:	f043 0201 	orr.w	r2, r3, #1
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	3318      	adds	r3, #24
 8001568:	011b      	lsls	r3, r3, #4
 800156a:	440b      	add	r3, r1
 800156c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800156e:	2300      	movs	r3, #0
 8001570:	e00e      	b.n	8001590 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001576:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e006      	b.n	8001590 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001586:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
  }
}
 8001590:	4618      	mov	r0, r3
 8001592:	3724      	adds	r7, #36	@ 0x24
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr

0800159a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800159a:	b480      	push	{r7}
 800159c:	b087      	sub	sp, #28
 800159e:	af00      	add	r7, sp, #0
 80015a0:	60f8      	str	r0, [r7, #12]
 80015a2:	60b9      	str	r1, [r7, #8]
 80015a4:	607a      	str	r2, [r7, #4]
 80015a6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015ae:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80015b0:	7dfb      	ldrb	r3, [r7, #23]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d003      	beq.n	80015be <HAL_CAN_GetRxMessage+0x24>
 80015b6:	7dfb      	ldrb	r3, [r7, #23]
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	f040 8103 	bne.w	80017c4 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d10e      	bne.n	80015e2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	f003 0303 	and.w	r3, r3, #3
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d116      	bne.n	8001600 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015d6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e0f7      	b.n	80017d2 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	691b      	ldr	r3, [r3, #16]
 80015e8:	f003 0303 	and.w	r3, r3, #3
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d107      	bne.n	8001600 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015f4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e0e8      	b.n	80017d2 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	331b      	adds	r3, #27
 8001608:	011b      	lsls	r3, r3, #4
 800160a:	4413      	add	r3, r2
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0204 	and.w	r2, r3, #4
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d10c      	bne.n	8001638 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	331b      	adds	r3, #27
 8001626:	011b      	lsls	r3, r3, #4
 8001628:	4413      	add	r3, r2
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	0d5b      	lsrs	r3, r3, #21
 800162e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	e00b      	b.n	8001650 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	331b      	adds	r3, #27
 8001640:	011b      	lsls	r3, r3, #4
 8001642:	4413      	add	r3, r2
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	08db      	lsrs	r3, r3, #3
 8001648:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	331b      	adds	r3, #27
 8001658:	011b      	lsls	r3, r3, #4
 800165a:	4413      	add	r3, r2
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0202 	and.w	r2, r3, #2
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	331b      	adds	r3, #27
 800166e:	011b      	lsls	r3, r3, #4
 8001670:	4413      	add	r3, r2
 8001672:	3304      	adds	r3, #4
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0308 	and.w	r3, r3, #8
 800167a:	2b00      	cmp	r3, #0
 800167c:	d003      	beq.n	8001686 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2208      	movs	r2, #8
 8001682:	611a      	str	r2, [r3, #16]
 8001684:	e00b      	b.n	800169e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	331b      	adds	r3, #27
 800168e:	011b      	lsls	r3, r3, #4
 8001690:	4413      	add	r3, r2
 8001692:	3304      	adds	r3, #4
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 020f 	and.w	r2, r3, #15
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	331b      	adds	r3, #27
 80016a6:	011b      	lsls	r3, r3, #4
 80016a8:	4413      	add	r3, r2
 80016aa:	3304      	adds	r3, #4
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	0a1b      	lsrs	r3, r3, #8
 80016b0:	b2da      	uxtb	r2, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	331b      	adds	r3, #27
 80016be:	011b      	lsls	r3, r3, #4
 80016c0:	4413      	add	r3, r2
 80016c2:	3304      	adds	r3, #4
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	0c1b      	lsrs	r3, r3, #16
 80016c8:	b29a      	uxth	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	011b      	lsls	r3, r3, #4
 80016d6:	4413      	add	r3, r2
 80016d8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	011b      	lsls	r3, r3, #4
 80016ec:	4413      	add	r3, r2
 80016ee:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	0a1a      	lsrs	r2, r3, #8
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	3301      	adds	r3, #1
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	011b      	lsls	r3, r3, #4
 8001706:	4413      	add	r3, r2
 8001708:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	0c1a      	lsrs	r2, r3, #16
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	3302      	adds	r3, #2
 8001714:	b2d2      	uxtb	r2, r2
 8001716:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	011b      	lsls	r3, r3, #4
 8001720:	4413      	add	r3, r2
 8001722:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	0e1a      	lsrs	r2, r3, #24
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	3303      	adds	r3, #3
 800172e:	b2d2      	uxtb	r2, r2
 8001730:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	011b      	lsls	r3, r3, #4
 800173a:	4413      	add	r3, r2
 800173c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	3304      	adds	r3, #4
 8001746:	b2d2      	uxtb	r2, r2
 8001748:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	011b      	lsls	r3, r3, #4
 8001752:	4413      	add	r3, r2
 8001754:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	0a1a      	lsrs	r2, r3, #8
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	3305      	adds	r3, #5
 8001760:	b2d2      	uxtb	r2, r2
 8001762:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	011b      	lsls	r3, r3, #4
 800176c:	4413      	add	r3, r2
 800176e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	0c1a      	lsrs	r2, r3, #16
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	3306      	adds	r3, #6
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	011b      	lsls	r3, r3, #4
 8001786:	4413      	add	r3, r2
 8001788:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	0e1a      	lsrs	r2, r3, #24
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	3307      	adds	r3, #7
 8001794:	b2d2      	uxtb	r2, r2
 8001796:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d108      	bne.n	80017b0 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	68da      	ldr	r2, [r3, #12]
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f042 0220 	orr.w	r2, r2, #32
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	e007      	b.n	80017c0 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	691a      	ldr	r2, [r3, #16]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f042 0220 	orr.w	r2, r2, #32
 80017be:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80017c0:	2300      	movs	r3, #0
 80017c2:	e006      	b.n	80017d2 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017c8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
  }
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	371c      	adds	r7, #28
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr

080017dc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017ec:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80017ee:	7bfb      	ldrb	r3, [r7, #15]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d002      	beq.n	80017fa <HAL_CAN_ActivateNotification+0x1e>
 80017f4:	7bfb      	ldrb	r3, [r7, #15]
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d109      	bne.n	800180e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	6959      	ldr	r1, [r3, #20]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	683a      	ldr	r2, [r7, #0]
 8001806:	430a      	orrs	r2, r1
 8001808:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800180a:	2300      	movs	r3, #0
 800180c:	e006      	b.n	800181c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001812:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
  }
}
 800181c:	4618      	mov	r0, r3
 800181e:	3714      	adds	r7, #20
 8001820:	46bd      	mov	sp, r7
 8001822:	bc80      	pop	{r7}
 8001824:	4770      	bx	lr

08001826 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b08a      	sub	sp, #40	@ 0x28
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800182e:	2300      	movs	r3, #0
 8001830:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	695b      	ldr	r3, [r3, #20]
 8001838:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	691b      	ldr	r3, [r3, #16]
 8001858:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001862:	6a3b      	ldr	r3, [r7, #32]
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	2b00      	cmp	r3, #0
 800186a:	d07c      	beq.n	8001966 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	2b00      	cmp	r3, #0
 8001874:	d023      	beq.n	80018be <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2201      	movs	r2, #1
 800187c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	f003 0302 	and.w	r3, r3, #2
 8001884:	2b00      	cmp	r3, #0
 8001886:	d003      	beq.n	8001890 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f000 f983 	bl	8001b94 <HAL_CAN_TxMailbox0CompleteCallback>
 800188e:	e016      	b.n	80018be <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	f003 0304 	and.w	r3, r3, #4
 8001896:	2b00      	cmp	r3, #0
 8001898:	d004      	beq.n	80018a4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800189a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800189c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80018a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80018a2:	e00c      	b.n	80018be <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	f003 0308 	and.w	r3, r3, #8
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d004      	beq.n	80018b8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80018ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80018b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80018b6:	e002      	b.n	80018be <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f000 f986 	bl	8001bca <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d024      	beq.n	8001912 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018d0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d003      	beq.n	80018e4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f000 f962 	bl	8001ba6 <HAL_CAN_TxMailbox1CompleteCallback>
 80018e2:	e016      	b.n	8001912 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d004      	beq.n	80018f8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80018ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80018f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80018f6:	e00c      	b.n	8001912 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d004      	beq.n	800190c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001904:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001908:	627b      	str	r3, [r7, #36]	@ 0x24
 800190a:	e002      	b.n	8001912 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f000 f965 	bl	8001bdc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d024      	beq.n	8001966 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001924:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d003      	beq.n	8001938 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f000 f941 	bl	8001bb8 <HAL_CAN_TxMailbox2CompleteCallback>
 8001936:	e016      	b.n	8001966 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d004      	beq.n	800194c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001944:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001948:	627b      	str	r3, [r7, #36]	@ 0x24
 800194a:	e00c      	b.n	8001966 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d004      	beq.n	8001960 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001958:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800195c:	627b      	str	r3, [r7, #36]	@ 0x24
 800195e:	e002      	b.n	8001966 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f000 f944 	bl	8001bee <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001966:	6a3b      	ldr	r3, [r7, #32]
 8001968:	f003 0308 	and.w	r3, r3, #8
 800196c:	2b00      	cmp	r3, #0
 800196e:	d00c      	beq.n	800198a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	f003 0310 	and.w	r3, r3, #16
 8001976:	2b00      	cmp	r3, #0
 8001978:	d007      	beq.n	800198a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800197a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800197c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001980:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2210      	movs	r2, #16
 8001988:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800198a:	6a3b      	ldr	r3, [r7, #32]
 800198c:	f003 0304 	and.w	r3, r3, #4
 8001990:	2b00      	cmp	r3, #0
 8001992:	d00b      	beq.n	80019ac <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	f003 0308 	and.w	r3, r3, #8
 800199a:	2b00      	cmp	r3, #0
 800199c:	d006      	beq.n	80019ac <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2208      	movs	r2, #8
 80019a4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f000 f933 	bl	8001c12 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80019ac:	6a3b      	ldr	r3, [r7, #32]
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d009      	beq.n	80019ca <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	f003 0303 	and.w	r3, r3, #3
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d002      	beq.n	80019ca <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f000 f91b 	bl	8001c00 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80019ca:	6a3b      	ldr	r3, [r7, #32]
 80019cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d00c      	beq.n	80019ee <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	f003 0310 	and.w	r3, r3, #16
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d007      	beq.n	80019ee <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80019de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019e4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2210      	movs	r2, #16
 80019ec:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80019ee:	6a3b      	ldr	r3, [r7, #32]
 80019f0:	f003 0320 	and.w	r3, r3, #32
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d00b      	beq.n	8001a10 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	f003 0308 	and.w	r3, r3, #8
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d006      	beq.n	8001a10 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2208      	movs	r2, #8
 8001a08:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f000 f90a 	bl	8001c24 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001a10:	6a3b      	ldr	r3, [r7, #32]
 8001a12:	f003 0310 	and.w	r3, r3, #16
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d009      	beq.n	8001a2e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	f003 0303 	and.w	r3, r3, #3
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d002      	beq.n	8001a2e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f7fe ffe9 	bl	8000a00 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001a2e:	6a3b      	ldr	r3, [r7, #32]
 8001a30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d00b      	beq.n	8001a50 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	f003 0310 	and.w	r3, r3, #16
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d006      	beq.n	8001a50 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2210      	movs	r2, #16
 8001a48:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f000 f8f3 	bl	8001c36 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001a50:	6a3b      	ldr	r3, [r7, #32]
 8001a52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d00b      	beq.n	8001a72 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	f003 0308 	and.w	r3, r3, #8
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d006      	beq.n	8001a72 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2208      	movs	r2, #8
 8001a6a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f000 f8eb 	bl	8001c48 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001a72:	6a3b      	ldr	r3, [r7, #32]
 8001a74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d07b      	beq.n	8001b74 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	f003 0304 	and.w	r3, r3, #4
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d072      	beq.n	8001b6c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001a86:	6a3b      	ldr	r3, [r7, #32]
 8001a88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d008      	beq.n	8001aa2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d003      	beq.n	8001aa2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001aa2:	6a3b      	ldr	r3, [r7, #32]
 8001aa4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d008      	beq.n	8001abe <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d003      	beq.n	8001abe <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab8:	f043 0302 	orr.w	r3, r3, #2
 8001abc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001abe:	6a3b      	ldr	r3, [r7, #32]
 8001ac0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d008      	beq.n	8001ada <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d003      	beq.n	8001ada <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad4:	f043 0304 	orr.w	r3, r3, #4
 8001ad8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ada:	6a3b      	ldr	r3, [r7, #32]
 8001adc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d043      	beq.n	8001b6c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d03e      	beq.n	8001b6c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001af4:	2b60      	cmp	r3, #96	@ 0x60
 8001af6:	d02b      	beq.n	8001b50 <HAL_CAN_IRQHandler+0x32a>
 8001af8:	2b60      	cmp	r3, #96	@ 0x60
 8001afa:	d82e      	bhi.n	8001b5a <HAL_CAN_IRQHandler+0x334>
 8001afc:	2b50      	cmp	r3, #80	@ 0x50
 8001afe:	d022      	beq.n	8001b46 <HAL_CAN_IRQHandler+0x320>
 8001b00:	2b50      	cmp	r3, #80	@ 0x50
 8001b02:	d82a      	bhi.n	8001b5a <HAL_CAN_IRQHandler+0x334>
 8001b04:	2b40      	cmp	r3, #64	@ 0x40
 8001b06:	d019      	beq.n	8001b3c <HAL_CAN_IRQHandler+0x316>
 8001b08:	2b40      	cmp	r3, #64	@ 0x40
 8001b0a:	d826      	bhi.n	8001b5a <HAL_CAN_IRQHandler+0x334>
 8001b0c:	2b30      	cmp	r3, #48	@ 0x30
 8001b0e:	d010      	beq.n	8001b32 <HAL_CAN_IRQHandler+0x30c>
 8001b10:	2b30      	cmp	r3, #48	@ 0x30
 8001b12:	d822      	bhi.n	8001b5a <HAL_CAN_IRQHandler+0x334>
 8001b14:	2b10      	cmp	r3, #16
 8001b16:	d002      	beq.n	8001b1e <HAL_CAN_IRQHandler+0x2f8>
 8001b18:	2b20      	cmp	r3, #32
 8001b1a:	d005      	beq.n	8001b28 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001b1c:	e01d      	b.n	8001b5a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b20:	f043 0308 	orr.w	r3, r3, #8
 8001b24:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b26:	e019      	b.n	8001b5c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2a:	f043 0310 	orr.w	r3, r3, #16
 8001b2e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b30:	e014      	b.n	8001b5c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b34:	f043 0320 	orr.w	r3, r3, #32
 8001b38:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b3a:	e00f      	b.n	8001b5c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b42:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b44:	e00a      	b.n	8001b5c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b4c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b4e:	e005      	b.n	8001b5c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b56:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b58:	e000      	b.n	8001b5c <HAL_CAN_IRQHandler+0x336>
            break;
 8001b5a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	699a      	ldr	r2, [r3, #24]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001b6a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2204      	movs	r2, #4
 8001b72:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d008      	beq.n	8001b8c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b80:	431a      	orrs	r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 f867 	bl	8001c5a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001b8c:	bf00      	nop
 8001b8e:	3728      	adds	r7, #40	@ 0x28
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bc80      	pop	{r7}
 8001ba4:	4770      	bx	lr

08001ba6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	b083      	sub	sp, #12
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001bae:	bf00      	nop
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr

08001bb8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bc80      	pop	{r7}
 8001bc8:	4770      	bx	lr

08001bca <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b083      	sub	sp, #12
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr

08001bdc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bc80      	pop	{r7}
 8001bec:	4770      	bx	lr

08001bee <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b083      	sub	sp, #12
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001bf6:	bf00      	nop
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bc80      	pop	{r7}
 8001bfe:	4770      	bx	lr

08001c00 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bc80      	pop	{r7}
 8001c10:	4770      	bx	lr

08001c12 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c12:	b480      	push	{r7}
 8001c14:	b083      	sub	sp, #12
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr

08001c24 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bc80      	pop	{r7}
 8001c34:	4770      	bx	lr

08001c36 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bc80      	pop	{r7}
 8001c46:	4770      	bx	lr

08001c48 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bc80      	pop	{r7}
 8001c58:	4770      	bx	lr

08001c5a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b083      	sub	sp, #12
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bc80      	pop	{r7}
 8001c6a:	4770      	bx	lr

08001c6c <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bc80      	pop	{r7}
 8001c80:	4770      	bx	lr
	...

08001c84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c94:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c9a:	68ba      	ldr	r2, [r7, #8]
 8001c9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cb6:	4a04      	ldr	r2, [pc, #16]	@ (8001cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	60d3      	str	r3, [r2, #12]
}
 8001cbc:	bf00      	nop
 8001cbe:	3714      	adds	r7, #20
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bc80      	pop	{r7}
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	e000ed00 	.word	0xe000ed00

08001ccc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cd0:	4b04      	ldr	r3, [pc, #16]	@ (8001ce4 <__NVIC_GetPriorityGrouping+0x18>)
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	0a1b      	lsrs	r3, r3, #8
 8001cd6:	f003 0307 	and.w	r3, r3, #7
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bc80      	pop	{r7}
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	e000ed00 	.word	0xe000ed00

08001ce8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	db0b      	blt.n	8001d12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cfa:	79fb      	ldrb	r3, [r7, #7]
 8001cfc:	f003 021f 	and.w	r2, r3, #31
 8001d00:	4906      	ldr	r1, [pc, #24]	@ (8001d1c <__NVIC_EnableIRQ+0x34>)
 8001d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d06:	095b      	lsrs	r3, r3, #5
 8001d08:	2001      	movs	r0, #1
 8001d0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d12:	bf00      	nop
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr
 8001d1c:	e000e100 	.word	0xe000e100

08001d20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	6039      	str	r1, [r7, #0]
 8001d2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	db0a      	blt.n	8001d4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	b2da      	uxtb	r2, r3
 8001d38:	490c      	ldr	r1, [pc, #48]	@ (8001d6c <__NVIC_SetPriority+0x4c>)
 8001d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3e:	0112      	lsls	r2, r2, #4
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	440b      	add	r3, r1
 8001d44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d48:	e00a      	b.n	8001d60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	b2da      	uxtb	r2, r3
 8001d4e:	4908      	ldr	r1, [pc, #32]	@ (8001d70 <__NVIC_SetPriority+0x50>)
 8001d50:	79fb      	ldrb	r3, [r7, #7]
 8001d52:	f003 030f 	and.w	r3, r3, #15
 8001d56:	3b04      	subs	r3, #4
 8001d58:	0112      	lsls	r2, r2, #4
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	440b      	add	r3, r1
 8001d5e:	761a      	strb	r2, [r3, #24]
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bc80      	pop	{r7}
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	e000e100 	.word	0xe000e100
 8001d70:	e000ed00 	.word	0xe000ed00

08001d74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b089      	sub	sp, #36	@ 0x24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	f1c3 0307 	rsb	r3, r3, #7
 8001d8e:	2b04      	cmp	r3, #4
 8001d90:	bf28      	it	cs
 8001d92:	2304      	movcs	r3, #4
 8001d94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	3304      	adds	r3, #4
 8001d9a:	2b06      	cmp	r3, #6
 8001d9c:	d902      	bls.n	8001da4 <NVIC_EncodePriority+0x30>
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	3b03      	subs	r3, #3
 8001da2:	e000      	b.n	8001da6 <NVIC_EncodePriority+0x32>
 8001da4:	2300      	movs	r3, #0
 8001da6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	43da      	mvns	r2, r3
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	401a      	ands	r2, r3
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc6:	43d9      	mvns	r1, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dcc:	4313      	orrs	r3, r2
         );
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3724      	adds	r7, #36	@ 0x24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr

08001dd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3b01      	subs	r3, #1
 8001de4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001de8:	d301      	bcc.n	8001dee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dea:	2301      	movs	r3, #1
 8001dec:	e00f      	b.n	8001e0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dee:	4a0a      	ldr	r2, [pc, #40]	@ (8001e18 <SysTick_Config+0x40>)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3b01      	subs	r3, #1
 8001df4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001df6:	210f      	movs	r1, #15
 8001df8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dfc:	f7ff ff90 	bl	8001d20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e00:	4b05      	ldr	r3, [pc, #20]	@ (8001e18 <SysTick_Config+0x40>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e06:	4b04      	ldr	r3, [pc, #16]	@ (8001e18 <SysTick_Config+0x40>)
 8001e08:	2207      	movs	r2, #7
 8001e0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	e000e010 	.word	0xe000e010

08001e1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f7ff ff2d 	bl	8001c84 <__NVIC_SetPriorityGrouping>
}
 8001e2a:	bf00      	nop
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b086      	sub	sp, #24
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	4603      	mov	r3, r0
 8001e3a:	60b9      	str	r1, [r7, #8]
 8001e3c:	607a      	str	r2, [r7, #4]
 8001e3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e40:	2300      	movs	r3, #0
 8001e42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e44:	f7ff ff42 	bl	8001ccc <__NVIC_GetPriorityGrouping>
 8001e48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	68b9      	ldr	r1, [r7, #8]
 8001e4e:	6978      	ldr	r0, [r7, #20]
 8001e50:	f7ff ff90 	bl	8001d74 <NVIC_EncodePriority>
 8001e54:	4602      	mov	r2, r0
 8001e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e5a:	4611      	mov	r1, r2
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff ff5f 	bl	8001d20 <__NVIC_SetPriority>
}
 8001e62:	bf00      	nop
 8001e64:	3718      	adds	r7, #24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b082      	sub	sp, #8
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	4603      	mov	r3, r0
 8001e72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff ff35 	bl	8001ce8 <__NVIC_EnableIRQ>
}
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b082      	sub	sp, #8
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff ffa2 	bl	8001dd8 <SysTick_Config>
 8001e94:	4603      	mov	r3, r0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	b085      	sub	sp, #20
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d008      	beq.n	8001ec8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2204      	movs	r2, #4
 8001eba:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e020      	b.n	8001f0a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 020e 	bic.w	r2, r2, #14
 8001ed6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f022 0201 	bic.w	r2, r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ef6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3714      	adds	r7, #20
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr

08001f14 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d005      	beq.n	8001f38 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2204      	movs	r2, #4
 8001f30:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	73fb      	strb	r3, [r7, #15]
 8001f36:	e051      	b.n	8001fdc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f022 020e 	bic.w	r2, r2, #14
 8001f46:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f022 0201 	bic.w	r2, r2, #1
 8001f56:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a22      	ldr	r2, [pc, #136]	@ (8001fe8 <HAL_DMA_Abort_IT+0xd4>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d029      	beq.n	8001fb6 <HAL_DMA_Abort_IT+0xa2>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a21      	ldr	r2, [pc, #132]	@ (8001fec <HAL_DMA_Abort_IT+0xd8>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d022      	beq.n	8001fb2 <HAL_DMA_Abort_IT+0x9e>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a1f      	ldr	r2, [pc, #124]	@ (8001ff0 <HAL_DMA_Abort_IT+0xdc>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d01a      	beq.n	8001fac <HAL_DMA_Abort_IT+0x98>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a1e      	ldr	r2, [pc, #120]	@ (8001ff4 <HAL_DMA_Abort_IT+0xe0>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d012      	beq.n	8001fa6 <HAL_DMA_Abort_IT+0x92>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a1c      	ldr	r2, [pc, #112]	@ (8001ff8 <HAL_DMA_Abort_IT+0xe4>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d00a      	beq.n	8001fa0 <HAL_DMA_Abort_IT+0x8c>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a1b      	ldr	r2, [pc, #108]	@ (8001ffc <HAL_DMA_Abort_IT+0xe8>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d102      	bne.n	8001f9a <HAL_DMA_Abort_IT+0x86>
 8001f94:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001f98:	e00e      	b.n	8001fb8 <HAL_DMA_Abort_IT+0xa4>
 8001f9a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001f9e:	e00b      	b.n	8001fb8 <HAL_DMA_Abort_IT+0xa4>
 8001fa0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001fa4:	e008      	b.n	8001fb8 <HAL_DMA_Abort_IT+0xa4>
 8001fa6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001faa:	e005      	b.n	8001fb8 <HAL_DMA_Abort_IT+0xa4>
 8001fac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fb0:	e002      	b.n	8001fb8 <HAL_DMA_Abort_IT+0xa4>
 8001fb2:	2310      	movs	r3, #16
 8001fb4:	e000      	b.n	8001fb8 <HAL_DMA_Abort_IT+0xa4>
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	4a11      	ldr	r2, [pc, #68]	@ (8002000 <HAL_DMA_Abort_IT+0xec>)
 8001fba:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d003      	beq.n	8001fdc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	4798      	blx	r3
    } 
  }
  return status;
 8001fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3710      	adds	r7, #16
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40020008 	.word	0x40020008
 8001fec:	4002001c 	.word	0x4002001c
 8001ff0:	40020030 	.word	0x40020030
 8001ff4:	40020044 	.word	0x40020044
 8001ff8:	40020058 	.word	0x40020058
 8001ffc:	4002006c 	.word	0x4002006c
 8002000:	40020000 	.word	0x40020000

08002004 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002004:	b480      	push	{r7}
 8002006:	b08b      	sub	sp, #44	@ 0x2c
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800200e:	2300      	movs	r3, #0
 8002010:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002012:	2300      	movs	r3, #0
 8002014:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002016:	e169      	b.n	80022ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002018:	2201      	movs	r2, #1
 800201a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	69fa      	ldr	r2, [r7, #28]
 8002028:	4013      	ands	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	429a      	cmp	r2, r3
 8002032:	f040 8158 	bne.w	80022e6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	4a9a      	ldr	r2, [pc, #616]	@ (80022a4 <HAL_GPIO_Init+0x2a0>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d05e      	beq.n	80020fe <HAL_GPIO_Init+0xfa>
 8002040:	4a98      	ldr	r2, [pc, #608]	@ (80022a4 <HAL_GPIO_Init+0x2a0>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d875      	bhi.n	8002132 <HAL_GPIO_Init+0x12e>
 8002046:	4a98      	ldr	r2, [pc, #608]	@ (80022a8 <HAL_GPIO_Init+0x2a4>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d058      	beq.n	80020fe <HAL_GPIO_Init+0xfa>
 800204c:	4a96      	ldr	r2, [pc, #600]	@ (80022a8 <HAL_GPIO_Init+0x2a4>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d86f      	bhi.n	8002132 <HAL_GPIO_Init+0x12e>
 8002052:	4a96      	ldr	r2, [pc, #600]	@ (80022ac <HAL_GPIO_Init+0x2a8>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d052      	beq.n	80020fe <HAL_GPIO_Init+0xfa>
 8002058:	4a94      	ldr	r2, [pc, #592]	@ (80022ac <HAL_GPIO_Init+0x2a8>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d869      	bhi.n	8002132 <HAL_GPIO_Init+0x12e>
 800205e:	4a94      	ldr	r2, [pc, #592]	@ (80022b0 <HAL_GPIO_Init+0x2ac>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d04c      	beq.n	80020fe <HAL_GPIO_Init+0xfa>
 8002064:	4a92      	ldr	r2, [pc, #584]	@ (80022b0 <HAL_GPIO_Init+0x2ac>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d863      	bhi.n	8002132 <HAL_GPIO_Init+0x12e>
 800206a:	4a92      	ldr	r2, [pc, #584]	@ (80022b4 <HAL_GPIO_Init+0x2b0>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d046      	beq.n	80020fe <HAL_GPIO_Init+0xfa>
 8002070:	4a90      	ldr	r2, [pc, #576]	@ (80022b4 <HAL_GPIO_Init+0x2b0>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d85d      	bhi.n	8002132 <HAL_GPIO_Init+0x12e>
 8002076:	2b12      	cmp	r3, #18
 8002078:	d82a      	bhi.n	80020d0 <HAL_GPIO_Init+0xcc>
 800207a:	2b12      	cmp	r3, #18
 800207c:	d859      	bhi.n	8002132 <HAL_GPIO_Init+0x12e>
 800207e:	a201      	add	r2, pc, #4	@ (adr r2, 8002084 <HAL_GPIO_Init+0x80>)
 8002080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002084:	080020ff 	.word	0x080020ff
 8002088:	080020d9 	.word	0x080020d9
 800208c:	080020eb 	.word	0x080020eb
 8002090:	0800212d 	.word	0x0800212d
 8002094:	08002133 	.word	0x08002133
 8002098:	08002133 	.word	0x08002133
 800209c:	08002133 	.word	0x08002133
 80020a0:	08002133 	.word	0x08002133
 80020a4:	08002133 	.word	0x08002133
 80020a8:	08002133 	.word	0x08002133
 80020ac:	08002133 	.word	0x08002133
 80020b0:	08002133 	.word	0x08002133
 80020b4:	08002133 	.word	0x08002133
 80020b8:	08002133 	.word	0x08002133
 80020bc:	08002133 	.word	0x08002133
 80020c0:	08002133 	.word	0x08002133
 80020c4:	08002133 	.word	0x08002133
 80020c8:	080020e1 	.word	0x080020e1
 80020cc:	080020f5 	.word	0x080020f5
 80020d0:	4a79      	ldr	r2, [pc, #484]	@ (80022b8 <HAL_GPIO_Init+0x2b4>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d013      	beq.n	80020fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80020d6:	e02c      	b.n	8002132 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	623b      	str	r3, [r7, #32]
          break;
 80020de:	e029      	b.n	8002134 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	3304      	adds	r3, #4
 80020e6:	623b      	str	r3, [r7, #32]
          break;
 80020e8:	e024      	b.n	8002134 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	3308      	adds	r3, #8
 80020f0:	623b      	str	r3, [r7, #32]
          break;
 80020f2:	e01f      	b.n	8002134 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	330c      	adds	r3, #12
 80020fa:	623b      	str	r3, [r7, #32]
          break;
 80020fc:	e01a      	b.n	8002134 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d102      	bne.n	800210c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002106:	2304      	movs	r3, #4
 8002108:	623b      	str	r3, [r7, #32]
          break;
 800210a:	e013      	b.n	8002134 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d105      	bne.n	8002120 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002114:	2308      	movs	r3, #8
 8002116:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	69fa      	ldr	r2, [r7, #28]
 800211c:	611a      	str	r2, [r3, #16]
          break;
 800211e:	e009      	b.n	8002134 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002120:	2308      	movs	r3, #8
 8002122:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	69fa      	ldr	r2, [r7, #28]
 8002128:	615a      	str	r2, [r3, #20]
          break;
 800212a:	e003      	b.n	8002134 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800212c:	2300      	movs	r3, #0
 800212e:	623b      	str	r3, [r7, #32]
          break;
 8002130:	e000      	b.n	8002134 <HAL_GPIO_Init+0x130>
          break;
 8002132:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	2bff      	cmp	r3, #255	@ 0xff
 8002138:	d801      	bhi.n	800213e <HAL_GPIO_Init+0x13a>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	e001      	b.n	8002142 <HAL_GPIO_Init+0x13e>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	3304      	adds	r3, #4
 8002142:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	2bff      	cmp	r3, #255	@ 0xff
 8002148:	d802      	bhi.n	8002150 <HAL_GPIO_Init+0x14c>
 800214a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	e002      	b.n	8002156 <HAL_GPIO_Init+0x152>
 8002150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002152:	3b08      	subs	r3, #8
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	210f      	movs	r1, #15
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	fa01 f303 	lsl.w	r3, r1, r3
 8002164:	43db      	mvns	r3, r3
 8002166:	401a      	ands	r2, r3
 8002168:	6a39      	ldr	r1, [r7, #32]
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	fa01 f303 	lsl.w	r3, r1, r3
 8002170:	431a      	orrs	r2, r3
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 80b1 	beq.w	80022e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002184:	4b4d      	ldr	r3, [pc, #308]	@ (80022bc <HAL_GPIO_Init+0x2b8>)
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	4a4c      	ldr	r2, [pc, #304]	@ (80022bc <HAL_GPIO_Init+0x2b8>)
 800218a:	f043 0301 	orr.w	r3, r3, #1
 800218e:	6193      	str	r3, [r2, #24]
 8002190:	4b4a      	ldr	r3, [pc, #296]	@ (80022bc <HAL_GPIO_Init+0x2b8>)
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	60bb      	str	r3, [r7, #8]
 800219a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800219c:	4a48      	ldr	r2, [pc, #288]	@ (80022c0 <HAL_GPIO_Init+0x2bc>)
 800219e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a0:	089b      	lsrs	r3, r3, #2
 80021a2:	3302      	adds	r3, #2
 80021a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ac:	f003 0303 	and.w	r3, r3, #3
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	220f      	movs	r2, #15
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	43db      	mvns	r3, r3
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	4013      	ands	r3, r2
 80021be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a40      	ldr	r2, [pc, #256]	@ (80022c4 <HAL_GPIO_Init+0x2c0>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d013      	beq.n	80021f0 <HAL_GPIO_Init+0x1ec>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a3f      	ldr	r2, [pc, #252]	@ (80022c8 <HAL_GPIO_Init+0x2c4>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d00d      	beq.n	80021ec <HAL_GPIO_Init+0x1e8>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a3e      	ldr	r2, [pc, #248]	@ (80022cc <HAL_GPIO_Init+0x2c8>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d007      	beq.n	80021e8 <HAL_GPIO_Init+0x1e4>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a3d      	ldr	r2, [pc, #244]	@ (80022d0 <HAL_GPIO_Init+0x2cc>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d101      	bne.n	80021e4 <HAL_GPIO_Init+0x1e0>
 80021e0:	2303      	movs	r3, #3
 80021e2:	e006      	b.n	80021f2 <HAL_GPIO_Init+0x1ee>
 80021e4:	2304      	movs	r3, #4
 80021e6:	e004      	b.n	80021f2 <HAL_GPIO_Init+0x1ee>
 80021e8:	2302      	movs	r3, #2
 80021ea:	e002      	b.n	80021f2 <HAL_GPIO_Init+0x1ee>
 80021ec:	2301      	movs	r3, #1
 80021ee:	e000      	b.n	80021f2 <HAL_GPIO_Init+0x1ee>
 80021f0:	2300      	movs	r3, #0
 80021f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021f4:	f002 0203 	and.w	r2, r2, #3
 80021f8:	0092      	lsls	r2, r2, #2
 80021fa:	4093      	lsls	r3, r2
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	4313      	orrs	r3, r2
 8002200:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002202:	492f      	ldr	r1, [pc, #188]	@ (80022c0 <HAL_GPIO_Init+0x2bc>)
 8002204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002206:	089b      	lsrs	r3, r3, #2
 8002208:	3302      	adds	r3, #2
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d006      	beq.n	800222a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800221c:	4b2d      	ldr	r3, [pc, #180]	@ (80022d4 <HAL_GPIO_Init+0x2d0>)
 800221e:	689a      	ldr	r2, [r3, #8]
 8002220:	492c      	ldr	r1, [pc, #176]	@ (80022d4 <HAL_GPIO_Init+0x2d0>)
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	4313      	orrs	r3, r2
 8002226:	608b      	str	r3, [r1, #8]
 8002228:	e006      	b.n	8002238 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800222a:	4b2a      	ldr	r3, [pc, #168]	@ (80022d4 <HAL_GPIO_Init+0x2d0>)
 800222c:	689a      	ldr	r2, [r3, #8]
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	43db      	mvns	r3, r3
 8002232:	4928      	ldr	r1, [pc, #160]	@ (80022d4 <HAL_GPIO_Init+0x2d0>)
 8002234:	4013      	ands	r3, r2
 8002236:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d006      	beq.n	8002252 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002244:	4b23      	ldr	r3, [pc, #140]	@ (80022d4 <HAL_GPIO_Init+0x2d0>)
 8002246:	68da      	ldr	r2, [r3, #12]
 8002248:	4922      	ldr	r1, [pc, #136]	@ (80022d4 <HAL_GPIO_Init+0x2d0>)
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	4313      	orrs	r3, r2
 800224e:	60cb      	str	r3, [r1, #12]
 8002250:	e006      	b.n	8002260 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002252:	4b20      	ldr	r3, [pc, #128]	@ (80022d4 <HAL_GPIO_Init+0x2d0>)
 8002254:	68da      	ldr	r2, [r3, #12]
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	43db      	mvns	r3, r3
 800225a:	491e      	ldr	r1, [pc, #120]	@ (80022d4 <HAL_GPIO_Init+0x2d0>)
 800225c:	4013      	ands	r3, r2
 800225e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d006      	beq.n	800227a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800226c:	4b19      	ldr	r3, [pc, #100]	@ (80022d4 <HAL_GPIO_Init+0x2d0>)
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	4918      	ldr	r1, [pc, #96]	@ (80022d4 <HAL_GPIO_Init+0x2d0>)
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	4313      	orrs	r3, r2
 8002276:	604b      	str	r3, [r1, #4]
 8002278:	e006      	b.n	8002288 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800227a:	4b16      	ldr	r3, [pc, #88]	@ (80022d4 <HAL_GPIO_Init+0x2d0>)
 800227c:	685a      	ldr	r2, [r3, #4]
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	43db      	mvns	r3, r3
 8002282:	4914      	ldr	r1, [pc, #80]	@ (80022d4 <HAL_GPIO_Init+0x2d0>)
 8002284:	4013      	ands	r3, r2
 8002286:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d021      	beq.n	80022d8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002294:	4b0f      	ldr	r3, [pc, #60]	@ (80022d4 <HAL_GPIO_Init+0x2d0>)
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	490e      	ldr	r1, [pc, #56]	@ (80022d4 <HAL_GPIO_Init+0x2d0>)
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	4313      	orrs	r3, r2
 800229e:	600b      	str	r3, [r1, #0]
 80022a0:	e021      	b.n	80022e6 <HAL_GPIO_Init+0x2e2>
 80022a2:	bf00      	nop
 80022a4:	10320000 	.word	0x10320000
 80022a8:	10310000 	.word	0x10310000
 80022ac:	10220000 	.word	0x10220000
 80022b0:	10210000 	.word	0x10210000
 80022b4:	10120000 	.word	0x10120000
 80022b8:	10110000 	.word	0x10110000
 80022bc:	40021000 	.word	0x40021000
 80022c0:	40010000 	.word	0x40010000
 80022c4:	40010800 	.word	0x40010800
 80022c8:	40010c00 	.word	0x40010c00
 80022cc:	40011000 	.word	0x40011000
 80022d0:	40011400 	.word	0x40011400
 80022d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80022d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002308 <HAL_GPIO_Init+0x304>)
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	43db      	mvns	r3, r3
 80022e0:	4909      	ldr	r1, [pc, #36]	@ (8002308 <HAL_GPIO_Init+0x304>)
 80022e2:	4013      	ands	r3, r2
 80022e4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80022e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e8:	3301      	adds	r3, #1
 80022ea:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f2:	fa22 f303 	lsr.w	r3, r2, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f47f ae8e 	bne.w	8002018 <HAL_GPIO_Init+0x14>
  }
}
 80022fc:	bf00      	nop
 80022fe:	bf00      	nop
 8002300:	372c      	adds	r7, #44	@ 0x2c
 8002302:	46bd      	mov	sp, r7
 8002304:	bc80      	pop	{r7}
 8002306:	4770      	bx	lr
 8002308:	40010400 	.word	0x40010400

0800230c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	460b      	mov	r3, r1
 8002316:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	887b      	ldrh	r3, [r7, #2]
 800231e:	4013      	ands	r3, r2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d002      	beq.n	800232a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002324:	2301      	movs	r3, #1
 8002326:	73fb      	strb	r3, [r7, #15]
 8002328:	e001      	b.n	800232e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800232a:	2300      	movs	r3, #0
 800232c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800232e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002330:	4618      	mov	r0, r3
 8002332:	3714      	adds	r7, #20
 8002334:	46bd      	mov	sp, r7
 8002336:	bc80      	pop	{r7}
 8002338:	4770      	bx	lr

0800233a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800233a:	b480      	push	{r7}
 800233c:	b083      	sub	sp, #12
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
 8002342:	460b      	mov	r3, r1
 8002344:	807b      	strh	r3, [r7, #2]
 8002346:	4613      	mov	r3, r2
 8002348:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800234a:	787b      	ldrb	r3, [r7, #1]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d003      	beq.n	8002358 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002350:	887a      	ldrh	r2, [r7, #2]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002356:	e003      	b.n	8002360 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002358:	887b      	ldrh	r3, [r7, #2]
 800235a:	041a      	lsls	r2, r3, #16
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	611a      	str	r2, [r3, #16]
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	bc80      	pop	{r7}
 8002368:	4770      	bx	lr
	...

0800236c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d101      	bne.n	800237e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e272      	b.n	8002864 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 8087 	beq.w	800249a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800238c:	4b92      	ldr	r3, [pc, #584]	@ (80025d8 <HAL_RCC_OscConfig+0x26c>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f003 030c 	and.w	r3, r3, #12
 8002394:	2b04      	cmp	r3, #4
 8002396:	d00c      	beq.n	80023b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002398:	4b8f      	ldr	r3, [pc, #572]	@ (80025d8 <HAL_RCC_OscConfig+0x26c>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f003 030c 	and.w	r3, r3, #12
 80023a0:	2b08      	cmp	r3, #8
 80023a2:	d112      	bne.n	80023ca <HAL_RCC_OscConfig+0x5e>
 80023a4:	4b8c      	ldr	r3, [pc, #560]	@ (80025d8 <HAL_RCC_OscConfig+0x26c>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023b0:	d10b      	bne.n	80023ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b2:	4b89      	ldr	r3, [pc, #548]	@ (80025d8 <HAL_RCC_OscConfig+0x26c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d06c      	beq.n	8002498 <HAL_RCC_OscConfig+0x12c>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d168      	bne.n	8002498 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e24c      	b.n	8002864 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023d2:	d106      	bne.n	80023e2 <HAL_RCC_OscConfig+0x76>
 80023d4:	4b80      	ldr	r3, [pc, #512]	@ (80025d8 <HAL_RCC_OscConfig+0x26c>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a7f      	ldr	r2, [pc, #508]	@ (80025d8 <HAL_RCC_OscConfig+0x26c>)
 80023da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023de:	6013      	str	r3, [r2, #0]
 80023e0:	e02e      	b.n	8002440 <HAL_RCC_OscConfig+0xd4>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10c      	bne.n	8002404 <HAL_RCC_OscConfig+0x98>
 80023ea:	4b7b      	ldr	r3, [pc, #492]	@ (80025d8 <HAL_RCC_OscConfig+0x26c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a7a      	ldr	r2, [pc, #488]	@ (80025d8 <HAL_RCC_OscConfig+0x26c>)
 80023f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023f4:	6013      	str	r3, [r2, #0]
 80023f6:	4b78      	ldr	r3, [pc, #480]	@ (80025d8 <HAL_RCC_OscConfig+0x26c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a77      	ldr	r2, [pc, #476]	@ (80025d8 <HAL_RCC_OscConfig+0x26c>)
 80023fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002400:	6013      	str	r3, [r2, #0]
 8002402:	e01d      	b.n	8002440 <HAL_RCC_OscConfig+0xd4>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800240c:	d10c      	bne.n	8002428 <HAL_RCC_OscConfig+0xbc>
 800240e:	4b72      	ldr	r3, [pc, #456]	@ (80025d8 <HAL_RCC_OscConfig+0x26c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a71      	ldr	r2, [pc, #452]	@ (80025d8 <HAL_RCC_OscConfig+0x26c>)
 8002414:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002418:	6013      	str	r3, [r2, #0]
 800241a:	4b6f      	ldr	r3, [pc, #444]	@ (80025d8 <HAL_RCC_OscConfig+0x26c>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a6e      	ldr	r2, [pc, #440]	@ (80025d8 <HAL_RCC_OscConfig+0x26c>)
 8002420:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002424:	6013      	str	r3, [r2, #0]
 8002426:	e00b      	b.n	8002440 <HAL_RCC_OscConfig+0xd4>
 8002428:	4b6b      	ldr	r3, [pc, #428]	@ (80025d8 <HAL_RCC_OscConfig+0x26c>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a6a      	ldr	r2, [pc, #424]	@ (80025d8 <HAL_RCC_OscConfig+0x26c>)
 800242e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002432:	6013      	str	r3, [r2, #0]
 8002434:	4b68      	ldr	r3, [pc, #416]	@ (80025d8 <HAL_RCC_OscConfig+0x26c>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a67      	ldr	r2, [pc, #412]	@ (80025d8 <HAL_RCC_OscConfig+0x26c>)
 800243a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800243e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d013      	beq.n	8002470 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002448:	f7fe fda2 	bl	8000f90 <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002450:	f7fe fd9e 	bl	8000f90 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b64      	cmp	r3, #100	@ 0x64
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e200      	b.n	8002864 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002462:	4b5d      	ldr	r3, [pc, #372]	@ (80025d8 <HAL_RCC_OscConfig+0x26c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d0f0      	beq.n	8002450 <HAL_RCC_OscConfig+0xe4>
 800246e:	e014      	b.n	800249a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002470:	f7fe fd8e 	bl	8000f90 <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002478:	f7fe fd8a 	bl	8000f90 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b64      	cmp	r3, #100	@ 0x64
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e1ec      	b.n	8002864 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800248a:	4b53      	ldr	r3, [pc, #332]	@ (80025d8 <HAL_RCC_OscConfig+0x26c>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1f0      	bne.n	8002478 <HAL_RCC_OscConfig+0x10c>
 8002496:	e000      	b.n	800249a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002498:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d063      	beq.n	800256e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024a6:	4b4c      	ldr	r3, [pc, #304]	@ (80025d8 <HAL_RCC_OscConfig+0x26c>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f003 030c 	and.w	r3, r3, #12
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00b      	beq.n	80024ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80024b2:	4b49      	ldr	r3, [pc, #292]	@ (80025d8 <HAL_RCC_OscConfig+0x26c>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f003 030c 	and.w	r3, r3, #12
 80024ba:	2b08      	cmp	r3, #8
 80024bc:	d11c      	bne.n	80024f8 <HAL_RCC_OscConfig+0x18c>
 80024be:	4b46      	ldr	r3, [pc, #280]	@ (80025d8 <HAL_RCC_OscConfig+0x26c>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d116      	bne.n	80024f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ca:	4b43      	ldr	r3, [pc, #268]	@ (80025d8 <HAL_RCC_OscConfig+0x26c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d005      	beq.n	80024e2 <HAL_RCC_OscConfig+0x176>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d001      	beq.n	80024e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e1c0      	b.n	8002864 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024e2:	4b3d      	ldr	r3, [pc, #244]	@ (80025d8 <HAL_RCC_OscConfig+0x26c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	4939      	ldr	r1, [pc, #228]	@ (80025d8 <HAL_RCC_OscConfig+0x26c>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024f6:	e03a      	b.n	800256e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d020      	beq.n	8002542 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002500:	4b36      	ldr	r3, [pc, #216]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 8002502:	2201      	movs	r2, #1
 8002504:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002506:	f7fe fd43 	bl	8000f90 <HAL_GetTick>
 800250a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800250c:	e008      	b.n	8002520 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800250e:	f7fe fd3f 	bl	8000f90 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d901      	bls.n	8002520 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e1a1      	b.n	8002864 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002520:	4b2d      	ldr	r3, [pc, #180]	@ (80025d8 <HAL_RCC_OscConfig+0x26c>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d0f0      	beq.n	800250e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800252c:	4b2a      	ldr	r3, [pc, #168]	@ (80025d8 <HAL_RCC_OscConfig+0x26c>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	695b      	ldr	r3, [r3, #20]
 8002538:	00db      	lsls	r3, r3, #3
 800253a:	4927      	ldr	r1, [pc, #156]	@ (80025d8 <HAL_RCC_OscConfig+0x26c>)
 800253c:	4313      	orrs	r3, r2
 800253e:	600b      	str	r3, [r1, #0]
 8002540:	e015      	b.n	800256e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002542:	4b26      	ldr	r3, [pc, #152]	@ (80025dc <HAL_RCC_OscConfig+0x270>)
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002548:	f7fe fd22 	bl	8000f90 <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002550:	f7fe fd1e 	bl	8000f90 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e180      	b.n	8002864 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002562:	4b1d      	ldr	r3, [pc, #116]	@ (80025d8 <HAL_RCC_OscConfig+0x26c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1f0      	bne.n	8002550 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0308 	and.w	r3, r3, #8
 8002576:	2b00      	cmp	r3, #0
 8002578:	d03a      	beq.n	80025f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d019      	beq.n	80025b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002582:	4b17      	ldr	r3, [pc, #92]	@ (80025e0 <HAL_RCC_OscConfig+0x274>)
 8002584:	2201      	movs	r2, #1
 8002586:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002588:	f7fe fd02 	bl	8000f90 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002590:	f7fe fcfe 	bl	8000f90 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e160      	b.n	8002864 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025a2:	4b0d      	ldr	r3, [pc, #52]	@ (80025d8 <HAL_RCC_OscConfig+0x26c>)
 80025a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d0f0      	beq.n	8002590 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80025ae:	2001      	movs	r0, #1
 80025b0:	f000 face 	bl	8002b50 <RCC_Delay>
 80025b4:	e01c      	b.n	80025f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025b6:	4b0a      	ldr	r3, [pc, #40]	@ (80025e0 <HAL_RCC_OscConfig+0x274>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025bc:	f7fe fce8 	bl	8000f90 <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025c2:	e00f      	b.n	80025e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025c4:	f7fe fce4 	bl	8000f90 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d908      	bls.n	80025e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e146      	b.n	8002864 <HAL_RCC_OscConfig+0x4f8>
 80025d6:	bf00      	nop
 80025d8:	40021000 	.word	0x40021000
 80025dc:	42420000 	.word	0x42420000
 80025e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025e4:	4b92      	ldr	r3, [pc, #584]	@ (8002830 <HAL_RCC_OscConfig+0x4c4>)
 80025e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1e9      	bne.n	80025c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f000 80a6 	beq.w	800274a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025fe:	2300      	movs	r3, #0
 8002600:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002602:	4b8b      	ldr	r3, [pc, #556]	@ (8002830 <HAL_RCC_OscConfig+0x4c4>)
 8002604:	69db      	ldr	r3, [r3, #28]
 8002606:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10d      	bne.n	800262a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800260e:	4b88      	ldr	r3, [pc, #544]	@ (8002830 <HAL_RCC_OscConfig+0x4c4>)
 8002610:	69db      	ldr	r3, [r3, #28]
 8002612:	4a87      	ldr	r2, [pc, #540]	@ (8002830 <HAL_RCC_OscConfig+0x4c4>)
 8002614:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002618:	61d3      	str	r3, [r2, #28]
 800261a:	4b85      	ldr	r3, [pc, #532]	@ (8002830 <HAL_RCC_OscConfig+0x4c4>)
 800261c:	69db      	ldr	r3, [r3, #28]
 800261e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002622:	60bb      	str	r3, [r7, #8]
 8002624:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002626:	2301      	movs	r3, #1
 8002628:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800262a:	4b82      	ldr	r3, [pc, #520]	@ (8002834 <HAL_RCC_OscConfig+0x4c8>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002632:	2b00      	cmp	r3, #0
 8002634:	d118      	bne.n	8002668 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002636:	4b7f      	ldr	r3, [pc, #508]	@ (8002834 <HAL_RCC_OscConfig+0x4c8>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a7e      	ldr	r2, [pc, #504]	@ (8002834 <HAL_RCC_OscConfig+0x4c8>)
 800263c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002640:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002642:	f7fe fca5 	bl	8000f90 <HAL_GetTick>
 8002646:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002648:	e008      	b.n	800265c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800264a:	f7fe fca1 	bl	8000f90 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b64      	cmp	r3, #100	@ 0x64
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e103      	b.n	8002864 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800265c:	4b75      	ldr	r3, [pc, #468]	@ (8002834 <HAL_RCC_OscConfig+0x4c8>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002664:	2b00      	cmp	r3, #0
 8002666:	d0f0      	beq.n	800264a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d106      	bne.n	800267e <HAL_RCC_OscConfig+0x312>
 8002670:	4b6f      	ldr	r3, [pc, #444]	@ (8002830 <HAL_RCC_OscConfig+0x4c4>)
 8002672:	6a1b      	ldr	r3, [r3, #32]
 8002674:	4a6e      	ldr	r2, [pc, #440]	@ (8002830 <HAL_RCC_OscConfig+0x4c4>)
 8002676:	f043 0301 	orr.w	r3, r3, #1
 800267a:	6213      	str	r3, [r2, #32]
 800267c:	e02d      	b.n	80026da <HAL_RCC_OscConfig+0x36e>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d10c      	bne.n	80026a0 <HAL_RCC_OscConfig+0x334>
 8002686:	4b6a      	ldr	r3, [pc, #424]	@ (8002830 <HAL_RCC_OscConfig+0x4c4>)
 8002688:	6a1b      	ldr	r3, [r3, #32]
 800268a:	4a69      	ldr	r2, [pc, #420]	@ (8002830 <HAL_RCC_OscConfig+0x4c4>)
 800268c:	f023 0301 	bic.w	r3, r3, #1
 8002690:	6213      	str	r3, [r2, #32]
 8002692:	4b67      	ldr	r3, [pc, #412]	@ (8002830 <HAL_RCC_OscConfig+0x4c4>)
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	4a66      	ldr	r2, [pc, #408]	@ (8002830 <HAL_RCC_OscConfig+0x4c4>)
 8002698:	f023 0304 	bic.w	r3, r3, #4
 800269c:	6213      	str	r3, [r2, #32]
 800269e:	e01c      	b.n	80026da <HAL_RCC_OscConfig+0x36e>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	2b05      	cmp	r3, #5
 80026a6:	d10c      	bne.n	80026c2 <HAL_RCC_OscConfig+0x356>
 80026a8:	4b61      	ldr	r3, [pc, #388]	@ (8002830 <HAL_RCC_OscConfig+0x4c4>)
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	4a60      	ldr	r2, [pc, #384]	@ (8002830 <HAL_RCC_OscConfig+0x4c4>)
 80026ae:	f043 0304 	orr.w	r3, r3, #4
 80026b2:	6213      	str	r3, [r2, #32]
 80026b4:	4b5e      	ldr	r3, [pc, #376]	@ (8002830 <HAL_RCC_OscConfig+0x4c4>)
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	4a5d      	ldr	r2, [pc, #372]	@ (8002830 <HAL_RCC_OscConfig+0x4c4>)
 80026ba:	f043 0301 	orr.w	r3, r3, #1
 80026be:	6213      	str	r3, [r2, #32]
 80026c0:	e00b      	b.n	80026da <HAL_RCC_OscConfig+0x36e>
 80026c2:	4b5b      	ldr	r3, [pc, #364]	@ (8002830 <HAL_RCC_OscConfig+0x4c4>)
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	4a5a      	ldr	r2, [pc, #360]	@ (8002830 <HAL_RCC_OscConfig+0x4c4>)
 80026c8:	f023 0301 	bic.w	r3, r3, #1
 80026cc:	6213      	str	r3, [r2, #32]
 80026ce:	4b58      	ldr	r3, [pc, #352]	@ (8002830 <HAL_RCC_OscConfig+0x4c4>)
 80026d0:	6a1b      	ldr	r3, [r3, #32]
 80026d2:	4a57      	ldr	r2, [pc, #348]	@ (8002830 <HAL_RCC_OscConfig+0x4c4>)
 80026d4:	f023 0304 	bic.w	r3, r3, #4
 80026d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d015      	beq.n	800270e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026e2:	f7fe fc55 	bl	8000f90 <HAL_GetTick>
 80026e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026e8:	e00a      	b.n	8002700 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ea:	f7fe fc51 	bl	8000f90 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e0b1      	b.n	8002864 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002700:	4b4b      	ldr	r3, [pc, #300]	@ (8002830 <HAL_RCC_OscConfig+0x4c4>)
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d0ee      	beq.n	80026ea <HAL_RCC_OscConfig+0x37e>
 800270c:	e014      	b.n	8002738 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800270e:	f7fe fc3f 	bl	8000f90 <HAL_GetTick>
 8002712:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002714:	e00a      	b.n	800272c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002716:	f7fe fc3b 	bl	8000f90 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002724:	4293      	cmp	r3, r2
 8002726:	d901      	bls.n	800272c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e09b      	b.n	8002864 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800272c:	4b40      	ldr	r3, [pc, #256]	@ (8002830 <HAL_RCC_OscConfig+0x4c4>)
 800272e:	6a1b      	ldr	r3, [r3, #32]
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d1ee      	bne.n	8002716 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002738:	7dfb      	ldrb	r3, [r7, #23]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d105      	bne.n	800274a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800273e:	4b3c      	ldr	r3, [pc, #240]	@ (8002830 <HAL_RCC_OscConfig+0x4c4>)
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	4a3b      	ldr	r2, [pc, #236]	@ (8002830 <HAL_RCC_OscConfig+0x4c4>)
 8002744:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002748:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	69db      	ldr	r3, [r3, #28]
 800274e:	2b00      	cmp	r3, #0
 8002750:	f000 8087 	beq.w	8002862 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002754:	4b36      	ldr	r3, [pc, #216]	@ (8002830 <HAL_RCC_OscConfig+0x4c4>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f003 030c 	and.w	r3, r3, #12
 800275c:	2b08      	cmp	r3, #8
 800275e:	d061      	beq.n	8002824 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	69db      	ldr	r3, [r3, #28]
 8002764:	2b02      	cmp	r3, #2
 8002766:	d146      	bne.n	80027f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002768:	4b33      	ldr	r3, [pc, #204]	@ (8002838 <HAL_RCC_OscConfig+0x4cc>)
 800276a:	2200      	movs	r2, #0
 800276c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276e:	f7fe fc0f 	bl	8000f90 <HAL_GetTick>
 8002772:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002774:	e008      	b.n	8002788 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002776:	f7fe fc0b 	bl	8000f90 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e06d      	b.n	8002864 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002788:	4b29      	ldr	r3, [pc, #164]	@ (8002830 <HAL_RCC_OscConfig+0x4c4>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1f0      	bne.n	8002776 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800279c:	d108      	bne.n	80027b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800279e:	4b24      	ldr	r3, [pc, #144]	@ (8002830 <HAL_RCC_OscConfig+0x4c4>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	4921      	ldr	r1, [pc, #132]	@ (8002830 <HAL_RCC_OscConfig+0x4c4>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002830 <HAL_RCC_OscConfig+0x4c4>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a19      	ldr	r1, [r3, #32]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c0:	430b      	orrs	r3, r1
 80027c2:	491b      	ldr	r1, [pc, #108]	@ (8002830 <HAL_RCC_OscConfig+0x4c4>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002838 <HAL_RCC_OscConfig+0x4cc>)
 80027ca:	2201      	movs	r2, #1
 80027cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ce:	f7fe fbdf 	bl	8000f90 <HAL_GetTick>
 80027d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027d4:	e008      	b.n	80027e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027d6:	f7fe fbdb 	bl	8000f90 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e03d      	b.n	8002864 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027e8:	4b11      	ldr	r3, [pc, #68]	@ (8002830 <HAL_RCC_OscConfig+0x4c4>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d0f0      	beq.n	80027d6 <HAL_RCC_OscConfig+0x46a>
 80027f4:	e035      	b.n	8002862 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027f6:	4b10      	ldr	r3, [pc, #64]	@ (8002838 <HAL_RCC_OscConfig+0x4cc>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027fc:	f7fe fbc8 	bl	8000f90 <HAL_GetTick>
 8002800:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002802:	e008      	b.n	8002816 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002804:	f7fe fbc4 	bl	8000f90 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e026      	b.n	8002864 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002816:	4b06      	ldr	r3, [pc, #24]	@ (8002830 <HAL_RCC_OscConfig+0x4c4>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d1f0      	bne.n	8002804 <HAL_RCC_OscConfig+0x498>
 8002822:	e01e      	b.n	8002862 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	69db      	ldr	r3, [r3, #28]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d107      	bne.n	800283c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e019      	b.n	8002864 <HAL_RCC_OscConfig+0x4f8>
 8002830:	40021000 	.word	0x40021000
 8002834:	40007000 	.word	0x40007000
 8002838:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800283c:	4b0b      	ldr	r3, [pc, #44]	@ (800286c <HAL_RCC_OscConfig+0x500>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a1b      	ldr	r3, [r3, #32]
 800284c:	429a      	cmp	r2, r3
 800284e:	d106      	bne.n	800285e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800285a:	429a      	cmp	r2, r3
 800285c:	d001      	beq.n	8002862 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e000      	b.n	8002864 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	3718      	adds	r7, #24
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40021000 	.word	0x40021000

08002870 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d101      	bne.n	8002884 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e0d0      	b.n	8002a26 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002884:	4b6a      	ldr	r3, [pc, #424]	@ (8002a30 <HAL_RCC_ClockConfig+0x1c0>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	429a      	cmp	r2, r3
 8002890:	d910      	bls.n	80028b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002892:	4b67      	ldr	r3, [pc, #412]	@ (8002a30 <HAL_RCC_ClockConfig+0x1c0>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f023 0207 	bic.w	r2, r3, #7
 800289a:	4965      	ldr	r1, [pc, #404]	@ (8002a30 <HAL_RCC_ClockConfig+0x1c0>)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	4313      	orrs	r3, r2
 80028a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a2:	4b63      	ldr	r3, [pc, #396]	@ (8002a30 <HAL_RCC_ClockConfig+0x1c0>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0307 	and.w	r3, r3, #7
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d001      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e0b8      	b.n	8002a26 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0302 	and.w	r3, r3, #2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d020      	beq.n	8002902 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d005      	beq.n	80028d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028cc:	4b59      	ldr	r3, [pc, #356]	@ (8002a34 <HAL_RCC_ClockConfig+0x1c4>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	4a58      	ldr	r2, [pc, #352]	@ (8002a34 <HAL_RCC_ClockConfig+0x1c4>)
 80028d2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80028d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0308 	and.w	r3, r3, #8
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d005      	beq.n	80028f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028e4:	4b53      	ldr	r3, [pc, #332]	@ (8002a34 <HAL_RCC_ClockConfig+0x1c4>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	4a52      	ldr	r2, [pc, #328]	@ (8002a34 <HAL_RCC_ClockConfig+0x1c4>)
 80028ea:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80028ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028f0:	4b50      	ldr	r3, [pc, #320]	@ (8002a34 <HAL_RCC_ClockConfig+0x1c4>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	494d      	ldr	r1, [pc, #308]	@ (8002a34 <HAL_RCC_ClockConfig+0x1c4>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	2b00      	cmp	r3, #0
 800290c:	d040      	beq.n	8002990 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d107      	bne.n	8002926 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002916:	4b47      	ldr	r3, [pc, #284]	@ (8002a34 <HAL_RCC_ClockConfig+0x1c4>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d115      	bne.n	800294e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e07f      	b.n	8002a26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	2b02      	cmp	r3, #2
 800292c:	d107      	bne.n	800293e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800292e:	4b41      	ldr	r3, [pc, #260]	@ (8002a34 <HAL_RCC_ClockConfig+0x1c4>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d109      	bne.n	800294e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e073      	b.n	8002a26 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800293e:	4b3d      	ldr	r3, [pc, #244]	@ (8002a34 <HAL_RCC_ClockConfig+0x1c4>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e06b      	b.n	8002a26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800294e:	4b39      	ldr	r3, [pc, #228]	@ (8002a34 <HAL_RCC_ClockConfig+0x1c4>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f023 0203 	bic.w	r2, r3, #3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	4936      	ldr	r1, [pc, #216]	@ (8002a34 <HAL_RCC_ClockConfig+0x1c4>)
 800295c:	4313      	orrs	r3, r2
 800295e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002960:	f7fe fb16 	bl	8000f90 <HAL_GetTick>
 8002964:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002966:	e00a      	b.n	800297e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002968:	f7fe fb12 	bl	8000f90 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002976:	4293      	cmp	r3, r2
 8002978:	d901      	bls.n	800297e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e053      	b.n	8002a26 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800297e:	4b2d      	ldr	r3, [pc, #180]	@ (8002a34 <HAL_RCC_ClockConfig+0x1c4>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f003 020c 	and.w	r2, r3, #12
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	429a      	cmp	r2, r3
 800298e:	d1eb      	bne.n	8002968 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002990:	4b27      	ldr	r3, [pc, #156]	@ (8002a30 <HAL_RCC_ClockConfig+0x1c0>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0307 	and.w	r3, r3, #7
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	429a      	cmp	r2, r3
 800299c:	d210      	bcs.n	80029c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800299e:	4b24      	ldr	r3, [pc, #144]	@ (8002a30 <HAL_RCC_ClockConfig+0x1c0>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f023 0207 	bic.w	r2, r3, #7
 80029a6:	4922      	ldr	r1, [pc, #136]	@ (8002a30 <HAL_RCC_ClockConfig+0x1c0>)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ae:	4b20      	ldr	r3, [pc, #128]	@ (8002a30 <HAL_RCC_ClockConfig+0x1c0>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0307 	and.w	r3, r3, #7
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d001      	beq.n	80029c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e032      	b.n	8002a26 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0304 	and.w	r3, r3, #4
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d008      	beq.n	80029de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029cc:	4b19      	ldr	r3, [pc, #100]	@ (8002a34 <HAL_RCC_ClockConfig+0x1c4>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	4916      	ldr	r1, [pc, #88]	@ (8002a34 <HAL_RCC_ClockConfig+0x1c4>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0308 	and.w	r3, r3, #8
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d009      	beq.n	80029fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029ea:	4b12      	ldr	r3, [pc, #72]	@ (8002a34 <HAL_RCC_ClockConfig+0x1c4>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	490e      	ldr	r1, [pc, #56]	@ (8002a34 <HAL_RCC_ClockConfig+0x1c4>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029fe:	f000 f821 	bl	8002a44 <HAL_RCC_GetSysClockFreq>
 8002a02:	4602      	mov	r2, r0
 8002a04:	4b0b      	ldr	r3, [pc, #44]	@ (8002a34 <HAL_RCC_ClockConfig+0x1c4>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	091b      	lsrs	r3, r3, #4
 8002a0a:	f003 030f 	and.w	r3, r3, #15
 8002a0e:	490a      	ldr	r1, [pc, #40]	@ (8002a38 <HAL_RCC_ClockConfig+0x1c8>)
 8002a10:	5ccb      	ldrb	r3, [r1, r3]
 8002a12:	fa22 f303 	lsr.w	r3, r2, r3
 8002a16:	4a09      	ldr	r2, [pc, #36]	@ (8002a3c <HAL_RCC_ClockConfig+0x1cc>)
 8002a18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a1a:	4b09      	ldr	r3, [pc, #36]	@ (8002a40 <HAL_RCC_ClockConfig+0x1d0>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7fe fa74 	bl	8000f0c <HAL_InitTick>

  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	40022000 	.word	0x40022000
 8002a34:	40021000 	.word	0x40021000
 8002a38:	08004bf4 	.word	0x08004bf4
 8002a3c:	20000000 	.word	0x20000000
 8002a40:	20000004 	.word	0x20000004

08002a44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b087      	sub	sp, #28
 8002a48:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	60fb      	str	r3, [r7, #12]
 8002a4e:	2300      	movs	r3, #0
 8002a50:	60bb      	str	r3, [r7, #8]
 8002a52:	2300      	movs	r3, #0
 8002a54:	617b      	str	r3, [r7, #20]
 8002a56:	2300      	movs	r3, #0
 8002a58:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ad8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f003 030c 	and.w	r3, r3, #12
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d002      	beq.n	8002a74 <HAL_RCC_GetSysClockFreq+0x30>
 8002a6e:	2b08      	cmp	r3, #8
 8002a70:	d003      	beq.n	8002a7a <HAL_RCC_GetSysClockFreq+0x36>
 8002a72:	e027      	b.n	8002ac4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a74:	4b19      	ldr	r3, [pc, #100]	@ (8002adc <HAL_RCC_GetSysClockFreq+0x98>)
 8002a76:	613b      	str	r3, [r7, #16]
      break;
 8002a78:	e027      	b.n	8002aca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	0c9b      	lsrs	r3, r3, #18
 8002a7e:	f003 030f 	and.w	r3, r3, #15
 8002a82:	4a17      	ldr	r2, [pc, #92]	@ (8002ae0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a84:	5cd3      	ldrb	r3, [r2, r3]
 8002a86:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d010      	beq.n	8002ab4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a92:	4b11      	ldr	r3, [pc, #68]	@ (8002ad8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	0c5b      	lsrs	r3, r3, #17
 8002a98:	f003 0301 	and.w	r3, r3, #1
 8002a9c:	4a11      	ldr	r2, [pc, #68]	@ (8002ae4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a9e:	5cd3      	ldrb	r3, [r2, r3]
 8002aa0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a0d      	ldr	r2, [pc, #52]	@ (8002adc <HAL_RCC_GetSysClockFreq+0x98>)
 8002aa6:	fb03 f202 	mul.w	r2, r3, r2
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab0:	617b      	str	r3, [r7, #20]
 8002ab2:	e004      	b.n	8002abe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a0c      	ldr	r2, [pc, #48]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ab8:	fb02 f303 	mul.w	r3, r2, r3
 8002abc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	613b      	str	r3, [r7, #16]
      break;
 8002ac2:	e002      	b.n	8002aca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ac4:	4b05      	ldr	r3, [pc, #20]	@ (8002adc <HAL_RCC_GetSysClockFreq+0x98>)
 8002ac6:	613b      	str	r3, [r7, #16]
      break;
 8002ac8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002aca:	693b      	ldr	r3, [r7, #16]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	371c      	adds	r7, #28
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bc80      	pop	{r7}
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	007a1200 	.word	0x007a1200
 8002ae0:	08004c0c 	.word	0x08004c0c
 8002ae4:	08004c1c 	.word	0x08004c1c
 8002ae8:	003d0900 	.word	0x003d0900

08002aec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002af0:	4b02      	ldr	r3, [pc, #8]	@ (8002afc <HAL_RCC_GetHCLKFreq+0x10>)
 8002af2:	681b      	ldr	r3, [r3, #0]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bc80      	pop	{r7}
 8002afa:	4770      	bx	lr
 8002afc:	20000000 	.word	0x20000000

08002b00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b04:	f7ff fff2 	bl	8002aec <HAL_RCC_GetHCLKFreq>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	4b05      	ldr	r3, [pc, #20]	@ (8002b20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	0a1b      	lsrs	r3, r3, #8
 8002b10:	f003 0307 	and.w	r3, r3, #7
 8002b14:	4903      	ldr	r1, [pc, #12]	@ (8002b24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b16:	5ccb      	ldrb	r3, [r1, r3]
 8002b18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	40021000 	.word	0x40021000
 8002b24:	08004c04 	.word	0x08004c04

08002b28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b2c:	f7ff ffde 	bl	8002aec <HAL_RCC_GetHCLKFreq>
 8002b30:	4602      	mov	r2, r0
 8002b32:	4b05      	ldr	r3, [pc, #20]	@ (8002b48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	0adb      	lsrs	r3, r3, #11
 8002b38:	f003 0307 	and.w	r3, r3, #7
 8002b3c:	4903      	ldr	r1, [pc, #12]	@ (8002b4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b3e:	5ccb      	ldrb	r3, [r1, r3]
 8002b40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	08004c04 	.word	0x08004c04

08002b50 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b58:	4b0a      	ldr	r3, [pc, #40]	@ (8002b84 <RCC_Delay+0x34>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a0a      	ldr	r2, [pc, #40]	@ (8002b88 <RCC_Delay+0x38>)
 8002b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b62:	0a5b      	lsrs	r3, r3, #9
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	fb02 f303 	mul.w	r3, r2, r3
 8002b6a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b6c:	bf00      	nop
  }
  while (Delay --);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	1e5a      	subs	r2, r3, #1
 8002b72:	60fa      	str	r2, [r7, #12]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1f9      	bne.n	8002b6c <RCC_Delay+0x1c>
}
 8002b78:	bf00      	nop
 8002b7a:	bf00      	nop
 8002b7c:	3714      	adds	r7, #20
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bc80      	pop	{r7}
 8002b82:	4770      	bx	lr
 8002b84:	20000000 	.word	0x20000000
 8002b88:	10624dd3 	.word	0x10624dd3

08002b8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e042      	b.n	8002c24 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d106      	bne.n	8002bb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f7fe f816 	bl	8000be4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2224      	movs	r2, #36	@ 0x24
 8002bbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68da      	ldr	r2, [r3, #12]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002bce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 fd63 	bl	800369c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	691a      	ldr	r2, [r3, #16]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002be4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	695a      	ldr	r2, [r3, #20]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002bf4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68da      	ldr	r2, [r3, #12]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2220      	movs	r2, #32
 8002c10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2220      	movs	r2, #32
 8002c18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3708      	adds	r7, #8
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b08a      	sub	sp, #40	@ 0x28
 8002c30:	af02      	add	r7, sp, #8
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	603b      	str	r3, [r7, #0]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	2b20      	cmp	r3, #32
 8002c4a:	d175      	bne.n	8002d38 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d002      	beq.n	8002c58 <HAL_UART_Transmit+0x2c>
 8002c52:	88fb      	ldrh	r3, [r7, #6]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d101      	bne.n	8002c5c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e06e      	b.n	8002d3a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2221      	movs	r2, #33	@ 0x21
 8002c66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c6a:	f7fe f991 	bl	8000f90 <HAL_GetTick>
 8002c6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	88fa      	ldrh	r2, [r7, #6]
 8002c74:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	88fa      	ldrh	r2, [r7, #6]
 8002c7a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c84:	d108      	bne.n	8002c98 <HAL_UART_Transmit+0x6c>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d104      	bne.n	8002c98 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	61bb      	str	r3, [r7, #24]
 8002c96:	e003      	b.n	8002ca0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ca0:	e02e      	b.n	8002d00 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	9300      	str	r3, [sp, #0]
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	2180      	movs	r1, #128	@ 0x80
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	f000 fb01 	bl	80032b4 <UART_WaitOnFlagUntilTimeout>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d005      	beq.n	8002cc4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2220      	movs	r2, #32
 8002cbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e03a      	b.n	8002d3a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d10b      	bne.n	8002ce2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	881b      	ldrh	r3, [r3, #0]
 8002cce:	461a      	mov	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cd8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	3302      	adds	r3, #2
 8002cde:	61bb      	str	r3, [r7, #24]
 8002ce0:	e007      	b.n	8002cf2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	781a      	ldrb	r2, [r3, #0]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1cb      	bne.n	8002ca2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	9300      	str	r3, [sp, #0]
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	2200      	movs	r2, #0
 8002d12:	2140      	movs	r1, #64	@ 0x40
 8002d14:	68f8      	ldr	r0, [r7, #12]
 8002d16:	f000 facd 	bl	80032b4 <UART_WaitOnFlagUntilTimeout>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d005      	beq.n	8002d2c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2220      	movs	r2, #32
 8002d24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e006      	b.n	8002d3a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2220      	movs	r2, #32
 8002d30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002d34:	2300      	movs	r3, #0
 8002d36:	e000      	b.n	8002d3a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002d38:	2302      	movs	r3, #2
  }
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3720      	adds	r7, #32
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
	...

08002d44 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b0ba      	sub	sp, #232	@ 0xe8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002d70:	2300      	movs	r3, #0
 8002d72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d7a:	f003 030f 	and.w	r3, r3, #15
 8002d7e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002d82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10f      	bne.n	8002daa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d8e:	f003 0320 	and.w	r3, r3, #32
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d009      	beq.n	8002daa <HAL_UART_IRQHandler+0x66>
 8002d96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d9a:	f003 0320 	and.w	r3, r3, #32
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d003      	beq.n	8002daa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 fbbc 	bl	8003520 <UART_Receive_IT>
      return;
 8002da8:	e25b      	b.n	8003262 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002daa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f000 80de 	beq.w	8002f70 <HAL_UART_IRQHandler+0x22c>
 8002db4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d106      	bne.n	8002dce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002dc4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 80d1 	beq.w	8002f70 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00b      	beq.n	8002df2 <HAL_UART_IRQHandler+0xae>
 8002dda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002dde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d005      	beq.n	8002df2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dea:	f043 0201 	orr.w	r2, r3, #1
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002df6:	f003 0304 	and.w	r3, r3, #4
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00b      	beq.n	8002e16 <HAL_UART_IRQHandler+0xd2>
 8002dfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d005      	beq.n	8002e16 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e0e:	f043 0202 	orr.w	r2, r3, #2
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00b      	beq.n	8002e3a <HAL_UART_IRQHandler+0xf6>
 8002e22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d005      	beq.n	8002e3a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e32:	f043 0204 	orr.w	r2, r3, #4
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e3e:	f003 0308 	and.w	r3, r3, #8
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d011      	beq.n	8002e6a <HAL_UART_IRQHandler+0x126>
 8002e46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e4a:	f003 0320 	and.w	r3, r3, #32
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d105      	bne.n	8002e5e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d005      	beq.n	8002e6a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e62:	f043 0208 	orr.w	r2, r3, #8
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f000 81f2 	beq.w	8003258 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e78:	f003 0320 	and.w	r3, r3, #32
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d008      	beq.n	8002e92 <HAL_UART_IRQHandler+0x14e>
 8002e80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e84:	f003 0320 	and.w	r3, r3, #32
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d002      	beq.n	8002e92 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f000 fb47 	bl	8003520 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	695b      	ldr	r3, [r3, #20]
 8002e98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	bf14      	ite	ne
 8002ea0:	2301      	movne	r3, #1
 8002ea2:	2300      	moveq	r3, #0
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eae:	f003 0308 	and.w	r3, r3, #8
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d103      	bne.n	8002ebe <HAL_UART_IRQHandler+0x17a>
 8002eb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d04f      	beq.n	8002f5e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 fa51 	bl	8003366 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d041      	beq.n	8002f56 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	3314      	adds	r3, #20
 8002ed8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002edc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002ee0:	e853 3f00 	ldrex	r3, [r3]
 8002ee4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002ee8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002eec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ef0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	3314      	adds	r3, #20
 8002efa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002efe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002f02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002f0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002f0e:	e841 2300 	strex	r3, r2, [r1]
 8002f12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002f16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1d9      	bne.n	8002ed2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d013      	beq.n	8002f4e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f2a:	4a7e      	ldr	r2, [pc, #504]	@ (8003124 <HAL_UART_IRQHandler+0x3e0>)
 8002f2c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7fe ffee 	bl	8001f14 <HAL_DMA_Abort_IT>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d016      	beq.n	8002f6c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002f48:	4610      	mov	r0, r2
 8002f4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f4c:	e00e      	b.n	8002f6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 f99c 	bl	800328c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f54:	e00a      	b.n	8002f6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 f998 	bl	800328c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f5c:	e006      	b.n	8002f6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 f994 	bl	800328c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002f6a:	e175      	b.n	8003258 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f6c:	bf00      	nop
    return;
 8002f6e:	e173      	b.n	8003258 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	f040 814f 	bne.w	8003218 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f7e:	f003 0310 	and.w	r3, r3, #16
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f000 8148 	beq.w	8003218 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f8c:	f003 0310 	and.w	r3, r3, #16
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f000 8141 	beq.w	8003218 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f96:	2300      	movs	r3, #0
 8002f98:	60bb      	str	r3, [r7, #8]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	60bb      	str	r3, [r7, #8]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	60bb      	str	r3, [r7, #8]
 8002faa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f000 80b6 	beq.w	8003128 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002fc8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	f000 8145 	beq.w	800325c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002fd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	f080 813e 	bcs.w	800325c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002fe6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	2b20      	cmp	r3, #32
 8002ff0:	f000 8088 	beq.w	8003104 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	330c      	adds	r3, #12
 8002ffa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ffe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003002:	e853 3f00 	ldrex	r3, [r3]
 8003006:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800300a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800300e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003012:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	330c      	adds	r3, #12
 800301c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003020:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003024:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003028:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800302c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003030:	e841 2300 	strex	r3, r2, [r1]
 8003034:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003038:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1d9      	bne.n	8002ff4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	3314      	adds	r3, #20
 8003046:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003048:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800304a:	e853 3f00 	ldrex	r3, [r3]
 800304e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003050:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003052:	f023 0301 	bic.w	r3, r3, #1
 8003056:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	3314      	adds	r3, #20
 8003060:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003064:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003068:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800306a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800306c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003070:	e841 2300 	strex	r3, r2, [r1]
 8003074:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003076:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1e1      	bne.n	8003040 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	3314      	adds	r3, #20
 8003082:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003084:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003086:	e853 3f00 	ldrex	r3, [r3]
 800308a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800308c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800308e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003092:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	3314      	adds	r3, #20
 800309c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80030a0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80030a2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030a4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80030a6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80030a8:	e841 2300 	strex	r3, r2, [r1]
 80030ac:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80030ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d1e3      	bne.n	800307c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2220      	movs	r2, #32
 80030b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	330c      	adds	r3, #12
 80030c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030cc:	e853 3f00 	ldrex	r3, [r3]
 80030d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80030d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030d4:	f023 0310 	bic.w	r3, r3, #16
 80030d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	330c      	adds	r3, #12
 80030e2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80030e6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80030e8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80030ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80030ee:	e841 2300 	strex	r3, r2, [r1]
 80030f2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80030f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1e3      	bne.n	80030c2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030fe:	4618      	mov	r0, r3
 8003100:	f7fe fecd 	bl	8001e9e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2202      	movs	r2, #2
 8003108:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003112:	b29b      	uxth	r3, r3
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	b29b      	uxth	r3, r3
 8003118:	4619      	mov	r1, r3
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 f8bf 	bl	800329e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003120:	e09c      	b.n	800325c <HAL_UART_IRQHandler+0x518>
 8003122:	bf00      	nop
 8003124:	0800342b 	.word	0x0800342b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003130:	b29b      	uxth	r3, r3
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800313c:	b29b      	uxth	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	f000 808e 	beq.w	8003260 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003144:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003148:	2b00      	cmp	r3, #0
 800314a:	f000 8089 	beq.w	8003260 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	330c      	adds	r3, #12
 8003154:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003158:	e853 3f00 	ldrex	r3, [r3]
 800315c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800315e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003160:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003164:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	330c      	adds	r3, #12
 800316e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003172:	647a      	str	r2, [r7, #68]	@ 0x44
 8003174:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003176:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003178:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800317a:	e841 2300 	strex	r3, r2, [r1]
 800317e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003180:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1e3      	bne.n	800314e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	3314      	adds	r3, #20
 800318c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800318e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003190:	e853 3f00 	ldrex	r3, [r3]
 8003194:	623b      	str	r3, [r7, #32]
   return(result);
 8003196:	6a3b      	ldr	r3, [r7, #32]
 8003198:	f023 0301 	bic.w	r3, r3, #1
 800319c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	3314      	adds	r3, #20
 80031a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80031aa:	633a      	str	r2, [r7, #48]	@ 0x30
 80031ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80031b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031b2:	e841 2300 	strex	r3, r2, [r1]
 80031b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80031b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1e3      	bne.n	8003186 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2220      	movs	r2, #32
 80031c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	330c      	adds	r3, #12
 80031d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	e853 3f00 	ldrex	r3, [r3]
 80031da:	60fb      	str	r3, [r7, #12]
   return(result);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f023 0310 	bic.w	r3, r3, #16
 80031e2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	330c      	adds	r3, #12
 80031ec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80031f0:	61fa      	str	r2, [r7, #28]
 80031f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f4:	69b9      	ldr	r1, [r7, #24]
 80031f6:	69fa      	ldr	r2, [r7, #28]
 80031f8:	e841 2300 	strex	r3, r2, [r1]
 80031fc:	617b      	str	r3, [r7, #20]
   return(result);
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d1e3      	bne.n	80031cc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2202      	movs	r2, #2
 8003208:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800320a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800320e:	4619      	mov	r1, r3
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f000 f844 	bl	800329e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003216:	e023      	b.n	8003260 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003218:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800321c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003220:	2b00      	cmp	r3, #0
 8003222:	d009      	beq.n	8003238 <HAL_UART_IRQHandler+0x4f4>
 8003224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003228:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800322c:	2b00      	cmp	r3, #0
 800322e:	d003      	beq.n	8003238 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f000 f90e 	bl	8003452 <UART_Transmit_IT>
    return;
 8003236:	e014      	b.n	8003262 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800323c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00e      	beq.n	8003262 <HAL_UART_IRQHandler+0x51e>
 8003244:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003248:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800324c:	2b00      	cmp	r3, #0
 800324e:	d008      	beq.n	8003262 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 f94d 	bl	80034f0 <UART_EndTransmit_IT>
    return;
 8003256:	e004      	b.n	8003262 <HAL_UART_IRQHandler+0x51e>
    return;
 8003258:	bf00      	nop
 800325a:	e002      	b.n	8003262 <HAL_UART_IRQHandler+0x51e>
      return;
 800325c:	bf00      	nop
 800325e:	e000      	b.n	8003262 <HAL_UART_IRQHandler+0x51e>
      return;
 8003260:	bf00      	nop
  }
}
 8003262:	37e8      	adds	r7, #232	@ 0xe8
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	bc80      	pop	{r7}
 8003278:	4770      	bx	lr

0800327a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800327a:	b480      	push	{r7}
 800327c:	b083      	sub	sp, #12
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003282:	bf00      	nop
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	bc80      	pop	{r7}
 800328a:	4770      	bx	lr

0800328c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	bc80      	pop	{r7}
 800329c:	4770      	bx	lr

0800329e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800329e:	b480      	push	{r7}
 80032a0:	b083      	sub	sp, #12
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
 80032a6:	460b      	mov	r3, r1
 80032a8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80032aa:	bf00      	nop
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bc80      	pop	{r7}
 80032b2:	4770      	bx	lr

080032b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	603b      	str	r3, [r7, #0]
 80032c0:	4613      	mov	r3, r2
 80032c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032c4:	e03b      	b.n	800333e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032c6:	6a3b      	ldr	r3, [r7, #32]
 80032c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032cc:	d037      	beq.n	800333e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ce:	f7fd fe5f 	bl	8000f90 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	6a3a      	ldr	r2, [r7, #32]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d302      	bcc.n	80032e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80032de:	6a3b      	ldr	r3, [r7, #32]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d101      	bne.n	80032e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e03a      	b.n	800335e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	f003 0304 	and.w	r3, r3, #4
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d023      	beq.n	800333e <UART_WaitOnFlagUntilTimeout+0x8a>
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	2b80      	cmp	r3, #128	@ 0x80
 80032fa:	d020      	beq.n	800333e <UART_WaitOnFlagUntilTimeout+0x8a>
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	2b40      	cmp	r3, #64	@ 0x40
 8003300:	d01d      	beq.n	800333e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0308 	and.w	r3, r3, #8
 800330c:	2b08      	cmp	r3, #8
 800330e:	d116      	bne.n	800333e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003310:	2300      	movs	r3, #0
 8003312:	617b      	str	r3, [r7, #20]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	617b      	str	r3, [r7, #20]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	617b      	str	r3, [r7, #20]
 8003324:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003326:	68f8      	ldr	r0, [r7, #12]
 8003328:	f000 f81d 	bl	8003366 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2208      	movs	r2, #8
 8003330:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e00f      	b.n	800335e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	4013      	ands	r3, r2
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	429a      	cmp	r2, r3
 800334c:	bf0c      	ite	eq
 800334e:	2301      	moveq	r3, #1
 8003350:	2300      	movne	r3, #0
 8003352:	b2db      	uxtb	r3, r3
 8003354:	461a      	mov	r2, r3
 8003356:	79fb      	ldrb	r3, [r7, #7]
 8003358:	429a      	cmp	r2, r3
 800335a:	d0b4      	beq.n	80032c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3718      	adds	r7, #24
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003366:	b480      	push	{r7}
 8003368:	b095      	sub	sp, #84	@ 0x54
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	330c      	adds	r3, #12
 8003374:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003376:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003378:	e853 3f00 	ldrex	r3, [r3]
 800337c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800337e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003380:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003384:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	330c      	adds	r3, #12
 800338c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800338e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003390:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003392:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003394:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003396:	e841 2300 	strex	r3, r2, [r1]
 800339a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800339c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1e5      	bne.n	800336e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	3314      	adds	r3, #20
 80033a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033aa:	6a3b      	ldr	r3, [r7, #32]
 80033ac:	e853 3f00 	ldrex	r3, [r3]
 80033b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	f023 0301 	bic.w	r3, r3, #1
 80033b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	3314      	adds	r3, #20
 80033c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80033c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033ca:	e841 2300 	strex	r3, r2, [r1]
 80033ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80033d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1e5      	bne.n	80033a2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d119      	bne.n	8003412 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	330c      	adds	r3, #12
 80033e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	e853 3f00 	ldrex	r3, [r3]
 80033ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	f023 0310 	bic.w	r3, r3, #16
 80033f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	330c      	adds	r3, #12
 80033fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80033fe:	61ba      	str	r2, [r7, #24]
 8003400:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003402:	6979      	ldr	r1, [r7, #20]
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	e841 2300 	strex	r3, r2, [r1]
 800340a:	613b      	str	r3, [r7, #16]
   return(result);
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1e5      	bne.n	80033de <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2220      	movs	r2, #32
 8003416:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003420:	bf00      	nop
 8003422:	3754      	adds	r7, #84	@ 0x54
 8003424:	46bd      	mov	sp, r7
 8003426:	bc80      	pop	{r7}
 8003428:	4770      	bx	lr

0800342a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800342a:	b580      	push	{r7, lr}
 800342c:	b084      	sub	sp, #16
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003436:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f7ff ff21 	bl	800328c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800344a:	bf00      	nop
 800344c:	3710      	adds	r7, #16
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003452:	b480      	push	{r7}
 8003454:	b085      	sub	sp, #20
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b21      	cmp	r3, #33	@ 0x21
 8003464:	d13e      	bne.n	80034e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800346e:	d114      	bne.n	800349a <UART_Transmit_IT+0x48>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d110      	bne.n	800349a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a1b      	ldr	r3, [r3, #32]
 800347c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	881b      	ldrh	r3, [r3, #0]
 8003482:	461a      	mov	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800348c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	1c9a      	adds	r2, r3, #2
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	621a      	str	r2, [r3, #32]
 8003498:	e008      	b.n	80034ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	1c59      	adds	r1, r3, #1
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	6211      	str	r1, [r2, #32]
 80034a4:	781a      	ldrb	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	3b01      	subs	r3, #1
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	4619      	mov	r1, r3
 80034ba:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d10f      	bne.n	80034e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68da      	ldr	r2, [r3, #12]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80034ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68da      	ldr	r2, [r3, #12]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80034de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80034e0:	2300      	movs	r3, #0
 80034e2:	e000      	b.n	80034e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80034e4:	2302      	movs	r3, #2
  }
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3714      	adds	r7, #20
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bc80      	pop	{r7}
 80034ee:	4770      	bx	lr

080034f0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68da      	ldr	r2, [r3, #12]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003506:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2220      	movs	r2, #32
 800350c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f7ff fea9 	bl	8003268 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	3708      	adds	r7, #8
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b08c      	sub	sp, #48	@ 0x30
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800352e:	b2db      	uxtb	r3, r3
 8003530:	2b22      	cmp	r3, #34	@ 0x22
 8003532:	f040 80ae 	bne.w	8003692 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800353e:	d117      	bne.n	8003570 <UART_Receive_IT+0x50>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d113      	bne.n	8003570 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003548:	2300      	movs	r3, #0
 800354a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003550:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	b29b      	uxth	r3, r3
 800355a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800355e:	b29a      	uxth	r2, r3
 8003560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003562:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003568:	1c9a      	adds	r2, r3, #2
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	629a      	str	r2, [r3, #40]	@ 0x28
 800356e:	e026      	b.n	80035be <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003574:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003576:	2300      	movs	r3, #0
 8003578:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003582:	d007      	beq.n	8003594 <UART_Receive_IT+0x74>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d10a      	bne.n	80035a2 <UART_Receive_IT+0x82>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d106      	bne.n	80035a2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	b2da      	uxtb	r2, r3
 800359c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800359e:	701a      	strb	r2, [r3, #0]
 80035a0:	e008      	b.n	80035b4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80035ae:	b2da      	uxtb	r2, r3
 80035b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035b2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035b8:	1c5a      	adds	r2, r3, #1
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	3b01      	subs	r3, #1
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	4619      	mov	r1, r3
 80035cc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d15d      	bne.n	800368e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68da      	ldr	r2, [r3, #12]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f022 0220 	bic.w	r2, r2, #32
 80035e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68da      	ldr	r2, [r3, #12]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80035f0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	695a      	ldr	r2, [r3, #20]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 0201 	bic.w	r2, r2, #1
 8003600:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2220      	movs	r2, #32
 8003606:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003614:	2b01      	cmp	r3, #1
 8003616:	d135      	bne.n	8003684 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	330c      	adds	r3, #12
 8003624:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	e853 3f00 	ldrex	r3, [r3]
 800362c:	613b      	str	r3, [r7, #16]
   return(result);
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	f023 0310 	bic.w	r3, r3, #16
 8003634:	627b      	str	r3, [r7, #36]	@ 0x24
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	330c      	adds	r3, #12
 800363c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800363e:	623a      	str	r2, [r7, #32]
 8003640:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003642:	69f9      	ldr	r1, [r7, #28]
 8003644:	6a3a      	ldr	r2, [r7, #32]
 8003646:	e841 2300 	strex	r3, r2, [r1]
 800364a:	61bb      	str	r3, [r7, #24]
   return(result);
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1e5      	bne.n	800361e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0310 	and.w	r3, r3, #16
 800365c:	2b10      	cmp	r3, #16
 800365e:	d10a      	bne.n	8003676 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003660:	2300      	movs	r3, #0
 8003662:	60fb      	str	r3, [r7, #12]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	60fb      	str	r3, [r7, #12]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	60fb      	str	r3, [r7, #12]
 8003674:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800367a:	4619      	mov	r1, r3
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f7ff fe0e 	bl	800329e <HAL_UARTEx_RxEventCallback>
 8003682:	e002      	b.n	800368a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f7ff fdf8 	bl	800327a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800368a:	2300      	movs	r3, #0
 800368c:	e002      	b.n	8003694 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800368e:	2300      	movs	r3, #0
 8003690:	e000      	b.n	8003694 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003692:	2302      	movs	r3, #2
  }
}
 8003694:	4618      	mov	r0, r3
 8003696:	3730      	adds	r7, #48	@ 0x30
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	68da      	ldr	r2, [r3, #12]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	430a      	orrs	r2, r1
 80036b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	689a      	ldr	r2, [r3, #8]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	431a      	orrs	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80036d6:	f023 030c 	bic.w	r3, r3, #12
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	6812      	ldr	r2, [r2, #0]
 80036de:	68b9      	ldr	r1, [r7, #8]
 80036e0:	430b      	orrs	r3, r1
 80036e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	699a      	ldr	r2, [r3, #24]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	430a      	orrs	r2, r1
 80036f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a2c      	ldr	r2, [pc, #176]	@ (80037b0 <UART_SetConfig+0x114>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d103      	bne.n	800370c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003704:	f7ff fa10 	bl	8002b28 <HAL_RCC_GetPCLK2Freq>
 8003708:	60f8      	str	r0, [r7, #12]
 800370a:	e002      	b.n	8003712 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800370c:	f7ff f9f8 	bl	8002b00 <HAL_RCC_GetPCLK1Freq>
 8003710:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	4613      	mov	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	4413      	add	r3, r2
 800371a:	009a      	lsls	r2, r3, #2
 800371c:	441a      	add	r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	fbb2 f3f3 	udiv	r3, r2, r3
 8003728:	4a22      	ldr	r2, [pc, #136]	@ (80037b4 <UART_SetConfig+0x118>)
 800372a:	fba2 2303 	umull	r2, r3, r2, r3
 800372e:	095b      	lsrs	r3, r3, #5
 8003730:	0119      	lsls	r1, r3, #4
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	4613      	mov	r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	4413      	add	r3, r2
 800373a:	009a      	lsls	r2, r3, #2
 800373c:	441a      	add	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	fbb2 f2f3 	udiv	r2, r2, r3
 8003748:	4b1a      	ldr	r3, [pc, #104]	@ (80037b4 <UART_SetConfig+0x118>)
 800374a:	fba3 0302 	umull	r0, r3, r3, r2
 800374e:	095b      	lsrs	r3, r3, #5
 8003750:	2064      	movs	r0, #100	@ 0x64
 8003752:	fb00 f303 	mul.w	r3, r0, r3
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	011b      	lsls	r3, r3, #4
 800375a:	3332      	adds	r3, #50	@ 0x32
 800375c:	4a15      	ldr	r2, [pc, #84]	@ (80037b4 <UART_SetConfig+0x118>)
 800375e:	fba2 2303 	umull	r2, r3, r2, r3
 8003762:	095b      	lsrs	r3, r3, #5
 8003764:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003768:	4419      	add	r1, r3
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	4613      	mov	r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4413      	add	r3, r2
 8003772:	009a      	lsls	r2, r3, #2
 8003774:	441a      	add	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003780:	4b0c      	ldr	r3, [pc, #48]	@ (80037b4 <UART_SetConfig+0x118>)
 8003782:	fba3 0302 	umull	r0, r3, r3, r2
 8003786:	095b      	lsrs	r3, r3, #5
 8003788:	2064      	movs	r0, #100	@ 0x64
 800378a:	fb00 f303 	mul.w	r3, r0, r3
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	011b      	lsls	r3, r3, #4
 8003792:	3332      	adds	r3, #50	@ 0x32
 8003794:	4a07      	ldr	r2, [pc, #28]	@ (80037b4 <UART_SetConfig+0x118>)
 8003796:	fba2 2303 	umull	r2, r3, r2, r3
 800379a:	095b      	lsrs	r3, r3, #5
 800379c:	f003 020f 	and.w	r2, r3, #15
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	440a      	add	r2, r1
 80037a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80037a8:	bf00      	nop
 80037aa:	3710      	adds	r7, #16
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	40013800 	.word	0x40013800
 80037b4:	51eb851f 	.word	0x51eb851f

080037b8 <malloc>:
 80037b8:	4b02      	ldr	r3, [pc, #8]	@ (80037c4 <malloc+0xc>)
 80037ba:	4601      	mov	r1, r0
 80037bc:	6818      	ldr	r0, [r3, #0]
 80037be:	f000 b825 	b.w	800380c <_malloc_r>
 80037c2:	bf00      	nop
 80037c4:	20000018 	.word	0x20000018

080037c8 <sbrk_aligned>:
 80037c8:	b570      	push	{r4, r5, r6, lr}
 80037ca:	4e0f      	ldr	r6, [pc, #60]	@ (8003808 <sbrk_aligned+0x40>)
 80037cc:	460c      	mov	r4, r1
 80037ce:	6831      	ldr	r1, [r6, #0]
 80037d0:	4605      	mov	r5, r0
 80037d2:	b911      	cbnz	r1, 80037da <sbrk_aligned+0x12>
 80037d4:	f000 fb20 	bl	8003e18 <_sbrk_r>
 80037d8:	6030      	str	r0, [r6, #0]
 80037da:	4621      	mov	r1, r4
 80037dc:	4628      	mov	r0, r5
 80037de:	f000 fb1b 	bl	8003e18 <_sbrk_r>
 80037e2:	1c43      	adds	r3, r0, #1
 80037e4:	d103      	bne.n	80037ee <sbrk_aligned+0x26>
 80037e6:	f04f 34ff 	mov.w	r4, #4294967295
 80037ea:	4620      	mov	r0, r4
 80037ec:	bd70      	pop	{r4, r5, r6, pc}
 80037ee:	1cc4      	adds	r4, r0, #3
 80037f0:	f024 0403 	bic.w	r4, r4, #3
 80037f4:	42a0      	cmp	r0, r4
 80037f6:	d0f8      	beq.n	80037ea <sbrk_aligned+0x22>
 80037f8:	1a21      	subs	r1, r4, r0
 80037fa:	4628      	mov	r0, r5
 80037fc:	f000 fb0c 	bl	8003e18 <_sbrk_r>
 8003800:	3001      	adds	r0, #1
 8003802:	d1f2      	bne.n	80037ea <sbrk_aligned+0x22>
 8003804:	e7ef      	b.n	80037e6 <sbrk_aligned+0x1e>
 8003806:	bf00      	nop
 8003808:	20000160 	.word	0x20000160

0800380c <_malloc_r>:
 800380c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003810:	1ccd      	adds	r5, r1, #3
 8003812:	f025 0503 	bic.w	r5, r5, #3
 8003816:	3508      	adds	r5, #8
 8003818:	2d0c      	cmp	r5, #12
 800381a:	bf38      	it	cc
 800381c:	250c      	movcc	r5, #12
 800381e:	2d00      	cmp	r5, #0
 8003820:	4606      	mov	r6, r0
 8003822:	db01      	blt.n	8003828 <_malloc_r+0x1c>
 8003824:	42a9      	cmp	r1, r5
 8003826:	d904      	bls.n	8003832 <_malloc_r+0x26>
 8003828:	230c      	movs	r3, #12
 800382a:	6033      	str	r3, [r6, #0]
 800382c:	2000      	movs	r0, #0
 800382e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003832:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003908 <_malloc_r+0xfc>
 8003836:	f000 f869 	bl	800390c <__malloc_lock>
 800383a:	f8d8 3000 	ldr.w	r3, [r8]
 800383e:	461c      	mov	r4, r3
 8003840:	bb44      	cbnz	r4, 8003894 <_malloc_r+0x88>
 8003842:	4629      	mov	r1, r5
 8003844:	4630      	mov	r0, r6
 8003846:	f7ff ffbf 	bl	80037c8 <sbrk_aligned>
 800384a:	1c43      	adds	r3, r0, #1
 800384c:	4604      	mov	r4, r0
 800384e:	d158      	bne.n	8003902 <_malloc_r+0xf6>
 8003850:	f8d8 4000 	ldr.w	r4, [r8]
 8003854:	4627      	mov	r7, r4
 8003856:	2f00      	cmp	r7, #0
 8003858:	d143      	bne.n	80038e2 <_malloc_r+0xd6>
 800385a:	2c00      	cmp	r4, #0
 800385c:	d04b      	beq.n	80038f6 <_malloc_r+0xea>
 800385e:	6823      	ldr	r3, [r4, #0]
 8003860:	4639      	mov	r1, r7
 8003862:	4630      	mov	r0, r6
 8003864:	eb04 0903 	add.w	r9, r4, r3
 8003868:	f000 fad6 	bl	8003e18 <_sbrk_r>
 800386c:	4581      	cmp	r9, r0
 800386e:	d142      	bne.n	80038f6 <_malloc_r+0xea>
 8003870:	6821      	ldr	r1, [r4, #0]
 8003872:	4630      	mov	r0, r6
 8003874:	1a6d      	subs	r5, r5, r1
 8003876:	4629      	mov	r1, r5
 8003878:	f7ff ffa6 	bl	80037c8 <sbrk_aligned>
 800387c:	3001      	adds	r0, #1
 800387e:	d03a      	beq.n	80038f6 <_malloc_r+0xea>
 8003880:	6823      	ldr	r3, [r4, #0]
 8003882:	442b      	add	r3, r5
 8003884:	6023      	str	r3, [r4, #0]
 8003886:	f8d8 3000 	ldr.w	r3, [r8]
 800388a:	685a      	ldr	r2, [r3, #4]
 800388c:	bb62      	cbnz	r2, 80038e8 <_malloc_r+0xdc>
 800388e:	f8c8 7000 	str.w	r7, [r8]
 8003892:	e00f      	b.n	80038b4 <_malloc_r+0xa8>
 8003894:	6822      	ldr	r2, [r4, #0]
 8003896:	1b52      	subs	r2, r2, r5
 8003898:	d420      	bmi.n	80038dc <_malloc_r+0xd0>
 800389a:	2a0b      	cmp	r2, #11
 800389c:	d917      	bls.n	80038ce <_malloc_r+0xc2>
 800389e:	1961      	adds	r1, r4, r5
 80038a0:	42a3      	cmp	r3, r4
 80038a2:	6025      	str	r5, [r4, #0]
 80038a4:	bf18      	it	ne
 80038a6:	6059      	strne	r1, [r3, #4]
 80038a8:	6863      	ldr	r3, [r4, #4]
 80038aa:	bf08      	it	eq
 80038ac:	f8c8 1000 	streq.w	r1, [r8]
 80038b0:	5162      	str	r2, [r4, r5]
 80038b2:	604b      	str	r3, [r1, #4]
 80038b4:	4630      	mov	r0, r6
 80038b6:	f000 f82f 	bl	8003918 <__malloc_unlock>
 80038ba:	f104 000b 	add.w	r0, r4, #11
 80038be:	1d23      	adds	r3, r4, #4
 80038c0:	f020 0007 	bic.w	r0, r0, #7
 80038c4:	1ac2      	subs	r2, r0, r3
 80038c6:	bf1c      	itt	ne
 80038c8:	1a1b      	subne	r3, r3, r0
 80038ca:	50a3      	strne	r3, [r4, r2]
 80038cc:	e7af      	b.n	800382e <_malloc_r+0x22>
 80038ce:	6862      	ldr	r2, [r4, #4]
 80038d0:	42a3      	cmp	r3, r4
 80038d2:	bf0c      	ite	eq
 80038d4:	f8c8 2000 	streq.w	r2, [r8]
 80038d8:	605a      	strne	r2, [r3, #4]
 80038da:	e7eb      	b.n	80038b4 <_malloc_r+0xa8>
 80038dc:	4623      	mov	r3, r4
 80038de:	6864      	ldr	r4, [r4, #4]
 80038e0:	e7ae      	b.n	8003840 <_malloc_r+0x34>
 80038e2:	463c      	mov	r4, r7
 80038e4:	687f      	ldr	r7, [r7, #4]
 80038e6:	e7b6      	b.n	8003856 <_malloc_r+0x4a>
 80038e8:	461a      	mov	r2, r3
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	42a3      	cmp	r3, r4
 80038ee:	d1fb      	bne.n	80038e8 <_malloc_r+0xdc>
 80038f0:	2300      	movs	r3, #0
 80038f2:	6053      	str	r3, [r2, #4]
 80038f4:	e7de      	b.n	80038b4 <_malloc_r+0xa8>
 80038f6:	230c      	movs	r3, #12
 80038f8:	4630      	mov	r0, r6
 80038fa:	6033      	str	r3, [r6, #0]
 80038fc:	f000 f80c 	bl	8003918 <__malloc_unlock>
 8003900:	e794      	b.n	800382c <_malloc_r+0x20>
 8003902:	6005      	str	r5, [r0, #0]
 8003904:	e7d6      	b.n	80038b4 <_malloc_r+0xa8>
 8003906:	bf00      	nop
 8003908:	20000164 	.word	0x20000164

0800390c <__malloc_lock>:
 800390c:	4801      	ldr	r0, [pc, #4]	@ (8003914 <__malloc_lock+0x8>)
 800390e:	f000 bad0 	b.w	8003eb2 <__retarget_lock_acquire_recursive>
 8003912:	bf00      	nop
 8003914:	200002a8 	.word	0x200002a8

08003918 <__malloc_unlock>:
 8003918:	4801      	ldr	r0, [pc, #4]	@ (8003920 <__malloc_unlock+0x8>)
 800391a:	f000 bacb 	b.w	8003eb4 <__retarget_lock_release_recursive>
 800391e:	bf00      	nop
 8003920:	200002a8 	.word	0x200002a8

08003924 <std>:
 8003924:	2300      	movs	r3, #0
 8003926:	b510      	push	{r4, lr}
 8003928:	4604      	mov	r4, r0
 800392a:	e9c0 3300 	strd	r3, r3, [r0]
 800392e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003932:	6083      	str	r3, [r0, #8]
 8003934:	8181      	strh	r1, [r0, #12]
 8003936:	6643      	str	r3, [r0, #100]	@ 0x64
 8003938:	81c2      	strh	r2, [r0, #14]
 800393a:	6183      	str	r3, [r0, #24]
 800393c:	4619      	mov	r1, r3
 800393e:	2208      	movs	r2, #8
 8003940:	305c      	adds	r0, #92	@ 0x5c
 8003942:	f000 fa2d 	bl	8003da0 <memset>
 8003946:	4b0d      	ldr	r3, [pc, #52]	@ (800397c <std+0x58>)
 8003948:	6224      	str	r4, [r4, #32]
 800394a:	6263      	str	r3, [r4, #36]	@ 0x24
 800394c:	4b0c      	ldr	r3, [pc, #48]	@ (8003980 <std+0x5c>)
 800394e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003950:	4b0c      	ldr	r3, [pc, #48]	@ (8003984 <std+0x60>)
 8003952:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003954:	4b0c      	ldr	r3, [pc, #48]	@ (8003988 <std+0x64>)
 8003956:	6323      	str	r3, [r4, #48]	@ 0x30
 8003958:	4b0c      	ldr	r3, [pc, #48]	@ (800398c <std+0x68>)
 800395a:	429c      	cmp	r4, r3
 800395c:	d006      	beq.n	800396c <std+0x48>
 800395e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003962:	4294      	cmp	r4, r2
 8003964:	d002      	beq.n	800396c <std+0x48>
 8003966:	33d0      	adds	r3, #208	@ 0xd0
 8003968:	429c      	cmp	r4, r3
 800396a:	d105      	bne.n	8003978 <std+0x54>
 800396c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003974:	f000 ba9c 	b.w	8003eb0 <__retarget_lock_init_recursive>
 8003978:	bd10      	pop	{r4, pc}
 800397a:	bf00      	nop
 800397c:	08003bf1 	.word	0x08003bf1
 8003980:	08003c13 	.word	0x08003c13
 8003984:	08003c4b 	.word	0x08003c4b
 8003988:	08003c6f 	.word	0x08003c6f
 800398c:	20000168 	.word	0x20000168

08003990 <stdio_exit_handler>:
 8003990:	4a02      	ldr	r2, [pc, #8]	@ (800399c <stdio_exit_handler+0xc>)
 8003992:	4903      	ldr	r1, [pc, #12]	@ (80039a0 <stdio_exit_handler+0x10>)
 8003994:	4803      	ldr	r0, [pc, #12]	@ (80039a4 <stdio_exit_handler+0x14>)
 8003996:	f000 b869 	b.w	8003a6c <_fwalk_sglue>
 800399a:	bf00      	nop
 800399c:	2000000c 	.word	0x2000000c
 80039a0:	080048b9 	.word	0x080048b9
 80039a4:	2000001c 	.word	0x2000001c

080039a8 <cleanup_stdio>:
 80039a8:	6841      	ldr	r1, [r0, #4]
 80039aa:	4b0c      	ldr	r3, [pc, #48]	@ (80039dc <cleanup_stdio+0x34>)
 80039ac:	b510      	push	{r4, lr}
 80039ae:	4299      	cmp	r1, r3
 80039b0:	4604      	mov	r4, r0
 80039b2:	d001      	beq.n	80039b8 <cleanup_stdio+0x10>
 80039b4:	f000 ff80 	bl	80048b8 <_fflush_r>
 80039b8:	68a1      	ldr	r1, [r4, #8]
 80039ba:	4b09      	ldr	r3, [pc, #36]	@ (80039e0 <cleanup_stdio+0x38>)
 80039bc:	4299      	cmp	r1, r3
 80039be:	d002      	beq.n	80039c6 <cleanup_stdio+0x1e>
 80039c0:	4620      	mov	r0, r4
 80039c2:	f000 ff79 	bl	80048b8 <_fflush_r>
 80039c6:	68e1      	ldr	r1, [r4, #12]
 80039c8:	4b06      	ldr	r3, [pc, #24]	@ (80039e4 <cleanup_stdio+0x3c>)
 80039ca:	4299      	cmp	r1, r3
 80039cc:	d004      	beq.n	80039d8 <cleanup_stdio+0x30>
 80039ce:	4620      	mov	r0, r4
 80039d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039d4:	f000 bf70 	b.w	80048b8 <_fflush_r>
 80039d8:	bd10      	pop	{r4, pc}
 80039da:	bf00      	nop
 80039dc:	20000168 	.word	0x20000168
 80039e0:	200001d0 	.word	0x200001d0
 80039e4:	20000238 	.word	0x20000238

080039e8 <global_stdio_init.part.0>:
 80039e8:	b510      	push	{r4, lr}
 80039ea:	4b0b      	ldr	r3, [pc, #44]	@ (8003a18 <global_stdio_init.part.0+0x30>)
 80039ec:	4c0b      	ldr	r4, [pc, #44]	@ (8003a1c <global_stdio_init.part.0+0x34>)
 80039ee:	4a0c      	ldr	r2, [pc, #48]	@ (8003a20 <global_stdio_init.part.0+0x38>)
 80039f0:	4620      	mov	r0, r4
 80039f2:	601a      	str	r2, [r3, #0]
 80039f4:	2104      	movs	r1, #4
 80039f6:	2200      	movs	r2, #0
 80039f8:	f7ff ff94 	bl	8003924 <std>
 80039fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003a00:	2201      	movs	r2, #1
 8003a02:	2109      	movs	r1, #9
 8003a04:	f7ff ff8e 	bl	8003924 <std>
 8003a08:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003a0c:	2202      	movs	r2, #2
 8003a0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a12:	2112      	movs	r1, #18
 8003a14:	f7ff bf86 	b.w	8003924 <std>
 8003a18:	200002a0 	.word	0x200002a0
 8003a1c:	20000168 	.word	0x20000168
 8003a20:	08003991 	.word	0x08003991

08003a24 <__sfp_lock_acquire>:
 8003a24:	4801      	ldr	r0, [pc, #4]	@ (8003a2c <__sfp_lock_acquire+0x8>)
 8003a26:	f000 ba44 	b.w	8003eb2 <__retarget_lock_acquire_recursive>
 8003a2a:	bf00      	nop
 8003a2c:	200002a9 	.word	0x200002a9

08003a30 <__sfp_lock_release>:
 8003a30:	4801      	ldr	r0, [pc, #4]	@ (8003a38 <__sfp_lock_release+0x8>)
 8003a32:	f000 ba3f 	b.w	8003eb4 <__retarget_lock_release_recursive>
 8003a36:	bf00      	nop
 8003a38:	200002a9 	.word	0x200002a9

08003a3c <__sinit>:
 8003a3c:	b510      	push	{r4, lr}
 8003a3e:	4604      	mov	r4, r0
 8003a40:	f7ff fff0 	bl	8003a24 <__sfp_lock_acquire>
 8003a44:	6a23      	ldr	r3, [r4, #32]
 8003a46:	b11b      	cbz	r3, 8003a50 <__sinit+0x14>
 8003a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a4c:	f7ff bff0 	b.w	8003a30 <__sfp_lock_release>
 8003a50:	4b04      	ldr	r3, [pc, #16]	@ (8003a64 <__sinit+0x28>)
 8003a52:	6223      	str	r3, [r4, #32]
 8003a54:	4b04      	ldr	r3, [pc, #16]	@ (8003a68 <__sinit+0x2c>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1f5      	bne.n	8003a48 <__sinit+0xc>
 8003a5c:	f7ff ffc4 	bl	80039e8 <global_stdio_init.part.0>
 8003a60:	e7f2      	b.n	8003a48 <__sinit+0xc>
 8003a62:	bf00      	nop
 8003a64:	080039a9 	.word	0x080039a9
 8003a68:	200002a0 	.word	0x200002a0

08003a6c <_fwalk_sglue>:
 8003a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a70:	4607      	mov	r7, r0
 8003a72:	4688      	mov	r8, r1
 8003a74:	4614      	mov	r4, r2
 8003a76:	2600      	movs	r6, #0
 8003a78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003a7c:	f1b9 0901 	subs.w	r9, r9, #1
 8003a80:	d505      	bpl.n	8003a8e <_fwalk_sglue+0x22>
 8003a82:	6824      	ldr	r4, [r4, #0]
 8003a84:	2c00      	cmp	r4, #0
 8003a86:	d1f7      	bne.n	8003a78 <_fwalk_sglue+0xc>
 8003a88:	4630      	mov	r0, r6
 8003a8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a8e:	89ab      	ldrh	r3, [r5, #12]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d907      	bls.n	8003aa4 <_fwalk_sglue+0x38>
 8003a94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003a98:	3301      	adds	r3, #1
 8003a9a:	d003      	beq.n	8003aa4 <_fwalk_sglue+0x38>
 8003a9c:	4629      	mov	r1, r5
 8003a9e:	4638      	mov	r0, r7
 8003aa0:	47c0      	blx	r8
 8003aa2:	4306      	orrs	r6, r0
 8003aa4:	3568      	adds	r5, #104	@ 0x68
 8003aa6:	e7e9      	b.n	8003a7c <_fwalk_sglue+0x10>

08003aa8 <iprintf>:
 8003aa8:	b40f      	push	{r0, r1, r2, r3}
 8003aaa:	b507      	push	{r0, r1, r2, lr}
 8003aac:	4906      	ldr	r1, [pc, #24]	@ (8003ac8 <iprintf+0x20>)
 8003aae:	ab04      	add	r3, sp, #16
 8003ab0:	6808      	ldr	r0, [r1, #0]
 8003ab2:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ab6:	6881      	ldr	r1, [r0, #8]
 8003ab8:	9301      	str	r3, [sp, #4]
 8003aba:	f000 fbd3 	bl	8004264 <_vfiprintf_r>
 8003abe:	b003      	add	sp, #12
 8003ac0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ac4:	b004      	add	sp, #16
 8003ac6:	4770      	bx	lr
 8003ac8:	20000018 	.word	0x20000018

08003acc <_puts_r>:
 8003acc:	6a03      	ldr	r3, [r0, #32]
 8003ace:	b570      	push	{r4, r5, r6, lr}
 8003ad0:	4605      	mov	r5, r0
 8003ad2:	460e      	mov	r6, r1
 8003ad4:	6884      	ldr	r4, [r0, #8]
 8003ad6:	b90b      	cbnz	r3, 8003adc <_puts_r+0x10>
 8003ad8:	f7ff ffb0 	bl	8003a3c <__sinit>
 8003adc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003ade:	07db      	lsls	r3, r3, #31
 8003ae0:	d405      	bmi.n	8003aee <_puts_r+0x22>
 8003ae2:	89a3      	ldrh	r3, [r4, #12]
 8003ae4:	0598      	lsls	r0, r3, #22
 8003ae6:	d402      	bmi.n	8003aee <_puts_r+0x22>
 8003ae8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003aea:	f000 f9e2 	bl	8003eb2 <__retarget_lock_acquire_recursive>
 8003aee:	89a3      	ldrh	r3, [r4, #12]
 8003af0:	0719      	lsls	r1, r3, #28
 8003af2:	d502      	bpl.n	8003afa <_puts_r+0x2e>
 8003af4:	6923      	ldr	r3, [r4, #16]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d135      	bne.n	8003b66 <_puts_r+0x9a>
 8003afa:	4621      	mov	r1, r4
 8003afc:	4628      	mov	r0, r5
 8003afe:	f000 f8f9 	bl	8003cf4 <__swsetup_r>
 8003b02:	b380      	cbz	r0, 8003b66 <_puts_r+0x9a>
 8003b04:	f04f 35ff 	mov.w	r5, #4294967295
 8003b08:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003b0a:	07da      	lsls	r2, r3, #31
 8003b0c:	d405      	bmi.n	8003b1a <_puts_r+0x4e>
 8003b0e:	89a3      	ldrh	r3, [r4, #12]
 8003b10:	059b      	lsls	r3, r3, #22
 8003b12:	d402      	bmi.n	8003b1a <_puts_r+0x4e>
 8003b14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b16:	f000 f9cd 	bl	8003eb4 <__retarget_lock_release_recursive>
 8003b1a:	4628      	mov	r0, r5
 8003b1c:	bd70      	pop	{r4, r5, r6, pc}
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	da04      	bge.n	8003b2c <_puts_r+0x60>
 8003b22:	69a2      	ldr	r2, [r4, #24]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	dc17      	bgt.n	8003b58 <_puts_r+0x8c>
 8003b28:	290a      	cmp	r1, #10
 8003b2a:	d015      	beq.n	8003b58 <_puts_r+0x8c>
 8003b2c:	6823      	ldr	r3, [r4, #0]
 8003b2e:	1c5a      	adds	r2, r3, #1
 8003b30:	6022      	str	r2, [r4, #0]
 8003b32:	7019      	strb	r1, [r3, #0]
 8003b34:	68a3      	ldr	r3, [r4, #8]
 8003b36:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	60a3      	str	r3, [r4, #8]
 8003b3e:	2900      	cmp	r1, #0
 8003b40:	d1ed      	bne.n	8003b1e <_puts_r+0x52>
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	da11      	bge.n	8003b6a <_puts_r+0x9e>
 8003b46:	4622      	mov	r2, r4
 8003b48:	210a      	movs	r1, #10
 8003b4a:	4628      	mov	r0, r5
 8003b4c:	f000 f893 	bl	8003c76 <__swbuf_r>
 8003b50:	3001      	adds	r0, #1
 8003b52:	d0d7      	beq.n	8003b04 <_puts_r+0x38>
 8003b54:	250a      	movs	r5, #10
 8003b56:	e7d7      	b.n	8003b08 <_puts_r+0x3c>
 8003b58:	4622      	mov	r2, r4
 8003b5a:	4628      	mov	r0, r5
 8003b5c:	f000 f88b 	bl	8003c76 <__swbuf_r>
 8003b60:	3001      	adds	r0, #1
 8003b62:	d1e7      	bne.n	8003b34 <_puts_r+0x68>
 8003b64:	e7ce      	b.n	8003b04 <_puts_r+0x38>
 8003b66:	3e01      	subs	r6, #1
 8003b68:	e7e4      	b.n	8003b34 <_puts_r+0x68>
 8003b6a:	6823      	ldr	r3, [r4, #0]
 8003b6c:	1c5a      	adds	r2, r3, #1
 8003b6e:	6022      	str	r2, [r4, #0]
 8003b70:	220a      	movs	r2, #10
 8003b72:	701a      	strb	r2, [r3, #0]
 8003b74:	e7ee      	b.n	8003b54 <_puts_r+0x88>
	...

08003b78 <puts>:
 8003b78:	4b02      	ldr	r3, [pc, #8]	@ (8003b84 <puts+0xc>)
 8003b7a:	4601      	mov	r1, r0
 8003b7c:	6818      	ldr	r0, [r3, #0]
 8003b7e:	f7ff bfa5 	b.w	8003acc <_puts_r>
 8003b82:	bf00      	nop
 8003b84:	20000018 	.word	0x20000018

08003b88 <sniprintf>:
 8003b88:	b40c      	push	{r2, r3}
 8003b8a:	b530      	push	{r4, r5, lr}
 8003b8c:	4b17      	ldr	r3, [pc, #92]	@ (8003bec <sniprintf+0x64>)
 8003b8e:	1e0c      	subs	r4, r1, #0
 8003b90:	681d      	ldr	r5, [r3, #0]
 8003b92:	b09d      	sub	sp, #116	@ 0x74
 8003b94:	da08      	bge.n	8003ba8 <sniprintf+0x20>
 8003b96:	238b      	movs	r3, #139	@ 0x8b
 8003b98:	f04f 30ff 	mov.w	r0, #4294967295
 8003b9c:	602b      	str	r3, [r5, #0]
 8003b9e:	b01d      	add	sp, #116	@ 0x74
 8003ba0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003ba4:	b002      	add	sp, #8
 8003ba6:	4770      	bx	lr
 8003ba8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003bac:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003bb0:	bf0c      	ite	eq
 8003bb2:	4623      	moveq	r3, r4
 8003bb4:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003bb8:	9304      	str	r3, [sp, #16]
 8003bba:	9307      	str	r3, [sp, #28]
 8003bbc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003bc0:	9002      	str	r0, [sp, #8]
 8003bc2:	9006      	str	r0, [sp, #24]
 8003bc4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003bc8:	4628      	mov	r0, r5
 8003bca:	ab21      	add	r3, sp, #132	@ 0x84
 8003bcc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003bce:	a902      	add	r1, sp, #8
 8003bd0:	9301      	str	r3, [sp, #4]
 8003bd2:	f000 fa23 	bl	800401c <_svfiprintf_r>
 8003bd6:	1c43      	adds	r3, r0, #1
 8003bd8:	bfbc      	itt	lt
 8003bda:	238b      	movlt	r3, #139	@ 0x8b
 8003bdc:	602b      	strlt	r3, [r5, #0]
 8003bde:	2c00      	cmp	r4, #0
 8003be0:	d0dd      	beq.n	8003b9e <sniprintf+0x16>
 8003be2:	2200      	movs	r2, #0
 8003be4:	9b02      	ldr	r3, [sp, #8]
 8003be6:	701a      	strb	r2, [r3, #0]
 8003be8:	e7d9      	b.n	8003b9e <sniprintf+0x16>
 8003bea:	bf00      	nop
 8003bec:	20000018 	.word	0x20000018

08003bf0 <__sread>:
 8003bf0:	b510      	push	{r4, lr}
 8003bf2:	460c      	mov	r4, r1
 8003bf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bf8:	f000 f8fc 	bl	8003df4 <_read_r>
 8003bfc:	2800      	cmp	r0, #0
 8003bfe:	bfab      	itete	ge
 8003c00:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003c02:	89a3      	ldrhlt	r3, [r4, #12]
 8003c04:	181b      	addge	r3, r3, r0
 8003c06:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003c0a:	bfac      	ite	ge
 8003c0c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003c0e:	81a3      	strhlt	r3, [r4, #12]
 8003c10:	bd10      	pop	{r4, pc}

08003c12 <__swrite>:
 8003c12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c16:	461f      	mov	r7, r3
 8003c18:	898b      	ldrh	r3, [r1, #12]
 8003c1a:	4605      	mov	r5, r0
 8003c1c:	05db      	lsls	r3, r3, #23
 8003c1e:	460c      	mov	r4, r1
 8003c20:	4616      	mov	r6, r2
 8003c22:	d505      	bpl.n	8003c30 <__swrite+0x1e>
 8003c24:	2302      	movs	r3, #2
 8003c26:	2200      	movs	r2, #0
 8003c28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c2c:	f000 f8d0 	bl	8003dd0 <_lseek_r>
 8003c30:	89a3      	ldrh	r3, [r4, #12]
 8003c32:	4632      	mov	r2, r6
 8003c34:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003c38:	81a3      	strh	r3, [r4, #12]
 8003c3a:	4628      	mov	r0, r5
 8003c3c:	463b      	mov	r3, r7
 8003c3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c46:	f000 b8f7 	b.w	8003e38 <_write_r>

08003c4a <__sseek>:
 8003c4a:	b510      	push	{r4, lr}
 8003c4c:	460c      	mov	r4, r1
 8003c4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c52:	f000 f8bd 	bl	8003dd0 <_lseek_r>
 8003c56:	1c43      	adds	r3, r0, #1
 8003c58:	89a3      	ldrh	r3, [r4, #12]
 8003c5a:	bf15      	itete	ne
 8003c5c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003c5e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003c62:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003c66:	81a3      	strheq	r3, [r4, #12]
 8003c68:	bf18      	it	ne
 8003c6a:	81a3      	strhne	r3, [r4, #12]
 8003c6c:	bd10      	pop	{r4, pc}

08003c6e <__sclose>:
 8003c6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c72:	f000 b89d 	b.w	8003db0 <_close_r>

08003c76 <__swbuf_r>:
 8003c76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c78:	460e      	mov	r6, r1
 8003c7a:	4614      	mov	r4, r2
 8003c7c:	4605      	mov	r5, r0
 8003c7e:	b118      	cbz	r0, 8003c88 <__swbuf_r+0x12>
 8003c80:	6a03      	ldr	r3, [r0, #32]
 8003c82:	b90b      	cbnz	r3, 8003c88 <__swbuf_r+0x12>
 8003c84:	f7ff feda 	bl	8003a3c <__sinit>
 8003c88:	69a3      	ldr	r3, [r4, #24]
 8003c8a:	60a3      	str	r3, [r4, #8]
 8003c8c:	89a3      	ldrh	r3, [r4, #12]
 8003c8e:	071a      	lsls	r2, r3, #28
 8003c90:	d501      	bpl.n	8003c96 <__swbuf_r+0x20>
 8003c92:	6923      	ldr	r3, [r4, #16]
 8003c94:	b943      	cbnz	r3, 8003ca8 <__swbuf_r+0x32>
 8003c96:	4621      	mov	r1, r4
 8003c98:	4628      	mov	r0, r5
 8003c9a:	f000 f82b 	bl	8003cf4 <__swsetup_r>
 8003c9e:	b118      	cbz	r0, 8003ca8 <__swbuf_r+0x32>
 8003ca0:	f04f 37ff 	mov.w	r7, #4294967295
 8003ca4:	4638      	mov	r0, r7
 8003ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ca8:	6823      	ldr	r3, [r4, #0]
 8003caa:	6922      	ldr	r2, [r4, #16]
 8003cac:	b2f6      	uxtb	r6, r6
 8003cae:	1a98      	subs	r0, r3, r2
 8003cb0:	6963      	ldr	r3, [r4, #20]
 8003cb2:	4637      	mov	r7, r6
 8003cb4:	4283      	cmp	r3, r0
 8003cb6:	dc05      	bgt.n	8003cc4 <__swbuf_r+0x4e>
 8003cb8:	4621      	mov	r1, r4
 8003cba:	4628      	mov	r0, r5
 8003cbc:	f000 fdfc 	bl	80048b8 <_fflush_r>
 8003cc0:	2800      	cmp	r0, #0
 8003cc2:	d1ed      	bne.n	8003ca0 <__swbuf_r+0x2a>
 8003cc4:	68a3      	ldr	r3, [r4, #8]
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	60a3      	str	r3, [r4, #8]
 8003cca:	6823      	ldr	r3, [r4, #0]
 8003ccc:	1c5a      	adds	r2, r3, #1
 8003cce:	6022      	str	r2, [r4, #0]
 8003cd0:	701e      	strb	r6, [r3, #0]
 8003cd2:	6962      	ldr	r2, [r4, #20]
 8003cd4:	1c43      	adds	r3, r0, #1
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d004      	beq.n	8003ce4 <__swbuf_r+0x6e>
 8003cda:	89a3      	ldrh	r3, [r4, #12]
 8003cdc:	07db      	lsls	r3, r3, #31
 8003cde:	d5e1      	bpl.n	8003ca4 <__swbuf_r+0x2e>
 8003ce0:	2e0a      	cmp	r6, #10
 8003ce2:	d1df      	bne.n	8003ca4 <__swbuf_r+0x2e>
 8003ce4:	4621      	mov	r1, r4
 8003ce6:	4628      	mov	r0, r5
 8003ce8:	f000 fde6 	bl	80048b8 <_fflush_r>
 8003cec:	2800      	cmp	r0, #0
 8003cee:	d0d9      	beq.n	8003ca4 <__swbuf_r+0x2e>
 8003cf0:	e7d6      	b.n	8003ca0 <__swbuf_r+0x2a>
	...

08003cf4 <__swsetup_r>:
 8003cf4:	b538      	push	{r3, r4, r5, lr}
 8003cf6:	4b29      	ldr	r3, [pc, #164]	@ (8003d9c <__swsetup_r+0xa8>)
 8003cf8:	4605      	mov	r5, r0
 8003cfa:	6818      	ldr	r0, [r3, #0]
 8003cfc:	460c      	mov	r4, r1
 8003cfe:	b118      	cbz	r0, 8003d08 <__swsetup_r+0x14>
 8003d00:	6a03      	ldr	r3, [r0, #32]
 8003d02:	b90b      	cbnz	r3, 8003d08 <__swsetup_r+0x14>
 8003d04:	f7ff fe9a 	bl	8003a3c <__sinit>
 8003d08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d0c:	0719      	lsls	r1, r3, #28
 8003d0e:	d422      	bmi.n	8003d56 <__swsetup_r+0x62>
 8003d10:	06da      	lsls	r2, r3, #27
 8003d12:	d407      	bmi.n	8003d24 <__swsetup_r+0x30>
 8003d14:	2209      	movs	r2, #9
 8003d16:	602a      	str	r2, [r5, #0]
 8003d18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d20:	81a3      	strh	r3, [r4, #12]
 8003d22:	e033      	b.n	8003d8c <__swsetup_r+0x98>
 8003d24:	0758      	lsls	r0, r3, #29
 8003d26:	d512      	bpl.n	8003d4e <__swsetup_r+0x5a>
 8003d28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003d2a:	b141      	cbz	r1, 8003d3e <__swsetup_r+0x4a>
 8003d2c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003d30:	4299      	cmp	r1, r3
 8003d32:	d002      	beq.n	8003d3a <__swsetup_r+0x46>
 8003d34:	4628      	mov	r0, r5
 8003d36:	f000 f8cd 	bl	8003ed4 <_free_r>
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	6363      	str	r3, [r4, #52]	@ 0x34
 8003d3e:	89a3      	ldrh	r3, [r4, #12]
 8003d40:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003d44:	81a3      	strh	r3, [r4, #12]
 8003d46:	2300      	movs	r3, #0
 8003d48:	6063      	str	r3, [r4, #4]
 8003d4a:	6923      	ldr	r3, [r4, #16]
 8003d4c:	6023      	str	r3, [r4, #0]
 8003d4e:	89a3      	ldrh	r3, [r4, #12]
 8003d50:	f043 0308 	orr.w	r3, r3, #8
 8003d54:	81a3      	strh	r3, [r4, #12]
 8003d56:	6923      	ldr	r3, [r4, #16]
 8003d58:	b94b      	cbnz	r3, 8003d6e <__swsetup_r+0x7a>
 8003d5a:	89a3      	ldrh	r3, [r4, #12]
 8003d5c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003d60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d64:	d003      	beq.n	8003d6e <__swsetup_r+0x7a>
 8003d66:	4621      	mov	r1, r4
 8003d68:	4628      	mov	r0, r5
 8003d6a:	f000 fdf2 	bl	8004952 <__smakebuf_r>
 8003d6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d72:	f013 0201 	ands.w	r2, r3, #1
 8003d76:	d00a      	beq.n	8003d8e <__swsetup_r+0x9a>
 8003d78:	2200      	movs	r2, #0
 8003d7a:	60a2      	str	r2, [r4, #8]
 8003d7c:	6962      	ldr	r2, [r4, #20]
 8003d7e:	4252      	negs	r2, r2
 8003d80:	61a2      	str	r2, [r4, #24]
 8003d82:	6922      	ldr	r2, [r4, #16]
 8003d84:	b942      	cbnz	r2, 8003d98 <__swsetup_r+0xa4>
 8003d86:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003d8a:	d1c5      	bne.n	8003d18 <__swsetup_r+0x24>
 8003d8c:	bd38      	pop	{r3, r4, r5, pc}
 8003d8e:	0799      	lsls	r1, r3, #30
 8003d90:	bf58      	it	pl
 8003d92:	6962      	ldrpl	r2, [r4, #20]
 8003d94:	60a2      	str	r2, [r4, #8]
 8003d96:	e7f4      	b.n	8003d82 <__swsetup_r+0x8e>
 8003d98:	2000      	movs	r0, #0
 8003d9a:	e7f7      	b.n	8003d8c <__swsetup_r+0x98>
 8003d9c:	20000018 	.word	0x20000018

08003da0 <memset>:
 8003da0:	4603      	mov	r3, r0
 8003da2:	4402      	add	r2, r0
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d100      	bne.n	8003daa <memset+0xa>
 8003da8:	4770      	bx	lr
 8003daa:	f803 1b01 	strb.w	r1, [r3], #1
 8003dae:	e7f9      	b.n	8003da4 <memset+0x4>

08003db0 <_close_r>:
 8003db0:	b538      	push	{r3, r4, r5, lr}
 8003db2:	2300      	movs	r3, #0
 8003db4:	4d05      	ldr	r5, [pc, #20]	@ (8003dcc <_close_r+0x1c>)
 8003db6:	4604      	mov	r4, r0
 8003db8:	4608      	mov	r0, r1
 8003dba:	602b      	str	r3, [r5, #0]
 8003dbc:	f7fc fffd 	bl	8000dba <_close>
 8003dc0:	1c43      	adds	r3, r0, #1
 8003dc2:	d102      	bne.n	8003dca <_close_r+0x1a>
 8003dc4:	682b      	ldr	r3, [r5, #0]
 8003dc6:	b103      	cbz	r3, 8003dca <_close_r+0x1a>
 8003dc8:	6023      	str	r3, [r4, #0]
 8003dca:	bd38      	pop	{r3, r4, r5, pc}
 8003dcc:	200002a4 	.word	0x200002a4

08003dd0 <_lseek_r>:
 8003dd0:	b538      	push	{r3, r4, r5, lr}
 8003dd2:	4604      	mov	r4, r0
 8003dd4:	4608      	mov	r0, r1
 8003dd6:	4611      	mov	r1, r2
 8003dd8:	2200      	movs	r2, #0
 8003dda:	4d05      	ldr	r5, [pc, #20]	@ (8003df0 <_lseek_r+0x20>)
 8003ddc:	602a      	str	r2, [r5, #0]
 8003dde:	461a      	mov	r2, r3
 8003de0:	f7fd f80f 	bl	8000e02 <_lseek>
 8003de4:	1c43      	adds	r3, r0, #1
 8003de6:	d102      	bne.n	8003dee <_lseek_r+0x1e>
 8003de8:	682b      	ldr	r3, [r5, #0]
 8003dea:	b103      	cbz	r3, 8003dee <_lseek_r+0x1e>
 8003dec:	6023      	str	r3, [r4, #0]
 8003dee:	bd38      	pop	{r3, r4, r5, pc}
 8003df0:	200002a4 	.word	0x200002a4

08003df4 <_read_r>:
 8003df4:	b538      	push	{r3, r4, r5, lr}
 8003df6:	4604      	mov	r4, r0
 8003df8:	4608      	mov	r0, r1
 8003dfa:	4611      	mov	r1, r2
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	4d05      	ldr	r5, [pc, #20]	@ (8003e14 <_read_r+0x20>)
 8003e00:	602a      	str	r2, [r5, #0]
 8003e02:	461a      	mov	r2, r3
 8003e04:	f7fc ffa0 	bl	8000d48 <_read>
 8003e08:	1c43      	adds	r3, r0, #1
 8003e0a:	d102      	bne.n	8003e12 <_read_r+0x1e>
 8003e0c:	682b      	ldr	r3, [r5, #0]
 8003e0e:	b103      	cbz	r3, 8003e12 <_read_r+0x1e>
 8003e10:	6023      	str	r3, [r4, #0]
 8003e12:	bd38      	pop	{r3, r4, r5, pc}
 8003e14:	200002a4 	.word	0x200002a4

08003e18 <_sbrk_r>:
 8003e18:	b538      	push	{r3, r4, r5, lr}
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	4d05      	ldr	r5, [pc, #20]	@ (8003e34 <_sbrk_r+0x1c>)
 8003e1e:	4604      	mov	r4, r0
 8003e20:	4608      	mov	r0, r1
 8003e22:	602b      	str	r3, [r5, #0]
 8003e24:	f7fc fffa 	bl	8000e1c <_sbrk>
 8003e28:	1c43      	adds	r3, r0, #1
 8003e2a:	d102      	bne.n	8003e32 <_sbrk_r+0x1a>
 8003e2c:	682b      	ldr	r3, [r5, #0]
 8003e2e:	b103      	cbz	r3, 8003e32 <_sbrk_r+0x1a>
 8003e30:	6023      	str	r3, [r4, #0]
 8003e32:	bd38      	pop	{r3, r4, r5, pc}
 8003e34:	200002a4 	.word	0x200002a4

08003e38 <_write_r>:
 8003e38:	b538      	push	{r3, r4, r5, lr}
 8003e3a:	4604      	mov	r4, r0
 8003e3c:	4608      	mov	r0, r1
 8003e3e:	4611      	mov	r1, r2
 8003e40:	2200      	movs	r2, #0
 8003e42:	4d05      	ldr	r5, [pc, #20]	@ (8003e58 <_write_r+0x20>)
 8003e44:	602a      	str	r2, [r5, #0]
 8003e46:	461a      	mov	r2, r3
 8003e48:	f7fc ff9b 	bl	8000d82 <_write>
 8003e4c:	1c43      	adds	r3, r0, #1
 8003e4e:	d102      	bne.n	8003e56 <_write_r+0x1e>
 8003e50:	682b      	ldr	r3, [r5, #0]
 8003e52:	b103      	cbz	r3, 8003e56 <_write_r+0x1e>
 8003e54:	6023      	str	r3, [r4, #0]
 8003e56:	bd38      	pop	{r3, r4, r5, pc}
 8003e58:	200002a4 	.word	0x200002a4

08003e5c <__errno>:
 8003e5c:	4b01      	ldr	r3, [pc, #4]	@ (8003e64 <__errno+0x8>)
 8003e5e:	6818      	ldr	r0, [r3, #0]
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	20000018 	.word	0x20000018

08003e68 <__libc_init_array>:
 8003e68:	b570      	push	{r4, r5, r6, lr}
 8003e6a:	2600      	movs	r6, #0
 8003e6c:	4d0c      	ldr	r5, [pc, #48]	@ (8003ea0 <__libc_init_array+0x38>)
 8003e6e:	4c0d      	ldr	r4, [pc, #52]	@ (8003ea4 <__libc_init_array+0x3c>)
 8003e70:	1b64      	subs	r4, r4, r5
 8003e72:	10a4      	asrs	r4, r4, #2
 8003e74:	42a6      	cmp	r6, r4
 8003e76:	d109      	bne.n	8003e8c <__libc_init_array+0x24>
 8003e78:	f000 fe28 	bl	8004acc <_init>
 8003e7c:	2600      	movs	r6, #0
 8003e7e:	4d0a      	ldr	r5, [pc, #40]	@ (8003ea8 <__libc_init_array+0x40>)
 8003e80:	4c0a      	ldr	r4, [pc, #40]	@ (8003eac <__libc_init_array+0x44>)
 8003e82:	1b64      	subs	r4, r4, r5
 8003e84:	10a4      	asrs	r4, r4, #2
 8003e86:	42a6      	cmp	r6, r4
 8003e88:	d105      	bne.n	8003e96 <__libc_init_array+0x2e>
 8003e8a:	bd70      	pop	{r4, r5, r6, pc}
 8003e8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e90:	4798      	blx	r3
 8003e92:	3601      	adds	r6, #1
 8003e94:	e7ee      	b.n	8003e74 <__libc_init_array+0xc>
 8003e96:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e9a:	4798      	blx	r3
 8003e9c:	3601      	adds	r6, #1
 8003e9e:	e7f2      	b.n	8003e86 <__libc_init_array+0x1e>
 8003ea0:	08004c5c 	.word	0x08004c5c
 8003ea4:	08004c5c 	.word	0x08004c5c
 8003ea8:	08004c5c 	.word	0x08004c5c
 8003eac:	08004c60 	.word	0x08004c60

08003eb0 <__retarget_lock_init_recursive>:
 8003eb0:	4770      	bx	lr

08003eb2 <__retarget_lock_acquire_recursive>:
 8003eb2:	4770      	bx	lr

08003eb4 <__retarget_lock_release_recursive>:
 8003eb4:	4770      	bx	lr

08003eb6 <memcpy>:
 8003eb6:	440a      	add	r2, r1
 8003eb8:	4291      	cmp	r1, r2
 8003eba:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ebe:	d100      	bne.n	8003ec2 <memcpy+0xc>
 8003ec0:	4770      	bx	lr
 8003ec2:	b510      	push	{r4, lr}
 8003ec4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ec8:	4291      	cmp	r1, r2
 8003eca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ece:	d1f9      	bne.n	8003ec4 <memcpy+0xe>
 8003ed0:	bd10      	pop	{r4, pc}
	...

08003ed4 <_free_r>:
 8003ed4:	b538      	push	{r3, r4, r5, lr}
 8003ed6:	4605      	mov	r5, r0
 8003ed8:	2900      	cmp	r1, #0
 8003eda:	d040      	beq.n	8003f5e <_free_r+0x8a>
 8003edc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ee0:	1f0c      	subs	r4, r1, #4
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	bfb8      	it	lt
 8003ee6:	18e4      	addlt	r4, r4, r3
 8003ee8:	f7ff fd10 	bl	800390c <__malloc_lock>
 8003eec:	4a1c      	ldr	r2, [pc, #112]	@ (8003f60 <_free_r+0x8c>)
 8003eee:	6813      	ldr	r3, [r2, #0]
 8003ef0:	b933      	cbnz	r3, 8003f00 <_free_r+0x2c>
 8003ef2:	6063      	str	r3, [r4, #4]
 8003ef4:	6014      	str	r4, [r2, #0]
 8003ef6:	4628      	mov	r0, r5
 8003ef8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003efc:	f7ff bd0c 	b.w	8003918 <__malloc_unlock>
 8003f00:	42a3      	cmp	r3, r4
 8003f02:	d908      	bls.n	8003f16 <_free_r+0x42>
 8003f04:	6820      	ldr	r0, [r4, #0]
 8003f06:	1821      	adds	r1, r4, r0
 8003f08:	428b      	cmp	r3, r1
 8003f0a:	bf01      	itttt	eq
 8003f0c:	6819      	ldreq	r1, [r3, #0]
 8003f0e:	685b      	ldreq	r3, [r3, #4]
 8003f10:	1809      	addeq	r1, r1, r0
 8003f12:	6021      	streq	r1, [r4, #0]
 8003f14:	e7ed      	b.n	8003ef2 <_free_r+0x1e>
 8003f16:	461a      	mov	r2, r3
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	b10b      	cbz	r3, 8003f20 <_free_r+0x4c>
 8003f1c:	42a3      	cmp	r3, r4
 8003f1e:	d9fa      	bls.n	8003f16 <_free_r+0x42>
 8003f20:	6811      	ldr	r1, [r2, #0]
 8003f22:	1850      	adds	r0, r2, r1
 8003f24:	42a0      	cmp	r0, r4
 8003f26:	d10b      	bne.n	8003f40 <_free_r+0x6c>
 8003f28:	6820      	ldr	r0, [r4, #0]
 8003f2a:	4401      	add	r1, r0
 8003f2c:	1850      	adds	r0, r2, r1
 8003f2e:	4283      	cmp	r3, r0
 8003f30:	6011      	str	r1, [r2, #0]
 8003f32:	d1e0      	bne.n	8003ef6 <_free_r+0x22>
 8003f34:	6818      	ldr	r0, [r3, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	4408      	add	r0, r1
 8003f3a:	6010      	str	r0, [r2, #0]
 8003f3c:	6053      	str	r3, [r2, #4]
 8003f3e:	e7da      	b.n	8003ef6 <_free_r+0x22>
 8003f40:	d902      	bls.n	8003f48 <_free_r+0x74>
 8003f42:	230c      	movs	r3, #12
 8003f44:	602b      	str	r3, [r5, #0]
 8003f46:	e7d6      	b.n	8003ef6 <_free_r+0x22>
 8003f48:	6820      	ldr	r0, [r4, #0]
 8003f4a:	1821      	adds	r1, r4, r0
 8003f4c:	428b      	cmp	r3, r1
 8003f4e:	bf01      	itttt	eq
 8003f50:	6819      	ldreq	r1, [r3, #0]
 8003f52:	685b      	ldreq	r3, [r3, #4]
 8003f54:	1809      	addeq	r1, r1, r0
 8003f56:	6021      	streq	r1, [r4, #0]
 8003f58:	6063      	str	r3, [r4, #4]
 8003f5a:	6054      	str	r4, [r2, #4]
 8003f5c:	e7cb      	b.n	8003ef6 <_free_r+0x22>
 8003f5e:	bd38      	pop	{r3, r4, r5, pc}
 8003f60:	20000164 	.word	0x20000164

08003f64 <__ssputs_r>:
 8003f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f68:	461f      	mov	r7, r3
 8003f6a:	688e      	ldr	r6, [r1, #8]
 8003f6c:	4682      	mov	sl, r0
 8003f6e:	42be      	cmp	r6, r7
 8003f70:	460c      	mov	r4, r1
 8003f72:	4690      	mov	r8, r2
 8003f74:	680b      	ldr	r3, [r1, #0]
 8003f76:	d82d      	bhi.n	8003fd4 <__ssputs_r+0x70>
 8003f78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003f7c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003f80:	d026      	beq.n	8003fd0 <__ssputs_r+0x6c>
 8003f82:	6965      	ldr	r5, [r4, #20]
 8003f84:	6909      	ldr	r1, [r1, #16]
 8003f86:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f8a:	eba3 0901 	sub.w	r9, r3, r1
 8003f8e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f92:	1c7b      	adds	r3, r7, #1
 8003f94:	444b      	add	r3, r9
 8003f96:	106d      	asrs	r5, r5, #1
 8003f98:	429d      	cmp	r5, r3
 8003f9a:	bf38      	it	cc
 8003f9c:	461d      	movcc	r5, r3
 8003f9e:	0553      	lsls	r3, r2, #21
 8003fa0:	d527      	bpl.n	8003ff2 <__ssputs_r+0x8e>
 8003fa2:	4629      	mov	r1, r5
 8003fa4:	f7ff fc32 	bl	800380c <_malloc_r>
 8003fa8:	4606      	mov	r6, r0
 8003faa:	b360      	cbz	r0, 8004006 <__ssputs_r+0xa2>
 8003fac:	464a      	mov	r2, r9
 8003fae:	6921      	ldr	r1, [r4, #16]
 8003fb0:	f7ff ff81 	bl	8003eb6 <memcpy>
 8003fb4:	89a3      	ldrh	r3, [r4, #12]
 8003fb6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003fba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fbe:	81a3      	strh	r3, [r4, #12]
 8003fc0:	6126      	str	r6, [r4, #16]
 8003fc2:	444e      	add	r6, r9
 8003fc4:	6026      	str	r6, [r4, #0]
 8003fc6:	463e      	mov	r6, r7
 8003fc8:	6165      	str	r5, [r4, #20]
 8003fca:	eba5 0509 	sub.w	r5, r5, r9
 8003fce:	60a5      	str	r5, [r4, #8]
 8003fd0:	42be      	cmp	r6, r7
 8003fd2:	d900      	bls.n	8003fd6 <__ssputs_r+0x72>
 8003fd4:	463e      	mov	r6, r7
 8003fd6:	4632      	mov	r2, r6
 8003fd8:	4641      	mov	r1, r8
 8003fda:	6820      	ldr	r0, [r4, #0]
 8003fdc:	f000 fcf5 	bl	80049ca <memmove>
 8003fe0:	2000      	movs	r0, #0
 8003fe2:	68a3      	ldr	r3, [r4, #8]
 8003fe4:	1b9b      	subs	r3, r3, r6
 8003fe6:	60a3      	str	r3, [r4, #8]
 8003fe8:	6823      	ldr	r3, [r4, #0]
 8003fea:	4433      	add	r3, r6
 8003fec:	6023      	str	r3, [r4, #0]
 8003fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ff2:	462a      	mov	r2, r5
 8003ff4:	f000 fd34 	bl	8004a60 <_realloc_r>
 8003ff8:	4606      	mov	r6, r0
 8003ffa:	2800      	cmp	r0, #0
 8003ffc:	d1e0      	bne.n	8003fc0 <__ssputs_r+0x5c>
 8003ffe:	4650      	mov	r0, sl
 8004000:	6921      	ldr	r1, [r4, #16]
 8004002:	f7ff ff67 	bl	8003ed4 <_free_r>
 8004006:	230c      	movs	r3, #12
 8004008:	f8ca 3000 	str.w	r3, [sl]
 800400c:	89a3      	ldrh	r3, [r4, #12]
 800400e:	f04f 30ff 	mov.w	r0, #4294967295
 8004012:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004016:	81a3      	strh	r3, [r4, #12]
 8004018:	e7e9      	b.n	8003fee <__ssputs_r+0x8a>
	...

0800401c <_svfiprintf_r>:
 800401c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004020:	4698      	mov	r8, r3
 8004022:	898b      	ldrh	r3, [r1, #12]
 8004024:	4607      	mov	r7, r0
 8004026:	061b      	lsls	r3, r3, #24
 8004028:	460d      	mov	r5, r1
 800402a:	4614      	mov	r4, r2
 800402c:	b09d      	sub	sp, #116	@ 0x74
 800402e:	d510      	bpl.n	8004052 <_svfiprintf_r+0x36>
 8004030:	690b      	ldr	r3, [r1, #16]
 8004032:	b973      	cbnz	r3, 8004052 <_svfiprintf_r+0x36>
 8004034:	2140      	movs	r1, #64	@ 0x40
 8004036:	f7ff fbe9 	bl	800380c <_malloc_r>
 800403a:	6028      	str	r0, [r5, #0]
 800403c:	6128      	str	r0, [r5, #16]
 800403e:	b930      	cbnz	r0, 800404e <_svfiprintf_r+0x32>
 8004040:	230c      	movs	r3, #12
 8004042:	603b      	str	r3, [r7, #0]
 8004044:	f04f 30ff 	mov.w	r0, #4294967295
 8004048:	b01d      	add	sp, #116	@ 0x74
 800404a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800404e:	2340      	movs	r3, #64	@ 0x40
 8004050:	616b      	str	r3, [r5, #20]
 8004052:	2300      	movs	r3, #0
 8004054:	9309      	str	r3, [sp, #36]	@ 0x24
 8004056:	2320      	movs	r3, #32
 8004058:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800405c:	2330      	movs	r3, #48	@ 0x30
 800405e:	f04f 0901 	mov.w	r9, #1
 8004062:	f8cd 800c 	str.w	r8, [sp, #12]
 8004066:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004200 <_svfiprintf_r+0x1e4>
 800406a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800406e:	4623      	mov	r3, r4
 8004070:	469a      	mov	sl, r3
 8004072:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004076:	b10a      	cbz	r2, 800407c <_svfiprintf_r+0x60>
 8004078:	2a25      	cmp	r2, #37	@ 0x25
 800407a:	d1f9      	bne.n	8004070 <_svfiprintf_r+0x54>
 800407c:	ebba 0b04 	subs.w	fp, sl, r4
 8004080:	d00b      	beq.n	800409a <_svfiprintf_r+0x7e>
 8004082:	465b      	mov	r3, fp
 8004084:	4622      	mov	r2, r4
 8004086:	4629      	mov	r1, r5
 8004088:	4638      	mov	r0, r7
 800408a:	f7ff ff6b 	bl	8003f64 <__ssputs_r>
 800408e:	3001      	adds	r0, #1
 8004090:	f000 80a7 	beq.w	80041e2 <_svfiprintf_r+0x1c6>
 8004094:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004096:	445a      	add	r2, fp
 8004098:	9209      	str	r2, [sp, #36]	@ 0x24
 800409a:	f89a 3000 	ldrb.w	r3, [sl]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f000 809f 	beq.w	80041e2 <_svfiprintf_r+0x1c6>
 80040a4:	2300      	movs	r3, #0
 80040a6:	f04f 32ff 	mov.w	r2, #4294967295
 80040aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040ae:	f10a 0a01 	add.w	sl, sl, #1
 80040b2:	9304      	str	r3, [sp, #16]
 80040b4:	9307      	str	r3, [sp, #28]
 80040b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80040ba:	931a      	str	r3, [sp, #104]	@ 0x68
 80040bc:	4654      	mov	r4, sl
 80040be:	2205      	movs	r2, #5
 80040c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040c4:	484e      	ldr	r0, [pc, #312]	@ (8004200 <_svfiprintf_r+0x1e4>)
 80040c6:	f000 fcbd 	bl	8004a44 <memchr>
 80040ca:	9a04      	ldr	r2, [sp, #16]
 80040cc:	b9d8      	cbnz	r0, 8004106 <_svfiprintf_r+0xea>
 80040ce:	06d0      	lsls	r0, r2, #27
 80040d0:	bf44      	itt	mi
 80040d2:	2320      	movmi	r3, #32
 80040d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80040d8:	0711      	lsls	r1, r2, #28
 80040da:	bf44      	itt	mi
 80040dc:	232b      	movmi	r3, #43	@ 0x2b
 80040de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80040e2:	f89a 3000 	ldrb.w	r3, [sl]
 80040e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80040e8:	d015      	beq.n	8004116 <_svfiprintf_r+0xfa>
 80040ea:	4654      	mov	r4, sl
 80040ec:	2000      	movs	r0, #0
 80040ee:	f04f 0c0a 	mov.w	ip, #10
 80040f2:	9a07      	ldr	r2, [sp, #28]
 80040f4:	4621      	mov	r1, r4
 80040f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040fa:	3b30      	subs	r3, #48	@ 0x30
 80040fc:	2b09      	cmp	r3, #9
 80040fe:	d94b      	bls.n	8004198 <_svfiprintf_r+0x17c>
 8004100:	b1b0      	cbz	r0, 8004130 <_svfiprintf_r+0x114>
 8004102:	9207      	str	r2, [sp, #28]
 8004104:	e014      	b.n	8004130 <_svfiprintf_r+0x114>
 8004106:	eba0 0308 	sub.w	r3, r0, r8
 800410a:	fa09 f303 	lsl.w	r3, r9, r3
 800410e:	4313      	orrs	r3, r2
 8004110:	46a2      	mov	sl, r4
 8004112:	9304      	str	r3, [sp, #16]
 8004114:	e7d2      	b.n	80040bc <_svfiprintf_r+0xa0>
 8004116:	9b03      	ldr	r3, [sp, #12]
 8004118:	1d19      	adds	r1, r3, #4
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	9103      	str	r1, [sp, #12]
 800411e:	2b00      	cmp	r3, #0
 8004120:	bfbb      	ittet	lt
 8004122:	425b      	neglt	r3, r3
 8004124:	f042 0202 	orrlt.w	r2, r2, #2
 8004128:	9307      	strge	r3, [sp, #28]
 800412a:	9307      	strlt	r3, [sp, #28]
 800412c:	bfb8      	it	lt
 800412e:	9204      	strlt	r2, [sp, #16]
 8004130:	7823      	ldrb	r3, [r4, #0]
 8004132:	2b2e      	cmp	r3, #46	@ 0x2e
 8004134:	d10a      	bne.n	800414c <_svfiprintf_r+0x130>
 8004136:	7863      	ldrb	r3, [r4, #1]
 8004138:	2b2a      	cmp	r3, #42	@ 0x2a
 800413a:	d132      	bne.n	80041a2 <_svfiprintf_r+0x186>
 800413c:	9b03      	ldr	r3, [sp, #12]
 800413e:	3402      	adds	r4, #2
 8004140:	1d1a      	adds	r2, r3, #4
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	9203      	str	r2, [sp, #12]
 8004146:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800414a:	9305      	str	r3, [sp, #20]
 800414c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004204 <_svfiprintf_r+0x1e8>
 8004150:	2203      	movs	r2, #3
 8004152:	4650      	mov	r0, sl
 8004154:	7821      	ldrb	r1, [r4, #0]
 8004156:	f000 fc75 	bl	8004a44 <memchr>
 800415a:	b138      	cbz	r0, 800416c <_svfiprintf_r+0x150>
 800415c:	2240      	movs	r2, #64	@ 0x40
 800415e:	9b04      	ldr	r3, [sp, #16]
 8004160:	eba0 000a 	sub.w	r0, r0, sl
 8004164:	4082      	lsls	r2, r0
 8004166:	4313      	orrs	r3, r2
 8004168:	3401      	adds	r4, #1
 800416a:	9304      	str	r3, [sp, #16]
 800416c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004170:	2206      	movs	r2, #6
 8004172:	4825      	ldr	r0, [pc, #148]	@ (8004208 <_svfiprintf_r+0x1ec>)
 8004174:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004178:	f000 fc64 	bl	8004a44 <memchr>
 800417c:	2800      	cmp	r0, #0
 800417e:	d036      	beq.n	80041ee <_svfiprintf_r+0x1d2>
 8004180:	4b22      	ldr	r3, [pc, #136]	@ (800420c <_svfiprintf_r+0x1f0>)
 8004182:	bb1b      	cbnz	r3, 80041cc <_svfiprintf_r+0x1b0>
 8004184:	9b03      	ldr	r3, [sp, #12]
 8004186:	3307      	adds	r3, #7
 8004188:	f023 0307 	bic.w	r3, r3, #7
 800418c:	3308      	adds	r3, #8
 800418e:	9303      	str	r3, [sp, #12]
 8004190:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004192:	4433      	add	r3, r6
 8004194:	9309      	str	r3, [sp, #36]	@ 0x24
 8004196:	e76a      	b.n	800406e <_svfiprintf_r+0x52>
 8004198:	460c      	mov	r4, r1
 800419a:	2001      	movs	r0, #1
 800419c:	fb0c 3202 	mla	r2, ip, r2, r3
 80041a0:	e7a8      	b.n	80040f4 <_svfiprintf_r+0xd8>
 80041a2:	2300      	movs	r3, #0
 80041a4:	f04f 0c0a 	mov.w	ip, #10
 80041a8:	4619      	mov	r1, r3
 80041aa:	3401      	adds	r4, #1
 80041ac:	9305      	str	r3, [sp, #20]
 80041ae:	4620      	mov	r0, r4
 80041b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041b4:	3a30      	subs	r2, #48	@ 0x30
 80041b6:	2a09      	cmp	r2, #9
 80041b8:	d903      	bls.n	80041c2 <_svfiprintf_r+0x1a6>
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d0c6      	beq.n	800414c <_svfiprintf_r+0x130>
 80041be:	9105      	str	r1, [sp, #20]
 80041c0:	e7c4      	b.n	800414c <_svfiprintf_r+0x130>
 80041c2:	4604      	mov	r4, r0
 80041c4:	2301      	movs	r3, #1
 80041c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80041ca:	e7f0      	b.n	80041ae <_svfiprintf_r+0x192>
 80041cc:	ab03      	add	r3, sp, #12
 80041ce:	9300      	str	r3, [sp, #0]
 80041d0:	462a      	mov	r2, r5
 80041d2:	4638      	mov	r0, r7
 80041d4:	4b0e      	ldr	r3, [pc, #56]	@ (8004210 <_svfiprintf_r+0x1f4>)
 80041d6:	a904      	add	r1, sp, #16
 80041d8:	f3af 8000 	nop.w
 80041dc:	1c42      	adds	r2, r0, #1
 80041de:	4606      	mov	r6, r0
 80041e0:	d1d6      	bne.n	8004190 <_svfiprintf_r+0x174>
 80041e2:	89ab      	ldrh	r3, [r5, #12]
 80041e4:	065b      	lsls	r3, r3, #25
 80041e6:	f53f af2d 	bmi.w	8004044 <_svfiprintf_r+0x28>
 80041ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80041ec:	e72c      	b.n	8004048 <_svfiprintf_r+0x2c>
 80041ee:	ab03      	add	r3, sp, #12
 80041f0:	9300      	str	r3, [sp, #0]
 80041f2:	462a      	mov	r2, r5
 80041f4:	4638      	mov	r0, r7
 80041f6:	4b06      	ldr	r3, [pc, #24]	@ (8004210 <_svfiprintf_r+0x1f4>)
 80041f8:	a904      	add	r1, sp, #16
 80041fa:	f000 f9bd 	bl	8004578 <_printf_i>
 80041fe:	e7ed      	b.n	80041dc <_svfiprintf_r+0x1c0>
 8004200:	08004c1e 	.word	0x08004c1e
 8004204:	08004c24 	.word	0x08004c24
 8004208:	08004c28 	.word	0x08004c28
 800420c:	00000000 	.word	0x00000000
 8004210:	08003f65 	.word	0x08003f65

08004214 <__sfputc_r>:
 8004214:	6893      	ldr	r3, [r2, #8]
 8004216:	b410      	push	{r4}
 8004218:	3b01      	subs	r3, #1
 800421a:	2b00      	cmp	r3, #0
 800421c:	6093      	str	r3, [r2, #8]
 800421e:	da07      	bge.n	8004230 <__sfputc_r+0x1c>
 8004220:	6994      	ldr	r4, [r2, #24]
 8004222:	42a3      	cmp	r3, r4
 8004224:	db01      	blt.n	800422a <__sfputc_r+0x16>
 8004226:	290a      	cmp	r1, #10
 8004228:	d102      	bne.n	8004230 <__sfputc_r+0x1c>
 800422a:	bc10      	pop	{r4}
 800422c:	f7ff bd23 	b.w	8003c76 <__swbuf_r>
 8004230:	6813      	ldr	r3, [r2, #0]
 8004232:	1c58      	adds	r0, r3, #1
 8004234:	6010      	str	r0, [r2, #0]
 8004236:	7019      	strb	r1, [r3, #0]
 8004238:	4608      	mov	r0, r1
 800423a:	bc10      	pop	{r4}
 800423c:	4770      	bx	lr

0800423e <__sfputs_r>:
 800423e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004240:	4606      	mov	r6, r0
 8004242:	460f      	mov	r7, r1
 8004244:	4614      	mov	r4, r2
 8004246:	18d5      	adds	r5, r2, r3
 8004248:	42ac      	cmp	r4, r5
 800424a:	d101      	bne.n	8004250 <__sfputs_r+0x12>
 800424c:	2000      	movs	r0, #0
 800424e:	e007      	b.n	8004260 <__sfputs_r+0x22>
 8004250:	463a      	mov	r2, r7
 8004252:	4630      	mov	r0, r6
 8004254:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004258:	f7ff ffdc 	bl	8004214 <__sfputc_r>
 800425c:	1c43      	adds	r3, r0, #1
 800425e:	d1f3      	bne.n	8004248 <__sfputs_r+0xa>
 8004260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004264 <_vfiprintf_r>:
 8004264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004268:	460d      	mov	r5, r1
 800426a:	4614      	mov	r4, r2
 800426c:	4698      	mov	r8, r3
 800426e:	4606      	mov	r6, r0
 8004270:	b09d      	sub	sp, #116	@ 0x74
 8004272:	b118      	cbz	r0, 800427c <_vfiprintf_r+0x18>
 8004274:	6a03      	ldr	r3, [r0, #32]
 8004276:	b90b      	cbnz	r3, 800427c <_vfiprintf_r+0x18>
 8004278:	f7ff fbe0 	bl	8003a3c <__sinit>
 800427c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800427e:	07d9      	lsls	r1, r3, #31
 8004280:	d405      	bmi.n	800428e <_vfiprintf_r+0x2a>
 8004282:	89ab      	ldrh	r3, [r5, #12]
 8004284:	059a      	lsls	r2, r3, #22
 8004286:	d402      	bmi.n	800428e <_vfiprintf_r+0x2a>
 8004288:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800428a:	f7ff fe12 	bl	8003eb2 <__retarget_lock_acquire_recursive>
 800428e:	89ab      	ldrh	r3, [r5, #12]
 8004290:	071b      	lsls	r3, r3, #28
 8004292:	d501      	bpl.n	8004298 <_vfiprintf_r+0x34>
 8004294:	692b      	ldr	r3, [r5, #16]
 8004296:	b99b      	cbnz	r3, 80042c0 <_vfiprintf_r+0x5c>
 8004298:	4629      	mov	r1, r5
 800429a:	4630      	mov	r0, r6
 800429c:	f7ff fd2a 	bl	8003cf4 <__swsetup_r>
 80042a0:	b170      	cbz	r0, 80042c0 <_vfiprintf_r+0x5c>
 80042a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80042a4:	07dc      	lsls	r4, r3, #31
 80042a6:	d504      	bpl.n	80042b2 <_vfiprintf_r+0x4e>
 80042a8:	f04f 30ff 	mov.w	r0, #4294967295
 80042ac:	b01d      	add	sp, #116	@ 0x74
 80042ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042b2:	89ab      	ldrh	r3, [r5, #12]
 80042b4:	0598      	lsls	r0, r3, #22
 80042b6:	d4f7      	bmi.n	80042a8 <_vfiprintf_r+0x44>
 80042b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80042ba:	f7ff fdfb 	bl	8003eb4 <__retarget_lock_release_recursive>
 80042be:	e7f3      	b.n	80042a8 <_vfiprintf_r+0x44>
 80042c0:	2300      	movs	r3, #0
 80042c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80042c4:	2320      	movs	r3, #32
 80042c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80042ca:	2330      	movs	r3, #48	@ 0x30
 80042cc:	f04f 0901 	mov.w	r9, #1
 80042d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80042d4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8004480 <_vfiprintf_r+0x21c>
 80042d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80042dc:	4623      	mov	r3, r4
 80042de:	469a      	mov	sl, r3
 80042e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042e4:	b10a      	cbz	r2, 80042ea <_vfiprintf_r+0x86>
 80042e6:	2a25      	cmp	r2, #37	@ 0x25
 80042e8:	d1f9      	bne.n	80042de <_vfiprintf_r+0x7a>
 80042ea:	ebba 0b04 	subs.w	fp, sl, r4
 80042ee:	d00b      	beq.n	8004308 <_vfiprintf_r+0xa4>
 80042f0:	465b      	mov	r3, fp
 80042f2:	4622      	mov	r2, r4
 80042f4:	4629      	mov	r1, r5
 80042f6:	4630      	mov	r0, r6
 80042f8:	f7ff ffa1 	bl	800423e <__sfputs_r>
 80042fc:	3001      	adds	r0, #1
 80042fe:	f000 80a7 	beq.w	8004450 <_vfiprintf_r+0x1ec>
 8004302:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004304:	445a      	add	r2, fp
 8004306:	9209      	str	r2, [sp, #36]	@ 0x24
 8004308:	f89a 3000 	ldrb.w	r3, [sl]
 800430c:	2b00      	cmp	r3, #0
 800430e:	f000 809f 	beq.w	8004450 <_vfiprintf_r+0x1ec>
 8004312:	2300      	movs	r3, #0
 8004314:	f04f 32ff 	mov.w	r2, #4294967295
 8004318:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800431c:	f10a 0a01 	add.w	sl, sl, #1
 8004320:	9304      	str	r3, [sp, #16]
 8004322:	9307      	str	r3, [sp, #28]
 8004324:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004328:	931a      	str	r3, [sp, #104]	@ 0x68
 800432a:	4654      	mov	r4, sl
 800432c:	2205      	movs	r2, #5
 800432e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004332:	4853      	ldr	r0, [pc, #332]	@ (8004480 <_vfiprintf_r+0x21c>)
 8004334:	f000 fb86 	bl	8004a44 <memchr>
 8004338:	9a04      	ldr	r2, [sp, #16]
 800433a:	b9d8      	cbnz	r0, 8004374 <_vfiprintf_r+0x110>
 800433c:	06d1      	lsls	r1, r2, #27
 800433e:	bf44      	itt	mi
 8004340:	2320      	movmi	r3, #32
 8004342:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004346:	0713      	lsls	r3, r2, #28
 8004348:	bf44      	itt	mi
 800434a:	232b      	movmi	r3, #43	@ 0x2b
 800434c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004350:	f89a 3000 	ldrb.w	r3, [sl]
 8004354:	2b2a      	cmp	r3, #42	@ 0x2a
 8004356:	d015      	beq.n	8004384 <_vfiprintf_r+0x120>
 8004358:	4654      	mov	r4, sl
 800435a:	2000      	movs	r0, #0
 800435c:	f04f 0c0a 	mov.w	ip, #10
 8004360:	9a07      	ldr	r2, [sp, #28]
 8004362:	4621      	mov	r1, r4
 8004364:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004368:	3b30      	subs	r3, #48	@ 0x30
 800436a:	2b09      	cmp	r3, #9
 800436c:	d94b      	bls.n	8004406 <_vfiprintf_r+0x1a2>
 800436e:	b1b0      	cbz	r0, 800439e <_vfiprintf_r+0x13a>
 8004370:	9207      	str	r2, [sp, #28]
 8004372:	e014      	b.n	800439e <_vfiprintf_r+0x13a>
 8004374:	eba0 0308 	sub.w	r3, r0, r8
 8004378:	fa09 f303 	lsl.w	r3, r9, r3
 800437c:	4313      	orrs	r3, r2
 800437e:	46a2      	mov	sl, r4
 8004380:	9304      	str	r3, [sp, #16]
 8004382:	e7d2      	b.n	800432a <_vfiprintf_r+0xc6>
 8004384:	9b03      	ldr	r3, [sp, #12]
 8004386:	1d19      	adds	r1, r3, #4
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	9103      	str	r1, [sp, #12]
 800438c:	2b00      	cmp	r3, #0
 800438e:	bfbb      	ittet	lt
 8004390:	425b      	neglt	r3, r3
 8004392:	f042 0202 	orrlt.w	r2, r2, #2
 8004396:	9307      	strge	r3, [sp, #28]
 8004398:	9307      	strlt	r3, [sp, #28]
 800439a:	bfb8      	it	lt
 800439c:	9204      	strlt	r2, [sp, #16]
 800439e:	7823      	ldrb	r3, [r4, #0]
 80043a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80043a2:	d10a      	bne.n	80043ba <_vfiprintf_r+0x156>
 80043a4:	7863      	ldrb	r3, [r4, #1]
 80043a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80043a8:	d132      	bne.n	8004410 <_vfiprintf_r+0x1ac>
 80043aa:	9b03      	ldr	r3, [sp, #12]
 80043ac:	3402      	adds	r4, #2
 80043ae:	1d1a      	adds	r2, r3, #4
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	9203      	str	r2, [sp, #12]
 80043b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80043b8:	9305      	str	r3, [sp, #20]
 80043ba:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8004484 <_vfiprintf_r+0x220>
 80043be:	2203      	movs	r2, #3
 80043c0:	4650      	mov	r0, sl
 80043c2:	7821      	ldrb	r1, [r4, #0]
 80043c4:	f000 fb3e 	bl	8004a44 <memchr>
 80043c8:	b138      	cbz	r0, 80043da <_vfiprintf_r+0x176>
 80043ca:	2240      	movs	r2, #64	@ 0x40
 80043cc:	9b04      	ldr	r3, [sp, #16]
 80043ce:	eba0 000a 	sub.w	r0, r0, sl
 80043d2:	4082      	lsls	r2, r0
 80043d4:	4313      	orrs	r3, r2
 80043d6:	3401      	adds	r4, #1
 80043d8:	9304      	str	r3, [sp, #16]
 80043da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043de:	2206      	movs	r2, #6
 80043e0:	4829      	ldr	r0, [pc, #164]	@ (8004488 <_vfiprintf_r+0x224>)
 80043e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80043e6:	f000 fb2d 	bl	8004a44 <memchr>
 80043ea:	2800      	cmp	r0, #0
 80043ec:	d03f      	beq.n	800446e <_vfiprintf_r+0x20a>
 80043ee:	4b27      	ldr	r3, [pc, #156]	@ (800448c <_vfiprintf_r+0x228>)
 80043f0:	bb1b      	cbnz	r3, 800443a <_vfiprintf_r+0x1d6>
 80043f2:	9b03      	ldr	r3, [sp, #12]
 80043f4:	3307      	adds	r3, #7
 80043f6:	f023 0307 	bic.w	r3, r3, #7
 80043fa:	3308      	adds	r3, #8
 80043fc:	9303      	str	r3, [sp, #12]
 80043fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004400:	443b      	add	r3, r7
 8004402:	9309      	str	r3, [sp, #36]	@ 0x24
 8004404:	e76a      	b.n	80042dc <_vfiprintf_r+0x78>
 8004406:	460c      	mov	r4, r1
 8004408:	2001      	movs	r0, #1
 800440a:	fb0c 3202 	mla	r2, ip, r2, r3
 800440e:	e7a8      	b.n	8004362 <_vfiprintf_r+0xfe>
 8004410:	2300      	movs	r3, #0
 8004412:	f04f 0c0a 	mov.w	ip, #10
 8004416:	4619      	mov	r1, r3
 8004418:	3401      	adds	r4, #1
 800441a:	9305      	str	r3, [sp, #20]
 800441c:	4620      	mov	r0, r4
 800441e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004422:	3a30      	subs	r2, #48	@ 0x30
 8004424:	2a09      	cmp	r2, #9
 8004426:	d903      	bls.n	8004430 <_vfiprintf_r+0x1cc>
 8004428:	2b00      	cmp	r3, #0
 800442a:	d0c6      	beq.n	80043ba <_vfiprintf_r+0x156>
 800442c:	9105      	str	r1, [sp, #20]
 800442e:	e7c4      	b.n	80043ba <_vfiprintf_r+0x156>
 8004430:	4604      	mov	r4, r0
 8004432:	2301      	movs	r3, #1
 8004434:	fb0c 2101 	mla	r1, ip, r1, r2
 8004438:	e7f0      	b.n	800441c <_vfiprintf_r+0x1b8>
 800443a:	ab03      	add	r3, sp, #12
 800443c:	9300      	str	r3, [sp, #0]
 800443e:	462a      	mov	r2, r5
 8004440:	4630      	mov	r0, r6
 8004442:	4b13      	ldr	r3, [pc, #76]	@ (8004490 <_vfiprintf_r+0x22c>)
 8004444:	a904      	add	r1, sp, #16
 8004446:	f3af 8000 	nop.w
 800444a:	4607      	mov	r7, r0
 800444c:	1c78      	adds	r0, r7, #1
 800444e:	d1d6      	bne.n	80043fe <_vfiprintf_r+0x19a>
 8004450:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004452:	07d9      	lsls	r1, r3, #31
 8004454:	d405      	bmi.n	8004462 <_vfiprintf_r+0x1fe>
 8004456:	89ab      	ldrh	r3, [r5, #12]
 8004458:	059a      	lsls	r2, r3, #22
 800445a:	d402      	bmi.n	8004462 <_vfiprintf_r+0x1fe>
 800445c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800445e:	f7ff fd29 	bl	8003eb4 <__retarget_lock_release_recursive>
 8004462:	89ab      	ldrh	r3, [r5, #12]
 8004464:	065b      	lsls	r3, r3, #25
 8004466:	f53f af1f 	bmi.w	80042a8 <_vfiprintf_r+0x44>
 800446a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800446c:	e71e      	b.n	80042ac <_vfiprintf_r+0x48>
 800446e:	ab03      	add	r3, sp, #12
 8004470:	9300      	str	r3, [sp, #0]
 8004472:	462a      	mov	r2, r5
 8004474:	4630      	mov	r0, r6
 8004476:	4b06      	ldr	r3, [pc, #24]	@ (8004490 <_vfiprintf_r+0x22c>)
 8004478:	a904      	add	r1, sp, #16
 800447a:	f000 f87d 	bl	8004578 <_printf_i>
 800447e:	e7e4      	b.n	800444a <_vfiprintf_r+0x1e6>
 8004480:	08004c1e 	.word	0x08004c1e
 8004484:	08004c24 	.word	0x08004c24
 8004488:	08004c28 	.word	0x08004c28
 800448c:	00000000 	.word	0x00000000
 8004490:	0800423f 	.word	0x0800423f

08004494 <_printf_common>:
 8004494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004498:	4616      	mov	r6, r2
 800449a:	4698      	mov	r8, r3
 800449c:	688a      	ldr	r2, [r1, #8]
 800449e:	690b      	ldr	r3, [r1, #16]
 80044a0:	4607      	mov	r7, r0
 80044a2:	4293      	cmp	r3, r2
 80044a4:	bfb8      	it	lt
 80044a6:	4613      	movlt	r3, r2
 80044a8:	6033      	str	r3, [r6, #0]
 80044aa:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80044ae:	460c      	mov	r4, r1
 80044b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80044b4:	b10a      	cbz	r2, 80044ba <_printf_common+0x26>
 80044b6:	3301      	adds	r3, #1
 80044b8:	6033      	str	r3, [r6, #0]
 80044ba:	6823      	ldr	r3, [r4, #0]
 80044bc:	0699      	lsls	r1, r3, #26
 80044be:	bf42      	ittt	mi
 80044c0:	6833      	ldrmi	r3, [r6, #0]
 80044c2:	3302      	addmi	r3, #2
 80044c4:	6033      	strmi	r3, [r6, #0]
 80044c6:	6825      	ldr	r5, [r4, #0]
 80044c8:	f015 0506 	ands.w	r5, r5, #6
 80044cc:	d106      	bne.n	80044dc <_printf_common+0x48>
 80044ce:	f104 0a19 	add.w	sl, r4, #25
 80044d2:	68e3      	ldr	r3, [r4, #12]
 80044d4:	6832      	ldr	r2, [r6, #0]
 80044d6:	1a9b      	subs	r3, r3, r2
 80044d8:	42ab      	cmp	r3, r5
 80044da:	dc2b      	bgt.n	8004534 <_printf_common+0xa0>
 80044dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80044e0:	6822      	ldr	r2, [r4, #0]
 80044e2:	3b00      	subs	r3, #0
 80044e4:	bf18      	it	ne
 80044e6:	2301      	movne	r3, #1
 80044e8:	0692      	lsls	r2, r2, #26
 80044ea:	d430      	bmi.n	800454e <_printf_common+0xba>
 80044ec:	4641      	mov	r1, r8
 80044ee:	4638      	mov	r0, r7
 80044f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80044f4:	47c8      	blx	r9
 80044f6:	3001      	adds	r0, #1
 80044f8:	d023      	beq.n	8004542 <_printf_common+0xae>
 80044fa:	6823      	ldr	r3, [r4, #0]
 80044fc:	6922      	ldr	r2, [r4, #16]
 80044fe:	f003 0306 	and.w	r3, r3, #6
 8004502:	2b04      	cmp	r3, #4
 8004504:	bf14      	ite	ne
 8004506:	2500      	movne	r5, #0
 8004508:	6833      	ldreq	r3, [r6, #0]
 800450a:	f04f 0600 	mov.w	r6, #0
 800450e:	bf08      	it	eq
 8004510:	68e5      	ldreq	r5, [r4, #12]
 8004512:	f104 041a 	add.w	r4, r4, #26
 8004516:	bf08      	it	eq
 8004518:	1aed      	subeq	r5, r5, r3
 800451a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800451e:	bf08      	it	eq
 8004520:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004524:	4293      	cmp	r3, r2
 8004526:	bfc4      	itt	gt
 8004528:	1a9b      	subgt	r3, r3, r2
 800452a:	18ed      	addgt	r5, r5, r3
 800452c:	42b5      	cmp	r5, r6
 800452e:	d11a      	bne.n	8004566 <_printf_common+0xd2>
 8004530:	2000      	movs	r0, #0
 8004532:	e008      	b.n	8004546 <_printf_common+0xb2>
 8004534:	2301      	movs	r3, #1
 8004536:	4652      	mov	r2, sl
 8004538:	4641      	mov	r1, r8
 800453a:	4638      	mov	r0, r7
 800453c:	47c8      	blx	r9
 800453e:	3001      	adds	r0, #1
 8004540:	d103      	bne.n	800454a <_printf_common+0xb6>
 8004542:	f04f 30ff 	mov.w	r0, #4294967295
 8004546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800454a:	3501      	adds	r5, #1
 800454c:	e7c1      	b.n	80044d2 <_printf_common+0x3e>
 800454e:	2030      	movs	r0, #48	@ 0x30
 8004550:	18e1      	adds	r1, r4, r3
 8004552:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004556:	1c5a      	adds	r2, r3, #1
 8004558:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800455c:	4422      	add	r2, r4
 800455e:	3302      	adds	r3, #2
 8004560:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004564:	e7c2      	b.n	80044ec <_printf_common+0x58>
 8004566:	2301      	movs	r3, #1
 8004568:	4622      	mov	r2, r4
 800456a:	4641      	mov	r1, r8
 800456c:	4638      	mov	r0, r7
 800456e:	47c8      	blx	r9
 8004570:	3001      	adds	r0, #1
 8004572:	d0e6      	beq.n	8004542 <_printf_common+0xae>
 8004574:	3601      	adds	r6, #1
 8004576:	e7d9      	b.n	800452c <_printf_common+0x98>

08004578 <_printf_i>:
 8004578:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800457c:	7e0f      	ldrb	r7, [r1, #24]
 800457e:	4691      	mov	r9, r2
 8004580:	2f78      	cmp	r7, #120	@ 0x78
 8004582:	4680      	mov	r8, r0
 8004584:	460c      	mov	r4, r1
 8004586:	469a      	mov	sl, r3
 8004588:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800458a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800458e:	d807      	bhi.n	80045a0 <_printf_i+0x28>
 8004590:	2f62      	cmp	r7, #98	@ 0x62
 8004592:	d80a      	bhi.n	80045aa <_printf_i+0x32>
 8004594:	2f00      	cmp	r7, #0
 8004596:	f000 80d3 	beq.w	8004740 <_printf_i+0x1c8>
 800459a:	2f58      	cmp	r7, #88	@ 0x58
 800459c:	f000 80ba 	beq.w	8004714 <_printf_i+0x19c>
 80045a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80045a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80045a8:	e03a      	b.n	8004620 <_printf_i+0xa8>
 80045aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80045ae:	2b15      	cmp	r3, #21
 80045b0:	d8f6      	bhi.n	80045a0 <_printf_i+0x28>
 80045b2:	a101      	add	r1, pc, #4	@ (adr r1, 80045b8 <_printf_i+0x40>)
 80045b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80045b8:	08004611 	.word	0x08004611
 80045bc:	08004625 	.word	0x08004625
 80045c0:	080045a1 	.word	0x080045a1
 80045c4:	080045a1 	.word	0x080045a1
 80045c8:	080045a1 	.word	0x080045a1
 80045cc:	080045a1 	.word	0x080045a1
 80045d0:	08004625 	.word	0x08004625
 80045d4:	080045a1 	.word	0x080045a1
 80045d8:	080045a1 	.word	0x080045a1
 80045dc:	080045a1 	.word	0x080045a1
 80045e0:	080045a1 	.word	0x080045a1
 80045e4:	08004727 	.word	0x08004727
 80045e8:	0800464f 	.word	0x0800464f
 80045ec:	080046e1 	.word	0x080046e1
 80045f0:	080045a1 	.word	0x080045a1
 80045f4:	080045a1 	.word	0x080045a1
 80045f8:	08004749 	.word	0x08004749
 80045fc:	080045a1 	.word	0x080045a1
 8004600:	0800464f 	.word	0x0800464f
 8004604:	080045a1 	.word	0x080045a1
 8004608:	080045a1 	.word	0x080045a1
 800460c:	080046e9 	.word	0x080046e9
 8004610:	6833      	ldr	r3, [r6, #0]
 8004612:	1d1a      	adds	r2, r3, #4
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	6032      	str	r2, [r6, #0]
 8004618:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800461c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004620:	2301      	movs	r3, #1
 8004622:	e09e      	b.n	8004762 <_printf_i+0x1ea>
 8004624:	6833      	ldr	r3, [r6, #0]
 8004626:	6820      	ldr	r0, [r4, #0]
 8004628:	1d19      	adds	r1, r3, #4
 800462a:	6031      	str	r1, [r6, #0]
 800462c:	0606      	lsls	r6, r0, #24
 800462e:	d501      	bpl.n	8004634 <_printf_i+0xbc>
 8004630:	681d      	ldr	r5, [r3, #0]
 8004632:	e003      	b.n	800463c <_printf_i+0xc4>
 8004634:	0645      	lsls	r5, r0, #25
 8004636:	d5fb      	bpl.n	8004630 <_printf_i+0xb8>
 8004638:	f9b3 5000 	ldrsh.w	r5, [r3]
 800463c:	2d00      	cmp	r5, #0
 800463e:	da03      	bge.n	8004648 <_printf_i+0xd0>
 8004640:	232d      	movs	r3, #45	@ 0x2d
 8004642:	426d      	negs	r5, r5
 8004644:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004648:	230a      	movs	r3, #10
 800464a:	4859      	ldr	r0, [pc, #356]	@ (80047b0 <_printf_i+0x238>)
 800464c:	e011      	b.n	8004672 <_printf_i+0xfa>
 800464e:	6821      	ldr	r1, [r4, #0]
 8004650:	6833      	ldr	r3, [r6, #0]
 8004652:	0608      	lsls	r0, r1, #24
 8004654:	f853 5b04 	ldr.w	r5, [r3], #4
 8004658:	d402      	bmi.n	8004660 <_printf_i+0xe8>
 800465a:	0649      	lsls	r1, r1, #25
 800465c:	bf48      	it	mi
 800465e:	b2ad      	uxthmi	r5, r5
 8004660:	2f6f      	cmp	r7, #111	@ 0x6f
 8004662:	6033      	str	r3, [r6, #0]
 8004664:	bf14      	ite	ne
 8004666:	230a      	movne	r3, #10
 8004668:	2308      	moveq	r3, #8
 800466a:	4851      	ldr	r0, [pc, #324]	@ (80047b0 <_printf_i+0x238>)
 800466c:	2100      	movs	r1, #0
 800466e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004672:	6866      	ldr	r6, [r4, #4]
 8004674:	2e00      	cmp	r6, #0
 8004676:	bfa8      	it	ge
 8004678:	6821      	ldrge	r1, [r4, #0]
 800467a:	60a6      	str	r6, [r4, #8]
 800467c:	bfa4      	itt	ge
 800467e:	f021 0104 	bicge.w	r1, r1, #4
 8004682:	6021      	strge	r1, [r4, #0]
 8004684:	b90d      	cbnz	r5, 800468a <_printf_i+0x112>
 8004686:	2e00      	cmp	r6, #0
 8004688:	d04b      	beq.n	8004722 <_printf_i+0x1aa>
 800468a:	4616      	mov	r6, r2
 800468c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004690:	fb03 5711 	mls	r7, r3, r1, r5
 8004694:	5dc7      	ldrb	r7, [r0, r7]
 8004696:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800469a:	462f      	mov	r7, r5
 800469c:	42bb      	cmp	r3, r7
 800469e:	460d      	mov	r5, r1
 80046a0:	d9f4      	bls.n	800468c <_printf_i+0x114>
 80046a2:	2b08      	cmp	r3, #8
 80046a4:	d10b      	bne.n	80046be <_printf_i+0x146>
 80046a6:	6823      	ldr	r3, [r4, #0]
 80046a8:	07df      	lsls	r7, r3, #31
 80046aa:	d508      	bpl.n	80046be <_printf_i+0x146>
 80046ac:	6923      	ldr	r3, [r4, #16]
 80046ae:	6861      	ldr	r1, [r4, #4]
 80046b0:	4299      	cmp	r1, r3
 80046b2:	bfde      	ittt	le
 80046b4:	2330      	movle	r3, #48	@ 0x30
 80046b6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80046ba:	f106 36ff 	addle.w	r6, r6, #4294967295
 80046be:	1b92      	subs	r2, r2, r6
 80046c0:	6122      	str	r2, [r4, #16]
 80046c2:	464b      	mov	r3, r9
 80046c4:	4621      	mov	r1, r4
 80046c6:	4640      	mov	r0, r8
 80046c8:	f8cd a000 	str.w	sl, [sp]
 80046cc:	aa03      	add	r2, sp, #12
 80046ce:	f7ff fee1 	bl	8004494 <_printf_common>
 80046d2:	3001      	adds	r0, #1
 80046d4:	d14a      	bne.n	800476c <_printf_i+0x1f4>
 80046d6:	f04f 30ff 	mov.w	r0, #4294967295
 80046da:	b004      	add	sp, #16
 80046dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046e0:	6823      	ldr	r3, [r4, #0]
 80046e2:	f043 0320 	orr.w	r3, r3, #32
 80046e6:	6023      	str	r3, [r4, #0]
 80046e8:	2778      	movs	r7, #120	@ 0x78
 80046ea:	4832      	ldr	r0, [pc, #200]	@ (80047b4 <_printf_i+0x23c>)
 80046ec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80046f0:	6823      	ldr	r3, [r4, #0]
 80046f2:	6831      	ldr	r1, [r6, #0]
 80046f4:	061f      	lsls	r7, r3, #24
 80046f6:	f851 5b04 	ldr.w	r5, [r1], #4
 80046fa:	d402      	bmi.n	8004702 <_printf_i+0x18a>
 80046fc:	065f      	lsls	r7, r3, #25
 80046fe:	bf48      	it	mi
 8004700:	b2ad      	uxthmi	r5, r5
 8004702:	6031      	str	r1, [r6, #0]
 8004704:	07d9      	lsls	r1, r3, #31
 8004706:	bf44      	itt	mi
 8004708:	f043 0320 	orrmi.w	r3, r3, #32
 800470c:	6023      	strmi	r3, [r4, #0]
 800470e:	b11d      	cbz	r5, 8004718 <_printf_i+0x1a0>
 8004710:	2310      	movs	r3, #16
 8004712:	e7ab      	b.n	800466c <_printf_i+0xf4>
 8004714:	4826      	ldr	r0, [pc, #152]	@ (80047b0 <_printf_i+0x238>)
 8004716:	e7e9      	b.n	80046ec <_printf_i+0x174>
 8004718:	6823      	ldr	r3, [r4, #0]
 800471a:	f023 0320 	bic.w	r3, r3, #32
 800471e:	6023      	str	r3, [r4, #0]
 8004720:	e7f6      	b.n	8004710 <_printf_i+0x198>
 8004722:	4616      	mov	r6, r2
 8004724:	e7bd      	b.n	80046a2 <_printf_i+0x12a>
 8004726:	6833      	ldr	r3, [r6, #0]
 8004728:	6825      	ldr	r5, [r4, #0]
 800472a:	1d18      	adds	r0, r3, #4
 800472c:	6961      	ldr	r1, [r4, #20]
 800472e:	6030      	str	r0, [r6, #0]
 8004730:	062e      	lsls	r6, r5, #24
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	d501      	bpl.n	800473a <_printf_i+0x1c2>
 8004736:	6019      	str	r1, [r3, #0]
 8004738:	e002      	b.n	8004740 <_printf_i+0x1c8>
 800473a:	0668      	lsls	r0, r5, #25
 800473c:	d5fb      	bpl.n	8004736 <_printf_i+0x1be>
 800473e:	8019      	strh	r1, [r3, #0]
 8004740:	2300      	movs	r3, #0
 8004742:	4616      	mov	r6, r2
 8004744:	6123      	str	r3, [r4, #16]
 8004746:	e7bc      	b.n	80046c2 <_printf_i+0x14a>
 8004748:	6833      	ldr	r3, [r6, #0]
 800474a:	2100      	movs	r1, #0
 800474c:	1d1a      	adds	r2, r3, #4
 800474e:	6032      	str	r2, [r6, #0]
 8004750:	681e      	ldr	r6, [r3, #0]
 8004752:	6862      	ldr	r2, [r4, #4]
 8004754:	4630      	mov	r0, r6
 8004756:	f000 f975 	bl	8004a44 <memchr>
 800475a:	b108      	cbz	r0, 8004760 <_printf_i+0x1e8>
 800475c:	1b80      	subs	r0, r0, r6
 800475e:	6060      	str	r0, [r4, #4]
 8004760:	6863      	ldr	r3, [r4, #4]
 8004762:	6123      	str	r3, [r4, #16]
 8004764:	2300      	movs	r3, #0
 8004766:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800476a:	e7aa      	b.n	80046c2 <_printf_i+0x14a>
 800476c:	4632      	mov	r2, r6
 800476e:	4649      	mov	r1, r9
 8004770:	4640      	mov	r0, r8
 8004772:	6923      	ldr	r3, [r4, #16]
 8004774:	47d0      	blx	sl
 8004776:	3001      	adds	r0, #1
 8004778:	d0ad      	beq.n	80046d6 <_printf_i+0x15e>
 800477a:	6823      	ldr	r3, [r4, #0]
 800477c:	079b      	lsls	r3, r3, #30
 800477e:	d413      	bmi.n	80047a8 <_printf_i+0x230>
 8004780:	68e0      	ldr	r0, [r4, #12]
 8004782:	9b03      	ldr	r3, [sp, #12]
 8004784:	4298      	cmp	r0, r3
 8004786:	bfb8      	it	lt
 8004788:	4618      	movlt	r0, r3
 800478a:	e7a6      	b.n	80046da <_printf_i+0x162>
 800478c:	2301      	movs	r3, #1
 800478e:	4632      	mov	r2, r6
 8004790:	4649      	mov	r1, r9
 8004792:	4640      	mov	r0, r8
 8004794:	47d0      	blx	sl
 8004796:	3001      	adds	r0, #1
 8004798:	d09d      	beq.n	80046d6 <_printf_i+0x15e>
 800479a:	3501      	adds	r5, #1
 800479c:	68e3      	ldr	r3, [r4, #12]
 800479e:	9903      	ldr	r1, [sp, #12]
 80047a0:	1a5b      	subs	r3, r3, r1
 80047a2:	42ab      	cmp	r3, r5
 80047a4:	dcf2      	bgt.n	800478c <_printf_i+0x214>
 80047a6:	e7eb      	b.n	8004780 <_printf_i+0x208>
 80047a8:	2500      	movs	r5, #0
 80047aa:	f104 0619 	add.w	r6, r4, #25
 80047ae:	e7f5      	b.n	800479c <_printf_i+0x224>
 80047b0:	08004c2f 	.word	0x08004c2f
 80047b4:	08004c40 	.word	0x08004c40

080047b8 <__sflush_r>:
 80047b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80047bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047be:	0716      	lsls	r6, r2, #28
 80047c0:	4605      	mov	r5, r0
 80047c2:	460c      	mov	r4, r1
 80047c4:	d454      	bmi.n	8004870 <__sflush_r+0xb8>
 80047c6:	684b      	ldr	r3, [r1, #4]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	dc02      	bgt.n	80047d2 <__sflush_r+0x1a>
 80047cc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	dd48      	ble.n	8004864 <__sflush_r+0xac>
 80047d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80047d4:	2e00      	cmp	r6, #0
 80047d6:	d045      	beq.n	8004864 <__sflush_r+0xac>
 80047d8:	2300      	movs	r3, #0
 80047da:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80047de:	682f      	ldr	r7, [r5, #0]
 80047e0:	6a21      	ldr	r1, [r4, #32]
 80047e2:	602b      	str	r3, [r5, #0]
 80047e4:	d030      	beq.n	8004848 <__sflush_r+0x90>
 80047e6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80047e8:	89a3      	ldrh	r3, [r4, #12]
 80047ea:	0759      	lsls	r1, r3, #29
 80047ec:	d505      	bpl.n	80047fa <__sflush_r+0x42>
 80047ee:	6863      	ldr	r3, [r4, #4]
 80047f0:	1ad2      	subs	r2, r2, r3
 80047f2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80047f4:	b10b      	cbz	r3, 80047fa <__sflush_r+0x42>
 80047f6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80047f8:	1ad2      	subs	r2, r2, r3
 80047fa:	2300      	movs	r3, #0
 80047fc:	4628      	mov	r0, r5
 80047fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004800:	6a21      	ldr	r1, [r4, #32]
 8004802:	47b0      	blx	r6
 8004804:	1c43      	adds	r3, r0, #1
 8004806:	89a3      	ldrh	r3, [r4, #12]
 8004808:	d106      	bne.n	8004818 <__sflush_r+0x60>
 800480a:	6829      	ldr	r1, [r5, #0]
 800480c:	291d      	cmp	r1, #29
 800480e:	d82b      	bhi.n	8004868 <__sflush_r+0xb0>
 8004810:	4a28      	ldr	r2, [pc, #160]	@ (80048b4 <__sflush_r+0xfc>)
 8004812:	410a      	asrs	r2, r1
 8004814:	07d6      	lsls	r6, r2, #31
 8004816:	d427      	bmi.n	8004868 <__sflush_r+0xb0>
 8004818:	2200      	movs	r2, #0
 800481a:	6062      	str	r2, [r4, #4]
 800481c:	6922      	ldr	r2, [r4, #16]
 800481e:	04d9      	lsls	r1, r3, #19
 8004820:	6022      	str	r2, [r4, #0]
 8004822:	d504      	bpl.n	800482e <__sflush_r+0x76>
 8004824:	1c42      	adds	r2, r0, #1
 8004826:	d101      	bne.n	800482c <__sflush_r+0x74>
 8004828:	682b      	ldr	r3, [r5, #0]
 800482a:	b903      	cbnz	r3, 800482e <__sflush_r+0x76>
 800482c:	6560      	str	r0, [r4, #84]	@ 0x54
 800482e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004830:	602f      	str	r7, [r5, #0]
 8004832:	b1b9      	cbz	r1, 8004864 <__sflush_r+0xac>
 8004834:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004838:	4299      	cmp	r1, r3
 800483a:	d002      	beq.n	8004842 <__sflush_r+0x8a>
 800483c:	4628      	mov	r0, r5
 800483e:	f7ff fb49 	bl	8003ed4 <_free_r>
 8004842:	2300      	movs	r3, #0
 8004844:	6363      	str	r3, [r4, #52]	@ 0x34
 8004846:	e00d      	b.n	8004864 <__sflush_r+0xac>
 8004848:	2301      	movs	r3, #1
 800484a:	4628      	mov	r0, r5
 800484c:	47b0      	blx	r6
 800484e:	4602      	mov	r2, r0
 8004850:	1c50      	adds	r0, r2, #1
 8004852:	d1c9      	bne.n	80047e8 <__sflush_r+0x30>
 8004854:	682b      	ldr	r3, [r5, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d0c6      	beq.n	80047e8 <__sflush_r+0x30>
 800485a:	2b1d      	cmp	r3, #29
 800485c:	d001      	beq.n	8004862 <__sflush_r+0xaa>
 800485e:	2b16      	cmp	r3, #22
 8004860:	d11d      	bne.n	800489e <__sflush_r+0xe6>
 8004862:	602f      	str	r7, [r5, #0]
 8004864:	2000      	movs	r0, #0
 8004866:	e021      	b.n	80048ac <__sflush_r+0xf4>
 8004868:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800486c:	b21b      	sxth	r3, r3
 800486e:	e01a      	b.n	80048a6 <__sflush_r+0xee>
 8004870:	690f      	ldr	r7, [r1, #16]
 8004872:	2f00      	cmp	r7, #0
 8004874:	d0f6      	beq.n	8004864 <__sflush_r+0xac>
 8004876:	0793      	lsls	r3, r2, #30
 8004878:	bf18      	it	ne
 800487a:	2300      	movne	r3, #0
 800487c:	680e      	ldr	r6, [r1, #0]
 800487e:	bf08      	it	eq
 8004880:	694b      	ldreq	r3, [r1, #20]
 8004882:	1bf6      	subs	r6, r6, r7
 8004884:	600f      	str	r7, [r1, #0]
 8004886:	608b      	str	r3, [r1, #8]
 8004888:	2e00      	cmp	r6, #0
 800488a:	ddeb      	ble.n	8004864 <__sflush_r+0xac>
 800488c:	4633      	mov	r3, r6
 800488e:	463a      	mov	r2, r7
 8004890:	4628      	mov	r0, r5
 8004892:	6a21      	ldr	r1, [r4, #32]
 8004894:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8004898:	47e0      	blx	ip
 800489a:	2800      	cmp	r0, #0
 800489c:	dc07      	bgt.n	80048ae <__sflush_r+0xf6>
 800489e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048a6:	f04f 30ff 	mov.w	r0, #4294967295
 80048aa:	81a3      	strh	r3, [r4, #12]
 80048ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048ae:	4407      	add	r7, r0
 80048b0:	1a36      	subs	r6, r6, r0
 80048b2:	e7e9      	b.n	8004888 <__sflush_r+0xd0>
 80048b4:	dfbffffe 	.word	0xdfbffffe

080048b8 <_fflush_r>:
 80048b8:	b538      	push	{r3, r4, r5, lr}
 80048ba:	690b      	ldr	r3, [r1, #16]
 80048bc:	4605      	mov	r5, r0
 80048be:	460c      	mov	r4, r1
 80048c0:	b913      	cbnz	r3, 80048c8 <_fflush_r+0x10>
 80048c2:	2500      	movs	r5, #0
 80048c4:	4628      	mov	r0, r5
 80048c6:	bd38      	pop	{r3, r4, r5, pc}
 80048c8:	b118      	cbz	r0, 80048d2 <_fflush_r+0x1a>
 80048ca:	6a03      	ldr	r3, [r0, #32]
 80048cc:	b90b      	cbnz	r3, 80048d2 <_fflush_r+0x1a>
 80048ce:	f7ff f8b5 	bl	8003a3c <__sinit>
 80048d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d0f3      	beq.n	80048c2 <_fflush_r+0xa>
 80048da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80048dc:	07d0      	lsls	r0, r2, #31
 80048de:	d404      	bmi.n	80048ea <_fflush_r+0x32>
 80048e0:	0599      	lsls	r1, r3, #22
 80048e2:	d402      	bmi.n	80048ea <_fflush_r+0x32>
 80048e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80048e6:	f7ff fae4 	bl	8003eb2 <__retarget_lock_acquire_recursive>
 80048ea:	4628      	mov	r0, r5
 80048ec:	4621      	mov	r1, r4
 80048ee:	f7ff ff63 	bl	80047b8 <__sflush_r>
 80048f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80048f4:	4605      	mov	r5, r0
 80048f6:	07da      	lsls	r2, r3, #31
 80048f8:	d4e4      	bmi.n	80048c4 <_fflush_r+0xc>
 80048fa:	89a3      	ldrh	r3, [r4, #12]
 80048fc:	059b      	lsls	r3, r3, #22
 80048fe:	d4e1      	bmi.n	80048c4 <_fflush_r+0xc>
 8004900:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004902:	f7ff fad7 	bl	8003eb4 <__retarget_lock_release_recursive>
 8004906:	e7dd      	b.n	80048c4 <_fflush_r+0xc>

08004908 <__swhatbuf_r>:
 8004908:	b570      	push	{r4, r5, r6, lr}
 800490a:	460c      	mov	r4, r1
 800490c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004910:	4615      	mov	r5, r2
 8004912:	2900      	cmp	r1, #0
 8004914:	461e      	mov	r6, r3
 8004916:	b096      	sub	sp, #88	@ 0x58
 8004918:	da0c      	bge.n	8004934 <__swhatbuf_r+0x2c>
 800491a:	89a3      	ldrh	r3, [r4, #12]
 800491c:	2100      	movs	r1, #0
 800491e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004922:	bf14      	ite	ne
 8004924:	2340      	movne	r3, #64	@ 0x40
 8004926:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800492a:	2000      	movs	r0, #0
 800492c:	6031      	str	r1, [r6, #0]
 800492e:	602b      	str	r3, [r5, #0]
 8004930:	b016      	add	sp, #88	@ 0x58
 8004932:	bd70      	pop	{r4, r5, r6, pc}
 8004934:	466a      	mov	r2, sp
 8004936:	f000 f863 	bl	8004a00 <_fstat_r>
 800493a:	2800      	cmp	r0, #0
 800493c:	dbed      	blt.n	800491a <__swhatbuf_r+0x12>
 800493e:	9901      	ldr	r1, [sp, #4]
 8004940:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004944:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004948:	4259      	negs	r1, r3
 800494a:	4159      	adcs	r1, r3
 800494c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004950:	e7eb      	b.n	800492a <__swhatbuf_r+0x22>

08004952 <__smakebuf_r>:
 8004952:	898b      	ldrh	r3, [r1, #12]
 8004954:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004956:	079d      	lsls	r5, r3, #30
 8004958:	4606      	mov	r6, r0
 800495a:	460c      	mov	r4, r1
 800495c:	d507      	bpl.n	800496e <__smakebuf_r+0x1c>
 800495e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004962:	6023      	str	r3, [r4, #0]
 8004964:	6123      	str	r3, [r4, #16]
 8004966:	2301      	movs	r3, #1
 8004968:	6163      	str	r3, [r4, #20]
 800496a:	b003      	add	sp, #12
 800496c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800496e:	466a      	mov	r2, sp
 8004970:	ab01      	add	r3, sp, #4
 8004972:	f7ff ffc9 	bl	8004908 <__swhatbuf_r>
 8004976:	9f00      	ldr	r7, [sp, #0]
 8004978:	4605      	mov	r5, r0
 800497a:	4639      	mov	r1, r7
 800497c:	4630      	mov	r0, r6
 800497e:	f7fe ff45 	bl	800380c <_malloc_r>
 8004982:	b948      	cbnz	r0, 8004998 <__smakebuf_r+0x46>
 8004984:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004988:	059a      	lsls	r2, r3, #22
 800498a:	d4ee      	bmi.n	800496a <__smakebuf_r+0x18>
 800498c:	f023 0303 	bic.w	r3, r3, #3
 8004990:	f043 0302 	orr.w	r3, r3, #2
 8004994:	81a3      	strh	r3, [r4, #12]
 8004996:	e7e2      	b.n	800495e <__smakebuf_r+0xc>
 8004998:	89a3      	ldrh	r3, [r4, #12]
 800499a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800499e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049a2:	81a3      	strh	r3, [r4, #12]
 80049a4:	9b01      	ldr	r3, [sp, #4]
 80049a6:	6020      	str	r0, [r4, #0]
 80049a8:	b15b      	cbz	r3, 80049c2 <__smakebuf_r+0x70>
 80049aa:	4630      	mov	r0, r6
 80049ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049b0:	f000 f838 	bl	8004a24 <_isatty_r>
 80049b4:	b128      	cbz	r0, 80049c2 <__smakebuf_r+0x70>
 80049b6:	89a3      	ldrh	r3, [r4, #12]
 80049b8:	f023 0303 	bic.w	r3, r3, #3
 80049bc:	f043 0301 	orr.w	r3, r3, #1
 80049c0:	81a3      	strh	r3, [r4, #12]
 80049c2:	89a3      	ldrh	r3, [r4, #12]
 80049c4:	431d      	orrs	r5, r3
 80049c6:	81a5      	strh	r5, [r4, #12]
 80049c8:	e7cf      	b.n	800496a <__smakebuf_r+0x18>

080049ca <memmove>:
 80049ca:	4288      	cmp	r0, r1
 80049cc:	b510      	push	{r4, lr}
 80049ce:	eb01 0402 	add.w	r4, r1, r2
 80049d2:	d902      	bls.n	80049da <memmove+0x10>
 80049d4:	4284      	cmp	r4, r0
 80049d6:	4623      	mov	r3, r4
 80049d8:	d807      	bhi.n	80049ea <memmove+0x20>
 80049da:	1e43      	subs	r3, r0, #1
 80049dc:	42a1      	cmp	r1, r4
 80049de:	d008      	beq.n	80049f2 <memmove+0x28>
 80049e0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049e4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80049e8:	e7f8      	b.n	80049dc <memmove+0x12>
 80049ea:	4601      	mov	r1, r0
 80049ec:	4402      	add	r2, r0
 80049ee:	428a      	cmp	r2, r1
 80049f0:	d100      	bne.n	80049f4 <memmove+0x2a>
 80049f2:	bd10      	pop	{r4, pc}
 80049f4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80049f8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80049fc:	e7f7      	b.n	80049ee <memmove+0x24>
	...

08004a00 <_fstat_r>:
 8004a00:	b538      	push	{r3, r4, r5, lr}
 8004a02:	2300      	movs	r3, #0
 8004a04:	4d06      	ldr	r5, [pc, #24]	@ (8004a20 <_fstat_r+0x20>)
 8004a06:	4604      	mov	r4, r0
 8004a08:	4608      	mov	r0, r1
 8004a0a:	4611      	mov	r1, r2
 8004a0c:	602b      	str	r3, [r5, #0]
 8004a0e:	f7fc f9df 	bl	8000dd0 <_fstat>
 8004a12:	1c43      	adds	r3, r0, #1
 8004a14:	d102      	bne.n	8004a1c <_fstat_r+0x1c>
 8004a16:	682b      	ldr	r3, [r5, #0]
 8004a18:	b103      	cbz	r3, 8004a1c <_fstat_r+0x1c>
 8004a1a:	6023      	str	r3, [r4, #0]
 8004a1c:	bd38      	pop	{r3, r4, r5, pc}
 8004a1e:	bf00      	nop
 8004a20:	200002a4 	.word	0x200002a4

08004a24 <_isatty_r>:
 8004a24:	b538      	push	{r3, r4, r5, lr}
 8004a26:	2300      	movs	r3, #0
 8004a28:	4d05      	ldr	r5, [pc, #20]	@ (8004a40 <_isatty_r+0x1c>)
 8004a2a:	4604      	mov	r4, r0
 8004a2c:	4608      	mov	r0, r1
 8004a2e:	602b      	str	r3, [r5, #0]
 8004a30:	f7fc f9dd 	bl	8000dee <_isatty>
 8004a34:	1c43      	adds	r3, r0, #1
 8004a36:	d102      	bne.n	8004a3e <_isatty_r+0x1a>
 8004a38:	682b      	ldr	r3, [r5, #0]
 8004a3a:	b103      	cbz	r3, 8004a3e <_isatty_r+0x1a>
 8004a3c:	6023      	str	r3, [r4, #0]
 8004a3e:	bd38      	pop	{r3, r4, r5, pc}
 8004a40:	200002a4 	.word	0x200002a4

08004a44 <memchr>:
 8004a44:	4603      	mov	r3, r0
 8004a46:	b510      	push	{r4, lr}
 8004a48:	b2c9      	uxtb	r1, r1
 8004a4a:	4402      	add	r2, r0
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	4618      	mov	r0, r3
 8004a50:	d101      	bne.n	8004a56 <memchr+0x12>
 8004a52:	2000      	movs	r0, #0
 8004a54:	e003      	b.n	8004a5e <memchr+0x1a>
 8004a56:	7804      	ldrb	r4, [r0, #0]
 8004a58:	3301      	adds	r3, #1
 8004a5a:	428c      	cmp	r4, r1
 8004a5c:	d1f6      	bne.n	8004a4c <memchr+0x8>
 8004a5e:	bd10      	pop	{r4, pc}

08004a60 <_realloc_r>:
 8004a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a64:	4680      	mov	r8, r0
 8004a66:	4615      	mov	r5, r2
 8004a68:	460c      	mov	r4, r1
 8004a6a:	b921      	cbnz	r1, 8004a76 <_realloc_r+0x16>
 8004a6c:	4611      	mov	r1, r2
 8004a6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a72:	f7fe becb 	b.w	800380c <_malloc_r>
 8004a76:	b92a      	cbnz	r2, 8004a84 <_realloc_r+0x24>
 8004a78:	f7ff fa2c 	bl	8003ed4 <_free_r>
 8004a7c:	2400      	movs	r4, #0
 8004a7e:	4620      	mov	r0, r4
 8004a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a84:	f000 f81a 	bl	8004abc <_malloc_usable_size_r>
 8004a88:	4285      	cmp	r5, r0
 8004a8a:	4606      	mov	r6, r0
 8004a8c:	d802      	bhi.n	8004a94 <_realloc_r+0x34>
 8004a8e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004a92:	d8f4      	bhi.n	8004a7e <_realloc_r+0x1e>
 8004a94:	4629      	mov	r1, r5
 8004a96:	4640      	mov	r0, r8
 8004a98:	f7fe feb8 	bl	800380c <_malloc_r>
 8004a9c:	4607      	mov	r7, r0
 8004a9e:	2800      	cmp	r0, #0
 8004aa0:	d0ec      	beq.n	8004a7c <_realloc_r+0x1c>
 8004aa2:	42b5      	cmp	r5, r6
 8004aa4:	462a      	mov	r2, r5
 8004aa6:	4621      	mov	r1, r4
 8004aa8:	bf28      	it	cs
 8004aaa:	4632      	movcs	r2, r6
 8004aac:	f7ff fa03 	bl	8003eb6 <memcpy>
 8004ab0:	4621      	mov	r1, r4
 8004ab2:	4640      	mov	r0, r8
 8004ab4:	f7ff fa0e 	bl	8003ed4 <_free_r>
 8004ab8:	463c      	mov	r4, r7
 8004aba:	e7e0      	b.n	8004a7e <_realloc_r+0x1e>

08004abc <_malloc_usable_size_r>:
 8004abc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ac0:	1f18      	subs	r0, r3, #4
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	bfbc      	itt	lt
 8004ac6:	580b      	ldrlt	r3, [r1, r0]
 8004ac8:	18c0      	addlt	r0, r0, r3
 8004aca:	4770      	bx	lr

08004acc <_init>:
 8004acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ace:	bf00      	nop
 8004ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ad2:	bc08      	pop	{r3}
 8004ad4:	469e      	mov	lr, r3
 8004ad6:	4770      	bx	lr

08004ad8 <_fini>:
 8004ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ada:	bf00      	nop
 8004adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ade:	bc08      	pop	{r3}
 8004ae0:	469e      	mov	lr, r3
 8004ae2:	4770      	bx	lr
